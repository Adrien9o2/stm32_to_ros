
stm32_to_ros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013b48  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019a8  08013d18  08013d18  00014d18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00001238  080156c0  080156c0  000166c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000d48  080168f8  080168f8  000178f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017640  08017640  000191e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08017640  08017640  00018640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08017650  08017650  00018650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08017658  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  200001e0  08017838  000191e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000053c  08017838  0001953c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000191e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000281d7  00000000  00000000  00019210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ab6  00000000  00000000  000413e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002008  00000000  00000000  00044ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018da  00000000  00000000  00046ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028bf0  00000000  00000000  00048782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c243  00000000  00000000  00071372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e43b4  00000000  00000000  0008d5b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00171969  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ca6c  00000000  00000000  001719ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0017e418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013d00 	.word	0x08013d00

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08013d00 	.word	0x08013d00

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cbc:	f001 b8f6 	b.w	8001eac <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	460c      	mov	r4, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14e      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	458c      	cmp	ip, r1
 8000ce8:	4686      	mov	lr, r0
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	d962      	bls.n	8000db6 <__udivmoddi4+0xde>
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0320 	rsb	r3, r2, #32
 8000cf6:	4091      	lsls	r1, r2
 8000cf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	4319      	orrs	r1, r3
 8000d02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f f68c 	uxth.w	r6, ip
 8000d0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d16:	fb07 1114 	mls	r1, r7, r4, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb04 f106 	mul.w	r1, r4, r6
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d2e:	f080 8112 	bcs.w	8000f56 <__udivmoddi4+0x27e>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 810f 	bls.w	8000f56 <__udivmoddi4+0x27e>
 8000d38:	3c02      	subs	r4, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	fa1f f38e 	uxth.w	r3, lr
 8000d42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d46:	fb07 1110 	mls	r1, r7, r0, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f606 	mul.w	r6, r0, r6
 8000d52:	429e      	cmp	r6, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x94>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d5e:	f080 80fc 	bcs.w	8000f5a <__udivmoddi4+0x282>
 8000d62:	429e      	cmp	r6, r3
 8000d64:	f240 80f9 	bls.w	8000f5a <__udivmoddi4+0x282>
 8000d68:	4463      	add	r3, ip
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d72:	2100      	movs	r1, #0
 8000d74:	b11d      	cbz	r5, 8000d7e <__udivmoddi4+0xa6>
 8000d76:	40d3      	lsrs	r3, r2
 8000d78:	2200      	movs	r2, #0
 8000d7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d905      	bls.n	8000d92 <__udivmoddi4+0xba>
 8000d86:	b10d      	cbz	r5, 8000d8c <__udivmoddi4+0xb4>
 8000d88:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e7f5      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000d92:	fab3 f183 	clz	r1, r3
 8000d96:	2900      	cmp	r1, #0
 8000d98:	d146      	bne.n	8000e28 <__udivmoddi4+0x150>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d302      	bcc.n	8000da4 <__udivmoddi4+0xcc>
 8000d9e:	4290      	cmp	r0, r2
 8000da0:	f0c0 80f0 	bcc.w	8000f84 <__udivmoddi4+0x2ac>
 8000da4:	1a86      	subs	r6, r0, r2
 8000da6:	eb64 0303 	sbc.w	r3, r4, r3
 8000daa:	2001      	movs	r0, #1
 8000dac:	2d00      	cmp	r5, #0
 8000dae:	d0e6      	beq.n	8000d7e <__udivmoddi4+0xa6>
 8000db0:	e9c5 6300 	strd	r6, r3, [r5]
 8000db4:	e7e3      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	f040 8090 	bne.w	8000edc <__udivmoddi4+0x204>
 8000dbc:	eba1 040c 	sub.w	r4, r1, ip
 8000dc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc4:	fa1f f78c 	uxth.w	r7, ip
 8000dc8:	2101      	movs	r1, #1
 8000dca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dda:	fb07 f006 	mul.w	r0, r7, r6
 8000dde:	4298      	cmp	r0, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x11c>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x11a>
 8000dec:	4298      	cmp	r0, r3
 8000dee:	f200 80cd 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000df2:	4626      	mov	r6, r4
 8000df4:	1a1c      	subs	r4, r3, r0
 8000df6:	fa1f f38e 	uxth.w	r3, lr
 8000dfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000e02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e06:	fb00 f707 	mul.w	r7, r0, r7
 8000e0a:	429f      	cmp	r7, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x148>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e16:	d202      	bcs.n	8000e1e <__udivmoddi4+0x146>
 8000e18:	429f      	cmp	r7, r3
 8000e1a:	f200 80b0 	bhi.w	8000f7e <__udivmoddi4+0x2a6>
 8000e1e:	4620      	mov	r0, r4
 8000e20:	1bdb      	subs	r3, r3, r7
 8000e22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e26:	e7a5      	b.n	8000d74 <__udivmoddi4+0x9c>
 8000e28:	f1c1 0620 	rsb	r6, r1, #32
 8000e2c:	408b      	lsls	r3, r1
 8000e2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e32:	431f      	orrs	r7, r3
 8000e34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e38:	fa04 f301 	lsl.w	r3, r4, r1
 8000e3c:	ea43 030c 	orr.w	r3, r3, ip
 8000e40:	40f4      	lsrs	r4, r6
 8000e42:	fa00 f801 	lsl.w	r8, r0, r1
 8000e46:	0c38      	lsrs	r0, r7, #16
 8000e48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e50:	fa1f fc87 	uxth.w	ip, r7
 8000e54:	fb00 441e 	mls	r4, r0, lr, r4
 8000e58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e60:	45a1      	cmp	r9, r4
 8000e62:	fa02 f201 	lsl.w	r2, r2, r1
 8000e66:	d90a      	bls.n	8000e7e <__udivmoddi4+0x1a6>
 8000e68:	193c      	adds	r4, r7, r4
 8000e6a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e6e:	f080 8084 	bcs.w	8000f7a <__udivmoddi4+0x2a2>
 8000e72:	45a1      	cmp	r9, r4
 8000e74:	f240 8081 	bls.w	8000f7a <__udivmoddi4+0x2a2>
 8000e78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e7c:	443c      	add	r4, r7
 8000e7e:	eba4 0409 	sub.w	r4, r4, r9
 8000e82:	fa1f f983 	uxth.w	r9, r3
 8000e86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e96:	45a4      	cmp	ip, r4
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x1d2>
 8000e9a:	193c      	adds	r4, r7, r4
 8000e9c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ea0:	d267      	bcs.n	8000f72 <__udivmoddi4+0x29a>
 8000ea2:	45a4      	cmp	ip, r4
 8000ea4:	d965      	bls.n	8000f72 <__udivmoddi4+0x29a>
 8000ea6:	3b02      	subs	r3, #2
 8000ea8:	443c      	add	r4, r7
 8000eaa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eae:	fba0 9302 	umull	r9, r3, r0, r2
 8000eb2:	eba4 040c 	sub.w	r4, r4, ip
 8000eb6:	429c      	cmp	r4, r3
 8000eb8:	46ce      	mov	lr, r9
 8000eba:	469c      	mov	ip, r3
 8000ebc:	d351      	bcc.n	8000f62 <__udivmoddi4+0x28a>
 8000ebe:	d04e      	beq.n	8000f5e <__udivmoddi4+0x286>
 8000ec0:	b155      	cbz	r5, 8000ed8 <__udivmoddi4+0x200>
 8000ec2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eca:	fa04 f606 	lsl.w	r6, r4, r6
 8000ece:	40cb      	lsrs	r3, r1
 8000ed0:	431e      	orrs	r6, r3
 8000ed2:	40cc      	lsrs	r4, r1
 8000ed4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	e750      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000edc:	f1c2 0320 	rsb	r3, r2, #32
 8000ee0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eec:	4094      	lsls	r4, r2
 8000eee:	430c      	orrs	r4, r1
 8000ef0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef8:	fa1f f78c 	uxth.w	r7, ip
 8000efc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f00:	fb08 3110 	mls	r1, r8, r0, r3
 8000f04:	0c23      	lsrs	r3, r4, #16
 8000f06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f0a:	fb00 f107 	mul.w	r1, r0, r7
 8000f0e:	4299      	cmp	r1, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x24c>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f1a:	d22c      	bcs.n	8000f76 <__udivmoddi4+0x29e>
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	d92a      	bls.n	8000f76 <__udivmoddi4+0x29e>
 8000f20:	3802      	subs	r0, #2
 8000f22:	4463      	add	r3, ip
 8000f24:	1a5b      	subs	r3, r3, r1
 8000f26:	b2a4      	uxth	r4, r4
 8000f28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f34:	fb01 f307 	mul.w	r3, r1, r7
 8000f38:	42a3      	cmp	r3, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x276>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f44:	d213      	bcs.n	8000f6e <__udivmoddi4+0x296>
 8000f46:	42a3      	cmp	r3, r4
 8000f48:	d911      	bls.n	8000f6e <__udivmoddi4+0x296>
 8000f4a:	3902      	subs	r1, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	1ae4      	subs	r4, r4, r3
 8000f50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f54:	e739      	b.n	8000dca <__udivmoddi4+0xf2>
 8000f56:	4604      	mov	r4, r0
 8000f58:	e6f0      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e706      	b.n	8000d6c <__udivmoddi4+0x94>
 8000f5e:	45c8      	cmp	r8, r9
 8000f60:	d2ae      	bcs.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f6a:	3801      	subs	r0, #1
 8000f6c:	e7a8      	b.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f6e:	4631      	mov	r1, r6
 8000f70:	e7ed      	b.n	8000f4e <__udivmoddi4+0x276>
 8000f72:	4603      	mov	r3, r0
 8000f74:	e799      	b.n	8000eaa <__udivmoddi4+0x1d2>
 8000f76:	4630      	mov	r0, r6
 8000f78:	e7d4      	b.n	8000f24 <__udivmoddi4+0x24c>
 8000f7a:	46d6      	mov	lr, sl
 8000f7c:	e77f      	b.n	8000e7e <__udivmoddi4+0x1a6>
 8000f7e:	4463      	add	r3, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e74d      	b.n	8000e20 <__udivmoddi4+0x148>
 8000f84:	4606      	mov	r6, r0
 8000f86:	4623      	mov	r3, r4
 8000f88:	4608      	mov	r0, r1
 8000f8a:	e70f      	b.n	8000dac <__udivmoddi4+0xd4>
 8000f8c:	3e02      	subs	r6, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	e730      	b.n	8000df4 <__udivmoddi4+0x11c>
 8000f92:	bf00      	nop

08000f94 <selfrel_offset31>:
 8000f94:	6803      	ldr	r3, [r0, #0]
 8000f96:	005a      	lsls	r2, r3, #1
 8000f98:	bf4c      	ite	mi
 8000f9a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8000f9e:	f023 4300 	bicpl.w	r3, r3, #2147483648	@ 0x80000000
 8000fa2:	4418      	add	r0, r3
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <search_EIT_table>:
 8000fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fac:	b349      	cbz	r1, 8001002 <search_EIT_table+0x5a>
 8000fae:	1e4f      	subs	r7, r1, #1
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	4615      	mov	r5, r2
 8000fb4:	463e      	mov	r6, r7
 8000fb6:	f04f 0900 	mov.w	r9, #0
 8000fba:	eb09 0106 	add.w	r1, r9, r6
 8000fbe:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000fc2:	1049      	asrs	r1, r1, #1
 8000fc4:	eb04 08c1 	add.w	r8, r4, r1, lsl #3
 8000fc8:	4640      	mov	r0, r8
 8000fca:	f7ff ffe3 	bl	8000f94 <selfrel_offset31>
 8000fce:	428f      	cmp	r7, r1
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	ea4f 00c1 	mov.w	r0, r1, lsl #3
 8000fd6:	d00f      	beq.n	8000ff8 <search_EIT_table+0x50>
 8000fd8:	3008      	adds	r0, #8
 8000fda:	42ab      	cmp	r3, r5
 8000fdc:	4420      	add	r0, r4
 8000fde:	d807      	bhi.n	8000ff0 <search_EIT_table+0x48>
 8000fe0:	f7ff ffd8 	bl	8000f94 <selfrel_offset31>
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	42a8      	cmp	r0, r5
 8000fe8:	d208      	bcs.n	8000ffc <search_EIT_table+0x54>
 8000fea:	f101 0901 	add.w	r9, r1, #1
 8000fee:	e7e4      	b.n	8000fba <search_EIT_table+0x12>
 8000ff0:	4589      	cmp	r9, r1
 8000ff2:	d006      	beq.n	8001002 <search_EIT_table+0x5a>
 8000ff4:	1e4e      	subs	r6, r1, #1
 8000ff6:	e7e0      	b.n	8000fba <search_EIT_table+0x12>
 8000ff8:	42ab      	cmp	r3, r5
 8000ffa:	d8f9      	bhi.n	8000ff0 <search_EIT_table+0x48>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001002:	f04f 0800 	mov.w	r8, #0
 8001006:	4640      	mov	r0, r8
 8001008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800100c <__gnu_unwind_get_pr_addr>:
 800100c:	2801      	cmp	r0, #1
 800100e:	d007      	beq.n	8001020 <__gnu_unwind_get_pr_addr+0x14>
 8001010:	2802      	cmp	r0, #2
 8001012:	d007      	beq.n	8001024 <__gnu_unwind_get_pr_addr+0x18>
 8001014:	4b04      	ldr	r3, [pc, #16]	@ (8001028 <__gnu_unwind_get_pr_addr+0x1c>)
 8001016:	2800      	cmp	r0, #0
 8001018:	bf0c      	ite	eq
 800101a:	4618      	moveq	r0, r3
 800101c:	2000      	movne	r0, #0
 800101e:	4770      	bx	lr
 8001020:	4802      	ldr	r0, [pc, #8]	@ (800102c <__gnu_unwind_get_pr_addr+0x20>)
 8001022:	4770      	bx	lr
 8001024:	4802      	ldr	r0, [pc, #8]	@ (8001030 <__gnu_unwind_get_pr_addr+0x24>)
 8001026:	4770      	bx	lr
 8001028:	080016d5 	.word	0x080016d5
 800102c:	080016d9 	.word	0x080016d9
 8001030:	080016dd 	.word	0x080016dd

08001034 <get_eit_entry>:
 8001034:	b530      	push	{r4, r5, lr}
 8001036:	4b21      	ldr	r3, [pc, #132]	@ (80010bc <get_eit_entry+0x88>)
 8001038:	b083      	sub	sp, #12
 800103a:	4604      	mov	r4, r0
 800103c:	1e8d      	subs	r5, r1, #2
 800103e:	b31b      	cbz	r3, 8001088 <get_eit_entry+0x54>
 8001040:	a901      	add	r1, sp, #4
 8001042:	4628      	mov	r0, r5
 8001044:	f3af 8000 	nop.w
 8001048:	b388      	cbz	r0, 80010ae <get_eit_entry+0x7a>
 800104a:	9901      	ldr	r1, [sp, #4]
 800104c:	462a      	mov	r2, r5
 800104e:	f7ff ffab 	bl	8000fa8 <search_EIT_table>
 8001052:	4601      	mov	r1, r0
 8001054:	b358      	cbz	r0, 80010ae <get_eit_entry+0x7a>
 8001056:	f7ff ff9d 	bl	8000f94 <selfrel_offset31>
 800105a:	684b      	ldr	r3, [r1, #4]
 800105c:	64a0      	str	r0, [r4, #72]	@ 0x48
 800105e:	2b01      	cmp	r3, #1
 8001060:	d028      	beq.n	80010b4 <get_eit_entry+0x80>
 8001062:	2b00      	cmp	r3, #0
 8001064:	f101 0004 	add.w	r0, r1, #4
 8001068:	db1f      	blt.n	80010aa <get_eit_entry+0x76>
 800106a:	f7ff ff93 	bl	8000f94 <selfrel_offset31>
 800106e:	2300      	movs	r3, #0
 8001070:	6523      	str	r3, [r4, #80]	@ 0x50
 8001072:	6803      	ldr	r3, [r0, #0]
 8001074:	64e0      	str	r0, [r4, #76]	@ 0x4c
 8001076:	2b00      	cmp	r3, #0
 8001078:	db0d      	blt.n	8001096 <get_eit_entry+0x62>
 800107a:	f7ff ff8b 	bl	8000f94 <selfrel_offset31>
 800107e:	4603      	mov	r3, r0
 8001080:	2000      	movs	r0, #0
 8001082:	6123      	str	r3, [r4, #16]
 8001084:	b003      	add	sp, #12
 8001086:	bd30      	pop	{r4, r5, pc}
 8001088:	4b0d      	ldr	r3, [pc, #52]	@ (80010c0 <get_eit_entry+0x8c>)
 800108a:	490e      	ldr	r1, [pc, #56]	@ (80010c4 <get_eit_entry+0x90>)
 800108c:	1ac9      	subs	r1, r1, r3
 800108e:	10c9      	asrs	r1, r1, #3
 8001090:	4618      	mov	r0, r3
 8001092:	9101      	str	r1, [sp, #4]
 8001094:	e7da      	b.n	800104c <get_eit_entry+0x18>
 8001096:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800109a:	f7ff ffb7 	bl	800100c <__gnu_unwind_get_pr_addr>
 800109e:	4603      	mov	r3, r0
 80010a0:	b128      	cbz	r0, 80010ae <get_eit_entry+0x7a>
 80010a2:	2000      	movs	r0, #0
 80010a4:	6123      	str	r3, [r4, #16]
 80010a6:	b003      	add	sp, #12
 80010a8:	bd30      	pop	{r4, r5, pc}
 80010aa:	2301      	movs	r3, #1
 80010ac:	e7e0      	b.n	8001070 <get_eit_entry+0x3c>
 80010ae:	2300      	movs	r3, #0
 80010b0:	2009      	movs	r0, #9
 80010b2:	e7e6      	b.n	8001082 <get_eit_entry+0x4e>
 80010b4:	2300      	movs	r3, #0
 80010b6:	2005      	movs	r0, #5
 80010b8:	e7e3      	b.n	8001082 <get_eit_entry+0x4e>
 80010ba:	bf00      	nop
 80010bc:	00000000 	.word	0x00000000
 80010c0:	080168f8 	.word	0x080168f8
 80010c4:	08017640 	.word	0x08017640

080010c8 <restore_non_core_regs>:
 80010c8:	6803      	ldr	r3, [r0, #0]
 80010ca:	07da      	lsls	r2, r3, #31
 80010cc:	b510      	push	{r4, lr}
 80010ce:	4604      	mov	r4, r0
 80010d0:	d406      	bmi.n	80010e0 <restore_non_core_regs+0x18>
 80010d2:	079b      	lsls	r3, r3, #30
 80010d4:	f100 0048 	add.w	r0, r0, #72	@ 0x48
 80010d8:	d509      	bpl.n	80010ee <restore_non_core_regs+0x26>
 80010da:	f000 fc69 	bl	80019b0 <__gnu_Unwind_Restore_VFP_D>
 80010de:	6823      	ldr	r3, [r4, #0]
 80010e0:	0759      	lsls	r1, r3, #29
 80010e2:	d509      	bpl.n	80010f8 <restore_non_core_regs+0x30>
 80010e4:	071a      	lsls	r2, r3, #28
 80010e6:	d50e      	bpl.n	8001106 <restore_non_core_regs+0x3e>
 80010e8:	06db      	lsls	r3, r3, #27
 80010ea:	d513      	bpl.n	8001114 <restore_non_core_regs+0x4c>
 80010ec:	bd10      	pop	{r4, pc}
 80010ee:	f000 fc57 	bl	80019a0 <__gnu_Unwind_Restore_VFP>
 80010f2:	6823      	ldr	r3, [r4, #0]
 80010f4:	0759      	lsls	r1, r3, #29
 80010f6:	d4f5      	bmi.n	80010e4 <restore_non_core_regs+0x1c>
 80010f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80010fc:	f000 fc60 	bl	80019c0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001100:	6823      	ldr	r3, [r4, #0]
 8001102:	071a      	lsls	r2, r3, #28
 8001104:	d4f0      	bmi.n	80010e8 <restore_non_core_regs+0x20>
 8001106:	f504 70a8 	add.w	r0, r4, #336	@ 0x150
 800110a:	f000 fc61 	bl	80019d0 <__gnu_Unwind_Restore_WMMXD>
 800110e:	6823      	ldr	r3, [r4, #0]
 8001110:	06db      	lsls	r3, r3, #27
 8001112:	d4eb      	bmi.n	80010ec <restore_non_core_regs+0x24>
 8001114:	f504 70e8 	add.w	r0, r4, #464	@ 0x1d0
 8001118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800111c:	f000 bc9c 	b.w	8001a58 <__gnu_Unwind_Restore_WMMXC>

08001120 <__gnu_unwind_24bit.constprop.0>:
 8001120:	2009      	movs	r0, #9
 8001122:	4770      	bx	lr

08001124 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 8001124:	4603      	mov	r3, r0
 8001126:	6800      	ldr	r0, [r0, #0]
 8001128:	b100      	cbz	r0, 800112c <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 800112a:	4418      	add	r0, r3
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop

08001130 <_Unwind_DebugHook>:
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop

08001134 <unwind_phase2>:
 8001134:	b570      	push	{r4, r5, r6, lr}
 8001136:	4604      	mov	r4, r0
 8001138:	460e      	mov	r6, r1
 800113a:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800113c:	4620      	mov	r0, r4
 800113e:	f7ff ff79 	bl	8001034 <get_eit_entry>
 8001142:	4605      	mov	r5, r0
 8001144:	b988      	cbnz	r0, 800116a <unwind_phase2+0x36>
 8001146:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8001148:	6162      	str	r2, [r4, #20]
 800114a:	6923      	ldr	r3, [r4, #16]
 800114c:	4632      	mov	r2, r6
 800114e:	4621      	mov	r1, r4
 8001150:	2001      	movs	r0, #1
 8001152:	4798      	blx	r3
 8001154:	2808      	cmp	r0, #8
 8001156:	d0f0      	beq.n	800113a <unwind_phase2+0x6>
 8001158:	2807      	cmp	r0, #7
 800115a:	d106      	bne.n	800116a <unwind_phase2+0x36>
 800115c:	4628      	mov	r0, r5
 800115e:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 8001160:	f7ff ffe6 	bl	8001130 <_Unwind_DebugHook>
 8001164:	1d30      	adds	r0, r6, #4
 8001166:	f000 fc0f 	bl	8001988 <__restore_core_regs>
 800116a:	f010 f92d 	bl	80113c8 <abort>
 800116e:	bf00      	nop

08001170 <unwind_phase2_forced>:
 8001170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001174:	1d0d      	adds	r5, r1, #4
 8001176:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800117a:	f8d0 9018 	ldr.w	r9, [r0, #24]
 800117e:	4607      	mov	r7, r0
 8001180:	4614      	mov	r4, r2
 8001182:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001184:	f5ad 7d72 	sub.w	sp, sp, #968	@ 0x3c8
 8001188:	f10d 0c0c 	add.w	ip, sp, #12
 800118c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001190:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001192:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001196:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001198:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800119c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011a0:	ae02      	add	r6, sp, #8
 80011a2:	f04f 0e00 	mov.w	lr, #0
 80011a6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80011aa:	f8c6 e000 	str.w	lr, [r6]
 80011ae:	e020      	b.n	80011f2 <unwind_phase2_forced+0x82>
 80011b0:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80011b8:	4631      	mov	r1, r6
 80011ba:	a87a      	add	r0, sp, #488	@ 0x1e8
 80011bc:	f011 f809 	bl	80121d2 <memcpy>
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	aa7a      	add	r2, sp, #488	@ 0x1e8
 80011c4:	4639      	mov	r1, r7
 80011c6:	4650      	mov	r0, sl
 80011c8:	4798      	blx	r3
 80011ca:	9b88      	ldr	r3, [sp, #544]	@ 0x220
 80011cc:	6473      	str	r3, [r6, #68]	@ 0x44
 80011ce:	4621      	mov	r1, r4
 80011d0:	e9cd 6900 	strd	r6, r9, [sp]
 80011d4:	4605      	mov	r5, r0
 80011d6:	463b      	mov	r3, r7
 80011d8:	463a      	mov	r2, r7
 80011da:	2001      	movs	r0, #1
 80011dc:	47c0      	blx	r8
 80011de:	4604      	mov	r4, r0
 80011e0:	bb18      	cbnz	r0, 800122a <unwind_phase2_forced+0xba>
 80011e2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80011e6:	a97a      	add	r1, sp, #488	@ 0x1e8
 80011e8:	4630      	mov	r0, r6
 80011ea:	f010 fff2 	bl	80121d2 <memcpy>
 80011ee:	2d08      	cmp	r5, #8
 80011f0:	d119      	bne.n	8001226 <unwind_phase2_forced+0xb6>
 80011f2:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 80011f4:	4638      	mov	r0, r7
 80011f6:	f7ff ff1d 	bl	8001034 <get_eit_entry>
 80011fa:	3409      	adds	r4, #9
 80011fc:	fa5f fa84 	uxtb.w	sl, r4
 8001200:	4605      	mov	r5, r0
 8001202:	2800      	cmp	r0, #0
 8001204:	d0d4      	beq.n	80011b0 <unwind_phase2_forced+0x40>
 8001206:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8001208:	6473      	str	r3, [r6, #68]	@ 0x44
 800120a:	463a      	mov	r2, r7
 800120c:	e9cd 6900 	strd	r6, r9, [sp]
 8001210:	463b      	mov	r3, r7
 8001212:	f04a 0110 	orr.w	r1, sl, #16
 8001216:	2001      	movs	r0, #1
 8001218:	47c0      	blx	r8
 800121a:	b930      	cbnz	r0, 800122a <unwind_phase2_forced+0xba>
 800121c:	4628      	mov	r0, r5
 800121e:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 8001222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001226:	2d07      	cmp	r5, #7
 8001228:	d005      	beq.n	8001236 <unwind_phase2_forced+0xc6>
 800122a:	2509      	movs	r5, #9
 800122c:	4628      	mov	r0, r5
 800122e:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 8001232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001236:	4620      	mov	r0, r4
 8001238:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800123a:	f7ff ff79 	bl	8001130 <_Unwind_DebugHook>
 800123e:	a803      	add	r0, sp, #12
 8001240:	f000 fba2 	bl	8001988 <__restore_core_regs>

08001244 <_Unwind_GetCFA>:
 8001244:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8001246:	4770      	bx	lr

08001248 <__gnu_Unwind_RaiseException>:
 8001248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124a:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800124c:	640b      	str	r3, [r1, #64]	@ 0x40
 800124e:	f101 0c04 	add.w	ip, r1, #4
 8001252:	460e      	mov	r6, r1
 8001254:	4605      	mov	r5, r0
 8001256:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800125a:	b0f9      	sub	sp, #484	@ 0x1e4
 800125c:	ac01      	add	r4, sp, #4
 800125e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001260:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001266:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800126a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800126c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8001270:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001274:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001278:	9700      	str	r7, [sp, #0]
 800127a:	e006      	b.n	800128a <__gnu_Unwind_RaiseException+0x42>
 800127c:	692b      	ldr	r3, [r5, #16]
 800127e:	466a      	mov	r2, sp
 8001280:	4629      	mov	r1, r5
 8001282:	4798      	blx	r3
 8001284:	2808      	cmp	r0, #8
 8001286:	4604      	mov	r4, r0
 8001288:	d108      	bne.n	800129c <__gnu_Unwind_RaiseException+0x54>
 800128a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800128c:	4628      	mov	r0, r5
 800128e:	f7ff fed1 	bl	8001034 <get_eit_entry>
 8001292:	2800      	cmp	r0, #0
 8001294:	d0f2      	beq.n	800127c <__gnu_Unwind_RaiseException+0x34>
 8001296:	2009      	movs	r0, #9
 8001298:	b079      	add	sp, #484	@ 0x1e4
 800129a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800129c:	4668      	mov	r0, sp
 800129e:	f7ff ff13 	bl	80010c8 <restore_non_core_regs>
 80012a2:	2c06      	cmp	r4, #6
 80012a4:	d1f7      	bne.n	8001296 <__gnu_Unwind_RaiseException+0x4e>
 80012a6:	4631      	mov	r1, r6
 80012a8:	4628      	mov	r0, r5
 80012aa:	f7ff ff43 	bl	8001134 <unwind_phase2>
 80012ae:	bf00      	nop

080012b0 <__gnu_Unwind_ForcedUnwind>:
 80012b0:	60c1      	str	r1, [r0, #12]
 80012b2:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80012b4:	6182      	str	r2, [r0, #24]
 80012b6:	6419      	str	r1, [r3, #64]	@ 0x40
 80012b8:	2200      	movs	r2, #0
 80012ba:	4619      	mov	r1, r3
 80012bc:	e758      	b.n	8001170 <unwind_phase2_forced>
 80012be:	bf00      	nop

080012c0 <__gnu_Unwind_Resume>:
 80012c0:	b570      	push	{r4, r5, r6, lr}
 80012c2:	68c6      	ldr	r6, [r0, #12]
 80012c4:	6943      	ldr	r3, [r0, #20]
 80012c6:	640b      	str	r3, [r1, #64]	@ 0x40
 80012c8:	b9ae      	cbnz	r6, 80012f6 <__gnu_Unwind_Resume+0x36>
 80012ca:	6903      	ldr	r3, [r0, #16]
 80012cc:	460a      	mov	r2, r1
 80012ce:	4604      	mov	r4, r0
 80012d0:	460d      	mov	r5, r1
 80012d2:	4601      	mov	r1, r0
 80012d4:	2002      	movs	r0, #2
 80012d6:	4798      	blx	r3
 80012d8:	2807      	cmp	r0, #7
 80012da:	d005      	beq.n	80012e8 <__gnu_Unwind_Resume+0x28>
 80012dc:	2808      	cmp	r0, #8
 80012de:	d10f      	bne.n	8001300 <__gnu_Unwind_Resume+0x40>
 80012e0:	4629      	mov	r1, r5
 80012e2:	4620      	mov	r0, r4
 80012e4:	f7ff ff26 	bl	8001134 <unwind_phase2>
 80012e8:	4630      	mov	r0, r6
 80012ea:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 80012ec:	f7ff ff20 	bl	8001130 <_Unwind_DebugHook>
 80012f0:	1d28      	adds	r0, r5, #4
 80012f2:	f000 fb49 	bl	8001988 <__restore_core_regs>
 80012f6:	2201      	movs	r2, #1
 80012f8:	f7ff ff3a 	bl	8001170 <unwind_phase2_forced>
 80012fc:	f010 f864 	bl	80113c8 <abort>
 8001300:	f010 f862 	bl	80113c8 <abort>

08001304 <__gnu_Unwind_Resume_or_Rethrow>:
 8001304:	68c2      	ldr	r2, [r0, #12]
 8001306:	b11a      	cbz	r2, 8001310 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8001308:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 800130a:	640a      	str	r2, [r1, #64]	@ 0x40
 800130c:	2200      	movs	r2, #0
 800130e:	e72f      	b.n	8001170 <unwind_phase2_forced>
 8001310:	e79a      	b.n	8001248 <__gnu_Unwind_RaiseException>
 8001312:	bf00      	nop

08001314 <_Unwind_Complete>:
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop

08001318 <_Unwind_DeleteException>:
 8001318:	6883      	ldr	r3, [r0, #8]
 800131a:	4601      	mov	r1, r0
 800131c:	b10b      	cbz	r3, 8001322 <_Unwind_DeleteException+0xa>
 800131e:	2001      	movs	r0, #1
 8001320:	4718      	bx	r3
 8001322:	4770      	bx	lr

08001324 <_Unwind_VRS_Get>:
 8001324:	2901      	cmp	r1, #1
 8001326:	d010      	beq.n	800134a <_Unwind_VRS_Get+0x26>
 8001328:	d809      	bhi.n	800133e <_Unwind_VRS_Get+0x1a>
 800132a:	b983      	cbnz	r3, 800134e <_Unwind_VRS_Get+0x2a>
 800132c:	2a0f      	cmp	r2, #15
 800132e:	d80e      	bhi.n	800134e <_Unwind_VRS_Get+0x2a>
 8001330:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001334:	4618      	mov	r0, r3
 8001336:	6853      	ldr	r3, [r2, #4]
 8001338:	9a00      	ldr	r2, [sp, #0]
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4770      	bx	lr
 800133e:	3903      	subs	r1, #3
 8001340:	2901      	cmp	r1, #1
 8001342:	bf8c      	ite	hi
 8001344:	2002      	movhi	r0, #2
 8001346:	2001      	movls	r0, #1
 8001348:	4770      	bx	lr
 800134a:	4608      	mov	r0, r1
 800134c:	4770      	bx	lr
 800134e:	2002      	movs	r0, #2
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop

08001354 <_Unwind_GetGR>:
 8001354:	b500      	push	{lr}
 8001356:	b085      	sub	sp, #20
 8001358:	460a      	mov	r2, r1
 800135a:	2300      	movs	r3, #0
 800135c:	a903      	add	r1, sp, #12
 800135e:	9100      	str	r1, [sp, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	f7ff ffdf 	bl	8001324 <_Unwind_VRS_Get>
 8001366:	9803      	ldr	r0, [sp, #12]
 8001368:	b005      	add	sp, #20
 800136a:	f85d fb04 	ldr.w	pc, [sp], #4
 800136e:	bf00      	nop

08001370 <_Unwind_VRS_Set>:
 8001370:	2901      	cmp	r1, #1
 8001372:	d010      	beq.n	8001396 <_Unwind_VRS_Set+0x26>
 8001374:	d809      	bhi.n	800138a <_Unwind_VRS_Set+0x1a>
 8001376:	b983      	cbnz	r3, 800139a <_Unwind_VRS_Set+0x2a>
 8001378:	2a0f      	cmp	r2, #15
 800137a:	d80e      	bhi.n	800139a <_Unwind_VRS_Set+0x2a>
 800137c:	9900      	ldr	r1, [sp, #0]
 800137e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001382:	6809      	ldr	r1, [r1, #0]
 8001384:	6051      	str	r1, [r2, #4]
 8001386:	4618      	mov	r0, r3
 8001388:	4770      	bx	lr
 800138a:	3903      	subs	r1, #3
 800138c:	2901      	cmp	r1, #1
 800138e:	bf8c      	ite	hi
 8001390:	2002      	movhi	r0, #2
 8001392:	2001      	movls	r0, #1
 8001394:	4770      	bx	lr
 8001396:	4608      	mov	r0, r1
 8001398:	4770      	bx	lr
 800139a:	2002      	movs	r0, #2
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop

080013a0 <_Unwind_SetGR>:
 80013a0:	b510      	push	{r4, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	2300      	movs	r3, #0
 80013a6:	ac03      	add	r4, sp, #12
 80013a8:	9203      	str	r2, [sp, #12]
 80013aa:	9400      	str	r4, [sp, #0]
 80013ac:	460a      	mov	r2, r1
 80013ae:	4619      	mov	r1, r3
 80013b0:	f7ff ffde 	bl	8001370 <_Unwind_VRS_Set>
 80013b4:	b004      	add	sp, #16
 80013b6:	bd10      	pop	{r4, pc}

080013b8 <__gnu_Unwind_Backtrace>:
 80013b8:	b570      	push	{r4, r5, r6, lr}
 80013ba:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80013bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013be:	f102 0c04 	add.w	ip, r2, #4
 80013c2:	4605      	mov	r5, r0
 80013c4:	460c      	mov	r4, r1
 80013c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80013ca:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 80013ce:	f10d 0e5c 	add.w	lr, sp, #92	@ 0x5c
 80013d2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80013d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80013da:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80013de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80013e2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80013e6:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80013ea:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80013ee:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80013f2:	9616      	str	r6, [sp, #88]	@ 0x58
 80013f4:	e010      	b.n	8001418 <__gnu_Unwind_Backtrace+0x60>
 80013f6:	f7ff ffd3 	bl	80013a0 <_Unwind_SetGR>
 80013fa:	4621      	mov	r1, r4
 80013fc:	a816      	add	r0, sp, #88	@ 0x58
 80013fe:	47a8      	blx	r5
 8001400:	4603      	mov	r3, r0
 8001402:	aa16      	add	r2, sp, #88	@ 0x58
 8001404:	4669      	mov	r1, sp
 8001406:	2008      	movs	r0, #8
 8001408:	b983      	cbnz	r3, 800142c <__gnu_Unwind_Backtrace+0x74>
 800140a:	9b04      	ldr	r3, [sp, #16]
 800140c:	4798      	blx	r3
 800140e:	2805      	cmp	r0, #5
 8001410:	4606      	mov	r6, r0
 8001412:	d00c      	beq.n	800142e <__gnu_Unwind_Backtrace+0x76>
 8001414:	2809      	cmp	r0, #9
 8001416:	d009      	beq.n	800142c <__gnu_Unwind_Backtrace+0x74>
 8001418:	9926      	ldr	r1, [sp, #152]	@ 0x98
 800141a:	4668      	mov	r0, sp
 800141c:	f7ff fe0a 	bl	8001034 <get_eit_entry>
 8001420:	4603      	mov	r3, r0
 8001422:	466a      	mov	r2, sp
 8001424:	210c      	movs	r1, #12
 8001426:	a816      	add	r0, sp, #88	@ 0x58
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0e4      	beq.n	80013f6 <__gnu_Unwind_Backtrace+0x3e>
 800142c:	2609      	movs	r6, #9
 800142e:	a816      	add	r0, sp, #88	@ 0x58
 8001430:	f7ff fe4a 	bl	80010c8 <restore_non_core_regs>
 8001434:	4630      	mov	r0, r6
 8001436:	f50d 7d0e 	add.w	sp, sp, #568	@ 0x238
 800143a:	bd70      	pop	{r4, r5, r6, pc}

0800143c <__gnu_unwind_pr_common>:
 800143c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001440:	4693      	mov	fp, r2
 8001442:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8001444:	b089      	sub	sp, #36	@ 0x24
 8001446:	460d      	mov	r5, r1
 8001448:	f852 1b04 	ldr.w	r1, [r2], #4
 800144c:	9206      	str	r2, [sp, #24]
 800144e:	f000 0c03 	and.w	ip, r0, #3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d079      	beq.n	800154a <__gnu_unwind_pr_common+0x10e>
 8001456:	0c0c      	lsrs	r4, r1, #16
 8001458:	f88d 401d 	strb.w	r4, [sp, #29]
 800145c:	0409      	lsls	r1, r1, #16
 800145e:	b2e4      	uxtb	r4, r4
 8001460:	9105      	str	r1, [sp, #20]
 8001462:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8001466:	2102      	movs	r1, #2
 8001468:	6d2f      	ldr	r7, [r5, #80]	@ 0x50
 800146a:	f88d 101c 	strb.w	r1, [sp, #28]
 800146e:	f1bc 0f02 	cmp.w	ip, #2
 8001472:	bf08      	it	eq
 8001474:	6baa      	ldreq	r2, [r5, #56]	@ 0x38
 8001476:	f017 0701 	ands.w	r7, r7, #1
 800147a:	d00c      	beq.n	8001496 <__gnu_unwind_pr_common+0x5a>
 800147c:	a905      	add	r1, sp, #20
 800147e:	4658      	mov	r0, fp
 8001480:	f000 fb84 	bl	8001b8c <__gnu_unwind_execute>
 8001484:	b918      	cbnz	r0, 800148e <__gnu_unwind_pr_common+0x52>
 8001486:	2008      	movs	r0, #8
 8001488:	b009      	add	sp, #36	@ 0x24
 800148a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800148e:	2009      	movs	r0, #9
 8001490:	b009      	add	sp, #36	@ 0x24
 8001492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001496:	6816      	ldr	r6, [r2, #0]
 8001498:	2e00      	cmp	r6, #0
 800149a:	d0ef      	beq.n	800147c <__gnu_unwind_pr_common+0x40>
 800149c:	f000 0108 	and.w	r1, r0, #8
 80014a0:	9101      	str	r1, [sp, #4]
 80014a2:	46b2      	mov	sl, r6
 80014a4:	9702      	str	r7, [sp, #8]
 80014a6:	4664      	mov	r4, ip
 80014a8:	4699      	mov	r9, r3
 80014aa:	f1b9 0f02 	cmp.w	r9, #2
 80014ae:	d048      	beq.n	8001542 <__gnu_unwind_pr_common+0x106>
 80014b0:	f8b2 a000 	ldrh.w	sl, [r2]
 80014b4:	8856      	ldrh	r6, [r2, #2]
 80014b6:	f102 0804 	add.w	r8, r2, #4
 80014ba:	6caa      	ldr	r2, [r5, #72]	@ 0x48
 80014bc:	f026 0301 	bic.w	r3, r6, #1
 80014c0:	210f      	movs	r1, #15
 80014c2:	4658      	mov	r0, fp
 80014c4:	189f      	adds	r7, r3, r2
 80014c6:	f7ff ff45 	bl	8001354 <_Unwind_GetGR>
 80014ca:	4287      	cmp	r7, r0
 80014cc:	d837      	bhi.n	800153e <__gnu_unwind_pr_common+0x102>
 80014ce:	f02a 0201 	bic.w	r2, sl, #1
 80014d2:	443a      	add	r2, r7
 80014d4:	4282      	cmp	r2, r0
 80014d6:	bf94      	ite	ls
 80014d8:	2200      	movls	r2, #0
 80014da:	2201      	movhi	r2, #1
 80014dc:	0073      	lsls	r3, r6, #1
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	f00a 0a01 	and.w	sl, sl, #1
 80014e6:	ea43 030a 	orr.w	r3, r3, sl
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d047      	beq.n	800157e <__gnu_unwind_pr_common+0x142>
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d031      	beq.n	8001556 <__gnu_unwind_pr_common+0x11a>
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1cb      	bne.n	800148e <__gnu_unwind_pr_common+0x52>
 80014f6:	b114      	cbz	r4, 80014fe <__gnu_unwind_pr_common+0xc2>
 80014f8:	2a00      	cmp	r2, #0
 80014fa:	f040 80c9 	bne.w	8001690 <__gnu_unwind_pr_common+0x254>
 80014fe:	f108 0204 	add.w	r2, r8, #4
 8001502:	f8d2 a000 	ldr.w	sl, [r2]
 8001506:	f1ba 0f00 	cmp.w	sl, #0
 800150a:	d1ce      	bne.n	80014aa <__gnu_unwind_pr_common+0x6e>
 800150c:	a905      	add	r1, sp, #20
 800150e:	4658      	mov	r0, fp
 8001510:	9f02      	ldr	r7, [sp, #8]
 8001512:	f000 fb3b 	bl	8001b8c <__gnu_unwind_execute>
 8001516:	2800      	cmp	r0, #0
 8001518:	d1b9      	bne.n	800148e <__gnu_unwind_pr_common+0x52>
 800151a:	2f00      	cmp	r7, #0
 800151c:	d0b3      	beq.n	8001486 <__gnu_unwind_pr_common+0x4a>
 800151e:	210f      	movs	r1, #15
 8001520:	4658      	mov	r0, fp
 8001522:	f7ff ff17 	bl	8001354 <_Unwind_GetGR>
 8001526:	210e      	movs	r1, #14
 8001528:	4602      	mov	r2, r0
 800152a:	4658      	mov	r0, fp
 800152c:	f7ff ff38 	bl	80013a0 <_Unwind_SetGR>
 8001530:	4a67      	ldr	r2, [pc, #412]	@ (80016d0 <__gnu_unwind_pr_common+0x294>)
 8001532:	210f      	movs	r1, #15
 8001534:	4658      	mov	r0, fp
 8001536:	f7ff ff33 	bl	80013a0 <_Unwind_SetGR>
 800153a:	2007      	movs	r0, #7
 800153c:	e7a8      	b.n	8001490 <__gnu_unwind_pr_common+0x54>
 800153e:	2200      	movs	r2, #0
 8001540:	e7cc      	b.n	80014dc <__gnu_unwind_pr_common+0xa0>
 8001542:	6856      	ldr	r6, [r2, #4]
 8001544:	f102 0808 	add.w	r8, r2, #8
 8001548:	e7b7      	b.n	80014ba <__gnu_unwind_pr_common+0x7e>
 800154a:	0209      	lsls	r1, r1, #8
 800154c:	9105      	str	r1, [sp, #20]
 800154e:	f88d 301d 	strb.w	r3, [sp, #29]
 8001552:	2103      	movs	r1, #3
 8001554:	e788      	b.n	8001468 <__gnu_unwind_pr_common+0x2c>
 8001556:	f8d8 6000 	ldr.w	r6, [r8]
 800155a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800155e:	2c00      	cmp	r4, #0
 8001560:	d144      	bne.n	80015ec <__gnu_unwind_pr_common+0x1b0>
 8001562:	b122      	cbz	r2, 800156e <__gnu_unwind_pr_common+0x132>
 8001564:	9a01      	ldr	r2, [sp, #4]
 8001566:	2a00      	cmp	r2, #0
 8001568:	d05a      	beq.n	8001620 <__gnu_unwind_pr_common+0x1e4>
 800156a:	2b00      	cmp	r3, #0
 800156c:	d058      	beq.n	8001620 <__gnu_unwind_pr_common+0x1e4>
 800156e:	2e00      	cmp	r6, #0
 8001570:	da01      	bge.n	8001576 <__gnu_unwind_pr_common+0x13a>
 8001572:	f108 0804 	add.w	r8, r8, #4
 8001576:	3301      	adds	r3, #1
 8001578:	eb08 0283 	add.w	r2, r8, r3, lsl #2
 800157c:	e7c1      	b.n	8001502 <__gnu_unwind_pr_common+0xc6>
 800157e:	b9ec      	cbnz	r4, 80015bc <__gnu_unwind_pr_common+0x180>
 8001580:	b1ca      	cbz	r2, 80015b6 <__gnu_unwind_pr_common+0x17a>
 8001582:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001586:	f8d8 2000 	ldr.w	r2, [r8]
 800158a:	1c99      	adds	r1, r3, #2
 800158c:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8001590:	f43f af7d 	beq.w	800148e <__gnu_unwind_pr_common+0x52>
 8001594:	f105 0158 	add.w	r1, r5, #88	@ 0x58
 8001598:	3301      	adds	r3, #1
 800159a:	9104      	str	r1, [sp, #16]
 800159c:	f000 808b 	beq.w	80016b6 <__gnu_unwind_pr_common+0x27a>
 80015a0:	f108 0004 	add.w	r0, r8, #4
 80015a4:	f7ff fdbe 	bl	8001124 <_Unwind_decode_typeinfo_ptr.constprop.0>
 80015a8:	ab04      	add	r3, sp, #16
 80015aa:	4601      	mov	r1, r0
 80015ac:	4628      	mov	r0, r5
 80015ae:	f00f f95f 	bl	8010870 <__cxa_type_match>
 80015b2:	2800      	cmp	r0, #0
 80015b4:	d157      	bne.n	8001666 <__gnu_unwind_pr_common+0x22a>
 80015b6:	f108 0208 	add.w	r2, r8, #8
 80015ba:	e7a2      	b.n	8001502 <__gnu_unwind_pr_common+0xc6>
 80015bc:	210d      	movs	r1, #13
 80015be:	4658      	mov	r0, fp
 80015c0:	f7ff fec8 	bl	8001354 <_Unwind_GetGR>
 80015c4:	6a2b      	ldr	r3, [r5, #32]
 80015c6:	4283      	cmp	r3, r0
 80015c8:	d1f5      	bne.n	80015b6 <__gnu_unwind_pr_common+0x17a>
 80015ca:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80015cc:	4598      	cmp	r8, r3
 80015ce:	d1f2      	bne.n	80015b6 <__gnu_unwind_pr_common+0x17a>
 80015d0:	4640      	mov	r0, r8
 80015d2:	f7ff fcdf 	bl	8000f94 <selfrel_offset31>
 80015d6:	210f      	movs	r1, #15
 80015d8:	4602      	mov	r2, r0
 80015da:	4658      	mov	r0, fp
 80015dc:	f7ff fee0 	bl	80013a0 <_Unwind_SetGR>
 80015e0:	462a      	mov	r2, r5
 80015e2:	2100      	movs	r1, #0
 80015e4:	4658      	mov	r0, fp
 80015e6:	f7ff fedb 	bl	80013a0 <_Unwind_SetGR>
 80015ea:	e7a6      	b.n	800153a <__gnu_unwind_pr_common+0xfe>
 80015ec:	210d      	movs	r1, #13
 80015ee:	4658      	mov	r0, fp
 80015f0:	9303      	str	r3, [sp, #12]
 80015f2:	f7ff feaf 	bl	8001354 <_Unwind_GetGR>
 80015f6:	6a2a      	ldr	r2, [r5, #32]
 80015f8:	9b03      	ldr	r3, [sp, #12]
 80015fa:	4282      	cmp	r2, r0
 80015fc:	d1b7      	bne.n	800156e <__gnu_unwind_pr_common+0x132>
 80015fe:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8001600:	4590      	cmp	r8, r2
 8001602:	d1b4      	bne.n	800156e <__gnu_unwind_pr_common+0x132>
 8001604:	2700      	movs	r7, #0
 8001606:	2204      	movs	r2, #4
 8001608:	e9c5 720b 	strd	r7, r2, [r5, #44]	@ 0x2c
 800160c:	4442      	add	r2, r8
 800160e:	62ab      	str	r3, [r5, #40]	@ 0x28
 8001610:	636a      	str	r2, [r5, #52]	@ 0x34
 8001612:	f8d8 2000 	ldr.w	r2, [r8]
 8001616:	42ba      	cmp	r2, r7
 8001618:	db55      	blt.n	80016c6 <__gnu_unwind_pr_common+0x28a>
 800161a:	2201      	movs	r2, #1
 800161c:	9202      	str	r2, [sp, #8]
 800161e:	e7aa      	b.n	8001576 <__gnu_unwind_pr_common+0x13a>
 8001620:	9403      	str	r4, [sp, #12]
 8001622:	f108 0a04 	add.w	sl, r8, #4
 8001626:	2600      	movs	r6, #0
 8001628:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800162c:	461c      	mov	r4, r3
 800162e:	e00d      	b.n	800164c <__gnu_unwind_pr_common+0x210>
 8001630:	4650      	mov	r0, sl
 8001632:	9704      	str	r7, [sp, #16]
 8001634:	f7ff fd76 	bl	8001124 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8001638:	2200      	movs	r2, #0
 800163a:	4601      	mov	r1, r0
 800163c:	ab04      	add	r3, sp, #16
 800163e:	4628      	mov	r0, r5
 8001640:	3601      	adds	r6, #1
 8001642:	f10a 0a04 	add.w	sl, sl, #4
 8001646:	f00f f913 	bl	8010870 <__cxa_type_match>
 800164a:	b9e0      	cbnz	r0, 8001686 <__gnu_unwind_pr_common+0x24a>
 800164c:	42a6      	cmp	r6, r4
 800164e:	d1ef      	bne.n	8001630 <__gnu_unwind_pr_common+0x1f4>
 8001650:	210d      	movs	r1, #13
 8001652:	4658      	mov	r0, fp
 8001654:	f7ff fe7e 	bl	8001354 <_Unwind_GetGR>
 8001658:	9b04      	ldr	r3, [sp, #16]
 800165a:	f8c5 8028 	str.w	r8, [r5, #40]	@ 0x28
 800165e:	e9c5 0308 	strd	r0, r3, [r5, #32]
 8001662:	2006      	movs	r0, #6
 8001664:	e714      	b.n	8001490 <__gnu_unwind_pr_common+0x54>
 8001666:	4604      	mov	r4, r0
 8001668:	210d      	movs	r1, #13
 800166a:	4658      	mov	r0, fp
 800166c:	f7ff fe72 	bl	8001354 <_Unwind_GetGR>
 8001670:	9e04      	ldr	r6, [sp, #16]
 8001672:	6228      	str	r0, [r5, #32]
 8001674:	2c02      	cmp	r4, #2
 8001676:	bf04      	itt	eq
 8001678:	62ee      	streq	r6, [r5, #44]	@ 0x2c
 800167a:	f105 062c 	addeq.w	r6, r5, #44	@ 0x2c
 800167e:	e9c5 6809 	strd	r6, r8, [r5, #36]	@ 0x24
 8001682:	2006      	movs	r0, #6
 8001684:	e704      	b.n	8001490 <__gnu_unwind_pr_common+0x54>
 8001686:	4623      	mov	r3, r4
 8001688:	f8d8 6000 	ldr.w	r6, [r8]
 800168c:	9c03      	ldr	r4, [sp, #12]
 800168e:	e76e      	b.n	800156e <__gnu_unwind_pr_common+0x132>
 8001690:	4640      	mov	r0, r8
 8001692:	f7ff fc7f 	bl	8000f94 <selfrel_offset31>
 8001696:	f108 0204 	add.w	r2, r8, #4
 800169a:	4604      	mov	r4, r0
 800169c:	63aa      	str	r2, [r5, #56]	@ 0x38
 800169e:	4628      	mov	r0, r5
 80016a0:	f00f f944 	bl	801092c <__cxa_begin_cleanup>
 80016a4:	2800      	cmp	r0, #0
 80016a6:	f43f aef2 	beq.w	800148e <__gnu_unwind_pr_common+0x52>
 80016aa:	4622      	mov	r2, r4
 80016ac:	210f      	movs	r1, #15
 80016ae:	4658      	mov	r0, fp
 80016b0:	f7ff fe76 	bl	80013a0 <_Unwind_SetGR>
 80016b4:	e741      	b.n	800153a <__gnu_unwind_pr_common+0xfe>
 80016b6:	460c      	mov	r4, r1
 80016b8:	4658      	mov	r0, fp
 80016ba:	210d      	movs	r1, #13
 80016bc:	f7ff fe4a 	bl	8001354 <_Unwind_GetGR>
 80016c0:	4626      	mov	r6, r4
 80016c2:	6228      	str	r0, [r5, #32]
 80016c4:	e7db      	b.n	800167e <__gnu_unwind_pr_common+0x242>
 80016c6:	1c58      	adds	r0, r3, #1
 80016c8:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80016cc:	e781      	b.n	80015d2 <__gnu_unwind_pr_common+0x196>
 80016ce:	bf00      	nop
 80016d0:	08011305 	.word	0x08011305

080016d4 <__aeabi_unwind_cpp_pr0>:
 80016d4:	2300      	movs	r3, #0
 80016d6:	e6b1      	b.n	800143c <__gnu_unwind_pr_common>

080016d8 <__aeabi_unwind_cpp_pr1>:
 80016d8:	2301      	movs	r3, #1
 80016da:	e6af      	b.n	800143c <__gnu_unwind_pr_common>

080016dc <__aeabi_unwind_cpp_pr2>:
 80016dc:	2302      	movs	r3, #2
 80016de:	e6ad      	b.n	800143c <__gnu_unwind_pr_common>

080016e0 <_Unwind_VRS_Pop>:
 80016e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016e4:	4606      	mov	r6, r0
 80016e6:	b0c3      	sub	sp, #268	@ 0x10c
 80016e8:	4615      	mov	r5, r2
 80016ea:	461c      	mov	r4, r3
 80016ec:	2904      	cmp	r1, #4
 80016ee:	f200 80d1 	bhi.w	8001894 <_Unwind_VRS_Pop+0x1b4>
 80016f2:	e8df f001 	tbb	[pc, r1]
 80016f6:	51ac      	.short	0x51ac
 80016f8:	2acf      	.short	0x2acf
 80016fa:	03          	.byte	0x03
 80016fb:	00          	.byte	0x00
 80016fc:	2c00      	cmp	r4, #0
 80016fe:	f040 80c9 	bne.w	8001894 <_Unwind_VRS_Pop+0x1b4>
 8001702:	2a10      	cmp	r2, #16
 8001704:	f200 80c6 	bhi.w	8001894 <_Unwind_VRS_Pop+0x1b4>
 8001708:	6803      	ldr	r3, [r0, #0]
 800170a:	06dc      	lsls	r4, r3, #27
 800170c:	f100 80e7 	bmi.w	80018de <_Unwind_VRS_Pop+0x1fe>
 8001710:	af20      	add	r7, sp, #128	@ 0x80
 8001712:	4638      	mov	r0, r7
 8001714:	f000 f9aa 	bl	8001a6c <__gnu_Unwind_Save_WMMXC>
 8001718:	6bb4      	ldr	r4, [r6, #56]	@ 0x38
 800171a:	4639      	mov	r1, r7
 800171c:	2300      	movs	r3, #0
 800171e:	f04f 0c01 	mov.w	ip, #1
 8001722:	fa0c f203 	lsl.w	r2, ip, r3
 8001726:	422a      	tst	r2, r5
 8001728:	4620      	mov	r0, r4
 800172a:	f103 0301 	add.w	r3, r3, #1
 800172e:	d003      	beq.n	8001738 <_Unwind_VRS_Pop+0x58>
 8001730:	f850 2b04 	ldr.w	r2, [r0], #4
 8001734:	600a      	str	r2, [r1, #0]
 8001736:	4604      	mov	r4, r0
 8001738:	2b04      	cmp	r3, #4
 800173a:	f101 0104 	add.w	r1, r1, #4
 800173e:	d1f0      	bne.n	8001722 <_Unwind_VRS_Pop+0x42>
 8001740:	63b4      	str	r4, [r6, #56]	@ 0x38
 8001742:	4638      	mov	r0, r7
 8001744:	f000 f988 	bl	8001a58 <__gnu_Unwind_Restore_WMMXC>
 8001748:	e099      	b.n	800187e <_Unwind_VRS_Pop+0x19e>
 800174a:	2c03      	cmp	r4, #3
 800174c:	f040 80a2 	bne.w	8001894 <_Unwind_VRS_Pop+0x1b4>
 8001750:	b294      	uxth	r4, r2
 8001752:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8001756:	2b10      	cmp	r3, #16
 8001758:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800175c:	f200 809a 	bhi.w	8001894 <_Unwind_VRS_Pop+0x1b4>
 8001760:	6803      	ldr	r3, [r0, #0]
 8001762:	071f      	lsls	r7, r3, #28
 8001764:	f100 80c3 	bmi.w	80018ee <_Unwind_VRS_Pop+0x20e>
 8001768:	af20      	add	r7, sp, #128	@ 0x80
 800176a:	4638      	mov	r0, r7
 800176c:	f000 f952 	bl	8001a14 <__gnu_Unwind_Save_WMMXD>
 8001770:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8001772:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8001776:	b154      	cbz	r4, 800178e <_Unwind_VRS_Pop+0xae>
 8001778:	460b      	mov	r3, r1
 800177a:	1ad0      	subs	r0, r2, r3
 800177c:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8001780:	00e4      	lsls	r4, r4, #3
 8001782:	581d      	ldr	r5, [r3, r0]
 8001784:	f843 5b04 	str.w	r5, [r3], #4
 8001788:	428b      	cmp	r3, r1
 800178a:	d1fa      	bne.n	8001782 <_Unwind_VRS_Pop+0xa2>
 800178c:	4422      	add	r2, r4
 800178e:	63b2      	str	r2, [r6, #56]	@ 0x38
 8001790:	4638      	mov	r0, r7
 8001792:	f000 f91d 	bl	80019d0 <__gnu_Unwind_Restore_WMMXD>
 8001796:	e072      	b.n	800187e <_Unwind_VRS_Pop+0x19e>
 8001798:	2c01      	cmp	r4, #1
 800179a:	ea4f 4812 	mov.w	r8, r2, lsr #16
 800179e:	b295      	uxth	r5, r2
 80017a0:	d071      	beq.n	8001886 <_Unwind_VRS_Pop+0x1a6>
 80017a2:	2c05      	cmp	r4, #5
 80017a4:	d176      	bne.n	8001894 <_Unwind_VRS_Pop+0x1b4>
 80017a6:	eb08 0905 	add.w	r9, r8, r5
 80017aa:	f1b9 0f20 	cmp.w	r9, #32
 80017ae:	d871      	bhi.n	8001894 <_Unwind_VRS_Pop+0x1b4>
 80017b0:	f1b8 0f0f 	cmp.w	r8, #15
 80017b4:	d872      	bhi.n	800189c <_Unwind_VRS_Pop+0x1bc>
 80017b6:	f1b9 0f10 	cmp.w	r9, #16
 80017ba:	6803      	ldr	r3, [r0, #0]
 80017bc:	f200 809f 	bhi.w	80018fe <_Unwind_VRS_Pop+0x21e>
 80017c0:	07d9      	lsls	r1, r3, #31
 80017c2:	d508      	bpl.n	80017d6 <_Unwind_VRS_Pop+0xf6>
 80017c4:	f023 0301 	bic.w	r3, r3, #1
 80017c8:	4630      	mov	r0, r6
 80017ca:	f043 0302 	orr.w	r3, r3, #2
 80017ce:	f840 3b48 	str.w	r3, [r0], #72
 80017d2:	f000 f8f1 	bl	80019b8 <__gnu_Unwind_Save_VFP_D>
 80017d6:	af20      	add	r7, sp, #128	@ 0x80
 80017d8:	4638      	mov	r0, r7
 80017da:	f000 f8ed 	bl	80019b8 <__gnu_Unwind_Save_VFP_D>
 80017de:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 80017e0:	2d00      	cmp	r5, #0
 80017e2:	f000 80b9 	beq.w	8001958 <_Unwind_VRS_Pop+0x278>
 80017e6:	006d      	lsls	r5, r5, #1
 80017e8:	1e6a      	subs	r2, r5, #1
 80017ea:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 80017ee:	2500      	movs	r5, #0
 80017f0:	3201      	adds	r2, #1
 80017f2:	3904      	subs	r1, #4
 80017f4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80017f8:	f853 0b04 	ldr.w	r0, [r3], #4
 80017fc:	f841 0f04 	str.w	r0, [r1, #4]!
 8001800:	4293      	cmp	r3, r2
 8001802:	d1f9      	bne.n	80017f8 <_Unwind_VRS_Pop+0x118>
 8001804:	2d00      	cmp	r5, #0
 8001806:	f000 80a1 	beq.w	800194c <_Unwind_VRS_Pop+0x26c>
 800180a:	4641      	mov	r1, r8
 800180c:	2910      	cmp	r1, #16
 800180e:	bf38      	it	cc
 8001810:	2110      	movcc	r1, #16
 8001812:	006b      	lsls	r3, r5, #1
 8001814:	3910      	subs	r1, #16
 8001816:	466f      	mov	r7, sp
 8001818:	3b01      	subs	r3, #1
 800181a:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800181e:	3301      	adds	r3, #1
 8001820:	3904      	subs	r1, #4
 8001822:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001826:	f852 0b04 	ldr.w	r0, [r2], #4
 800182a:	f841 0f04 	str.w	r0, [r1, #4]!
 800182e:	429a      	cmp	r2, r3
 8001830:	d1f9      	bne.n	8001826 <_Unwind_VRS_Pop+0x146>
 8001832:	2c01      	cmp	r4, #1
 8001834:	f000 8088 	beq.w	8001948 <_Unwind_VRS_Pop+0x268>
 8001838:	f1b8 0f0f 	cmp.w	r8, #15
 800183c:	63b2      	str	r2, [r6, #56]	@ 0x38
 800183e:	d802      	bhi.n	8001846 <_Unwind_VRS_Pop+0x166>
 8001840:	a820      	add	r0, sp, #128	@ 0x80
 8001842:	f000 f8b5 	bl	80019b0 <__gnu_Unwind_Restore_VFP_D>
 8001846:	4638      	mov	r0, r7
 8001848:	f000 f8ba 	bl	80019c0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800184c:	e017      	b.n	800187e <_Unwind_VRS_Pop+0x19e>
 800184e:	bb0c      	cbnz	r4, 8001894 <_Unwind_VRS_Pop+0x1b4>
 8001850:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001852:	4623      	mov	r3, r4
 8001854:	fa1f fc82 	uxth.w	ip, r2
 8001858:	2401      	movs	r4, #1
 800185a:	1d37      	adds	r7, r6, #4
 800185c:	fa04 f103 	lsl.w	r1, r4, r3
 8001860:	ea11 0f0c 	tst.w	r1, ip
 8001864:	4602      	mov	r2, r0
 8001866:	d004      	beq.n	8001872 <_Unwind_VRS_Pop+0x192>
 8001868:	f852 1b04 	ldr.w	r1, [r2], #4
 800186c:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
 8001870:	4610      	mov	r0, r2
 8001872:	3301      	adds	r3, #1
 8001874:	2b10      	cmp	r3, #16
 8001876:	d1f1      	bne.n	800185c <_Unwind_VRS_Pop+0x17c>
 8001878:	04ac      	lsls	r4, r5, #18
 800187a:	d400      	bmi.n	800187e <_Unwind_VRS_Pop+0x19e>
 800187c:	63b0      	str	r0, [r6, #56]	@ 0x38
 800187e:	2000      	movs	r0, #0
 8001880:	b043      	add	sp, #268	@ 0x10c
 8001882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001886:	eb08 0305 	add.w	r3, r8, r5
 800188a:	2b10      	cmp	r3, #16
 800188c:	d802      	bhi.n	8001894 <_Unwind_VRS_Pop+0x1b4>
 800188e:	f1b8 0f10 	cmp.w	r8, #16
 8001892:	d114      	bne.n	80018be <_Unwind_VRS_Pop+0x1de>
 8001894:	2002      	movs	r0, #2
 8001896:	b043      	add	sp, #268	@ 0x10c
 8001898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800189c:	2d00      	cmp	r5, #0
 800189e:	d0ee      	beq.n	800187e <_Unwind_VRS_Pop+0x19e>
 80018a0:	6803      	ldr	r3, [r0, #0]
 80018a2:	075a      	lsls	r2, r3, #29
 80018a4:	d45c      	bmi.n	8001960 <_Unwind_VRS_Pop+0x280>
 80018a6:	466f      	mov	r7, sp
 80018a8:	4638      	mov	r0, r7
 80018aa:	f000 f88d 	bl	80019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80018ae:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 80018b0:	006b      	lsls	r3, r5, #1
 80018b2:	f1a8 0110 	sub.w	r1, r8, #16
 80018b6:	3b01      	subs	r3, #1
 80018b8:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80018bc:	e7af      	b.n	800181e <_Unwind_VRS_Pop+0x13e>
 80018be:	6803      	ldr	r3, [r0, #0]
 80018c0:	07da      	lsls	r2, r3, #31
 80018c2:	d459      	bmi.n	8001978 <_Unwind_VRS_Pop+0x298>
 80018c4:	af20      	add	r7, sp, #128	@ 0x80
 80018c6:	4638      	mov	r0, r7
 80018c8:	f000 f86e 	bl	80019a8 <__gnu_Unwind_Save_VFP>
 80018cc:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 80018ce:	2d00      	cmp	r5, #0
 80018d0:	d189      	bne.n	80017e6 <_Unwind_VRS_Pop+0x106>
 80018d2:	3304      	adds	r3, #4
 80018d4:	63b3      	str	r3, [r6, #56]	@ 0x38
 80018d6:	4638      	mov	r0, r7
 80018d8:	f000 f862 	bl	80019a0 <__gnu_Unwind_Restore_VFP>
 80018dc:	e7cf      	b.n	800187e <_Unwind_VRS_Pop+0x19e>
 80018de:	f023 0310 	bic.w	r3, r3, #16
 80018e2:	6003      	str	r3, [r0, #0]
 80018e4:	f500 70e8 	add.w	r0, r0, #464	@ 0x1d0
 80018e8:	f000 f8c0 	bl	8001a6c <__gnu_Unwind_Save_WMMXC>
 80018ec:	e710      	b.n	8001710 <_Unwind_VRS_Pop+0x30>
 80018ee:	f023 0308 	bic.w	r3, r3, #8
 80018f2:	6003      	str	r3, [r0, #0]
 80018f4:	f500 70a8 	add.w	r0, r0, #336	@ 0x150
 80018f8:	f000 f88c 	bl	8001a14 <__gnu_Unwind_Save_WMMXD>
 80018fc:	e734      	b.n	8001768 <_Unwind_VRS_Pop+0x88>
 80018fe:	07d9      	lsls	r1, r3, #31
 8001900:	d508      	bpl.n	8001914 <_Unwind_VRS_Pop+0x234>
 8001902:	f023 0301 	bic.w	r3, r3, #1
 8001906:	f043 0302 	orr.w	r3, r3, #2
 800190a:	f840 3b48 	str.w	r3, [r0], #72
 800190e:	f000 f853 	bl	80019b8 <__gnu_Unwind_Save_VFP_D>
 8001912:	6833      	ldr	r3, [r6, #0]
 8001914:	0758      	lsls	r0, r3, #29
 8001916:	d506      	bpl.n	8001926 <_Unwind_VRS_Pop+0x246>
 8001918:	4630      	mov	r0, r6
 800191a:	f023 0304 	bic.w	r3, r3, #4
 800191e:	f840 3bd0 	str.w	r3, [r0], #208
 8001922:	f000 f851 	bl	80019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001926:	af20      	add	r7, sp, #128	@ 0x80
 8001928:	4638      	mov	r0, r7
 800192a:	f000 f845 	bl	80019b8 <__gnu_Unwind_Save_VFP_D>
 800192e:	4668      	mov	r0, sp
 8001930:	f000 f84a 	bl	80019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001934:	f1c8 0210 	rsb	r2, r8, #16
 8001938:	0052      	lsls	r2, r2, #1
 800193a:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 800193c:	f1a9 0510 	sub.w	r5, r9, #16
 8001940:	3a01      	subs	r2, #1
 8001942:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8001946:	e753      	b.n	80017f0 <_Unwind_VRS_Pop+0x110>
 8001948:	af20      	add	r7, sp, #128	@ 0x80
 800194a:	e7c2      	b.n	80018d2 <_Unwind_VRS_Pop+0x1f2>
 800194c:	2c01      	cmp	r4, #1
 800194e:	d0c0      	beq.n	80018d2 <_Unwind_VRS_Pop+0x1f2>
 8001950:	f1b8 0f0f 	cmp.w	r8, #15
 8001954:	63b3      	str	r3, [r6, #56]	@ 0x38
 8001956:	d892      	bhi.n	800187e <_Unwind_VRS_Pop+0x19e>
 8001958:	4638      	mov	r0, r7
 800195a:	f000 f829 	bl	80019b0 <__gnu_Unwind_Restore_VFP_D>
 800195e:	e78e      	b.n	800187e <_Unwind_VRS_Pop+0x19e>
 8001960:	f023 0304 	bic.w	r3, r3, #4
 8001964:	f840 3bd0 	str.w	r3, [r0], #208
 8001968:	466f      	mov	r7, sp
 800196a:	f000 f82d 	bl	80019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800196e:	4638      	mov	r0, r7
 8001970:	f000 f82a 	bl	80019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001974:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8001976:	e79b      	b.n	80018b0 <_Unwind_VRS_Pop+0x1d0>
 8001978:	4630      	mov	r0, r6
 800197a:	f023 0303 	bic.w	r3, r3, #3
 800197e:	f840 3b48 	str.w	r3, [r0], #72
 8001982:	f000 f811 	bl	80019a8 <__gnu_Unwind_Save_VFP>
 8001986:	e79d      	b.n	80018c4 <_Unwind_VRS_Pop+0x1e4>

08001988 <__restore_core_regs>:
 8001988:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 800198c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001990:	469c      	mov	ip, r3
 8001992:	46a6      	mov	lr, r4
 8001994:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8001998:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800199c:	46e5      	mov	sp, ip
 800199e:	bd00      	pop	{pc}

080019a0 <__gnu_Unwind_Restore_VFP>:
 80019a0:	ec90 0b21 	fldmiax	r0, {d0-d15}	@ Deprecated
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop

080019a8 <__gnu_Unwind_Save_VFP>:
 80019a8:	ec80 0b21 	fstmiax	r0, {d0-d15}	@ Deprecated
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop

080019b0 <__gnu_Unwind_Restore_VFP_D>:
 80019b0:	ec90 0b20 	vldmia	r0, {d0-d15}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop

080019b8 <__gnu_Unwind_Save_VFP_D>:
 80019b8:	ec80 0b20 	vstmia	r0, {d0-d15}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop

080019c0 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80019c0:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop

080019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80019c8:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop

080019d0 <__gnu_Unwind_Restore_WMMXD>:
 80019d0:	ecf0 0102 	ldfe	f0, [r0], #8
 80019d4:	ecf0 1102 	ldfe	f1, [r0], #8
 80019d8:	ecf0 2102 	ldfe	f2, [r0], #8
 80019dc:	ecf0 3102 	ldfe	f3, [r0], #8
 80019e0:	ecf0 4102 	ldfe	f4, [r0], #8
 80019e4:	ecf0 5102 	ldfe	f5, [r0], #8
 80019e8:	ecf0 6102 	ldfe	f6, [r0], #8
 80019ec:	ecf0 7102 	ldfe	f7, [r0], #8
 80019f0:	ecf0 8102 	ldfp	f0, [r0], #8
 80019f4:	ecf0 9102 	ldfp	f1, [r0], #8
 80019f8:	ecf0 a102 	ldfp	f2, [r0], #8
 80019fc:	ecf0 b102 	ldfp	f3, [r0], #8
 8001a00:	ecf0 c102 	ldfp	f4, [r0], #8
 8001a04:	ecf0 d102 	ldfp	f5, [r0], #8
 8001a08:	ecf0 e102 	ldfp	f6, [r0], #8
 8001a0c:	ecf0 f102 	ldfp	f7, [r0], #8
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop

08001a14 <__gnu_Unwind_Save_WMMXD>:
 8001a14:	ece0 0102 	stfe	f0, [r0], #8
 8001a18:	ece0 1102 	stfe	f1, [r0], #8
 8001a1c:	ece0 2102 	stfe	f2, [r0], #8
 8001a20:	ece0 3102 	stfe	f3, [r0], #8
 8001a24:	ece0 4102 	stfe	f4, [r0], #8
 8001a28:	ece0 5102 	stfe	f5, [r0], #8
 8001a2c:	ece0 6102 	stfe	f6, [r0], #8
 8001a30:	ece0 7102 	stfe	f7, [r0], #8
 8001a34:	ece0 8102 	stfp	f0, [r0], #8
 8001a38:	ece0 9102 	stfp	f1, [r0], #8
 8001a3c:	ece0 a102 	stfp	f2, [r0], #8
 8001a40:	ece0 b102 	stfp	f3, [r0], #8
 8001a44:	ece0 c102 	stfp	f4, [r0], #8
 8001a48:	ece0 d102 	stfp	f5, [r0], #8
 8001a4c:	ece0 e102 	stfp	f6, [r0], #8
 8001a50:	ece0 f102 	stfp	f7, [r0], #8
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop

08001a58 <__gnu_Unwind_Restore_WMMXC>:
 8001a58:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001a5c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001a60:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001a64:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop

08001a6c <__gnu_Unwind_Save_WMMXC>:
 8001a6c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001a70:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001a74:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001a78:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop

08001a80 <_Unwind_RaiseException>:
 8001a80:	46ec      	mov	ip, sp
 8001a82:	b500      	push	{lr}
 8001a84:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001a88:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001a94:	a901      	add	r1, sp, #4
 8001a96:	f7ff fbd7 	bl	8001248 <__gnu_Unwind_RaiseException>
 8001a9a:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001a9e:	b012      	add	sp, #72	@ 0x48
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop

08001aa4 <_Unwind_Resume>:
 8001aa4:	46ec      	mov	ip, sp
 8001aa6:	b500      	push	{lr}
 8001aa8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001aac:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001ab8:	a901      	add	r1, sp, #4
 8001aba:	f7ff fc01 	bl	80012c0 <__gnu_Unwind_Resume>
 8001abe:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001ac2:	b012      	add	sp, #72	@ 0x48
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop

08001ac8 <_Unwind_Resume_or_Rethrow>:
 8001ac8:	46ec      	mov	ip, sp
 8001aca:	b500      	push	{lr}
 8001acc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001ad0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001adc:	a901      	add	r1, sp, #4
 8001ade:	f7ff fc11 	bl	8001304 <__gnu_Unwind_Resume_or_Rethrow>
 8001ae2:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001ae6:	b012      	add	sp, #72	@ 0x48
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop

08001aec <_Unwind_ForcedUnwind>:
 8001aec:	46ec      	mov	ip, sp
 8001aee:	b500      	push	{lr}
 8001af0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001af4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001af8:	f04f 0300 	mov.w	r3, #0
 8001afc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001b00:	ab01      	add	r3, sp, #4
 8001b02:	f7ff fbd5 	bl	80012b0 <__gnu_Unwind_ForcedUnwind>
 8001b06:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001b0a:	b012      	add	sp, #72	@ 0x48
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop

08001b10 <_Unwind_Backtrace>:
 8001b10:	46ec      	mov	ip, sp
 8001b12:	b500      	push	{lr}
 8001b14:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001b18:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001b1c:	f04f 0300 	mov.w	r3, #0
 8001b20:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001b24:	aa01      	add	r2, sp, #4
 8001b26:	f7ff fc47 	bl	80013b8 <__gnu_Unwind_Backtrace>
 8001b2a:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001b2e:	b012      	add	sp, #72	@ 0x48
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop

08001b34 <next_unwind_byte>:
 8001b34:	7a02      	ldrb	r2, [r0, #8]
 8001b36:	4603      	mov	r3, r0
 8001b38:	b97a      	cbnz	r2, 8001b5a <next_unwind_byte+0x26>
 8001b3a:	7a42      	ldrb	r2, [r0, #9]
 8001b3c:	b1a2      	cbz	r2, 8001b68 <next_unwind_byte+0x34>
 8001b3e:	6841      	ldr	r1, [r0, #4]
 8001b40:	3a01      	subs	r2, #1
 8001b42:	b410      	push	{r4}
 8001b44:	7242      	strb	r2, [r0, #9]
 8001b46:	6808      	ldr	r0, [r1, #0]
 8001b48:	2203      	movs	r2, #3
 8001b4a:	1d0c      	adds	r4, r1, #4
 8001b4c:	721a      	strb	r2, [r3, #8]
 8001b4e:	0202      	lsls	r2, r0, #8
 8001b50:	605c      	str	r4, [r3, #4]
 8001b52:	0e00      	lsrs	r0, r0, #24
 8001b54:	bc10      	pop	{r4}
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	4770      	bx	lr
 8001b5a:	6800      	ldr	r0, [r0, #0]
 8001b5c:	3a01      	subs	r2, #1
 8001b5e:	721a      	strb	r2, [r3, #8]
 8001b60:	0202      	lsls	r2, r0, #8
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	0e00      	lsrs	r0, r0, #24
 8001b66:	4770      	bx	lr
 8001b68:	20b0      	movs	r0, #176	@ 0xb0
 8001b6a:	4770      	bx	lr

08001b6c <_Unwind_GetGR.constprop.0>:
 8001b6c:	b500      	push	{lr}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	2300      	movs	r3, #0
 8001b72:	aa03      	add	r2, sp, #12
 8001b74:	9200      	str	r2, [sp, #0]
 8001b76:	4619      	mov	r1, r3
 8001b78:	220c      	movs	r2, #12
 8001b7a:	f7ff fbd3 	bl	8001324 <_Unwind_VRS_Get>
 8001b7e:	9803      	ldr	r0, [sp, #12]
 8001b80:	b005      	add	sp, #20
 8001b82:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b86:	bf00      	nop

08001b88 <unwind_UCB_from_context>:
 8001b88:	e7f0      	b.n	8001b6c <_Unwind_GetGR.constprop.0>
 8001b8a:	bf00      	nop

08001b8c <__gnu_unwind_execute>:
 8001b8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b90:	4606      	mov	r6, r0
 8001b92:	b085      	sub	sp, #20
 8001b94:	460d      	mov	r5, r1
 8001b96:	f04f 0800 	mov.w	r8, #0
 8001b9a:	4628      	mov	r0, r5
 8001b9c:	f7ff ffca 	bl	8001b34 <next_unwind_byte>
 8001ba0:	28b0      	cmp	r0, #176	@ 0xb0
 8001ba2:	4604      	mov	r4, r0
 8001ba4:	f000 80da 	beq.w	8001d5c <__gnu_unwind_execute+0x1d0>
 8001ba8:	0607      	lsls	r7, r0, #24
 8001baa:	d546      	bpl.n	8001c3a <__gnu_unwind_execute+0xae>
 8001bac:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 8001bb0:	2b80      	cmp	r3, #128	@ 0x80
 8001bb2:	d05e      	beq.n	8001c72 <__gnu_unwind_execute+0xe6>
 8001bb4:	2bb0      	cmp	r3, #176	@ 0xb0
 8001bb6:	d073      	beq.n	8001ca0 <__gnu_unwind_execute+0x114>
 8001bb8:	d81b      	bhi.n	8001bf2 <__gnu_unwind_execute+0x66>
 8001bba:	2b90      	cmp	r3, #144	@ 0x90
 8001bbc:	f000 809b 	beq.w	8001cf6 <__gnu_unwind_execute+0x16a>
 8001bc0:	2ba0      	cmp	r3, #160	@ 0xa0
 8001bc2:	d112      	bne.n	8001bea <__gnu_unwind_execute+0x5e>
 8001bc4:	43c3      	mvns	r3, r0
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
 8001bce:	411a      	asrs	r2, r3
 8001bd0:	0701      	lsls	r1, r0, #28
 8001bd2:	f402 627f 	and.w	r2, r2, #4080	@ 0xff0
 8001bd6:	d501      	bpl.n	8001bdc <__gnu_unwind_execute+0x50>
 8001bd8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001bdc:	2300      	movs	r3, #0
 8001bde:	4619      	mov	r1, r3
 8001be0:	4630      	mov	r0, r6
 8001be2:	f7ff fd7d 	bl	80016e0 <_Unwind_VRS_Pop>
 8001be6:	2800      	cmp	r0, #0
 8001be8:	d0d7      	beq.n	8001b9a <__gnu_unwind_execute+0xe>
 8001bea:	2009      	movs	r0, #9
 8001bec:	b005      	add	sp, #20
 8001bee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001bf2:	2bc0      	cmp	r3, #192	@ 0xc0
 8001bf4:	d16d      	bne.n	8001cd2 <__gnu_unwind_execute+0x146>
 8001bf6:	28c6      	cmp	r0, #198	@ 0xc6
 8001bf8:	f000 8093 	beq.w	8001d22 <__gnu_unwind_execute+0x196>
 8001bfc:	28c7      	cmp	r0, #199	@ 0xc7
 8001bfe:	f000 80b2 	beq.w	8001d66 <__gnu_unwind_execute+0x1da>
 8001c02:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8001c06:	2bc0      	cmp	r3, #192	@ 0xc0
 8001c08:	f000 80d2 	beq.w	8001db0 <__gnu_unwind_execute+0x224>
 8001c0c:	28c8      	cmp	r0, #200	@ 0xc8
 8001c0e:	f000 80dd 	beq.w	8001dcc <__gnu_unwind_execute+0x240>
 8001c12:	28c9      	cmp	r0, #201	@ 0xc9
 8001c14:	d1e9      	bne.n	8001bea <__gnu_unwind_execute+0x5e>
 8001c16:	4628      	mov	r0, r5
 8001c18:	f7ff ff8c 	bl	8001b34 <next_unwind_byte>
 8001c1c:	0302      	lsls	r2, r0, #12
 8001c1e:	f000 000f 	and.w	r0, r0, #15
 8001c22:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001c26:	3001      	adds	r0, #1
 8001c28:	4302      	orrs	r2, r0
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	2305      	movs	r3, #5
 8001c2e:	4630      	mov	r0, r6
 8001c30:	f7ff fd56 	bl	80016e0 <_Unwind_VRS_Pop>
 8001c34:	2800      	cmp	r0, #0
 8001c36:	d0b0      	beq.n	8001b9a <__gnu_unwind_execute+0xe>
 8001c38:	e7d7      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001c3a:	0083      	lsls	r3, r0, #2
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	1d1f      	adds	r7, r3, #4
 8001c40:	f10d 090c 	add.w	r9, sp, #12
 8001c44:	2300      	movs	r3, #0
 8001c46:	4619      	mov	r1, r3
 8001c48:	f8cd 9000 	str.w	r9, [sp]
 8001c4c:	220d      	movs	r2, #13
 8001c4e:	4630      	mov	r0, r6
 8001c50:	f7ff fb68 	bl	8001324 <_Unwind_VRS_Get>
 8001c54:	9b03      	ldr	r3, [sp, #12]
 8001c56:	f8cd 9000 	str.w	r9, [sp]
 8001c5a:	0660      	lsls	r0, r4, #25
 8001c5c:	bf4c      	ite	mi
 8001c5e:	1bdf      	submi	r7, r3, r7
 8001c60:	18ff      	addpl	r7, r7, r3
 8001c62:	2300      	movs	r3, #0
 8001c64:	220d      	movs	r2, #13
 8001c66:	4619      	mov	r1, r3
 8001c68:	4630      	mov	r0, r6
 8001c6a:	9703      	str	r7, [sp, #12]
 8001c6c:	f7ff fb80 	bl	8001370 <_Unwind_VRS_Set>
 8001c70:	e793      	b.n	8001b9a <__gnu_unwind_execute+0xe>
 8001c72:	4628      	mov	r0, r5
 8001c74:	f7ff ff5e 	bl	8001b34 <next_unwind_byte>
 8001c78:	0224      	lsls	r4, r4, #8
 8001c7a:	4320      	orrs	r0, r4
 8001c7c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001c80:	d0b3      	beq.n	8001bea <__gnu_unwind_execute+0x5e>
 8001c82:	0104      	lsls	r4, r0, #4
 8001c84:	2300      	movs	r3, #0
 8001c86:	b2a2      	uxth	r2, r4
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4630      	mov	r0, r6
 8001c8c:	f7ff fd28 	bl	80016e0 <_Unwind_VRS_Pop>
 8001c90:	2800      	cmp	r0, #0
 8001c92:	d1aa      	bne.n	8001bea <__gnu_unwind_execute+0x5e>
 8001c94:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 8001c98:	bf18      	it	ne
 8001c9a:	f04f 0801 	movne.w	r8, #1
 8001c9e:	e77c      	b.n	8001b9a <__gnu_unwind_execute+0xe>
 8001ca0:	28b1      	cmp	r0, #177	@ 0xb1
 8001ca2:	d051      	beq.n	8001d48 <__gnu_unwind_execute+0x1bc>
 8001ca4:	28b2      	cmp	r0, #178	@ 0xb2
 8001ca6:	f000 80ad 	beq.w	8001e04 <__gnu_unwind_execute+0x278>
 8001caa:	28b3      	cmp	r0, #179	@ 0xb3
 8001cac:	d06d      	beq.n	8001d8a <__gnu_unwind_execute+0x1fe>
 8001cae:	f000 03fc 	and.w	r3, r0, #252	@ 0xfc
 8001cb2:	2bb4      	cmp	r3, #180	@ 0xb4
 8001cb4:	d099      	beq.n	8001bea <__gnu_unwind_execute+0x5e>
 8001cb6:	f000 0207 	and.w	r2, r0, #7
 8001cba:	3201      	adds	r2, #1
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4630      	mov	r0, r6
 8001cc6:	f7ff fd0b 	bl	80016e0 <_Unwind_VRS_Pop>
 8001cca:	2800      	cmp	r0, #0
 8001ccc:	f43f af65 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001cd0:	e78b      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001cd2:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8001cd6:	2bd0      	cmp	r3, #208	@ 0xd0
 8001cd8:	d187      	bne.n	8001bea <__gnu_unwind_execute+0x5e>
 8001cda:	f000 0207 	and.w	r2, r0, #7
 8001cde:	3201      	adds	r2, #1
 8001ce0:	2305      	movs	r3, #5
 8001ce2:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	4630      	mov	r0, r6
 8001cea:	f7ff fcf9 	bl	80016e0 <_Unwind_VRS_Pop>
 8001cee:	2800      	cmp	r0, #0
 8001cf0:	f43f af53 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001cf4:	e779      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001cf6:	f000 030d 	and.w	r3, r0, #13
 8001cfa:	2b0d      	cmp	r3, #13
 8001cfc:	f43f af75 	beq.w	8001bea <__gnu_unwind_execute+0x5e>
 8001d00:	af03      	add	r7, sp, #12
 8001d02:	2300      	movs	r3, #0
 8001d04:	f000 020f 	and.w	r2, r0, #15
 8001d08:	4619      	mov	r1, r3
 8001d0a:	9700      	str	r7, [sp, #0]
 8001d0c:	4630      	mov	r0, r6
 8001d0e:	f7ff fb09 	bl	8001324 <_Unwind_VRS_Get>
 8001d12:	2300      	movs	r3, #0
 8001d14:	9700      	str	r7, [sp, #0]
 8001d16:	220d      	movs	r2, #13
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4630      	mov	r0, r6
 8001d1c:	f7ff fb28 	bl	8001370 <_Unwind_VRS_Set>
 8001d20:	e73b      	b.n	8001b9a <__gnu_unwind_execute+0xe>
 8001d22:	4628      	mov	r0, r5
 8001d24:	f7ff ff06 	bl	8001b34 <next_unwind_byte>
 8001d28:	0302      	lsls	r2, r0, #12
 8001d2a:	f000 000f 	and.w	r0, r0, #15
 8001d2e:	3001      	adds	r0, #1
 8001d30:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001d34:	2303      	movs	r3, #3
 8001d36:	4302      	orrs	r2, r0
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4630      	mov	r0, r6
 8001d3c:	f7ff fcd0 	bl	80016e0 <_Unwind_VRS_Pop>
 8001d40:	2800      	cmp	r0, #0
 8001d42:	f43f af2a 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001d46:	e750      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001d48:	4628      	mov	r0, r5
 8001d4a:	f7ff fef3 	bl	8001b34 <next_unwind_byte>
 8001d4e:	1e43      	subs	r3, r0, #1
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b0e      	cmp	r3, #14
 8001d54:	4602      	mov	r2, r0
 8001d56:	f67f af41 	bls.w	8001bdc <__gnu_unwind_execute+0x50>
 8001d5a:	e746      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001d5c:	f1b8 0f00 	cmp.w	r8, #0
 8001d60:	d040      	beq.n	8001de4 <__gnu_unwind_execute+0x258>
 8001d62:	2000      	movs	r0, #0
 8001d64:	e742      	b.n	8001bec <__gnu_unwind_execute+0x60>
 8001d66:	4628      	mov	r0, r5
 8001d68:	f7ff fee4 	bl	8001b34 <next_unwind_byte>
 8001d6c:	1e43      	subs	r3, r0, #1
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b0e      	cmp	r3, #14
 8001d72:	4602      	mov	r2, r0
 8001d74:	f63f af39 	bhi.w	8001bea <__gnu_unwind_execute+0x5e>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	2104      	movs	r1, #4
 8001d7c:	4630      	mov	r0, r6
 8001d7e:	f7ff fcaf 	bl	80016e0 <_Unwind_VRS_Pop>
 8001d82:	2800      	cmp	r0, #0
 8001d84:	f43f af09 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001d88:	e72f      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001d8a:	4628      	mov	r0, r5
 8001d8c:	f7ff fed2 	bl	8001b34 <next_unwind_byte>
 8001d90:	0302      	lsls	r2, r0, #12
 8001d92:	f000 000f 	and.w	r0, r0, #15
 8001d96:	3001      	adds	r0, #1
 8001d98:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	4302      	orrs	r2, r0
 8001da0:	4619      	mov	r1, r3
 8001da2:	4630      	mov	r0, r6
 8001da4:	f7ff fc9c 	bl	80016e0 <_Unwind_VRS_Pop>
 8001da8:	2800      	cmp	r0, #0
 8001daa:	f43f aef6 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001dae:	e71c      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001db0:	f000 020f 	and.w	r2, r0, #15
 8001db4:	3201      	adds	r2, #1
 8001db6:	2303      	movs	r3, #3
 8001db8:	f442 2220 	orr.w	r2, r2, #655360	@ 0xa0000
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4630      	mov	r0, r6
 8001dc0:	f7ff fc8e 	bl	80016e0 <_Unwind_VRS_Pop>
 8001dc4:	2800      	cmp	r0, #0
 8001dc6:	f43f aee8 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001dca:	e70e      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001dcc:	4628      	mov	r0, r5
 8001dce:	f7ff feb1 	bl	8001b34 <next_unwind_byte>
 8001dd2:	f000 02f0 	and.w	r2, r0, #240	@ 0xf0
 8001dd6:	f000 030f 	and.w	r3, r0, #15
 8001dda:	3210      	adds	r2, #16
 8001ddc:	3301      	adds	r3, #1
 8001dde:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001de2:	e722      	b.n	8001c2a <__gnu_unwind_execute+0x9e>
 8001de4:	ac03      	add	r4, sp, #12
 8001de6:	4643      	mov	r3, r8
 8001de8:	4641      	mov	r1, r8
 8001dea:	220e      	movs	r2, #14
 8001dec:	9400      	str	r4, [sp, #0]
 8001dee:	4630      	mov	r0, r6
 8001df0:	f7ff fa98 	bl	8001324 <_Unwind_VRS_Get>
 8001df4:	9400      	str	r4, [sp, #0]
 8001df6:	4643      	mov	r3, r8
 8001df8:	220f      	movs	r2, #15
 8001dfa:	4641      	mov	r1, r8
 8001dfc:	4630      	mov	r0, r6
 8001dfe:	f7ff fab7 	bl	8001370 <_Unwind_VRS_Set>
 8001e02:	e7ae      	b.n	8001d62 <__gnu_unwind_execute+0x1d6>
 8001e04:	2300      	movs	r3, #0
 8001e06:	f10d 090c 	add.w	r9, sp, #12
 8001e0a:	220d      	movs	r2, #13
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f8cd 9000 	str.w	r9, [sp]
 8001e12:	4630      	mov	r0, r6
 8001e14:	f7ff fa86 	bl	8001324 <_Unwind_VRS_Get>
 8001e18:	4628      	mov	r0, r5
 8001e1a:	f7ff fe8b 	bl	8001b34 <next_unwind_byte>
 8001e1e:	0602      	lsls	r2, r0, #24
 8001e20:	9c03      	ldr	r4, [sp, #12]
 8001e22:	f04f 0702 	mov.w	r7, #2
 8001e26:	d50b      	bpl.n	8001e40 <__gnu_unwind_execute+0x2b4>
 8001e28:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8001e2c:	40b8      	lsls	r0, r7
 8001e2e:	4404      	add	r4, r0
 8001e30:	4628      	mov	r0, r5
 8001e32:	9403      	str	r4, [sp, #12]
 8001e34:	f7ff fe7e 	bl	8001b34 <next_unwind_byte>
 8001e38:	0603      	lsls	r3, r0, #24
 8001e3a:	f107 0707 	add.w	r7, r7, #7
 8001e3e:	d4f3      	bmi.n	8001e28 <__gnu_unwind_execute+0x29c>
 8001e40:	fa00 f207 	lsl.w	r2, r0, r7
 8001e44:	f504 7401 	add.w	r4, r4, #516	@ 0x204
 8001e48:	4422      	add	r2, r4
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	9203      	str	r2, [sp, #12]
 8001e4e:	f8cd 9000 	str.w	r9, [sp]
 8001e52:	220d      	movs	r2, #13
 8001e54:	4619      	mov	r1, r3
 8001e56:	4630      	mov	r0, r6
 8001e58:	f7ff fa8a 	bl	8001370 <_Unwind_VRS_Set>
 8001e5c:	e69d      	b.n	8001b9a <__gnu_unwind_execute+0xe>
 8001e5e:	bf00      	nop

08001e60 <__gnu_unwind_frame>:
 8001e60:	b510      	push	{r4, lr}
 8001e62:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8001e64:	6853      	ldr	r3, [r2, #4]
 8001e66:	b084      	sub	sp, #16
 8001e68:	f04f 0c03 	mov.w	ip, #3
 8001e6c:	3208      	adds	r2, #8
 8001e6e:	021c      	lsls	r4, r3, #8
 8001e70:	4608      	mov	r0, r1
 8001e72:	0e1b      	lsrs	r3, r3, #24
 8001e74:	a901      	add	r1, sp, #4
 8001e76:	9401      	str	r4, [sp, #4]
 8001e78:	9202      	str	r2, [sp, #8]
 8001e7a:	f88d c00c 	strb.w	ip, [sp, #12]
 8001e7e:	f88d 300d 	strb.w	r3, [sp, #13]
 8001e82:	f7ff fe83 	bl	8001b8c <__gnu_unwind_execute>
 8001e86:	b004      	add	sp, #16
 8001e88:	bd10      	pop	{r4, pc}
 8001e8a:	bf00      	nop

08001e8c <_Unwind_GetRegionStart>:
 8001e8c:	b508      	push	{r3, lr}
 8001e8e:	f7ff fe7b 	bl	8001b88 <unwind_UCB_from_context>
 8001e92:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8001e94:	bd08      	pop	{r3, pc}
 8001e96:	bf00      	nop

08001e98 <_Unwind_GetLanguageSpecificData>:
 8001e98:	b508      	push	{r3, lr}
 8001e9a:	f7ff fe75 	bl	8001b88 <unwind_UCB_from_context>
 8001e9e:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8001ea0:	79c3      	ldrb	r3, [r0, #7]
 8001ea2:	3302      	adds	r3, #2
 8001ea4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001ea8:	bd08      	pop	{r3, pc}
 8001eaa:	bf00      	nop

08001eac <__aeabi_idiv0>:
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop

08001eb0 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>:
	 * @param standby_reset_port port name of the STBY\RST pin of the xnucleo shield.
	 * @param standby_reset_pin pin of the STBY\RST pin of the xnucleo shield.
	 * @param ssel_port     port name of the SSEL pin used for SPI communication.
	 * @param ssel_pin     pin of the SSEL used for SPI communication.
	 */
	XNucleoIHM02A1(L6470_init_t *init_0, L6470_init_t *init_1, SPI_HandleTypeDef *spi, GPIO_TypeDef* standby_reset_port  ,uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin) :spi(spi), standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin)
 8001eb0:	b5b0      	push	{r4, r5, r7, lr}
 8001eb2:	b08a      	sub	sp, #40	@ 0x28
 8001eb4:	af02      	add	r7, sp, #8
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	603b      	str	r3, [r7, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ec8:	619a      	str	r2, [r3, #24]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001ece:	839a      	strh	r2, [r3, #28]
	{
	    HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8001ed0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001ed8:	f00b fb6c 	bl	800d5b4 <HAL_GPIO_WritePin>


	    if( shield_1::count == 0)
 8001edc:	4b69      	ldr	r3, [pc, #420]	@ (8002084 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1d4>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d126      	bne.n	8001f32 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x82>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001ee4:	2008      	movs	r0, #8
 8001ee6:	f00f f872 	bl	8010fce <_Znaj>
 8001eea:	4603      	mov	r3, r0
 8001eec:	461a      	mov	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
 8001ef6:	e018      	b.n	8001f2a <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x7a>
	    	{
				motor_drivers[i] = new L6470<shield_1>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001ef8:	206c      	movs	r0, #108	@ 0x6c
 8001efa:	f00f f857 	bl	8010fac <_Znwj>
 8001efe:	4603      	mov	r3, r0
 8001f00:	461c      	mov	r4, r3
 8001f02:	2501      	movs	r5, #1
 8001f04:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	9301      	str	r3, [sp, #4]
 8001f0a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001f12:	4620      	mov	r0, r4
 8001f14:	f000 fd14 	bl	8002940 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	3301      	adds	r3, #1
 8001f28:	61fb      	str	r3, [r7, #28]
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	dde3      	ble.n	8001ef8 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x48>
 8001f30:	e063      	b.n	8001ffa <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x14a>
	    	}
	    }
	    else if( shield_2::count == 0)
 8001f32:	4b55      	ldr	r3, [pc, #340]	@ (8002088 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1d8>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d126      	bne.n	8001f88 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xd8>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001f3a:	2008      	movs	r0, #8
 8001f3c:	f00f f847 	bl	8010fce <_Znaj>
 8001f40:	4603      	mov	r3, r0
 8001f42:	461a      	mov	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61bb      	str	r3, [r7, #24]
 8001f4c:	e018      	b.n	8001f80 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xd0>
	    	{
				motor_drivers[i] = new L6470<shield_2>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001f4e:	206c      	movs	r0, #108	@ 0x6c
 8001f50:	f00f f82c 	bl	8010fac <_Znwj>
 8001f54:	4603      	mov	r3, r0
 8001f56:	461c      	mov	r4, r3
 8001f58:	2501      	movs	r5, #1
 8001f5a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	9301      	str	r3, [sp, #4]
 8001f60:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f66:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001f68:	4620      	mov	r0, r4
 8001f6a:	f000 fd5b 	bl	8002a24 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	61bb      	str	r3, [r7, #24]
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	dde3      	ble.n	8001f4e <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x9e>
 8001f86:	e038      	b.n	8001ffa <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x14a>
	    	}
	    }
	    else if( shield_3::count == 0)
 8001f88:	4b40      	ldr	r3, [pc, #256]	@ (800208c <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1dc>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d126      	bne.n	8001fde <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x12e>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001f90:	2008      	movs	r0, #8
 8001f92:	f00f f81c 	bl	8010fce <_Znaj>
 8001f96:	4603      	mov	r3, r0
 8001f98:	461a      	mov	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	e018      	b.n	8001fd6 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x126>
	    	{
				motor_drivers[i] = new L6470<shield_3>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001fa4:	206c      	movs	r0, #108	@ 0x6c
 8001fa6:	f00f f801 	bl	8010fac <_Znwj>
 8001faa:	4603      	mov	r3, r0
 8001fac:	461c      	mov	r4, r3
 8001fae:	2501      	movs	r5, #1
 8001fb0:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	9301      	str	r3, [sp, #4]
 8001fb6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fbc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	f000 fda2 	bl	8002b08 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	dde3      	ble.n	8001fa4 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xf4>
 8001fdc:	e00d      	b.n	8001ffa <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x14a>
	    	}
	    }
	    else
	    {
	    	throw std::runtime_error("Cannot create more than 3 shields");
 8001fde:	2008      	movs	r0, #8
 8001fe0:	f00e fbe8 	bl	80107b4 <__cxa_allocate_exception>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	461c      	mov	r4, r3
 8001fe8:	4929      	ldr	r1, [pc, #164]	@ (8002090 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1e0>)
 8001fea:	4620      	mov	r0, r4
 8001fec:	f00f f8e2 	bl	80111b4 <_ZNSt13runtime_errorC1EPKc>
 8001ff0:	4a28      	ldr	r2, [pc, #160]	@ (8002094 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1e4>)
 8001ff2:	4929      	ldr	r1, [pc, #164]	@ (8002098 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1e8>)
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	f00e ffbf 	bl	8010f78 <__cxa_throw>




	    /* Initializing the motor_drivers. */
	    init_motor_drivers[0] = init_0;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	68ba      	ldr	r2, [r7, #8]
 8001ffe:	609a      	str	r2, [r3, #8]
	    init_motor_drivers[1] = init_1;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	60da      	str	r2, [r3, #12]
	    if (!init()) {
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 f84a 	bl	80020a0 <_ZNK14XNucleoIHM02A14initEv>
 800200c:	4603      	mov	r3, r0
 800200e:	f083 0301 	eor.w	r3, r3, #1
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00d      	beq.n	8002034 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x184>
	        /*Do nothing*/
	    	throw std::runtime_error("init failed");
 8002018:	2008      	movs	r0, #8
 800201a:	f00e fbcb 	bl	80107b4 <__cxa_allocate_exception>
 800201e:	4603      	mov	r3, r0
 8002020:	461c      	mov	r4, r3
 8002022:	491e      	ldr	r1, [pc, #120]	@ (800209c <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1ec>)
 8002024:	4620      	mov	r0, r4
 8002026:	f00f f8c5 	bl	80111b4 <_ZNSt13runtime_errorC1EPKc>
 800202a:	4a1a      	ldr	r2, [pc, #104]	@ (8002094 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1e4>)
 800202c:	491a      	ldr	r1, [pc, #104]	@ (8002098 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1e8>)
 800202e:	4620      	mov	r0, r4
 8002030:	f00e ffa2 	bl	8010f78 <__cxa_throw>
	    }
	}
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	e021      	b.n	800207c <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1cc>
				motor_drivers[i] = new L6470<shield_1>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8002038:	2d00      	cmp	r5, #0
 800203a:	d003      	beq.n	8002044 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x194>
 800203c:	216c      	movs	r1, #108	@ 0x6c
 800203e:	4620      	mov	r0, r4
 8002040:	f00e fb5a 	bl	80106f8 <_ZdlPvj>
 8002044:	f00e fbf0 	bl	8010828 <__cxa_end_cleanup>
				motor_drivers[i] = new L6470<shield_2>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8002048:	2d00      	cmp	r5, #0
 800204a:	d003      	beq.n	8002054 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1a4>
 800204c:	216c      	movs	r1, #108	@ 0x6c
 800204e:	4620      	mov	r0, r4
 8002050:	f00e fb52 	bl	80106f8 <_ZdlPvj>
 8002054:	f00e fbe8 	bl	8010828 <__cxa_end_cleanup>
				motor_drivers[i] = new L6470<shield_3>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8002058:	2d00      	cmp	r5, #0
 800205a:	d003      	beq.n	8002064 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1b4>
 800205c:	216c      	movs	r1, #108	@ 0x6c
 800205e:	4620      	mov	r0, r4
 8002060:	f00e fb4a 	bl	80106f8 <_ZdlPvj>
 8002064:	f00e fbe0 	bl	8010828 <__cxa_end_cleanup>
	    	throw std::runtime_error("Cannot create more than 3 shields");
 8002068:	4620      	mov	r0, r4
 800206a:	f00e fbb9 	bl	80107e0 <__cxa_free_exception>
 800206e:	f00e fbdb 	bl	8010828 <__cxa_end_cleanup>
	    	throw std::runtime_error("init failed");
 8002072:	4620      	mov	r0, r4
 8002074:	f00e fbb4 	bl	80107e0 <__cxa_free_exception>
 8002078:	f00e fbd6 	bl	8010828 <__cxa_end_cleanup>
	}
 800207c:	4618      	mov	r0, r3
 800207e:	3720      	adds	r7, #32
 8002080:	46bd      	mov	sp, r7
 8002082:	bdb0      	pop	{r4, r5, r7, pc}
 8002084:	200002a8 	.word	0x200002a8
 8002088:	200002a9 	.word	0x200002a9
 800208c:	200002aa 	.word	0x200002aa
 8002090:	08013d18 	.word	0x08013d18
 8002094:	0801110d 	.word	0x0801110d
 8002098:	080152ec 	.word	0x080152ec
 800209c:	08013d3c 	.word	0x08013d3c

080020a0 <_ZNK14XNucleoIHM02A14initEv>:

    /**
     * @brief Initializing the X_NUCLEO_IHM02A1 board.
     * @retval true if initialization is successful, false otherwise.
     */
    bool init(void) const noexcept
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
    {
        /* Disable the L6470. */

    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6998      	ldr	r0, [r3, #24]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	8b9b      	ldrh	r3, [r3, #28]
 80020b0:	2200      	movs	r2, #0
 80020b2:	4619      	mov	r1, r3
 80020b4:	f00b fa7e 	bl	800d5b4 <HAL_GPIO_WritePin>

    	/* Wait for at least t_STBY,min */
    	HAL_Delay(1);
 80020b8:	2001      	movs	r0, #1
 80020ba:	f00a ff1f 	bl	800cefc <HAL_Delay>

    	/* Enable the L6470. */
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_SET);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6998      	ldr	r0, [r3, #24]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	8b9b      	ldrh	r3, [r3, #28]
 80020c6:	2201      	movs	r2, #1
 80020c8:	4619      	mov	r1, r3
 80020ca:	f00b fa73 	bl	800d5b4 <HAL_GPIO_WritePin>

    	/* Wait for at least t_logicwu */
    	HAL_Delay(1);
 80020ce:	2001      	movs	r0, #1
 80020d0:	f00a ff14 	bl	800cefc <HAL_Delay>



        return init_all_motor_drivers();
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f892 	bl	80021fe <_ZNK14XNucleoIHM02A122init_all_motor_driversEv>
 80020da:	4603      	mov	r3, r0
    }
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <_ZNK14XNucleoIHM02A117get_motor_driversEv>:
    /**
     * @brief  Getting the array of motor_drivers.
     * @param  None.
     * @retval The array of motor_drivers.
     */
    abstractL6470 **get_motor_drivers(void) const noexcept
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
    {
        return motor_drivers;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
    }
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>:
      *         "Prepare<Action>()" methods, one for each motor of the daisy-chain.
      * @param  None.
      * @retval A pointer to the results returned by the motor_drivers, i.e. an
      *         integer value for each of them.
      */
    uint32_t* perform_prepared_actions(void) noexcept
 80020fc:	b5b0      	push	{r4, r5, r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
    {
        /* Performing pre-actions, if needed. */
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
 8002108:	e040      	b.n	800218c <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0x90>
            /*
               "GetPosition()" is needed by "PrepareSetMark()" at the time when the
               prepared actions get performed.
            */
            if (motor_drivers[m]->get_prepared_action() == prepared_action_t::PREPARED_SET_MARK) {
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	6819      	ldr	r1, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4608      	mov	r0, r1
 800212c:	4798      	blx	r3
 800212e:	4603      	mov	r3, r0
 8002130:	2b09      	cmp	r3, #9
 8002132:	bf0c      	ite	eq
 8002134:	2301      	moveq	r3, #1
 8002136:	2300      	movne	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d023      	beq.n	8002186 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0x8a>
                motor_drivers[m]->prepare_set_mark((uint32_t) motor_drivers[m]->get_position());
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	681d      	ldr	r5, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	33cc      	adds	r3, #204	@ 0xcc
 800215a:	681c      	ldr	r4, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	6819      	ldr	r1, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	3314      	adds	r3, #20
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4608      	mov	r0, r1
 800217c:	4798      	blx	r3
 800217e:	4603      	mov	r3, r0
 8002180:	4619      	mov	r1, r3
 8002182:	4628      	mov	r0, r5
 8002184:	47a0      	blx	r4
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	3301      	adds	r3, #1
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	2b01      	cmp	r3, #1
 8002190:	ddbb      	ble.n	800210a <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0xe>
            }
        }
        
        /* Performing the prepared actions and getting back raw data. */
        uint8_t *raw_data = motor_drivers[0]->perform_prepared_actions();
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4610      	mov	r0, r2
 80021a8:	4798      	blx	r3
 80021aa:	4603      	mov	r3, r0
 80021ac:	60fb      	str	r3, [r7, #12]

        /* Processing raw data. */
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 80021ae:	2300      	movs	r3, #0
 80021b0:	613b      	str	r3, [r7, #16]
 80021b2:	e01b      	b.n	80021ec <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0xf0>
            results[m] = motor_drivers[m]->get_result(raw_data);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	6818      	ldr	r0, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68f9      	ldr	r1, [r7, #12]
 80021d6:	4798      	blx	r3
 80021d8:	4603      	mov	r3, r0
 80021da:	4619      	mov	r1, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	3204      	adds	r2, #4
 80021e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	3301      	adds	r3, #1
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	dde0      	ble.n	80021b4 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0xb8>
        }

        /* Returning results. */
        return results;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3310      	adds	r3, #16
    }
 80021f6:	4618      	mov	r0, r3
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bdb0      	pop	{r4, r5, r7, pc}

080021fe <_ZNK14XNucleoIHM02A122init_all_motor_driversEv>:

    /**
     * @brief  Initialize the L6470 motor drivers.
     * @retval true if initialization is successful, false otherwise.
     */
    bool init_all_motor_drivers() const noexcept
 80021fe:	b580      	push	{r7, lr}
 8002200:	b084      	sub	sp, #16
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
    {
    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	e022      	b.n	8002252 <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x54>
    	{
    		if(motor_drivers[i]->init((void*) init_motor_drivers[i]) != COMPONENT_OK)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	6818      	ldr	r0, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	3308      	adds	r3, #8
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68f9      	ldr	r1, [r7, #12]
 800222e:	3102      	adds	r1, #2
 8002230:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002234:	4611      	mov	r1, r2
 8002236:	4798      	blx	r3
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	bf14      	ite	ne
 800223e:	2301      	movne	r3, #1
 8002240:	2300      	moveq	r3, #0
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x4e>
    		{
    			return false;
 8002248:	2300      	movs	r3, #0
 800224a:	e006      	b.n	800225a <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x5c>
    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	3301      	adds	r3, #1
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2b01      	cmp	r3, #1
 8002256:	ddd9      	ble.n	800220c <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0xe>
    		}
    	}
    	return true;
 8002258:	2301      	movs	r3, #1

    }
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>:
  * @param standby_reset_port_shield_2 , port du GPIO du signal de reset du shield 2
  * @param standby_reset_pin_shield_2  , pin  du GPIO du signal de reset du shield 2
  * @param ssel_port_shield_2          , port du GPIO de commmunication SPI pour le shield 2
  * @param ssel_port_shield_2          , pin  du GPIO de commmunication SPI pour le shield 2
  */
BlocMoteurs::BlocMoteurs(SPI_HandleTypeDef *spi,
 8002264:	b5b0      	push	{r4, r5, r7, lr}
 8002266:	b08a      	sub	sp, #40	@ 0x28
 8002268:	af04      	add	r7, sp, #16
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	807b      	strh	r3, [r7, #2]
		GPIO_TypeDef* standby_reset_port_shield_1  ,uint16_t standby_reset_pin_shield_1 ,GPIO_TypeDef* ssel_port_shield_1 , uint16_t ssel_pin_shield_1,
		GPIO_TypeDef* standby_reset_port_shield_2  ,uint16_t standby_reset_pin_shield_2 ,GPIO_TypeDef* ssel_port_shield_2 , uint16_t ssel_pin_shield_2)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	4a44      	ldr	r2, [pc, #272]	@ (8002388 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x124>)
 8002276:	3318      	adds	r3, #24
 8002278:	4611      	mov	r1, r2
 800227a:	22b0      	movs	r2, #176	@ 0xb0
 800227c:	4618      	mov	r0, r3
 800227e:	f00f ffa8 	bl	80121d2 <memcpy>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	4a40      	ldr	r2, [pc, #256]	@ (8002388 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x124>)
 8002286:	33c8      	adds	r3, #200	@ 0xc8
 8002288:	4611      	mov	r1, r2
 800228a:	22b0      	movs	r2, #176	@ 0xb0
 800228c:	4618      	mov	r0, r3
 800228e:	f00f ffa0 	bl	80121d2 <memcpy>
{
	//moteurs à l'arret par défaut
	moteurs_arret = 0;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	701a      	strb	r2, [r3, #0]
	//vitesse par défaut
	max_vitesse = MAX_VITESSE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800229e:	605a      	str	r2, [r3, #4]

    shield_1 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_1, standby_reset_pin_shield_1, ssel_port_shield_1, ssel_pin_shield_1);
 80022a0:	2020      	movs	r0, #32
 80022a2:	f00e fe83 	bl	8010fac <_Znwj>
 80022a6:	4603      	mov	r3, r0
 80022a8:	461c      	mov	r4, r3
 80022aa:	2501      	movs	r5, #1
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f103 0118 	add.w	r1, r3, #24
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 80022b8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80022ba:	9303      	str	r3, [sp, #12]
 80022bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022be:	9302      	str	r3, [sp, #8]
 80022c0:	887b      	ldrh	r3, [r7, #2]
 80022c2:	9301      	str	r3, [sp, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	4620      	mov	r0, r4
 80022cc:	f7ff fdf0 	bl	8001eb0 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	609c      	str	r4, [r3, #8]
    shield_2 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_2, standby_reset_pin_shield_2, ssel_port_shield_2, ssel_pin_shield_2);
 80022d4:	2020      	movs	r0, #32
 80022d6:	f00e fe69 	bl	8010fac <_Znwj>
 80022da:	4603      	mov	r3, r0
 80022dc:	461c      	mov	r4, r3
 80022de:	2501      	movs	r5, #1
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f103 0118 	add.w	r1, r3, #24
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 80022ec:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80022ee:	9303      	str	r3, [sp, #12]
 80022f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022f2:	9302      	str	r3, [sp, #8]
 80022f4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80022f6:	9301      	str	r3, [sp, #4]
 80022f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	4620      	mov	r0, r4
 8002300:	f7ff fdd6 	bl	8001eb0 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	60dc      	str	r4, [r3, #12]
    abstractL6470** moteurs_shield_1 = shield_1->get_motor_drivers();
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff fee9 	bl	80020e4 <_ZNK14XNucleoIHM02A117get_motor_driversEv>
 8002312:	6178      	str	r0, [r7, #20]
    abstractL6470** moteurs_shield_2 = shield_2->get_motor_drivers();
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff fee3 	bl	80020e4 <_ZNK14XNucleoIHM02A117get_motor_driversEv>
 800231e:	6138      	str	r0, [r7, #16]
    moteurs = new abstractL6470*[NMOTEURS];
 8002320:	2010      	movs	r0, #16
 8002322:	f00e fe54 	bl	8010fce <_Znaj>
 8002326:	4603      	mov	r3, r0
 8002328:	461a      	mov	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	611a      	str	r2, [r3, #16]
		moteurs[front_left] = moteurs_shield_1[left];
		moteurs[front_right] = moteurs_shield_1[right];
		moteurs[back_left] = moteurs_shield_2[left];
		moteurs[back_right] = moteurs_shield_2[right];
	#else
		moteurs[front_left] = moteurs_shield_2[left];
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	6812      	ldr	r2, [r2, #0]
 8002336:	601a      	str	r2, [r3, #0]
		moteurs[front_right] = moteurs_shield_2[right];
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	3304      	adds	r3, #4
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	6852      	ldr	r2, [r2, #4]
 8002342:	601a      	str	r2, [r3, #0]
		moteurs[back_left] = moteurs_shield_1[1];
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	3308      	adds	r3, #8
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	6852      	ldr	r2, [r2, #4]
 800234e:	601a      	str	r2, [r3, #0]
		moteurs[back_right] = moteurs_shield_1[0];
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	330c      	adds	r3, #12
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	6812      	ldr	r2, [r2, #0]
 800235a:	601a      	str	r2, [r3, #0]
	#endif



}
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	e00f      	b.n	8002380 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x11c>
    shield_1 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_1, standby_reset_pin_shield_1, ssel_port_shield_1, ssel_pin_shield_1);
 8002360:	2d00      	cmp	r5, #0
 8002362:	d003      	beq.n	800236c <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x108>
 8002364:	2120      	movs	r1, #32
 8002366:	4620      	mov	r0, r4
 8002368:	f00e f9c6 	bl	80106f8 <_ZdlPvj>
 800236c:	f00e fa5c 	bl	8010828 <__cxa_end_cleanup>
    shield_2 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_2, standby_reset_pin_shield_2, ssel_port_shield_2, ssel_pin_shield_2);
 8002370:	2d00      	cmp	r5, #0
 8002372:	d003      	beq.n	800237c <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x118>
 8002374:	2120      	movs	r1, #32
 8002376:	4620      	mov	r0, r4
 8002378:	f00e f9be 	bl	80106f8 <_ZdlPvj>
 800237c:	f00e fa54 	bl	8010828 <__cxa_end_cleanup>
}
 8002380:	4618      	mov	r0, r3
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	bdb0      	pop	{r4, r5, r7, pc}
 8002388:	08013d48 	.word	0x08013d48

0800238c <_ZN11BlocMoteurs11rad_to_stepEf>:

constexpr float RAD_PER_FULL_STEP = (DEG_PER_FULL_STEP*M_PI)/180.0;

float BlocMoteurs::rad_to_step( float rad)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	ed87 0a00 	vstr	s0, [r7]
	return  (rad/RAD_PER_FULL_STEP);
 8002398:	edd7 7a00 	vldr	s15, [r7]
 800239c:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80023b8 <_ZN11BlocMoteurs11rad_to_stepEf+0x2c>
 80023a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80023a4:	eef0 7a66 	vmov.f32	s15, s13
}
 80023a8:	eeb0 0a67 	vmov.f32	s0, s15
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	3d00adfd 	.word	0x3d00adfd

080023bc <_ZN11BlocMoteurs11step_to_radEj>:
float BlocMoteurs::step_to_rad( unsigned int step)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
	return (RAD_PER_FULL_STEP*step);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	ee07 3a90 	vmov	s15, r3
 80023cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023d0:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80023e8 <_ZN11BlocMoteurs11step_to_radEj+0x2c>
 80023d4:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80023d8:	eeb0 0a67 	vmov.f32	s0, s15
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	3d00adfd 	.word	0x3d00adfd

080023ec <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff>:
  * @param  vitesse_normalisee_FR vitesse du moteur Avant droit
  * @param  vitesse_normalisee_BL vitesse du moteur Arriere gauche
  * @param  vitesse_normalisee_BR vitesse du moteur Arriere droit
  */
void BlocMoteurs::commande_vitesses_normalisees(float vitesse_normalisee_FL, float vitesse_normalisee_FR, float vitesse_normalisee_BL, float vitesse_normalisee_BR )
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b094      	sub	sp, #80	@ 0x50
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6178      	str	r0, [r7, #20]
 80023f4:	ed87 0a04 	vstr	s0, [r7, #16]
 80023f8:	edc7 0a03 	vstr	s1, [r7, #12]
 80023fc:	ed87 1a02 	vstr	s2, [r7, #8]
 8002400:	edc7 1a01 	vstr	s3, [r7, #4]
    /////////////////////////////////////////////////////////////
    // Assurance que les parametres sont entre -1 et 1 ////////////////
    vitesse_normalisee_FL = std::min(1.0f, vitesse_normalisee_FL);
 8002404:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002408:	61fb      	str	r3, [r7, #28]
 800240a:	f107 0210 	add.w	r2, r7, #16
 800240e:	f107 031c 	add.w	r3, r7, #28
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f000 fbe9 	bl	8002bec <_ZSt3minIfERKT_S2_S2_>
 800241a:	4603      	mov	r3, r0
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	613b      	str	r3, [r7, #16]
    vitesse_normalisee_FL = std::max(-1.0f, vitesse_normalisee_FL);
 8002420:	4b7f      	ldr	r3, [pc, #508]	@ (8002620 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x234>)
 8002422:	623b      	str	r3, [r7, #32]
 8002424:	f107 0210 	add.w	r2, r7, #16
 8002428:	f107 0320 	add.w	r3, r7, #32
 800242c:	4611      	mov	r1, r2
 800242e:	4618      	mov	r0, r3
 8002430:	f000 fbf5 	bl	8002c1e <_ZSt3maxIfERKT_S2_S2_>
 8002434:	4603      	mov	r3, r0
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	613b      	str	r3, [r7, #16]

    vitesse_normalisee_FR = std::min(1.0f, vitesse_normalisee_FR);
 800243a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800243e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002440:	f107 020c 	add.w	r2, r7, #12
 8002444:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002448:	4611      	mov	r1, r2
 800244a:	4618      	mov	r0, r3
 800244c:	f000 fbce 	bl	8002bec <_ZSt3minIfERKT_S2_S2_>
 8002450:	4603      	mov	r3, r0
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	60fb      	str	r3, [r7, #12]
    vitesse_normalisee_FR = std::max(-1.0f, vitesse_normalisee_FR);
 8002456:	4b72      	ldr	r3, [pc, #456]	@ (8002620 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x234>)
 8002458:	62bb      	str	r3, [r7, #40]	@ 0x28
 800245a:	f107 020c 	add.w	r2, r7, #12
 800245e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002462:	4611      	mov	r1, r2
 8002464:	4618      	mov	r0, r3
 8002466:	f000 fbda 	bl	8002c1e <_ZSt3maxIfERKT_S2_S2_>
 800246a:	4603      	mov	r3, r0
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	60fb      	str	r3, [r7, #12]

    vitesse_normalisee_BL = std::min(1.0f, vitesse_normalisee_BL);
 8002470:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002474:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002476:	f107 0208 	add.w	r2, r7, #8
 800247a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800247e:	4611      	mov	r1, r2
 8002480:	4618      	mov	r0, r3
 8002482:	f000 fbb3 	bl	8002bec <_ZSt3minIfERKT_S2_S2_>
 8002486:	4603      	mov	r3, r0
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	60bb      	str	r3, [r7, #8]
    vitesse_normalisee_BL = std::max(-1.0f, vitesse_normalisee_BL);
 800248c:	4b64      	ldr	r3, [pc, #400]	@ (8002620 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x234>)
 800248e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002490:	f107 0208 	add.w	r2, r7, #8
 8002494:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002498:	4611      	mov	r1, r2
 800249a:	4618      	mov	r0, r3
 800249c:	f000 fbbf 	bl	8002c1e <_ZSt3maxIfERKT_S2_S2_>
 80024a0:	4603      	mov	r3, r0
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	60bb      	str	r3, [r7, #8]

    vitesse_normalisee_BR = std::min(1.0f, vitesse_normalisee_BR);
 80024a6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80024aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80024ac:	1d3a      	adds	r2, r7, #4
 80024ae:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80024b2:	4611      	mov	r1, r2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 fb99 	bl	8002bec <_ZSt3minIfERKT_S2_S2_>
 80024ba:	4603      	mov	r3, r0
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	607b      	str	r3, [r7, #4]
    vitesse_normalisee_BR = std::max(-1.0f, vitesse_normalisee_BR);
 80024c0:	4b57      	ldr	r3, [pc, #348]	@ (8002620 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x234>)
 80024c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024c4:	1d3a      	adds	r2, r7, #4
 80024c6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80024ca:	4611      	mov	r1, r2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f000 fba6 	bl	8002c1e <_ZSt3maxIfERKT_S2_S2_>
 80024d2:	4603      	mov	r3, r0
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	607b      	str	r3, [r7, #4]
    /////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////

    // Détermination du signe des vitesses (logique inversée entre les deux moteurs car placés symétriquement sur le robot et branchement identique)
    StepperMotor::direction_t sens_FL = vitesse_normalisee_FL >= 0.0f ? StepperMotor::FWD : StepperMotor::BWD;;
 80024d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80024dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e4:	db01      	blt.n	80024ea <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0xfe>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x100>
 80024ea:	2300      	movs	r3, #0
 80024ec:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    StepperMotor::direction_t sens_FR = vitesse_normalisee_FR >= 0.0f ? StepperMotor::BWD : StepperMotor::FWD;
 80024f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80024f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024fc:	bfac      	ite	ge
 80024fe:	2301      	movge	r3, #1
 8002500:	2300      	movlt	r3, #0
 8002502:	b2db      	uxtb	r3, r3
 8002504:	f083 0301 	eor.w	r3, r3, #1
 8002508:	b2db      	uxtb	r3, r3
 800250a:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
    StepperMotor::direction_t sens_BL = vitesse_normalisee_BL >= 0.0f ? StepperMotor::FWD : StepperMotor::BWD;
 800250e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002512:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251a:	db01      	blt.n	8002520 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x134>
 800251c:	2301      	movs	r3, #1
 800251e:	e000      	b.n	8002522 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x136>
 8002520:	2300      	movs	r3, #0
 8002522:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
    StepperMotor::direction_t sens_BR = vitesse_normalisee_BR >= 0.0f ? StepperMotor::BWD : StepperMotor::FWD;
 8002526:	edd7 7a01 	vldr	s15, [r7, #4]
 800252a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800252e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002532:	bfac      	ite	ge
 8002534:	2301      	movge	r3, #1
 8002536:	2300      	movlt	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	f083 0301 	eor.w	r3, r3, #1
 800253e:	b2db      	uxtb	r3, r3
 8002540:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c


    // Détermination des valeurs de vitesses réelles à envoyer au shield
    unsigned int vitesse_FL = ( (float) fabs(vitesse_normalisee_FL) * max_vitesse);
 8002544:	edd7 7a04 	vldr	s15, [r7, #16]
 8002548:	eeb0 7ae7 	vabs.f32	s14, s15
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	ee07 3a90 	vmov	s15, r3
 8002554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800255c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002560:	ee17 3a90 	vmov	r3, s15
 8002564:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned int vitesse_FR = ( (float) fabs(vitesse_normalisee_FR) * max_vitesse);
 8002566:	edd7 7a03 	vldr	s15, [r7, #12]
 800256a:	eeb0 7ae7 	vabs.f32	s14, s15
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	ee07 3a90 	vmov	s15, r3
 8002576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800257a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800257e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002582:	ee17 3a90 	vmov	r3, s15
 8002586:	647b      	str	r3, [r7, #68]	@ 0x44
    unsigned int vitesse_BL = ( (float) fabs(vitesse_normalisee_BL) * max_vitesse);
 8002588:	edd7 7a02 	vldr	s15, [r7, #8]
 800258c:	eeb0 7ae7 	vabs.f32	s14, s15
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	ee07 3a90 	vmov	s15, r3
 8002598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800259c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025a4:	ee17 3a90 	vmov	r3, s15
 80025a8:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned int vitesse_BR = ( (float) fabs(vitesse_normalisee_BR) * max_vitesse);
 80025aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80025ae:	eeb0 7ae7 	vabs.f32	s14, s15
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	ee07 3a90 	vmov	s15, r3
 80025ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025c6:	ee17 3a90 	vmov	r3, s15
 80025ca:	63fb      	str	r3, [r7, #60]	@ 0x3c

    set_vitesse_moteur(vitesse_FL, sens_FL, id_moteurs::front_left);
 80025cc:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80025d0:	2300      	movs	r3, #0
 80025d2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80025d4:	6978      	ldr	r0, [r7, #20]
 80025d6:	f000 f825 	bl	8002624 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    set_vitesse_moteur(vitesse_FR, sens_FR, id_moteurs::front_right);
 80025da:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 80025de:	2301      	movs	r3, #1
 80025e0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80025e2:	6978      	ldr	r0, [r7, #20]
 80025e4:	f000 f81e 	bl	8002624 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    set_vitesse_moteur(vitesse_BL, sens_BL, id_moteurs::back_left);
 80025e8:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80025ec:	2302      	movs	r3, #2
 80025ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80025f0:	6978      	ldr	r0, [r7, #20]
 80025f2:	f000 f817 	bl	8002624 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    set_vitesse_moteur(vitesse_BR, sens_BR, id_moteurs::back_right);
 80025f6:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 80025fa:	2303      	movs	r3, #3
 80025fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80025fe:	6978      	ldr	r0, [r7, #20]
 8002600:	f000 f810 	bl	8002624 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    shield_1->perform_prepared_actions();
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff fd77 	bl	80020fc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
    shield_2->perform_prepared_actions();
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff fd72 	bl	80020fc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>

}
 8002618:	bf00      	nop
 800261a:	3750      	adds	r7, #80	@ 0x50
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	bf800000 	.word	0xbf800000

08002624 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>:
  * @param vitesse , vitesse absolue en step/s
  * @param dir , sens de rotation (FWD / BWD)
  * @param id , id du moteur (front_left, front_right, back_left, back_right)
  */
void BlocMoteurs::set_vitesse_moteur(unsigned int vitesse, StepperMotor::direction_t dir, id_moteurs id)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	4611      	mov	r1, r2
 8002630:	461a      	mov	r2, r3
 8002632:	460b      	mov	r3, r1
 8002634:	71fb      	strb	r3, [r7, #7]
 8002636:	4613      	mov	r3, r2
 8002638:	71bb      	strb	r3, [r7, #6]
    if (!moteurs_arret)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	f083 0301 	eor.w	r3, r3, #1
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	d012      	beq.n	800266e <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs+0x4a>
    {
        moteurs[id]->prepare_run(dir, vitesse);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	79bb      	ldrb	r3, [r7, #6]
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	6818      	ldr	r0, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	79bb      	ldrb	r3, [r7, #6]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	33fc      	adds	r3, #252	@ 0xfc
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	79f9      	ldrb	r1, [r7, #7]
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	4798      	blx	r3
    }
    else
    {
    	moteurs[id]->prepare_hard_hiz(); // mode haute impédence pour pouvoir déplacer le robot à la main
    }
}
 800266c:	e011      	b.n	8002692 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs+0x6e>
    	moteurs[id]->prepare_hard_hiz(); // mode haute impédence pour pouvoir déplacer le robot à la main
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	691a      	ldr	r2, [r3, #16]
 8002672:	79bb      	ldrb	r3, [r7, #6]
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	6819      	ldr	r1, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	691a      	ldr	r2, [r3, #16]
 800267e:	79bb      	ldrb	r3, [r7, #6]
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4608      	mov	r0, r1
 8002690:	4798      	blx	r3
}
 8002692:	bf00      	nop
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <_ZN11BlocMoteurs26commande_vitesses_absoluesEffff>:
  * @param  vitesse_absolue_FR vitesse du moteur Avant droit
  * @param  vitesse_absolue_BL vitesse du moteur Arriere gauche
  * @param  vitesse_absolue_BR vitesse du moteur Arriere droit
  */
void BlocMoteurs::commande_vitesses_absolues(float vitesse_absolue_FL, float vitesse_absolue_FR, float vitesse_absolue_BL, float vitesse_absolue_BR )
{
 800269a:	b580      	push	{r7, lr}
 800269c:	ed2d 8b04 	vpush	{d8-d9}
 80026a0:	b086      	sub	sp, #24
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6178      	str	r0, [r7, #20]
 80026a6:	ed87 0a04 	vstr	s0, [r7, #16]
 80026aa:	edc7 0a03 	vstr	s1, [r7, #12]
 80026ae:	ed87 1a02 	vstr	s2, [r7, #8]
 80026b2:	edc7 1a01 	vstr	s3, [r7, #4]
	commande_vitesses_normalisees(rad_to_step(vitesse_absolue_FL)/max_vitesse,rad_to_step(vitesse_absolue_FR)/max_vitesse,
 80026b6:	ed97 0a04 	vldr	s0, [r7, #16]
 80026ba:	6978      	ldr	r0, [r7, #20]
 80026bc:	f7ff fe66 	bl	800238c <_ZN11BlocMoteurs11rad_to_stepEf>
 80026c0:	eeb0 7a40 	vmov.f32	s14, s0
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	ee07 3a90 	vmov	s15, r3
 80026cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026d0:	ee87 8a27 	vdiv.f32	s16, s14, s15
 80026d4:	ed97 0a03 	vldr	s0, [r7, #12]
 80026d8:	6978      	ldr	r0, [r7, #20]
 80026da:	f7ff fe57 	bl	800238c <_ZN11BlocMoteurs11rad_to_stepEf>
 80026de:	eeb0 7a40 	vmov.f32	s14, s0
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	ee07 3a90 	vmov	s15, r3
 80026ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ee:	eec7 8a27 	vdiv.f32	s17, s14, s15
								  rad_to_step(vitesse_absolue_BL)/max_vitesse,rad_to_step(vitesse_absolue_BR)/max_vitesse);
 80026f2:	ed97 0a02 	vldr	s0, [r7, #8]
 80026f6:	6978      	ldr	r0, [r7, #20]
 80026f8:	f7ff fe48 	bl	800238c <_ZN11BlocMoteurs11rad_to_stepEf>
 80026fc:	eeb0 7a40 	vmov.f32	s14, s0
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	685b      	ldr	r3, [r3, #4]
	commande_vitesses_normalisees(rad_to_step(vitesse_absolue_FL)/max_vitesse,rad_to_step(vitesse_absolue_FR)/max_vitesse,
 8002704:	ee07 3a90 	vmov	s15, r3
 8002708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800270c:	ee87 9a27 	vdiv.f32	s18, s14, s15
								  rad_to_step(vitesse_absolue_BL)/max_vitesse,rad_to_step(vitesse_absolue_BR)/max_vitesse);
 8002710:	ed97 0a01 	vldr	s0, [r7, #4]
 8002714:	6978      	ldr	r0, [r7, #20]
 8002716:	f7ff fe39 	bl	800238c <_ZN11BlocMoteurs11rad_to_stepEf>
 800271a:	eef0 6a40 	vmov.f32	s13, s0
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	685b      	ldr	r3, [r3, #4]
	commande_vitesses_normalisees(rad_to_step(vitesse_absolue_FL)/max_vitesse,rad_to_step(vitesse_absolue_FR)/max_vitesse,
 8002722:	ee07 3a90 	vmov	s15, r3
 8002726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800272a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800272e:	eef0 1a47 	vmov.f32	s3, s14
 8002732:	eeb0 1a49 	vmov.f32	s2, s18
 8002736:	eef0 0a68 	vmov.f32	s1, s17
 800273a:	eeb0 0a48 	vmov.f32	s0, s16
 800273e:	6978      	ldr	r0, [r7, #20]
 8002740:	f7ff fe54 	bl	80023ec <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff>

}
 8002744:	bf00      	nop
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	ecbd 8b04 	vpop	{d8-d9}
 800274e:	bd80      	pop	{r7, pc}

08002750 <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE>:
  * Ainsi, plus de finesse sur le deplacement (finesse != precision) est grande.
  * Un mode haut de microstepping degrade cependant la consommation et le couple effectif du moteur
  * @param  step_mode le mode de microstepping souhaite
  */
bool BlocMoteurs::set_microstepping_mode(step_mode_t step_mode)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	70fb      	strb	r3, [r7, #3]

    initShield1[0].step_sel = step_mode;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	78fa      	ldrb	r2, [r7, #3]
 8002760:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
    initShield1[1].step_sel = step_mode;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	78fa      	ldrb	r2, [r7, #3]
 8002768:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
    initShield2[0].step_sel = step_mode;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	78fa      	ldrb	r2, [r7, #3]
 8002770:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
    initShield2[0].step_sel = step_mode;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	78fa      	ldrb	r2, [r7, #3]
 8002778:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
    bool return_value = true;
 800277c:	2301      	movs	r3, #1
 800277e:	73fb      	strb	r3, [r7, #15]
    for( int i = 0; i < NMOTEURS; i ++)
 8002780:	2300      	movs	r3, #0
 8002782:	60bb      	str	r3, [r7, #8]
 8002784:	e01c      	b.n	80027c0 <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE+0x70>
    {
    	if(! moteurs[i]->set_step_mode(step_mode))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691a      	ldr	r2, [r3, #16]
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	6818      	ldr	r0, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691a      	ldr	r2, [r3, #16]
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	3354      	adds	r3, #84	@ 0x54
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	78fa      	ldrb	r2, [r7, #3]
 80027a6:	4611      	mov	r1, r2
 80027a8:	4798      	blx	r3
 80027aa:	4603      	mov	r3, r0
 80027ac:	f083 0301 	eor.w	r3, r3, #1
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE+0x6a>
    	{
    		return_value = false;
 80027b6:	2300      	movs	r3, #0
 80027b8:	73fb      	strb	r3, [r7, #15]
    for( int i = 0; i < NMOTEURS; i ++)
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	3301      	adds	r3, #1
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	dddf      	ble.n	8002786 <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE+0x36>
    	}
    }
    return return_value;
 80027c6:	7bfb      	ldrb	r3, [r7, #15]

}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <_ZN11BlocMoteurs9motors_onEv>:

/**
  * @brief  autorise les commandes de vitesse jusqu'a l'appel des fonctions motors_stop
  */
void BlocMoteurs::motors_on()
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
    moteurs_arret = 0;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <_ZN11BlocMoteurs20motors_stop_soft_hizEv>:
  * @brief  stop les roues et les laisse libres par la suite
  * Le passage a la vitesse a zero respecte les parametre de deceleration maximale du robot
  * (contrairement a la methode motors_stop_hard_hiz)
  */
void BlocMoteurs::motors_stop_soft_hiz()
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b084      	sub	sp, #16
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]

	for(int i = 0; i < NMOTEURS; i ++)
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	e014      	b.n	8002822 <_ZN11BlocMoteurs20motors_stop_soft_hizEv+0x38>
	{
		moteurs[i]->prepare_soft_hiz();
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691a      	ldr	r2, [r3, #16]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	6819      	ldr	r1, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4608      	mov	r0, r1
 800281a:	4798      	blx	r3
	for(int i = 0; i < NMOTEURS; i ++)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	3301      	adds	r3, #1
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2b03      	cmp	r3, #3
 8002826:	dde7      	ble.n	80027f8 <_ZN11BlocMoteurs20motors_stop_soft_hizEv+0xe>
	}
    shield_1->perform_prepared_actions();
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff fc65 	bl	80020fc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
    shield_2->perform_prepared_actions();
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff fc60 	bl	80020fc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>

    moteurs_arret = true;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	701a      	strb	r2, [r3, #0]
}
 8002842:	bf00      	nop
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <_ZN11BlocMoteurs19mesure_vitesses_radEv>:
  *
  * @retval tableau float des 4 valeursen rad/s des vitesse. Les index correspondent à l'enum motor id
  * ex : id_moteurs::front_left = 0 -> to_return[0] = vitesse du moteur Avant gauche (front left)
  */
float* BlocMoteurs::mesure_vitesses_rad()
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
	static float to_return[NMOTEURS];
	for( int i = 0; i < NMOTEURS; i ++)
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	e013      	b.n	8002882 <_ZN11BlocMoteurs19mesure_vitesses_radEv+0x36>
	{
		moteurs[i]->prepare_get_speed();
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691a      	ldr	r2, [r3, #16]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	6819      	ldr	r1, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691a      	ldr	r2, [r3, #16]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	33a8      	adds	r3, #168	@ 0xa8
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4608      	mov	r0, r1
 800287a:	4798      	blx	r3
	for( int i = 0; i < NMOTEURS; i ++)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	3301      	adds	r3, #1
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	2b03      	cmp	r3, #3
 8002886:	dde8      	ble.n	800285a <_ZN11BlocMoteurs19mesure_vitesses_radEv+0xe>
	}
	uint32_t* result1 = shield_1->perform_prepared_actions();
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff fc35 	bl	80020fc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
 8002892:	60f8      	str	r0, [r7, #12]
	for( int i = 0; i < NMOTEURS; i ++)
 8002894:	2300      	movs	r3, #0
 8002896:	613b      	str	r3, [r7, #16]
 8002898:	e013      	b.n	80028c2 <_ZN11BlocMoteurs19mesure_vitesses_radEv+0x76>
	{
		moteurs[i]->prepare_get_speed();
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691a      	ldr	r2, [r3, #16]
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	6819      	ldr	r1, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691a      	ldr	r2, [r3, #16]
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	33a8      	adds	r3, #168	@ 0xa8
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4608      	mov	r0, r1
 80028ba:	4798      	blx	r3
	for( int i = 0; i < NMOTEURS; i ++)
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	3301      	adds	r3, #1
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	2b03      	cmp	r3, #3
 80028c6:	dde8      	ble.n	800289a <_ZN11BlocMoteurs19mesure_vitesses_radEv+0x4e>
	}
	uint32_t* result2 = shield_2->perform_prepared_actions();
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff fc15 	bl	80020fc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
 80028d2:	60b8      	str	r0, [r7, #8]
		to_return[front_left] = step_to_rad(result1[left]);
		to_return[front_right] = step_to_rad(result1[right]);
		to_return[back_left] = step_to_rad(result2[left]);
		to_return[back_right] = step_to_rad(result2[right]);
	#else
		to_return[front_left] = step_to_rad(result2[left]);
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4619      	mov	r1, r3
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7ff fd6e 	bl	80023bc <_ZN11BlocMoteurs11step_to_radEj>
 80028e0:	eef0 7a40 	vmov.f32	s15, s0
 80028e4:	4b15      	ldr	r3, [pc, #84]	@ (800293c <_ZN11BlocMoteurs19mesure_vitesses_radEv+0xf0>)
 80028e6:	edc3 7a00 	vstr	s15, [r3]
		to_return[front_right] = step_to_rad(result2[right]);
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	3304      	adds	r3, #4
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4619      	mov	r1, r3
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7ff fd62 	bl	80023bc <_ZN11BlocMoteurs11step_to_radEj>
 80028f8:	eef0 7a40 	vmov.f32	s15, s0
 80028fc:	4b0f      	ldr	r3, [pc, #60]	@ (800293c <_ZN11BlocMoteurs19mesure_vitesses_radEv+0xf0>)
 80028fe:	edc3 7a01 	vstr	s15, [r3, #4]
		to_return[back_left] = step_to_rad(result1[left]);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4619      	mov	r1, r3
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff fd57 	bl	80023bc <_ZN11BlocMoteurs11step_to_radEj>
 800290e:	eef0 7a40 	vmov.f32	s15, s0
 8002912:	4b0a      	ldr	r3, [pc, #40]	@ (800293c <_ZN11BlocMoteurs19mesure_vitesses_radEv+0xf0>)
 8002914:	edc3 7a02 	vstr	s15, [r3, #8]
		to_return[back_right] = step_to_rad(result1[right]);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	3304      	adds	r3, #4
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4619      	mov	r1, r3
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff fd4b 	bl	80023bc <_ZN11BlocMoteurs11step_to_radEj>
 8002926:	eef0 7a40 	vmov.f32	s15, s0
 800292a:	4b04      	ldr	r3, [pc, #16]	@ (800293c <_ZN11BlocMoteurs19mesure_vitesses_radEv+0xf0>)
 800292c:	edc3 7a03 	vstr	s15, [r3, #12]
	#endif

	return to_return;
 8002930:	4b02      	ldr	r3, [pc, #8]	@ (800293c <_ZN11BlocMoteurs19mesure_vitesses_radEv+0xf0>)
}
 8002932:	4618      	mov	r0, r3
 8002934:	3718      	adds	r7, #24
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	200001fc 	.word	0x200001fc

08002940 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
     * @param standby_reset pin name of the STBY\RST pin of the component.
     * @param ssel_port     port name of the SSEL pin of the SPI device to be used for communication.
     * @param ssel_pin      pin name of the SSEL pin of the SPI device to be used for communication.
     * @param spi           SPI handler to be used for communication.
     */
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	603b      	str	r3, [r7, #0]
 800294c:	4613      	mov	r3, r2
 800294e:	80fb      	strh	r3, [r7, #6]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4618      	mov	r0, r3
 8002954:	f009 fc54 	bl	800c200 <_ZN13abstractL6470C1Ev>
 8002958:	4a27      	ldr	r2, [pc, #156]	@ (80029f8 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	88fa      	ldrh	r2, [r7, #6]
 8002968:	819a      	strh	r2, [r3, #12]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	611a      	str	r2, [r3, #16]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8b3a      	ldrh	r2, [r7, #24]
 8002974:	829a      	strh	r2, [r3, #20]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	69fa      	ldr	r2, [r7, #28]
 800297a:	619a      	str	r2, [r3, #24]
    {

    	if(std::is_same<shield_x,shield_1>::value)
    	{
    		shield_id = 1;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2201      	movs	r2, #1
 8002980:	711a      	strb	r2, [r3, #4]
    		shield_1::count++;
 8002982:	4b1e      	ldr	r3, [pc, #120]	@ (80029fc <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	3301      	adds	r3, #1
 8002988:	b2da      	uxtb	r2, r3
 800298a:	4b1c      	ldr	r3, [pc, #112]	@ (80029fc <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 800298c:	701a      	strb	r2, [r3, #0]
    	}
    	else
    	{
    		throw std::runtime_error("template of L6470 must be shield_1, shield_2 or shield_3");
    	}
        L6470_Register = &_L6470_Register[0];
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4a1b      	ldr	r2, [pc, #108]	@ (8002a00 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 8002992:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4a1b      	ldr	r2, [pc, #108]	@ (8002a04 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 8002998:	625a      	str	r2, [r3, #36]	@ 0x24
        L6470_Direction = &_L6470_Direction[0];
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	4a1a      	ldr	r2, [pc, #104]	@ (8002a08 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 800299e:	629a      	str	r2, [r3, #40]	@ 0x28
        L6470_ACT = &_L6470_ACT[0];
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4a1a      	ldr	r2, [pc, #104]	@ (8002a0c <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 80029a4:	62da      	str	r2, [r3, #44]	@ 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	635a      	str	r2, [r3, #52]	@ 0x34
        prepared_action = PREPARED_NO_ACTION;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        L6470_Id = number_of_devices++;
 80029b8:	4b15      	ldr	r3, [pc, #84]	@ (8002a10 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	b2d1      	uxtb	r1, r2
 80029c0:	4a13      	ldr	r2, [pc, #76]	@ (8002a10 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 80029c2:	7011      	strb	r1, [r2, #0]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 80029c8:	4b12      	ldr	r3, [pc, #72]	@ (8002a14 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 80029ce:	2220      	movs	r2, #32
 80029d0:	2100      	movs	r1, #0
 80029d2:	4811      	ldr	r0, [pc, #68]	@ (8002a18 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 80029d4:	f00f fb29 	bl	801202a <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 80029d8:	2208      	movs	r2, #8
 80029da:	2100      	movs	r1, #0
 80029dc:	480f      	ldr	r0, [pc, #60]	@ (8002a1c <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 80029de:	f00f fb24 	bl	801202a <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 80029e2:	2208      	movs	r2, #8
 80029e4:	2100      	movs	r1, #0
 80029e6:	480e      	ldr	r0, [pc, #56]	@ (8002a20 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 80029e8:	f00f fb1f 	bl	801202a <memset>
    }
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	080142d8 	.word	0x080142d8
 80029fc:	200002a8 	.word	0x200002a8
 8002a00:	0801459c 	.word	0x0801459c
 8002a04:	08014790 	.word	0x08014790
 8002a08:	0801489c 	.word	0x0801489c
 8002a0c:	080148b0 	.word	0x080148b0
 8002a10:	2000020c 	.word	0x2000020c
 8002a14:	2000020d 	.word	0x2000020d
 8002a18:	20000210 	.word	0x20000210
 8002a1c:	20000230 	.word	0x20000230
 8002a20:	20000238 	.word	0x20000238

08002a24 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	603b      	str	r3, [r7, #0]
 8002a30:	4613      	mov	r3, r2
 8002a32:	80fb      	strh	r3, [r7, #6]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f009 fbe2 	bl	800c200 <_ZN13abstractL6470C1Ev>
 8002a3c:	4a27      	ldr	r2, [pc, #156]	@ (8002adc <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	88fa      	ldrh	r2, [r7, #6]
 8002a4c:	819a      	strh	r2, [r3, #12]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	611a      	str	r2, [r3, #16]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8b3a      	ldrh	r2, [r7, #24]
 8002a58:	829a      	strh	r2, [r3, #20]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	69fa      	ldr	r2, [r7, #28]
 8002a5e:	619a      	str	r2, [r3, #24]
    		shield_id = 2;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2202      	movs	r2, #2
 8002a64:	711a      	strb	r2, [r3, #4]
    		shield_2::count++;
 8002a66:	4b1e      	ldr	r3, [pc, #120]	@ (8002ae0 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ae0 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002a70:	701a      	strb	r2, [r3, #0]
        L6470_Register = &_L6470_Register[0];
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	4a1b      	ldr	r2, [pc, #108]	@ (8002ae4 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 8002a76:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ae8 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 8002a7c:	625a      	str	r2, [r3, #36]	@ 0x24
        L6470_Direction = &_L6470_Direction[0];
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	4a1a      	ldr	r2, [pc, #104]	@ (8002aec <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 8002a82:	629a      	str	r2, [r3, #40]	@ 0x28
        L6470_ACT = &_L6470_ACT[0];
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4a1a      	ldr	r2, [pc, #104]	@ (8002af0 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 8002a88:	62da      	str	r2, [r3, #44]	@ 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	635a      	str	r2, [r3, #52]	@ 0x34
        prepared_action = PREPARED_NO_ACTION;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        L6470_Id = number_of_devices++;
 8002a9c:	4b15      	ldr	r3, [pc, #84]	@ (8002af4 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	b2d1      	uxtb	r1, r2
 8002aa4:	4a13      	ldr	r2, [pc, #76]	@ (8002af4 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002aa6:	7011      	strb	r1, [r2, #0]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 8002aac:	4b12      	ldr	r3, [pc, #72]	@ (8002af8 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	4811      	ldr	r0, [pc, #68]	@ (8002afc <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 8002ab8:	f00f fab7 	bl	801202a <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002abc:	2208      	movs	r2, #8
 8002abe:	2100      	movs	r1, #0
 8002ac0:	480f      	ldr	r0, [pc, #60]	@ (8002b00 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 8002ac2:	f00f fab2 	bl	801202a <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002ac6:	2208      	movs	r2, #8
 8002ac8:	2100      	movs	r1, #0
 8002aca:	480e      	ldr	r0, [pc, #56]	@ (8002b04 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 8002acc:	f00f faad 	bl	801202a <memset>
    }
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	0801406c 	.word	0x0801406c
 8002ae0:	200002a9 	.word	0x200002a9
 8002ae4:	080148bc 	.word	0x080148bc
 8002ae8:	08014ab0 	.word	0x08014ab0
 8002aec:	08014bbc 	.word	0x08014bbc
 8002af0:	08014bd0 	.word	0x08014bd0
 8002af4:	20000240 	.word	0x20000240
 8002af8:	20000241 	.word	0x20000241
 8002afc:	20000244 	.word	0x20000244
 8002b00:	20000264 	.word	0x20000264
 8002b04:	2000026c 	.word	0x2000026c

08002b08 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	603b      	str	r3, [r7, #0]
 8002b14:	4613      	mov	r3, r2
 8002b16:	80fb      	strh	r3, [r7, #6]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f009 fb70 	bl	800c200 <_ZN13abstractL6470C1Ev>
 8002b20:	4a27      	ldr	r2, [pc, #156]	@ (8002bc0 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	88fa      	ldrh	r2, [r7, #6]
 8002b30:	819a      	strh	r2, [r3, #12]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	611a      	str	r2, [r3, #16]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8b3a      	ldrh	r2, [r7, #24]
 8002b3c:	829a      	strh	r2, [r3, #20]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	69fa      	ldr	r2, [r7, #28]
 8002b42:	619a      	str	r2, [r3, #24]
    		shield_id = 3;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2203      	movs	r2, #3
 8002b48:	711a      	strb	r2, [r3, #4]
    		shield_3::count++;
 8002b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8002bc4 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc4 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002b54:	701a      	strb	r2, [r3, #0]
        L6470_Register = &_L6470_Register[0];
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	4a1b      	ldr	r2, [pc, #108]	@ (8002bc8 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 8002b5a:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4a1b      	ldr	r2, [pc, #108]	@ (8002bcc <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 8002b60:	625a      	str	r2, [r3, #36]	@ 0x24
        L6470_Direction = &_L6470_Direction[0];
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	4a1a      	ldr	r2, [pc, #104]	@ (8002bd0 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 8002b66:	629a      	str	r2, [r3, #40]	@ 0x28
        L6470_ACT = &_L6470_ACT[0];
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4a1a      	ldr	r2, [pc, #104]	@ (8002bd4 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 8002b6c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	635a      	str	r2, [r3, #52]	@ 0x34
        prepared_action = PREPARED_NO_ACTION;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        L6470_Id = number_of_devices++;
 8002b80:	4b15      	ldr	r3, [pc, #84]	@ (8002bd8 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	b2d1      	uxtb	r1, r2
 8002b88:	4a13      	ldr	r2, [pc, #76]	@ (8002bd8 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002b8a:	7011      	strb	r1, [r2, #0]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 8002b90:	4b12      	ldr	r3, [pc, #72]	@ (8002bdc <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 8002b96:	2220      	movs	r2, #32
 8002b98:	2100      	movs	r1, #0
 8002b9a:	4811      	ldr	r0, [pc, #68]	@ (8002be0 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 8002b9c:	f00f fa45 	bl	801202a <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002ba0:	2208      	movs	r2, #8
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	480f      	ldr	r0, [pc, #60]	@ (8002be4 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 8002ba6:	f00f fa40 	bl	801202a <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002baa:	2208      	movs	r2, #8
 8002bac:	2100      	movs	r1, #0
 8002bae:	480e      	ldr	r0, [pc, #56]	@ (8002be8 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 8002bb0:	f00f fa3b 	bl	801202a <memset>
    }
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	08013e00 	.word	0x08013e00
 8002bc4:	200002aa 	.word	0x200002aa
 8002bc8:	08014bdc 	.word	0x08014bdc
 8002bcc:	08014dd0 	.word	0x08014dd0
 8002bd0:	08014edc 	.word	0x08014edc
 8002bd4:	08014ef0 	.word	0x08014ef0
 8002bd8:	20000274 	.word	0x20000274
 8002bdc:	20000275 	.word	0x20000275
 8002be0:	20000278 	.word	0x20000278
 8002be4:	20000298 	.word	0x20000298
 8002be8:	200002a0 	.word	0x200002a0

08002bec <_ZSt3minIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	ed93 7a00 	vldr	s14, [r3]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	edd3 7a00 	vldr	s15, [r3]
 8002c02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0a:	d501      	bpl.n	8002c10 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	e000      	b.n	8002c12 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8002c10:	687b      	ldr	r3, [r7, #4]
    }
 8002c12:	4618      	mov	r0, r3
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
 8002c26:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	ed93 7a00 	vldr	s14, [r3]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	edd3 7a00 	vldr	s15, [r3]
 8002c34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3c:	d501      	bpl.n	8002c42 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	e000      	b.n	8002c44 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8002c42:	687b      	ldr	r3, [r7, #4]
    }
 8002c44:	4618      	mov	r0, r3
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <_ZN5L6470I8shield_3ED1Ev>:

    /**
     * @brief Destructor.
     */
    ~L6470(void) = default;
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	4a05      	ldr	r2, [pc, #20]	@ (8002c70 <_ZN5L6470I8shield_3ED1Ev+0x20>)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f009 fadd 	bl	800c220 <_ZN13abstractL6470D1Ev>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	08013e00 	.word	0x08013e00

08002c74 <_ZN5L6470I8shield_3ED0Ev>:
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7ff ffe7 	bl	8002c50 <_ZN5L6470I8shield_3ED1Ev>
 8002c82:	216c      	movs	r1, #108	@ 0x6c
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f00d fd37 	bl	80106f8 <_ZdlPvj>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <_ZN5L6470I8shield_2ED1Ev>:
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	4a05      	ldr	r2, [pc, #20]	@ (8002cb4 <_ZN5L6470I8shield_2ED1Ev+0x20>)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f009 fabb 	bl	800c220 <_ZN13abstractL6470D1Ev>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4618      	mov	r0, r3
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	0801406c 	.word	0x0801406c

08002cb8 <_ZN5L6470I8shield_2ED0Ev>:
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7ff ffe7 	bl	8002c94 <_ZN5L6470I8shield_2ED1Ev>
 8002cc6:	216c      	movs	r1, #108	@ 0x6c
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f00d fd15 	bl	80106f8 <_ZdlPvj>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <_ZN5L6470I8shield_1ED1Ev>:
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	4a05      	ldr	r2, [pc, #20]	@ (8002cf8 <_ZN5L6470I8shield_1ED1Ev+0x20>)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f009 fa99 	bl	800c220 <_ZN13abstractL6470D1Ev>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	080142d8 	.word	0x080142d8

08002cfc <_ZN5L6470I8shield_1ED0Ev>:
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7ff ffe7 	bl	8002cd8 <_ZN5L6470I8shield_1ED1Ev>
 8002d0a:	216c      	movs	r1, #108	@ 0x6c
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f00d fcf3 	bl	80106f8 <_ZdlPvj>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4618      	mov	r0, r3
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <_ZN5L6470I8shield_3E4initEPv>:
    /**
     * @brief  Initializing the component.
     * @param  init Pointer to device specific initalization structure.
     * @retval "0" in case of success, an error code otherwise.
     */
    virtual int init(void *init)
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
    {
        return (int) L6470_Config((void *) init);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6839      	ldr	r1, [r7, #0]
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	4798      	blx	r3
 8002d36:	4603      	mov	r3, r0
    }
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <_ZN5L6470I8shield_3E10get_statusEv>:
    /**
     * @brief  Getting the status.
     * @param  None.
     * @retval The status.
     */
    virtual unsigned int get_status(void)
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
    {
        return (unsigned int) L6470_GetStatus();
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	4798      	blx	r3
 8002d56:	4603      	mov	r3, r0
    }
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <_ZN5L6470I8shield_3E13get_parameterEj>:
     *           + L6470_STEP_MODE_ID
     *           + L6470_ALARM_EN_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual unsigned int get_parameter(unsigned int parameter)
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
    {
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	4611      	mov	r1, r2
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	4798      	blx	r3
 8002d7e:	4603      	mov	r3, r0
    }
 8002d80:	4618      	mov	r0, r3
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <_ZN5L6470I8shield_3E12get_positionEv>:
    /**
     * @brief  Getting the position.
     * @param  None.
     * @retval The position.
     */
    virtual signed int get_position(void)
 8002d88:	b590      	push	{r4, r7, lr}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
    {
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8002d98:	681c      	ldr	r4, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2100      	movs	r1, #0
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	4798      	blx	r3
 8002daa:	4603      	mov	r3, r0
 8002dac:	4619      	mov	r1, r3
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	47a0      	blx	r4
 8002db2:	4603      	mov	r3, r0
    }
 8002db4:	4618      	mov	r0, r3
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd90      	pop	{r4, r7, pc}

08002dbc <_ZN5L6470I8shield_3E8get_markEv>:
    /**
     * @brief  Getting the marked position.
     * @param  None.
     * @retval The marked position.
     */
    virtual signed int get_mark(void)
 8002dbc:	b590      	push	{r4, r7, lr}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
    {
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8002dcc:	681c      	ldr	r4, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2102      	movs	r1, #2
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	4798      	blx	r3
 8002dde:	4603      	mov	r3, r0
 8002de0:	4619      	mov	r1, r3
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	47a0      	blx	r4
 8002de6:	4603      	mov	r3, r0
    }
 8002de8:	4618      	mov	r0, r3
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd90      	pop	{r4, r7, pc}

08002df0 <_ZN5L6470I8shield_3E9get_speedEv>:
    /**
     * @brief  Getting the current speed in pps.
     * @param  None.
     * @retval The current speed in pps.
     */
    virtual unsigned int get_speed(void)
 8002df0:	b5b0      	push	{r4, r5, r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e00:	681c      	ldr	r4, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8002e0a:	681d      	ldr	r5, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2103      	movs	r1, #3
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	4798      	blx	r3
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	4619      	mov	r1, r3
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	47a8      	blx	r5
 8002e24:	eef0 7a40 	vmov.f32	s15, s0
 8002e28:	eeb0 0a67 	vmov.f32	s0, s15
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	47a0      	blx	r4
 8002e30:	4603      	mov	r3, r0
    }
 8002e32:	4618      	mov	r0, r3
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bdb0      	pop	{r4, r5, r7, pc}

08002e3a <_ZN5L6470I8shield_3E13get_max_speedEv>:
    /**
     * @brief  Getting the maximum speed in pps.
     * @param  None.
     * @retval The maximum speed in pps.
     */
    virtual unsigned int get_max_speed(void)
 8002e3a:	b5b0      	push	{r4, r5, r7, lr}
 8002e3c:	b082      	sub	sp, #8
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e4a:	681c      	ldr	r4, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e54:	681d      	ldr	r5, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2106      	movs	r1, #6
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	4798      	blx	r3
 8002e66:	4603      	mov	r3, r0
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	47a8      	blx	r5
 8002e70:	eef0 7a40 	vmov.f32	s15, s0
 8002e74:	eeb0 0a67 	vmov.f32	s0, s15
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	47a0      	blx	r4
 8002e7c:	4603      	mov	r3, r0
    }
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bdb0      	pop	{r4, r5, r7, pc}

08002e86 <_ZN5L6470I8shield_3E13get_min_speedEv>:
    /**
     * @brief  Getting the minimum speed in pps.
     * @param  None.
     * @retval The minimum speed in pps.
     */
    virtual unsigned int get_min_speed(void)
 8002e86:	b5b0      	push	{r4, r5, r7, lr}
 8002e88:	b082      	sub	sp, #8
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e96:	681c      	ldr	r4, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8002ea0:	681d      	ldr	r5, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2107      	movs	r1, #7
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	4798      	blx	r3
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	47a8      	blx	r5
 8002ebc:	eef0 7a40 	vmov.f32	s15, s0
 8002ec0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	47a0      	blx	r4
 8002ec8:	4603      	mov	r3, r0
    }
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bdb0      	pop	{r4, r5, r7, pc}

08002ed2 <_ZN5L6470I8shield_3E16get_accelerationEv>:
    /**
     * @brief  Getting the acceleration in pps^2.
     * @param  None.
     * @retval The acceleration in pps^2.
     */
    virtual unsigned int get_acceleration(void)
 8002ed2:	b5b0      	push	{r4, r5, r7, lr}
 8002ed4:	b082      	sub	sp, #8
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ee2:	681c      	ldr	r4, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002eec:	681d      	ldr	r5, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2104      	movs	r1, #4
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	4798      	blx	r3
 8002efe:	4603      	mov	r3, r0
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	4619      	mov	r1, r3
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	47a8      	blx	r5
 8002f08:	eef0 7a40 	vmov.f32	s15, s0
 8002f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	47a0      	blx	r4
 8002f14:	4603      	mov	r3, r0
    }
 8002f16:	4618      	mov	r0, r3
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bdb0      	pop	{r4, r5, r7, pc}

08002f1e <_ZN5L6470I8shield_3E16get_decelerationEv>:
    /**
     * @brief  Getting the deceleration in pps^2.
     * @param  None.
     * @retval The deceleration in pps^2.
     */
    virtual unsigned int get_deceleration(void)
 8002f1e:	b5b0      	push	{r4, r5, r7, lr}
 8002f20:	b082      	sub	sp, #8
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f2e:	681c      	ldr	r4, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8002f38:	681d      	ldr	r5, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2105      	movs	r1, #5
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	4798      	blx	r3
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	4619      	mov	r1, r3
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	47a8      	blx	r5
 8002f54:	eef0 7a40 	vmov.f32	s15, s0
 8002f58:	eeb0 0a67 	vmov.f32	s0, s15
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	47a0      	blx	r4
 8002f60:	4603      	mov	r3, r0
    }
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bdb0      	pop	{r4, r5, r7, pc}

08002f6a <_ZN5L6470I8shield_3E13get_directionEv>:
    /**
     * @brief  Getting the direction of rotation.
     * @param  None.
     * @retval The direction of rotation.
     */
    virtual StepperMotor::direction_t get_direction(void)
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
    {
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2104      	movs	r1, #4
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	4798      	blx	r3
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <_ZN5L6470I8shield_3E13get_directionEv+0x22>
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e000      	b.n	8002f8e <_ZN5L6470I8shield_3E13get_directionEv+0x24>
 8002f8c:	2300      	movs	r3, #0
    }
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <_ZN5L6470I8shield_3E13set_parameterEjj>:
     *           + L6470_ADC_OUT_ID
     *           + L6470_STEP_MODE_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	60f8      	str	r0, [r7, #12]
 8002f9e:	60b9      	str	r1, [r7, #8]
 8002fa0:	607a      	str	r2, [r7, #4]
    {
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	b2d1      	uxtb	r1, r2
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	4798      	blx	r3
    }
 8002fb6:	bf00      	nop
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <_ZN5L6470I8shield_3E8set_homeEv>:
    /**
     * @brief  Setting the current position to be the home position.
     * @param  None.
     * @retval None.
     */
    virtual void set_home(void)
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
    {
        L6470_ResetPos();
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	4798      	blx	r3
    }
 8002fd4:	bf00      	nop
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <_ZN5L6470I8shield_3E8set_markEv>:
    /**
     * @brief  Setting the current position to be the marked position.
     * @param  None.
     * @retval None.
     */
    virtual void set_mark(void)
 8002fdc:	b590      	push	{r4, r7, lr}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8002fec:	681c      	ldr	r4, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	4798      	blx	r3
 8002ffe:	4603      	mov	r3, r0
 8003000:	461a      	mov	r2, r3
 8003002:	2102      	movs	r1, #2
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	47a0      	blx	r4
    }
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	bd90      	pop	{r4, r7, pc}

08003010 <_ZN5L6470I8shield_3E8set_markEi>:
    /**
     * @brief  Setting the current position to be the marked position.
     * @param  position The given position.
     * @retval None.
     */
    virtual void set_mark(signed int position)
 8003010:	b590      	push	{r4, r7, lr}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8003022:	681c      	ldr	r4, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6839      	ldr	r1, [r7, #0]
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	4798      	blx	r3
 8003034:	4603      	mov	r3, r0
 8003036:	461a      	mov	r2, r3
 8003038:	2102      	movs	r1, #2
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	47a0      	blx	r4
    }
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	bd90      	pop	{r4, r7, pc}

08003046 <_ZN5L6470I8shield_3E13set_max_speedEj>:
    /**
     * @brief  Setting the maximum speed in pps.
     * @param  speed The maximum speed in pps.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_max_speed(unsigned int speed)
 8003046:	b590      	push	{r4, r7, lr}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
 800304e:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8003058:	681c      	ldr	r4, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	ee07 2a90 	vmov	s15, r2
 800306a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800306e:	eeb0 0a67 	vmov.f32	s0, s15
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	4798      	blx	r3
 8003076:	4603      	mov	r3, r0
 8003078:	461a      	mov	r2, r3
 800307a:	2106      	movs	r1, #6
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	47a0      	blx	r4
        return true;
 8003080:	2301      	movs	r3, #1
    }
 8003082:	4618      	mov	r0, r3
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	bd90      	pop	{r4, r7, pc}

0800308a <_ZN5L6470I8shield_3E13set_min_speedEj>:
    /**
     * @brief  Setting the minimum speed in pps.
     * @param  speed The minimum speed in pps.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_min_speed(unsigned int speed)
 800308a:	b590      	push	{r4, r7, lr}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
 8003092:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800309c:	681c      	ldr	r4, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	ee07 2a90 	vmov	s15, r2
 80030ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030b2:	eeb0 0a67 	vmov.f32	s0, s15
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	4798      	blx	r3
 80030ba:	4603      	mov	r3, r0
 80030bc:	461a      	mov	r2, r3
 80030be:	2107      	movs	r1, #7
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	47a0      	blx	r4
        return true;
 80030c4:	2301      	movs	r3, #1
    }
 80030c6:	4618      	mov	r0, r3
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd90      	pop	{r4, r7, pc}

080030ce <_ZN5L6470I8shield_3E16set_accelerationEj>:
    /**
     * @brief  Setting the acceleration in pps^2.
     * @param  acceleration The acceleration in pps^2.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_acceleration(unsigned int acceleration)
 80030ce:	b590      	push	{r4, r7, lr}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
 80030d6:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80030e0:	681c      	ldr	r4, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	ee07 2a90 	vmov	s15, r2
 80030f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030f6:	eeb0 0a67 	vmov.f32	s0, s15
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	4798      	blx	r3
 80030fe:	4603      	mov	r3, r0
 8003100:	461a      	mov	r2, r3
 8003102:	2104      	movs	r1, #4
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	47a0      	blx	r4
        return true;
 8003108:	2301      	movs	r3, #1
    }
 800310a:	4618      	mov	r0, r3
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	bd90      	pop	{r4, r7, pc}

08003112 <_ZN5L6470I8shield_3E16set_decelerationEj>:
    /**
     * @brief  Setting the deceleration in pps^2.
     * @param  deceleration The deceleration in pps^2.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_deceleration(unsigned int deceleration)
 8003112:	b590      	push	{r4, r7, lr}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8003124:	681c      	ldr	r4, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	ee07 2a90 	vmov	s15, r2
 8003136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800313a:	eeb0 0a67 	vmov.f32	s0, s15
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	4798      	blx	r3
 8003142:	4603      	mov	r3, r0
 8003144:	461a      	mov	r2, r3
 8003146:	2105      	movs	r1, #5
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	47a0      	blx	r4
        return true;
 800314c:	2301      	movs	r3, #1
    }
 800314e:	4618      	mov	r0, r3
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	bd90      	pop	{r4, r7, pc}

08003156 <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE>:
     * @warning Setting the step mode implies first disabling the power bridge through
     *          the soft_hiz() method.
     * @warning Every time step mode is changed, the values of the home
     *          and mark positions lose meaning and are reset.
     */
    virtual bool set_step_mode(step_mode_t step_mode)
 8003156:	b580      	push	{r7, lr}
 8003158:	b082      	sub	sp, #8
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	460b      	mov	r3, r1
 8003160:	70fb      	strb	r3, [r7, #3]
    {
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	2b07      	cmp	r3, #7
 8003166:	d901      	bls.n	800316c <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 8003168:	2300      	movs	r3, #0
 800316a:	e00f      	b.n	800318c <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        }
        soft_hiz();
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	3380      	adds	r3, #128	@ 0x80
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	78fa      	ldrb	r2, [r7, #3]
 8003184:	2115      	movs	r1, #21
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	4798      	blx	r3
        return true;
 800318a:	2301      	movs	r3, #1
    }
 800318c:	4618      	mov	r0, r3
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <_ZN5L6470I8shield_3E5go_toEi>:
    /**
     * @brief  Going to a specified position through the shortest path.
     * @param  position The desired position.
     * @retval None.
     */
    virtual void go_to(signed int position)
 8003194:	b590      	push	{r4, r7, lr}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
    {
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 80031a6:	681c      	ldr	r4, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6839      	ldr	r1, [r7, #0]
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	4798      	blx	r3
 80031b8:	4603      	mov	r3, r0
 80031ba:	4619      	mov	r1, r3
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	47a0      	blx	r4
    }
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd90      	pop	{r4, r7, pc}

080031c8 <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE>:
     * @brief  Going to a specified position imposing the desired direction.
     * @param  position The desired position.
     * @param  direction The direction of rotation.
     * @retval None.
     */
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 80031c8:	b5b0      	push	{r4, r5, r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	4613      	mov	r3, r2
 80031d4:	71fb      	strb	r3, [r7, #7]
    {
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 80031de:	681c      	ldr	r4, [r3, #0]
 80031e0:	79fb      	ldrb	r3, [r7, #7]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d101      	bne.n	80031ea <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE+0x22>
 80031e6:	2501      	movs	r5, #1
 80031e8:	e000      	b.n	80031ec <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE+0x24>
 80031ea:	2500      	movs	r5, #0
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68b9      	ldr	r1, [r7, #8]
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	4798      	blx	r3
 80031fc:	4603      	mov	r3, r0
 80031fe:	461a      	mov	r2, r3
 8003200:	4629      	mov	r1, r5
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	47a0      	blx	r4
    }
 8003206:	bf00      	nop
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bdb0      	pop	{r4, r5, r7, pc}

0800320e <_ZN5L6470I8shield_3E7go_homeEv>:
    /**
     * @brief  Going to the home position.
     * @param  None.
     * @retval None.
     */
    virtual void go_home(void)
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
    {
        L6470_GoHome();
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	4798      	blx	r3
    }
 8003224:	bf00      	nop
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <_ZN5L6470I8shield_3E7go_markEv>:
    /**
     * @brief  Going to the marked position.
     * @param  None.
     * @retval None.
     */
    virtual void go_mark(void)
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
    {
        L6470_GoMark();
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	4798      	blx	r3
    }
 8003242:	bf00      	nop
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
     * @note   The identifier of the action about the absolute position can be
     *         one of the following:
     *           + L6470_ACT_RST_ID: the absolute position is reset;
     *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
     */
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 800324a:	b5b0      	push	{r4, r5, r7, lr}
 800324c:	b084      	sub	sp, #16
 800324e:	af00      	add	r7, sp, #0
 8003250:	60f8      	str	r0, [r7, #12]
 8003252:	607b      	str	r3, [r7, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	72fb      	strb	r3, [r7, #11]
 8003258:	4613      	mov	r3, r2
 800325a:	72bb      	strb	r3, [r7, #10]
    {
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003264:	681c      	ldr	r4, [r3, #0]
 8003266:	7abb      	ldrb	r3, [r7, #10]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d101      	bne.n	8003270 <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 800326c:	2501      	movs	r5, #1
 800326e:	e000      	b.n	8003272 <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8003270:	2500      	movs	r5, #0
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	ee07 2a90 	vmov	s15, r2
 8003282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003286:	eeb0 0a67 	vmov.f32	s0, s15
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	4798      	blx	r3
 800328e:	4603      	mov	r3, r0
 8003290:	7af9      	ldrb	r1, [r7, #11]
 8003292:	462a      	mov	r2, r5
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	47a0      	blx	r4
    }
 8003298:	bf00      	nop
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bdb0      	pop	{r4, r5, r7, pc}

080032a0 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE>:
    /**
     * @brief  Running towards a specified direction.
     * @param  direction The direction of rotation.
     * @retval None.
     */
    virtual void run(StepperMotor::direction_t direction)
 80032a0:	b5b0      	push	{r4, r5, r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	70fb      	strb	r3, [r7, #3]
    {
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 80032b4:	681c      	ldr	r4, [r3, #0]
 80032b6:	78fb      	ldrb	r3, [r7, #3]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d101      	bne.n	80032c0 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE+0x20>
 80032bc:	2501      	movs	r5, #1
 80032be:	e000      	b.n	80032c2 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE+0x22>
 80032c0:	2500      	movs	r5, #0
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2106      	movs	r1, #6
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	4798      	blx	r3
 80032d2:	4603      	mov	r3, r0
 80032d4:	461a      	mov	r2, r3
 80032d6:	4629      	mov	r1, r5
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	47a0      	blx	r4
    }
 80032dc:	bf00      	nop
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bdb0      	pop	{r4, r5, r7, pc}

080032e4 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj>:
     * @brief  Running towards a specified direction at the given speed.
     * @param  direction The direction of rotation.
     * @param  speed The speed value in pps.
     * @retval None.
     */
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 80032e4:	b5b0      	push	{r4, r5, r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	460b      	mov	r3, r1
 80032ee:	607a      	str	r2, [r7, #4]
 80032f0:	72fb      	strb	r3, [r7, #11]
    {
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 80032fa:	681c      	ldr	r4, [r3, #0]
 80032fc:	7afb      	ldrb	r3, [r7, #11]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj+0x22>
 8003302:	2501      	movs	r5, #1
 8003304:	e000      	b.n	8003308 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj+0x24>
 8003306:	2500      	movs	r5, #0
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	ee07 2a90 	vmov	s15, r2
 8003318:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800331c:	eeb0 0a67 	vmov.f32	s0, s15
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	4798      	blx	r3
 8003324:	4603      	mov	r3, r0
 8003326:	461a      	mov	r2, r3
 8003328:	4629      	mov	r1, r5
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	47a0      	blx	r4
    }
 800332e:	bf00      	nop
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bdb0      	pop	{r4, r5, r7, pc}

08003336 <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj>:
     * @brief  Moving towards a specified direction for a certain number of steps.
     * @param  direction The direction of rotation.
     * @param  steps The desired number of steps.
     * @retval None.
     */
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 8003336:	b580      	push	{r7, lr}
 8003338:	b084      	sub	sp, #16
 800333a:	af00      	add	r7, sp, #0
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	460b      	mov	r3, r1
 8003340:	607a      	str	r2, [r7, #4]
 8003342:	72fb      	strb	r3, [r7, #11]
    {
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	7afa      	ldrb	r2, [r7, #11]
 8003350:	2a01      	cmp	r2, #1
 8003352:	d101      	bne.n	8003358 <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj+0x22>
 8003354:	2101      	movs	r1, #1
 8003356:	e000      	b.n	800335a <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj+0x24>
 8003358:	2100      	movs	r1, #0
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	4798      	blx	r3
    }
 8003360:	bf00      	nop
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <_ZN5L6470I8shield_3E9soft_stopEv>:
     * @brief  Stopping the motor through an immediate deceleration up to zero speed.
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     */
    virtual void soft_stop(void)
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
    {
        L6470_SoftStop();
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	4798      	blx	r3
    }
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <_ZN5L6470I8shield_3E9hard_stopEv>:
    /**
     * @brief  Stopping the motor through an immediate infinite deceleration.
     * @param  None.
     * @retval None.
     */
    virtual void hard_stop(void)
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
    {
        L6470_HardStop();
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	4798      	blx	r3
    }
 800339c:	bf00      	nop
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <_ZN5L6470I8shield_3E8soft_hizEv>:
     * @brief  Disabling the power bridge after performing a deceleration to zero.
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     */
    virtual void soft_hiz(void)
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
    {
        L6470_SoftHiZ();
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	4798      	blx	r3
    }
 80033ba:	bf00      	nop
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <_ZN5L6470I8shield_3E8hard_hizEv>:
    /**
     * @brief  Disabling the power bridge immediately.
     * @param  None.
     * @retval None.
     */
    virtual void hard_hiz(void)
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b082      	sub	sp, #8
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
    {
        L6470_HardHiZ();
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f503 73ee 	add.w	r3, r3, #476	@ 0x1dc
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	4798      	blx	r3
    }
 80033d8:	bf00      	nop
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <_ZN5L6470I8shield_3E17wait_while_activeEv>:
    /**
     * @brief  Waiting while the motor is active.
     * @param  None.
     * @retval None.
     */
    virtual void wait_while_active(void)
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
    {
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 80033e8:	bf00      	nop
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2101      	movs	r1, #1
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	4798      	blx	r3
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	bf0c      	ite	eq
 8003400:	2301      	moveq	r3, #1
 8003402:	2300      	movne	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1ef      	bne.n	80033ea <_ZN5L6470I8shield_3E17wait_while_activeEv+0xa>
    }
 800340a:	bf00      	nop
 800340c:	bf00      	nop
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE>:
     * @param   direction The direction of rotation.
     * @retval  None.
     * @warning Setting the step-clock mode implies first disabling the power bridge through
     *          the soft_hiz() method.
     */
    virtual void step_clock(StepperMotor::direction_t direction)
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	460b      	mov	r3, r1
 800341e:	70fb      	strb	r3, [r7, #3]
    {
        soft_hiz();
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	3380      	adds	r3, #128	@ 0x80
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	78fa      	ldrb	r2, [r7, #3]
 8003438:	2a01      	cmp	r2, #1
 800343a:	d101      	bne.n	8003440 <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE+0x2c>
 800343c:	2201      	movs	r2, #1
 800343e:	e000      	b.n	8003442 <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE+0x2e>
 8003440:	2200      	movs	r2, #0
 8003442:	4611      	mov	r1, r2
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	4798      	blx	r3
    }
 8003448:	bf00      	nop
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
      * @note   The identifier of the action about the absolute position can be
      *         one of the following:
      *           + L6470_ACT_RST_ID: the absolute position is reset;
      *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
      */
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	70fb      	strb	r3, [r7, #3]
 800345c:	4613      	mov	r3, r2
 800345e:	70bb      	strb	r3, [r7, #2]
    {
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	78ba      	ldrb	r2, [r7, #2]
 800346c:	2a01      	cmp	r2, #1
 800346e:	d101      	bne.n	8003474 <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8003470:	2201      	movs	r2, #1
 8003472:	e000      	b.n	8003476 <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8003474:	2200      	movs	r2, #0
 8003476:	78f9      	ldrb	r1, [r7, #3]
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	4798      	blx	r3
    }
 800347c:	bf00      	nop
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <_ZN5L6470I8shield_3E12reset_deviceEv>:
    /**
      * @brief  Resetting the device to power-up conditions.
      * @param  None.
      * @retval None.
      */
    virtual void reset_device(void)
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
    {
        L6470_ResetDevice();
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	4798      	blx	r3
    }
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <_ZN5L6470I8shield_3E18prepare_get_statusEv>:
     * @brief  Preparing the command to get the status.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_status(void)
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b082      	sub	sp, #8
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetStatus();
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80034c0:	bf00      	nop
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <_ZN5L6470I8shield_3E21prepare_get_parameterEj>:
     *           + L6470_STEP_MODE_ID
     *           + L6470_ALARM_EN_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void prepare_get_parameter(unsigned int parameter)
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	4611      	mov	r1, r2
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <_ZN5L6470I8shield_3E20prepare_get_positionEv>:
     * @brief  Preparing the command to get the position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_position(void)
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b082      	sub	sp, #8
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2100      	movs	r1, #0
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003516:	bf00      	nop
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <_ZN5L6470I8shield_3E16prepare_get_markEv>:
     * @brief  Preparing the command to get the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_mark(void)
 800351e:	b580      	push	{r7, lr}
 8003520:	b082      	sub	sp, #8
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2102      	movs	r1, #2
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2202      	movs	r2, #2
 800353a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800353e:	bf00      	nop
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <_ZN5L6470I8shield_3E17prepare_get_speedEv>:
     * @brief  Preparing the command to get the current speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_speed(void)
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2103      	movs	r1, #3
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2203      	movs	r2, #3
 8003562:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003566:	bf00      	nop
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <_ZN5L6470I8shield_3E21prepare_get_max_speedEv>:
     * @brief  Preparing the command to get the maximum speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_max_speed(void)
 800356e:	b580      	push	{r7, lr}
 8003570:	b082      	sub	sp, #8
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2106      	movs	r1, #6
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2204      	movs	r2, #4
 800358a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800358e:	bf00      	nop
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <_ZN5L6470I8shield_3E21prepare_get_min_speedEv>:
     * @brief  Preparing the command to get the minimum speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_min_speed(void)
 8003596:	b580      	push	{r7, lr}
 8003598:	b082      	sub	sp, #8
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2107      	movs	r1, #7
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2205      	movs	r2, #5
 80035b2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80035b6:	bf00      	nop
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <_ZN5L6470I8shield_3E24prepare_get_accelerationEv>:
     * @brief  Preparing the command to get the acceleration in pps^2.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_acceleration(void)
 80035be:	b580      	push	{r7, lr}
 80035c0:	b082      	sub	sp, #8
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2104      	movs	r1, #4
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2206      	movs	r2, #6
 80035da:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80035de:	bf00      	nop
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <_ZN5L6470I8shield_3E24prepare_get_decelerationEv>:
     * @brief  Preparing the command to get the deceleration in pps^2.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_deceleration(void)
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b082      	sub	sp, #8
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2105      	movs	r1, #5
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2207      	movs	r2, #7
 8003602:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003606:	bf00      	nop
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
	...

08003610 <_ZN5L6470I8shield_3E21prepare_get_directionEv>:
     * @brief  Preparing the command to get the direction of rotation.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_direction(void)
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
    {
        if (!L6470_DaisyChain_HalfPrepared) {
 8003618:	4b0b      	ldr	r3, [pc, #44]	@ (8003648 <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x38>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10a      	bne.n	8003636 <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x26>
            /* To avoid deleting the previous entered command. */
            L6470_DaisyChain_HalfPrepared = ONE_F;
 8003620:	4b09      	ldr	r3, [pc, #36]	@ (8003648 <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x38>)
 8003622:	2201      	movs	r2, #1
 8003624:	701a      	strb	r2, [r3, #0]
            /* Resetting commands. */
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4906      	ldr	r1, [pc, #24]	@ (800364c <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x3c>)
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	4798      	blx	r3
        }
        prepared_action = PREPARED_GET_DIRECTION;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2208      	movs	r2, #8
 800363a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800363e:	bf00      	nop
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	20000275 	.word	0x20000275
 800364c:	20000278 	.word	0x20000278

08003650 <_ZN5L6470I8shield_3E21prepare_set_parameterEjj>:
     *           + L6470_ADC_OUT_ID
     *           + L6470_STEP_MODE_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	b2d1      	uxtb	r1, r2
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003678:	bf00      	nop
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <_ZN5L6470I8shield_3E16prepare_set_homeEv>:
     *         the home position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_home(void)
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareResetPos();
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800369e:	bf00      	nop
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <_ZN5L6470I8shield_3E16prepare_set_markEv>:
     *         the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_mark(void)
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b082      	sub	sp, #8
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
        /*
           Set "0" now as marked position. This value will be replaced by the
           actual position read at the time when the prepared actions will be
           performed.
        */
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2200      	movs	r2, #0
 80036ba:	2102      	movs	r1, #2
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2209      	movs	r2, #9
 80036c4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80036c8:	bf00      	nop
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <_ZN5L6470I8shield_3E16prepare_set_markEi>:
     *         the marked position.
     * @param  position The given position.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_mark(signed int position)
 80036d0:	b590      	push	{r4, r7, lr}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80036e2:	681c      	ldr	r4, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6839      	ldr	r1, [r7, #0]
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	4798      	blx	r3
 80036f4:	4603      	mov	r3, r0
 80036f6:	461a      	mov	r2, r3
 80036f8:	2102      	movs	r1, #2
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	bd90      	pop	{r4, r7, pc}

0800370e <_ZN5L6470I8shield_3E17prepare_set_speedEj>:
     * @brief  Preparing the command to set the current speed in pps.
     * @param  speed The current speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_speed(unsigned int speed)
 800370e:	b590      	push	{r4, r7, lr}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003720:	681c      	ldr	r4, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	ee07 2a90 	vmov	s15, r2
 8003732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003736:	eeb0 0a67 	vmov.f32	s0, s15
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	4798      	blx	r3
 800373e:	4603      	mov	r3, r0
 8003740:	461a      	mov	r2, r3
 8003742:	2103      	movs	r1, #3
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	bd90      	pop	{r4, r7, pc}

08003758 <_ZN5L6470I8shield_3E21prepare_set_max_speedEj>:
     * @brief  Preparing the command to set the maximum speed in pps.
     * @param  speed The maximum speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_max_speed(unsigned int speed)
 8003758:	b590      	push	{r4, r7, lr}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800376a:	681c      	ldr	r4, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	ee07 2a90 	vmov	s15, r2
 800377c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003780:	eeb0 0a67 	vmov.f32	s0, s15
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	4798      	blx	r3
 8003788:	4603      	mov	r3, r0
 800378a:	461a      	mov	r2, r3
 800378c:	2106      	movs	r1, #6
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd90      	pop	{r4, r7, pc}

080037a2 <_ZN5L6470I8shield_3E21prepare_set_min_speedEj>:
     * @brief  Preparing the command to set the minimum speed in pps.
     * @param  speed The minimum speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_min_speed(unsigned int speed)
 80037a2:	b590      	push	{r4, r7, lr}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
 80037aa:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80037b4:	681c      	ldr	r4, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	ee07 2a90 	vmov	s15, r2
 80037c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ca:	eeb0 0a67 	vmov.f32	s0, s15
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	4798      	blx	r3
 80037d2:	4603      	mov	r3, r0
 80037d4:	461a      	mov	r2, r3
 80037d6:	2107      	movs	r1, #7
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd90      	pop	{r4, r7, pc}

080037ec <_ZN5L6470I8shield_3E24prepare_set_accelerationEj>:
     * @brief  Preparing the command to set the acceleration in pps^2.
     * @param  acceleration The acceleration in pps^2.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_acceleration(unsigned int acceleration)
 80037ec:	b590      	push	{r4, r7, lr}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80037fe:	681c      	ldr	r4, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	ee07 2a90 	vmov	s15, r2
 8003810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003814:	eeb0 0a67 	vmov.f32	s0, s15
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	4798      	blx	r3
 800381c:	4603      	mov	r3, r0
 800381e:	461a      	mov	r2, r3
 8003820:	2104      	movs	r1, #4
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800382e:	bf00      	nop
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	bd90      	pop	{r4, r7, pc}

08003836 <_ZN5L6470I8shield_3E24prepare_set_decelerationEj>:
     * @brief  Preparing the command to set the deceleration in pps^2.
     * @param  deceleration The deceleration in pps^2.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_deceleration(unsigned int deceleration)
 8003836:	b590      	push	{r4, r7, lr}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
 800383e:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003848:	681c      	ldr	r4, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	ee07 2a90 	vmov	s15, r2
 800385a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800385e:	eeb0 0a67 	vmov.f32	s0, s15
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	4798      	blx	r3
 8003866:	4603      	mov	r3, r0
 8003868:	461a      	mov	r2, r3
 800386a:	2105      	movs	r1, #5
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	bd90      	pop	{r4, r7, pc}

08003880 <_ZN5L6470I8shield_3E13prepare_go_toEi>:
     * @brief  Preparing the command to go to a specified position.
     * @param  position The desired position.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_to(signed int position)
 8003880:	b590      	push	{r4, r7, lr}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8003892:	681c      	ldr	r4, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6839      	ldr	r1, [r7, #0]
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	4798      	blx	r3
 80038a4:	4603      	mov	r3, r0
 80038a6:	4619      	mov	r1, r3
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd90      	pop	{r4, r7, pc}

080038bc <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE>:
     * @param  position The desired position.
     * @param  direction The direction of rotation.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 80038bc:	b5b0      	push	{r4, r5, r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	4613      	mov	r3, r2
 80038c8:	71fb      	strb	r3, [r7, #7]
    {
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 80038d2:	681c      	ldr	r4, [r3, #0]
 80038d4:	79fb      	ldrb	r3, [r7, #7]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d101      	bne.n	80038de <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 80038da:	2501      	movs	r5, #1
 80038dc:	e000      	b.n	80038e0 <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 80038de:	2500      	movs	r5, #0
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68b9      	ldr	r1, [r7, #8]
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	4798      	blx	r3
 80038f0:	4603      	mov	r3, r0
 80038f2:	461a      	mov	r2, r3
 80038f4:	4629      	mov	r1, r5
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003902:	bf00      	nop
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bdb0      	pop	{r4, r5, r7, pc}

0800390a <_ZN5L6470I8shield_3E15prepare_go_homeEv>:
     * @brief  Preparing the command to go to the home position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_home(void)
 800390a:	b580      	push	{r7, lr}
 800390c:	b082      	sub	sp, #8
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGoHome();
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003928:	bf00      	nop
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <_ZN5L6470I8shield_3E15prepare_go_markEv>:
     * @brief  Preparing the command to go to the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_mark(void)
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGoMark();
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
     *         The identifier of the action about the absolute position can be
     *         one of the following:
     *           + L6470_ACT_RST_ID: the absolute position is reset;
     *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
     */
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 8003956:	b5b0      	push	{r4, r5, r7, lr}
 8003958:	b084      	sub	sp, #16
 800395a:	af00      	add	r7, sp, #0
 800395c:	60f8      	str	r0, [r7, #12]
 800395e:	607b      	str	r3, [r7, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	72fb      	strb	r3, [r7, #11]
 8003964:	4613      	mov	r3, r2
 8003966:	72bb      	strb	r3, [r7, #10]
    {
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003970:	681c      	ldr	r4, [r3, #0]
 8003972:	7abb      	ldrb	r3, [r7, #10]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d101      	bne.n	800397c <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8003978:	2501      	movs	r5, #1
 800397a:	e000      	b.n	800397e <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 800397c:	2500      	movs	r5, #0
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	ee07 2a90 	vmov	s15, r2
 800398e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003992:	eeb0 0a67 	vmov.f32	s0, s15
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	4798      	blx	r3
 800399a:	4603      	mov	r3, r0
 800399c:	7af9      	ldrb	r1, [r7, #11]
 800399e:	462a      	mov	r2, r5
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80039ac:	bf00      	nop
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bdb0      	pop	{r4, r5, r7, pc}

080039b4 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE>:
     *         at the maximum speed.
     * @param  direction The direction of rotation.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_run(StepperMotor::direction_t direction)
 80039b4:	b5b0      	push	{r4, r5, r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	460b      	mov	r3, r1
 80039be:	70fb      	strb	r3, [r7, #3]
    {
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80039c8:	681c      	ldr	r4, [r3, #0]
 80039ca:	78fb      	ldrb	r3, [r7, #3]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE+0x20>
 80039d0:	2501      	movs	r5, #1
 80039d2:	e000      	b.n	80039d6 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE+0x22>
 80039d4:	2500      	movs	r5, #0
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2106      	movs	r1, #6
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	4798      	blx	r3
 80039e6:	4603      	mov	r3, r0
 80039e8:	461a      	mov	r2, r3
 80039ea:	4629      	mov	r1, r5
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80039f8:	bf00      	nop
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bdb0      	pop	{r4, r5, r7, pc}

08003a00 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj>:
     * @param  direction The direction of rotation.
     * @param  speed The speed value in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 8003a00:	b5b0      	push	{r4, r5, r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	72fb      	strb	r3, [r7, #11]
    {
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8003a16:	681c      	ldr	r4, [r3, #0]
 8003a18:	7afb      	ldrb	r3, [r7, #11]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d101      	bne.n	8003a22 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 8003a1e:	2501      	movs	r5, #1
 8003a20:	e000      	b.n	8003a24 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 8003a22:	2500      	movs	r5, #0
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	ee07 2a90 	vmov	s15, r2
 8003a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a38:	eeb0 0a67 	vmov.f32	s0, s15
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	4798      	blx	r3
 8003a40:	4603      	mov	r3, r0
 8003a42:	461a      	mov	r2, r3
 8003a44:	4629      	mov	r1, r5
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003a52:	bf00      	nop
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bdb0      	pop	{r4, r5, r7, pc}

08003a5a <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj>:
     * @param  direction The direction of rotation.
     * @param  steps The desired number of steps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b084      	sub	sp, #16
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	60f8      	str	r0, [r7, #12]
 8003a62:	460b      	mov	r3, r1
 8003a64:	607a      	str	r2, [r7, #4]
 8003a66:	72fb      	strb	r3, [r7, #11]
    {
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	7afa      	ldrb	r2, [r7, #11]
 8003a74:	2a01      	cmp	r2, #1
 8003a76:	d101      	bne.n	8003a7c <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 8003a78:	2101      	movs	r1, #1
 8003a7a:	e000      	b.n	8003a7e <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003a8c:	bf00      	nop
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <_ZN5L6470I8shield_3E17prepare_soft_stopEv>:
     * @brief  Preparing the command to stop the motor.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_soft_stop(void)
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareSoftStop();
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003ab2:	bf00      	nop
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <_ZN5L6470I8shield_3E17prepare_hard_stopEv>:
     * @brief  Preparing the command to stop the motor and disabling the power bridge.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_hard_stop(void)
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b082      	sub	sp, #8
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareHardStop();
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003ad8:	bf00      	nop
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <_ZN5L6470I8shield_3E16prepare_soft_hizEv>:
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_soft_hiz(void)
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareSoftHiZ();
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003afe:	bf00      	nop
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <_ZN5L6470I8shield_3E16prepare_hard_hizEv>:
     * @brief  Preparing the command to disable the power bridge immediately.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_hard_hiz(void)
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b082      	sub	sp, #8
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareHardHiZ();
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003b24:	bf00      	nop
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE>:
     * @retval  None.
     * @warning Setting the step-clock mode requires an explicit action by the user to first
     *          disable the power bridge through the soft_hiz() method.
     * @note    The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	460b      	mov	r3, r1
 8003b36:	70fb      	strb	r3, [r7, #3]
    {
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	78fa      	ldrb	r2, [r7, #3]
 8003b44:	2a01      	cmp	r2, #1
 8003b46:	d101      	bne.n	8003b4c <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 8003b48:	2201      	movs	r2, #1
 8003b4a:	e000      	b.n	8003b4e <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	4611      	mov	r1, r2
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003b5c:	bf00      	nop
 8003b5e:	3708      	adds	r7, #8
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
      *         The identifier of the action about the absolute position can be
      *         one of the following:
      *           + L6470_ACT_RST_ID: the absolute position is reset;
      *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
      */
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	70fb      	strb	r3, [r7, #3]
 8003b70:	4613      	mov	r3, r2
 8003b72:	70bb      	strb	r3, [r7, #2]
    {
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	78ba      	ldrb	r2, [r7, #2]
 8003b80:	2a01      	cmp	r2, #1
 8003b82:	d101      	bne.n	8003b88 <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8003b84:	2201      	movs	r2, #1
 8003b86:	e000      	b.n	8003b8a <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8003b88:	2200      	movs	r2, #0
 8003b8a:	78f9      	ldrb	r1, [r7, #3]
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003b98:	bf00      	nop
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <_ZN5L6470I8shield_3E20prepare_reset_deviceEv>:
      * @brief  Preparing the command to reset the device to power-up conditions.
      * @param  None.
      * @retval None.
      * @note   The command will be sent by issuing "perform_action()".
      */
    virtual void prepare_reset_device(void)
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareResetDevice();
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003bbe:	bf00      	nop
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <_ZN5L6470I8shield_3E24perform_prepared_actionsEv>:
      * @brief    Performing all the actions prepared on the components
      *           of the daisy-chain.
      * @param    None.
      * @retval   The raw data returned by the components.
      */
    uint8_t* perform_prepared_actions(void)
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b082      	sub	sp, #8
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
    {
        return L6470_PerformPreparedApplicationCommand();
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	4798      	blx	r3
 8003bdc:	4603      	mov	r3, r0
    }
 8003bde:	4618      	mov	r0, r3
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <_ZN5L6470I8shield_3E19get_prepared_actionEv>:
    /**
      * @brief    Getting the prepared action.
      * @param    None
      * @retval   The prepared action.
      */
    prepared_action_t get_prepared_action(void)
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
    {
        return prepared_action;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    }
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <_ZN5L6470I8shield_3E10get_resultEPh>:
      * @brief    Converting the raw data received by the component according to
      *           the action performed on it.
      * @param    raw_data The received raw data.
      * @retval   The result of the action performed.
      */
    int32_t get_result(uint8_t *raw_data)
 8003c00:	b5b0      	push	{r4, r5, r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
    {
        switch (prepared_action) {
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8003c10:	3b01      	subs	r3, #1
 8003c12:	2b07      	cmp	r3, #7
 8003c14:	f200 80fe 	bhi.w	8003e14 <_ZN5L6470I8shield_3E10get_resultEPh+0x214>
 8003c18:	a201      	add	r2, pc, #4	@ (adr r2, 8003c20 <_ZN5L6470I8shield_3E10get_resultEPh+0x20>)
 8003c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1e:	bf00      	nop
 8003c20:	08003c41 	.word	0x08003c41
 8003c24:	08003c6d 	.word	0x08003c6d
 8003c28:	08003c9b 	.word	0x08003c9b
 8003c2c:	08003cdf 	.word	0x08003cdf
 8003c30:	08003d25 	.word	0x08003d25
 8003c34:	08003d6b 	.word	0x08003d6b
 8003c38:	08003db1 	.word	0x08003db1
 8003c3c:	08003df7 	.word	0x08003df7
            case PREPARED_GET_POSITION:
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8003c48:	681c      	ldr	r4, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6a12      	ldr	r2, [r2, #32]
 8003c58:	7b92      	ldrb	r2, [r2, #14]
 8003c5a:	6839      	ldr	r1, [r7, #0]
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	4798      	blx	r3
 8003c60:	4603      	mov	r3, r0
 8003c62:	4619      	mov	r1, r3
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	47a0      	blx	r4
 8003c68:	4603      	mov	r3, r0
 8003c6a:	e0d4      	b.n	8003e16 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_MARK:
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8003c74:	681c      	ldr	r4, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6a12      	ldr	r2, [r2, #32]
 8003c84:	3228      	adds	r2, #40	@ 0x28
 8003c86:	7b92      	ldrb	r2, [r2, #14]
 8003c88:	6839      	ldr	r1, [r7, #0]
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	4798      	blx	r3
 8003c8e:	4603      	mov	r3, r0
 8003c90:	4619      	mov	r1, r3
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	47a0      	blx	r4
 8003c96:	4603      	mov	r3, r0
 8003c98:	e0bd      	b.n	8003e16 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_SPEED:
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ca2:	681c      	ldr	r4, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8003cac:	681d      	ldr	r5, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	6a12      	ldr	r2, [r2, #32]
 8003cbc:	323c      	adds	r2, #60	@ 0x3c
 8003cbe:	7b92      	ldrb	r2, [r2, #14]
 8003cc0:	6839      	ldr	r1, [r7, #0]
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	4798      	blx	r3
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	4619      	mov	r1, r3
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	47a8      	blx	r5
 8003cce:	eef0 7a40 	vmov.f32	s15, s0
 8003cd2:	eeb0 0a67 	vmov.f32	s0, s15
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	47a0      	blx	r4
 8003cda:	4603      	mov	r3, r0
 8003cdc:	e09b      	b.n	8003e16 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_MAX_SPEED:
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ce6:	681c      	ldr	r4, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003cf0:	681d      	ldr	r5, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6a12      	ldr	r2, [r2, #32]
 8003d00:	3278      	adds	r2, #120	@ 0x78
 8003d02:	7b92      	ldrb	r2, [r2, #14]
 8003d04:	6839      	ldr	r1, [r7, #0]
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	4798      	blx	r3
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	4619      	mov	r1, r3
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	47a8      	blx	r5
 8003d14:	eef0 7a40 	vmov.f32	s15, s0
 8003d18:	eeb0 0a67 	vmov.f32	s0, s15
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	47a0      	blx	r4
 8003d20:	4603      	mov	r3, r0
 8003d22:	e078      	b.n	8003e16 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_MIN_SPEED:
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d2c:	681c      	ldr	r4, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8003d36:	681d      	ldr	r5, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6a12      	ldr	r2, [r2, #32]
 8003d46:	328c      	adds	r2, #140	@ 0x8c
 8003d48:	7b92      	ldrb	r2, [r2, #14]
 8003d4a:	6839      	ldr	r1, [r7, #0]
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	4798      	blx	r3
 8003d50:	4603      	mov	r3, r0
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	4619      	mov	r1, r3
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	47a8      	blx	r5
 8003d5a:	eef0 7a40 	vmov.f32	s15, s0
 8003d5e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	47a0      	blx	r4
 8003d66:	4603      	mov	r3, r0
 8003d68:	e055      	b.n	8003e16 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_ACCELERATION:
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d72:	681c      	ldr	r4, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003d7c:	681d      	ldr	r5, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6a12      	ldr	r2, [r2, #32]
 8003d8c:	3250      	adds	r2, #80	@ 0x50
 8003d8e:	7b92      	ldrb	r2, [r2, #14]
 8003d90:	6839      	ldr	r1, [r7, #0]
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	4798      	blx	r3
 8003d96:	4603      	mov	r3, r0
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	47a8      	blx	r5
 8003da0:	eef0 7a40 	vmov.f32	s15, s0
 8003da4:	eeb0 0a67 	vmov.f32	s0, s15
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	47a0      	blx	r4
 8003dac:	4603      	mov	r3, r0
 8003dae:	e032      	b.n	8003e16 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_DECELERATION:
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003db8:	681c      	ldr	r4, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003dc2:	681d      	ldr	r5, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	6a12      	ldr	r2, [r2, #32]
 8003dd2:	3264      	adds	r2, #100	@ 0x64
 8003dd4:	7b92      	ldrb	r2, [r2, #14]
 8003dd6:	6839      	ldr	r1, [r7, #0]
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	4798      	blx	r3
 8003ddc:	4603      	mov	r3, r0
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	4619      	mov	r1, r3
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	47a8      	blx	r5
 8003de6:	eef0 7a40 	vmov.f32	s15, s0
 8003dea:	eeb0 0a67 	vmov.f32	s0, s15
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	47a0      	blx	r4
 8003df2:	4603      	mov	r3, r0
 8003df4:	e00f      	b.n	8003e16 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_DIRECTION:
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2104      	movs	r1, #4
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	4798      	blx	r3
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d101      	bne.n	8003e10 <_ZN5L6470I8shield_3E10get_resultEPh+0x210>
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e002      	b.n	8003e16 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
 8003e10:	2300      	movs	r3, #0
 8003e12:	e000      	b.n	8003e16 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            default:
            case PREPARED_NO_ACTION:
                return 0;
 8003e14:	2300      	movs	r3, #0
        }
    }
 8003e16:	4618      	mov	r0, r3
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bdb0      	pop	{r4, r5, r7, pc}
 8003e1e:	bf00      	nop

08003e20 <_ZN5L6470I8shield_3E13L6470_DISABLEEv>:
    }

    /*
     * Puts the device in reset mode.
     */
    void L6470_DISABLE(void)
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
    {
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6898      	ldr	r0, [r3, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	899b      	ldrh	r3, [r3, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	4619      	mov	r1, r3
 8003e34:	f009 fbbe 	bl	800d5b4 <HAL_GPIO_WritePin>
    }
 8003e38:	bf00      	nop
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm>:
  * 
  * @param  AbsPos      The absolute position in the range from [-(2^21)] to [+(2^21)-1].
  * @retval Position    The position as signed number.
  */
template <class shield_x>
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
{
  if (AbsPos > L6470_MAX_POSITION)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e50:	d303      	bcc.n	8003e5a <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	f5a3 0380 	sub.w	r3, r3, #4194304	@ 0x400000
 8003e58:	e000      	b.n	8003e5c <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm+0x1c>
  else
    return AbsPos;
 8003e5a:	683b      	ldr	r3, [r7, #0]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl>:
  * 
  * @param  Position    The position as signed number.
  * @retval AbsPos      The absolute position in the range from [-(2^21)] to [+(2^21)-1].
  */
template <class shield_x>
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
{
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	db05      	blt.n	8003e84 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x1c>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e7e:	da01      	bge.n	8003e84 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	e00c      	b.n	8003e9e <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x36>
  else
  {
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	f513 1f00 	cmn.w	r3, #2097152	@ 0x200000
 8003e8a:	db06      	blt.n	8003e9a <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x32>
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	da03      	bge.n	8003e9a <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	f503 0380 	add.w	r3, r3, #4194304	@ 0x400000
 8003e98:	e001      	b.n	8003e9e <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x36>
    else
      return (L6470_POSITION_RANGE + 1);        // OVF
 8003e9a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  }
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
	...

08003eac <_ZN5L6470I8shield_3E20L6470_Speed_2_Step_sEm>:
  * 
  * @param  Speed       The SPEED register value.
  * @retval step/s      The speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
{
  return (Speed * ((float)14.9012e-3));
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	ee07 3a90 	vmov	s15, r3
 8003ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ec0:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003ed8 <_ZN5L6470I8shield_3E20L6470_Speed_2_Step_sEm+0x2c>
 8003ec4:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	3c74242a 	.word	0x3c74242a

08003edc <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf>:
  * 
  * @param  step/s      The speed as step/s.
  * @retval Speed       The SPEED register value.
  */
template <class shield_x>
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 8003ee8:	edd7 7a00 	vldr	s15, [r7]
 8003eec:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003f20 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x44>
 8003ef0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef8:	d80a      	bhi.n	8003f10 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 8003efa:	ed97 7a00 	vldr	s14, [r7]
 8003efe:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8003f24 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x48>
 8003f02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f0a:	ee17 3a90 	vmov	r3, s15
 8003f0e:	e000      	b.n	8003f12 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x36>
  else
    return 0;   // Warning
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	4674241b 	.word	0x4674241b
 8003f24:	3c74242a 	.word	0x3c74242a

08003f28 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et>:
  * 
  * @param  Acc         The ACCEL register value.
  * @retval step/(s^2)  The acceleration as step/(s^2).
  */
template <class shield_x>
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	460b      	mov	r3, r1
 8003f32:	807b      	strh	r3, [r7, #2]
{
  if (Acc <= L6470_MAX_ACC)
 8003f34:	887b      	ldrh	r3, [r7, #2]
 8003f36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f3a:	d209      	bcs.n	8003f50 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 8003f3c:	887b      	ldrh	r3, [r7, #2]
 8003f3e:	ee07 3a90 	vmov	s15, r3
 8003f42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f46:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003f64 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x3c>
 8003f4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f4e:	e001      	b.n	8003f54 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x2c>
  else
    return 0;   // Warning
 8003f50:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8003f68 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x40>
}
 8003f54:	eeb0 0a67 	vmov.f32	s0, s15
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	4168d4fe 	.word	0x4168d4fe
 8003f68:	00000000 	.word	0x00000000

08003f6c <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf>:
  * 
  * @param  step/(s^2)  The acceleration as step/(s^2).
  * @retval Acc         The ACCEL register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 8003f78:	edd7 7a00 	vldr	s15, [r7]
 8003f7c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003fb0 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x44>
 8003f80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f88:	d80b      	bhi.n	8003fa2 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8003f8a:	ed97 7a00 	vldr	s14, [r7]
 8003f8e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8003fb4 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x48>
 8003f92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f9a:	ee17 3a90 	vmov	r3, s15
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	e000      	b.n	8003fa4 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x38>
  else
    return 0;   // Warning
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr
 8003fb0:	4768c671 	.word	0x4768c671
 8003fb4:	4168d4fe 	.word	0x4168d4fe

08003fb8 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et>:
  * 
  * @param  Dec         The DECEL register value.
  * @retval step/(s^2)  The deceleration as step/(s^2).
  */
template <class shield_x>
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	807b      	strh	r3, [r7, #2]
{
  if (Dec <= L6470_MAX_DEC)
 8003fc4:	887b      	ldrh	r3, [r7, #2]
 8003fc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fca:	d209      	bcs.n	8003fe0 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 8003fcc:	887b      	ldrh	r3, [r7, #2]
 8003fce:	ee07 3a90 	vmov	s15, r3
 8003fd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fd6:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003ff4 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x3c>
 8003fda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fde:	e001      	b.n	8003fe4 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x2c>
  else
    return 0;   // Warning
 8003fe0:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8003ff8 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x40>
}
 8003fe4:	eeb0 0a67 	vmov.f32	s0, s15
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	4168d4fe 	.word	0x4168d4fe
 8003ff8:	00000000 	.word	0x00000000

08003ffc <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf>:
  * 
  * @param  step/(s^2)  The deceleration as step/(s^2).
  * @retval Dec         The DECEL register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 8004008:	edd7 7a00 	vldr	s15, [r7]
 800400c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8004040 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x44>
 8004010:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004018:	d80b      	bhi.n	8004032 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 800401a:	ed97 7a00 	vldr	s14, [r7]
 800401e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8004044 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x48>
 8004022:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004026:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800402a:	ee17 3a90 	vmov	r3, s15
 800402e:	b29b      	uxth	r3, r3
 8004030:	e000      	b.n	8004034 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x38>
  else
    return 0;   // Warning
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	4768c671 	.word	0x4768c671
 8004044:	4168d4fe 	.word	0x4168d4fe

08004048 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt>:
  * 
  * @param  MaxSpeed    The MAX_SPEED register value.
  * @retval step/s      The max speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	807b      	strh	r3, [r7, #2]
{
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 8004054:	887b      	ldrh	r3, [r7, #2]
 8004056:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800405a:	d209      	bcs.n	8004070 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 800405c:	887b      	ldrh	r3, [r7, #2]
 800405e:	ee07 3a90 	vmov	s15, r3
 8004062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004066:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8004084 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 800406a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800406e:	e001      	b.n	8004074 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 8004070:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004088 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 8004074:	eeb0 0a67 	vmov.f32	s0, s15
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	4174240b 	.word	0x4174240b
 8004088:	00000000 	.word	0x00000000

0800408c <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf>:
  * 
  * @param  step/s      The max speed as step/s.
  * @retval MaxSpeed    The MAX_SPEED register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 8004098:	edd7 7a00 	vldr	s15, [r7]
 800409c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80040d0 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x44>
 80040a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040a8:	d80b      	bhi.n	80040c2 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 80040aa:	ed97 7a00 	vldr	s14, [r7]
 80040ae:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80040d4 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x48>
 80040b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040ba:	ee17 3a90 	vmov	r3, s15
 80040be:	b29b      	uxth	r3, r3
 80040c0:	e000      	b.n	80040c4 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x38>
  else
    return 0;   // Warning
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	4673e702 	.word	0x4673e702
 80040d4:	4174240b 	.word	0x4174240b

080040d8 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt>:
  * 
  * @param  MinSpeed    The MIN_SPEED register value.
  * @retval step/s      The min speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	460b      	mov	r3, r1
 80040e2:	807b      	strh	r3, [r7, #2]
{
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 80040e4:	887b      	ldrh	r3, [r7, #2]
 80040e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040ea:	d209      	bcs.n	8004100 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 80040ec:	887b      	ldrh	r3, [r7, #2]
 80040ee:	ee07 3a90 	vmov	s15, r3
 80040f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040f6:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8004114 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x3c>
 80040fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040fe:	e001      	b.n	8004104 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 8004100:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004118 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 8004104:	eeb0 0a67 	vmov.f32	s0, s15
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	3e742401 	.word	0x3e742401
 8004118:	00000000 	.word	0x00000000

0800411c <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf>:
  * 
  * @param  step/s      The min speed as step/s.
  * @retval MinSpeed    The MIN_SPEED register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 8004128:	edd7 7a00 	vldr	s15, [r7]
 800412c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8004160 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x44>
 8004130:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004138:	d80b      	bhi.n	8004152 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 800413a:	ed97 7a00 	vldr	s14, [r7]
 800413e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8004164 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x48>
 8004142:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800414a:	ee17 3a90 	vmov	r3, s15
 800414e:	b29b      	uxth	r3, r3
 8004150:	e000      	b.n	8004154 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x38>
  else
    return 0;   // Warning
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	447414bf 	.word	0x447414bf
 8004164:	3e742401 	.word	0x3e742401

08004168 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt>:
  * 
  * @param  FsSpd       The FS_SPD register value.
  * @retval step/s      The full-step speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	460b      	mov	r3, r1
 8004172:	807b      	strh	r3, [r7, #2]
{
  if (FsSpd <= L6470_MAX_FS_SPD)
 8004174:	887b      	ldrh	r3, [r7, #2]
 8004176:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800417a:	d219      	bcs.n	80041b0 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 800417c:	887b      	ldrh	r3, [r7, #2]
 800417e:	4618      	mov	r0, r3
 8004180:	f7fc fa00 	bl	8000584 <__aeabi_i2d>
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	4b0e      	ldr	r3, [pc, #56]	@ (80041c4 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x5c>)
 800418a:	f7fc f8af 	bl	80002ec <__adddf3>
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	4610      	mov	r0, r2
 8004194:	4619      	mov	r1, r3
 8004196:	f04f 0200 	mov.w	r2, #0
 800419a:	4b0b      	ldr	r3, [pc, #44]	@ (80041c8 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x60>)
 800419c:	f7fc fa5c 	bl	8000658 <__aeabi_dmul>
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	4610      	mov	r0, r2
 80041a6:	4619      	mov	r1, r3
 80041a8:	f7fc fd2e 	bl	8000c08 <__aeabi_d2f>
 80041ac:	4603      	mov	r3, r0
 80041ae:	e001      	b.n	80041b4 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x4c>
  else
    return 0;   // Warning
 80041b0:	f04f 0300 	mov.w	r3, #0
}
 80041b4:	ee07 3a90 	vmov	s15, r3
 80041b8:	eeb0 0a67 	vmov.f32	s0, s15
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	3fe00000 	.word	0x3fe00000
 80041c8:	402e8000 	.word	0x402e8000

080041cc <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 80041d8:	edd7 7a00 	vldr	s15, [r7]
 80041dc:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8004218 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x4c>
 80041e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e8:	d80f      	bhi.n	800420a <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 80041ea:	ed97 7a00 	vldr	s14, [r7]
 80041ee:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800421c <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x50>
 80041f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041f6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80041fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80041fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004202:	ee17 3a90 	vmov	r3, s15
 8004206:	b29b      	uxth	r3, r3
 8004208:	e000      	b.n	800420c <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x40>
  else
    return 0;   // Warning
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	4673e180 	.word	0x4673e180
 800421c:	41740000 	.word	0x41740000

08004220 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	460b      	mov	r3, r1
 800422a:	807b      	strh	r3, [r7, #2]
{
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 800422c:	887b      	ldrh	r3, [r7, #2]
 800422e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004232:	d209      	bcs.n	8004248 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 8004234:	887b      	ldrh	r3, [r7, #2]
 8004236:	ee07 3a90 	vmov	s15, r3
 800423a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800423e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800425c <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x3c>
 8004242:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004246:	e001      	b.n	800424c <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 8004248:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004260 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 800424c:	eeb0 0a67 	vmov.f32	s0, s15
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	3d7423f4 	.word	0x3d7423f4
 8004260:	00000000 	.word	0x00000000

08004264 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 8004270:	edd7 7a00 	vldr	s15, [r7]
 8004274:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80042a8 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x44>
 8004278:	eef4 7ac7 	vcmpe.f32	s15, s14
 800427c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004280:	d80b      	bhi.n	800429a <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 8004282:	ed97 7a00 	vldr	s14, [r7]
 8004286:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80042ac <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x48>
 800428a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800428e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004292:	ee17 3a90 	vmov	r3, s15
 8004296:	b29b      	uxth	r3, r3
 8004298:	e000      	b.n	800429c <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x38>
  else
    return 0;   // Warning
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	44742023 	.word	0x44742023
 80042ac:	3d7423f4 	.word	0x3d7423f4

080042b0 <_ZN5L6470I8shield_3E20L6470_StSlp_2_s_StepEh>:
  * 
  * @param  StartSlope  The ST_SLP register value.
  * @retval s/step      The start slope as s/step.
  */
template <class shield_x>
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	460b      	mov	r3, r1
 80042ba:	70fb      	strb	r3, [r7, #3]
{
//  if (StSlp <= L6470_MAX_ST_SLP)
    return (StSlp * ((float)1.5686e-5));
 80042bc:	78fb      	ldrb	r3, [r7, #3]
 80042be:	ee07 3a90 	vmov	s15, r3
 80042c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042c6:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80042dc <_ZN5L6470I8shield_3E20L6470_StSlp_2_s_StepEh+0x2c>
 80042ca:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 80042ce:	eeb0 0a67 	vmov.f32	s0, s15
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	3783956e 	.word	0x3783956e

080042e0 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 80042ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80042f0:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8004328 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x48>
 80042f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042fc:	d80c      	bhi.n	8004318 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 80042fe:	ed97 7a02 	vldr	s14, [r7, #8]
 8004302:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800432c <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x4c>
 8004306:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800430a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800430e:	edc7 7a01 	vstr	s15, [r7, #4]
 8004312:	793b      	ldrb	r3, [r7, #4]
 8004314:	b2db      	uxtb	r3, r3
 8004316:	e000      	b.n	800431a <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x3a>
  else
    return 0;   // Warning
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	3b8311d9 	.word	0x3b8311d9
 800432c:	3783956e 	.word	0x3783956e

08004330 <_ZN5L6470I8shield_3E23L6470_FnSlpAcc_2_s_StepEh>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	70fb      	strb	r3, [r7, #3]
{
//  if (FnSlpAcc <= L6470_MAX_FN_SLP_ACC)
    return (FnSlpAcc * ((float)1.5686e-5));
 800433c:	78fb      	ldrb	r3, [r7, #3]
 800433e:	ee07 3a90 	vmov	s15, r3
 8004342:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004346:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800435c <_ZN5L6470I8shield_3E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 800434a:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 800434e:	eeb0 0a67 	vmov.f32	s0, s15
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	3783956e 	.word	0x3783956e

08004360 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 800436c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004370:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80043a8 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x48>
 8004374:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800437c:	d80c      	bhi.n	8004398 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800437e:	ed97 7a02 	vldr	s14, [r7, #8]
 8004382:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80043ac <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 8004386:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800438a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800438e:	edc7 7a01 	vstr	s15, [r7, #4]
 8004392:	793b      	ldrb	r3, [r7, #4]
 8004394:	b2db      	uxtb	r3, r3
 8004396:	e000      	b.n	800439a <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x3a>
  else
    return 0;   // Warning
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	3b8311d9 	.word	0x3b8311d9
 80043ac:	3783956e 	.word	0x3783956e

080043b0 <_ZN5L6470I8shield_3E23L6470_FnSlpDec_2_s_StepEh>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	460b      	mov	r3, r1
 80043ba:	70fb      	strb	r3, [r7, #3]
{
//  if (FnSlpDec <= L6470_MAX_FN_SLP_DEC)
    return (FnSlpDec * ((float)1.5686e-5));
 80043bc:	78fb      	ldrb	r3, [r7, #3]
 80043be:	ee07 3a90 	vmov	s15, r3
 80043c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043c6:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80043dc <_ZN5L6470I8shield_3E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 80043ca:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 80043ce:	eeb0 0a67 	vmov.f32	s0, s15
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	3783956e 	.word	0x3783956e

080043e0 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 80043ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80043f0:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8004428 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x48>
 80043f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043fc:	d80c      	bhi.n	8004418 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 80043fe:	ed97 7a02 	vldr	s14, [r7, #8]
 8004402:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800442c <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 8004406:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800440a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800440e:	edc7 7a01 	vstr	s15, [r7, #4]
 8004412:	793b      	ldrb	r3, [r7, #4]
 8004414:	b2db      	uxtb	r3, r3
 8004416:	e000      	b.n	800441a <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x3a>
  else
    return 0;   // Warning
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	3b8311d9 	.word	0x3b8311d9
 800442c:	3783956e 	.word	0x3783956e

08004430 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh>:
  * 
  * @param  OcdTh       The OCD_TH register value.
  * @retval mA          The overcurrent threshold as mA.
  */
template <class shield_x>
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	460b      	mov	r3, r1
 800443a:	70fb      	strb	r3, [r7, #3]
{
  if (OcdTh <= L6470_MAX_OCD_TH)
 800443c:	78fb      	ldrb	r3, [r7, #3]
 800443e:	2b0f      	cmp	r3, #15
 8004440:	d80a      	bhi.n	8004458 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 8004442:	78fb      	ldrb	r3, [r7, #3]
 8004444:	3301      	adds	r3, #1
 8004446:	ee07 3a90 	vmov	s15, r3
 800444a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800444e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800446c <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x3c>
 8004452:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004456:	e001      	b.n	800445c <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x2c>
  else
    return 0;   // Warning
 8004458:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004470 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x40>
}
 800445c:	eeb0 0a67 	vmov.f32	s0, s15
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	43bb8000 	.word	0x43bb8000
 8004470:	00000000 	.word	0x00000000

08004474 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf>:
  * 
  * @param  mA          The overcurrent threshold as mA.
  * @retval OcdTh       The OCD_TH register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 8004474:	b480      	push	{r7}
 8004476:	b087      	sub	sp, #28
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	ed87 0a02 	vstr	s0, [r7, #8]
{
  float result, decimal;
  
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 8004480:	edd7 7a02 	vldr	s15, [r7, #8]
 8004484:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8004510 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x9c>
 8004488:	eef4 7ac7 	vcmpe.f32	s15, s14
 800448c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004490:	d836      	bhi.n	8004500 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8c>
  {
    result = (mA / ((float)375));
 8004492:	ed97 7a02 	vldr	s14, [r7, #8]
 8004496:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8004514 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0xa0>
 800449a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800449e:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 80044a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80044a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044aa:	edc7 7a01 	vstr	s15, [r7, #4]
 80044ae:	793b      	ldrb	r3, [r7, #4]
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	ee07 3a90 	vmov	s15, r3
 80044b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80044be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044c2:	edc7 7a04 	vstr	s15, [r7, #16]
    
    if (decimal < (float)0.5)
 80044c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80044ca:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80044ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d6:	d50a      	bpl.n	80044ee <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 80044d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80044dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044e0:	edc7 7a01 	vstr	s15, [r7, #4]
 80044e4:	793b      	ldrb	r3, [r7, #4]
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	3b01      	subs	r3, #1
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	e009      	b.n	8004502 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8e>
    else
      return ((uint8_t)result);    
 80044ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80044f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044f6:	edc7 7a01 	vstr	s15, [r7, #4]
 80044fa:	793b      	ldrb	r3, [r7, #4]
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	e000      	b.n	8004502 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8e>
  }
  else
    return 0;   // Warning
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	371c      	adds	r7, #28
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	45bb8000 	.word	0x45bb8000
 8004514:	43bb8000 	.word	0x43bb8000

08004518 <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh>:
  * 
  * @param  StallTh     The STALL_TH register value.
  * @retval mA          The stall detection threshold as mA.
  */
template <class shield_x>
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	460b      	mov	r3, r1
 8004522:	70fb      	strb	r3, [r7, #3]
{
  if (StallTh <= L6470_MAX_STALL_TH)
 8004524:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004528:	2b00      	cmp	r3, #0
 800452a:	db0a      	blt.n	8004542 <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 800452c:	78fb      	ldrb	r3, [r7, #3]
 800452e:	3301      	adds	r3, #1
 8004530:	ee07 3a90 	vmov	s15, r3
 8004534:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004538:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8004554 <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x3c>
 800453c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004540:	e001      	b.n	8004546 <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x2e>
  else
    return 0;   // Warning
 8004542:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004558 <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x40>
}
 8004546:	eeb0 0a67 	vmov.f32	s0, s15
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	41fa0000 	.word	0x41fa0000
 8004558:	00000000 	.word	0x00000000

0800455c <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf>:
  * 
  * @param  mA          The stall detection threshold as mA.
  * @retval StallTh     The STALL_TH register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	ed87 0a02 	vstr	s0, [r7, #8]
{
  float result, decimal;
  
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 8004568:	edd7 7a02 	vldr	s15, [r7, #8]
 800456c:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80045f8 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x9c>
 8004570:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004578:	d836      	bhi.n	80045e8 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8c>
  {
    result = (mA / ((float)31.25));
 800457a:	ed97 7a02 	vldr	s14, [r7, #8]
 800457e:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80045fc <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0xa0>
 8004582:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004586:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800458a:	edd7 7a05 	vldr	s15, [r7, #20]
 800458e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004592:	edc7 7a01 	vstr	s15, [r7, #4]
 8004596:	793b      	ldrb	r3, [r7, #4]
 8004598:	b2db      	uxtb	r3, r3
 800459a:	ee07 3a90 	vmov	s15, r3
 800459e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80045a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045aa:	edc7 7a04 	vstr	s15, [r7, #16]
    
    if (decimal < (float)0.5)
 80045ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80045b2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80045b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045be:	d50a      	bpl.n	80045d6 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 80045c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80045c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045c8:	edc7 7a01 	vstr	s15, [r7, #4]
 80045cc:	793b      	ldrb	r3, [r7, #4]
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	e009      	b.n	80045ea <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8e>
    else
      return ((uint8_t)result);    
 80045d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80045da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045de:	edc7 7a01 	vstr	s15, [r7, #4]
 80045e2:	793b      	ldrb	r3, [r7, #4]
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	e000      	b.n	80045ea <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8e>
  }
  else
    return 0;   // Warning
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	371c      	adds	r7, #28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	457a0000 	.word	0x457a0000
 80045fc:	41fa0000 	.word	0x41fa0000

08004600 <_ZN5L6470I8shield_3E12L6470_ConfigEPv>:
/**
  * @brief  Configures the L6470 registers.
  * @param  init The pointer to the initialization structure.
  */
template <class shield_x>
status_t L6470<shield_x>::L6470_Config(void *init)
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
{
  /* Reset devices. */
  reset_device();
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	3394      	adds	r3, #148	@ 0x94
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	4798      	blx	r3

  /* Reset Status Register flags. */
  get_status();
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	330c      	adds	r3, #12
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	4798      	blx	r3

  /* Prepare the 'Register' field of StepperMotorDriverHandle */
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	edd2 7a05 	vldr	s15, [r2, #20]
 8004636:	eeb0 0a67 	vmov.f32	s0, s15
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	4798      	blx	r3
 800463e:	4603      	mov	r3, r0
 8004640:	461a      	mov	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	edd2 7a06 	vldr	s15, [r2, #24]
 8004658:	eeb0 0a67 	vmov.f32	s0, s15
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	4798      	blx	r3
 8004660:	4603      	mov	r3, r0
 8004662:	461a      	mov	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	edd2 7a07 	vldr	s15, [r2, #28]
 800467a:	eeb0 0a67 	vmov.f32	s0, s15
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	4798      	blx	r3
 8004682:	4603      	mov	r3, r0
 8004684:	461a      	mov	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	edd2 7a08 	vldr	s15, [r2, #32]
 800469c:	eeb0 0a67 	vmov.f32	s0, s15
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	4798      	blx	r3
 80046a4:	4603      	mov	r3, r0
 80046a6:	461a      	mov	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 80046be:	eeb0 0a67 	vmov.f32	s0, s15
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	4798      	blx	r3
 80046c6:	4603      	mov	r3, r0
 80046c8:	461a      	mov	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80046d6:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 80049a8 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 80046da:	ee67 6a87 	vmul.f32	s13, s15, s14
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	ed93 7a00 	vldr	s14, [r3]
 80046e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046ec:	edc7 7a01 	vstr	s15, [r7, #4]
 80046f0:	793b      	ldrb	r3, [r7, #4]
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8004700:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 80049a8 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 8004704:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	ed93 7a00 	vldr	s14, [r3]
 800470e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004716:	edc7 7a01 	vstr	s15, [r7, #4]
 800471a:	793b      	ldrb	r3, [r7, #4]
 800471c:	b2da      	uxtb	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800472a:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 80049a8 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 800472e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	ed93 7a00 	vldr	s14, [r3]
 8004738:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800473c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004740:	edc7 7a01 	vstr	s15, [r7, #4]
 8004744:	793b      	ldrb	r3, [r7, #4]
 8004746:	b2da      	uxtb	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004754:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 80049a8 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 8004758:	ee67 6a87 	vmul.f32	s13, s15, s14
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	ed93 7a00 	vldr	s14, [r3]
 8004762:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800476a:	edc7 7a01 	vstr	s15, [r7, #4]
 800476e:	793b      	ldrb	r3, [r7, #4]
 8004770:	b2da      	uxtb	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 8004788:	eeb0 0a67 	vmov.f32	s0, s15
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	4798      	blx	r3
 8004790:	4603      	mov	r3, r0
 8004792:	461a      	mov	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 80047aa:	eeb0 0a67 	vmov.f32	s0, s15
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	4798      	blx	r3
 80047b2:	4603      	mov	r3, r0
 80047b4:	461a      	mov	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	edd2 7a10 	vldr	s15, [r2, #64]	@ 0x40
 80047cc:	eeb0 0a67 	vmov.f32	s0, s15
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	4798      	blx	r3
 80047d4:	4603      	mov	r3, r0
 80047d6:	461a      	mov	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	edd2 7a11 	vldr	s15, [r2, #68]	@ 0x44
 80047ee:	eeb0 0a67 	vmov.f32	s0, s15
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	4798      	blx	r3
 80047f6:	4603      	mov	r3, r0
 80047f8:	461a      	mov	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	edd2 7a13 	vldr	s15, [r2, #76]	@ 0x4c
 800481c:	eeb0 0a67 	vmov.f32	s0, s15
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	4798      	blx	r3
 8004824:	4603      	mov	r3, r0
 8004826:	461a      	mov	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	edd2 7a14 	vldr	s15, [r2, #80]	@ 0x50
 800483e:	eeb0 0a67 	vmov.f32	s0, s15
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	4798      	blx	r3
 8004846:	4603      	mov	r3, r0
 8004848:	461a      	mov	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f

  /* Write the L6470 registers with the prepared data */
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 8004884:	2104      	movs	r1, #4
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 800489a:	2105      	movs	r1, #5
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	f8b2 204c 	ldrh.w	r2, [r2, #76]	@ 0x4c
 80048b0:	2106      	movs	r1, #6
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	f8b2 204e 	ldrh.w	r2, [r2, #78]	@ 0x4e
 80048c6:	2107      	movs	r1, #7
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 80048dc:	2108      	movs	r1, #8
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 80048f2:	2109      	movs	r1, #9
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	f892 2053 	ldrb.w	r2, [r2, #83]	@ 0x53
 8004908:	210a      	movs	r1, #10
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800491e:	210b      	movs	r1, #11
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8004934:	210c      	movs	r1, #12
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
 800494a:	210d      	movs	r1, #13
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	f892 2058 	ldrb.w	r2, [r2, #88]	@ 0x58
 8004960:	210e      	movs	r1, #14
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	f892 2059 	ldrb.w	r2, [r2, #89]	@ 0x59
 8004976:	210f      	movs	r1, #15
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	f892 205a 	ldrb.w	r2, [r2, #90]	@ 0x5a
 800498c:	2110      	movs	r1, #16
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	f892 205b 	ldrb.w	r2, [r2, #91]	@ 0x5b
 80049a2:	2111      	movs	r1, #17
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	e001      	b.n	80049ac <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3ac>
 80049a8:	43800000 	.word	0x43800000
 80049ac:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	f892 205d 	ldrb.w	r2, [r2, #93]	@ 0x5d
 80049be:	2113      	movs	r1, #19
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	f892 205e 	ldrb.w	r2, [r2, #94]	@ 0x5e
 80049d4:	2114      	movs	r1, #20
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80049ea:	2116      	movs	r1, #22
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	f8b2 2062 	ldrh.w	r2, [r2, #98]	@ 0x62
 8004a00:	2117      	movs	r1, #23
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	3354      	adds	r3, #84	@ 0x54
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	f892 205f 	ldrb.w	r2, [r2, #95]	@ 0x5f
 8004a14:	4611      	mov	r1, r2
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	4798      	blx	r3
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	f083 0301 	eor.w	r3, r3, #1
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x42c>
  
  return COMPONENT_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3718      	adds	r7, #24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 8004a34:	b590      	push	{r4, r7, lr}
 8004a36:	b087      	sub	sp, #28
 8004a38:	af02      	add	r7, sp, #8
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004a4a:	681c      	ldr	r4, [r3, #0]
 8004a4c:	7afa      	ldrb	r2, [r7, #11]
 8004a4e:	2300      	movs	r3, #0
 8004a50:	9301      	str	r3, [sp, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	4613      	mov	r3, r2
 8004a58:	2201      	movs	r2, #1
 8004a5a:	490c      	ldr	r1, [pc, #48]	@ (8004a8c <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a09      	ldr	r2, [pc, #36]	@ (8004a90 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8004a6c:	4907      	ldr	r1, [pc, #28]	@ (8004a8c <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a05      	ldr	r2, [pc, #20]	@ (8004a94 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 8004a7e:	4904      	ldr	r1, [pc, #16]	@ (8004a90 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	4798      	blx	r3
}
 8004a84:	bf00      	nop
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd90      	pop	{r4, r7, pc}
 8004a8c:	20000278 	.word	0x20000278
 8004a90:	20000298 	.word	0x20000298
 8004a94:	200002a0 	.word	0x200002a0

08004a98 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 8004a98:	b590      	push	{r4, r7, lr}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af02      	add	r7, sp, #8
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004aac:	681c      	ldr	r4, [r3, #0]
 8004aae:	78fb      	ldrb	r3, [r7, #3]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	9201      	str	r2, [sp, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	9200      	str	r2, [sp, #0]
 8004ab8:	2202      	movs	r2, #2
 8004aba:	4917      	ldr	r1, [pc, #92]	@ (8004b18 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a14      	ldr	r2, [pc, #80]	@ (8004b1c <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8004acc:	4912      	ldr	r1, [pc, #72]	@ (8004b18 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a10      	ldr	r2, [pc, #64]	@ (8004b20 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8004ade:	490f      	ldr	r1, [pc, #60]	@ (8004b1c <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a19      	ldr	r1, [r3, #32]
 8004ae8:	78fa      	ldrb	r2, [r7, #3]
 8004aea:	4613      	mov	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	440b      	add	r3, r1
 8004af4:	7b9b      	ldrb	r3, [r3, #14]
 8004af6:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	7bfa      	ldrb	r2, [r7, #15]
 8004b04:	4906      	ldr	r1, [pc, #24]	@ (8004b20 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	4798      	blx	r3
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 8004b0e:	68bb      	ldr	r3, [r7, #8]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd90      	pop	{r4, r7, pc}
 8004b18:	20000278 	.word	0x20000278
 8004b1c:	20000298 	.word	0x20000298
 8004b20:	200002a0 	.word	0x200002a0

08004b24 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8004b24:	b590      	push	{r4, r7, lr}
 8004b26:	b087      	sub	sp, #28
 8004b28:	af02      	add	r7, sp, #8
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004b3a:	681c      	ldr	r4, [r3, #0]
 8004b3c:	7afa      	ldrb	r2, [r7, #11]
 8004b3e:	2300      	movs	r3, #0
 8004b40:	9301      	str	r3, [sp, #4]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	4613      	mov	r3, r2
 8004b48:	2203      	movs	r2, #3
 8004b4a:	490c      	ldr	r1, [pc, #48]	@ (8004b7c <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a09      	ldr	r2, [pc, #36]	@ (8004b80 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8004b5c:	4907      	ldr	r1, [pc, #28]	@ (8004b7c <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a05      	ldr	r2, [pc, #20]	@ (8004b84 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x60>)
 8004b6e:	4904      	ldr	r1, [pc, #16]	@ (8004b80 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	4798      	blx	r3
}
 8004b74:	bf00      	nop
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd90      	pop	{r4, r7, pc}
 8004b7c:	20000278 	.word	0x20000278
 8004b80:	20000298 	.word	0x20000298
 8004b84:	200002a0 	.word	0x200002a0

08004b88 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 8004b88:	b590      	push	{r4, r7, lr}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af02      	add	r7, sp, #8
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	460b      	mov	r3, r1
 8004b92:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004b9c:	681c      	ldr	r4, [r3, #0]
 8004b9e:	78fb      	ldrb	r3, [r7, #3]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	9201      	str	r2, [sp, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	9200      	str	r2, [sp, #0]
 8004ba8:	2204      	movs	r2, #4
 8004baa:	490c      	ldr	r1, [pc, #48]	@ (8004bdc <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a09      	ldr	r2, [pc, #36]	@ (8004be0 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8004bbc:	4907      	ldr	r1, [pc, #28]	@ (8004bdc <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a05      	ldr	r2, [pc, #20]	@ (8004be4 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 8004bce:	4904      	ldr	r1, [pc, #16]	@ (8004be0 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	4798      	blx	r3
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd90      	pop	{r4, r7, pc}
 8004bdc:	20000278 	.word	0x20000278
 8004be0:	20000298 	.word	0x20000298
 8004be4:	200002a0 	.word	0x200002a0

08004be8 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8004be8:	b590      	push	{r4, r7, lr}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af02      	add	r7, sp, #8
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	607a      	str	r2, [r7, #4]
 8004bf4:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004bfe:	681c      	ldr	r4, [r3, #0]
 8004c00:	7afa      	ldrb	r2, [r7, #11]
 8004c02:	2300      	movs	r3, #0
 8004c04:	9301      	str	r3, [sp, #4]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	2205      	movs	r2, #5
 8004c0e:	490c      	ldr	r1, [pc, #48]	@ (8004c40 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a09      	ldr	r2, [pc, #36]	@ (8004c44 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8004c20:	4907      	ldr	r1, [pc, #28]	@ (8004c40 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a05      	ldr	r2, [pc, #20]	@ (8004c48 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 8004c32:	4904      	ldr	r1, [pc, #16]	@ (8004c44 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	4798      	blx	r3
}
 8004c38:	bf00      	nop
 8004c3a:	3714      	adds	r7, #20
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd90      	pop	{r4, r7, pc}
 8004c40:	20000278 	.word	0x20000278
 8004c44:	20000298 	.word	0x20000298
 8004c48:	200002a0 	.word	0x200002a0

08004c4c <_ZN5L6470I8shield_3E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 8004c4c:	b590      	push	{r4, r7, lr}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af02      	add	r7, sp, #8
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c5c:	d21f      	bcs.n	8004c9e <_ZN5L6470I8shield_3E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004c66:	681c      	ldr	r4, [r3, #0]
 8004c68:	2300      	movs	r3, #0
 8004c6a:	9301      	str	r3, [sp, #4]
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	2206      	movs	r2, #6
 8004c74:	490c      	ldr	r1, [pc, #48]	@ (8004ca8 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x5c>)
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a09      	ldr	r2, [pc, #36]	@ (8004cac <_ZN5L6470I8shield_3E10L6470_GoToEm+0x60>)
 8004c86:	4908      	ldr	r1, [pc, #32]	@ (8004ca8 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x5c>)
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a06      	ldr	r2, [pc, #24]	@ (8004cb0 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x64>)
 8004c98:	4904      	ldr	r1, [pc, #16]	@ (8004cac <_ZN5L6470I8shield_3E10L6470_GoToEm+0x60>)
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	4798      	blx	r3
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd90      	pop	{r4, r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	20000278 	.word	0x20000278
 8004cac:	20000298 	.word	0x20000298
 8004cb0:	200002a0 	.word	0x200002a0

08004cb4 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 8004cb4:	b590      	push	{r4, r7, lr}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af02      	add	r7, sp, #8
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	607a      	str	r2, [r7, #4]
 8004cc0:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cc8:	d220      	bcs.n	8004d0c <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004cd2:	681c      	ldr	r4, [r3, #0]
 8004cd4:	7afa      	ldrb	r2, [r7, #11]
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	9301      	str	r3, [sp, #4]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	2207      	movs	r2, #7
 8004ce2:	490c      	ldr	r1, [pc, #48]	@ (8004d14 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a09      	ldr	r2, [pc, #36]	@ (8004d18 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8004cf4:	4907      	ldr	r1, [pc, #28]	@ (8004d14 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a05      	ldr	r2, [pc, #20]	@ (8004d1c <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 8004d06:	4904      	ldr	r1, [pc, #16]	@ (8004d18 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	4798      	blx	r3
}
 8004d0c:	bf00      	nop
 8004d0e:	3714      	adds	r7, #20
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd90      	pop	{r4, r7, pc}
 8004d14:	20000278 	.word	0x20000278
 8004d18:	20000298 	.word	0x20000298
 8004d1c:	200002a0 	.word	0x200002a0

08004d20 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8004d20:	b590      	push	{r4, r7, lr}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af02      	add	r7, sp, #8
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	607b      	str	r3, [r7, #4]
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	72fb      	strb	r3, [r7, #11]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004d3a:	681c      	ldr	r4, [r3, #0]
 8004d3c:	7af9      	ldrb	r1, [r7, #11]
 8004d3e:	7abb      	ldrb	r3, [r7, #10]
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	9201      	str	r2, [sp, #4]
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	460b      	mov	r3, r1
 8004d48:	2208      	movs	r2, #8
 8004d4a:	490c      	ldr	r1, [pc, #48]	@ (8004d7c <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a09      	ldr	r2, [pc, #36]	@ (8004d80 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8004d5c:	4907      	ldr	r1, [pc, #28]	@ (8004d7c <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a05      	ldr	r2, [pc, #20]	@ (8004d84 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 8004d6e:	4904      	ldr	r1, [pc, #16]	@ (8004d80 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	4798      	blx	r3
}
 8004d74:	bf00      	nop
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd90      	pop	{r4, r7, pc}
 8004d7c:	20000278 	.word	0x20000278
 8004d80:	20000298 	.word	0x20000298
 8004d84:	200002a0 	.word	0x200002a0

08004d88 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8004d88:	b590      	push	{r4, r7, lr}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af02      	add	r7, sp, #8
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	460b      	mov	r3, r1
 8004d92:	70fb      	strb	r3, [r7, #3]
 8004d94:	4613      	mov	r3, r2
 8004d96:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004da0:	681c      	ldr	r4, [r3, #0]
 8004da2:	78fa      	ldrb	r2, [r7, #3]
 8004da4:	78bb      	ldrb	r3, [r7, #2]
 8004da6:	2100      	movs	r1, #0
 8004da8:	9101      	str	r1, [sp, #4]
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	4613      	mov	r3, r2
 8004dae:	2209      	movs	r2, #9
 8004db0:	490c      	ldr	r1, [pc, #48]	@ (8004de4 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a09      	ldr	r2, [pc, #36]	@ (8004de8 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8004dc2:	4908      	ldr	r1, [pc, #32]	@ (8004de4 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a06      	ldr	r2, [pc, #24]	@ (8004dec <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 8004dd4:	4904      	ldr	r1, [pc, #16]	@ (8004de8 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	4798      	blx	r3
}
 8004dda:	bf00      	nop
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd90      	pop	{r4, r7, pc}
 8004de2:	bf00      	nop
 8004de4:	20000278 	.word	0x20000278
 8004de8:	20000298 	.word	0x20000298
 8004dec:	200002a0 	.word	0x200002a0

08004df0 <_ZN5L6470I8shield_3E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 8004df0:	b590      	push	{r4, r7, lr}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af02      	add	r7, sp, #8
 8004df6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004e00:	681c      	ldr	r4, [r3, #0]
 8004e02:	2300      	movs	r3, #0
 8004e04:	9301      	str	r3, [sp, #4]
 8004e06:	2300      	movs	r3, #0
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	220a      	movs	r2, #10
 8004e0e:	490c      	ldr	r1, [pc, #48]	@ (8004e40 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x50>)
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a09      	ldr	r2, [pc, #36]	@ (8004e44 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x54>)
 8004e20:	4907      	ldr	r1, [pc, #28]	@ (8004e40 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x50>)
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a05      	ldr	r2, [pc, #20]	@ (8004e48 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x58>)
 8004e32:	4904      	ldr	r1, [pc, #16]	@ (8004e44 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x54>)
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	4798      	blx	r3
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd90      	pop	{r4, r7, pc}
 8004e40:	20000278 	.word	0x20000278
 8004e44:	20000298 	.word	0x20000298
 8004e48:	200002a0 	.word	0x200002a0

08004e4c <_ZN5L6470I8shield_3E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 8004e4c:	b590      	push	{r4, r7, lr}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af02      	add	r7, sp, #8
 8004e52:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004e5c:	681c      	ldr	r4, [r3, #0]
 8004e5e:	2300      	movs	r3, #0
 8004e60:	9301      	str	r3, [sp, #4]
 8004e62:	2300      	movs	r3, #0
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	2300      	movs	r3, #0
 8004e68:	220b      	movs	r2, #11
 8004e6a:	490c      	ldr	r1, [pc, #48]	@ (8004e9c <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x50>)
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a09      	ldr	r2, [pc, #36]	@ (8004ea0 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x54>)
 8004e7c:	4907      	ldr	r1, [pc, #28]	@ (8004e9c <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x50>)
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a05      	ldr	r2, [pc, #20]	@ (8004ea4 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x58>)
 8004e8e:	4904      	ldr	r1, [pc, #16]	@ (8004ea0 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x54>)
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	4798      	blx	r3
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd90      	pop	{r4, r7, pc}
 8004e9c:	20000278 	.word	0x20000278
 8004ea0:	20000298 	.word	0x20000298
 8004ea4:	200002a0 	.word	0x200002a0

08004ea8 <_ZN5L6470I8shield_3E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 8004ea8:	b590      	push	{r4, r7, lr}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af02      	add	r7, sp, #8
 8004eae:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004eb8:	681c      	ldr	r4, [r3, #0]
 8004eba:	2300      	movs	r3, #0
 8004ebc:	9301      	str	r3, [sp, #4]
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	220c      	movs	r2, #12
 8004ec6:	490c      	ldr	r1, [pc, #48]	@ (8004ef8 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x50>)
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a09      	ldr	r2, [pc, #36]	@ (8004efc <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x54>)
 8004ed8:	4907      	ldr	r1, [pc, #28]	@ (8004ef8 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x50>)
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a05      	ldr	r2, [pc, #20]	@ (8004f00 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x58>)
 8004eea:	4904      	ldr	r1, [pc, #16]	@ (8004efc <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x54>)
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	4798      	blx	r3
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd90      	pop	{r4, r7, pc}
 8004ef8:	20000278 	.word	0x20000278
 8004efc:	20000298 	.word	0x20000298
 8004f00:	200002a0 	.word	0x200002a0

08004f04 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 8004f04:	b590      	push	{r4, r7, lr}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af02      	add	r7, sp, #8
 8004f0a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004f14:	681c      	ldr	r4, [r3, #0]
 8004f16:	2300      	movs	r3, #0
 8004f18:	9301      	str	r3, [sp, #4]
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	2300      	movs	r3, #0
 8004f20:	220d      	movs	r2, #13
 8004f22:	490c      	ldr	r1, [pc, #48]	@ (8004f54 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x50>)
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a09      	ldr	r2, [pc, #36]	@ (8004f58 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x54>)
 8004f34:	4907      	ldr	r1, [pc, #28]	@ (8004f54 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x50>)
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a05      	ldr	r2, [pc, #20]	@ (8004f5c <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x58>)
 8004f46:	4904      	ldr	r1, [pc, #16]	@ (8004f58 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x54>)
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	4798      	blx	r3
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd90      	pop	{r4, r7, pc}
 8004f54:	20000278 	.word	0x20000278
 8004f58:	20000298 	.word	0x20000298
 8004f5c:	200002a0 	.word	0x200002a0

08004f60 <_ZN5L6470I8shield_3E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 8004f60:	b590      	push	{r4, r7, lr}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af02      	add	r7, sp, #8
 8004f66:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004f70:	681c      	ldr	r4, [r3, #0]
 8004f72:	2300      	movs	r3, #0
 8004f74:	9301      	str	r3, [sp, #4]
 8004f76:	2300      	movs	r3, #0
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	220e      	movs	r2, #14
 8004f7e:	490c      	ldr	r1, [pc, #48]	@ (8004fb0 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x50>)
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a09      	ldr	r2, [pc, #36]	@ (8004fb4 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x54>)
 8004f90:	4907      	ldr	r1, [pc, #28]	@ (8004fb0 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x50>)
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a05      	ldr	r2, [pc, #20]	@ (8004fb8 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x58>)
 8004fa2:	4904      	ldr	r1, [pc, #16]	@ (8004fb4 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x54>)
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	4798      	blx	r3
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd90      	pop	{r4, r7, pc}
 8004fb0:	20000278 	.word	0x20000278
 8004fb4:	20000298 	.word	0x20000298
 8004fb8:	200002a0 	.word	0x200002a0

08004fbc <_ZN5L6470I8shield_3E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 8004fbc:	b590      	push	{r4, r7, lr}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af02      	add	r7, sp, #8
 8004fc2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004fcc:	681c      	ldr	r4, [r3, #0]
 8004fce:	2300      	movs	r3, #0
 8004fd0:	9301      	str	r3, [sp, #4]
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	220f      	movs	r2, #15
 8004fda:	490c      	ldr	r1, [pc, #48]	@ (800500c <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x50>)
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a09      	ldr	r2, [pc, #36]	@ (8005010 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x54>)
 8004fec:	4907      	ldr	r1, [pc, #28]	@ (800500c <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x50>)
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a05      	ldr	r2, [pc, #20]	@ (8005014 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x58>)
 8004ffe:	4904      	ldr	r1, [pc, #16]	@ (8005010 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x54>)
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	4798      	blx	r3
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	bd90      	pop	{r4, r7, pc}
 800500c:	20000278 	.word	0x20000278
 8005010:	20000298 	.word	0x20000298
 8005014:	200002a0 	.word	0x200002a0

08005018 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 8005018:	b590      	push	{r4, r7, lr}
 800501a:	b085      	sub	sp, #20
 800501c:	af02      	add	r7, sp, #8
 800501e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005028:	681c      	ldr	r4, [r3, #0]
 800502a:	2300      	movs	r3, #0
 800502c:	9301      	str	r3, [sp, #4]
 800502e:	2300      	movs	r3, #0
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	2300      	movs	r3, #0
 8005034:	2210      	movs	r2, #16
 8005036:	490c      	ldr	r1, [pc, #48]	@ (8005068 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x50>)
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a09      	ldr	r2, [pc, #36]	@ (800506c <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x54>)
 8005048:	4907      	ldr	r1, [pc, #28]	@ (8005068 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x50>)
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a05      	ldr	r2, [pc, #20]	@ (8005070 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x58>)
 800505a:	4904      	ldr	r1, [pc, #16]	@ (800506c <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x54>)
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	4798      	blx	r3
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	bd90      	pop	{r4, r7, pc}
 8005068:	20000278 	.word	0x20000278
 800506c:	20000298 	.word	0x20000298
 8005070:	200002a0 	.word	0x200002a0

08005074 <_ZN5L6470I8shield_3E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 8005074:	b590      	push	{r4, r7, lr}
 8005076:	b085      	sub	sp, #20
 8005078:	af02      	add	r7, sp, #8
 800507a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005084:	681c      	ldr	r4, [r3, #0]
 8005086:	2300      	movs	r3, #0
 8005088:	9301      	str	r3, [sp, #4]
 800508a:	2300      	movs	r3, #0
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	2300      	movs	r3, #0
 8005090:	2211      	movs	r2, #17
 8005092:	490c      	ldr	r1, [pc, #48]	@ (80050c4 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x50>)
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a09      	ldr	r2, [pc, #36]	@ (80050c8 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x54>)
 80050a4:	4907      	ldr	r1, [pc, #28]	@ (80050c4 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x50>)
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a05      	ldr	r2, [pc, #20]	@ (80050cc <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x58>)
 80050b6:	4904      	ldr	r1, [pc, #16]	@ (80050c8 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x54>)
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	4798      	blx	r3
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd90      	pop	{r4, r7, pc}
 80050c4:	20000278 	.word	0x20000278
 80050c8:	20000298 	.word	0x20000298
 80050cc:	200002a0 	.word	0x200002a0

080050d0 <_ZN5L6470I8shield_3E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 80050d0:	b590      	push	{r4, r7, lr}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af02      	add	r7, sp, #8
 80050d6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80050e0:	681c      	ldr	r4, [r3, #0]
 80050e2:	2300      	movs	r3, #0
 80050e4:	9301      	str	r3, [sp, #4]
 80050e6:	2300      	movs	r3, #0
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	2300      	movs	r3, #0
 80050ec:	2212      	movs	r2, #18
 80050ee:	4912      	ldr	r1, [pc, #72]	@ (8005138 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x68>)
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a0f      	ldr	r2, [pc, #60]	@ (800513c <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x6c>)
 8005100:	490d      	ldr	r1, [pc, #52]	@ (8005138 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x68>)
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a0b      	ldr	r2, [pc, #44]	@ (8005140 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x70>)
 8005112:	490a      	ldr	r1, [pc, #40]	@ (800513c <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x6c>)
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2202      	movs	r2, #2
 8005124:	4906      	ldr	r1, [pc, #24]	@ (8005140 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x70>)
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	4798      	blx	r3
 800512a:	4603      	mov	r3, r0
 800512c:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 800512e:	89fb      	ldrh	r3, [r7, #14]
}
 8005130:	4618      	mov	r0, r3
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	bd90      	pop	{r4, r7, pc}
 8005138:	20000278 	.word	0x20000278
 800513c:	20000298 	.word	0x20000298
 8005140:	200002a0 	.word	0x200002a0

08005144 <_ZN5L6470I8shield_3E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 8005144:	b590      	push	{r4, r7, lr}
 8005146:	b087      	sub	sp, #28
 8005148:	af02      	add	r7, sp, #8
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	460b      	mov	r3, r1
 800514e:	607a      	str	r2, [r7, #4]
 8005150:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800515a:	681c      	ldr	r4, [r3, #0]
 800515c:	7afa      	ldrb	r2, [r7, #11]
 800515e:	2300      	movs	r3, #0
 8005160:	9301      	str	r3, [sp, #4]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	4613      	mov	r3, r2
 8005168:	2201      	movs	r2, #1
 800516a:	4903      	ldr	r1, [pc, #12]	@ (8005178 <_ZN5L6470I8shield_3E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	47a0      	blx	r4
}
 8005170:	bf00      	nop
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	bd90      	pop	{r4, r7, pc}
 8005178:	20000278 	.word	0x20000278

0800517c <_ZN5L6470I8shield_3E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 800517c:	b590      	push	{r4, r7, lr}
 800517e:	b085      	sub	sp, #20
 8005180:	af02      	add	r7, sp, #8
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	460b      	mov	r3, r1
 8005186:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005190:	681c      	ldr	r4, [r3, #0]
 8005192:	78fb      	ldrb	r3, [r7, #3]
 8005194:	2200      	movs	r2, #0
 8005196:	9201      	str	r2, [sp, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	9200      	str	r2, [sp, #0]
 800519c:	2202      	movs	r2, #2
 800519e:	4903      	ldr	r1, [pc, #12]	@ (80051ac <_ZN5L6470I8shield_3E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	47a0      	blx	r4
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd90      	pop	{r4, r7, pc}
 80051ac:	20000278 	.word	0x20000278

080051b0 <_ZN5L6470I8shield_3E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 80051b0:	b590      	push	{r4, r7, lr}
 80051b2:	b087      	sub	sp, #28
 80051b4:	af02      	add	r7, sp, #8
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	460b      	mov	r3, r1
 80051ba:	607a      	str	r2, [r7, #4]
 80051bc:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80051c6:	681c      	ldr	r4, [r3, #0]
 80051c8:	7afa      	ldrb	r2, [r7, #11]
 80051ca:	2300      	movs	r3, #0
 80051cc:	9301      	str	r3, [sp, #4]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	4613      	mov	r3, r2
 80051d4:	2203      	movs	r2, #3
 80051d6:	4903      	ldr	r1, [pc, #12]	@ (80051e4 <_ZN5L6470I8shield_3E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	47a0      	blx	r4
}
 80051dc:	bf00      	nop
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd90      	pop	{r4, r7, pc}
 80051e4:	20000278 	.word	0x20000278

080051e8 <_ZN5L6470I8shield_3E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 80051e8:	b590      	push	{r4, r7, lr}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af02      	add	r7, sp, #8
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	460b      	mov	r3, r1
 80051f2:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80051fc:	681c      	ldr	r4, [r3, #0]
 80051fe:	78fb      	ldrb	r3, [r7, #3]
 8005200:	2200      	movs	r2, #0
 8005202:	9201      	str	r2, [sp, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	9200      	str	r2, [sp, #0]
 8005208:	2204      	movs	r2, #4
 800520a:	4903      	ldr	r1, [pc, #12]	@ (8005218 <_ZN5L6470I8shield_3E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	47a0      	blx	r4
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	bd90      	pop	{r4, r7, pc}
 8005218:	20000278 	.word	0x20000278

0800521c <_ZN5L6470I8shield_3E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 800521c:	b590      	push	{r4, r7, lr}
 800521e:	b087      	sub	sp, #28
 8005220:	af02      	add	r7, sp, #8
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	460b      	mov	r3, r1
 8005226:	607a      	str	r2, [r7, #4]
 8005228:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005232:	681c      	ldr	r4, [r3, #0]
 8005234:	7afa      	ldrb	r2, [r7, #11]
 8005236:	2300      	movs	r3, #0
 8005238:	9301      	str	r3, [sp, #4]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	4613      	mov	r3, r2
 8005240:	2205      	movs	r2, #5
 8005242:	4903      	ldr	r1, [pc, #12]	@ (8005250 <_ZN5L6470I8shield_3E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	47a0      	blx	r4
}
 8005248:	bf00      	nop
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	bd90      	pop	{r4, r7, pc}
 8005250:	20000278 	.word	0x20000278

08005254 <_ZN5L6470I8shield_3E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 8005254:	b590      	push	{r4, r7, lr}
 8005256:	b085      	sub	sp, #20
 8005258:	af02      	add	r7, sp, #8
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005266:	681c      	ldr	r4, [r3, #0]
 8005268:	2300      	movs	r3, #0
 800526a:	9301      	str	r3, [sp, #4]
 800526c:	2300      	movs	r3, #0
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	2206      	movs	r2, #6
 8005274:	4903      	ldr	r1, [pc, #12]	@ (8005284 <_ZN5L6470I8shield_3E17L6470_PrepareGoToEm+0x30>)
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	47a0      	blx	r4
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	bd90      	pop	{r4, r7, pc}
 8005282:	bf00      	nop
 8005284:	20000278 	.word	0x20000278

08005288 <_ZN5L6470I8shield_3E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 8005288:	b590      	push	{r4, r7, lr}
 800528a:	b087      	sub	sp, #28
 800528c:	af02      	add	r7, sp, #8
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	460b      	mov	r3, r1
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800529e:	681c      	ldr	r4, [r3, #0]
 80052a0:	7afa      	ldrb	r2, [r7, #11]
 80052a2:	2300      	movs	r3, #0
 80052a4:	9301      	str	r3, [sp, #4]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	4613      	mov	r3, r2
 80052ac:	2207      	movs	r2, #7
 80052ae:	4903      	ldr	r1, [pc, #12]	@ (80052bc <_ZN5L6470I8shield_3E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	47a0      	blx	r4
}
 80052b4:	bf00      	nop
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd90      	pop	{r4, r7, pc}
 80052bc:	20000278 	.word	0x20000278

080052c0 <_ZN5L6470I8shield_3E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 80052c0:	b590      	push	{r4, r7, lr}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af02      	add	r7, sp, #8
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	607b      	str	r3, [r7, #4]
 80052ca:	460b      	mov	r3, r1
 80052cc:	72fb      	strb	r3, [r7, #11]
 80052ce:	4613      	mov	r3, r2
 80052d0:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80052da:	681c      	ldr	r4, [r3, #0]
 80052dc:	7af9      	ldrb	r1, [r7, #11]
 80052de:	7abb      	ldrb	r3, [r7, #10]
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	9201      	str	r2, [sp, #4]
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	460b      	mov	r3, r1
 80052e8:	2208      	movs	r2, #8
 80052ea:	4903      	ldr	r1, [pc, #12]	@ (80052f8 <_ZN5L6470I8shield_3E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	47a0      	blx	r4
}
 80052f0:	bf00      	nop
 80052f2:	3714      	adds	r7, #20
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd90      	pop	{r4, r7, pc}
 80052f8:	20000278 	.word	0x20000278

080052fc <_ZN5L6470I8shield_3E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 80052fc:	b590      	push	{r4, r7, lr}
 80052fe:	b085      	sub	sp, #20
 8005300:	af02      	add	r7, sp, #8
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	460b      	mov	r3, r1
 8005306:	70fb      	strb	r3, [r7, #3]
 8005308:	4613      	mov	r3, r2
 800530a:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005314:	681c      	ldr	r4, [r3, #0]
 8005316:	78fa      	ldrb	r2, [r7, #3]
 8005318:	78bb      	ldrb	r3, [r7, #2]
 800531a:	2100      	movs	r1, #0
 800531c:	9101      	str	r1, [sp, #4]
 800531e:	9300      	str	r3, [sp, #0]
 8005320:	4613      	mov	r3, r2
 8005322:	2209      	movs	r2, #9
 8005324:	4903      	ldr	r1, [pc, #12]	@ (8005334 <_ZN5L6470I8shield_3E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	47a0      	blx	r4
}
 800532a:	bf00      	nop
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	bd90      	pop	{r4, r7, pc}
 8005332:	bf00      	nop
 8005334:	20000278 	.word	0x20000278

08005338 <_ZN5L6470I8shield_3E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 8005338:	b590      	push	{r4, r7, lr}
 800533a:	b085      	sub	sp, #20
 800533c:	af02      	add	r7, sp, #8
 800533e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005348:	681c      	ldr	r4, [r3, #0]
 800534a:	2300      	movs	r3, #0
 800534c:	9301      	str	r3, [sp, #4]
 800534e:	2300      	movs	r3, #0
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	2300      	movs	r3, #0
 8005354:	220a      	movs	r2, #10
 8005356:	4903      	ldr	r1, [pc, #12]	@ (8005364 <_ZN5L6470I8shield_3E19L6470_PrepareGoHomeEv+0x2c>)
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	47a0      	blx	r4
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	bd90      	pop	{r4, r7, pc}
 8005364:	20000278 	.word	0x20000278

08005368 <_ZN5L6470I8shield_3E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 8005368:	b590      	push	{r4, r7, lr}
 800536a:	b085      	sub	sp, #20
 800536c:	af02      	add	r7, sp, #8
 800536e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005378:	681c      	ldr	r4, [r3, #0]
 800537a:	2300      	movs	r3, #0
 800537c:	9301      	str	r3, [sp, #4]
 800537e:	2300      	movs	r3, #0
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	2300      	movs	r3, #0
 8005384:	220b      	movs	r2, #11
 8005386:	4903      	ldr	r1, [pc, #12]	@ (8005394 <_ZN5L6470I8shield_3E19L6470_PrepareGoMarkEv+0x2c>)
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	47a0      	blx	r4
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	bd90      	pop	{r4, r7, pc}
 8005394:	20000278 	.word	0x20000278

08005398 <_ZN5L6470I8shield_3E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 8005398:	b590      	push	{r4, r7, lr}
 800539a:	b085      	sub	sp, #20
 800539c:	af02      	add	r7, sp, #8
 800539e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80053a8:	681c      	ldr	r4, [r3, #0]
 80053aa:	2300      	movs	r3, #0
 80053ac:	9301      	str	r3, [sp, #4]
 80053ae:	2300      	movs	r3, #0
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	2300      	movs	r3, #0
 80053b4:	220c      	movs	r2, #12
 80053b6:	4903      	ldr	r1, [pc, #12]	@ (80053c4 <_ZN5L6470I8shield_3E21L6470_PrepareResetPosEv+0x2c>)
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	47a0      	blx	r4
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd90      	pop	{r4, r7, pc}
 80053c4:	20000278 	.word	0x20000278

080053c8 <_ZN5L6470I8shield_3E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 80053c8:	b590      	push	{r4, r7, lr}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af02      	add	r7, sp, #8
 80053ce:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80053d8:	681c      	ldr	r4, [r3, #0]
 80053da:	2300      	movs	r3, #0
 80053dc:	9301      	str	r3, [sp, #4]
 80053de:	2300      	movs	r3, #0
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	2300      	movs	r3, #0
 80053e4:	220d      	movs	r2, #13
 80053e6:	4903      	ldr	r1, [pc, #12]	@ (80053f4 <_ZN5L6470I8shield_3E24L6470_PrepareResetDeviceEv+0x2c>)
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	47a0      	blx	r4
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd90      	pop	{r4, r7, pc}
 80053f4:	20000278 	.word	0x20000278

080053f8 <_ZN5L6470I8shield_3E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 80053f8:	b590      	push	{r4, r7, lr}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af02      	add	r7, sp, #8
 80053fe:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005408:	681c      	ldr	r4, [r3, #0]
 800540a:	2300      	movs	r3, #0
 800540c:	9301      	str	r3, [sp, #4]
 800540e:	2300      	movs	r3, #0
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	2300      	movs	r3, #0
 8005414:	220e      	movs	r2, #14
 8005416:	4903      	ldr	r1, [pc, #12]	@ (8005424 <_ZN5L6470I8shield_3E21L6470_PrepareSoftStopEv+0x2c>)
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	47a0      	blx	r4
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	bd90      	pop	{r4, r7, pc}
 8005424:	20000278 	.word	0x20000278

08005428 <_ZN5L6470I8shield_3E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 8005428:	b590      	push	{r4, r7, lr}
 800542a:	b085      	sub	sp, #20
 800542c:	af02      	add	r7, sp, #8
 800542e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005438:	681c      	ldr	r4, [r3, #0]
 800543a:	2300      	movs	r3, #0
 800543c:	9301      	str	r3, [sp, #4]
 800543e:	2300      	movs	r3, #0
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	2300      	movs	r3, #0
 8005444:	220f      	movs	r2, #15
 8005446:	4903      	ldr	r1, [pc, #12]	@ (8005454 <_ZN5L6470I8shield_3E21L6470_PrepareHardStopEv+0x2c>)
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	47a0      	blx	r4
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	bd90      	pop	{r4, r7, pc}
 8005454:	20000278 	.word	0x20000278

08005458 <_ZN5L6470I8shield_3E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 8005458:	b590      	push	{r4, r7, lr}
 800545a:	b085      	sub	sp, #20
 800545c:	af02      	add	r7, sp, #8
 800545e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005468:	681c      	ldr	r4, [r3, #0]
 800546a:	2300      	movs	r3, #0
 800546c:	9301      	str	r3, [sp, #4]
 800546e:	2300      	movs	r3, #0
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	2300      	movs	r3, #0
 8005474:	2210      	movs	r2, #16
 8005476:	4903      	ldr	r1, [pc, #12]	@ (8005484 <_ZN5L6470I8shield_3E20L6470_PrepareSoftHiZEv+0x2c>)
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	47a0      	blx	r4
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	bd90      	pop	{r4, r7, pc}
 8005484:	20000278 	.word	0x20000278

08005488 <_ZN5L6470I8shield_3E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 8005488:	b590      	push	{r4, r7, lr}
 800548a:	b085      	sub	sp, #20
 800548c:	af02      	add	r7, sp, #8
 800548e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005498:	681c      	ldr	r4, [r3, #0]
 800549a:	2300      	movs	r3, #0
 800549c:	9301      	str	r3, [sp, #4]
 800549e:	2300      	movs	r3, #0
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	2300      	movs	r3, #0
 80054a4:	2211      	movs	r2, #17
 80054a6:	4903      	ldr	r1, [pc, #12]	@ (80054b4 <_ZN5L6470I8shield_3E20L6470_PrepareHardHiZEv+0x2c>)
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	47a0      	blx	r4
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd90      	pop	{r4, r7, pc}
 80054b4:	20000278 	.word	0x20000278

080054b8 <_ZN5L6470I8shield_3E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 80054b8:	b590      	push	{r4, r7, lr}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af02      	add	r7, sp, #8
 80054be:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80054c8:	681c      	ldr	r4, [r3, #0]
 80054ca:	2300      	movs	r3, #0
 80054cc:	9301      	str	r3, [sp, #4]
 80054ce:	2300      	movs	r3, #0
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	2300      	movs	r3, #0
 80054d4:	2212      	movs	r2, #18
 80054d6:	4903      	ldr	r1, [pc, #12]	@ (80054e4 <_ZN5L6470I8shield_3E22L6470_PrepareGetStatusEv+0x2c>)
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	47a0      	blx	r4
}
 80054dc:	bf00      	nop
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd90      	pop	{r4, r7, pc}
 80054e4:	20000278 	.word	0x20000278

080054e8 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a09      	ldr	r2, [pc, #36]	@ (8005520 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 80054fc:	4909      	ldr	r1, [pc, #36]	@ (8005524 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a06      	ldr	r2, [pc, #24]	@ (8005528 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 800550e:	4904      	ldr	r1, [pc, #16]	@ (8005520 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 8005514:	4b04      	ldr	r3, [pc, #16]	@ (8005528 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 8005516:	4618      	mov	r0, r3
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	20000298 	.word	0x20000298
 8005524:	20000278 	.word	0x20000278
 8005528:	200002a0 	.word	0x200002a0

0800552c <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 800552c:	b590      	push	{r4, r7, lr}
 800552e:	b089      	sub	sp, #36	@ 0x24
 8005530:	af02      	add	r7, sp, #8
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 8005538:	4b17      	ldr	r3, [pc, #92]	@ (8005598 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 800553a:	2200      	movs	r2, #0
 800553c:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 800553e:	2300      	movs	r3, #0
 8005540:	75fb      	strb	r3, [r7, #23]
 8005542:	e020      	b.n	8005586 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800554c:	681c      	ldr	r4, [r3, #0]
 800554e:	7dfb      	ldrb	r3, [r7, #23]
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	461a      	mov	r2, r3
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	1899      	adds	r1, r3, r2
 8005558:	7dfb      	ldrb	r3, [r7, #23]
 800555a:	005b      	lsls	r3, r3, #1
 800555c:	461a      	mov	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	441a      	add	r2, r3
 8005562:	230a      	movs	r3, #10
 8005564:	9300      	str	r3, [sp, #0]
 8005566:	2302      	movs	r3, #2
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 800556c:	2300      	movs	r3, #0
 800556e:	75bb      	strb	r3, [r7, #22]
 8005570:	e003      	b.n	800557a <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x4e>
 8005572:	bf00      	nop
 8005574:	7dbb      	ldrb	r3, [r7, #22]
 8005576:	3301      	adds	r3, #1
 8005578:	75bb      	strb	r3, [r7, #22]
 800557a:	7dbb      	ldrb	r3, [r7, #22]
 800557c:	2b7c      	cmp	r3, #124	@ 0x7c
 800557e:	d9f8      	bls.n	8005572 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8005580:	7dfb      	ldrb	r3, [r7, #23]
 8005582:	3301      	adds	r3, #1
 8005584:	75fb      	strb	r3, [r7, #23]
 8005586:	7dfb      	ldrb	r3, [r7, #23]
 8005588:	2b03      	cmp	r3, #3
 800558a:	d9db      	bls.n	8005544 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 800558c:	bf00      	nop
}
 800558e:	bf00      	nop
 8005590:	371c      	adds	r7, #28
 8005592:	46bd      	mov	sp, r7
 8005594:	bd90      	pop	{r4, r7, pc}
 8005596:	bf00      	nop
 8005598:	20000275 	.word	0x20000275

0800559c <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 800559c:	b480      	push	{r7}
 800559e:	b087      	sub	sp, #28
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	4613      	mov	r3, r2
 80055a8:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 80055aa:	2300      	movs	r3, #0
 80055ac:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 80055ae:	2301      	movs	r3, #1
 80055b0:	74fb      	strb	r3, [r7, #19]
 80055b2:	e016      	b.n	80055e2 <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 80055b4:	7cfb      	ldrb	r3, [r7, #19]
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	461a      	mov	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	7f1b      	ldrb	r3, [r3, #28]
 80055be:	4413      	add	r3, r2
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	4413      	add	r3, r2
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	4619      	mov	r1, r3
 80055c8:	79fa      	ldrb	r2, [r7, #7]
 80055ca:	7cfb      	ldrb	r3, [r7, #19]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	fa01 f303 	lsl.w	r3, r1, r3
 80055d4:	461a      	mov	r2, r3
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	4313      	orrs	r3, r2
 80055da:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 80055dc:	7cfb      	ldrb	r3, [r7, #19]
 80055de:	3301      	adds	r3, #1
 80055e0:	74fb      	strb	r3, [r7, #19]
 80055e2:	7cfb      	ldrb	r3, [r7, #19]
 80055e4:	2b03      	cmp	r3, #3
 80055e6:	d9e5      	bls.n	80055b4 <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 80055e8:	697b      	ldr	r3, [r7, #20]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	371c      	adds	r7, #28
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
	...

080055f8 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	460b      	mov	r3, r1
 8005602:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 8005604:	2300      	movs	r3, #0
 8005606:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2118      	movs	r1, #24
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	4798      	blx	r3
 8005618:	4602      	mov	r2, r0
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800561e:	b292      	uxth	r2, r2
 8005620:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 8005622:	78fb      	ldrb	r3, [r7, #3]
 8005624:	2b0e      	cmp	r3, #14
 8005626:	f200 8099 	bhi.w	800575c <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
 800562a:	a201      	add	r2, pc, #4	@ (adr r2, 8005630 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x38>)
 800562c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005630:	0800566d 	.word	0x0800566d
 8005634:	0800567d 	.word	0x0800567d
 8005638:	0800568d 	.word	0x0800568d
 800563c:	0800569d 	.word	0x0800569d
 8005640:	080056ad 	.word	0x080056ad
 8005644:	080056bd 	.word	0x080056bd
 8005648:	080056cd 	.word	0x080056cd
 800564c:	080056dd 	.word	0x080056dd
 8005650:	080056ed 	.word	0x080056ed
 8005654:	080056fd 	.word	0x080056fd
 8005658:	0800570d 	.word	0x0800570d
 800565c:	0800571d 	.word	0x0800571d
 8005660:	0800572d 	.word	0x0800572d
 8005664:	0800573d 	.word	0x0800573d
 8005668:	0800574d 	.word	0x0800574d
      state = pL6470_StatusRegister->HiZ;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005676:	b2db      	uxtb	r3, r3
 8005678:	73fb      	strb	r3, [r7, #15]
      break;
 800567a:	e06f      	b.n	800575c <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005686:	b2db      	uxtb	r3, r3
 8005688:	73fb      	strb	r3, [r7, #15]
      break;
 800568a:	e067      	b.n	800575c <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005696:	b2db      	uxtb	r3, r3
 8005698:	73fb      	strb	r3, [r7, #15]
      break;
 800569a:	e05f      	b.n	800575c <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	73fb      	strb	r3, [r7, #15]
      break;
 80056aa:	e057      	b.n	800575c <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	73fb      	strb	r3, [r7, #15]
      break;
 80056ba:	e04f      	b.n	800575c <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	f3c3 1341 	ubfx	r3, r3, #5, #2
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	73fb      	strb	r3, [r7, #15]
      break;
 80056ca:	e047      	b.n	800575c <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	73fb      	strb	r3, [r7, #15]
      break;
 80056da:	e03f      	b.n	800575c <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056e0:	785b      	ldrb	r3, [r3, #1]
 80056e2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	73fb      	strb	r3, [r7, #15]
      break;
 80056ea:	e037      	b.n	800575c <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056f0:	785b      	ldrb	r3, [r3, #1]
 80056f2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	73fb      	strb	r3, [r7, #15]
      break;
 80056fa:	e02f      	b.n	800575c <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005700:	785b      	ldrb	r3, [r3, #1]
 8005702:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005706:	b2db      	uxtb	r3, r3
 8005708:	73fb      	strb	r3, [r7, #15]
      break;
 800570a:	e027      	b.n	800575c <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005710:	785b      	ldrb	r3, [r3, #1]
 8005712:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005716:	b2db      	uxtb	r3, r3
 8005718:	73fb      	strb	r3, [r7, #15]
      break;
 800571a:	e01f      	b.n	800575c <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005720:	785b      	ldrb	r3, [r3, #1]
 8005722:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005726:	b2db      	uxtb	r3, r3
 8005728:	73fb      	strb	r3, [r7, #15]
      break;
 800572a:	e017      	b.n	800575c <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005730:	785b      	ldrb	r3, [r3, #1]
 8005732:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005736:	b2db      	uxtb	r3, r3
 8005738:	73fb      	strb	r3, [r7, #15]
      break;
 800573a:	e00f      	b.n	800575c <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005740:	785b      	ldrb	r3, [r3, #1]
 8005742:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005746:	b2db      	uxtb	r3, r3
 8005748:	73fb      	strb	r3, [r7, #15]
      break;
 800574a:	e007      	b.n	800575c <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005750:	785b      	ldrb	r3, [r3, #1]
 8005752:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005756:	b2db      	uxtb	r3, r3
 8005758:	73fb      	strb	r3, [r7, #15]
      break;
 800575a:	bf00      	nop
  return state;
 800575c:	7bfb      	ldrb	r3, [r7, #15]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop

08005768 <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	460b      	mov	r3, r1
 8005772:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 8005774:	78fb      	ldrb	r3, [r7, #3]
 8005776:	2b18      	cmp	r3, #24
 8005778:	d809      	bhi.n	800578e <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a19      	ldr	r1, [r3, #32]
 800577e:	78fa      	ldrb	r2, [r7, #3]
 8005780:	4613      	mov	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4413      	add	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	440b      	add	r3, r1
 800578a:	3301      	adds	r3, #1
 800578c:	e000      	b.n	8005790 <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 80057a6:	2300      	movs	r3, #0
 80057a8:	73fb      	strb	r3, [r7, #15]
 80057aa:	e01a      	b.n	80057e2 <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80057ac:	7bfb      	ldrb	r3, [r7, #15]
 80057ae:	011b      	lsls	r3, r3, #4
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	4413      	add	r3, r2
 80057b4:	2200      	movs	r2, #0
 80057b6:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 80057b8:	7bfb      	ldrb	r3, [r7, #15]
 80057ba:	011b      	lsls	r3, r3, #4
 80057bc:	683a      	ldr	r2, [r7, #0]
 80057be:	4413      	add	r3, r2
 80057c0:	2200      	movs	r2, #0
 80057c2:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
 80057c6:	011b      	lsls	r3, r3, #4
 80057c8:	683a      	ldr	r2, [r7, #0]
 80057ca:	4413      	add	r3, r2
 80057cc:	2200      	movs	r2, #0
 80057ce:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 80057d0:	7bfb      	ldrb	r3, [r7, #15]
 80057d2:	011b      	lsls	r3, r3, #4
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	4413      	add	r3, r2
 80057d8:	2200      	movs	r2, #0
 80057da:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
 80057de:	3301      	adds	r3, #1
 80057e0:	73fb      	strb	r3, [r7, #15]
 80057e2:	7bfb      	ldrb	r3, [r7, #15]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d9e1      	bls.n	80057ac <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 80057e8:	bf00      	nop
 80057ea:	bf00      	nop
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <_ZN5L6470I8shield_3E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 80057f6:	b480      	push	{r7}
 80057f8:	b085      	sub	sp, #20
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	60f8      	str	r0, [r7, #12]
 80057fe:	60b9      	str	r1, [r7, #8]
 8005800:	603b      	str	r3, [r7, #0]
 8005802:	4613      	mov	r3, r2
 8005804:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	7f1b      	ldrb	r3, [r3, #28]
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	4413      	add	r3, r2
 8005810:	79fa      	ldrb	r2, [r7, #7]
 8005812:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	7f1b      	ldrb	r3, [r3, #28]
 8005818:	011b      	lsls	r3, r3, #4
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	4413      	add	r3, r2
 800581e:	683a      	ldr	r2, [r7, #0]
 8005820:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	7f1b      	ldrb	r3, [r3, #28]
 8005826:	011b      	lsls	r3, r3, #4
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	4413      	add	r3, r2
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	7f1b      	ldrb	r3, [r3, #28]
 8005834:	011b      	lsls	r3, r3, #4
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	4413      	add	r3, r2
 800583a:	69fa      	ldr	r2, [r7, #28]
 800583c:	60da      	str	r2, [r3, #12]
}
 800583e:	bf00      	nop
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
	...

0800584c <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 800584c:	b590      	push	{r4, r7, lr}
 800584e:	b087      	sub	sp, #28
 8005850:	af02      	add	r7, sp, #8
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	603b      	str	r3, [r7, #0]
 8005858:	4613      	mov	r3, r2
 800585a:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 800585c:	4b10      	ldr	r3, [pc, #64]	@ (80058a0 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10a      	bne.n	800587a <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8005864:	4b0e      	ldr	r3, [pc, #56]	@ (80058a0 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 8005866:	2201      	movs	r2, #1
 8005868:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68b9      	ldr	r1, [r7, #8]
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8005882:	681c      	ldr	r4, [r3, #0]
 8005884:	79fa      	ldrb	r2, [r7, #7]
 8005886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005888:	9301      	str	r3, [sp, #4]
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	68b9      	ldr	r1, [r7, #8]
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	47a0      	blx	r4
}
 8005896:	bf00      	nop
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	bd90      	pop	{r4, r7, pc}
 800589e:	bf00      	nop
 80058a0:	20000275 	.word	0x20000275

080058a4 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 80058b0:	2300      	movs	r3, #0
 80058b2:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 80058b4:	2300      	movs	r3, #0
 80058b6:	75bb      	strb	r3, [r7, #22]
 80058b8:	e013      	b.n	80058e2 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 80058ba:	2300      	movs	r3, #0
 80058bc:	75fb      	strb	r3, [r7, #23]
 80058be:	e00a      	b.n	80058d6 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 80058c0:	7d7b      	ldrb	r3, [r7, #21]
 80058c2:	1c5a      	adds	r2, r3, #1
 80058c4:	757a      	strb	r2, [r7, #21]
 80058c6:	461a      	mov	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4413      	add	r3, r2
 80058cc:	2200      	movs	r2, #0
 80058ce:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 80058d0:	7dfb      	ldrb	r3, [r7, #23]
 80058d2:	3301      	adds	r3, #1
 80058d4:	75fb      	strb	r3, [r7, #23]
 80058d6:	7dfb      	ldrb	r3, [r7, #23]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d9f1      	bls.n	80058c0 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 80058dc:	7dbb      	ldrb	r3, [r7, #22]
 80058de:	3301      	adds	r3, #1
 80058e0:	75bb      	strb	r3, [r7, #22]
 80058e2:	7dbb      	ldrb	r3, [r7, #22]
 80058e4:	2b03      	cmp	r3, #3
 80058e6:	d9e8      	bls.n	80058ba <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 80058e8:	2300      	movs	r3, #0
 80058ea:	75fb      	strb	r3, [r7, #23]
 80058ec:	e1f1      	b.n	8005cd2 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058f2:	7dfb      	ldrb	r3, [r7, #23]
 80058f4:	011b      	lsls	r3, r3, #4
 80058f6:	68b9      	ldr	r1, [r7, #8]
 80058f8:	440b      	add	r3, r1
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	4619      	mov	r1, r3
 80058fe:	460b      	mov	r3, r1
 8005900:	00db      	lsls	r3, r3, #3
 8005902:	1a5b      	subs	r3, r3, r1
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	441a      	add	r2, r3
 8005908:	7dfb      	ldrb	r3, [r7, #23]
 800590a:	6879      	ldr	r1, [r7, #4]
 800590c:	440b      	add	r3, r1
 800590e:	7b12      	ldrb	r2, [r2, #12]
 8005910:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 8005912:	7dfb      	ldrb	r3, [r7, #23]
 8005914:	011b      	lsls	r3, r3, #4
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	4413      	add	r3, r2
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	2b12      	cmp	r3, #18
 800591e:	f200 81d5 	bhi.w	8005ccc <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 8005922:	a201      	add	r2, pc, #4	@ (adr r2, 8005928 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 8005924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005928:	08005ccd 	.word	0x08005ccd
 800592c:	08005975 	.word	0x08005975
 8005930:	080059fd 	.word	0x080059fd
 8005934:	08005a2d 	.word	0x08005a2d
 8005938:	08005a95 	.word	0x08005a95
 800593c:	08005ac3 	.word	0x08005ac3
 8005940:	08005b2b 	.word	0x08005b2b
 8005944:	08005b67 	.word	0x08005b67
 8005948:	08005bcf 	.word	0x08005bcf
 800594c:	08005c6b 	.word	0x08005c6b
 8005950:	08005ccd 	.word	0x08005ccd
 8005954:	08005ccd 	.word	0x08005ccd
 8005958:	08005ccd 	.word	0x08005ccd
 800595c:	08005ccd 	.word	0x08005ccd
 8005960:	08005ccd 	.word	0x08005ccd
 8005964:	08005ccd 	.word	0x08005ccd
 8005968:	08005ccd 	.word	0x08005ccd
 800596c:	08005ccd 	.word	0x08005ccd
 8005970:	08005ccd 	.word	0x08005ccd
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8005974:	7dfb      	ldrb	r3, [r7, #23]
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	4413      	add	r3, r2
 800597a:	7819      	ldrb	r1, [r3, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6a18      	ldr	r0, [r3, #32]
 8005980:	7dfb      	ldrb	r3, [r7, #23]
 8005982:	011b      	lsls	r3, r3, #4
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	4413      	add	r3, r2
 8005988:	685a      	ldr	r2, [r3, #4]
 800598a:	4613      	mov	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4413      	add	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4403      	add	r3, r0
 8005994:	781a      	ldrb	r2, [r3, #0]
 8005996:	7dfb      	ldrb	r3, [r7, #23]
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	4403      	add	r3, r0
 800599c:	430a      	orrs	r2, r1
 800599e:	b2d2      	uxtb	r2, r2
 80059a0:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6a19      	ldr	r1, [r3, #32]
 80059a6:	7dfb      	ldrb	r3, [r7, #23]
 80059a8:	011b      	lsls	r3, r3, #4
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	4413      	add	r3, r2
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	4613      	mov	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	440b      	add	r3, r1
 80059ba:	7b9b      	ldrb	r3, [r3, #14]
 80059bc:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 80059be:	2301      	movs	r3, #1
 80059c0:	75bb      	strb	r3, [r7, #22]
 80059c2:	e016      	b.n	80059f2 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 80059c4:	7dfb      	ldrb	r3, [r7, #23]
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	4413      	add	r3, r2
 80059cc:	689a      	ldr	r2, [r3, #8]
 80059ce:	7d39      	ldrb	r1, [r7, #20]
 80059d0:	7dbb      	ldrb	r3, [r7, #22]
 80059d2:	1acb      	subs	r3, r1, r3
 80059d4:	00db      	lsls	r3, r3, #3
 80059d6:	fa22 f103 	lsr.w	r1, r2, r3
 80059da:	7dbb      	ldrb	r3, [r7, #22]
 80059dc:	005a      	lsls	r2, r3, #1
 80059de:	7dfb      	ldrb	r3, [r7, #23]
 80059e0:	4413      	add	r3, r2
 80059e2:	461a      	mov	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4413      	add	r3, r2
 80059e8:	b2ca      	uxtb	r2, r1
 80059ea:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 80059ec:	7dbb      	ldrb	r3, [r7, #22]
 80059ee:	3301      	adds	r3, #1
 80059f0:	75bb      	strb	r3, [r7, #22]
 80059f2:	7d3a      	ldrb	r2, [r7, #20]
 80059f4:	7dbb      	ldrb	r3, [r7, #22]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d2e4      	bcs.n	80059c4 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 80059fa:	e167      	b.n	8005ccc <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 80059fc:	7dfb      	ldrb	r3, [r7, #23]
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	4413      	add	r3, r2
 8005a02:	7819      	ldrb	r1, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6a18      	ldr	r0, [r3, #32]
 8005a08:	7dfb      	ldrb	r3, [r7, #23]
 8005a0a:	011b      	lsls	r3, r3, #4
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	4413      	add	r3, r2
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	4613      	mov	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4403      	add	r3, r0
 8005a1c:	781a      	ldrb	r2, [r3, #0]
 8005a1e:	7dfb      	ldrb	r3, [r7, #23]
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	4403      	add	r3, r0
 8005a24:	430a      	orrs	r2, r1
 8005a26:	b2d2      	uxtb	r2, r2
 8005a28:	701a      	strb	r2, [r3, #0]
      break;
 8005a2a:	e14f      	b.n	8005ccc <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8005a2c:	7dfb      	ldrb	r3, [r7, #23]
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	4413      	add	r3, r2
 8005a32:	7819      	ldrb	r1, [r3, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005a38:	7dfb      	ldrb	r3, [r7, #23]
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	4413      	add	r3, r2
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	4613      	mov	r3, r2
 8005a44:	00db      	lsls	r3, r3, #3
 8005a46:	4413      	add	r3, r2
 8005a48:	4403      	add	r3, r0
 8005a4a:	7a1a      	ldrb	r2, [r3, #8]
 8005a4c:	7dfb      	ldrb	r3, [r7, #23]
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	4403      	add	r3, r0
 8005a52:	430a      	orrs	r2, r1
 8005a54:	b2d2      	uxtb	r2, r2
 8005a56:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005a58:	2301      	movs	r3, #1
 8005a5a:	75bb      	strb	r3, [r7, #22]
 8005a5c:	e016      	b.n	8005a8c <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8005a5e:	7dfb      	ldrb	r3, [r7, #23]
 8005a60:	011b      	lsls	r3, r3, #4
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	4413      	add	r3, r2
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	7dbb      	ldrb	r3, [r7, #22]
 8005a6a:	f1c3 0303 	rsb	r3, r3, #3
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	fa22 f103 	lsr.w	r1, r2, r3
 8005a74:	7dbb      	ldrb	r3, [r7, #22]
 8005a76:	005a      	lsls	r2, r3, #1
 8005a78:	7dfb      	ldrb	r3, [r7, #23]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4413      	add	r3, r2
 8005a82:	b2ca      	uxtb	r2, r1
 8005a84:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005a86:	7dbb      	ldrb	r3, [r7, #22]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	75bb      	strb	r3, [r7, #22]
 8005a8c:	7dbb      	ldrb	r3, [r7, #22]
 8005a8e:	2b03      	cmp	r3, #3
 8005a90:	d9e5      	bls.n	8005a5e <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 8005a92:	e11b      	b.n	8005ccc <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8005a94:	7dfb      	ldrb	r3, [r7, #23]
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	4413      	add	r3, r2
 8005a9a:	7819      	ldrb	r1, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005aa0:	7dfb      	ldrb	r3, [r7, #23]
 8005aa2:	011b      	lsls	r3, r3, #4
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	00db      	lsls	r3, r3, #3
 8005aae:	4413      	add	r3, r2
 8005ab0:	4403      	add	r3, r0
 8005ab2:	7a1a      	ldrb	r2, [r3, #8]
 8005ab4:	7dfb      	ldrb	r3, [r7, #23]
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	4403      	add	r3, r0
 8005aba:	430a      	orrs	r2, r1
 8005abc:	b2d2      	uxtb	r2, r2
 8005abe:	701a      	strb	r2, [r3, #0]
      break;
 8005ac0:	e104      	b.n	8005ccc <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8005ac2:	7dfb      	ldrb	r3, [r7, #23]
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	7819      	ldrb	r1, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005ace:	7dfb      	ldrb	r3, [r7, #23]
 8005ad0:	011b      	lsls	r3, r3, #4
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	00db      	lsls	r3, r3, #3
 8005adc:	4413      	add	r3, r2
 8005ade:	4403      	add	r3, r0
 8005ae0:	7a1a      	ldrb	r2, [r3, #8]
 8005ae2:	7dfb      	ldrb	r3, [r7, #23]
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	4403      	add	r3, r0
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	b2d2      	uxtb	r2, r2
 8005aec:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005aee:	2301      	movs	r3, #1
 8005af0:	75bb      	strb	r3, [r7, #22]
 8005af2:	e016      	b.n	8005b22 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8005af4:	7dfb      	ldrb	r3, [r7, #23]
 8005af6:	011b      	lsls	r3, r3, #4
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	4413      	add	r3, r2
 8005afc:	689a      	ldr	r2, [r3, #8]
 8005afe:	7dbb      	ldrb	r3, [r7, #22]
 8005b00:	f1c3 0303 	rsb	r3, r3, #3
 8005b04:	00db      	lsls	r3, r3, #3
 8005b06:	fa22 f103 	lsr.w	r1, r2, r3
 8005b0a:	7dbb      	ldrb	r3, [r7, #22]
 8005b0c:	005a      	lsls	r2, r3, #1
 8005b0e:	7dfb      	ldrb	r3, [r7, #23]
 8005b10:	4413      	add	r3, r2
 8005b12:	461a      	mov	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4413      	add	r3, r2
 8005b18:	b2ca      	uxtb	r2, r1
 8005b1a:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005b1c:	7dbb      	ldrb	r3, [r7, #22]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	75bb      	strb	r3, [r7, #22]
 8005b22:	7dbb      	ldrb	r3, [r7, #22]
 8005b24:	2b03      	cmp	r3, #3
 8005b26:	d9e5      	bls.n	8005af4 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 8005b28:	e0d0      	b.n	8005ccc <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	75bb      	strb	r3, [r7, #22]
 8005b2e:	e016      	b.n	8005b5e <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 8005b30:	7dfb      	ldrb	r3, [r7, #23]
 8005b32:	011b      	lsls	r3, r3, #4
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	4413      	add	r3, r2
 8005b38:	685a      	ldr	r2, [r3, #4]
 8005b3a:	7dbb      	ldrb	r3, [r7, #22]
 8005b3c:	f1c3 0303 	rsb	r3, r3, #3
 8005b40:	00db      	lsls	r3, r3, #3
 8005b42:	fa22 f103 	lsr.w	r1, r2, r3
 8005b46:	7dbb      	ldrb	r3, [r7, #22]
 8005b48:	005a      	lsls	r2, r3, #1
 8005b4a:	7dfb      	ldrb	r3, [r7, #23]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	461a      	mov	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4413      	add	r3, r2
 8005b54:	b2ca      	uxtb	r2, r1
 8005b56:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005b58:	7dbb      	ldrb	r3, [r7, #22]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	75bb      	strb	r3, [r7, #22]
 8005b5e:	7dbb      	ldrb	r3, [r7, #22]
 8005b60:	2b03      	cmp	r3, #3
 8005b62:	d9e5      	bls.n	8005b30 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 8005b64:	e0b2      	b.n	8005ccc <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8005b66:	7dfb      	ldrb	r3, [r7, #23]
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	7819      	ldrb	r1, [r3, #0]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005b72:	7dfb      	ldrb	r3, [r7, #23]
 8005b74:	011b      	lsls	r3, r3, #4
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	4413      	add	r3, r2
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	00db      	lsls	r3, r3, #3
 8005b80:	4413      	add	r3, r2
 8005b82:	4403      	add	r3, r0
 8005b84:	7a1a      	ldrb	r2, [r3, #8]
 8005b86:	7dfb      	ldrb	r3, [r7, #23]
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	4403      	add	r3, r0
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	b2d2      	uxtb	r2, r2
 8005b90:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005b92:	2301      	movs	r3, #1
 8005b94:	75bb      	strb	r3, [r7, #22]
 8005b96:	e016      	b.n	8005bc6 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8005b98:	7dfb      	ldrb	r3, [r7, #23]
 8005b9a:	011b      	lsls	r3, r3, #4
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	689a      	ldr	r2, [r3, #8]
 8005ba2:	7dbb      	ldrb	r3, [r7, #22]
 8005ba4:	f1c3 0303 	rsb	r3, r3, #3
 8005ba8:	00db      	lsls	r3, r3, #3
 8005baa:	fa22 f103 	lsr.w	r1, r2, r3
 8005bae:	7dbb      	ldrb	r3, [r7, #22]
 8005bb0:	005a      	lsls	r2, r3, #1
 8005bb2:	7dfb      	ldrb	r3, [r7, #23]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4413      	add	r3, r2
 8005bbc:	b2ca      	uxtb	r2, r1
 8005bbe:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005bc0:	7dbb      	ldrb	r3, [r7, #22]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	75bb      	strb	r3, [r7, #22]
 8005bc6:	7dbb      	ldrb	r3, [r7, #22]
 8005bc8:	2b03      	cmp	r3, #3
 8005bca:	d9e5      	bls.n	8005b98 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 8005bcc:	e07e      	b.n	8005ccc <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8005bce:	7dfb      	ldrb	r3, [r7, #23]
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	b259      	sxtb	r1, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8005bdc:	7dfb      	ldrb	r3, [r7, #23]
 8005bde:	011b      	lsls	r3, r3, #4
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	4413      	add	r3, r2
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	4613      	mov	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4413      	add	r3, r2
 8005bec:	4403      	add	r3, r0
 8005bee:	791b      	ldrb	r3, [r3, #4]
 8005bf0:	00db      	lsls	r3, r3, #3
 8005bf2:	b25b      	sxtb	r3, r3
 8005bf4:	430b      	orrs	r3, r1
 8005bf6:	b259      	sxtb	r1, r3
 8005bf8:	7dfb      	ldrb	r3, [r7, #23]
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	b2ca      	uxtb	r2, r1
 8005c00:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8005c02:	7dfb      	ldrb	r3, [r7, #23]
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	4413      	add	r3, r2
 8005c08:	7819      	ldrb	r1, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005c0e:	7dfb      	ldrb	r3, [r7, #23]
 8005c10:	011b      	lsls	r3, r3, #4
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	4413      	add	r3, r2
 8005c16:	689a      	ldr	r2, [r3, #8]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	00db      	lsls	r3, r3, #3
 8005c1c:	4413      	add	r3, r2
 8005c1e:	4403      	add	r3, r0
 8005c20:	7a1a      	ldrb	r2, [r3, #8]
 8005c22:	7dfb      	ldrb	r3, [r7, #23]
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	4403      	add	r3, r0
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	b2d2      	uxtb	r2, r2
 8005c2c:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005c2e:	2301      	movs	r3, #1
 8005c30:	75bb      	strb	r3, [r7, #22]
 8005c32:	e016      	b.n	8005c62 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 8005c34:	7dfb      	ldrb	r3, [r7, #23]
 8005c36:	011b      	lsls	r3, r3, #4
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	68da      	ldr	r2, [r3, #12]
 8005c3e:	7dbb      	ldrb	r3, [r7, #22]
 8005c40:	f1c3 0303 	rsb	r3, r3, #3
 8005c44:	00db      	lsls	r3, r3, #3
 8005c46:	fa22 f103 	lsr.w	r1, r2, r3
 8005c4a:	7dbb      	ldrb	r3, [r7, #22]
 8005c4c:	005a      	lsls	r2, r3, #1
 8005c4e:	7dfb      	ldrb	r3, [r7, #23]
 8005c50:	4413      	add	r3, r2
 8005c52:	461a      	mov	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4413      	add	r3, r2
 8005c58:	b2ca      	uxtb	r2, r1
 8005c5a:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005c5c:	7dbb      	ldrb	r3, [r7, #22]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	75bb      	strb	r3, [r7, #22]
 8005c62:	7dbb      	ldrb	r3, [r7, #22]
 8005c64:	2b03      	cmp	r3, #3
 8005c66:	d9e5      	bls.n	8005c34 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 8005c68:	e030      	b.n	8005ccc <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8005c6a:	7dfb      	ldrb	r3, [r7, #23]
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	4413      	add	r3, r2
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	b259      	sxtb	r1, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8005c78:	7dfb      	ldrb	r3, [r7, #23]
 8005c7a:	011b      	lsls	r3, r3, #4
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	4413      	add	r3, r2
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	4613      	mov	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	4403      	add	r3, r0
 8005c8a:	791b      	ldrb	r3, [r3, #4]
 8005c8c:	00db      	lsls	r3, r3, #3
 8005c8e:	b25b      	sxtb	r3, r3
 8005c90:	430b      	orrs	r3, r1
 8005c92:	b259      	sxtb	r1, r3
 8005c94:	7dfb      	ldrb	r3, [r7, #23]
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	4413      	add	r3, r2
 8005c9a:	b2ca      	uxtb	r2, r1
 8005c9c:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8005c9e:	7dfb      	ldrb	r3, [r7, #23]
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	7819      	ldrb	r1, [r3, #0]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005caa:	7dfb      	ldrb	r3, [r7, #23]
 8005cac:	011b      	lsls	r3, r3, #4
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	689a      	ldr	r2, [r3, #8]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	4413      	add	r3, r2
 8005cba:	4403      	add	r3, r0
 8005cbc:	7a1a      	ldrb	r2, [r3, #8]
 8005cbe:	7dfb      	ldrb	r3, [r7, #23]
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	4403      	add	r3, r0
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	b2d2      	uxtb	r2, r2
 8005cc8:	701a      	strb	r2, [r3, #0]
      break;
 8005cca:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8005ccc:	7dfb      	ldrb	r3, [r7, #23]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	75fb      	strb	r3, [r7, #23]
 8005cd2:	7dfb      	ldrb	r3, [r7, #23]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	f67f ae0a 	bls.w	80058ee <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 8005cda:	bf00      	nop
 8005cdc:	bf00      	nop
 8005cde:	371c      	adds	r7, #28
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <_ZN5L6470I8shield_3E11L6470_roundEf>:
    /**
     * @brief  Rounding a floating point number to the nearest unsigned integer number.
     * @param  f The floating point number.
     * @retval The nearest unsigned integer number.
     */
    int L6470_round(float f)
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	ed87 0a00 	vstr	s0, [r7]
    {
        if (f >= 0) {
 8005cf4:	edd7 7a00 	vldr	s15, [r7]
 8005cf8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d00:	db1e      	blt.n	8005d40 <_ZN5L6470I8shield_3E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 8005d02:	edd7 7a00 	vldr	s15, [r7]
 8005d06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d0a:	ee17 2a90 	vmov	r2, s15
 8005d0e:	edd7 7a00 	vldr	s15, [r7]
 8005d12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d1a:	ed97 7a00 	vldr	s14, [r7]
 8005d1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d22:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005d26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d2e:	bf4c      	ite	mi
 8005d30:	2301      	movmi	r3, #1
 8005d32:	2300      	movpl	r3, #0
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	f083 0301 	eor.w	r3, r3, #1
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	4413      	add	r3, r2
 8005d3e:	e01a      	b.n	8005d76 <_ZN5L6470I8shield_3E11L6470_roundEf+0x8e>
        } else {
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 8005d40:	edd7 7a00 	vldr	s15, [r7]
 8005d44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d48:	ee17 2a90 	vmov	r2, s15
 8005d4c:	edd7 7a00 	vldr	s15, [r7]
 8005d50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d58:	ed97 7a00 	vldr	s14, [r7]
 8005d5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d60:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8005d64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d6c:	d501      	bpl.n	8005d72 <_ZN5L6470I8shield_3E11L6470_roundEf+0x8a>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e000      	b.n	8005d74 <_ZN5L6470I8shield_3E11L6470_roundEf+0x8c>
 8005d72:	2300      	movs	r3, #0
 8005d74:	1ad3      	subs	r3, r2, r3
        }
    }
 8005d76:	4618      	mov	r0, r3
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <_ZN5L6470I8shield_3E4ReadEPht>:
     * @brief      Utility function to read data from L6470.
     * @param[out] pBuffer pointer to the buffer to read data into.
     * @param[in]  NumBytesToRead number of bytes to read.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b086      	sub	sp, #24
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	60f8      	str	r0, [r7, #12]
 8005d8a:	60b9      	str	r1, [r7, #8]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	80fb      	strh	r3, [r7, #6]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6918      	ldr	r0, [r3, #16]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	8a9b      	ldrh	r3, [r3, #20]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	f007 fc0a 	bl	800d5b4 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6998      	ldr	r0, [r3, #24]
 8005da4:	88fa      	ldrh	r2, [r7, #6]
 8005da6:	2364      	movs	r3, #100	@ 0x64
 8005da8:	68b9      	ldr	r1, [r7, #8]
 8005daa:	f008 fc1a 	bl	800e5e2 <HAL_SPI_Receive>
 8005dae:	4603      	mov	r3, r0
 8005db0:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6918      	ldr	r0, [r3, #16]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	8a9b      	ldrh	r3, [r3, #20]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	f007 fbf9 	bl	800d5b4 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8005dc2:	7dfb      	ldrb	r3, [r7, #23]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <_ZN5L6470I8shield_3E4ReadEPht+0x4a>
        {
        	return COMPONENT_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e000      	b.n	8005dce <_ZN5L6470I8shield_3E4ReadEPht+0x4c>
        }
        return COMPONENT_OK;
 8005dcc:	2300      	movs	r3, #0
    }
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3718      	adds	r7, #24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <_ZN5L6470I8shield_3E5WriteEPht>:
     * @brief      Utility function to write data to L6470.
     * @param[in]  pBuffer pointer to the buffer of data to send.
     * @param[in]  NumBytesToWrite number of bytes to write.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b086      	sub	sp, #24
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	60f8      	str	r0, [r7, #12]
 8005dde:	60b9      	str	r1, [r7, #8]
 8005de0:	4613      	mov	r3, r2
 8005de2:	80fb      	strh	r3, [r7, #6]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6918      	ldr	r0, [r3, #16]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8a9b      	ldrh	r3, [r3, #20]
 8005dec:	2200      	movs	r2, #0
 8005dee:	4619      	mov	r1, r3
 8005df0:	f007 fbe0 	bl	800d5b4 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6998      	ldr	r0, [r3, #24]
 8005df8:	88fa      	ldrh	r2, [r7, #6]
 8005dfa:	2364      	movs	r3, #100	@ 0x64
 8005dfc:	68b9      	ldr	r1, [r7, #8]
 8005dfe:	f008 fab4 	bl	800e36a <HAL_SPI_Transmit>
 8005e02:	4603      	mov	r3, r0
 8005e04:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6918      	ldr	r0, [r3, #16]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8a9b      	ldrh	r3, [r3, #20]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	4619      	mov	r1, r3
 8005e12:	f007 fbcf 	bl	800d5b4 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8005e16:	7dfb      	ldrb	r3, [r7, #23]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d001      	beq.n	8005e20 <_ZN5L6470I8shield_3E5WriteEPht+0x4a>
        {
        	return COMPONENT_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e000      	b.n	8005e22 <_ZN5L6470I8shield_3E5WriteEPht+0x4c>
        }
        return COMPONENT_OK;
 8005e20:	2300      	movs	r3, #0
    }
 8005e22:	4618      	mov	r0, r3
 8005e24:	3718      	adds	r7, #24
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t>:
     * @param[out] pBufferToRead pointer to the buffer to read data into.
     * @param[in]  pBufferToWrite pointer to the buffer of data to send.
     * @param[in]  NumBytes number of bytes to read and write.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b088      	sub	sp, #32
 8005e2e:	af02      	add	r7, sp, #8
 8005e30:	60f8      	str	r0, [r7, #12]
 8005e32:	60b9      	str	r1, [r7, #8]
 8005e34:	607a      	str	r2, [r7, #4]
 8005e36:	807b      	strh	r3, [r7, #2]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6918      	ldr	r0, [r3, #16]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8a9b      	ldrh	r3, [r3, #20]
 8005e40:	2200      	movs	r2, #0
 8005e42:	4619      	mov	r1, r3
 8005e44:	f007 fbb6 	bl	800d5b4 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6998      	ldr	r0, [r3, #24]
 8005e4c:	887b      	ldrh	r3, [r7, #2]
 8005e4e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005e52:	9200      	str	r2, [sp, #0]
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	6879      	ldr	r1, [r7, #4]
 8005e58:	f008 fcd4 	bl	800e804 <HAL_SPI_TransmitReceive>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 8005e60:	7dfb      	ldrb	r3, [r7, #23]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d009      	beq.n	8005e7a <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t+0x50>
        {
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6918      	ldr	r0, [r3, #16]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	8a9b      	ldrh	r3, [r3, #20]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	4619      	mov	r1, r3
 8005e72:	f007 fb9f 	bl	800d5b4 <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e008      	b.n	8005e8c <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t+0x62>
        }
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6918      	ldr	r0, [r3, #16]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	8a9b      	ldrh	r3, [r3, #20]
 8005e82:	2201      	movs	r2, #1
 8005e84:	4619      	mov	r1, r3
 8005e86:	f007 fb95 	bl	800d5b4 <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 8005e8a:	2300      	movs	r3, #0
    }
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <_ZN5L6470I8shield_3E23L6470_SPI_CommunicationEPhS2_tm>:


    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 8005e94:	b590      	push	{r4, r7, lr}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
 8005ea0:	807b      	strh	r3, [r7, #2]
    {
        ReadWrite(pRxData, pTxData, Size);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005eaa:	681c      	ldr	r4, [r3, #0]
 8005eac:	887b      	ldrh	r3, [r7, #2]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	6879      	ldr	r1, [r7, #4]
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	47a0      	blx	r4
    }
 8005eb6:	bf00      	nop
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd90      	pop	{r4, r7, pc}

08005ebe <_ZN5L6470I8shield_2E4initEPv>:
    virtual int init(void *init)
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b082      	sub	sp, #8
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
 8005ec6:	6039      	str	r1, [r7, #0]
        return (int) L6470_Config((void *) init);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6839      	ldr	r1, [r7, #0]
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	4798      	blx	r3
 8005ed8:	4603      	mov	r3, r0
    }
 8005eda:	4618      	mov	r0, r3
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <_ZN5L6470I8shield_2E10get_statusEv>:
    virtual unsigned int get_status(void)
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b082      	sub	sp, #8
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
        return (unsigned int) L6470_GetStatus();
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	4798      	blx	r3
 8005ef8:	4603      	mov	r3, r0
    }
 8005efa:	4618      	mov	r0, r3
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <_ZN5L6470I8shield_2E13get_parameterEj>:
    virtual unsigned int get_parameter(unsigned int parameter)
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b082      	sub	sp, #8
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	6039      	str	r1, [r7, #0]
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	b2d2      	uxtb	r2, r2
 8005f1a:	4611      	mov	r1, r2
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	4798      	blx	r3
 8005f20:	4603      	mov	r3, r0
    }
 8005f22:	4618      	mov	r0, r3
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <_ZN5L6470I8shield_2E12get_positionEv>:
    virtual signed int get_position(void)
 8005f2a:	b590      	push	{r4, r7, lr}
 8005f2c:	b083      	sub	sp, #12
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8005f3a:	681c      	ldr	r4, [r3, #0]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2100      	movs	r1, #0
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	4798      	blx	r3
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	4619      	mov	r1, r3
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	47a0      	blx	r4
 8005f54:	4603      	mov	r3, r0
    }
 8005f56:	4618      	mov	r0, r3
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd90      	pop	{r4, r7, pc}

08005f5e <_ZN5L6470I8shield_2E8get_markEv>:
    virtual signed int get_mark(void)
 8005f5e:	b590      	push	{r4, r7, lr}
 8005f60:	b083      	sub	sp, #12
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8005f6e:	681c      	ldr	r4, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2102      	movs	r1, #2
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	4798      	blx	r3
 8005f80:	4603      	mov	r3, r0
 8005f82:	4619      	mov	r1, r3
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	47a0      	blx	r4
 8005f88:	4603      	mov	r3, r0
    }
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd90      	pop	{r4, r7, pc}

08005f92 <_ZN5L6470I8shield_2E9get_speedEv>:
    virtual unsigned int get_speed(void)
 8005f92:	b5b0      	push	{r4, r5, r7, lr}
 8005f94:	b082      	sub	sp, #8
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005fa2:	681c      	ldr	r4, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8005fac:	681d      	ldr	r5, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2103      	movs	r1, #3
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	4798      	blx	r3
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	47a8      	blx	r5
 8005fc6:	eef0 7a40 	vmov.f32	s15, s0
 8005fca:	eeb0 0a67 	vmov.f32	s0, s15
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	47a0      	blx	r4
 8005fd2:	4603      	mov	r3, r0
    }
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3708      	adds	r7, #8
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bdb0      	pop	{r4, r5, r7, pc}

08005fdc <_ZN5L6470I8shield_2E13get_max_speedEv>:
    virtual unsigned int get_max_speed(void)
 8005fdc:	b5b0      	push	{r4, r5, r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005fec:	681c      	ldr	r4, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005ff6:	681d      	ldr	r5, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2106      	movs	r1, #6
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	4798      	blx	r3
 8006008:	4603      	mov	r3, r0
 800600a:	b29b      	uxth	r3, r3
 800600c:	4619      	mov	r1, r3
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	47a8      	blx	r5
 8006012:	eef0 7a40 	vmov.f32	s15, s0
 8006016:	eeb0 0a67 	vmov.f32	s0, s15
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	47a0      	blx	r4
 800601e:	4603      	mov	r3, r0
    }
 8006020:	4618      	mov	r0, r3
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bdb0      	pop	{r4, r5, r7, pc}

08006028 <_ZN5L6470I8shield_2E13get_min_speedEv>:
    virtual unsigned int get_min_speed(void)
 8006028:	b5b0      	push	{r4, r5, r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006038:	681c      	ldr	r4, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8006042:	681d      	ldr	r5, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2107      	movs	r1, #7
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	4798      	blx	r3
 8006054:	4603      	mov	r3, r0
 8006056:	b29b      	uxth	r3, r3
 8006058:	4619      	mov	r1, r3
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	47a8      	blx	r5
 800605e:	eef0 7a40 	vmov.f32	s15, s0
 8006062:	eeb0 0a67 	vmov.f32	s0, s15
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	47a0      	blx	r4
 800606a:	4603      	mov	r3, r0
    }
 800606c:	4618      	mov	r0, r3
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bdb0      	pop	{r4, r5, r7, pc}

08006074 <_ZN5L6470I8shield_2E16get_accelerationEv>:
    virtual unsigned int get_acceleration(void)
 8006074:	b5b0      	push	{r4, r5, r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006084:	681c      	ldr	r4, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800608e:	681d      	ldr	r5, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2104      	movs	r1, #4
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	4798      	blx	r3
 80060a0:	4603      	mov	r3, r0
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	4619      	mov	r1, r3
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	47a8      	blx	r5
 80060aa:	eef0 7a40 	vmov.f32	s15, s0
 80060ae:	eeb0 0a67 	vmov.f32	s0, s15
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	47a0      	blx	r4
 80060b6:	4603      	mov	r3, r0
    }
 80060b8:	4618      	mov	r0, r3
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bdb0      	pop	{r4, r5, r7, pc}

080060c0 <_ZN5L6470I8shield_2E16get_decelerationEv>:
    virtual unsigned int get_deceleration(void)
 80060c0:	b5b0      	push	{r4, r5, r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80060d0:	681c      	ldr	r4, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80060da:	681d      	ldr	r5, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2105      	movs	r1, #5
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	4798      	blx	r3
 80060ec:	4603      	mov	r3, r0
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	4619      	mov	r1, r3
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	47a8      	blx	r5
 80060f6:	eef0 7a40 	vmov.f32	s15, s0
 80060fa:	eeb0 0a67 	vmov.f32	s0, s15
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	47a0      	blx	r4
 8006102:	4603      	mov	r3, r0
    }
 8006104:	4618      	mov	r0, r3
 8006106:	3708      	adds	r7, #8
 8006108:	46bd      	mov	sp, r7
 800610a:	bdb0      	pop	{r4, r5, r7, pc}

0800610c <_ZN5L6470I8shield_2E13get_directionEv>:
    virtual StepperMotor::direction_t get_direction(void)
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2104      	movs	r1, #4
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	4798      	blx	r3
 8006124:	4603      	mov	r3, r0
 8006126:	2b01      	cmp	r3, #1
 8006128:	d101      	bne.n	800612e <_ZN5L6470I8shield_2E13get_directionEv+0x22>
 800612a:	2301      	movs	r3, #1
 800612c:	e000      	b.n	8006130 <_ZN5L6470I8shield_2E13get_directionEv+0x24>
 800612e:	2300      	movs	r3, #0
    }
 8006130:	4618      	mov	r0, r3
 8006132:	3708      	adds	r7, #8
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <_ZN5L6470I8shield_2E13set_parameterEjj>:
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	b2d1      	uxtb	r1, r2
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	4798      	blx	r3
    }
 8006158:	bf00      	nop
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <_ZN5L6470I8shield_2E8set_homeEv>:
    virtual void set_home(void)
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
        L6470_ResetPos();
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	4798      	blx	r3
    }
 8006176:	bf00      	nop
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <_ZN5L6470I8shield_2E8set_markEv>:
    virtual void set_mark(void)
 800617e:	b590      	push	{r4, r7, lr}
 8006180:	b083      	sub	sp, #12
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800618e:	681c      	ldr	r4, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2100      	movs	r1, #0
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	4798      	blx	r3
 80061a0:	4603      	mov	r3, r0
 80061a2:	461a      	mov	r2, r3
 80061a4:	2102      	movs	r1, #2
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	47a0      	blx	r4
    }
 80061aa:	bf00      	nop
 80061ac:	370c      	adds	r7, #12
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd90      	pop	{r4, r7, pc}

080061b2 <_ZN5L6470I8shield_2E8set_markEi>:
    virtual void set_mark(signed int position)
 80061b2:	b590      	push	{r4, r7, lr}
 80061b4:	b083      	sub	sp, #12
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
 80061ba:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80061c4:	681c      	ldr	r4, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6839      	ldr	r1, [r7, #0]
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	4798      	blx	r3
 80061d6:	4603      	mov	r3, r0
 80061d8:	461a      	mov	r2, r3
 80061da:	2102      	movs	r1, #2
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	47a0      	blx	r4
    }
 80061e0:	bf00      	nop
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd90      	pop	{r4, r7, pc}

080061e8 <_ZN5L6470I8shield_2E13set_max_speedEj>:
    virtual bool set_max_speed(unsigned int speed)
 80061e8:	b590      	push	{r4, r7, lr}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80061fa:	681c      	ldr	r4, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	ee07 2a90 	vmov	s15, r2
 800620c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006210:	eeb0 0a67 	vmov.f32	s0, s15
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	4798      	blx	r3
 8006218:	4603      	mov	r3, r0
 800621a:	461a      	mov	r2, r3
 800621c:	2106      	movs	r1, #6
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	47a0      	blx	r4
        return true;
 8006222:	2301      	movs	r3, #1
    }
 8006224:	4618      	mov	r0, r3
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	bd90      	pop	{r4, r7, pc}

0800622c <_ZN5L6470I8shield_2E13set_min_speedEj>:
    virtual bool set_min_speed(unsigned int speed)
 800622c:	b590      	push	{r4, r7, lr}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800623e:	681c      	ldr	r4, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	ee07 2a90 	vmov	s15, r2
 8006250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006254:	eeb0 0a67 	vmov.f32	s0, s15
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	4798      	blx	r3
 800625c:	4603      	mov	r3, r0
 800625e:	461a      	mov	r2, r3
 8006260:	2107      	movs	r1, #7
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	47a0      	blx	r4
        return true;
 8006266:	2301      	movs	r3, #1
    }
 8006268:	4618      	mov	r0, r3
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	bd90      	pop	{r4, r7, pc}

08006270 <_ZN5L6470I8shield_2E16set_accelerationEj>:
    virtual bool set_acceleration(unsigned int acceleration)
 8006270:	b590      	push	{r4, r7, lr}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8006282:	681c      	ldr	r4, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	683a      	ldr	r2, [r7, #0]
 8006290:	ee07 2a90 	vmov	s15, r2
 8006294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006298:	eeb0 0a67 	vmov.f32	s0, s15
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	4798      	blx	r3
 80062a0:	4603      	mov	r3, r0
 80062a2:	461a      	mov	r2, r3
 80062a4:	2104      	movs	r1, #4
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	47a0      	blx	r4
        return true;
 80062aa:	2301      	movs	r3, #1
    }
 80062ac:	4618      	mov	r0, r3
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd90      	pop	{r4, r7, pc}

080062b4 <_ZN5L6470I8shield_2E16set_decelerationEj>:
    virtual bool set_deceleration(unsigned int deceleration)
 80062b4:	b590      	push	{r4, r7, lr}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80062c6:	681c      	ldr	r4, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	ee07 2a90 	vmov	s15, r2
 80062d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062dc:	eeb0 0a67 	vmov.f32	s0, s15
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	4798      	blx	r3
 80062e4:	4603      	mov	r3, r0
 80062e6:	461a      	mov	r2, r3
 80062e8:	2105      	movs	r1, #5
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	47a0      	blx	r4
        return true;
 80062ee:	2301      	movs	r3, #1
    }
 80062f0:	4618      	mov	r0, r3
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd90      	pop	{r4, r7, pc}

080062f8 <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE>:
    virtual bool set_step_mode(step_mode_t step_mode)
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	460b      	mov	r3, r1
 8006302:	70fb      	strb	r3, [r7, #3]
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 8006304:	78fb      	ldrb	r3, [r7, #3]
 8006306:	2b07      	cmp	r3, #7
 8006308:	d901      	bls.n	800630e <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 800630a:	2300      	movs	r3, #0
 800630c:	e00f      	b.n	800632e <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        soft_hiz();
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	3380      	adds	r3, #128	@ 0x80
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	78fa      	ldrb	r2, [r7, #3]
 8006326:	2115      	movs	r1, #21
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	4798      	blx	r3
        return true;
 800632c:	2301      	movs	r3, #1
    }
 800632e:	4618      	mov	r0, r3
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <_ZN5L6470I8shield_2E5go_toEi>:
    virtual void go_to(signed int position)
 8006336:	b590      	push	{r4, r7, lr}
 8006338:	b083      	sub	sp, #12
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
 800633e:	6039      	str	r1, [r7, #0]
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8006348:	681c      	ldr	r4, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6839      	ldr	r1, [r7, #0]
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	4798      	blx	r3
 800635a:	4603      	mov	r3, r0
 800635c:	4619      	mov	r1, r3
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	47a0      	blx	r4
    }
 8006362:	bf00      	nop
 8006364:	370c      	adds	r7, #12
 8006366:	46bd      	mov	sp, r7
 8006368:	bd90      	pop	{r4, r7, pc}

0800636a <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE>:
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 800636a:	b5b0      	push	{r4, r5, r7, lr}
 800636c:	b084      	sub	sp, #16
 800636e:	af00      	add	r7, sp, #0
 8006370:	60f8      	str	r0, [r7, #12]
 8006372:	60b9      	str	r1, [r7, #8]
 8006374:	4613      	mov	r3, r2
 8006376:	71fb      	strb	r3, [r7, #7]
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8006380:	681c      	ldr	r4, [r3, #0]
 8006382:	79fb      	ldrb	r3, [r7, #7]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d101      	bne.n	800638c <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE+0x22>
 8006388:	2501      	movs	r5, #1
 800638a:	e000      	b.n	800638e <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE+0x24>
 800638c:	2500      	movs	r5, #0
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68b9      	ldr	r1, [r7, #8]
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	4798      	blx	r3
 800639e:	4603      	mov	r3, r0
 80063a0:	461a      	mov	r2, r3
 80063a2:	4629      	mov	r1, r5
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	47a0      	blx	r4
    }
 80063a8:	bf00      	nop
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bdb0      	pop	{r4, r5, r7, pc}

080063b0 <_ZN5L6470I8shield_2E7go_homeEv>:
    virtual void go_home(void)
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
        L6470_GoHome();
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	4798      	blx	r3
    }
 80063c6:	bf00      	nop
 80063c8:	3708      	adds	r7, #8
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <_ZN5L6470I8shield_2E7go_markEv>:
    virtual void go_mark(void)
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b082      	sub	sp, #8
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
        L6470_GoMark();
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	4798      	blx	r3
    }
 80063e4:	bf00      	nop
 80063e6:	3708      	adds	r7, #8
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 80063ec:	b5b0      	push	{r4, r5, r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	607b      	str	r3, [r7, #4]
 80063f6:	460b      	mov	r3, r1
 80063f8:	72fb      	strb	r3, [r7, #11]
 80063fa:	4613      	mov	r3, r2
 80063fc:	72bb      	strb	r3, [r7, #10]
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006406:	681c      	ldr	r4, [r3, #0]
 8006408:	7abb      	ldrb	r3, [r7, #10]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d101      	bne.n	8006412 <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 800640e:	2501      	movs	r5, #1
 8006410:	e000      	b.n	8006414 <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8006412:	2500      	movs	r5, #0
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	ee07 2a90 	vmov	s15, r2
 8006424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006428:	eeb0 0a67 	vmov.f32	s0, s15
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	4798      	blx	r3
 8006430:	4603      	mov	r3, r0
 8006432:	7af9      	ldrb	r1, [r7, #11]
 8006434:	462a      	mov	r2, r5
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	47a0      	blx	r4
    }
 800643a:	bf00      	nop
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bdb0      	pop	{r4, r5, r7, pc}

08006442 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE>:
    virtual void run(StepperMotor::direction_t direction)
 8006442:	b5b0      	push	{r4, r5, r7, lr}
 8006444:	b082      	sub	sp, #8
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
 800644a:	460b      	mov	r3, r1
 800644c:	70fb      	strb	r3, [r7, #3]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8006456:	681c      	ldr	r4, [r3, #0]
 8006458:	78fb      	ldrb	r3, [r7, #3]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d101      	bne.n	8006462 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE+0x20>
 800645e:	2501      	movs	r5, #1
 8006460:	e000      	b.n	8006464 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE+0x22>
 8006462:	2500      	movs	r5, #0
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2106      	movs	r1, #6
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	4798      	blx	r3
 8006474:	4603      	mov	r3, r0
 8006476:	461a      	mov	r2, r3
 8006478:	4629      	mov	r1, r5
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	47a0      	blx	r4
    }
 800647e:	bf00      	nop
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bdb0      	pop	{r4, r5, r7, pc}

08006486 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj>:
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 8006486:	b5b0      	push	{r4, r5, r7, lr}
 8006488:	b084      	sub	sp, #16
 800648a:	af00      	add	r7, sp, #0
 800648c:	60f8      	str	r0, [r7, #12]
 800648e:	460b      	mov	r3, r1
 8006490:	607a      	str	r2, [r7, #4]
 8006492:	72fb      	strb	r3, [r7, #11]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 800649c:	681c      	ldr	r4, [r3, #0]
 800649e:	7afb      	ldrb	r3, [r7, #11]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d101      	bne.n	80064a8 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj+0x22>
 80064a4:	2501      	movs	r5, #1
 80064a6:	e000      	b.n	80064aa <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj+0x24>
 80064a8:	2500      	movs	r5, #0
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	ee07 2a90 	vmov	s15, r2
 80064ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064be:	eeb0 0a67 	vmov.f32	s0, s15
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	4798      	blx	r3
 80064c6:	4603      	mov	r3, r0
 80064c8:	461a      	mov	r2, r3
 80064ca:	4629      	mov	r1, r5
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	47a0      	blx	r4
    }
 80064d0:	bf00      	nop
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bdb0      	pop	{r4, r5, r7, pc}

080064d8 <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj>:
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	460b      	mov	r3, r1
 80064e2:	607a      	str	r2, [r7, #4]
 80064e4:	72fb      	strb	r3, [r7, #11]
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	7afa      	ldrb	r2, [r7, #11]
 80064f2:	2a01      	cmp	r2, #1
 80064f4:	d101      	bne.n	80064fa <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj+0x22>
 80064f6:	2101      	movs	r1, #1
 80064f8:	e000      	b.n	80064fc <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj+0x24>
 80064fa:	2100      	movs	r1, #0
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	4798      	blx	r3
    }
 8006502:	bf00      	nop
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <_ZN5L6470I8shield_2E9soft_stopEv>:
    virtual void soft_stop(void)
 800650a:	b580      	push	{r7, lr}
 800650c:	b082      	sub	sp, #8
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
        L6470_SoftStop();
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	4798      	blx	r3
    }
 8006520:	bf00      	nop
 8006522:	3708      	adds	r7, #8
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <_ZN5L6470I8shield_2E9hard_stopEv>:
    virtual void hard_stop(void)
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
        L6470_HardStop();
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	4798      	blx	r3
    }
 800653e:	bf00      	nop
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <_ZN5L6470I8shield_2E8soft_hizEv>:
    virtual void soft_hiz(void)
 8006546:	b580      	push	{r7, lr}
 8006548:	b082      	sub	sp, #8
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
        L6470_SoftHiZ();
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	4798      	blx	r3
    }
 800655c:	bf00      	nop
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <_ZN5L6470I8shield_2E8hard_hizEv>:
    virtual void hard_hiz(void)
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
        L6470_HardHiZ();
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f503 73ee 	add.w	r3, r3, #476	@ 0x1dc
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	4798      	blx	r3
    }
 800657a:	bf00      	nop
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <_ZN5L6470I8shield_2E17wait_while_activeEv>:
    virtual void wait_while_active(void)
 8006582:	b580      	push	{r7, lr}
 8006584:	b082      	sub	sp, #8
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 800658a:	bf00      	nop
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2101      	movs	r1, #1
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	4798      	blx	r3
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	bf0c      	ite	eq
 80065a2:	2301      	moveq	r3, #1
 80065a4:	2300      	movne	r3, #0
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1ef      	bne.n	800658c <_ZN5L6470I8shield_2E17wait_while_activeEv+0xa>
    }
 80065ac:	bf00      	nop
 80065ae:	bf00      	nop
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE>:
    virtual void step_clock(StepperMotor::direction_t direction)
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b082      	sub	sp, #8
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
 80065be:	460b      	mov	r3, r1
 80065c0:	70fb      	strb	r3, [r7, #3]
        soft_hiz();
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	3380      	adds	r3, #128	@ 0x80
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	78fa      	ldrb	r2, [r7, #3]
 80065da:	2a01      	cmp	r2, #1
 80065dc:	d101      	bne.n	80065e2 <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE+0x2c>
 80065de:	2201      	movs	r2, #1
 80065e0:	e000      	b.n	80065e4 <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE+0x2e>
 80065e2:	2200      	movs	r2, #0
 80065e4:	4611      	mov	r1, r2
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	4798      	blx	r3
    }
 80065ea:	bf00      	nop
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b082      	sub	sp, #8
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
 80065fa:	460b      	mov	r3, r1
 80065fc:	70fb      	strb	r3, [r7, #3]
 80065fe:	4613      	mov	r3, r2
 8006600:	70bb      	strb	r3, [r7, #2]
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	78ba      	ldrb	r2, [r7, #2]
 800660e:	2a01      	cmp	r2, #1
 8006610:	d101      	bne.n	8006616 <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8006612:	2201      	movs	r2, #1
 8006614:	e000      	b.n	8006618 <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8006616:	2200      	movs	r2, #0
 8006618:	78f9      	ldrb	r1, [r7, #3]
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	4798      	blx	r3
    }
 800661e:	bf00      	nop
 8006620:	3708      	adds	r7, #8
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <_ZN5L6470I8shield_2E12reset_deviceEv>:
    virtual void reset_device(void)
 8006626:	b580      	push	{r7, lr}
 8006628:	b082      	sub	sp, #8
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
        L6470_ResetDevice();
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	4798      	blx	r3
    }
 800663c:	bf00      	nop
 800663e:	3708      	adds	r7, #8
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <_ZN5L6470I8shield_2E18prepare_get_statusEv>:
    virtual void prepare_get_status(void)
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetStatus();
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006662:	bf00      	nop
 8006664:	3708      	adds	r7, #8
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <_ZN5L6470I8shield_2E21prepare_get_parameterEj>:
    virtual void prepare_get_parameter(unsigned int parameter)
 800666a:	b580      	push	{r7, lr}
 800666c:	b082      	sub	sp, #8
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	6039      	str	r1, [r7, #0]
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	b2d2      	uxtb	r2, r2
 8006682:	4611      	mov	r1, r2
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006690:	bf00      	nop
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <_ZN5L6470I8shield_2E20prepare_get_positionEv>:
    virtual void prepare_get_position(void)
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2100      	movs	r1, #0
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80066b8:	bf00      	nop
 80066ba:	3708      	adds	r7, #8
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <_ZN5L6470I8shield_2E16prepare_get_markEv>:
    virtual void prepare_get_mark(void)
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2102      	movs	r1, #2
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80066e0:	bf00      	nop
 80066e2:	3708      	adds	r7, #8
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <_ZN5L6470I8shield_2E17prepare_get_speedEv>:
    virtual void prepare_get_speed(void)
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2103      	movs	r1, #3
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2203      	movs	r2, #3
 8006704:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006708:	bf00      	nop
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <_ZN5L6470I8shield_2E21prepare_get_max_speedEv>:
    virtual void prepare_get_max_speed(void)
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2106      	movs	r1, #6
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2204      	movs	r2, #4
 800672c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006730:	bf00      	nop
 8006732:	3708      	adds	r7, #8
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <_ZN5L6470I8shield_2E21prepare_get_min_speedEv>:
    virtual void prepare_get_min_speed(void)
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2107      	movs	r1, #7
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2205      	movs	r2, #5
 8006754:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006758:	bf00      	nop
 800675a:	3708      	adds	r7, #8
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <_ZN5L6470I8shield_2E24prepare_get_accelerationEv>:
    virtual void prepare_get_acceleration(void)
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2104      	movs	r1, #4
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2206      	movs	r2, #6
 800677c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006780:	bf00      	nop
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <_ZN5L6470I8shield_2E24prepare_get_decelerationEv>:
    virtual void prepare_get_deceleration(void)
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2105      	movs	r1, #5
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2207      	movs	r2, #7
 80067a4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80067a8:	bf00      	nop
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <_ZN5L6470I8shield_2E21prepare_get_directionEv>:
    virtual void prepare_get_direction(void)
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
        if (!L6470_DaisyChain_HalfPrepared) {
 80067b8:	4b0b      	ldr	r3, [pc, #44]	@ (80067e8 <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x38>)
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10a      	bne.n	80067d6 <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x26>
            L6470_DaisyChain_HalfPrepared = ONE_F;
 80067c0:	4b09      	ldr	r3, [pc, #36]	@ (80067e8 <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x38>)
 80067c2:	2201      	movs	r2, #1
 80067c4:	701a      	strb	r2, [r3, #0]
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4906      	ldr	r1, [pc, #24]	@ (80067ec <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x3c>)
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	4798      	blx	r3
        prepared_action = PREPARED_GET_DIRECTION;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2208      	movs	r2, #8
 80067da:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80067de:	bf00      	nop
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	20000241 	.word	0x20000241
 80067ec:	20000244 	.word	0x20000244

080067f0 <_ZN5L6470I8shield_2E21prepare_set_parameterEjj>:
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	b2d1      	uxtb	r1, r2
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006818:	bf00      	nop
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <_ZN5L6470I8shield_2E16prepare_set_homeEv>:
    virtual void prepare_set_home(void)
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetPos();
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800683e:	bf00      	nop
 8006840:	3708      	adds	r7, #8
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <_ZN5L6470I8shield_2E16prepare_set_markEv>:
    virtual void prepare_set_mark(void)
 8006846:	b580      	push	{r7, lr}
 8006848:	b082      	sub	sp, #8
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2200      	movs	r2, #0
 800685a:	2102      	movs	r1, #2
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2209      	movs	r2, #9
 8006864:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006868:	bf00      	nop
 800686a:	3708      	adds	r7, #8
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <_ZN5L6470I8shield_2E16prepare_set_markEi>:
    virtual void prepare_set_mark(signed int position)
 8006870:	b590      	push	{r4, r7, lr}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006882:	681c      	ldr	r4, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6839      	ldr	r1, [r7, #0]
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	4798      	blx	r3
 8006894:	4603      	mov	r3, r0
 8006896:	461a      	mov	r2, r3
 8006898:	2102      	movs	r1, #2
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80068a6:	bf00      	nop
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd90      	pop	{r4, r7, pc}

080068ae <_ZN5L6470I8shield_2E17prepare_set_speedEj>:
    virtual void prepare_set_speed(unsigned int speed)
 80068ae:	b590      	push	{r4, r7, lr}
 80068b0:	b083      	sub	sp, #12
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
 80068b6:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80068c0:	681c      	ldr	r4, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	683a      	ldr	r2, [r7, #0]
 80068ce:	ee07 2a90 	vmov	s15, r2
 80068d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068d6:	eeb0 0a67 	vmov.f32	s0, s15
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	4798      	blx	r3
 80068de:	4603      	mov	r3, r0
 80068e0:	461a      	mov	r2, r3
 80068e2:	2103      	movs	r1, #3
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd90      	pop	{r4, r7, pc}

080068f8 <_ZN5L6470I8shield_2E21prepare_set_max_speedEj>:
    virtual void prepare_set_max_speed(unsigned int speed)
 80068f8:	b590      	push	{r4, r7, lr}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800690a:	681c      	ldr	r4, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	683a      	ldr	r2, [r7, #0]
 8006918:	ee07 2a90 	vmov	s15, r2
 800691c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006920:	eeb0 0a67 	vmov.f32	s0, s15
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	4798      	blx	r3
 8006928:	4603      	mov	r3, r0
 800692a:	461a      	mov	r2, r3
 800692c:	2106      	movs	r1, #6
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800693a:	bf00      	nop
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	bd90      	pop	{r4, r7, pc}

08006942 <_ZN5L6470I8shield_2E21prepare_set_min_speedEj>:
    virtual void prepare_set_min_speed(unsigned int speed)
 8006942:	b590      	push	{r4, r7, lr}
 8006944:	b083      	sub	sp, #12
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
 800694a:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006954:	681c      	ldr	r4, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	ee07 2a90 	vmov	s15, r2
 8006966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800696a:	eeb0 0a67 	vmov.f32	s0, s15
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	4798      	blx	r3
 8006972:	4603      	mov	r3, r0
 8006974:	461a      	mov	r2, r3
 8006976:	2107      	movs	r1, #7
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	bd90      	pop	{r4, r7, pc}

0800698c <_ZN5L6470I8shield_2E24prepare_set_accelerationEj>:
    virtual void prepare_set_acceleration(unsigned int acceleration)
 800698c:	b590      	push	{r4, r7, lr}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800699e:	681c      	ldr	r4, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	ee07 2a90 	vmov	s15, r2
 80069b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069b4:	eeb0 0a67 	vmov.f32	s0, s15
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	4798      	blx	r3
 80069bc:	4603      	mov	r3, r0
 80069be:	461a      	mov	r2, r3
 80069c0:	2104      	movs	r1, #4
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80069ce:	bf00      	nop
 80069d0:	370c      	adds	r7, #12
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd90      	pop	{r4, r7, pc}

080069d6 <_ZN5L6470I8shield_2E24prepare_set_decelerationEj>:
    virtual void prepare_set_deceleration(unsigned int deceleration)
 80069d6:	b590      	push	{r4, r7, lr}
 80069d8:	b083      	sub	sp, #12
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
 80069de:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80069e8:	681c      	ldr	r4, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	683a      	ldr	r2, [r7, #0]
 80069f6:	ee07 2a90 	vmov	s15, r2
 80069fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069fe:	eeb0 0a67 	vmov.f32	s0, s15
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	4798      	blx	r3
 8006a06:	4603      	mov	r3, r0
 8006a08:	461a      	mov	r2, r3
 8006a0a:	2105      	movs	r1, #5
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd90      	pop	{r4, r7, pc}

08006a20 <_ZN5L6470I8shield_2E13prepare_go_toEi>:
    virtual void prepare_go_to(signed int position)
 8006a20:	b590      	push	{r4, r7, lr}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8006a32:	681c      	ldr	r4, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	6839      	ldr	r1, [r7, #0]
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	4798      	blx	r3
 8006a44:	4603      	mov	r3, r0
 8006a46:	4619      	mov	r1, r3
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd90      	pop	{r4, r7, pc}

08006a5c <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE>:
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 8006a5c:	b5b0      	push	{r4, r5, r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	4613      	mov	r3, r2
 8006a68:	71fb      	strb	r3, [r7, #7]
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8006a72:	681c      	ldr	r4, [r3, #0]
 8006a74:	79fb      	ldrb	r3, [r7, #7]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d101      	bne.n	8006a7e <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 8006a7a:	2501      	movs	r5, #1
 8006a7c:	e000      	b.n	8006a80 <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 8006a7e:	2500      	movs	r5, #0
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68b9      	ldr	r1, [r7, #8]
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	4798      	blx	r3
 8006a90:	4603      	mov	r3, r0
 8006a92:	461a      	mov	r2, r3
 8006a94:	4629      	mov	r1, r5
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006aa2:	bf00      	nop
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bdb0      	pop	{r4, r5, r7, pc}

08006aaa <_ZN5L6470I8shield_2E15prepare_go_homeEv>:
    virtual void prepare_go_home(void)
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b082      	sub	sp, #8
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoHome();
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006ac8:	bf00      	nop
 8006aca:	3708      	adds	r7, #8
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <_ZN5L6470I8shield_2E15prepare_go_markEv>:
    virtual void prepare_go_mark(void)
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoMark();
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006aee:	bf00      	nop
 8006af0:	3708      	adds	r7, #8
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 8006af6:	b5b0      	push	{r4, r5, r7, lr}
 8006af8:	b084      	sub	sp, #16
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	60f8      	str	r0, [r7, #12]
 8006afe:	607b      	str	r3, [r7, #4]
 8006b00:	460b      	mov	r3, r1
 8006b02:	72fb      	strb	r3, [r7, #11]
 8006b04:	4613      	mov	r3, r2
 8006b06:	72bb      	strb	r3, [r7, #10]
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006b10:	681c      	ldr	r4, [r3, #0]
 8006b12:	7abb      	ldrb	r3, [r7, #10]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d101      	bne.n	8006b1c <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8006b18:	2501      	movs	r5, #1
 8006b1a:	e000      	b.n	8006b1e <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8006b1c:	2500      	movs	r5, #0
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	ee07 2a90 	vmov	s15, r2
 8006b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b32:	eeb0 0a67 	vmov.f32	s0, s15
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	4798      	blx	r3
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	7af9      	ldrb	r1, [r7, #11]
 8006b3e:	462a      	mov	r2, r5
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006b4c:	bf00      	nop
 8006b4e:	3710      	adds	r7, #16
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bdb0      	pop	{r4, r5, r7, pc}

08006b54 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE>:
    virtual void prepare_run(StepperMotor::direction_t direction)
 8006b54:	b5b0      	push	{r4, r5, r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006b68:	681c      	ldr	r4, [r3, #0]
 8006b6a:	78fb      	ldrb	r3, [r7, #3]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d101      	bne.n	8006b74 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE+0x20>
 8006b70:	2501      	movs	r5, #1
 8006b72:	e000      	b.n	8006b76 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE+0x22>
 8006b74:	2500      	movs	r5, #0
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2106      	movs	r1, #6
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	4798      	blx	r3
 8006b86:	4603      	mov	r3, r0
 8006b88:	461a      	mov	r2, r3
 8006b8a:	4629      	mov	r1, r5
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006b98:	bf00      	nop
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bdb0      	pop	{r4, r5, r7, pc}

08006ba0 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj>:
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 8006ba0:	b5b0      	push	{r4, r5, r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	607a      	str	r2, [r7, #4]
 8006bac:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006bb6:	681c      	ldr	r4, [r3, #0]
 8006bb8:	7afb      	ldrb	r3, [r7, #11]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d101      	bne.n	8006bc2 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 8006bbe:	2501      	movs	r5, #1
 8006bc0:	e000      	b.n	8006bc4 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 8006bc2:	2500      	movs	r5, #0
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	ee07 2a90 	vmov	s15, r2
 8006bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	4798      	blx	r3
 8006be0:	4603      	mov	r3, r0
 8006be2:	461a      	mov	r2, r3
 8006be4:	4629      	mov	r1, r5
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006bf2:	bf00      	nop
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bdb0      	pop	{r4, r5, r7, pc}

08006bfa <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj>:
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b084      	sub	sp, #16
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	60f8      	str	r0, [r7, #12]
 8006c02:	460b      	mov	r3, r1
 8006c04:	607a      	str	r2, [r7, #4]
 8006c06:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	7afa      	ldrb	r2, [r7, #11]
 8006c14:	2a01      	cmp	r2, #1
 8006c16:	d101      	bne.n	8006c1c <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 8006c18:	2101      	movs	r1, #1
 8006c1a:	e000      	b.n	8006c1e <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006c2c:	bf00      	nop
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <_ZN5L6470I8shield_2E17prepare_soft_stopEv>:
    virtual void prepare_soft_stop(void)
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftStop();
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006c52:	bf00      	nop
 8006c54:	3708      	adds	r7, #8
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <_ZN5L6470I8shield_2E17prepare_hard_stopEv>:
    virtual void prepare_hard_stop(void)
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b082      	sub	sp, #8
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardStop();
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006c78:	bf00      	nop
 8006c7a:	3708      	adds	r7, #8
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <_ZN5L6470I8shield_2E16prepare_soft_hizEv>:
    virtual void prepare_soft_hiz(void)
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftHiZ();
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006c9e:	bf00      	nop
 8006ca0:	3708      	adds	r7, #8
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <_ZN5L6470I8shield_2E16prepare_hard_hizEv>:
    virtual void prepare_hard_hiz(void)
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b082      	sub	sp, #8
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardHiZ();
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006cc4:	bf00      	nop
 8006cc6:	3708      	adds	r7, #8
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE>:
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	78fa      	ldrb	r2, [r7, #3]
 8006ce4:	2a01      	cmp	r2, #1
 8006ce6:	d101      	bne.n	8006cec <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 8006ce8:	2201      	movs	r2, #1
 8006cea:	e000      	b.n	8006cee <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 8006cec:	2200      	movs	r2, #0
 8006cee:	4611      	mov	r1, r2
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006cfc:	bf00      	nop
 8006cfe:	3708      	adds	r7, #8
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	70fb      	strb	r3, [r7, #3]
 8006d10:	4613      	mov	r3, r2
 8006d12:	70bb      	strb	r3, [r7, #2]
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	78ba      	ldrb	r2, [r7, #2]
 8006d20:	2a01      	cmp	r2, #1
 8006d22:	d101      	bne.n	8006d28 <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8006d24:	2201      	movs	r2, #1
 8006d26:	e000      	b.n	8006d2a <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8006d28:	2200      	movs	r2, #0
 8006d2a:	78f9      	ldrb	r1, [r7, #3]
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006d38:	bf00      	nop
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <_ZN5L6470I8shield_2E20prepare_reset_deviceEv>:
    virtual void prepare_reset_device(void)
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetDevice();
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006d5e:	bf00      	nop
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <_ZN5L6470I8shield_2E24perform_prepared_actionsEv>:
    uint8_t* perform_prepared_actions(void)
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b082      	sub	sp, #8
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
        return L6470_PerformPreparedApplicationCommand();
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	4798      	blx	r3
 8006d7c:	4603      	mov	r3, r0
    }
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3708      	adds	r7, #8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <_ZN5L6470I8shield_2E19get_prepared_actionEv>:
    prepared_action_t get_prepared_action(void)
 8006d86:	b480      	push	{r7}
 8006d88:	b083      	sub	sp, #12
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
        return prepared_action;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    }
 8006d94:	4618      	mov	r0, r3
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <_ZN5L6470I8shield_2E10get_resultEPh>:
    int32_t get_result(uint8_t *raw_data)
 8006da0:	b5b0      	push	{r4, r5, r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
        switch (prepared_action) {
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8006db0:	3b01      	subs	r3, #1
 8006db2:	2b07      	cmp	r3, #7
 8006db4:	f200 80fe 	bhi.w	8006fb4 <_ZN5L6470I8shield_2E10get_resultEPh+0x214>
 8006db8:	a201      	add	r2, pc, #4	@ (adr r2, 8006dc0 <_ZN5L6470I8shield_2E10get_resultEPh+0x20>)
 8006dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dbe:	bf00      	nop
 8006dc0:	08006de1 	.word	0x08006de1
 8006dc4:	08006e0d 	.word	0x08006e0d
 8006dc8:	08006e3b 	.word	0x08006e3b
 8006dcc:	08006e7f 	.word	0x08006e7f
 8006dd0:	08006ec5 	.word	0x08006ec5
 8006dd4:	08006f0b 	.word	0x08006f0b
 8006dd8:	08006f51 	.word	0x08006f51
 8006ddc:	08006f97 	.word	0x08006f97
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8006de8:	681c      	ldr	r4, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	6a12      	ldr	r2, [r2, #32]
 8006df8:	7b92      	ldrb	r2, [r2, #14]
 8006dfa:	6839      	ldr	r1, [r7, #0]
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	4798      	blx	r3
 8006e00:	4603      	mov	r3, r0
 8006e02:	4619      	mov	r1, r3
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	47a0      	blx	r4
 8006e08:	4603      	mov	r3, r0
 8006e0a:	e0d4      	b.n	8006fb6 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8006e14:	681c      	ldr	r4, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	6a12      	ldr	r2, [r2, #32]
 8006e24:	3228      	adds	r2, #40	@ 0x28
 8006e26:	7b92      	ldrb	r2, [r2, #14]
 8006e28:	6839      	ldr	r1, [r7, #0]
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	4798      	blx	r3
 8006e2e:	4603      	mov	r3, r0
 8006e30:	4619      	mov	r1, r3
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	47a0      	blx	r4
 8006e36:	4603      	mov	r3, r0
 8006e38:	e0bd      	b.n	8006fb6 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006e42:	681c      	ldr	r4, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8006e4c:	681d      	ldr	r5, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	6a12      	ldr	r2, [r2, #32]
 8006e5c:	323c      	adds	r2, #60	@ 0x3c
 8006e5e:	7b92      	ldrb	r2, [r2, #14]
 8006e60:	6839      	ldr	r1, [r7, #0]
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	4798      	blx	r3
 8006e66:	4603      	mov	r3, r0
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	47a8      	blx	r5
 8006e6e:	eef0 7a40 	vmov.f32	s15, s0
 8006e72:	eeb0 0a67 	vmov.f32	s0, s15
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	47a0      	blx	r4
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	e09b      	b.n	8006fb6 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006e86:	681c      	ldr	r4, [r3, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006e90:	681d      	ldr	r5, [r3, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	6a12      	ldr	r2, [r2, #32]
 8006ea0:	3278      	adds	r2, #120	@ 0x78
 8006ea2:	7b92      	ldrb	r2, [r2, #14]
 8006ea4:	6839      	ldr	r1, [r7, #0]
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	4798      	blx	r3
 8006eaa:	4603      	mov	r3, r0
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	4619      	mov	r1, r3
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	47a8      	blx	r5
 8006eb4:	eef0 7a40 	vmov.f32	s15, s0
 8006eb8:	eeb0 0a67 	vmov.f32	s0, s15
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	47a0      	blx	r4
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	e078      	b.n	8006fb6 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006ecc:	681c      	ldr	r4, [r3, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8006ed6:	681d      	ldr	r5, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	6a12      	ldr	r2, [r2, #32]
 8006ee6:	328c      	adds	r2, #140	@ 0x8c
 8006ee8:	7b92      	ldrb	r2, [r2, #14]
 8006eea:	6839      	ldr	r1, [r7, #0]
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	4798      	blx	r3
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	47a8      	blx	r5
 8006efa:	eef0 7a40 	vmov.f32	s15, s0
 8006efe:	eeb0 0a67 	vmov.f32	s0, s15
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	47a0      	blx	r4
 8006f06:	4603      	mov	r3, r0
 8006f08:	e055      	b.n	8006fb6 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006f12:	681c      	ldr	r4, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8006f1c:	681d      	ldr	r5, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	6a12      	ldr	r2, [r2, #32]
 8006f2c:	3250      	adds	r2, #80	@ 0x50
 8006f2e:	7b92      	ldrb	r2, [r2, #14]
 8006f30:	6839      	ldr	r1, [r7, #0]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	4798      	blx	r3
 8006f36:	4603      	mov	r3, r0
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	47a8      	blx	r5
 8006f40:	eef0 7a40 	vmov.f32	s15, s0
 8006f44:	eeb0 0a67 	vmov.f32	s0, s15
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	47a0      	blx	r4
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	e032      	b.n	8006fb6 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006f58:	681c      	ldr	r4, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006f62:	681d      	ldr	r5, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	6a12      	ldr	r2, [r2, #32]
 8006f72:	3264      	adds	r2, #100	@ 0x64
 8006f74:	7b92      	ldrb	r2, [r2, #14]
 8006f76:	6839      	ldr	r1, [r7, #0]
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	4798      	blx	r3
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	4619      	mov	r1, r3
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	47a8      	blx	r5
 8006f86:	eef0 7a40 	vmov.f32	s15, s0
 8006f8a:	eeb0 0a67 	vmov.f32	s0, s15
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	47a0      	blx	r4
 8006f92:	4603      	mov	r3, r0
 8006f94:	e00f      	b.n	8006fb6 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2104      	movs	r1, #4
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	4798      	blx	r3
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d101      	bne.n	8006fb0 <_ZN5L6470I8shield_2E10get_resultEPh+0x210>
 8006fac:	2301      	movs	r3, #1
 8006fae:	e002      	b.n	8006fb6 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	e000      	b.n	8006fb6 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return 0;
 8006fb4:	2300      	movs	r3, #0
    }
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3708      	adds	r7, #8
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bdb0      	pop	{r4, r5, r7, pc}
 8006fbe:	bf00      	nop

08006fc0 <_ZN5L6470I8shield_2E13L6470_DISABLEEv>:
    void L6470_DISABLE(void)
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6898      	ldr	r0, [r3, #8]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	899b      	ldrh	r3, [r3, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	f006 faee 	bl	800d5b4 <HAL_GPIO_WritePin>
    }
 8006fd8:	bf00      	nop
 8006fda:	3708      	adds	r7, #8
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm>:
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  if (AbsPos > L6470_MAX_POSITION)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ff0:	d303      	bcc.n	8006ffa <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	f5a3 0380 	sub.w	r3, r3, #4194304	@ 0x400000
 8006ff8:	e000      	b.n	8006ffc <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm+0x1c>
    return AbsPos;
 8006ffa:	683b      	ldr	r3, [r7, #0]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl>:
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	db05      	blt.n	8007024 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x1c>
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800701e:	da01      	bge.n	8007024 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	e00c      	b.n	800703e <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x36>
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	f513 1f00 	cmn.w	r3, #2097152	@ 0x200000
 800702a:	db06      	blt.n	800703a <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x32>
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	da03      	bge.n	800703a <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	f503 0380 	add.w	r3, r3, #4194304	@ 0x400000
 8007038:	e001      	b.n	800703e <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x36>
      return (L6470_POSITION_RANGE + 1);        // OVF
 800703a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
}
 800703e:	4618      	mov	r0, r3
 8007040:	370c      	adds	r7, #12
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
	...

0800704c <_ZN5L6470I8shield_2E20L6470_Speed_2_Step_sEm>:
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  return (Speed * ((float)14.9012e-3));
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	ee07 3a90 	vmov	s15, r3
 800705c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007060:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8007078 <_ZN5L6470I8shield_2E20L6470_Speed_2_Step_sEm+0x2c>
 8007064:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8007068:	eeb0 0a67 	vmov.f32	s0, s15
 800706c:	370c      	adds	r7, #12
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	3c74242a 	.word	0x3c74242a

0800707c <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf>:
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 8007088:	edd7 7a00 	vldr	s15, [r7]
 800708c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80070c0 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x44>
 8007090:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007098:	d80a      	bhi.n	80070b0 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 800709a:	ed97 7a00 	vldr	s14, [r7]
 800709e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80070c4 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x48>
 80070a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80070a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070aa:	ee17 3a90 	vmov	r3, s15
 80070ae:	e000      	b.n	80070b2 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x36>
    return 0;   // Warning
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	370c      	adds	r7, #12
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	4674241b 	.word	0x4674241b
 80070c4:	3c74242a 	.word	0x3c74242a

080070c8 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et>:
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	460b      	mov	r3, r1
 80070d2:	807b      	strh	r3, [r7, #2]
  if (Acc <= L6470_MAX_ACC)
 80070d4:	887b      	ldrh	r3, [r7, #2]
 80070d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070da:	d209      	bcs.n	80070f0 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 80070dc:	887b      	ldrh	r3, [r7, #2]
 80070de:	ee07 3a90 	vmov	s15, r3
 80070e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070e6:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8007104 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x3c>
 80070ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80070ee:	e001      	b.n	80070f4 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x2c>
    return 0;   // Warning
 80070f0:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007108 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x40>
}
 80070f4:	eeb0 0a67 	vmov.f32	s0, s15
 80070f8:	370c      	adds	r7, #12
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	4168d4fe 	.word	0x4168d4fe
 8007108:	00000000 	.word	0x00000000

0800710c <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 8007118:	edd7 7a00 	vldr	s15, [r7]
 800711c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8007150 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x44>
 8007120:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007128:	d80b      	bhi.n	8007142 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 800712a:	ed97 7a00 	vldr	s14, [r7]
 800712e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007154 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x48>
 8007132:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800713a:	ee17 3a90 	vmov	r3, s15
 800713e:	b29b      	uxth	r3, r3
 8007140:	e000      	b.n	8007144 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x38>
    return 0;   // Warning
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr
 8007150:	4768c671 	.word	0x4768c671
 8007154:	4168d4fe 	.word	0x4168d4fe

08007158 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et>:
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	460b      	mov	r3, r1
 8007162:	807b      	strh	r3, [r7, #2]
  if (Dec <= L6470_MAX_DEC)
 8007164:	887b      	ldrh	r3, [r7, #2]
 8007166:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800716a:	d209      	bcs.n	8007180 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 800716c:	887b      	ldrh	r3, [r7, #2]
 800716e:	ee07 3a90 	vmov	s15, r3
 8007172:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007176:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8007194 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x3c>
 800717a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800717e:	e001      	b.n	8007184 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x2c>
    return 0;   // Warning
 8007180:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007198 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x40>
}
 8007184:	eeb0 0a67 	vmov.f32	s0, s15
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	4168d4fe 	.word	0x4168d4fe
 8007198:	00000000 	.word	0x00000000

0800719c <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 80071a8:	edd7 7a00 	vldr	s15, [r7]
 80071ac:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80071e0 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x44>
 80071b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071b8:	d80b      	bhi.n	80071d2 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 80071ba:	ed97 7a00 	vldr	s14, [r7]
 80071be:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80071e4 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x48>
 80071c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80071c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071ca:	ee17 3a90 	vmov	r3, s15
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	e000      	b.n	80071d4 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x38>
    return 0;   // Warning
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr
 80071e0:	4768c671 	.word	0x4768c671
 80071e4:	4168d4fe 	.word	0x4168d4fe

080071e8 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	460b      	mov	r3, r1
 80071f2:	807b      	strh	r3, [r7, #2]
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 80071f4:	887b      	ldrh	r3, [r7, #2]
 80071f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071fa:	d209      	bcs.n	8007210 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 80071fc:	887b      	ldrh	r3, [r7, #2]
 80071fe:	ee07 3a90 	vmov	s15, r3
 8007202:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007206:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8007224 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 800720a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800720e:	e001      	b.n	8007214 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 8007210:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007228 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 8007214:	eeb0 0a67 	vmov.f32	s0, s15
 8007218:	370c      	adds	r7, #12
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	4174240b 	.word	0x4174240b
 8007228:	00000000 	.word	0x00000000

0800722c <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 8007238:	edd7 7a00 	vldr	s15, [r7]
 800723c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8007270 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x44>
 8007240:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007248:	d80b      	bhi.n	8007262 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 800724a:	ed97 7a00 	vldr	s14, [r7]
 800724e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007274 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x48>
 8007252:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800725a:	ee17 3a90 	vmov	r3, s15
 800725e:	b29b      	uxth	r3, r3
 8007260:	e000      	b.n	8007264 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x38>
    return 0;   // Warning
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr
 8007270:	4673e702 	.word	0x4673e702
 8007274:	4174240b 	.word	0x4174240b

08007278 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	460b      	mov	r3, r1
 8007282:	807b      	strh	r3, [r7, #2]
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 8007284:	887b      	ldrh	r3, [r7, #2]
 8007286:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800728a:	d209      	bcs.n	80072a0 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 800728c:	887b      	ldrh	r3, [r7, #2]
 800728e:	ee07 3a90 	vmov	s15, r3
 8007292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007296:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80072b4 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x3c>
 800729a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800729e:	e001      	b.n	80072a4 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 80072a0:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80072b8 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 80072a4:	eeb0 0a67 	vmov.f32	s0, s15
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	3e742401 	.word	0x3e742401
 80072b8:	00000000 	.word	0x00000000

080072bc <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 80072c8:	edd7 7a00 	vldr	s15, [r7]
 80072cc:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8007300 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x44>
 80072d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072d8:	d80b      	bhi.n	80072f2 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 80072da:	ed97 7a00 	vldr	s14, [r7]
 80072de:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007304 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x48>
 80072e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80072e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072ea:	ee17 3a90 	vmov	r3, s15
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	e000      	b.n	80072f4 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x38>
    return 0;   // Warning
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr
 8007300:	447414bf 	.word	0x447414bf
 8007304:	3e742401 	.word	0x3e742401

08007308 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt>:
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	460b      	mov	r3, r1
 8007312:	807b      	strh	r3, [r7, #2]
  if (FsSpd <= L6470_MAX_FS_SPD)
 8007314:	887b      	ldrh	r3, [r7, #2]
 8007316:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800731a:	d219      	bcs.n	8007350 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 800731c:	887b      	ldrh	r3, [r7, #2]
 800731e:	4618      	mov	r0, r3
 8007320:	f7f9 f930 	bl	8000584 <__aeabi_i2d>
 8007324:	f04f 0200 	mov.w	r2, #0
 8007328:	4b0e      	ldr	r3, [pc, #56]	@ (8007364 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x5c>)
 800732a:	f7f8 ffdf 	bl	80002ec <__adddf3>
 800732e:	4602      	mov	r2, r0
 8007330:	460b      	mov	r3, r1
 8007332:	4610      	mov	r0, r2
 8007334:	4619      	mov	r1, r3
 8007336:	f04f 0200 	mov.w	r2, #0
 800733a:	4b0b      	ldr	r3, [pc, #44]	@ (8007368 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x60>)
 800733c:	f7f9 f98c 	bl	8000658 <__aeabi_dmul>
 8007340:	4602      	mov	r2, r0
 8007342:	460b      	mov	r3, r1
 8007344:	4610      	mov	r0, r2
 8007346:	4619      	mov	r1, r3
 8007348:	f7f9 fc5e 	bl	8000c08 <__aeabi_d2f>
 800734c:	4603      	mov	r3, r0
 800734e:	e001      	b.n	8007354 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x4c>
    return 0;   // Warning
 8007350:	f04f 0300 	mov.w	r3, #0
}
 8007354:	ee07 3a90 	vmov	s15, r3
 8007358:	eeb0 0a67 	vmov.f32	s0, s15
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	3fe00000 	.word	0x3fe00000
 8007368:	402e8000 	.word	0x402e8000

0800736c <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 8007378:	edd7 7a00 	vldr	s15, [r7]
 800737c:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80073b8 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x4c>
 8007380:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007388:	d80f      	bhi.n	80073aa <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 800738a:	ed97 7a00 	vldr	s14, [r7]
 800738e:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80073bc <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x50>
 8007392:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007396:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800739a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800739e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073a2:	ee17 3a90 	vmov	r3, s15
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	e000      	b.n	80073ac <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x40>
    return 0;   // Warning
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr
 80073b8:	4673e180 	.word	0x4673e180
 80073bc:	41740000 	.word	0x41740000

080073c0 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	460b      	mov	r3, r1
 80073ca:	807b      	strh	r3, [r7, #2]
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 80073cc:	887b      	ldrh	r3, [r7, #2]
 80073ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073d2:	d209      	bcs.n	80073e8 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 80073d4:	887b      	ldrh	r3, [r7, #2]
 80073d6:	ee07 3a90 	vmov	s15, r3
 80073da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073de:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80073fc <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x3c>
 80073e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80073e6:	e001      	b.n	80073ec <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 80073e8:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007400 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 80073ec:	eeb0 0a67 	vmov.f32	s0, s15
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	3d7423f4 	.word	0x3d7423f4
 8007400:	00000000 	.word	0x00000000

08007404 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 8007410:	edd7 7a00 	vldr	s15, [r7]
 8007414:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8007448 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x44>
 8007418:	eef4 7ac7 	vcmpe.f32	s15, s14
 800741c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007420:	d80b      	bhi.n	800743a <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 8007422:	ed97 7a00 	vldr	s14, [r7]
 8007426:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800744c <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x48>
 800742a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800742e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007432:	ee17 3a90 	vmov	r3, s15
 8007436:	b29b      	uxth	r3, r3
 8007438:	e000      	b.n	800743c <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x38>
    return 0;   // Warning
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr
 8007448:	44742023 	.word	0x44742023
 800744c:	3d7423f4 	.word	0x3d7423f4

08007450 <_ZN5L6470I8shield_2E20L6470_StSlp_2_s_StepEh>:
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	460b      	mov	r3, r1
 800745a:	70fb      	strb	r3, [r7, #3]
    return (StSlp * ((float)1.5686e-5));
 800745c:	78fb      	ldrb	r3, [r7, #3]
 800745e:	ee07 3a90 	vmov	s15, r3
 8007462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007466:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800747c <_ZN5L6470I8shield_2E20L6470_StSlp_2_s_StepEh+0x2c>
 800746a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800746e:	eeb0 0a67 	vmov.f32	s0, s15
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	3783956e 	.word	0x3783956e

08007480 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 800748c:	edd7 7a02 	vldr	s15, [r7, #8]
 8007490:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80074c8 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x48>
 8007494:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800749c:	d80c      	bhi.n	80074b8 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800749e:	ed97 7a02 	vldr	s14, [r7, #8]
 80074a2:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80074cc <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x4c>
 80074a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80074aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074ae:	edc7 7a01 	vstr	s15, [r7, #4]
 80074b2:	793b      	ldrb	r3, [r7, #4]
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	e000      	b.n	80074ba <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x3a>
    return 0;   // Warning
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3714      	adds	r7, #20
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr
 80074c6:	bf00      	nop
 80074c8:	3b8311d9 	.word	0x3b8311d9
 80074cc:	3783956e 	.word	0x3783956e

080074d0 <_ZN5L6470I8shield_2E23L6470_FnSlpAcc_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	460b      	mov	r3, r1
 80074da:	70fb      	strb	r3, [r7, #3]
    return (FnSlpAcc * ((float)1.5686e-5));
 80074dc:	78fb      	ldrb	r3, [r7, #3]
 80074de:	ee07 3a90 	vmov	s15, r3
 80074e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074e6:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80074fc <_ZN5L6470I8shield_2E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 80074ea:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80074ee:	eeb0 0a67 	vmov.f32	s0, s15
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr
 80074fc:	3783956e 	.word	0x3783956e

08007500 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 800750c:	edd7 7a02 	vldr	s15, [r7, #8]
 8007510:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8007548 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x48>
 8007514:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800751c:	d80c      	bhi.n	8007538 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800751e:	ed97 7a02 	vldr	s14, [r7, #8]
 8007522:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800754c <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 8007526:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800752a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800752e:	edc7 7a01 	vstr	s15, [r7, #4]
 8007532:	793b      	ldrb	r3, [r7, #4]
 8007534:	b2db      	uxtb	r3, r3
 8007536:	e000      	b.n	800753a <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x3a>
    return 0;   // Warning
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	3b8311d9 	.word	0x3b8311d9
 800754c:	3783956e 	.word	0x3783956e

08007550 <_ZN5L6470I8shield_2E23L6470_FnSlpDec_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	460b      	mov	r3, r1
 800755a:	70fb      	strb	r3, [r7, #3]
    return (FnSlpDec * ((float)1.5686e-5));
 800755c:	78fb      	ldrb	r3, [r7, #3]
 800755e:	ee07 3a90 	vmov	s15, r3
 8007562:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007566:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800757c <_ZN5L6470I8shield_2E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 800756a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800756e:	eeb0 0a67 	vmov.f32	s0, s15
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr
 800757c:	3783956e 	.word	0x3783956e

08007580 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 800758c:	edd7 7a02 	vldr	s15, [r7, #8]
 8007590:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80075c8 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x48>
 8007594:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800759c:	d80c      	bhi.n	80075b8 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800759e:	ed97 7a02 	vldr	s14, [r7, #8]
 80075a2:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80075cc <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 80075a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80075aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075ae:	edc7 7a01 	vstr	s15, [r7, #4]
 80075b2:	793b      	ldrb	r3, [r7, #4]
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	e000      	b.n	80075ba <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x3a>
    return 0;   // Warning
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3714      	adds	r7, #20
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	3b8311d9 	.word	0x3b8311d9
 80075cc:	3783956e 	.word	0x3783956e

080075d0 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh>:
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	460b      	mov	r3, r1
 80075da:	70fb      	strb	r3, [r7, #3]
  if (OcdTh <= L6470_MAX_OCD_TH)
 80075dc:	78fb      	ldrb	r3, [r7, #3]
 80075de:	2b0f      	cmp	r3, #15
 80075e0:	d80a      	bhi.n	80075f8 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 80075e2:	78fb      	ldrb	r3, [r7, #3]
 80075e4:	3301      	adds	r3, #1
 80075e6:	ee07 3a90 	vmov	s15, r3
 80075ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075ee:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800760c <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x3c>
 80075f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80075f6:	e001      	b.n	80075fc <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x2c>
    return 0;   // Warning
 80075f8:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007610 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x40>
}
 80075fc:	eeb0 0a67 	vmov.f32	s0, s15
 8007600:	370c      	adds	r7, #12
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	43bb8000 	.word	0x43bb8000
 8007610:	00000000 	.word	0x00000000

08007614 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 8007614:	b480      	push	{r7}
 8007616:	b087      	sub	sp, #28
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 8007620:	edd7 7a02 	vldr	s15, [r7, #8]
 8007624:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80076b0 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x9c>
 8007628:	eef4 7ac7 	vcmpe.f32	s15, s14
 800762c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007630:	d836      	bhi.n	80076a0 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8c>
    result = (mA / ((float)375));
 8007632:	ed97 7a02 	vldr	s14, [r7, #8]
 8007636:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80076b4 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0xa0>
 800763a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800763e:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 8007642:	edd7 7a05 	vldr	s15, [r7, #20]
 8007646:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800764a:	edc7 7a01 	vstr	s15, [r7, #4]
 800764e:	793b      	ldrb	r3, [r7, #4]
 8007650:	b2db      	uxtb	r3, r3
 8007652:	ee07 3a90 	vmov	s15, r3
 8007656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800765a:	ed97 7a05 	vldr	s14, [r7, #20]
 800765e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007662:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 8007666:	edd7 7a04 	vldr	s15, [r7, #16]
 800766a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800766e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007676:	d50a      	bpl.n	800768e <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 8007678:	edd7 7a05 	vldr	s15, [r7, #20]
 800767c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007680:	edc7 7a01 	vstr	s15, [r7, #4]
 8007684:	793b      	ldrb	r3, [r7, #4]
 8007686:	b2db      	uxtb	r3, r3
 8007688:	3b01      	subs	r3, #1
 800768a:	b2db      	uxtb	r3, r3
 800768c:	e009      	b.n	80076a2 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8e>
      return ((uint8_t)result);    
 800768e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007696:	edc7 7a01 	vstr	s15, [r7, #4]
 800769a:	793b      	ldrb	r3, [r7, #4]
 800769c:	b2db      	uxtb	r3, r3
 800769e:	e000      	b.n	80076a2 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8e>
    return 0;   // Warning
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	371c      	adds	r7, #28
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	45bb8000 	.word	0x45bb8000
 80076b4:	43bb8000 	.word	0x43bb8000

080076b8 <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh>:
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	460b      	mov	r3, r1
 80076c2:	70fb      	strb	r3, [r7, #3]
  if (StallTh <= L6470_MAX_STALL_TH)
 80076c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	db0a      	blt.n	80076e2 <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 80076cc:	78fb      	ldrb	r3, [r7, #3]
 80076ce:	3301      	adds	r3, #1
 80076d0:	ee07 3a90 	vmov	s15, r3
 80076d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076d8:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80076f4 <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x3c>
 80076dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80076e0:	e001      	b.n	80076e6 <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x2e>
    return 0;   // Warning
 80076e2:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80076f8 <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x40>
}
 80076e6:	eeb0 0a67 	vmov.f32	s0, s15
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr
 80076f4:	41fa0000 	.word	0x41fa0000
 80076f8:	00000000 	.word	0x00000000

080076fc <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 80076fc:	b480      	push	{r7}
 80076fe:	b087      	sub	sp, #28
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 8007708:	edd7 7a02 	vldr	s15, [r7, #8]
 800770c:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8007798 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x9c>
 8007710:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007718:	d836      	bhi.n	8007788 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8c>
    result = (mA / ((float)31.25));
 800771a:	ed97 7a02 	vldr	s14, [r7, #8]
 800771e:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800779c <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0xa0>
 8007722:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007726:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800772a:	edd7 7a05 	vldr	s15, [r7, #20]
 800772e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007732:	edc7 7a01 	vstr	s15, [r7, #4]
 8007736:	793b      	ldrb	r3, [r7, #4]
 8007738:	b2db      	uxtb	r3, r3
 800773a:	ee07 3a90 	vmov	s15, r3
 800773e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007742:	ed97 7a05 	vldr	s14, [r7, #20]
 8007746:	ee77 7a67 	vsub.f32	s15, s14, s15
 800774a:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 800774e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007752:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007756:	eef4 7ac7 	vcmpe.f32	s15, s14
 800775a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800775e:	d50a      	bpl.n	8007776 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 8007760:	edd7 7a05 	vldr	s15, [r7, #20]
 8007764:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007768:	edc7 7a01 	vstr	s15, [r7, #4]
 800776c:	793b      	ldrb	r3, [r7, #4]
 800776e:	b2db      	uxtb	r3, r3
 8007770:	3b01      	subs	r3, #1
 8007772:	b2db      	uxtb	r3, r3
 8007774:	e009      	b.n	800778a <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8e>
      return ((uint8_t)result);    
 8007776:	edd7 7a05 	vldr	s15, [r7, #20]
 800777a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800777e:	edc7 7a01 	vstr	s15, [r7, #4]
 8007782:	793b      	ldrb	r3, [r7, #4]
 8007784:	b2db      	uxtb	r3, r3
 8007786:	e000      	b.n	800778a <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8e>
    return 0;   // Warning
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	371c      	adds	r7, #28
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	457a0000 	.word	0x457a0000
 800779c:	41fa0000 	.word	0x41fa0000

080077a0 <_ZN5L6470I8shield_2E12L6470_ConfigEPv>:
status_t L6470<shield_x>::L6470_Config(void *init)
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b086      	sub	sp, #24
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
  reset_device();
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	3394      	adds	r3, #148	@ 0x94
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	4798      	blx	r3
  get_status();
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	330c      	adds	r3, #12
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	4798      	blx	r3
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	697a      	ldr	r2, [r7, #20]
 80077d2:	edd2 7a05 	vldr	s15, [r2, #20]
 80077d6:	eeb0 0a67 	vmov.f32	s0, s15
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	4798      	blx	r3
 80077de:	4603      	mov	r3, r0
 80077e0:	461a      	mov	r2, r3
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	697a      	ldr	r2, [r7, #20]
 80077f4:	edd2 7a06 	vldr	s15, [r2, #24]
 80077f8:	eeb0 0a67 	vmov.f32	s0, s15
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	4798      	blx	r3
 8007800:	4603      	mov	r3, r0
 8007802:	461a      	mov	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	edd2 7a07 	vldr	s15, [r2, #28]
 800781a:	eeb0 0a67 	vmov.f32	s0, s15
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	4798      	blx	r3
 8007822:	4603      	mov	r3, r0
 8007824:	461a      	mov	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	edd2 7a08 	vldr	s15, [r2, #32]
 800783c:	eeb0 0a67 	vmov.f32	s0, s15
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	4798      	blx	r3
 8007844:	4603      	mov	r3, r0
 8007846:	461a      	mov	r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	697a      	ldr	r2, [r7, #20]
 800785a:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 800785e:	eeb0 0a67 	vmov.f32	s0, s15
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	4798      	blx	r3
 8007866:	4603      	mov	r3, r0
 8007868:	461a      	mov	r2, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8007876:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8007b48 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 800787a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	ed93 7a00 	vldr	s14, [r3]
 8007884:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800788c:	edc7 7a01 	vstr	s15, [r7, #4]
 8007890:	793b      	ldrb	r3, [r7, #4]
 8007892:	b2da      	uxtb	r2, r3
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80078a0:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8007b48 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 80078a4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	ed93 7a00 	vldr	s14, [r3]
 80078ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078b6:	edc7 7a01 	vstr	s15, [r7, #4]
 80078ba:	793b      	ldrb	r3, [r7, #4]
 80078bc:	b2da      	uxtb	r2, r3
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80078ca:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 8007b48 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 80078ce:	ee67 6a87 	vmul.f32	s13, s15, s14
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	ed93 7a00 	vldr	s14, [r3]
 80078d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078e0:	edc7 7a01 	vstr	s15, [r7, #4]
 80078e4:	793b      	ldrb	r3, [r7, #4]
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80078f4:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8007b48 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 80078f8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	ed93 7a00 	vldr	s14, [r3]
 8007902:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800790a:	edc7 7a01 	vstr	s15, [r7, #4]
 800790e:	793b      	ldrb	r3, [r7, #4]
 8007910:	b2da      	uxtb	r2, r3
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 8007928:	eeb0 0a67 	vmov.f32	s0, s15
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	4798      	blx	r3
 8007930:	4603      	mov	r3, r0
 8007932:	461a      	mov	r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	697a      	ldr	r2, [r7, #20]
 8007946:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 800794a:	eeb0 0a67 	vmov.f32	s0, s15
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	4798      	blx	r3
 8007952:	4603      	mov	r3, r0
 8007954:	461a      	mov	r2, r3
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	edd2 7a10 	vldr	s15, [r2, #64]	@ 0x40
 800796c:	eeb0 0a67 	vmov.f32	s0, s15
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	4798      	blx	r3
 8007974:	4603      	mov	r3, r0
 8007976:	461a      	mov	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	edd2 7a11 	vldr	s15, [r2, #68]	@ 0x44
 800798e:	eeb0 0a67 	vmov.f32	s0, s15
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	4798      	blx	r3
 8007996:	4603      	mov	r3, r0
 8007998:	461a      	mov	r2, r3
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	697a      	ldr	r2, [r7, #20]
 80079b8:	edd2 7a13 	vldr	s15, [r2, #76]	@ 0x4c
 80079bc:	eeb0 0a67 	vmov.f32	s0, s15
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	4798      	blx	r3
 80079c4:	4603      	mov	r3, r0
 80079c6:	461a      	mov	r2, r3
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	697a      	ldr	r2, [r7, #20]
 80079da:	edd2 7a14 	vldr	s15, [r2, #80]	@ 0x50
 80079de:	eeb0 0a67 	vmov.f32	s0, s15
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	4798      	blx	r3
 80079e6:	4603      	mov	r3, r0
 80079e8:	461a      	mov	r2, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 8007a24:	2104      	movs	r1, #4
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 8007a3a:	2105      	movs	r1, #5
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	f8b2 204c 	ldrh.w	r2, [r2, #76]	@ 0x4c
 8007a50:	2106      	movs	r1, #6
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	f8b2 204e 	ldrh.w	r2, [r2, #78]	@ 0x4e
 8007a66:	2107      	movs	r1, #7
 8007a68:	68f8      	ldr	r0, [r7, #12]
 8007a6a:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	68fa      	ldr	r2, [r7, #12]
 8007a78:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 8007a7c:	2108      	movs	r1, #8
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 8007a92:	2109      	movs	r1, #9
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	f892 2053 	ldrb.w	r2, [r2, #83]	@ 0x53
 8007aa8:	210a      	movs	r1, #10
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8007abe:	210b      	movs	r1, #11
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8007ad4:	210c      	movs	r1, #12
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
 8007aea:	210d      	movs	r1, #13
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	f892 2058 	ldrb.w	r2, [r2, #88]	@ 0x58
 8007b00:	210e      	movs	r1, #14
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	f892 2059 	ldrb.w	r2, [r2, #89]	@ 0x59
 8007b16:	210f      	movs	r1, #15
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	f892 205a 	ldrb.w	r2, [r2, #90]	@ 0x5a
 8007b2c:	2110      	movs	r1, #16
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	f892 205b 	ldrb.w	r2, [r2, #91]	@ 0x5b
 8007b42:	2111      	movs	r1, #17
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	e001      	b.n	8007b4c <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3ac>
 8007b48:	43800000 	.word	0x43800000
 8007b4c:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	f892 205d 	ldrb.w	r2, [r2, #93]	@ 0x5d
 8007b5e:	2113      	movs	r1, #19
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	f892 205e 	ldrb.w	r2, [r2, #94]	@ 0x5e
 8007b74:	2114      	movs	r1, #20
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8007b8a:	2116      	movs	r1, #22
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68fa      	ldr	r2, [r7, #12]
 8007b9c:	f8b2 2062 	ldrh.w	r2, [r2, #98]	@ 0x62
 8007ba0:	2117      	movs	r1, #23
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	3354      	adds	r3, #84	@ 0x54
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	f892 205f 	ldrb.w	r2, [r2, #95]	@ 0x5f
 8007bb4:	4611      	mov	r1, r2
 8007bb6:	68f8      	ldr	r0, [r7, #12]
 8007bb8:	4798      	blx	r3
 8007bba:	4603      	mov	r3, r0
 8007bbc:	f083 0301 	eor.w	r3, r3, #1
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d001      	beq.n	8007bca <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e000      	b.n	8007bcc <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x42c>
  return COMPONENT_OK;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3718      	adds	r7, #24
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 8007bd4:	b590      	push	{r4, r7, lr}
 8007bd6:	b087      	sub	sp, #28
 8007bd8:	af02      	add	r7, sp, #8
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	460b      	mov	r3, r1
 8007bde:	607a      	str	r2, [r7, #4]
 8007be0:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007bea:	681c      	ldr	r4, [r3, #0]
 8007bec:	7afa      	ldrb	r2, [r7, #11]
 8007bee:	2300      	movs	r3, #0
 8007bf0:	9301      	str	r3, [sp, #4]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	490c      	ldr	r1, [pc, #48]	@ (8007c2c <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a09      	ldr	r2, [pc, #36]	@ (8007c30 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8007c0c:	4907      	ldr	r1, [pc, #28]	@ (8007c2c <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a05      	ldr	r2, [pc, #20]	@ (8007c34 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 8007c1e:	4904      	ldr	r1, [pc, #16]	@ (8007c30 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	4798      	blx	r3
}
 8007c24:	bf00      	nop
 8007c26:	3714      	adds	r7, #20
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd90      	pop	{r4, r7, pc}
 8007c2c:	20000244 	.word	0x20000244
 8007c30:	20000264 	.word	0x20000264
 8007c34:	2000026c 	.word	0x2000026c

08007c38 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 8007c38:	b590      	push	{r4, r7, lr}
 8007c3a:	b087      	sub	sp, #28
 8007c3c:	af02      	add	r7, sp, #8
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	460b      	mov	r3, r1
 8007c42:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007c4c:	681c      	ldr	r4, [r3, #0]
 8007c4e:	78fb      	ldrb	r3, [r7, #3]
 8007c50:	2200      	movs	r2, #0
 8007c52:	9201      	str	r2, [sp, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	9200      	str	r2, [sp, #0]
 8007c58:	2202      	movs	r2, #2
 8007c5a:	4917      	ldr	r1, [pc, #92]	@ (8007cb8 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a14      	ldr	r2, [pc, #80]	@ (8007cbc <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8007c6c:	4912      	ldr	r1, [pc, #72]	@ (8007cb8 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a10      	ldr	r2, [pc, #64]	@ (8007cc0 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8007c7e:	490f      	ldr	r1, [pc, #60]	@ (8007cbc <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6a19      	ldr	r1, [r3, #32]
 8007c88:	78fa      	ldrb	r2, [r7, #3]
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4413      	add	r3, r2
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	440b      	add	r3, r1
 8007c94:	7b9b      	ldrb	r3, [r3, #14]
 8007c96:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	7bfa      	ldrb	r2, [r7, #15]
 8007ca4:	4906      	ldr	r1, [pc, #24]	@ (8007cc0 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	4798      	blx	r3
 8007caa:	4603      	mov	r3, r0
 8007cac:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 8007cae:	68bb      	ldr	r3, [r7, #8]
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3714      	adds	r7, #20
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd90      	pop	{r4, r7, pc}
 8007cb8:	20000244 	.word	0x20000244
 8007cbc:	20000264 	.word	0x20000264
 8007cc0:	2000026c 	.word	0x2000026c

08007cc4 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8007cc4:	b590      	push	{r4, r7, lr}
 8007cc6:	b087      	sub	sp, #28
 8007cc8:	af02      	add	r7, sp, #8
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	460b      	mov	r3, r1
 8007cce:	607a      	str	r2, [r7, #4]
 8007cd0:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007cda:	681c      	ldr	r4, [r3, #0]
 8007cdc:	7afa      	ldrb	r2, [r7, #11]
 8007cde:	2300      	movs	r3, #0
 8007ce0:	9301      	str	r3, [sp, #4]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	2203      	movs	r2, #3
 8007cea:	490c      	ldr	r1, [pc, #48]	@ (8007d1c <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a09      	ldr	r2, [pc, #36]	@ (8007d20 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8007cfc:	4907      	ldr	r1, [pc, #28]	@ (8007d1c <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a05      	ldr	r2, [pc, #20]	@ (8007d24 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x60>)
 8007d0e:	4904      	ldr	r1, [pc, #16]	@ (8007d20 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	4798      	blx	r3
}
 8007d14:	bf00      	nop
 8007d16:	3714      	adds	r7, #20
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd90      	pop	{r4, r7, pc}
 8007d1c:	20000244 	.word	0x20000244
 8007d20:	20000264 	.word	0x20000264
 8007d24:	2000026c 	.word	0x2000026c

08007d28 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 8007d28:	b590      	push	{r4, r7, lr}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af02      	add	r7, sp, #8
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	460b      	mov	r3, r1
 8007d32:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007d3c:	681c      	ldr	r4, [r3, #0]
 8007d3e:	78fb      	ldrb	r3, [r7, #3]
 8007d40:	2200      	movs	r2, #0
 8007d42:	9201      	str	r2, [sp, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	9200      	str	r2, [sp, #0]
 8007d48:	2204      	movs	r2, #4
 8007d4a:	490c      	ldr	r1, [pc, #48]	@ (8007d7c <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a09      	ldr	r2, [pc, #36]	@ (8007d80 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8007d5c:	4907      	ldr	r1, [pc, #28]	@ (8007d7c <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a05      	ldr	r2, [pc, #20]	@ (8007d84 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 8007d6e:	4904      	ldr	r1, [pc, #16]	@ (8007d80 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	4798      	blx	r3
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd90      	pop	{r4, r7, pc}
 8007d7c:	20000244 	.word	0x20000244
 8007d80:	20000264 	.word	0x20000264
 8007d84:	2000026c 	.word	0x2000026c

08007d88 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8007d88:	b590      	push	{r4, r7, lr}
 8007d8a:	b087      	sub	sp, #28
 8007d8c:	af02      	add	r7, sp, #8
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	460b      	mov	r3, r1
 8007d92:	607a      	str	r2, [r7, #4]
 8007d94:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007d9e:	681c      	ldr	r4, [r3, #0]
 8007da0:	7afa      	ldrb	r2, [r7, #11]
 8007da2:	2300      	movs	r3, #0
 8007da4:	9301      	str	r3, [sp, #4]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	9300      	str	r3, [sp, #0]
 8007daa:	4613      	mov	r3, r2
 8007dac:	2205      	movs	r2, #5
 8007dae:	490c      	ldr	r1, [pc, #48]	@ (8007de0 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a09      	ldr	r2, [pc, #36]	@ (8007de4 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8007dc0:	4907      	ldr	r1, [pc, #28]	@ (8007de0 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a05      	ldr	r2, [pc, #20]	@ (8007de8 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 8007dd2:	4904      	ldr	r1, [pc, #16]	@ (8007de4 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	4798      	blx	r3
}
 8007dd8:	bf00      	nop
 8007dda:	3714      	adds	r7, #20
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd90      	pop	{r4, r7, pc}
 8007de0:	20000244 	.word	0x20000244
 8007de4:	20000264 	.word	0x20000264
 8007de8:	2000026c 	.word	0x2000026c

08007dec <_ZN5L6470I8shield_2E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 8007dec:	b590      	push	{r4, r7, lr}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af02      	add	r7, sp, #8
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007dfc:	d21f      	bcs.n	8007e3e <_ZN5L6470I8shield_2E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007e06:	681c      	ldr	r4, [r3, #0]
 8007e08:	2300      	movs	r3, #0
 8007e0a:	9301      	str	r3, [sp, #4]
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	2206      	movs	r2, #6
 8007e14:	490c      	ldr	r1, [pc, #48]	@ (8007e48 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x5c>)
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a09      	ldr	r2, [pc, #36]	@ (8007e4c <_ZN5L6470I8shield_2E10L6470_GoToEm+0x60>)
 8007e26:	4908      	ldr	r1, [pc, #32]	@ (8007e48 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x5c>)
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a06      	ldr	r2, [pc, #24]	@ (8007e50 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x64>)
 8007e38:	4904      	ldr	r1, [pc, #16]	@ (8007e4c <_ZN5L6470I8shield_2E10L6470_GoToEm+0x60>)
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	4798      	blx	r3
}
 8007e3e:	bf00      	nop
 8007e40:	370c      	adds	r7, #12
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd90      	pop	{r4, r7, pc}
 8007e46:	bf00      	nop
 8007e48:	20000244 	.word	0x20000244
 8007e4c:	20000264 	.word	0x20000264
 8007e50:	2000026c 	.word	0x2000026c

08007e54 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 8007e54:	b590      	push	{r4, r7, lr}
 8007e56:	b087      	sub	sp, #28
 8007e58:	af02      	add	r7, sp, #8
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	607a      	str	r2, [r7, #4]
 8007e60:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e68:	d220      	bcs.n	8007eac <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007e72:	681c      	ldr	r4, [r3, #0]
 8007e74:	7afa      	ldrb	r2, [r7, #11]
 8007e76:	2300      	movs	r3, #0
 8007e78:	9301      	str	r3, [sp, #4]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	9300      	str	r3, [sp, #0]
 8007e7e:	4613      	mov	r3, r2
 8007e80:	2207      	movs	r2, #7
 8007e82:	490c      	ldr	r1, [pc, #48]	@ (8007eb4 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a09      	ldr	r2, [pc, #36]	@ (8007eb8 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8007e94:	4907      	ldr	r1, [pc, #28]	@ (8007eb4 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a05      	ldr	r2, [pc, #20]	@ (8007ebc <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 8007ea6:	4904      	ldr	r1, [pc, #16]	@ (8007eb8 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	4798      	blx	r3
}
 8007eac:	bf00      	nop
 8007eae:	3714      	adds	r7, #20
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd90      	pop	{r4, r7, pc}
 8007eb4:	20000244 	.word	0x20000244
 8007eb8:	20000264 	.word	0x20000264
 8007ebc:	2000026c 	.word	0x2000026c

08007ec0 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8007ec0:	b590      	push	{r4, r7, lr}
 8007ec2:	b087      	sub	sp, #28
 8007ec4:	af02      	add	r7, sp, #8
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	607b      	str	r3, [r7, #4]
 8007eca:	460b      	mov	r3, r1
 8007ecc:	72fb      	strb	r3, [r7, #11]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007eda:	681c      	ldr	r4, [r3, #0]
 8007edc:	7af9      	ldrb	r1, [r7, #11]
 8007ede:	7abb      	ldrb	r3, [r7, #10]
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	9201      	str	r2, [sp, #4]
 8007ee4:	9300      	str	r3, [sp, #0]
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	2208      	movs	r2, #8
 8007eea:	490c      	ldr	r1, [pc, #48]	@ (8007f1c <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a09      	ldr	r2, [pc, #36]	@ (8007f20 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8007efc:	4907      	ldr	r1, [pc, #28]	@ (8007f1c <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a05      	ldr	r2, [pc, #20]	@ (8007f24 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 8007f0e:	4904      	ldr	r1, [pc, #16]	@ (8007f20 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	4798      	blx	r3
}
 8007f14:	bf00      	nop
 8007f16:	3714      	adds	r7, #20
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd90      	pop	{r4, r7, pc}
 8007f1c:	20000244 	.word	0x20000244
 8007f20:	20000264 	.word	0x20000264
 8007f24:	2000026c 	.word	0x2000026c

08007f28 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8007f28:	b590      	push	{r4, r7, lr}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af02      	add	r7, sp, #8
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	460b      	mov	r3, r1
 8007f32:	70fb      	strb	r3, [r7, #3]
 8007f34:	4613      	mov	r3, r2
 8007f36:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007f40:	681c      	ldr	r4, [r3, #0]
 8007f42:	78fa      	ldrb	r2, [r7, #3]
 8007f44:	78bb      	ldrb	r3, [r7, #2]
 8007f46:	2100      	movs	r1, #0
 8007f48:	9101      	str	r1, [sp, #4]
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	2209      	movs	r2, #9
 8007f50:	490c      	ldr	r1, [pc, #48]	@ (8007f84 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a09      	ldr	r2, [pc, #36]	@ (8007f88 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8007f62:	4908      	ldr	r1, [pc, #32]	@ (8007f84 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a06      	ldr	r2, [pc, #24]	@ (8007f8c <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 8007f74:	4904      	ldr	r1, [pc, #16]	@ (8007f88 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	4798      	blx	r3
}
 8007f7a:	bf00      	nop
 8007f7c:	370c      	adds	r7, #12
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd90      	pop	{r4, r7, pc}
 8007f82:	bf00      	nop
 8007f84:	20000244 	.word	0x20000244
 8007f88:	20000264 	.word	0x20000264
 8007f8c:	2000026c 	.word	0x2000026c

08007f90 <_ZN5L6470I8shield_2E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 8007f90:	b590      	push	{r4, r7, lr}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af02      	add	r7, sp, #8
 8007f96:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007fa0:	681c      	ldr	r4, [r3, #0]
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	9301      	str	r3, [sp, #4]
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	9300      	str	r3, [sp, #0]
 8007faa:	2300      	movs	r3, #0
 8007fac:	220a      	movs	r2, #10
 8007fae:	490c      	ldr	r1, [pc, #48]	@ (8007fe0 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x50>)
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a09      	ldr	r2, [pc, #36]	@ (8007fe4 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x54>)
 8007fc0:	4907      	ldr	r1, [pc, #28]	@ (8007fe0 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x50>)
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a05      	ldr	r2, [pc, #20]	@ (8007fe8 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x58>)
 8007fd2:	4904      	ldr	r1, [pc, #16]	@ (8007fe4 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x54>)
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	4798      	blx	r3
}
 8007fd8:	bf00      	nop
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd90      	pop	{r4, r7, pc}
 8007fe0:	20000244 	.word	0x20000244
 8007fe4:	20000264 	.word	0x20000264
 8007fe8:	2000026c 	.word	0x2000026c

08007fec <_ZN5L6470I8shield_2E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 8007fec:	b590      	push	{r4, r7, lr}
 8007fee:	b085      	sub	sp, #20
 8007ff0:	af02      	add	r7, sp, #8
 8007ff2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007ffc:	681c      	ldr	r4, [r3, #0]
 8007ffe:	2300      	movs	r3, #0
 8008000:	9301      	str	r3, [sp, #4]
 8008002:	2300      	movs	r3, #0
 8008004:	9300      	str	r3, [sp, #0]
 8008006:	2300      	movs	r3, #0
 8008008:	220b      	movs	r2, #11
 800800a:	490c      	ldr	r1, [pc, #48]	@ (800803c <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x50>)
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a09      	ldr	r2, [pc, #36]	@ (8008040 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x54>)
 800801c:	4907      	ldr	r1, [pc, #28]	@ (800803c <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x50>)
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a05      	ldr	r2, [pc, #20]	@ (8008044 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x58>)
 800802e:	4904      	ldr	r1, [pc, #16]	@ (8008040 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x54>)
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	4798      	blx	r3
}
 8008034:	bf00      	nop
 8008036:	370c      	adds	r7, #12
 8008038:	46bd      	mov	sp, r7
 800803a:	bd90      	pop	{r4, r7, pc}
 800803c:	20000244 	.word	0x20000244
 8008040:	20000264 	.word	0x20000264
 8008044:	2000026c 	.word	0x2000026c

08008048 <_ZN5L6470I8shield_2E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 8008048:	b590      	push	{r4, r7, lr}
 800804a:	b085      	sub	sp, #20
 800804c:	af02      	add	r7, sp, #8
 800804e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008058:	681c      	ldr	r4, [r3, #0]
 800805a:	2300      	movs	r3, #0
 800805c:	9301      	str	r3, [sp, #4]
 800805e:	2300      	movs	r3, #0
 8008060:	9300      	str	r3, [sp, #0]
 8008062:	2300      	movs	r3, #0
 8008064:	220c      	movs	r2, #12
 8008066:	490c      	ldr	r1, [pc, #48]	@ (8008098 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x50>)
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a09      	ldr	r2, [pc, #36]	@ (800809c <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x54>)
 8008078:	4907      	ldr	r1, [pc, #28]	@ (8008098 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x50>)
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a05      	ldr	r2, [pc, #20]	@ (80080a0 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x58>)
 800808a:	4904      	ldr	r1, [pc, #16]	@ (800809c <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x54>)
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	4798      	blx	r3
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	bd90      	pop	{r4, r7, pc}
 8008098:	20000244 	.word	0x20000244
 800809c:	20000264 	.word	0x20000264
 80080a0:	2000026c 	.word	0x2000026c

080080a4 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 80080a4:	b590      	push	{r4, r7, lr}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af02      	add	r7, sp, #8
 80080aa:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80080b4:	681c      	ldr	r4, [r3, #0]
 80080b6:	2300      	movs	r3, #0
 80080b8:	9301      	str	r3, [sp, #4]
 80080ba:	2300      	movs	r3, #0
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	2300      	movs	r3, #0
 80080c0:	220d      	movs	r2, #13
 80080c2:	490c      	ldr	r1, [pc, #48]	@ (80080f4 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x50>)
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a09      	ldr	r2, [pc, #36]	@ (80080f8 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x54>)
 80080d4:	4907      	ldr	r1, [pc, #28]	@ (80080f4 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x50>)
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a05      	ldr	r2, [pc, #20]	@ (80080fc <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x58>)
 80080e6:	4904      	ldr	r1, [pc, #16]	@ (80080f8 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x54>)
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	4798      	blx	r3
}
 80080ec:	bf00      	nop
 80080ee:	370c      	adds	r7, #12
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd90      	pop	{r4, r7, pc}
 80080f4:	20000244 	.word	0x20000244
 80080f8:	20000264 	.word	0x20000264
 80080fc:	2000026c 	.word	0x2000026c

08008100 <_ZN5L6470I8shield_2E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 8008100:	b590      	push	{r4, r7, lr}
 8008102:	b085      	sub	sp, #20
 8008104:	af02      	add	r7, sp, #8
 8008106:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008110:	681c      	ldr	r4, [r3, #0]
 8008112:	2300      	movs	r3, #0
 8008114:	9301      	str	r3, [sp, #4]
 8008116:	2300      	movs	r3, #0
 8008118:	9300      	str	r3, [sp, #0]
 800811a:	2300      	movs	r3, #0
 800811c:	220e      	movs	r2, #14
 800811e:	490c      	ldr	r1, [pc, #48]	@ (8008150 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x50>)
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a09      	ldr	r2, [pc, #36]	@ (8008154 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x54>)
 8008130:	4907      	ldr	r1, [pc, #28]	@ (8008150 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x50>)
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a05      	ldr	r2, [pc, #20]	@ (8008158 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x58>)
 8008142:	4904      	ldr	r1, [pc, #16]	@ (8008154 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x54>)
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	4798      	blx	r3
}
 8008148:	bf00      	nop
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	bd90      	pop	{r4, r7, pc}
 8008150:	20000244 	.word	0x20000244
 8008154:	20000264 	.word	0x20000264
 8008158:	2000026c 	.word	0x2000026c

0800815c <_ZN5L6470I8shield_2E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 800815c:	b590      	push	{r4, r7, lr}
 800815e:	b085      	sub	sp, #20
 8008160:	af02      	add	r7, sp, #8
 8008162:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800816c:	681c      	ldr	r4, [r3, #0]
 800816e:	2300      	movs	r3, #0
 8008170:	9301      	str	r3, [sp, #4]
 8008172:	2300      	movs	r3, #0
 8008174:	9300      	str	r3, [sp, #0]
 8008176:	2300      	movs	r3, #0
 8008178:	220f      	movs	r2, #15
 800817a:	490c      	ldr	r1, [pc, #48]	@ (80081ac <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x50>)
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a09      	ldr	r2, [pc, #36]	@ (80081b0 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x54>)
 800818c:	4907      	ldr	r1, [pc, #28]	@ (80081ac <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x50>)
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a05      	ldr	r2, [pc, #20]	@ (80081b4 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x58>)
 800819e:	4904      	ldr	r1, [pc, #16]	@ (80081b0 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x54>)
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	4798      	blx	r3
}
 80081a4:	bf00      	nop
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd90      	pop	{r4, r7, pc}
 80081ac:	20000244 	.word	0x20000244
 80081b0:	20000264 	.word	0x20000264
 80081b4:	2000026c 	.word	0x2000026c

080081b8 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 80081b8:	b590      	push	{r4, r7, lr}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af02      	add	r7, sp, #8
 80081be:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80081c8:	681c      	ldr	r4, [r3, #0]
 80081ca:	2300      	movs	r3, #0
 80081cc:	9301      	str	r3, [sp, #4]
 80081ce:	2300      	movs	r3, #0
 80081d0:	9300      	str	r3, [sp, #0]
 80081d2:	2300      	movs	r3, #0
 80081d4:	2210      	movs	r2, #16
 80081d6:	490c      	ldr	r1, [pc, #48]	@ (8008208 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x50>)
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a09      	ldr	r2, [pc, #36]	@ (800820c <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x54>)
 80081e8:	4907      	ldr	r1, [pc, #28]	@ (8008208 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x50>)
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a05      	ldr	r2, [pc, #20]	@ (8008210 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x58>)
 80081fa:	4904      	ldr	r1, [pc, #16]	@ (800820c <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x54>)
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	4798      	blx	r3
}
 8008200:	bf00      	nop
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	bd90      	pop	{r4, r7, pc}
 8008208:	20000244 	.word	0x20000244
 800820c:	20000264 	.word	0x20000264
 8008210:	2000026c 	.word	0x2000026c

08008214 <_ZN5L6470I8shield_2E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 8008214:	b590      	push	{r4, r7, lr}
 8008216:	b085      	sub	sp, #20
 8008218:	af02      	add	r7, sp, #8
 800821a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008224:	681c      	ldr	r4, [r3, #0]
 8008226:	2300      	movs	r3, #0
 8008228:	9301      	str	r3, [sp, #4]
 800822a:	2300      	movs	r3, #0
 800822c:	9300      	str	r3, [sp, #0]
 800822e:	2300      	movs	r3, #0
 8008230:	2211      	movs	r2, #17
 8008232:	490c      	ldr	r1, [pc, #48]	@ (8008264 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x50>)
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a09      	ldr	r2, [pc, #36]	@ (8008268 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x54>)
 8008244:	4907      	ldr	r1, [pc, #28]	@ (8008264 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x50>)
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a05      	ldr	r2, [pc, #20]	@ (800826c <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x58>)
 8008256:	4904      	ldr	r1, [pc, #16]	@ (8008268 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x54>)
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	4798      	blx	r3
}
 800825c:	bf00      	nop
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	bd90      	pop	{r4, r7, pc}
 8008264:	20000244 	.word	0x20000244
 8008268:	20000264 	.word	0x20000264
 800826c:	2000026c 	.word	0x2000026c

08008270 <_ZN5L6470I8shield_2E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 8008270:	b590      	push	{r4, r7, lr}
 8008272:	b087      	sub	sp, #28
 8008274:	af02      	add	r7, sp, #8
 8008276:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008280:	681c      	ldr	r4, [r3, #0]
 8008282:	2300      	movs	r3, #0
 8008284:	9301      	str	r3, [sp, #4]
 8008286:	2300      	movs	r3, #0
 8008288:	9300      	str	r3, [sp, #0]
 800828a:	2300      	movs	r3, #0
 800828c:	2212      	movs	r2, #18
 800828e:	4912      	ldr	r1, [pc, #72]	@ (80082d8 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x68>)
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a0f      	ldr	r2, [pc, #60]	@ (80082dc <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x6c>)
 80082a0:	490d      	ldr	r1, [pc, #52]	@ (80082d8 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x68>)
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a0b      	ldr	r2, [pc, #44]	@ (80082e0 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x70>)
 80082b2:	490a      	ldr	r1, [pc, #40]	@ (80082dc <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x6c>)
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2202      	movs	r2, #2
 80082c4:	4906      	ldr	r1, [pc, #24]	@ (80082e0 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x70>)
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	4798      	blx	r3
 80082ca:	4603      	mov	r3, r0
 80082cc:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 80082ce:	89fb      	ldrh	r3, [r7, #14]
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3714      	adds	r7, #20
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd90      	pop	{r4, r7, pc}
 80082d8:	20000244 	.word	0x20000244
 80082dc:	20000264 	.word	0x20000264
 80082e0:	2000026c 	.word	0x2000026c

080082e4 <_ZN5L6470I8shield_2E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 80082e4:	b590      	push	{r4, r7, lr}
 80082e6:	b087      	sub	sp, #28
 80082e8:	af02      	add	r7, sp, #8
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	460b      	mov	r3, r1
 80082ee:	607a      	str	r2, [r7, #4]
 80082f0:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80082fa:	681c      	ldr	r4, [r3, #0]
 80082fc:	7afa      	ldrb	r2, [r7, #11]
 80082fe:	2300      	movs	r3, #0
 8008300:	9301      	str	r3, [sp, #4]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	9300      	str	r3, [sp, #0]
 8008306:	4613      	mov	r3, r2
 8008308:	2201      	movs	r2, #1
 800830a:	4903      	ldr	r1, [pc, #12]	@ (8008318 <_ZN5L6470I8shield_2E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	47a0      	blx	r4
}
 8008310:	bf00      	nop
 8008312:	3714      	adds	r7, #20
 8008314:	46bd      	mov	sp, r7
 8008316:	bd90      	pop	{r4, r7, pc}
 8008318:	20000244 	.word	0x20000244

0800831c <_ZN5L6470I8shield_2E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 800831c:	b590      	push	{r4, r7, lr}
 800831e:	b085      	sub	sp, #20
 8008320:	af02      	add	r7, sp, #8
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	460b      	mov	r3, r1
 8008326:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008330:	681c      	ldr	r4, [r3, #0]
 8008332:	78fb      	ldrb	r3, [r7, #3]
 8008334:	2200      	movs	r2, #0
 8008336:	9201      	str	r2, [sp, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	9200      	str	r2, [sp, #0]
 800833c:	2202      	movs	r2, #2
 800833e:	4903      	ldr	r1, [pc, #12]	@ (800834c <_ZN5L6470I8shield_2E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	47a0      	blx	r4
}
 8008344:	bf00      	nop
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	bd90      	pop	{r4, r7, pc}
 800834c:	20000244 	.word	0x20000244

08008350 <_ZN5L6470I8shield_2E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8008350:	b590      	push	{r4, r7, lr}
 8008352:	b087      	sub	sp, #28
 8008354:	af02      	add	r7, sp, #8
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	460b      	mov	r3, r1
 800835a:	607a      	str	r2, [r7, #4]
 800835c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008366:	681c      	ldr	r4, [r3, #0]
 8008368:	7afa      	ldrb	r2, [r7, #11]
 800836a:	2300      	movs	r3, #0
 800836c:	9301      	str	r3, [sp, #4]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	9300      	str	r3, [sp, #0]
 8008372:	4613      	mov	r3, r2
 8008374:	2203      	movs	r2, #3
 8008376:	4903      	ldr	r1, [pc, #12]	@ (8008384 <_ZN5L6470I8shield_2E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	47a0      	blx	r4
}
 800837c:	bf00      	nop
 800837e:	3714      	adds	r7, #20
 8008380:	46bd      	mov	sp, r7
 8008382:	bd90      	pop	{r4, r7, pc}
 8008384:	20000244 	.word	0x20000244

08008388 <_ZN5L6470I8shield_2E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 8008388:	b590      	push	{r4, r7, lr}
 800838a:	b085      	sub	sp, #20
 800838c:	af02      	add	r7, sp, #8
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	460b      	mov	r3, r1
 8008392:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800839c:	681c      	ldr	r4, [r3, #0]
 800839e:	78fb      	ldrb	r3, [r7, #3]
 80083a0:	2200      	movs	r2, #0
 80083a2:	9201      	str	r2, [sp, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	9200      	str	r2, [sp, #0]
 80083a8:	2204      	movs	r2, #4
 80083aa:	4903      	ldr	r1, [pc, #12]	@ (80083b8 <_ZN5L6470I8shield_2E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	47a0      	blx	r4
}
 80083b0:	bf00      	nop
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd90      	pop	{r4, r7, pc}
 80083b8:	20000244 	.word	0x20000244

080083bc <_ZN5L6470I8shield_2E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 80083bc:	b590      	push	{r4, r7, lr}
 80083be:	b087      	sub	sp, #28
 80083c0:	af02      	add	r7, sp, #8
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	460b      	mov	r3, r1
 80083c6:	607a      	str	r2, [r7, #4]
 80083c8:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80083d2:	681c      	ldr	r4, [r3, #0]
 80083d4:	7afa      	ldrb	r2, [r7, #11]
 80083d6:	2300      	movs	r3, #0
 80083d8:	9301      	str	r3, [sp, #4]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	9300      	str	r3, [sp, #0]
 80083de:	4613      	mov	r3, r2
 80083e0:	2205      	movs	r2, #5
 80083e2:	4903      	ldr	r1, [pc, #12]	@ (80083f0 <_ZN5L6470I8shield_2E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	47a0      	blx	r4
}
 80083e8:	bf00      	nop
 80083ea:	3714      	adds	r7, #20
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd90      	pop	{r4, r7, pc}
 80083f0:	20000244 	.word	0x20000244

080083f4 <_ZN5L6470I8shield_2E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 80083f4:	b590      	push	{r4, r7, lr}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af02      	add	r7, sp, #8
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008406:	681c      	ldr	r4, [r3, #0]
 8008408:	2300      	movs	r3, #0
 800840a:	9301      	str	r3, [sp, #4]
 800840c:	2300      	movs	r3, #0
 800840e:	9300      	str	r3, [sp, #0]
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	2206      	movs	r2, #6
 8008414:	4903      	ldr	r1, [pc, #12]	@ (8008424 <_ZN5L6470I8shield_2E17L6470_PrepareGoToEm+0x30>)
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	47a0      	blx	r4
}
 800841a:	bf00      	nop
 800841c:	370c      	adds	r7, #12
 800841e:	46bd      	mov	sp, r7
 8008420:	bd90      	pop	{r4, r7, pc}
 8008422:	bf00      	nop
 8008424:	20000244 	.word	0x20000244

08008428 <_ZN5L6470I8shield_2E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 8008428:	b590      	push	{r4, r7, lr}
 800842a:	b087      	sub	sp, #28
 800842c:	af02      	add	r7, sp, #8
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	460b      	mov	r3, r1
 8008432:	607a      	str	r2, [r7, #4]
 8008434:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800843e:	681c      	ldr	r4, [r3, #0]
 8008440:	7afa      	ldrb	r2, [r7, #11]
 8008442:	2300      	movs	r3, #0
 8008444:	9301      	str	r3, [sp, #4]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	9300      	str	r3, [sp, #0]
 800844a:	4613      	mov	r3, r2
 800844c:	2207      	movs	r2, #7
 800844e:	4903      	ldr	r1, [pc, #12]	@ (800845c <_ZN5L6470I8shield_2E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 8008450:	68f8      	ldr	r0, [r7, #12]
 8008452:	47a0      	blx	r4
}
 8008454:	bf00      	nop
 8008456:	3714      	adds	r7, #20
 8008458:	46bd      	mov	sp, r7
 800845a:	bd90      	pop	{r4, r7, pc}
 800845c:	20000244 	.word	0x20000244

08008460 <_ZN5L6470I8shield_2E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8008460:	b590      	push	{r4, r7, lr}
 8008462:	b087      	sub	sp, #28
 8008464:	af02      	add	r7, sp, #8
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	607b      	str	r3, [r7, #4]
 800846a:	460b      	mov	r3, r1
 800846c:	72fb      	strb	r3, [r7, #11]
 800846e:	4613      	mov	r3, r2
 8008470:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800847a:	681c      	ldr	r4, [r3, #0]
 800847c:	7af9      	ldrb	r1, [r7, #11]
 800847e:	7abb      	ldrb	r3, [r7, #10]
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	9201      	str	r2, [sp, #4]
 8008484:	9300      	str	r3, [sp, #0]
 8008486:	460b      	mov	r3, r1
 8008488:	2208      	movs	r2, #8
 800848a:	4903      	ldr	r1, [pc, #12]	@ (8008498 <_ZN5L6470I8shield_2E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 800848c:	68f8      	ldr	r0, [r7, #12]
 800848e:	47a0      	blx	r4
}
 8008490:	bf00      	nop
 8008492:	3714      	adds	r7, #20
 8008494:	46bd      	mov	sp, r7
 8008496:	bd90      	pop	{r4, r7, pc}
 8008498:	20000244 	.word	0x20000244

0800849c <_ZN5L6470I8shield_2E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 800849c:	b590      	push	{r4, r7, lr}
 800849e:	b085      	sub	sp, #20
 80084a0:	af02      	add	r7, sp, #8
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	460b      	mov	r3, r1
 80084a6:	70fb      	strb	r3, [r7, #3]
 80084a8:	4613      	mov	r3, r2
 80084aa:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80084b4:	681c      	ldr	r4, [r3, #0]
 80084b6:	78fa      	ldrb	r2, [r7, #3]
 80084b8:	78bb      	ldrb	r3, [r7, #2]
 80084ba:	2100      	movs	r1, #0
 80084bc:	9101      	str	r1, [sp, #4]
 80084be:	9300      	str	r3, [sp, #0]
 80084c0:	4613      	mov	r3, r2
 80084c2:	2209      	movs	r2, #9
 80084c4:	4903      	ldr	r1, [pc, #12]	@ (80084d4 <_ZN5L6470I8shield_2E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	47a0      	blx	r4
}
 80084ca:	bf00      	nop
 80084cc:	370c      	adds	r7, #12
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd90      	pop	{r4, r7, pc}
 80084d2:	bf00      	nop
 80084d4:	20000244 	.word	0x20000244

080084d8 <_ZN5L6470I8shield_2E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 80084d8:	b590      	push	{r4, r7, lr}
 80084da:	b085      	sub	sp, #20
 80084dc:	af02      	add	r7, sp, #8
 80084de:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80084e8:	681c      	ldr	r4, [r3, #0]
 80084ea:	2300      	movs	r3, #0
 80084ec:	9301      	str	r3, [sp, #4]
 80084ee:	2300      	movs	r3, #0
 80084f0:	9300      	str	r3, [sp, #0]
 80084f2:	2300      	movs	r3, #0
 80084f4:	220a      	movs	r2, #10
 80084f6:	4903      	ldr	r1, [pc, #12]	@ (8008504 <_ZN5L6470I8shield_2E19L6470_PrepareGoHomeEv+0x2c>)
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	47a0      	blx	r4
}
 80084fc:	bf00      	nop
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	bd90      	pop	{r4, r7, pc}
 8008504:	20000244 	.word	0x20000244

08008508 <_ZN5L6470I8shield_2E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 8008508:	b590      	push	{r4, r7, lr}
 800850a:	b085      	sub	sp, #20
 800850c:	af02      	add	r7, sp, #8
 800850e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008518:	681c      	ldr	r4, [r3, #0]
 800851a:	2300      	movs	r3, #0
 800851c:	9301      	str	r3, [sp, #4]
 800851e:	2300      	movs	r3, #0
 8008520:	9300      	str	r3, [sp, #0]
 8008522:	2300      	movs	r3, #0
 8008524:	220b      	movs	r2, #11
 8008526:	4903      	ldr	r1, [pc, #12]	@ (8008534 <_ZN5L6470I8shield_2E19L6470_PrepareGoMarkEv+0x2c>)
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	47a0      	blx	r4
}
 800852c:	bf00      	nop
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	bd90      	pop	{r4, r7, pc}
 8008534:	20000244 	.word	0x20000244

08008538 <_ZN5L6470I8shield_2E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 8008538:	b590      	push	{r4, r7, lr}
 800853a:	b085      	sub	sp, #20
 800853c:	af02      	add	r7, sp, #8
 800853e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008548:	681c      	ldr	r4, [r3, #0]
 800854a:	2300      	movs	r3, #0
 800854c:	9301      	str	r3, [sp, #4]
 800854e:	2300      	movs	r3, #0
 8008550:	9300      	str	r3, [sp, #0]
 8008552:	2300      	movs	r3, #0
 8008554:	220c      	movs	r2, #12
 8008556:	4903      	ldr	r1, [pc, #12]	@ (8008564 <_ZN5L6470I8shield_2E21L6470_PrepareResetPosEv+0x2c>)
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	47a0      	blx	r4
}
 800855c:	bf00      	nop
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	bd90      	pop	{r4, r7, pc}
 8008564:	20000244 	.word	0x20000244

08008568 <_ZN5L6470I8shield_2E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 8008568:	b590      	push	{r4, r7, lr}
 800856a:	b085      	sub	sp, #20
 800856c:	af02      	add	r7, sp, #8
 800856e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008578:	681c      	ldr	r4, [r3, #0]
 800857a:	2300      	movs	r3, #0
 800857c:	9301      	str	r3, [sp, #4]
 800857e:	2300      	movs	r3, #0
 8008580:	9300      	str	r3, [sp, #0]
 8008582:	2300      	movs	r3, #0
 8008584:	220d      	movs	r2, #13
 8008586:	4903      	ldr	r1, [pc, #12]	@ (8008594 <_ZN5L6470I8shield_2E24L6470_PrepareResetDeviceEv+0x2c>)
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	47a0      	blx	r4
}
 800858c:	bf00      	nop
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	bd90      	pop	{r4, r7, pc}
 8008594:	20000244 	.word	0x20000244

08008598 <_ZN5L6470I8shield_2E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 8008598:	b590      	push	{r4, r7, lr}
 800859a:	b085      	sub	sp, #20
 800859c:	af02      	add	r7, sp, #8
 800859e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80085a8:	681c      	ldr	r4, [r3, #0]
 80085aa:	2300      	movs	r3, #0
 80085ac:	9301      	str	r3, [sp, #4]
 80085ae:	2300      	movs	r3, #0
 80085b0:	9300      	str	r3, [sp, #0]
 80085b2:	2300      	movs	r3, #0
 80085b4:	220e      	movs	r2, #14
 80085b6:	4903      	ldr	r1, [pc, #12]	@ (80085c4 <_ZN5L6470I8shield_2E21L6470_PrepareSoftStopEv+0x2c>)
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	47a0      	blx	r4
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd90      	pop	{r4, r7, pc}
 80085c4:	20000244 	.word	0x20000244

080085c8 <_ZN5L6470I8shield_2E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 80085c8:	b590      	push	{r4, r7, lr}
 80085ca:	b085      	sub	sp, #20
 80085cc:	af02      	add	r7, sp, #8
 80085ce:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80085d8:	681c      	ldr	r4, [r3, #0]
 80085da:	2300      	movs	r3, #0
 80085dc:	9301      	str	r3, [sp, #4]
 80085de:	2300      	movs	r3, #0
 80085e0:	9300      	str	r3, [sp, #0]
 80085e2:	2300      	movs	r3, #0
 80085e4:	220f      	movs	r2, #15
 80085e6:	4903      	ldr	r1, [pc, #12]	@ (80085f4 <_ZN5L6470I8shield_2E21L6470_PrepareHardStopEv+0x2c>)
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	47a0      	blx	r4
}
 80085ec:	bf00      	nop
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd90      	pop	{r4, r7, pc}
 80085f4:	20000244 	.word	0x20000244

080085f8 <_ZN5L6470I8shield_2E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 80085f8:	b590      	push	{r4, r7, lr}
 80085fa:	b085      	sub	sp, #20
 80085fc:	af02      	add	r7, sp, #8
 80085fe:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008608:	681c      	ldr	r4, [r3, #0]
 800860a:	2300      	movs	r3, #0
 800860c:	9301      	str	r3, [sp, #4]
 800860e:	2300      	movs	r3, #0
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	2300      	movs	r3, #0
 8008614:	2210      	movs	r2, #16
 8008616:	4903      	ldr	r1, [pc, #12]	@ (8008624 <_ZN5L6470I8shield_2E20L6470_PrepareSoftHiZEv+0x2c>)
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	47a0      	blx	r4
}
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	bd90      	pop	{r4, r7, pc}
 8008624:	20000244 	.word	0x20000244

08008628 <_ZN5L6470I8shield_2E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 8008628:	b590      	push	{r4, r7, lr}
 800862a:	b085      	sub	sp, #20
 800862c:	af02      	add	r7, sp, #8
 800862e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008638:	681c      	ldr	r4, [r3, #0]
 800863a:	2300      	movs	r3, #0
 800863c:	9301      	str	r3, [sp, #4]
 800863e:	2300      	movs	r3, #0
 8008640:	9300      	str	r3, [sp, #0]
 8008642:	2300      	movs	r3, #0
 8008644:	2211      	movs	r2, #17
 8008646:	4903      	ldr	r1, [pc, #12]	@ (8008654 <_ZN5L6470I8shield_2E20L6470_PrepareHardHiZEv+0x2c>)
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	47a0      	blx	r4
}
 800864c:	bf00      	nop
 800864e:	370c      	adds	r7, #12
 8008650:	46bd      	mov	sp, r7
 8008652:	bd90      	pop	{r4, r7, pc}
 8008654:	20000244 	.word	0x20000244

08008658 <_ZN5L6470I8shield_2E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 8008658:	b590      	push	{r4, r7, lr}
 800865a:	b085      	sub	sp, #20
 800865c:	af02      	add	r7, sp, #8
 800865e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008668:	681c      	ldr	r4, [r3, #0]
 800866a:	2300      	movs	r3, #0
 800866c:	9301      	str	r3, [sp, #4]
 800866e:	2300      	movs	r3, #0
 8008670:	9300      	str	r3, [sp, #0]
 8008672:	2300      	movs	r3, #0
 8008674:	2212      	movs	r2, #18
 8008676:	4903      	ldr	r1, [pc, #12]	@ (8008684 <_ZN5L6470I8shield_2E22L6470_PrepareGetStatusEv+0x2c>)
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	47a0      	blx	r4
}
 800867c:	bf00      	nop
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	bd90      	pop	{r4, r7, pc}
 8008684:	20000244 	.word	0x20000244

08008688 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a09      	ldr	r2, [pc, #36]	@ (80086c0 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 800869c:	4909      	ldr	r1, [pc, #36]	@ (80086c4 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a06      	ldr	r2, [pc, #24]	@ (80086c8 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 80086ae:	4904      	ldr	r1, [pc, #16]	@ (80086c0 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 80086b4:	4b04      	ldr	r3, [pc, #16]	@ (80086c8 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	20000264 	.word	0x20000264
 80086c4:	20000244 	.word	0x20000244
 80086c8:	2000026c 	.word	0x2000026c

080086cc <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 80086cc:	b590      	push	{r4, r7, lr}
 80086ce:	b089      	sub	sp, #36	@ 0x24
 80086d0:	af02      	add	r7, sp, #8
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 80086d8:	4b17      	ldr	r3, [pc, #92]	@ (8008738 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 80086da:	2200      	movs	r2, #0
 80086dc:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 80086de:	2300      	movs	r3, #0
 80086e0:	75fb      	strb	r3, [r7, #23]
 80086e2:	e020      	b.n	8008726 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80086ec:	681c      	ldr	r4, [r3, #0]
 80086ee:	7dfb      	ldrb	r3, [r7, #23]
 80086f0:	005b      	lsls	r3, r3, #1
 80086f2:	461a      	mov	r2, r3
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	1899      	adds	r1, r3, r2
 80086f8:	7dfb      	ldrb	r3, [r7, #23]
 80086fa:	005b      	lsls	r3, r3, #1
 80086fc:	461a      	mov	r2, r3
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	441a      	add	r2, r3
 8008702:	230a      	movs	r3, #10
 8008704:	9300      	str	r3, [sp, #0]
 8008706:	2302      	movs	r3, #2
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 800870c:	2300      	movs	r3, #0
 800870e:	75bb      	strb	r3, [r7, #22]
 8008710:	e003      	b.n	800871a <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x4e>
 8008712:	bf00      	nop
 8008714:	7dbb      	ldrb	r3, [r7, #22]
 8008716:	3301      	adds	r3, #1
 8008718:	75bb      	strb	r3, [r7, #22]
 800871a:	7dbb      	ldrb	r3, [r7, #22]
 800871c:	2b7c      	cmp	r3, #124	@ 0x7c
 800871e:	d9f8      	bls.n	8008712 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8008720:	7dfb      	ldrb	r3, [r7, #23]
 8008722:	3301      	adds	r3, #1
 8008724:	75fb      	strb	r3, [r7, #23]
 8008726:	7dfb      	ldrb	r3, [r7, #23]
 8008728:	2b03      	cmp	r3, #3
 800872a:	d9db      	bls.n	80086e4 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 800872c:	bf00      	nop
}
 800872e:	bf00      	nop
 8008730:	371c      	adds	r7, #28
 8008732:	46bd      	mov	sp, r7
 8008734:	bd90      	pop	{r4, r7, pc}
 8008736:	bf00      	nop
 8008738:	20000241 	.word	0x20000241

0800873c <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 800873c:	b480      	push	{r7}
 800873e:	b087      	sub	sp, #28
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	4613      	mov	r3, r2
 8008748:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 800874a:	2300      	movs	r3, #0
 800874c:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 800874e:	2301      	movs	r3, #1
 8008750:	74fb      	strb	r3, [r7, #19]
 8008752:	e016      	b.n	8008782 <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 8008754:	7cfb      	ldrb	r3, [r7, #19]
 8008756:	005b      	lsls	r3, r3, #1
 8008758:	461a      	mov	r2, r3
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	7f1b      	ldrb	r3, [r3, #28]
 800875e:	4413      	add	r3, r2
 8008760:	68ba      	ldr	r2, [r7, #8]
 8008762:	4413      	add	r3, r2
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	4619      	mov	r1, r3
 8008768:	79fa      	ldrb	r2, [r7, #7]
 800876a:	7cfb      	ldrb	r3, [r7, #19]
 800876c:	1ad3      	subs	r3, r2, r3
 800876e:	00db      	lsls	r3, r3, #3
 8008770:	fa01 f303 	lsl.w	r3, r1, r3
 8008774:	461a      	mov	r2, r3
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	4313      	orrs	r3, r2
 800877a:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 800877c:	7cfb      	ldrb	r3, [r7, #19]
 800877e:	3301      	adds	r3, #1
 8008780:	74fb      	strb	r3, [r7, #19]
 8008782:	7cfb      	ldrb	r3, [r7, #19]
 8008784:	2b03      	cmp	r3, #3
 8008786:	d9e5      	bls.n	8008754 <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 8008788:	697b      	ldr	r3, [r7, #20]
}
 800878a:	4618      	mov	r0, r3
 800878c:	371c      	adds	r7, #28
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr
	...

08008798 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	460b      	mov	r3, r1
 80087a2:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 80087a4:	2300      	movs	r3, #0
 80087a6:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2118      	movs	r1, #24
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	4798      	blx	r3
 80087b8:	4602      	mov	r2, r0
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087be:	b292      	uxth	r2, r2
 80087c0:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 80087c2:	78fb      	ldrb	r3, [r7, #3]
 80087c4:	2b0e      	cmp	r3, #14
 80087c6:	f200 8099 	bhi.w	80088fc <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
 80087ca:	a201      	add	r2, pc, #4	@ (adr r2, 80087d0 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x38>)
 80087cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d0:	0800880d 	.word	0x0800880d
 80087d4:	0800881d 	.word	0x0800881d
 80087d8:	0800882d 	.word	0x0800882d
 80087dc:	0800883d 	.word	0x0800883d
 80087e0:	0800884d 	.word	0x0800884d
 80087e4:	0800885d 	.word	0x0800885d
 80087e8:	0800886d 	.word	0x0800886d
 80087ec:	0800887d 	.word	0x0800887d
 80087f0:	0800888d 	.word	0x0800888d
 80087f4:	0800889d 	.word	0x0800889d
 80087f8:	080088ad 	.word	0x080088ad
 80087fc:	080088bd 	.word	0x080088bd
 8008800:	080088cd 	.word	0x080088cd
 8008804:	080088dd 	.word	0x080088dd
 8008808:	080088ed 	.word	0x080088ed
      state = pL6470_StatusRegister->HiZ;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008816:	b2db      	uxtb	r3, r3
 8008818:	73fb      	strb	r3, [r7, #15]
      break;
 800881a:	e06f      	b.n	80088fc <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008826:	b2db      	uxtb	r3, r3
 8008828:	73fb      	strb	r3, [r7, #15]
      break;
 800882a:	e067      	b.n	80088fc <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008836:	b2db      	uxtb	r3, r3
 8008838:	73fb      	strb	r3, [r7, #15]
      break;
 800883a:	e05f      	b.n	80088fc <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008846:	b2db      	uxtb	r3, r3
 8008848:	73fb      	strb	r3, [r7, #15]
      break;
 800884a:	e057      	b.n	80088fc <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008856:	b2db      	uxtb	r3, r3
 8008858:	73fb      	strb	r3, [r7, #15]
      break;
 800885a:	e04f      	b.n	80088fc <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8008866:	b2db      	uxtb	r3, r3
 8008868:	73fb      	strb	r3, [r7, #15]
      break;
 800886a:	e047      	b.n	80088fc <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008876:	b2db      	uxtb	r3, r3
 8008878:	73fb      	strb	r3, [r7, #15]
      break;
 800887a:	e03f      	b.n	80088fc <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008880:	785b      	ldrb	r3, [r3, #1]
 8008882:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008886:	b2db      	uxtb	r3, r3
 8008888:	73fb      	strb	r3, [r7, #15]
      break;
 800888a:	e037      	b.n	80088fc <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008890:	785b      	ldrb	r3, [r3, #1]
 8008892:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008896:	b2db      	uxtb	r3, r3
 8008898:	73fb      	strb	r3, [r7, #15]
      break;
 800889a:	e02f      	b.n	80088fc <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088a0:	785b      	ldrb	r3, [r3, #1]
 80088a2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	73fb      	strb	r3, [r7, #15]
      break;
 80088aa:	e027      	b.n	80088fc <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088b0:	785b      	ldrb	r3, [r3, #1]
 80088b2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	73fb      	strb	r3, [r7, #15]
      break;
 80088ba:	e01f      	b.n	80088fc <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088c0:	785b      	ldrb	r3, [r3, #1]
 80088c2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	73fb      	strb	r3, [r7, #15]
      break;
 80088ca:	e017      	b.n	80088fc <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088d0:	785b      	ldrb	r3, [r3, #1]
 80088d2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	73fb      	strb	r3, [r7, #15]
      break;
 80088da:	e00f      	b.n	80088fc <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088e0:	785b      	ldrb	r3, [r3, #1]
 80088e2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	73fb      	strb	r3, [r7, #15]
      break;
 80088ea:	e007      	b.n	80088fc <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088f0:	785b      	ldrb	r3, [r3, #1]
 80088f2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	73fb      	strb	r3, [r7, #15]
      break;
 80088fa:	bf00      	nop
  return state;
 80088fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop

08008908 <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	460b      	mov	r3, r1
 8008912:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 8008914:	78fb      	ldrb	r3, [r7, #3]
 8008916:	2b18      	cmp	r3, #24
 8008918:	d809      	bhi.n	800892e <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a19      	ldr	r1, [r3, #32]
 800891e:	78fa      	ldrb	r2, [r7, #3]
 8008920:	4613      	mov	r3, r2
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	4413      	add	r3, r2
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	440b      	add	r3, r1
 800892a:	3301      	adds	r3, #1
 800892c:	e000      	b.n	8008930 <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 8008946:	2300      	movs	r3, #0
 8008948:	73fb      	strb	r3, [r7, #15]
 800894a:	e01a      	b.n	8008982 <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 800894c:	7bfb      	ldrb	r3, [r7, #15]
 800894e:	011b      	lsls	r3, r3, #4
 8008950:	683a      	ldr	r2, [r7, #0]
 8008952:	4413      	add	r3, r2
 8008954:	2200      	movs	r2, #0
 8008956:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 8008958:	7bfb      	ldrb	r3, [r7, #15]
 800895a:	011b      	lsls	r3, r3, #4
 800895c:	683a      	ldr	r2, [r7, #0]
 800895e:	4413      	add	r3, r2
 8008960:	2200      	movs	r2, #0
 8008962:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 8008964:	7bfb      	ldrb	r3, [r7, #15]
 8008966:	011b      	lsls	r3, r3, #4
 8008968:	683a      	ldr	r2, [r7, #0]
 800896a:	4413      	add	r3, r2
 800896c:	2200      	movs	r2, #0
 800896e:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 8008970:	7bfb      	ldrb	r3, [r7, #15]
 8008972:	011b      	lsls	r3, r3, #4
 8008974:	683a      	ldr	r2, [r7, #0]
 8008976:	4413      	add	r3, r2
 8008978:	2200      	movs	r2, #0
 800897a:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 800897c:	7bfb      	ldrb	r3, [r7, #15]
 800897e:	3301      	adds	r3, #1
 8008980:	73fb      	strb	r3, [r7, #15]
 8008982:	7bfb      	ldrb	r3, [r7, #15]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d9e1      	bls.n	800894c <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 8008988:	bf00      	nop
 800898a:	bf00      	nop
 800898c:	3714      	adds	r7, #20
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr

08008996 <_ZN5L6470I8shield_2E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 8008996:	b480      	push	{r7}
 8008998:	b085      	sub	sp, #20
 800899a:	af00      	add	r7, sp, #0
 800899c:	60f8      	str	r0, [r7, #12]
 800899e:	60b9      	str	r1, [r7, #8]
 80089a0:	603b      	str	r3, [r7, #0]
 80089a2:	4613      	mov	r3, r2
 80089a4:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	7f1b      	ldrb	r3, [r3, #28]
 80089aa:	011b      	lsls	r3, r3, #4
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	4413      	add	r3, r2
 80089b0:	79fa      	ldrb	r2, [r7, #7]
 80089b2:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	7f1b      	ldrb	r3, [r3, #28]
 80089b8:	011b      	lsls	r3, r3, #4
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	4413      	add	r3, r2
 80089be:	683a      	ldr	r2, [r7, #0]
 80089c0:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	7f1b      	ldrb	r3, [r3, #28]
 80089c6:	011b      	lsls	r3, r3, #4
 80089c8:	68ba      	ldr	r2, [r7, #8]
 80089ca:	4413      	add	r3, r2
 80089cc:	69ba      	ldr	r2, [r7, #24]
 80089ce:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	7f1b      	ldrb	r3, [r3, #28]
 80089d4:	011b      	lsls	r3, r3, #4
 80089d6:	68ba      	ldr	r2, [r7, #8]
 80089d8:	4413      	add	r3, r2
 80089da:	69fa      	ldr	r2, [r7, #28]
 80089dc:	60da      	str	r2, [r3, #12]
}
 80089de:	bf00      	nop
 80089e0:	3714      	adds	r7, #20
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr
	...

080089ec <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 80089ec:	b590      	push	{r4, r7, lr}
 80089ee:	b087      	sub	sp, #28
 80089f0:	af02      	add	r7, sp, #8
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	603b      	str	r3, [r7, #0]
 80089f8:	4613      	mov	r3, r2
 80089fa:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 80089fc:	4b10      	ldr	r3, [pc, #64]	@ (8008a40 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d10a      	bne.n	8008a1a <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8008a04:	4b0e      	ldr	r3, [pc, #56]	@ (8008a40 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 8008a06:	2201      	movs	r2, #1
 8008a08:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	68b9      	ldr	r1, [r7, #8]
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8008a22:	681c      	ldr	r4, [r3, #0]
 8008a24:	79fa      	ldrb	r2, [r7, #7]
 8008a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a28:	9301      	str	r3, [sp, #4]
 8008a2a:	6a3b      	ldr	r3, [r7, #32]
 8008a2c:	9300      	str	r3, [sp, #0]
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	68b9      	ldr	r1, [r7, #8]
 8008a32:	68f8      	ldr	r0, [r7, #12]
 8008a34:	47a0      	blx	r4
}
 8008a36:	bf00      	nop
 8008a38:	3714      	adds	r7, #20
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd90      	pop	{r4, r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	20000241 	.word	0x20000241

08008a44 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 8008a44:	b480      	push	{r7}
 8008a46:	b087      	sub	sp, #28
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 8008a50:	2300      	movs	r3, #0
 8008a52:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8008a54:	2300      	movs	r3, #0
 8008a56:	75bb      	strb	r3, [r7, #22]
 8008a58:	e013      	b.n	8008a82 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	75fb      	strb	r3, [r7, #23]
 8008a5e:	e00a      	b.n	8008a76 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 8008a60:	7d7b      	ldrb	r3, [r7, #21]
 8008a62:	1c5a      	adds	r2, r3, #1
 8008a64:	757a      	strb	r2, [r7, #21]
 8008a66:	461a      	mov	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8008a70:	7dfb      	ldrb	r3, [r7, #23]
 8008a72:	3301      	adds	r3, #1
 8008a74:	75fb      	strb	r3, [r7, #23]
 8008a76:	7dfb      	ldrb	r3, [r7, #23]
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d9f1      	bls.n	8008a60 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8008a7c:	7dbb      	ldrb	r3, [r7, #22]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	75bb      	strb	r3, [r7, #22]
 8008a82:	7dbb      	ldrb	r3, [r7, #22]
 8008a84:	2b03      	cmp	r3, #3
 8008a86:	d9e8      	bls.n	8008a5a <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8008a88:	2300      	movs	r3, #0
 8008a8a:	75fb      	strb	r3, [r7, #23]
 8008a8c:	e1f1      	b.n	8008e72 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a92:	7dfb      	ldrb	r3, [r7, #23]
 8008a94:	011b      	lsls	r3, r3, #4
 8008a96:	68b9      	ldr	r1, [r7, #8]
 8008a98:	440b      	add	r3, r1
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	00db      	lsls	r3, r3, #3
 8008aa2:	1a5b      	subs	r3, r3, r1
 8008aa4:	005b      	lsls	r3, r3, #1
 8008aa6:	441a      	add	r2, r3
 8008aa8:	7dfb      	ldrb	r3, [r7, #23]
 8008aaa:	6879      	ldr	r1, [r7, #4]
 8008aac:	440b      	add	r3, r1
 8008aae:	7b12      	ldrb	r2, [r2, #12]
 8008ab0:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 8008ab2:	7dfb      	ldrb	r3, [r7, #23]
 8008ab4:	011b      	lsls	r3, r3, #4
 8008ab6:	68ba      	ldr	r2, [r7, #8]
 8008ab8:	4413      	add	r3, r2
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	2b12      	cmp	r3, #18
 8008abe:	f200 81d5 	bhi.w	8008e6c <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 8008ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ac8 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 8008ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac8:	08008e6d 	.word	0x08008e6d
 8008acc:	08008b15 	.word	0x08008b15
 8008ad0:	08008b9d 	.word	0x08008b9d
 8008ad4:	08008bcd 	.word	0x08008bcd
 8008ad8:	08008c35 	.word	0x08008c35
 8008adc:	08008c63 	.word	0x08008c63
 8008ae0:	08008ccb 	.word	0x08008ccb
 8008ae4:	08008d07 	.word	0x08008d07
 8008ae8:	08008d6f 	.word	0x08008d6f
 8008aec:	08008e0b 	.word	0x08008e0b
 8008af0:	08008e6d 	.word	0x08008e6d
 8008af4:	08008e6d 	.word	0x08008e6d
 8008af8:	08008e6d 	.word	0x08008e6d
 8008afc:	08008e6d 	.word	0x08008e6d
 8008b00:	08008e6d 	.word	0x08008e6d
 8008b04:	08008e6d 	.word	0x08008e6d
 8008b08:	08008e6d 	.word	0x08008e6d
 8008b0c:	08008e6d 	.word	0x08008e6d
 8008b10:	08008e6d 	.word	0x08008e6d
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8008b14:	7dfb      	ldrb	r3, [r7, #23]
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	4413      	add	r3, r2
 8008b1a:	7819      	ldrb	r1, [r3, #0]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6a18      	ldr	r0, [r3, #32]
 8008b20:	7dfb      	ldrb	r3, [r7, #23]
 8008b22:	011b      	lsls	r3, r3, #4
 8008b24:	68ba      	ldr	r2, [r7, #8]
 8008b26:	4413      	add	r3, r2
 8008b28:	685a      	ldr	r2, [r3, #4]
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	4413      	add	r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	4403      	add	r3, r0
 8008b34:	781a      	ldrb	r2, [r3, #0]
 8008b36:	7dfb      	ldrb	r3, [r7, #23]
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	4403      	add	r3, r0
 8008b3c:	430a      	orrs	r2, r1
 8008b3e:	b2d2      	uxtb	r2, r2
 8008b40:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	6a19      	ldr	r1, [r3, #32]
 8008b46:	7dfb      	ldrb	r3, [r7, #23]
 8008b48:	011b      	lsls	r3, r3, #4
 8008b4a:	68ba      	ldr	r2, [r7, #8]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	685a      	ldr	r2, [r3, #4]
 8008b50:	4613      	mov	r3, r2
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	4413      	add	r3, r2
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	440b      	add	r3, r1
 8008b5a:	7b9b      	ldrb	r3, [r3, #14]
 8008b5c:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8008b5e:	2301      	movs	r3, #1
 8008b60:	75bb      	strb	r3, [r7, #22]
 8008b62:	e016      	b.n	8008b92 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 8008b64:	7dfb      	ldrb	r3, [r7, #23]
 8008b66:	011b      	lsls	r3, r3, #4
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	4413      	add	r3, r2
 8008b6c:	689a      	ldr	r2, [r3, #8]
 8008b6e:	7d39      	ldrb	r1, [r7, #20]
 8008b70:	7dbb      	ldrb	r3, [r7, #22]
 8008b72:	1acb      	subs	r3, r1, r3
 8008b74:	00db      	lsls	r3, r3, #3
 8008b76:	fa22 f103 	lsr.w	r1, r2, r3
 8008b7a:	7dbb      	ldrb	r3, [r7, #22]
 8008b7c:	005a      	lsls	r2, r3, #1
 8008b7e:	7dfb      	ldrb	r3, [r7, #23]
 8008b80:	4413      	add	r3, r2
 8008b82:	461a      	mov	r2, r3
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4413      	add	r3, r2
 8008b88:	b2ca      	uxtb	r2, r1
 8008b8a:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8008b8c:	7dbb      	ldrb	r3, [r7, #22]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	75bb      	strb	r3, [r7, #22]
 8008b92:	7d3a      	ldrb	r2, [r7, #20]
 8008b94:	7dbb      	ldrb	r3, [r7, #22]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d2e4      	bcs.n	8008b64 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 8008b9a:	e167      	b.n	8008e6c <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8008b9c:	7dfb      	ldrb	r3, [r7, #23]
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	7819      	ldrb	r1, [r3, #0]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6a18      	ldr	r0, [r3, #32]
 8008ba8:	7dfb      	ldrb	r3, [r7, #23]
 8008baa:	011b      	lsls	r3, r3, #4
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	4413      	add	r3, r2
 8008bb0:	685a      	ldr	r2, [r3, #4]
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	4413      	add	r3, r2
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	4403      	add	r3, r0
 8008bbc:	781a      	ldrb	r2, [r3, #0]
 8008bbe:	7dfb      	ldrb	r3, [r7, #23]
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	4403      	add	r3, r0
 8008bc4:	430a      	orrs	r2, r1
 8008bc6:	b2d2      	uxtb	r2, r2
 8008bc8:	701a      	strb	r2, [r3, #0]
      break;
 8008bca:	e14f      	b.n	8008e6c <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008bcc:	7dfb      	ldrb	r3, [r7, #23]
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	7819      	ldrb	r1, [r3, #0]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008bd8:	7dfb      	ldrb	r3, [r7, #23]
 8008bda:	011b      	lsls	r3, r3, #4
 8008bdc:	68ba      	ldr	r2, [r7, #8]
 8008bde:	4413      	add	r3, r2
 8008be0:	685a      	ldr	r2, [r3, #4]
 8008be2:	4613      	mov	r3, r2
 8008be4:	00db      	lsls	r3, r3, #3
 8008be6:	4413      	add	r3, r2
 8008be8:	4403      	add	r3, r0
 8008bea:	7a1a      	ldrb	r2, [r3, #8]
 8008bec:	7dfb      	ldrb	r3, [r7, #23]
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	4403      	add	r3, r0
 8008bf2:	430a      	orrs	r2, r1
 8008bf4:	b2d2      	uxtb	r2, r2
 8008bf6:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	75bb      	strb	r3, [r7, #22]
 8008bfc:	e016      	b.n	8008c2c <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8008bfe:	7dfb      	ldrb	r3, [r7, #23]
 8008c00:	011b      	lsls	r3, r3, #4
 8008c02:	68ba      	ldr	r2, [r7, #8]
 8008c04:	4413      	add	r3, r2
 8008c06:	689a      	ldr	r2, [r3, #8]
 8008c08:	7dbb      	ldrb	r3, [r7, #22]
 8008c0a:	f1c3 0303 	rsb	r3, r3, #3
 8008c0e:	00db      	lsls	r3, r3, #3
 8008c10:	fa22 f103 	lsr.w	r1, r2, r3
 8008c14:	7dbb      	ldrb	r3, [r7, #22]
 8008c16:	005a      	lsls	r2, r3, #1
 8008c18:	7dfb      	ldrb	r3, [r7, #23]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4413      	add	r3, r2
 8008c22:	b2ca      	uxtb	r2, r1
 8008c24:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008c26:	7dbb      	ldrb	r3, [r7, #22]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	75bb      	strb	r3, [r7, #22]
 8008c2c:	7dbb      	ldrb	r3, [r7, #22]
 8008c2e:	2b03      	cmp	r3, #3
 8008c30:	d9e5      	bls.n	8008bfe <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 8008c32:	e11b      	b.n	8008e6c <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008c34:	7dfb      	ldrb	r3, [r7, #23]
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	4413      	add	r3, r2
 8008c3a:	7819      	ldrb	r1, [r3, #0]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008c40:	7dfb      	ldrb	r3, [r7, #23]
 8008c42:	011b      	lsls	r3, r3, #4
 8008c44:	68ba      	ldr	r2, [r7, #8]
 8008c46:	4413      	add	r3, r2
 8008c48:	685a      	ldr	r2, [r3, #4]
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	00db      	lsls	r3, r3, #3
 8008c4e:	4413      	add	r3, r2
 8008c50:	4403      	add	r3, r0
 8008c52:	7a1a      	ldrb	r2, [r3, #8]
 8008c54:	7dfb      	ldrb	r3, [r7, #23]
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	4403      	add	r3, r0
 8008c5a:	430a      	orrs	r2, r1
 8008c5c:	b2d2      	uxtb	r2, r2
 8008c5e:	701a      	strb	r2, [r3, #0]
      break;
 8008c60:	e104      	b.n	8008e6c <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008c62:	7dfb      	ldrb	r3, [r7, #23]
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	4413      	add	r3, r2
 8008c68:	7819      	ldrb	r1, [r3, #0]
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008c6e:	7dfb      	ldrb	r3, [r7, #23]
 8008c70:	011b      	lsls	r3, r3, #4
 8008c72:	68ba      	ldr	r2, [r7, #8]
 8008c74:	4413      	add	r3, r2
 8008c76:	685a      	ldr	r2, [r3, #4]
 8008c78:	4613      	mov	r3, r2
 8008c7a:	00db      	lsls	r3, r3, #3
 8008c7c:	4413      	add	r3, r2
 8008c7e:	4403      	add	r3, r0
 8008c80:	7a1a      	ldrb	r2, [r3, #8]
 8008c82:	7dfb      	ldrb	r3, [r7, #23]
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	4403      	add	r3, r0
 8008c88:	430a      	orrs	r2, r1
 8008c8a:	b2d2      	uxtb	r2, r2
 8008c8c:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008c8e:	2301      	movs	r3, #1
 8008c90:	75bb      	strb	r3, [r7, #22]
 8008c92:	e016      	b.n	8008cc2 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8008c94:	7dfb      	ldrb	r3, [r7, #23]
 8008c96:	011b      	lsls	r3, r3, #4
 8008c98:	68ba      	ldr	r2, [r7, #8]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	689a      	ldr	r2, [r3, #8]
 8008c9e:	7dbb      	ldrb	r3, [r7, #22]
 8008ca0:	f1c3 0303 	rsb	r3, r3, #3
 8008ca4:	00db      	lsls	r3, r3, #3
 8008ca6:	fa22 f103 	lsr.w	r1, r2, r3
 8008caa:	7dbb      	ldrb	r3, [r7, #22]
 8008cac:	005a      	lsls	r2, r3, #1
 8008cae:	7dfb      	ldrb	r3, [r7, #23]
 8008cb0:	4413      	add	r3, r2
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	b2ca      	uxtb	r2, r1
 8008cba:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008cbc:	7dbb      	ldrb	r3, [r7, #22]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	75bb      	strb	r3, [r7, #22]
 8008cc2:	7dbb      	ldrb	r3, [r7, #22]
 8008cc4:	2b03      	cmp	r3, #3
 8008cc6:	d9e5      	bls.n	8008c94 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 8008cc8:	e0d0      	b.n	8008e6c <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008cca:	2301      	movs	r3, #1
 8008ccc:	75bb      	strb	r3, [r7, #22]
 8008cce:	e016      	b.n	8008cfe <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 8008cd0:	7dfb      	ldrb	r3, [r7, #23]
 8008cd2:	011b      	lsls	r3, r3, #4
 8008cd4:	68ba      	ldr	r2, [r7, #8]
 8008cd6:	4413      	add	r3, r2
 8008cd8:	685a      	ldr	r2, [r3, #4]
 8008cda:	7dbb      	ldrb	r3, [r7, #22]
 8008cdc:	f1c3 0303 	rsb	r3, r3, #3
 8008ce0:	00db      	lsls	r3, r3, #3
 8008ce2:	fa22 f103 	lsr.w	r1, r2, r3
 8008ce6:	7dbb      	ldrb	r3, [r7, #22]
 8008ce8:	005a      	lsls	r2, r3, #1
 8008cea:	7dfb      	ldrb	r3, [r7, #23]
 8008cec:	4413      	add	r3, r2
 8008cee:	461a      	mov	r2, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	b2ca      	uxtb	r2, r1
 8008cf6:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008cf8:	7dbb      	ldrb	r3, [r7, #22]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	75bb      	strb	r3, [r7, #22]
 8008cfe:	7dbb      	ldrb	r3, [r7, #22]
 8008d00:	2b03      	cmp	r3, #3
 8008d02:	d9e5      	bls.n	8008cd0 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 8008d04:	e0b2      	b.n	8008e6c <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008d06:	7dfb      	ldrb	r3, [r7, #23]
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	7819      	ldrb	r1, [r3, #0]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008d12:	7dfb      	ldrb	r3, [r7, #23]
 8008d14:	011b      	lsls	r3, r3, #4
 8008d16:	68ba      	ldr	r2, [r7, #8]
 8008d18:	4413      	add	r3, r2
 8008d1a:	685a      	ldr	r2, [r3, #4]
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	00db      	lsls	r3, r3, #3
 8008d20:	4413      	add	r3, r2
 8008d22:	4403      	add	r3, r0
 8008d24:	7a1a      	ldrb	r2, [r3, #8]
 8008d26:	7dfb      	ldrb	r3, [r7, #23]
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	4403      	add	r3, r0
 8008d2c:	430a      	orrs	r2, r1
 8008d2e:	b2d2      	uxtb	r2, r2
 8008d30:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008d32:	2301      	movs	r3, #1
 8008d34:	75bb      	strb	r3, [r7, #22]
 8008d36:	e016      	b.n	8008d66 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8008d38:	7dfb      	ldrb	r3, [r7, #23]
 8008d3a:	011b      	lsls	r3, r3, #4
 8008d3c:	68ba      	ldr	r2, [r7, #8]
 8008d3e:	4413      	add	r3, r2
 8008d40:	689a      	ldr	r2, [r3, #8]
 8008d42:	7dbb      	ldrb	r3, [r7, #22]
 8008d44:	f1c3 0303 	rsb	r3, r3, #3
 8008d48:	00db      	lsls	r3, r3, #3
 8008d4a:	fa22 f103 	lsr.w	r1, r2, r3
 8008d4e:	7dbb      	ldrb	r3, [r7, #22]
 8008d50:	005a      	lsls	r2, r3, #1
 8008d52:	7dfb      	ldrb	r3, [r7, #23]
 8008d54:	4413      	add	r3, r2
 8008d56:	461a      	mov	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	b2ca      	uxtb	r2, r1
 8008d5e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008d60:	7dbb      	ldrb	r3, [r7, #22]
 8008d62:	3301      	adds	r3, #1
 8008d64:	75bb      	strb	r3, [r7, #22]
 8008d66:	7dbb      	ldrb	r3, [r7, #22]
 8008d68:	2b03      	cmp	r3, #3
 8008d6a:	d9e5      	bls.n	8008d38 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 8008d6c:	e07e      	b.n	8008e6c <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8008d6e:	7dfb      	ldrb	r3, [r7, #23]
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	4413      	add	r3, r2
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	b259      	sxtb	r1, r3
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008d7c:	7dfb      	ldrb	r3, [r7, #23]
 8008d7e:	011b      	lsls	r3, r3, #4
 8008d80:	68ba      	ldr	r2, [r7, #8]
 8008d82:	4413      	add	r3, r2
 8008d84:	685a      	ldr	r2, [r3, #4]
 8008d86:	4613      	mov	r3, r2
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	4413      	add	r3, r2
 8008d8c:	4403      	add	r3, r0
 8008d8e:	791b      	ldrb	r3, [r3, #4]
 8008d90:	00db      	lsls	r3, r3, #3
 8008d92:	b25b      	sxtb	r3, r3
 8008d94:	430b      	orrs	r3, r1
 8008d96:	b259      	sxtb	r1, r3
 8008d98:	7dfb      	ldrb	r3, [r7, #23]
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	b2ca      	uxtb	r2, r1
 8008da0:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8008da2:	7dfb      	ldrb	r3, [r7, #23]
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	4413      	add	r3, r2
 8008da8:	7819      	ldrb	r1, [r3, #0]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008dae:	7dfb      	ldrb	r3, [r7, #23]
 8008db0:	011b      	lsls	r3, r3, #4
 8008db2:	68ba      	ldr	r2, [r7, #8]
 8008db4:	4413      	add	r3, r2
 8008db6:	689a      	ldr	r2, [r3, #8]
 8008db8:	4613      	mov	r3, r2
 8008dba:	00db      	lsls	r3, r3, #3
 8008dbc:	4413      	add	r3, r2
 8008dbe:	4403      	add	r3, r0
 8008dc0:	7a1a      	ldrb	r2, [r3, #8]
 8008dc2:	7dfb      	ldrb	r3, [r7, #23]
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	4403      	add	r3, r0
 8008dc8:	430a      	orrs	r2, r1
 8008dca:	b2d2      	uxtb	r2, r2
 8008dcc:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008dce:	2301      	movs	r3, #1
 8008dd0:	75bb      	strb	r3, [r7, #22]
 8008dd2:	e016      	b.n	8008e02 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 8008dd4:	7dfb      	ldrb	r3, [r7, #23]
 8008dd6:	011b      	lsls	r3, r3, #4
 8008dd8:	68ba      	ldr	r2, [r7, #8]
 8008dda:	4413      	add	r3, r2
 8008ddc:	68da      	ldr	r2, [r3, #12]
 8008dde:	7dbb      	ldrb	r3, [r7, #22]
 8008de0:	f1c3 0303 	rsb	r3, r3, #3
 8008de4:	00db      	lsls	r3, r3, #3
 8008de6:	fa22 f103 	lsr.w	r1, r2, r3
 8008dea:	7dbb      	ldrb	r3, [r7, #22]
 8008dec:	005a      	lsls	r2, r3, #1
 8008dee:	7dfb      	ldrb	r3, [r7, #23]
 8008df0:	4413      	add	r3, r2
 8008df2:	461a      	mov	r2, r3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4413      	add	r3, r2
 8008df8:	b2ca      	uxtb	r2, r1
 8008dfa:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008dfc:	7dbb      	ldrb	r3, [r7, #22]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	75bb      	strb	r3, [r7, #22]
 8008e02:	7dbb      	ldrb	r3, [r7, #22]
 8008e04:	2b03      	cmp	r3, #3
 8008e06:	d9e5      	bls.n	8008dd4 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 8008e08:	e030      	b.n	8008e6c <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8008e0a:	7dfb      	ldrb	r3, [r7, #23]
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	4413      	add	r3, r2
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	b259      	sxtb	r1, r3
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008e18:	7dfb      	ldrb	r3, [r7, #23]
 8008e1a:	011b      	lsls	r3, r3, #4
 8008e1c:	68ba      	ldr	r2, [r7, #8]
 8008e1e:	4413      	add	r3, r2
 8008e20:	685a      	ldr	r2, [r3, #4]
 8008e22:	4613      	mov	r3, r2
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	4413      	add	r3, r2
 8008e28:	4403      	add	r3, r0
 8008e2a:	791b      	ldrb	r3, [r3, #4]
 8008e2c:	00db      	lsls	r3, r3, #3
 8008e2e:	b25b      	sxtb	r3, r3
 8008e30:	430b      	orrs	r3, r1
 8008e32:	b259      	sxtb	r1, r3
 8008e34:	7dfb      	ldrb	r3, [r7, #23]
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	4413      	add	r3, r2
 8008e3a:	b2ca      	uxtb	r2, r1
 8008e3c:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8008e3e:	7dfb      	ldrb	r3, [r7, #23]
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	4413      	add	r3, r2
 8008e44:	7819      	ldrb	r1, [r3, #0]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008e4a:	7dfb      	ldrb	r3, [r7, #23]
 8008e4c:	011b      	lsls	r3, r3, #4
 8008e4e:	68ba      	ldr	r2, [r7, #8]
 8008e50:	4413      	add	r3, r2
 8008e52:	689a      	ldr	r2, [r3, #8]
 8008e54:	4613      	mov	r3, r2
 8008e56:	00db      	lsls	r3, r3, #3
 8008e58:	4413      	add	r3, r2
 8008e5a:	4403      	add	r3, r0
 8008e5c:	7a1a      	ldrb	r2, [r3, #8]
 8008e5e:	7dfb      	ldrb	r3, [r7, #23]
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	4403      	add	r3, r0
 8008e64:	430a      	orrs	r2, r1
 8008e66:	b2d2      	uxtb	r2, r2
 8008e68:	701a      	strb	r2, [r3, #0]
      break;
 8008e6a:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8008e6c:	7dfb      	ldrb	r3, [r7, #23]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	75fb      	strb	r3, [r7, #23]
 8008e72:	7dfb      	ldrb	r3, [r7, #23]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	f67f ae0a 	bls.w	8008a8e <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 8008e7a:	bf00      	nop
 8008e7c:	bf00      	nop
 8008e7e:	371c      	adds	r7, #28
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <_ZN5L6470I8shield_2E11L6470_roundEf>:
    int L6470_round(float f)
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	ed87 0a00 	vstr	s0, [r7]
        if (f >= 0) {
 8008e94:	edd7 7a00 	vldr	s15, [r7]
 8008e98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ea0:	db1e      	blt.n	8008ee0 <_ZN5L6470I8shield_2E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 8008ea2:	edd7 7a00 	vldr	s15, [r7]
 8008ea6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008eaa:	ee17 2a90 	vmov	r2, s15
 8008eae:	edd7 7a00 	vldr	s15, [r7]
 8008eb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008eb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008eba:	ed97 7a00 	vldr	s14, [r7]
 8008ebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ec2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8008ec6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ece:	bf4c      	ite	mi
 8008ed0:	2301      	movmi	r3, #1
 8008ed2:	2300      	movpl	r3, #0
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	f083 0301 	eor.w	r3, r3, #1
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	4413      	add	r3, r2
 8008ede:	e01a      	b.n	8008f16 <_ZN5L6470I8shield_2E11L6470_roundEf+0x8e>
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 8008ee0:	edd7 7a00 	vldr	s15, [r7]
 8008ee4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ee8:	ee17 2a90 	vmov	r2, s15
 8008eec:	edd7 7a00 	vldr	s15, [r7]
 8008ef0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ef4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ef8:	ed97 7a00 	vldr	s14, [r7]
 8008efc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f00:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8008f04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f0c:	d501      	bpl.n	8008f12 <_ZN5L6470I8shield_2E11L6470_roundEf+0x8a>
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e000      	b.n	8008f14 <_ZN5L6470I8shield_2E11L6470_roundEf+0x8c>
 8008f12:	2300      	movs	r3, #0
 8008f14:	1ad3      	subs	r3, r2, r3
    }
 8008f16:	4618      	mov	r0, r3
 8008f18:	370c      	adds	r7, #12
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr

08008f22 <_ZN5L6470I8shield_2E4ReadEPht>:
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b086      	sub	sp, #24
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	60f8      	str	r0, [r7, #12]
 8008f2a:	60b9      	str	r1, [r7, #8]
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6918      	ldr	r0, [r3, #16]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	8a9b      	ldrh	r3, [r3, #20]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	f004 fb3a 	bl	800d5b4 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6998      	ldr	r0, [r3, #24]
 8008f44:	88fa      	ldrh	r2, [r7, #6]
 8008f46:	2364      	movs	r3, #100	@ 0x64
 8008f48:	68b9      	ldr	r1, [r7, #8]
 8008f4a:	f005 fb4a 	bl	800e5e2 <HAL_SPI_Receive>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6918      	ldr	r0, [r3, #16]
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	8a9b      	ldrh	r3, [r3, #20]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	f004 fb29 	bl	800d5b4 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8008f62:	7dfb      	ldrb	r3, [r7, #23]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d001      	beq.n	8008f6c <_ZN5L6470I8shield_2E4ReadEPht+0x4a>
        	return COMPONENT_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e000      	b.n	8008f6e <_ZN5L6470I8shield_2E4ReadEPht+0x4c>
        return COMPONENT_OK;
 8008f6c:	2300      	movs	r3, #0
    }
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3718      	adds	r7, #24
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <_ZN5L6470I8shield_2E5WriteEPht>:
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b086      	sub	sp, #24
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	60f8      	str	r0, [r7, #12]
 8008f7e:	60b9      	str	r1, [r7, #8]
 8008f80:	4613      	mov	r3, r2
 8008f82:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6918      	ldr	r0, [r3, #16]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	8a9b      	ldrh	r3, [r3, #20]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	4619      	mov	r1, r3
 8008f90:	f004 fb10 	bl	800d5b4 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	6998      	ldr	r0, [r3, #24]
 8008f98:	88fa      	ldrh	r2, [r7, #6]
 8008f9a:	2364      	movs	r3, #100	@ 0x64
 8008f9c:	68b9      	ldr	r1, [r7, #8]
 8008f9e:	f005 f9e4 	bl	800e36a <HAL_SPI_Transmit>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	6918      	ldr	r0, [r3, #16]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	8a9b      	ldrh	r3, [r3, #20]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	f004 faff 	bl	800d5b4 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8008fb6:	7dfb      	ldrb	r3, [r7, #23]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d001      	beq.n	8008fc0 <_ZN5L6470I8shield_2E5WriteEPht+0x4a>
        	return COMPONENT_ERROR;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e000      	b.n	8008fc2 <_ZN5L6470I8shield_2E5WriteEPht+0x4c>
        return COMPONENT_OK;
 8008fc0:	2300      	movs	r3, #0
    }
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3718      	adds	r7, #24
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t>:
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b088      	sub	sp, #32
 8008fce:	af02      	add	r7, sp, #8
 8008fd0:	60f8      	str	r0, [r7, #12]
 8008fd2:	60b9      	str	r1, [r7, #8]
 8008fd4:	607a      	str	r2, [r7, #4]
 8008fd6:	807b      	strh	r3, [r7, #2]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6918      	ldr	r0, [r3, #16]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	8a9b      	ldrh	r3, [r3, #20]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	f004 fae6 	bl	800d5b4 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6998      	ldr	r0, [r3, #24]
 8008fec:	887b      	ldrh	r3, [r7, #2]
 8008fee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008ff2:	9200      	str	r2, [sp, #0]
 8008ff4:	68ba      	ldr	r2, [r7, #8]
 8008ff6:	6879      	ldr	r1, [r7, #4]
 8008ff8:	f005 fc04 	bl	800e804 <HAL_SPI_TransmitReceive>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 8009000:	7dfb      	ldrb	r3, [r7, #23]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d009      	beq.n	800901a <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t+0x50>
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	6918      	ldr	r0, [r3, #16]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	8a9b      	ldrh	r3, [r3, #20]
 800900e:	2201      	movs	r2, #1
 8009010:	4619      	mov	r1, r3
 8009012:	f004 facf 	bl	800d5b4 <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 8009016:	2301      	movs	r3, #1
 8009018:	e008      	b.n	800902c <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t+0x62>
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6918      	ldr	r0, [r3, #16]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	8a9b      	ldrh	r3, [r3, #20]
 8009022:	2201      	movs	r2, #1
 8009024:	4619      	mov	r1, r3
 8009026:	f004 fac5 	bl	800d5b4 <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 800902a:	2300      	movs	r3, #0
    }
 800902c:	4618      	mov	r0, r3
 800902e:	3718      	adds	r7, #24
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <_ZN5L6470I8shield_2E23L6470_SPI_CommunicationEPhS2_tm>:
    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 8009034:	b590      	push	{r4, r7, lr}
 8009036:	b085      	sub	sp, #20
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	607a      	str	r2, [r7, #4]
 8009040:	807b      	strh	r3, [r7, #2]
        ReadWrite(pRxData, pTxData, Size);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800904a:	681c      	ldr	r4, [r3, #0]
 800904c:	887b      	ldrh	r3, [r7, #2]
 800904e:	68ba      	ldr	r2, [r7, #8]
 8009050:	6879      	ldr	r1, [r7, #4]
 8009052:	68f8      	ldr	r0, [r7, #12]
 8009054:	47a0      	blx	r4
    }
 8009056:	bf00      	nop
 8009058:	3714      	adds	r7, #20
 800905a:	46bd      	mov	sp, r7
 800905c:	bd90      	pop	{r4, r7, pc}

0800905e <_ZN5L6470I8shield_1E4initEPv>:
    virtual int init(void *init)
 800905e:	b580      	push	{r7, lr}
 8009060:	b082      	sub	sp, #8
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
 8009066:	6039      	str	r1, [r7, #0]
        return (int) L6470_Config((void *) init);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	6839      	ldr	r1, [r7, #0]
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	4798      	blx	r3
 8009078:	4603      	mov	r3, r0
    }
 800907a:	4618      	mov	r0, r3
 800907c:	3708      	adds	r7, #8
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}

08009082 <_ZN5L6470I8shield_1E10get_statusEv>:
    virtual unsigned int get_status(void)
 8009082:	b580      	push	{r7, lr}
 8009084:	b082      	sub	sp, #8
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
        return (unsigned int) L6470_GetStatus();
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	4798      	blx	r3
 8009098:	4603      	mov	r3, r0
    }
 800909a:	4618      	mov	r0, r3
 800909c:	3708      	adds	r7, #8
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <_ZN5L6470I8shield_1E13get_parameterEj>:
    virtual unsigned int get_parameter(unsigned int parameter)
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b082      	sub	sp, #8
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
 80090aa:	6039      	str	r1, [r7, #0]
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	683a      	ldr	r2, [r7, #0]
 80090b8:	b2d2      	uxtb	r2, r2
 80090ba:	4611      	mov	r1, r2
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	4798      	blx	r3
 80090c0:	4603      	mov	r3, r0
    }
 80090c2:	4618      	mov	r0, r3
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <_ZN5L6470I8shield_1E12get_positionEv>:
    virtual signed int get_position(void)
 80090ca:	b590      	push	{r4, r7, lr}
 80090cc:	b083      	sub	sp, #12
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 80090da:	681c      	ldr	r4, [r3, #0]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2100      	movs	r1, #0
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	4798      	blx	r3
 80090ec:	4603      	mov	r3, r0
 80090ee:	4619      	mov	r1, r3
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	47a0      	blx	r4
 80090f4:	4603      	mov	r3, r0
    }
 80090f6:	4618      	mov	r0, r3
 80090f8:	370c      	adds	r7, #12
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd90      	pop	{r4, r7, pc}

080090fe <_ZN5L6470I8shield_1E8get_markEv>:
    virtual signed int get_mark(void)
 80090fe:	b590      	push	{r4, r7, lr}
 8009100:	b083      	sub	sp, #12
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800910e:	681c      	ldr	r4, [r3, #0]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2102      	movs	r1, #2
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	4798      	blx	r3
 8009120:	4603      	mov	r3, r0
 8009122:	4619      	mov	r1, r3
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	47a0      	blx	r4
 8009128:	4603      	mov	r3, r0
    }
 800912a:	4618      	mov	r0, r3
 800912c:	370c      	adds	r7, #12
 800912e:	46bd      	mov	sp, r7
 8009130:	bd90      	pop	{r4, r7, pc}

08009132 <_ZN5L6470I8shield_1E9get_speedEv>:
    virtual unsigned int get_speed(void)
 8009132:	b5b0      	push	{r4, r5, r7, lr}
 8009134:	b082      	sub	sp, #8
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009142:	681c      	ldr	r4, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800914c:	681d      	ldr	r5, [r3, #0]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2103      	movs	r1, #3
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	4798      	blx	r3
 800915e:	4603      	mov	r3, r0
 8009160:	4619      	mov	r1, r3
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	47a8      	blx	r5
 8009166:	eef0 7a40 	vmov.f32	s15, s0
 800916a:	eeb0 0a67 	vmov.f32	s0, s15
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	47a0      	blx	r4
 8009172:	4603      	mov	r3, r0
    }
 8009174:	4618      	mov	r0, r3
 8009176:	3708      	adds	r7, #8
 8009178:	46bd      	mov	sp, r7
 800917a:	bdb0      	pop	{r4, r5, r7, pc}

0800917c <_ZN5L6470I8shield_1E13get_max_speedEv>:
    virtual unsigned int get_max_speed(void)
 800917c:	b5b0      	push	{r4, r5, r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800918c:	681c      	ldr	r4, [r3, #0]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009196:	681d      	ldr	r5, [r3, #0]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2106      	movs	r1, #6
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	4798      	blx	r3
 80091a8:	4603      	mov	r3, r0
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	4619      	mov	r1, r3
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	47a8      	blx	r5
 80091b2:	eef0 7a40 	vmov.f32	s15, s0
 80091b6:	eeb0 0a67 	vmov.f32	s0, s15
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	47a0      	blx	r4
 80091be:	4603      	mov	r3, r0
    }
 80091c0:	4618      	mov	r0, r3
 80091c2:	3708      	adds	r7, #8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bdb0      	pop	{r4, r5, r7, pc}

080091c8 <_ZN5L6470I8shield_1E13get_min_speedEv>:
    virtual unsigned int get_min_speed(void)
 80091c8:	b5b0      	push	{r4, r5, r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80091d8:	681c      	ldr	r4, [r3, #0]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80091e2:	681d      	ldr	r5, [r3, #0]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2107      	movs	r1, #7
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	4798      	blx	r3
 80091f4:	4603      	mov	r3, r0
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	4619      	mov	r1, r3
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	47a8      	blx	r5
 80091fe:	eef0 7a40 	vmov.f32	s15, s0
 8009202:	eeb0 0a67 	vmov.f32	s0, s15
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	47a0      	blx	r4
 800920a:	4603      	mov	r3, r0
    }
 800920c:	4618      	mov	r0, r3
 800920e:	3708      	adds	r7, #8
 8009210:	46bd      	mov	sp, r7
 8009212:	bdb0      	pop	{r4, r5, r7, pc}

08009214 <_ZN5L6470I8shield_1E16get_accelerationEv>:
    virtual unsigned int get_acceleration(void)
 8009214:	b5b0      	push	{r4, r5, r7, lr}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009224:	681c      	ldr	r4, [r3, #0]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800922e:	681d      	ldr	r5, [r3, #0]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2104      	movs	r1, #4
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	4798      	blx	r3
 8009240:	4603      	mov	r3, r0
 8009242:	b29b      	uxth	r3, r3
 8009244:	4619      	mov	r1, r3
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	47a8      	blx	r5
 800924a:	eef0 7a40 	vmov.f32	s15, s0
 800924e:	eeb0 0a67 	vmov.f32	s0, s15
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	47a0      	blx	r4
 8009256:	4603      	mov	r3, r0
    }
 8009258:	4618      	mov	r0, r3
 800925a:	3708      	adds	r7, #8
 800925c:	46bd      	mov	sp, r7
 800925e:	bdb0      	pop	{r4, r5, r7, pc}

08009260 <_ZN5L6470I8shield_1E16get_decelerationEv>:
    virtual unsigned int get_deceleration(void)
 8009260:	b5b0      	push	{r4, r5, r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009270:	681c      	ldr	r4, [r3, #0]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800927a:	681d      	ldr	r5, [r3, #0]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	2105      	movs	r1, #5
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	4798      	blx	r3
 800928c:	4603      	mov	r3, r0
 800928e:	b29b      	uxth	r3, r3
 8009290:	4619      	mov	r1, r3
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	47a8      	blx	r5
 8009296:	eef0 7a40 	vmov.f32	s15, s0
 800929a:	eeb0 0a67 	vmov.f32	s0, s15
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	47a0      	blx	r4
 80092a2:	4603      	mov	r3, r0
    }
 80092a4:	4618      	mov	r0, r3
 80092a6:	3708      	adds	r7, #8
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bdb0      	pop	{r4, r5, r7, pc}

080092ac <_ZN5L6470I8shield_1E13get_directionEv>:
    virtual StepperMotor::direction_t get_direction(void)
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2104      	movs	r1, #4
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	4798      	blx	r3
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d101      	bne.n	80092ce <_ZN5L6470I8shield_1E13get_directionEv+0x22>
 80092ca:	2301      	movs	r3, #1
 80092cc:	e000      	b.n	80092d0 <_ZN5L6470I8shield_1E13get_directionEv+0x24>
 80092ce:	2300      	movs	r3, #0
    }
 80092d0:	4618      	mov	r0, r3
 80092d2:	3708      	adds	r7, #8
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <_ZN5L6470I8shield_1E13set_parameterEjj>:
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	607a      	str	r2, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	b2d1      	uxtb	r1, r2
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	68f8      	ldr	r0, [r7, #12]
 80092f6:	4798      	blx	r3
    }
 80092f8:	bf00      	nop
 80092fa:	3710      	adds	r7, #16
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <_ZN5L6470I8shield_1E8set_homeEv>:
    virtual void set_home(void)
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
        L6470_ResetPos();
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	4798      	blx	r3
    }
 8009316:	bf00      	nop
 8009318:	3708      	adds	r7, #8
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <_ZN5L6470I8shield_1E8set_markEv>:
    virtual void set_mark(void)
 800931e:	b590      	push	{r4, r7, lr}
 8009320:	b083      	sub	sp, #12
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800932e:	681c      	ldr	r4, [r3, #0]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2100      	movs	r1, #0
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	4798      	blx	r3
 8009340:	4603      	mov	r3, r0
 8009342:	461a      	mov	r2, r3
 8009344:	2102      	movs	r1, #2
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	47a0      	blx	r4
    }
 800934a:	bf00      	nop
 800934c:	370c      	adds	r7, #12
 800934e:	46bd      	mov	sp, r7
 8009350:	bd90      	pop	{r4, r7, pc}

08009352 <_ZN5L6470I8shield_1E8set_markEi>:
    virtual void set_mark(signed int position)
 8009352:	b590      	push	{r4, r7, lr}
 8009354:	b083      	sub	sp, #12
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
 800935a:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8009364:	681c      	ldr	r4, [r3, #0]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	6839      	ldr	r1, [r7, #0]
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	4798      	blx	r3
 8009376:	4603      	mov	r3, r0
 8009378:	461a      	mov	r2, r3
 800937a:	2102      	movs	r1, #2
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	47a0      	blx	r4
    }
 8009380:	bf00      	nop
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	bd90      	pop	{r4, r7, pc}

08009388 <_ZN5L6470I8shield_1E13set_max_speedEj>:
    virtual bool set_max_speed(unsigned int speed)
 8009388:	b590      	push	{r4, r7, lr}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800939a:	681c      	ldr	r4, [r3, #0]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	683a      	ldr	r2, [r7, #0]
 80093a8:	ee07 2a90 	vmov	s15, r2
 80093ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093b0:	eeb0 0a67 	vmov.f32	s0, s15
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	4798      	blx	r3
 80093b8:	4603      	mov	r3, r0
 80093ba:	461a      	mov	r2, r3
 80093bc:	2106      	movs	r1, #6
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	47a0      	blx	r4
        return true;
 80093c2:	2301      	movs	r3, #1
    }
 80093c4:	4618      	mov	r0, r3
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd90      	pop	{r4, r7, pc}

080093cc <_ZN5L6470I8shield_1E13set_min_speedEj>:
    virtual bool set_min_speed(unsigned int speed)
 80093cc:	b590      	push	{r4, r7, lr}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80093de:	681c      	ldr	r4, [r3, #0]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	683a      	ldr	r2, [r7, #0]
 80093ec:	ee07 2a90 	vmov	s15, r2
 80093f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093f4:	eeb0 0a67 	vmov.f32	s0, s15
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	4798      	blx	r3
 80093fc:	4603      	mov	r3, r0
 80093fe:	461a      	mov	r2, r3
 8009400:	2107      	movs	r1, #7
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	47a0      	blx	r4
        return true;
 8009406:	2301      	movs	r3, #1
    }
 8009408:	4618      	mov	r0, r3
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	bd90      	pop	{r4, r7, pc}

08009410 <_ZN5L6470I8shield_1E16set_accelerationEj>:
    virtual bool set_acceleration(unsigned int acceleration)
 8009410:	b590      	push	{r4, r7, lr}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8009422:	681c      	ldr	r4, [r3, #0]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	683a      	ldr	r2, [r7, #0]
 8009430:	ee07 2a90 	vmov	s15, r2
 8009434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009438:	eeb0 0a67 	vmov.f32	s0, s15
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	4798      	blx	r3
 8009440:	4603      	mov	r3, r0
 8009442:	461a      	mov	r2, r3
 8009444:	2104      	movs	r1, #4
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	47a0      	blx	r4
        return true;
 800944a:	2301      	movs	r3, #1
    }
 800944c:	4618      	mov	r0, r3
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	bd90      	pop	{r4, r7, pc}

08009454 <_ZN5L6470I8shield_1E16set_decelerationEj>:
    virtual bool set_deceleration(unsigned int deceleration)
 8009454:	b590      	push	{r4, r7, lr}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8009466:	681c      	ldr	r4, [r3, #0]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	683a      	ldr	r2, [r7, #0]
 8009474:	ee07 2a90 	vmov	s15, r2
 8009478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800947c:	eeb0 0a67 	vmov.f32	s0, s15
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	4798      	blx	r3
 8009484:	4603      	mov	r3, r0
 8009486:	461a      	mov	r2, r3
 8009488:	2105      	movs	r1, #5
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	47a0      	blx	r4
        return true;
 800948e:	2301      	movs	r3, #1
    }
 8009490:	4618      	mov	r0, r3
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	bd90      	pop	{r4, r7, pc}

08009498 <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE>:
    virtual bool set_step_mode(step_mode_t step_mode)
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	460b      	mov	r3, r1
 80094a2:	70fb      	strb	r3, [r7, #3]
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 80094a4:	78fb      	ldrb	r3, [r7, #3]
 80094a6:	2b07      	cmp	r3, #7
 80094a8:	d901      	bls.n	80094ae <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 80094aa:	2300      	movs	r3, #0
 80094ac:	e00f      	b.n	80094ce <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        soft_hiz();
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	3380      	adds	r3, #128	@ 0x80
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	78fa      	ldrb	r2, [r7, #3]
 80094c6:	2115      	movs	r1, #21
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	4798      	blx	r3
        return true;
 80094cc:	2301      	movs	r3, #1
    }
 80094ce:	4618      	mov	r0, r3
 80094d0:	3708      	adds	r7, #8
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <_ZN5L6470I8shield_1E5go_toEi>:
    virtual void go_to(signed int position)
 80094d6:	b590      	push	{r4, r7, lr}
 80094d8:	b083      	sub	sp, #12
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
 80094de:	6039      	str	r1, [r7, #0]
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 80094e8:	681c      	ldr	r4, [r3, #0]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	6839      	ldr	r1, [r7, #0]
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	4798      	blx	r3
 80094fa:	4603      	mov	r3, r0
 80094fc:	4619      	mov	r1, r3
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	47a0      	blx	r4
    }
 8009502:	bf00      	nop
 8009504:	370c      	adds	r7, #12
 8009506:	46bd      	mov	sp, r7
 8009508:	bd90      	pop	{r4, r7, pc}

0800950a <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE>:
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 800950a:	b5b0      	push	{r4, r5, r7, lr}
 800950c:	b084      	sub	sp, #16
 800950e:	af00      	add	r7, sp, #0
 8009510:	60f8      	str	r0, [r7, #12]
 8009512:	60b9      	str	r1, [r7, #8]
 8009514:	4613      	mov	r3, r2
 8009516:	71fb      	strb	r3, [r7, #7]
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8009520:	681c      	ldr	r4, [r3, #0]
 8009522:	79fb      	ldrb	r3, [r7, #7]
 8009524:	2b01      	cmp	r3, #1
 8009526:	d101      	bne.n	800952c <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE+0x22>
 8009528:	2501      	movs	r5, #1
 800952a:	e000      	b.n	800952e <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE+0x24>
 800952c:	2500      	movs	r5, #0
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	68b9      	ldr	r1, [r7, #8]
 800953a:	68f8      	ldr	r0, [r7, #12]
 800953c:	4798      	blx	r3
 800953e:	4603      	mov	r3, r0
 8009540:	461a      	mov	r2, r3
 8009542:	4629      	mov	r1, r5
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	47a0      	blx	r4
    }
 8009548:	bf00      	nop
 800954a:	3710      	adds	r7, #16
 800954c:	46bd      	mov	sp, r7
 800954e:	bdb0      	pop	{r4, r5, r7, pc}

08009550 <_ZN5L6470I8shield_1E7go_homeEv>:
    virtual void go_home(void)
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
        L6470_GoHome();
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	4798      	blx	r3
    }
 8009566:	bf00      	nop
 8009568:	3708      	adds	r7, #8
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <_ZN5L6470I8shield_1E7go_markEv>:
    virtual void go_mark(void)
 800956e:	b580      	push	{r7, lr}
 8009570:	b082      	sub	sp, #8
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
        L6470_GoMark();
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	4798      	blx	r3
    }
 8009584:	bf00      	nop
 8009586:	3708      	adds	r7, #8
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 800958c:	b5b0      	push	{r4, r5, r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	607b      	str	r3, [r7, #4]
 8009596:	460b      	mov	r3, r1
 8009598:	72fb      	strb	r3, [r7, #11]
 800959a:	4613      	mov	r3, r2
 800959c:	72bb      	strb	r3, [r7, #10]
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80095a6:	681c      	ldr	r4, [r3, #0]
 80095a8:	7abb      	ldrb	r3, [r7, #10]
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d101      	bne.n	80095b2 <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 80095ae:	2501      	movs	r5, #1
 80095b0:	e000      	b.n	80095b4 <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 80095b2:	2500      	movs	r5, #0
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	ee07 2a90 	vmov	s15, r2
 80095c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095c8:	eeb0 0a67 	vmov.f32	s0, s15
 80095cc:	68f8      	ldr	r0, [r7, #12]
 80095ce:	4798      	blx	r3
 80095d0:	4603      	mov	r3, r0
 80095d2:	7af9      	ldrb	r1, [r7, #11]
 80095d4:	462a      	mov	r2, r5
 80095d6:	68f8      	ldr	r0, [r7, #12]
 80095d8:	47a0      	blx	r4
    }
 80095da:	bf00      	nop
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bdb0      	pop	{r4, r5, r7, pc}

080095e2 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE>:
    virtual void run(StepperMotor::direction_t direction)
 80095e2:	b5b0      	push	{r4, r5, r7, lr}
 80095e4:	b082      	sub	sp, #8
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
 80095ea:	460b      	mov	r3, r1
 80095ec:	70fb      	strb	r3, [r7, #3]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 80095f6:	681c      	ldr	r4, [r3, #0]
 80095f8:	78fb      	ldrb	r3, [r7, #3]
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d101      	bne.n	8009602 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE+0x20>
 80095fe:	2501      	movs	r5, #1
 8009600:	e000      	b.n	8009604 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE+0x22>
 8009602:	2500      	movs	r5, #0
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2106      	movs	r1, #6
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	4798      	blx	r3
 8009614:	4603      	mov	r3, r0
 8009616:	461a      	mov	r2, r3
 8009618:	4629      	mov	r1, r5
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	47a0      	blx	r4
    }
 800961e:	bf00      	nop
 8009620:	3708      	adds	r7, #8
 8009622:	46bd      	mov	sp, r7
 8009624:	bdb0      	pop	{r4, r5, r7, pc}

08009626 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj>:
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 8009626:	b5b0      	push	{r4, r5, r7, lr}
 8009628:	b084      	sub	sp, #16
 800962a:	af00      	add	r7, sp, #0
 800962c:	60f8      	str	r0, [r7, #12]
 800962e:	460b      	mov	r3, r1
 8009630:	607a      	str	r2, [r7, #4]
 8009632:	72fb      	strb	r3, [r7, #11]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 800963c:	681c      	ldr	r4, [r3, #0]
 800963e:	7afb      	ldrb	r3, [r7, #11]
 8009640:	2b01      	cmp	r3, #1
 8009642:	d101      	bne.n	8009648 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj+0x22>
 8009644:	2501      	movs	r5, #1
 8009646:	e000      	b.n	800964a <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj+0x24>
 8009648:	2500      	movs	r5, #0
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	ee07 2a90 	vmov	s15, r2
 800965a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800965e:	eeb0 0a67 	vmov.f32	s0, s15
 8009662:	68f8      	ldr	r0, [r7, #12]
 8009664:	4798      	blx	r3
 8009666:	4603      	mov	r3, r0
 8009668:	461a      	mov	r2, r3
 800966a:	4629      	mov	r1, r5
 800966c:	68f8      	ldr	r0, [r7, #12]
 800966e:	47a0      	blx	r4
    }
 8009670:	bf00      	nop
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bdb0      	pop	{r4, r5, r7, pc}

08009678 <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj>:
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	460b      	mov	r3, r1
 8009682:	607a      	str	r2, [r7, #4]
 8009684:	72fb      	strb	r3, [r7, #11]
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	7afa      	ldrb	r2, [r7, #11]
 8009692:	2a01      	cmp	r2, #1
 8009694:	d101      	bne.n	800969a <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj+0x22>
 8009696:	2101      	movs	r1, #1
 8009698:	e000      	b.n	800969c <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj+0x24>
 800969a:	2100      	movs	r1, #0
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	68f8      	ldr	r0, [r7, #12]
 80096a0:	4798      	blx	r3
    }
 80096a2:	bf00      	nop
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <_ZN5L6470I8shield_1E9soft_stopEv>:
    virtual void soft_stop(void)
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b082      	sub	sp, #8
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
        L6470_SoftStop();
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	4798      	blx	r3
    }
 80096c0:	bf00      	nop
 80096c2:	3708      	adds	r7, #8
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <_ZN5L6470I8shield_1E9hard_stopEv>:
    virtual void hard_stop(void)
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
        L6470_HardStop();
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	4798      	blx	r3
    }
 80096de:	bf00      	nop
 80096e0:	3708      	adds	r7, #8
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <_ZN5L6470I8shield_1E8soft_hizEv>:
    virtual void soft_hiz(void)
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b082      	sub	sp, #8
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
        L6470_SoftHiZ();
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	4798      	blx	r3
    }
 80096fc:	bf00      	nop
 80096fe:	3708      	adds	r7, #8
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <_ZN5L6470I8shield_1E8hard_hizEv>:
    virtual void hard_hiz(void)
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
        L6470_HardHiZ();
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f503 73ee 	add.w	r3, r3, #476	@ 0x1dc
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	4798      	blx	r3
    }
 800971a:	bf00      	nop
 800971c:	3708      	adds	r7, #8
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <_ZN5L6470I8shield_1E17wait_while_activeEv>:
    virtual void wait_while_active(void)
 8009722:	b580      	push	{r7, lr}
 8009724:	b082      	sub	sp, #8
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 800972a:	bf00      	nop
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	2101      	movs	r1, #1
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	4798      	blx	r3
 800973c:	4603      	mov	r3, r0
 800973e:	2b00      	cmp	r3, #0
 8009740:	bf0c      	ite	eq
 8009742:	2301      	moveq	r3, #1
 8009744:	2300      	movne	r3, #0
 8009746:	b2db      	uxtb	r3, r3
 8009748:	2b00      	cmp	r3, #0
 800974a:	d1ef      	bne.n	800972c <_ZN5L6470I8shield_1E17wait_while_activeEv+0xa>
    }
 800974c:	bf00      	nop
 800974e:	bf00      	nop
 8009750:	3708      	adds	r7, #8
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}

08009756 <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE>:
    virtual void step_clock(StepperMotor::direction_t direction)
 8009756:	b580      	push	{r7, lr}
 8009758:	b082      	sub	sp, #8
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
 800975e:	460b      	mov	r3, r1
 8009760:	70fb      	strb	r3, [r7, #3]
        soft_hiz();
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	3380      	adds	r3, #128	@ 0x80
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	78fa      	ldrb	r2, [r7, #3]
 800977a:	2a01      	cmp	r2, #1
 800977c:	d101      	bne.n	8009782 <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE+0x2c>
 800977e:	2201      	movs	r2, #1
 8009780:	e000      	b.n	8009784 <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE+0x2e>
 8009782:	2200      	movs	r2, #0
 8009784:	4611      	mov	r1, r2
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	4798      	blx	r3
    }
 800978a:	bf00      	nop
 800978c:	3708      	adds	r7, #8
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8009792:	b580      	push	{r7, lr}
 8009794:	b082      	sub	sp, #8
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
 800979a:	460b      	mov	r3, r1
 800979c:	70fb      	strb	r3, [r7, #3]
 800979e:	4613      	mov	r3, r2
 80097a0:	70bb      	strb	r3, [r7, #2]
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	78ba      	ldrb	r2, [r7, #2]
 80097ae:	2a01      	cmp	r2, #1
 80097b0:	d101      	bne.n	80097b6 <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 80097b2:	2201      	movs	r2, #1
 80097b4:	e000      	b.n	80097b8 <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 80097b6:	2200      	movs	r2, #0
 80097b8:	78f9      	ldrb	r1, [r7, #3]
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	4798      	blx	r3
    }
 80097be:	bf00      	nop
 80097c0:	3708      	adds	r7, #8
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <_ZN5L6470I8shield_1E12reset_deviceEv>:
    virtual void reset_device(void)
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b082      	sub	sp, #8
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
        L6470_ResetDevice();
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	4798      	blx	r3
    }
 80097dc:	bf00      	nop
 80097de:	3708      	adds	r7, #8
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <_ZN5L6470I8shield_1E18prepare_get_statusEv>:
    virtual void prepare_get_status(void)
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetStatus();
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009802:	bf00      	nop
 8009804:	3708      	adds	r7, #8
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <_ZN5L6470I8shield_1E21prepare_get_parameterEj>:
    virtual void prepare_get_parameter(unsigned int parameter)
 800980a:	b580      	push	{r7, lr}
 800980c:	b082      	sub	sp, #8
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
 8009812:	6039      	str	r1, [r7, #0]
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	683a      	ldr	r2, [r7, #0]
 8009820:	b2d2      	uxtb	r2, r2
 8009822:	4611      	mov	r1, r2
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009830:	bf00      	nop
 8009832:	3708      	adds	r7, #8
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <_ZN5L6470I8shield_1E20prepare_get_positionEv>:
    virtual void prepare_get_position(void)
 8009838:	b580      	push	{r7, lr}
 800983a:	b082      	sub	sp, #8
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	2100      	movs	r1, #0
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2201      	movs	r2, #1
 8009854:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009858:	bf00      	nop
 800985a:	3708      	adds	r7, #8
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <_ZN5L6470I8shield_1E16prepare_get_markEv>:
    virtual void prepare_get_mark(void)
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2102      	movs	r1, #2
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2202      	movs	r2, #2
 800987c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009880:	bf00      	nop
 8009882:	3708      	adds	r7, #8
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}

08009888 <_ZN5L6470I8shield_1E17prepare_get_speedEv>:
    virtual void prepare_get_speed(void)
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2103      	movs	r1, #3
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2203      	movs	r2, #3
 80098a4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80098a8:	bf00      	nop
 80098aa:	3708      	adds	r7, #8
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <_ZN5L6470I8shield_1E21prepare_get_max_speedEv>:
    virtual void prepare_get_max_speed(void)
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2106      	movs	r1, #6
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2204      	movs	r2, #4
 80098cc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80098d0:	bf00      	nop
 80098d2:	3708      	adds	r7, #8
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <_ZN5L6470I8shield_1E21prepare_get_min_speedEv>:
    virtual void prepare_get_min_speed(void)
 80098d8:	b580      	push	{r7, lr}
 80098da:	b082      	sub	sp, #8
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	2107      	movs	r1, #7
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2205      	movs	r2, #5
 80098f4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80098f8:	bf00      	nop
 80098fa:	3708      	adds	r7, #8
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <_ZN5L6470I8shield_1E24prepare_get_accelerationEv>:
    virtual void prepare_get_acceleration(void)
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2104      	movs	r1, #4
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2206      	movs	r2, #6
 800991c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009920:	bf00      	nop
 8009922:	3708      	adds	r7, #8
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <_ZN5L6470I8shield_1E24prepare_get_decelerationEv>:
    virtual void prepare_get_deceleration(void)
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	2105      	movs	r1, #5
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2207      	movs	r2, #7
 8009944:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009948:	bf00      	nop
 800994a:	3708      	adds	r7, #8
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <_ZN5L6470I8shield_1E21prepare_get_directionEv>:
    virtual void prepare_get_direction(void)
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
        if (!L6470_DaisyChain_HalfPrepared) {
 8009958:	4b0b      	ldr	r3, [pc, #44]	@ (8009988 <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x38>)
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d10a      	bne.n	8009976 <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x26>
            L6470_DaisyChain_HalfPrepared = ONE_F;
 8009960:	4b09      	ldr	r3, [pc, #36]	@ (8009988 <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x38>)
 8009962:	2201      	movs	r2, #1
 8009964:	701a      	strb	r2, [r3, #0]
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4906      	ldr	r1, [pc, #24]	@ (800998c <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x3c>)
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	4798      	blx	r3
        prepared_action = PREPARED_GET_DIRECTION;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2208      	movs	r2, #8
 800997a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800997e:	bf00      	nop
 8009980:	3708      	adds	r7, #8
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	2000020d 	.word	0x2000020d
 800998c:	20000210 	.word	0x20000210

08009990 <_ZN5L6470I8shield_1E21prepare_set_parameterEjj>:
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	607a      	str	r2, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	68ba      	ldr	r2, [r7, #8]
 80099a8:	b2d1      	uxtb	r1, r2
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2200      	movs	r2, #0
 80099b4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80099b8:	bf00      	nop
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <_ZN5L6470I8shield_1E16prepare_set_homeEv>:
    virtual void prepare_set_home(void)
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetPos();
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2200      	movs	r2, #0
 80099da:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80099de:	bf00      	nop
 80099e0:	3708      	adds	r7, #8
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <_ZN5L6470I8shield_1E16prepare_set_markEv>:
    virtual void prepare_set_mark(void)
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b082      	sub	sp, #8
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	2200      	movs	r2, #0
 80099fa:	2102      	movs	r1, #2
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2209      	movs	r2, #9
 8009a04:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009a08:	bf00      	nop
 8009a0a:	3708      	adds	r7, #8
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <_ZN5L6470I8shield_1E16prepare_set_markEi>:
    virtual void prepare_set_mark(signed int position)
 8009a10:	b590      	push	{r4, r7, lr}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009a22:	681c      	ldr	r4, [r3, #0]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	6839      	ldr	r1, [r7, #0]
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	4798      	blx	r3
 8009a34:	4603      	mov	r3, r0
 8009a36:	461a      	mov	r2, r3
 8009a38:	2102      	movs	r1, #2
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2200      	movs	r2, #0
 8009a42:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009a46:	bf00      	nop
 8009a48:	370c      	adds	r7, #12
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd90      	pop	{r4, r7, pc}

08009a4e <_ZN5L6470I8shield_1E17prepare_set_speedEj>:
    virtual void prepare_set_speed(unsigned int speed)
 8009a4e:	b590      	push	{r4, r7, lr}
 8009a50:	b083      	sub	sp, #12
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
 8009a56:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009a60:	681c      	ldr	r4, [r3, #0]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	683a      	ldr	r2, [r7, #0]
 8009a6e:	ee07 2a90 	vmov	s15, r2
 8009a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a76:	eeb0 0a67 	vmov.f32	s0, s15
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	4798      	blx	r3
 8009a7e:	4603      	mov	r3, r0
 8009a80:	461a      	mov	r2, r3
 8009a82:	2103      	movs	r1, #3
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd90      	pop	{r4, r7, pc}

08009a98 <_ZN5L6470I8shield_1E21prepare_set_max_speedEj>:
    virtual void prepare_set_max_speed(unsigned int speed)
 8009a98:	b590      	push	{r4, r7, lr}
 8009a9a:	b083      	sub	sp, #12
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009aaa:	681c      	ldr	r4, [r3, #0]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	683a      	ldr	r2, [r7, #0]
 8009ab8:	ee07 2a90 	vmov	s15, r2
 8009abc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	4798      	blx	r3
 8009ac8:	4603      	mov	r3, r0
 8009aca:	461a      	mov	r2, r3
 8009acc:	2106      	movs	r1, #6
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009ada:	bf00      	nop
 8009adc:	370c      	adds	r7, #12
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd90      	pop	{r4, r7, pc}

08009ae2 <_ZN5L6470I8shield_1E21prepare_set_min_speedEj>:
    virtual void prepare_set_min_speed(unsigned int speed)
 8009ae2:	b590      	push	{r4, r7, lr}
 8009ae4:	b083      	sub	sp, #12
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
 8009aea:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009af4:	681c      	ldr	r4, [r3, #0]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	683a      	ldr	r2, [r7, #0]
 8009b02:	ee07 2a90 	vmov	s15, r2
 8009b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	4798      	blx	r3
 8009b12:	4603      	mov	r3, r0
 8009b14:	461a      	mov	r2, r3
 8009b16:	2107      	movs	r1, #7
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009b24:	bf00      	nop
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd90      	pop	{r4, r7, pc}

08009b2c <_ZN5L6470I8shield_1E24prepare_set_accelerationEj>:
    virtual void prepare_set_acceleration(unsigned int acceleration)
 8009b2c:	b590      	push	{r4, r7, lr}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009b3e:	681c      	ldr	r4, [r3, #0]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	683a      	ldr	r2, [r7, #0]
 8009b4c:	ee07 2a90 	vmov	s15, r2
 8009b50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b54:	eeb0 0a67 	vmov.f32	s0, s15
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	4798      	blx	r3
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	461a      	mov	r2, r3
 8009b60:	2104      	movs	r1, #4
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009b6e:	bf00      	nop
 8009b70:	370c      	adds	r7, #12
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd90      	pop	{r4, r7, pc}

08009b76 <_ZN5L6470I8shield_1E24prepare_set_decelerationEj>:
    virtual void prepare_set_deceleration(unsigned int deceleration)
 8009b76:	b590      	push	{r4, r7, lr}
 8009b78:	b083      	sub	sp, #12
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
 8009b7e:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009b88:	681c      	ldr	r4, [r3, #0]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	683a      	ldr	r2, [r7, #0]
 8009b96:	ee07 2a90 	vmov	s15, r2
 8009b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	4798      	blx	r3
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	461a      	mov	r2, r3
 8009baa:	2105      	movs	r1, #5
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009bb8:	bf00      	nop
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd90      	pop	{r4, r7, pc}

08009bc0 <_ZN5L6470I8shield_1E13prepare_go_toEi>:
    virtual void prepare_go_to(signed int position)
 8009bc0:	b590      	push	{r4, r7, lr}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8009bd2:	681c      	ldr	r4, [r3, #0]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	6839      	ldr	r1, [r7, #0]
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	4798      	blx	r3
 8009be4:	4603      	mov	r3, r0
 8009be6:	4619      	mov	r1, r3
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009bf4:	bf00      	nop
 8009bf6:	370c      	adds	r7, #12
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd90      	pop	{r4, r7, pc}

08009bfc <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE>:
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 8009bfc:	b5b0      	push	{r4, r5, r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	60f8      	str	r0, [r7, #12]
 8009c04:	60b9      	str	r1, [r7, #8]
 8009c06:	4613      	mov	r3, r2
 8009c08:	71fb      	strb	r3, [r7, #7]
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8009c12:	681c      	ldr	r4, [r3, #0]
 8009c14:	79fb      	ldrb	r3, [r7, #7]
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d101      	bne.n	8009c1e <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 8009c1a:	2501      	movs	r5, #1
 8009c1c:	e000      	b.n	8009c20 <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 8009c1e:	2500      	movs	r5, #0
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	68b9      	ldr	r1, [r7, #8]
 8009c2c:	68f8      	ldr	r0, [r7, #12]
 8009c2e:	4798      	blx	r3
 8009c30:	4603      	mov	r3, r0
 8009c32:	461a      	mov	r2, r3
 8009c34:	4629      	mov	r1, r5
 8009c36:	68f8      	ldr	r0, [r7, #12]
 8009c38:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009c42:	bf00      	nop
 8009c44:	3710      	adds	r7, #16
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bdb0      	pop	{r4, r5, r7, pc}

08009c4a <_ZN5L6470I8shield_1E15prepare_go_homeEv>:
    virtual void prepare_go_home(void)
 8009c4a:	b580      	push	{r7, lr}
 8009c4c:	b082      	sub	sp, #8
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoHome();
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2200      	movs	r2, #0
 8009c64:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009c68:	bf00      	nop
 8009c6a:	3708      	adds	r7, #8
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <_ZN5L6470I8shield_1E15prepare_go_markEv>:
    virtual void prepare_go_mark(void)
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoMark();
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009c8e:	bf00      	nop
 8009c90:	3708      	adds	r7, #8
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}

08009c96 <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 8009c96:	b5b0      	push	{r4, r5, r7, lr}
 8009c98:	b084      	sub	sp, #16
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	60f8      	str	r0, [r7, #12]
 8009c9e:	607b      	str	r3, [r7, #4]
 8009ca0:	460b      	mov	r3, r1
 8009ca2:	72fb      	strb	r3, [r7, #11]
 8009ca4:	4613      	mov	r3, r2
 8009ca6:	72bb      	strb	r3, [r7, #10]
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8009cb0:	681c      	ldr	r4, [r3, #0]
 8009cb2:	7abb      	ldrb	r3, [r7, #10]
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d101      	bne.n	8009cbc <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8009cb8:	2501      	movs	r5, #1
 8009cba:	e000      	b.n	8009cbe <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8009cbc:	2500      	movs	r5, #0
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	ee07 2a90 	vmov	s15, r2
 8009cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cd2:	eeb0 0a67 	vmov.f32	s0, s15
 8009cd6:	68f8      	ldr	r0, [r7, #12]
 8009cd8:	4798      	blx	r3
 8009cda:	4603      	mov	r3, r0
 8009cdc:	7af9      	ldrb	r1, [r7, #11]
 8009cde:	462a      	mov	r2, r5
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009cec:	bf00      	nop
 8009cee:	3710      	adds	r7, #16
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bdb0      	pop	{r4, r5, r7, pc}

08009cf4 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE>:
    virtual void prepare_run(StepperMotor::direction_t direction)
 8009cf4:	b5b0      	push	{r4, r5, r7, lr}
 8009cf6:	b082      	sub	sp, #8
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009d08:	681c      	ldr	r4, [r3, #0]
 8009d0a:	78fb      	ldrb	r3, [r7, #3]
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d101      	bne.n	8009d14 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE+0x20>
 8009d10:	2501      	movs	r5, #1
 8009d12:	e000      	b.n	8009d16 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE+0x22>
 8009d14:	2500      	movs	r5, #0
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	2106      	movs	r1, #6
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	4798      	blx	r3
 8009d26:	4603      	mov	r3, r0
 8009d28:	461a      	mov	r2, r3
 8009d2a:	4629      	mov	r1, r5
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009d38:	bf00      	nop
 8009d3a:	3708      	adds	r7, #8
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bdb0      	pop	{r4, r5, r7, pc}

08009d40 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj>:
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 8009d40:	b5b0      	push	{r4, r5, r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	60f8      	str	r0, [r7, #12]
 8009d48:	460b      	mov	r3, r1
 8009d4a:	607a      	str	r2, [r7, #4]
 8009d4c:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009d56:	681c      	ldr	r4, [r3, #0]
 8009d58:	7afb      	ldrb	r3, [r7, #11]
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d101      	bne.n	8009d62 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 8009d5e:	2501      	movs	r5, #1
 8009d60:	e000      	b.n	8009d64 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 8009d62:	2500      	movs	r5, #0
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	ee07 2a90 	vmov	s15, r2
 8009d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d78:	eeb0 0a67 	vmov.f32	s0, s15
 8009d7c:	68f8      	ldr	r0, [r7, #12]
 8009d7e:	4798      	blx	r3
 8009d80:	4603      	mov	r3, r0
 8009d82:	461a      	mov	r2, r3
 8009d84:	4629      	mov	r1, r5
 8009d86:	68f8      	ldr	r0, [r7, #12]
 8009d88:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009d92:	bf00      	nop
 8009d94:	3710      	adds	r7, #16
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bdb0      	pop	{r4, r5, r7, pc}

08009d9a <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj>:
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b084      	sub	sp, #16
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	60f8      	str	r0, [r7, #12]
 8009da2:	460b      	mov	r3, r1
 8009da4:	607a      	str	r2, [r7, #4]
 8009da6:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	7afa      	ldrb	r2, [r7, #11]
 8009db4:	2a01      	cmp	r2, #1
 8009db6:	d101      	bne.n	8009dbc <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 8009db8:	2101      	movs	r1, #1
 8009dba:	e000      	b.n	8009dbe <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 8009dbc:	2100      	movs	r1, #0
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009dcc:	bf00      	nop
 8009dce:	3710      	adds	r7, #16
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <_ZN5L6470I8shield_1E17prepare_soft_stopEv>:
    virtual void prepare_soft_stop(void)
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftStop();
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2200      	movs	r2, #0
 8009dee:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009df2:	bf00      	nop
 8009df4:	3708      	adds	r7, #8
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}

08009dfa <_ZN5L6470I8shield_1E17prepare_hard_stopEv>:
    virtual void prepare_hard_stop(void)
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b082      	sub	sp, #8
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardStop();
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009e18:	bf00      	nop
 8009e1a:	3708      	adds	r7, #8
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <_ZN5L6470I8shield_1E16prepare_soft_hizEv>:
    virtual void prepare_soft_hiz(void)
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftHiZ();
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009e3e:	bf00      	nop
 8009e40:	3708      	adds	r7, #8
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}

08009e46 <_ZN5L6470I8shield_1E16prepare_hard_hizEv>:
    virtual void prepare_hard_hiz(void)
 8009e46:	b580      	push	{r7, lr}
 8009e48:	b082      	sub	sp, #8
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardHiZ();
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009e64:	bf00      	nop
 8009e66:	3708      	adds	r7, #8
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE>:
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b082      	sub	sp, #8
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	460b      	mov	r3, r1
 8009e76:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	78fa      	ldrb	r2, [r7, #3]
 8009e84:	2a01      	cmp	r2, #1
 8009e86:	d101      	bne.n	8009e8c <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 8009e88:	2201      	movs	r2, #1
 8009e8a:	e000      	b.n	8009e8e <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	4611      	mov	r1, r2
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009e9c:	bf00      	nop
 8009e9e:	3708      	adds	r7, #8
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	460b      	mov	r3, r1
 8009eae:	70fb      	strb	r3, [r7, #3]
 8009eb0:	4613      	mov	r3, r2
 8009eb2:	70bb      	strb	r3, [r7, #2]
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	78ba      	ldrb	r2, [r7, #2]
 8009ec0:	2a01      	cmp	r2, #1
 8009ec2:	d101      	bne.n	8009ec8 <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	e000      	b.n	8009eca <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8009ec8:	2200      	movs	r2, #0
 8009eca:	78f9      	ldrb	r1, [r7, #3]
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009ed8:	bf00      	nop
 8009eda:	3708      	adds	r7, #8
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <_ZN5L6470I8shield_1E20prepare_reset_deviceEv>:
    virtual void prepare_reset_device(void)
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetDevice();
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009efe:	bf00      	nop
 8009f00:	3708      	adds	r7, #8
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <_ZN5L6470I8shield_1E24perform_prepared_actionsEv>:
    uint8_t* perform_prepared_actions(void)
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b082      	sub	sp, #8
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
        return L6470_PerformPreparedApplicationCommand();
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	4798      	blx	r3
 8009f1c:	4603      	mov	r3, r0
    }
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3708      	adds	r7, #8
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}

08009f26 <_ZN5L6470I8shield_1E19get_prepared_actionEv>:
    prepared_action_t get_prepared_action(void)
 8009f26:	b480      	push	{r7}
 8009f28:	b083      	sub	sp, #12
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
        return prepared_action;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    }
 8009f34:	4618      	mov	r0, r3
 8009f36:	370c      	adds	r7, #12
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <_ZN5L6470I8shield_1E10get_resultEPh>:
    int32_t get_result(uint8_t *raw_data)
 8009f40:	b5b0      	push	{r4, r5, r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
        switch (prepared_action) {
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8009f50:	3b01      	subs	r3, #1
 8009f52:	2b07      	cmp	r3, #7
 8009f54:	f200 80fe 	bhi.w	800a154 <_ZN5L6470I8shield_1E10get_resultEPh+0x214>
 8009f58:	a201      	add	r2, pc, #4	@ (adr r2, 8009f60 <_ZN5L6470I8shield_1E10get_resultEPh+0x20>)
 8009f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f5e:	bf00      	nop
 8009f60:	08009f81 	.word	0x08009f81
 8009f64:	08009fad 	.word	0x08009fad
 8009f68:	08009fdb 	.word	0x08009fdb
 8009f6c:	0800a01f 	.word	0x0800a01f
 8009f70:	0800a065 	.word	0x0800a065
 8009f74:	0800a0ab 	.word	0x0800a0ab
 8009f78:	0800a0f1 	.word	0x0800a0f1
 8009f7c:	0800a137 	.word	0x0800a137
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8009f88:	681c      	ldr	r4, [r3, #0]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	6a12      	ldr	r2, [r2, #32]
 8009f98:	7b92      	ldrb	r2, [r2, #14]
 8009f9a:	6839      	ldr	r1, [r7, #0]
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	4798      	blx	r3
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	47a0      	blx	r4
 8009fa8:	4603      	mov	r3, r0
 8009faa:	e0d4      	b.n	800a156 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8009fb4:	681c      	ldr	r4, [r3, #0]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	6a12      	ldr	r2, [r2, #32]
 8009fc4:	3228      	adds	r2, #40	@ 0x28
 8009fc6:	7b92      	ldrb	r2, [r2, #14]
 8009fc8:	6839      	ldr	r1, [r7, #0]
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	4798      	blx	r3
 8009fce:	4603      	mov	r3, r0
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	47a0      	blx	r4
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	e0bd      	b.n	800a156 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009fe2:	681c      	ldr	r4, [r3, #0]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8009fec:	681d      	ldr	r5, [r3, #0]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	6a12      	ldr	r2, [r2, #32]
 8009ffc:	323c      	adds	r2, #60	@ 0x3c
 8009ffe:	7b92      	ldrb	r2, [r2, #14]
 800a000:	6839      	ldr	r1, [r7, #0]
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	4798      	blx	r3
 800a006:	4603      	mov	r3, r0
 800a008:	4619      	mov	r1, r3
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	47a8      	blx	r5
 800a00e:	eef0 7a40 	vmov.f32	s15, s0
 800a012:	eeb0 0a67 	vmov.f32	s0, s15
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	47a0      	blx	r4
 800a01a:	4603      	mov	r3, r0
 800a01c:	e09b      	b.n	800a156 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a026:	681c      	ldr	r4, [r3, #0]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a030:	681d      	ldr	r5, [r3, #0]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	6a12      	ldr	r2, [r2, #32]
 800a040:	3278      	adds	r2, #120	@ 0x78
 800a042:	7b92      	ldrb	r2, [r2, #14]
 800a044:	6839      	ldr	r1, [r7, #0]
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	4798      	blx	r3
 800a04a:	4603      	mov	r3, r0
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	4619      	mov	r1, r3
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	47a8      	blx	r5
 800a054:	eef0 7a40 	vmov.f32	s15, s0
 800a058:	eeb0 0a67 	vmov.f32	s0, s15
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	47a0      	blx	r4
 800a060:	4603      	mov	r3, r0
 800a062:	e078      	b.n	800a156 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a06c:	681c      	ldr	r4, [r3, #0]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800a076:	681d      	ldr	r5, [r3, #0]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	6a12      	ldr	r2, [r2, #32]
 800a086:	328c      	adds	r2, #140	@ 0x8c
 800a088:	7b92      	ldrb	r2, [r2, #14]
 800a08a:	6839      	ldr	r1, [r7, #0]
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	4798      	blx	r3
 800a090:	4603      	mov	r3, r0
 800a092:	b29b      	uxth	r3, r3
 800a094:	4619      	mov	r1, r3
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	47a8      	blx	r5
 800a09a:	eef0 7a40 	vmov.f32	s15, s0
 800a09e:	eeb0 0a67 	vmov.f32	s0, s15
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	47a0      	blx	r4
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	e055      	b.n	800a156 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a0b2:	681c      	ldr	r4, [r3, #0]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800a0bc:	681d      	ldr	r5, [r3, #0]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	6a12      	ldr	r2, [r2, #32]
 800a0cc:	3250      	adds	r2, #80	@ 0x50
 800a0ce:	7b92      	ldrb	r2, [r2, #14]
 800a0d0:	6839      	ldr	r1, [r7, #0]
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	4798      	blx	r3
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	b29b      	uxth	r3, r3
 800a0da:	4619      	mov	r1, r3
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	47a8      	blx	r5
 800a0e0:	eef0 7a40 	vmov.f32	s15, s0
 800a0e4:	eeb0 0a67 	vmov.f32	s0, s15
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	47a0      	blx	r4
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	e032      	b.n	800a156 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a0f8:	681c      	ldr	r4, [r3, #0]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800a102:	681d      	ldr	r5, [r3, #0]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	6a12      	ldr	r2, [r2, #32]
 800a112:	3264      	adds	r2, #100	@ 0x64
 800a114:	7b92      	ldrb	r2, [r2, #14]
 800a116:	6839      	ldr	r1, [r7, #0]
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	4798      	blx	r3
 800a11c:	4603      	mov	r3, r0
 800a11e:	b29b      	uxth	r3, r3
 800a120:	4619      	mov	r1, r3
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	47a8      	blx	r5
 800a126:	eef0 7a40 	vmov.f32	s15, s0
 800a12a:	eeb0 0a67 	vmov.f32	s0, s15
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	47a0      	blx	r4
 800a132:	4603      	mov	r3, r0
 800a134:	e00f      	b.n	800a156 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2104      	movs	r1, #4
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	4798      	blx	r3
 800a146:	4603      	mov	r3, r0
 800a148:	2b01      	cmp	r3, #1
 800a14a:	d101      	bne.n	800a150 <_ZN5L6470I8shield_1E10get_resultEPh+0x210>
 800a14c:	2301      	movs	r3, #1
 800a14e:	e002      	b.n	800a156 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
 800a150:	2300      	movs	r3, #0
 800a152:	e000      	b.n	800a156 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return 0;
 800a154:	2300      	movs	r3, #0
    }
 800a156:	4618      	mov	r0, r3
 800a158:	3708      	adds	r7, #8
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bdb0      	pop	{r4, r5, r7, pc}
 800a15e:	bf00      	nop

0800a160 <_ZN5L6470I8shield_1E13L6470_DISABLEEv>:
    void L6470_DISABLE(void)
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6898      	ldr	r0, [r3, #8]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	899b      	ldrh	r3, [r3, #12]
 800a170:	2200      	movs	r2, #0
 800a172:	4619      	mov	r1, r3
 800a174:	f003 fa1e 	bl	800d5b4 <HAL_GPIO_WritePin>
    }
 800a178:	bf00      	nop
 800a17a:	3708      	adds	r7, #8
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm>:
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 800a180:	b480      	push	{r7}
 800a182:	b083      	sub	sp, #12
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
  if (AbsPos > L6470_MAX_POSITION)
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a190:	d303      	bcc.n	800a19a <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	f5a3 0380 	sub.w	r3, r3, #4194304	@ 0x400000
 800a198:	e000      	b.n	800a19c <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm+0x1c>
    return AbsPos;
 800a19a:	683b      	ldr	r3, [r7, #0]
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	370c      	adds	r7, #12
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr

0800a1a8 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl>:
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	db05      	blt.n	800a1c4 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x1c>
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a1be:	da01      	bge.n	800a1c4 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	e00c      	b.n	800a1de <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x36>
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	f513 1f00 	cmn.w	r3, #2097152	@ 0x200000
 800a1ca:	db06      	blt.n	800a1da <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x32>
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	da03      	bge.n	800a1da <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	f503 0380 	add.w	r3, r3, #4194304	@ 0x400000
 800a1d8:	e001      	b.n	800a1de <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x36>
      return (L6470_POSITION_RANGE + 1);        // OVF
 800a1da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	370c      	adds	r7, #12
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr
	...

0800a1ec <_ZN5L6470I8shield_1E20L6470_Speed_2_Step_sEm>:
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 800a1ec:	b480      	push	{r7}
 800a1ee:	b083      	sub	sp, #12
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
  return (Speed * ((float)14.9012e-3));
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	ee07 3a90 	vmov	s15, r3
 800a1fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a200:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800a218 <_ZN5L6470I8shield_1E20L6470_Speed_2_Step_sEm+0x2c>
 800a204:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a208:	eeb0 0a67 	vmov.f32	s0, s15
 800a20c:	370c      	adds	r7, #12
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr
 800a216:	bf00      	nop
 800a218:	3c74242a 	.word	0x3c74242a

0800a21c <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf>:
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 800a228:	edd7 7a00 	vldr	s15, [r7]
 800a22c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a260 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x44>
 800a230:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a238:	d80a      	bhi.n	800a250 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 800a23a:	ed97 7a00 	vldr	s14, [r7]
 800a23e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a264 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x48>
 800a242:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a246:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a24a:	ee17 3a90 	vmov	r3, s15
 800a24e:	e000      	b.n	800a252 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x36>
    return 0;   // Warning
 800a250:	2300      	movs	r3, #0
}
 800a252:	4618      	mov	r0, r3
 800a254:	370c      	adds	r7, #12
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr
 800a25e:	bf00      	nop
 800a260:	4674241b 	.word	0x4674241b
 800a264:	3c74242a 	.word	0x3c74242a

0800a268 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et>:
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	460b      	mov	r3, r1
 800a272:	807b      	strh	r3, [r7, #2]
  if (Acc <= L6470_MAX_ACC)
 800a274:	887b      	ldrh	r3, [r7, #2]
 800a276:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a27a:	d209      	bcs.n	800a290 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 800a27c:	887b      	ldrh	r3, [r7, #2]
 800a27e:	ee07 3a90 	vmov	s15, r3
 800a282:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a286:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a2a4 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x3c>
 800a28a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a28e:	e001      	b.n	800a294 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x2c>
    return 0;   // Warning
 800a290:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a2a8 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x40>
}
 800a294:	eeb0 0a67 	vmov.f32	s0, s15
 800a298:	370c      	adds	r7, #12
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr
 800a2a2:	bf00      	nop
 800a2a4:	4168d4fe 	.word	0x4168d4fe
 800a2a8:	00000000 	.word	0x00000000

0800a2ac <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 800a2b8:	edd7 7a00 	vldr	s15, [r7]
 800a2bc:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a2f0 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x44>
 800a2c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a2c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2c8:	d80b      	bhi.n	800a2e2 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 800a2ca:	ed97 7a00 	vldr	s14, [r7]
 800a2ce:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a2f4 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x48>
 800a2d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a2d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2da:	ee17 3a90 	vmov	r3, s15
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	e000      	b.n	800a2e4 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x38>
    return 0;   // Warning
 800a2e2:	2300      	movs	r3, #0
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	370c      	adds	r7, #12
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr
 800a2f0:	4768c671 	.word	0x4768c671
 800a2f4:	4168d4fe 	.word	0x4168d4fe

0800a2f8 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et>:
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 800a2f8:	b480      	push	{r7}
 800a2fa:	b083      	sub	sp, #12
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	460b      	mov	r3, r1
 800a302:	807b      	strh	r3, [r7, #2]
  if (Dec <= L6470_MAX_DEC)
 800a304:	887b      	ldrh	r3, [r7, #2]
 800a306:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a30a:	d209      	bcs.n	800a320 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 800a30c:	887b      	ldrh	r3, [r7, #2]
 800a30e:	ee07 3a90 	vmov	s15, r3
 800a312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a316:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a334 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x3c>
 800a31a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a31e:	e001      	b.n	800a324 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x2c>
    return 0;   // Warning
 800a320:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a338 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x40>
}
 800a324:	eeb0 0a67 	vmov.f32	s0, s15
 800a328:	370c      	adds	r7, #12
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr
 800a332:	bf00      	nop
 800a334:	4168d4fe 	.word	0x4168d4fe
 800a338:	00000000 	.word	0x00000000

0800a33c <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 800a348:	edd7 7a00 	vldr	s15, [r7]
 800a34c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a380 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x44>
 800a350:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a358:	d80b      	bhi.n	800a372 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 800a35a:	ed97 7a00 	vldr	s14, [r7]
 800a35e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a384 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x48>
 800a362:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a36a:	ee17 3a90 	vmov	r3, s15
 800a36e:	b29b      	uxth	r3, r3
 800a370:	e000      	b.n	800a374 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x38>
    return 0;   // Warning
 800a372:	2300      	movs	r3, #0
}
 800a374:	4618      	mov	r0, r3
 800a376:	370c      	adds	r7, #12
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr
 800a380:	4768c671 	.word	0x4768c671
 800a384:	4168d4fe 	.word	0x4168d4fe

0800a388 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 800a388:	b480      	push	{r7}
 800a38a:	b083      	sub	sp, #12
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	460b      	mov	r3, r1
 800a392:	807b      	strh	r3, [r7, #2]
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 800a394:	887b      	ldrh	r3, [r7, #2]
 800a396:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a39a:	d209      	bcs.n	800a3b0 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 800a39c:	887b      	ldrh	r3, [r7, #2]
 800a39e:	ee07 3a90 	vmov	s15, r3
 800a3a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a3a6:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a3c4 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 800a3aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a3ae:	e001      	b.n	800a3b4 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800a3b0:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a3c8 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 800a3b4:	eeb0 0a67 	vmov.f32	s0, s15
 800a3b8:	370c      	adds	r7, #12
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr
 800a3c2:	bf00      	nop
 800a3c4:	4174240b 	.word	0x4174240b
 800a3c8:	00000000 	.word	0x00000000

0800a3cc <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 800a3d8:	edd7 7a00 	vldr	s15, [r7]
 800a3dc:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a410 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x44>
 800a3e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a3e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3e8:	d80b      	bhi.n	800a402 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 800a3ea:	ed97 7a00 	vldr	s14, [r7]
 800a3ee:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a414 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x48>
 800a3f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a3f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3fa:	ee17 3a90 	vmov	r3, s15
 800a3fe:	b29b      	uxth	r3, r3
 800a400:	e000      	b.n	800a404 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x38>
    return 0;   // Warning
 800a402:	2300      	movs	r3, #0
}
 800a404:	4618      	mov	r0, r3
 800a406:	370c      	adds	r7, #12
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr
 800a410:	4673e702 	.word	0x4673e702
 800a414:	4174240b 	.word	0x4174240b

0800a418 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	460b      	mov	r3, r1
 800a422:	807b      	strh	r3, [r7, #2]
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 800a424:	887b      	ldrh	r3, [r7, #2]
 800a426:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a42a:	d209      	bcs.n	800a440 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 800a42c:	887b      	ldrh	r3, [r7, #2]
 800a42e:	ee07 3a90 	vmov	s15, r3
 800a432:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a436:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a454 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x3c>
 800a43a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a43e:	e001      	b.n	800a444 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800a440:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a458 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 800a444:	eeb0 0a67 	vmov.f32	s0, s15
 800a448:	370c      	adds	r7, #12
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	3e742401 	.word	0x3e742401
 800a458:	00000000 	.word	0x00000000

0800a45c <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 800a468:	edd7 7a00 	vldr	s15, [r7]
 800a46c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a4a0 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x44>
 800a470:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a478:	d80b      	bhi.n	800a492 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 800a47a:	ed97 7a00 	vldr	s14, [r7]
 800a47e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a4a4 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x48>
 800a482:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a486:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a48a:	ee17 3a90 	vmov	r3, s15
 800a48e:	b29b      	uxth	r3, r3
 800a490:	e000      	b.n	800a494 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x38>
    return 0;   // Warning
 800a492:	2300      	movs	r3, #0
}
 800a494:	4618      	mov	r0, r3
 800a496:	370c      	adds	r7, #12
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr
 800a4a0:	447414bf 	.word	0x447414bf
 800a4a4:	3e742401 	.word	0x3e742401

0800a4a8 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt>:
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	807b      	strh	r3, [r7, #2]
  if (FsSpd <= L6470_MAX_FS_SPD)
 800a4b4:	887b      	ldrh	r3, [r7, #2]
 800a4b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a4ba:	d219      	bcs.n	800a4f0 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 800a4bc:	887b      	ldrh	r3, [r7, #2]
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7f6 f860 	bl	8000584 <__aeabi_i2d>
 800a4c4:	f04f 0200 	mov.w	r2, #0
 800a4c8:	4b0e      	ldr	r3, [pc, #56]	@ (800a504 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x5c>)
 800a4ca:	f7f5 ff0f 	bl	80002ec <__adddf3>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	4610      	mov	r0, r2
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	f04f 0200 	mov.w	r2, #0
 800a4da:	4b0b      	ldr	r3, [pc, #44]	@ (800a508 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x60>)
 800a4dc:	f7f6 f8bc 	bl	8000658 <__aeabi_dmul>
 800a4e0:	4602      	mov	r2, r0
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	4610      	mov	r0, r2
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	f7f6 fb8e 	bl	8000c08 <__aeabi_d2f>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	e001      	b.n	800a4f4 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x4c>
    return 0;   // Warning
 800a4f0:	f04f 0300 	mov.w	r3, #0
}
 800a4f4:	ee07 3a90 	vmov	s15, r3
 800a4f8:	eeb0 0a67 	vmov.f32	s0, s15
 800a4fc:	3708      	adds	r7, #8
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop
 800a504:	3fe00000 	.word	0x3fe00000
 800a508:	402e8000 	.word	0x402e8000

0800a50c <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 800a518:	edd7 7a00 	vldr	s15, [r7]
 800a51c:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800a558 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x4c>
 800a520:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a528:	d80f      	bhi.n	800a54a <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 800a52a:	ed97 7a00 	vldr	s14, [r7]
 800a52e:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800a55c <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x50>
 800a532:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a536:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a53a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a53e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a542:	ee17 3a90 	vmov	r3, s15
 800a546:	b29b      	uxth	r3, r3
 800a548:	e000      	b.n	800a54c <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x40>
    return 0;   // Warning
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	370c      	adds	r7, #12
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr
 800a558:	4673e180 	.word	0x4673e180
 800a55c:	41740000 	.word	0x41740000

0800a560 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 800a560:	b480      	push	{r7}
 800a562:	b083      	sub	sp, #12
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	460b      	mov	r3, r1
 800a56a:	807b      	strh	r3, [r7, #2]
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 800a56c:	887b      	ldrh	r3, [r7, #2]
 800a56e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a572:	d209      	bcs.n	800a588 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 800a574:	887b      	ldrh	r3, [r7, #2]
 800a576:	ee07 3a90 	vmov	s15, r3
 800a57a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a57e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a59c <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x3c>
 800a582:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a586:	e001      	b.n	800a58c <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800a588:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a5a0 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 800a58c:	eeb0 0a67 	vmov.f32	s0, s15
 800a590:	370c      	adds	r7, #12
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop
 800a59c:	3d7423f4 	.word	0x3d7423f4
 800a5a0:	00000000 	.word	0x00000000

0800a5a4 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 800a5b0:	edd7 7a00 	vldr	s15, [r7]
 800a5b4:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a5e8 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x44>
 800a5b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a5bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5c0:	d80b      	bhi.n	800a5da <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 800a5c2:	ed97 7a00 	vldr	s14, [r7]
 800a5c6:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a5ec <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x48>
 800a5ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a5ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5d2:	ee17 3a90 	vmov	r3, s15
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	e000      	b.n	800a5dc <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x38>
    return 0;   // Warning
 800a5da:	2300      	movs	r3, #0
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	370c      	adds	r7, #12
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr
 800a5e8:	44742023 	.word	0x44742023
 800a5ec:	3d7423f4 	.word	0x3d7423f4

0800a5f0 <_ZN5L6470I8shield_1E20L6470_StSlp_2_s_StepEh>:
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	70fb      	strb	r3, [r7, #3]
    return (StSlp * ((float)1.5686e-5));
 800a5fc:	78fb      	ldrb	r3, [r7, #3]
 800a5fe:	ee07 3a90 	vmov	s15, r3
 800a602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a606:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800a61c <_ZN5L6470I8shield_1E20L6470_StSlp_2_s_StepEh+0x2c>
 800a60a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a60e:	eeb0 0a67 	vmov.f32	s0, s15
 800a612:	370c      	adds	r7, #12
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr
 800a61c:	3783956e 	.word	0x3783956e

0800a620 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 800a620:	b480      	push	{r7}
 800a622:	b085      	sub	sp, #20
 800a624:	af00      	add	r7, sp, #0
 800a626:	60f8      	str	r0, [r7, #12]
 800a628:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 800a62c:	edd7 7a02 	vldr	s15, [r7, #8]
 800a630:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800a668 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x48>
 800a634:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a63c:	d80c      	bhi.n	800a658 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800a63e:	ed97 7a02 	vldr	s14, [r7, #8]
 800a642:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800a66c <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x4c>
 800a646:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a64a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a64e:	edc7 7a01 	vstr	s15, [r7, #4]
 800a652:	793b      	ldrb	r3, [r7, #4]
 800a654:	b2db      	uxtb	r3, r3
 800a656:	e000      	b.n	800a65a <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x3a>
    return 0;   // Warning
 800a658:	2300      	movs	r3, #0
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3714      	adds	r7, #20
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop
 800a668:	3b8311d9 	.word	0x3b8311d9
 800a66c:	3783956e 	.word	0x3783956e

0800a670 <_ZN5L6470I8shield_1E23L6470_FnSlpAcc_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 800a670:	b480      	push	{r7}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	460b      	mov	r3, r1
 800a67a:	70fb      	strb	r3, [r7, #3]
    return (FnSlpAcc * ((float)1.5686e-5));
 800a67c:	78fb      	ldrb	r3, [r7, #3]
 800a67e:	ee07 3a90 	vmov	s15, r3
 800a682:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a686:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800a69c <_ZN5L6470I8shield_1E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 800a68a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a68e:	eeb0 0a67 	vmov.f32	s0, s15
 800a692:	370c      	adds	r7, #12
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr
 800a69c:	3783956e 	.word	0x3783956e

0800a6a0 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 800a6a0:	b480      	push	{r7}
 800a6a2:	b085      	sub	sp, #20
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 800a6ac:	edd7 7a02 	vldr	s15, [r7, #8]
 800a6b0:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800a6e8 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x48>
 800a6b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6bc:	d80c      	bhi.n	800a6d8 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800a6be:	ed97 7a02 	vldr	s14, [r7, #8]
 800a6c2:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800a6ec <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 800a6c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a6ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6ce:	edc7 7a01 	vstr	s15, [r7, #4]
 800a6d2:	793b      	ldrb	r3, [r7, #4]
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	e000      	b.n	800a6da <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x3a>
    return 0;   // Warning
 800a6d8:	2300      	movs	r3, #0
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3714      	adds	r7, #20
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr
 800a6e6:	bf00      	nop
 800a6e8:	3b8311d9 	.word	0x3b8311d9
 800a6ec:	3783956e 	.word	0x3783956e

0800a6f0 <_ZN5L6470I8shield_1E23L6470_FnSlpDec_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 800a6f0:	b480      	push	{r7}
 800a6f2:	b083      	sub	sp, #12
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	70fb      	strb	r3, [r7, #3]
    return (FnSlpDec * ((float)1.5686e-5));
 800a6fc:	78fb      	ldrb	r3, [r7, #3]
 800a6fe:	ee07 3a90 	vmov	s15, r3
 800a702:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a706:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800a71c <_ZN5L6470I8shield_1E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 800a70a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a70e:	eeb0 0a67 	vmov.f32	s0, s15
 800a712:	370c      	adds	r7, #12
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr
 800a71c:	3783956e 	.word	0x3783956e

0800a720 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 800a720:	b480      	push	{r7}
 800a722:	b085      	sub	sp, #20
 800a724:	af00      	add	r7, sp, #0
 800a726:	60f8      	str	r0, [r7, #12]
 800a728:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 800a72c:	edd7 7a02 	vldr	s15, [r7, #8]
 800a730:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800a768 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x48>
 800a734:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a73c:	d80c      	bhi.n	800a758 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800a73e:	ed97 7a02 	vldr	s14, [r7, #8]
 800a742:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800a76c <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 800a746:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a74a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a74e:	edc7 7a01 	vstr	s15, [r7, #4]
 800a752:	793b      	ldrb	r3, [r7, #4]
 800a754:	b2db      	uxtb	r3, r3
 800a756:	e000      	b.n	800a75a <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x3a>
    return 0;   // Warning
 800a758:	2300      	movs	r3, #0
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3714      	adds	r7, #20
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr
 800a766:	bf00      	nop
 800a768:	3b8311d9 	.word	0x3b8311d9
 800a76c:	3783956e 	.word	0x3783956e

0800a770 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh>:
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	460b      	mov	r3, r1
 800a77a:	70fb      	strb	r3, [r7, #3]
  if (OcdTh <= L6470_MAX_OCD_TH)
 800a77c:	78fb      	ldrb	r3, [r7, #3]
 800a77e:	2b0f      	cmp	r3, #15
 800a780:	d80a      	bhi.n	800a798 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 800a782:	78fb      	ldrb	r3, [r7, #3]
 800a784:	3301      	adds	r3, #1
 800a786:	ee07 3a90 	vmov	s15, r3
 800a78a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a78e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a7ac <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x3c>
 800a792:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a796:	e001      	b.n	800a79c <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x2c>
    return 0;   // Warning
 800a798:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a7b0 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x40>
}
 800a79c:	eeb0 0a67 	vmov.f32	s0, s15
 800a7a0:	370c      	adds	r7, #12
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr
 800a7aa:	bf00      	nop
 800a7ac:	43bb8000 	.word	0x43bb8000
 800a7b0:	00000000 	.word	0x00000000

0800a7b4 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 800a7b4:	b480      	push	{r7}
 800a7b6:	b087      	sub	sp, #28
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 800a7c0:	edd7 7a02 	vldr	s15, [r7, #8]
 800a7c4:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800a850 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x9c>
 800a7c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a7cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7d0:	d836      	bhi.n	800a840 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8c>
    result = (mA / ((float)375));
 800a7d2:	ed97 7a02 	vldr	s14, [r7, #8]
 800a7d6:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800a854 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0xa0>
 800a7da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a7de:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800a7e2:	edd7 7a05 	vldr	s15, [r7, #20]
 800a7e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7ea:	edc7 7a01 	vstr	s15, [r7, #4]
 800a7ee:	793b      	ldrb	r3, [r7, #4]
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	ee07 3a90 	vmov	s15, r3
 800a7f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7fa:	ed97 7a05 	vldr	s14, [r7, #20]
 800a7fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a802:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 800a806:	edd7 7a04 	vldr	s15, [r7, #16]
 800a80a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a80e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a816:	d50a      	bpl.n	800a82e <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 800a818:	edd7 7a05 	vldr	s15, [r7, #20]
 800a81c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a820:	edc7 7a01 	vstr	s15, [r7, #4]
 800a824:	793b      	ldrb	r3, [r7, #4]
 800a826:	b2db      	uxtb	r3, r3
 800a828:	3b01      	subs	r3, #1
 800a82a:	b2db      	uxtb	r3, r3
 800a82c:	e009      	b.n	800a842 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8e>
      return ((uint8_t)result);    
 800a82e:	edd7 7a05 	vldr	s15, [r7, #20]
 800a832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a836:	edc7 7a01 	vstr	s15, [r7, #4]
 800a83a:	793b      	ldrb	r3, [r7, #4]
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	e000      	b.n	800a842 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8e>
    return 0;   // Warning
 800a840:	2300      	movs	r3, #0
}
 800a842:	4618      	mov	r0, r3
 800a844:	371c      	adds	r7, #28
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr
 800a84e:	bf00      	nop
 800a850:	45bb8000 	.word	0x45bb8000
 800a854:	43bb8000 	.word	0x43bb8000

0800a858 <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh>:
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 800a858:	b480      	push	{r7}
 800a85a:	b083      	sub	sp, #12
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	460b      	mov	r3, r1
 800a862:	70fb      	strb	r3, [r7, #3]
  if (StallTh <= L6470_MAX_STALL_TH)
 800a864:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	db0a      	blt.n	800a882 <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 800a86c:	78fb      	ldrb	r3, [r7, #3]
 800a86e:	3301      	adds	r3, #1
 800a870:	ee07 3a90 	vmov	s15, r3
 800a874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a878:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800a894 <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x3c>
 800a87c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a880:	e001      	b.n	800a886 <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x2e>
    return 0;   // Warning
 800a882:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a898 <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x40>
}
 800a886:	eeb0 0a67 	vmov.f32	s0, s15
 800a88a:	370c      	adds	r7, #12
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr
 800a894:	41fa0000 	.word	0x41fa0000
 800a898:	00000000 	.word	0x00000000

0800a89c <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 800a89c:	b480      	push	{r7}
 800a89e:	b087      	sub	sp, #28
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	60f8      	str	r0, [r7, #12]
 800a8a4:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 800a8a8:	edd7 7a02 	vldr	s15, [r7, #8]
 800a8ac:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800a938 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x9c>
 800a8b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a8b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8b8:	d836      	bhi.n	800a928 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8c>
    result = (mA / ((float)31.25));
 800a8ba:	ed97 7a02 	vldr	s14, [r7, #8]
 800a8be:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800a93c <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0xa0>
 800a8c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a8c6:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800a8ca:	edd7 7a05 	vldr	s15, [r7, #20]
 800a8ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8d2:	edc7 7a01 	vstr	s15, [r7, #4]
 800a8d6:	793b      	ldrb	r3, [r7, #4]
 800a8d8:	b2db      	uxtb	r3, r3
 800a8da:	ee07 3a90 	vmov	s15, r3
 800a8de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a8e2:	ed97 7a05 	vldr	s14, [r7, #20]
 800a8e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8ea:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 800a8ee:	edd7 7a04 	vldr	s15, [r7, #16]
 800a8f2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a8f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a8fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8fe:	d50a      	bpl.n	800a916 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 800a900:	edd7 7a05 	vldr	s15, [r7, #20]
 800a904:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a908:	edc7 7a01 	vstr	s15, [r7, #4]
 800a90c:	793b      	ldrb	r3, [r7, #4]
 800a90e:	b2db      	uxtb	r3, r3
 800a910:	3b01      	subs	r3, #1
 800a912:	b2db      	uxtb	r3, r3
 800a914:	e009      	b.n	800a92a <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8e>
      return ((uint8_t)result);    
 800a916:	edd7 7a05 	vldr	s15, [r7, #20]
 800a91a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a91e:	edc7 7a01 	vstr	s15, [r7, #4]
 800a922:	793b      	ldrb	r3, [r7, #4]
 800a924:	b2db      	uxtb	r3, r3
 800a926:	e000      	b.n	800a92a <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8e>
    return 0;   // Warning
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	371c      	adds	r7, #28
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	457a0000 	.word	0x457a0000
 800a93c:	41fa0000 	.word	0x41fa0000

0800a940 <_ZN5L6470I8shield_1E12L6470_ConfigEPv>:
status_t L6470<shield_x>::L6470_Config(void *init)
 800a940:	b580      	push	{r7, lr}
 800a942:	b086      	sub	sp, #24
 800a944:	af00      	add	r7, sp, #0
 800a946:	60f8      	str	r0, [r7, #12]
 800a948:	60b9      	str	r1, [r7, #8]
  reset_device();
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	3394      	adds	r3, #148	@ 0x94
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	68f8      	ldr	r0, [r7, #12]
 800a954:	4798      	blx	r3
  get_status();
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	330c      	adds	r3, #12
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	4798      	blx	r3
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	697a      	ldr	r2, [r7, #20]
 800a972:	edd2 7a05 	vldr	s15, [r2, #20]
 800a976:	eeb0 0a67 	vmov.f32	s0, s15
 800a97a:	68f8      	ldr	r0, [r7, #12]
 800a97c:	4798      	blx	r3
 800a97e:	4603      	mov	r3, r0
 800a980:	461a      	mov	r2, r3
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	697a      	ldr	r2, [r7, #20]
 800a994:	edd2 7a06 	vldr	s15, [r2, #24]
 800a998:	eeb0 0a67 	vmov.f32	s0, s15
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	4798      	blx	r3
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	697a      	ldr	r2, [r7, #20]
 800a9b6:	edd2 7a07 	vldr	s15, [r2, #28]
 800a9ba:	eeb0 0a67 	vmov.f32	s0, s15
 800a9be:	68f8      	ldr	r0, [r7, #12]
 800a9c0:	4798      	blx	r3
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	697a      	ldr	r2, [r7, #20]
 800a9d8:	edd2 7a08 	vldr	s15, [r2, #32]
 800a9dc:	eeb0 0a67 	vmov.f32	s0, s15
 800a9e0:	68f8      	ldr	r0, [r7, #12]
 800a9e2:	4798      	blx	r3
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	697a      	ldr	r2, [r7, #20]
 800a9fa:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 800a9fe:	eeb0 0a67 	vmov.f32	s0, s15
 800aa02:	68f8      	ldr	r0, [r7, #12]
 800aa04:	4798      	blx	r3
 800aa06:	4603      	mov	r3, r0
 800aa08:	461a      	mov	r2, r3
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800aa16:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800ace8 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800aa1a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	ed93 7a00 	vldr	s14, [r3]
 800aa24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa2c:	edc7 7a01 	vstr	s15, [r7, #4]
 800aa30:	793b      	ldrb	r3, [r7, #4]
 800aa32:	b2da      	uxtb	r2, r3
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800aa40:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 800ace8 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800aa44:	ee67 6a87 	vmul.f32	s13, s15, s14
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	ed93 7a00 	vldr	s14, [r3]
 800aa4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa56:	edc7 7a01 	vstr	s15, [r7, #4]
 800aa5a:	793b      	ldrb	r3, [r7, #4]
 800aa5c:	b2da      	uxtb	r2, r3
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800aa6a:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 800ace8 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800aa6e:	ee67 6a87 	vmul.f32	s13, s15, s14
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	ed93 7a00 	vldr	s14, [r3]
 800aa78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa80:	edc7 7a01 	vstr	s15, [r7, #4]
 800aa84:	793b      	ldrb	r3, [r7, #4]
 800aa86:	b2da      	uxtb	r2, r3
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800aa94:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 800ace8 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800aa98:	ee67 6a87 	vmul.f32	s13, s15, s14
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	ed93 7a00 	vldr	s14, [r3]
 800aaa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aaa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aaaa:	edc7 7a01 	vstr	s15, [r7, #4]
 800aaae:	793b      	ldrb	r3, [r7, #4]
 800aab0:	b2da      	uxtb	r2, r3
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	697a      	ldr	r2, [r7, #20]
 800aac4:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 800aac8:	eeb0 0a67 	vmov.f32	s0, s15
 800aacc:	68f8      	ldr	r0, [r7, #12]
 800aace:	4798      	blx	r3
 800aad0:	4603      	mov	r3, r0
 800aad2:	461a      	mov	r2, r3
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	697a      	ldr	r2, [r7, #20]
 800aae6:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 800aaea:	eeb0 0a67 	vmov.f32	s0, s15
 800aaee:	68f8      	ldr	r0, [r7, #12]
 800aaf0:	4798      	blx	r3
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	697a      	ldr	r2, [r7, #20]
 800ab08:	edd2 7a10 	vldr	s15, [r2, #64]	@ 0x40
 800ab0c:	eeb0 0a67 	vmov.f32	s0, s15
 800ab10:	68f8      	ldr	r0, [r7, #12]
 800ab12:	4798      	blx	r3
 800ab14:	4603      	mov	r3, r0
 800ab16:	461a      	mov	r2, r3
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	697a      	ldr	r2, [r7, #20]
 800ab2a:	edd2 7a11 	vldr	s15, [r2, #68]	@ 0x44
 800ab2e:	eeb0 0a67 	vmov.f32	s0, s15
 800ab32:	68f8      	ldr	r0, [r7, #12]
 800ab34:	4798      	blx	r3
 800ab36:	4603      	mov	r3, r0
 800ab38:	461a      	mov	r2, r3
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	697a      	ldr	r2, [r7, #20]
 800ab58:	edd2 7a13 	vldr	s15, [r2, #76]	@ 0x4c
 800ab5c:	eeb0 0a67 	vmov.f32	s0, s15
 800ab60:	68f8      	ldr	r0, [r7, #12]
 800ab62:	4798      	blx	r3
 800ab64:	4603      	mov	r3, r0
 800ab66:	461a      	mov	r2, r3
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	697a      	ldr	r2, [r7, #20]
 800ab7a:	edd2 7a14 	vldr	s15, [r2, #80]	@ 0x50
 800ab7e:	eeb0 0a67 	vmov.f32	s0, s15
 800ab82:	68f8      	ldr	r0, [r7, #12]
 800ab84:	4798      	blx	r3
 800ab86:	4603      	mov	r3, r0
 800ab88:	461a      	mov	r2, r3
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	68fa      	ldr	r2, [r7, #12]
 800abc0:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 800abc4:	2104      	movs	r1, #4
 800abc6:	68f8      	ldr	r0, [r7, #12]
 800abc8:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	68fa      	ldr	r2, [r7, #12]
 800abd6:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 800abda:	2105      	movs	r1, #5
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	f8b2 204c 	ldrh.w	r2, [r2, #76]	@ 0x4c
 800abf0:	2106      	movs	r1, #6
 800abf2:	68f8      	ldr	r0, [r7, #12]
 800abf4:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	68fa      	ldr	r2, [r7, #12]
 800ac02:	f8b2 204e 	ldrh.w	r2, [r2, #78]	@ 0x4e
 800ac06:	2107      	movs	r1, #7
 800ac08:	68f8      	ldr	r0, [r7, #12]
 800ac0a:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 800ac1c:	2108      	movs	r1, #8
 800ac1e:	68f8      	ldr	r0, [r7, #12]
 800ac20:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	68fa      	ldr	r2, [r7, #12]
 800ac2e:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 800ac32:	2109      	movs	r1, #9
 800ac34:	68f8      	ldr	r0, [r7, #12]
 800ac36:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	68fa      	ldr	r2, [r7, #12]
 800ac44:	f892 2053 	ldrb.w	r2, [r2, #83]	@ 0x53
 800ac48:	210a      	movs	r1, #10
 800ac4a:	68f8      	ldr	r0, [r7, #12]
 800ac4c:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	68fa      	ldr	r2, [r7, #12]
 800ac5a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800ac5e:	210b      	movs	r1, #11
 800ac60:	68f8      	ldr	r0, [r7, #12]
 800ac62:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	68fa      	ldr	r2, [r7, #12]
 800ac70:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800ac74:	210c      	movs	r1, #12
 800ac76:	68f8      	ldr	r0, [r7, #12]
 800ac78:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	68fa      	ldr	r2, [r7, #12]
 800ac86:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
 800ac8a:	210d      	movs	r1, #13
 800ac8c:	68f8      	ldr	r0, [r7, #12]
 800ac8e:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	68fa      	ldr	r2, [r7, #12]
 800ac9c:	f892 2058 	ldrb.w	r2, [r2, #88]	@ 0x58
 800aca0:	210e      	movs	r1, #14
 800aca2:	68f8      	ldr	r0, [r7, #12]
 800aca4:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	68fa      	ldr	r2, [r7, #12]
 800acb2:	f892 2059 	ldrb.w	r2, [r2, #89]	@ 0x59
 800acb6:	210f      	movs	r1, #15
 800acb8:	68f8      	ldr	r0, [r7, #12]
 800acba:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	68fa      	ldr	r2, [r7, #12]
 800acc8:	f892 205a 	ldrb.w	r2, [r2, #90]	@ 0x5a
 800accc:	2110      	movs	r1, #16
 800acce:	68f8      	ldr	r0, [r7, #12]
 800acd0:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	68fa      	ldr	r2, [r7, #12]
 800acde:	f892 205b 	ldrb.w	r2, [r2, #91]	@ 0x5b
 800ace2:	2111      	movs	r1, #17
 800ace4:	68f8      	ldr	r0, [r7, #12]
 800ace6:	e001      	b.n	800acec <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3ac>
 800ace8:	43800000 	.word	0x43800000
 800acec:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	68fa      	ldr	r2, [r7, #12]
 800acfa:	f892 205d 	ldrb.w	r2, [r2, #93]	@ 0x5d
 800acfe:	2113      	movs	r1, #19
 800ad00:	68f8      	ldr	r0, [r7, #12]
 800ad02:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	68fa      	ldr	r2, [r7, #12]
 800ad10:	f892 205e 	ldrb.w	r2, [r2, #94]	@ 0x5e
 800ad14:	2114      	movs	r1, #20
 800ad16:	68f8      	ldr	r0, [r7, #12]
 800ad18:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	68fa      	ldr	r2, [r7, #12]
 800ad26:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800ad2a:	2116      	movs	r1, #22
 800ad2c:	68f8      	ldr	r0, [r7, #12]
 800ad2e:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	68fa      	ldr	r2, [r7, #12]
 800ad3c:	f8b2 2062 	ldrh.w	r2, [r2, #98]	@ 0x62
 800ad40:	2117      	movs	r1, #23
 800ad42:	68f8      	ldr	r0, [r7, #12]
 800ad44:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	3354      	adds	r3, #84	@ 0x54
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	68fa      	ldr	r2, [r7, #12]
 800ad50:	f892 205f 	ldrb.w	r2, [r2, #95]	@ 0x5f
 800ad54:	4611      	mov	r1, r2
 800ad56:	68f8      	ldr	r0, [r7, #12]
 800ad58:	4798      	blx	r3
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	f083 0301 	eor.w	r3, r3, #1
 800ad60:	b2db      	uxtb	r3, r3
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d001      	beq.n	800ad6a <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 800ad66:	2301      	movs	r3, #1
 800ad68:	e000      	b.n	800ad6c <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x42c>
  return COMPONENT_OK;
 800ad6a:	2300      	movs	r3, #0
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3718      	adds	r7, #24
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 800ad74:	b590      	push	{r4, r7, lr}
 800ad76:	b087      	sub	sp, #28
 800ad78:	af02      	add	r7, sp, #8
 800ad7a:	60f8      	str	r0, [r7, #12]
 800ad7c:	460b      	mov	r3, r1
 800ad7e:	607a      	str	r2, [r7, #4]
 800ad80:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800ad8a:	681c      	ldr	r4, [r3, #0]
 800ad8c:	7afa      	ldrb	r2, [r7, #11]
 800ad8e:	2300      	movs	r3, #0
 800ad90:	9301      	str	r3, [sp, #4]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	9300      	str	r3, [sp, #0]
 800ad96:	4613      	mov	r3, r2
 800ad98:	2201      	movs	r2, #1
 800ad9a:	490c      	ldr	r1, [pc, #48]	@ (800adcc <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 800ad9c:	68f8      	ldr	r0, [r7, #12]
 800ad9e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a09      	ldr	r2, [pc, #36]	@ (800add0 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 800adac:	4907      	ldr	r1, [pc, #28]	@ (800adcc <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 800adae:	68f8      	ldr	r0, [r7, #12]
 800adb0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a05      	ldr	r2, [pc, #20]	@ (800add4 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 800adbe:	4904      	ldr	r1, [pc, #16]	@ (800add0 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 800adc0:	68f8      	ldr	r0, [r7, #12]
 800adc2:	4798      	blx	r3
}
 800adc4:	bf00      	nop
 800adc6:	3714      	adds	r7, #20
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd90      	pop	{r4, r7, pc}
 800adcc:	20000210 	.word	0x20000210
 800add0:	20000230 	.word	0x20000230
 800add4:	20000238 	.word	0x20000238

0800add8 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 800add8:	b590      	push	{r4, r7, lr}
 800adda:	b087      	sub	sp, #28
 800addc:	af02      	add	r7, sp, #8
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	460b      	mov	r3, r1
 800ade2:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800adec:	681c      	ldr	r4, [r3, #0]
 800adee:	78fb      	ldrb	r3, [r7, #3]
 800adf0:	2200      	movs	r2, #0
 800adf2:	9201      	str	r2, [sp, #4]
 800adf4:	2200      	movs	r2, #0
 800adf6:	9200      	str	r2, [sp, #0]
 800adf8:	2202      	movs	r2, #2
 800adfa:	4917      	ldr	r1, [pc, #92]	@ (800ae58 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4a14      	ldr	r2, [pc, #80]	@ (800ae5c <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 800ae0c:	4912      	ldr	r1, [pc, #72]	@ (800ae58 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	4a10      	ldr	r2, [pc, #64]	@ (800ae60 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 800ae1e:	490f      	ldr	r1, [pc, #60]	@ (800ae5c <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6a19      	ldr	r1, [r3, #32]
 800ae28:	78fa      	ldrb	r2, [r7, #3]
 800ae2a:	4613      	mov	r3, r2
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	4413      	add	r3, r2
 800ae30:	009b      	lsls	r3, r3, #2
 800ae32:	440b      	add	r3, r1
 800ae34:	7b9b      	ldrb	r3, [r3, #14]
 800ae36:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	7bfa      	ldrb	r2, [r7, #15]
 800ae44:	4906      	ldr	r1, [pc, #24]	@ (800ae60 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	4798      	blx	r3
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 800ae4e:	68bb      	ldr	r3, [r7, #8]
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3714      	adds	r7, #20
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd90      	pop	{r4, r7, pc}
 800ae58:	20000210 	.word	0x20000210
 800ae5c:	20000230 	.word	0x20000230
 800ae60:	20000238 	.word	0x20000238

0800ae64 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800ae64:	b590      	push	{r4, r7, lr}
 800ae66:	b087      	sub	sp, #28
 800ae68:	af02      	add	r7, sp, #8
 800ae6a:	60f8      	str	r0, [r7, #12]
 800ae6c:	460b      	mov	r3, r1
 800ae6e:	607a      	str	r2, [r7, #4]
 800ae70:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800ae7a:	681c      	ldr	r4, [r3, #0]
 800ae7c:	7afa      	ldrb	r2, [r7, #11]
 800ae7e:	2300      	movs	r3, #0
 800ae80:	9301      	str	r3, [sp, #4]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	9300      	str	r3, [sp, #0]
 800ae86:	4613      	mov	r3, r2
 800ae88:	2203      	movs	r2, #3
 800ae8a:	490c      	ldr	r1, [pc, #48]	@ (800aebc <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x58>)
 800ae8c:	68f8      	ldr	r0, [r7, #12]
 800ae8e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a09      	ldr	r2, [pc, #36]	@ (800aec0 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 800ae9c:	4907      	ldr	r1, [pc, #28]	@ (800aebc <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x58>)
 800ae9e:	68f8      	ldr	r0, [r7, #12]
 800aea0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4a05      	ldr	r2, [pc, #20]	@ (800aec4 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x60>)
 800aeae:	4904      	ldr	r1, [pc, #16]	@ (800aec0 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 800aeb0:	68f8      	ldr	r0, [r7, #12]
 800aeb2:	4798      	blx	r3
}
 800aeb4:	bf00      	nop
 800aeb6:	3714      	adds	r7, #20
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd90      	pop	{r4, r7, pc}
 800aebc:	20000210 	.word	0x20000210
 800aec0:	20000230 	.word	0x20000230
 800aec4:	20000238 	.word	0x20000238

0800aec8 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 800aec8:	b590      	push	{r4, r7, lr}
 800aeca:	b085      	sub	sp, #20
 800aecc:	af02      	add	r7, sp, #8
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	460b      	mov	r3, r1
 800aed2:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800aedc:	681c      	ldr	r4, [r3, #0]
 800aede:	78fb      	ldrb	r3, [r7, #3]
 800aee0:	2200      	movs	r2, #0
 800aee2:	9201      	str	r2, [sp, #4]
 800aee4:	2200      	movs	r2, #0
 800aee6:	9200      	str	r2, [sp, #0]
 800aee8:	2204      	movs	r2, #4
 800aeea:	490c      	ldr	r1, [pc, #48]	@ (800af1c <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	4a09      	ldr	r2, [pc, #36]	@ (800af20 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 800aefc:	4907      	ldr	r1, [pc, #28]	@ (800af1c <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4a05      	ldr	r2, [pc, #20]	@ (800af24 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 800af0e:	4904      	ldr	r1, [pc, #16]	@ (800af20 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	4798      	blx	r3
}
 800af14:	bf00      	nop
 800af16:	370c      	adds	r7, #12
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd90      	pop	{r4, r7, pc}
 800af1c:	20000210 	.word	0x20000210
 800af20:	20000230 	.word	0x20000230
 800af24:	20000238 	.word	0x20000238

0800af28 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 800af28:	b590      	push	{r4, r7, lr}
 800af2a:	b087      	sub	sp, #28
 800af2c:	af02      	add	r7, sp, #8
 800af2e:	60f8      	str	r0, [r7, #12]
 800af30:	460b      	mov	r3, r1
 800af32:	607a      	str	r2, [r7, #4]
 800af34:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800af3e:	681c      	ldr	r4, [r3, #0]
 800af40:	7afa      	ldrb	r2, [r7, #11]
 800af42:	2300      	movs	r3, #0
 800af44:	9301      	str	r3, [sp, #4]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	9300      	str	r3, [sp, #0]
 800af4a:	4613      	mov	r3, r2
 800af4c:	2205      	movs	r2, #5
 800af4e:	490c      	ldr	r1, [pc, #48]	@ (800af80 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 800af50:	68f8      	ldr	r0, [r7, #12]
 800af52:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4a09      	ldr	r2, [pc, #36]	@ (800af84 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 800af60:	4907      	ldr	r1, [pc, #28]	@ (800af80 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 800af62:	68f8      	ldr	r0, [r7, #12]
 800af64:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4a05      	ldr	r2, [pc, #20]	@ (800af88 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 800af72:	4904      	ldr	r1, [pc, #16]	@ (800af84 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 800af74:	68f8      	ldr	r0, [r7, #12]
 800af76:	4798      	blx	r3
}
 800af78:	bf00      	nop
 800af7a:	3714      	adds	r7, #20
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd90      	pop	{r4, r7, pc}
 800af80:	20000210 	.word	0x20000210
 800af84:	20000230 	.word	0x20000230
 800af88:	20000238 	.word	0x20000238

0800af8c <_ZN5L6470I8shield_1E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 800af8c:	b590      	push	{r4, r7, lr}
 800af8e:	b085      	sub	sp, #20
 800af90:	af02      	add	r7, sp, #8
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800af9c:	d21f      	bcs.n	800afde <_ZN5L6470I8shield_1E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800afa6:	681c      	ldr	r4, [r3, #0]
 800afa8:	2300      	movs	r3, #0
 800afaa:	9301      	str	r3, [sp, #4]
 800afac:	2300      	movs	r3, #0
 800afae:	9300      	str	r3, [sp, #0]
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	2206      	movs	r2, #6
 800afb4:	490c      	ldr	r1, [pc, #48]	@ (800afe8 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x5c>)
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4a09      	ldr	r2, [pc, #36]	@ (800afec <_ZN5L6470I8shield_1E10L6470_GoToEm+0x60>)
 800afc6:	4908      	ldr	r1, [pc, #32]	@ (800afe8 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x5c>)
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a06      	ldr	r2, [pc, #24]	@ (800aff0 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x64>)
 800afd8:	4904      	ldr	r1, [pc, #16]	@ (800afec <_ZN5L6470I8shield_1E10L6470_GoToEm+0x60>)
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	4798      	blx	r3
}
 800afde:	bf00      	nop
 800afe0:	370c      	adds	r7, #12
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd90      	pop	{r4, r7, pc}
 800afe6:	bf00      	nop
 800afe8:	20000210 	.word	0x20000210
 800afec:	20000230 	.word	0x20000230
 800aff0:	20000238 	.word	0x20000238

0800aff4 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 800aff4:	b590      	push	{r4, r7, lr}
 800aff6:	b087      	sub	sp, #28
 800aff8:	af02      	add	r7, sp, #8
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	460b      	mov	r3, r1
 800affe:	607a      	str	r2, [r7, #4]
 800b000:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b008:	d220      	bcs.n	800b04c <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b012:	681c      	ldr	r4, [r3, #0]
 800b014:	7afa      	ldrb	r2, [r7, #11]
 800b016:	2300      	movs	r3, #0
 800b018:	9301      	str	r3, [sp, #4]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	9300      	str	r3, [sp, #0]
 800b01e:	4613      	mov	r3, r2
 800b020:	2207      	movs	r2, #7
 800b022:	490c      	ldr	r1, [pc, #48]	@ (800b054 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 800b024:	68f8      	ldr	r0, [r7, #12]
 800b026:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4a09      	ldr	r2, [pc, #36]	@ (800b058 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 800b034:	4907      	ldr	r1, [pc, #28]	@ (800b054 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 800b036:	68f8      	ldr	r0, [r7, #12]
 800b038:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4a05      	ldr	r2, [pc, #20]	@ (800b05c <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 800b046:	4904      	ldr	r1, [pc, #16]	@ (800b058 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 800b048:	68f8      	ldr	r0, [r7, #12]
 800b04a:	4798      	blx	r3
}
 800b04c:	bf00      	nop
 800b04e:	3714      	adds	r7, #20
 800b050:	46bd      	mov	sp, r7
 800b052:	bd90      	pop	{r4, r7, pc}
 800b054:	20000210 	.word	0x20000210
 800b058:	20000230 	.word	0x20000230
 800b05c:	20000238 	.word	0x20000238

0800b060 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800b060:	b590      	push	{r4, r7, lr}
 800b062:	b087      	sub	sp, #28
 800b064:	af02      	add	r7, sp, #8
 800b066:	60f8      	str	r0, [r7, #12]
 800b068:	607b      	str	r3, [r7, #4]
 800b06a:	460b      	mov	r3, r1
 800b06c:	72fb      	strb	r3, [r7, #11]
 800b06e:	4613      	mov	r3, r2
 800b070:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b07a:	681c      	ldr	r4, [r3, #0]
 800b07c:	7af9      	ldrb	r1, [r7, #11]
 800b07e:	7abb      	ldrb	r3, [r7, #10]
 800b080:	687a      	ldr	r2, [r7, #4]
 800b082:	9201      	str	r2, [sp, #4]
 800b084:	9300      	str	r3, [sp, #0]
 800b086:	460b      	mov	r3, r1
 800b088:	2208      	movs	r2, #8
 800b08a:	490c      	ldr	r1, [pc, #48]	@ (800b0bc <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 800b08c:	68f8      	ldr	r0, [r7, #12]
 800b08e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4a09      	ldr	r2, [pc, #36]	@ (800b0c0 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 800b09c:	4907      	ldr	r1, [pc, #28]	@ (800b0bc <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 800b09e:	68f8      	ldr	r0, [r7, #12]
 800b0a0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4a05      	ldr	r2, [pc, #20]	@ (800b0c4 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 800b0ae:	4904      	ldr	r1, [pc, #16]	@ (800b0c0 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 800b0b0:	68f8      	ldr	r0, [r7, #12]
 800b0b2:	4798      	blx	r3
}
 800b0b4:	bf00      	nop
 800b0b6:	3714      	adds	r7, #20
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd90      	pop	{r4, r7, pc}
 800b0bc:	20000210 	.word	0x20000210
 800b0c0:	20000230 	.word	0x20000230
 800b0c4:	20000238 	.word	0x20000238

0800b0c8 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 800b0c8:	b590      	push	{r4, r7, lr}
 800b0ca:	b085      	sub	sp, #20
 800b0cc:	af02      	add	r7, sp, #8
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	460b      	mov	r3, r1
 800b0d2:	70fb      	strb	r3, [r7, #3]
 800b0d4:	4613      	mov	r3, r2
 800b0d6:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b0e0:	681c      	ldr	r4, [r3, #0]
 800b0e2:	78fa      	ldrb	r2, [r7, #3]
 800b0e4:	78bb      	ldrb	r3, [r7, #2]
 800b0e6:	2100      	movs	r1, #0
 800b0e8:	9101      	str	r1, [sp, #4]
 800b0ea:	9300      	str	r3, [sp, #0]
 800b0ec:	4613      	mov	r3, r2
 800b0ee:	2209      	movs	r2, #9
 800b0f0:	490c      	ldr	r1, [pc, #48]	@ (800b124 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	4a09      	ldr	r2, [pc, #36]	@ (800b128 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 800b102:	4908      	ldr	r1, [pc, #32]	@ (800b124 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	4a06      	ldr	r2, [pc, #24]	@ (800b12c <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 800b114:	4904      	ldr	r1, [pc, #16]	@ (800b128 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	4798      	blx	r3
}
 800b11a:	bf00      	nop
 800b11c:	370c      	adds	r7, #12
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd90      	pop	{r4, r7, pc}
 800b122:	bf00      	nop
 800b124:	20000210 	.word	0x20000210
 800b128:	20000230 	.word	0x20000230
 800b12c:	20000238 	.word	0x20000238

0800b130 <_ZN5L6470I8shield_1E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 800b130:	b590      	push	{r4, r7, lr}
 800b132:	b085      	sub	sp, #20
 800b134:	af02      	add	r7, sp, #8
 800b136:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b140:	681c      	ldr	r4, [r3, #0]
 800b142:	2300      	movs	r3, #0
 800b144:	9301      	str	r3, [sp, #4]
 800b146:	2300      	movs	r3, #0
 800b148:	9300      	str	r3, [sp, #0]
 800b14a:	2300      	movs	r3, #0
 800b14c:	220a      	movs	r2, #10
 800b14e:	490c      	ldr	r1, [pc, #48]	@ (800b180 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x50>)
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	4a09      	ldr	r2, [pc, #36]	@ (800b184 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x54>)
 800b160:	4907      	ldr	r1, [pc, #28]	@ (800b180 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x50>)
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	4a05      	ldr	r2, [pc, #20]	@ (800b188 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x58>)
 800b172:	4904      	ldr	r1, [pc, #16]	@ (800b184 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x54>)
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	4798      	blx	r3
}
 800b178:	bf00      	nop
 800b17a:	370c      	adds	r7, #12
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd90      	pop	{r4, r7, pc}
 800b180:	20000210 	.word	0x20000210
 800b184:	20000230 	.word	0x20000230
 800b188:	20000238 	.word	0x20000238

0800b18c <_ZN5L6470I8shield_1E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 800b18c:	b590      	push	{r4, r7, lr}
 800b18e:	b085      	sub	sp, #20
 800b190:	af02      	add	r7, sp, #8
 800b192:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b19c:	681c      	ldr	r4, [r3, #0]
 800b19e:	2300      	movs	r3, #0
 800b1a0:	9301      	str	r3, [sp, #4]
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	9300      	str	r3, [sp, #0]
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	220b      	movs	r2, #11
 800b1aa:	490c      	ldr	r1, [pc, #48]	@ (800b1dc <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x50>)
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	4a09      	ldr	r2, [pc, #36]	@ (800b1e0 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x54>)
 800b1bc:	4907      	ldr	r1, [pc, #28]	@ (800b1dc <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x50>)
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4a05      	ldr	r2, [pc, #20]	@ (800b1e4 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x58>)
 800b1ce:	4904      	ldr	r1, [pc, #16]	@ (800b1e0 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x54>)
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	4798      	blx	r3
}
 800b1d4:	bf00      	nop
 800b1d6:	370c      	adds	r7, #12
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd90      	pop	{r4, r7, pc}
 800b1dc:	20000210 	.word	0x20000210
 800b1e0:	20000230 	.word	0x20000230
 800b1e4:	20000238 	.word	0x20000238

0800b1e8 <_ZN5L6470I8shield_1E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 800b1e8:	b590      	push	{r4, r7, lr}
 800b1ea:	b085      	sub	sp, #20
 800b1ec:	af02      	add	r7, sp, #8
 800b1ee:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b1f8:	681c      	ldr	r4, [r3, #0]
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	9301      	str	r3, [sp, #4]
 800b1fe:	2300      	movs	r3, #0
 800b200:	9300      	str	r3, [sp, #0]
 800b202:	2300      	movs	r3, #0
 800b204:	220c      	movs	r2, #12
 800b206:	490c      	ldr	r1, [pc, #48]	@ (800b238 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x50>)
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4a09      	ldr	r2, [pc, #36]	@ (800b23c <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x54>)
 800b218:	4907      	ldr	r1, [pc, #28]	@ (800b238 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x50>)
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4a05      	ldr	r2, [pc, #20]	@ (800b240 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x58>)
 800b22a:	4904      	ldr	r1, [pc, #16]	@ (800b23c <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x54>)
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	4798      	blx	r3
}
 800b230:	bf00      	nop
 800b232:	370c      	adds	r7, #12
 800b234:	46bd      	mov	sp, r7
 800b236:	bd90      	pop	{r4, r7, pc}
 800b238:	20000210 	.word	0x20000210
 800b23c:	20000230 	.word	0x20000230
 800b240:	20000238 	.word	0x20000238

0800b244 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 800b244:	b590      	push	{r4, r7, lr}
 800b246:	b085      	sub	sp, #20
 800b248:	af02      	add	r7, sp, #8
 800b24a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b254:	681c      	ldr	r4, [r3, #0]
 800b256:	2300      	movs	r3, #0
 800b258:	9301      	str	r3, [sp, #4]
 800b25a:	2300      	movs	r3, #0
 800b25c:	9300      	str	r3, [sp, #0]
 800b25e:	2300      	movs	r3, #0
 800b260:	220d      	movs	r2, #13
 800b262:	490c      	ldr	r1, [pc, #48]	@ (800b294 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x50>)
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4a09      	ldr	r2, [pc, #36]	@ (800b298 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x54>)
 800b274:	4907      	ldr	r1, [pc, #28]	@ (800b294 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x50>)
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4a05      	ldr	r2, [pc, #20]	@ (800b29c <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x58>)
 800b286:	4904      	ldr	r1, [pc, #16]	@ (800b298 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x54>)
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	4798      	blx	r3
}
 800b28c:	bf00      	nop
 800b28e:	370c      	adds	r7, #12
 800b290:	46bd      	mov	sp, r7
 800b292:	bd90      	pop	{r4, r7, pc}
 800b294:	20000210 	.word	0x20000210
 800b298:	20000230 	.word	0x20000230
 800b29c:	20000238 	.word	0x20000238

0800b2a0 <_ZN5L6470I8shield_1E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 800b2a0:	b590      	push	{r4, r7, lr}
 800b2a2:	b085      	sub	sp, #20
 800b2a4:	af02      	add	r7, sp, #8
 800b2a6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b2b0:	681c      	ldr	r4, [r3, #0]
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	9301      	str	r3, [sp, #4]
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	9300      	str	r3, [sp, #0]
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	220e      	movs	r2, #14
 800b2be:	490c      	ldr	r1, [pc, #48]	@ (800b2f0 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x50>)
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	4a09      	ldr	r2, [pc, #36]	@ (800b2f4 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x54>)
 800b2d0:	4907      	ldr	r1, [pc, #28]	@ (800b2f0 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x50>)
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4a05      	ldr	r2, [pc, #20]	@ (800b2f8 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x58>)
 800b2e2:	4904      	ldr	r1, [pc, #16]	@ (800b2f4 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x54>)
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	4798      	blx	r3
}
 800b2e8:	bf00      	nop
 800b2ea:	370c      	adds	r7, #12
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd90      	pop	{r4, r7, pc}
 800b2f0:	20000210 	.word	0x20000210
 800b2f4:	20000230 	.word	0x20000230
 800b2f8:	20000238 	.word	0x20000238

0800b2fc <_ZN5L6470I8shield_1E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 800b2fc:	b590      	push	{r4, r7, lr}
 800b2fe:	b085      	sub	sp, #20
 800b300:	af02      	add	r7, sp, #8
 800b302:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b30c:	681c      	ldr	r4, [r3, #0]
 800b30e:	2300      	movs	r3, #0
 800b310:	9301      	str	r3, [sp, #4]
 800b312:	2300      	movs	r3, #0
 800b314:	9300      	str	r3, [sp, #0]
 800b316:	2300      	movs	r3, #0
 800b318:	220f      	movs	r2, #15
 800b31a:	490c      	ldr	r1, [pc, #48]	@ (800b34c <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x50>)
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4a09      	ldr	r2, [pc, #36]	@ (800b350 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x54>)
 800b32c:	4907      	ldr	r1, [pc, #28]	@ (800b34c <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x50>)
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4a05      	ldr	r2, [pc, #20]	@ (800b354 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x58>)
 800b33e:	4904      	ldr	r1, [pc, #16]	@ (800b350 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x54>)
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	4798      	blx	r3
}
 800b344:	bf00      	nop
 800b346:	370c      	adds	r7, #12
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd90      	pop	{r4, r7, pc}
 800b34c:	20000210 	.word	0x20000210
 800b350:	20000230 	.word	0x20000230
 800b354:	20000238 	.word	0x20000238

0800b358 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 800b358:	b590      	push	{r4, r7, lr}
 800b35a:	b085      	sub	sp, #20
 800b35c:	af02      	add	r7, sp, #8
 800b35e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b368:	681c      	ldr	r4, [r3, #0]
 800b36a:	2300      	movs	r3, #0
 800b36c:	9301      	str	r3, [sp, #4]
 800b36e:	2300      	movs	r3, #0
 800b370:	9300      	str	r3, [sp, #0]
 800b372:	2300      	movs	r3, #0
 800b374:	2210      	movs	r2, #16
 800b376:	490c      	ldr	r1, [pc, #48]	@ (800b3a8 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x50>)
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4a09      	ldr	r2, [pc, #36]	@ (800b3ac <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x54>)
 800b388:	4907      	ldr	r1, [pc, #28]	@ (800b3a8 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x50>)
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4a05      	ldr	r2, [pc, #20]	@ (800b3b0 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x58>)
 800b39a:	4904      	ldr	r1, [pc, #16]	@ (800b3ac <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x54>)
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	4798      	blx	r3
}
 800b3a0:	bf00      	nop
 800b3a2:	370c      	adds	r7, #12
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd90      	pop	{r4, r7, pc}
 800b3a8:	20000210 	.word	0x20000210
 800b3ac:	20000230 	.word	0x20000230
 800b3b0:	20000238 	.word	0x20000238

0800b3b4 <_ZN5L6470I8shield_1E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 800b3b4:	b590      	push	{r4, r7, lr}
 800b3b6:	b085      	sub	sp, #20
 800b3b8:	af02      	add	r7, sp, #8
 800b3ba:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b3c4:	681c      	ldr	r4, [r3, #0]
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	9301      	str	r3, [sp, #4]
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	9300      	str	r3, [sp, #0]
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	2211      	movs	r2, #17
 800b3d2:	490c      	ldr	r1, [pc, #48]	@ (800b404 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x50>)
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	4a09      	ldr	r2, [pc, #36]	@ (800b408 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x54>)
 800b3e4:	4907      	ldr	r1, [pc, #28]	@ (800b404 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x50>)
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	4a05      	ldr	r2, [pc, #20]	@ (800b40c <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x58>)
 800b3f6:	4904      	ldr	r1, [pc, #16]	@ (800b408 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x54>)
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	4798      	blx	r3
}
 800b3fc:	bf00      	nop
 800b3fe:	370c      	adds	r7, #12
 800b400:	46bd      	mov	sp, r7
 800b402:	bd90      	pop	{r4, r7, pc}
 800b404:	20000210 	.word	0x20000210
 800b408:	20000230 	.word	0x20000230
 800b40c:	20000238 	.word	0x20000238

0800b410 <_ZN5L6470I8shield_1E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 800b410:	b590      	push	{r4, r7, lr}
 800b412:	b087      	sub	sp, #28
 800b414:	af02      	add	r7, sp, #8
 800b416:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b420:	681c      	ldr	r4, [r3, #0]
 800b422:	2300      	movs	r3, #0
 800b424:	9301      	str	r3, [sp, #4]
 800b426:	2300      	movs	r3, #0
 800b428:	9300      	str	r3, [sp, #0]
 800b42a:	2300      	movs	r3, #0
 800b42c:	2212      	movs	r2, #18
 800b42e:	4912      	ldr	r1, [pc, #72]	@ (800b478 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x68>)
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	4a0f      	ldr	r2, [pc, #60]	@ (800b47c <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x6c>)
 800b440:	490d      	ldr	r1, [pc, #52]	@ (800b478 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x68>)
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	4a0b      	ldr	r2, [pc, #44]	@ (800b480 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x70>)
 800b452:	490a      	ldr	r1, [pc, #40]	@ (800b47c <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x6c>)
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	2202      	movs	r2, #2
 800b464:	4906      	ldr	r1, [pc, #24]	@ (800b480 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x70>)
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	4798      	blx	r3
 800b46a:	4603      	mov	r3, r0
 800b46c:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 800b46e:	89fb      	ldrh	r3, [r7, #14]
}
 800b470:	4618      	mov	r0, r3
 800b472:	3714      	adds	r7, #20
 800b474:	46bd      	mov	sp, r7
 800b476:	bd90      	pop	{r4, r7, pc}
 800b478:	20000210 	.word	0x20000210
 800b47c:	20000230 	.word	0x20000230
 800b480:	20000238 	.word	0x20000238

0800b484 <_ZN5L6470I8shield_1E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 800b484:	b590      	push	{r4, r7, lr}
 800b486:	b087      	sub	sp, #28
 800b488:	af02      	add	r7, sp, #8
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	460b      	mov	r3, r1
 800b48e:	607a      	str	r2, [r7, #4]
 800b490:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b49a:	681c      	ldr	r4, [r3, #0]
 800b49c:	7afa      	ldrb	r2, [r7, #11]
 800b49e:	2300      	movs	r3, #0
 800b4a0:	9301      	str	r3, [sp, #4]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	9300      	str	r3, [sp, #0]
 800b4a6:	4613      	mov	r3, r2
 800b4a8:	2201      	movs	r2, #1
 800b4aa:	4903      	ldr	r1, [pc, #12]	@ (800b4b8 <_ZN5L6470I8shield_1E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 800b4ac:	68f8      	ldr	r0, [r7, #12]
 800b4ae:	47a0      	blx	r4
}
 800b4b0:	bf00      	nop
 800b4b2:	3714      	adds	r7, #20
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd90      	pop	{r4, r7, pc}
 800b4b8:	20000210 	.word	0x20000210

0800b4bc <_ZN5L6470I8shield_1E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 800b4bc:	b590      	push	{r4, r7, lr}
 800b4be:	b085      	sub	sp, #20
 800b4c0:	af02      	add	r7, sp, #8
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	460b      	mov	r3, r1
 800b4c6:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b4d0:	681c      	ldr	r4, [r3, #0]
 800b4d2:	78fb      	ldrb	r3, [r7, #3]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	9201      	str	r2, [sp, #4]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	9200      	str	r2, [sp, #0]
 800b4dc:	2202      	movs	r2, #2
 800b4de:	4903      	ldr	r1, [pc, #12]	@ (800b4ec <_ZN5L6470I8shield_1E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	47a0      	blx	r4
}
 800b4e4:	bf00      	nop
 800b4e6:	370c      	adds	r7, #12
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd90      	pop	{r4, r7, pc}
 800b4ec:	20000210 	.word	0x20000210

0800b4f0 <_ZN5L6470I8shield_1E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800b4f0:	b590      	push	{r4, r7, lr}
 800b4f2:	b087      	sub	sp, #28
 800b4f4:	af02      	add	r7, sp, #8
 800b4f6:	60f8      	str	r0, [r7, #12]
 800b4f8:	460b      	mov	r3, r1
 800b4fa:	607a      	str	r2, [r7, #4]
 800b4fc:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b506:	681c      	ldr	r4, [r3, #0]
 800b508:	7afa      	ldrb	r2, [r7, #11]
 800b50a:	2300      	movs	r3, #0
 800b50c:	9301      	str	r3, [sp, #4]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	9300      	str	r3, [sp, #0]
 800b512:	4613      	mov	r3, r2
 800b514:	2203      	movs	r2, #3
 800b516:	4903      	ldr	r1, [pc, #12]	@ (800b524 <_ZN5L6470I8shield_1E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 800b518:	68f8      	ldr	r0, [r7, #12]
 800b51a:	47a0      	blx	r4
}
 800b51c:	bf00      	nop
 800b51e:	3714      	adds	r7, #20
 800b520:	46bd      	mov	sp, r7
 800b522:	bd90      	pop	{r4, r7, pc}
 800b524:	20000210 	.word	0x20000210

0800b528 <_ZN5L6470I8shield_1E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 800b528:	b590      	push	{r4, r7, lr}
 800b52a:	b085      	sub	sp, #20
 800b52c:	af02      	add	r7, sp, #8
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	460b      	mov	r3, r1
 800b532:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b53c:	681c      	ldr	r4, [r3, #0]
 800b53e:	78fb      	ldrb	r3, [r7, #3]
 800b540:	2200      	movs	r2, #0
 800b542:	9201      	str	r2, [sp, #4]
 800b544:	2200      	movs	r2, #0
 800b546:	9200      	str	r2, [sp, #0]
 800b548:	2204      	movs	r2, #4
 800b54a:	4903      	ldr	r1, [pc, #12]	@ (800b558 <_ZN5L6470I8shield_1E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	47a0      	blx	r4
}
 800b550:	bf00      	nop
 800b552:	370c      	adds	r7, #12
 800b554:	46bd      	mov	sp, r7
 800b556:	bd90      	pop	{r4, r7, pc}
 800b558:	20000210 	.word	0x20000210

0800b55c <_ZN5L6470I8shield_1E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 800b55c:	b590      	push	{r4, r7, lr}
 800b55e:	b087      	sub	sp, #28
 800b560:	af02      	add	r7, sp, #8
 800b562:	60f8      	str	r0, [r7, #12]
 800b564:	460b      	mov	r3, r1
 800b566:	607a      	str	r2, [r7, #4]
 800b568:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b572:	681c      	ldr	r4, [r3, #0]
 800b574:	7afa      	ldrb	r2, [r7, #11]
 800b576:	2300      	movs	r3, #0
 800b578:	9301      	str	r3, [sp, #4]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	9300      	str	r3, [sp, #0]
 800b57e:	4613      	mov	r3, r2
 800b580:	2205      	movs	r2, #5
 800b582:	4903      	ldr	r1, [pc, #12]	@ (800b590 <_ZN5L6470I8shield_1E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 800b584:	68f8      	ldr	r0, [r7, #12]
 800b586:	47a0      	blx	r4
}
 800b588:	bf00      	nop
 800b58a:	3714      	adds	r7, #20
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd90      	pop	{r4, r7, pc}
 800b590:	20000210 	.word	0x20000210

0800b594 <_ZN5L6470I8shield_1E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 800b594:	b590      	push	{r4, r7, lr}
 800b596:	b085      	sub	sp, #20
 800b598:	af02      	add	r7, sp, #8
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b5a6:	681c      	ldr	r4, [r3, #0]
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	9301      	str	r3, [sp, #4]
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	9300      	str	r3, [sp, #0]
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	2206      	movs	r2, #6
 800b5b4:	4903      	ldr	r1, [pc, #12]	@ (800b5c4 <_ZN5L6470I8shield_1E17L6470_PrepareGoToEm+0x30>)
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	47a0      	blx	r4
}
 800b5ba:	bf00      	nop
 800b5bc:	370c      	adds	r7, #12
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd90      	pop	{r4, r7, pc}
 800b5c2:	bf00      	nop
 800b5c4:	20000210 	.word	0x20000210

0800b5c8 <_ZN5L6470I8shield_1E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 800b5c8:	b590      	push	{r4, r7, lr}
 800b5ca:	b087      	sub	sp, #28
 800b5cc:	af02      	add	r7, sp, #8
 800b5ce:	60f8      	str	r0, [r7, #12]
 800b5d0:	460b      	mov	r3, r1
 800b5d2:	607a      	str	r2, [r7, #4]
 800b5d4:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b5de:	681c      	ldr	r4, [r3, #0]
 800b5e0:	7afa      	ldrb	r2, [r7, #11]
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	9301      	str	r3, [sp, #4]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	9300      	str	r3, [sp, #0]
 800b5ea:	4613      	mov	r3, r2
 800b5ec:	2207      	movs	r2, #7
 800b5ee:	4903      	ldr	r1, [pc, #12]	@ (800b5fc <_ZN5L6470I8shield_1E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 800b5f0:	68f8      	ldr	r0, [r7, #12]
 800b5f2:	47a0      	blx	r4
}
 800b5f4:	bf00      	nop
 800b5f6:	3714      	adds	r7, #20
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd90      	pop	{r4, r7, pc}
 800b5fc:	20000210 	.word	0x20000210

0800b600 <_ZN5L6470I8shield_1E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800b600:	b590      	push	{r4, r7, lr}
 800b602:	b087      	sub	sp, #28
 800b604:	af02      	add	r7, sp, #8
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	607b      	str	r3, [r7, #4]
 800b60a:	460b      	mov	r3, r1
 800b60c:	72fb      	strb	r3, [r7, #11]
 800b60e:	4613      	mov	r3, r2
 800b610:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b61a:	681c      	ldr	r4, [r3, #0]
 800b61c:	7af9      	ldrb	r1, [r7, #11]
 800b61e:	7abb      	ldrb	r3, [r7, #10]
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	9201      	str	r2, [sp, #4]
 800b624:	9300      	str	r3, [sp, #0]
 800b626:	460b      	mov	r3, r1
 800b628:	2208      	movs	r2, #8
 800b62a:	4903      	ldr	r1, [pc, #12]	@ (800b638 <_ZN5L6470I8shield_1E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 800b62c:	68f8      	ldr	r0, [r7, #12]
 800b62e:	47a0      	blx	r4
}
 800b630:	bf00      	nop
 800b632:	3714      	adds	r7, #20
 800b634:	46bd      	mov	sp, r7
 800b636:	bd90      	pop	{r4, r7, pc}
 800b638:	20000210 	.word	0x20000210

0800b63c <_ZN5L6470I8shield_1E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 800b63c:	b590      	push	{r4, r7, lr}
 800b63e:	b085      	sub	sp, #20
 800b640:	af02      	add	r7, sp, #8
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	460b      	mov	r3, r1
 800b646:	70fb      	strb	r3, [r7, #3]
 800b648:	4613      	mov	r3, r2
 800b64a:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b654:	681c      	ldr	r4, [r3, #0]
 800b656:	78fa      	ldrb	r2, [r7, #3]
 800b658:	78bb      	ldrb	r3, [r7, #2]
 800b65a:	2100      	movs	r1, #0
 800b65c:	9101      	str	r1, [sp, #4]
 800b65e:	9300      	str	r3, [sp, #0]
 800b660:	4613      	mov	r3, r2
 800b662:	2209      	movs	r2, #9
 800b664:	4903      	ldr	r1, [pc, #12]	@ (800b674 <_ZN5L6470I8shield_1E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	47a0      	blx	r4
}
 800b66a:	bf00      	nop
 800b66c:	370c      	adds	r7, #12
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd90      	pop	{r4, r7, pc}
 800b672:	bf00      	nop
 800b674:	20000210 	.word	0x20000210

0800b678 <_ZN5L6470I8shield_1E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 800b678:	b590      	push	{r4, r7, lr}
 800b67a:	b085      	sub	sp, #20
 800b67c:	af02      	add	r7, sp, #8
 800b67e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b688:	681c      	ldr	r4, [r3, #0]
 800b68a:	2300      	movs	r3, #0
 800b68c:	9301      	str	r3, [sp, #4]
 800b68e:	2300      	movs	r3, #0
 800b690:	9300      	str	r3, [sp, #0]
 800b692:	2300      	movs	r3, #0
 800b694:	220a      	movs	r2, #10
 800b696:	4903      	ldr	r1, [pc, #12]	@ (800b6a4 <_ZN5L6470I8shield_1E19L6470_PrepareGoHomeEv+0x2c>)
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	47a0      	blx	r4
}
 800b69c:	bf00      	nop
 800b69e:	370c      	adds	r7, #12
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd90      	pop	{r4, r7, pc}
 800b6a4:	20000210 	.word	0x20000210

0800b6a8 <_ZN5L6470I8shield_1E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 800b6a8:	b590      	push	{r4, r7, lr}
 800b6aa:	b085      	sub	sp, #20
 800b6ac:	af02      	add	r7, sp, #8
 800b6ae:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b6b8:	681c      	ldr	r4, [r3, #0]
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	9301      	str	r3, [sp, #4]
 800b6be:	2300      	movs	r3, #0
 800b6c0:	9300      	str	r3, [sp, #0]
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	220b      	movs	r2, #11
 800b6c6:	4903      	ldr	r1, [pc, #12]	@ (800b6d4 <_ZN5L6470I8shield_1E19L6470_PrepareGoMarkEv+0x2c>)
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	47a0      	blx	r4
}
 800b6cc:	bf00      	nop
 800b6ce:	370c      	adds	r7, #12
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd90      	pop	{r4, r7, pc}
 800b6d4:	20000210 	.word	0x20000210

0800b6d8 <_ZN5L6470I8shield_1E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 800b6d8:	b590      	push	{r4, r7, lr}
 800b6da:	b085      	sub	sp, #20
 800b6dc:	af02      	add	r7, sp, #8
 800b6de:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b6e8:	681c      	ldr	r4, [r3, #0]
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	9301      	str	r3, [sp, #4]
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	9300      	str	r3, [sp, #0]
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	220c      	movs	r2, #12
 800b6f6:	4903      	ldr	r1, [pc, #12]	@ (800b704 <_ZN5L6470I8shield_1E21L6470_PrepareResetPosEv+0x2c>)
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	47a0      	blx	r4
}
 800b6fc:	bf00      	nop
 800b6fe:	370c      	adds	r7, #12
 800b700:	46bd      	mov	sp, r7
 800b702:	bd90      	pop	{r4, r7, pc}
 800b704:	20000210 	.word	0x20000210

0800b708 <_ZN5L6470I8shield_1E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 800b708:	b590      	push	{r4, r7, lr}
 800b70a:	b085      	sub	sp, #20
 800b70c:	af02      	add	r7, sp, #8
 800b70e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b718:	681c      	ldr	r4, [r3, #0]
 800b71a:	2300      	movs	r3, #0
 800b71c:	9301      	str	r3, [sp, #4]
 800b71e:	2300      	movs	r3, #0
 800b720:	9300      	str	r3, [sp, #0]
 800b722:	2300      	movs	r3, #0
 800b724:	220d      	movs	r2, #13
 800b726:	4903      	ldr	r1, [pc, #12]	@ (800b734 <_ZN5L6470I8shield_1E24L6470_PrepareResetDeviceEv+0x2c>)
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	47a0      	blx	r4
}
 800b72c:	bf00      	nop
 800b72e:	370c      	adds	r7, #12
 800b730:	46bd      	mov	sp, r7
 800b732:	bd90      	pop	{r4, r7, pc}
 800b734:	20000210 	.word	0x20000210

0800b738 <_ZN5L6470I8shield_1E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 800b738:	b590      	push	{r4, r7, lr}
 800b73a:	b085      	sub	sp, #20
 800b73c:	af02      	add	r7, sp, #8
 800b73e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b748:	681c      	ldr	r4, [r3, #0]
 800b74a:	2300      	movs	r3, #0
 800b74c:	9301      	str	r3, [sp, #4]
 800b74e:	2300      	movs	r3, #0
 800b750:	9300      	str	r3, [sp, #0]
 800b752:	2300      	movs	r3, #0
 800b754:	220e      	movs	r2, #14
 800b756:	4903      	ldr	r1, [pc, #12]	@ (800b764 <_ZN5L6470I8shield_1E21L6470_PrepareSoftStopEv+0x2c>)
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	47a0      	blx	r4
}
 800b75c:	bf00      	nop
 800b75e:	370c      	adds	r7, #12
 800b760:	46bd      	mov	sp, r7
 800b762:	bd90      	pop	{r4, r7, pc}
 800b764:	20000210 	.word	0x20000210

0800b768 <_ZN5L6470I8shield_1E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 800b768:	b590      	push	{r4, r7, lr}
 800b76a:	b085      	sub	sp, #20
 800b76c:	af02      	add	r7, sp, #8
 800b76e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b778:	681c      	ldr	r4, [r3, #0]
 800b77a:	2300      	movs	r3, #0
 800b77c:	9301      	str	r3, [sp, #4]
 800b77e:	2300      	movs	r3, #0
 800b780:	9300      	str	r3, [sp, #0]
 800b782:	2300      	movs	r3, #0
 800b784:	220f      	movs	r2, #15
 800b786:	4903      	ldr	r1, [pc, #12]	@ (800b794 <_ZN5L6470I8shield_1E21L6470_PrepareHardStopEv+0x2c>)
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	47a0      	blx	r4
}
 800b78c:	bf00      	nop
 800b78e:	370c      	adds	r7, #12
 800b790:	46bd      	mov	sp, r7
 800b792:	bd90      	pop	{r4, r7, pc}
 800b794:	20000210 	.word	0x20000210

0800b798 <_ZN5L6470I8shield_1E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 800b798:	b590      	push	{r4, r7, lr}
 800b79a:	b085      	sub	sp, #20
 800b79c:	af02      	add	r7, sp, #8
 800b79e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b7a8:	681c      	ldr	r4, [r3, #0]
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	9301      	str	r3, [sp, #4]
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	9300      	str	r3, [sp, #0]
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	2210      	movs	r2, #16
 800b7b6:	4903      	ldr	r1, [pc, #12]	@ (800b7c4 <_ZN5L6470I8shield_1E20L6470_PrepareSoftHiZEv+0x2c>)
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	47a0      	blx	r4
}
 800b7bc:	bf00      	nop
 800b7be:	370c      	adds	r7, #12
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd90      	pop	{r4, r7, pc}
 800b7c4:	20000210 	.word	0x20000210

0800b7c8 <_ZN5L6470I8shield_1E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 800b7c8:	b590      	push	{r4, r7, lr}
 800b7ca:	b085      	sub	sp, #20
 800b7cc:	af02      	add	r7, sp, #8
 800b7ce:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b7d8:	681c      	ldr	r4, [r3, #0]
 800b7da:	2300      	movs	r3, #0
 800b7dc:	9301      	str	r3, [sp, #4]
 800b7de:	2300      	movs	r3, #0
 800b7e0:	9300      	str	r3, [sp, #0]
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	2211      	movs	r2, #17
 800b7e6:	4903      	ldr	r1, [pc, #12]	@ (800b7f4 <_ZN5L6470I8shield_1E20L6470_PrepareHardHiZEv+0x2c>)
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	47a0      	blx	r4
}
 800b7ec:	bf00      	nop
 800b7ee:	370c      	adds	r7, #12
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd90      	pop	{r4, r7, pc}
 800b7f4:	20000210 	.word	0x20000210

0800b7f8 <_ZN5L6470I8shield_1E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 800b7f8:	b590      	push	{r4, r7, lr}
 800b7fa:	b085      	sub	sp, #20
 800b7fc:	af02      	add	r7, sp, #8
 800b7fe:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b808:	681c      	ldr	r4, [r3, #0]
 800b80a:	2300      	movs	r3, #0
 800b80c:	9301      	str	r3, [sp, #4]
 800b80e:	2300      	movs	r3, #0
 800b810:	9300      	str	r3, [sp, #0]
 800b812:	2300      	movs	r3, #0
 800b814:	2212      	movs	r2, #18
 800b816:	4903      	ldr	r1, [pc, #12]	@ (800b824 <_ZN5L6470I8shield_1E22L6470_PrepareGetStatusEv+0x2c>)
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	47a0      	blx	r4
}
 800b81c:	bf00      	nop
 800b81e:	370c      	adds	r7, #12
 800b820:	46bd      	mov	sp, r7
 800b822:	bd90      	pop	{r4, r7, pc}
 800b824:	20000210 	.word	0x20000210

0800b828 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	4a09      	ldr	r2, [pc, #36]	@ (800b860 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 800b83c:	4909      	ldr	r1, [pc, #36]	@ (800b864 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	4a06      	ldr	r2, [pc, #24]	@ (800b868 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 800b84e:	4904      	ldr	r1, [pc, #16]	@ (800b860 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 800b854:	4b04      	ldr	r3, [pc, #16]	@ (800b868 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 800b856:	4618      	mov	r0, r3
 800b858:	3708      	adds	r7, #8
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	20000230 	.word	0x20000230
 800b864:	20000210 	.word	0x20000210
 800b868:	20000238 	.word	0x20000238

0800b86c <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 800b86c:	b590      	push	{r4, r7, lr}
 800b86e:	b089      	sub	sp, #36	@ 0x24
 800b870:	af02      	add	r7, sp, #8
 800b872:	60f8      	str	r0, [r7, #12]
 800b874:	60b9      	str	r1, [r7, #8]
 800b876:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 800b878:	4b17      	ldr	r3, [pc, #92]	@ (800b8d8 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 800b87a:	2200      	movs	r2, #0
 800b87c:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 800b87e:	2300      	movs	r3, #0
 800b880:	75fb      	strb	r3, [r7, #23]
 800b882:	e020      	b.n	800b8c6 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b88c:	681c      	ldr	r4, [r3, #0]
 800b88e:	7dfb      	ldrb	r3, [r7, #23]
 800b890:	005b      	lsls	r3, r3, #1
 800b892:	461a      	mov	r2, r3
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	1899      	adds	r1, r3, r2
 800b898:	7dfb      	ldrb	r3, [r7, #23]
 800b89a:	005b      	lsls	r3, r3, #1
 800b89c:	461a      	mov	r2, r3
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	441a      	add	r2, r3
 800b8a2:	230a      	movs	r3, #10
 800b8a4:	9300      	str	r3, [sp, #0]
 800b8a6:	2302      	movs	r3, #2
 800b8a8:	68f8      	ldr	r0, [r7, #12]
 800b8aa:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	75bb      	strb	r3, [r7, #22]
 800b8b0:	e003      	b.n	800b8ba <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x4e>
 800b8b2:	bf00      	nop
 800b8b4:	7dbb      	ldrb	r3, [r7, #22]
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	75bb      	strb	r3, [r7, #22]
 800b8ba:	7dbb      	ldrb	r3, [r7, #22]
 800b8bc:	2b7c      	cmp	r3, #124	@ 0x7c
 800b8be:	d9f8      	bls.n	800b8b2 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 800b8c0:	7dfb      	ldrb	r3, [r7, #23]
 800b8c2:	3301      	adds	r3, #1
 800b8c4:	75fb      	strb	r3, [r7, #23]
 800b8c6:	7dfb      	ldrb	r3, [r7, #23]
 800b8c8:	2b03      	cmp	r3, #3
 800b8ca:	d9db      	bls.n	800b884 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 800b8cc:	bf00      	nop
}
 800b8ce:	bf00      	nop
 800b8d0:	371c      	adds	r7, #28
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd90      	pop	{r4, r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	2000020d 	.word	0x2000020d

0800b8dc <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 800b8dc:	b480      	push	{r7}
 800b8de:	b087      	sub	sp, #28
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	4613      	mov	r3, r2
 800b8e8:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	74fb      	strb	r3, [r7, #19]
 800b8f2:	e016      	b.n	800b922 <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 800b8f4:	7cfb      	ldrb	r3, [r7, #19]
 800b8f6:	005b      	lsls	r3, r3, #1
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	7f1b      	ldrb	r3, [r3, #28]
 800b8fe:	4413      	add	r3, r2
 800b900:	68ba      	ldr	r2, [r7, #8]
 800b902:	4413      	add	r3, r2
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	4619      	mov	r1, r3
 800b908:	79fa      	ldrb	r2, [r7, #7]
 800b90a:	7cfb      	ldrb	r3, [r7, #19]
 800b90c:	1ad3      	subs	r3, r2, r3
 800b90e:	00db      	lsls	r3, r3, #3
 800b910:	fa01 f303 	lsl.w	r3, r1, r3
 800b914:	461a      	mov	r2, r3
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	4313      	orrs	r3, r2
 800b91a:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 800b91c:	7cfb      	ldrb	r3, [r7, #19]
 800b91e:	3301      	adds	r3, #1
 800b920:	74fb      	strb	r3, [r7, #19]
 800b922:	7cfb      	ldrb	r3, [r7, #19]
 800b924:	2b03      	cmp	r3, #3
 800b926:	d9e5      	bls.n	800b8f4 <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 800b928:	697b      	ldr	r3, [r7, #20]
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	371c      	adds	r7, #28
 800b92e:	46bd      	mov	sp, r7
 800b930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b934:	4770      	bx	lr
	...

0800b938 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 800b938:	b580      	push	{r7, lr}
 800b93a:	b084      	sub	sp, #16
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	460b      	mov	r3, r1
 800b942:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 800b944:	2300      	movs	r3, #0
 800b946:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	2118      	movs	r1, #24
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	4798      	blx	r3
 800b958:	4602      	mov	r2, r0
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b95e:	b292      	uxth	r2, r2
 800b960:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 800b962:	78fb      	ldrb	r3, [r7, #3]
 800b964:	2b0e      	cmp	r3, #14
 800b966:	f200 8099 	bhi.w	800ba9c <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
 800b96a:	a201      	add	r2, pc, #4	@ (adr r2, 800b970 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x38>)
 800b96c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b970:	0800b9ad 	.word	0x0800b9ad
 800b974:	0800b9bd 	.word	0x0800b9bd
 800b978:	0800b9cd 	.word	0x0800b9cd
 800b97c:	0800b9dd 	.word	0x0800b9dd
 800b980:	0800b9ed 	.word	0x0800b9ed
 800b984:	0800b9fd 	.word	0x0800b9fd
 800b988:	0800ba0d 	.word	0x0800ba0d
 800b98c:	0800ba1d 	.word	0x0800ba1d
 800b990:	0800ba2d 	.word	0x0800ba2d
 800b994:	0800ba3d 	.word	0x0800ba3d
 800b998:	0800ba4d 	.word	0x0800ba4d
 800b99c:	0800ba5d 	.word	0x0800ba5d
 800b9a0:	0800ba6d 	.word	0x0800ba6d
 800b9a4:	0800ba7d 	.word	0x0800ba7d
 800b9a8:	0800ba8d 	.word	0x0800ba8d
      state = pL6470_StatusRegister->HiZ;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9b0:	781b      	ldrb	r3, [r3, #0]
 800b9b2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	73fb      	strb	r3, [r7, #15]
      break;
 800b9ba:	e06f      	b.n	800ba9c <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9c0:	781b      	ldrb	r3, [r3, #0]
 800b9c2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b9c6:	b2db      	uxtb	r3, r3
 800b9c8:	73fb      	strb	r3, [r7, #15]
      break;
 800b9ca:	e067      	b.n	800ba9c <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	73fb      	strb	r3, [r7, #15]
      break;
 800b9da:	e05f      	b.n	800ba9c <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b9e6:	b2db      	uxtb	r3, r3
 800b9e8:	73fb      	strb	r3, [r7, #15]
      break;
 800b9ea:	e057      	b.n	800ba9c <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b9f6:	b2db      	uxtb	r3, r3
 800b9f8:	73fb      	strb	r3, [r7, #15]
      break;
 800b9fa:	e04f      	b.n	800ba9c <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba00:	781b      	ldrb	r3, [r3, #0]
 800ba02:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800ba06:	b2db      	uxtb	r3, r3
 800ba08:	73fb      	strb	r3, [r7, #15]
      break;
 800ba0a:	e047      	b.n	800ba9c <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba10:	781b      	ldrb	r3, [r3, #0]
 800ba12:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ba16:	b2db      	uxtb	r3, r3
 800ba18:	73fb      	strb	r3, [r7, #15]
      break;
 800ba1a:	e03f      	b.n	800ba9c <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba20:	785b      	ldrb	r3, [r3, #1]
 800ba22:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ba26:	b2db      	uxtb	r3, r3
 800ba28:	73fb      	strb	r3, [r7, #15]
      break;
 800ba2a:	e037      	b.n	800ba9c <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba30:	785b      	ldrb	r3, [r3, #1]
 800ba32:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ba36:	b2db      	uxtb	r3, r3
 800ba38:	73fb      	strb	r3, [r7, #15]
      break;
 800ba3a:	e02f      	b.n	800ba9c <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba40:	785b      	ldrb	r3, [r3, #1]
 800ba42:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ba46:	b2db      	uxtb	r3, r3
 800ba48:	73fb      	strb	r3, [r7, #15]
      break;
 800ba4a:	e027      	b.n	800ba9c <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba50:	785b      	ldrb	r3, [r3, #1]
 800ba52:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800ba56:	b2db      	uxtb	r3, r3
 800ba58:	73fb      	strb	r3, [r7, #15]
      break;
 800ba5a:	e01f      	b.n	800ba9c <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba60:	785b      	ldrb	r3, [r3, #1]
 800ba62:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ba66:	b2db      	uxtb	r3, r3
 800ba68:	73fb      	strb	r3, [r7, #15]
      break;
 800ba6a:	e017      	b.n	800ba9c <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba70:	785b      	ldrb	r3, [r3, #1]
 800ba72:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ba76:	b2db      	uxtb	r3, r3
 800ba78:	73fb      	strb	r3, [r7, #15]
      break;
 800ba7a:	e00f      	b.n	800ba9c <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba80:	785b      	ldrb	r3, [r3, #1]
 800ba82:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800ba86:	b2db      	uxtb	r3, r3
 800ba88:	73fb      	strb	r3, [r7, #15]
      break;
 800ba8a:	e007      	b.n	800ba9c <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba90:	785b      	ldrb	r3, [r3, #1]
 800ba92:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ba96:	b2db      	uxtb	r3, r3
 800ba98:	73fb      	strb	r3, [r7, #15]
      break;
 800ba9a:	bf00      	nop
  return state;
 800ba9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3710      	adds	r7, #16
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	bf00      	nop

0800baa8 <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 800baa8:	b480      	push	{r7}
 800baaa:	b083      	sub	sp, #12
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	460b      	mov	r3, r1
 800bab2:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 800bab4:	78fb      	ldrb	r3, [r7, #3]
 800bab6:	2b18      	cmp	r3, #24
 800bab8:	d809      	bhi.n	800bace <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6a19      	ldr	r1, [r3, #32]
 800babe:	78fa      	ldrb	r2, [r7, #3]
 800bac0:	4613      	mov	r3, r2
 800bac2:	009b      	lsls	r3, r3, #2
 800bac4:	4413      	add	r3, r2
 800bac6:	009b      	lsls	r3, r3, #2
 800bac8:	440b      	add	r3, r1
 800baca:	3301      	adds	r3, #1
 800bacc:	e000      	b.n	800bad0 <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 800bace:	2300      	movs	r3, #0
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	370c      	adds	r7, #12
 800bad4:	46bd      	mov	sp, r7
 800bad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bada:	4770      	bx	lr

0800badc <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 800badc:	b480      	push	{r7}
 800bade:	b085      	sub	sp, #20
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 800bae6:	2300      	movs	r3, #0
 800bae8:	73fb      	strb	r3, [r7, #15]
 800baea:	e01a      	b.n	800bb22 <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 800baec:	7bfb      	ldrb	r3, [r7, #15]
 800baee:	011b      	lsls	r3, r3, #4
 800baf0:	683a      	ldr	r2, [r7, #0]
 800baf2:	4413      	add	r3, r2
 800baf4:	2200      	movs	r2, #0
 800baf6:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 800baf8:	7bfb      	ldrb	r3, [r7, #15]
 800bafa:	011b      	lsls	r3, r3, #4
 800bafc:	683a      	ldr	r2, [r7, #0]
 800bafe:	4413      	add	r3, r2
 800bb00:	2200      	movs	r2, #0
 800bb02:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 800bb04:	7bfb      	ldrb	r3, [r7, #15]
 800bb06:	011b      	lsls	r3, r3, #4
 800bb08:	683a      	ldr	r2, [r7, #0]
 800bb0a:	4413      	add	r3, r2
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 800bb10:	7bfb      	ldrb	r3, [r7, #15]
 800bb12:	011b      	lsls	r3, r3, #4
 800bb14:	683a      	ldr	r2, [r7, #0]
 800bb16:	4413      	add	r3, r2
 800bb18:	2200      	movs	r2, #0
 800bb1a:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 800bb1c:	7bfb      	ldrb	r3, [r7, #15]
 800bb1e:	3301      	adds	r3, #1
 800bb20:	73fb      	strb	r3, [r7, #15]
 800bb22:	7bfb      	ldrb	r3, [r7, #15]
 800bb24:	2b01      	cmp	r3, #1
 800bb26:	d9e1      	bls.n	800baec <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 800bb28:	bf00      	nop
 800bb2a:	bf00      	nop
 800bb2c:	3714      	adds	r7, #20
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb34:	4770      	bx	lr

0800bb36 <_ZN5L6470I8shield_1E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 800bb36:	b480      	push	{r7}
 800bb38:	b085      	sub	sp, #20
 800bb3a:	af00      	add	r7, sp, #0
 800bb3c:	60f8      	str	r0, [r7, #12]
 800bb3e:	60b9      	str	r1, [r7, #8]
 800bb40:	603b      	str	r3, [r7, #0]
 800bb42:	4613      	mov	r3, r2
 800bb44:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	7f1b      	ldrb	r3, [r3, #28]
 800bb4a:	011b      	lsls	r3, r3, #4
 800bb4c:	68ba      	ldr	r2, [r7, #8]
 800bb4e:	4413      	add	r3, r2
 800bb50:	79fa      	ldrb	r2, [r7, #7]
 800bb52:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	7f1b      	ldrb	r3, [r3, #28]
 800bb58:	011b      	lsls	r3, r3, #4
 800bb5a:	68ba      	ldr	r2, [r7, #8]
 800bb5c:	4413      	add	r3, r2
 800bb5e:	683a      	ldr	r2, [r7, #0]
 800bb60:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	7f1b      	ldrb	r3, [r3, #28]
 800bb66:	011b      	lsls	r3, r3, #4
 800bb68:	68ba      	ldr	r2, [r7, #8]
 800bb6a:	4413      	add	r3, r2
 800bb6c:	69ba      	ldr	r2, [r7, #24]
 800bb6e:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	7f1b      	ldrb	r3, [r3, #28]
 800bb74:	011b      	lsls	r3, r3, #4
 800bb76:	68ba      	ldr	r2, [r7, #8]
 800bb78:	4413      	add	r3, r2
 800bb7a:	69fa      	ldr	r2, [r7, #28]
 800bb7c:	60da      	str	r2, [r3, #12]
}
 800bb7e:	bf00      	nop
 800bb80:	3714      	adds	r7, #20
 800bb82:	46bd      	mov	sp, r7
 800bb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb88:	4770      	bx	lr
	...

0800bb8c <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 800bb8c:	b590      	push	{r4, r7, lr}
 800bb8e:	b087      	sub	sp, #28
 800bb90:	af02      	add	r7, sp, #8
 800bb92:	60f8      	str	r0, [r7, #12]
 800bb94:	60b9      	str	r1, [r7, #8]
 800bb96:	603b      	str	r3, [r7, #0]
 800bb98:	4613      	mov	r3, r2
 800bb9a:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 800bb9c:	4b10      	ldr	r3, [pc, #64]	@ (800bbe0 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 800bb9e:	781b      	ldrb	r3, [r3, #0]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d10a      	bne.n	800bbba <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800bba4:	4b0e      	ldr	r3, [pc, #56]	@ (800bbe0 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 800bba6:	2201      	movs	r2, #1
 800bba8:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	68b9      	ldr	r1, [r7, #8]
 800bbb6:	68f8      	ldr	r0, [r7, #12]
 800bbb8:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 800bbc2:	681c      	ldr	r4, [r3, #0]
 800bbc4:	79fa      	ldrb	r2, [r7, #7]
 800bbc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbc8:	9301      	str	r3, [sp, #4]
 800bbca:	6a3b      	ldr	r3, [r7, #32]
 800bbcc:	9300      	str	r3, [sp, #0]
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	68b9      	ldr	r1, [r7, #8]
 800bbd2:	68f8      	ldr	r0, [r7, #12]
 800bbd4:	47a0      	blx	r4
}
 800bbd6:	bf00      	nop
 800bbd8:	3714      	adds	r7, #20
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd90      	pop	{r4, r7, pc}
 800bbde:	bf00      	nop
 800bbe0:	2000020d 	.word	0x2000020d

0800bbe4 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 800bbe4:	b480      	push	{r7}
 800bbe6:	b087      	sub	sp, #28
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	60f8      	str	r0, [r7, #12]
 800bbec:	60b9      	str	r1, [r7, #8]
 800bbee:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	75bb      	strb	r3, [r7, #22]
 800bbf8:	e013      	b.n	800bc22 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	75fb      	strb	r3, [r7, #23]
 800bbfe:	e00a      	b.n	800bc16 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 800bc00:	7d7b      	ldrb	r3, [r7, #21]
 800bc02:	1c5a      	adds	r2, r3, #1
 800bc04:	757a      	strb	r2, [r7, #21]
 800bc06:	461a      	mov	r2, r3
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	4413      	add	r3, r2
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800bc10:	7dfb      	ldrb	r3, [r7, #23]
 800bc12:	3301      	adds	r3, #1
 800bc14:	75fb      	strb	r3, [r7, #23]
 800bc16:	7dfb      	ldrb	r3, [r7, #23]
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d9f1      	bls.n	800bc00 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800bc1c:	7dbb      	ldrb	r3, [r7, #22]
 800bc1e:	3301      	adds	r3, #1
 800bc20:	75bb      	strb	r3, [r7, #22]
 800bc22:	7dbb      	ldrb	r3, [r7, #22]
 800bc24:	2b03      	cmp	r3, #3
 800bc26:	d9e8      	bls.n	800bbfa <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800bc28:	2300      	movs	r3, #0
 800bc2a:	75fb      	strb	r3, [r7, #23]
 800bc2c:	e1f1      	b.n	800c012 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bc32:	7dfb      	ldrb	r3, [r7, #23]
 800bc34:	011b      	lsls	r3, r3, #4
 800bc36:	68b9      	ldr	r1, [r7, #8]
 800bc38:	440b      	add	r3, r1
 800bc3a:	781b      	ldrb	r3, [r3, #0]
 800bc3c:	4619      	mov	r1, r3
 800bc3e:	460b      	mov	r3, r1
 800bc40:	00db      	lsls	r3, r3, #3
 800bc42:	1a5b      	subs	r3, r3, r1
 800bc44:	005b      	lsls	r3, r3, #1
 800bc46:	441a      	add	r2, r3
 800bc48:	7dfb      	ldrb	r3, [r7, #23]
 800bc4a:	6879      	ldr	r1, [r7, #4]
 800bc4c:	440b      	add	r3, r1
 800bc4e:	7b12      	ldrb	r2, [r2, #12]
 800bc50:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 800bc52:	7dfb      	ldrb	r3, [r7, #23]
 800bc54:	011b      	lsls	r3, r3, #4
 800bc56:	68ba      	ldr	r2, [r7, #8]
 800bc58:	4413      	add	r3, r2
 800bc5a:	781b      	ldrb	r3, [r3, #0]
 800bc5c:	2b12      	cmp	r3, #18
 800bc5e:	f200 81d5 	bhi.w	800c00c <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 800bc62:	a201      	add	r2, pc, #4	@ (adr r2, 800bc68 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 800bc64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc68:	0800c00d 	.word	0x0800c00d
 800bc6c:	0800bcb5 	.word	0x0800bcb5
 800bc70:	0800bd3d 	.word	0x0800bd3d
 800bc74:	0800bd6d 	.word	0x0800bd6d
 800bc78:	0800bdd5 	.word	0x0800bdd5
 800bc7c:	0800be03 	.word	0x0800be03
 800bc80:	0800be6b 	.word	0x0800be6b
 800bc84:	0800bea7 	.word	0x0800bea7
 800bc88:	0800bf0f 	.word	0x0800bf0f
 800bc8c:	0800bfab 	.word	0x0800bfab
 800bc90:	0800c00d 	.word	0x0800c00d
 800bc94:	0800c00d 	.word	0x0800c00d
 800bc98:	0800c00d 	.word	0x0800c00d
 800bc9c:	0800c00d 	.word	0x0800c00d
 800bca0:	0800c00d 	.word	0x0800c00d
 800bca4:	0800c00d 	.word	0x0800c00d
 800bca8:	0800c00d 	.word	0x0800c00d
 800bcac:	0800c00d 	.word	0x0800c00d
 800bcb0:	0800c00d 	.word	0x0800c00d
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 800bcb4:	7dfb      	ldrb	r3, [r7, #23]
 800bcb6:	687a      	ldr	r2, [r7, #4]
 800bcb8:	4413      	add	r3, r2
 800bcba:	7819      	ldrb	r1, [r3, #0]
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	6a18      	ldr	r0, [r3, #32]
 800bcc0:	7dfb      	ldrb	r3, [r7, #23]
 800bcc2:	011b      	lsls	r3, r3, #4
 800bcc4:	68ba      	ldr	r2, [r7, #8]
 800bcc6:	4413      	add	r3, r2
 800bcc8:	685a      	ldr	r2, [r3, #4]
 800bcca:	4613      	mov	r3, r2
 800bccc:	009b      	lsls	r3, r3, #2
 800bcce:	4413      	add	r3, r2
 800bcd0:	009b      	lsls	r3, r3, #2
 800bcd2:	4403      	add	r3, r0
 800bcd4:	781a      	ldrb	r2, [r3, #0]
 800bcd6:	7dfb      	ldrb	r3, [r7, #23]
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	4403      	add	r3, r0
 800bcdc:	430a      	orrs	r2, r1
 800bcde:	b2d2      	uxtb	r2, r2
 800bce0:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	6a19      	ldr	r1, [r3, #32]
 800bce6:	7dfb      	ldrb	r3, [r7, #23]
 800bce8:	011b      	lsls	r3, r3, #4
 800bcea:	68ba      	ldr	r2, [r7, #8]
 800bcec:	4413      	add	r3, r2
 800bcee:	685a      	ldr	r2, [r3, #4]
 800bcf0:	4613      	mov	r3, r2
 800bcf2:	009b      	lsls	r3, r3, #2
 800bcf4:	4413      	add	r3, r2
 800bcf6:	009b      	lsls	r3, r3, #2
 800bcf8:	440b      	add	r3, r1
 800bcfa:	7b9b      	ldrb	r3, [r3, #14]
 800bcfc:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 800bcfe:	2301      	movs	r3, #1
 800bd00:	75bb      	strb	r3, [r7, #22]
 800bd02:	e016      	b.n	800bd32 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 800bd04:	7dfb      	ldrb	r3, [r7, #23]
 800bd06:	011b      	lsls	r3, r3, #4
 800bd08:	68ba      	ldr	r2, [r7, #8]
 800bd0a:	4413      	add	r3, r2
 800bd0c:	689a      	ldr	r2, [r3, #8]
 800bd0e:	7d39      	ldrb	r1, [r7, #20]
 800bd10:	7dbb      	ldrb	r3, [r7, #22]
 800bd12:	1acb      	subs	r3, r1, r3
 800bd14:	00db      	lsls	r3, r3, #3
 800bd16:	fa22 f103 	lsr.w	r1, r2, r3
 800bd1a:	7dbb      	ldrb	r3, [r7, #22]
 800bd1c:	005a      	lsls	r2, r3, #1
 800bd1e:	7dfb      	ldrb	r3, [r7, #23]
 800bd20:	4413      	add	r3, r2
 800bd22:	461a      	mov	r2, r3
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	4413      	add	r3, r2
 800bd28:	b2ca      	uxtb	r2, r1
 800bd2a:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 800bd2c:	7dbb      	ldrb	r3, [r7, #22]
 800bd2e:	3301      	adds	r3, #1
 800bd30:	75bb      	strb	r3, [r7, #22]
 800bd32:	7d3a      	ldrb	r2, [r7, #20]
 800bd34:	7dbb      	ldrb	r3, [r7, #22]
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d2e4      	bcs.n	800bd04 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 800bd3a:	e167      	b.n	800c00c <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 800bd3c:	7dfb      	ldrb	r3, [r7, #23]
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	4413      	add	r3, r2
 800bd42:	7819      	ldrb	r1, [r3, #0]
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	6a18      	ldr	r0, [r3, #32]
 800bd48:	7dfb      	ldrb	r3, [r7, #23]
 800bd4a:	011b      	lsls	r3, r3, #4
 800bd4c:	68ba      	ldr	r2, [r7, #8]
 800bd4e:	4413      	add	r3, r2
 800bd50:	685a      	ldr	r2, [r3, #4]
 800bd52:	4613      	mov	r3, r2
 800bd54:	009b      	lsls	r3, r3, #2
 800bd56:	4413      	add	r3, r2
 800bd58:	009b      	lsls	r3, r3, #2
 800bd5a:	4403      	add	r3, r0
 800bd5c:	781a      	ldrb	r2, [r3, #0]
 800bd5e:	7dfb      	ldrb	r3, [r7, #23]
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	4403      	add	r3, r0
 800bd64:	430a      	orrs	r2, r1
 800bd66:	b2d2      	uxtb	r2, r2
 800bd68:	701a      	strb	r2, [r3, #0]
      break;
 800bd6a:	e14f      	b.n	800c00c <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800bd6c:	7dfb      	ldrb	r3, [r7, #23]
 800bd6e:	687a      	ldr	r2, [r7, #4]
 800bd70:	4413      	add	r3, r2
 800bd72:	7819      	ldrb	r1, [r3, #0]
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bd78:	7dfb      	ldrb	r3, [r7, #23]
 800bd7a:	011b      	lsls	r3, r3, #4
 800bd7c:	68ba      	ldr	r2, [r7, #8]
 800bd7e:	4413      	add	r3, r2
 800bd80:	685a      	ldr	r2, [r3, #4]
 800bd82:	4613      	mov	r3, r2
 800bd84:	00db      	lsls	r3, r3, #3
 800bd86:	4413      	add	r3, r2
 800bd88:	4403      	add	r3, r0
 800bd8a:	7a1a      	ldrb	r2, [r3, #8]
 800bd8c:	7dfb      	ldrb	r3, [r7, #23]
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	4403      	add	r3, r0
 800bd92:	430a      	orrs	r2, r1
 800bd94:	b2d2      	uxtb	r2, r2
 800bd96:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bd98:	2301      	movs	r3, #1
 800bd9a:	75bb      	strb	r3, [r7, #22]
 800bd9c:	e016      	b.n	800bdcc <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800bd9e:	7dfb      	ldrb	r3, [r7, #23]
 800bda0:	011b      	lsls	r3, r3, #4
 800bda2:	68ba      	ldr	r2, [r7, #8]
 800bda4:	4413      	add	r3, r2
 800bda6:	689a      	ldr	r2, [r3, #8]
 800bda8:	7dbb      	ldrb	r3, [r7, #22]
 800bdaa:	f1c3 0303 	rsb	r3, r3, #3
 800bdae:	00db      	lsls	r3, r3, #3
 800bdb0:	fa22 f103 	lsr.w	r1, r2, r3
 800bdb4:	7dbb      	ldrb	r3, [r7, #22]
 800bdb6:	005a      	lsls	r2, r3, #1
 800bdb8:	7dfb      	ldrb	r3, [r7, #23]
 800bdba:	4413      	add	r3, r2
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	4413      	add	r3, r2
 800bdc2:	b2ca      	uxtb	r2, r1
 800bdc4:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bdc6:	7dbb      	ldrb	r3, [r7, #22]
 800bdc8:	3301      	adds	r3, #1
 800bdca:	75bb      	strb	r3, [r7, #22]
 800bdcc:	7dbb      	ldrb	r3, [r7, #22]
 800bdce:	2b03      	cmp	r3, #3
 800bdd0:	d9e5      	bls.n	800bd9e <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 800bdd2:	e11b      	b.n	800c00c <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800bdd4:	7dfb      	ldrb	r3, [r7, #23]
 800bdd6:	687a      	ldr	r2, [r7, #4]
 800bdd8:	4413      	add	r3, r2
 800bdda:	7819      	ldrb	r1, [r3, #0]
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bde0:	7dfb      	ldrb	r3, [r7, #23]
 800bde2:	011b      	lsls	r3, r3, #4
 800bde4:	68ba      	ldr	r2, [r7, #8]
 800bde6:	4413      	add	r3, r2
 800bde8:	685a      	ldr	r2, [r3, #4]
 800bdea:	4613      	mov	r3, r2
 800bdec:	00db      	lsls	r3, r3, #3
 800bdee:	4413      	add	r3, r2
 800bdf0:	4403      	add	r3, r0
 800bdf2:	7a1a      	ldrb	r2, [r3, #8]
 800bdf4:	7dfb      	ldrb	r3, [r7, #23]
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	4403      	add	r3, r0
 800bdfa:	430a      	orrs	r2, r1
 800bdfc:	b2d2      	uxtb	r2, r2
 800bdfe:	701a      	strb	r2, [r3, #0]
      break;
 800be00:	e104      	b.n	800c00c <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800be02:	7dfb      	ldrb	r3, [r7, #23]
 800be04:	687a      	ldr	r2, [r7, #4]
 800be06:	4413      	add	r3, r2
 800be08:	7819      	ldrb	r1, [r3, #0]
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800be0e:	7dfb      	ldrb	r3, [r7, #23]
 800be10:	011b      	lsls	r3, r3, #4
 800be12:	68ba      	ldr	r2, [r7, #8]
 800be14:	4413      	add	r3, r2
 800be16:	685a      	ldr	r2, [r3, #4]
 800be18:	4613      	mov	r3, r2
 800be1a:	00db      	lsls	r3, r3, #3
 800be1c:	4413      	add	r3, r2
 800be1e:	4403      	add	r3, r0
 800be20:	7a1a      	ldrb	r2, [r3, #8]
 800be22:	7dfb      	ldrb	r3, [r7, #23]
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	4403      	add	r3, r0
 800be28:	430a      	orrs	r2, r1
 800be2a:	b2d2      	uxtb	r2, r2
 800be2c:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800be2e:	2301      	movs	r3, #1
 800be30:	75bb      	strb	r3, [r7, #22]
 800be32:	e016      	b.n	800be62 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800be34:	7dfb      	ldrb	r3, [r7, #23]
 800be36:	011b      	lsls	r3, r3, #4
 800be38:	68ba      	ldr	r2, [r7, #8]
 800be3a:	4413      	add	r3, r2
 800be3c:	689a      	ldr	r2, [r3, #8]
 800be3e:	7dbb      	ldrb	r3, [r7, #22]
 800be40:	f1c3 0303 	rsb	r3, r3, #3
 800be44:	00db      	lsls	r3, r3, #3
 800be46:	fa22 f103 	lsr.w	r1, r2, r3
 800be4a:	7dbb      	ldrb	r3, [r7, #22]
 800be4c:	005a      	lsls	r2, r3, #1
 800be4e:	7dfb      	ldrb	r3, [r7, #23]
 800be50:	4413      	add	r3, r2
 800be52:	461a      	mov	r2, r3
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	4413      	add	r3, r2
 800be58:	b2ca      	uxtb	r2, r1
 800be5a:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800be5c:	7dbb      	ldrb	r3, [r7, #22]
 800be5e:	3301      	adds	r3, #1
 800be60:	75bb      	strb	r3, [r7, #22]
 800be62:	7dbb      	ldrb	r3, [r7, #22]
 800be64:	2b03      	cmp	r3, #3
 800be66:	d9e5      	bls.n	800be34 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 800be68:	e0d0      	b.n	800c00c <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800be6a:	2301      	movs	r3, #1
 800be6c:	75bb      	strb	r3, [r7, #22]
 800be6e:	e016      	b.n	800be9e <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 800be70:	7dfb      	ldrb	r3, [r7, #23]
 800be72:	011b      	lsls	r3, r3, #4
 800be74:	68ba      	ldr	r2, [r7, #8]
 800be76:	4413      	add	r3, r2
 800be78:	685a      	ldr	r2, [r3, #4]
 800be7a:	7dbb      	ldrb	r3, [r7, #22]
 800be7c:	f1c3 0303 	rsb	r3, r3, #3
 800be80:	00db      	lsls	r3, r3, #3
 800be82:	fa22 f103 	lsr.w	r1, r2, r3
 800be86:	7dbb      	ldrb	r3, [r7, #22]
 800be88:	005a      	lsls	r2, r3, #1
 800be8a:	7dfb      	ldrb	r3, [r7, #23]
 800be8c:	4413      	add	r3, r2
 800be8e:	461a      	mov	r2, r3
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	4413      	add	r3, r2
 800be94:	b2ca      	uxtb	r2, r1
 800be96:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800be98:	7dbb      	ldrb	r3, [r7, #22]
 800be9a:	3301      	adds	r3, #1
 800be9c:	75bb      	strb	r3, [r7, #22]
 800be9e:	7dbb      	ldrb	r3, [r7, #22]
 800bea0:	2b03      	cmp	r3, #3
 800bea2:	d9e5      	bls.n	800be70 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 800bea4:	e0b2      	b.n	800c00c <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800bea6:	7dfb      	ldrb	r3, [r7, #23]
 800bea8:	687a      	ldr	r2, [r7, #4]
 800beaa:	4413      	add	r3, r2
 800beac:	7819      	ldrb	r1, [r3, #0]
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800beb2:	7dfb      	ldrb	r3, [r7, #23]
 800beb4:	011b      	lsls	r3, r3, #4
 800beb6:	68ba      	ldr	r2, [r7, #8]
 800beb8:	4413      	add	r3, r2
 800beba:	685a      	ldr	r2, [r3, #4]
 800bebc:	4613      	mov	r3, r2
 800bebe:	00db      	lsls	r3, r3, #3
 800bec0:	4413      	add	r3, r2
 800bec2:	4403      	add	r3, r0
 800bec4:	7a1a      	ldrb	r2, [r3, #8]
 800bec6:	7dfb      	ldrb	r3, [r7, #23]
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	4403      	add	r3, r0
 800becc:	430a      	orrs	r2, r1
 800bece:	b2d2      	uxtb	r2, r2
 800bed0:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bed2:	2301      	movs	r3, #1
 800bed4:	75bb      	strb	r3, [r7, #22]
 800bed6:	e016      	b.n	800bf06 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800bed8:	7dfb      	ldrb	r3, [r7, #23]
 800beda:	011b      	lsls	r3, r3, #4
 800bedc:	68ba      	ldr	r2, [r7, #8]
 800bede:	4413      	add	r3, r2
 800bee0:	689a      	ldr	r2, [r3, #8]
 800bee2:	7dbb      	ldrb	r3, [r7, #22]
 800bee4:	f1c3 0303 	rsb	r3, r3, #3
 800bee8:	00db      	lsls	r3, r3, #3
 800beea:	fa22 f103 	lsr.w	r1, r2, r3
 800beee:	7dbb      	ldrb	r3, [r7, #22]
 800bef0:	005a      	lsls	r2, r3, #1
 800bef2:	7dfb      	ldrb	r3, [r7, #23]
 800bef4:	4413      	add	r3, r2
 800bef6:	461a      	mov	r2, r3
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	4413      	add	r3, r2
 800befc:	b2ca      	uxtb	r2, r1
 800befe:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bf00:	7dbb      	ldrb	r3, [r7, #22]
 800bf02:	3301      	adds	r3, #1
 800bf04:	75bb      	strb	r3, [r7, #22]
 800bf06:	7dbb      	ldrb	r3, [r7, #22]
 800bf08:	2b03      	cmp	r3, #3
 800bf0a:	d9e5      	bls.n	800bed8 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 800bf0c:	e07e      	b.n	800c00c <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 800bf0e:	7dfb      	ldrb	r3, [r7, #23]
 800bf10:	687a      	ldr	r2, [r7, #4]
 800bf12:	4413      	add	r3, r2
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	b259      	sxtb	r1, r3
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800bf1c:	7dfb      	ldrb	r3, [r7, #23]
 800bf1e:	011b      	lsls	r3, r3, #4
 800bf20:	68ba      	ldr	r2, [r7, #8]
 800bf22:	4413      	add	r3, r2
 800bf24:	685a      	ldr	r2, [r3, #4]
 800bf26:	4613      	mov	r3, r2
 800bf28:	009b      	lsls	r3, r3, #2
 800bf2a:	4413      	add	r3, r2
 800bf2c:	4403      	add	r3, r0
 800bf2e:	791b      	ldrb	r3, [r3, #4]
 800bf30:	00db      	lsls	r3, r3, #3
 800bf32:	b25b      	sxtb	r3, r3
 800bf34:	430b      	orrs	r3, r1
 800bf36:	b259      	sxtb	r1, r3
 800bf38:	7dfb      	ldrb	r3, [r7, #23]
 800bf3a:	687a      	ldr	r2, [r7, #4]
 800bf3c:	4413      	add	r3, r2
 800bf3e:	b2ca      	uxtb	r2, r1
 800bf40:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 800bf42:	7dfb      	ldrb	r3, [r7, #23]
 800bf44:	687a      	ldr	r2, [r7, #4]
 800bf46:	4413      	add	r3, r2
 800bf48:	7819      	ldrb	r1, [r3, #0]
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bf4e:	7dfb      	ldrb	r3, [r7, #23]
 800bf50:	011b      	lsls	r3, r3, #4
 800bf52:	68ba      	ldr	r2, [r7, #8]
 800bf54:	4413      	add	r3, r2
 800bf56:	689a      	ldr	r2, [r3, #8]
 800bf58:	4613      	mov	r3, r2
 800bf5a:	00db      	lsls	r3, r3, #3
 800bf5c:	4413      	add	r3, r2
 800bf5e:	4403      	add	r3, r0
 800bf60:	7a1a      	ldrb	r2, [r3, #8]
 800bf62:	7dfb      	ldrb	r3, [r7, #23]
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	4403      	add	r3, r0
 800bf68:	430a      	orrs	r2, r1
 800bf6a:	b2d2      	uxtb	r2, r2
 800bf6c:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bf6e:	2301      	movs	r3, #1
 800bf70:	75bb      	strb	r3, [r7, #22]
 800bf72:	e016      	b.n	800bfa2 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 800bf74:	7dfb      	ldrb	r3, [r7, #23]
 800bf76:	011b      	lsls	r3, r3, #4
 800bf78:	68ba      	ldr	r2, [r7, #8]
 800bf7a:	4413      	add	r3, r2
 800bf7c:	68da      	ldr	r2, [r3, #12]
 800bf7e:	7dbb      	ldrb	r3, [r7, #22]
 800bf80:	f1c3 0303 	rsb	r3, r3, #3
 800bf84:	00db      	lsls	r3, r3, #3
 800bf86:	fa22 f103 	lsr.w	r1, r2, r3
 800bf8a:	7dbb      	ldrb	r3, [r7, #22]
 800bf8c:	005a      	lsls	r2, r3, #1
 800bf8e:	7dfb      	ldrb	r3, [r7, #23]
 800bf90:	4413      	add	r3, r2
 800bf92:	461a      	mov	r2, r3
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	4413      	add	r3, r2
 800bf98:	b2ca      	uxtb	r2, r1
 800bf9a:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bf9c:	7dbb      	ldrb	r3, [r7, #22]
 800bf9e:	3301      	adds	r3, #1
 800bfa0:	75bb      	strb	r3, [r7, #22]
 800bfa2:	7dbb      	ldrb	r3, [r7, #22]
 800bfa4:	2b03      	cmp	r3, #3
 800bfa6:	d9e5      	bls.n	800bf74 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 800bfa8:	e030      	b.n	800c00c <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 800bfaa:	7dfb      	ldrb	r3, [r7, #23]
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	4413      	add	r3, r2
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	b259      	sxtb	r1, r3
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800bfb8:	7dfb      	ldrb	r3, [r7, #23]
 800bfba:	011b      	lsls	r3, r3, #4
 800bfbc:	68ba      	ldr	r2, [r7, #8]
 800bfbe:	4413      	add	r3, r2
 800bfc0:	685a      	ldr	r2, [r3, #4]
 800bfc2:	4613      	mov	r3, r2
 800bfc4:	009b      	lsls	r3, r3, #2
 800bfc6:	4413      	add	r3, r2
 800bfc8:	4403      	add	r3, r0
 800bfca:	791b      	ldrb	r3, [r3, #4]
 800bfcc:	00db      	lsls	r3, r3, #3
 800bfce:	b25b      	sxtb	r3, r3
 800bfd0:	430b      	orrs	r3, r1
 800bfd2:	b259      	sxtb	r1, r3
 800bfd4:	7dfb      	ldrb	r3, [r7, #23]
 800bfd6:	687a      	ldr	r2, [r7, #4]
 800bfd8:	4413      	add	r3, r2
 800bfda:	b2ca      	uxtb	r2, r1
 800bfdc:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 800bfde:	7dfb      	ldrb	r3, [r7, #23]
 800bfe0:	687a      	ldr	r2, [r7, #4]
 800bfe2:	4413      	add	r3, r2
 800bfe4:	7819      	ldrb	r1, [r3, #0]
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bfea:	7dfb      	ldrb	r3, [r7, #23]
 800bfec:	011b      	lsls	r3, r3, #4
 800bfee:	68ba      	ldr	r2, [r7, #8]
 800bff0:	4413      	add	r3, r2
 800bff2:	689a      	ldr	r2, [r3, #8]
 800bff4:	4613      	mov	r3, r2
 800bff6:	00db      	lsls	r3, r3, #3
 800bff8:	4413      	add	r3, r2
 800bffa:	4403      	add	r3, r0
 800bffc:	7a1a      	ldrb	r2, [r3, #8]
 800bffe:	7dfb      	ldrb	r3, [r7, #23]
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	4403      	add	r3, r0
 800c004:	430a      	orrs	r2, r1
 800c006:	b2d2      	uxtb	r2, r2
 800c008:	701a      	strb	r2, [r3, #0]
      break;
 800c00a:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800c00c:	7dfb      	ldrb	r3, [r7, #23]
 800c00e:	3301      	adds	r3, #1
 800c010:	75fb      	strb	r3, [r7, #23]
 800c012:	7dfb      	ldrb	r3, [r7, #23]
 800c014:	2b01      	cmp	r3, #1
 800c016:	f67f ae0a 	bls.w	800bc2e <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 800c01a:	bf00      	nop
 800c01c:	bf00      	nop
 800c01e:	371c      	adds	r7, #28
 800c020:	46bd      	mov	sp, r7
 800c022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c026:	4770      	bx	lr

0800c028 <_ZN5L6470I8shield_1E11L6470_roundEf>:
    int L6470_round(float f)
 800c028:	b480      	push	{r7}
 800c02a:	b083      	sub	sp, #12
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	ed87 0a00 	vstr	s0, [r7]
        if (f >= 0) {
 800c034:	edd7 7a00 	vldr	s15, [r7]
 800c038:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c03c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c040:	db1e      	blt.n	800c080 <_ZN5L6470I8shield_1E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 800c042:	edd7 7a00 	vldr	s15, [r7]
 800c046:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c04a:	ee17 2a90 	vmov	r2, s15
 800c04e:	edd7 7a00 	vldr	s15, [r7]
 800c052:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c056:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c05a:	ed97 7a00 	vldr	s14, [r7]
 800c05e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c062:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800c066:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c06a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c06e:	bf4c      	ite	mi
 800c070:	2301      	movmi	r3, #1
 800c072:	2300      	movpl	r3, #0
 800c074:	b2db      	uxtb	r3, r3
 800c076:	f083 0301 	eor.w	r3, r3, #1
 800c07a:	b2db      	uxtb	r3, r3
 800c07c:	4413      	add	r3, r2
 800c07e:	e01a      	b.n	800c0b6 <_ZN5L6470I8shield_1E11L6470_roundEf+0x8e>
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 800c080:	edd7 7a00 	vldr	s15, [r7]
 800c084:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c088:	ee17 2a90 	vmov	r2, s15
 800c08c:	edd7 7a00 	vldr	s15, [r7]
 800c090:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c098:	ed97 7a00 	vldr	s14, [r7]
 800c09c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c0a0:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800c0a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c0a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0ac:	d501      	bpl.n	800c0b2 <_ZN5L6470I8shield_1E11L6470_roundEf+0x8a>
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	e000      	b.n	800c0b4 <_ZN5L6470I8shield_1E11L6470_roundEf+0x8c>
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	1ad3      	subs	r3, r2, r3
    }
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	370c      	adds	r7, #12
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c0:	4770      	bx	lr

0800c0c2 <_ZN5L6470I8shield_1E4ReadEPht>:
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 800c0c2:	b580      	push	{r7, lr}
 800c0c4:	b086      	sub	sp, #24
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	60f8      	str	r0, [r7, #12]
 800c0ca:	60b9      	str	r1, [r7, #8]
 800c0cc:	4613      	mov	r3, r2
 800c0ce:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	6918      	ldr	r0, [r3, #16]
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	8a9b      	ldrh	r3, [r3, #20]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	4619      	mov	r1, r3
 800c0dc:	f001 fa6a 	bl	800d5b4 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	6998      	ldr	r0, [r3, #24]
 800c0e4:	88fa      	ldrh	r2, [r7, #6]
 800c0e6:	2364      	movs	r3, #100	@ 0x64
 800c0e8:	68b9      	ldr	r1, [r7, #8]
 800c0ea:	f002 fa7a 	bl	800e5e2 <HAL_SPI_Receive>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	6918      	ldr	r0, [r3, #16]
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	8a9b      	ldrh	r3, [r3, #20]
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	f001 fa59 	bl	800d5b4 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 800c102:	7dfb      	ldrb	r3, [r7, #23]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d001      	beq.n	800c10c <_ZN5L6470I8shield_1E4ReadEPht+0x4a>
        	return COMPONENT_ERROR;
 800c108:	2301      	movs	r3, #1
 800c10a:	e000      	b.n	800c10e <_ZN5L6470I8shield_1E4ReadEPht+0x4c>
        return COMPONENT_OK;
 800c10c:	2300      	movs	r3, #0
    }
 800c10e:	4618      	mov	r0, r3
 800c110:	3718      	adds	r7, #24
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}

0800c116 <_ZN5L6470I8shield_1E5WriteEPht>:
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 800c116:	b580      	push	{r7, lr}
 800c118:	b086      	sub	sp, #24
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	60f8      	str	r0, [r7, #12]
 800c11e:	60b9      	str	r1, [r7, #8]
 800c120:	4613      	mov	r3, r2
 800c122:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	6918      	ldr	r0, [r3, #16]
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	8a9b      	ldrh	r3, [r3, #20]
 800c12c:	2200      	movs	r2, #0
 800c12e:	4619      	mov	r1, r3
 800c130:	f001 fa40 	bl	800d5b4 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	6998      	ldr	r0, [r3, #24]
 800c138:	88fa      	ldrh	r2, [r7, #6]
 800c13a:	2364      	movs	r3, #100	@ 0x64
 800c13c:	68b9      	ldr	r1, [r7, #8]
 800c13e:	f002 f914 	bl	800e36a <HAL_SPI_Transmit>
 800c142:	4603      	mov	r3, r0
 800c144:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	6918      	ldr	r0, [r3, #16]
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	8a9b      	ldrh	r3, [r3, #20]
 800c14e:	2201      	movs	r2, #1
 800c150:	4619      	mov	r1, r3
 800c152:	f001 fa2f 	bl	800d5b4 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 800c156:	7dfb      	ldrb	r3, [r7, #23]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d001      	beq.n	800c160 <_ZN5L6470I8shield_1E5WriteEPht+0x4a>
        	return COMPONENT_ERROR;
 800c15c:	2301      	movs	r3, #1
 800c15e:	e000      	b.n	800c162 <_ZN5L6470I8shield_1E5WriteEPht+0x4c>
        return COMPONENT_OK;
 800c160:	2300      	movs	r3, #0
    }
 800c162:	4618      	mov	r0, r3
 800c164:	3718      	adds	r7, #24
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}

0800c16a <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t>:
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 800c16a:	b580      	push	{r7, lr}
 800c16c:	b088      	sub	sp, #32
 800c16e:	af02      	add	r7, sp, #8
 800c170:	60f8      	str	r0, [r7, #12]
 800c172:	60b9      	str	r1, [r7, #8]
 800c174:	607a      	str	r2, [r7, #4]
 800c176:	807b      	strh	r3, [r7, #2]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	6918      	ldr	r0, [r3, #16]
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	8a9b      	ldrh	r3, [r3, #20]
 800c180:	2200      	movs	r2, #0
 800c182:	4619      	mov	r1, r3
 800c184:	f001 fa16 	bl	800d5b4 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	6998      	ldr	r0, [r3, #24]
 800c18c:	887b      	ldrh	r3, [r7, #2]
 800c18e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c192:	9200      	str	r2, [sp, #0]
 800c194:	68ba      	ldr	r2, [r7, #8]
 800c196:	6879      	ldr	r1, [r7, #4]
 800c198:	f002 fb34 	bl	800e804 <HAL_SPI_TransmitReceive>
 800c19c:	4603      	mov	r3, r0
 800c19e:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 800c1a0:	7dfb      	ldrb	r3, [r7, #23]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d009      	beq.n	800c1ba <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t+0x50>
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	6918      	ldr	r0, [r3, #16]
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	8a9b      	ldrh	r3, [r3, #20]
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	4619      	mov	r1, r3
 800c1b2:	f001 f9ff 	bl	800d5b4 <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	e008      	b.n	800c1cc <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t+0x62>
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	6918      	ldr	r0, [r3, #16]
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	8a9b      	ldrh	r3, [r3, #20]
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	4619      	mov	r1, r3
 800c1c6:	f001 f9f5 	bl	800d5b4 <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 800c1ca:	2300      	movs	r3, #0
    }
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	3718      	adds	r7, #24
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}

0800c1d4 <_ZN5L6470I8shield_1E23L6470_SPI_CommunicationEPhS2_tm>:
    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 800c1d4:	b590      	push	{r4, r7, lr}
 800c1d6:	b085      	sub	sp, #20
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	60f8      	str	r0, [r7, #12]
 800c1dc:	60b9      	str	r1, [r7, #8]
 800c1de:	607a      	str	r2, [r7, #4]
 800c1e0:	807b      	strh	r3, [r7, #2]
        ReadWrite(pRxData, pTxData, Size);
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800c1ea:	681c      	ldr	r4, [r3, #0]
 800c1ec:	887b      	ldrh	r3, [r7, #2]
 800c1ee:	68ba      	ldr	r2, [r7, #8]
 800c1f0:	6879      	ldr	r1, [r7, #4]
 800c1f2:	68f8      	ldr	r0, [r7, #12]
 800c1f4:	47a0      	blx	r4
    }
 800c1f6:	bf00      	nop
 800c1f8:	3714      	adds	r7, #20
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd90      	pop	{r4, r7, pc}
	...

0800c200 <_ZN13abstractL6470C1Ev>:

uint8_t shield_1::count = 0;
uint8_t shield_2::count = 0;
uint8_t shield_3::count = 0;

abstractL6470::abstractL6470()
 800c200:	b480      	push	{r7}
 800c202:	b083      	sub	sp, #12
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	4a04      	ldr	r2, [pc, #16]	@ (800c21c <_ZN13abstractL6470C1Ev+0x1c>)
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	601a      	str	r2, [r3, #0]
{

}
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	4618      	mov	r0, r3
 800c212:	370c      	adds	r7, #12
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr
 800c21c:	08014f04 	.word	0x08014f04

0800c220 <_ZN13abstractL6470D1Ev>:

abstractL6470::~abstractL6470()
 800c220:	b480      	push	{r7}
 800c222:	b083      	sub	sp, #12
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
 800c228:	4a04      	ldr	r2, [pc, #16]	@ (800c23c <_ZN13abstractL6470D1Ev+0x1c>)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	601a      	str	r2, [r3, #0]
{

}
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	4618      	mov	r0, r3
 800c232:	370c      	adds	r7, #12
 800c234:	46bd      	mov	sp, r7
 800c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23a:	4770      	bx	lr
 800c23c:	08014f04 	.word	0x08014f04

0800c240 <_ZN10MsgHandlerC1EP20__UART_HandleTypeDef>:
	public:
		/*
		* @brief Constructor of MsgHandler
		* @param huart2, pointer to huart wich MsgHandler will handle 
		*/
		MsgHandler(UART_HandleTypeDef *huart2) : huart(huart2)
 800c240:	b580      	push	{r7, lr}
 800c242:	b082      	sub	sp, #8
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	6039      	str	r1, [r7, #0]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	683a      	ldr	r2, [r7, #0]
 800c24e:	601a      	str	r2, [r3, #0]
		{
			motor_speeds = new float[4];
 800c250:	2010      	movs	r0, #16
 800c252:	f004 febc 	bl	8010fce <_Znaj>
 800c256:	4603      	mov	r3, r0
 800c258:	461a      	mov	r2, r3
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	605a      	str	r2, [r3, #4]
			sending = false;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2200      	movs	r2, #0
 800c262:	725a      	strb	r2, [r3, #9]
			receiving = false;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2200      	movs	r2, #0
 800c268:	729a      	strb	r2, [r3, #10]
			received_motor_speeds = false;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2200      	movs	r2, #0
 800c26e:	721a      	strb	r2, [r3, #8]
		}
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	4618      	mov	r0, r3
 800c274:	3708      	adds	r7, #8
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}

0800c27a <_ZN10MsgHandlerD1Ev>:
		/*
		* @brief Destructor of MsgHandler
		*/
		~MsgHandler() { delete [] motor_speeds;}
 800c27a:	b580      	push	{r7, lr}
 800c27c:	b082      	sub	sp, #8
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	685b      	ldr	r3, [r3, #4]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d004      	beq.n	800c294 <_ZN10MsgHandlerD1Ev+0x1a>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	685b      	ldr	r3, [r3, #4]
 800c28e:	4618      	mov	r0, r3
 800c290:	f004 fa34 	bl	80106fc <_ZdaPv>
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	4618      	mov	r0, r3
 800c298:	3708      	adds	r7, #8
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}

0800c29e <_ZN10MsgHandler14unlock_timeoutEv>:
		void send_motor_speeds(float* input_motor_speeds);
		bool get_received_motor_speeds(float* to_fill_motor_speeds);
		/*
		* @brief Reset flags that may lock functions waiting those flags
		*/
		bool unlock_timeout() { receiving = false; sending = false; };
 800c29e:	b480      	push	{r7}
 800c2a0:	b083      	sub	sp, #12
 800c2a2:	af00      	add	r7, sp, #0
 800c2a4:	6078      	str	r0, [r7, #4]
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	729a      	strb	r2, [r3, #10]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	725a      	strb	r2, [r3, #9]
 800c2b2:	bf00      	nop
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	370c      	adds	r7, #12
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr

0800c2c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c2c0:	b5b0      	push	{r4, r5, r7, lr}
 800c2c2:	b086      	sub	sp, #24
 800c2c4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c2c6:	f000 fda7 	bl	800ce18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c2ca:	f000 f897 	bl	800c3fc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c2ce:	f000 f9dd 	bl	800c68c <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 800c2d2:	f000 f9ad 	bl	800c630 <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 800c2d6:	f000 f94f 	bl	800c578 <_ZL12MX_TIM2_Initv>
  MX_SPI1_Init();
 800c2da:	f000 f911 	bl	800c500 <_ZL12MX_SPI1_Initv>
  /* USER CODE BEGIN 2 */


  //Start Timer2 interrupt (every 20 ms here)
  HAL_TIM_Base_Start_IT(&htim2);
 800c2de:	483e      	ldr	r0, [pc, #248]	@ (800c3d8 <main+0x118>)
 800c2e0:	f002 fdb2 	bl	800ee48 <HAL_TIM_Base_Start_IT>

  //Init motor class
  moteurs = new BlocMoteurs(&hspi1, reset_shield_1_GPIO_Port, reset_shield_1_Pin, ssel1_GPIO_Port, ssel1_Pin,
		  	  	  	  	  	  	    reset_shield_2_GPIO_Port, reset_shield_2_Pin, ssel2_GPIO_Port, ssel2_Pin);
 800c2e4:	f44f 70bc 	mov.w	r0, #376	@ 0x178
 800c2e8:	f004 fe60 	bl	8010fac <_Znwj>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	461c      	mov	r4, r3
  moteurs = new BlocMoteurs(&hspi1, reset_shield_1_GPIO_Port, reset_shield_1_Pin, ssel1_GPIO_Port, ssel1_Pin,
 800c2f0:	2501      	movs	r5, #1
		  	  	  	  	  	  	    reset_shield_2_GPIO_Port, reset_shield_2_Pin, ssel2_GPIO_Port, ssel2_Pin);
 800c2f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c2f6:	9305      	str	r3, [sp, #20]
 800c2f8:	4b38      	ldr	r3, [pc, #224]	@ (800c3dc <main+0x11c>)
 800c2fa:	9304      	str	r3, [sp, #16]
 800c2fc:	2310      	movs	r3, #16
 800c2fe:	9303      	str	r3, [sp, #12]
 800c300:	4b37      	ldr	r3, [pc, #220]	@ (800c3e0 <main+0x120>)
 800c302:	9302      	str	r3, [sp, #8]
 800c304:	2310      	movs	r3, #16
 800c306:	9301      	str	r3, [sp, #4]
 800c308:	4b34      	ldr	r3, [pc, #208]	@ (800c3dc <main+0x11c>)
 800c30a:	9300      	str	r3, [sp, #0]
 800c30c:	2320      	movs	r3, #32
 800c30e:	4a34      	ldr	r2, [pc, #208]	@ (800c3e0 <main+0x120>)
 800c310:	4934      	ldr	r1, [pc, #208]	@ (800c3e4 <main+0x124>)
 800c312:	4620      	mov	r0, r4
 800c314:	f7f5 ffa6 	bl	8002264 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>
  moteurs = new BlocMoteurs(&hspi1, reset_shield_1_GPIO_Port, reset_shield_1_Pin, ssel1_GPIO_Port, ssel1_Pin,
 800c318:	4b33      	ldr	r3, [pc, #204]	@ (800c3e8 <main+0x128>)
 800c31a:	601c      	str	r4, [r3, #0]
  

  //Set microstepping to 128 for smooth rotations
  moteurs->set_microstepping_mode(step_mode_t::STEP_MODE_FULL);
 800c31c:	4b32      	ldr	r3, [pc, #200]	@ (800c3e8 <main+0x128>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	2100      	movs	r1, #0
 800c322:	4618      	mov	r0, r3
 800c324:	f7f6 fa14 	bl	8002750 <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    //Ask handler to fetch motor_speeds (UART_RECEIVE_IT)
	  msg_handler.prepare_receive_motor_speeds();
 800c328:	4830      	ldr	r0, [pc, #192]	@ (800c3ec <main+0x12c>)
 800c32a:	f000 faee 	bl	800c90a <_ZN10MsgHandler28prepare_receive_motor_speedsEv>
	  while(1)
	  {

			if( msg_handler.get_received_motor_speeds(input_motor_speeds) != true)
 800c32e:	4930      	ldr	r1, [pc, #192]	@ (800c3f0 <main+0x130>)
 800c330:	482e      	ldr	r0, [pc, #184]	@ (800c3ec <main+0x12c>)
 800c332:	f000 fb06 	bl	800c942 <_ZN10MsgHandler25get_received_motor_speedsEPf>
 800c336:	4603      	mov	r3, r0
 800c338:	2b01      	cmp	r3, #1
 800c33a:	bf14      	ite	ne
 800c33c:	2301      	movne	r3, #1
 800c33e:	2300      	moveq	r3, #0
 800c340:	b2db      	uxtb	r3, r3
 800c342:	2b00      	cmp	r3, #0
 800c344:	d00c      	beq.n	800c360 <main+0xa0>
			{
				if( timer_timeout_count >= 5) // 5*TIM2_INTERRUPT_PERIOD(20m) -> Timeout 100ms
 800c346:	4b2b      	ldr	r3, [pc, #172]	@ (800c3f4 <main+0x134>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2b04      	cmp	r3, #4
 800c34c:	ddef      	ble.n	800c32e <main+0x6e>
				{
					moteurs->motors_stop_soft_hiz(); // stop motors
 800c34e:	4b26      	ldr	r3, [pc, #152]	@ (800c3e8 <main+0x128>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	4618      	mov	r0, r3
 800c354:	f7f6 fa49 	bl	80027ea <_ZN11BlocMoteurs20motors_stop_soft_hizEv>
					timeout_moteurs = true;
 800c358:	4b27      	ldr	r3, [pc, #156]	@ (800c3f8 <main+0x138>)
 800c35a:	2201      	movs	r2, #1
 800c35c:	701a      	strb	r2, [r3, #0]
					break;
 800c35e:	e007      	b.n	800c370 <main+0xb0>
				}
			}
			else
			{
				moteurs->motors_on(); // toggle motors on in case it was stopped with motor_stop
 800c360:	4b21      	ldr	r3, [pc, #132]	@ (800c3e8 <main+0x128>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	4618      	mov	r0, r3
 800c366:	f7f6 fa33 	bl	80027d0 <_ZN11BlocMoteurs9motors_onEv>
				timeout_moteurs = false;
 800c36a:	4b23      	ldr	r3, [pc, #140]	@ (800c3f8 <main+0x138>)
 800c36c:	2200      	movs	r2, #0
 800c36e:	701a      	strb	r2, [r3, #0]
				break;
			}

	  }
	  if(timeout_moteurs == false)
 800c370:	4b21      	ldr	r3, [pc, #132]	@ (800c3f8 <main+0x138>)
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d122      	bne.n	800c3be <main+0xfe>
	  {
      //Apply received_motor_speeds
		  moteurs->commande_vitesses_absolues(input_motor_speeds[front_left], input_motor_speeds[front_right], input_motor_speeds[back_left], input_motor_speeds[back_right]);
 800c378:	4b1b      	ldr	r3, [pc, #108]	@ (800c3e8 <main+0x128>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	4a1c      	ldr	r2, [pc, #112]	@ (800c3f0 <main+0x130>)
 800c37e:	edd2 7a00 	vldr	s15, [r2]
 800c382:	4a1b      	ldr	r2, [pc, #108]	@ (800c3f0 <main+0x130>)
 800c384:	ed92 7a01 	vldr	s14, [r2, #4]
 800c388:	4a19      	ldr	r2, [pc, #100]	@ (800c3f0 <main+0x130>)
 800c38a:	edd2 6a02 	vldr	s13, [r2, #8]
 800c38e:	4a18      	ldr	r2, [pc, #96]	@ (800c3f0 <main+0x130>)
 800c390:	ed92 6a03 	vldr	s12, [r2, #12]
 800c394:	eef0 1a46 	vmov.f32	s3, s12
 800c398:	eeb0 1a66 	vmov.f32	s2, s13
 800c39c:	eef0 0a47 	vmov.f32	s1, s14
 800c3a0:	eeb0 0a67 	vmov.f32	s0, s15
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f7f6 f978 	bl	800269a <_ZN11BlocMoteurs26commande_vitesses_absoluesEffff>
		  //Measure and send motor speeds
		  msg_handler.send_motor_speeds(moteurs->mesure_vitesses_rad());
 800c3aa:	4b0f      	ldr	r3, [pc, #60]	@ (800c3e8 <main+0x128>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7f6 fa4c 	bl	800284c <_ZN11BlocMoteurs19mesure_vitesses_radEv>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	480c      	ldr	r0, [pc, #48]	@ (800c3ec <main+0x12c>)
 800c3ba:	f000 fa8a 	bl	800c8d2 <_ZN10MsgHandler17send_motor_speedsEPf>
	  }
    //reset counter for next loop
	  timer_timeout_count = 0;
 800c3be:	4b0d      	ldr	r3, [pc, #52]	@ (800c3f4 <main+0x134>)
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	601a      	str	r2, [r3, #0]
	  msg_handler.prepare_receive_motor_speeds();
 800c3c4:	e7b0      	b.n	800c328 <main+0x68>
  moteurs = new BlocMoteurs(&hspi1, reset_shield_1_GPIO_Port, reset_shield_1_Pin, ssel1_GPIO_Port, ssel1_Pin,
 800c3c6:	2d00      	cmp	r5, #0
 800c3c8:	d004      	beq.n	800c3d4 <main+0x114>
		  	  	  	  	  	  	    reset_shield_2_GPIO_Port, reset_shield_2_Pin, ssel2_GPIO_Port, ssel2_Pin);
 800c3ca:	f44f 71bc 	mov.w	r1, #376	@ 0x178
 800c3ce:	4620      	mov	r0, r4
 800c3d0:	f004 f992 	bl	80106f8 <_ZdlPvj>
 800c3d4:	f004 fa28 	bl	8010828 <__cxa_end_cleanup>
 800c3d8:	20000304 	.word	0x20000304
 800c3dc:	40020000 	.word	0x40020000
 800c3e0:	40020400 	.word	0x40020400
 800c3e4:	200002ac 	.word	0x200002ac
 800c3e8:	200003b4 	.word	0x200003b4
 800c3ec:	20000390 	.word	0x20000390
 800c3f0:	200003a0 	.word	0x200003a0
 800c3f4:	2000039c 	.word	0x2000039c
 800c3f8:	200003b0 	.word	0x200003b0

0800c3fc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b094      	sub	sp, #80	@ 0x50
 800c400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c402:	f107 031c 	add.w	r3, r7, #28
 800c406:	2234      	movs	r2, #52	@ 0x34
 800c408:	2100      	movs	r1, #0
 800c40a:	4618      	mov	r0, r3
 800c40c:	f005 fe0d 	bl	801202a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c410:	f107 0308 	add.w	r3, r7, #8
 800c414:	2200      	movs	r2, #0
 800c416:	601a      	str	r2, [r3, #0]
 800c418:	605a      	str	r2, [r3, #4]
 800c41a:	609a      	str	r2, [r3, #8]
 800c41c:	60da      	str	r2, [r3, #12]
 800c41e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800c420:	2300      	movs	r3, #0
 800c422:	607b      	str	r3, [r7, #4]
 800c424:	4b34      	ldr	r3, [pc, #208]	@ (800c4f8 <_Z18SystemClock_Configv+0xfc>)
 800c426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c428:	4a33      	ldr	r2, [pc, #204]	@ (800c4f8 <_Z18SystemClock_Configv+0xfc>)
 800c42a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c42e:	6413      	str	r3, [r2, #64]	@ 0x40
 800c430:	4b31      	ldr	r3, [pc, #196]	@ (800c4f8 <_Z18SystemClock_Configv+0xfc>)
 800c432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c434:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c438:	607b      	str	r3, [r7, #4]
 800c43a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c43c:	2300      	movs	r3, #0
 800c43e:	603b      	str	r3, [r7, #0]
 800c440:	4b2e      	ldr	r3, [pc, #184]	@ (800c4fc <_Z18SystemClock_Configv+0x100>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	4a2d      	ldr	r2, [pc, #180]	@ (800c4fc <_Z18SystemClock_Configv+0x100>)
 800c446:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c44a:	6013      	str	r3, [r2, #0]
 800c44c:	4b2b      	ldr	r3, [pc, #172]	@ (800c4fc <_Z18SystemClock_Configv+0x100>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c454:	603b      	str	r3, [r7, #0]
 800c456:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800c458:	2302      	movs	r3, #2
 800c45a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800c45c:	2301      	movs	r3, #1
 800c45e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800c460:	2310      	movs	r3, #16
 800c462:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c464:	2302      	movs	r3, #2
 800c466:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800c468:	2300      	movs	r3, #0
 800c46a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800c46c:	2308      	movs	r3, #8
 800c46e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800c470:	23b4      	movs	r3, #180	@ 0xb4
 800c472:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c474:	2302      	movs	r3, #2
 800c476:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800c478:	2302      	movs	r3, #2
 800c47a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800c47c:	2302      	movs	r3, #2
 800c47e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c480:	f107 031c 	add.w	r3, r7, #28
 800c484:	4618      	mov	r0, r3
 800c486:	f001 fc49 	bl	800dd1c <HAL_RCC_OscConfig>
 800c48a:	4603      	mov	r3, r0
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	bf14      	ite	ne
 800c490:	2301      	movne	r3, #1
 800c492:	2300      	moveq	r3, #0
 800c494:	b2db      	uxtb	r3, r3
 800c496:	2b00      	cmp	r3, #0
 800c498:	d001      	beq.n	800c49e <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800c49a:	f000 f9c3 	bl	800c824 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800c49e:	f001 f8a3 	bl	800d5e8 <HAL_PWREx_EnableOverDrive>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	bf14      	ite	ne
 800c4a8:	2301      	movne	r3, #1
 800c4aa:	2300      	moveq	r3, #0
 800c4ac:	b2db      	uxtb	r3, r3
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d001      	beq.n	800c4b6 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 800c4b2:	f000 f9b7 	bl	800c824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c4b6:	230f      	movs	r3, #15
 800c4b8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c4ba:	2302      	movs	r3, #2
 800c4bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800c4c2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800c4c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800c4c8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800c4cc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800c4ce:	f107 0308 	add.w	r3, r7, #8
 800c4d2:	2105      	movs	r1, #5
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f001 f8d7 	bl	800d688 <HAL_RCC_ClockConfig>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	bf14      	ite	ne
 800c4e0:	2301      	movne	r3, #1
 800c4e2:	2300      	moveq	r3, #0
 800c4e4:	b2db      	uxtb	r3, r3
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d001      	beq.n	800c4ee <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 800c4ea:	f000 f99b 	bl	800c824 <Error_Handler>
  }
}
 800c4ee:	bf00      	nop
 800c4f0:	3750      	adds	r7, #80	@ 0x50
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}
 800c4f6:	bf00      	nop
 800c4f8:	40023800 	.word	0x40023800
 800c4fc:	40007000 	.word	0x40007000

0800c500 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800c504:	4b1a      	ldr	r3, [pc, #104]	@ (800c570 <_ZL12MX_SPI1_Initv+0x70>)
 800c506:	4a1b      	ldr	r2, [pc, #108]	@ (800c574 <_ZL12MX_SPI1_Initv+0x74>)
 800c508:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800c50a:	4b19      	ldr	r3, [pc, #100]	@ (800c570 <_ZL12MX_SPI1_Initv+0x70>)
 800c50c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800c510:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800c512:	4b17      	ldr	r3, [pc, #92]	@ (800c570 <_ZL12MX_SPI1_Initv+0x70>)
 800c514:	2200      	movs	r2, #0
 800c516:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800c518:	4b15      	ldr	r3, [pc, #84]	@ (800c570 <_ZL12MX_SPI1_Initv+0x70>)
 800c51a:	2200      	movs	r2, #0
 800c51c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800c51e:	4b14      	ldr	r3, [pc, #80]	@ (800c570 <_ZL12MX_SPI1_Initv+0x70>)
 800c520:	2202      	movs	r2, #2
 800c522:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800c524:	4b12      	ldr	r3, [pc, #72]	@ (800c570 <_ZL12MX_SPI1_Initv+0x70>)
 800c526:	2201      	movs	r2, #1
 800c528:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800c52a:	4b11      	ldr	r3, [pc, #68]	@ (800c570 <_ZL12MX_SPI1_Initv+0x70>)
 800c52c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c530:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800c532:	4b0f      	ldr	r3, [pc, #60]	@ (800c570 <_ZL12MX_SPI1_Initv+0x70>)
 800c534:	2210      	movs	r2, #16
 800c536:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c538:	4b0d      	ldr	r3, [pc, #52]	@ (800c570 <_ZL12MX_SPI1_Initv+0x70>)
 800c53a:	2200      	movs	r2, #0
 800c53c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800c53e:	4b0c      	ldr	r3, [pc, #48]	@ (800c570 <_ZL12MX_SPI1_Initv+0x70>)
 800c540:	2200      	movs	r2, #0
 800c542:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c544:	4b0a      	ldr	r3, [pc, #40]	@ (800c570 <_ZL12MX_SPI1_Initv+0x70>)
 800c546:	2200      	movs	r2, #0
 800c548:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800c54a:	4b09      	ldr	r3, [pc, #36]	@ (800c570 <_ZL12MX_SPI1_Initv+0x70>)
 800c54c:	220a      	movs	r2, #10
 800c54e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800c550:	4807      	ldr	r0, [pc, #28]	@ (800c570 <_ZL12MX_SPI1_Initv+0x70>)
 800c552:	f001 fe81 	bl	800e258 <HAL_SPI_Init>
 800c556:	4603      	mov	r3, r0
 800c558:	2b00      	cmp	r3, #0
 800c55a:	bf14      	ite	ne
 800c55c:	2301      	movne	r3, #1
 800c55e:	2300      	moveq	r3, #0
 800c560:	b2db      	uxtb	r3, r3
 800c562:	2b00      	cmp	r3, #0
 800c564:	d001      	beq.n	800c56a <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800c566:	f000 f95d 	bl	800c824 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800c56a:	bf00      	nop
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	200002ac 	.word	0x200002ac
 800c574:	40013000 	.word	0x40013000

0800c578 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b086      	sub	sp, #24
 800c57c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c57e:	f107 0308 	add.w	r3, r7, #8
 800c582:	2200      	movs	r2, #0
 800c584:	601a      	str	r2, [r3, #0]
 800c586:	605a      	str	r2, [r3, #4]
 800c588:	609a      	str	r2, [r3, #8]
 800c58a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c58c:	463b      	mov	r3, r7
 800c58e:	2200      	movs	r2, #0
 800c590:	601a      	str	r2, [r3, #0]
 800c592:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800c594:	4b24      	ldr	r3, [pc, #144]	@ (800c628 <_ZL12MX_TIM2_Initv+0xb0>)
 800c596:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800c59a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800c59c:	4b22      	ldr	r3, [pc, #136]	@ (800c628 <_ZL12MX_TIM2_Initv+0xb0>)
 800c59e:	2200      	movs	r2, #0
 800c5a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c5a2:	4b21      	ldr	r3, [pc, #132]	@ (800c628 <_ZL12MX_TIM2_Initv+0xb0>)
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1800000;
 800c5a8:	4b1f      	ldr	r3, [pc, #124]	@ (800c628 <_ZL12MX_TIM2_Initv+0xb0>)
 800c5aa:	4a20      	ldr	r2, [pc, #128]	@ (800c62c <_ZL12MX_TIM2_Initv+0xb4>)
 800c5ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c5ae:	4b1e      	ldr	r3, [pc, #120]	@ (800c628 <_ZL12MX_TIM2_Initv+0xb0>)
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800c5b4:	4b1c      	ldr	r3, [pc, #112]	@ (800c628 <_ZL12MX_TIM2_Initv+0xb0>)
 800c5b6:	2280      	movs	r2, #128	@ 0x80
 800c5b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800c5ba:	481b      	ldr	r0, [pc, #108]	@ (800c628 <_ZL12MX_TIM2_Initv+0xb0>)
 800c5bc:	f002 fbf4 	bl	800eda8 <HAL_TIM_Base_Init>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	bf14      	ite	ne
 800c5c6:	2301      	movne	r3, #1
 800c5c8:	2300      	moveq	r3, #0
 800c5ca:	b2db      	uxtb	r3, r3
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d001      	beq.n	800c5d4 <_ZL12MX_TIM2_Initv+0x5c>
  {
    Error_Handler();
 800c5d0:	f000 f928 	bl	800c824 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c5d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c5d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800c5da:	f107 0308 	add.w	r3, r7, #8
 800c5de:	4619      	mov	r1, r3
 800c5e0:	4811      	ldr	r0, [pc, #68]	@ (800c628 <_ZL12MX_TIM2_Initv+0xb0>)
 800c5e2:	f002 fda9 	bl	800f138 <HAL_TIM_ConfigClockSource>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	bf14      	ite	ne
 800c5ec:	2301      	movne	r3, #1
 800c5ee:	2300      	moveq	r3, #0
 800c5f0:	b2db      	uxtb	r3, r3
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d001      	beq.n	800c5fa <_ZL12MX_TIM2_Initv+0x82>
  {
    Error_Handler();
 800c5f6:	f000 f915 	bl	800c824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c5fe:	2300      	movs	r3, #0
 800c600:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c602:	463b      	mov	r3, r7
 800c604:	4619      	mov	r1, r3
 800c606:	4808      	ldr	r0, [pc, #32]	@ (800c628 <_ZL12MX_TIM2_Initv+0xb0>)
 800c608:	f002 ffc0 	bl	800f58c <HAL_TIMEx_MasterConfigSynchronization>
 800c60c:	4603      	mov	r3, r0
 800c60e:	2b00      	cmp	r3, #0
 800c610:	bf14      	ite	ne
 800c612:	2301      	movne	r3, #1
 800c614:	2300      	moveq	r3, #0
 800c616:	b2db      	uxtb	r3, r3
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d001      	beq.n	800c620 <_ZL12MX_TIM2_Initv+0xa8>
  {
    Error_Handler();
 800c61c:	f000 f902 	bl	800c824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800c620:	bf00      	nop
 800c622:	3718      	adds	r7, #24
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}
 800c628:	20000304 	.word	0x20000304
 800c62c:	001b7740 	.word	0x001b7740

0800c630 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800c634:	4b13      	ldr	r3, [pc, #76]	@ (800c684 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c636:	4a14      	ldr	r2, [pc, #80]	@ (800c688 <_ZL19MX_USART2_UART_Initv+0x58>)
 800c638:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800c63a:	4b12      	ldr	r3, [pc, #72]	@ (800c684 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c63c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800c640:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800c642:	4b10      	ldr	r3, [pc, #64]	@ (800c684 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c644:	2200      	movs	r2, #0
 800c646:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800c648:	4b0e      	ldr	r3, [pc, #56]	@ (800c684 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c64a:	2200      	movs	r2, #0
 800c64c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800c64e:	4b0d      	ldr	r3, [pc, #52]	@ (800c684 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c650:	2200      	movs	r2, #0
 800c652:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800c654:	4b0b      	ldr	r3, [pc, #44]	@ (800c684 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c656:	220c      	movs	r2, #12
 800c658:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c65a:	4b0a      	ldr	r3, [pc, #40]	@ (800c684 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c65c:	2200      	movs	r2, #0
 800c65e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800c660:	4b08      	ldr	r3, [pc, #32]	@ (800c684 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c662:	2200      	movs	r2, #0
 800c664:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800c666:	4807      	ldr	r0, [pc, #28]	@ (800c684 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c668:	f003 f820 	bl	800f6ac <HAL_UART_Init>
 800c66c:	4603      	mov	r3, r0
 800c66e:	2b00      	cmp	r3, #0
 800c670:	bf14      	ite	ne
 800c672:	2301      	movne	r3, #1
 800c674:	2300      	moveq	r3, #0
 800c676:	b2db      	uxtb	r3, r3
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d001      	beq.n	800c680 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 800c67c:	f000 f8d2 	bl	800c824 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800c680:	bf00      	nop
 800c682:	bd80      	pop	{r7, pc}
 800c684:	2000034c 	.word	0x2000034c
 800c688:	40004400 	.word	0x40004400

0800c68c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b08a      	sub	sp, #40	@ 0x28
 800c690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c692:	f107 0314 	add.w	r3, r7, #20
 800c696:	2200      	movs	r2, #0
 800c698:	601a      	str	r2, [r3, #0]
 800c69a:	605a      	str	r2, [r3, #4]
 800c69c:	609a      	str	r2, [r3, #8]
 800c69e:	60da      	str	r2, [r3, #12]
 800c6a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	613b      	str	r3, [r7, #16]
 800c6a6:	4b38      	ldr	r3, [pc, #224]	@ (800c788 <_ZL12MX_GPIO_Initv+0xfc>)
 800c6a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6aa:	4a37      	ldr	r2, [pc, #220]	@ (800c788 <_ZL12MX_GPIO_Initv+0xfc>)
 800c6ac:	f043 0304 	orr.w	r3, r3, #4
 800c6b0:	6313      	str	r3, [r2, #48]	@ 0x30
 800c6b2:	4b35      	ldr	r3, [pc, #212]	@ (800c788 <_ZL12MX_GPIO_Initv+0xfc>)
 800c6b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6b6:	f003 0304 	and.w	r3, r3, #4
 800c6ba:	613b      	str	r3, [r7, #16]
 800c6bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c6be:	2300      	movs	r3, #0
 800c6c0:	60fb      	str	r3, [r7, #12]
 800c6c2:	4b31      	ldr	r3, [pc, #196]	@ (800c788 <_ZL12MX_GPIO_Initv+0xfc>)
 800c6c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6c6:	4a30      	ldr	r2, [pc, #192]	@ (800c788 <_ZL12MX_GPIO_Initv+0xfc>)
 800c6c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6cc:	6313      	str	r3, [r2, #48]	@ 0x30
 800c6ce:	4b2e      	ldr	r3, [pc, #184]	@ (800c788 <_ZL12MX_GPIO_Initv+0xfc>)
 800c6d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c6d6:	60fb      	str	r3, [r7, #12]
 800c6d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c6da:	2300      	movs	r3, #0
 800c6dc:	60bb      	str	r3, [r7, #8]
 800c6de:	4b2a      	ldr	r3, [pc, #168]	@ (800c788 <_ZL12MX_GPIO_Initv+0xfc>)
 800c6e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6e2:	4a29      	ldr	r2, [pc, #164]	@ (800c788 <_ZL12MX_GPIO_Initv+0xfc>)
 800c6e4:	f043 0301 	orr.w	r3, r3, #1
 800c6e8:	6313      	str	r3, [r2, #48]	@ 0x30
 800c6ea:	4b27      	ldr	r3, [pc, #156]	@ (800c788 <_ZL12MX_GPIO_Initv+0xfc>)
 800c6ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6ee:	f003 0301 	and.w	r3, r3, #1
 800c6f2:	60bb      	str	r3, [r7, #8]
 800c6f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	607b      	str	r3, [r7, #4]
 800c6fa:	4b23      	ldr	r3, [pc, #140]	@ (800c788 <_ZL12MX_GPIO_Initv+0xfc>)
 800c6fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6fe:	4a22      	ldr	r2, [pc, #136]	@ (800c788 <_ZL12MX_GPIO_Initv+0xfc>)
 800c700:	f043 0302 	orr.w	r3, r3, #2
 800c704:	6313      	str	r3, [r2, #48]	@ 0x30
 800c706:	4b20      	ldr	r3, [pc, #128]	@ (800c788 <_ZL12MX_GPIO_Initv+0xfc>)
 800c708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c70a:	f003 0302 	and.w	r3, r3, #2
 800c70e:	607b      	str	r3, [r7, #4]
 800c710:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ssel1_Pin|LD2_Pin|ssel2_Pin, GPIO_PIN_RESET);
 800c712:	2200      	movs	r2, #0
 800c714:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 800c718:	481c      	ldr	r0, [pc, #112]	@ (800c78c <_ZL12MX_GPIO_Initv+0x100>)
 800c71a:	f000 ff4b 	bl	800d5b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, reset_shield_2_Pin|reset_shield_1_Pin, GPIO_PIN_RESET);
 800c71e:	2200      	movs	r2, #0
 800c720:	2130      	movs	r1, #48	@ 0x30
 800c722:	481b      	ldr	r0, [pc, #108]	@ (800c790 <_ZL12MX_GPIO_Initv+0x104>)
 800c724:	f000 ff46 	bl	800d5b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800c728:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c72c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800c72e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800c732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c734:	2300      	movs	r3, #0
 800c736:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800c738:	f107 0314 	add.w	r3, r7, #20
 800c73c:	4619      	mov	r1, r3
 800c73e:	4815      	ldr	r0, [pc, #84]	@ (800c794 <_ZL12MX_GPIO_Initv+0x108>)
 800c740:	f000 fda4 	bl	800d28c <HAL_GPIO_Init>

  /*Configure GPIO pins : ssel1_Pin LD2_Pin ssel2_Pin */
  GPIO_InitStruct.Pin = ssel1_Pin|LD2_Pin|ssel2_Pin;
 800c744:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 800c748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c74a:	2301      	movs	r3, #1
 800c74c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c74e:	2300      	movs	r3, #0
 800c750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c752:	2300      	movs	r3, #0
 800c754:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c756:	f107 0314 	add.w	r3, r7, #20
 800c75a:	4619      	mov	r1, r3
 800c75c:	480b      	ldr	r0, [pc, #44]	@ (800c78c <_ZL12MX_GPIO_Initv+0x100>)
 800c75e:	f000 fd95 	bl	800d28c <HAL_GPIO_Init>

  /*Configure GPIO pins : reset_shield_2_Pin reset_shield_1_Pin */
  GPIO_InitStruct.Pin = reset_shield_2_Pin|reset_shield_1_Pin;
 800c762:	2330      	movs	r3, #48	@ 0x30
 800c764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c766:	2301      	movs	r3, #1
 800c768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c76a:	2300      	movs	r3, #0
 800c76c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c76e:	2300      	movs	r3, #0
 800c770:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c772:	f107 0314 	add.w	r3, r7, #20
 800c776:	4619      	mov	r1, r3
 800c778:	4805      	ldr	r0, [pc, #20]	@ (800c790 <_ZL12MX_GPIO_Initv+0x104>)
 800c77a:	f000 fd87 	bl	800d28c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800c77e:	bf00      	nop
 800c780:	3728      	adds	r7, #40	@ 0x28
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}
 800c786:	bf00      	nop
 800c788:	40023800 	.word	0x40023800
 800c78c:	40020000 	.word	0x40020000
 800c790:	40020400 	.word	0x40020400
 800c794:	40020800 	.word	0x40020800

0800c798 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */

//Redirect Uart callback to msg_handler if huart is huart2 peripheral
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b082      	sub	sp, #8
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	4a05      	ldr	r2, [pc, #20]	@ (800c7b8 <HAL_UART_TxCpltCallback+0x20>)
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d102      	bne.n	800c7ae <HAL_UART_TxCpltCallback+0x16>
	{
		msg_handler.process_txclpt_callback();
 800c7a8:	4804      	ldr	r0, [pc, #16]	@ (800c7bc <HAL_UART_TxCpltCallback+0x24>)
 800c7aa:	f000 f875 	bl	800c898 <_ZN10MsgHandler23process_txclpt_callbackEv>
	}


}
 800c7ae:	bf00      	nop
 800c7b0:	3708      	adds	r7, #8
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
 800c7b6:	bf00      	nop
 800c7b8:	2000034c 	.word	0x2000034c
 800c7bc:	20000390 	.word	0x20000390

0800c7c0 <HAL_UART_RxCpltCallback>:

//Redirect Uart callback to msg_handler if huart is huart2 peripheral
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
	if( huart == &huart2)
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	4a05      	ldr	r2, [pc, #20]	@ (800c7e0 <HAL_UART_RxCpltCallback+0x20>)
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	d102      	bne.n	800c7d6 <HAL_UART_RxCpltCallback+0x16>
	{
		msg_handler.process_rxclpt_callback();
 800c7d0:	4804      	ldr	r0, [pc, #16]	@ (800c7e4 <HAL_UART_RxCpltCallback+0x24>)
 800c7d2:	f000 f86e 	bl	800c8b2 <_ZN10MsgHandler23process_rxclpt_callbackEv>
	}

}
 800c7d6:	bf00      	nop
 800c7d8:	3708      	adds	r7, #8
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}
 800c7de:	bf00      	nop
 800c7e0:	2000034c 	.word	0x2000034c
 800c7e4:	20000390 	.word	0x20000390

0800c7e8 <HAL_TIM_PeriodElapsedCallback>:

//Timer 2 interrupt (every 20ms)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b082      	sub	sp, #8
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim2 )
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	4a09      	ldr	r2, [pc, #36]	@ (800c818 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	d10b      	bne.n	800c810 <HAL_TIM_PeriodElapsedCallback+0x28>
  {

	  timer_timeout_count++;
 800c7f8:	4b08      	ldr	r3, [pc, #32]	@ (800c81c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	3301      	adds	r3, #1
 800c7fe:	4a07      	ldr	r2, [pc, #28]	@ (800c81c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800c800:	6013      	str	r3, [r2, #0]
	  if (timer_timeout_count > 10) //in case of a timeout, reset flags that may lock the logic of the msg_handler 
 800c802:	4b06      	ldr	r3, [pc, #24]	@ (800c81c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	2b0a      	cmp	r3, #10
 800c808:	dd02      	ble.n	800c810 <HAL_TIM_PeriodElapsedCallback+0x28>
	  {
		  msg_handler.unlock_timeout();
 800c80a:	4805      	ldr	r0, [pc, #20]	@ (800c820 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800c80c:	f7ff fd47 	bl	800c29e <_ZN10MsgHandler14unlock_timeoutEv>
	  }

  }
}
 800c810:	bf00      	nop
 800c812:	3708      	adds	r7, #8
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}
 800c818:	20000304 	.word	0x20000304
 800c81c:	2000039c 	.word	0x2000039c
 800c820:	20000390 	.word	0x20000390

0800c824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c824:	b480      	push	{r7}
 800c826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800c828:	b672      	cpsid	i
}
 800c82a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800c82c:	bf00      	nop
 800c82e:	e7fd      	b.n	800c82c <Error_Handler+0x8>

0800c830 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800c830:	b580      	push	{r7, lr}
 800c832:	b082      	sub	sp, #8
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	6039      	str	r1, [r7, #0]
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2b01      	cmp	r3, #1
 800c83e:	d108      	bne.n	800c852 <_Z41__static_initialization_and_destruction_0ii+0x22>
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c846:	4293      	cmp	r3, r2
 800c848:	d103      	bne.n	800c852 <_Z41__static_initialization_and_destruction_0ii+0x22>
MsgHandler msg_handler(&huart2);
 800c84a:	4909      	ldr	r1, [pc, #36]	@ (800c870 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800c84c:	4809      	ldr	r0, [pc, #36]	@ (800c874 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800c84e:	f7ff fcf7 	bl	800c240 <_ZN10MsgHandlerC1EP20__UART_HandleTypeDef>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d107      	bne.n	800c868 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c85e:	4293      	cmp	r3, r2
 800c860:	d102      	bne.n	800c868 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800c862:	4804      	ldr	r0, [pc, #16]	@ (800c874 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800c864:	f7ff fd09 	bl	800c27a <_ZN10MsgHandlerD1Ev>
}
 800c868:	bf00      	nop
 800c86a:	3708      	adds	r7, #8
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}
 800c870:	2000034c 	.word	0x2000034c
 800c874:	20000390 	.word	0x20000390

0800c878 <_GLOBAL__sub_I_hspi1>:
 800c878:	b580      	push	{r7, lr}
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800c880:	2001      	movs	r0, #1
 800c882:	f7ff ffd5 	bl	800c830 <_Z41__static_initialization_and_destruction_0ii>
 800c886:	bd80      	pop	{r7, pc}

0800c888 <_GLOBAL__sub_D_hspi1>:
 800c888:	b580      	push	{r7, lr}
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800c890:	2000      	movs	r0, #0
 800c892:	f7ff ffcd 	bl	800c830 <_Z41__static_initialization_and_destruction_0ii>
 800c896:	bd80      	pop	{r7, pc}

0800c898 <_ZN10MsgHandler23process_txclpt_callbackEv>:

/*
  * @brief  called upon completion of HAL_UART_TRANSMIT_IT
*/
void MsgHandler::process_txclpt_callback()
{
 800c898:	b480      	push	{r7}
 800c89a:	b083      	sub	sp, #12
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
	sending =false;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	725a      	strb	r2, [r3, #9]
}
 800c8a6:	bf00      	nop
 800c8a8:	370c      	adds	r7, #12
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b0:	4770      	bx	lr

0800c8b2 <_ZN10MsgHandler23process_rxclpt_callbackEv>:

/*
  * @brief  called upon completion of HAL_UART_RECEIVE_IT
*/
void MsgHandler::process_rxclpt_callback()
{
 800c8b2:	b480      	push	{r7}
 800c8b4:	b083      	sub	sp, #12
 800c8b6:	af00      	add	r7, sp, #0
 800c8b8:	6078      	str	r0, [r7, #4]
	receiving = false;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2200      	movs	r2, #0
 800c8be:	729a      	strb	r2, [r3, #10]
	received_motor_speeds = true;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2201      	movs	r2, #1
 800c8c4:	721a      	strb	r2, [r3, #8]
}
 800c8c6:	bf00      	nop
 800c8c8:	370c      	adds	r7, #12
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d0:	4770      	bx	lr

0800c8d2 <_ZN10MsgHandler17send_motor_speedsEPf>:
/*
  * @brief  write input_motor_speeds to uart (ie measured motor speeds)
  * @param input_motor_speeds , tab of float to send in rad/s 
*/
void MsgHandler::send_motor_speeds(float* input_motor_speeds)
{
 800c8d2:	b580      	push	{r7, lr}
 800c8d4:	b082      	sub	sp, #8
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	6078      	str	r0, [r7, #4]
 800c8da:	6039      	str	r1, [r7, #0]
	while(sending || receiving);
 800c8dc:	bf00      	nop
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	7a5b      	ldrb	r3, [r3, #9]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d1fb      	bne.n	800c8de <_ZN10MsgHandler17send_motor_speedsEPf+0xc>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	7a9b      	ldrb	r3, [r3, #10]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d1f7      	bne.n	800c8de <_ZN10MsgHandler17send_motor_speedsEPf+0xc>
	sending = true;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2201      	movs	r2, #1
 800c8f2:	725a      	strb	r2, [r3, #9]
	HAL_UART_Transmit_IT(huart, (uint8_t*)input_motor_speeds, 4*sizeof(float));
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	2210      	movs	r2, #16
 800c8fa:	6839      	ldr	r1, [r7, #0]
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f002 ff22 	bl	800f746 <HAL_UART_Transmit_IT>
}
 800c902:	bf00      	nop
 800c904:	3708      	adds	r7, #8
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}

0800c90a <_ZN10MsgHandler28prepare_receive_motor_speedsEv>:

/*
  * @brief  prepare the read of motor_speeds from uart (ie command motor speeds)
*/
void MsgHandler::prepare_receive_motor_speeds()
{
 800c90a:	b580      	push	{r7, lr}
 800c90c:	b082      	sub	sp, #8
 800c90e:	af00      	add	r7, sp, #0
 800c910:	6078      	str	r0, [r7, #4]
	while(sending || receiving);
 800c912:	bf00      	nop
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	7a5b      	ldrb	r3, [r3, #9]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d1fb      	bne.n	800c914 <_ZN10MsgHandler28prepare_receive_motor_speedsEv+0xa>
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	7a9b      	ldrb	r3, [r3, #10]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d1f7      	bne.n	800c914 <_ZN10MsgHandler28prepare_receive_motor_speedsEv+0xa>
	receiving = true;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2201      	movs	r2, #1
 800c928:	729a      	strb	r2, [r3, #10]
	HAL_UART_Receive_IT(huart, (uint8_t*)motor_speeds, 4*sizeof(float));
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6818      	ldr	r0, [r3, #0]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	685b      	ldr	r3, [r3, #4]
 800c932:	2210      	movs	r2, #16
 800c934:	4619      	mov	r1, r3
 800c936:	f002 ff4b 	bl	800f7d0 <HAL_UART_Receive_IT>
}
 800c93a:	bf00      	nop
 800c93c:	3708      	adds	r7, #8
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}

0800c942 <_ZN10MsgHandler25get_received_motor_speedsEPf>:
  * @retval bool                , True if to_fill_motor_speeds was filled
  *                               (only when received_motor_speeds was toggled from rxclpt_callback),
  * 							  False if not (you should call again get_received_motor_speeds again until motor_speeds is received)
*/
bool MsgHandler::get_received_motor_speeds(float* to_fill_motor_speeds)
{
 800c942:	b580      	push	{r7, lr}
 800c944:	b082      	sub	sp, #8
 800c946:	af00      	add	r7, sp, #0
 800c948:	6078      	str	r0, [r7, #4]
 800c94a:	6039      	str	r1, [r7, #0]
	if( received_motor_speeds )
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	7a1b      	ldrb	r3, [r3, #8]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d00f      	beq.n	800c974 <_ZN10MsgHandler25get_received_motor_speedsEPf+0x32>
	{
		if( motor_speeds != NULL)
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	685b      	ldr	r3, [r3, #4]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d00b      	beq.n	800c974 <_ZN10MsgHandler25get_received_motor_speedsEPf+0x32>
		{
			memcpy(to_fill_motor_speeds,motor_speeds,4*sizeof(float));
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	685b      	ldr	r3, [r3, #4]
 800c960:	2210      	movs	r2, #16
 800c962:	4619      	mov	r1, r3
 800c964:	6838      	ldr	r0, [r7, #0]
 800c966:	f005 fc34 	bl	80121d2 <memcpy>
			received_motor_speeds = false;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2200      	movs	r2, #0
 800c96e:	721a      	strb	r2, [r3, #8]
			return true;
 800c970:	2301      	movs	r3, #1
 800c972:	e000      	b.n	800c976 <_ZN10MsgHandler25get_received_motor_speedsEPf+0x34>
		}
	}
	return false;
 800c974:	2300      	movs	r3, #0
}
 800c976:	4618      	mov	r0, r3
 800c978:	3708      	adds	r7, #8
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}
	...

0800c980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c986:	2300      	movs	r3, #0
 800c988:	607b      	str	r3, [r7, #4]
 800c98a:	4b10      	ldr	r3, [pc, #64]	@ (800c9cc <HAL_MspInit+0x4c>)
 800c98c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c98e:	4a0f      	ldr	r2, [pc, #60]	@ (800c9cc <HAL_MspInit+0x4c>)
 800c990:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c994:	6453      	str	r3, [r2, #68]	@ 0x44
 800c996:	4b0d      	ldr	r3, [pc, #52]	@ (800c9cc <HAL_MspInit+0x4c>)
 800c998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c99a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c99e:	607b      	str	r3, [r7, #4]
 800c9a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	603b      	str	r3, [r7, #0]
 800c9a6:	4b09      	ldr	r3, [pc, #36]	@ (800c9cc <HAL_MspInit+0x4c>)
 800c9a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9aa:	4a08      	ldr	r2, [pc, #32]	@ (800c9cc <HAL_MspInit+0x4c>)
 800c9ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c9b0:	6413      	str	r3, [r2, #64]	@ 0x40
 800c9b2:	4b06      	ldr	r3, [pc, #24]	@ (800c9cc <HAL_MspInit+0x4c>)
 800c9b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c9ba:	603b      	str	r3, [r7, #0]
 800c9bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800c9be:	2007      	movs	r0, #7
 800c9c0:	f000 fb90 	bl	800d0e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c9c4:	bf00      	nop
 800c9c6:	3708      	adds	r7, #8
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}
 800c9cc:	40023800 	.word	0x40023800

0800c9d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b08a      	sub	sp, #40	@ 0x28
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c9d8:	f107 0314 	add.w	r3, r7, #20
 800c9dc:	2200      	movs	r2, #0
 800c9de:	601a      	str	r2, [r3, #0]
 800c9e0:	605a      	str	r2, [r3, #4]
 800c9e2:	609a      	str	r2, [r3, #8]
 800c9e4:	60da      	str	r2, [r3, #12]
 800c9e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	4a28      	ldr	r2, [pc, #160]	@ (800ca90 <HAL_SPI_MspInit+0xc0>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d149      	bne.n	800ca86 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	613b      	str	r3, [r7, #16]
 800c9f6:	4b27      	ldr	r3, [pc, #156]	@ (800ca94 <HAL_SPI_MspInit+0xc4>)
 800c9f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9fa:	4a26      	ldr	r2, [pc, #152]	@ (800ca94 <HAL_SPI_MspInit+0xc4>)
 800c9fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ca00:	6453      	str	r3, [r2, #68]	@ 0x44
 800ca02:	4b24      	ldr	r3, [pc, #144]	@ (800ca94 <HAL_SPI_MspInit+0xc4>)
 800ca04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ca0a:	613b      	str	r3, [r7, #16]
 800ca0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca0e:	2300      	movs	r3, #0
 800ca10:	60fb      	str	r3, [r7, #12]
 800ca12:	4b20      	ldr	r3, [pc, #128]	@ (800ca94 <HAL_SPI_MspInit+0xc4>)
 800ca14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca16:	4a1f      	ldr	r2, [pc, #124]	@ (800ca94 <HAL_SPI_MspInit+0xc4>)
 800ca18:	f043 0301 	orr.w	r3, r3, #1
 800ca1c:	6313      	str	r3, [r2, #48]	@ 0x30
 800ca1e:	4b1d      	ldr	r3, [pc, #116]	@ (800ca94 <HAL_SPI_MspInit+0xc4>)
 800ca20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca22:	f003 0301 	and.w	r3, r3, #1
 800ca26:	60fb      	str	r3, [r7, #12]
 800ca28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	60bb      	str	r3, [r7, #8]
 800ca2e:	4b19      	ldr	r3, [pc, #100]	@ (800ca94 <HAL_SPI_MspInit+0xc4>)
 800ca30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca32:	4a18      	ldr	r2, [pc, #96]	@ (800ca94 <HAL_SPI_MspInit+0xc4>)
 800ca34:	f043 0302 	orr.w	r3, r3, #2
 800ca38:	6313      	str	r3, [r2, #48]	@ 0x30
 800ca3a:	4b16      	ldr	r3, [pc, #88]	@ (800ca94 <HAL_SPI_MspInit+0xc4>)
 800ca3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca3e:	f003 0302 	and.w	r3, r3, #2
 800ca42:	60bb      	str	r3, [r7, #8]
 800ca44:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ca46:	23c0      	movs	r3, #192	@ 0xc0
 800ca48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca4a:	2302      	movs	r3, #2
 800ca4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ca52:	2303      	movs	r3, #3
 800ca54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800ca56:	2305      	movs	r3, #5
 800ca58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ca5a:	f107 0314 	add.w	r3, r7, #20
 800ca5e:	4619      	mov	r1, r3
 800ca60:	480d      	ldr	r0, [pc, #52]	@ (800ca98 <HAL_SPI_MspInit+0xc8>)
 800ca62:	f000 fc13 	bl	800d28c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800ca66:	2308      	movs	r3, #8
 800ca68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca6a:	2302      	movs	r3, #2
 800ca6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ca72:	2303      	movs	r3, #3
 800ca74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800ca76:	2305      	movs	r3, #5
 800ca78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ca7a:	f107 0314 	add.w	r3, r7, #20
 800ca7e:	4619      	mov	r1, r3
 800ca80:	4806      	ldr	r0, [pc, #24]	@ (800ca9c <HAL_SPI_MspInit+0xcc>)
 800ca82:	f000 fc03 	bl	800d28c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800ca86:	bf00      	nop
 800ca88:	3728      	adds	r7, #40	@ 0x28
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
 800ca8e:	bf00      	nop
 800ca90:	40013000 	.word	0x40013000
 800ca94:	40023800 	.word	0x40023800
 800ca98:	40020000 	.word	0x40020000
 800ca9c:	40020400 	.word	0x40020400

0800caa0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b084      	sub	sp, #16
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cab0:	d115      	bne.n	800cade <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800cab2:	2300      	movs	r3, #0
 800cab4:	60fb      	str	r3, [r7, #12]
 800cab6:	4b0c      	ldr	r3, [pc, #48]	@ (800cae8 <HAL_TIM_Base_MspInit+0x48>)
 800cab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caba:	4a0b      	ldr	r2, [pc, #44]	@ (800cae8 <HAL_TIM_Base_MspInit+0x48>)
 800cabc:	f043 0301 	orr.w	r3, r3, #1
 800cac0:	6413      	str	r3, [r2, #64]	@ 0x40
 800cac2:	4b09      	ldr	r3, [pc, #36]	@ (800cae8 <HAL_TIM_Base_MspInit+0x48>)
 800cac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cac6:	f003 0301 	and.w	r3, r3, #1
 800caca:	60fb      	str	r3, [r7, #12]
 800cacc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 800cace:	2202      	movs	r2, #2
 800cad0:	2100      	movs	r1, #0
 800cad2:	201c      	movs	r0, #28
 800cad4:	f000 fb11 	bl	800d0fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800cad8:	201c      	movs	r0, #28
 800cada:	f000 fb2a 	bl	800d132 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800cade:	bf00      	nop
 800cae0:	3710      	adds	r7, #16
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
 800cae6:	bf00      	nop
 800cae8:	40023800 	.word	0x40023800

0800caec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b08a      	sub	sp, #40	@ 0x28
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800caf4:	f107 0314 	add.w	r3, r7, #20
 800caf8:	2200      	movs	r2, #0
 800cafa:	601a      	str	r2, [r3, #0]
 800cafc:	605a      	str	r2, [r3, #4]
 800cafe:	609a      	str	r2, [r3, #8]
 800cb00:	60da      	str	r2, [r3, #12]
 800cb02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	4a1d      	ldr	r2, [pc, #116]	@ (800cb80 <HAL_UART_MspInit+0x94>)
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d133      	bne.n	800cb76 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800cb0e:	2300      	movs	r3, #0
 800cb10:	613b      	str	r3, [r7, #16]
 800cb12:	4b1c      	ldr	r3, [pc, #112]	@ (800cb84 <HAL_UART_MspInit+0x98>)
 800cb14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb16:	4a1b      	ldr	r2, [pc, #108]	@ (800cb84 <HAL_UART_MspInit+0x98>)
 800cb18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cb1c:	6413      	str	r3, [r2, #64]	@ 0x40
 800cb1e:	4b19      	ldr	r3, [pc, #100]	@ (800cb84 <HAL_UART_MspInit+0x98>)
 800cb20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb26:	613b      	str	r3, [r7, #16]
 800cb28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	60fb      	str	r3, [r7, #12]
 800cb2e:	4b15      	ldr	r3, [pc, #84]	@ (800cb84 <HAL_UART_MspInit+0x98>)
 800cb30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb32:	4a14      	ldr	r2, [pc, #80]	@ (800cb84 <HAL_UART_MspInit+0x98>)
 800cb34:	f043 0301 	orr.w	r3, r3, #1
 800cb38:	6313      	str	r3, [r2, #48]	@ 0x30
 800cb3a:	4b12      	ldr	r3, [pc, #72]	@ (800cb84 <HAL_UART_MspInit+0x98>)
 800cb3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb3e:	f003 0301 	and.w	r3, r3, #1
 800cb42:	60fb      	str	r3, [r7, #12]
 800cb44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800cb46:	230c      	movs	r3, #12
 800cb48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb4a:	2302      	movs	r3, #2
 800cb4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cb52:	2303      	movs	r3, #3
 800cb54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800cb56:	2307      	movs	r3, #7
 800cb58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cb5a:	f107 0314 	add.w	r3, r7, #20
 800cb5e:	4619      	mov	r1, r3
 800cb60:	4809      	ldr	r0, [pc, #36]	@ (800cb88 <HAL_UART_MspInit+0x9c>)
 800cb62:	f000 fb93 	bl	800d28c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800cb66:	2200      	movs	r2, #0
 800cb68:	2100      	movs	r1, #0
 800cb6a:	2026      	movs	r0, #38	@ 0x26
 800cb6c:	f000 fac5 	bl	800d0fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800cb70:	2026      	movs	r0, #38	@ 0x26
 800cb72:	f000 fade 	bl	800d132 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800cb76:	bf00      	nop
 800cb78:	3728      	adds	r7, #40	@ 0x28
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}
 800cb7e:	bf00      	nop
 800cb80:	40004400 	.word	0x40004400
 800cb84:	40023800 	.word	0x40023800
 800cb88:	40020000 	.word	0x40020000

0800cb8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800cb90:	bf00      	nop
 800cb92:	e7fd      	b.n	800cb90 <NMI_Handler+0x4>

0800cb94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800cb94:	b480      	push	{r7}
 800cb96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800cb98:	bf00      	nop
 800cb9a:	e7fd      	b.n	800cb98 <HardFault_Handler+0x4>

0800cb9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800cba0:	bf00      	nop
 800cba2:	e7fd      	b.n	800cba0 <MemManage_Handler+0x4>

0800cba4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800cba4:	b480      	push	{r7}
 800cba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800cba8:	bf00      	nop
 800cbaa:	e7fd      	b.n	800cba8 <BusFault_Handler+0x4>

0800cbac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800cbac:	b480      	push	{r7}
 800cbae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800cbb0:	bf00      	nop
 800cbb2:	e7fd      	b.n	800cbb0 <UsageFault_Handler+0x4>

0800cbb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800cbb8:	bf00      	nop
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc0:	4770      	bx	lr

0800cbc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800cbc2:	b480      	push	{r7}
 800cbc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800cbc6:	bf00      	nop
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbce:	4770      	bx	lr

0800cbd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800cbd0:	b480      	push	{r7}
 800cbd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800cbd4:	bf00      	nop
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbdc:	4770      	bx	lr

0800cbde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800cbde:	b580      	push	{r7, lr}
 800cbe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800cbe2:	f000 f96b 	bl	800cebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800cbe6:	bf00      	nop
 800cbe8:	bd80      	pop	{r7, pc}
	...

0800cbec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800cbf0:	4802      	ldr	r0, [pc, #8]	@ (800cbfc <TIM2_IRQHandler+0x10>)
 800cbf2:	f002 f999 	bl	800ef28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800cbf6:	bf00      	nop
 800cbf8:	bd80      	pop	{r7, pc}
 800cbfa:	bf00      	nop
 800cbfc:	20000304 	.word	0x20000304

0800cc00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800cc04:	4802      	ldr	r0, [pc, #8]	@ (800cc10 <USART2_IRQHandler+0x10>)
 800cc06:	f002 fe13 	bl	800f830 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800cc0a:	bf00      	nop
 800cc0c:	bd80      	pop	{r7, pc}
 800cc0e:	bf00      	nop
 800cc10:	2000034c 	.word	0x2000034c

0800cc14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800cc14:	b480      	push	{r7}
 800cc16:	af00      	add	r7, sp, #0
  return 1;
 800cc18:	2301      	movs	r3, #1
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc22:	4770      	bx	lr

0800cc24 <_kill>:

int _kill(int pid, int sig)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b082      	sub	sp, #8
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800cc2e:	f005 faa3 	bl	8012178 <__errno>
 800cc32:	4603      	mov	r3, r0
 800cc34:	2216      	movs	r2, #22
 800cc36:	601a      	str	r2, [r3, #0]
  return -1;
 800cc38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3708      	adds	r7, #8
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}

0800cc44 <_exit>:

void _exit (int status)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b082      	sub	sp, #8
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800cc4c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f7ff ffe7 	bl	800cc24 <_kill>
  while (1) {}    /* Make sure we hang here */
 800cc56:	bf00      	nop
 800cc58:	e7fd      	b.n	800cc56 <_exit+0x12>

0800cc5a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800cc5a:	b580      	push	{r7, lr}
 800cc5c:	b086      	sub	sp, #24
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	60f8      	str	r0, [r7, #12]
 800cc62:	60b9      	str	r1, [r7, #8]
 800cc64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cc66:	2300      	movs	r3, #0
 800cc68:	617b      	str	r3, [r7, #20]
 800cc6a:	e00a      	b.n	800cc82 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800cc6c:	f3af 8000 	nop.w
 800cc70:	4601      	mov	r1, r0
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	1c5a      	adds	r2, r3, #1
 800cc76:	60ba      	str	r2, [r7, #8]
 800cc78:	b2ca      	uxtb	r2, r1
 800cc7a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	3301      	adds	r3, #1
 800cc80:	617b      	str	r3, [r7, #20]
 800cc82:	697a      	ldr	r2, [r7, #20]
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	429a      	cmp	r2, r3
 800cc88:	dbf0      	blt.n	800cc6c <_read+0x12>
  }

  return len;
 800cc8a:	687b      	ldr	r3, [r7, #4]
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3718      	adds	r7, #24
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b086      	sub	sp, #24
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	60b9      	str	r1, [r7, #8]
 800cc9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cca0:	2300      	movs	r3, #0
 800cca2:	617b      	str	r3, [r7, #20]
 800cca4:	e009      	b.n	800ccba <_write+0x26>
  {
    __io_putchar(*ptr++);
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	1c5a      	adds	r2, r3, #1
 800ccaa:	60ba      	str	r2, [r7, #8]
 800ccac:	781b      	ldrb	r3, [r3, #0]
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	3301      	adds	r3, #1
 800ccb8:	617b      	str	r3, [r7, #20]
 800ccba:	697a      	ldr	r2, [r7, #20]
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	dbf1      	blt.n	800cca6 <_write+0x12>
  }
  return len;
 800ccc2:	687b      	ldr	r3, [r7, #4]
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	3718      	adds	r7, #24
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}

0800cccc <_close>:

int _close(int file)
{
 800cccc:	b480      	push	{r7}
 800ccce:	b083      	sub	sp, #12
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800ccd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	370c      	adds	r7, #12
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce2:	4770      	bx	lr

0800cce4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800cce4:	b480      	push	{r7}
 800cce6:	b083      	sub	sp, #12
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
 800ccec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800ccf4:	605a      	str	r2, [r3, #4]
  return 0;
 800ccf6:	2300      	movs	r3, #0
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	370c      	adds	r7, #12
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd02:	4770      	bx	lr

0800cd04 <_isatty>:

int _isatty(int file)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b083      	sub	sp, #12
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800cd0c:	2301      	movs	r3, #1
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	370c      	adds	r7, #12
 800cd12:	46bd      	mov	sp, r7
 800cd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd18:	4770      	bx	lr

0800cd1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800cd1a:	b480      	push	{r7}
 800cd1c:	b085      	sub	sp, #20
 800cd1e:	af00      	add	r7, sp, #0
 800cd20:	60f8      	str	r0, [r7, #12]
 800cd22:	60b9      	str	r1, [r7, #8]
 800cd24:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800cd26:	2300      	movs	r3, #0
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3714      	adds	r7, #20
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd32:	4770      	bx	lr

0800cd34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b086      	sub	sp, #24
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800cd3c:	4a14      	ldr	r2, [pc, #80]	@ (800cd90 <_sbrk+0x5c>)
 800cd3e:	4b15      	ldr	r3, [pc, #84]	@ (800cd94 <_sbrk+0x60>)
 800cd40:	1ad3      	subs	r3, r2, r3
 800cd42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800cd44:	697b      	ldr	r3, [r7, #20]
 800cd46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800cd48:	4b13      	ldr	r3, [pc, #76]	@ (800cd98 <_sbrk+0x64>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d102      	bne.n	800cd56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800cd50:	4b11      	ldr	r3, [pc, #68]	@ (800cd98 <_sbrk+0x64>)
 800cd52:	4a12      	ldr	r2, [pc, #72]	@ (800cd9c <_sbrk+0x68>)
 800cd54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800cd56:	4b10      	ldr	r3, [pc, #64]	@ (800cd98 <_sbrk+0x64>)
 800cd58:	681a      	ldr	r2, [r3, #0]
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	4413      	add	r3, r2
 800cd5e:	693a      	ldr	r2, [r7, #16]
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d207      	bcs.n	800cd74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800cd64:	f005 fa08 	bl	8012178 <__errno>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	220c      	movs	r2, #12
 800cd6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800cd6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cd72:	e009      	b.n	800cd88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800cd74:	4b08      	ldr	r3, [pc, #32]	@ (800cd98 <_sbrk+0x64>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800cd7a:	4b07      	ldr	r3, [pc, #28]	@ (800cd98 <_sbrk+0x64>)
 800cd7c:	681a      	ldr	r2, [r3, #0]
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	4413      	add	r3, r2
 800cd82:	4a05      	ldr	r2, [pc, #20]	@ (800cd98 <_sbrk+0x64>)
 800cd84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800cd86:	68fb      	ldr	r3, [r7, #12]
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3718      	adds	r7, #24
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	20020000 	.word	0x20020000
 800cd94:	00000400 	.word	0x00000400
 800cd98:	200003b8 	.word	0x200003b8
 800cd9c:	20000540 	.word	0x20000540

0800cda0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800cda0:	b480      	push	{r7}
 800cda2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800cda4:	4b06      	ldr	r3, [pc, #24]	@ (800cdc0 <SystemInit+0x20>)
 800cda6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cdaa:	4a05      	ldr	r2, [pc, #20]	@ (800cdc0 <SystemInit+0x20>)
 800cdac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800cdb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800cdb4:	bf00      	nop
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbc:	4770      	bx	lr
 800cdbe:	bf00      	nop
 800cdc0:	e000ed00 	.word	0xe000ed00

0800cdc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800cdc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800cdfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800cdc8:	480d      	ldr	r0, [pc, #52]	@ (800ce00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800cdca:	490e      	ldr	r1, [pc, #56]	@ (800ce04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800cdcc:	4a0e      	ldr	r2, [pc, #56]	@ (800ce08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800cdce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800cdd0:	e002      	b.n	800cdd8 <LoopCopyDataInit>

0800cdd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800cdd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800cdd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800cdd6:	3304      	adds	r3, #4

0800cdd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800cdd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800cdda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800cddc:	d3f9      	bcc.n	800cdd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800cdde:	4a0b      	ldr	r2, [pc, #44]	@ (800ce0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800cde0:	4c0b      	ldr	r4, [pc, #44]	@ (800ce10 <LoopFillZerobss+0x26>)
  movs r3, #0
 800cde2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800cde4:	e001      	b.n	800cdea <LoopFillZerobss>

0800cde6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800cde6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800cde8:	3204      	adds	r2, #4

0800cdea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800cdea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800cdec:	d3fb      	bcc.n	800cde6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800cdee:	f7ff ffd7 	bl	800cda0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800cdf2:	f005 f9c7 	bl	8012184 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800cdf6:	f7ff fa63 	bl	800c2c0 <main>
  bx  lr    
 800cdfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800cdfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800ce00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ce04:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800ce08:	08017658 	.word	0x08017658
  ldr r2, =_sbss
 800ce0c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800ce10:	2000053c 	.word	0x2000053c

0800ce14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ce14:	e7fe      	b.n	800ce14 <ADC_IRQHandler>
	...

0800ce18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ce1c:	4b0e      	ldr	r3, [pc, #56]	@ (800ce58 <HAL_Init+0x40>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	4a0d      	ldr	r2, [pc, #52]	@ (800ce58 <HAL_Init+0x40>)
 800ce22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ce26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800ce28:	4b0b      	ldr	r3, [pc, #44]	@ (800ce58 <HAL_Init+0x40>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	4a0a      	ldr	r2, [pc, #40]	@ (800ce58 <HAL_Init+0x40>)
 800ce2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ce32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ce34:	4b08      	ldr	r3, [pc, #32]	@ (800ce58 <HAL_Init+0x40>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	4a07      	ldr	r2, [pc, #28]	@ (800ce58 <HAL_Init+0x40>)
 800ce3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ce3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ce40:	2003      	movs	r0, #3
 800ce42:	f000 f94f 	bl	800d0e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800ce46:	2000      	movs	r0, #0
 800ce48:	f000 f808 	bl	800ce5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800ce4c:	f7ff fd98 	bl	800c980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800ce50:	2300      	movs	r3, #0
}
 800ce52:	4618      	mov	r0, r3
 800ce54:	bd80      	pop	{r7, pc}
 800ce56:	bf00      	nop
 800ce58:	40023c00 	.word	0x40023c00

0800ce5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b082      	sub	sp, #8
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ce64:	4b12      	ldr	r3, [pc, #72]	@ (800ceb0 <HAL_InitTick+0x54>)
 800ce66:	681a      	ldr	r2, [r3, #0]
 800ce68:	4b12      	ldr	r3, [pc, #72]	@ (800ceb4 <HAL_InitTick+0x58>)
 800ce6a:	781b      	ldrb	r3, [r3, #0]
 800ce6c:	4619      	mov	r1, r3
 800ce6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ce72:	fbb3 f3f1 	udiv	r3, r3, r1
 800ce76:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f000 f967 	bl	800d14e <HAL_SYSTICK_Config>
 800ce80:	4603      	mov	r3, r0
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d001      	beq.n	800ce8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800ce86:	2301      	movs	r3, #1
 800ce88:	e00e      	b.n	800cea8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2b0f      	cmp	r3, #15
 800ce8e:	d80a      	bhi.n	800cea6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ce90:	2200      	movs	r2, #0
 800ce92:	6879      	ldr	r1, [r7, #4]
 800ce94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ce98:	f000 f92f 	bl	800d0fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ce9c:	4a06      	ldr	r2, [pc, #24]	@ (800ceb8 <HAL_InitTick+0x5c>)
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800cea2:	2300      	movs	r3, #0
 800cea4:	e000      	b.n	800cea8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800cea6:	2301      	movs	r3, #1
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	3708      	adds	r7, #8
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}
 800ceb0:	20000004 	.word	0x20000004
 800ceb4:	2000000c 	.word	0x2000000c
 800ceb8:	20000008 	.word	0x20000008

0800cebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800cebc:	b480      	push	{r7}
 800cebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800cec0:	4b06      	ldr	r3, [pc, #24]	@ (800cedc <HAL_IncTick+0x20>)
 800cec2:	781b      	ldrb	r3, [r3, #0]
 800cec4:	461a      	mov	r2, r3
 800cec6:	4b06      	ldr	r3, [pc, #24]	@ (800cee0 <HAL_IncTick+0x24>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	4413      	add	r3, r2
 800cecc:	4a04      	ldr	r2, [pc, #16]	@ (800cee0 <HAL_IncTick+0x24>)
 800cece:	6013      	str	r3, [r2, #0]
}
 800ced0:	bf00      	nop
 800ced2:	46bd      	mov	sp, r7
 800ced4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced8:	4770      	bx	lr
 800ceda:	bf00      	nop
 800cedc:	2000000c 	.word	0x2000000c
 800cee0:	200003bc 	.word	0x200003bc

0800cee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800cee4:	b480      	push	{r7}
 800cee6:	af00      	add	r7, sp, #0
  return uwTick;
 800cee8:	4b03      	ldr	r3, [pc, #12]	@ (800cef8 <HAL_GetTick+0x14>)
 800ceea:	681b      	ldr	r3, [r3, #0]
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	46bd      	mov	sp, r7
 800cef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef4:	4770      	bx	lr
 800cef6:	bf00      	nop
 800cef8:	200003bc 	.word	0x200003bc

0800cefc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b084      	sub	sp, #16
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800cf04:	f7ff ffee 	bl	800cee4 <HAL_GetTick>
 800cf08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cf14:	d005      	beq.n	800cf22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800cf16:	4b0a      	ldr	r3, [pc, #40]	@ (800cf40 <HAL_Delay+0x44>)
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	461a      	mov	r2, r3
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	4413      	add	r3, r2
 800cf20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800cf22:	bf00      	nop
 800cf24:	f7ff ffde 	bl	800cee4 <HAL_GetTick>
 800cf28:	4602      	mov	r2, r0
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	1ad3      	subs	r3, r2, r3
 800cf2e:	68fa      	ldr	r2, [r7, #12]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d8f7      	bhi.n	800cf24 <HAL_Delay+0x28>
  {
  }
}
 800cf34:	bf00      	nop
 800cf36:	bf00      	nop
 800cf38:	3710      	adds	r7, #16
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}
 800cf3e:	bf00      	nop
 800cf40:	2000000c 	.word	0x2000000c

0800cf44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800cf44:	b480      	push	{r7}
 800cf46:	b085      	sub	sp, #20
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f003 0307 	and.w	r3, r3, #7
 800cf52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800cf54:	4b0c      	ldr	r3, [pc, #48]	@ (800cf88 <__NVIC_SetPriorityGrouping+0x44>)
 800cf56:	68db      	ldr	r3, [r3, #12]
 800cf58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800cf5a:	68ba      	ldr	r2, [r7, #8]
 800cf5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800cf60:	4013      	ands	r3, r2
 800cf62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800cf6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800cf70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cf74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800cf76:	4a04      	ldr	r2, [pc, #16]	@ (800cf88 <__NVIC_SetPriorityGrouping+0x44>)
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	60d3      	str	r3, [r2, #12]
}
 800cf7c:	bf00      	nop
 800cf7e:	3714      	adds	r7, #20
 800cf80:	46bd      	mov	sp, r7
 800cf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf86:	4770      	bx	lr
 800cf88:	e000ed00 	.word	0xe000ed00

0800cf8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800cf90:	4b04      	ldr	r3, [pc, #16]	@ (800cfa4 <__NVIC_GetPriorityGrouping+0x18>)
 800cf92:	68db      	ldr	r3, [r3, #12]
 800cf94:	0a1b      	lsrs	r3, r3, #8
 800cf96:	f003 0307 	and.w	r3, r3, #7
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa2:	4770      	bx	lr
 800cfa4:	e000ed00 	.word	0xe000ed00

0800cfa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b083      	sub	sp, #12
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	4603      	mov	r3, r0
 800cfb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cfb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	db0b      	blt.n	800cfd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cfba:	79fb      	ldrb	r3, [r7, #7]
 800cfbc:	f003 021f 	and.w	r2, r3, #31
 800cfc0:	4907      	ldr	r1, [pc, #28]	@ (800cfe0 <__NVIC_EnableIRQ+0x38>)
 800cfc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cfc6:	095b      	lsrs	r3, r3, #5
 800cfc8:	2001      	movs	r0, #1
 800cfca:	fa00 f202 	lsl.w	r2, r0, r2
 800cfce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800cfd2:	bf00      	nop
 800cfd4:	370c      	adds	r7, #12
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfdc:	4770      	bx	lr
 800cfde:	bf00      	nop
 800cfe0:	e000e100 	.word	0xe000e100

0800cfe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b083      	sub	sp, #12
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	4603      	mov	r3, r0
 800cfec:	6039      	str	r1, [r7, #0]
 800cfee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	db0a      	blt.n	800d00e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	b2da      	uxtb	r2, r3
 800cffc:	490c      	ldr	r1, [pc, #48]	@ (800d030 <__NVIC_SetPriority+0x4c>)
 800cffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d002:	0112      	lsls	r2, r2, #4
 800d004:	b2d2      	uxtb	r2, r2
 800d006:	440b      	add	r3, r1
 800d008:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800d00c:	e00a      	b.n	800d024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	b2da      	uxtb	r2, r3
 800d012:	4908      	ldr	r1, [pc, #32]	@ (800d034 <__NVIC_SetPriority+0x50>)
 800d014:	79fb      	ldrb	r3, [r7, #7]
 800d016:	f003 030f 	and.w	r3, r3, #15
 800d01a:	3b04      	subs	r3, #4
 800d01c:	0112      	lsls	r2, r2, #4
 800d01e:	b2d2      	uxtb	r2, r2
 800d020:	440b      	add	r3, r1
 800d022:	761a      	strb	r2, [r3, #24]
}
 800d024:	bf00      	nop
 800d026:	370c      	adds	r7, #12
 800d028:	46bd      	mov	sp, r7
 800d02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02e:	4770      	bx	lr
 800d030:	e000e100 	.word	0xe000e100
 800d034:	e000ed00 	.word	0xe000ed00

0800d038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d038:	b480      	push	{r7}
 800d03a:	b089      	sub	sp, #36	@ 0x24
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	60f8      	str	r0, [r7, #12]
 800d040:	60b9      	str	r1, [r7, #8]
 800d042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	f003 0307 	and.w	r3, r3, #7
 800d04a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d04c:	69fb      	ldr	r3, [r7, #28]
 800d04e:	f1c3 0307 	rsb	r3, r3, #7
 800d052:	2b04      	cmp	r3, #4
 800d054:	bf28      	it	cs
 800d056:	2304      	movcs	r3, #4
 800d058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d05a:	69fb      	ldr	r3, [r7, #28]
 800d05c:	3304      	adds	r3, #4
 800d05e:	2b06      	cmp	r3, #6
 800d060:	d902      	bls.n	800d068 <NVIC_EncodePriority+0x30>
 800d062:	69fb      	ldr	r3, [r7, #28]
 800d064:	3b03      	subs	r3, #3
 800d066:	e000      	b.n	800d06a <NVIC_EncodePriority+0x32>
 800d068:	2300      	movs	r3, #0
 800d06a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d06c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d070:	69bb      	ldr	r3, [r7, #24]
 800d072:	fa02 f303 	lsl.w	r3, r2, r3
 800d076:	43da      	mvns	r2, r3
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	401a      	ands	r2, r3
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d080:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	fa01 f303 	lsl.w	r3, r1, r3
 800d08a:	43d9      	mvns	r1, r3
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d090:	4313      	orrs	r3, r2
         );
}
 800d092:	4618      	mov	r0, r3
 800d094:	3724      	adds	r7, #36	@ 0x24
 800d096:	46bd      	mov	sp, r7
 800d098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09c:	4770      	bx	lr
	...

0800d0a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b082      	sub	sp, #8
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	3b01      	subs	r3, #1
 800d0ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d0b0:	d301      	bcc.n	800d0b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	e00f      	b.n	800d0d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800d0b6:	4a0a      	ldr	r2, [pc, #40]	@ (800d0e0 <SysTick_Config+0x40>)
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	3b01      	subs	r3, #1
 800d0bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800d0be:	210f      	movs	r1, #15
 800d0c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d0c4:	f7ff ff8e 	bl	800cfe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800d0c8:	4b05      	ldr	r3, [pc, #20]	@ (800d0e0 <SysTick_Config+0x40>)
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800d0ce:	4b04      	ldr	r3, [pc, #16]	@ (800d0e0 <SysTick_Config+0x40>)
 800d0d0:	2207      	movs	r2, #7
 800d0d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800d0d4:	2300      	movs	r3, #0
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3708      	adds	r7, #8
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}
 800d0de:	bf00      	nop
 800d0e0:	e000e010 	.word	0xe000e010

0800d0e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b082      	sub	sp, #8
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f7ff ff29 	bl	800cf44 <__NVIC_SetPriorityGrouping>
}
 800d0f2:	bf00      	nop
 800d0f4:	3708      	adds	r7, #8
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}

0800d0fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800d0fa:	b580      	push	{r7, lr}
 800d0fc:	b086      	sub	sp, #24
 800d0fe:	af00      	add	r7, sp, #0
 800d100:	4603      	mov	r3, r0
 800d102:	60b9      	str	r1, [r7, #8]
 800d104:	607a      	str	r2, [r7, #4]
 800d106:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800d108:	2300      	movs	r3, #0
 800d10a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800d10c:	f7ff ff3e 	bl	800cf8c <__NVIC_GetPriorityGrouping>
 800d110:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800d112:	687a      	ldr	r2, [r7, #4]
 800d114:	68b9      	ldr	r1, [r7, #8]
 800d116:	6978      	ldr	r0, [r7, #20]
 800d118:	f7ff ff8e 	bl	800d038 <NVIC_EncodePriority>
 800d11c:	4602      	mov	r2, r0
 800d11e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d122:	4611      	mov	r1, r2
 800d124:	4618      	mov	r0, r3
 800d126:	f7ff ff5d 	bl	800cfe4 <__NVIC_SetPriority>
}
 800d12a:	bf00      	nop
 800d12c:	3718      	adds	r7, #24
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}

0800d132 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d132:	b580      	push	{r7, lr}
 800d134:	b082      	sub	sp, #8
 800d136:	af00      	add	r7, sp, #0
 800d138:	4603      	mov	r3, r0
 800d13a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800d13c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d140:	4618      	mov	r0, r3
 800d142:	f7ff ff31 	bl	800cfa8 <__NVIC_EnableIRQ>
}
 800d146:	bf00      	nop
 800d148:	3708      	adds	r7, #8
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}

0800d14e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800d14e:	b580      	push	{r7, lr}
 800d150:	b082      	sub	sp, #8
 800d152:	af00      	add	r7, sp, #0
 800d154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f7ff ffa2 	bl	800d0a0 <SysTick_Config>
 800d15c:	4603      	mov	r3, r0
}
 800d15e:	4618      	mov	r0, r3
 800d160:	3708      	adds	r7, #8
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}

0800d166 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800d166:	b580      	push	{r7, lr}
 800d168:	b084      	sub	sp, #16
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d172:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800d174:	f7ff feb6 	bl	800cee4 <HAL_GetTick>
 800d178:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d180:	b2db      	uxtb	r3, r3
 800d182:	2b02      	cmp	r3, #2
 800d184:	d008      	beq.n	800d198 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2280      	movs	r2, #128	@ 0x80
 800d18a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2200      	movs	r2, #0
 800d190:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800d194:	2301      	movs	r3, #1
 800d196:	e052      	b.n	800d23e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	681a      	ldr	r2, [r3, #0]
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f022 0216 	bic.w	r2, r2, #22
 800d1a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	695a      	ldr	r2, [r3, #20]
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d1b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d103      	bne.n	800d1c8 <HAL_DMA_Abort+0x62>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d007      	beq.n	800d1d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	681a      	ldr	r2, [r3, #0]
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	f022 0208 	bic.w	r2, r2, #8
 800d1d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	681a      	ldr	r2, [r3, #0]
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	f022 0201 	bic.w	r2, r2, #1
 800d1e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d1e8:	e013      	b.n	800d212 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800d1ea:	f7ff fe7b 	bl	800cee4 <HAL_GetTick>
 800d1ee:	4602      	mov	r2, r0
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	1ad3      	subs	r3, r2, r3
 800d1f4:	2b05      	cmp	r3, #5
 800d1f6:	d90c      	bls.n	800d212 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2220      	movs	r2, #32
 800d1fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2203      	movs	r2, #3
 800d202:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2200      	movs	r2, #0
 800d20a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800d20e:	2303      	movs	r3, #3
 800d210:	e015      	b.n	800d23e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f003 0301 	and.w	r3, r3, #1
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d1e4      	bne.n	800d1ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d224:	223f      	movs	r2, #63	@ 0x3f
 800d226:	409a      	lsls	r2, r3
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2201      	movs	r2, #1
 800d230:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2200      	movs	r2, #0
 800d238:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800d23c:	2300      	movs	r3, #0
}
 800d23e:	4618      	mov	r0, r3
 800d240:	3710      	adds	r7, #16
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}

0800d246 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800d246:	b480      	push	{r7}
 800d248:	b083      	sub	sp, #12
 800d24a:	af00      	add	r7, sp, #0
 800d24c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d254:	b2db      	uxtb	r3, r3
 800d256:	2b02      	cmp	r3, #2
 800d258:	d004      	beq.n	800d264 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2280      	movs	r2, #128	@ 0x80
 800d25e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800d260:	2301      	movs	r3, #1
 800d262:	e00c      	b.n	800d27e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2205      	movs	r2, #5
 800d268:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	681a      	ldr	r2, [r3, #0]
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	f022 0201 	bic.w	r2, r2, #1
 800d27a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800d27c:	2300      	movs	r3, #0
}
 800d27e:	4618      	mov	r0, r3
 800d280:	370c      	adds	r7, #12
 800d282:	46bd      	mov	sp, r7
 800d284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d288:	4770      	bx	lr
	...

0800d28c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d28c:	b480      	push	{r7}
 800d28e:	b089      	sub	sp, #36	@ 0x24
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800d296:	2300      	movs	r3, #0
 800d298:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800d29a:	2300      	movs	r3, #0
 800d29c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	61fb      	str	r3, [r7, #28]
 800d2a6:	e165      	b.n	800d574 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800d2a8:	2201      	movs	r2, #1
 800d2aa:	69fb      	ldr	r3, [r7, #28]
 800d2ac:	fa02 f303 	lsl.w	r3, r2, r3
 800d2b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	697a      	ldr	r2, [r7, #20]
 800d2b8:	4013      	ands	r3, r2
 800d2ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800d2bc:	693a      	ldr	r2, [r7, #16]
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	429a      	cmp	r2, r3
 800d2c2:	f040 8154 	bne.w	800d56e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	685b      	ldr	r3, [r3, #4]
 800d2ca:	f003 0303 	and.w	r3, r3, #3
 800d2ce:	2b01      	cmp	r3, #1
 800d2d0:	d005      	beq.n	800d2de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	685b      	ldr	r3, [r3, #4]
 800d2d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800d2da:	2b02      	cmp	r3, #2
 800d2dc:	d130      	bne.n	800d340 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	689b      	ldr	r3, [r3, #8]
 800d2e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800d2e4:	69fb      	ldr	r3, [r7, #28]
 800d2e6:	005b      	lsls	r3, r3, #1
 800d2e8:	2203      	movs	r2, #3
 800d2ea:	fa02 f303 	lsl.w	r3, r2, r3
 800d2ee:	43db      	mvns	r3, r3
 800d2f0:	69ba      	ldr	r2, [r7, #24]
 800d2f2:	4013      	ands	r3, r2
 800d2f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	68da      	ldr	r2, [r3, #12]
 800d2fa:	69fb      	ldr	r3, [r7, #28]
 800d2fc:	005b      	lsls	r3, r3, #1
 800d2fe:	fa02 f303 	lsl.w	r3, r2, r3
 800d302:	69ba      	ldr	r2, [r7, #24]
 800d304:	4313      	orrs	r3, r2
 800d306:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	69ba      	ldr	r2, [r7, #24]
 800d30c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	685b      	ldr	r3, [r3, #4]
 800d312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d314:	2201      	movs	r2, #1
 800d316:	69fb      	ldr	r3, [r7, #28]
 800d318:	fa02 f303 	lsl.w	r3, r2, r3
 800d31c:	43db      	mvns	r3, r3
 800d31e:	69ba      	ldr	r2, [r7, #24]
 800d320:	4013      	ands	r3, r2
 800d322:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	685b      	ldr	r3, [r3, #4]
 800d328:	091b      	lsrs	r3, r3, #4
 800d32a:	f003 0201 	and.w	r2, r3, #1
 800d32e:	69fb      	ldr	r3, [r7, #28]
 800d330:	fa02 f303 	lsl.w	r3, r2, r3
 800d334:	69ba      	ldr	r2, [r7, #24]
 800d336:	4313      	orrs	r3, r2
 800d338:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	69ba      	ldr	r2, [r7, #24]
 800d33e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	f003 0303 	and.w	r3, r3, #3
 800d348:	2b03      	cmp	r3, #3
 800d34a:	d017      	beq.n	800d37c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	68db      	ldr	r3, [r3, #12]
 800d350:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800d352:	69fb      	ldr	r3, [r7, #28]
 800d354:	005b      	lsls	r3, r3, #1
 800d356:	2203      	movs	r2, #3
 800d358:	fa02 f303 	lsl.w	r3, r2, r3
 800d35c:	43db      	mvns	r3, r3
 800d35e:	69ba      	ldr	r2, [r7, #24]
 800d360:	4013      	ands	r3, r2
 800d362:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	689a      	ldr	r2, [r3, #8]
 800d368:	69fb      	ldr	r3, [r7, #28]
 800d36a:	005b      	lsls	r3, r3, #1
 800d36c:	fa02 f303 	lsl.w	r3, r2, r3
 800d370:	69ba      	ldr	r2, [r7, #24]
 800d372:	4313      	orrs	r3, r2
 800d374:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	69ba      	ldr	r2, [r7, #24]
 800d37a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	685b      	ldr	r3, [r3, #4]
 800d380:	f003 0303 	and.w	r3, r3, #3
 800d384:	2b02      	cmp	r3, #2
 800d386:	d123      	bne.n	800d3d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d388:	69fb      	ldr	r3, [r7, #28]
 800d38a:	08da      	lsrs	r2, r3, #3
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	3208      	adds	r2, #8
 800d390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d394:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800d396:	69fb      	ldr	r3, [r7, #28]
 800d398:	f003 0307 	and.w	r3, r3, #7
 800d39c:	009b      	lsls	r3, r3, #2
 800d39e:	220f      	movs	r2, #15
 800d3a0:	fa02 f303 	lsl.w	r3, r2, r3
 800d3a4:	43db      	mvns	r3, r3
 800d3a6:	69ba      	ldr	r2, [r7, #24]
 800d3a8:	4013      	ands	r3, r2
 800d3aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	691a      	ldr	r2, [r3, #16]
 800d3b0:	69fb      	ldr	r3, [r7, #28]
 800d3b2:	f003 0307 	and.w	r3, r3, #7
 800d3b6:	009b      	lsls	r3, r3, #2
 800d3b8:	fa02 f303 	lsl.w	r3, r2, r3
 800d3bc:	69ba      	ldr	r2, [r7, #24]
 800d3be:	4313      	orrs	r3, r2
 800d3c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d3c2:	69fb      	ldr	r3, [r7, #28]
 800d3c4:	08da      	lsrs	r2, r3, #3
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	3208      	adds	r2, #8
 800d3ca:	69b9      	ldr	r1, [r7, #24]
 800d3cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800d3d6:	69fb      	ldr	r3, [r7, #28]
 800d3d8:	005b      	lsls	r3, r3, #1
 800d3da:	2203      	movs	r2, #3
 800d3dc:	fa02 f303 	lsl.w	r3, r2, r3
 800d3e0:	43db      	mvns	r3, r3
 800d3e2:	69ba      	ldr	r2, [r7, #24]
 800d3e4:	4013      	ands	r3, r2
 800d3e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	685b      	ldr	r3, [r3, #4]
 800d3ec:	f003 0203 	and.w	r2, r3, #3
 800d3f0:	69fb      	ldr	r3, [r7, #28]
 800d3f2:	005b      	lsls	r3, r3, #1
 800d3f4:	fa02 f303 	lsl.w	r3, r2, r3
 800d3f8:	69ba      	ldr	r2, [r7, #24]
 800d3fa:	4313      	orrs	r3, r2
 800d3fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	69ba      	ldr	r2, [r7, #24]
 800d402:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	685b      	ldr	r3, [r3, #4]
 800d408:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	f000 80ae 	beq.w	800d56e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d412:	2300      	movs	r3, #0
 800d414:	60fb      	str	r3, [r7, #12]
 800d416:	4b5d      	ldr	r3, [pc, #372]	@ (800d58c <HAL_GPIO_Init+0x300>)
 800d418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d41a:	4a5c      	ldr	r2, [pc, #368]	@ (800d58c <HAL_GPIO_Init+0x300>)
 800d41c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d420:	6453      	str	r3, [r2, #68]	@ 0x44
 800d422:	4b5a      	ldr	r3, [pc, #360]	@ (800d58c <HAL_GPIO_Init+0x300>)
 800d424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d426:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d42a:	60fb      	str	r3, [r7, #12]
 800d42c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d42e:	4a58      	ldr	r2, [pc, #352]	@ (800d590 <HAL_GPIO_Init+0x304>)
 800d430:	69fb      	ldr	r3, [r7, #28]
 800d432:	089b      	lsrs	r3, r3, #2
 800d434:	3302      	adds	r3, #2
 800d436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d43a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800d43c:	69fb      	ldr	r3, [r7, #28]
 800d43e:	f003 0303 	and.w	r3, r3, #3
 800d442:	009b      	lsls	r3, r3, #2
 800d444:	220f      	movs	r2, #15
 800d446:	fa02 f303 	lsl.w	r3, r2, r3
 800d44a:	43db      	mvns	r3, r3
 800d44c:	69ba      	ldr	r2, [r7, #24]
 800d44e:	4013      	ands	r3, r2
 800d450:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	4a4f      	ldr	r2, [pc, #316]	@ (800d594 <HAL_GPIO_Init+0x308>)
 800d456:	4293      	cmp	r3, r2
 800d458:	d025      	beq.n	800d4a6 <HAL_GPIO_Init+0x21a>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	4a4e      	ldr	r2, [pc, #312]	@ (800d598 <HAL_GPIO_Init+0x30c>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d01f      	beq.n	800d4a2 <HAL_GPIO_Init+0x216>
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	4a4d      	ldr	r2, [pc, #308]	@ (800d59c <HAL_GPIO_Init+0x310>)
 800d466:	4293      	cmp	r3, r2
 800d468:	d019      	beq.n	800d49e <HAL_GPIO_Init+0x212>
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	4a4c      	ldr	r2, [pc, #304]	@ (800d5a0 <HAL_GPIO_Init+0x314>)
 800d46e:	4293      	cmp	r3, r2
 800d470:	d013      	beq.n	800d49a <HAL_GPIO_Init+0x20e>
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	4a4b      	ldr	r2, [pc, #300]	@ (800d5a4 <HAL_GPIO_Init+0x318>)
 800d476:	4293      	cmp	r3, r2
 800d478:	d00d      	beq.n	800d496 <HAL_GPIO_Init+0x20a>
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	4a4a      	ldr	r2, [pc, #296]	@ (800d5a8 <HAL_GPIO_Init+0x31c>)
 800d47e:	4293      	cmp	r3, r2
 800d480:	d007      	beq.n	800d492 <HAL_GPIO_Init+0x206>
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	4a49      	ldr	r2, [pc, #292]	@ (800d5ac <HAL_GPIO_Init+0x320>)
 800d486:	4293      	cmp	r3, r2
 800d488:	d101      	bne.n	800d48e <HAL_GPIO_Init+0x202>
 800d48a:	2306      	movs	r3, #6
 800d48c:	e00c      	b.n	800d4a8 <HAL_GPIO_Init+0x21c>
 800d48e:	2307      	movs	r3, #7
 800d490:	e00a      	b.n	800d4a8 <HAL_GPIO_Init+0x21c>
 800d492:	2305      	movs	r3, #5
 800d494:	e008      	b.n	800d4a8 <HAL_GPIO_Init+0x21c>
 800d496:	2304      	movs	r3, #4
 800d498:	e006      	b.n	800d4a8 <HAL_GPIO_Init+0x21c>
 800d49a:	2303      	movs	r3, #3
 800d49c:	e004      	b.n	800d4a8 <HAL_GPIO_Init+0x21c>
 800d49e:	2302      	movs	r3, #2
 800d4a0:	e002      	b.n	800d4a8 <HAL_GPIO_Init+0x21c>
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	e000      	b.n	800d4a8 <HAL_GPIO_Init+0x21c>
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	69fa      	ldr	r2, [r7, #28]
 800d4aa:	f002 0203 	and.w	r2, r2, #3
 800d4ae:	0092      	lsls	r2, r2, #2
 800d4b0:	4093      	lsls	r3, r2
 800d4b2:	69ba      	ldr	r2, [r7, #24]
 800d4b4:	4313      	orrs	r3, r2
 800d4b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d4b8:	4935      	ldr	r1, [pc, #212]	@ (800d590 <HAL_GPIO_Init+0x304>)
 800d4ba:	69fb      	ldr	r3, [r7, #28]
 800d4bc:	089b      	lsrs	r3, r3, #2
 800d4be:	3302      	adds	r3, #2
 800d4c0:	69ba      	ldr	r2, [r7, #24]
 800d4c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d4c6:	4b3a      	ldr	r3, [pc, #232]	@ (800d5b0 <HAL_GPIO_Init+0x324>)
 800d4c8:	689b      	ldr	r3, [r3, #8]
 800d4ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	43db      	mvns	r3, r3
 800d4d0:	69ba      	ldr	r2, [r7, #24]
 800d4d2:	4013      	ands	r3, r2
 800d4d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	685b      	ldr	r3, [r3, #4]
 800d4da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d003      	beq.n	800d4ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800d4e2:	69ba      	ldr	r2, [r7, #24]
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	4313      	orrs	r3, r2
 800d4e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800d4ea:	4a31      	ldr	r2, [pc, #196]	@ (800d5b0 <HAL_GPIO_Init+0x324>)
 800d4ec:	69bb      	ldr	r3, [r7, #24]
 800d4ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800d4f0:	4b2f      	ldr	r3, [pc, #188]	@ (800d5b0 <HAL_GPIO_Init+0x324>)
 800d4f2:	68db      	ldr	r3, [r3, #12]
 800d4f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d4f6:	693b      	ldr	r3, [r7, #16]
 800d4f8:	43db      	mvns	r3, r3
 800d4fa:	69ba      	ldr	r2, [r7, #24]
 800d4fc:	4013      	ands	r3, r2
 800d4fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	685b      	ldr	r3, [r3, #4]
 800d504:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d003      	beq.n	800d514 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800d50c:	69ba      	ldr	r2, [r7, #24]
 800d50e:	693b      	ldr	r3, [r7, #16]
 800d510:	4313      	orrs	r3, r2
 800d512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800d514:	4a26      	ldr	r2, [pc, #152]	@ (800d5b0 <HAL_GPIO_Init+0x324>)
 800d516:	69bb      	ldr	r3, [r7, #24]
 800d518:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800d51a:	4b25      	ldr	r3, [pc, #148]	@ (800d5b0 <HAL_GPIO_Init+0x324>)
 800d51c:	685b      	ldr	r3, [r3, #4]
 800d51e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	43db      	mvns	r3, r3
 800d524:	69ba      	ldr	r2, [r7, #24]
 800d526:	4013      	ands	r3, r2
 800d528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	685b      	ldr	r3, [r3, #4]
 800d52e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d532:	2b00      	cmp	r3, #0
 800d534:	d003      	beq.n	800d53e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800d536:	69ba      	ldr	r2, [r7, #24]
 800d538:	693b      	ldr	r3, [r7, #16]
 800d53a:	4313      	orrs	r3, r2
 800d53c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800d53e:	4a1c      	ldr	r2, [pc, #112]	@ (800d5b0 <HAL_GPIO_Init+0x324>)
 800d540:	69bb      	ldr	r3, [r7, #24]
 800d542:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d544:	4b1a      	ldr	r3, [pc, #104]	@ (800d5b0 <HAL_GPIO_Init+0x324>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d54a:	693b      	ldr	r3, [r7, #16]
 800d54c:	43db      	mvns	r3, r3
 800d54e:	69ba      	ldr	r2, [r7, #24]
 800d550:	4013      	ands	r3, r2
 800d552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	685b      	ldr	r3, [r3, #4]
 800d558:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d003      	beq.n	800d568 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800d560:	69ba      	ldr	r2, [r7, #24]
 800d562:	693b      	ldr	r3, [r7, #16]
 800d564:	4313      	orrs	r3, r2
 800d566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800d568:	4a11      	ldr	r2, [pc, #68]	@ (800d5b0 <HAL_GPIO_Init+0x324>)
 800d56a:	69bb      	ldr	r3, [r7, #24]
 800d56c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d56e:	69fb      	ldr	r3, [r7, #28]
 800d570:	3301      	adds	r3, #1
 800d572:	61fb      	str	r3, [r7, #28]
 800d574:	69fb      	ldr	r3, [r7, #28]
 800d576:	2b0f      	cmp	r3, #15
 800d578:	f67f ae96 	bls.w	800d2a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800d57c:	bf00      	nop
 800d57e:	bf00      	nop
 800d580:	3724      	adds	r7, #36	@ 0x24
 800d582:	46bd      	mov	sp, r7
 800d584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d588:	4770      	bx	lr
 800d58a:	bf00      	nop
 800d58c:	40023800 	.word	0x40023800
 800d590:	40013800 	.word	0x40013800
 800d594:	40020000 	.word	0x40020000
 800d598:	40020400 	.word	0x40020400
 800d59c:	40020800 	.word	0x40020800
 800d5a0:	40020c00 	.word	0x40020c00
 800d5a4:	40021000 	.word	0x40021000
 800d5a8:	40021400 	.word	0x40021400
 800d5ac:	40021800 	.word	0x40021800
 800d5b0:	40013c00 	.word	0x40013c00

0800d5b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b083      	sub	sp, #12
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
 800d5bc:	460b      	mov	r3, r1
 800d5be:	807b      	strh	r3, [r7, #2]
 800d5c0:	4613      	mov	r3, r2
 800d5c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d5c4:	787b      	ldrb	r3, [r7, #1]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d003      	beq.n	800d5d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d5ca:	887a      	ldrh	r2, [r7, #2]
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800d5d0:	e003      	b.n	800d5da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800d5d2:	887b      	ldrh	r3, [r7, #2]
 800d5d4:	041a      	lsls	r2, r3, #16
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	619a      	str	r2, [r3, #24]
}
 800d5da:	bf00      	nop
 800d5dc:	370c      	adds	r7, #12
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e4:	4770      	bx	lr
	...

0800d5e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b082      	sub	sp, #8
 800d5ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	603b      	str	r3, [r7, #0]
 800d5f6:	4b20      	ldr	r3, [pc, #128]	@ (800d678 <HAL_PWREx_EnableOverDrive+0x90>)
 800d5f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5fa:	4a1f      	ldr	r2, [pc, #124]	@ (800d678 <HAL_PWREx_EnableOverDrive+0x90>)
 800d5fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d600:	6413      	str	r3, [r2, #64]	@ 0x40
 800d602:	4b1d      	ldr	r3, [pc, #116]	@ (800d678 <HAL_PWREx_EnableOverDrive+0x90>)
 800d604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d60a:	603b      	str	r3, [r7, #0]
 800d60c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800d60e:	4b1b      	ldr	r3, [pc, #108]	@ (800d67c <HAL_PWREx_EnableOverDrive+0x94>)
 800d610:	2201      	movs	r2, #1
 800d612:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d614:	f7ff fc66 	bl	800cee4 <HAL_GetTick>
 800d618:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d61a:	e009      	b.n	800d630 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d61c:	f7ff fc62 	bl	800cee4 <HAL_GetTick>
 800d620:	4602      	mov	r2, r0
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	1ad3      	subs	r3, r2, r3
 800d626:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d62a:	d901      	bls.n	800d630 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800d62c:	2303      	movs	r3, #3
 800d62e:	e01f      	b.n	800d670 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d630:	4b13      	ldr	r3, [pc, #76]	@ (800d680 <HAL_PWREx_EnableOverDrive+0x98>)
 800d632:	685b      	ldr	r3, [r3, #4]
 800d634:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d63c:	d1ee      	bne.n	800d61c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800d63e:	4b11      	ldr	r3, [pc, #68]	@ (800d684 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d640:	2201      	movs	r2, #1
 800d642:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d644:	f7ff fc4e 	bl	800cee4 <HAL_GetTick>
 800d648:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d64a:	e009      	b.n	800d660 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d64c:	f7ff fc4a 	bl	800cee4 <HAL_GetTick>
 800d650:	4602      	mov	r2, r0
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	1ad3      	subs	r3, r2, r3
 800d656:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d65a:	d901      	bls.n	800d660 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800d65c:	2303      	movs	r3, #3
 800d65e:	e007      	b.n	800d670 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d660:	4b07      	ldr	r3, [pc, #28]	@ (800d680 <HAL_PWREx_EnableOverDrive+0x98>)
 800d662:	685b      	ldr	r3, [r3, #4]
 800d664:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d668:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d66c:	d1ee      	bne.n	800d64c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800d66e:	2300      	movs	r3, #0
}
 800d670:	4618      	mov	r0, r3
 800d672:	3708      	adds	r7, #8
 800d674:	46bd      	mov	sp, r7
 800d676:	bd80      	pop	{r7, pc}
 800d678:	40023800 	.word	0x40023800
 800d67c:	420e0040 	.word	0x420e0040
 800d680:	40007000 	.word	0x40007000
 800d684:	420e0044 	.word	0x420e0044

0800d688 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b084      	sub	sp, #16
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d101      	bne.n	800d69c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d698:	2301      	movs	r3, #1
 800d69a:	e0cc      	b.n	800d836 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d69c:	4b68      	ldr	r3, [pc, #416]	@ (800d840 <HAL_RCC_ClockConfig+0x1b8>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	f003 030f 	and.w	r3, r3, #15
 800d6a4:	683a      	ldr	r2, [r7, #0]
 800d6a6:	429a      	cmp	r2, r3
 800d6a8:	d90c      	bls.n	800d6c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d6aa:	4b65      	ldr	r3, [pc, #404]	@ (800d840 <HAL_RCC_ClockConfig+0x1b8>)
 800d6ac:	683a      	ldr	r2, [r7, #0]
 800d6ae:	b2d2      	uxtb	r2, r2
 800d6b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d6b2:	4b63      	ldr	r3, [pc, #396]	@ (800d840 <HAL_RCC_ClockConfig+0x1b8>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f003 030f 	and.w	r3, r3, #15
 800d6ba:	683a      	ldr	r2, [r7, #0]
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d001      	beq.n	800d6c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d6c0:	2301      	movs	r3, #1
 800d6c2:	e0b8      	b.n	800d836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	f003 0302 	and.w	r3, r3, #2
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d020      	beq.n	800d712 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	f003 0304 	and.w	r3, r3, #4
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d005      	beq.n	800d6e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d6dc:	4b59      	ldr	r3, [pc, #356]	@ (800d844 <HAL_RCC_ClockConfig+0x1bc>)
 800d6de:	689b      	ldr	r3, [r3, #8]
 800d6e0:	4a58      	ldr	r2, [pc, #352]	@ (800d844 <HAL_RCC_ClockConfig+0x1bc>)
 800d6e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800d6e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	f003 0308 	and.w	r3, r3, #8
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d005      	beq.n	800d700 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d6f4:	4b53      	ldr	r3, [pc, #332]	@ (800d844 <HAL_RCC_ClockConfig+0x1bc>)
 800d6f6:	689b      	ldr	r3, [r3, #8]
 800d6f8:	4a52      	ldr	r2, [pc, #328]	@ (800d844 <HAL_RCC_ClockConfig+0x1bc>)
 800d6fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800d6fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d700:	4b50      	ldr	r3, [pc, #320]	@ (800d844 <HAL_RCC_ClockConfig+0x1bc>)
 800d702:	689b      	ldr	r3, [r3, #8]
 800d704:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	689b      	ldr	r3, [r3, #8]
 800d70c:	494d      	ldr	r1, [pc, #308]	@ (800d844 <HAL_RCC_ClockConfig+0x1bc>)
 800d70e:	4313      	orrs	r3, r2
 800d710:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	f003 0301 	and.w	r3, r3, #1
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d044      	beq.n	800d7a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	685b      	ldr	r3, [r3, #4]
 800d722:	2b01      	cmp	r3, #1
 800d724:	d107      	bne.n	800d736 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d726:	4b47      	ldr	r3, [pc, #284]	@ (800d844 <HAL_RCC_ClockConfig+0x1bc>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d119      	bne.n	800d766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d732:	2301      	movs	r3, #1
 800d734:	e07f      	b.n	800d836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	685b      	ldr	r3, [r3, #4]
 800d73a:	2b02      	cmp	r3, #2
 800d73c:	d003      	beq.n	800d746 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d742:	2b03      	cmp	r3, #3
 800d744:	d107      	bne.n	800d756 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d746:	4b3f      	ldr	r3, [pc, #252]	@ (800d844 <HAL_RCC_ClockConfig+0x1bc>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d109      	bne.n	800d766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d752:	2301      	movs	r3, #1
 800d754:	e06f      	b.n	800d836 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d756:	4b3b      	ldr	r3, [pc, #236]	@ (800d844 <HAL_RCC_ClockConfig+0x1bc>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	f003 0302 	and.w	r3, r3, #2
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d101      	bne.n	800d766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d762:	2301      	movs	r3, #1
 800d764:	e067      	b.n	800d836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d766:	4b37      	ldr	r3, [pc, #220]	@ (800d844 <HAL_RCC_ClockConfig+0x1bc>)
 800d768:	689b      	ldr	r3, [r3, #8]
 800d76a:	f023 0203 	bic.w	r2, r3, #3
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	685b      	ldr	r3, [r3, #4]
 800d772:	4934      	ldr	r1, [pc, #208]	@ (800d844 <HAL_RCC_ClockConfig+0x1bc>)
 800d774:	4313      	orrs	r3, r2
 800d776:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d778:	f7ff fbb4 	bl	800cee4 <HAL_GetTick>
 800d77c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d77e:	e00a      	b.n	800d796 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d780:	f7ff fbb0 	bl	800cee4 <HAL_GetTick>
 800d784:	4602      	mov	r2, r0
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	1ad3      	subs	r3, r2, r3
 800d78a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d78e:	4293      	cmp	r3, r2
 800d790:	d901      	bls.n	800d796 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d792:	2303      	movs	r3, #3
 800d794:	e04f      	b.n	800d836 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d796:	4b2b      	ldr	r3, [pc, #172]	@ (800d844 <HAL_RCC_ClockConfig+0x1bc>)
 800d798:	689b      	ldr	r3, [r3, #8]
 800d79a:	f003 020c 	and.w	r2, r3, #12
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	685b      	ldr	r3, [r3, #4]
 800d7a2:	009b      	lsls	r3, r3, #2
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d1eb      	bne.n	800d780 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d7a8:	4b25      	ldr	r3, [pc, #148]	@ (800d840 <HAL_RCC_ClockConfig+0x1b8>)
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	f003 030f 	and.w	r3, r3, #15
 800d7b0:	683a      	ldr	r2, [r7, #0]
 800d7b2:	429a      	cmp	r2, r3
 800d7b4:	d20c      	bcs.n	800d7d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d7b6:	4b22      	ldr	r3, [pc, #136]	@ (800d840 <HAL_RCC_ClockConfig+0x1b8>)
 800d7b8:	683a      	ldr	r2, [r7, #0]
 800d7ba:	b2d2      	uxtb	r2, r2
 800d7bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d7be:	4b20      	ldr	r3, [pc, #128]	@ (800d840 <HAL_RCC_ClockConfig+0x1b8>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	f003 030f 	and.w	r3, r3, #15
 800d7c6:	683a      	ldr	r2, [r7, #0]
 800d7c8:	429a      	cmp	r2, r3
 800d7ca:	d001      	beq.n	800d7d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	e032      	b.n	800d836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	f003 0304 	and.w	r3, r3, #4
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d008      	beq.n	800d7ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d7dc:	4b19      	ldr	r3, [pc, #100]	@ (800d844 <HAL_RCC_ClockConfig+0x1bc>)
 800d7de:	689b      	ldr	r3, [r3, #8]
 800d7e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	68db      	ldr	r3, [r3, #12]
 800d7e8:	4916      	ldr	r1, [pc, #88]	@ (800d844 <HAL_RCC_ClockConfig+0x1bc>)
 800d7ea:	4313      	orrs	r3, r2
 800d7ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	f003 0308 	and.w	r3, r3, #8
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d009      	beq.n	800d80e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d7fa:	4b12      	ldr	r3, [pc, #72]	@ (800d844 <HAL_RCC_ClockConfig+0x1bc>)
 800d7fc:	689b      	ldr	r3, [r3, #8]
 800d7fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	691b      	ldr	r3, [r3, #16]
 800d806:	00db      	lsls	r3, r3, #3
 800d808:	490e      	ldr	r1, [pc, #56]	@ (800d844 <HAL_RCC_ClockConfig+0x1bc>)
 800d80a:	4313      	orrs	r3, r2
 800d80c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800d80e:	f000 f855 	bl	800d8bc <HAL_RCC_GetSysClockFreq>
 800d812:	4602      	mov	r2, r0
 800d814:	4b0b      	ldr	r3, [pc, #44]	@ (800d844 <HAL_RCC_ClockConfig+0x1bc>)
 800d816:	689b      	ldr	r3, [r3, #8]
 800d818:	091b      	lsrs	r3, r3, #4
 800d81a:	f003 030f 	and.w	r3, r3, #15
 800d81e:	490a      	ldr	r1, [pc, #40]	@ (800d848 <HAL_RCC_ClockConfig+0x1c0>)
 800d820:	5ccb      	ldrb	r3, [r1, r3]
 800d822:	fa22 f303 	lsr.w	r3, r2, r3
 800d826:	4a09      	ldr	r2, [pc, #36]	@ (800d84c <HAL_RCC_ClockConfig+0x1c4>)
 800d828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800d82a:	4b09      	ldr	r3, [pc, #36]	@ (800d850 <HAL_RCC_ClockConfig+0x1c8>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	4618      	mov	r0, r3
 800d830:	f7ff fb14 	bl	800ce5c <HAL_InitTick>

  return HAL_OK;
 800d834:	2300      	movs	r3, #0
}
 800d836:	4618      	mov	r0, r3
 800d838:	3710      	adds	r7, #16
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}
 800d83e:	bf00      	nop
 800d840:	40023c00 	.word	0x40023c00
 800d844:	40023800 	.word	0x40023800
 800d848:	08015180 	.word	0x08015180
 800d84c:	20000004 	.word	0x20000004
 800d850:	20000008 	.word	0x20000008

0800d854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d854:	b480      	push	{r7}
 800d856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d858:	4b03      	ldr	r3, [pc, #12]	@ (800d868 <HAL_RCC_GetHCLKFreq+0x14>)
 800d85a:	681b      	ldr	r3, [r3, #0]
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	46bd      	mov	sp, r7
 800d860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d864:	4770      	bx	lr
 800d866:	bf00      	nop
 800d868:	20000004 	.word	0x20000004

0800d86c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800d870:	f7ff fff0 	bl	800d854 <HAL_RCC_GetHCLKFreq>
 800d874:	4602      	mov	r2, r0
 800d876:	4b05      	ldr	r3, [pc, #20]	@ (800d88c <HAL_RCC_GetPCLK1Freq+0x20>)
 800d878:	689b      	ldr	r3, [r3, #8]
 800d87a:	0a9b      	lsrs	r3, r3, #10
 800d87c:	f003 0307 	and.w	r3, r3, #7
 800d880:	4903      	ldr	r1, [pc, #12]	@ (800d890 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d882:	5ccb      	ldrb	r3, [r1, r3]
 800d884:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d888:	4618      	mov	r0, r3
 800d88a:	bd80      	pop	{r7, pc}
 800d88c:	40023800 	.word	0x40023800
 800d890:	08015190 	.word	0x08015190

0800d894 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800d898:	f7ff ffdc 	bl	800d854 <HAL_RCC_GetHCLKFreq>
 800d89c:	4602      	mov	r2, r0
 800d89e:	4b05      	ldr	r3, [pc, #20]	@ (800d8b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d8a0:	689b      	ldr	r3, [r3, #8]
 800d8a2:	0b5b      	lsrs	r3, r3, #13
 800d8a4:	f003 0307 	and.w	r3, r3, #7
 800d8a8:	4903      	ldr	r1, [pc, #12]	@ (800d8b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d8aa:	5ccb      	ldrb	r3, [r1, r3]
 800d8ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	bd80      	pop	{r7, pc}
 800d8b4:	40023800 	.word	0x40023800
 800d8b8:	08015190 	.word	0x08015190

0800d8bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d8bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d8c0:	b0ae      	sub	sp, #184	@ 0xb8
 800d8c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800d8dc:	2300      	movs	r3, #0
 800d8de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d8e2:	4bcb      	ldr	r3, [pc, #812]	@ (800dc10 <HAL_RCC_GetSysClockFreq+0x354>)
 800d8e4:	689b      	ldr	r3, [r3, #8]
 800d8e6:	f003 030c 	and.w	r3, r3, #12
 800d8ea:	2b0c      	cmp	r3, #12
 800d8ec:	f200 8206 	bhi.w	800dcfc <HAL_RCC_GetSysClockFreq+0x440>
 800d8f0:	a201      	add	r2, pc, #4	@ (adr r2, 800d8f8 <HAL_RCC_GetSysClockFreq+0x3c>)
 800d8f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8f6:	bf00      	nop
 800d8f8:	0800d92d 	.word	0x0800d92d
 800d8fc:	0800dcfd 	.word	0x0800dcfd
 800d900:	0800dcfd 	.word	0x0800dcfd
 800d904:	0800dcfd 	.word	0x0800dcfd
 800d908:	0800d935 	.word	0x0800d935
 800d90c:	0800dcfd 	.word	0x0800dcfd
 800d910:	0800dcfd 	.word	0x0800dcfd
 800d914:	0800dcfd 	.word	0x0800dcfd
 800d918:	0800d93d 	.word	0x0800d93d
 800d91c:	0800dcfd 	.word	0x0800dcfd
 800d920:	0800dcfd 	.word	0x0800dcfd
 800d924:	0800dcfd 	.word	0x0800dcfd
 800d928:	0800db2d 	.word	0x0800db2d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d92c:	4bb9      	ldr	r3, [pc, #740]	@ (800dc14 <HAL_RCC_GetSysClockFreq+0x358>)
 800d92e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800d932:	e1e7      	b.n	800dd04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d934:	4bb8      	ldr	r3, [pc, #736]	@ (800dc18 <HAL_RCC_GetSysClockFreq+0x35c>)
 800d936:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800d93a:	e1e3      	b.n	800dd04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d93c:	4bb4      	ldr	r3, [pc, #720]	@ (800dc10 <HAL_RCC_GetSysClockFreq+0x354>)
 800d93e:	685b      	ldr	r3, [r3, #4]
 800d940:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d944:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d948:	4bb1      	ldr	r3, [pc, #708]	@ (800dc10 <HAL_RCC_GetSysClockFreq+0x354>)
 800d94a:	685b      	ldr	r3, [r3, #4]
 800d94c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d950:	2b00      	cmp	r3, #0
 800d952:	d071      	beq.n	800da38 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d954:	4bae      	ldr	r3, [pc, #696]	@ (800dc10 <HAL_RCC_GetSysClockFreq+0x354>)
 800d956:	685b      	ldr	r3, [r3, #4]
 800d958:	099b      	lsrs	r3, r3, #6
 800d95a:	2200      	movs	r2, #0
 800d95c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d960:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800d964:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d96c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d970:	2300      	movs	r3, #0
 800d972:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d976:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800d97a:	4622      	mov	r2, r4
 800d97c:	462b      	mov	r3, r5
 800d97e:	f04f 0000 	mov.w	r0, #0
 800d982:	f04f 0100 	mov.w	r1, #0
 800d986:	0159      	lsls	r1, r3, #5
 800d988:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d98c:	0150      	lsls	r0, r2, #5
 800d98e:	4602      	mov	r2, r0
 800d990:	460b      	mov	r3, r1
 800d992:	4621      	mov	r1, r4
 800d994:	1a51      	subs	r1, r2, r1
 800d996:	6439      	str	r1, [r7, #64]	@ 0x40
 800d998:	4629      	mov	r1, r5
 800d99a:	eb63 0301 	sbc.w	r3, r3, r1
 800d99e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d9a0:	f04f 0200 	mov.w	r2, #0
 800d9a4:	f04f 0300 	mov.w	r3, #0
 800d9a8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800d9ac:	4649      	mov	r1, r9
 800d9ae:	018b      	lsls	r3, r1, #6
 800d9b0:	4641      	mov	r1, r8
 800d9b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800d9b6:	4641      	mov	r1, r8
 800d9b8:	018a      	lsls	r2, r1, #6
 800d9ba:	4641      	mov	r1, r8
 800d9bc:	1a51      	subs	r1, r2, r1
 800d9be:	63b9      	str	r1, [r7, #56]	@ 0x38
 800d9c0:	4649      	mov	r1, r9
 800d9c2:	eb63 0301 	sbc.w	r3, r3, r1
 800d9c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d9c8:	f04f 0200 	mov.w	r2, #0
 800d9cc:	f04f 0300 	mov.w	r3, #0
 800d9d0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800d9d4:	4649      	mov	r1, r9
 800d9d6:	00cb      	lsls	r3, r1, #3
 800d9d8:	4641      	mov	r1, r8
 800d9da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d9de:	4641      	mov	r1, r8
 800d9e0:	00ca      	lsls	r2, r1, #3
 800d9e2:	4610      	mov	r0, r2
 800d9e4:	4619      	mov	r1, r3
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	4622      	mov	r2, r4
 800d9ea:	189b      	adds	r3, r3, r2
 800d9ec:	633b      	str	r3, [r7, #48]	@ 0x30
 800d9ee:	462b      	mov	r3, r5
 800d9f0:	460a      	mov	r2, r1
 800d9f2:	eb42 0303 	adc.w	r3, r2, r3
 800d9f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9f8:	f04f 0200 	mov.w	r2, #0
 800d9fc:	f04f 0300 	mov.w	r3, #0
 800da00:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800da04:	4629      	mov	r1, r5
 800da06:	024b      	lsls	r3, r1, #9
 800da08:	4621      	mov	r1, r4
 800da0a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800da0e:	4621      	mov	r1, r4
 800da10:	024a      	lsls	r2, r1, #9
 800da12:	4610      	mov	r0, r2
 800da14:	4619      	mov	r1, r3
 800da16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800da1a:	2200      	movs	r2, #0
 800da1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800da20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800da24:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800da28:	f7f3 f93e 	bl	8000ca8 <__aeabi_uldivmod>
 800da2c:	4602      	mov	r2, r0
 800da2e:	460b      	mov	r3, r1
 800da30:	4613      	mov	r3, r2
 800da32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800da36:	e067      	b.n	800db08 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800da38:	4b75      	ldr	r3, [pc, #468]	@ (800dc10 <HAL_RCC_GetSysClockFreq+0x354>)
 800da3a:	685b      	ldr	r3, [r3, #4]
 800da3c:	099b      	lsrs	r3, r3, #6
 800da3e:	2200      	movs	r2, #0
 800da40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800da44:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800da48:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800da4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da50:	67bb      	str	r3, [r7, #120]	@ 0x78
 800da52:	2300      	movs	r3, #0
 800da54:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800da56:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800da5a:	4622      	mov	r2, r4
 800da5c:	462b      	mov	r3, r5
 800da5e:	f04f 0000 	mov.w	r0, #0
 800da62:	f04f 0100 	mov.w	r1, #0
 800da66:	0159      	lsls	r1, r3, #5
 800da68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800da6c:	0150      	lsls	r0, r2, #5
 800da6e:	4602      	mov	r2, r0
 800da70:	460b      	mov	r3, r1
 800da72:	4621      	mov	r1, r4
 800da74:	1a51      	subs	r1, r2, r1
 800da76:	62b9      	str	r1, [r7, #40]	@ 0x28
 800da78:	4629      	mov	r1, r5
 800da7a:	eb63 0301 	sbc.w	r3, r3, r1
 800da7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800da80:	f04f 0200 	mov.w	r2, #0
 800da84:	f04f 0300 	mov.w	r3, #0
 800da88:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800da8c:	4649      	mov	r1, r9
 800da8e:	018b      	lsls	r3, r1, #6
 800da90:	4641      	mov	r1, r8
 800da92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800da96:	4641      	mov	r1, r8
 800da98:	018a      	lsls	r2, r1, #6
 800da9a:	4641      	mov	r1, r8
 800da9c:	ebb2 0a01 	subs.w	sl, r2, r1
 800daa0:	4649      	mov	r1, r9
 800daa2:	eb63 0b01 	sbc.w	fp, r3, r1
 800daa6:	f04f 0200 	mov.w	r2, #0
 800daaa:	f04f 0300 	mov.w	r3, #0
 800daae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800dab2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800dab6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800daba:	4692      	mov	sl, r2
 800dabc:	469b      	mov	fp, r3
 800dabe:	4623      	mov	r3, r4
 800dac0:	eb1a 0303 	adds.w	r3, sl, r3
 800dac4:	623b      	str	r3, [r7, #32]
 800dac6:	462b      	mov	r3, r5
 800dac8:	eb4b 0303 	adc.w	r3, fp, r3
 800dacc:	627b      	str	r3, [r7, #36]	@ 0x24
 800dace:	f04f 0200 	mov.w	r2, #0
 800dad2:	f04f 0300 	mov.w	r3, #0
 800dad6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800dada:	4629      	mov	r1, r5
 800dadc:	028b      	lsls	r3, r1, #10
 800dade:	4621      	mov	r1, r4
 800dae0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800dae4:	4621      	mov	r1, r4
 800dae6:	028a      	lsls	r2, r1, #10
 800dae8:	4610      	mov	r0, r2
 800daea:	4619      	mov	r1, r3
 800daec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800daf0:	2200      	movs	r2, #0
 800daf2:	673b      	str	r3, [r7, #112]	@ 0x70
 800daf4:	677a      	str	r2, [r7, #116]	@ 0x74
 800daf6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800dafa:	f7f3 f8d5 	bl	8000ca8 <__aeabi_uldivmod>
 800dafe:	4602      	mov	r2, r0
 800db00:	460b      	mov	r3, r1
 800db02:	4613      	mov	r3, r2
 800db04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800db08:	4b41      	ldr	r3, [pc, #260]	@ (800dc10 <HAL_RCC_GetSysClockFreq+0x354>)
 800db0a:	685b      	ldr	r3, [r3, #4]
 800db0c:	0c1b      	lsrs	r3, r3, #16
 800db0e:	f003 0303 	and.w	r3, r3, #3
 800db12:	3301      	adds	r3, #1
 800db14:	005b      	lsls	r3, r3, #1
 800db16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800db1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800db1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800db22:	fbb2 f3f3 	udiv	r3, r2, r3
 800db26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800db2a:	e0eb      	b.n	800dd04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800db2c:	4b38      	ldr	r3, [pc, #224]	@ (800dc10 <HAL_RCC_GetSysClockFreq+0x354>)
 800db2e:	685b      	ldr	r3, [r3, #4]
 800db30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800db34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800db38:	4b35      	ldr	r3, [pc, #212]	@ (800dc10 <HAL_RCC_GetSysClockFreq+0x354>)
 800db3a:	685b      	ldr	r3, [r3, #4]
 800db3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800db40:	2b00      	cmp	r3, #0
 800db42:	d06b      	beq.n	800dc1c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800db44:	4b32      	ldr	r3, [pc, #200]	@ (800dc10 <HAL_RCC_GetSysClockFreq+0x354>)
 800db46:	685b      	ldr	r3, [r3, #4]
 800db48:	099b      	lsrs	r3, r3, #6
 800db4a:	2200      	movs	r2, #0
 800db4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800db4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800db50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800db52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db56:	663b      	str	r3, [r7, #96]	@ 0x60
 800db58:	2300      	movs	r3, #0
 800db5a:	667b      	str	r3, [r7, #100]	@ 0x64
 800db5c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800db60:	4622      	mov	r2, r4
 800db62:	462b      	mov	r3, r5
 800db64:	f04f 0000 	mov.w	r0, #0
 800db68:	f04f 0100 	mov.w	r1, #0
 800db6c:	0159      	lsls	r1, r3, #5
 800db6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800db72:	0150      	lsls	r0, r2, #5
 800db74:	4602      	mov	r2, r0
 800db76:	460b      	mov	r3, r1
 800db78:	4621      	mov	r1, r4
 800db7a:	1a51      	subs	r1, r2, r1
 800db7c:	61b9      	str	r1, [r7, #24]
 800db7e:	4629      	mov	r1, r5
 800db80:	eb63 0301 	sbc.w	r3, r3, r1
 800db84:	61fb      	str	r3, [r7, #28]
 800db86:	f04f 0200 	mov.w	r2, #0
 800db8a:	f04f 0300 	mov.w	r3, #0
 800db8e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800db92:	4659      	mov	r1, fp
 800db94:	018b      	lsls	r3, r1, #6
 800db96:	4651      	mov	r1, sl
 800db98:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800db9c:	4651      	mov	r1, sl
 800db9e:	018a      	lsls	r2, r1, #6
 800dba0:	4651      	mov	r1, sl
 800dba2:	ebb2 0801 	subs.w	r8, r2, r1
 800dba6:	4659      	mov	r1, fp
 800dba8:	eb63 0901 	sbc.w	r9, r3, r1
 800dbac:	f04f 0200 	mov.w	r2, #0
 800dbb0:	f04f 0300 	mov.w	r3, #0
 800dbb4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800dbb8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800dbbc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800dbc0:	4690      	mov	r8, r2
 800dbc2:	4699      	mov	r9, r3
 800dbc4:	4623      	mov	r3, r4
 800dbc6:	eb18 0303 	adds.w	r3, r8, r3
 800dbca:	613b      	str	r3, [r7, #16]
 800dbcc:	462b      	mov	r3, r5
 800dbce:	eb49 0303 	adc.w	r3, r9, r3
 800dbd2:	617b      	str	r3, [r7, #20]
 800dbd4:	f04f 0200 	mov.w	r2, #0
 800dbd8:	f04f 0300 	mov.w	r3, #0
 800dbdc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800dbe0:	4629      	mov	r1, r5
 800dbe2:	024b      	lsls	r3, r1, #9
 800dbe4:	4621      	mov	r1, r4
 800dbe6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800dbea:	4621      	mov	r1, r4
 800dbec:	024a      	lsls	r2, r1, #9
 800dbee:	4610      	mov	r0, r2
 800dbf0:	4619      	mov	r1, r3
 800dbf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dbfa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800dbfc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800dc00:	f7f3 f852 	bl	8000ca8 <__aeabi_uldivmod>
 800dc04:	4602      	mov	r2, r0
 800dc06:	460b      	mov	r3, r1
 800dc08:	4613      	mov	r3, r2
 800dc0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800dc0e:	e065      	b.n	800dcdc <HAL_RCC_GetSysClockFreq+0x420>
 800dc10:	40023800 	.word	0x40023800
 800dc14:	00f42400 	.word	0x00f42400
 800dc18:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dc1c:	4b3d      	ldr	r3, [pc, #244]	@ (800dd14 <HAL_RCC_GetSysClockFreq+0x458>)
 800dc1e:	685b      	ldr	r3, [r3, #4]
 800dc20:	099b      	lsrs	r3, r3, #6
 800dc22:	2200      	movs	r2, #0
 800dc24:	4618      	mov	r0, r3
 800dc26:	4611      	mov	r1, r2
 800dc28:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800dc2c:	653b      	str	r3, [r7, #80]	@ 0x50
 800dc2e:	2300      	movs	r3, #0
 800dc30:	657b      	str	r3, [r7, #84]	@ 0x54
 800dc32:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800dc36:	4642      	mov	r2, r8
 800dc38:	464b      	mov	r3, r9
 800dc3a:	f04f 0000 	mov.w	r0, #0
 800dc3e:	f04f 0100 	mov.w	r1, #0
 800dc42:	0159      	lsls	r1, r3, #5
 800dc44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800dc48:	0150      	lsls	r0, r2, #5
 800dc4a:	4602      	mov	r2, r0
 800dc4c:	460b      	mov	r3, r1
 800dc4e:	4641      	mov	r1, r8
 800dc50:	1a51      	subs	r1, r2, r1
 800dc52:	60b9      	str	r1, [r7, #8]
 800dc54:	4649      	mov	r1, r9
 800dc56:	eb63 0301 	sbc.w	r3, r3, r1
 800dc5a:	60fb      	str	r3, [r7, #12]
 800dc5c:	f04f 0200 	mov.w	r2, #0
 800dc60:	f04f 0300 	mov.w	r3, #0
 800dc64:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800dc68:	4659      	mov	r1, fp
 800dc6a:	018b      	lsls	r3, r1, #6
 800dc6c:	4651      	mov	r1, sl
 800dc6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800dc72:	4651      	mov	r1, sl
 800dc74:	018a      	lsls	r2, r1, #6
 800dc76:	4651      	mov	r1, sl
 800dc78:	1a54      	subs	r4, r2, r1
 800dc7a:	4659      	mov	r1, fp
 800dc7c:	eb63 0501 	sbc.w	r5, r3, r1
 800dc80:	f04f 0200 	mov.w	r2, #0
 800dc84:	f04f 0300 	mov.w	r3, #0
 800dc88:	00eb      	lsls	r3, r5, #3
 800dc8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800dc8e:	00e2      	lsls	r2, r4, #3
 800dc90:	4614      	mov	r4, r2
 800dc92:	461d      	mov	r5, r3
 800dc94:	4643      	mov	r3, r8
 800dc96:	18e3      	adds	r3, r4, r3
 800dc98:	603b      	str	r3, [r7, #0]
 800dc9a:	464b      	mov	r3, r9
 800dc9c:	eb45 0303 	adc.w	r3, r5, r3
 800dca0:	607b      	str	r3, [r7, #4]
 800dca2:	f04f 0200 	mov.w	r2, #0
 800dca6:	f04f 0300 	mov.w	r3, #0
 800dcaa:	e9d7 4500 	ldrd	r4, r5, [r7]
 800dcae:	4629      	mov	r1, r5
 800dcb0:	028b      	lsls	r3, r1, #10
 800dcb2:	4621      	mov	r1, r4
 800dcb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800dcb8:	4621      	mov	r1, r4
 800dcba:	028a      	lsls	r2, r1, #10
 800dcbc:	4610      	mov	r0, r2
 800dcbe:	4619      	mov	r1, r3
 800dcc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dcc8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800dcca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800dcce:	f7f2 ffeb 	bl	8000ca8 <__aeabi_uldivmod>
 800dcd2:	4602      	mov	r2, r0
 800dcd4:	460b      	mov	r3, r1
 800dcd6:	4613      	mov	r3, r2
 800dcd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800dcdc:	4b0d      	ldr	r3, [pc, #52]	@ (800dd14 <HAL_RCC_GetSysClockFreq+0x458>)
 800dcde:	685b      	ldr	r3, [r3, #4]
 800dce0:	0f1b      	lsrs	r3, r3, #28
 800dce2:	f003 0307 	and.w	r3, r3, #7
 800dce6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800dcea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800dcee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dcf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800dcf6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800dcfa:	e003      	b.n	800dd04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800dcfc:	4b06      	ldr	r3, [pc, #24]	@ (800dd18 <HAL_RCC_GetSysClockFreq+0x45c>)
 800dcfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800dd02:	bf00      	nop
    }
  }
  return sysclockfreq;
 800dd04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	37b8      	adds	r7, #184	@ 0xb8
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dd12:	bf00      	nop
 800dd14:	40023800 	.word	0x40023800
 800dd18:	00f42400 	.word	0x00f42400

0800dd1c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b086      	sub	sp, #24
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d101      	bne.n	800dd2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	e28d      	b.n	800e24a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	f003 0301 	and.w	r3, r3, #1
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	f000 8083 	beq.w	800de42 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800dd3c:	4b94      	ldr	r3, [pc, #592]	@ (800df90 <HAL_RCC_OscConfig+0x274>)
 800dd3e:	689b      	ldr	r3, [r3, #8]
 800dd40:	f003 030c 	and.w	r3, r3, #12
 800dd44:	2b04      	cmp	r3, #4
 800dd46:	d019      	beq.n	800dd7c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800dd48:	4b91      	ldr	r3, [pc, #580]	@ (800df90 <HAL_RCC_OscConfig+0x274>)
 800dd4a:	689b      	ldr	r3, [r3, #8]
 800dd4c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800dd50:	2b08      	cmp	r3, #8
 800dd52:	d106      	bne.n	800dd62 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800dd54:	4b8e      	ldr	r3, [pc, #568]	@ (800df90 <HAL_RCC_OscConfig+0x274>)
 800dd56:	685b      	ldr	r3, [r3, #4]
 800dd58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dd5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dd60:	d00c      	beq.n	800dd7c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800dd62:	4b8b      	ldr	r3, [pc, #556]	@ (800df90 <HAL_RCC_OscConfig+0x274>)
 800dd64:	689b      	ldr	r3, [r3, #8]
 800dd66:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800dd6a:	2b0c      	cmp	r3, #12
 800dd6c:	d112      	bne.n	800dd94 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800dd6e:	4b88      	ldr	r3, [pc, #544]	@ (800df90 <HAL_RCC_OscConfig+0x274>)
 800dd70:	685b      	ldr	r3, [r3, #4]
 800dd72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dd76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dd7a:	d10b      	bne.n	800dd94 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dd7c:	4b84      	ldr	r3, [pc, #528]	@ (800df90 <HAL_RCC_OscConfig+0x274>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d05b      	beq.n	800de40 <HAL_RCC_OscConfig+0x124>
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	685b      	ldr	r3, [r3, #4]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d157      	bne.n	800de40 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800dd90:	2301      	movs	r3, #1
 800dd92:	e25a      	b.n	800e24a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	685b      	ldr	r3, [r3, #4]
 800dd98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dd9c:	d106      	bne.n	800ddac <HAL_RCC_OscConfig+0x90>
 800dd9e:	4b7c      	ldr	r3, [pc, #496]	@ (800df90 <HAL_RCC_OscConfig+0x274>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	4a7b      	ldr	r2, [pc, #492]	@ (800df90 <HAL_RCC_OscConfig+0x274>)
 800dda4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dda8:	6013      	str	r3, [r2, #0]
 800ddaa:	e01d      	b.n	800dde8 <HAL_RCC_OscConfig+0xcc>
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	685b      	ldr	r3, [r3, #4]
 800ddb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ddb4:	d10c      	bne.n	800ddd0 <HAL_RCC_OscConfig+0xb4>
 800ddb6:	4b76      	ldr	r3, [pc, #472]	@ (800df90 <HAL_RCC_OscConfig+0x274>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	4a75      	ldr	r2, [pc, #468]	@ (800df90 <HAL_RCC_OscConfig+0x274>)
 800ddbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ddc0:	6013      	str	r3, [r2, #0]
 800ddc2:	4b73      	ldr	r3, [pc, #460]	@ (800df90 <HAL_RCC_OscConfig+0x274>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	4a72      	ldr	r2, [pc, #456]	@ (800df90 <HAL_RCC_OscConfig+0x274>)
 800ddc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ddcc:	6013      	str	r3, [r2, #0]
 800ddce:	e00b      	b.n	800dde8 <HAL_RCC_OscConfig+0xcc>
 800ddd0:	4b6f      	ldr	r3, [pc, #444]	@ (800df90 <HAL_RCC_OscConfig+0x274>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	4a6e      	ldr	r2, [pc, #440]	@ (800df90 <HAL_RCC_OscConfig+0x274>)
 800ddd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ddda:	6013      	str	r3, [r2, #0]
 800dddc:	4b6c      	ldr	r3, [pc, #432]	@ (800df90 <HAL_RCC_OscConfig+0x274>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	4a6b      	ldr	r2, [pc, #428]	@ (800df90 <HAL_RCC_OscConfig+0x274>)
 800dde2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800dde6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	685b      	ldr	r3, [r3, #4]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d013      	beq.n	800de18 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ddf0:	f7ff f878 	bl	800cee4 <HAL_GetTick>
 800ddf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ddf6:	e008      	b.n	800de0a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ddf8:	f7ff f874 	bl	800cee4 <HAL_GetTick>
 800ddfc:	4602      	mov	r2, r0
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	1ad3      	subs	r3, r2, r3
 800de02:	2b64      	cmp	r3, #100	@ 0x64
 800de04:	d901      	bls.n	800de0a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800de06:	2303      	movs	r3, #3
 800de08:	e21f      	b.n	800e24a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800de0a:	4b61      	ldr	r3, [pc, #388]	@ (800df90 <HAL_RCC_OscConfig+0x274>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800de12:	2b00      	cmp	r3, #0
 800de14:	d0f0      	beq.n	800ddf8 <HAL_RCC_OscConfig+0xdc>
 800de16:	e014      	b.n	800de42 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de18:	f7ff f864 	bl	800cee4 <HAL_GetTick>
 800de1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800de1e:	e008      	b.n	800de32 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800de20:	f7ff f860 	bl	800cee4 <HAL_GetTick>
 800de24:	4602      	mov	r2, r0
 800de26:	693b      	ldr	r3, [r7, #16]
 800de28:	1ad3      	subs	r3, r2, r3
 800de2a:	2b64      	cmp	r3, #100	@ 0x64
 800de2c:	d901      	bls.n	800de32 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800de2e:	2303      	movs	r3, #3
 800de30:	e20b      	b.n	800e24a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800de32:	4b57      	ldr	r3, [pc, #348]	@ (800df90 <HAL_RCC_OscConfig+0x274>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d1f0      	bne.n	800de20 <HAL_RCC_OscConfig+0x104>
 800de3e:	e000      	b.n	800de42 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800de40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	f003 0302 	and.w	r3, r3, #2
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d06f      	beq.n	800df2e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800de4e:	4b50      	ldr	r3, [pc, #320]	@ (800df90 <HAL_RCC_OscConfig+0x274>)
 800de50:	689b      	ldr	r3, [r3, #8]
 800de52:	f003 030c 	and.w	r3, r3, #12
 800de56:	2b00      	cmp	r3, #0
 800de58:	d017      	beq.n	800de8a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800de5a:	4b4d      	ldr	r3, [pc, #308]	@ (800df90 <HAL_RCC_OscConfig+0x274>)
 800de5c:	689b      	ldr	r3, [r3, #8]
 800de5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800de62:	2b08      	cmp	r3, #8
 800de64:	d105      	bne.n	800de72 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800de66:	4b4a      	ldr	r3, [pc, #296]	@ (800df90 <HAL_RCC_OscConfig+0x274>)
 800de68:	685b      	ldr	r3, [r3, #4]
 800de6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d00b      	beq.n	800de8a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800de72:	4b47      	ldr	r3, [pc, #284]	@ (800df90 <HAL_RCC_OscConfig+0x274>)
 800de74:	689b      	ldr	r3, [r3, #8]
 800de76:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800de7a:	2b0c      	cmp	r3, #12
 800de7c:	d11c      	bne.n	800deb8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800de7e:	4b44      	ldr	r3, [pc, #272]	@ (800df90 <HAL_RCC_OscConfig+0x274>)
 800de80:	685b      	ldr	r3, [r3, #4]
 800de82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800de86:	2b00      	cmp	r3, #0
 800de88:	d116      	bne.n	800deb8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800de8a:	4b41      	ldr	r3, [pc, #260]	@ (800df90 <HAL_RCC_OscConfig+0x274>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	f003 0302 	and.w	r3, r3, #2
 800de92:	2b00      	cmp	r3, #0
 800de94:	d005      	beq.n	800dea2 <HAL_RCC_OscConfig+0x186>
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	68db      	ldr	r3, [r3, #12]
 800de9a:	2b01      	cmp	r3, #1
 800de9c:	d001      	beq.n	800dea2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800de9e:	2301      	movs	r3, #1
 800dea0:	e1d3      	b.n	800e24a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dea2:	4b3b      	ldr	r3, [pc, #236]	@ (800df90 <HAL_RCC_OscConfig+0x274>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	691b      	ldr	r3, [r3, #16]
 800deae:	00db      	lsls	r3, r3, #3
 800deb0:	4937      	ldr	r1, [pc, #220]	@ (800df90 <HAL_RCC_OscConfig+0x274>)
 800deb2:	4313      	orrs	r3, r2
 800deb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800deb6:	e03a      	b.n	800df2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	68db      	ldr	r3, [r3, #12]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d020      	beq.n	800df02 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800dec0:	4b34      	ldr	r3, [pc, #208]	@ (800df94 <HAL_RCC_OscConfig+0x278>)
 800dec2:	2201      	movs	r2, #1
 800dec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dec6:	f7ff f80d 	bl	800cee4 <HAL_GetTick>
 800deca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800decc:	e008      	b.n	800dee0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800dece:	f7ff f809 	bl	800cee4 <HAL_GetTick>
 800ded2:	4602      	mov	r2, r0
 800ded4:	693b      	ldr	r3, [r7, #16]
 800ded6:	1ad3      	subs	r3, r2, r3
 800ded8:	2b02      	cmp	r3, #2
 800deda:	d901      	bls.n	800dee0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800dedc:	2303      	movs	r3, #3
 800dede:	e1b4      	b.n	800e24a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dee0:	4b2b      	ldr	r3, [pc, #172]	@ (800df90 <HAL_RCC_OscConfig+0x274>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	f003 0302 	and.w	r3, r3, #2
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d0f0      	beq.n	800dece <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800deec:	4b28      	ldr	r3, [pc, #160]	@ (800df90 <HAL_RCC_OscConfig+0x274>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	691b      	ldr	r3, [r3, #16]
 800def8:	00db      	lsls	r3, r3, #3
 800defa:	4925      	ldr	r1, [pc, #148]	@ (800df90 <HAL_RCC_OscConfig+0x274>)
 800defc:	4313      	orrs	r3, r2
 800defe:	600b      	str	r3, [r1, #0]
 800df00:	e015      	b.n	800df2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800df02:	4b24      	ldr	r3, [pc, #144]	@ (800df94 <HAL_RCC_OscConfig+0x278>)
 800df04:	2200      	movs	r2, #0
 800df06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df08:	f7fe ffec 	bl	800cee4 <HAL_GetTick>
 800df0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800df0e:	e008      	b.n	800df22 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800df10:	f7fe ffe8 	bl	800cee4 <HAL_GetTick>
 800df14:	4602      	mov	r2, r0
 800df16:	693b      	ldr	r3, [r7, #16]
 800df18:	1ad3      	subs	r3, r2, r3
 800df1a:	2b02      	cmp	r3, #2
 800df1c:	d901      	bls.n	800df22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800df1e:	2303      	movs	r3, #3
 800df20:	e193      	b.n	800e24a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800df22:	4b1b      	ldr	r3, [pc, #108]	@ (800df90 <HAL_RCC_OscConfig+0x274>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	f003 0302 	and.w	r3, r3, #2
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d1f0      	bne.n	800df10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	f003 0308 	and.w	r3, r3, #8
 800df36:	2b00      	cmp	r3, #0
 800df38:	d036      	beq.n	800dfa8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	695b      	ldr	r3, [r3, #20]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d016      	beq.n	800df70 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800df42:	4b15      	ldr	r3, [pc, #84]	@ (800df98 <HAL_RCC_OscConfig+0x27c>)
 800df44:	2201      	movs	r2, #1
 800df46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800df48:	f7fe ffcc 	bl	800cee4 <HAL_GetTick>
 800df4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800df4e:	e008      	b.n	800df62 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800df50:	f7fe ffc8 	bl	800cee4 <HAL_GetTick>
 800df54:	4602      	mov	r2, r0
 800df56:	693b      	ldr	r3, [r7, #16]
 800df58:	1ad3      	subs	r3, r2, r3
 800df5a:	2b02      	cmp	r3, #2
 800df5c:	d901      	bls.n	800df62 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800df5e:	2303      	movs	r3, #3
 800df60:	e173      	b.n	800e24a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800df62:	4b0b      	ldr	r3, [pc, #44]	@ (800df90 <HAL_RCC_OscConfig+0x274>)
 800df64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df66:	f003 0302 	and.w	r3, r3, #2
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d0f0      	beq.n	800df50 <HAL_RCC_OscConfig+0x234>
 800df6e:	e01b      	b.n	800dfa8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800df70:	4b09      	ldr	r3, [pc, #36]	@ (800df98 <HAL_RCC_OscConfig+0x27c>)
 800df72:	2200      	movs	r2, #0
 800df74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800df76:	f7fe ffb5 	bl	800cee4 <HAL_GetTick>
 800df7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800df7c:	e00e      	b.n	800df9c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800df7e:	f7fe ffb1 	bl	800cee4 <HAL_GetTick>
 800df82:	4602      	mov	r2, r0
 800df84:	693b      	ldr	r3, [r7, #16]
 800df86:	1ad3      	subs	r3, r2, r3
 800df88:	2b02      	cmp	r3, #2
 800df8a:	d907      	bls.n	800df9c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800df8c:	2303      	movs	r3, #3
 800df8e:	e15c      	b.n	800e24a <HAL_RCC_OscConfig+0x52e>
 800df90:	40023800 	.word	0x40023800
 800df94:	42470000 	.word	0x42470000
 800df98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800df9c:	4b8a      	ldr	r3, [pc, #552]	@ (800e1c8 <HAL_RCC_OscConfig+0x4ac>)
 800df9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dfa0:	f003 0302 	and.w	r3, r3, #2
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d1ea      	bne.n	800df7e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	f003 0304 	and.w	r3, r3, #4
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	f000 8097 	beq.w	800e0e4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800dfba:	4b83      	ldr	r3, [pc, #524]	@ (800e1c8 <HAL_RCC_OscConfig+0x4ac>)
 800dfbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d10f      	bne.n	800dfe6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	60bb      	str	r3, [r7, #8]
 800dfca:	4b7f      	ldr	r3, [pc, #508]	@ (800e1c8 <HAL_RCC_OscConfig+0x4ac>)
 800dfcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfce:	4a7e      	ldr	r2, [pc, #504]	@ (800e1c8 <HAL_RCC_OscConfig+0x4ac>)
 800dfd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dfd4:	6413      	str	r3, [r2, #64]	@ 0x40
 800dfd6:	4b7c      	ldr	r3, [pc, #496]	@ (800e1c8 <HAL_RCC_OscConfig+0x4ac>)
 800dfd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dfde:	60bb      	str	r3, [r7, #8]
 800dfe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dfe6:	4b79      	ldr	r3, [pc, #484]	@ (800e1cc <HAL_RCC_OscConfig+0x4b0>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d118      	bne.n	800e024 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800dff2:	4b76      	ldr	r3, [pc, #472]	@ (800e1cc <HAL_RCC_OscConfig+0x4b0>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	4a75      	ldr	r2, [pc, #468]	@ (800e1cc <HAL_RCC_OscConfig+0x4b0>)
 800dff8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800dffe:	f7fe ff71 	bl	800cee4 <HAL_GetTick>
 800e002:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e004:	e008      	b.n	800e018 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e006:	f7fe ff6d 	bl	800cee4 <HAL_GetTick>
 800e00a:	4602      	mov	r2, r0
 800e00c:	693b      	ldr	r3, [r7, #16]
 800e00e:	1ad3      	subs	r3, r2, r3
 800e010:	2b02      	cmp	r3, #2
 800e012:	d901      	bls.n	800e018 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800e014:	2303      	movs	r3, #3
 800e016:	e118      	b.n	800e24a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e018:	4b6c      	ldr	r3, [pc, #432]	@ (800e1cc <HAL_RCC_OscConfig+0x4b0>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e020:	2b00      	cmp	r3, #0
 800e022:	d0f0      	beq.n	800e006 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	689b      	ldr	r3, [r3, #8]
 800e028:	2b01      	cmp	r3, #1
 800e02a:	d106      	bne.n	800e03a <HAL_RCC_OscConfig+0x31e>
 800e02c:	4b66      	ldr	r3, [pc, #408]	@ (800e1c8 <HAL_RCC_OscConfig+0x4ac>)
 800e02e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e030:	4a65      	ldr	r2, [pc, #404]	@ (800e1c8 <HAL_RCC_OscConfig+0x4ac>)
 800e032:	f043 0301 	orr.w	r3, r3, #1
 800e036:	6713      	str	r3, [r2, #112]	@ 0x70
 800e038:	e01c      	b.n	800e074 <HAL_RCC_OscConfig+0x358>
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	689b      	ldr	r3, [r3, #8]
 800e03e:	2b05      	cmp	r3, #5
 800e040:	d10c      	bne.n	800e05c <HAL_RCC_OscConfig+0x340>
 800e042:	4b61      	ldr	r3, [pc, #388]	@ (800e1c8 <HAL_RCC_OscConfig+0x4ac>)
 800e044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e046:	4a60      	ldr	r2, [pc, #384]	@ (800e1c8 <HAL_RCC_OscConfig+0x4ac>)
 800e048:	f043 0304 	orr.w	r3, r3, #4
 800e04c:	6713      	str	r3, [r2, #112]	@ 0x70
 800e04e:	4b5e      	ldr	r3, [pc, #376]	@ (800e1c8 <HAL_RCC_OscConfig+0x4ac>)
 800e050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e052:	4a5d      	ldr	r2, [pc, #372]	@ (800e1c8 <HAL_RCC_OscConfig+0x4ac>)
 800e054:	f043 0301 	orr.w	r3, r3, #1
 800e058:	6713      	str	r3, [r2, #112]	@ 0x70
 800e05a:	e00b      	b.n	800e074 <HAL_RCC_OscConfig+0x358>
 800e05c:	4b5a      	ldr	r3, [pc, #360]	@ (800e1c8 <HAL_RCC_OscConfig+0x4ac>)
 800e05e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e060:	4a59      	ldr	r2, [pc, #356]	@ (800e1c8 <HAL_RCC_OscConfig+0x4ac>)
 800e062:	f023 0301 	bic.w	r3, r3, #1
 800e066:	6713      	str	r3, [r2, #112]	@ 0x70
 800e068:	4b57      	ldr	r3, [pc, #348]	@ (800e1c8 <HAL_RCC_OscConfig+0x4ac>)
 800e06a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e06c:	4a56      	ldr	r2, [pc, #344]	@ (800e1c8 <HAL_RCC_OscConfig+0x4ac>)
 800e06e:	f023 0304 	bic.w	r3, r3, #4
 800e072:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	689b      	ldr	r3, [r3, #8]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d015      	beq.n	800e0a8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e07c:	f7fe ff32 	bl	800cee4 <HAL_GetTick>
 800e080:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e082:	e00a      	b.n	800e09a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e084:	f7fe ff2e 	bl	800cee4 <HAL_GetTick>
 800e088:	4602      	mov	r2, r0
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	1ad3      	subs	r3, r2, r3
 800e08e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e092:	4293      	cmp	r3, r2
 800e094:	d901      	bls.n	800e09a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800e096:	2303      	movs	r3, #3
 800e098:	e0d7      	b.n	800e24a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e09a:	4b4b      	ldr	r3, [pc, #300]	@ (800e1c8 <HAL_RCC_OscConfig+0x4ac>)
 800e09c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e09e:	f003 0302 	and.w	r3, r3, #2
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d0ee      	beq.n	800e084 <HAL_RCC_OscConfig+0x368>
 800e0a6:	e014      	b.n	800e0d2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e0a8:	f7fe ff1c 	bl	800cee4 <HAL_GetTick>
 800e0ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e0ae:	e00a      	b.n	800e0c6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e0b0:	f7fe ff18 	bl	800cee4 <HAL_GetTick>
 800e0b4:	4602      	mov	r2, r0
 800e0b6:	693b      	ldr	r3, [r7, #16]
 800e0b8:	1ad3      	subs	r3, r2, r3
 800e0ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e0be:	4293      	cmp	r3, r2
 800e0c0:	d901      	bls.n	800e0c6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800e0c2:	2303      	movs	r3, #3
 800e0c4:	e0c1      	b.n	800e24a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e0c6:	4b40      	ldr	r3, [pc, #256]	@ (800e1c8 <HAL_RCC_OscConfig+0x4ac>)
 800e0c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e0ca:	f003 0302 	and.w	r3, r3, #2
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d1ee      	bne.n	800e0b0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e0d2:	7dfb      	ldrb	r3, [r7, #23]
 800e0d4:	2b01      	cmp	r3, #1
 800e0d6:	d105      	bne.n	800e0e4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e0d8:	4b3b      	ldr	r3, [pc, #236]	@ (800e1c8 <HAL_RCC_OscConfig+0x4ac>)
 800e0da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0dc:	4a3a      	ldr	r2, [pc, #232]	@ (800e1c8 <HAL_RCC_OscConfig+0x4ac>)
 800e0de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e0e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	699b      	ldr	r3, [r3, #24]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	f000 80ad 	beq.w	800e248 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e0ee:	4b36      	ldr	r3, [pc, #216]	@ (800e1c8 <HAL_RCC_OscConfig+0x4ac>)
 800e0f0:	689b      	ldr	r3, [r3, #8]
 800e0f2:	f003 030c 	and.w	r3, r3, #12
 800e0f6:	2b08      	cmp	r3, #8
 800e0f8:	d060      	beq.n	800e1bc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	699b      	ldr	r3, [r3, #24]
 800e0fe:	2b02      	cmp	r3, #2
 800e100:	d145      	bne.n	800e18e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e102:	4b33      	ldr	r3, [pc, #204]	@ (800e1d0 <HAL_RCC_OscConfig+0x4b4>)
 800e104:	2200      	movs	r2, #0
 800e106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e108:	f7fe feec 	bl	800cee4 <HAL_GetTick>
 800e10c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e10e:	e008      	b.n	800e122 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e110:	f7fe fee8 	bl	800cee4 <HAL_GetTick>
 800e114:	4602      	mov	r2, r0
 800e116:	693b      	ldr	r3, [r7, #16]
 800e118:	1ad3      	subs	r3, r2, r3
 800e11a:	2b02      	cmp	r3, #2
 800e11c:	d901      	bls.n	800e122 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800e11e:	2303      	movs	r3, #3
 800e120:	e093      	b.n	800e24a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e122:	4b29      	ldr	r3, [pc, #164]	@ (800e1c8 <HAL_RCC_OscConfig+0x4ac>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d1f0      	bne.n	800e110 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	69da      	ldr	r2, [r3, #28]
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6a1b      	ldr	r3, [r3, #32]
 800e136:	431a      	orrs	r2, r3
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e13c:	019b      	lsls	r3, r3, #6
 800e13e:	431a      	orrs	r2, r3
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e144:	085b      	lsrs	r3, r3, #1
 800e146:	3b01      	subs	r3, #1
 800e148:	041b      	lsls	r3, r3, #16
 800e14a:	431a      	orrs	r2, r3
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e150:	061b      	lsls	r3, r3, #24
 800e152:	431a      	orrs	r2, r3
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e158:	071b      	lsls	r3, r3, #28
 800e15a:	491b      	ldr	r1, [pc, #108]	@ (800e1c8 <HAL_RCC_OscConfig+0x4ac>)
 800e15c:	4313      	orrs	r3, r2
 800e15e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e160:	4b1b      	ldr	r3, [pc, #108]	@ (800e1d0 <HAL_RCC_OscConfig+0x4b4>)
 800e162:	2201      	movs	r2, #1
 800e164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e166:	f7fe febd 	bl	800cee4 <HAL_GetTick>
 800e16a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e16c:	e008      	b.n	800e180 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e16e:	f7fe feb9 	bl	800cee4 <HAL_GetTick>
 800e172:	4602      	mov	r2, r0
 800e174:	693b      	ldr	r3, [r7, #16]
 800e176:	1ad3      	subs	r3, r2, r3
 800e178:	2b02      	cmp	r3, #2
 800e17a:	d901      	bls.n	800e180 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800e17c:	2303      	movs	r3, #3
 800e17e:	e064      	b.n	800e24a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e180:	4b11      	ldr	r3, [pc, #68]	@ (800e1c8 <HAL_RCC_OscConfig+0x4ac>)
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d0f0      	beq.n	800e16e <HAL_RCC_OscConfig+0x452>
 800e18c:	e05c      	b.n	800e248 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e18e:	4b10      	ldr	r3, [pc, #64]	@ (800e1d0 <HAL_RCC_OscConfig+0x4b4>)
 800e190:	2200      	movs	r2, #0
 800e192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e194:	f7fe fea6 	bl	800cee4 <HAL_GetTick>
 800e198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e19a:	e008      	b.n	800e1ae <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e19c:	f7fe fea2 	bl	800cee4 <HAL_GetTick>
 800e1a0:	4602      	mov	r2, r0
 800e1a2:	693b      	ldr	r3, [r7, #16]
 800e1a4:	1ad3      	subs	r3, r2, r3
 800e1a6:	2b02      	cmp	r3, #2
 800e1a8:	d901      	bls.n	800e1ae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800e1aa:	2303      	movs	r3, #3
 800e1ac:	e04d      	b.n	800e24a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e1ae:	4b06      	ldr	r3, [pc, #24]	@ (800e1c8 <HAL_RCC_OscConfig+0x4ac>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d1f0      	bne.n	800e19c <HAL_RCC_OscConfig+0x480>
 800e1ba:	e045      	b.n	800e248 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	699b      	ldr	r3, [r3, #24]
 800e1c0:	2b01      	cmp	r3, #1
 800e1c2:	d107      	bne.n	800e1d4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	e040      	b.n	800e24a <HAL_RCC_OscConfig+0x52e>
 800e1c8:	40023800 	.word	0x40023800
 800e1cc:	40007000 	.word	0x40007000
 800e1d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800e1d4:	4b1f      	ldr	r3, [pc, #124]	@ (800e254 <HAL_RCC_OscConfig+0x538>)
 800e1d6:	685b      	ldr	r3, [r3, #4]
 800e1d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	699b      	ldr	r3, [r3, #24]
 800e1de:	2b01      	cmp	r3, #1
 800e1e0:	d030      	beq.n	800e244 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e1ec:	429a      	cmp	r2, r3
 800e1ee:	d129      	bne.n	800e244 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e1fa:	429a      	cmp	r2, r3
 800e1fc:	d122      	bne.n	800e244 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e1fe:	68fa      	ldr	r2, [r7, #12]
 800e200:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800e204:	4013      	ands	r3, r2
 800e206:	687a      	ldr	r2, [r7, #4]
 800e208:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800e20a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e20c:	4293      	cmp	r3, r2
 800e20e:	d119      	bne.n	800e244 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e21a:	085b      	lsrs	r3, r3, #1
 800e21c:	3b01      	subs	r3, #1
 800e21e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e220:	429a      	cmp	r2, r3
 800e222:	d10f      	bne.n	800e244 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e22e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e230:	429a      	cmp	r2, r3
 800e232:	d107      	bne.n	800e244 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e23e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800e240:	429a      	cmp	r2, r3
 800e242:	d001      	beq.n	800e248 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800e244:	2301      	movs	r3, #1
 800e246:	e000      	b.n	800e24a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800e248:	2300      	movs	r3, #0
}
 800e24a:	4618      	mov	r0, r3
 800e24c:	3718      	adds	r7, #24
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}
 800e252:	bf00      	nop
 800e254:	40023800 	.word	0x40023800

0800e258 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b082      	sub	sp, #8
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d101      	bne.n	800e26a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e266:	2301      	movs	r3, #1
 800e268:	e07b      	b.n	800e362 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d108      	bne.n	800e284 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	685b      	ldr	r3, [r3, #4]
 800e276:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e27a:	d009      	beq.n	800e290 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2200      	movs	r2, #0
 800e280:	61da      	str	r2, [r3, #28]
 800e282:	e005      	b.n	800e290 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2200      	movs	r2, #0
 800e288:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2200      	movs	r2, #0
 800e28e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2200      	movs	r2, #0
 800e294:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800e29c:	b2db      	uxtb	r3, r3
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d106      	bne.n	800e2b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f7fe fb90 	bl	800c9d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2202      	movs	r2, #2
 800e2b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	681a      	ldr	r2, [r3, #0]
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e2c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	685b      	ldr	r3, [r3, #4]
 800e2cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	689b      	ldr	r3, [r3, #8]
 800e2d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800e2d8:	431a      	orrs	r2, r3
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	68db      	ldr	r3, [r3, #12]
 800e2de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e2e2:	431a      	orrs	r2, r3
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	691b      	ldr	r3, [r3, #16]
 800e2e8:	f003 0302 	and.w	r3, r3, #2
 800e2ec:	431a      	orrs	r2, r3
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	695b      	ldr	r3, [r3, #20]
 800e2f2:	f003 0301 	and.w	r3, r3, #1
 800e2f6:	431a      	orrs	r2, r3
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	699b      	ldr	r3, [r3, #24]
 800e2fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e300:	431a      	orrs	r2, r3
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	69db      	ldr	r3, [r3, #28]
 800e306:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e30a:	431a      	orrs	r2, r3
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6a1b      	ldr	r3, [r3, #32]
 800e310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e314:	ea42 0103 	orr.w	r1, r2, r3
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e31c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	430a      	orrs	r2, r1
 800e326:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	699b      	ldr	r3, [r3, #24]
 800e32c:	0c1b      	lsrs	r3, r3, #16
 800e32e:	f003 0104 	and.w	r1, r3, #4
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e336:	f003 0210 	and.w	r2, r3, #16
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	430a      	orrs	r2, r1
 800e340:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	69da      	ldr	r2, [r3, #28]
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e350:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2200      	movs	r2, #0
 800e356:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2201      	movs	r2, #1
 800e35c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800e360:	2300      	movs	r3, #0
}
 800e362:	4618      	mov	r0, r3
 800e364:	3708      	adds	r7, #8
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}

0800e36a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e36a:	b580      	push	{r7, lr}
 800e36c:	b088      	sub	sp, #32
 800e36e:	af00      	add	r7, sp, #0
 800e370:	60f8      	str	r0, [r7, #12]
 800e372:	60b9      	str	r1, [r7, #8]
 800e374:	603b      	str	r3, [r7, #0]
 800e376:	4613      	mov	r3, r2
 800e378:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e37a:	2300      	movs	r3, #0
 800e37c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800e384:	2b01      	cmp	r3, #1
 800e386:	d101      	bne.n	800e38c <HAL_SPI_Transmit+0x22>
 800e388:	2302      	movs	r3, #2
 800e38a:	e126      	b.n	800e5da <HAL_SPI_Transmit+0x270>
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	2201      	movs	r2, #1
 800e390:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e394:	f7fe fda6 	bl	800cee4 <HAL_GetTick>
 800e398:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e39a:	88fb      	ldrh	r3, [r7, #6]
 800e39c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800e3a4:	b2db      	uxtb	r3, r3
 800e3a6:	2b01      	cmp	r3, #1
 800e3a8:	d002      	beq.n	800e3b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e3aa:	2302      	movs	r3, #2
 800e3ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e3ae:	e10b      	b.n	800e5c8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e3b0:	68bb      	ldr	r3, [r7, #8]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d002      	beq.n	800e3bc <HAL_SPI_Transmit+0x52>
 800e3b6:	88fb      	ldrh	r3, [r7, #6]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d102      	bne.n	800e3c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e3bc:	2301      	movs	r3, #1
 800e3be:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e3c0:	e102      	b.n	800e5c8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	2203      	movs	r2, #3
 800e3c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	68ba      	ldr	r2, [r7, #8]
 800e3d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	88fa      	ldrh	r2, [r7, #6]
 800e3da:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	88fa      	ldrh	r2, [r7, #6]
 800e3e0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	689b      	ldr	r3, [r3, #8]
 800e404:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e408:	d10f      	bne.n	800e42a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	681a      	ldr	r2, [r3, #0]
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e418:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	681a      	ldr	r2, [r3, #0]
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e428:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e434:	2b40      	cmp	r3, #64	@ 0x40
 800e436:	d007      	beq.n	800e448 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	681a      	ldr	r2, [r3, #0]
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e446:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	68db      	ldr	r3, [r3, #12]
 800e44c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e450:	d14b      	bne.n	800e4ea <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	685b      	ldr	r3, [r3, #4]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d002      	beq.n	800e460 <HAL_SPI_Transmit+0xf6>
 800e45a:	8afb      	ldrh	r3, [r7, #22]
 800e45c:	2b01      	cmp	r3, #1
 800e45e:	d13e      	bne.n	800e4de <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e464:	881a      	ldrh	r2, [r3, #0]
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e470:	1c9a      	adds	r2, r3, #2
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e47a:	b29b      	uxth	r3, r3
 800e47c:	3b01      	subs	r3, #1
 800e47e:	b29a      	uxth	r2, r3
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e484:	e02b      	b.n	800e4de <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	689b      	ldr	r3, [r3, #8]
 800e48c:	f003 0302 	and.w	r3, r3, #2
 800e490:	2b02      	cmp	r3, #2
 800e492:	d112      	bne.n	800e4ba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e498:	881a      	ldrh	r2, [r3, #0]
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e4a4:	1c9a      	adds	r2, r3, #2
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e4ae:	b29b      	uxth	r3, r3
 800e4b0:	3b01      	subs	r3, #1
 800e4b2:	b29a      	uxth	r2, r3
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	86da      	strh	r2, [r3, #54]	@ 0x36
 800e4b8:	e011      	b.n	800e4de <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e4ba:	f7fe fd13 	bl	800cee4 <HAL_GetTick>
 800e4be:	4602      	mov	r2, r0
 800e4c0:	69bb      	ldr	r3, [r7, #24]
 800e4c2:	1ad3      	subs	r3, r2, r3
 800e4c4:	683a      	ldr	r2, [r7, #0]
 800e4c6:	429a      	cmp	r2, r3
 800e4c8:	d803      	bhi.n	800e4d2 <HAL_SPI_Transmit+0x168>
 800e4ca:	683b      	ldr	r3, [r7, #0]
 800e4cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e4d0:	d102      	bne.n	800e4d8 <HAL_SPI_Transmit+0x16e>
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d102      	bne.n	800e4de <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800e4d8:	2303      	movs	r3, #3
 800e4da:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e4dc:	e074      	b.n	800e5c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e4e2:	b29b      	uxth	r3, r3
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d1ce      	bne.n	800e486 <HAL_SPI_Transmit+0x11c>
 800e4e8:	e04c      	b.n	800e584 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	685b      	ldr	r3, [r3, #4]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d002      	beq.n	800e4f8 <HAL_SPI_Transmit+0x18e>
 800e4f2:	8afb      	ldrh	r3, [r7, #22]
 800e4f4:	2b01      	cmp	r3, #1
 800e4f6:	d140      	bne.n	800e57a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	330c      	adds	r3, #12
 800e502:	7812      	ldrb	r2, [r2, #0]
 800e504:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e50a:	1c5a      	adds	r2, r3, #1
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e514:	b29b      	uxth	r3, r3
 800e516:	3b01      	subs	r3, #1
 800e518:	b29a      	uxth	r2, r3
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e51e:	e02c      	b.n	800e57a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	689b      	ldr	r3, [r3, #8]
 800e526:	f003 0302 	and.w	r3, r3, #2
 800e52a:	2b02      	cmp	r3, #2
 800e52c:	d113      	bne.n	800e556 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	330c      	adds	r3, #12
 800e538:	7812      	ldrb	r2, [r2, #0]
 800e53a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e540:	1c5a      	adds	r2, r3, #1
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e54a:	b29b      	uxth	r3, r3
 800e54c:	3b01      	subs	r3, #1
 800e54e:	b29a      	uxth	r2, r3
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	86da      	strh	r2, [r3, #54]	@ 0x36
 800e554:	e011      	b.n	800e57a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e556:	f7fe fcc5 	bl	800cee4 <HAL_GetTick>
 800e55a:	4602      	mov	r2, r0
 800e55c:	69bb      	ldr	r3, [r7, #24]
 800e55e:	1ad3      	subs	r3, r2, r3
 800e560:	683a      	ldr	r2, [r7, #0]
 800e562:	429a      	cmp	r2, r3
 800e564:	d803      	bhi.n	800e56e <HAL_SPI_Transmit+0x204>
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e56c:	d102      	bne.n	800e574 <HAL_SPI_Transmit+0x20a>
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d102      	bne.n	800e57a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800e574:	2303      	movs	r3, #3
 800e576:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e578:	e026      	b.n	800e5c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e57e:	b29b      	uxth	r3, r3
 800e580:	2b00      	cmp	r3, #0
 800e582:	d1cd      	bne.n	800e520 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e584:	69ba      	ldr	r2, [r7, #24]
 800e586:	6839      	ldr	r1, [r7, #0]
 800e588:	68f8      	ldr	r0, [r7, #12]
 800e58a:	f000 fbcb 	bl	800ed24 <SPI_EndRxTxTransaction>
 800e58e:	4603      	mov	r3, r0
 800e590:	2b00      	cmp	r3, #0
 800e592:	d002      	beq.n	800e59a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	2220      	movs	r2, #32
 800e598:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	689b      	ldr	r3, [r3, #8]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d10a      	bne.n	800e5b8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	613b      	str	r3, [r7, #16]
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	68db      	ldr	r3, [r3, #12]
 800e5ac:	613b      	str	r3, [r7, #16]
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	689b      	ldr	r3, [r3, #8]
 800e5b4:	613b      	str	r3, [r7, #16]
 800e5b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d002      	beq.n	800e5c6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800e5c0:	2301      	movs	r3, #1
 800e5c2:	77fb      	strb	r3, [r7, #31]
 800e5c4:	e000      	b.n	800e5c8 <HAL_SPI_Transmit+0x25e>
  }

error:
 800e5c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	2201      	movs	r2, #1
 800e5cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800e5d8:	7ffb      	ldrb	r3, [r7, #31]
}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	3720      	adds	r7, #32
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}

0800e5e2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e5e2:	b580      	push	{r7, lr}
 800e5e4:	b088      	sub	sp, #32
 800e5e6:	af02      	add	r7, sp, #8
 800e5e8:	60f8      	str	r0, [r7, #12]
 800e5ea:	60b9      	str	r1, [r7, #8]
 800e5ec:	603b      	str	r3, [r7, #0]
 800e5ee:	4613      	mov	r3, r2
 800e5f0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	685b      	ldr	r3, [r3, #4]
 800e5fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e5fe:	d112      	bne.n	800e626 <HAL_SPI_Receive+0x44>
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	689b      	ldr	r3, [r3, #8]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d10e      	bne.n	800e626 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	2204      	movs	r2, #4
 800e60c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e610:	88fa      	ldrh	r2, [r7, #6]
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	9300      	str	r3, [sp, #0]
 800e616:	4613      	mov	r3, r2
 800e618:	68ba      	ldr	r2, [r7, #8]
 800e61a:	68b9      	ldr	r1, [r7, #8]
 800e61c:	68f8      	ldr	r0, [r7, #12]
 800e61e:	f000 f8f1 	bl	800e804 <HAL_SPI_TransmitReceive>
 800e622:	4603      	mov	r3, r0
 800e624:	e0ea      	b.n	800e7fc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800e62c:	2b01      	cmp	r3, #1
 800e62e:	d101      	bne.n	800e634 <HAL_SPI_Receive+0x52>
 800e630:	2302      	movs	r3, #2
 800e632:	e0e3      	b.n	800e7fc <HAL_SPI_Receive+0x21a>
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	2201      	movs	r2, #1
 800e638:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e63c:	f7fe fc52 	bl	800cee4 <HAL_GetTick>
 800e640:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800e648:	b2db      	uxtb	r3, r3
 800e64a:	2b01      	cmp	r3, #1
 800e64c:	d002      	beq.n	800e654 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e64e:	2302      	movs	r3, #2
 800e650:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e652:	e0ca      	b.n	800e7ea <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800e654:	68bb      	ldr	r3, [r7, #8]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d002      	beq.n	800e660 <HAL_SPI_Receive+0x7e>
 800e65a:	88fb      	ldrh	r3, [r7, #6]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d102      	bne.n	800e666 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e660:	2301      	movs	r3, #1
 800e662:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e664:	e0c1      	b.n	800e7ea <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	2204      	movs	r2, #4
 800e66a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	2200      	movs	r2, #0
 800e672:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	68ba      	ldr	r2, [r7, #8]
 800e678:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	88fa      	ldrh	r2, [r7, #6]
 800e67e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	88fa      	ldrh	r2, [r7, #6]
 800e684:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	2200      	movs	r2, #0
 800e68a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	2200      	movs	r2, #0
 800e690:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	2200      	movs	r2, #0
 800e696:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	2200      	movs	r2, #0
 800e69c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	689b      	ldr	r3, [r3, #8]
 800e6a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e6ac:	d10f      	bne.n	800e6ce <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	681a      	ldr	r2, [r3, #0]
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e6bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	681a      	ldr	r2, [r3, #0]
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800e6cc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e6d8:	2b40      	cmp	r3, #64	@ 0x40
 800e6da:	d007      	beq.n	800e6ec <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	681a      	ldr	r2, [r3, #0]
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e6ea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	68db      	ldr	r3, [r3, #12]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d162      	bne.n	800e7ba <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e6f4:	e02e      	b.n	800e754 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	689b      	ldr	r3, [r3, #8]
 800e6fc:	f003 0301 	and.w	r3, r3, #1
 800e700:	2b01      	cmp	r3, #1
 800e702:	d115      	bne.n	800e730 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	f103 020c 	add.w	r2, r3, #12
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e710:	7812      	ldrb	r2, [r2, #0]
 800e712:	b2d2      	uxtb	r2, r2
 800e714:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e71a:	1c5a      	adds	r2, r3, #1
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e724:	b29b      	uxth	r3, r3
 800e726:	3b01      	subs	r3, #1
 800e728:	b29a      	uxth	r2, r3
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e72e:	e011      	b.n	800e754 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e730:	f7fe fbd8 	bl	800cee4 <HAL_GetTick>
 800e734:	4602      	mov	r2, r0
 800e736:	693b      	ldr	r3, [r7, #16]
 800e738:	1ad3      	subs	r3, r2, r3
 800e73a:	683a      	ldr	r2, [r7, #0]
 800e73c:	429a      	cmp	r2, r3
 800e73e:	d803      	bhi.n	800e748 <HAL_SPI_Receive+0x166>
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e746:	d102      	bne.n	800e74e <HAL_SPI_Receive+0x16c>
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d102      	bne.n	800e754 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800e74e:	2303      	movs	r3, #3
 800e750:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e752:	e04a      	b.n	800e7ea <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e758:	b29b      	uxth	r3, r3
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d1cb      	bne.n	800e6f6 <HAL_SPI_Receive+0x114>
 800e75e:	e031      	b.n	800e7c4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	689b      	ldr	r3, [r3, #8]
 800e766:	f003 0301 	and.w	r3, r3, #1
 800e76a:	2b01      	cmp	r3, #1
 800e76c:	d113      	bne.n	800e796 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	68da      	ldr	r2, [r3, #12]
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e778:	b292      	uxth	r2, r2
 800e77a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e780:	1c9a      	adds	r2, r3, #2
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e78a:	b29b      	uxth	r3, r3
 800e78c:	3b01      	subs	r3, #1
 800e78e:	b29a      	uxth	r2, r3
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e794:	e011      	b.n	800e7ba <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e796:	f7fe fba5 	bl	800cee4 <HAL_GetTick>
 800e79a:	4602      	mov	r2, r0
 800e79c:	693b      	ldr	r3, [r7, #16]
 800e79e:	1ad3      	subs	r3, r2, r3
 800e7a0:	683a      	ldr	r2, [r7, #0]
 800e7a2:	429a      	cmp	r2, r3
 800e7a4:	d803      	bhi.n	800e7ae <HAL_SPI_Receive+0x1cc>
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e7ac:	d102      	bne.n	800e7b4 <HAL_SPI_Receive+0x1d2>
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d102      	bne.n	800e7ba <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800e7b4:	2303      	movs	r3, #3
 800e7b6:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e7b8:	e017      	b.n	800e7ea <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e7be:	b29b      	uxth	r3, r3
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d1cd      	bne.n	800e760 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e7c4:	693a      	ldr	r2, [r7, #16]
 800e7c6:	6839      	ldr	r1, [r7, #0]
 800e7c8:	68f8      	ldr	r0, [r7, #12]
 800e7ca:	f000 fa45 	bl	800ec58 <SPI_EndRxTransaction>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d002      	beq.n	800e7da <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	2220      	movs	r2, #32
 800e7d8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d002      	beq.n	800e7e8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	75fb      	strb	r3, [r7, #23]
 800e7e6:	e000      	b.n	800e7ea <HAL_SPI_Receive+0x208>
  }

error :
 800e7e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	2201      	movs	r2, #1
 800e7ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800e7fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	3718      	adds	r7, #24
 800e800:	46bd      	mov	sp, r7
 800e802:	bd80      	pop	{r7, pc}

0800e804 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b08c      	sub	sp, #48	@ 0x30
 800e808:	af00      	add	r7, sp, #0
 800e80a:	60f8      	str	r0, [r7, #12]
 800e80c:	60b9      	str	r1, [r7, #8]
 800e80e:	607a      	str	r2, [r7, #4]
 800e810:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e812:	2301      	movs	r3, #1
 800e814:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e816:	2300      	movs	r3, #0
 800e818:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800e822:	2b01      	cmp	r3, #1
 800e824:	d101      	bne.n	800e82a <HAL_SPI_TransmitReceive+0x26>
 800e826:	2302      	movs	r3, #2
 800e828:	e18a      	b.n	800eb40 <HAL_SPI_TransmitReceive+0x33c>
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	2201      	movs	r2, #1
 800e82e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e832:	f7fe fb57 	bl	800cee4 <HAL_GetTick>
 800e836:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800e83e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	685b      	ldr	r3, [r3, #4]
 800e846:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800e848:	887b      	ldrh	r3, [r7, #2]
 800e84a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e84c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e850:	2b01      	cmp	r3, #1
 800e852:	d00f      	beq.n	800e874 <HAL_SPI_TransmitReceive+0x70>
 800e854:	69fb      	ldr	r3, [r7, #28]
 800e856:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e85a:	d107      	bne.n	800e86c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	689b      	ldr	r3, [r3, #8]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d103      	bne.n	800e86c <HAL_SPI_TransmitReceive+0x68>
 800e864:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e868:	2b04      	cmp	r3, #4
 800e86a:	d003      	beq.n	800e874 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800e86c:	2302      	movs	r3, #2
 800e86e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800e872:	e15b      	b.n	800eb2c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d005      	beq.n	800e886 <HAL_SPI_TransmitReceive+0x82>
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d002      	beq.n	800e886 <HAL_SPI_TransmitReceive+0x82>
 800e880:	887b      	ldrh	r3, [r7, #2]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d103      	bne.n	800e88e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800e886:	2301      	movs	r3, #1
 800e888:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800e88c:	e14e      	b.n	800eb2c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800e894:	b2db      	uxtb	r3, r3
 800e896:	2b04      	cmp	r3, #4
 800e898:	d003      	beq.n	800e8a2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	2205      	movs	r2, #5
 800e89e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	687a      	ldr	r2, [r7, #4]
 800e8ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	887a      	ldrh	r2, [r7, #2]
 800e8b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	887a      	ldrh	r2, [r7, #2]
 800e8b8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	68ba      	ldr	r2, [r7, #8]
 800e8be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	887a      	ldrh	r2, [r7, #2]
 800e8c4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	887a      	ldrh	r2, [r7, #2]
 800e8ca:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8e2:	2b40      	cmp	r3, #64	@ 0x40
 800e8e4:	d007      	beq.n	800e8f6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	681a      	ldr	r2, [r3, #0]
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e8f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	68db      	ldr	r3, [r3, #12]
 800e8fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e8fe:	d178      	bne.n	800e9f2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	685b      	ldr	r3, [r3, #4]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d002      	beq.n	800e90e <HAL_SPI_TransmitReceive+0x10a>
 800e908:	8b7b      	ldrh	r3, [r7, #26]
 800e90a:	2b01      	cmp	r3, #1
 800e90c:	d166      	bne.n	800e9dc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e912:	881a      	ldrh	r2, [r3, #0]
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e91e:	1c9a      	adds	r2, r3, #2
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e928:	b29b      	uxth	r3, r3
 800e92a:	3b01      	subs	r3, #1
 800e92c:	b29a      	uxth	r2, r3
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e932:	e053      	b.n	800e9dc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	689b      	ldr	r3, [r3, #8]
 800e93a:	f003 0302 	and.w	r3, r3, #2
 800e93e:	2b02      	cmp	r3, #2
 800e940:	d11b      	bne.n	800e97a <HAL_SPI_TransmitReceive+0x176>
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e946:	b29b      	uxth	r3, r3
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d016      	beq.n	800e97a <HAL_SPI_TransmitReceive+0x176>
 800e94c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e94e:	2b01      	cmp	r3, #1
 800e950:	d113      	bne.n	800e97a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e956:	881a      	ldrh	r2, [r3, #0]
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e962:	1c9a      	adds	r2, r3, #2
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e96c:	b29b      	uxth	r3, r3
 800e96e:	3b01      	subs	r3, #1
 800e970:	b29a      	uxth	r2, r3
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e976:	2300      	movs	r3, #0
 800e978:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	689b      	ldr	r3, [r3, #8]
 800e980:	f003 0301 	and.w	r3, r3, #1
 800e984:	2b01      	cmp	r3, #1
 800e986:	d119      	bne.n	800e9bc <HAL_SPI_TransmitReceive+0x1b8>
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e98c:	b29b      	uxth	r3, r3
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d014      	beq.n	800e9bc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	68da      	ldr	r2, [r3, #12]
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e99c:	b292      	uxth	r2, r2
 800e99e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e9a4:	1c9a      	adds	r2, r3, #2
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e9ae:	b29b      	uxth	r3, r3
 800e9b0:	3b01      	subs	r3, #1
 800e9b2:	b29a      	uxth	r2, r3
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e9b8:	2301      	movs	r3, #1
 800e9ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e9bc:	f7fe fa92 	bl	800cee4 <HAL_GetTick>
 800e9c0:	4602      	mov	r2, r0
 800e9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9c4:	1ad3      	subs	r3, r2, r3
 800e9c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d807      	bhi.n	800e9dc <HAL_SPI_TransmitReceive+0x1d8>
 800e9cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e9d2:	d003      	beq.n	800e9dc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800e9d4:	2303      	movs	r3, #3
 800e9d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800e9da:	e0a7      	b.n	800eb2c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e9e0:	b29b      	uxth	r3, r3
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d1a6      	bne.n	800e934 <HAL_SPI_TransmitReceive+0x130>
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e9ea:	b29b      	uxth	r3, r3
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d1a1      	bne.n	800e934 <HAL_SPI_TransmitReceive+0x130>
 800e9f0:	e07c      	b.n	800eaec <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	685b      	ldr	r3, [r3, #4]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d002      	beq.n	800ea00 <HAL_SPI_TransmitReceive+0x1fc>
 800e9fa:	8b7b      	ldrh	r3, [r7, #26]
 800e9fc:	2b01      	cmp	r3, #1
 800e9fe:	d16b      	bne.n	800ead8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	330c      	adds	r3, #12
 800ea0a:	7812      	ldrb	r2, [r2, #0]
 800ea0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea12:	1c5a      	adds	r2, r3, #1
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ea1c:	b29b      	uxth	r3, r3
 800ea1e:	3b01      	subs	r3, #1
 800ea20:	b29a      	uxth	r2, r3
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ea26:	e057      	b.n	800ead8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	689b      	ldr	r3, [r3, #8]
 800ea2e:	f003 0302 	and.w	r3, r3, #2
 800ea32:	2b02      	cmp	r3, #2
 800ea34:	d11c      	bne.n	800ea70 <HAL_SPI_TransmitReceive+0x26c>
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ea3a:	b29b      	uxth	r3, r3
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d017      	beq.n	800ea70 <HAL_SPI_TransmitReceive+0x26c>
 800ea40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea42:	2b01      	cmp	r3, #1
 800ea44:	d114      	bne.n	800ea70 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	330c      	adds	r3, #12
 800ea50:	7812      	ldrb	r2, [r2, #0]
 800ea52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea58:	1c5a      	adds	r2, r3, #1
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ea62:	b29b      	uxth	r3, r3
 800ea64:	3b01      	subs	r3, #1
 800ea66:	b29a      	uxth	r2, r3
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	689b      	ldr	r3, [r3, #8]
 800ea76:	f003 0301 	and.w	r3, r3, #1
 800ea7a:	2b01      	cmp	r3, #1
 800ea7c:	d119      	bne.n	800eab2 <HAL_SPI_TransmitReceive+0x2ae>
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ea82:	b29b      	uxth	r3, r3
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d014      	beq.n	800eab2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	68da      	ldr	r2, [r3, #12]
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea92:	b2d2      	uxtb	r2, r2
 800ea94:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea9a:	1c5a      	adds	r2, r3, #1
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eaa4:	b29b      	uxth	r3, r3
 800eaa6:	3b01      	subs	r3, #1
 800eaa8:	b29a      	uxth	r2, r3
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800eaae:	2301      	movs	r3, #1
 800eab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800eab2:	f7fe fa17 	bl	800cee4 <HAL_GetTick>
 800eab6:	4602      	mov	r2, r0
 800eab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaba:	1ad3      	subs	r3, r2, r3
 800eabc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eabe:	429a      	cmp	r2, r3
 800eac0:	d803      	bhi.n	800eaca <HAL_SPI_TransmitReceive+0x2c6>
 800eac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eac4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eac8:	d102      	bne.n	800ead0 <HAL_SPI_TransmitReceive+0x2cc>
 800eaca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d103      	bne.n	800ead8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ead0:	2303      	movs	r3, #3
 800ead2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800ead6:	e029      	b.n	800eb2c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800eadc:	b29b      	uxth	r3, r3
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d1a2      	bne.n	800ea28 <HAL_SPI_TransmitReceive+0x224>
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eae6:	b29b      	uxth	r3, r3
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d19d      	bne.n	800ea28 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800eaec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eaee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800eaf0:	68f8      	ldr	r0, [r7, #12]
 800eaf2:	f000 f917 	bl	800ed24 <SPI_EndRxTxTransaction>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d006      	beq.n	800eb0a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800eafc:	2301      	movs	r3, #1
 800eafe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	2220      	movs	r2, #32
 800eb06:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800eb08:	e010      	b.n	800eb2c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	689b      	ldr	r3, [r3, #8]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d10b      	bne.n	800eb2a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800eb12:	2300      	movs	r3, #0
 800eb14:	617b      	str	r3, [r7, #20]
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	68db      	ldr	r3, [r3, #12]
 800eb1c:	617b      	str	r3, [r7, #20]
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	689b      	ldr	r3, [r3, #8]
 800eb24:	617b      	str	r3, [r7, #20]
 800eb26:	697b      	ldr	r3, [r7, #20]
 800eb28:	e000      	b.n	800eb2c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800eb2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	2201      	movs	r2, #1
 800eb30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	2200      	movs	r2, #0
 800eb38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800eb3c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800eb40:	4618      	mov	r0, r3
 800eb42:	3730      	adds	r7, #48	@ 0x30
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}

0800eb48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b088      	sub	sp, #32
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	60f8      	str	r0, [r7, #12]
 800eb50:	60b9      	str	r1, [r7, #8]
 800eb52:	603b      	str	r3, [r7, #0]
 800eb54:	4613      	mov	r3, r2
 800eb56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800eb58:	f7fe f9c4 	bl	800cee4 <HAL_GetTick>
 800eb5c:	4602      	mov	r2, r0
 800eb5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb60:	1a9b      	subs	r3, r3, r2
 800eb62:	683a      	ldr	r2, [r7, #0]
 800eb64:	4413      	add	r3, r2
 800eb66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800eb68:	f7fe f9bc 	bl	800cee4 <HAL_GetTick>
 800eb6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800eb6e:	4b39      	ldr	r3, [pc, #228]	@ (800ec54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	015b      	lsls	r3, r3, #5
 800eb74:	0d1b      	lsrs	r3, r3, #20
 800eb76:	69fa      	ldr	r2, [r7, #28]
 800eb78:	fb02 f303 	mul.w	r3, r2, r3
 800eb7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800eb7e:	e054      	b.n	800ec2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eb86:	d050      	beq.n	800ec2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800eb88:	f7fe f9ac 	bl	800cee4 <HAL_GetTick>
 800eb8c:	4602      	mov	r2, r0
 800eb8e:	69bb      	ldr	r3, [r7, #24]
 800eb90:	1ad3      	subs	r3, r2, r3
 800eb92:	69fa      	ldr	r2, [r7, #28]
 800eb94:	429a      	cmp	r2, r3
 800eb96:	d902      	bls.n	800eb9e <SPI_WaitFlagStateUntilTimeout+0x56>
 800eb98:	69fb      	ldr	r3, [r7, #28]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d13d      	bne.n	800ec1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	685a      	ldr	r2, [r3, #4]
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ebac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	685b      	ldr	r3, [r3, #4]
 800ebb2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ebb6:	d111      	bne.n	800ebdc <SPI_WaitFlagStateUntilTimeout+0x94>
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	689b      	ldr	r3, [r3, #8]
 800ebbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ebc0:	d004      	beq.n	800ebcc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	689b      	ldr	r3, [r3, #8]
 800ebc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ebca:	d107      	bne.n	800ebdc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	681a      	ldr	r2, [r3, #0]
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ebda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ebe0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ebe4:	d10f      	bne.n	800ec06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	681a      	ldr	r2, [r3, #0]
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ebf4:	601a      	str	r2, [r3, #0]
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	681a      	ldr	r2, [r3, #0]
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ec04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	2201      	movs	r2, #1
 800ec0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	2200      	movs	r2, #0
 800ec12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800ec16:	2303      	movs	r3, #3
 800ec18:	e017      	b.n	800ec4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ec1a:	697b      	ldr	r3, [r7, #20]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d101      	bne.n	800ec24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ec20:	2300      	movs	r3, #0
 800ec22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ec24:	697b      	ldr	r3, [r7, #20]
 800ec26:	3b01      	subs	r3, #1
 800ec28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	689a      	ldr	r2, [r3, #8]
 800ec30:	68bb      	ldr	r3, [r7, #8]
 800ec32:	4013      	ands	r3, r2
 800ec34:	68ba      	ldr	r2, [r7, #8]
 800ec36:	429a      	cmp	r2, r3
 800ec38:	bf0c      	ite	eq
 800ec3a:	2301      	moveq	r3, #1
 800ec3c:	2300      	movne	r3, #0
 800ec3e:	b2db      	uxtb	r3, r3
 800ec40:	461a      	mov	r2, r3
 800ec42:	79fb      	ldrb	r3, [r7, #7]
 800ec44:	429a      	cmp	r2, r3
 800ec46:	d19b      	bne.n	800eb80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ec48:	2300      	movs	r3, #0
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	3720      	adds	r7, #32
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}
 800ec52:	bf00      	nop
 800ec54:	20000004 	.word	0x20000004

0800ec58 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b086      	sub	sp, #24
 800ec5c:	af02      	add	r7, sp, #8
 800ec5e:	60f8      	str	r0, [r7, #12]
 800ec60:	60b9      	str	r1, [r7, #8]
 800ec62:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	685b      	ldr	r3, [r3, #4]
 800ec68:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ec6c:	d111      	bne.n	800ec92 <SPI_EndRxTransaction+0x3a>
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	689b      	ldr	r3, [r3, #8]
 800ec72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ec76:	d004      	beq.n	800ec82 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	689b      	ldr	r3, [r3, #8]
 800ec7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ec80:	d107      	bne.n	800ec92 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	681a      	ldr	r2, [r3, #0]
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ec90:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	685b      	ldr	r3, [r3, #4]
 800ec96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ec9a:	d12a      	bne.n	800ecf2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	689b      	ldr	r3, [r3, #8]
 800eca0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800eca4:	d012      	beq.n	800eccc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	9300      	str	r3, [sp, #0]
 800ecaa:	68bb      	ldr	r3, [r7, #8]
 800ecac:	2200      	movs	r2, #0
 800ecae:	2180      	movs	r1, #128	@ 0x80
 800ecb0:	68f8      	ldr	r0, [r7, #12]
 800ecb2:	f7ff ff49 	bl	800eb48 <SPI_WaitFlagStateUntilTimeout>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d02d      	beq.n	800ed18 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ecc0:	f043 0220 	orr.w	r2, r3, #32
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800ecc8:	2303      	movs	r3, #3
 800ecca:	e026      	b.n	800ed1a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	9300      	str	r3, [sp, #0]
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	2101      	movs	r1, #1
 800ecd6:	68f8      	ldr	r0, [r7, #12]
 800ecd8:	f7ff ff36 	bl	800eb48 <SPI_WaitFlagStateUntilTimeout>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d01a      	beq.n	800ed18 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ece6:	f043 0220 	orr.w	r2, r3, #32
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800ecee:	2303      	movs	r3, #3
 800ecf0:	e013      	b.n	800ed1a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	9300      	str	r3, [sp, #0]
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	2101      	movs	r1, #1
 800ecfc:	68f8      	ldr	r0, [r7, #12]
 800ecfe:	f7ff ff23 	bl	800eb48 <SPI_WaitFlagStateUntilTimeout>
 800ed02:	4603      	mov	r3, r0
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d007      	beq.n	800ed18 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed0c:	f043 0220 	orr.w	r2, r3, #32
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800ed14:	2303      	movs	r3, #3
 800ed16:	e000      	b.n	800ed1a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800ed18:	2300      	movs	r3, #0
}
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	3710      	adds	r7, #16
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}
	...

0800ed24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b088      	sub	sp, #32
 800ed28:	af02      	add	r7, sp, #8
 800ed2a:	60f8      	str	r0, [r7, #12]
 800ed2c:	60b9      	str	r1, [r7, #8]
 800ed2e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ed30:	4b1b      	ldr	r3, [pc, #108]	@ (800eda0 <SPI_EndRxTxTransaction+0x7c>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	4a1b      	ldr	r2, [pc, #108]	@ (800eda4 <SPI_EndRxTxTransaction+0x80>)
 800ed36:	fba2 2303 	umull	r2, r3, r2, r3
 800ed3a:	0d5b      	lsrs	r3, r3, #21
 800ed3c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ed40:	fb02 f303 	mul.w	r3, r2, r3
 800ed44:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	685b      	ldr	r3, [r3, #4]
 800ed4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ed4e:	d112      	bne.n	800ed76 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	9300      	str	r3, [sp, #0]
 800ed54:	68bb      	ldr	r3, [r7, #8]
 800ed56:	2200      	movs	r2, #0
 800ed58:	2180      	movs	r1, #128	@ 0x80
 800ed5a:	68f8      	ldr	r0, [r7, #12]
 800ed5c:	f7ff fef4 	bl	800eb48 <SPI_WaitFlagStateUntilTimeout>
 800ed60:	4603      	mov	r3, r0
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d016      	beq.n	800ed94 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed6a:	f043 0220 	orr.w	r2, r3, #32
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800ed72:	2303      	movs	r3, #3
 800ed74:	e00f      	b.n	800ed96 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d00a      	beq.n	800ed92 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800ed7c:	697b      	ldr	r3, [r7, #20]
 800ed7e:	3b01      	subs	r3, #1
 800ed80:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	689b      	ldr	r3, [r3, #8]
 800ed88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ed8c:	2b80      	cmp	r3, #128	@ 0x80
 800ed8e:	d0f2      	beq.n	800ed76 <SPI_EndRxTxTransaction+0x52>
 800ed90:	e000      	b.n	800ed94 <SPI_EndRxTxTransaction+0x70>
        break;
 800ed92:	bf00      	nop
  }

  return HAL_OK;
 800ed94:	2300      	movs	r3, #0
}
 800ed96:	4618      	mov	r0, r3
 800ed98:	3718      	adds	r7, #24
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}
 800ed9e:	bf00      	nop
 800eda0:	20000004 	.word	0x20000004
 800eda4:	165e9f81 	.word	0x165e9f81

0800eda8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b082      	sub	sp, #8
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d101      	bne.n	800edba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800edb6:	2301      	movs	r3, #1
 800edb8:	e041      	b.n	800ee3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800edc0:	b2db      	uxtb	r3, r3
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d106      	bne.n	800edd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2200      	movs	r2, #0
 800edca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	f7fd fe66 	bl	800caa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2202      	movs	r2, #2
 800edd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681a      	ldr	r2, [r3, #0]
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	3304      	adds	r3, #4
 800ede4:	4619      	mov	r1, r3
 800ede6:	4610      	mov	r0, r2
 800ede8:	f000 fa96 	bl	800f318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2201      	movs	r2, #1
 800edf0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	2201      	movs	r2, #1
 800edf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2201      	movs	r2, #1
 800ee00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2201      	movs	r2, #1
 800ee08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2201      	movs	r2, #1
 800ee10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2201      	movs	r2, #1
 800ee18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2201      	movs	r2, #1
 800ee20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2201      	movs	r2, #1
 800ee28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2201      	movs	r2, #1
 800ee30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2201      	movs	r2, #1
 800ee38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ee3c:	2300      	movs	r3, #0
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3708      	adds	r7, #8
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}
	...

0800ee48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ee48:	b480      	push	{r7}
 800ee4a:	b085      	sub	sp, #20
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ee56:	b2db      	uxtb	r3, r3
 800ee58:	2b01      	cmp	r3, #1
 800ee5a:	d001      	beq.n	800ee60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	e04e      	b.n	800eefe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2202      	movs	r2, #2
 800ee64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	68da      	ldr	r2, [r3, #12]
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	f042 0201 	orr.w	r2, r2, #1
 800ee76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	4a23      	ldr	r2, [pc, #140]	@ (800ef0c <HAL_TIM_Base_Start_IT+0xc4>)
 800ee7e:	4293      	cmp	r3, r2
 800ee80:	d022      	beq.n	800eec8 <HAL_TIM_Base_Start_IT+0x80>
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ee8a:	d01d      	beq.n	800eec8 <HAL_TIM_Base_Start_IT+0x80>
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	4a1f      	ldr	r2, [pc, #124]	@ (800ef10 <HAL_TIM_Base_Start_IT+0xc8>)
 800ee92:	4293      	cmp	r3, r2
 800ee94:	d018      	beq.n	800eec8 <HAL_TIM_Base_Start_IT+0x80>
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	4a1e      	ldr	r2, [pc, #120]	@ (800ef14 <HAL_TIM_Base_Start_IT+0xcc>)
 800ee9c:	4293      	cmp	r3, r2
 800ee9e:	d013      	beq.n	800eec8 <HAL_TIM_Base_Start_IT+0x80>
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	4a1c      	ldr	r2, [pc, #112]	@ (800ef18 <HAL_TIM_Base_Start_IT+0xd0>)
 800eea6:	4293      	cmp	r3, r2
 800eea8:	d00e      	beq.n	800eec8 <HAL_TIM_Base_Start_IT+0x80>
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	4a1b      	ldr	r2, [pc, #108]	@ (800ef1c <HAL_TIM_Base_Start_IT+0xd4>)
 800eeb0:	4293      	cmp	r3, r2
 800eeb2:	d009      	beq.n	800eec8 <HAL_TIM_Base_Start_IT+0x80>
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	4a19      	ldr	r2, [pc, #100]	@ (800ef20 <HAL_TIM_Base_Start_IT+0xd8>)
 800eeba:	4293      	cmp	r3, r2
 800eebc:	d004      	beq.n	800eec8 <HAL_TIM_Base_Start_IT+0x80>
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	4a18      	ldr	r2, [pc, #96]	@ (800ef24 <HAL_TIM_Base_Start_IT+0xdc>)
 800eec4:	4293      	cmp	r3, r2
 800eec6:	d111      	bne.n	800eeec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	689b      	ldr	r3, [r3, #8]
 800eece:	f003 0307 	and.w	r3, r3, #7
 800eed2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	2b06      	cmp	r3, #6
 800eed8:	d010      	beq.n	800eefc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	681a      	ldr	r2, [r3, #0]
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	f042 0201 	orr.w	r2, r2, #1
 800eee8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eeea:	e007      	b.n	800eefc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	681a      	ldr	r2, [r3, #0]
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	f042 0201 	orr.w	r2, r2, #1
 800eefa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800eefc:	2300      	movs	r3, #0
}
 800eefe:	4618      	mov	r0, r3
 800ef00:	3714      	adds	r7, #20
 800ef02:	46bd      	mov	sp, r7
 800ef04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef08:	4770      	bx	lr
 800ef0a:	bf00      	nop
 800ef0c:	40010000 	.word	0x40010000
 800ef10:	40000400 	.word	0x40000400
 800ef14:	40000800 	.word	0x40000800
 800ef18:	40000c00 	.word	0x40000c00
 800ef1c:	40010400 	.word	0x40010400
 800ef20:	40014000 	.word	0x40014000
 800ef24:	40001800 	.word	0x40001800

0800ef28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b082      	sub	sp, #8
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	691b      	ldr	r3, [r3, #16]
 800ef36:	f003 0302 	and.w	r3, r3, #2
 800ef3a:	2b02      	cmp	r3, #2
 800ef3c:	d122      	bne.n	800ef84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	68db      	ldr	r3, [r3, #12]
 800ef44:	f003 0302 	and.w	r3, r3, #2
 800ef48:	2b02      	cmp	r3, #2
 800ef4a:	d11b      	bne.n	800ef84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	f06f 0202 	mvn.w	r2, #2
 800ef54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	2201      	movs	r2, #1
 800ef5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	699b      	ldr	r3, [r3, #24]
 800ef62:	f003 0303 	and.w	r3, r3, #3
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d003      	beq.n	800ef72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ef6a:	6878      	ldr	r0, [r7, #4]
 800ef6c:	f000 f9b5 	bl	800f2da <HAL_TIM_IC_CaptureCallback>
 800ef70:	e005      	b.n	800ef7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	f000 f9a7 	bl	800f2c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef78:	6878      	ldr	r0, [r7, #4]
 800ef7a:	f000 f9b8 	bl	800f2ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	2200      	movs	r2, #0
 800ef82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	691b      	ldr	r3, [r3, #16]
 800ef8a:	f003 0304 	and.w	r3, r3, #4
 800ef8e:	2b04      	cmp	r3, #4
 800ef90:	d122      	bne.n	800efd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	68db      	ldr	r3, [r3, #12]
 800ef98:	f003 0304 	and.w	r3, r3, #4
 800ef9c:	2b04      	cmp	r3, #4
 800ef9e:	d11b      	bne.n	800efd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	f06f 0204 	mvn.w	r2, #4
 800efa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2202      	movs	r2, #2
 800efae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	699b      	ldr	r3, [r3, #24]
 800efb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d003      	beq.n	800efc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800efbe:	6878      	ldr	r0, [r7, #4]
 800efc0:	f000 f98b 	bl	800f2da <HAL_TIM_IC_CaptureCallback>
 800efc4:	e005      	b.n	800efd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800efc6:	6878      	ldr	r0, [r7, #4]
 800efc8:	f000 f97d 	bl	800f2c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f000 f98e 	bl	800f2ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2200      	movs	r2, #0
 800efd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	691b      	ldr	r3, [r3, #16]
 800efde:	f003 0308 	and.w	r3, r3, #8
 800efe2:	2b08      	cmp	r3, #8
 800efe4:	d122      	bne.n	800f02c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	68db      	ldr	r3, [r3, #12]
 800efec:	f003 0308 	and.w	r3, r3, #8
 800eff0:	2b08      	cmp	r3, #8
 800eff2:	d11b      	bne.n	800f02c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	f06f 0208 	mvn.w	r2, #8
 800effc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2204      	movs	r2, #4
 800f002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	69db      	ldr	r3, [r3, #28]
 800f00a:	f003 0303 	and.w	r3, r3, #3
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d003      	beq.n	800f01a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f012:	6878      	ldr	r0, [r7, #4]
 800f014:	f000 f961 	bl	800f2da <HAL_TIM_IC_CaptureCallback>
 800f018:	e005      	b.n	800f026 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f000 f953 	bl	800f2c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f020:	6878      	ldr	r0, [r7, #4]
 800f022:	f000 f964 	bl	800f2ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	2200      	movs	r2, #0
 800f02a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	691b      	ldr	r3, [r3, #16]
 800f032:	f003 0310 	and.w	r3, r3, #16
 800f036:	2b10      	cmp	r3, #16
 800f038:	d122      	bne.n	800f080 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	68db      	ldr	r3, [r3, #12]
 800f040:	f003 0310 	and.w	r3, r3, #16
 800f044:	2b10      	cmp	r3, #16
 800f046:	d11b      	bne.n	800f080 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	f06f 0210 	mvn.w	r2, #16
 800f050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	2208      	movs	r2, #8
 800f056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	69db      	ldr	r3, [r3, #28]
 800f05e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f062:	2b00      	cmp	r3, #0
 800f064:	d003      	beq.n	800f06e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f066:	6878      	ldr	r0, [r7, #4]
 800f068:	f000 f937 	bl	800f2da <HAL_TIM_IC_CaptureCallback>
 800f06c:	e005      	b.n	800f07a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f06e:	6878      	ldr	r0, [r7, #4]
 800f070:	f000 f929 	bl	800f2c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f074:	6878      	ldr	r0, [r7, #4]
 800f076:	f000 f93a 	bl	800f2ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	2200      	movs	r2, #0
 800f07e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	691b      	ldr	r3, [r3, #16]
 800f086:	f003 0301 	and.w	r3, r3, #1
 800f08a:	2b01      	cmp	r3, #1
 800f08c:	d10e      	bne.n	800f0ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	68db      	ldr	r3, [r3, #12]
 800f094:	f003 0301 	and.w	r3, r3, #1
 800f098:	2b01      	cmp	r3, #1
 800f09a:	d107      	bne.n	800f0ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	f06f 0201 	mvn.w	r2, #1
 800f0a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	f7fd fb9e 	bl	800c7e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	691b      	ldr	r3, [r3, #16]
 800f0b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f0b6:	2b80      	cmp	r3, #128	@ 0x80
 800f0b8:	d10e      	bne.n	800f0d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	68db      	ldr	r3, [r3, #12]
 800f0c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f0c4:	2b80      	cmp	r3, #128	@ 0x80
 800f0c6:	d107      	bne.n	800f0d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800f0d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f000 fae0 	bl	800f698 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	691b      	ldr	r3, [r3, #16]
 800f0de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f0e2:	2b40      	cmp	r3, #64	@ 0x40
 800f0e4:	d10e      	bne.n	800f104 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	68db      	ldr	r3, [r3, #12]
 800f0ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f0f0:	2b40      	cmp	r3, #64	@ 0x40
 800f0f2:	d107      	bne.n	800f104 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f0fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f000 f8ff 	bl	800f302 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	691b      	ldr	r3, [r3, #16]
 800f10a:	f003 0320 	and.w	r3, r3, #32
 800f10e:	2b20      	cmp	r3, #32
 800f110:	d10e      	bne.n	800f130 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	68db      	ldr	r3, [r3, #12]
 800f118:	f003 0320 	and.w	r3, r3, #32
 800f11c:	2b20      	cmp	r3, #32
 800f11e:	d107      	bne.n	800f130 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	f06f 0220 	mvn.w	r2, #32
 800f128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f12a:	6878      	ldr	r0, [r7, #4]
 800f12c:	f000 faaa 	bl	800f684 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f130:	bf00      	nop
 800f132:	3708      	adds	r7, #8
 800f134:	46bd      	mov	sp, r7
 800f136:	bd80      	pop	{r7, pc}

0800f138 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b084      	sub	sp, #16
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
 800f140:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f142:	2300      	movs	r3, #0
 800f144:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f14c:	2b01      	cmp	r3, #1
 800f14e:	d101      	bne.n	800f154 <HAL_TIM_ConfigClockSource+0x1c>
 800f150:	2302      	movs	r3, #2
 800f152:	e0b4      	b.n	800f2be <HAL_TIM_ConfigClockSource+0x186>
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	2201      	movs	r2, #1
 800f158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	2202      	movs	r2, #2
 800f160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	689b      	ldr	r3, [r3, #8]
 800f16a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f16c:	68bb      	ldr	r3, [r7, #8]
 800f16e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800f172:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f174:	68bb      	ldr	r3, [r7, #8]
 800f176:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f17a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	68ba      	ldr	r2, [r7, #8]
 800f182:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f18c:	d03e      	beq.n	800f20c <HAL_TIM_ConfigClockSource+0xd4>
 800f18e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f192:	f200 8087 	bhi.w	800f2a4 <HAL_TIM_ConfigClockSource+0x16c>
 800f196:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f19a:	f000 8086 	beq.w	800f2aa <HAL_TIM_ConfigClockSource+0x172>
 800f19e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f1a2:	d87f      	bhi.n	800f2a4 <HAL_TIM_ConfigClockSource+0x16c>
 800f1a4:	2b70      	cmp	r3, #112	@ 0x70
 800f1a6:	d01a      	beq.n	800f1de <HAL_TIM_ConfigClockSource+0xa6>
 800f1a8:	2b70      	cmp	r3, #112	@ 0x70
 800f1aa:	d87b      	bhi.n	800f2a4 <HAL_TIM_ConfigClockSource+0x16c>
 800f1ac:	2b60      	cmp	r3, #96	@ 0x60
 800f1ae:	d050      	beq.n	800f252 <HAL_TIM_ConfigClockSource+0x11a>
 800f1b0:	2b60      	cmp	r3, #96	@ 0x60
 800f1b2:	d877      	bhi.n	800f2a4 <HAL_TIM_ConfigClockSource+0x16c>
 800f1b4:	2b50      	cmp	r3, #80	@ 0x50
 800f1b6:	d03c      	beq.n	800f232 <HAL_TIM_ConfigClockSource+0xfa>
 800f1b8:	2b50      	cmp	r3, #80	@ 0x50
 800f1ba:	d873      	bhi.n	800f2a4 <HAL_TIM_ConfigClockSource+0x16c>
 800f1bc:	2b40      	cmp	r3, #64	@ 0x40
 800f1be:	d058      	beq.n	800f272 <HAL_TIM_ConfigClockSource+0x13a>
 800f1c0:	2b40      	cmp	r3, #64	@ 0x40
 800f1c2:	d86f      	bhi.n	800f2a4 <HAL_TIM_ConfigClockSource+0x16c>
 800f1c4:	2b30      	cmp	r3, #48	@ 0x30
 800f1c6:	d064      	beq.n	800f292 <HAL_TIM_ConfigClockSource+0x15a>
 800f1c8:	2b30      	cmp	r3, #48	@ 0x30
 800f1ca:	d86b      	bhi.n	800f2a4 <HAL_TIM_ConfigClockSource+0x16c>
 800f1cc:	2b20      	cmp	r3, #32
 800f1ce:	d060      	beq.n	800f292 <HAL_TIM_ConfigClockSource+0x15a>
 800f1d0:	2b20      	cmp	r3, #32
 800f1d2:	d867      	bhi.n	800f2a4 <HAL_TIM_ConfigClockSource+0x16c>
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d05c      	beq.n	800f292 <HAL_TIM_ConfigClockSource+0x15a>
 800f1d8:	2b10      	cmp	r3, #16
 800f1da:	d05a      	beq.n	800f292 <HAL_TIM_ConfigClockSource+0x15a>
 800f1dc:	e062      	b.n	800f2a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	6818      	ldr	r0, [r3, #0]
 800f1e2:	683b      	ldr	r3, [r7, #0]
 800f1e4:	6899      	ldr	r1, [r3, #8]
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	685a      	ldr	r2, [r3, #4]
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	68db      	ldr	r3, [r3, #12]
 800f1ee:	f000 f9ad 	bl	800f54c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	689b      	ldr	r3, [r3, #8]
 800f1f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f1fa:	68bb      	ldr	r3, [r7, #8]
 800f1fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f200:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	68ba      	ldr	r2, [r7, #8]
 800f208:	609a      	str	r2, [r3, #8]
      break;
 800f20a:	e04f      	b.n	800f2ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6818      	ldr	r0, [r3, #0]
 800f210:	683b      	ldr	r3, [r7, #0]
 800f212:	6899      	ldr	r1, [r3, #8]
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	685a      	ldr	r2, [r3, #4]
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	68db      	ldr	r3, [r3, #12]
 800f21c:	f000 f996 	bl	800f54c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	689a      	ldr	r2, [r3, #8]
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f22e:	609a      	str	r2, [r3, #8]
      break;
 800f230:	e03c      	b.n	800f2ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	6818      	ldr	r0, [r3, #0]
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	6859      	ldr	r1, [r3, #4]
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	68db      	ldr	r3, [r3, #12]
 800f23e:	461a      	mov	r2, r3
 800f240:	f000 f90a 	bl	800f458 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	2150      	movs	r1, #80	@ 0x50
 800f24a:	4618      	mov	r0, r3
 800f24c:	f000 f963 	bl	800f516 <TIM_ITRx_SetConfig>
      break;
 800f250:	e02c      	b.n	800f2ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	6818      	ldr	r0, [r3, #0]
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	6859      	ldr	r1, [r3, #4]
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	68db      	ldr	r3, [r3, #12]
 800f25e:	461a      	mov	r2, r3
 800f260:	f000 f929 	bl	800f4b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	2160      	movs	r1, #96	@ 0x60
 800f26a:	4618      	mov	r0, r3
 800f26c:	f000 f953 	bl	800f516 <TIM_ITRx_SetConfig>
      break;
 800f270:	e01c      	b.n	800f2ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	6818      	ldr	r0, [r3, #0]
 800f276:	683b      	ldr	r3, [r7, #0]
 800f278:	6859      	ldr	r1, [r3, #4]
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	68db      	ldr	r3, [r3, #12]
 800f27e:	461a      	mov	r2, r3
 800f280:	f000 f8ea 	bl	800f458 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	2140      	movs	r1, #64	@ 0x40
 800f28a:	4618      	mov	r0, r3
 800f28c:	f000 f943 	bl	800f516 <TIM_ITRx_SetConfig>
      break;
 800f290:	e00c      	b.n	800f2ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681a      	ldr	r2, [r3, #0]
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	4619      	mov	r1, r3
 800f29c:	4610      	mov	r0, r2
 800f29e:	f000 f93a 	bl	800f516 <TIM_ITRx_SetConfig>
      break;
 800f2a2:	e003      	b.n	800f2ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800f2a4:	2301      	movs	r3, #1
 800f2a6:	73fb      	strb	r3, [r7, #15]
      break;
 800f2a8:	e000      	b.n	800f2ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 800f2aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	2201      	movs	r2, #1
 800f2b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f2bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2be:	4618      	mov	r0, r3
 800f2c0:	3710      	adds	r7, #16
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bd80      	pop	{r7, pc}

0800f2c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f2c6:	b480      	push	{r7}
 800f2c8:	b083      	sub	sp, #12
 800f2ca:	af00      	add	r7, sp, #0
 800f2cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f2ce:	bf00      	nop
 800f2d0:	370c      	adds	r7, #12
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d8:	4770      	bx	lr

0800f2da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f2da:	b480      	push	{r7}
 800f2dc:	b083      	sub	sp, #12
 800f2de:	af00      	add	r7, sp, #0
 800f2e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f2e2:	bf00      	nop
 800f2e4:	370c      	adds	r7, #12
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ec:	4770      	bx	lr

0800f2ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f2ee:	b480      	push	{r7}
 800f2f0:	b083      	sub	sp, #12
 800f2f2:	af00      	add	r7, sp, #0
 800f2f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f2f6:	bf00      	nop
 800f2f8:	370c      	adds	r7, #12
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f300:	4770      	bx	lr

0800f302 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f302:	b480      	push	{r7}
 800f304:	b083      	sub	sp, #12
 800f306:	af00      	add	r7, sp, #0
 800f308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f30a:	bf00      	nop
 800f30c:	370c      	adds	r7, #12
 800f30e:	46bd      	mov	sp, r7
 800f310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f314:	4770      	bx	lr
	...

0800f318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f318:	b480      	push	{r7}
 800f31a:	b085      	sub	sp, #20
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
 800f320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	4a40      	ldr	r2, [pc, #256]	@ (800f42c <TIM_Base_SetConfig+0x114>)
 800f32c:	4293      	cmp	r3, r2
 800f32e:	d013      	beq.n	800f358 <TIM_Base_SetConfig+0x40>
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f336:	d00f      	beq.n	800f358 <TIM_Base_SetConfig+0x40>
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	4a3d      	ldr	r2, [pc, #244]	@ (800f430 <TIM_Base_SetConfig+0x118>)
 800f33c:	4293      	cmp	r3, r2
 800f33e:	d00b      	beq.n	800f358 <TIM_Base_SetConfig+0x40>
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	4a3c      	ldr	r2, [pc, #240]	@ (800f434 <TIM_Base_SetConfig+0x11c>)
 800f344:	4293      	cmp	r3, r2
 800f346:	d007      	beq.n	800f358 <TIM_Base_SetConfig+0x40>
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	4a3b      	ldr	r2, [pc, #236]	@ (800f438 <TIM_Base_SetConfig+0x120>)
 800f34c:	4293      	cmp	r3, r2
 800f34e:	d003      	beq.n	800f358 <TIM_Base_SetConfig+0x40>
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	4a3a      	ldr	r2, [pc, #232]	@ (800f43c <TIM_Base_SetConfig+0x124>)
 800f354:	4293      	cmp	r3, r2
 800f356:	d108      	bne.n	800f36a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f35e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	685b      	ldr	r3, [r3, #4]
 800f364:	68fa      	ldr	r2, [r7, #12]
 800f366:	4313      	orrs	r3, r2
 800f368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	4a2f      	ldr	r2, [pc, #188]	@ (800f42c <TIM_Base_SetConfig+0x114>)
 800f36e:	4293      	cmp	r3, r2
 800f370:	d02b      	beq.n	800f3ca <TIM_Base_SetConfig+0xb2>
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f378:	d027      	beq.n	800f3ca <TIM_Base_SetConfig+0xb2>
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	4a2c      	ldr	r2, [pc, #176]	@ (800f430 <TIM_Base_SetConfig+0x118>)
 800f37e:	4293      	cmp	r3, r2
 800f380:	d023      	beq.n	800f3ca <TIM_Base_SetConfig+0xb2>
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	4a2b      	ldr	r2, [pc, #172]	@ (800f434 <TIM_Base_SetConfig+0x11c>)
 800f386:	4293      	cmp	r3, r2
 800f388:	d01f      	beq.n	800f3ca <TIM_Base_SetConfig+0xb2>
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	4a2a      	ldr	r2, [pc, #168]	@ (800f438 <TIM_Base_SetConfig+0x120>)
 800f38e:	4293      	cmp	r3, r2
 800f390:	d01b      	beq.n	800f3ca <TIM_Base_SetConfig+0xb2>
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	4a29      	ldr	r2, [pc, #164]	@ (800f43c <TIM_Base_SetConfig+0x124>)
 800f396:	4293      	cmp	r3, r2
 800f398:	d017      	beq.n	800f3ca <TIM_Base_SetConfig+0xb2>
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	4a28      	ldr	r2, [pc, #160]	@ (800f440 <TIM_Base_SetConfig+0x128>)
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	d013      	beq.n	800f3ca <TIM_Base_SetConfig+0xb2>
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	4a27      	ldr	r2, [pc, #156]	@ (800f444 <TIM_Base_SetConfig+0x12c>)
 800f3a6:	4293      	cmp	r3, r2
 800f3a8:	d00f      	beq.n	800f3ca <TIM_Base_SetConfig+0xb2>
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	4a26      	ldr	r2, [pc, #152]	@ (800f448 <TIM_Base_SetConfig+0x130>)
 800f3ae:	4293      	cmp	r3, r2
 800f3b0:	d00b      	beq.n	800f3ca <TIM_Base_SetConfig+0xb2>
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	4a25      	ldr	r2, [pc, #148]	@ (800f44c <TIM_Base_SetConfig+0x134>)
 800f3b6:	4293      	cmp	r3, r2
 800f3b8:	d007      	beq.n	800f3ca <TIM_Base_SetConfig+0xb2>
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	4a24      	ldr	r2, [pc, #144]	@ (800f450 <TIM_Base_SetConfig+0x138>)
 800f3be:	4293      	cmp	r3, r2
 800f3c0:	d003      	beq.n	800f3ca <TIM_Base_SetConfig+0xb2>
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	4a23      	ldr	r2, [pc, #140]	@ (800f454 <TIM_Base_SetConfig+0x13c>)
 800f3c6:	4293      	cmp	r3, r2
 800f3c8:	d108      	bne.n	800f3dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f3d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	68db      	ldr	r3, [r3, #12]
 800f3d6:	68fa      	ldr	r2, [r7, #12]
 800f3d8:	4313      	orrs	r3, r2
 800f3da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	695b      	ldr	r3, [r3, #20]
 800f3e6:	4313      	orrs	r3, r2
 800f3e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	68fa      	ldr	r2, [r7, #12]
 800f3ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	689a      	ldr	r2, [r3, #8]
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	681a      	ldr	r2, [r3, #0]
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	4a0a      	ldr	r2, [pc, #40]	@ (800f42c <TIM_Base_SetConfig+0x114>)
 800f404:	4293      	cmp	r3, r2
 800f406:	d003      	beq.n	800f410 <TIM_Base_SetConfig+0xf8>
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	4a0c      	ldr	r2, [pc, #48]	@ (800f43c <TIM_Base_SetConfig+0x124>)
 800f40c:	4293      	cmp	r3, r2
 800f40e:	d103      	bne.n	800f418 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	691a      	ldr	r2, [r3, #16]
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	2201      	movs	r2, #1
 800f41c:	615a      	str	r2, [r3, #20]
}
 800f41e:	bf00      	nop
 800f420:	3714      	adds	r7, #20
 800f422:	46bd      	mov	sp, r7
 800f424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f428:	4770      	bx	lr
 800f42a:	bf00      	nop
 800f42c:	40010000 	.word	0x40010000
 800f430:	40000400 	.word	0x40000400
 800f434:	40000800 	.word	0x40000800
 800f438:	40000c00 	.word	0x40000c00
 800f43c:	40010400 	.word	0x40010400
 800f440:	40014000 	.word	0x40014000
 800f444:	40014400 	.word	0x40014400
 800f448:	40014800 	.word	0x40014800
 800f44c:	40001800 	.word	0x40001800
 800f450:	40001c00 	.word	0x40001c00
 800f454:	40002000 	.word	0x40002000

0800f458 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f458:	b480      	push	{r7}
 800f45a:	b087      	sub	sp, #28
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	60f8      	str	r0, [r7, #12]
 800f460:	60b9      	str	r1, [r7, #8]
 800f462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	6a1b      	ldr	r3, [r3, #32]
 800f468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	6a1b      	ldr	r3, [r3, #32]
 800f46e:	f023 0201 	bic.w	r2, r3, #1
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	699b      	ldr	r3, [r3, #24]
 800f47a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f47c:	693b      	ldr	r3, [r7, #16]
 800f47e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	011b      	lsls	r3, r3, #4
 800f488:	693a      	ldr	r2, [r7, #16]
 800f48a:	4313      	orrs	r3, r2
 800f48c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f48e:	697b      	ldr	r3, [r7, #20]
 800f490:	f023 030a 	bic.w	r3, r3, #10
 800f494:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f496:	697a      	ldr	r2, [r7, #20]
 800f498:	68bb      	ldr	r3, [r7, #8]
 800f49a:	4313      	orrs	r3, r2
 800f49c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	693a      	ldr	r2, [r7, #16]
 800f4a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	697a      	ldr	r2, [r7, #20]
 800f4a8:	621a      	str	r2, [r3, #32]
}
 800f4aa:	bf00      	nop
 800f4ac:	371c      	adds	r7, #28
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b4:	4770      	bx	lr

0800f4b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f4b6:	b480      	push	{r7}
 800f4b8:	b087      	sub	sp, #28
 800f4ba:	af00      	add	r7, sp, #0
 800f4bc:	60f8      	str	r0, [r7, #12]
 800f4be:	60b9      	str	r1, [r7, #8]
 800f4c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	6a1b      	ldr	r3, [r3, #32]
 800f4c6:	f023 0210 	bic.w	r2, r3, #16
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	699b      	ldr	r3, [r3, #24]
 800f4d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	6a1b      	ldr	r3, [r3, #32]
 800f4d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f4da:	697b      	ldr	r3, [r7, #20]
 800f4dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f4e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	031b      	lsls	r3, r3, #12
 800f4e6:	697a      	ldr	r2, [r7, #20]
 800f4e8:	4313      	orrs	r3, r2
 800f4ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f4ec:	693b      	ldr	r3, [r7, #16]
 800f4ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f4f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	011b      	lsls	r3, r3, #4
 800f4f8:	693a      	ldr	r2, [r7, #16]
 800f4fa:	4313      	orrs	r3, r2
 800f4fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	697a      	ldr	r2, [r7, #20]
 800f502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	693a      	ldr	r2, [r7, #16]
 800f508:	621a      	str	r2, [r3, #32]
}
 800f50a:	bf00      	nop
 800f50c:	371c      	adds	r7, #28
 800f50e:	46bd      	mov	sp, r7
 800f510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f514:	4770      	bx	lr

0800f516 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f516:	b480      	push	{r7}
 800f518:	b085      	sub	sp, #20
 800f51a:	af00      	add	r7, sp, #0
 800f51c:	6078      	str	r0, [r7, #4]
 800f51e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	689b      	ldr	r3, [r3, #8]
 800f524:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f52c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f52e:	683a      	ldr	r2, [r7, #0]
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	4313      	orrs	r3, r2
 800f534:	f043 0307 	orr.w	r3, r3, #7
 800f538:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	68fa      	ldr	r2, [r7, #12]
 800f53e:	609a      	str	r2, [r3, #8]
}
 800f540:	bf00      	nop
 800f542:	3714      	adds	r7, #20
 800f544:	46bd      	mov	sp, r7
 800f546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54a:	4770      	bx	lr

0800f54c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f54c:	b480      	push	{r7}
 800f54e:	b087      	sub	sp, #28
 800f550:	af00      	add	r7, sp, #0
 800f552:	60f8      	str	r0, [r7, #12]
 800f554:	60b9      	str	r1, [r7, #8]
 800f556:	607a      	str	r2, [r7, #4]
 800f558:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	689b      	ldr	r3, [r3, #8]
 800f55e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f560:	697b      	ldr	r3, [r7, #20]
 800f562:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f566:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	021a      	lsls	r2, r3, #8
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	431a      	orrs	r2, r3
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	4313      	orrs	r3, r2
 800f574:	697a      	ldr	r2, [r7, #20]
 800f576:	4313      	orrs	r3, r2
 800f578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	697a      	ldr	r2, [r7, #20]
 800f57e:	609a      	str	r2, [r3, #8]
}
 800f580:	bf00      	nop
 800f582:	371c      	adds	r7, #28
 800f584:	46bd      	mov	sp, r7
 800f586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58a:	4770      	bx	lr

0800f58c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f58c:	b480      	push	{r7}
 800f58e:	b085      	sub	sp, #20
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
 800f594:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f59c:	2b01      	cmp	r3, #1
 800f59e:	d101      	bne.n	800f5a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f5a0:	2302      	movs	r3, #2
 800f5a2:	e05a      	b.n	800f65a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	2201      	movs	r2, #1
 800f5a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2202      	movs	r2, #2
 800f5b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	685b      	ldr	r3, [r3, #4]
 800f5ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	689b      	ldr	r3, [r3, #8]
 800f5c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f5ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f5cc:	683b      	ldr	r3, [r7, #0]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	68fa      	ldr	r2, [r7, #12]
 800f5d2:	4313      	orrs	r3, r2
 800f5d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	68fa      	ldr	r2, [r7, #12]
 800f5dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	4a21      	ldr	r2, [pc, #132]	@ (800f668 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f5e4:	4293      	cmp	r3, r2
 800f5e6:	d022      	beq.n	800f62e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f5f0:	d01d      	beq.n	800f62e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	4a1d      	ldr	r2, [pc, #116]	@ (800f66c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f5f8:	4293      	cmp	r3, r2
 800f5fa:	d018      	beq.n	800f62e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	4a1b      	ldr	r2, [pc, #108]	@ (800f670 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f602:	4293      	cmp	r3, r2
 800f604:	d013      	beq.n	800f62e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	4a1a      	ldr	r2, [pc, #104]	@ (800f674 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f60c:	4293      	cmp	r3, r2
 800f60e:	d00e      	beq.n	800f62e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	4a18      	ldr	r2, [pc, #96]	@ (800f678 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f616:	4293      	cmp	r3, r2
 800f618:	d009      	beq.n	800f62e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	4a17      	ldr	r2, [pc, #92]	@ (800f67c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f620:	4293      	cmp	r3, r2
 800f622:	d004      	beq.n	800f62e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	4a15      	ldr	r2, [pc, #84]	@ (800f680 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f62a:	4293      	cmp	r3, r2
 800f62c:	d10c      	bne.n	800f648 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f62e:	68bb      	ldr	r3, [r7, #8]
 800f630:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f634:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	685b      	ldr	r3, [r3, #4]
 800f63a:	68ba      	ldr	r2, [r7, #8]
 800f63c:	4313      	orrs	r3, r2
 800f63e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	68ba      	ldr	r2, [r7, #8]
 800f646:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	2201      	movs	r2, #1
 800f64c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2200      	movs	r2, #0
 800f654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f658:	2300      	movs	r3, #0
}
 800f65a:	4618      	mov	r0, r3
 800f65c:	3714      	adds	r7, #20
 800f65e:	46bd      	mov	sp, r7
 800f660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f664:	4770      	bx	lr
 800f666:	bf00      	nop
 800f668:	40010000 	.word	0x40010000
 800f66c:	40000400 	.word	0x40000400
 800f670:	40000800 	.word	0x40000800
 800f674:	40000c00 	.word	0x40000c00
 800f678:	40010400 	.word	0x40010400
 800f67c:	40014000 	.word	0x40014000
 800f680:	40001800 	.word	0x40001800

0800f684 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f684:	b480      	push	{r7}
 800f686:	b083      	sub	sp, #12
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f68c:	bf00      	nop
 800f68e:	370c      	adds	r7, #12
 800f690:	46bd      	mov	sp, r7
 800f692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f696:	4770      	bx	lr

0800f698 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f698:	b480      	push	{r7}
 800f69a:	b083      	sub	sp, #12
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f6a0:	bf00      	nop
 800f6a2:	370c      	adds	r7, #12
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6aa:	4770      	bx	lr

0800f6ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b082      	sub	sp, #8
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d101      	bne.n	800f6be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f6ba:	2301      	movs	r3, #1
 800f6bc:	e03f      	b.n	800f73e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f6c4:	b2db      	uxtb	r3, r3
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d106      	bne.n	800f6d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f6d2:	6878      	ldr	r0, [r7, #4]
 800f6d4:	f7fd fa0a 	bl	800caec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	2224      	movs	r2, #36	@ 0x24
 800f6dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	68da      	ldr	r2, [r3, #12]
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f6ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f6f0:	6878      	ldr	r0, [r7, #4]
 800f6f2:	f000 fd19 	bl	8010128 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	691a      	ldr	r2, [r3, #16]
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f704:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	695a      	ldr	r2, [r3, #20]
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f714:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	68da      	ldr	r2, [r3, #12]
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f724:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	2200      	movs	r2, #0
 800f72a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2220      	movs	r2, #32
 800f730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	2220      	movs	r2, #32
 800f738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800f73c:	2300      	movs	r3, #0
}
 800f73e:	4618      	mov	r0, r3
 800f740:	3708      	adds	r7, #8
 800f742:	46bd      	mov	sp, r7
 800f744:	bd80      	pop	{r7, pc}

0800f746 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800f746:	b480      	push	{r7}
 800f748:	b085      	sub	sp, #20
 800f74a:	af00      	add	r7, sp, #0
 800f74c:	60f8      	str	r0, [r7, #12]
 800f74e:	60b9      	str	r1, [r7, #8]
 800f750:	4613      	mov	r3, r2
 800f752:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f75a:	b2db      	uxtb	r3, r3
 800f75c:	2b20      	cmp	r3, #32
 800f75e:	d130      	bne.n	800f7c2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f760:	68bb      	ldr	r3, [r7, #8]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d002      	beq.n	800f76c <HAL_UART_Transmit_IT+0x26>
 800f766:	88fb      	ldrh	r3, [r7, #6]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d101      	bne.n	800f770 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800f76c:	2301      	movs	r3, #1
 800f76e:	e029      	b.n	800f7c4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f776:	2b01      	cmp	r3, #1
 800f778:	d101      	bne.n	800f77e <HAL_UART_Transmit_IT+0x38>
 800f77a:	2302      	movs	r3, #2
 800f77c:	e022      	b.n	800f7c4 <HAL_UART_Transmit_IT+0x7e>
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	2201      	movs	r2, #1
 800f782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	68ba      	ldr	r2, [r7, #8]
 800f78a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	88fa      	ldrh	r2, [r7, #6]
 800f790:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	88fa      	ldrh	r2, [r7, #6]
 800f796:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	2200      	movs	r2, #0
 800f79c:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	2221      	movs	r2, #33	@ 0x21
 800f7a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	68da      	ldr	r2, [r3, #12]
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800f7bc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800f7be:	2300      	movs	r3, #0
 800f7c0:	e000      	b.n	800f7c4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800f7c2:	2302      	movs	r3, #2
  }
}
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	3714      	adds	r7, #20
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ce:	4770      	bx	lr

0800f7d0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b084      	sub	sp, #16
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	60f8      	str	r0, [r7, #12]
 800f7d8:	60b9      	str	r1, [r7, #8]
 800f7da:	4613      	mov	r3, r2
 800f7dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800f7e4:	b2db      	uxtb	r3, r3
 800f7e6:	2b20      	cmp	r3, #32
 800f7e8:	d11d      	bne.n	800f826 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800f7ea:	68bb      	ldr	r3, [r7, #8]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d002      	beq.n	800f7f6 <HAL_UART_Receive_IT+0x26>
 800f7f0:	88fb      	ldrh	r3, [r7, #6]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d101      	bne.n	800f7fa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800f7f6:	2301      	movs	r3, #1
 800f7f8:	e016      	b.n	800f828 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f800:	2b01      	cmp	r3, #1
 800f802:	d101      	bne.n	800f808 <HAL_UART_Receive_IT+0x38>
 800f804:	2302      	movs	r3, #2
 800f806:	e00f      	b.n	800f828 <HAL_UART_Receive_IT+0x58>
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	2201      	movs	r2, #1
 800f80c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	2200      	movs	r2, #0
 800f814:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800f816:	88fb      	ldrh	r3, [r7, #6]
 800f818:	461a      	mov	r2, r3
 800f81a:	68b9      	ldr	r1, [r7, #8]
 800f81c:	68f8      	ldr	r0, [r7, #12]
 800f81e:	f000 faab 	bl	800fd78 <UART_Start_Receive_IT>
 800f822:	4603      	mov	r3, r0
 800f824:	e000      	b.n	800f828 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800f826:	2302      	movs	r3, #2
  }
}
 800f828:	4618      	mov	r0, r3
 800f82a:	3710      	adds	r7, #16
 800f82c:	46bd      	mov	sp, r7
 800f82e:	bd80      	pop	{r7, pc}

0800f830 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b0ba      	sub	sp, #232	@ 0xe8
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	68db      	ldr	r3, [r3, #12]
 800f848:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	695b      	ldr	r3, [r3, #20]
 800f852:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800f856:	2300      	movs	r3, #0
 800f858:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800f85c:	2300      	movs	r3, #0
 800f85e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800f862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f866:	f003 030f 	and.w	r3, r3, #15
 800f86a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800f86e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f872:	2b00      	cmp	r3, #0
 800f874:	d10f      	bne.n	800f896 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f87a:	f003 0320 	and.w	r3, r3, #32
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d009      	beq.n	800f896 <HAL_UART_IRQHandler+0x66>
 800f882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f886:	f003 0320 	and.w	r3, r3, #32
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d003      	beq.n	800f896 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800f88e:	6878      	ldr	r0, [r7, #4]
 800f890:	f000 fb8f 	bl	800ffb2 <UART_Receive_IT>
      return;
 800f894:	e256      	b.n	800fd44 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800f896:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	f000 80de 	beq.w	800fa5c <HAL_UART_IRQHandler+0x22c>
 800f8a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f8a4:	f003 0301 	and.w	r3, r3, #1
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d106      	bne.n	800f8ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800f8ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f8b0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	f000 80d1 	beq.w	800fa5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800f8ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f8be:	f003 0301 	and.w	r3, r3, #1
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d00b      	beq.n	800f8de <HAL_UART_IRQHandler+0xae>
 800f8c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f8ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d005      	beq.n	800f8de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8d6:	f043 0201 	orr.w	r2, r3, #1
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f8de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f8e2:	f003 0304 	and.w	r3, r3, #4
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d00b      	beq.n	800f902 <HAL_UART_IRQHandler+0xd2>
 800f8ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f8ee:	f003 0301 	and.w	r3, r3, #1
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d005      	beq.n	800f902 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8fa:	f043 0202 	orr.w	r2, r3, #2
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f906:	f003 0302 	and.w	r3, r3, #2
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d00b      	beq.n	800f926 <HAL_UART_IRQHandler+0xf6>
 800f90e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f912:	f003 0301 	and.w	r3, r3, #1
 800f916:	2b00      	cmp	r3, #0
 800f918:	d005      	beq.n	800f926 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f91e:	f043 0204 	orr.w	r2, r3, #4
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800f926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f92a:	f003 0308 	and.w	r3, r3, #8
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d011      	beq.n	800f956 <HAL_UART_IRQHandler+0x126>
 800f932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f936:	f003 0320 	and.w	r3, r3, #32
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d105      	bne.n	800f94a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800f93e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f942:	f003 0301 	and.w	r3, r3, #1
 800f946:	2b00      	cmp	r3, #0
 800f948:	d005      	beq.n	800f956 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f94e:	f043 0208 	orr.w	r2, r3, #8
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	f000 81ed 	beq.w	800fd3a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f964:	f003 0320 	and.w	r3, r3, #32
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d008      	beq.n	800f97e <HAL_UART_IRQHandler+0x14e>
 800f96c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f970:	f003 0320 	and.w	r3, r3, #32
 800f974:	2b00      	cmp	r3, #0
 800f976:	d002      	beq.n	800f97e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800f978:	6878      	ldr	r0, [r7, #4]
 800f97a:	f000 fb1a 	bl	800ffb2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	695b      	ldr	r3, [r3, #20]
 800f984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f988:	2b40      	cmp	r3, #64	@ 0x40
 800f98a:	bf0c      	ite	eq
 800f98c:	2301      	moveq	r3, #1
 800f98e:	2300      	movne	r3, #0
 800f990:	b2db      	uxtb	r3, r3
 800f992:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f99a:	f003 0308 	and.w	r3, r3, #8
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d103      	bne.n	800f9aa <HAL_UART_IRQHandler+0x17a>
 800f9a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d04f      	beq.n	800fa4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f9aa:	6878      	ldr	r0, [r7, #4]
 800f9ac:	f000 fa22 	bl	800fdf4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	695b      	ldr	r3, [r3, #20]
 800f9b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f9ba:	2b40      	cmp	r3, #64	@ 0x40
 800f9bc:	d141      	bne.n	800fa42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	3314      	adds	r3, #20
 800f9c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f9cc:	e853 3f00 	ldrex	r3, [r3]
 800f9d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f9d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f9d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f9dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	3314      	adds	r3, #20
 800f9e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f9ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f9ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f9f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f9fa:	e841 2300 	strex	r3, r2, [r1]
 800f9fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800fa02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d1d9      	bne.n	800f9be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d013      	beq.n	800fa3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa16:	4a7d      	ldr	r2, [pc, #500]	@ (800fc0c <HAL_UART_IRQHandler+0x3dc>)
 800fa18:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa1e:	4618      	mov	r0, r3
 800fa20:	f7fd fc11 	bl	800d246 <HAL_DMA_Abort_IT>
 800fa24:	4603      	mov	r3, r0
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d016      	beq.n	800fa58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fa30:	687a      	ldr	r2, [r7, #4]
 800fa32:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800fa34:	4610      	mov	r0, r2
 800fa36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa38:	e00e      	b.n	800fa58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fa3a:	6878      	ldr	r0, [r7, #4]
 800fa3c:	f000 f986 	bl	800fd4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa40:	e00a      	b.n	800fa58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fa42:	6878      	ldr	r0, [r7, #4]
 800fa44:	f000 f982 	bl	800fd4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa48:	e006      	b.n	800fa58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fa4a:	6878      	ldr	r0, [r7, #4]
 800fa4c:	f000 f97e 	bl	800fd4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	2200      	movs	r2, #0
 800fa54:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800fa56:	e170      	b.n	800fd3a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa58:	bf00      	nop
    return;
 800fa5a:	e16e      	b.n	800fd3a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa60:	2b01      	cmp	r3, #1
 800fa62:	f040 814a 	bne.w	800fcfa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800fa66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fa6a:	f003 0310 	and.w	r3, r3, #16
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	f000 8143 	beq.w	800fcfa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800fa74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fa78:	f003 0310 	and.w	r3, r3, #16
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	f000 813c 	beq.w	800fcfa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800fa82:	2300      	movs	r3, #0
 800fa84:	60bb      	str	r3, [r7, #8]
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	60bb      	str	r3, [r7, #8]
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	685b      	ldr	r3, [r3, #4]
 800fa94:	60bb      	str	r3, [r7, #8]
 800fa96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	695b      	ldr	r3, [r3, #20]
 800fa9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800faa2:	2b40      	cmp	r3, #64	@ 0x40
 800faa4:	f040 80b4 	bne.w	800fc10 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	685b      	ldr	r3, [r3, #4]
 800fab0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fab4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800fab8:	2b00      	cmp	r3, #0
 800faba:	f000 8140 	beq.w	800fd3e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800fac2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fac6:	429a      	cmp	r2, r3
 800fac8:	f080 8139 	bcs.w	800fd3e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fad2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fad8:	69db      	ldr	r3, [r3, #28]
 800fada:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fade:	f000 8088 	beq.w	800fbf2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	330c      	adds	r3, #12
 800fae8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800faf0:	e853 3f00 	ldrex	r3, [r3]
 800faf4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800faf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fafc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fb00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	330c      	adds	r3, #12
 800fb0a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800fb0e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800fb12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb16:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800fb1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fb1e:	e841 2300 	strex	r3, r2, [r1]
 800fb22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800fb26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d1d9      	bne.n	800fae2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	3314      	adds	r3, #20
 800fb34:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fb38:	e853 3f00 	ldrex	r3, [r3]
 800fb3c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800fb3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fb40:	f023 0301 	bic.w	r3, r3, #1
 800fb44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	3314      	adds	r3, #20
 800fb4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800fb52:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800fb56:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb58:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800fb5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800fb5e:	e841 2300 	strex	r3, r2, [r1]
 800fb62:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800fb64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d1e1      	bne.n	800fb2e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	3314      	adds	r3, #20
 800fb70:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fb74:	e853 3f00 	ldrex	r3, [r3]
 800fb78:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800fb7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fb7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fb80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	3314      	adds	r3, #20
 800fb8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800fb8e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800fb90:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb92:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800fb94:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fb96:	e841 2300 	strex	r3, r2, [r1]
 800fb9a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800fb9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d1e3      	bne.n	800fb6a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2220      	movs	r2, #32
 800fba6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	2200      	movs	r2, #0
 800fbae:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	330c      	adds	r3, #12
 800fbb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fbba:	e853 3f00 	ldrex	r3, [r3]
 800fbbe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fbc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fbc2:	f023 0310 	bic.w	r3, r3, #16
 800fbc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	330c      	adds	r3, #12
 800fbd0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800fbd4:	65ba      	str	r2, [r7, #88]	@ 0x58
 800fbd6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbd8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fbda:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fbdc:	e841 2300 	strex	r3, r2, [r1]
 800fbe0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fbe2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d1e3      	bne.n	800fbb0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbec:	4618      	mov	r0, r3
 800fbee:	f7fd faba 	bl	800d166 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800fbfa:	b29b      	uxth	r3, r3
 800fbfc:	1ad3      	subs	r3, r2, r3
 800fbfe:	b29b      	uxth	r3, r3
 800fc00:	4619      	mov	r1, r3
 800fc02:	6878      	ldr	r0, [r7, #4]
 800fc04:	f000 f8ac 	bl	800fd60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800fc08:	e099      	b.n	800fd3e <HAL_UART_IRQHandler+0x50e>
 800fc0a:	bf00      	nop
 800fc0c:	0800febb 	.word	0x0800febb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800fc18:	b29b      	uxth	r3, r3
 800fc1a:	1ad3      	subs	r3, r2, r3
 800fc1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800fc24:	b29b      	uxth	r3, r3
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	f000 808b 	beq.w	800fd42 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800fc2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	f000 8086 	beq.w	800fd42 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	330c      	adds	r3, #12
 800fc3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc40:	e853 3f00 	ldrex	r3, [r3]
 800fc44:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fc46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fc4c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	330c      	adds	r3, #12
 800fc56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800fc5a:	647a      	str	r2, [r7, #68]	@ 0x44
 800fc5c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fc60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fc62:	e841 2300 	strex	r3, r2, [r1]
 800fc66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fc68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d1e3      	bne.n	800fc36 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	3314      	adds	r3, #20
 800fc74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc78:	e853 3f00 	ldrex	r3, [r3]
 800fc7c:	623b      	str	r3, [r7, #32]
   return(result);
 800fc7e:	6a3b      	ldr	r3, [r7, #32]
 800fc80:	f023 0301 	bic.w	r3, r3, #1
 800fc84:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	3314      	adds	r3, #20
 800fc8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800fc92:	633a      	str	r2, [r7, #48]	@ 0x30
 800fc94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fc98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc9a:	e841 2300 	strex	r3, r2, [r1]
 800fc9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d1e3      	bne.n	800fc6e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	2220      	movs	r2, #32
 800fcaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	330c      	adds	r3, #12
 800fcba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcbc:	693b      	ldr	r3, [r7, #16]
 800fcbe:	e853 3f00 	ldrex	r3, [r3]
 800fcc2:	60fb      	str	r3, [r7, #12]
   return(result);
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	f023 0310 	bic.w	r3, r3, #16
 800fcca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	330c      	adds	r3, #12
 800fcd4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800fcd8:	61fa      	str	r2, [r7, #28]
 800fcda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcdc:	69b9      	ldr	r1, [r7, #24]
 800fcde:	69fa      	ldr	r2, [r7, #28]
 800fce0:	e841 2300 	strex	r3, r2, [r1]
 800fce4:	617b      	str	r3, [r7, #20]
   return(result);
 800fce6:	697b      	ldr	r3, [r7, #20]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d1e3      	bne.n	800fcb4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fcec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fcf0:	4619      	mov	r1, r3
 800fcf2:	6878      	ldr	r0, [r7, #4]
 800fcf4:	f000 f834 	bl	800fd60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800fcf8:	e023      	b.n	800fd42 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800fcfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fcfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d009      	beq.n	800fd1a <HAL_UART_IRQHandler+0x4ea>
 800fd06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d003      	beq.n	800fd1a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800fd12:	6878      	ldr	r0, [r7, #4]
 800fd14:	f000 f8e5 	bl	800fee2 <UART_Transmit_IT>
    return;
 800fd18:	e014      	b.n	800fd44 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800fd1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d00e      	beq.n	800fd44 <HAL_UART_IRQHandler+0x514>
 800fd26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d008      	beq.n	800fd44 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800fd32:	6878      	ldr	r0, [r7, #4]
 800fd34:	f000 f925 	bl	800ff82 <UART_EndTransmit_IT>
    return;
 800fd38:	e004      	b.n	800fd44 <HAL_UART_IRQHandler+0x514>
    return;
 800fd3a:	bf00      	nop
 800fd3c:	e002      	b.n	800fd44 <HAL_UART_IRQHandler+0x514>
      return;
 800fd3e:	bf00      	nop
 800fd40:	e000      	b.n	800fd44 <HAL_UART_IRQHandler+0x514>
      return;
 800fd42:	bf00      	nop
  }
}
 800fd44:	37e8      	adds	r7, #232	@ 0xe8
 800fd46:	46bd      	mov	sp, r7
 800fd48:	bd80      	pop	{r7, pc}
 800fd4a:	bf00      	nop

0800fd4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fd4c:	b480      	push	{r7}
 800fd4e:	b083      	sub	sp, #12
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800fd54:	bf00      	nop
 800fd56:	370c      	adds	r7, #12
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5e:	4770      	bx	lr

0800fd60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fd60:	b480      	push	{r7}
 800fd62:	b083      	sub	sp, #12
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
 800fd68:	460b      	mov	r3, r1
 800fd6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fd6c:	bf00      	nop
 800fd6e:	370c      	adds	r7, #12
 800fd70:	46bd      	mov	sp, r7
 800fd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd76:	4770      	bx	lr

0800fd78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fd78:	b480      	push	{r7}
 800fd7a:	b085      	sub	sp, #20
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	60f8      	str	r0, [r7, #12]
 800fd80:	60b9      	str	r1, [r7, #8]
 800fd82:	4613      	mov	r3, r2
 800fd84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	68ba      	ldr	r2, [r7, #8]
 800fd8a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	88fa      	ldrh	r2, [r7, #6]
 800fd90:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	88fa      	ldrh	r2, [r7, #6]
 800fd96:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	2222      	movs	r2, #34	@ 0x22
 800fda2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	2200      	movs	r2, #0
 800fdaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	691b      	ldr	r3, [r3, #16]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d007      	beq.n	800fdc6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	68da      	ldr	r2, [r3, #12]
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800fdc4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	695a      	ldr	r2, [r3, #20]
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	f042 0201 	orr.w	r2, r2, #1
 800fdd4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	68da      	ldr	r2, [r3, #12]
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	f042 0220 	orr.w	r2, r2, #32
 800fde4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800fde6:	2300      	movs	r3, #0
}
 800fde8:	4618      	mov	r0, r3
 800fdea:	3714      	adds	r7, #20
 800fdec:	46bd      	mov	sp, r7
 800fdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf2:	4770      	bx	lr

0800fdf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fdf4:	b480      	push	{r7}
 800fdf6:	b095      	sub	sp, #84	@ 0x54
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	330c      	adds	r3, #12
 800fe02:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe06:	e853 3f00 	ldrex	r3, [r3]
 800fe0a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fe0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fe12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	330c      	adds	r3, #12
 800fe1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fe1c:	643a      	str	r2, [r7, #64]	@ 0x40
 800fe1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fe22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fe24:	e841 2300 	strex	r3, r2, [r1]
 800fe28:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fe2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d1e5      	bne.n	800fdfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	3314      	adds	r3, #20
 800fe36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe38:	6a3b      	ldr	r3, [r7, #32]
 800fe3a:	e853 3f00 	ldrex	r3, [r3]
 800fe3e:	61fb      	str	r3, [r7, #28]
   return(result);
 800fe40:	69fb      	ldr	r3, [r7, #28]
 800fe42:	f023 0301 	bic.w	r3, r3, #1
 800fe46:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	3314      	adds	r3, #20
 800fe4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fe50:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fe52:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fe56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fe58:	e841 2300 	strex	r3, r2, [r1]
 800fe5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fe5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d1e5      	bne.n	800fe30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe68:	2b01      	cmp	r3, #1
 800fe6a:	d119      	bne.n	800fea0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	330c      	adds	r3, #12
 800fe72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	e853 3f00 	ldrex	r3, [r3]
 800fe7a:	60bb      	str	r3, [r7, #8]
   return(result);
 800fe7c:	68bb      	ldr	r3, [r7, #8]
 800fe7e:	f023 0310 	bic.w	r3, r3, #16
 800fe82:	647b      	str	r3, [r7, #68]	@ 0x44
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	330c      	adds	r3, #12
 800fe8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fe8c:	61ba      	str	r2, [r7, #24]
 800fe8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe90:	6979      	ldr	r1, [r7, #20]
 800fe92:	69ba      	ldr	r2, [r7, #24]
 800fe94:	e841 2300 	strex	r3, r2, [r1]
 800fe98:	613b      	str	r3, [r7, #16]
   return(result);
 800fe9a:	693b      	ldr	r3, [r7, #16]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d1e5      	bne.n	800fe6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2220      	movs	r2, #32
 800fea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	2200      	movs	r2, #0
 800feac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800feae:	bf00      	nop
 800feb0:	3754      	adds	r7, #84	@ 0x54
 800feb2:	46bd      	mov	sp, r7
 800feb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb8:	4770      	bx	lr

0800feba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800feba:	b580      	push	{r7, lr}
 800febc:	b084      	sub	sp, #16
 800febe:	af00      	add	r7, sp, #0
 800fec0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fec6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	2200      	movs	r2, #0
 800fecc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	2200      	movs	r2, #0
 800fed2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fed4:	68f8      	ldr	r0, [r7, #12]
 800fed6:	f7ff ff39 	bl	800fd4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800feda:	bf00      	nop
 800fedc:	3710      	adds	r7, #16
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd80      	pop	{r7, pc}

0800fee2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800fee2:	b480      	push	{r7}
 800fee4:	b085      	sub	sp, #20
 800fee6:	af00      	add	r7, sp, #0
 800fee8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fef0:	b2db      	uxtb	r3, r3
 800fef2:	2b21      	cmp	r3, #33	@ 0x21
 800fef4:	d13e      	bne.n	800ff74 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	689b      	ldr	r3, [r3, #8]
 800fefa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fefe:	d114      	bne.n	800ff2a <UART_Transmit_IT+0x48>
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	691b      	ldr	r3, [r3, #16]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d110      	bne.n	800ff2a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	6a1b      	ldr	r3, [r3, #32]
 800ff0c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	881b      	ldrh	r3, [r3, #0]
 800ff12:	461a      	mov	r2, r3
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ff1c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	6a1b      	ldr	r3, [r3, #32]
 800ff22:	1c9a      	adds	r2, r3, #2
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	621a      	str	r2, [r3, #32]
 800ff28:	e008      	b.n	800ff3c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	6a1b      	ldr	r3, [r3, #32]
 800ff2e:	1c59      	adds	r1, r3, #1
 800ff30:	687a      	ldr	r2, [r7, #4]
 800ff32:	6211      	str	r1, [r2, #32]
 800ff34:	781a      	ldrb	r2, [r3, #0]
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ff40:	b29b      	uxth	r3, r3
 800ff42:	3b01      	subs	r3, #1
 800ff44:	b29b      	uxth	r3, r3
 800ff46:	687a      	ldr	r2, [r7, #4]
 800ff48:	4619      	mov	r1, r3
 800ff4a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d10f      	bne.n	800ff70 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	68da      	ldr	r2, [r3, #12]
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ff5e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	68da      	ldr	r2, [r3, #12]
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ff6e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ff70:	2300      	movs	r3, #0
 800ff72:	e000      	b.n	800ff76 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ff74:	2302      	movs	r3, #2
  }
}
 800ff76:	4618      	mov	r0, r3
 800ff78:	3714      	adds	r7, #20
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff80:	4770      	bx	lr

0800ff82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ff82:	b580      	push	{r7, lr}
 800ff84:	b082      	sub	sp, #8
 800ff86:	af00      	add	r7, sp, #0
 800ff88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	68da      	ldr	r2, [r3, #12]
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ff98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	2220      	movs	r2, #32
 800ff9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ffa2:	6878      	ldr	r0, [r7, #4]
 800ffa4:	f7fc fbf8 	bl	800c798 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ffa8:	2300      	movs	r3, #0
}
 800ffaa:	4618      	mov	r0, r3
 800ffac:	3708      	adds	r7, #8
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	bd80      	pop	{r7, pc}

0800ffb2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ffb2:	b580      	push	{r7, lr}
 800ffb4:	b08c      	sub	sp, #48	@ 0x30
 800ffb6:	af00      	add	r7, sp, #0
 800ffb8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ffc0:	b2db      	uxtb	r3, r3
 800ffc2:	2b22      	cmp	r3, #34	@ 0x22
 800ffc4:	f040 80ab 	bne.w	801011e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	689b      	ldr	r3, [r3, #8]
 800ffcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ffd0:	d117      	bne.n	8010002 <UART_Receive_IT+0x50>
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	691b      	ldr	r3, [r3, #16]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d113      	bne.n	8010002 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ffda:	2300      	movs	r3, #0
 800ffdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ffe2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	685b      	ldr	r3, [r3, #4]
 800ffea:	b29b      	uxth	r3, r3
 800ffec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fff0:	b29a      	uxth	r2, r3
 800fff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fff4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fffa:	1c9a      	adds	r2, r3, #2
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	629a      	str	r2, [r3, #40]	@ 0x28
 8010000:	e026      	b.n	8010050 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010006:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8010008:	2300      	movs	r3, #0
 801000a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	689b      	ldr	r3, [r3, #8]
 8010010:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010014:	d007      	beq.n	8010026 <UART_Receive_IT+0x74>
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	689b      	ldr	r3, [r3, #8]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d10a      	bne.n	8010034 <UART_Receive_IT+0x82>
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	691b      	ldr	r3, [r3, #16]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d106      	bne.n	8010034 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	685b      	ldr	r3, [r3, #4]
 801002c:	b2da      	uxtb	r2, r3
 801002e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010030:	701a      	strb	r2, [r3, #0]
 8010032:	e008      	b.n	8010046 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	685b      	ldr	r3, [r3, #4]
 801003a:	b2db      	uxtb	r3, r3
 801003c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010040:	b2da      	uxtb	r2, r3
 8010042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010044:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801004a:	1c5a      	adds	r2, r3, #1
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010054:	b29b      	uxth	r3, r3
 8010056:	3b01      	subs	r3, #1
 8010058:	b29b      	uxth	r3, r3
 801005a:	687a      	ldr	r2, [r7, #4]
 801005c:	4619      	mov	r1, r3
 801005e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8010060:	2b00      	cmp	r3, #0
 8010062:	d15a      	bne.n	801011a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	68da      	ldr	r2, [r3, #12]
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	f022 0220 	bic.w	r2, r2, #32
 8010072:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	68da      	ldr	r2, [r3, #12]
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8010082:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	695a      	ldr	r2, [r3, #20]
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	f022 0201 	bic.w	r2, r2, #1
 8010092:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2220      	movs	r2, #32
 8010098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80100a0:	2b01      	cmp	r3, #1
 80100a2:	d135      	bne.n	8010110 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	2200      	movs	r2, #0
 80100a8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	330c      	adds	r3, #12
 80100b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100b2:	697b      	ldr	r3, [r7, #20]
 80100b4:	e853 3f00 	ldrex	r3, [r3]
 80100b8:	613b      	str	r3, [r7, #16]
   return(result);
 80100ba:	693b      	ldr	r3, [r7, #16]
 80100bc:	f023 0310 	bic.w	r3, r3, #16
 80100c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	330c      	adds	r3, #12
 80100c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80100ca:	623a      	str	r2, [r7, #32]
 80100cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100ce:	69f9      	ldr	r1, [r7, #28]
 80100d0:	6a3a      	ldr	r2, [r7, #32]
 80100d2:	e841 2300 	strex	r3, r2, [r1]
 80100d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80100d8:	69bb      	ldr	r3, [r7, #24]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d1e5      	bne.n	80100aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	f003 0310 	and.w	r3, r3, #16
 80100e8:	2b10      	cmp	r3, #16
 80100ea:	d10a      	bne.n	8010102 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80100ec:	2300      	movs	r3, #0
 80100ee:	60fb      	str	r3, [r7, #12]
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	60fb      	str	r3, [r7, #12]
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	685b      	ldr	r3, [r3, #4]
 80100fe:	60fb      	str	r3, [r7, #12]
 8010100:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8010106:	4619      	mov	r1, r3
 8010108:	6878      	ldr	r0, [r7, #4]
 801010a:	f7ff fe29 	bl	800fd60 <HAL_UARTEx_RxEventCallback>
 801010e:	e002      	b.n	8010116 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f7fc fb55 	bl	800c7c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8010116:	2300      	movs	r3, #0
 8010118:	e002      	b.n	8010120 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 801011a:	2300      	movs	r3, #0
 801011c:	e000      	b.n	8010120 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 801011e:	2302      	movs	r3, #2
  }
}
 8010120:	4618      	mov	r0, r3
 8010122:	3730      	adds	r7, #48	@ 0x30
 8010124:	46bd      	mov	sp, r7
 8010126:	bd80      	pop	{r7, pc}

08010128 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801012c:	b0c0      	sub	sp, #256	@ 0x100
 801012e:	af00      	add	r7, sp, #0
 8010130:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	691b      	ldr	r3, [r3, #16]
 801013c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8010140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010144:	68d9      	ldr	r1, [r3, #12]
 8010146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801014a:	681a      	ldr	r2, [r3, #0]
 801014c:	ea40 0301 	orr.w	r3, r0, r1
 8010150:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010156:	689a      	ldr	r2, [r3, #8]
 8010158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801015c:	691b      	ldr	r3, [r3, #16]
 801015e:	431a      	orrs	r2, r3
 8010160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010164:	695b      	ldr	r3, [r3, #20]
 8010166:	431a      	orrs	r2, r3
 8010168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801016c:	69db      	ldr	r3, [r3, #28]
 801016e:	4313      	orrs	r3, r2
 8010170:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8010174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	68db      	ldr	r3, [r3, #12]
 801017c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8010180:	f021 010c 	bic.w	r1, r1, #12
 8010184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010188:	681a      	ldr	r2, [r3, #0]
 801018a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801018e:	430b      	orrs	r3, r1
 8010190:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	695b      	ldr	r3, [r3, #20]
 801019a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 801019e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80101a2:	6999      	ldr	r1, [r3, #24]
 80101a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80101a8:	681a      	ldr	r2, [r3, #0]
 80101aa:	ea40 0301 	orr.w	r3, r0, r1
 80101ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80101b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80101b4:	681a      	ldr	r2, [r3, #0]
 80101b6:	4b8f      	ldr	r3, [pc, #572]	@ (80103f4 <UART_SetConfig+0x2cc>)
 80101b8:	429a      	cmp	r2, r3
 80101ba:	d005      	beq.n	80101c8 <UART_SetConfig+0xa0>
 80101bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80101c0:	681a      	ldr	r2, [r3, #0]
 80101c2:	4b8d      	ldr	r3, [pc, #564]	@ (80103f8 <UART_SetConfig+0x2d0>)
 80101c4:	429a      	cmp	r2, r3
 80101c6:	d104      	bne.n	80101d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80101c8:	f7fd fb64 	bl	800d894 <HAL_RCC_GetPCLK2Freq>
 80101cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80101d0:	e003      	b.n	80101da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80101d2:	f7fd fb4b 	bl	800d86c <HAL_RCC_GetPCLK1Freq>
 80101d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80101da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80101de:	69db      	ldr	r3, [r3, #28]
 80101e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80101e4:	f040 810c 	bne.w	8010400 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80101e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80101ec:	2200      	movs	r2, #0
 80101ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80101f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80101f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80101fa:	4622      	mov	r2, r4
 80101fc:	462b      	mov	r3, r5
 80101fe:	1891      	adds	r1, r2, r2
 8010200:	65b9      	str	r1, [r7, #88]	@ 0x58
 8010202:	415b      	adcs	r3, r3
 8010204:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010206:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 801020a:	4621      	mov	r1, r4
 801020c:	eb12 0801 	adds.w	r8, r2, r1
 8010210:	4629      	mov	r1, r5
 8010212:	eb43 0901 	adc.w	r9, r3, r1
 8010216:	f04f 0200 	mov.w	r2, #0
 801021a:	f04f 0300 	mov.w	r3, #0
 801021e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8010222:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8010226:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801022a:	4690      	mov	r8, r2
 801022c:	4699      	mov	r9, r3
 801022e:	4623      	mov	r3, r4
 8010230:	eb18 0303 	adds.w	r3, r8, r3
 8010234:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8010238:	462b      	mov	r3, r5
 801023a:	eb49 0303 	adc.w	r3, r9, r3
 801023e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8010242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010246:	685b      	ldr	r3, [r3, #4]
 8010248:	2200      	movs	r2, #0
 801024a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801024e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8010252:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8010256:	460b      	mov	r3, r1
 8010258:	18db      	adds	r3, r3, r3
 801025a:	653b      	str	r3, [r7, #80]	@ 0x50
 801025c:	4613      	mov	r3, r2
 801025e:	eb42 0303 	adc.w	r3, r2, r3
 8010262:	657b      	str	r3, [r7, #84]	@ 0x54
 8010264:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8010268:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 801026c:	f7f0 fd1c 	bl	8000ca8 <__aeabi_uldivmod>
 8010270:	4602      	mov	r2, r0
 8010272:	460b      	mov	r3, r1
 8010274:	4b61      	ldr	r3, [pc, #388]	@ (80103fc <UART_SetConfig+0x2d4>)
 8010276:	fba3 2302 	umull	r2, r3, r3, r2
 801027a:	095b      	lsrs	r3, r3, #5
 801027c:	011c      	lsls	r4, r3, #4
 801027e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010282:	2200      	movs	r2, #0
 8010284:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010288:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 801028c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8010290:	4642      	mov	r2, r8
 8010292:	464b      	mov	r3, r9
 8010294:	1891      	adds	r1, r2, r2
 8010296:	64b9      	str	r1, [r7, #72]	@ 0x48
 8010298:	415b      	adcs	r3, r3
 801029a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801029c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80102a0:	4641      	mov	r1, r8
 80102a2:	eb12 0a01 	adds.w	sl, r2, r1
 80102a6:	4649      	mov	r1, r9
 80102a8:	eb43 0b01 	adc.w	fp, r3, r1
 80102ac:	f04f 0200 	mov.w	r2, #0
 80102b0:	f04f 0300 	mov.w	r3, #0
 80102b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80102b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80102bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80102c0:	4692      	mov	sl, r2
 80102c2:	469b      	mov	fp, r3
 80102c4:	4643      	mov	r3, r8
 80102c6:	eb1a 0303 	adds.w	r3, sl, r3
 80102ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80102ce:	464b      	mov	r3, r9
 80102d0:	eb4b 0303 	adc.w	r3, fp, r3
 80102d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80102d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80102dc:	685b      	ldr	r3, [r3, #4]
 80102de:	2200      	movs	r2, #0
 80102e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80102e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80102e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80102ec:	460b      	mov	r3, r1
 80102ee:	18db      	adds	r3, r3, r3
 80102f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80102f2:	4613      	mov	r3, r2
 80102f4:	eb42 0303 	adc.w	r3, r2, r3
 80102f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80102fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80102fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8010302:	f7f0 fcd1 	bl	8000ca8 <__aeabi_uldivmod>
 8010306:	4602      	mov	r2, r0
 8010308:	460b      	mov	r3, r1
 801030a:	4611      	mov	r1, r2
 801030c:	4b3b      	ldr	r3, [pc, #236]	@ (80103fc <UART_SetConfig+0x2d4>)
 801030e:	fba3 2301 	umull	r2, r3, r3, r1
 8010312:	095b      	lsrs	r3, r3, #5
 8010314:	2264      	movs	r2, #100	@ 0x64
 8010316:	fb02 f303 	mul.w	r3, r2, r3
 801031a:	1acb      	subs	r3, r1, r3
 801031c:	00db      	lsls	r3, r3, #3
 801031e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8010322:	4b36      	ldr	r3, [pc, #216]	@ (80103fc <UART_SetConfig+0x2d4>)
 8010324:	fba3 2302 	umull	r2, r3, r3, r2
 8010328:	095b      	lsrs	r3, r3, #5
 801032a:	005b      	lsls	r3, r3, #1
 801032c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8010330:	441c      	add	r4, r3
 8010332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010336:	2200      	movs	r2, #0
 8010338:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801033c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8010340:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8010344:	4642      	mov	r2, r8
 8010346:	464b      	mov	r3, r9
 8010348:	1891      	adds	r1, r2, r2
 801034a:	63b9      	str	r1, [r7, #56]	@ 0x38
 801034c:	415b      	adcs	r3, r3
 801034e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010350:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8010354:	4641      	mov	r1, r8
 8010356:	1851      	adds	r1, r2, r1
 8010358:	6339      	str	r1, [r7, #48]	@ 0x30
 801035a:	4649      	mov	r1, r9
 801035c:	414b      	adcs	r3, r1
 801035e:	637b      	str	r3, [r7, #52]	@ 0x34
 8010360:	f04f 0200 	mov.w	r2, #0
 8010364:	f04f 0300 	mov.w	r3, #0
 8010368:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 801036c:	4659      	mov	r1, fp
 801036e:	00cb      	lsls	r3, r1, #3
 8010370:	4651      	mov	r1, sl
 8010372:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010376:	4651      	mov	r1, sl
 8010378:	00ca      	lsls	r2, r1, #3
 801037a:	4610      	mov	r0, r2
 801037c:	4619      	mov	r1, r3
 801037e:	4603      	mov	r3, r0
 8010380:	4642      	mov	r2, r8
 8010382:	189b      	adds	r3, r3, r2
 8010384:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010388:	464b      	mov	r3, r9
 801038a:	460a      	mov	r2, r1
 801038c:	eb42 0303 	adc.w	r3, r2, r3
 8010390:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010398:	685b      	ldr	r3, [r3, #4]
 801039a:	2200      	movs	r2, #0
 801039c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80103a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80103a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80103a8:	460b      	mov	r3, r1
 80103aa:	18db      	adds	r3, r3, r3
 80103ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80103ae:	4613      	mov	r3, r2
 80103b0:	eb42 0303 	adc.w	r3, r2, r3
 80103b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80103b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80103ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80103be:	f7f0 fc73 	bl	8000ca8 <__aeabi_uldivmod>
 80103c2:	4602      	mov	r2, r0
 80103c4:	460b      	mov	r3, r1
 80103c6:	4b0d      	ldr	r3, [pc, #52]	@ (80103fc <UART_SetConfig+0x2d4>)
 80103c8:	fba3 1302 	umull	r1, r3, r3, r2
 80103cc:	095b      	lsrs	r3, r3, #5
 80103ce:	2164      	movs	r1, #100	@ 0x64
 80103d0:	fb01 f303 	mul.w	r3, r1, r3
 80103d4:	1ad3      	subs	r3, r2, r3
 80103d6:	00db      	lsls	r3, r3, #3
 80103d8:	3332      	adds	r3, #50	@ 0x32
 80103da:	4a08      	ldr	r2, [pc, #32]	@ (80103fc <UART_SetConfig+0x2d4>)
 80103dc:	fba2 2303 	umull	r2, r3, r2, r3
 80103e0:	095b      	lsrs	r3, r3, #5
 80103e2:	f003 0207 	and.w	r2, r3, #7
 80103e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	4422      	add	r2, r4
 80103ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80103f0:	e106      	b.n	8010600 <UART_SetConfig+0x4d8>
 80103f2:	bf00      	nop
 80103f4:	40011000 	.word	0x40011000
 80103f8:	40011400 	.word	0x40011400
 80103fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010400:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010404:	2200      	movs	r2, #0
 8010406:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801040a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801040e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8010412:	4642      	mov	r2, r8
 8010414:	464b      	mov	r3, r9
 8010416:	1891      	adds	r1, r2, r2
 8010418:	6239      	str	r1, [r7, #32]
 801041a:	415b      	adcs	r3, r3
 801041c:	627b      	str	r3, [r7, #36]	@ 0x24
 801041e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010422:	4641      	mov	r1, r8
 8010424:	1854      	adds	r4, r2, r1
 8010426:	4649      	mov	r1, r9
 8010428:	eb43 0501 	adc.w	r5, r3, r1
 801042c:	f04f 0200 	mov.w	r2, #0
 8010430:	f04f 0300 	mov.w	r3, #0
 8010434:	00eb      	lsls	r3, r5, #3
 8010436:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801043a:	00e2      	lsls	r2, r4, #3
 801043c:	4614      	mov	r4, r2
 801043e:	461d      	mov	r5, r3
 8010440:	4643      	mov	r3, r8
 8010442:	18e3      	adds	r3, r4, r3
 8010444:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8010448:	464b      	mov	r3, r9
 801044a:	eb45 0303 	adc.w	r3, r5, r3
 801044e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010456:	685b      	ldr	r3, [r3, #4]
 8010458:	2200      	movs	r2, #0
 801045a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801045e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8010462:	f04f 0200 	mov.w	r2, #0
 8010466:	f04f 0300 	mov.w	r3, #0
 801046a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 801046e:	4629      	mov	r1, r5
 8010470:	008b      	lsls	r3, r1, #2
 8010472:	4621      	mov	r1, r4
 8010474:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010478:	4621      	mov	r1, r4
 801047a:	008a      	lsls	r2, r1, #2
 801047c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8010480:	f7f0 fc12 	bl	8000ca8 <__aeabi_uldivmod>
 8010484:	4602      	mov	r2, r0
 8010486:	460b      	mov	r3, r1
 8010488:	4b60      	ldr	r3, [pc, #384]	@ (801060c <UART_SetConfig+0x4e4>)
 801048a:	fba3 2302 	umull	r2, r3, r3, r2
 801048e:	095b      	lsrs	r3, r3, #5
 8010490:	011c      	lsls	r4, r3, #4
 8010492:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010496:	2200      	movs	r2, #0
 8010498:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801049c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80104a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80104a4:	4642      	mov	r2, r8
 80104a6:	464b      	mov	r3, r9
 80104a8:	1891      	adds	r1, r2, r2
 80104aa:	61b9      	str	r1, [r7, #24]
 80104ac:	415b      	adcs	r3, r3
 80104ae:	61fb      	str	r3, [r7, #28]
 80104b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80104b4:	4641      	mov	r1, r8
 80104b6:	1851      	adds	r1, r2, r1
 80104b8:	6139      	str	r1, [r7, #16]
 80104ba:	4649      	mov	r1, r9
 80104bc:	414b      	adcs	r3, r1
 80104be:	617b      	str	r3, [r7, #20]
 80104c0:	f04f 0200 	mov.w	r2, #0
 80104c4:	f04f 0300 	mov.w	r3, #0
 80104c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80104cc:	4659      	mov	r1, fp
 80104ce:	00cb      	lsls	r3, r1, #3
 80104d0:	4651      	mov	r1, sl
 80104d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80104d6:	4651      	mov	r1, sl
 80104d8:	00ca      	lsls	r2, r1, #3
 80104da:	4610      	mov	r0, r2
 80104dc:	4619      	mov	r1, r3
 80104de:	4603      	mov	r3, r0
 80104e0:	4642      	mov	r2, r8
 80104e2:	189b      	adds	r3, r3, r2
 80104e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80104e8:	464b      	mov	r3, r9
 80104ea:	460a      	mov	r2, r1
 80104ec:	eb42 0303 	adc.w	r3, r2, r3
 80104f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80104f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80104f8:	685b      	ldr	r3, [r3, #4]
 80104fa:	2200      	movs	r2, #0
 80104fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80104fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8010500:	f04f 0200 	mov.w	r2, #0
 8010504:	f04f 0300 	mov.w	r3, #0
 8010508:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 801050c:	4649      	mov	r1, r9
 801050e:	008b      	lsls	r3, r1, #2
 8010510:	4641      	mov	r1, r8
 8010512:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010516:	4641      	mov	r1, r8
 8010518:	008a      	lsls	r2, r1, #2
 801051a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 801051e:	f7f0 fbc3 	bl	8000ca8 <__aeabi_uldivmod>
 8010522:	4602      	mov	r2, r0
 8010524:	460b      	mov	r3, r1
 8010526:	4611      	mov	r1, r2
 8010528:	4b38      	ldr	r3, [pc, #224]	@ (801060c <UART_SetConfig+0x4e4>)
 801052a:	fba3 2301 	umull	r2, r3, r3, r1
 801052e:	095b      	lsrs	r3, r3, #5
 8010530:	2264      	movs	r2, #100	@ 0x64
 8010532:	fb02 f303 	mul.w	r3, r2, r3
 8010536:	1acb      	subs	r3, r1, r3
 8010538:	011b      	lsls	r3, r3, #4
 801053a:	3332      	adds	r3, #50	@ 0x32
 801053c:	4a33      	ldr	r2, [pc, #204]	@ (801060c <UART_SetConfig+0x4e4>)
 801053e:	fba2 2303 	umull	r2, r3, r2, r3
 8010542:	095b      	lsrs	r3, r3, #5
 8010544:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010548:	441c      	add	r4, r3
 801054a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801054e:	2200      	movs	r2, #0
 8010550:	673b      	str	r3, [r7, #112]	@ 0x70
 8010552:	677a      	str	r2, [r7, #116]	@ 0x74
 8010554:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8010558:	4642      	mov	r2, r8
 801055a:	464b      	mov	r3, r9
 801055c:	1891      	adds	r1, r2, r2
 801055e:	60b9      	str	r1, [r7, #8]
 8010560:	415b      	adcs	r3, r3
 8010562:	60fb      	str	r3, [r7, #12]
 8010564:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010568:	4641      	mov	r1, r8
 801056a:	1851      	adds	r1, r2, r1
 801056c:	6039      	str	r1, [r7, #0]
 801056e:	4649      	mov	r1, r9
 8010570:	414b      	adcs	r3, r1
 8010572:	607b      	str	r3, [r7, #4]
 8010574:	f04f 0200 	mov.w	r2, #0
 8010578:	f04f 0300 	mov.w	r3, #0
 801057c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8010580:	4659      	mov	r1, fp
 8010582:	00cb      	lsls	r3, r1, #3
 8010584:	4651      	mov	r1, sl
 8010586:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801058a:	4651      	mov	r1, sl
 801058c:	00ca      	lsls	r2, r1, #3
 801058e:	4610      	mov	r0, r2
 8010590:	4619      	mov	r1, r3
 8010592:	4603      	mov	r3, r0
 8010594:	4642      	mov	r2, r8
 8010596:	189b      	adds	r3, r3, r2
 8010598:	66bb      	str	r3, [r7, #104]	@ 0x68
 801059a:	464b      	mov	r3, r9
 801059c:	460a      	mov	r2, r1
 801059e:	eb42 0303 	adc.w	r3, r2, r3
 80105a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80105a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80105a8:	685b      	ldr	r3, [r3, #4]
 80105aa:	2200      	movs	r2, #0
 80105ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80105ae:	667a      	str	r2, [r7, #100]	@ 0x64
 80105b0:	f04f 0200 	mov.w	r2, #0
 80105b4:	f04f 0300 	mov.w	r3, #0
 80105b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80105bc:	4649      	mov	r1, r9
 80105be:	008b      	lsls	r3, r1, #2
 80105c0:	4641      	mov	r1, r8
 80105c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80105c6:	4641      	mov	r1, r8
 80105c8:	008a      	lsls	r2, r1, #2
 80105ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80105ce:	f7f0 fb6b 	bl	8000ca8 <__aeabi_uldivmod>
 80105d2:	4602      	mov	r2, r0
 80105d4:	460b      	mov	r3, r1
 80105d6:	4b0d      	ldr	r3, [pc, #52]	@ (801060c <UART_SetConfig+0x4e4>)
 80105d8:	fba3 1302 	umull	r1, r3, r3, r2
 80105dc:	095b      	lsrs	r3, r3, #5
 80105de:	2164      	movs	r1, #100	@ 0x64
 80105e0:	fb01 f303 	mul.w	r3, r1, r3
 80105e4:	1ad3      	subs	r3, r2, r3
 80105e6:	011b      	lsls	r3, r3, #4
 80105e8:	3332      	adds	r3, #50	@ 0x32
 80105ea:	4a08      	ldr	r2, [pc, #32]	@ (801060c <UART_SetConfig+0x4e4>)
 80105ec:	fba2 2303 	umull	r2, r3, r2, r3
 80105f0:	095b      	lsrs	r3, r3, #5
 80105f2:	f003 020f 	and.w	r2, r3, #15
 80105f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	4422      	add	r2, r4
 80105fe:	609a      	str	r2, [r3, #8]
}
 8010600:	bf00      	nop
 8010602:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8010606:	46bd      	mov	sp, r7
 8010608:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801060c:	51eb851f 	.word	0x51eb851f

08010610 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8010610:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010612:	2400      	movs	r4, #0
 8010614:	2310      	movs	r3, #16
 8010616:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801061a:	6803      	ldr	r3, [r0, #0]
 801061c:	4615      	mov	r5, r2
 801061e:	699e      	ldr	r6, [r3, #24]
 8010620:	6812      	ldr	r2, [r2, #0]
 8010622:	466b      	mov	r3, sp
 8010624:	e9cd 4400 	strd	r4, r4, [sp]
 8010628:	47b0      	blx	r6
 801062a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801062e:	f003 0306 	and.w	r3, r3, #6
 8010632:	2b06      	cmp	r3, #6
 8010634:	bf03      	ittte	eq
 8010636:	9b00      	ldreq	r3, [sp, #0]
 8010638:	602b      	streq	r3, [r5, #0]
 801063a:	2001      	moveq	r0, #1
 801063c:	4620      	movne	r0, r4
 801063e:	b004      	add	sp, #16
 8010640:	bd70      	pop	{r4, r5, r6, pc}

08010642 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8010642:	9800      	ldr	r0, [sp, #0]
 8010644:	4290      	cmp	r0, r2
 8010646:	bf0c      	ite	eq
 8010648:	2006      	moveq	r0, #6
 801064a:	2001      	movne	r0, #1
 801064c:	4770      	bx	lr
	...

08010650 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8010650:	b510      	push	{r4, lr}
 8010652:	4b03      	ldr	r3, [pc, #12]	@ (8010660 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8010654:	6003      	str	r3, [r0, #0]
 8010656:	4604      	mov	r4, r0
 8010658:	f000 fd3d 	bl	80110d6 <_ZNSt9type_infoD1Ev>
 801065c:	4620      	mov	r0, r4
 801065e:	bd10      	pop	{r4, pc}
 8010660:	080151d0 	.word	0x080151d0

08010664 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8010664:	b510      	push	{r4, lr}
 8010666:	4604      	mov	r4, r0
 8010668:	f7ff fff2 	bl	8010650 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 801066c:	4620      	mov	r0, r4
 801066e:	2108      	movs	r1, #8
 8010670:	f000 f842 	bl	80106f8 <_ZdlPvj>
 8010674:	4620      	mov	r0, r4
 8010676:	bd10      	pop	{r4, pc}

08010678 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8010678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801067c:	461f      	mov	r7, r3
 801067e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8010682:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8010686:	4598      	cmp	r8, r3
 8010688:	4606      	mov	r6, r0
 801068a:	4615      	mov	r5, r2
 801068c:	d107      	bne.n	801069e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 801068e:	9907      	ldr	r1, [sp, #28]
 8010690:	f000 fd24 	bl	80110dc <_ZNKSt9type_info7__equalERKS_>
 8010694:	b118      	cbz	r0, 801069e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8010696:	7165      	strb	r5, [r4, #5]
 8010698:	2000      	movs	r0, #0
 801069a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801069e:	4639      	mov	r1, r7
 80106a0:	4630      	mov	r0, r6
 80106a2:	f000 fd1b 	bl	80110dc <_ZNKSt9type_info7__equalERKS_>
 80106a6:	2800      	cmp	r0, #0
 80106a8:	d0f6      	beq.n	8010698 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 80106aa:	2301      	movs	r3, #1
 80106ac:	f8c4 8000 	str.w	r8, [r4]
 80106b0:	7125      	strb	r5, [r4, #4]
 80106b2:	71a3      	strb	r3, [r4, #6]
 80106b4:	e7f0      	b.n	8010698 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080106b6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80106b6:	b538      	push	{r3, r4, r5, lr}
 80106b8:	4615      	mov	r5, r2
 80106ba:	461c      	mov	r4, r3
 80106bc:	f000 fd0e 	bl	80110dc <_ZNKSt9type_info7__equalERKS_>
 80106c0:	b120      	cbz	r0, 80106cc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80106c2:	2308      	movs	r3, #8
 80106c4:	60e3      	str	r3, [r4, #12]
 80106c6:	2306      	movs	r3, #6
 80106c8:	6025      	str	r5, [r4, #0]
 80106ca:	7123      	strb	r3, [r4, #4]
 80106cc:	bd38      	pop	{r3, r4, r5, pc}

080106ce <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80106ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106d2:	4605      	mov	r5, r0
 80106d4:	460c      	mov	r4, r1
 80106d6:	4616      	mov	r6, r2
 80106d8:	461f      	mov	r7, r3
 80106da:	f000 fcff 	bl	80110dc <_ZNKSt9type_info7__equalERKS_>
 80106de:	b948      	cbnz	r0, 80106f4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80106e0:	2f03      	cmp	r7, #3
 80106e2:	d807      	bhi.n	80106f4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80106e4:	6823      	ldr	r3, [r4, #0]
 80106e6:	4632      	mov	r2, r6
 80106e8:	4629      	mov	r1, r5
 80106ea:	4620      	mov	r0, r4
 80106ec:	695b      	ldr	r3, [r3, #20]
 80106ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80106f2:	4718      	bx	r3
 80106f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080106f8 <_ZdlPvj>:
 80106f8:	f000 bdd6 	b.w	80112a8 <_ZdlPv>

080106fc <_ZdaPv>:
 80106fc:	f000 bdd4 	b.w	80112a8 <_ZdlPv>

08010700 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>:
 8010700:	4a19      	ldr	r2, [pc, #100]	@ (8010768 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x68>)
 8010702:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8010706:	6853      	ldr	r3, [r2, #4]
 8010708:	b570      	push	{r4, r5, r6, lr}
 801070a:	f1a0 0408 	sub.w	r4, r0, #8
 801070e:	b113      	cbz	r3, 8010716 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x16>
 8010710:	1865      	adds	r5, r4, r1
 8010712:	42ab      	cmp	r3, r5
 8010714:	d903      	bls.n	801071e <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1e>
 8010716:	f840 3c04 	str.w	r3, [r0, #-4]
 801071a:	6054      	str	r4, [r2, #4]
 801071c:	bd70      	pop	{r4, r5, r6, pc}
 801071e:	685e      	ldr	r6, [r3, #4]
 8010720:	d11f      	bne.n	8010762 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x62>
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	440b      	add	r3, r1
 8010726:	e940 3602 	strd	r3, r6, [r0, #-8]
 801072a:	e7f6      	b.n	801071a <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1a>
 801072c:	1d1a      	adds	r2, r3, #4
 801072e:	4633      	mov	r3, r6
 8010730:	685e      	ldr	r6, [r3, #4]
 8010732:	b136      	cbz	r6, 8010742 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x42>
 8010734:	42b5      	cmp	r5, r6
 8010736:	d3f9      	bcc.n	801072c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x2c>
 8010738:	bf01      	itttt	eq
 801073a:	682e      	ldreq	r6, [r5, #0]
 801073c:	686d      	ldreq	r5, [r5, #4]
 801073e:	605d      	streq	r5, [r3, #4]
 8010740:	1989      	addeq	r1, r1, r6
 8010742:	6813      	ldr	r3, [r2, #0]
 8010744:	681d      	ldr	r5, [r3, #0]
 8010746:	195e      	adds	r6, r3, r5
 8010748:	42b4      	cmp	r4, r6
 801074a:	bf1f      	itttt	ne
 801074c:	685b      	ldrne	r3, [r3, #4]
 801074e:	f840 3c04 	strne.w	r3, [r0, #-4]
 8010752:	6813      	ldrne	r3, [r2, #0]
 8010754:	f840 1c08 	strne.w	r1, [r0, #-8]
 8010758:	bf06      	itte	eq
 801075a:	186d      	addeq	r5, r5, r1
 801075c:	601d      	streq	r5, [r3, #0]
 801075e:	605c      	strne	r4, [r3, #4]
 8010760:	e7dc      	b.n	801071c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1c>
 8010762:	3204      	adds	r2, #4
 8010764:	e7e4      	b.n	8010730 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x30>
 8010766:	bf00      	nop
 8010768:	200003c0 	.word	0x200003c0

0801076c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>:
 801076c:	3008      	adds	r0, #8
 801076e:	2808      	cmp	r0, #8
 8010770:	b530      	push	{r4, r5, lr}
 8010772:	4a0f      	ldr	r2, [pc, #60]	@ (80107b0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x44>)
 8010774:	bf38      	it	cc
 8010776:	2008      	movcc	r0, #8
 8010778:	3007      	adds	r0, #7
 801077a:	f020 0307 	bic.w	r3, r0, #7
 801077e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8010782:	b198      	cbz	r0, 80107ac <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x40>
 8010784:	6801      	ldr	r1, [r0, #0]
 8010786:	428b      	cmp	r3, r1
 8010788:	d806      	bhi.n	8010798 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x2c>
 801078a:	1acd      	subs	r5, r1, r3
 801078c:	2d07      	cmp	r5, #7
 801078e:	6844      	ldr	r4, [r0, #4]
 8010790:	d805      	bhi.n	801079e <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x32>
 8010792:	6001      	str	r1, [r0, #0]
 8010794:	4621      	mov	r1, r4
 8010796:	e007      	b.n	80107a8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x3c>
 8010798:	1d02      	adds	r2, r0, #4
 801079a:	6840      	ldr	r0, [r0, #4]
 801079c:	e7f1      	b.n	8010782 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x16>
 801079e:	18c1      	adds	r1, r0, r3
 80107a0:	604c      	str	r4, [r1, #4]
 80107a2:	50c5      	str	r5, [r0, r3]
 80107a4:	6810      	ldr	r0, [r2, #0]
 80107a6:	6003      	str	r3, [r0, #0]
 80107a8:	6011      	str	r1, [r2, #0]
 80107aa:	3008      	adds	r0, #8
 80107ac:	bd30      	pop	{r4, r5, pc}
 80107ae:	bf00      	nop
 80107b0:	200003c0 	.word	0x200003c0

080107b4 <__cxa_allocate_exception>:
 80107b4:	b510      	push	{r4, lr}
 80107b6:	f100 0480 	add.w	r4, r0, #128	@ 0x80
 80107ba:	4620      	mov	r0, r4
 80107bc:	f000 fe0c 	bl	80113d8 <malloc>
 80107c0:	4603      	mov	r3, r0
 80107c2:	b930      	cbnz	r0, 80107d2 <__cxa_allocate_exception+0x1e>
 80107c4:	4620      	mov	r0, r4
 80107c6:	f7ff ffd1 	bl	801076c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>
 80107ca:	4603      	mov	r3, r0
 80107cc:	b908      	cbnz	r0, 80107d2 <__cxa_allocate_exception+0x1e>
 80107ce:	f000 fb6d 	bl	8010eac <_ZSt9terminatev>
 80107d2:	2280      	movs	r2, #128	@ 0x80
 80107d4:	2100      	movs	r1, #0
 80107d6:	4618      	mov	r0, r3
 80107d8:	f001 fc27 	bl	801202a <memset>
 80107dc:	3080      	adds	r0, #128	@ 0x80
 80107de:	bd10      	pop	{r4, pc}

080107e0 <__cxa_free_exception>:
 80107e0:	4a06      	ldr	r2, [pc, #24]	@ (80107fc <__cxa_free_exception+0x1c>)
 80107e2:	6893      	ldr	r3, [r2, #8]
 80107e4:	3880      	subs	r0, #128	@ 0x80
 80107e6:	4298      	cmp	r0, r3
 80107e8:	d905      	bls.n	80107f6 <__cxa_free_exception+0x16>
 80107ea:	68d2      	ldr	r2, [r2, #12]
 80107ec:	4413      	add	r3, r2
 80107ee:	4298      	cmp	r0, r3
 80107f0:	d201      	bcs.n	80107f6 <__cxa_free_exception+0x16>
 80107f2:	f7ff bf85 	b.w	8010700 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
 80107f6:	f000 bdf7 	b.w	80113e8 <free>
 80107fa:	bf00      	nop
 80107fc:	200003c0 	.word	0x200003c0

08010800 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 8010800:	b538      	push	{r3, r4, r5, lr}
 8010802:	4c08      	ldr	r4, [pc, #32]	@ (8010824 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 8010804:	f44f 651e 	mov.w	r5, #2528	@ 0x9e0
 8010808:	4628      	mov	r0, r5
 801080a:	60e5      	str	r5, [r4, #12]
 801080c:	f000 fde4 	bl	80113d8 <malloc>
 8010810:	60a0      	str	r0, [r4, #8]
 8010812:	b910      	cbnz	r0, 801081a <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1a>
 8010814:	60e0      	str	r0, [r4, #12]
 8010816:	6060      	str	r0, [r4, #4]
 8010818:	bd38      	pop	{r3, r4, r5, pc}
 801081a:	2300      	movs	r3, #0
 801081c:	6060      	str	r0, [r4, #4]
 801081e:	6005      	str	r5, [r0, #0]
 8010820:	6043      	str	r3, [r0, #4]
 8010822:	e7f9      	b.n	8010818 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x18>
 8010824:	200003c0 	.word	0x200003c0

08010828 <__cxa_end_cleanup>:
 8010828:	b41e      	push	{r1, r2, r3, r4}
 801082a:	f000 f89c 	bl	8010966 <__gnu_end_cleanup>
 801082e:	bc1e      	pop	{r1, r2, r3, r4}
 8010830:	f7f1 f938 	bl	8001aa4 <_Unwind_Resume>

08010834 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8010834:	7803      	ldrb	r3, [r0, #0]
 8010836:	2b47      	cmp	r3, #71	@ 0x47
 8010838:	d117      	bne.n	801086a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801083a:	7843      	ldrb	r3, [r0, #1]
 801083c:	2b4e      	cmp	r3, #78	@ 0x4e
 801083e:	d114      	bne.n	801086a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8010840:	7883      	ldrb	r3, [r0, #2]
 8010842:	2b55      	cmp	r3, #85	@ 0x55
 8010844:	d111      	bne.n	801086a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8010846:	78c3      	ldrb	r3, [r0, #3]
 8010848:	2b43      	cmp	r3, #67	@ 0x43
 801084a:	d10e      	bne.n	801086a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801084c:	7903      	ldrb	r3, [r0, #4]
 801084e:	2b43      	cmp	r3, #67	@ 0x43
 8010850:	d10b      	bne.n	801086a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8010852:	7943      	ldrb	r3, [r0, #5]
 8010854:	2b2b      	cmp	r3, #43	@ 0x2b
 8010856:	d108      	bne.n	801086a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8010858:	7983      	ldrb	r3, [r0, #6]
 801085a:	2b2b      	cmp	r3, #43	@ 0x2b
 801085c:	d105      	bne.n	801086a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801085e:	79c0      	ldrb	r0, [r0, #7]
 8010860:	2801      	cmp	r0, #1
 8010862:	bf8c      	ite	hi
 8010864:	2000      	movhi	r0, #0
 8010866:	2001      	movls	r0, #1
 8010868:	4770      	bx	lr
 801086a:	2000      	movs	r0, #0
 801086c:	4770      	bx	lr
	...

08010870 <__cxa_type_match>:
 8010870:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010874:	461d      	mov	r5, r3
 8010876:	7803      	ldrb	r3, [r0, #0]
 8010878:	2b47      	cmp	r3, #71	@ 0x47
 801087a:	460e      	mov	r6, r1
 801087c:	4602      	mov	r2, r0
 801087e:	79c1      	ldrb	r1, [r0, #7]
 8010880:	d113      	bne.n	80108aa <__cxa_type_match+0x3a>
 8010882:	7843      	ldrb	r3, [r0, #1]
 8010884:	2b4e      	cmp	r3, #78	@ 0x4e
 8010886:	d110      	bne.n	80108aa <__cxa_type_match+0x3a>
 8010888:	7883      	ldrb	r3, [r0, #2]
 801088a:	2b55      	cmp	r3, #85	@ 0x55
 801088c:	d10d      	bne.n	80108aa <__cxa_type_match+0x3a>
 801088e:	78c3      	ldrb	r3, [r0, #3]
 8010890:	2b43      	cmp	r3, #67	@ 0x43
 8010892:	d10a      	bne.n	80108aa <__cxa_type_match+0x3a>
 8010894:	7903      	ldrb	r3, [r0, #4]
 8010896:	2b46      	cmp	r3, #70	@ 0x46
 8010898:	d107      	bne.n	80108aa <__cxa_type_match+0x3a>
 801089a:	7943      	ldrb	r3, [r0, #5]
 801089c:	2b4f      	cmp	r3, #79	@ 0x4f
 801089e:	d104      	bne.n	80108aa <__cxa_type_match+0x3a>
 80108a0:	7983      	ldrb	r3, [r0, #6]
 80108a2:	2b52      	cmp	r3, #82	@ 0x52
 80108a4:	d101      	bne.n	80108aa <__cxa_type_match+0x3a>
 80108a6:	2900      	cmp	r1, #0
 80108a8:	d031      	beq.n	801090e <__cxa_type_match+0x9e>
 80108aa:	4610      	mov	r0, r2
 80108ac:	f7ff ffc2 	bl	8010834 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80108b0:	f080 0401 	eor.w	r4, r0, #1
 80108b4:	b2e4      	uxtb	r4, r4
 80108b6:	2300      	movs	r3, #0
 80108b8:	2000      	movs	r0, #0
 80108ba:	9001      	str	r0, [sp, #4]
 80108bc:	bb53      	cbnz	r3, 8010914 <__cxa_type_match+0xa4>
 80108be:	bb5c      	cbnz	r4, 8010918 <__cxa_type_match+0xa8>
 80108c0:	2901      	cmp	r1, #1
 80108c2:	bf0a      	itet	eq
 80108c4:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 80108c8:	f1a2 0320 	subne.w	r3, r2, #32
 80108cc:	3b78      	subeq	r3, #120	@ 0x78
 80108ce:	2901      	cmp	r1, #1
 80108d0:	bf08      	it	eq
 80108d2:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 80108d6:	681c      	ldr	r4, [r3, #0]
 80108d8:	bf18      	it	ne
 80108da:	3258      	addne	r2, #88	@ 0x58
 80108dc:	9201      	str	r2, [sp, #4]
 80108de:	6823      	ldr	r3, [r4, #0]
 80108e0:	4620      	mov	r0, r4
 80108e2:	689b      	ldr	r3, [r3, #8]
 80108e4:	4798      	blx	r3
 80108e6:	b1c8      	cbz	r0, 801091c <__cxa_type_match+0xac>
 80108e8:	9b01      	ldr	r3, [sp, #4]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	9301      	str	r3, [sp, #4]
 80108ee:	2702      	movs	r7, #2
 80108f0:	6833      	ldr	r3, [r6, #0]
 80108f2:	aa01      	add	r2, sp, #4
 80108f4:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80108f8:	4621      	mov	r1, r4
 80108fa:	2301      	movs	r3, #1
 80108fc:	4630      	mov	r0, r6
 80108fe:	47c0      	blx	r8
 8010900:	b170      	cbz	r0, 8010920 <__cxa_type_match+0xb0>
 8010902:	9b01      	ldr	r3, [sp, #4]
 8010904:	602b      	str	r3, [r5, #0]
 8010906:	4638      	mov	r0, r7
 8010908:	b002      	add	sp, #8
 801090a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801090e:	2301      	movs	r3, #1
 8010910:	460c      	mov	r4, r1
 8010912:	e7d1      	b.n	80108b8 <__cxa_type_match+0x48>
 8010914:	4c03      	ldr	r4, [pc, #12]	@ (8010924 <__cxa_type_match+0xb4>)
 8010916:	e7e2      	b.n	80108de <__cxa_type_match+0x6e>
 8010918:	4c03      	ldr	r4, [pc, #12]	@ (8010928 <__cxa_type_match+0xb8>)
 801091a:	e7e0      	b.n	80108de <__cxa_type_match+0x6e>
 801091c:	2701      	movs	r7, #1
 801091e:	e7e7      	b.n	80108f0 <__cxa_type_match+0x80>
 8010920:	4607      	mov	r7, r0
 8010922:	e7f0      	b.n	8010906 <__cxa_type_match+0x96>
 8010924:	0801522c 	.word	0x0801522c
 8010928:	08015258 	.word	0x08015258

0801092c <__cxa_begin_cleanup>:
 801092c:	b510      	push	{r4, lr}
 801092e:	4604      	mov	r4, r0
 8010930:	f000 f834 	bl	801099c <__cxa_get_globals>
 8010934:	4602      	mov	r2, r0
 8010936:	4620      	mov	r0, r4
 8010938:	f1a4 0120 	sub.w	r1, r4, #32
 801093c:	f7ff ff7a 	bl	8010834 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8010940:	b160      	cbz	r0, 801095c <__cxa_begin_cleanup+0x30>
 8010942:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010946:	3301      	adds	r3, #1
 8010948:	2b01      	cmp	r3, #1
 801094a:	f844 3c04 	str.w	r3, [r4, #-4]
 801094e:	d103      	bne.n	8010958 <__cxa_begin_cleanup+0x2c>
 8010950:	6893      	ldr	r3, [r2, #8]
 8010952:	f844 3c08 	str.w	r3, [r4, #-8]
 8010956:	6091      	str	r1, [r2, #8]
 8010958:	2001      	movs	r0, #1
 801095a:	bd10      	pop	{r4, pc}
 801095c:	6893      	ldr	r3, [r2, #8]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d0f9      	beq.n	8010956 <__cxa_begin_cleanup+0x2a>
 8010962:	f000 faa3 	bl	8010eac <_ZSt9terminatev>

08010966 <__gnu_end_cleanup>:
 8010966:	b510      	push	{r4, lr}
 8010968:	f000 f818 	bl	801099c <__cxa_get_globals>
 801096c:	6882      	ldr	r2, [r0, #8]
 801096e:	4601      	mov	r1, r0
 8010970:	b90a      	cbnz	r2, 8010976 <__gnu_end_cleanup+0x10>
 8010972:	f000 fa9b 	bl	8010eac <_ZSt9terminatev>
 8010976:	f102 0420 	add.w	r4, r2, #32
 801097a:	4620      	mov	r0, r4
 801097c:	f7ff ff5a 	bl	8010834 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8010980:	b140      	cbz	r0, 8010994 <__gnu_end_cleanup+0x2e>
 8010982:	69d3      	ldr	r3, [r2, #28]
 8010984:	3b01      	subs	r3, #1
 8010986:	61d3      	str	r3, [r2, #28]
 8010988:	b913      	cbnz	r3, 8010990 <__gnu_end_cleanup+0x2a>
 801098a:	6990      	ldr	r0, [r2, #24]
 801098c:	6088      	str	r0, [r1, #8]
 801098e:	6193      	str	r3, [r2, #24]
 8010990:	4620      	mov	r0, r4
 8010992:	bd10      	pop	{r4, pc}
 8010994:	6088      	str	r0, [r1, #8]
 8010996:	e7fb      	b.n	8010990 <__gnu_end_cleanup+0x2a>

08010998 <_ZNSt9exceptionD1Ev>:
 8010998:	4770      	bx	lr

0801099a <_ZN12_GLOBAL__N_113constant_initD1Ev>:
 801099a:	4770      	bx	lr

0801099c <__cxa_get_globals>:
 801099c:	4800      	ldr	r0, [pc, #0]	@ (80109a0 <__cxa_get_globals+0x4>)
 801099e:	4770      	bx	lr
 80109a0:	200003d0 	.word	0x200003d0

080109a4 <_GLOBAL__sub_I___cxa_get_globals_fast>:
 80109a4:	4a02      	ldr	r2, [pc, #8]	@ (80109b0 <_GLOBAL__sub_I___cxa_get_globals_fast+0xc>)
 80109a6:	4903      	ldr	r1, [pc, #12]	@ (80109b4 <_GLOBAL__sub_I___cxa_get_globals_fast+0x10>)
 80109a8:	4803      	ldr	r0, [pc, #12]	@ (80109b8 <_GLOBAL__sub_I___cxa_get_globals_fast+0x14>)
 80109aa:	f000 bc78 	b.w	801129e <__aeabi_atexit>
 80109ae:	bf00      	nop
 80109b0:	20000000 	.word	0x20000000
 80109b4:	0801099b 	.word	0x0801099b
 80109b8:	200003d0 	.word	0x200003d0

080109bc <_ZL12read_uleb128PKhPm>:
 80109bc:	b530      	push	{r4, r5, lr}
 80109be:	2300      	movs	r3, #0
 80109c0:	461a      	mov	r2, r3
 80109c2:	f810 5b01 	ldrb.w	r5, [r0], #1
 80109c6:	f005 047f 	and.w	r4, r5, #127	@ 0x7f
 80109ca:	4094      	lsls	r4, r2
 80109cc:	4323      	orrs	r3, r4
 80109ce:	062c      	lsls	r4, r5, #24
 80109d0:	f102 0207 	add.w	r2, r2, #7
 80109d4:	d4f5      	bmi.n	80109c2 <_ZL12read_uleb128PKhPm+0x6>
 80109d6:	600b      	str	r3, [r1, #0]
 80109d8:	bd30      	pop	{r4, r5, pc}

080109da <_ZL12read_sleb128PKhPl>:
 80109da:	b530      	push	{r4, r5, lr}
 80109dc:	2300      	movs	r3, #0
 80109de:	461a      	mov	r2, r3
 80109e0:	f810 4b01 	ldrb.w	r4, [r0], #1
 80109e4:	f004 057f 	and.w	r5, r4, #127	@ 0x7f
 80109e8:	4095      	lsls	r5, r2
 80109ea:	432b      	orrs	r3, r5
 80109ec:	0625      	lsls	r5, r4, #24
 80109ee:	f102 0207 	add.w	r2, r2, #7
 80109f2:	d4f5      	bmi.n	80109e0 <_ZL12read_sleb128PKhPl+0x6>
 80109f4:	2a1f      	cmp	r2, #31
 80109f6:	d806      	bhi.n	8010a06 <_ZL12read_sleb128PKhPl+0x2c>
 80109f8:	0664      	lsls	r4, r4, #25
 80109fa:	bf42      	ittt	mi
 80109fc:	f04f 34ff 	movmi.w	r4, #4294967295	@ 0xffffffff
 8010a00:	fa04 f202 	lslmi.w	r2, r4, r2
 8010a04:	4313      	orrmi	r3, r2
 8010a06:	600b      	str	r3, [r1, #0]
 8010a08:	bd30      	pop	{r4, r5, pc}

08010a0a <_ZL28read_encoded_value_with_basehjPKhPj>:
 8010a0a:	2850      	cmp	r0, #80	@ 0x50
 8010a0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010a10:	4606      	mov	r6, r0
 8010a12:	4688      	mov	r8, r1
 8010a14:	4615      	mov	r5, r2
 8010a16:	461f      	mov	r7, r3
 8010a18:	d108      	bne.n	8010a2c <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
 8010a1a:	1cd0      	adds	r0, r2, #3
 8010a1c:	f020 0003 	bic.w	r0, r0, #3
 8010a20:	f850 4b04 	ldr.w	r4, [r0], #4
 8010a24:	603c      	str	r4, [r7, #0]
 8010a26:	b002      	add	sp, #8
 8010a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a2c:	f000 030f 	and.w	r3, r0, #15
 8010a30:	2b0c      	cmp	r3, #12
 8010a32:	d82e      	bhi.n	8010a92 <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
 8010a34:	e8df f003 	tbb	[pc, r3]
 8010a38:	251d0725 	.word	0x251d0725
 8010a3c:	2d2d2d29 	.word	0x2d2d2d29
 8010a40:	2521182d 	.word	0x2521182d
 8010a44:	29          	.byte	0x29
 8010a45:	00          	.byte	0x00
 8010a46:	a901      	add	r1, sp, #4
 8010a48:	4628      	mov	r0, r5
 8010a4a:	f7ff ffb7 	bl	80109bc <_ZL12read_uleb128PKhPm>
 8010a4e:	9c01      	ldr	r4, [sp, #4]
 8010a50:	2c00      	cmp	r4, #0
 8010a52:	d0e7      	beq.n	8010a24 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8010a54:	f006 0370 	and.w	r3, r6, #112	@ 0x70
 8010a58:	2b10      	cmp	r3, #16
 8010a5a:	bf08      	it	eq
 8010a5c:	46a8      	moveq	r8, r5
 8010a5e:	4444      	add	r4, r8
 8010a60:	0633      	lsls	r3, r6, #24
 8010a62:	bf48      	it	mi
 8010a64:	6824      	ldrmi	r4, [r4, #0]
 8010a66:	e7dd      	b.n	8010a24 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8010a68:	a901      	add	r1, sp, #4
 8010a6a:	4628      	mov	r0, r5
 8010a6c:	f7ff ffb5 	bl	80109da <_ZL12read_sleb128PKhPl>
 8010a70:	e7ed      	b.n	8010a4e <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
 8010a72:	4628      	mov	r0, r5
 8010a74:	f830 4b02 	ldrh.w	r4, [r0], #2
 8010a78:	e7ea      	b.n	8010a50 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8010a7a:	4628      	mov	r0, r5
 8010a7c:	f930 4b02 	ldrsh.w	r4, [r0], #2
 8010a80:	e7e6      	b.n	8010a50 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8010a82:	4628      	mov	r0, r5
 8010a84:	f850 4b04 	ldr.w	r4, [r0], #4
 8010a88:	e7e2      	b.n	8010a50 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8010a8a:	4628      	mov	r0, r5
 8010a8c:	f850 4b08 	ldr.w	r4, [r0], #8
 8010a90:	e7de      	b.n	8010a50 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8010a92:	f000 fc99 	bl	80113c8 <abort>

08010a96 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 8010a96:	b508      	push	{r3, lr}
 8010a98:	4603      	mov	r3, r0
 8010a9a:	2bff      	cmp	r3, #255	@ 0xff
 8010a9c:	4608      	mov	r0, r1
 8010a9e:	d00d      	beq.n	8010abc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
 8010aa0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8010aa4:	2b30      	cmp	r3, #48	@ 0x30
 8010aa6:	d00f      	beq.n	8010ac8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
 8010aa8:	d804      	bhi.n	8010ab4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1e>
 8010aaa:	2b20      	cmp	r3, #32
 8010aac:	d008      	beq.n	8010ac0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
 8010aae:	d905      	bls.n	8010abc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
 8010ab0:	f000 fc8a 	bl	80113c8 <abort>
 8010ab4:	2b40      	cmp	r3, #64	@ 0x40
 8010ab6:	d00b      	beq.n	8010ad0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3a>
 8010ab8:	2b50      	cmp	r3, #80	@ 0x50
 8010aba:	d1f9      	bne.n	8010ab0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8010abc:	2000      	movs	r0, #0
 8010abe:	bd08      	pop	{r3, pc}
 8010ac0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010ac4:	f003 b919 	b.w	8013cfa <_Unwind_GetTextRelBase>
 8010ac8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010acc:	f003 b912 	b.w	8013cf4 <_Unwind_GetDataRelBase>
 8010ad0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010ad4:	f7f1 b9da 	b.w	8001e8c <_Unwind_GetRegionStart>

08010ad8 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8010ad8:	b570      	push	{r4, r5, r6, lr}
 8010ada:	460c      	mov	r4, r1
 8010adc:	4601      	mov	r1, r0
 8010ade:	4620      	mov	r0, r4
 8010ae0:	4615      	mov	r5, r2
 8010ae2:	461e      	mov	r6, r3
 8010ae4:	f7ff ffd7 	bl	8010a96 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8010ae8:	4633      	mov	r3, r6
 8010aea:	4601      	mov	r1, r0
 8010aec:	462a      	mov	r2, r5
 8010aee:	4620      	mov	r0, r4
 8010af0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010af4:	f7ff bf89 	b.w	8010a0a <_ZL28read_encoded_value_with_basehjPKhPj>

08010af8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8010af8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010afa:	460c      	mov	r4, r1
 8010afc:	4615      	mov	r5, r2
 8010afe:	4606      	mov	r6, r0
 8010b00:	b108      	cbz	r0, 8010b06 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 8010b02:	f7f1 f9c3 	bl	8001e8c <_Unwind_GetRegionStart>
 8010b06:	4622      	mov	r2, r4
 8010b08:	6028      	str	r0, [r5, #0]
 8010b0a:	f812 1b01 	ldrb.w	r1, [r2], #1
 8010b0e:	29ff      	cmp	r1, #255	@ 0xff
 8010b10:	d01c      	beq.n	8010b4c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
 8010b12:	1d2b      	adds	r3, r5, #4
 8010b14:	4630      	mov	r0, r6
 8010b16:	f7ff ffdf 	bl	8010ad8 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8010b1a:	4602      	mov	r2, r0
 8010b1c:	4610      	mov	r0, r2
 8010b1e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010b22:	2bff      	cmp	r3, #255	@ 0xff
 8010b24:	d014      	beq.n	8010b50 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x58>
 8010b26:	2310      	movs	r3, #16
 8010b28:	752b      	strb	r3, [r5, #20]
 8010b2a:	a901      	add	r1, sp, #4
 8010b2c:	f7ff ff46 	bl	80109bc <_ZL12read_uleb128PKhPm>
 8010b30:	9b01      	ldr	r3, [sp, #4]
 8010b32:	4403      	add	r3, r0
 8010b34:	60eb      	str	r3, [r5, #12]
 8010b36:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010b3a:	756b      	strb	r3, [r5, #21]
 8010b3c:	a901      	add	r1, sp, #4
 8010b3e:	f7ff ff3d 	bl	80109bc <_ZL12read_uleb128PKhPm>
 8010b42:	9b01      	ldr	r3, [sp, #4]
 8010b44:	4403      	add	r3, r0
 8010b46:	612b      	str	r3, [r5, #16]
 8010b48:	b002      	add	sp, #8
 8010b4a:	bd70      	pop	{r4, r5, r6, pc}
 8010b4c:	6068      	str	r0, [r5, #4]
 8010b4e:	e7e5      	b.n	8010b1c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x24>
 8010b50:	752b      	strb	r3, [r5, #20]
 8010b52:	2300      	movs	r3, #0
 8010b54:	e7ee      	b.n	8010b34 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>

08010b56 <_Unwind_GetGR>:
 8010b56:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010b58:	ab03      	add	r3, sp, #12
 8010b5a:	9300      	str	r3, [sp, #0]
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	460a      	mov	r2, r1
 8010b60:	4619      	mov	r1, r3
 8010b62:	f7f0 fbdf 	bl	8001324 <_Unwind_VRS_Get>
 8010b66:	9803      	ldr	r0, [sp, #12]
 8010b68:	b005      	add	sp, #20
 8010b6a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010b70 <__gxx_personality_v0>:
 8010b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b74:	b093      	sub	sp, #76	@ 0x4c
 8010b76:	2300      	movs	r3, #0
 8010b78:	9307      	str	r3, [sp, #28]
 8010b7a:	f000 0303 	and.w	r3, r0, #3
 8010b7e:	2b01      	cmp	r3, #1
 8010b80:	4605      	mov	r5, r0
 8010b82:	460c      	mov	r4, r1
 8010b84:	4616      	mov	r6, r2
 8010b86:	d010      	beq.n	8010baa <__gxx_personality_v0+0x3a>
 8010b88:	2b02      	cmp	r3, #2
 8010b8a:	d003      	beq.n	8010b94 <__gxx_personality_v0+0x24>
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d13b      	bne.n	8010c08 <__gxx_personality_v0+0x98>
 8010b90:	0701      	lsls	r1, r0, #28
 8010b92:	d53b      	bpl.n	8010c0c <__gxx_personality_v0+0x9c>
 8010b94:	4631      	mov	r1, r6
 8010b96:	4620      	mov	r0, r4
 8010b98:	f7f1 f962 	bl	8001e60 <__gnu_unwind_frame>
 8010b9c:	b118      	cbz	r0, 8010ba6 <__gxx_personality_v0+0x36>
 8010b9e:	2009      	movs	r0, #9
 8010ba0:	b013      	add	sp, #76	@ 0x4c
 8010ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ba6:	2008      	movs	r0, #8
 8010ba8:	e7fa      	b.n	8010ba0 <__gxx_personality_v0+0x30>
 8010baa:	0702      	lsls	r2, r0, #28
 8010bac:	d523      	bpl.n	8010bf6 <__gxx_personality_v0+0x86>
 8010bae:	2302      	movs	r3, #2
 8010bb0:	f005 0508 	and.w	r5, r5, #8
 8010bb4:	431d      	orrs	r5, r3
 8010bb6:	ab0c      	add	r3, sp, #48	@ 0x30
 8010bb8:	9300      	str	r3, [sp, #0]
 8010bba:	2300      	movs	r3, #0
 8010bbc:	220c      	movs	r2, #12
 8010bbe:	4619      	mov	r1, r3
 8010bc0:	4630      	mov	r0, r6
 8010bc2:	940c      	str	r4, [sp, #48]	@ 0x30
 8010bc4:	f7f0 fbd4 	bl	8001370 <_Unwind_VRS_Set>
 8010bc8:	2d06      	cmp	r5, #6
 8010bca:	d121      	bne.n	8010c10 <__gxx_personality_v0+0xa0>
 8010bcc:	f8d4 8030 	ldr.w	r8, [r4, #48]	@ 0x30
 8010bd0:	e9d4 790a 	ldrd	r7, r9, [r4, #40]	@ 0x28
 8010bd4:	f1b8 0f00 	cmp.w	r8, #0
 8010bd8:	bf0c      	ite	eq
 8010bda:	f04f 0a01 	moveq.w	sl, #1
 8010bde:	f04f 0a03 	movne.w	sl, #3
 8010be2:	f015 0508 	ands.w	r5, r5, #8
 8010be6:	f000 8103 	beq.w	8010df0 <__gxx_personality_v0+0x280>
 8010bea:	f1ba 0f01 	cmp.w	sl, #1
 8010bee:	f040 80fb 	bne.w	8010de8 <__gxx_personality_v0+0x278>
 8010bf2:	f000 f95b 	bl	8010eac <_ZSt9terminatev>
 8010bf6:	6a0f      	ldr	r7, [r1, #32]
 8010bf8:	4630      	mov	r0, r6
 8010bfa:	210d      	movs	r1, #13
 8010bfc:	f7ff ffab 	bl	8010b56 <_Unwind_GetGR>
 8010c00:	4287      	cmp	r7, r0
 8010c02:	d1d4      	bne.n	8010bae <__gxx_personality_v0+0x3e>
 8010c04:	2306      	movs	r3, #6
 8010c06:	e7d3      	b.n	8010bb0 <__gxx_personality_v0+0x40>
 8010c08:	f000 fbde 	bl	80113c8 <abort>
 8010c0c:	2301      	movs	r3, #1
 8010c0e:	e7cf      	b.n	8010bb0 <__gxx_personality_v0+0x40>
 8010c10:	4630      	mov	r0, r6
 8010c12:	f7f1 f941 	bl	8001e98 <_Unwind_GetLanguageSpecificData>
 8010c16:	4681      	mov	r9, r0
 8010c18:	2800      	cmp	r0, #0
 8010c1a:	d0bb      	beq.n	8010b94 <__gxx_personality_v0+0x24>
 8010c1c:	aa0c      	add	r2, sp, #48	@ 0x30
 8010c1e:	4601      	mov	r1, r0
 8010c20:	4630      	mov	r0, r6
 8010c22:	f7ff ff69 	bl	8010af8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8010c26:	f89d b044 	ldrb.w	fp, [sp, #68]	@ 0x44
 8010c2a:	9003      	str	r0, [sp, #12]
 8010c2c:	4631      	mov	r1, r6
 8010c2e:	4658      	mov	r0, fp
 8010c30:	f7ff ff31 	bl	8010a96 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8010c34:	210f      	movs	r1, #15
 8010c36:	9002      	str	r0, [sp, #8]
 8010c38:	900e      	str	r0, [sp, #56]	@ 0x38
 8010c3a:	4630      	mov	r0, r6
 8010c3c:	f7ff ff8b 	bl	8010b56 <_Unwind_GetGR>
 8010c40:	9a03      	ldr	r2, [sp, #12]
 8010c42:	f020 0801 	bic.w	r8, r0, #1
 8010c46:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8010c4a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8010c4c:	4297      	cmp	r7, r2
 8010c4e:	d815      	bhi.n	8010c7c <__gxx_personality_v0+0x10c>
 8010c50:	2700      	movs	r7, #0
 8010c52:	46b8      	mov	r8, r7
 8010c54:	f04f 0a01 	mov.w	sl, #1
 8010c58:	07eb      	lsls	r3, r5, #31
 8010c5a:	d5c2      	bpl.n	8010be2 <__gxx_personality_v0+0x72>
 8010c5c:	f1ba 0f02 	cmp.w	sl, #2
 8010c60:	d098      	beq.n	8010b94 <__gxx_personality_v0+0x24>
 8010c62:	210d      	movs	r1, #13
 8010c64:	4630      	mov	r0, r6
 8010c66:	9d07      	ldr	r5, [sp, #28]
 8010c68:	f7ff ff75 	bl	8010b56 <_Unwind_GetGR>
 8010c6c:	e9c4 790a 	strd	r7, r9, [r4, #40]	@ 0x28
 8010c70:	e9c4 0508 	strd	r0, r5, [r4, #32]
 8010c74:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
 8010c78:	2006      	movs	r0, #6
 8010c7a:	e791      	b.n	8010ba0 <__gxx_personality_v0+0x30>
 8010c7c:	f89d a045 	ldrb.w	sl, [sp, #69]	@ 0x45
 8010c80:	ab08      	add	r3, sp, #32
 8010c82:	4651      	mov	r1, sl
 8010c84:	2000      	movs	r0, #0
 8010c86:	f7ff ff27 	bl	8010ad8 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8010c8a:	ab09      	add	r3, sp, #36	@ 0x24
 8010c8c:	4602      	mov	r2, r0
 8010c8e:	4651      	mov	r1, sl
 8010c90:	2000      	movs	r0, #0
 8010c92:	f7ff ff21 	bl	8010ad8 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8010c96:	ab0a      	add	r3, sp, #40	@ 0x28
 8010c98:	4602      	mov	r2, r0
 8010c9a:	4651      	mov	r1, sl
 8010c9c:	2000      	movs	r0, #0
 8010c9e:	f7ff ff1b 	bl	8010ad8 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8010ca2:	a90b      	add	r1, sp, #44	@ 0x2c
 8010ca4:	f7ff fe8a 	bl	80109bc <_ZL12read_uleb128PKhPm>
 8010ca8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010caa:	9908      	ldr	r1, [sp, #32]
 8010cac:	440b      	add	r3, r1
 8010cae:	4543      	cmp	r3, r8
 8010cb0:	4602      	mov	r2, r0
 8010cb2:	d84b      	bhi.n	8010d4c <__gxx_personality_v0+0x1dc>
 8010cb4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010cb6:	440b      	add	r3, r1
 8010cb8:	4543      	cmp	r3, r8
 8010cba:	d9c6      	bls.n	8010c4a <__gxx_personality_v0+0xda>
 8010cbc:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 8010cc0:	f1b8 0f00 	cmp.w	r8, #0
 8010cc4:	d001      	beq.n	8010cca <__gxx_personality_v0+0x15a>
 8010cc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010cc8:	4498      	add	r8, r3
 8010cca:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8010ccc:	b108      	cbz	r0, 8010cd2 <__gxx_personality_v0+0x162>
 8010cce:	3801      	subs	r0, #1
 8010cd0:	4438      	add	r0, r7
 8010cd2:	f1b8 0f00 	cmp.w	r8, #0
 8010cd6:	f43f af5d 	beq.w	8010b94 <__gxx_personality_v0+0x24>
 8010cda:	2800      	cmp	r0, #0
 8010cdc:	f000 80d6 	beq.w	8010e8c <__gxx_personality_v0+0x31c>
 8010ce0:	f015 0308 	ands.w	r3, r5, #8
 8010ce4:	9304      	str	r3, [sp, #16]
 8010ce6:	d033      	beq.n	8010d50 <__gxx_personality_v0+0x1e0>
 8010ce8:	2347      	movs	r3, #71	@ 0x47
 8010cea:	7023      	strb	r3, [r4, #0]
 8010cec:	234e      	movs	r3, #78	@ 0x4e
 8010cee:	7063      	strb	r3, [r4, #1]
 8010cf0:	2355      	movs	r3, #85	@ 0x55
 8010cf2:	70a3      	strb	r3, [r4, #2]
 8010cf4:	2343      	movs	r3, #67	@ 0x43
 8010cf6:	70e3      	strb	r3, [r4, #3]
 8010cf8:	2346      	movs	r3, #70	@ 0x46
 8010cfa:	7123      	strb	r3, [r4, #4]
 8010cfc:	234f      	movs	r3, #79	@ 0x4f
 8010cfe:	7163      	strb	r3, [r4, #5]
 8010d00:	2352      	movs	r3, #82	@ 0x52
 8010d02:	71a3      	strb	r3, [r4, #6]
 8010d04:	2300      	movs	r3, #0
 8010d06:	71e3      	strb	r3, [r4, #7]
 8010d08:	2300      	movs	r3, #0
 8010d0a:	9303      	str	r3, [sp, #12]
 8010d0c:	a909      	add	r1, sp, #36	@ 0x24
 8010d0e:	f7ff fe64 	bl	80109da <_ZL12read_sleb128PKhPl>
 8010d12:	a90a      	add	r1, sp, #40	@ 0x28
 8010d14:	9005      	str	r0, [sp, #20]
 8010d16:	f7ff fe60 	bl	80109da <_ZL12read_sleb128PKhPl>
 8010d1a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8010d1c:	2f00      	cmp	r7, #0
 8010d1e:	d060      	beq.n	8010de2 <__gxx_personality_v0+0x272>
 8010d20:	dd3a      	ble.n	8010d98 <__gxx_personality_v0+0x228>
 8010d22:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8010d26:	d033      	beq.n	8010d90 <__gxx_personality_v0+0x220>
 8010d28:	f00b 0307 	and.w	r3, fp, #7
 8010d2c:	2b04      	cmp	r3, #4
 8010d2e:	f63f af6b 	bhi.w	8010c08 <__gxx_personality_v0+0x98>
 8010d32:	a201      	add	r2, pc, #4	@ (adr r2, 8010d38 <__gxx_personality_v0+0x1c8>)
 8010d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d38:	08010d95 	.word	0x08010d95
 8010d3c:	08010c09 	.word	0x08010c09
 8010d40:	08010d63 	.word	0x08010d63
 8010d44:	08010d95 	.word	0x08010d95
 8010d48:	08010d8d 	.word	0x08010d8d
 8010d4c:	463a      	mov	r2, r7
 8010d4e:	e77c      	b.n	8010c4a <__gxx_personality_v0+0xda>
 8010d50:	79e3      	ldrb	r3, [r4, #7]
 8010d52:	2b01      	cmp	r3, #1
 8010d54:	bf0c      	ite	eq
 8010d56:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 8010d5a:	f104 0358 	addne.w	r3, r4, #88	@ 0x58
 8010d5e:	9307      	str	r3, [sp, #28]
 8010d60:	e7d2      	b.n	8010d08 <__gxx_personality_v0+0x198>
 8010d62:	2202      	movs	r2, #2
 8010d64:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010d66:	ab0b      	add	r3, sp, #44	@ 0x2c
 8010d68:	fb07 1212 	mls	r2, r7, r2, r1
 8010d6c:	4658      	mov	r0, fp
 8010d6e:	9902      	ldr	r1, [sp, #8]
 8010d70:	f7ff fe4b 	bl	8010a0a <_ZL28read_encoded_value_with_basehjPKhPj>
 8010d74:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010d76:	b131      	cbz	r1, 8010d86 <__gxx_personality_v0+0x216>
 8010d78:	b33c      	cbz	r4, 8010dca <__gxx_personality_v0+0x25a>
 8010d7a:	ab07      	add	r3, sp, #28
 8010d7c:	2200      	movs	r2, #0
 8010d7e:	4620      	mov	r0, r4
 8010d80:	f7ff fd76 	bl	8010870 <__cxa_type_match>
 8010d84:	b308      	cbz	r0, 8010dca <__gxx_personality_v0+0x25a>
 8010d86:	f04f 0a03 	mov.w	sl, #3
 8010d8a:	e765      	b.n	8010c58 <__gxx_personality_v0+0xe8>
 8010d8c:	2208      	movs	r2, #8
 8010d8e:	e7e9      	b.n	8010d64 <__gxx_personality_v0+0x1f4>
 8010d90:	2200      	movs	r2, #0
 8010d92:	e7e7      	b.n	8010d64 <__gxx_personality_v0+0x1f4>
 8010d94:	2204      	movs	r2, #4
 8010d96:	e7e5      	b.n	8010d64 <__gxx_personality_v0+0x1f4>
 8010d98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d9a:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 8010d9e:	1bd2      	subs	r2, r2, r7
 8010da0:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
 8010da4:	b1c4      	cbz	r4, 8010dd8 <__gxx_personality_v0+0x268>
 8010da6:	9904      	ldr	r1, [sp, #16]
 8010da8:	b9b1      	cbnz	r1, 8010dd8 <__gxx_personality_v0+0x268>
 8010daa:	9b07      	ldr	r3, [sp, #28]
 8010dac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010dae:	f1aa 0a04 	sub.w	sl, sl, #4
 8010db2:	f85a 1f04 	ldr.w	r1, [sl, #4]!
 8010db6:	2900      	cmp	r1, #0
 8010db8:	d0e5      	beq.n	8010d86 <__gxx_personality_v0+0x216>
 8010dba:	ab0b      	add	r3, sp, #44	@ 0x2c
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	4451      	add	r1, sl
 8010dc0:	4620      	mov	r0, r4
 8010dc2:	f7ff fd55 	bl	8010870 <__cxa_type_match>
 8010dc6:	2800      	cmp	r0, #0
 8010dc8:	d0f3      	beq.n	8010db2 <__gxx_personality_v0+0x242>
 8010dca:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010dcc:	2800      	cmp	r0, #0
 8010dce:	d059      	beq.n	8010e84 <__gxx_personality_v0+0x314>
 8010dd0:	9b05      	ldr	r3, [sp, #20]
 8010dd2:	4403      	add	r3, r0
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	e799      	b.n	8010d0c <__gxx_personality_v0+0x19c>
 8010dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d1f4      	bne.n	8010dca <__gxx_personality_v0+0x25a>
 8010de0:	e7d1      	b.n	8010d86 <__gxx_personality_v0+0x216>
 8010de2:	2301      	movs	r3, #1
 8010de4:	9303      	str	r3, [sp, #12]
 8010de6:	e7f0      	b.n	8010dca <__gxx_personality_v0+0x25a>
 8010de8:	2f00      	cmp	r7, #0
 8010dea:	da1f      	bge.n	8010e2c <__gxx_personality_v0+0x2bc>
 8010dec:	f000 f870 	bl	8010ed0 <_ZSt10unexpectedv>
 8010df0:	f1ba 0f01 	cmp.w	sl, #1
 8010df4:	d102      	bne.n	8010dfc <__gxx_personality_v0+0x28c>
 8010df6:	4620      	mov	r0, r4
 8010df8:	f000 fa75 	bl	80112e6 <__cxa_call_terminate>
 8010dfc:	2f00      	cmp	r7, #0
 8010dfe:	da15      	bge.n	8010e2c <__gxx_personality_v0+0x2bc>
 8010e00:	aa0c      	add	r2, sp, #48	@ 0x30
 8010e02:	4649      	mov	r1, r9
 8010e04:	4630      	mov	r0, r6
 8010e06:	f7ff fe77 	bl	8010af8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8010e0a:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8010e0e:	4631      	mov	r1, r6
 8010e10:	f7ff fe41 	bl	8010a96 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8010e14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e16:	43fa      	mvns	r2, r7
 8010e18:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8010e1c:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8010e20:	bb52      	cbnz	r2, 8010e78 <__gxx_personality_v0+0x308>
 8010e22:	2204      	movs	r2, #4
 8010e24:	e9c4 500a 	strd	r5, r0, [r4, #40]	@ 0x28
 8010e28:	e9c4 230c 	strd	r2, r3, [r4, #48]	@ 0x30
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	ad0b      	add	r5, sp, #44	@ 0x2c
 8010e30:	461a      	mov	r2, r3
 8010e32:	4619      	mov	r1, r3
 8010e34:	9500      	str	r5, [sp, #0]
 8010e36:	4630      	mov	r0, r6
 8010e38:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010e3a:	f7f0 fa99 	bl	8001370 <_Unwind_VRS_Set>
 8010e3e:	2300      	movs	r3, #0
 8010e40:	4619      	mov	r1, r3
 8010e42:	2201      	movs	r2, #1
 8010e44:	9500      	str	r5, [sp, #0]
 8010e46:	4630      	mov	r0, r6
 8010e48:	970b      	str	r7, [sp, #44]	@ 0x2c
 8010e4a:	f7f0 fa91 	bl	8001370 <_Unwind_VRS_Set>
 8010e4e:	210f      	movs	r1, #15
 8010e50:	4630      	mov	r0, r6
 8010e52:	f7ff fe80 	bl	8010b56 <_Unwind_GetGR>
 8010e56:	f000 0001 	and.w	r0, r0, #1
 8010e5a:	ea40 0008 	orr.w	r0, r0, r8
 8010e5e:	2300      	movs	r3, #0
 8010e60:	900b      	str	r0, [sp, #44]	@ 0x2c
 8010e62:	9500      	str	r5, [sp, #0]
 8010e64:	220f      	movs	r2, #15
 8010e66:	4619      	mov	r1, r3
 8010e68:	4630      	mov	r0, r6
 8010e6a:	f7f0 fa81 	bl	8001370 <_Unwind_VRS_Set>
 8010e6e:	f1ba 0f02 	cmp.w	sl, #2
 8010e72:	d003      	beq.n	8010e7c <__gxx_personality_v0+0x30c>
 8010e74:	2007      	movs	r0, #7
 8010e76:	e693      	b.n	8010ba0 <__gxx_personality_v0+0x30>
 8010e78:	3501      	adds	r5, #1
 8010e7a:	e7cf      	b.n	8010e1c <__gxx_personality_v0+0x2ac>
 8010e7c:	4620      	mov	r0, r4
 8010e7e:	f7ff fd55 	bl	801092c <__cxa_begin_cleanup>
 8010e82:	e7f7      	b.n	8010e74 <__gxx_personality_v0+0x304>
 8010e84:	9b03      	ldr	r3, [sp, #12]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	f43f ae84 	beq.w	8010b94 <__gxx_personality_v0+0x24>
 8010e8c:	2700      	movs	r7, #0
 8010e8e:	f04f 0a02 	mov.w	sl, #2
 8010e92:	e6e1      	b.n	8010c58 <__gxx_personality_v0+0xe8>

08010e94 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8010e94:	b508      	push	{r3, lr}
 8010e96:	4780      	blx	r0
 8010e98:	f000 fa96 	bl	80113c8 <abort>

08010e9c <_ZSt13get_terminatev>:
 8010e9c:	4b02      	ldr	r3, [pc, #8]	@ (8010ea8 <_ZSt13get_terminatev+0xc>)
 8010e9e:	6818      	ldr	r0, [r3, #0]
 8010ea0:	f3bf 8f5b 	dmb	ish
 8010ea4:	4770      	bx	lr
 8010ea6:	bf00      	nop
 8010ea8:	20000014 	.word	0x20000014

08010eac <_ZSt9terminatev>:
 8010eac:	b508      	push	{r3, lr}
 8010eae:	f7ff fff5 	bl	8010e9c <_ZSt13get_terminatev>
 8010eb2:	f7ff ffef 	bl	8010e94 <_ZN10__cxxabiv111__terminateEPFvvE>

08010eb6 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8010eb6:	b508      	push	{r3, lr}
 8010eb8:	4780      	blx	r0
 8010eba:	f7ff fff7 	bl	8010eac <_ZSt9terminatev>
	...

08010ec0 <_ZSt14get_unexpectedv>:
 8010ec0:	4b02      	ldr	r3, [pc, #8]	@ (8010ecc <_ZSt14get_unexpectedv+0xc>)
 8010ec2:	6818      	ldr	r0, [r3, #0]
 8010ec4:	f3bf 8f5b 	dmb	ish
 8010ec8:	4770      	bx	lr
 8010eca:	bf00      	nop
 8010ecc:	20000010 	.word	0x20000010

08010ed0 <_ZSt10unexpectedv>:
 8010ed0:	b508      	push	{r3, lr}
 8010ed2:	f7ff fff5 	bl	8010ec0 <_ZSt14get_unexpectedv>
 8010ed6:	f7ff ffee 	bl	8010eb6 <_ZN10__cxxabiv112__unexpectedEPFvvE>

08010eda <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 8010eda:	2801      	cmp	r0, #1
 8010edc:	b510      	push	{r4, lr}
 8010ede:	d903      	bls.n	8010ee8 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
 8010ee0:	f851 0c14 	ldr.w	r0, [r1, #-20]
 8010ee4:	f7ff ffd6 	bl	8010e94 <_ZN10__cxxabiv111__terminateEPFvvE>
 8010ee8:	f1a1 0328 	sub.w	r3, r1, #40	@ 0x28
 8010eec:	f3bf 8f5b 	dmb	ish
 8010ef0:	e853 2f00 	ldrex	r2, [r3]
 8010ef4:	3a01      	subs	r2, #1
 8010ef6:	e843 2000 	strex	r0, r2, [r3]
 8010efa:	2800      	cmp	r0, #0
 8010efc:	d1f8      	bne.n	8010ef0 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x16>
 8010efe:	f3bf 8f5b 	dmb	ish
 8010f02:	b95a      	cbnz	r2, 8010f1c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x42>
 8010f04:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 8010f08:	f101 0458 	add.w	r4, r1, #88	@ 0x58
 8010f0c:	b10b      	cbz	r3, 8010f12 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x38>
 8010f0e:	4620      	mov	r0, r4
 8010f10:	4798      	blx	r3
 8010f12:	4620      	mov	r0, r4
 8010f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f18:	f7ff bc62 	b.w	80107e0 <__cxa_free_exception>
 8010f1c:	bd10      	pop	{r4, pc}
	...

08010f20 <__cxa_init_primary_exception>:
 8010f20:	b538      	push	{r3, r4, r5, lr}
 8010f22:	2500      	movs	r5, #0
 8010f24:	e940 121e 	strd	r1, r2, [r0, #-120]	@ 0x78
 8010f28:	f840 5c80 	str.w	r5, [r0, #-128]
 8010f2c:	4604      	mov	r4, r0
 8010f2e:	f7ff ffc7 	bl	8010ec0 <_ZSt14get_unexpectedv>
 8010f32:	f844 0c70 	str.w	r0, [r4, #-112]
 8010f36:	f7ff ffb1 	bl	8010e9c <_ZSt13get_terminatev>
 8010f3a:	2347      	movs	r3, #71	@ 0x47
 8010f3c:	f804 3c58 	strb.w	r3, [r4, #-88]
 8010f40:	234e      	movs	r3, #78	@ 0x4e
 8010f42:	f804 3c57 	strb.w	r3, [r4, #-87]
 8010f46:	2355      	movs	r3, #85	@ 0x55
 8010f48:	f804 3c56 	strb.w	r3, [r4, #-86]
 8010f4c:	2343      	movs	r3, #67	@ 0x43
 8010f4e:	f804 3c55 	strb.w	r3, [r4, #-85]
 8010f52:	f804 3c54 	strb.w	r3, [r4, #-84]
 8010f56:	232b      	movs	r3, #43	@ 0x2b
 8010f58:	f804 3c53 	strb.w	r3, [r4, #-83]
 8010f5c:	f804 3c52 	strb.w	r3, [r4, #-82]
 8010f60:	f804 5c51 	strb.w	r5, [r4, #-81]
 8010f64:	4b03      	ldr	r3, [pc, #12]	@ (8010f74 <__cxa_init_primary_exception+0x54>)
 8010f66:	f844 0c6c 	str.w	r0, [r4, #-108]
 8010f6a:	f844 3c50 	str.w	r3, [r4, #-80]
 8010f6e:	f1a4 0080 	sub.w	r0, r4, #128	@ 0x80
 8010f72:	bd38      	pop	{r3, r4, r5, pc}
 8010f74:	08010edb 	.word	0x08010edb

08010f78 <__cxa_throw>:
 8010f78:	b508      	push	{r3, lr}
 8010f7a:	4604      	mov	r4, r0
 8010f7c:	460d      	mov	r5, r1
 8010f7e:	4616      	mov	r6, r2
 8010f80:	f7ff fd0c 	bl	801099c <__cxa_get_globals>
 8010f84:	6843      	ldr	r3, [r0, #4]
 8010f86:	3301      	adds	r3, #1
 8010f88:	6043      	str	r3, [r0, #4]
 8010f8a:	4632      	mov	r2, r6
 8010f8c:	4629      	mov	r1, r5
 8010f8e:	4620      	mov	r0, r4
 8010f90:	f7ff ffc6 	bl	8010f20 <__cxa_init_primary_exception>
 8010f94:	4604      	mov	r4, r0
 8010f96:	2301      	movs	r3, #1
 8010f98:	f844 3b28 	str.w	r3, [r4], #40
 8010f9c:	4620      	mov	r0, r4
 8010f9e:	f7f0 fd6f 	bl	8001a80 <_Unwind_RaiseException>
 8010fa2:	4620      	mov	r0, r4
 8010fa4:	f000 f9df 	bl	8011366 <__cxa_begin_catch>
 8010fa8:	f7ff ff80 	bl	8010eac <_ZSt9terminatev>

08010fac <_Znwj>:
 8010fac:	2801      	cmp	r0, #1
 8010fae:	bf38      	it	cc
 8010fb0:	2001      	movcc	r0, #1
 8010fb2:	b510      	push	{r4, lr}
 8010fb4:	4604      	mov	r4, r0
 8010fb6:	4620      	mov	r0, r4
 8010fb8:	f000 fa0e 	bl	80113d8 <malloc>
 8010fbc:	b100      	cbz	r0, 8010fc0 <_Znwj+0x14>
 8010fbe:	bd10      	pop	{r4, pc}
 8010fc0:	f000 f9fa 	bl	80113b8 <_ZSt15get_new_handlerv>
 8010fc4:	b908      	cbnz	r0, 8010fca <_Znwj+0x1e>
 8010fc6:	f000 f9ff 	bl	80113c8 <abort>
 8010fca:	4780      	blx	r0
 8010fcc:	e7f3      	b.n	8010fb6 <_Znwj+0xa>

08010fce <_Znaj>:
 8010fce:	f7ff bfed 	b.w	8010fac <_Znwj>
	...

08010fd4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8010fd4:	b510      	push	{r4, lr}
 8010fd6:	4b03      	ldr	r3, [pc, #12]	@ (8010fe4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8010fd8:	6003      	str	r3, [r0, #0]
 8010fda:	4604      	mov	r4, r0
 8010fdc:	f7ff fb38 	bl	8010650 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8010fe0:	4620      	mov	r0, r4
 8010fe2:	bd10      	pop	{r4, pc}
 8010fe4:	0801529c 	.word	0x0801529c

08010fe8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8010fe8:	b510      	push	{r4, lr}
 8010fea:	4604      	mov	r4, r0
 8010fec:	f7ff fff2 	bl	8010fd4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8010ff0:	4620      	mov	r0, r4
 8010ff2:	210c      	movs	r1, #12
 8010ff4:	f7ff fb80 	bl	80106f8 <_ZdlPvj>
 8010ff8:	4620      	mov	r0, r4
 8010ffa:	bd10      	pop	{r4, pc}

08010ffc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8010ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011000:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8011004:	4590      	cmp	r8, r2
 8011006:	4606      	mov	r6, r0
 8011008:	460f      	mov	r7, r1
 801100a:	4615      	mov	r5, r2
 801100c:	461c      	mov	r4, r3
 801100e:	d00b      	beq.n	8011028 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 8011010:	68b0      	ldr	r0, [r6, #8]
 8011012:	6803      	ldr	r3, [r0, #0]
 8011014:	f8cd 8018 	str.w	r8, [sp, #24]
 8011018:	6a1e      	ldr	r6, [r3, #32]
 801101a:	462a      	mov	r2, r5
 801101c:	4623      	mov	r3, r4
 801101e:	4639      	mov	r1, r7
 8011020:	46b4      	mov	ip, r6
 8011022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011026:	4760      	bx	ip
 8011028:	4619      	mov	r1, r3
 801102a:	f000 f857 	bl	80110dc <_ZNKSt9type_info7__equalERKS_>
 801102e:	2800      	cmp	r0, #0
 8011030:	d0ee      	beq.n	8011010 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 8011032:	2006      	movs	r0, #6
 8011034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011038 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8011038:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801103c:	460d      	mov	r5, r1
 801103e:	4619      	mov	r1, r3
 8011040:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	@ 0x28
 8011044:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	@ 0x30
 8011048:	4681      	mov	r9, r0
 801104a:	4617      	mov	r7, r2
 801104c:	4698      	mov	r8, r3
 801104e:	f000 f845 	bl	80110dc <_ZNKSt9type_info7__equalERKS_>
 8011052:	b190      	cbz	r0, 801107a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8011054:	2d00      	cmp	r5, #0
 8011056:	6034      	str	r4, [r6, #0]
 8011058:	7137      	strb	r7, [r6, #4]
 801105a:	db09      	blt.n	8011070 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 801105c:	442c      	add	r4, r5
 801105e:	45a2      	cmp	sl, r4
 8011060:	bf14      	ite	ne
 8011062:	2401      	movne	r4, #1
 8011064:	2406      	moveq	r4, #6
 8011066:	71b4      	strb	r4, [r6, #6]
 8011068:	2000      	movs	r0, #0
 801106a:	b001      	add	sp, #4
 801106c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011070:	3502      	adds	r5, #2
 8011072:	d1f9      	bne.n	8011068 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8011074:	2301      	movs	r3, #1
 8011076:	71b3      	strb	r3, [r6, #6]
 8011078:	e7f6      	b.n	8011068 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801107a:	4554      	cmp	r4, sl
 801107c:	d106      	bne.n	801108c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 801107e:	4659      	mov	r1, fp
 8011080:	4648      	mov	r0, r9
 8011082:	f000 f82b 	bl	80110dc <_ZNKSt9type_info7__equalERKS_>
 8011086:	b108      	cbz	r0, 801108c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8011088:	7177      	strb	r7, [r6, #5]
 801108a:	e7ed      	b.n	8011068 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801108c:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8011090:	6803      	ldr	r3, [r0, #0]
 8011092:	e9cd a60c 	strd	sl, r6, [sp, #48]	@ 0x30
 8011096:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
 801109a:	69dc      	ldr	r4, [r3, #28]
 801109c:	463a      	mov	r2, r7
 801109e:	4643      	mov	r3, r8
 80110a0:	4629      	mov	r1, r5
 80110a2:	46a4      	mov	ip, r4
 80110a4:	b001      	add	sp, #4
 80110a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110aa:	4760      	bx	ip

080110ac <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80110ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110b0:	4607      	mov	r7, r0
 80110b2:	460c      	mov	r4, r1
 80110b4:	4615      	mov	r5, r2
 80110b6:	461e      	mov	r6, r3
 80110b8:	f7ff fafd 	bl	80106b6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80110bc:	b948      	cbnz	r0, 80110d2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80110be:	68b8      	ldr	r0, [r7, #8]
 80110c0:	6803      	ldr	r3, [r0, #0]
 80110c2:	699f      	ldr	r7, [r3, #24]
 80110c4:	462a      	mov	r2, r5
 80110c6:	4633      	mov	r3, r6
 80110c8:	4621      	mov	r1, r4
 80110ca:	46bc      	mov	ip, r7
 80110cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80110d0:	4760      	bx	ip
 80110d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080110d6 <_ZNSt9type_infoD1Ev>:
 80110d6:	4770      	bx	lr

080110d8 <_ZNKSt9type_info14__is_pointer_pEv>:
 80110d8:	2000      	movs	r0, #0
 80110da:	4770      	bx	lr

080110dc <_ZNKSt9type_info7__equalERKS_>:
 80110dc:	4281      	cmp	r1, r0
 80110de:	b508      	push	{r3, lr}
 80110e0:	d00e      	beq.n	8011100 <_ZNKSt9type_info7__equalERKS_+0x24>
 80110e2:	6840      	ldr	r0, [r0, #4]
 80110e4:	7803      	ldrb	r3, [r0, #0]
 80110e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80110e8:	d00c      	beq.n	8011104 <_ZNKSt9type_info7__equalERKS_+0x28>
 80110ea:	6849      	ldr	r1, [r1, #4]
 80110ec:	780b      	ldrb	r3, [r1, #0]
 80110ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80110f0:	bf08      	it	eq
 80110f2:	3101      	addeq	r1, #1
 80110f4:	f7ef f88c 	bl	8000210 <strcmp>
 80110f8:	fab0 f080 	clz	r0, r0
 80110fc:	0940      	lsrs	r0, r0, #5
 80110fe:	bd08      	pop	{r3, pc}
 8011100:	2001      	movs	r0, #1
 8011102:	e7fc      	b.n	80110fe <_ZNKSt9type_info7__equalERKS_+0x22>
 8011104:	2000      	movs	r0, #0
 8011106:	e7fa      	b.n	80110fe <_ZNKSt9type_info7__equalERKS_+0x22>

08011108 <_ZNKSt11logic_error4whatEv>:
 8011108:	6840      	ldr	r0, [r0, #4]
 801110a:	4770      	bx	lr

0801110c <_ZNSt13runtime_errorD1Ev>:
 801110c:	b513      	push	{r0, r1, r4, lr}
 801110e:	4b07      	ldr	r3, [pc, #28]	@ (801112c <_ZNSt13runtime_errorD1Ev+0x20>)
 8011110:	6003      	str	r3, [r0, #0]
 8011112:	4604      	mov	r4, r0
 8011114:	6840      	ldr	r0, [r0, #4]
 8011116:	a901      	add	r1, sp, #4
 8011118:	380c      	subs	r0, #12
 801111a:	f000 f8a9 	bl	8011270 <_ZNSs4_Rep10_M_disposeERKSaIcE>
 801111e:	4620      	mov	r0, r4
 8011120:	f7ff fc3a 	bl	8010998 <_ZNSt9exceptionD1Ev>
 8011124:	4620      	mov	r0, r4
 8011126:	b002      	add	sp, #8
 8011128:	bd10      	pop	{r4, pc}
 801112a:	bf00      	nop
 801112c:	08015300 	.word	0x08015300

08011130 <_ZNSt13runtime_errorD0Ev>:
 8011130:	b510      	push	{r4, lr}
 8011132:	4604      	mov	r4, r0
 8011134:	f7ff ffea 	bl	801110c <_ZNSt13runtime_errorD1Ev>
 8011138:	4620      	mov	r0, r4
 801113a:	f000 f8b5 	bl	80112a8 <_ZdlPv>
 801113e:	4620      	mov	r0, r4
 8011140:	bd10      	pop	{r4, pc}
	...

08011144 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0>:
 8011144:	4288      	cmp	r0, r1
 8011146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801114a:	4604      	mov	r4, r0
 801114c:	460d      	mov	r5, r1
 801114e:	d018      	beq.n	8011182 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x3e>
 8011150:	b1a0      	cbz	r0, 801117c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x38>
 8011152:	eba1 0800 	sub.w	r8, r1, r0
 8011156:	4640      	mov	r0, r8
 8011158:	2100      	movs	r1, #0
 801115a:	f000 f857 	bl	801120c <_ZNSs4_Rep9_S_createEjjRKSaIcE>
 801115e:	f100 070c 	add.w	r7, r0, #12
 8011162:	4606      	mov	r6, r0
 8011164:	4621      	mov	r1, r4
 8011166:	4638      	mov	r0, r7
 8011168:	462a      	mov	r2, r5
 801116a:	f000 f83d 	bl	80111e8 <_ZNSs13_S_copy_charsEPcPKcS1_>
 801116e:	4641      	mov	r1, r8
 8011170:	4630      	mov	r0, r6
 8011172:	f000 f83f 	bl	80111f4 <_ZNSs4_Rep26_M_set_length_and_sharableEj>
 8011176:	4638      	mov	r0, r7
 8011178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801117c:	4802      	ldr	r0, [pc, #8]	@ (8011188 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x44>)
 801117e:	f000 f888 	bl	8011292 <_ZSt19__throw_logic_errorPKc>
 8011182:	4f02      	ldr	r7, [pc, #8]	@ (801118c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x48>)
 8011184:	e7f7      	b.n	8011176 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x32>
 8011186:	bf00      	nop
 8011188:	0801530c 	.word	0x0801530c
 801118c:	200003e8 	.word	0x200003e8

08011190 <_ZNSsC2EPKcRKSaIcE.isra.0>:
 8011190:	b570      	push	{r4, r5, r6, lr}
 8011192:	4605      	mov	r5, r0
 8011194:	4616      	mov	r6, r2
 8011196:	460c      	mov	r4, r1
 8011198:	b149      	cbz	r1, 80111ae <_ZNSsC2EPKcRKSaIcE.isra.0+0x1e>
 801119a:	4608      	mov	r0, r1
 801119c:	f7ef f898 	bl	80002d0 <strlen>
 80111a0:	1821      	adds	r1, r4, r0
 80111a2:	4632      	mov	r2, r6
 80111a4:	4620      	mov	r0, r4
 80111a6:	f7ff ffcd 	bl	8011144 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0>
 80111aa:	6028      	str	r0, [r5, #0]
 80111ac:	bd70      	pop	{r4, r5, r6, pc}
 80111ae:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80111b2:	e7f6      	b.n	80111a2 <_ZNSsC2EPKcRKSaIcE.isra.0+0x12>

080111b4 <_ZNSt13runtime_errorC1EPKc>:
 80111b4:	b513      	push	{r0, r1, r4, lr}
 80111b6:	4b05      	ldr	r3, [pc, #20]	@ (80111cc <_ZNSt13runtime_errorC1EPKc+0x18>)
 80111b8:	4604      	mov	r4, r0
 80111ba:	aa01      	add	r2, sp, #4
 80111bc:	f840 3b04 	str.w	r3, [r0], #4
 80111c0:	f7ff ffe6 	bl	8011190 <_ZNSsC2EPKcRKSaIcE.isra.0>
 80111c4:	4620      	mov	r0, r4
 80111c6:	b002      	add	sp, #8
 80111c8:	bd10      	pop	{r4, pc}
 80111ca:	bf00      	nop
 80111cc:	08015300 	.word	0x08015300

080111d0 <_ZNSs7_M_copyEPcPKcj>:
 80111d0:	2a01      	cmp	r2, #1
 80111d2:	b430      	push	{r4, r5}
 80111d4:	d103      	bne.n	80111de <_ZNSs7_M_copyEPcPKcj+0xe>
 80111d6:	780b      	ldrb	r3, [r1, #0]
 80111d8:	7003      	strb	r3, [r0, #0]
 80111da:	bc30      	pop	{r4, r5}
 80111dc:	4770      	bx	lr
 80111de:	2a00      	cmp	r2, #0
 80111e0:	d0fb      	beq.n	80111da <_ZNSs7_M_copyEPcPKcj+0xa>
 80111e2:	bc30      	pop	{r4, r5}
 80111e4:	f000 bff5 	b.w	80121d2 <memcpy>

080111e8 <_ZNSs13_S_copy_charsEPcPKcS1_>:
 80111e8:	b508      	push	{r3, lr}
 80111ea:	1a52      	subs	r2, r2, r1
 80111ec:	f7ff fff0 	bl	80111d0 <_ZNSs7_M_copyEPcPKcj>
 80111f0:	bd08      	pop	{r3, pc}
	...

080111f4 <_ZNSs4_Rep26_M_set_length_and_sharableEj>:
 80111f4:	4b04      	ldr	r3, [pc, #16]	@ (8011208 <_ZNSs4_Rep26_M_set_length_and_sharableEj+0x14>)
 80111f6:	4298      	cmp	r0, r3
 80111f8:	d004      	beq.n	8011204 <_ZNSs4_Rep26_M_set_length_and_sharableEj+0x10>
 80111fa:	2300      	movs	r3, #0
 80111fc:	6083      	str	r3, [r0, #8]
 80111fe:	6001      	str	r1, [r0, #0]
 8011200:	4408      	add	r0, r1
 8011202:	7303      	strb	r3, [r0, #12]
 8011204:	4770      	bx	lr
 8011206:	bf00      	nop
 8011208:	200003dc 	.word	0x200003dc

0801120c <_ZNSs4_Rep9_S_createEjjRKSaIcE>:
 801120c:	4b15      	ldr	r3, [pc, #84]	@ (8011264 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x58>)
 801120e:	4298      	cmp	r0, r3
 8011210:	b510      	push	{r4, lr}
 8011212:	4604      	mov	r4, r0
 8011214:	d902      	bls.n	801121c <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x10>
 8011216:	4814      	ldr	r0, [pc, #80]	@ (8011268 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x5c>)
 8011218:	f000 f83e 	bl	8011298 <_ZSt20__throw_length_errorPKc>
 801121c:	4288      	cmp	r0, r1
 801121e:	d903      	bls.n	8011228 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x1c>
 8011220:	004b      	lsls	r3, r1, #1
 8011222:	4298      	cmp	r0, r3
 8011224:	bf38      	it	cc
 8011226:	461c      	movcc	r4, r3
 8011228:	f104 031d 	add.w	r3, r4, #29
 801122c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011230:	f104 000d 	add.w	r0, r4, #13
 8011234:	d90c      	bls.n	8011250 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 8011236:	428c      	cmp	r4, r1
 8011238:	d90a      	bls.n	8011250 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 801123a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801123e:	f504 5480 	add.w	r4, r4, #4096	@ 0x1000
 8011242:	1ae4      	subs	r4, r4, r3
 8011244:	4b07      	ldr	r3, [pc, #28]	@ (8011264 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x58>)
 8011246:	429c      	cmp	r4, r3
 8011248:	bf28      	it	cs
 801124a:	461c      	movcs	r4, r3
 801124c:	f104 000d 	add.w	r0, r4, #13
 8011250:	2800      	cmp	r0, #0
 8011252:	da01      	bge.n	8011258 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x4c>
 8011254:	f000 f81a 	bl	801128c <_ZSt17__throw_bad_allocv>
 8011258:	f7ff fea8 	bl	8010fac <_Znwj>
 801125c:	2200      	movs	r2, #0
 801125e:	6044      	str	r4, [r0, #4]
 8011260:	6082      	str	r2, [r0, #8]
 8011262:	bd10      	pop	{r4, pc}
 8011264:	3ffffffc 	.word	0x3ffffffc
 8011268:	08015336 	.word	0x08015336

0801126c <_ZNSs4_Rep10_M_destroyERKSaIcE>:
 801126c:	f000 b81c 	b.w	80112a8 <_ZdlPv>

08011270 <_ZNSs4_Rep10_M_disposeERKSaIcE>:
 8011270:	4a05      	ldr	r2, [pc, #20]	@ (8011288 <_ZNSs4_Rep10_M_disposeERKSaIcE+0x18>)
 8011272:	4290      	cmp	r0, r2
 8011274:	b510      	push	{r4, lr}
 8011276:	d006      	beq.n	8011286 <_ZNSs4_Rep10_M_disposeERKSaIcE+0x16>
 8011278:	6882      	ldr	r2, [r0, #8]
 801127a:	1e54      	subs	r4, r2, #1
 801127c:	2a00      	cmp	r2, #0
 801127e:	6084      	str	r4, [r0, #8]
 8011280:	dc01      	bgt.n	8011286 <_ZNSs4_Rep10_M_disposeERKSaIcE+0x16>
 8011282:	f7ff fff3 	bl	801126c <_ZNSs4_Rep10_M_destroyERKSaIcE>
 8011286:	bd10      	pop	{r4, pc}
 8011288:	200003dc 	.word	0x200003dc

0801128c <_ZSt17__throw_bad_allocv>:
 801128c:	b508      	push	{r3, lr}
 801128e:	f000 f89b 	bl	80113c8 <abort>

08011292 <_ZSt19__throw_logic_errorPKc>:
 8011292:	b508      	push	{r3, lr}
 8011294:	f000 f898 	bl	80113c8 <abort>

08011298 <_ZSt20__throw_length_errorPKc>:
 8011298:	b508      	push	{r3, lr}
 801129a:	f000 f895 	bl	80113c8 <abort>

0801129e <__aeabi_atexit>:
 801129e:	460b      	mov	r3, r1
 80112a0:	4601      	mov	r1, r0
 80112a2:	4618      	mov	r0, r3
 80112a4:	f000 b956 	b.w	8011554 <__cxa_atexit>

080112a8 <_ZdlPv>:
 80112a8:	f000 b89e 	b.w	80113e8 <free>

080112ac <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80112ac:	7803      	ldrb	r3, [r0, #0]
 80112ae:	2b47      	cmp	r3, #71	@ 0x47
 80112b0:	d117      	bne.n	80112e2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80112b2:	7843      	ldrb	r3, [r0, #1]
 80112b4:	2b4e      	cmp	r3, #78	@ 0x4e
 80112b6:	d114      	bne.n	80112e2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80112b8:	7883      	ldrb	r3, [r0, #2]
 80112ba:	2b55      	cmp	r3, #85	@ 0x55
 80112bc:	d111      	bne.n	80112e2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80112be:	78c3      	ldrb	r3, [r0, #3]
 80112c0:	2b43      	cmp	r3, #67	@ 0x43
 80112c2:	d10e      	bne.n	80112e2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80112c4:	7903      	ldrb	r3, [r0, #4]
 80112c6:	2b43      	cmp	r3, #67	@ 0x43
 80112c8:	d10b      	bne.n	80112e2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80112ca:	7943      	ldrb	r3, [r0, #5]
 80112cc:	2b2b      	cmp	r3, #43	@ 0x2b
 80112ce:	d108      	bne.n	80112e2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80112d0:	7983      	ldrb	r3, [r0, #6]
 80112d2:	2b2b      	cmp	r3, #43	@ 0x2b
 80112d4:	d105      	bne.n	80112e2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80112d6:	79c0      	ldrb	r0, [r0, #7]
 80112d8:	2801      	cmp	r0, #1
 80112da:	bf8c      	ite	hi
 80112dc:	2000      	movhi	r0, #0
 80112de:	2001      	movls	r0, #1
 80112e0:	4770      	bx	lr
 80112e2:	2000      	movs	r0, #0
 80112e4:	4770      	bx	lr

080112e6 <__cxa_call_terminate>:
 80112e6:	b510      	push	{r4, lr}
 80112e8:	4604      	mov	r4, r0
 80112ea:	b148      	cbz	r0, 8011300 <__cxa_call_terminate+0x1a>
 80112ec:	f000 f83b 	bl	8011366 <__cxa_begin_catch>
 80112f0:	4620      	mov	r0, r4
 80112f2:	f7ff ffdb 	bl	80112ac <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80112f6:	b118      	cbz	r0, 8011300 <__cxa_call_terminate+0x1a>
 80112f8:	f854 0c14 	ldr.w	r0, [r4, #-20]
 80112fc:	f7ff fdca 	bl	8010e94 <_ZN10__cxxabiv111__terminateEPFvvE>
 8011300:	f7ff fdd4 	bl	8010eac <_ZSt9terminatev>

08011304 <__cxa_call_unexpected>:
 8011304:	b538      	push	{r3, r4, r5, lr}
 8011306:	4602      	mov	r2, r0
 8011308:	f7ff ffd0 	bl	80112ac <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 801130c:	4604      	mov	r4, r0
 801130e:	b140      	cbz	r0, 8011322 <__cxa_call_unexpected+0x1e>
 8011310:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8011314:	2500      	movs	r5, #0
 8011316:	4610      	mov	r0, r2
 8011318:	f000 f825 	bl	8011366 <__cxa_begin_catch>
 801131c:	b11d      	cbz	r5, 8011326 <__cxa_call_unexpected+0x22>
 801131e:	f7ff fdd7 	bl	8010ed0 <_ZSt10unexpectedv>
 8011322:	2501      	movs	r5, #1
 8011324:	e7f7      	b.n	8011316 <__cxa_call_unexpected+0x12>
 8011326:	4620      	mov	r0, r4
 8011328:	f7ff fdc5 	bl	8010eb6 <_ZN10__cxxabiv112__unexpectedEPFvvE>

0801132c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 801132c:	7803      	ldrb	r3, [r0, #0]
 801132e:	2b47      	cmp	r3, #71	@ 0x47
 8011330:	d117      	bne.n	8011362 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011332:	7843      	ldrb	r3, [r0, #1]
 8011334:	2b4e      	cmp	r3, #78	@ 0x4e
 8011336:	d114      	bne.n	8011362 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011338:	7883      	ldrb	r3, [r0, #2]
 801133a:	2b55      	cmp	r3, #85	@ 0x55
 801133c:	d111      	bne.n	8011362 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801133e:	78c3      	ldrb	r3, [r0, #3]
 8011340:	2b43      	cmp	r3, #67	@ 0x43
 8011342:	d10e      	bne.n	8011362 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011344:	7903      	ldrb	r3, [r0, #4]
 8011346:	2b43      	cmp	r3, #67	@ 0x43
 8011348:	d10b      	bne.n	8011362 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801134a:	7943      	ldrb	r3, [r0, #5]
 801134c:	2b2b      	cmp	r3, #43	@ 0x2b
 801134e:	d108      	bne.n	8011362 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011350:	7983      	ldrb	r3, [r0, #6]
 8011352:	2b2b      	cmp	r3, #43	@ 0x2b
 8011354:	d105      	bne.n	8011362 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011356:	79c0      	ldrb	r0, [r0, #7]
 8011358:	2801      	cmp	r0, #1
 801135a:	bf8c      	ite	hi
 801135c:	2000      	movhi	r0, #0
 801135e:	2001      	movls	r0, #1
 8011360:	4770      	bx	lr
 8011362:	2000      	movs	r0, #0
 8011364:	4770      	bx	lr

08011366 <__cxa_begin_catch>:
 8011366:	b538      	push	{r3, r4, r5, lr}
 8011368:	4604      	mov	r4, r0
 801136a:	f7ff fb17 	bl	801099c <__cxa_get_globals>
 801136e:	6805      	ldr	r5, [r0, #0]
 8011370:	4602      	mov	r2, r0
 8011372:	4620      	mov	r0, r4
 8011374:	f1a4 0120 	sub.w	r1, r4, #32
 8011378:	f7ff ffd8 	bl	801132c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 801137c:	b928      	cbnz	r0, 801138a <__cxa_begin_catch+0x24>
 801137e:	b10d      	cbz	r5, 8011384 <__cxa_begin_catch+0x1e>
 8011380:	f7ff fd94 	bl	8010eac <_ZSt9terminatev>
 8011384:	6011      	str	r1, [r2, #0]
 8011386:	4628      	mov	r0, r5
 8011388:	bd38      	pop	{r3, r4, r5, pc}
 801138a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 801138e:	2b00      	cmp	r3, #0
 8011390:	bfb4      	ite	lt
 8011392:	f1c3 0301 	rsblt	r3, r3, #1
 8011396:	3301      	addge	r3, #1
 8011398:	f844 3c0c 	str.w	r3, [r4, #-12]
 801139c:	6853      	ldr	r3, [r2, #4]
 801139e:	428d      	cmp	r5, r1
 80113a0:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80113a4:	6053      	str	r3, [r2, #4]
 80113a6:	4620      	mov	r0, r4
 80113a8:	bf1c      	itt	ne
 80113aa:	f844 5c10 	strne.w	r5, [r4, #-16]
 80113ae:	6011      	strne	r1, [r2, #0]
 80113b0:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80113b2:	f7ef ffaf 	bl	8001314 <_Unwind_Complete>
 80113b6:	e7e6      	b.n	8011386 <__cxa_begin_catch+0x20>

080113b8 <_ZSt15get_new_handlerv>:
 80113b8:	4b02      	ldr	r3, [pc, #8]	@ (80113c4 <_ZSt15get_new_handlerv+0xc>)
 80113ba:	6818      	ldr	r0, [r3, #0]
 80113bc:	f3bf 8f5b 	dmb	ish
 80113c0:	4770      	bx	lr
 80113c2:	bf00      	nop
 80113c4:	200003ec 	.word	0x200003ec

080113c8 <abort>:
 80113c8:	b508      	push	{r3, lr}
 80113ca:	2006      	movs	r0, #6
 80113cc:	f000 fe5e 	bl	801208c <raise>
 80113d0:	2001      	movs	r0, #1
 80113d2:	f7fb fc37 	bl	800cc44 <_exit>
	...

080113d8 <malloc>:
 80113d8:	4b02      	ldr	r3, [pc, #8]	@ (80113e4 <malloc+0xc>)
 80113da:	4601      	mov	r1, r0
 80113dc:	6818      	ldr	r0, [r3, #0]
 80113de:	f000 b82d 	b.w	801143c <_malloc_r>
 80113e2:	bf00      	nop
 80113e4:	20000024 	.word	0x20000024

080113e8 <free>:
 80113e8:	4b02      	ldr	r3, [pc, #8]	@ (80113f4 <free+0xc>)
 80113ea:	4601      	mov	r1, r0
 80113ec:	6818      	ldr	r0, [r3, #0]
 80113ee:	f001 bd4b 	b.w	8012e88 <_free_r>
 80113f2:	bf00      	nop
 80113f4:	20000024 	.word	0x20000024

080113f8 <sbrk_aligned>:
 80113f8:	b570      	push	{r4, r5, r6, lr}
 80113fa:	4e0f      	ldr	r6, [pc, #60]	@ (8011438 <sbrk_aligned+0x40>)
 80113fc:	460c      	mov	r4, r1
 80113fe:	6831      	ldr	r1, [r6, #0]
 8011400:	4605      	mov	r5, r0
 8011402:	b911      	cbnz	r1, 801140a <sbrk_aligned+0x12>
 8011404:	f000 fe96 	bl	8012134 <_sbrk_r>
 8011408:	6030      	str	r0, [r6, #0]
 801140a:	4621      	mov	r1, r4
 801140c:	4628      	mov	r0, r5
 801140e:	f000 fe91 	bl	8012134 <_sbrk_r>
 8011412:	1c43      	adds	r3, r0, #1
 8011414:	d103      	bne.n	801141e <sbrk_aligned+0x26>
 8011416:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801141a:	4620      	mov	r0, r4
 801141c:	bd70      	pop	{r4, r5, r6, pc}
 801141e:	1cc4      	adds	r4, r0, #3
 8011420:	f024 0403 	bic.w	r4, r4, #3
 8011424:	42a0      	cmp	r0, r4
 8011426:	d0f8      	beq.n	801141a <sbrk_aligned+0x22>
 8011428:	1a21      	subs	r1, r4, r0
 801142a:	4628      	mov	r0, r5
 801142c:	f000 fe82 	bl	8012134 <_sbrk_r>
 8011430:	3001      	adds	r0, #1
 8011432:	d1f2      	bne.n	801141a <sbrk_aligned+0x22>
 8011434:	e7ef      	b.n	8011416 <sbrk_aligned+0x1e>
 8011436:	bf00      	nop
 8011438:	200003f0 	.word	0x200003f0

0801143c <_malloc_r>:
 801143c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011440:	1ccd      	adds	r5, r1, #3
 8011442:	f025 0503 	bic.w	r5, r5, #3
 8011446:	3508      	adds	r5, #8
 8011448:	2d0c      	cmp	r5, #12
 801144a:	bf38      	it	cc
 801144c:	250c      	movcc	r5, #12
 801144e:	2d00      	cmp	r5, #0
 8011450:	4606      	mov	r6, r0
 8011452:	db01      	blt.n	8011458 <_malloc_r+0x1c>
 8011454:	42a9      	cmp	r1, r5
 8011456:	d904      	bls.n	8011462 <_malloc_r+0x26>
 8011458:	230c      	movs	r3, #12
 801145a:	6033      	str	r3, [r6, #0]
 801145c:	2000      	movs	r0, #0
 801145e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011462:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011538 <_malloc_r+0xfc>
 8011466:	f000 f869 	bl	801153c <__malloc_lock>
 801146a:	f8d8 3000 	ldr.w	r3, [r8]
 801146e:	461c      	mov	r4, r3
 8011470:	bb44      	cbnz	r4, 80114c4 <_malloc_r+0x88>
 8011472:	4629      	mov	r1, r5
 8011474:	4630      	mov	r0, r6
 8011476:	f7ff ffbf 	bl	80113f8 <sbrk_aligned>
 801147a:	1c43      	adds	r3, r0, #1
 801147c:	4604      	mov	r4, r0
 801147e:	d158      	bne.n	8011532 <_malloc_r+0xf6>
 8011480:	f8d8 4000 	ldr.w	r4, [r8]
 8011484:	4627      	mov	r7, r4
 8011486:	2f00      	cmp	r7, #0
 8011488:	d143      	bne.n	8011512 <_malloc_r+0xd6>
 801148a:	2c00      	cmp	r4, #0
 801148c:	d04b      	beq.n	8011526 <_malloc_r+0xea>
 801148e:	6823      	ldr	r3, [r4, #0]
 8011490:	4639      	mov	r1, r7
 8011492:	4630      	mov	r0, r6
 8011494:	eb04 0903 	add.w	r9, r4, r3
 8011498:	f000 fe4c 	bl	8012134 <_sbrk_r>
 801149c:	4581      	cmp	r9, r0
 801149e:	d142      	bne.n	8011526 <_malloc_r+0xea>
 80114a0:	6821      	ldr	r1, [r4, #0]
 80114a2:	1a6d      	subs	r5, r5, r1
 80114a4:	4629      	mov	r1, r5
 80114a6:	4630      	mov	r0, r6
 80114a8:	f7ff ffa6 	bl	80113f8 <sbrk_aligned>
 80114ac:	3001      	adds	r0, #1
 80114ae:	d03a      	beq.n	8011526 <_malloc_r+0xea>
 80114b0:	6823      	ldr	r3, [r4, #0]
 80114b2:	442b      	add	r3, r5
 80114b4:	6023      	str	r3, [r4, #0]
 80114b6:	f8d8 3000 	ldr.w	r3, [r8]
 80114ba:	685a      	ldr	r2, [r3, #4]
 80114bc:	bb62      	cbnz	r2, 8011518 <_malloc_r+0xdc>
 80114be:	f8c8 7000 	str.w	r7, [r8]
 80114c2:	e00f      	b.n	80114e4 <_malloc_r+0xa8>
 80114c4:	6822      	ldr	r2, [r4, #0]
 80114c6:	1b52      	subs	r2, r2, r5
 80114c8:	d420      	bmi.n	801150c <_malloc_r+0xd0>
 80114ca:	2a0b      	cmp	r2, #11
 80114cc:	d917      	bls.n	80114fe <_malloc_r+0xc2>
 80114ce:	1961      	adds	r1, r4, r5
 80114d0:	42a3      	cmp	r3, r4
 80114d2:	6025      	str	r5, [r4, #0]
 80114d4:	bf18      	it	ne
 80114d6:	6059      	strne	r1, [r3, #4]
 80114d8:	6863      	ldr	r3, [r4, #4]
 80114da:	bf08      	it	eq
 80114dc:	f8c8 1000 	streq.w	r1, [r8]
 80114e0:	5162      	str	r2, [r4, r5]
 80114e2:	604b      	str	r3, [r1, #4]
 80114e4:	4630      	mov	r0, r6
 80114e6:	f000 f82f 	bl	8011548 <__malloc_unlock>
 80114ea:	f104 000b 	add.w	r0, r4, #11
 80114ee:	1d23      	adds	r3, r4, #4
 80114f0:	f020 0007 	bic.w	r0, r0, #7
 80114f4:	1ac2      	subs	r2, r0, r3
 80114f6:	bf1c      	itt	ne
 80114f8:	1a1b      	subne	r3, r3, r0
 80114fa:	50a3      	strne	r3, [r4, r2]
 80114fc:	e7af      	b.n	801145e <_malloc_r+0x22>
 80114fe:	6862      	ldr	r2, [r4, #4]
 8011500:	42a3      	cmp	r3, r4
 8011502:	bf0c      	ite	eq
 8011504:	f8c8 2000 	streq.w	r2, [r8]
 8011508:	605a      	strne	r2, [r3, #4]
 801150a:	e7eb      	b.n	80114e4 <_malloc_r+0xa8>
 801150c:	4623      	mov	r3, r4
 801150e:	6864      	ldr	r4, [r4, #4]
 8011510:	e7ae      	b.n	8011470 <_malloc_r+0x34>
 8011512:	463c      	mov	r4, r7
 8011514:	687f      	ldr	r7, [r7, #4]
 8011516:	e7b6      	b.n	8011486 <_malloc_r+0x4a>
 8011518:	461a      	mov	r2, r3
 801151a:	685b      	ldr	r3, [r3, #4]
 801151c:	42a3      	cmp	r3, r4
 801151e:	d1fb      	bne.n	8011518 <_malloc_r+0xdc>
 8011520:	2300      	movs	r3, #0
 8011522:	6053      	str	r3, [r2, #4]
 8011524:	e7de      	b.n	80114e4 <_malloc_r+0xa8>
 8011526:	230c      	movs	r3, #12
 8011528:	6033      	str	r3, [r6, #0]
 801152a:	4630      	mov	r0, r6
 801152c:	f000 f80c 	bl	8011548 <__malloc_unlock>
 8011530:	e794      	b.n	801145c <_malloc_r+0x20>
 8011532:	6005      	str	r5, [r0, #0]
 8011534:	e7d6      	b.n	80114e4 <_malloc_r+0xa8>
 8011536:	bf00      	nop
 8011538:	200003f4 	.word	0x200003f4

0801153c <__malloc_lock>:
 801153c:	4801      	ldr	r0, [pc, #4]	@ (8011544 <__malloc_lock+0x8>)
 801153e:	f000 be46 	b.w	80121ce <__retarget_lock_acquire_recursive>
 8011542:	bf00      	nop
 8011544:	20000538 	.word	0x20000538

08011548 <__malloc_unlock>:
 8011548:	4801      	ldr	r0, [pc, #4]	@ (8011550 <__malloc_unlock+0x8>)
 801154a:	f000 be41 	b.w	80121d0 <__retarget_lock_release_recursive>
 801154e:	bf00      	nop
 8011550:	20000538 	.word	0x20000538

08011554 <__cxa_atexit>:
 8011554:	b510      	push	{r4, lr}
 8011556:	4604      	mov	r4, r0
 8011558:	4804      	ldr	r0, [pc, #16]	@ (801156c <__cxa_atexit+0x18>)
 801155a:	4613      	mov	r3, r2
 801155c:	b120      	cbz	r0, 8011568 <__cxa_atexit+0x14>
 801155e:	460a      	mov	r2, r1
 8011560:	2002      	movs	r0, #2
 8011562:	4621      	mov	r1, r4
 8011564:	f3af 8000 	nop.w
 8011568:	bd10      	pop	{r4, pc}
 801156a:	bf00      	nop
 801156c:	00000000 	.word	0x00000000

08011570 <__cvt>:
 8011570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011574:	ec57 6b10 	vmov	r6, r7, d0
 8011578:	2f00      	cmp	r7, #0
 801157a:	460c      	mov	r4, r1
 801157c:	4619      	mov	r1, r3
 801157e:	463b      	mov	r3, r7
 8011580:	bfbb      	ittet	lt
 8011582:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8011586:	461f      	movlt	r7, r3
 8011588:	2300      	movge	r3, #0
 801158a:	232d      	movlt	r3, #45	@ 0x2d
 801158c:	700b      	strb	r3, [r1, #0]
 801158e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011590:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8011594:	4691      	mov	r9, r2
 8011596:	f023 0820 	bic.w	r8, r3, #32
 801159a:	bfbc      	itt	lt
 801159c:	4632      	movlt	r2, r6
 801159e:	4616      	movlt	r6, r2
 80115a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80115a4:	d005      	beq.n	80115b2 <__cvt+0x42>
 80115a6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80115aa:	d100      	bne.n	80115ae <__cvt+0x3e>
 80115ac:	3401      	adds	r4, #1
 80115ae:	2102      	movs	r1, #2
 80115b0:	e000      	b.n	80115b4 <__cvt+0x44>
 80115b2:	2103      	movs	r1, #3
 80115b4:	ab03      	add	r3, sp, #12
 80115b6:	9301      	str	r3, [sp, #4]
 80115b8:	ab02      	add	r3, sp, #8
 80115ba:	9300      	str	r3, [sp, #0]
 80115bc:	ec47 6b10 	vmov	d0, r6, r7
 80115c0:	4653      	mov	r3, sl
 80115c2:	4622      	mov	r2, r4
 80115c4:	f000 fe9c 	bl	8012300 <_dtoa_r>
 80115c8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80115cc:	4605      	mov	r5, r0
 80115ce:	d119      	bne.n	8011604 <__cvt+0x94>
 80115d0:	f019 0f01 	tst.w	r9, #1
 80115d4:	d00e      	beq.n	80115f4 <__cvt+0x84>
 80115d6:	eb00 0904 	add.w	r9, r0, r4
 80115da:	2200      	movs	r2, #0
 80115dc:	2300      	movs	r3, #0
 80115de:	4630      	mov	r0, r6
 80115e0:	4639      	mov	r1, r7
 80115e2:	f7ef faa1 	bl	8000b28 <__aeabi_dcmpeq>
 80115e6:	b108      	cbz	r0, 80115ec <__cvt+0x7c>
 80115e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80115ec:	2230      	movs	r2, #48	@ 0x30
 80115ee:	9b03      	ldr	r3, [sp, #12]
 80115f0:	454b      	cmp	r3, r9
 80115f2:	d31e      	bcc.n	8011632 <__cvt+0xc2>
 80115f4:	9b03      	ldr	r3, [sp, #12]
 80115f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80115f8:	1b5b      	subs	r3, r3, r5
 80115fa:	4628      	mov	r0, r5
 80115fc:	6013      	str	r3, [r2, #0]
 80115fe:	b004      	add	sp, #16
 8011600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011604:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011608:	eb00 0904 	add.w	r9, r0, r4
 801160c:	d1e5      	bne.n	80115da <__cvt+0x6a>
 801160e:	7803      	ldrb	r3, [r0, #0]
 8011610:	2b30      	cmp	r3, #48	@ 0x30
 8011612:	d10a      	bne.n	801162a <__cvt+0xba>
 8011614:	2200      	movs	r2, #0
 8011616:	2300      	movs	r3, #0
 8011618:	4630      	mov	r0, r6
 801161a:	4639      	mov	r1, r7
 801161c:	f7ef fa84 	bl	8000b28 <__aeabi_dcmpeq>
 8011620:	b918      	cbnz	r0, 801162a <__cvt+0xba>
 8011622:	f1c4 0401 	rsb	r4, r4, #1
 8011626:	f8ca 4000 	str.w	r4, [sl]
 801162a:	f8da 3000 	ldr.w	r3, [sl]
 801162e:	4499      	add	r9, r3
 8011630:	e7d3      	b.n	80115da <__cvt+0x6a>
 8011632:	1c59      	adds	r1, r3, #1
 8011634:	9103      	str	r1, [sp, #12]
 8011636:	701a      	strb	r2, [r3, #0]
 8011638:	e7d9      	b.n	80115ee <__cvt+0x7e>

0801163a <__exponent>:
 801163a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801163c:	2900      	cmp	r1, #0
 801163e:	bfba      	itte	lt
 8011640:	4249      	neglt	r1, r1
 8011642:	232d      	movlt	r3, #45	@ 0x2d
 8011644:	232b      	movge	r3, #43	@ 0x2b
 8011646:	2909      	cmp	r1, #9
 8011648:	7002      	strb	r2, [r0, #0]
 801164a:	7043      	strb	r3, [r0, #1]
 801164c:	dd29      	ble.n	80116a2 <__exponent+0x68>
 801164e:	f10d 0307 	add.w	r3, sp, #7
 8011652:	461d      	mov	r5, r3
 8011654:	270a      	movs	r7, #10
 8011656:	461a      	mov	r2, r3
 8011658:	fbb1 f6f7 	udiv	r6, r1, r7
 801165c:	fb07 1416 	mls	r4, r7, r6, r1
 8011660:	3430      	adds	r4, #48	@ 0x30
 8011662:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011666:	460c      	mov	r4, r1
 8011668:	2c63      	cmp	r4, #99	@ 0x63
 801166a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801166e:	4631      	mov	r1, r6
 8011670:	dcf1      	bgt.n	8011656 <__exponent+0x1c>
 8011672:	3130      	adds	r1, #48	@ 0x30
 8011674:	1e94      	subs	r4, r2, #2
 8011676:	f803 1c01 	strb.w	r1, [r3, #-1]
 801167a:	1c41      	adds	r1, r0, #1
 801167c:	4623      	mov	r3, r4
 801167e:	42ab      	cmp	r3, r5
 8011680:	d30a      	bcc.n	8011698 <__exponent+0x5e>
 8011682:	f10d 0309 	add.w	r3, sp, #9
 8011686:	1a9b      	subs	r3, r3, r2
 8011688:	42ac      	cmp	r4, r5
 801168a:	bf88      	it	hi
 801168c:	2300      	movhi	r3, #0
 801168e:	3302      	adds	r3, #2
 8011690:	4403      	add	r3, r0
 8011692:	1a18      	subs	r0, r3, r0
 8011694:	b003      	add	sp, #12
 8011696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011698:	f813 6b01 	ldrb.w	r6, [r3], #1
 801169c:	f801 6f01 	strb.w	r6, [r1, #1]!
 80116a0:	e7ed      	b.n	801167e <__exponent+0x44>
 80116a2:	2330      	movs	r3, #48	@ 0x30
 80116a4:	3130      	adds	r1, #48	@ 0x30
 80116a6:	7083      	strb	r3, [r0, #2]
 80116a8:	70c1      	strb	r1, [r0, #3]
 80116aa:	1d03      	adds	r3, r0, #4
 80116ac:	e7f1      	b.n	8011692 <__exponent+0x58>
	...

080116b0 <_printf_float>:
 80116b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116b4:	b08d      	sub	sp, #52	@ 0x34
 80116b6:	460c      	mov	r4, r1
 80116b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80116bc:	4616      	mov	r6, r2
 80116be:	461f      	mov	r7, r3
 80116c0:	4605      	mov	r5, r0
 80116c2:	f000 fceb 	bl	801209c <_localeconv_r>
 80116c6:	6803      	ldr	r3, [r0, #0]
 80116c8:	9304      	str	r3, [sp, #16]
 80116ca:	4618      	mov	r0, r3
 80116cc:	f7ee fe00 	bl	80002d0 <strlen>
 80116d0:	2300      	movs	r3, #0
 80116d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80116d4:	f8d8 3000 	ldr.w	r3, [r8]
 80116d8:	9005      	str	r0, [sp, #20]
 80116da:	3307      	adds	r3, #7
 80116dc:	f023 0307 	bic.w	r3, r3, #7
 80116e0:	f103 0208 	add.w	r2, r3, #8
 80116e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80116e8:	f8d4 b000 	ldr.w	fp, [r4]
 80116ec:	f8c8 2000 	str.w	r2, [r8]
 80116f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80116f4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80116f8:	9307      	str	r3, [sp, #28]
 80116fa:	f8cd 8018 	str.w	r8, [sp, #24]
 80116fe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8011702:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011706:	4b9c      	ldr	r3, [pc, #624]	@ (8011978 <_printf_float+0x2c8>)
 8011708:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801170c:	f7ef fa3e 	bl	8000b8c <__aeabi_dcmpun>
 8011710:	bb70      	cbnz	r0, 8011770 <_printf_float+0xc0>
 8011712:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011716:	4b98      	ldr	r3, [pc, #608]	@ (8011978 <_printf_float+0x2c8>)
 8011718:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801171c:	f7ef fa18 	bl	8000b50 <__aeabi_dcmple>
 8011720:	bb30      	cbnz	r0, 8011770 <_printf_float+0xc0>
 8011722:	2200      	movs	r2, #0
 8011724:	2300      	movs	r3, #0
 8011726:	4640      	mov	r0, r8
 8011728:	4649      	mov	r1, r9
 801172a:	f7ef fa07 	bl	8000b3c <__aeabi_dcmplt>
 801172e:	b110      	cbz	r0, 8011736 <_printf_float+0x86>
 8011730:	232d      	movs	r3, #45	@ 0x2d
 8011732:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011736:	4a91      	ldr	r2, [pc, #580]	@ (801197c <_printf_float+0x2cc>)
 8011738:	4b91      	ldr	r3, [pc, #580]	@ (8011980 <_printf_float+0x2d0>)
 801173a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801173e:	bf94      	ite	ls
 8011740:	4690      	movls	r8, r2
 8011742:	4698      	movhi	r8, r3
 8011744:	2303      	movs	r3, #3
 8011746:	6123      	str	r3, [r4, #16]
 8011748:	f02b 0304 	bic.w	r3, fp, #4
 801174c:	6023      	str	r3, [r4, #0]
 801174e:	f04f 0900 	mov.w	r9, #0
 8011752:	9700      	str	r7, [sp, #0]
 8011754:	4633      	mov	r3, r6
 8011756:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011758:	4621      	mov	r1, r4
 801175a:	4628      	mov	r0, r5
 801175c:	f000 f9d2 	bl	8011b04 <_printf_common>
 8011760:	3001      	adds	r0, #1
 8011762:	f040 808d 	bne.w	8011880 <_printf_float+0x1d0>
 8011766:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801176a:	b00d      	add	sp, #52	@ 0x34
 801176c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011770:	4642      	mov	r2, r8
 8011772:	464b      	mov	r3, r9
 8011774:	4640      	mov	r0, r8
 8011776:	4649      	mov	r1, r9
 8011778:	f7ef fa08 	bl	8000b8c <__aeabi_dcmpun>
 801177c:	b140      	cbz	r0, 8011790 <_printf_float+0xe0>
 801177e:	464b      	mov	r3, r9
 8011780:	2b00      	cmp	r3, #0
 8011782:	bfbc      	itt	lt
 8011784:	232d      	movlt	r3, #45	@ 0x2d
 8011786:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801178a:	4a7e      	ldr	r2, [pc, #504]	@ (8011984 <_printf_float+0x2d4>)
 801178c:	4b7e      	ldr	r3, [pc, #504]	@ (8011988 <_printf_float+0x2d8>)
 801178e:	e7d4      	b.n	801173a <_printf_float+0x8a>
 8011790:	6863      	ldr	r3, [r4, #4]
 8011792:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8011796:	9206      	str	r2, [sp, #24]
 8011798:	1c5a      	adds	r2, r3, #1
 801179a:	d13b      	bne.n	8011814 <_printf_float+0x164>
 801179c:	2306      	movs	r3, #6
 801179e:	6063      	str	r3, [r4, #4]
 80117a0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80117a4:	2300      	movs	r3, #0
 80117a6:	6022      	str	r2, [r4, #0]
 80117a8:	9303      	str	r3, [sp, #12]
 80117aa:	ab0a      	add	r3, sp, #40	@ 0x28
 80117ac:	e9cd a301 	strd	sl, r3, [sp, #4]
 80117b0:	ab09      	add	r3, sp, #36	@ 0x24
 80117b2:	9300      	str	r3, [sp, #0]
 80117b4:	6861      	ldr	r1, [r4, #4]
 80117b6:	ec49 8b10 	vmov	d0, r8, r9
 80117ba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80117be:	4628      	mov	r0, r5
 80117c0:	f7ff fed6 	bl	8011570 <__cvt>
 80117c4:	9b06      	ldr	r3, [sp, #24]
 80117c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80117c8:	2b47      	cmp	r3, #71	@ 0x47
 80117ca:	4680      	mov	r8, r0
 80117cc:	d129      	bne.n	8011822 <_printf_float+0x172>
 80117ce:	1cc8      	adds	r0, r1, #3
 80117d0:	db02      	blt.n	80117d8 <_printf_float+0x128>
 80117d2:	6863      	ldr	r3, [r4, #4]
 80117d4:	4299      	cmp	r1, r3
 80117d6:	dd41      	ble.n	801185c <_printf_float+0x1ac>
 80117d8:	f1aa 0a02 	sub.w	sl, sl, #2
 80117dc:	fa5f fa8a 	uxtb.w	sl, sl
 80117e0:	3901      	subs	r1, #1
 80117e2:	4652      	mov	r2, sl
 80117e4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80117e8:	9109      	str	r1, [sp, #36]	@ 0x24
 80117ea:	f7ff ff26 	bl	801163a <__exponent>
 80117ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80117f0:	1813      	adds	r3, r2, r0
 80117f2:	2a01      	cmp	r2, #1
 80117f4:	4681      	mov	r9, r0
 80117f6:	6123      	str	r3, [r4, #16]
 80117f8:	dc02      	bgt.n	8011800 <_printf_float+0x150>
 80117fa:	6822      	ldr	r2, [r4, #0]
 80117fc:	07d2      	lsls	r2, r2, #31
 80117fe:	d501      	bpl.n	8011804 <_printf_float+0x154>
 8011800:	3301      	adds	r3, #1
 8011802:	6123      	str	r3, [r4, #16]
 8011804:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011808:	2b00      	cmp	r3, #0
 801180a:	d0a2      	beq.n	8011752 <_printf_float+0xa2>
 801180c:	232d      	movs	r3, #45	@ 0x2d
 801180e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011812:	e79e      	b.n	8011752 <_printf_float+0xa2>
 8011814:	9a06      	ldr	r2, [sp, #24]
 8011816:	2a47      	cmp	r2, #71	@ 0x47
 8011818:	d1c2      	bne.n	80117a0 <_printf_float+0xf0>
 801181a:	2b00      	cmp	r3, #0
 801181c:	d1c0      	bne.n	80117a0 <_printf_float+0xf0>
 801181e:	2301      	movs	r3, #1
 8011820:	e7bd      	b.n	801179e <_printf_float+0xee>
 8011822:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011826:	d9db      	bls.n	80117e0 <_printf_float+0x130>
 8011828:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801182c:	d118      	bne.n	8011860 <_printf_float+0x1b0>
 801182e:	2900      	cmp	r1, #0
 8011830:	6863      	ldr	r3, [r4, #4]
 8011832:	dd0b      	ble.n	801184c <_printf_float+0x19c>
 8011834:	6121      	str	r1, [r4, #16]
 8011836:	b913      	cbnz	r3, 801183e <_printf_float+0x18e>
 8011838:	6822      	ldr	r2, [r4, #0]
 801183a:	07d0      	lsls	r0, r2, #31
 801183c:	d502      	bpl.n	8011844 <_printf_float+0x194>
 801183e:	3301      	adds	r3, #1
 8011840:	440b      	add	r3, r1
 8011842:	6123      	str	r3, [r4, #16]
 8011844:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011846:	f04f 0900 	mov.w	r9, #0
 801184a:	e7db      	b.n	8011804 <_printf_float+0x154>
 801184c:	b913      	cbnz	r3, 8011854 <_printf_float+0x1a4>
 801184e:	6822      	ldr	r2, [r4, #0]
 8011850:	07d2      	lsls	r2, r2, #31
 8011852:	d501      	bpl.n	8011858 <_printf_float+0x1a8>
 8011854:	3302      	adds	r3, #2
 8011856:	e7f4      	b.n	8011842 <_printf_float+0x192>
 8011858:	2301      	movs	r3, #1
 801185a:	e7f2      	b.n	8011842 <_printf_float+0x192>
 801185c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8011860:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011862:	4299      	cmp	r1, r3
 8011864:	db05      	blt.n	8011872 <_printf_float+0x1c2>
 8011866:	6823      	ldr	r3, [r4, #0]
 8011868:	6121      	str	r1, [r4, #16]
 801186a:	07d8      	lsls	r0, r3, #31
 801186c:	d5ea      	bpl.n	8011844 <_printf_float+0x194>
 801186e:	1c4b      	adds	r3, r1, #1
 8011870:	e7e7      	b.n	8011842 <_printf_float+0x192>
 8011872:	2900      	cmp	r1, #0
 8011874:	bfd4      	ite	le
 8011876:	f1c1 0202 	rsble	r2, r1, #2
 801187a:	2201      	movgt	r2, #1
 801187c:	4413      	add	r3, r2
 801187e:	e7e0      	b.n	8011842 <_printf_float+0x192>
 8011880:	6823      	ldr	r3, [r4, #0]
 8011882:	055a      	lsls	r2, r3, #21
 8011884:	d407      	bmi.n	8011896 <_printf_float+0x1e6>
 8011886:	6923      	ldr	r3, [r4, #16]
 8011888:	4642      	mov	r2, r8
 801188a:	4631      	mov	r1, r6
 801188c:	4628      	mov	r0, r5
 801188e:	47b8      	blx	r7
 8011890:	3001      	adds	r0, #1
 8011892:	d12b      	bne.n	80118ec <_printf_float+0x23c>
 8011894:	e767      	b.n	8011766 <_printf_float+0xb6>
 8011896:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801189a:	f240 80dd 	bls.w	8011a58 <_printf_float+0x3a8>
 801189e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80118a2:	2200      	movs	r2, #0
 80118a4:	2300      	movs	r3, #0
 80118a6:	f7ef f93f 	bl	8000b28 <__aeabi_dcmpeq>
 80118aa:	2800      	cmp	r0, #0
 80118ac:	d033      	beq.n	8011916 <_printf_float+0x266>
 80118ae:	4a37      	ldr	r2, [pc, #220]	@ (801198c <_printf_float+0x2dc>)
 80118b0:	2301      	movs	r3, #1
 80118b2:	4631      	mov	r1, r6
 80118b4:	4628      	mov	r0, r5
 80118b6:	47b8      	blx	r7
 80118b8:	3001      	adds	r0, #1
 80118ba:	f43f af54 	beq.w	8011766 <_printf_float+0xb6>
 80118be:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80118c2:	4543      	cmp	r3, r8
 80118c4:	db02      	blt.n	80118cc <_printf_float+0x21c>
 80118c6:	6823      	ldr	r3, [r4, #0]
 80118c8:	07d8      	lsls	r0, r3, #31
 80118ca:	d50f      	bpl.n	80118ec <_printf_float+0x23c>
 80118cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80118d0:	4631      	mov	r1, r6
 80118d2:	4628      	mov	r0, r5
 80118d4:	47b8      	blx	r7
 80118d6:	3001      	adds	r0, #1
 80118d8:	f43f af45 	beq.w	8011766 <_printf_float+0xb6>
 80118dc:	f04f 0900 	mov.w	r9, #0
 80118e0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80118e4:	f104 0a1a 	add.w	sl, r4, #26
 80118e8:	45c8      	cmp	r8, r9
 80118ea:	dc09      	bgt.n	8011900 <_printf_float+0x250>
 80118ec:	6823      	ldr	r3, [r4, #0]
 80118ee:	079b      	lsls	r3, r3, #30
 80118f0:	f100 8103 	bmi.w	8011afa <_printf_float+0x44a>
 80118f4:	68e0      	ldr	r0, [r4, #12]
 80118f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80118f8:	4298      	cmp	r0, r3
 80118fa:	bfb8      	it	lt
 80118fc:	4618      	movlt	r0, r3
 80118fe:	e734      	b.n	801176a <_printf_float+0xba>
 8011900:	2301      	movs	r3, #1
 8011902:	4652      	mov	r2, sl
 8011904:	4631      	mov	r1, r6
 8011906:	4628      	mov	r0, r5
 8011908:	47b8      	blx	r7
 801190a:	3001      	adds	r0, #1
 801190c:	f43f af2b 	beq.w	8011766 <_printf_float+0xb6>
 8011910:	f109 0901 	add.w	r9, r9, #1
 8011914:	e7e8      	b.n	80118e8 <_printf_float+0x238>
 8011916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011918:	2b00      	cmp	r3, #0
 801191a:	dc39      	bgt.n	8011990 <_printf_float+0x2e0>
 801191c:	4a1b      	ldr	r2, [pc, #108]	@ (801198c <_printf_float+0x2dc>)
 801191e:	2301      	movs	r3, #1
 8011920:	4631      	mov	r1, r6
 8011922:	4628      	mov	r0, r5
 8011924:	47b8      	blx	r7
 8011926:	3001      	adds	r0, #1
 8011928:	f43f af1d 	beq.w	8011766 <_printf_float+0xb6>
 801192c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011930:	ea59 0303 	orrs.w	r3, r9, r3
 8011934:	d102      	bne.n	801193c <_printf_float+0x28c>
 8011936:	6823      	ldr	r3, [r4, #0]
 8011938:	07d9      	lsls	r1, r3, #31
 801193a:	d5d7      	bpl.n	80118ec <_printf_float+0x23c>
 801193c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011940:	4631      	mov	r1, r6
 8011942:	4628      	mov	r0, r5
 8011944:	47b8      	blx	r7
 8011946:	3001      	adds	r0, #1
 8011948:	f43f af0d 	beq.w	8011766 <_printf_float+0xb6>
 801194c:	f04f 0a00 	mov.w	sl, #0
 8011950:	f104 0b1a 	add.w	fp, r4, #26
 8011954:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011956:	425b      	negs	r3, r3
 8011958:	4553      	cmp	r3, sl
 801195a:	dc01      	bgt.n	8011960 <_printf_float+0x2b0>
 801195c:	464b      	mov	r3, r9
 801195e:	e793      	b.n	8011888 <_printf_float+0x1d8>
 8011960:	2301      	movs	r3, #1
 8011962:	465a      	mov	r2, fp
 8011964:	4631      	mov	r1, r6
 8011966:	4628      	mov	r0, r5
 8011968:	47b8      	blx	r7
 801196a:	3001      	adds	r0, #1
 801196c:	f43f aefb 	beq.w	8011766 <_printf_float+0xb6>
 8011970:	f10a 0a01 	add.w	sl, sl, #1
 8011974:	e7ee      	b.n	8011954 <_printf_float+0x2a4>
 8011976:	bf00      	nop
 8011978:	7fefffff 	.word	0x7fefffff
 801197c:	0801534e 	.word	0x0801534e
 8011980:	08015352 	.word	0x08015352
 8011984:	08015356 	.word	0x08015356
 8011988:	0801535a 	.word	0x0801535a
 801198c:	0801535e 	.word	0x0801535e
 8011990:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011992:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011996:	4553      	cmp	r3, sl
 8011998:	bfa8      	it	ge
 801199a:	4653      	movge	r3, sl
 801199c:	2b00      	cmp	r3, #0
 801199e:	4699      	mov	r9, r3
 80119a0:	dc36      	bgt.n	8011a10 <_printf_float+0x360>
 80119a2:	f04f 0b00 	mov.w	fp, #0
 80119a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80119aa:	f104 021a 	add.w	r2, r4, #26
 80119ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80119b0:	9306      	str	r3, [sp, #24]
 80119b2:	eba3 0309 	sub.w	r3, r3, r9
 80119b6:	455b      	cmp	r3, fp
 80119b8:	dc31      	bgt.n	8011a1e <_printf_float+0x36e>
 80119ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80119bc:	459a      	cmp	sl, r3
 80119be:	dc3a      	bgt.n	8011a36 <_printf_float+0x386>
 80119c0:	6823      	ldr	r3, [r4, #0]
 80119c2:	07da      	lsls	r2, r3, #31
 80119c4:	d437      	bmi.n	8011a36 <_printf_float+0x386>
 80119c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80119c8:	ebaa 0903 	sub.w	r9, sl, r3
 80119cc:	9b06      	ldr	r3, [sp, #24]
 80119ce:	ebaa 0303 	sub.w	r3, sl, r3
 80119d2:	4599      	cmp	r9, r3
 80119d4:	bfa8      	it	ge
 80119d6:	4699      	movge	r9, r3
 80119d8:	f1b9 0f00 	cmp.w	r9, #0
 80119dc:	dc33      	bgt.n	8011a46 <_printf_float+0x396>
 80119de:	f04f 0800 	mov.w	r8, #0
 80119e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80119e6:	f104 0b1a 	add.w	fp, r4, #26
 80119ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80119ec:	ebaa 0303 	sub.w	r3, sl, r3
 80119f0:	eba3 0309 	sub.w	r3, r3, r9
 80119f4:	4543      	cmp	r3, r8
 80119f6:	f77f af79 	ble.w	80118ec <_printf_float+0x23c>
 80119fa:	2301      	movs	r3, #1
 80119fc:	465a      	mov	r2, fp
 80119fe:	4631      	mov	r1, r6
 8011a00:	4628      	mov	r0, r5
 8011a02:	47b8      	blx	r7
 8011a04:	3001      	adds	r0, #1
 8011a06:	f43f aeae 	beq.w	8011766 <_printf_float+0xb6>
 8011a0a:	f108 0801 	add.w	r8, r8, #1
 8011a0e:	e7ec      	b.n	80119ea <_printf_float+0x33a>
 8011a10:	4642      	mov	r2, r8
 8011a12:	4631      	mov	r1, r6
 8011a14:	4628      	mov	r0, r5
 8011a16:	47b8      	blx	r7
 8011a18:	3001      	adds	r0, #1
 8011a1a:	d1c2      	bne.n	80119a2 <_printf_float+0x2f2>
 8011a1c:	e6a3      	b.n	8011766 <_printf_float+0xb6>
 8011a1e:	2301      	movs	r3, #1
 8011a20:	4631      	mov	r1, r6
 8011a22:	4628      	mov	r0, r5
 8011a24:	9206      	str	r2, [sp, #24]
 8011a26:	47b8      	blx	r7
 8011a28:	3001      	adds	r0, #1
 8011a2a:	f43f ae9c 	beq.w	8011766 <_printf_float+0xb6>
 8011a2e:	9a06      	ldr	r2, [sp, #24]
 8011a30:	f10b 0b01 	add.w	fp, fp, #1
 8011a34:	e7bb      	b.n	80119ae <_printf_float+0x2fe>
 8011a36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011a3a:	4631      	mov	r1, r6
 8011a3c:	4628      	mov	r0, r5
 8011a3e:	47b8      	blx	r7
 8011a40:	3001      	adds	r0, #1
 8011a42:	d1c0      	bne.n	80119c6 <_printf_float+0x316>
 8011a44:	e68f      	b.n	8011766 <_printf_float+0xb6>
 8011a46:	9a06      	ldr	r2, [sp, #24]
 8011a48:	464b      	mov	r3, r9
 8011a4a:	4442      	add	r2, r8
 8011a4c:	4631      	mov	r1, r6
 8011a4e:	4628      	mov	r0, r5
 8011a50:	47b8      	blx	r7
 8011a52:	3001      	adds	r0, #1
 8011a54:	d1c3      	bne.n	80119de <_printf_float+0x32e>
 8011a56:	e686      	b.n	8011766 <_printf_float+0xb6>
 8011a58:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011a5c:	f1ba 0f01 	cmp.w	sl, #1
 8011a60:	dc01      	bgt.n	8011a66 <_printf_float+0x3b6>
 8011a62:	07db      	lsls	r3, r3, #31
 8011a64:	d536      	bpl.n	8011ad4 <_printf_float+0x424>
 8011a66:	2301      	movs	r3, #1
 8011a68:	4642      	mov	r2, r8
 8011a6a:	4631      	mov	r1, r6
 8011a6c:	4628      	mov	r0, r5
 8011a6e:	47b8      	blx	r7
 8011a70:	3001      	adds	r0, #1
 8011a72:	f43f ae78 	beq.w	8011766 <_printf_float+0xb6>
 8011a76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011a7a:	4631      	mov	r1, r6
 8011a7c:	4628      	mov	r0, r5
 8011a7e:	47b8      	blx	r7
 8011a80:	3001      	adds	r0, #1
 8011a82:	f43f ae70 	beq.w	8011766 <_printf_float+0xb6>
 8011a86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8011a92:	f7ef f849 	bl	8000b28 <__aeabi_dcmpeq>
 8011a96:	b9c0      	cbnz	r0, 8011aca <_printf_float+0x41a>
 8011a98:	4653      	mov	r3, sl
 8011a9a:	f108 0201 	add.w	r2, r8, #1
 8011a9e:	4631      	mov	r1, r6
 8011aa0:	4628      	mov	r0, r5
 8011aa2:	47b8      	blx	r7
 8011aa4:	3001      	adds	r0, #1
 8011aa6:	d10c      	bne.n	8011ac2 <_printf_float+0x412>
 8011aa8:	e65d      	b.n	8011766 <_printf_float+0xb6>
 8011aaa:	2301      	movs	r3, #1
 8011aac:	465a      	mov	r2, fp
 8011aae:	4631      	mov	r1, r6
 8011ab0:	4628      	mov	r0, r5
 8011ab2:	47b8      	blx	r7
 8011ab4:	3001      	adds	r0, #1
 8011ab6:	f43f ae56 	beq.w	8011766 <_printf_float+0xb6>
 8011aba:	f108 0801 	add.w	r8, r8, #1
 8011abe:	45d0      	cmp	r8, sl
 8011ac0:	dbf3      	blt.n	8011aaa <_printf_float+0x3fa>
 8011ac2:	464b      	mov	r3, r9
 8011ac4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011ac8:	e6df      	b.n	801188a <_printf_float+0x1da>
 8011aca:	f04f 0800 	mov.w	r8, #0
 8011ace:	f104 0b1a 	add.w	fp, r4, #26
 8011ad2:	e7f4      	b.n	8011abe <_printf_float+0x40e>
 8011ad4:	2301      	movs	r3, #1
 8011ad6:	4642      	mov	r2, r8
 8011ad8:	e7e1      	b.n	8011a9e <_printf_float+0x3ee>
 8011ada:	2301      	movs	r3, #1
 8011adc:	464a      	mov	r2, r9
 8011ade:	4631      	mov	r1, r6
 8011ae0:	4628      	mov	r0, r5
 8011ae2:	47b8      	blx	r7
 8011ae4:	3001      	adds	r0, #1
 8011ae6:	f43f ae3e 	beq.w	8011766 <_printf_float+0xb6>
 8011aea:	f108 0801 	add.w	r8, r8, #1
 8011aee:	68e3      	ldr	r3, [r4, #12]
 8011af0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011af2:	1a5b      	subs	r3, r3, r1
 8011af4:	4543      	cmp	r3, r8
 8011af6:	dcf0      	bgt.n	8011ada <_printf_float+0x42a>
 8011af8:	e6fc      	b.n	80118f4 <_printf_float+0x244>
 8011afa:	f04f 0800 	mov.w	r8, #0
 8011afe:	f104 0919 	add.w	r9, r4, #25
 8011b02:	e7f4      	b.n	8011aee <_printf_float+0x43e>

08011b04 <_printf_common>:
 8011b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b08:	4616      	mov	r6, r2
 8011b0a:	4698      	mov	r8, r3
 8011b0c:	688a      	ldr	r2, [r1, #8]
 8011b0e:	690b      	ldr	r3, [r1, #16]
 8011b10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011b14:	4293      	cmp	r3, r2
 8011b16:	bfb8      	it	lt
 8011b18:	4613      	movlt	r3, r2
 8011b1a:	6033      	str	r3, [r6, #0]
 8011b1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011b20:	4607      	mov	r7, r0
 8011b22:	460c      	mov	r4, r1
 8011b24:	b10a      	cbz	r2, 8011b2a <_printf_common+0x26>
 8011b26:	3301      	adds	r3, #1
 8011b28:	6033      	str	r3, [r6, #0]
 8011b2a:	6823      	ldr	r3, [r4, #0]
 8011b2c:	0699      	lsls	r1, r3, #26
 8011b2e:	bf42      	ittt	mi
 8011b30:	6833      	ldrmi	r3, [r6, #0]
 8011b32:	3302      	addmi	r3, #2
 8011b34:	6033      	strmi	r3, [r6, #0]
 8011b36:	6825      	ldr	r5, [r4, #0]
 8011b38:	f015 0506 	ands.w	r5, r5, #6
 8011b3c:	d106      	bne.n	8011b4c <_printf_common+0x48>
 8011b3e:	f104 0a19 	add.w	sl, r4, #25
 8011b42:	68e3      	ldr	r3, [r4, #12]
 8011b44:	6832      	ldr	r2, [r6, #0]
 8011b46:	1a9b      	subs	r3, r3, r2
 8011b48:	42ab      	cmp	r3, r5
 8011b4a:	dc26      	bgt.n	8011b9a <_printf_common+0x96>
 8011b4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011b50:	6822      	ldr	r2, [r4, #0]
 8011b52:	3b00      	subs	r3, #0
 8011b54:	bf18      	it	ne
 8011b56:	2301      	movne	r3, #1
 8011b58:	0692      	lsls	r2, r2, #26
 8011b5a:	d42b      	bmi.n	8011bb4 <_printf_common+0xb0>
 8011b5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011b60:	4641      	mov	r1, r8
 8011b62:	4638      	mov	r0, r7
 8011b64:	47c8      	blx	r9
 8011b66:	3001      	adds	r0, #1
 8011b68:	d01e      	beq.n	8011ba8 <_printf_common+0xa4>
 8011b6a:	6823      	ldr	r3, [r4, #0]
 8011b6c:	6922      	ldr	r2, [r4, #16]
 8011b6e:	f003 0306 	and.w	r3, r3, #6
 8011b72:	2b04      	cmp	r3, #4
 8011b74:	bf02      	ittt	eq
 8011b76:	68e5      	ldreq	r5, [r4, #12]
 8011b78:	6833      	ldreq	r3, [r6, #0]
 8011b7a:	1aed      	subeq	r5, r5, r3
 8011b7c:	68a3      	ldr	r3, [r4, #8]
 8011b7e:	bf0c      	ite	eq
 8011b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011b84:	2500      	movne	r5, #0
 8011b86:	4293      	cmp	r3, r2
 8011b88:	bfc4      	itt	gt
 8011b8a:	1a9b      	subgt	r3, r3, r2
 8011b8c:	18ed      	addgt	r5, r5, r3
 8011b8e:	2600      	movs	r6, #0
 8011b90:	341a      	adds	r4, #26
 8011b92:	42b5      	cmp	r5, r6
 8011b94:	d11a      	bne.n	8011bcc <_printf_common+0xc8>
 8011b96:	2000      	movs	r0, #0
 8011b98:	e008      	b.n	8011bac <_printf_common+0xa8>
 8011b9a:	2301      	movs	r3, #1
 8011b9c:	4652      	mov	r2, sl
 8011b9e:	4641      	mov	r1, r8
 8011ba0:	4638      	mov	r0, r7
 8011ba2:	47c8      	blx	r9
 8011ba4:	3001      	adds	r0, #1
 8011ba6:	d103      	bne.n	8011bb0 <_printf_common+0xac>
 8011ba8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bb0:	3501      	adds	r5, #1
 8011bb2:	e7c6      	b.n	8011b42 <_printf_common+0x3e>
 8011bb4:	18e1      	adds	r1, r4, r3
 8011bb6:	1c5a      	adds	r2, r3, #1
 8011bb8:	2030      	movs	r0, #48	@ 0x30
 8011bba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011bbe:	4422      	add	r2, r4
 8011bc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011bc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011bc8:	3302      	adds	r3, #2
 8011bca:	e7c7      	b.n	8011b5c <_printf_common+0x58>
 8011bcc:	2301      	movs	r3, #1
 8011bce:	4622      	mov	r2, r4
 8011bd0:	4641      	mov	r1, r8
 8011bd2:	4638      	mov	r0, r7
 8011bd4:	47c8      	blx	r9
 8011bd6:	3001      	adds	r0, #1
 8011bd8:	d0e6      	beq.n	8011ba8 <_printf_common+0xa4>
 8011bda:	3601      	adds	r6, #1
 8011bdc:	e7d9      	b.n	8011b92 <_printf_common+0x8e>
	...

08011be0 <_printf_i>:
 8011be0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011be4:	7e0f      	ldrb	r7, [r1, #24]
 8011be6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011be8:	2f78      	cmp	r7, #120	@ 0x78
 8011bea:	4691      	mov	r9, r2
 8011bec:	4680      	mov	r8, r0
 8011bee:	460c      	mov	r4, r1
 8011bf0:	469a      	mov	sl, r3
 8011bf2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011bf6:	d807      	bhi.n	8011c08 <_printf_i+0x28>
 8011bf8:	2f62      	cmp	r7, #98	@ 0x62
 8011bfa:	d80a      	bhi.n	8011c12 <_printf_i+0x32>
 8011bfc:	2f00      	cmp	r7, #0
 8011bfe:	f000 80d2 	beq.w	8011da6 <_printf_i+0x1c6>
 8011c02:	2f58      	cmp	r7, #88	@ 0x58
 8011c04:	f000 80b9 	beq.w	8011d7a <_printf_i+0x19a>
 8011c08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011c0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011c10:	e03a      	b.n	8011c88 <_printf_i+0xa8>
 8011c12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011c16:	2b15      	cmp	r3, #21
 8011c18:	d8f6      	bhi.n	8011c08 <_printf_i+0x28>
 8011c1a:	a101      	add	r1, pc, #4	@ (adr r1, 8011c20 <_printf_i+0x40>)
 8011c1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011c20:	08011c79 	.word	0x08011c79
 8011c24:	08011c8d 	.word	0x08011c8d
 8011c28:	08011c09 	.word	0x08011c09
 8011c2c:	08011c09 	.word	0x08011c09
 8011c30:	08011c09 	.word	0x08011c09
 8011c34:	08011c09 	.word	0x08011c09
 8011c38:	08011c8d 	.word	0x08011c8d
 8011c3c:	08011c09 	.word	0x08011c09
 8011c40:	08011c09 	.word	0x08011c09
 8011c44:	08011c09 	.word	0x08011c09
 8011c48:	08011c09 	.word	0x08011c09
 8011c4c:	08011d8d 	.word	0x08011d8d
 8011c50:	08011cb7 	.word	0x08011cb7
 8011c54:	08011d47 	.word	0x08011d47
 8011c58:	08011c09 	.word	0x08011c09
 8011c5c:	08011c09 	.word	0x08011c09
 8011c60:	08011daf 	.word	0x08011daf
 8011c64:	08011c09 	.word	0x08011c09
 8011c68:	08011cb7 	.word	0x08011cb7
 8011c6c:	08011c09 	.word	0x08011c09
 8011c70:	08011c09 	.word	0x08011c09
 8011c74:	08011d4f 	.word	0x08011d4f
 8011c78:	6833      	ldr	r3, [r6, #0]
 8011c7a:	1d1a      	adds	r2, r3, #4
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	6032      	str	r2, [r6, #0]
 8011c80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011c84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011c88:	2301      	movs	r3, #1
 8011c8a:	e09d      	b.n	8011dc8 <_printf_i+0x1e8>
 8011c8c:	6833      	ldr	r3, [r6, #0]
 8011c8e:	6820      	ldr	r0, [r4, #0]
 8011c90:	1d19      	adds	r1, r3, #4
 8011c92:	6031      	str	r1, [r6, #0]
 8011c94:	0606      	lsls	r6, r0, #24
 8011c96:	d501      	bpl.n	8011c9c <_printf_i+0xbc>
 8011c98:	681d      	ldr	r5, [r3, #0]
 8011c9a:	e003      	b.n	8011ca4 <_printf_i+0xc4>
 8011c9c:	0645      	lsls	r5, r0, #25
 8011c9e:	d5fb      	bpl.n	8011c98 <_printf_i+0xb8>
 8011ca0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011ca4:	2d00      	cmp	r5, #0
 8011ca6:	da03      	bge.n	8011cb0 <_printf_i+0xd0>
 8011ca8:	232d      	movs	r3, #45	@ 0x2d
 8011caa:	426d      	negs	r5, r5
 8011cac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011cb0:	4859      	ldr	r0, [pc, #356]	@ (8011e18 <_printf_i+0x238>)
 8011cb2:	230a      	movs	r3, #10
 8011cb4:	e011      	b.n	8011cda <_printf_i+0xfa>
 8011cb6:	6821      	ldr	r1, [r4, #0]
 8011cb8:	6833      	ldr	r3, [r6, #0]
 8011cba:	0608      	lsls	r0, r1, #24
 8011cbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8011cc0:	d402      	bmi.n	8011cc8 <_printf_i+0xe8>
 8011cc2:	0649      	lsls	r1, r1, #25
 8011cc4:	bf48      	it	mi
 8011cc6:	b2ad      	uxthmi	r5, r5
 8011cc8:	2f6f      	cmp	r7, #111	@ 0x6f
 8011cca:	4853      	ldr	r0, [pc, #332]	@ (8011e18 <_printf_i+0x238>)
 8011ccc:	6033      	str	r3, [r6, #0]
 8011cce:	bf14      	ite	ne
 8011cd0:	230a      	movne	r3, #10
 8011cd2:	2308      	moveq	r3, #8
 8011cd4:	2100      	movs	r1, #0
 8011cd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011cda:	6866      	ldr	r6, [r4, #4]
 8011cdc:	60a6      	str	r6, [r4, #8]
 8011cde:	2e00      	cmp	r6, #0
 8011ce0:	bfa2      	ittt	ge
 8011ce2:	6821      	ldrge	r1, [r4, #0]
 8011ce4:	f021 0104 	bicge.w	r1, r1, #4
 8011ce8:	6021      	strge	r1, [r4, #0]
 8011cea:	b90d      	cbnz	r5, 8011cf0 <_printf_i+0x110>
 8011cec:	2e00      	cmp	r6, #0
 8011cee:	d04b      	beq.n	8011d88 <_printf_i+0x1a8>
 8011cf0:	4616      	mov	r6, r2
 8011cf2:	fbb5 f1f3 	udiv	r1, r5, r3
 8011cf6:	fb03 5711 	mls	r7, r3, r1, r5
 8011cfa:	5dc7      	ldrb	r7, [r0, r7]
 8011cfc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011d00:	462f      	mov	r7, r5
 8011d02:	42bb      	cmp	r3, r7
 8011d04:	460d      	mov	r5, r1
 8011d06:	d9f4      	bls.n	8011cf2 <_printf_i+0x112>
 8011d08:	2b08      	cmp	r3, #8
 8011d0a:	d10b      	bne.n	8011d24 <_printf_i+0x144>
 8011d0c:	6823      	ldr	r3, [r4, #0]
 8011d0e:	07df      	lsls	r7, r3, #31
 8011d10:	d508      	bpl.n	8011d24 <_printf_i+0x144>
 8011d12:	6923      	ldr	r3, [r4, #16]
 8011d14:	6861      	ldr	r1, [r4, #4]
 8011d16:	4299      	cmp	r1, r3
 8011d18:	bfde      	ittt	le
 8011d1a:	2330      	movle	r3, #48	@ 0x30
 8011d1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011d20:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8011d24:	1b92      	subs	r2, r2, r6
 8011d26:	6122      	str	r2, [r4, #16]
 8011d28:	f8cd a000 	str.w	sl, [sp]
 8011d2c:	464b      	mov	r3, r9
 8011d2e:	aa03      	add	r2, sp, #12
 8011d30:	4621      	mov	r1, r4
 8011d32:	4640      	mov	r0, r8
 8011d34:	f7ff fee6 	bl	8011b04 <_printf_common>
 8011d38:	3001      	adds	r0, #1
 8011d3a:	d14a      	bne.n	8011dd2 <_printf_i+0x1f2>
 8011d3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011d40:	b004      	add	sp, #16
 8011d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d46:	6823      	ldr	r3, [r4, #0]
 8011d48:	f043 0320 	orr.w	r3, r3, #32
 8011d4c:	6023      	str	r3, [r4, #0]
 8011d4e:	4833      	ldr	r0, [pc, #204]	@ (8011e1c <_printf_i+0x23c>)
 8011d50:	2778      	movs	r7, #120	@ 0x78
 8011d52:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011d56:	6823      	ldr	r3, [r4, #0]
 8011d58:	6831      	ldr	r1, [r6, #0]
 8011d5a:	061f      	lsls	r7, r3, #24
 8011d5c:	f851 5b04 	ldr.w	r5, [r1], #4
 8011d60:	d402      	bmi.n	8011d68 <_printf_i+0x188>
 8011d62:	065f      	lsls	r7, r3, #25
 8011d64:	bf48      	it	mi
 8011d66:	b2ad      	uxthmi	r5, r5
 8011d68:	6031      	str	r1, [r6, #0]
 8011d6a:	07d9      	lsls	r1, r3, #31
 8011d6c:	bf44      	itt	mi
 8011d6e:	f043 0320 	orrmi.w	r3, r3, #32
 8011d72:	6023      	strmi	r3, [r4, #0]
 8011d74:	b11d      	cbz	r5, 8011d7e <_printf_i+0x19e>
 8011d76:	2310      	movs	r3, #16
 8011d78:	e7ac      	b.n	8011cd4 <_printf_i+0xf4>
 8011d7a:	4827      	ldr	r0, [pc, #156]	@ (8011e18 <_printf_i+0x238>)
 8011d7c:	e7e9      	b.n	8011d52 <_printf_i+0x172>
 8011d7e:	6823      	ldr	r3, [r4, #0]
 8011d80:	f023 0320 	bic.w	r3, r3, #32
 8011d84:	6023      	str	r3, [r4, #0]
 8011d86:	e7f6      	b.n	8011d76 <_printf_i+0x196>
 8011d88:	4616      	mov	r6, r2
 8011d8a:	e7bd      	b.n	8011d08 <_printf_i+0x128>
 8011d8c:	6833      	ldr	r3, [r6, #0]
 8011d8e:	6825      	ldr	r5, [r4, #0]
 8011d90:	6961      	ldr	r1, [r4, #20]
 8011d92:	1d18      	adds	r0, r3, #4
 8011d94:	6030      	str	r0, [r6, #0]
 8011d96:	062e      	lsls	r6, r5, #24
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	d501      	bpl.n	8011da0 <_printf_i+0x1c0>
 8011d9c:	6019      	str	r1, [r3, #0]
 8011d9e:	e002      	b.n	8011da6 <_printf_i+0x1c6>
 8011da0:	0668      	lsls	r0, r5, #25
 8011da2:	d5fb      	bpl.n	8011d9c <_printf_i+0x1bc>
 8011da4:	8019      	strh	r1, [r3, #0]
 8011da6:	2300      	movs	r3, #0
 8011da8:	6123      	str	r3, [r4, #16]
 8011daa:	4616      	mov	r6, r2
 8011dac:	e7bc      	b.n	8011d28 <_printf_i+0x148>
 8011dae:	6833      	ldr	r3, [r6, #0]
 8011db0:	1d1a      	adds	r2, r3, #4
 8011db2:	6032      	str	r2, [r6, #0]
 8011db4:	681e      	ldr	r6, [r3, #0]
 8011db6:	6862      	ldr	r2, [r4, #4]
 8011db8:	2100      	movs	r1, #0
 8011dba:	4630      	mov	r0, r6
 8011dbc:	f7ee fa38 	bl	8000230 <memchr>
 8011dc0:	b108      	cbz	r0, 8011dc6 <_printf_i+0x1e6>
 8011dc2:	1b80      	subs	r0, r0, r6
 8011dc4:	6060      	str	r0, [r4, #4]
 8011dc6:	6863      	ldr	r3, [r4, #4]
 8011dc8:	6123      	str	r3, [r4, #16]
 8011dca:	2300      	movs	r3, #0
 8011dcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011dd0:	e7aa      	b.n	8011d28 <_printf_i+0x148>
 8011dd2:	6923      	ldr	r3, [r4, #16]
 8011dd4:	4632      	mov	r2, r6
 8011dd6:	4649      	mov	r1, r9
 8011dd8:	4640      	mov	r0, r8
 8011dda:	47d0      	blx	sl
 8011ddc:	3001      	adds	r0, #1
 8011dde:	d0ad      	beq.n	8011d3c <_printf_i+0x15c>
 8011de0:	6823      	ldr	r3, [r4, #0]
 8011de2:	079b      	lsls	r3, r3, #30
 8011de4:	d413      	bmi.n	8011e0e <_printf_i+0x22e>
 8011de6:	68e0      	ldr	r0, [r4, #12]
 8011de8:	9b03      	ldr	r3, [sp, #12]
 8011dea:	4298      	cmp	r0, r3
 8011dec:	bfb8      	it	lt
 8011dee:	4618      	movlt	r0, r3
 8011df0:	e7a6      	b.n	8011d40 <_printf_i+0x160>
 8011df2:	2301      	movs	r3, #1
 8011df4:	4632      	mov	r2, r6
 8011df6:	4649      	mov	r1, r9
 8011df8:	4640      	mov	r0, r8
 8011dfa:	47d0      	blx	sl
 8011dfc:	3001      	adds	r0, #1
 8011dfe:	d09d      	beq.n	8011d3c <_printf_i+0x15c>
 8011e00:	3501      	adds	r5, #1
 8011e02:	68e3      	ldr	r3, [r4, #12]
 8011e04:	9903      	ldr	r1, [sp, #12]
 8011e06:	1a5b      	subs	r3, r3, r1
 8011e08:	42ab      	cmp	r3, r5
 8011e0a:	dcf2      	bgt.n	8011df2 <_printf_i+0x212>
 8011e0c:	e7eb      	b.n	8011de6 <_printf_i+0x206>
 8011e0e:	2500      	movs	r5, #0
 8011e10:	f104 0619 	add.w	r6, r4, #25
 8011e14:	e7f5      	b.n	8011e02 <_printf_i+0x222>
 8011e16:	bf00      	nop
 8011e18:	08015360 	.word	0x08015360
 8011e1c:	08015371 	.word	0x08015371

08011e20 <std>:
 8011e20:	2300      	movs	r3, #0
 8011e22:	b510      	push	{r4, lr}
 8011e24:	4604      	mov	r4, r0
 8011e26:	e9c0 3300 	strd	r3, r3, [r0]
 8011e2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011e2e:	6083      	str	r3, [r0, #8]
 8011e30:	8181      	strh	r1, [r0, #12]
 8011e32:	6643      	str	r3, [r0, #100]	@ 0x64
 8011e34:	81c2      	strh	r2, [r0, #14]
 8011e36:	6183      	str	r3, [r0, #24]
 8011e38:	4619      	mov	r1, r3
 8011e3a:	2208      	movs	r2, #8
 8011e3c:	305c      	adds	r0, #92	@ 0x5c
 8011e3e:	f000 f8f4 	bl	801202a <memset>
 8011e42:	4b0d      	ldr	r3, [pc, #52]	@ (8011e78 <std+0x58>)
 8011e44:	6263      	str	r3, [r4, #36]	@ 0x24
 8011e46:	4b0d      	ldr	r3, [pc, #52]	@ (8011e7c <std+0x5c>)
 8011e48:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8011e80 <std+0x60>)
 8011e4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8011e84 <std+0x64>)
 8011e50:	6323      	str	r3, [r4, #48]	@ 0x30
 8011e52:	4b0d      	ldr	r3, [pc, #52]	@ (8011e88 <std+0x68>)
 8011e54:	6224      	str	r4, [r4, #32]
 8011e56:	429c      	cmp	r4, r3
 8011e58:	d006      	beq.n	8011e68 <std+0x48>
 8011e5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011e5e:	4294      	cmp	r4, r2
 8011e60:	d002      	beq.n	8011e68 <std+0x48>
 8011e62:	33d0      	adds	r3, #208	@ 0xd0
 8011e64:	429c      	cmp	r4, r3
 8011e66:	d105      	bne.n	8011e74 <std+0x54>
 8011e68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e70:	f000 b9ac 	b.w	80121cc <__retarget_lock_init_recursive>
 8011e74:	bd10      	pop	{r4, pc}
 8011e76:	bf00      	nop
 8011e78:	08011fa5 	.word	0x08011fa5
 8011e7c:	08011fc7 	.word	0x08011fc7
 8011e80:	08011fff 	.word	0x08011fff
 8011e84:	08012023 	.word	0x08012023
 8011e88:	200003f8 	.word	0x200003f8

08011e8c <stdio_exit_handler>:
 8011e8c:	4a02      	ldr	r2, [pc, #8]	@ (8011e98 <stdio_exit_handler+0xc>)
 8011e8e:	4903      	ldr	r1, [pc, #12]	@ (8011e9c <stdio_exit_handler+0x10>)
 8011e90:	4803      	ldr	r0, [pc, #12]	@ (8011ea0 <stdio_exit_handler+0x14>)
 8011e92:	f000 b869 	b.w	8011f68 <_fwalk_sglue>
 8011e96:	bf00      	nop
 8011e98:	20000018 	.word	0x20000018
 8011e9c:	08013729 	.word	0x08013729
 8011ea0:	20000028 	.word	0x20000028

08011ea4 <cleanup_stdio>:
 8011ea4:	6841      	ldr	r1, [r0, #4]
 8011ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8011ed8 <cleanup_stdio+0x34>)
 8011ea8:	4299      	cmp	r1, r3
 8011eaa:	b510      	push	{r4, lr}
 8011eac:	4604      	mov	r4, r0
 8011eae:	d001      	beq.n	8011eb4 <cleanup_stdio+0x10>
 8011eb0:	f001 fc3a 	bl	8013728 <_fflush_r>
 8011eb4:	68a1      	ldr	r1, [r4, #8]
 8011eb6:	4b09      	ldr	r3, [pc, #36]	@ (8011edc <cleanup_stdio+0x38>)
 8011eb8:	4299      	cmp	r1, r3
 8011eba:	d002      	beq.n	8011ec2 <cleanup_stdio+0x1e>
 8011ebc:	4620      	mov	r0, r4
 8011ebe:	f001 fc33 	bl	8013728 <_fflush_r>
 8011ec2:	68e1      	ldr	r1, [r4, #12]
 8011ec4:	4b06      	ldr	r3, [pc, #24]	@ (8011ee0 <cleanup_stdio+0x3c>)
 8011ec6:	4299      	cmp	r1, r3
 8011ec8:	d004      	beq.n	8011ed4 <cleanup_stdio+0x30>
 8011eca:	4620      	mov	r0, r4
 8011ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ed0:	f001 bc2a 	b.w	8013728 <_fflush_r>
 8011ed4:	bd10      	pop	{r4, pc}
 8011ed6:	bf00      	nop
 8011ed8:	200003f8 	.word	0x200003f8
 8011edc:	20000460 	.word	0x20000460
 8011ee0:	200004c8 	.word	0x200004c8

08011ee4 <global_stdio_init.part.0>:
 8011ee4:	b510      	push	{r4, lr}
 8011ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8011f14 <global_stdio_init.part.0+0x30>)
 8011ee8:	4c0b      	ldr	r4, [pc, #44]	@ (8011f18 <global_stdio_init.part.0+0x34>)
 8011eea:	4a0c      	ldr	r2, [pc, #48]	@ (8011f1c <global_stdio_init.part.0+0x38>)
 8011eec:	601a      	str	r2, [r3, #0]
 8011eee:	4620      	mov	r0, r4
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	2104      	movs	r1, #4
 8011ef4:	f7ff ff94 	bl	8011e20 <std>
 8011ef8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011efc:	2201      	movs	r2, #1
 8011efe:	2109      	movs	r1, #9
 8011f00:	f7ff ff8e 	bl	8011e20 <std>
 8011f04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011f08:	2202      	movs	r2, #2
 8011f0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f0e:	2112      	movs	r1, #18
 8011f10:	f7ff bf86 	b.w	8011e20 <std>
 8011f14:	20000530 	.word	0x20000530
 8011f18:	200003f8 	.word	0x200003f8
 8011f1c:	08011e8d 	.word	0x08011e8d

08011f20 <__sfp_lock_acquire>:
 8011f20:	4801      	ldr	r0, [pc, #4]	@ (8011f28 <__sfp_lock_acquire+0x8>)
 8011f22:	f000 b954 	b.w	80121ce <__retarget_lock_acquire_recursive>
 8011f26:	bf00      	nop
 8011f28:	20000539 	.word	0x20000539

08011f2c <__sfp_lock_release>:
 8011f2c:	4801      	ldr	r0, [pc, #4]	@ (8011f34 <__sfp_lock_release+0x8>)
 8011f2e:	f000 b94f 	b.w	80121d0 <__retarget_lock_release_recursive>
 8011f32:	bf00      	nop
 8011f34:	20000539 	.word	0x20000539

08011f38 <__sinit>:
 8011f38:	b510      	push	{r4, lr}
 8011f3a:	4604      	mov	r4, r0
 8011f3c:	f7ff fff0 	bl	8011f20 <__sfp_lock_acquire>
 8011f40:	6a23      	ldr	r3, [r4, #32]
 8011f42:	b11b      	cbz	r3, 8011f4c <__sinit+0x14>
 8011f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f48:	f7ff bff0 	b.w	8011f2c <__sfp_lock_release>
 8011f4c:	4b04      	ldr	r3, [pc, #16]	@ (8011f60 <__sinit+0x28>)
 8011f4e:	6223      	str	r3, [r4, #32]
 8011f50:	4b04      	ldr	r3, [pc, #16]	@ (8011f64 <__sinit+0x2c>)
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d1f5      	bne.n	8011f44 <__sinit+0xc>
 8011f58:	f7ff ffc4 	bl	8011ee4 <global_stdio_init.part.0>
 8011f5c:	e7f2      	b.n	8011f44 <__sinit+0xc>
 8011f5e:	bf00      	nop
 8011f60:	08011ea5 	.word	0x08011ea5
 8011f64:	20000530 	.word	0x20000530

08011f68 <_fwalk_sglue>:
 8011f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f6c:	4607      	mov	r7, r0
 8011f6e:	4688      	mov	r8, r1
 8011f70:	4614      	mov	r4, r2
 8011f72:	2600      	movs	r6, #0
 8011f74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011f78:	f1b9 0901 	subs.w	r9, r9, #1
 8011f7c:	d505      	bpl.n	8011f8a <_fwalk_sglue+0x22>
 8011f7e:	6824      	ldr	r4, [r4, #0]
 8011f80:	2c00      	cmp	r4, #0
 8011f82:	d1f7      	bne.n	8011f74 <_fwalk_sglue+0xc>
 8011f84:	4630      	mov	r0, r6
 8011f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f8a:	89ab      	ldrh	r3, [r5, #12]
 8011f8c:	2b01      	cmp	r3, #1
 8011f8e:	d907      	bls.n	8011fa0 <_fwalk_sglue+0x38>
 8011f90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011f94:	3301      	adds	r3, #1
 8011f96:	d003      	beq.n	8011fa0 <_fwalk_sglue+0x38>
 8011f98:	4629      	mov	r1, r5
 8011f9a:	4638      	mov	r0, r7
 8011f9c:	47c0      	blx	r8
 8011f9e:	4306      	orrs	r6, r0
 8011fa0:	3568      	adds	r5, #104	@ 0x68
 8011fa2:	e7e9      	b.n	8011f78 <_fwalk_sglue+0x10>

08011fa4 <__sread>:
 8011fa4:	b510      	push	{r4, lr}
 8011fa6:	460c      	mov	r4, r1
 8011fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fac:	f000 f89c 	bl	80120e8 <_read_r>
 8011fb0:	2800      	cmp	r0, #0
 8011fb2:	bfab      	itete	ge
 8011fb4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011fb6:	89a3      	ldrhlt	r3, [r4, #12]
 8011fb8:	181b      	addge	r3, r3, r0
 8011fba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011fbe:	bfac      	ite	ge
 8011fc0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011fc2:	81a3      	strhlt	r3, [r4, #12]
 8011fc4:	bd10      	pop	{r4, pc}

08011fc6 <__swrite>:
 8011fc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fca:	461f      	mov	r7, r3
 8011fcc:	898b      	ldrh	r3, [r1, #12]
 8011fce:	05db      	lsls	r3, r3, #23
 8011fd0:	4605      	mov	r5, r0
 8011fd2:	460c      	mov	r4, r1
 8011fd4:	4616      	mov	r6, r2
 8011fd6:	d505      	bpl.n	8011fe4 <__swrite+0x1e>
 8011fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fdc:	2302      	movs	r3, #2
 8011fde:	2200      	movs	r2, #0
 8011fe0:	f000 f870 	bl	80120c4 <_lseek_r>
 8011fe4:	89a3      	ldrh	r3, [r4, #12]
 8011fe6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011fea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011fee:	81a3      	strh	r3, [r4, #12]
 8011ff0:	4632      	mov	r2, r6
 8011ff2:	463b      	mov	r3, r7
 8011ff4:	4628      	mov	r0, r5
 8011ff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ffa:	f000 b8ab 	b.w	8012154 <_write_r>

08011ffe <__sseek>:
 8011ffe:	b510      	push	{r4, lr}
 8012000:	460c      	mov	r4, r1
 8012002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012006:	f000 f85d 	bl	80120c4 <_lseek_r>
 801200a:	1c43      	adds	r3, r0, #1
 801200c:	89a3      	ldrh	r3, [r4, #12]
 801200e:	bf15      	itete	ne
 8012010:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012012:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012016:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801201a:	81a3      	strheq	r3, [r4, #12]
 801201c:	bf18      	it	ne
 801201e:	81a3      	strhne	r3, [r4, #12]
 8012020:	bd10      	pop	{r4, pc}

08012022 <__sclose>:
 8012022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012026:	f000 b83d 	b.w	80120a4 <_close_r>

0801202a <memset>:
 801202a:	4402      	add	r2, r0
 801202c:	4603      	mov	r3, r0
 801202e:	4293      	cmp	r3, r2
 8012030:	d100      	bne.n	8012034 <memset+0xa>
 8012032:	4770      	bx	lr
 8012034:	f803 1b01 	strb.w	r1, [r3], #1
 8012038:	e7f9      	b.n	801202e <memset+0x4>

0801203a <_raise_r>:
 801203a:	291f      	cmp	r1, #31
 801203c:	b538      	push	{r3, r4, r5, lr}
 801203e:	4605      	mov	r5, r0
 8012040:	460c      	mov	r4, r1
 8012042:	d904      	bls.n	801204e <_raise_r+0x14>
 8012044:	2316      	movs	r3, #22
 8012046:	6003      	str	r3, [r0, #0]
 8012048:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801204c:	bd38      	pop	{r3, r4, r5, pc}
 801204e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012050:	b112      	cbz	r2, 8012058 <_raise_r+0x1e>
 8012052:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012056:	b94b      	cbnz	r3, 801206c <_raise_r+0x32>
 8012058:	4628      	mov	r0, r5
 801205a:	f000 f869 	bl	8012130 <_getpid_r>
 801205e:	4622      	mov	r2, r4
 8012060:	4601      	mov	r1, r0
 8012062:	4628      	mov	r0, r5
 8012064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012068:	f000 b850 	b.w	801210c <_kill_r>
 801206c:	2b01      	cmp	r3, #1
 801206e:	d00a      	beq.n	8012086 <_raise_r+0x4c>
 8012070:	1c59      	adds	r1, r3, #1
 8012072:	d103      	bne.n	801207c <_raise_r+0x42>
 8012074:	2316      	movs	r3, #22
 8012076:	6003      	str	r3, [r0, #0]
 8012078:	2001      	movs	r0, #1
 801207a:	e7e7      	b.n	801204c <_raise_r+0x12>
 801207c:	2100      	movs	r1, #0
 801207e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012082:	4620      	mov	r0, r4
 8012084:	4798      	blx	r3
 8012086:	2000      	movs	r0, #0
 8012088:	e7e0      	b.n	801204c <_raise_r+0x12>
	...

0801208c <raise>:
 801208c:	4b02      	ldr	r3, [pc, #8]	@ (8012098 <raise+0xc>)
 801208e:	4601      	mov	r1, r0
 8012090:	6818      	ldr	r0, [r3, #0]
 8012092:	f7ff bfd2 	b.w	801203a <_raise_r>
 8012096:	bf00      	nop
 8012098:	20000024 	.word	0x20000024

0801209c <_localeconv_r>:
 801209c:	4800      	ldr	r0, [pc, #0]	@ (80120a0 <_localeconv_r+0x4>)
 801209e:	4770      	bx	lr
 80120a0:	20000164 	.word	0x20000164

080120a4 <_close_r>:
 80120a4:	b538      	push	{r3, r4, r5, lr}
 80120a6:	4d06      	ldr	r5, [pc, #24]	@ (80120c0 <_close_r+0x1c>)
 80120a8:	2300      	movs	r3, #0
 80120aa:	4604      	mov	r4, r0
 80120ac:	4608      	mov	r0, r1
 80120ae:	602b      	str	r3, [r5, #0]
 80120b0:	f7fa fe0c 	bl	800cccc <_close>
 80120b4:	1c43      	adds	r3, r0, #1
 80120b6:	d102      	bne.n	80120be <_close_r+0x1a>
 80120b8:	682b      	ldr	r3, [r5, #0]
 80120ba:	b103      	cbz	r3, 80120be <_close_r+0x1a>
 80120bc:	6023      	str	r3, [r4, #0]
 80120be:	bd38      	pop	{r3, r4, r5, pc}
 80120c0:	20000534 	.word	0x20000534

080120c4 <_lseek_r>:
 80120c4:	b538      	push	{r3, r4, r5, lr}
 80120c6:	4d07      	ldr	r5, [pc, #28]	@ (80120e4 <_lseek_r+0x20>)
 80120c8:	4604      	mov	r4, r0
 80120ca:	4608      	mov	r0, r1
 80120cc:	4611      	mov	r1, r2
 80120ce:	2200      	movs	r2, #0
 80120d0:	602a      	str	r2, [r5, #0]
 80120d2:	461a      	mov	r2, r3
 80120d4:	f7fa fe21 	bl	800cd1a <_lseek>
 80120d8:	1c43      	adds	r3, r0, #1
 80120da:	d102      	bne.n	80120e2 <_lseek_r+0x1e>
 80120dc:	682b      	ldr	r3, [r5, #0]
 80120de:	b103      	cbz	r3, 80120e2 <_lseek_r+0x1e>
 80120e0:	6023      	str	r3, [r4, #0]
 80120e2:	bd38      	pop	{r3, r4, r5, pc}
 80120e4:	20000534 	.word	0x20000534

080120e8 <_read_r>:
 80120e8:	b538      	push	{r3, r4, r5, lr}
 80120ea:	4d07      	ldr	r5, [pc, #28]	@ (8012108 <_read_r+0x20>)
 80120ec:	4604      	mov	r4, r0
 80120ee:	4608      	mov	r0, r1
 80120f0:	4611      	mov	r1, r2
 80120f2:	2200      	movs	r2, #0
 80120f4:	602a      	str	r2, [r5, #0]
 80120f6:	461a      	mov	r2, r3
 80120f8:	f7fa fdaf 	bl	800cc5a <_read>
 80120fc:	1c43      	adds	r3, r0, #1
 80120fe:	d102      	bne.n	8012106 <_read_r+0x1e>
 8012100:	682b      	ldr	r3, [r5, #0]
 8012102:	b103      	cbz	r3, 8012106 <_read_r+0x1e>
 8012104:	6023      	str	r3, [r4, #0]
 8012106:	bd38      	pop	{r3, r4, r5, pc}
 8012108:	20000534 	.word	0x20000534

0801210c <_kill_r>:
 801210c:	b538      	push	{r3, r4, r5, lr}
 801210e:	4d07      	ldr	r5, [pc, #28]	@ (801212c <_kill_r+0x20>)
 8012110:	2300      	movs	r3, #0
 8012112:	4604      	mov	r4, r0
 8012114:	4608      	mov	r0, r1
 8012116:	4611      	mov	r1, r2
 8012118:	602b      	str	r3, [r5, #0]
 801211a:	f7fa fd83 	bl	800cc24 <_kill>
 801211e:	1c43      	adds	r3, r0, #1
 8012120:	d102      	bne.n	8012128 <_kill_r+0x1c>
 8012122:	682b      	ldr	r3, [r5, #0]
 8012124:	b103      	cbz	r3, 8012128 <_kill_r+0x1c>
 8012126:	6023      	str	r3, [r4, #0]
 8012128:	bd38      	pop	{r3, r4, r5, pc}
 801212a:	bf00      	nop
 801212c:	20000534 	.word	0x20000534

08012130 <_getpid_r>:
 8012130:	f7fa bd70 	b.w	800cc14 <_getpid>

08012134 <_sbrk_r>:
 8012134:	b538      	push	{r3, r4, r5, lr}
 8012136:	4d06      	ldr	r5, [pc, #24]	@ (8012150 <_sbrk_r+0x1c>)
 8012138:	2300      	movs	r3, #0
 801213a:	4604      	mov	r4, r0
 801213c:	4608      	mov	r0, r1
 801213e:	602b      	str	r3, [r5, #0]
 8012140:	f7fa fdf8 	bl	800cd34 <_sbrk>
 8012144:	1c43      	adds	r3, r0, #1
 8012146:	d102      	bne.n	801214e <_sbrk_r+0x1a>
 8012148:	682b      	ldr	r3, [r5, #0]
 801214a:	b103      	cbz	r3, 801214e <_sbrk_r+0x1a>
 801214c:	6023      	str	r3, [r4, #0]
 801214e:	bd38      	pop	{r3, r4, r5, pc}
 8012150:	20000534 	.word	0x20000534

08012154 <_write_r>:
 8012154:	b538      	push	{r3, r4, r5, lr}
 8012156:	4d07      	ldr	r5, [pc, #28]	@ (8012174 <_write_r+0x20>)
 8012158:	4604      	mov	r4, r0
 801215a:	4608      	mov	r0, r1
 801215c:	4611      	mov	r1, r2
 801215e:	2200      	movs	r2, #0
 8012160:	602a      	str	r2, [r5, #0]
 8012162:	461a      	mov	r2, r3
 8012164:	f7fa fd96 	bl	800cc94 <_write>
 8012168:	1c43      	adds	r3, r0, #1
 801216a:	d102      	bne.n	8012172 <_write_r+0x1e>
 801216c:	682b      	ldr	r3, [r5, #0]
 801216e:	b103      	cbz	r3, 8012172 <_write_r+0x1e>
 8012170:	6023      	str	r3, [r4, #0]
 8012172:	bd38      	pop	{r3, r4, r5, pc}
 8012174:	20000534 	.word	0x20000534

08012178 <__errno>:
 8012178:	4b01      	ldr	r3, [pc, #4]	@ (8012180 <__errno+0x8>)
 801217a:	6818      	ldr	r0, [r3, #0]
 801217c:	4770      	bx	lr
 801217e:	bf00      	nop
 8012180:	20000024 	.word	0x20000024

08012184 <__libc_init_array>:
 8012184:	b570      	push	{r4, r5, r6, lr}
 8012186:	4d0d      	ldr	r5, [pc, #52]	@ (80121bc <__libc_init_array+0x38>)
 8012188:	4c0d      	ldr	r4, [pc, #52]	@ (80121c0 <__libc_init_array+0x3c>)
 801218a:	1b64      	subs	r4, r4, r5
 801218c:	10a4      	asrs	r4, r4, #2
 801218e:	2600      	movs	r6, #0
 8012190:	42a6      	cmp	r6, r4
 8012192:	d109      	bne.n	80121a8 <__libc_init_array+0x24>
 8012194:	4d0b      	ldr	r5, [pc, #44]	@ (80121c4 <__libc_init_array+0x40>)
 8012196:	4c0c      	ldr	r4, [pc, #48]	@ (80121c8 <__libc_init_array+0x44>)
 8012198:	f001 fdb2 	bl	8013d00 <_init>
 801219c:	1b64      	subs	r4, r4, r5
 801219e:	10a4      	asrs	r4, r4, #2
 80121a0:	2600      	movs	r6, #0
 80121a2:	42a6      	cmp	r6, r4
 80121a4:	d105      	bne.n	80121b2 <__libc_init_array+0x2e>
 80121a6:	bd70      	pop	{r4, r5, r6, pc}
 80121a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80121ac:	4798      	blx	r3
 80121ae:	3601      	adds	r6, #1
 80121b0:	e7ee      	b.n	8012190 <__libc_init_array+0xc>
 80121b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80121b6:	4798      	blx	r3
 80121b8:	3601      	adds	r6, #1
 80121ba:	e7f2      	b.n	80121a2 <__libc_init_array+0x1e>
 80121bc:	08017640 	.word	0x08017640
 80121c0:	08017640 	.word	0x08017640
 80121c4:	08017640 	.word	0x08017640
 80121c8:	08017650 	.word	0x08017650

080121cc <__retarget_lock_init_recursive>:
 80121cc:	4770      	bx	lr

080121ce <__retarget_lock_acquire_recursive>:
 80121ce:	4770      	bx	lr

080121d0 <__retarget_lock_release_recursive>:
 80121d0:	4770      	bx	lr

080121d2 <memcpy>:
 80121d2:	440a      	add	r2, r1
 80121d4:	4291      	cmp	r1, r2
 80121d6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80121da:	d100      	bne.n	80121de <memcpy+0xc>
 80121dc:	4770      	bx	lr
 80121de:	b510      	push	{r4, lr}
 80121e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80121e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80121e8:	4291      	cmp	r1, r2
 80121ea:	d1f9      	bne.n	80121e0 <memcpy+0xe>
 80121ec:	bd10      	pop	{r4, pc}

080121ee <quorem>:
 80121ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121f2:	6903      	ldr	r3, [r0, #16]
 80121f4:	690c      	ldr	r4, [r1, #16]
 80121f6:	42a3      	cmp	r3, r4
 80121f8:	4607      	mov	r7, r0
 80121fa:	db7e      	blt.n	80122fa <quorem+0x10c>
 80121fc:	3c01      	subs	r4, #1
 80121fe:	f101 0814 	add.w	r8, r1, #20
 8012202:	00a3      	lsls	r3, r4, #2
 8012204:	f100 0514 	add.w	r5, r0, #20
 8012208:	9300      	str	r3, [sp, #0]
 801220a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801220e:	9301      	str	r3, [sp, #4]
 8012210:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012214:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012218:	3301      	adds	r3, #1
 801221a:	429a      	cmp	r2, r3
 801221c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012220:	fbb2 f6f3 	udiv	r6, r2, r3
 8012224:	d32e      	bcc.n	8012284 <quorem+0x96>
 8012226:	f04f 0a00 	mov.w	sl, #0
 801222a:	46c4      	mov	ip, r8
 801222c:	46ae      	mov	lr, r5
 801222e:	46d3      	mov	fp, sl
 8012230:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012234:	b298      	uxth	r0, r3
 8012236:	fb06 a000 	mla	r0, r6, r0, sl
 801223a:	0c02      	lsrs	r2, r0, #16
 801223c:	0c1b      	lsrs	r3, r3, #16
 801223e:	fb06 2303 	mla	r3, r6, r3, r2
 8012242:	f8de 2000 	ldr.w	r2, [lr]
 8012246:	b280      	uxth	r0, r0
 8012248:	b292      	uxth	r2, r2
 801224a:	1a12      	subs	r2, r2, r0
 801224c:	445a      	add	r2, fp
 801224e:	f8de 0000 	ldr.w	r0, [lr]
 8012252:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012256:	b29b      	uxth	r3, r3
 8012258:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801225c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012260:	b292      	uxth	r2, r2
 8012262:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012266:	45e1      	cmp	r9, ip
 8012268:	f84e 2b04 	str.w	r2, [lr], #4
 801226c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012270:	d2de      	bcs.n	8012230 <quorem+0x42>
 8012272:	9b00      	ldr	r3, [sp, #0]
 8012274:	58eb      	ldr	r3, [r5, r3]
 8012276:	b92b      	cbnz	r3, 8012284 <quorem+0x96>
 8012278:	9b01      	ldr	r3, [sp, #4]
 801227a:	3b04      	subs	r3, #4
 801227c:	429d      	cmp	r5, r3
 801227e:	461a      	mov	r2, r3
 8012280:	d32f      	bcc.n	80122e2 <quorem+0xf4>
 8012282:	613c      	str	r4, [r7, #16]
 8012284:	4638      	mov	r0, r7
 8012286:	f001 f8c3 	bl	8013410 <__mcmp>
 801228a:	2800      	cmp	r0, #0
 801228c:	db25      	blt.n	80122da <quorem+0xec>
 801228e:	4629      	mov	r1, r5
 8012290:	2000      	movs	r0, #0
 8012292:	f858 2b04 	ldr.w	r2, [r8], #4
 8012296:	f8d1 c000 	ldr.w	ip, [r1]
 801229a:	fa1f fe82 	uxth.w	lr, r2
 801229e:	fa1f f38c 	uxth.w	r3, ip
 80122a2:	eba3 030e 	sub.w	r3, r3, lr
 80122a6:	4403      	add	r3, r0
 80122a8:	0c12      	lsrs	r2, r2, #16
 80122aa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80122ae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80122b2:	b29b      	uxth	r3, r3
 80122b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80122b8:	45c1      	cmp	r9, r8
 80122ba:	f841 3b04 	str.w	r3, [r1], #4
 80122be:	ea4f 4022 	mov.w	r0, r2, asr #16
 80122c2:	d2e6      	bcs.n	8012292 <quorem+0xa4>
 80122c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80122c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80122cc:	b922      	cbnz	r2, 80122d8 <quorem+0xea>
 80122ce:	3b04      	subs	r3, #4
 80122d0:	429d      	cmp	r5, r3
 80122d2:	461a      	mov	r2, r3
 80122d4:	d30b      	bcc.n	80122ee <quorem+0x100>
 80122d6:	613c      	str	r4, [r7, #16]
 80122d8:	3601      	adds	r6, #1
 80122da:	4630      	mov	r0, r6
 80122dc:	b003      	add	sp, #12
 80122de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122e2:	6812      	ldr	r2, [r2, #0]
 80122e4:	3b04      	subs	r3, #4
 80122e6:	2a00      	cmp	r2, #0
 80122e8:	d1cb      	bne.n	8012282 <quorem+0x94>
 80122ea:	3c01      	subs	r4, #1
 80122ec:	e7c6      	b.n	801227c <quorem+0x8e>
 80122ee:	6812      	ldr	r2, [r2, #0]
 80122f0:	3b04      	subs	r3, #4
 80122f2:	2a00      	cmp	r2, #0
 80122f4:	d1ef      	bne.n	80122d6 <quorem+0xe8>
 80122f6:	3c01      	subs	r4, #1
 80122f8:	e7ea      	b.n	80122d0 <quorem+0xe2>
 80122fa:	2000      	movs	r0, #0
 80122fc:	e7ee      	b.n	80122dc <quorem+0xee>
	...

08012300 <_dtoa_r>:
 8012300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012304:	69c7      	ldr	r7, [r0, #28]
 8012306:	b099      	sub	sp, #100	@ 0x64
 8012308:	ed8d 0b02 	vstr	d0, [sp, #8]
 801230c:	ec55 4b10 	vmov	r4, r5, d0
 8012310:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8012312:	9109      	str	r1, [sp, #36]	@ 0x24
 8012314:	4683      	mov	fp, r0
 8012316:	920e      	str	r2, [sp, #56]	@ 0x38
 8012318:	9313      	str	r3, [sp, #76]	@ 0x4c
 801231a:	b97f      	cbnz	r7, 801233c <_dtoa_r+0x3c>
 801231c:	2010      	movs	r0, #16
 801231e:	f7ff f85b 	bl	80113d8 <malloc>
 8012322:	4602      	mov	r2, r0
 8012324:	f8cb 001c 	str.w	r0, [fp, #28]
 8012328:	b920      	cbnz	r0, 8012334 <_dtoa_r+0x34>
 801232a:	4ba7      	ldr	r3, [pc, #668]	@ (80125c8 <_dtoa_r+0x2c8>)
 801232c:	21ef      	movs	r1, #239	@ 0xef
 801232e:	48a7      	ldr	r0, [pc, #668]	@ (80125cc <_dtoa_r+0x2cc>)
 8012330:	f001 fa22 	bl	8013778 <__assert_func>
 8012334:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012338:	6007      	str	r7, [r0, #0]
 801233a:	60c7      	str	r7, [r0, #12]
 801233c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012340:	6819      	ldr	r1, [r3, #0]
 8012342:	b159      	cbz	r1, 801235c <_dtoa_r+0x5c>
 8012344:	685a      	ldr	r2, [r3, #4]
 8012346:	604a      	str	r2, [r1, #4]
 8012348:	2301      	movs	r3, #1
 801234a:	4093      	lsls	r3, r2
 801234c:	608b      	str	r3, [r1, #8]
 801234e:	4658      	mov	r0, fp
 8012350:	f000 fe24 	bl	8012f9c <_Bfree>
 8012354:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012358:	2200      	movs	r2, #0
 801235a:	601a      	str	r2, [r3, #0]
 801235c:	1e2b      	subs	r3, r5, #0
 801235e:	bfb9      	ittee	lt
 8012360:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012364:	9303      	strlt	r3, [sp, #12]
 8012366:	2300      	movge	r3, #0
 8012368:	6033      	strge	r3, [r6, #0]
 801236a:	9f03      	ldr	r7, [sp, #12]
 801236c:	4b98      	ldr	r3, [pc, #608]	@ (80125d0 <_dtoa_r+0x2d0>)
 801236e:	bfbc      	itt	lt
 8012370:	2201      	movlt	r2, #1
 8012372:	6032      	strlt	r2, [r6, #0]
 8012374:	43bb      	bics	r3, r7
 8012376:	d112      	bne.n	801239e <_dtoa_r+0x9e>
 8012378:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801237a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801237e:	6013      	str	r3, [r2, #0]
 8012380:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012384:	4323      	orrs	r3, r4
 8012386:	f000 854d 	beq.w	8012e24 <_dtoa_r+0xb24>
 801238a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801238c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80125e4 <_dtoa_r+0x2e4>
 8012390:	2b00      	cmp	r3, #0
 8012392:	f000 854f 	beq.w	8012e34 <_dtoa_r+0xb34>
 8012396:	f10a 0303 	add.w	r3, sl, #3
 801239a:	f000 bd49 	b.w	8012e30 <_dtoa_r+0xb30>
 801239e:	ed9d 7b02 	vldr	d7, [sp, #8]
 80123a2:	2200      	movs	r2, #0
 80123a4:	ec51 0b17 	vmov	r0, r1, d7
 80123a8:	2300      	movs	r3, #0
 80123aa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80123ae:	f7ee fbbb 	bl	8000b28 <__aeabi_dcmpeq>
 80123b2:	4680      	mov	r8, r0
 80123b4:	b158      	cbz	r0, 80123ce <_dtoa_r+0xce>
 80123b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80123b8:	2301      	movs	r3, #1
 80123ba:	6013      	str	r3, [r2, #0]
 80123bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80123be:	b113      	cbz	r3, 80123c6 <_dtoa_r+0xc6>
 80123c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80123c2:	4b84      	ldr	r3, [pc, #528]	@ (80125d4 <_dtoa_r+0x2d4>)
 80123c4:	6013      	str	r3, [r2, #0]
 80123c6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80125e8 <_dtoa_r+0x2e8>
 80123ca:	f000 bd33 	b.w	8012e34 <_dtoa_r+0xb34>
 80123ce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80123d2:	aa16      	add	r2, sp, #88	@ 0x58
 80123d4:	a917      	add	r1, sp, #92	@ 0x5c
 80123d6:	4658      	mov	r0, fp
 80123d8:	f001 f8ca 	bl	8013570 <__d2b>
 80123dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80123e0:	4681      	mov	r9, r0
 80123e2:	2e00      	cmp	r6, #0
 80123e4:	d077      	beq.n	80124d6 <_dtoa_r+0x1d6>
 80123e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80123e8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80123ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80123f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80123f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80123f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80123fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012400:	4619      	mov	r1, r3
 8012402:	2200      	movs	r2, #0
 8012404:	4b74      	ldr	r3, [pc, #464]	@ (80125d8 <_dtoa_r+0x2d8>)
 8012406:	f7ed ff6f 	bl	80002e8 <__aeabi_dsub>
 801240a:	a369      	add	r3, pc, #420	@ (adr r3, 80125b0 <_dtoa_r+0x2b0>)
 801240c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012410:	f7ee f922 	bl	8000658 <__aeabi_dmul>
 8012414:	a368      	add	r3, pc, #416	@ (adr r3, 80125b8 <_dtoa_r+0x2b8>)
 8012416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801241a:	f7ed ff67 	bl	80002ec <__adddf3>
 801241e:	4604      	mov	r4, r0
 8012420:	4630      	mov	r0, r6
 8012422:	460d      	mov	r5, r1
 8012424:	f7ee f8ae 	bl	8000584 <__aeabi_i2d>
 8012428:	a365      	add	r3, pc, #404	@ (adr r3, 80125c0 <_dtoa_r+0x2c0>)
 801242a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801242e:	f7ee f913 	bl	8000658 <__aeabi_dmul>
 8012432:	4602      	mov	r2, r0
 8012434:	460b      	mov	r3, r1
 8012436:	4620      	mov	r0, r4
 8012438:	4629      	mov	r1, r5
 801243a:	f7ed ff57 	bl	80002ec <__adddf3>
 801243e:	4604      	mov	r4, r0
 8012440:	460d      	mov	r5, r1
 8012442:	f7ee fbb9 	bl	8000bb8 <__aeabi_d2iz>
 8012446:	2200      	movs	r2, #0
 8012448:	4607      	mov	r7, r0
 801244a:	2300      	movs	r3, #0
 801244c:	4620      	mov	r0, r4
 801244e:	4629      	mov	r1, r5
 8012450:	f7ee fb74 	bl	8000b3c <__aeabi_dcmplt>
 8012454:	b140      	cbz	r0, 8012468 <_dtoa_r+0x168>
 8012456:	4638      	mov	r0, r7
 8012458:	f7ee f894 	bl	8000584 <__aeabi_i2d>
 801245c:	4622      	mov	r2, r4
 801245e:	462b      	mov	r3, r5
 8012460:	f7ee fb62 	bl	8000b28 <__aeabi_dcmpeq>
 8012464:	b900      	cbnz	r0, 8012468 <_dtoa_r+0x168>
 8012466:	3f01      	subs	r7, #1
 8012468:	2f16      	cmp	r7, #22
 801246a:	d851      	bhi.n	8012510 <_dtoa_r+0x210>
 801246c:	4b5b      	ldr	r3, [pc, #364]	@ (80125dc <_dtoa_r+0x2dc>)
 801246e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012476:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801247a:	f7ee fb5f 	bl	8000b3c <__aeabi_dcmplt>
 801247e:	2800      	cmp	r0, #0
 8012480:	d048      	beq.n	8012514 <_dtoa_r+0x214>
 8012482:	3f01      	subs	r7, #1
 8012484:	2300      	movs	r3, #0
 8012486:	9312      	str	r3, [sp, #72]	@ 0x48
 8012488:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801248a:	1b9b      	subs	r3, r3, r6
 801248c:	1e5a      	subs	r2, r3, #1
 801248e:	bf44      	itt	mi
 8012490:	f1c3 0801 	rsbmi	r8, r3, #1
 8012494:	2300      	movmi	r3, #0
 8012496:	9208      	str	r2, [sp, #32]
 8012498:	bf54      	ite	pl
 801249a:	f04f 0800 	movpl.w	r8, #0
 801249e:	9308      	strmi	r3, [sp, #32]
 80124a0:	2f00      	cmp	r7, #0
 80124a2:	db39      	blt.n	8012518 <_dtoa_r+0x218>
 80124a4:	9b08      	ldr	r3, [sp, #32]
 80124a6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80124a8:	443b      	add	r3, r7
 80124aa:	9308      	str	r3, [sp, #32]
 80124ac:	2300      	movs	r3, #0
 80124ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80124b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124b2:	2b09      	cmp	r3, #9
 80124b4:	d864      	bhi.n	8012580 <_dtoa_r+0x280>
 80124b6:	2b05      	cmp	r3, #5
 80124b8:	bfc4      	itt	gt
 80124ba:	3b04      	subgt	r3, #4
 80124bc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80124be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124c0:	f1a3 0302 	sub.w	r3, r3, #2
 80124c4:	bfcc      	ite	gt
 80124c6:	2400      	movgt	r4, #0
 80124c8:	2401      	movle	r4, #1
 80124ca:	2b03      	cmp	r3, #3
 80124cc:	d863      	bhi.n	8012596 <_dtoa_r+0x296>
 80124ce:	e8df f003 	tbb	[pc, r3]
 80124d2:	372a      	.short	0x372a
 80124d4:	5535      	.short	0x5535
 80124d6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80124da:	441e      	add	r6, r3
 80124dc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80124e0:	2b20      	cmp	r3, #32
 80124e2:	bfc1      	itttt	gt
 80124e4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80124e8:	409f      	lslgt	r7, r3
 80124ea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80124ee:	fa24 f303 	lsrgt.w	r3, r4, r3
 80124f2:	bfd6      	itet	le
 80124f4:	f1c3 0320 	rsble	r3, r3, #32
 80124f8:	ea47 0003 	orrgt.w	r0, r7, r3
 80124fc:	fa04 f003 	lslle.w	r0, r4, r3
 8012500:	f7ee f830 	bl	8000564 <__aeabi_ui2d>
 8012504:	2201      	movs	r2, #1
 8012506:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801250a:	3e01      	subs	r6, #1
 801250c:	9214      	str	r2, [sp, #80]	@ 0x50
 801250e:	e777      	b.n	8012400 <_dtoa_r+0x100>
 8012510:	2301      	movs	r3, #1
 8012512:	e7b8      	b.n	8012486 <_dtoa_r+0x186>
 8012514:	9012      	str	r0, [sp, #72]	@ 0x48
 8012516:	e7b7      	b.n	8012488 <_dtoa_r+0x188>
 8012518:	427b      	negs	r3, r7
 801251a:	930a      	str	r3, [sp, #40]	@ 0x28
 801251c:	2300      	movs	r3, #0
 801251e:	eba8 0807 	sub.w	r8, r8, r7
 8012522:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012524:	e7c4      	b.n	80124b0 <_dtoa_r+0x1b0>
 8012526:	2300      	movs	r3, #0
 8012528:	930b      	str	r3, [sp, #44]	@ 0x2c
 801252a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801252c:	2b00      	cmp	r3, #0
 801252e:	dc35      	bgt.n	801259c <_dtoa_r+0x29c>
 8012530:	2301      	movs	r3, #1
 8012532:	9300      	str	r3, [sp, #0]
 8012534:	9307      	str	r3, [sp, #28]
 8012536:	461a      	mov	r2, r3
 8012538:	920e      	str	r2, [sp, #56]	@ 0x38
 801253a:	e00b      	b.n	8012554 <_dtoa_r+0x254>
 801253c:	2301      	movs	r3, #1
 801253e:	e7f3      	b.n	8012528 <_dtoa_r+0x228>
 8012540:	2300      	movs	r3, #0
 8012542:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012544:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012546:	18fb      	adds	r3, r7, r3
 8012548:	9300      	str	r3, [sp, #0]
 801254a:	3301      	adds	r3, #1
 801254c:	2b01      	cmp	r3, #1
 801254e:	9307      	str	r3, [sp, #28]
 8012550:	bfb8      	it	lt
 8012552:	2301      	movlt	r3, #1
 8012554:	f8db 001c 	ldr.w	r0, [fp, #28]
 8012558:	2100      	movs	r1, #0
 801255a:	2204      	movs	r2, #4
 801255c:	f102 0514 	add.w	r5, r2, #20
 8012560:	429d      	cmp	r5, r3
 8012562:	d91f      	bls.n	80125a4 <_dtoa_r+0x2a4>
 8012564:	6041      	str	r1, [r0, #4]
 8012566:	4658      	mov	r0, fp
 8012568:	f000 fcd8 	bl	8012f1c <_Balloc>
 801256c:	4682      	mov	sl, r0
 801256e:	2800      	cmp	r0, #0
 8012570:	d13c      	bne.n	80125ec <_dtoa_r+0x2ec>
 8012572:	4b1b      	ldr	r3, [pc, #108]	@ (80125e0 <_dtoa_r+0x2e0>)
 8012574:	4602      	mov	r2, r0
 8012576:	f240 11af 	movw	r1, #431	@ 0x1af
 801257a:	e6d8      	b.n	801232e <_dtoa_r+0x2e>
 801257c:	2301      	movs	r3, #1
 801257e:	e7e0      	b.n	8012542 <_dtoa_r+0x242>
 8012580:	2401      	movs	r4, #1
 8012582:	2300      	movs	r3, #0
 8012584:	9309      	str	r3, [sp, #36]	@ 0x24
 8012586:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012588:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801258c:	9300      	str	r3, [sp, #0]
 801258e:	9307      	str	r3, [sp, #28]
 8012590:	2200      	movs	r2, #0
 8012592:	2312      	movs	r3, #18
 8012594:	e7d0      	b.n	8012538 <_dtoa_r+0x238>
 8012596:	2301      	movs	r3, #1
 8012598:	930b      	str	r3, [sp, #44]	@ 0x2c
 801259a:	e7f5      	b.n	8012588 <_dtoa_r+0x288>
 801259c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801259e:	9300      	str	r3, [sp, #0]
 80125a0:	9307      	str	r3, [sp, #28]
 80125a2:	e7d7      	b.n	8012554 <_dtoa_r+0x254>
 80125a4:	3101      	adds	r1, #1
 80125a6:	0052      	lsls	r2, r2, #1
 80125a8:	e7d8      	b.n	801255c <_dtoa_r+0x25c>
 80125aa:	bf00      	nop
 80125ac:	f3af 8000 	nop.w
 80125b0:	636f4361 	.word	0x636f4361
 80125b4:	3fd287a7 	.word	0x3fd287a7
 80125b8:	8b60c8b3 	.word	0x8b60c8b3
 80125bc:	3fc68a28 	.word	0x3fc68a28
 80125c0:	509f79fb 	.word	0x509f79fb
 80125c4:	3fd34413 	.word	0x3fd34413
 80125c8:	0801538f 	.word	0x0801538f
 80125cc:	080153a6 	.word	0x080153a6
 80125d0:	7ff00000 	.word	0x7ff00000
 80125d4:	0801535f 	.word	0x0801535f
 80125d8:	3ff80000 	.word	0x3ff80000
 80125dc:	080154a0 	.word	0x080154a0
 80125e0:	080153fe 	.word	0x080153fe
 80125e4:	0801538b 	.word	0x0801538b
 80125e8:	0801535e 	.word	0x0801535e
 80125ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80125f0:	6018      	str	r0, [r3, #0]
 80125f2:	9b07      	ldr	r3, [sp, #28]
 80125f4:	2b0e      	cmp	r3, #14
 80125f6:	f200 80a4 	bhi.w	8012742 <_dtoa_r+0x442>
 80125fa:	2c00      	cmp	r4, #0
 80125fc:	f000 80a1 	beq.w	8012742 <_dtoa_r+0x442>
 8012600:	2f00      	cmp	r7, #0
 8012602:	dd33      	ble.n	801266c <_dtoa_r+0x36c>
 8012604:	4bad      	ldr	r3, [pc, #692]	@ (80128bc <_dtoa_r+0x5bc>)
 8012606:	f007 020f 	and.w	r2, r7, #15
 801260a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801260e:	ed93 7b00 	vldr	d7, [r3]
 8012612:	05f8      	lsls	r0, r7, #23
 8012614:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012618:	ea4f 1427 	mov.w	r4, r7, asr #4
 801261c:	d516      	bpl.n	801264c <_dtoa_r+0x34c>
 801261e:	4ba8      	ldr	r3, [pc, #672]	@ (80128c0 <_dtoa_r+0x5c0>)
 8012620:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012624:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012628:	f7ee f940 	bl	80008ac <__aeabi_ddiv>
 801262c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012630:	f004 040f 	and.w	r4, r4, #15
 8012634:	2603      	movs	r6, #3
 8012636:	4da2      	ldr	r5, [pc, #648]	@ (80128c0 <_dtoa_r+0x5c0>)
 8012638:	b954      	cbnz	r4, 8012650 <_dtoa_r+0x350>
 801263a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801263e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012642:	f7ee f933 	bl	80008ac <__aeabi_ddiv>
 8012646:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801264a:	e028      	b.n	801269e <_dtoa_r+0x39e>
 801264c:	2602      	movs	r6, #2
 801264e:	e7f2      	b.n	8012636 <_dtoa_r+0x336>
 8012650:	07e1      	lsls	r1, r4, #31
 8012652:	d508      	bpl.n	8012666 <_dtoa_r+0x366>
 8012654:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012658:	e9d5 2300 	ldrd	r2, r3, [r5]
 801265c:	f7ed fffc 	bl	8000658 <__aeabi_dmul>
 8012660:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012664:	3601      	adds	r6, #1
 8012666:	1064      	asrs	r4, r4, #1
 8012668:	3508      	adds	r5, #8
 801266a:	e7e5      	b.n	8012638 <_dtoa_r+0x338>
 801266c:	f000 80d2 	beq.w	8012814 <_dtoa_r+0x514>
 8012670:	427c      	negs	r4, r7
 8012672:	4b92      	ldr	r3, [pc, #584]	@ (80128bc <_dtoa_r+0x5bc>)
 8012674:	4d92      	ldr	r5, [pc, #584]	@ (80128c0 <_dtoa_r+0x5c0>)
 8012676:	f004 020f 	and.w	r2, r4, #15
 801267a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801267e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012682:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012686:	f7ed ffe7 	bl	8000658 <__aeabi_dmul>
 801268a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801268e:	1124      	asrs	r4, r4, #4
 8012690:	2300      	movs	r3, #0
 8012692:	2602      	movs	r6, #2
 8012694:	2c00      	cmp	r4, #0
 8012696:	f040 80b2 	bne.w	80127fe <_dtoa_r+0x4fe>
 801269a:	2b00      	cmp	r3, #0
 801269c:	d1d3      	bne.n	8012646 <_dtoa_r+0x346>
 801269e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80126a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	f000 80b7 	beq.w	8012818 <_dtoa_r+0x518>
 80126aa:	4b86      	ldr	r3, [pc, #536]	@ (80128c4 <_dtoa_r+0x5c4>)
 80126ac:	2200      	movs	r2, #0
 80126ae:	4620      	mov	r0, r4
 80126b0:	4629      	mov	r1, r5
 80126b2:	f7ee fa43 	bl	8000b3c <__aeabi_dcmplt>
 80126b6:	2800      	cmp	r0, #0
 80126b8:	f000 80ae 	beq.w	8012818 <_dtoa_r+0x518>
 80126bc:	9b07      	ldr	r3, [sp, #28]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	f000 80aa 	beq.w	8012818 <_dtoa_r+0x518>
 80126c4:	9b00      	ldr	r3, [sp, #0]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	dd37      	ble.n	801273a <_dtoa_r+0x43a>
 80126ca:	1e7b      	subs	r3, r7, #1
 80126cc:	9304      	str	r3, [sp, #16]
 80126ce:	4620      	mov	r0, r4
 80126d0:	4b7d      	ldr	r3, [pc, #500]	@ (80128c8 <_dtoa_r+0x5c8>)
 80126d2:	2200      	movs	r2, #0
 80126d4:	4629      	mov	r1, r5
 80126d6:	f7ed ffbf 	bl	8000658 <__aeabi_dmul>
 80126da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80126de:	9c00      	ldr	r4, [sp, #0]
 80126e0:	3601      	adds	r6, #1
 80126e2:	4630      	mov	r0, r6
 80126e4:	f7ed ff4e 	bl	8000584 <__aeabi_i2d>
 80126e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80126ec:	f7ed ffb4 	bl	8000658 <__aeabi_dmul>
 80126f0:	4b76      	ldr	r3, [pc, #472]	@ (80128cc <_dtoa_r+0x5cc>)
 80126f2:	2200      	movs	r2, #0
 80126f4:	f7ed fdfa 	bl	80002ec <__adddf3>
 80126f8:	4605      	mov	r5, r0
 80126fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80126fe:	2c00      	cmp	r4, #0
 8012700:	f040 808d 	bne.w	801281e <_dtoa_r+0x51e>
 8012704:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012708:	4b71      	ldr	r3, [pc, #452]	@ (80128d0 <_dtoa_r+0x5d0>)
 801270a:	2200      	movs	r2, #0
 801270c:	f7ed fdec 	bl	80002e8 <__aeabi_dsub>
 8012710:	4602      	mov	r2, r0
 8012712:	460b      	mov	r3, r1
 8012714:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012718:	462a      	mov	r2, r5
 801271a:	4633      	mov	r3, r6
 801271c:	f7ee fa2c 	bl	8000b78 <__aeabi_dcmpgt>
 8012720:	2800      	cmp	r0, #0
 8012722:	f040 828b 	bne.w	8012c3c <_dtoa_r+0x93c>
 8012726:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801272a:	462a      	mov	r2, r5
 801272c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012730:	f7ee fa04 	bl	8000b3c <__aeabi_dcmplt>
 8012734:	2800      	cmp	r0, #0
 8012736:	f040 8128 	bne.w	801298a <_dtoa_r+0x68a>
 801273a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801273e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012742:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012744:	2b00      	cmp	r3, #0
 8012746:	f2c0 815a 	blt.w	80129fe <_dtoa_r+0x6fe>
 801274a:	2f0e      	cmp	r7, #14
 801274c:	f300 8157 	bgt.w	80129fe <_dtoa_r+0x6fe>
 8012750:	4b5a      	ldr	r3, [pc, #360]	@ (80128bc <_dtoa_r+0x5bc>)
 8012752:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012756:	ed93 7b00 	vldr	d7, [r3]
 801275a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801275c:	2b00      	cmp	r3, #0
 801275e:	ed8d 7b00 	vstr	d7, [sp]
 8012762:	da03      	bge.n	801276c <_dtoa_r+0x46c>
 8012764:	9b07      	ldr	r3, [sp, #28]
 8012766:	2b00      	cmp	r3, #0
 8012768:	f340 8101 	ble.w	801296e <_dtoa_r+0x66e>
 801276c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012770:	4656      	mov	r6, sl
 8012772:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012776:	4620      	mov	r0, r4
 8012778:	4629      	mov	r1, r5
 801277a:	f7ee f897 	bl	80008ac <__aeabi_ddiv>
 801277e:	f7ee fa1b 	bl	8000bb8 <__aeabi_d2iz>
 8012782:	4680      	mov	r8, r0
 8012784:	f7ed fefe 	bl	8000584 <__aeabi_i2d>
 8012788:	e9dd 2300 	ldrd	r2, r3, [sp]
 801278c:	f7ed ff64 	bl	8000658 <__aeabi_dmul>
 8012790:	4602      	mov	r2, r0
 8012792:	460b      	mov	r3, r1
 8012794:	4620      	mov	r0, r4
 8012796:	4629      	mov	r1, r5
 8012798:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801279c:	f7ed fda4 	bl	80002e8 <__aeabi_dsub>
 80127a0:	f806 4b01 	strb.w	r4, [r6], #1
 80127a4:	9d07      	ldr	r5, [sp, #28]
 80127a6:	eba6 040a 	sub.w	r4, r6, sl
 80127aa:	42a5      	cmp	r5, r4
 80127ac:	4602      	mov	r2, r0
 80127ae:	460b      	mov	r3, r1
 80127b0:	f040 8117 	bne.w	80129e2 <_dtoa_r+0x6e2>
 80127b4:	f7ed fd9a 	bl	80002ec <__adddf3>
 80127b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80127bc:	4604      	mov	r4, r0
 80127be:	460d      	mov	r5, r1
 80127c0:	f7ee f9da 	bl	8000b78 <__aeabi_dcmpgt>
 80127c4:	2800      	cmp	r0, #0
 80127c6:	f040 80f9 	bne.w	80129bc <_dtoa_r+0x6bc>
 80127ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80127ce:	4620      	mov	r0, r4
 80127d0:	4629      	mov	r1, r5
 80127d2:	f7ee f9a9 	bl	8000b28 <__aeabi_dcmpeq>
 80127d6:	b118      	cbz	r0, 80127e0 <_dtoa_r+0x4e0>
 80127d8:	f018 0f01 	tst.w	r8, #1
 80127dc:	f040 80ee 	bne.w	80129bc <_dtoa_r+0x6bc>
 80127e0:	4649      	mov	r1, r9
 80127e2:	4658      	mov	r0, fp
 80127e4:	f000 fbda 	bl	8012f9c <_Bfree>
 80127e8:	2300      	movs	r3, #0
 80127ea:	7033      	strb	r3, [r6, #0]
 80127ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80127ee:	3701      	adds	r7, #1
 80127f0:	601f      	str	r7, [r3, #0]
 80127f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	f000 831d 	beq.w	8012e34 <_dtoa_r+0xb34>
 80127fa:	601e      	str	r6, [r3, #0]
 80127fc:	e31a      	b.n	8012e34 <_dtoa_r+0xb34>
 80127fe:	07e2      	lsls	r2, r4, #31
 8012800:	d505      	bpl.n	801280e <_dtoa_r+0x50e>
 8012802:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012806:	f7ed ff27 	bl	8000658 <__aeabi_dmul>
 801280a:	3601      	adds	r6, #1
 801280c:	2301      	movs	r3, #1
 801280e:	1064      	asrs	r4, r4, #1
 8012810:	3508      	adds	r5, #8
 8012812:	e73f      	b.n	8012694 <_dtoa_r+0x394>
 8012814:	2602      	movs	r6, #2
 8012816:	e742      	b.n	801269e <_dtoa_r+0x39e>
 8012818:	9c07      	ldr	r4, [sp, #28]
 801281a:	9704      	str	r7, [sp, #16]
 801281c:	e761      	b.n	80126e2 <_dtoa_r+0x3e2>
 801281e:	4b27      	ldr	r3, [pc, #156]	@ (80128bc <_dtoa_r+0x5bc>)
 8012820:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012822:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012826:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801282a:	4454      	add	r4, sl
 801282c:	2900      	cmp	r1, #0
 801282e:	d053      	beq.n	80128d8 <_dtoa_r+0x5d8>
 8012830:	4928      	ldr	r1, [pc, #160]	@ (80128d4 <_dtoa_r+0x5d4>)
 8012832:	2000      	movs	r0, #0
 8012834:	f7ee f83a 	bl	80008ac <__aeabi_ddiv>
 8012838:	4633      	mov	r3, r6
 801283a:	462a      	mov	r2, r5
 801283c:	f7ed fd54 	bl	80002e8 <__aeabi_dsub>
 8012840:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012844:	4656      	mov	r6, sl
 8012846:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801284a:	f7ee f9b5 	bl	8000bb8 <__aeabi_d2iz>
 801284e:	4605      	mov	r5, r0
 8012850:	f7ed fe98 	bl	8000584 <__aeabi_i2d>
 8012854:	4602      	mov	r2, r0
 8012856:	460b      	mov	r3, r1
 8012858:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801285c:	f7ed fd44 	bl	80002e8 <__aeabi_dsub>
 8012860:	3530      	adds	r5, #48	@ 0x30
 8012862:	4602      	mov	r2, r0
 8012864:	460b      	mov	r3, r1
 8012866:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801286a:	f806 5b01 	strb.w	r5, [r6], #1
 801286e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012872:	f7ee f963 	bl	8000b3c <__aeabi_dcmplt>
 8012876:	2800      	cmp	r0, #0
 8012878:	d171      	bne.n	801295e <_dtoa_r+0x65e>
 801287a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801287e:	4911      	ldr	r1, [pc, #68]	@ (80128c4 <_dtoa_r+0x5c4>)
 8012880:	2000      	movs	r0, #0
 8012882:	f7ed fd31 	bl	80002e8 <__aeabi_dsub>
 8012886:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801288a:	f7ee f957 	bl	8000b3c <__aeabi_dcmplt>
 801288e:	2800      	cmp	r0, #0
 8012890:	f040 8095 	bne.w	80129be <_dtoa_r+0x6be>
 8012894:	42a6      	cmp	r6, r4
 8012896:	f43f af50 	beq.w	801273a <_dtoa_r+0x43a>
 801289a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801289e:	4b0a      	ldr	r3, [pc, #40]	@ (80128c8 <_dtoa_r+0x5c8>)
 80128a0:	2200      	movs	r2, #0
 80128a2:	f7ed fed9 	bl	8000658 <__aeabi_dmul>
 80128a6:	4b08      	ldr	r3, [pc, #32]	@ (80128c8 <_dtoa_r+0x5c8>)
 80128a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80128ac:	2200      	movs	r2, #0
 80128ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80128b2:	f7ed fed1 	bl	8000658 <__aeabi_dmul>
 80128b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80128ba:	e7c4      	b.n	8012846 <_dtoa_r+0x546>
 80128bc:	080154a0 	.word	0x080154a0
 80128c0:	08015478 	.word	0x08015478
 80128c4:	3ff00000 	.word	0x3ff00000
 80128c8:	40240000 	.word	0x40240000
 80128cc:	401c0000 	.word	0x401c0000
 80128d0:	40140000 	.word	0x40140000
 80128d4:	3fe00000 	.word	0x3fe00000
 80128d8:	4631      	mov	r1, r6
 80128da:	4628      	mov	r0, r5
 80128dc:	f7ed febc 	bl	8000658 <__aeabi_dmul>
 80128e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80128e4:	9415      	str	r4, [sp, #84]	@ 0x54
 80128e6:	4656      	mov	r6, sl
 80128e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80128ec:	f7ee f964 	bl	8000bb8 <__aeabi_d2iz>
 80128f0:	4605      	mov	r5, r0
 80128f2:	f7ed fe47 	bl	8000584 <__aeabi_i2d>
 80128f6:	4602      	mov	r2, r0
 80128f8:	460b      	mov	r3, r1
 80128fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80128fe:	f7ed fcf3 	bl	80002e8 <__aeabi_dsub>
 8012902:	3530      	adds	r5, #48	@ 0x30
 8012904:	f806 5b01 	strb.w	r5, [r6], #1
 8012908:	4602      	mov	r2, r0
 801290a:	460b      	mov	r3, r1
 801290c:	42a6      	cmp	r6, r4
 801290e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012912:	f04f 0200 	mov.w	r2, #0
 8012916:	d124      	bne.n	8012962 <_dtoa_r+0x662>
 8012918:	4bac      	ldr	r3, [pc, #688]	@ (8012bcc <_dtoa_r+0x8cc>)
 801291a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801291e:	f7ed fce5 	bl	80002ec <__adddf3>
 8012922:	4602      	mov	r2, r0
 8012924:	460b      	mov	r3, r1
 8012926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801292a:	f7ee f925 	bl	8000b78 <__aeabi_dcmpgt>
 801292e:	2800      	cmp	r0, #0
 8012930:	d145      	bne.n	80129be <_dtoa_r+0x6be>
 8012932:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012936:	49a5      	ldr	r1, [pc, #660]	@ (8012bcc <_dtoa_r+0x8cc>)
 8012938:	2000      	movs	r0, #0
 801293a:	f7ed fcd5 	bl	80002e8 <__aeabi_dsub>
 801293e:	4602      	mov	r2, r0
 8012940:	460b      	mov	r3, r1
 8012942:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012946:	f7ee f8f9 	bl	8000b3c <__aeabi_dcmplt>
 801294a:	2800      	cmp	r0, #0
 801294c:	f43f aef5 	beq.w	801273a <_dtoa_r+0x43a>
 8012950:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8012952:	1e73      	subs	r3, r6, #1
 8012954:	9315      	str	r3, [sp, #84]	@ 0x54
 8012956:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801295a:	2b30      	cmp	r3, #48	@ 0x30
 801295c:	d0f8      	beq.n	8012950 <_dtoa_r+0x650>
 801295e:	9f04      	ldr	r7, [sp, #16]
 8012960:	e73e      	b.n	80127e0 <_dtoa_r+0x4e0>
 8012962:	4b9b      	ldr	r3, [pc, #620]	@ (8012bd0 <_dtoa_r+0x8d0>)
 8012964:	f7ed fe78 	bl	8000658 <__aeabi_dmul>
 8012968:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801296c:	e7bc      	b.n	80128e8 <_dtoa_r+0x5e8>
 801296e:	d10c      	bne.n	801298a <_dtoa_r+0x68a>
 8012970:	4b98      	ldr	r3, [pc, #608]	@ (8012bd4 <_dtoa_r+0x8d4>)
 8012972:	2200      	movs	r2, #0
 8012974:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012978:	f7ed fe6e 	bl	8000658 <__aeabi_dmul>
 801297c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012980:	f7ee f8f0 	bl	8000b64 <__aeabi_dcmpge>
 8012984:	2800      	cmp	r0, #0
 8012986:	f000 8157 	beq.w	8012c38 <_dtoa_r+0x938>
 801298a:	2400      	movs	r4, #0
 801298c:	4625      	mov	r5, r4
 801298e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012990:	43db      	mvns	r3, r3
 8012992:	9304      	str	r3, [sp, #16]
 8012994:	4656      	mov	r6, sl
 8012996:	2700      	movs	r7, #0
 8012998:	4621      	mov	r1, r4
 801299a:	4658      	mov	r0, fp
 801299c:	f000 fafe 	bl	8012f9c <_Bfree>
 80129a0:	2d00      	cmp	r5, #0
 80129a2:	d0dc      	beq.n	801295e <_dtoa_r+0x65e>
 80129a4:	b12f      	cbz	r7, 80129b2 <_dtoa_r+0x6b2>
 80129a6:	42af      	cmp	r7, r5
 80129a8:	d003      	beq.n	80129b2 <_dtoa_r+0x6b2>
 80129aa:	4639      	mov	r1, r7
 80129ac:	4658      	mov	r0, fp
 80129ae:	f000 faf5 	bl	8012f9c <_Bfree>
 80129b2:	4629      	mov	r1, r5
 80129b4:	4658      	mov	r0, fp
 80129b6:	f000 faf1 	bl	8012f9c <_Bfree>
 80129ba:	e7d0      	b.n	801295e <_dtoa_r+0x65e>
 80129bc:	9704      	str	r7, [sp, #16]
 80129be:	4633      	mov	r3, r6
 80129c0:	461e      	mov	r6, r3
 80129c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80129c6:	2a39      	cmp	r2, #57	@ 0x39
 80129c8:	d107      	bne.n	80129da <_dtoa_r+0x6da>
 80129ca:	459a      	cmp	sl, r3
 80129cc:	d1f8      	bne.n	80129c0 <_dtoa_r+0x6c0>
 80129ce:	9a04      	ldr	r2, [sp, #16]
 80129d0:	3201      	adds	r2, #1
 80129d2:	9204      	str	r2, [sp, #16]
 80129d4:	2230      	movs	r2, #48	@ 0x30
 80129d6:	f88a 2000 	strb.w	r2, [sl]
 80129da:	781a      	ldrb	r2, [r3, #0]
 80129dc:	3201      	adds	r2, #1
 80129de:	701a      	strb	r2, [r3, #0]
 80129e0:	e7bd      	b.n	801295e <_dtoa_r+0x65e>
 80129e2:	4b7b      	ldr	r3, [pc, #492]	@ (8012bd0 <_dtoa_r+0x8d0>)
 80129e4:	2200      	movs	r2, #0
 80129e6:	f7ed fe37 	bl	8000658 <__aeabi_dmul>
 80129ea:	2200      	movs	r2, #0
 80129ec:	2300      	movs	r3, #0
 80129ee:	4604      	mov	r4, r0
 80129f0:	460d      	mov	r5, r1
 80129f2:	f7ee f899 	bl	8000b28 <__aeabi_dcmpeq>
 80129f6:	2800      	cmp	r0, #0
 80129f8:	f43f aebb 	beq.w	8012772 <_dtoa_r+0x472>
 80129fc:	e6f0      	b.n	80127e0 <_dtoa_r+0x4e0>
 80129fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012a00:	2a00      	cmp	r2, #0
 8012a02:	f000 80db 	beq.w	8012bbc <_dtoa_r+0x8bc>
 8012a06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012a08:	2a01      	cmp	r2, #1
 8012a0a:	f300 80bf 	bgt.w	8012b8c <_dtoa_r+0x88c>
 8012a0e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012a10:	2a00      	cmp	r2, #0
 8012a12:	f000 80b7 	beq.w	8012b84 <_dtoa_r+0x884>
 8012a16:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8012a1a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012a1c:	4646      	mov	r6, r8
 8012a1e:	9a08      	ldr	r2, [sp, #32]
 8012a20:	2101      	movs	r1, #1
 8012a22:	441a      	add	r2, r3
 8012a24:	4658      	mov	r0, fp
 8012a26:	4498      	add	r8, r3
 8012a28:	9208      	str	r2, [sp, #32]
 8012a2a:	f000 fb6b 	bl	8013104 <__i2b>
 8012a2e:	4605      	mov	r5, r0
 8012a30:	b15e      	cbz	r6, 8012a4a <_dtoa_r+0x74a>
 8012a32:	9b08      	ldr	r3, [sp, #32]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	dd08      	ble.n	8012a4a <_dtoa_r+0x74a>
 8012a38:	42b3      	cmp	r3, r6
 8012a3a:	9a08      	ldr	r2, [sp, #32]
 8012a3c:	bfa8      	it	ge
 8012a3e:	4633      	movge	r3, r6
 8012a40:	eba8 0803 	sub.w	r8, r8, r3
 8012a44:	1af6      	subs	r6, r6, r3
 8012a46:	1ad3      	subs	r3, r2, r3
 8012a48:	9308      	str	r3, [sp, #32]
 8012a4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012a4c:	b1f3      	cbz	r3, 8012a8c <_dtoa_r+0x78c>
 8012a4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	f000 80b7 	beq.w	8012bc4 <_dtoa_r+0x8c4>
 8012a56:	b18c      	cbz	r4, 8012a7c <_dtoa_r+0x77c>
 8012a58:	4629      	mov	r1, r5
 8012a5a:	4622      	mov	r2, r4
 8012a5c:	4658      	mov	r0, fp
 8012a5e:	f000 fc11 	bl	8013284 <__pow5mult>
 8012a62:	464a      	mov	r2, r9
 8012a64:	4601      	mov	r1, r0
 8012a66:	4605      	mov	r5, r0
 8012a68:	4658      	mov	r0, fp
 8012a6a:	f000 fb61 	bl	8013130 <__multiply>
 8012a6e:	4649      	mov	r1, r9
 8012a70:	9004      	str	r0, [sp, #16]
 8012a72:	4658      	mov	r0, fp
 8012a74:	f000 fa92 	bl	8012f9c <_Bfree>
 8012a78:	9b04      	ldr	r3, [sp, #16]
 8012a7a:	4699      	mov	r9, r3
 8012a7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012a7e:	1b1a      	subs	r2, r3, r4
 8012a80:	d004      	beq.n	8012a8c <_dtoa_r+0x78c>
 8012a82:	4649      	mov	r1, r9
 8012a84:	4658      	mov	r0, fp
 8012a86:	f000 fbfd 	bl	8013284 <__pow5mult>
 8012a8a:	4681      	mov	r9, r0
 8012a8c:	2101      	movs	r1, #1
 8012a8e:	4658      	mov	r0, fp
 8012a90:	f000 fb38 	bl	8013104 <__i2b>
 8012a94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012a96:	4604      	mov	r4, r0
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	f000 81cf 	beq.w	8012e3c <_dtoa_r+0xb3c>
 8012a9e:	461a      	mov	r2, r3
 8012aa0:	4601      	mov	r1, r0
 8012aa2:	4658      	mov	r0, fp
 8012aa4:	f000 fbee 	bl	8013284 <__pow5mult>
 8012aa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012aaa:	2b01      	cmp	r3, #1
 8012aac:	4604      	mov	r4, r0
 8012aae:	f300 8095 	bgt.w	8012bdc <_dtoa_r+0x8dc>
 8012ab2:	9b02      	ldr	r3, [sp, #8]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	f040 8087 	bne.w	8012bc8 <_dtoa_r+0x8c8>
 8012aba:	9b03      	ldr	r3, [sp, #12]
 8012abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	f040 8089 	bne.w	8012bd8 <_dtoa_r+0x8d8>
 8012ac6:	9b03      	ldr	r3, [sp, #12]
 8012ac8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012acc:	0d1b      	lsrs	r3, r3, #20
 8012ace:	051b      	lsls	r3, r3, #20
 8012ad0:	b12b      	cbz	r3, 8012ade <_dtoa_r+0x7de>
 8012ad2:	9b08      	ldr	r3, [sp, #32]
 8012ad4:	3301      	adds	r3, #1
 8012ad6:	9308      	str	r3, [sp, #32]
 8012ad8:	f108 0801 	add.w	r8, r8, #1
 8012adc:	2301      	movs	r3, #1
 8012ade:	930a      	str	r3, [sp, #40]	@ 0x28
 8012ae0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	f000 81b0 	beq.w	8012e48 <_dtoa_r+0xb48>
 8012ae8:	6923      	ldr	r3, [r4, #16]
 8012aea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012aee:	6918      	ldr	r0, [r3, #16]
 8012af0:	f000 fabc 	bl	801306c <__hi0bits>
 8012af4:	f1c0 0020 	rsb	r0, r0, #32
 8012af8:	9b08      	ldr	r3, [sp, #32]
 8012afa:	4418      	add	r0, r3
 8012afc:	f010 001f 	ands.w	r0, r0, #31
 8012b00:	d077      	beq.n	8012bf2 <_dtoa_r+0x8f2>
 8012b02:	f1c0 0320 	rsb	r3, r0, #32
 8012b06:	2b04      	cmp	r3, #4
 8012b08:	dd6b      	ble.n	8012be2 <_dtoa_r+0x8e2>
 8012b0a:	9b08      	ldr	r3, [sp, #32]
 8012b0c:	f1c0 001c 	rsb	r0, r0, #28
 8012b10:	4403      	add	r3, r0
 8012b12:	4480      	add	r8, r0
 8012b14:	4406      	add	r6, r0
 8012b16:	9308      	str	r3, [sp, #32]
 8012b18:	f1b8 0f00 	cmp.w	r8, #0
 8012b1c:	dd05      	ble.n	8012b2a <_dtoa_r+0x82a>
 8012b1e:	4649      	mov	r1, r9
 8012b20:	4642      	mov	r2, r8
 8012b22:	4658      	mov	r0, fp
 8012b24:	f000 fc08 	bl	8013338 <__lshift>
 8012b28:	4681      	mov	r9, r0
 8012b2a:	9b08      	ldr	r3, [sp, #32]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	dd05      	ble.n	8012b3c <_dtoa_r+0x83c>
 8012b30:	4621      	mov	r1, r4
 8012b32:	461a      	mov	r2, r3
 8012b34:	4658      	mov	r0, fp
 8012b36:	f000 fbff 	bl	8013338 <__lshift>
 8012b3a:	4604      	mov	r4, r0
 8012b3c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d059      	beq.n	8012bf6 <_dtoa_r+0x8f6>
 8012b42:	4621      	mov	r1, r4
 8012b44:	4648      	mov	r0, r9
 8012b46:	f000 fc63 	bl	8013410 <__mcmp>
 8012b4a:	2800      	cmp	r0, #0
 8012b4c:	da53      	bge.n	8012bf6 <_dtoa_r+0x8f6>
 8012b4e:	1e7b      	subs	r3, r7, #1
 8012b50:	9304      	str	r3, [sp, #16]
 8012b52:	4649      	mov	r1, r9
 8012b54:	2300      	movs	r3, #0
 8012b56:	220a      	movs	r2, #10
 8012b58:	4658      	mov	r0, fp
 8012b5a:	f000 fa41 	bl	8012fe0 <__multadd>
 8012b5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012b60:	4681      	mov	r9, r0
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	f000 8172 	beq.w	8012e4c <_dtoa_r+0xb4c>
 8012b68:	2300      	movs	r3, #0
 8012b6a:	4629      	mov	r1, r5
 8012b6c:	220a      	movs	r2, #10
 8012b6e:	4658      	mov	r0, fp
 8012b70:	f000 fa36 	bl	8012fe0 <__multadd>
 8012b74:	9b00      	ldr	r3, [sp, #0]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	4605      	mov	r5, r0
 8012b7a:	dc67      	bgt.n	8012c4c <_dtoa_r+0x94c>
 8012b7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b7e:	2b02      	cmp	r3, #2
 8012b80:	dc41      	bgt.n	8012c06 <_dtoa_r+0x906>
 8012b82:	e063      	b.n	8012c4c <_dtoa_r+0x94c>
 8012b84:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012b86:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8012b8a:	e746      	b.n	8012a1a <_dtoa_r+0x71a>
 8012b8c:	9b07      	ldr	r3, [sp, #28]
 8012b8e:	1e5c      	subs	r4, r3, #1
 8012b90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012b92:	42a3      	cmp	r3, r4
 8012b94:	bfbf      	itttt	lt
 8012b96:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8012b98:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8012b9a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8012b9c:	1ae3      	sublt	r3, r4, r3
 8012b9e:	bfb4      	ite	lt
 8012ba0:	18d2      	addlt	r2, r2, r3
 8012ba2:	1b1c      	subge	r4, r3, r4
 8012ba4:	9b07      	ldr	r3, [sp, #28]
 8012ba6:	bfbc      	itt	lt
 8012ba8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8012baa:	2400      	movlt	r4, #0
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	bfb5      	itete	lt
 8012bb0:	eba8 0603 	sublt.w	r6, r8, r3
 8012bb4:	9b07      	ldrge	r3, [sp, #28]
 8012bb6:	2300      	movlt	r3, #0
 8012bb8:	4646      	movge	r6, r8
 8012bba:	e730      	b.n	8012a1e <_dtoa_r+0x71e>
 8012bbc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012bbe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8012bc0:	4646      	mov	r6, r8
 8012bc2:	e735      	b.n	8012a30 <_dtoa_r+0x730>
 8012bc4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012bc6:	e75c      	b.n	8012a82 <_dtoa_r+0x782>
 8012bc8:	2300      	movs	r3, #0
 8012bca:	e788      	b.n	8012ade <_dtoa_r+0x7de>
 8012bcc:	3fe00000 	.word	0x3fe00000
 8012bd0:	40240000 	.word	0x40240000
 8012bd4:	40140000 	.word	0x40140000
 8012bd8:	9b02      	ldr	r3, [sp, #8]
 8012bda:	e780      	b.n	8012ade <_dtoa_r+0x7de>
 8012bdc:	2300      	movs	r3, #0
 8012bde:	930a      	str	r3, [sp, #40]	@ 0x28
 8012be0:	e782      	b.n	8012ae8 <_dtoa_r+0x7e8>
 8012be2:	d099      	beq.n	8012b18 <_dtoa_r+0x818>
 8012be4:	9a08      	ldr	r2, [sp, #32]
 8012be6:	331c      	adds	r3, #28
 8012be8:	441a      	add	r2, r3
 8012bea:	4498      	add	r8, r3
 8012bec:	441e      	add	r6, r3
 8012bee:	9208      	str	r2, [sp, #32]
 8012bf0:	e792      	b.n	8012b18 <_dtoa_r+0x818>
 8012bf2:	4603      	mov	r3, r0
 8012bf4:	e7f6      	b.n	8012be4 <_dtoa_r+0x8e4>
 8012bf6:	9b07      	ldr	r3, [sp, #28]
 8012bf8:	9704      	str	r7, [sp, #16]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	dc20      	bgt.n	8012c40 <_dtoa_r+0x940>
 8012bfe:	9300      	str	r3, [sp, #0]
 8012c00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c02:	2b02      	cmp	r3, #2
 8012c04:	dd1e      	ble.n	8012c44 <_dtoa_r+0x944>
 8012c06:	9b00      	ldr	r3, [sp, #0]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	f47f aec0 	bne.w	801298e <_dtoa_r+0x68e>
 8012c0e:	4621      	mov	r1, r4
 8012c10:	2205      	movs	r2, #5
 8012c12:	4658      	mov	r0, fp
 8012c14:	f000 f9e4 	bl	8012fe0 <__multadd>
 8012c18:	4601      	mov	r1, r0
 8012c1a:	4604      	mov	r4, r0
 8012c1c:	4648      	mov	r0, r9
 8012c1e:	f000 fbf7 	bl	8013410 <__mcmp>
 8012c22:	2800      	cmp	r0, #0
 8012c24:	f77f aeb3 	ble.w	801298e <_dtoa_r+0x68e>
 8012c28:	4656      	mov	r6, sl
 8012c2a:	2331      	movs	r3, #49	@ 0x31
 8012c2c:	f806 3b01 	strb.w	r3, [r6], #1
 8012c30:	9b04      	ldr	r3, [sp, #16]
 8012c32:	3301      	adds	r3, #1
 8012c34:	9304      	str	r3, [sp, #16]
 8012c36:	e6ae      	b.n	8012996 <_dtoa_r+0x696>
 8012c38:	9c07      	ldr	r4, [sp, #28]
 8012c3a:	9704      	str	r7, [sp, #16]
 8012c3c:	4625      	mov	r5, r4
 8012c3e:	e7f3      	b.n	8012c28 <_dtoa_r+0x928>
 8012c40:	9b07      	ldr	r3, [sp, #28]
 8012c42:	9300      	str	r3, [sp, #0]
 8012c44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	f000 8104 	beq.w	8012e54 <_dtoa_r+0xb54>
 8012c4c:	2e00      	cmp	r6, #0
 8012c4e:	dd05      	ble.n	8012c5c <_dtoa_r+0x95c>
 8012c50:	4629      	mov	r1, r5
 8012c52:	4632      	mov	r2, r6
 8012c54:	4658      	mov	r0, fp
 8012c56:	f000 fb6f 	bl	8013338 <__lshift>
 8012c5a:	4605      	mov	r5, r0
 8012c5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d05a      	beq.n	8012d18 <_dtoa_r+0xa18>
 8012c62:	6869      	ldr	r1, [r5, #4]
 8012c64:	4658      	mov	r0, fp
 8012c66:	f000 f959 	bl	8012f1c <_Balloc>
 8012c6a:	4606      	mov	r6, r0
 8012c6c:	b928      	cbnz	r0, 8012c7a <_dtoa_r+0x97a>
 8012c6e:	4b84      	ldr	r3, [pc, #528]	@ (8012e80 <_dtoa_r+0xb80>)
 8012c70:	4602      	mov	r2, r0
 8012c72:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012c76:	f7ff bb5a 	b.w	801232e <_dtoa_r+0x2e>
 8012c7a:	692a      	ldr	r2, [r5, #16]
 8012c7c:	3202      	adds	r2, #2
 8012c7e:	0092      	lsls	r2, r2, #2
 8012c80:	f105 010c 	add.w	r1, r5, #12
 8012c84:	300c      	adds	r0, #12
 8012c86:	f7ff faa4 	bl	80121d2 <memcpy>
 8012c8a:	2201      	movs	r2, #1
 8012c8c:	4631      	mov	r1, r6
 8012c8e:	4658      	mov	r0, fp
 8012c90:	f000 fb52 	bl	8013338 <__lshift>
 8012c94:	f10a 0301 	add.w	r3, sl, #1
 8012c98:	9307      	str	r3, [sp, #28]
 8012c9a:	9b00      	ldr	r3, [sp, #0]
 8012c9c:	4453      	add	r3, sl
 8012c9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012ca0:	9b02      	ldr	r3, [sp, #8]
 8012ca2:	f003 0301 	and.w	r3, r3, #1
 8012ca6:	462f      	mov	r7, r5
 8012ca8:	930a      	str	r3, [sp, #40]	@ 0x28
 8012caa:	4605      	mov	r5, r0
 8012cac:	9b07      	ldr	r3, [sp, #28]
 8012cae:	4621      	mov	r1, r4
 8012cb0:	3b01      	subs	r3, #1
 8012cb2:	4648      	mov	r0, r9
 8012cb4:	9300      	str	r3, [sp, #0]
 8012cb6:	f7ff fa9a 	bl	80121ee <quorem>
 8012cba:	4639      	mov	r1, r7
 8012cbc:	9002      	str	r0, [sp, #8]
 8012cbe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012cc2:	4648      	mov	r0, r9
 8012cc4:	f000 fba4 	bl	8013410 <__mcmp>
 8012cc8:	462a      	mov	r2, r5
 8012cca:	9008      	str	r0, [sp, #32]
 8012ccc:	4621      	mov	r1, r4
 8012cce:	4658      	mov	r0, fp
 8012cd0:	f000 fbba 	bl	8013448 <__mdiff>
 8012cd4:	68c2      	ldr	r2, [r0, #12]
 8012cd6:	4606      	mov	r6, r0
 8012cd8:	bb02      	cbnz	r2, 8012d1c <_dtoa_r+0xa1c>
 8012cda:	4601      	mov	r1, r0
 8012cdc:	4648      	mov	r0, r9
 8012cde:	f000 fb97 	bl	8013410 <__mcmp>
 8012ce2:	4602      	mov	r2, r0
 8012ce4:	4631      	mov	r1, r6
 8012ce6:	4658      	mov	r0, fp
 8012ce8:	920e      	str	r2, [sp, #56]	@ 0x38
 8012cea:	f000 f957 	bl	8012f9c <_Bfree>
 8012cee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012cf0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012cf2:	9e07      	ldr	r6, [sp, #28]
 8012cf4:	ea43 0102 	orr.w	r1, r3, r2
 8012cf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012cfa:	4319      	orrs	r1, r3
 8012cfc:	d110      	bne.n	8012d20 <_dtoa_r+0xa20>
 8012cfe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012d02:	d029      	beq.n	8012d58 <_dtoa_r+0xa58>
 8012d04:	9b08      	ldr	r3, [sp, #32]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	dd02      	ble.n	8012d10 <_dtoa_r+0xa10>
 8012d0a:	9b02      	ldr	r3, [sp, #8]
 8012d0c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8012d10:	9b00      	ldr	r3, [sp, #0]
 8012d12:	f883 8000 	strb.w	r8, [r3]
 8012d16:	e63f      	b.n	8012998 <_dtoa_r+0x698>
 8012d18:	4628      	mov	r0, r5
 8012d1a:	e7bb      	b.n	8012c94 <_dtoa_r+0x994>
 8012d1c:	2201      	movs	r2, #1
 8012d1e:	e7e1      	b.n	8012ce4 <_dtoa_r+0x9e4>
 8012d20:	9b08      	ldr	r3, [sp, #32]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	db04      	blt.n	8012d30 <_dtoa_r+0xa30>
 8012d26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012d28:	430b      	orrs	r3, r1
 8012d2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012d2c:	430b      	orrs	r3, r1
 8012d2e:	d120      	bne.n	8012d72 <_dtoa_r+0xa72>
 8012d30:	2a00      	cmp	r2, #0
 8012d32:	dded      	ble.n	8012d10 <_dtoa_r+0xa10>
 8012d34:	4649      	mov	r1, r9
 8012d36:	2201      	movs	r2, #1
 8012d38:	4658      	mov	r0, fp
 8012d3a:	f000 fafd 	bl	8013338 <__lshift>
 8012d3e:	4621      	mov	r1, r4
 8012d40:	4681      	mov	r9, r0
 8012d42:	f000 fb65 	bl	8013410 <__mcmp>
 8012d46:	2800      	cmp	r0, #0
 8012d48:	dc03      	bgt.n	8012d52 <_dtoa_r+0xa52>
 8012d4a:	d1e1      	bne.n	8012d10 <_dtoa_r+0xa10>
 8012d4c:	f018 0f01 	tst.w	r8, #1
 8012d50:	d0de      	beq.n	8012d10 <_dtoa_r+0xa10>
 8012d52:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012d56:	d1d8      	bne.n	8012d0a <_dtoa_r+0xa0a>
 8012d58:	9a00      	ldr	r2, [sp, #0]
 8012d5a:	2339      	movs	r3, #57	@ 0x39
 8012d5c:	7013      	strb	r3, [r2, #0]
 8012d5e:	4633      	mov	r3, r6
 8012d60:	461e      	mov	r6, r3
 8012d62:	3b01      	subs	r3, #1
 8012d64:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012d68:	2a39      	cmp	r2, #57	@ 0x39
 8012d6a:	d052      	beq.n	8012e12 <_dtoa_r+0xb12>
 8012d6c:	3201      	adds	r2, #1
 8012d6e:	701a      	strb	r2, [r3, #0]
 8012d70:	e612      	b.n	8012998 <_dtoa_r+0x698>
 8012d72:	2a00      	cmp	r2, #0
 8012d74:	dd07      	ble.n	8012d86 <_dtoa_r+0xa86>
 8012d76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012d7a:	d0ed      	beq.n	8012d58 <_dtoa_r+0xa58>
 8012d7c:	9a00      	ldr	r2, [sp, #0]
 8012d7e:	f108 0301 	add.w	r3, r8, #1
 8012d82:	7013      	strb	r3, [r2, #0]
 8012d84:	e608      	b.n	8012998 <_dtoa_r+0x698>
 8012d86:	9b07      	ldr	r3, [sp, #28]
 8012d88:	9a07      	ldr	r2, [sp, #28]
 8012d8a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8012d8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012d90:	4293      	cmp	r3, r2
 8012d92:	d028      	beq.n	8012de6 <_dtoa_r+0xae6>
 8012d94:	4649      	mov	r1, r9
 8012d96:	2300      	movs	r3, #0
 8012d98:	220a      	movs	r2, #10
 8012d9a:	4658      	mov	r0, fp
 8012d9c:	f000 f920 	bl	8012fe0 <__multadd>
 8012da0:	42af      	cmp	r7, r5
 8012da2:	4681      	mov	r9, r0
 8012da4:	f04f 0300 	mov.w	r3, #0
 8012da8:	f04f 020a 	mov.w	r2, #10
 8012dac:	4639      	mov	r1, r7
 8012dae:	4658      	mov	r0, fp
 8012db0:	d107      	bne.n	8012dc2 <_dtoa_r+0xac2>
 8012db2:	f000 f915 	bl	8012fe0 <__multadd>
 8012db6:	4607      	mov	r7, r0
 8012db8:	4605      	mov	r5, r0
 8012dba:	9b07      	ldr	r3, [sp, #28]
 8012dbc:	3301      	adds	r3, #1
 8012dbe:	9307      	str	r3, [sp, #28]
 8012dc0:	e774      	b.n	8012cac <_dtoa_r+0x9ac>
 8012dc2:	f000 f90d 	bl	8012fe0 <__multadd>
 8012dc6:	4629      	mov	r1, r5
 8012dc8:	4607      	mov	r7, r0
 8012dca:	2300      	movs	r3, #0
 8012dcc:	220a      	movs	r2, #10
 8012dce:	4658      	mov	r0, fp
 8012dd0:	f000 f906 	bl	8012fe0 <__multadd>
 8012dd4:	4605      	mov	r5, r0
 8012dd6:	e7f0      	b.n	8012dba <_dtoa_r+0xaba>
 8012dd8:	9b00      	ldr	r3, [sp, #0]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	bfcc      	ite	gt
 8012dde:	461e      	movgt	r6, r3
 8012de0:	2601      	movle	r6, #1
 8012de2:	4456      	add	r6, sl
 8012de4:	2700      	movs	r7, #0
 8012de6:	4649      	mov	r1, r9
 8012de8:	2201      	movs	r2, #1
 8012dea:	4658      	mov	r0, fp
 8012dec:	f000 faa4 	bl	8013338 <__lshift>
 8012df0:	4621      	mov	r1, r4
 8012df2:	4681      	mov	r9, r0
 8012df4:	f000 fb0c 	bl	8013410 <__mcmp>
 8012df8:	2800      	cmp	r0, #0
 8012dfa:	dcb0      	bgt.n	8012d5e <_dtoa_r+0xa5e>
 8012dfc:	d102      	bne.n	8012e04 <_dtoa_r+0xb04>
 8012dfe:	f018 0f01 	tst.w	r8, #1
 8012e02:	d1ac      	bne.n	8012d5e <_dtoa_r+0xa5e>
 8012e04:	4633      	mov	r3, r6
 8012e06:	461e      	mov	r6, r3
 8012e08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012e0c:	2a30      	cmp	r2, #48	@ 0x30
 8012e0e:	d0fa      	beq.n	8012e06 <_dtoa_r+0xb06>
 8012e10:	e5c2      	b.n	8012998 <_dtoa_r+0x698>
 8012e12:	459a      	cmp	sl, r3
 8012e14:	d1a4      	bne.n	8012d60 <_dtoa_r+0xa60>
 8012e16:	9b04      	ldr	r3, [sp, #16]
 8012e18:	3301      	adds	r3, #1
 8012e1a:	9304      	str	r3, [sp, #16]
 8012e1c:	2331      	movs	r3, #49	@ 0x31
 8012e1e:	f88a 3000 	strb.w	r3, [sl]
 8012e22:	e5b9      	b.n	8012998 <_dtoa_r+0x698>
 8012e24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012e26:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8012e84 <_dtoa_r+0xb84>
 8012e2a:	b11b      	cbz	r3, 8012e34 <_dtoa_r+0xb34>
 8012e2c:	f10a 0308 	add.w	r3, sl, #8
 8012e30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012e32:	6013      	str	r3, [r2, #0]
 8012e34:	4650      	mov	r0, sl
 8012e36:	b019      	add	sp, #100	@ 0x64
 8012e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e3e:	2b01      	cmp	r3, #1
 8012e40:	f77f ae37 	ble.w	8012ab2 <_dtoa_r+0x7b2>
 8012e44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012e46:	930a      	str	r3, [sp, #40]	@ 0x28
 8012e48:	2001      	movs	r0, #1
 8012e4a:	e655      	b.n	8012af8 <_dtoa_r+0x7f8>
 8012e4c:	9b00      	ldr	r3, [sp, #0]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	f77f aed6 	ble.w	8012c00 <_dtoa_r+0x900>
 8012e54:	4656      	mov	r6, sl
 8012e56:	4621      	mov	r1, r4
 8012e58:	4648      	mov	r0, r9
 8012e5a:	f7ff f9c8 	bl	80121ee <quorem>
 8012e5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012e62:	f806 8b01 	strb.w	r8, [r6], #1
 8012e66:	9b00      	ldr	r3, [sp, #0]
 8012e68:	eba6 020a 	sub.w	r2, r6, sl
 8012e6c:	4293      	cmp	r3, r2
 8012e6e:	ddb3      	ble.n	8012dd8 <_dtoa_r+0xad8>
 8012e70:	4649      	mov	r1, r9
 8012e72:	2300      	movs	r3, #0
 8012e74:	220a      	movs	r2, #10
 8012e76:	4658      	mov	r0, fp
 8012e78:	f000 f8b2 	bl	8012fe0 <__multadd>
 8012e7c:	4681      	mov	r9, r0
 8012e7e:	e7ea      	b.n	8012e56 <_dtoa_r+0xb56>
 8012e80:	080153fe 	.word	0x080153fe
 8012e84:	08015382 	.word	0x08015382

08012e88 <_free_r>:
 8012e88:	b538      	push	{r3, r4, r5, lr}
 8012e8a:	4605      	mov	r5, r0
 8012e8c:	2900      	cmp	r1, #0
 8012e8e:	d041      	beq.n	8012f14 <_free_r+0x8c>
 8012e90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012e94:	1f0c      	subs	r4, r1, #4
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	bfb8      	it	lt
 8012e9a:	18e4      	addlt	r4, r4, r3
 8012e9c:	f7fe fb4e 	bl	801153c <__malloc_lock>
 8012ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8012f18 <_free_r+0x90>)
 8012ea2:	6813      	ldr	r3, [r2, #0]
 8012ea4:	b933      	cbnz	r3, 8012eb4 <_free_r+0x2c>
 8012ea6:	6063      	str	r3, [r4, #4]
 8012ea8:	6014      	str	r4, [r2, #0]
 8012eaa:	4628      	mov	r0, r5
 8012eac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012eb0:	f7fe bb4a 	b.w	8011548 <__malloc_unlock>
 8012eb4:	42a3      	cmp	r3, r4
 8012eb6:	d908      	bls.n	8012eca <_free_r+0x42>
 8012eb8:	6820      	ldr	r0, [r4, #0]
 8012eba:	1821      	adds	r1, r4, r0
 8012ebc:	428b      	cmp	r3, r1
 8012ebe:	bf01      	itttt	eq
 8012ec0:	6819      	ldreq	r1, [r3, #0]
 8012ec2:	685b      	ldreq	r3, [r3, #4]
 8012ec4:	1809      	addeq	r1, r1, r0
 8012ec6:	6021      	streq	r1, [r4, #0]
 8012ec8:	e7ed      	b.n	8012ea6 <_free_r+0x1e>
 8012eca:	461a      	mov	r2, r3
 8012ecc:	685b      	ldr	r3, [r3, #4]
 8012ece:	b10b      	cbz	r3, 8012ed4 <_free_r+0x4c>
 8012ed0:	42a3      	cmp	r3, r4
 8012ed2:	d9fa      	bls.n	8012eca <_free_r+0x42>
 8012ed4:	6811      	ldr	r1, [r2, #0]
 8012ed6:	1850      	adds	r0, r2, r1
 8012ed8:	42a0      	cmp	r0, r4
 8012eda:	d10b      	bne.n	8012ef4 <_free_r+0x6c>
 8012edc:	6820      	ldr	r0, [r4, #0]
 8012ede:	4401      	add	r1, r0
 8012ee0:	1850      	adds	r0, r2, r1
 8012ee2:	4283      	cmp	r3, r0
 8012ee4:	6011      	str	r1, [r2, #0]
 8012ee6:	d1e0      	bne.n	8012eaa <_free_r+0x22>
 8012ee8:	6818      	ldr	r0, [r3, #0]
 8012eea:	685b      	ldr	r3, [r3, #4]
 8012eec:	6053      	str	r3, [r2, #4]
 8012eee:	4408      	add	r0, r1
 8012ef0:	6010      	str	r0, [r2, #0]
 8012ef2:	e7da      	b.n	8012eaa <_free_r+0x22>
 8012ef4:	d902      	bls.n	8012efc <_free_r+0x74>
 8012ef6:	230c      	movs	r3, #12
 8012ef8:	602b      	str	r3, [r5, #0]
 8012efa:	e7d6      	b.n	8012eaa <_free_r+0x22>
 8012efc:	6820      	ldr	r0, [r4, #0]
 8012efe:	1821      	adds	r1, r4, r0
 8012f00:	428b      	cmp	r3, r1
 8012f02:	bf04      	itt	eq
 8012f04:	6819      	ldreq	r1, [r3, #0]
 8012f06:	685b      	ldreq	r3, [r3, #4]
 8012f08:	6063      	str	r3, [r4, #4]
 8012f0a:	bf04      	itt	eq
 8012f0c:	1809      	addeq	r1, r1, r0
 8012f0e:	6021      	streq	r1, [r4, #0]
 8012f10:	6054      	str	r4, [r2, #4]
 8012f12:	e7ca      	b.n	8012eaa <_free_r+0x22>
 8012f14:	bd38      	pop	{r3, r4, r5, pc}
 8012f16:	bf00      	nop
 8012f18:	200003f4 	.word	0x200003f4

08012f1c <_Balloc>:
 8012f1c:	b570      	push	{r4, r5, r6, lr}
 8012f1e:	69c6      	ldr	r6, [r0, #28]
 8012f20:	4604      	mov	r4, r0
 8012f22:	460d      	mov	r5, r1
 8012f24:	b976      	cbnz	r6, 8012f44 <_Balloc+0x28>
 8012f26:	2010      	movs	r0, #16
 8012f28:	f7fe fa56 	bl	80113d8 <malloc>
 8012f2c:	4602      	mov	r2, r0
 8012f2e:	61e0      	str	r0, [r4, #28]
 8012f30:	b920      	cbnz	r0, 8012f3c <_Balloc+0x20>
 8012f32:	4b18      	ldr	r3, [pc, #96]	@ (8012f94 <_Balloc+0x78>)
 8012f34:	4818      	ldr	r0, [pc, #96]	@ (8012f98 <_Balloc+0x7c>)
 8012f36:	216b      	movs	r1, #107	@ 0x6b
 8012f38:	f000 fc1e 	bl	8013778 <__assert_func>
 8012f3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012f40:	6006      	str	r6, [r0, #0]
 8012f42:	60c6      	str	r6, [r0, #12]
 8012f44:	69e6      	ldr	r6, [r4, #28]
 8012f46:	68f3      	ldr	r3, [r6, #12]
 8012f48:	b183      	cbz	r3, 8012f6c <_Balloc+0x50>
 8012f4a:	69e3      	ldr	r3, [r4, #28]
 8012f4c:	68db      	ldr	r3, [r3, #12]
 8012f4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012f52:	b9b8      	cbnz	r0, 8012f84 <_Balloc+0x68>
 8012f54:	2101      	movs	r1, #1
 8012f56:	fa01 f605 	lsl.w	r6, r1, r5
 8012f5a:	1d72      	adds	r2, r6, #5
 8012f5c:	0092      	lsls	r2, r2, #2
 8012f5e:	4620      	mov	r0, r4
 8012f60:	f000 fc28 	bl	80137b4 <_calloc_r>
 8012f64:	b160      	cbz	r0, 8012f80 <_Balloc+0x64>
 8012f66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012f6a:	e00e      	b.n	8012f8a <_Balloc+0x6e>
 8012f6c:	2221      	movs	r2, #33	@ 0x21
 8012f6e:	2104      	movs	r1, #4
 8012f70:	4620      	mov	r0, r4
 8012f72:	f000 fc1f 	bl	80137b4 <_calloc_r>
 8012f76:	69e3      	ldr	r3, [r4, #28]
 8012f78:	60f0      	str	r0, [r6, #12]
 8012f7a:	68db      	ldr	r3, [r3, #12]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d1e4      	bne.n	8012f4a <_Balloc+0x2e>
 8012f80:	2000      	movs	r0, #0
 8012f82:	bd70      	pop	{r4, r5, r6, pc}
 8012f84:	6802      	ldr	r2, [r0, #0]
 8012f86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012f90:	e7f7      	b.n	8012f82 <_Balloc+0x66>
 8012f92:	bf00      	nop
 8012f94:	0801538f 	.word	0x0801538f
 8012f98:	0801540f 	.word	0x0801540f

08012f9c <_Bfree>:
 8012f9c:	b570      	push	{r4, r5, r6, lr}
 8012f9e:	69c6      	ldr	r6, [r0, #28]
 8012fa0:	4605      	mov	r5, r0
 8012fa2:	460c      	mov	r4, r1
 8012fa4:	b976      	cbnz	r6, 8012fc4 <_Bfree+0x28>
 8012fa6:	2010      	movs	r0, #16
 8012fa8:	f7fe fa16 	bl	80113d8 <malloc>
 8012fac:	4602      	mov	r2, r0
 8012fae:	61e8      	str	r0, [r5, #28]
 8012fb0:	b920      	cbnz	r0, 8012fbc <_Bfree+0x20>
 8012fb2:	4b09      	ldr	r3, [pc, #36]	@ (8012fd8 <_Bfree+0x3c>)
 8012fb4:	4809      	ldr	r0, [pc, #36]	@ (8012fdc <_Bfree+0x40>)
 8012fb6:	218f      	movs	r1, #143	@ 0x8f
 8012fb8:	f000 fbde 	bl	8013778 <__assert_func>
 8012fbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012fc0:	6006      	str	r6, [r0, #0]
 8012fc2:	60c6      	str	r6, [r0, #12]
 8012fc4:	b13c      	cbz	r4, 8012fd6 <_Bfree+0x3a>
 8012fc6:	69eb      	ldr	r3, [r5, #28]
 8012fc8:	6862      	ldr	r2, [r4, #4]
 8012fca:	68db      	ldr	r3, [r3, #12]
 8012fcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012fd0:	6021      	str	r1, [r4, #0]
 8012fd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012fd6:	bd70      	pop	{r4, r5, r6, pc}
 8012fd8:	0801538f 	.word	0x0801538f
 8012fdc:	0801540f 	.word	0x0801540f

08012fe0 <__multadd>:
 8012fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fe4:	690d      	ldr	r5, [r1, #16]
 8012fe6:	4607      	mov	r7, r0
 8012fe8:	460c      	mov	r4, r1
 8012fea:	461e      	mov	r6, r3
 8012fec:	f101 0c14 	add.w	ip, r1, #20
 8012ff0:	2000      	movs	r0, #0
 8012ff2:	f8dc 3000 	ldr.w	r3, [ip]
 8012ff6:	b299      	uxth	r1, r3
 8012ff8:	fb02 6101 	mla	r1, r2, r1, r6
 8012ffc:	0c1e      	lsrs	r6, r3, #16
 8012ffe:	0c0b      	lsrs	r3, r1, #16
 8013000:	fb02 3306 	mla	r3, r2, r6, r3
 8013004:	b289      	uxth	r1, r1
 8013006:	3001      	adds	r0, #1
 8013008:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801300c:	4285      	cmp	r5, r0
 801300e:	f84c 1b04 	str.w	r1, [ip], #4
 8013012:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013016:	dcec      	bgt.n	8012ff2 <__multadd+0x12>
 8013018:	b30e      	cbz	r6, 801305e <__multadd+0x7e>
 801301a:	68a3      	ldr	r3, [r4, #8]
 801301c:	42ab      	cmp	r3, r5
 801301e:	dc19      	bgt.n	8013054 <__multadd+0x74>
 8013020:	6861      	ldr	r1, [r4, #4]
 8013022:	4638      	mov	r0, r7
 8013024:	3101      	adds	r1, #1
 8013026:	f7ff ff79 	bl	8012f1c <_Balloc>
 801302a:	4680      	mov	r8, r0
 801302c:	b928      	cbnz	r0, 801303a <__multadd+0x5a>
 801302e:	4602      	mov	r2, r0
 8013030:	4b0c      	ldr	r3, [pc, #48]	@ (8013064 <__multadd+0x84>)
 8013032:	480d      	ldr	r0, [pc, #52]	@ (8013068 <__multadd+0x88>)
 8013034:	21ba      	movs	r1, #186	@ 0xba
 8013036:	f000 fb9f 	bl	8013778 <__assert_func>
 801303a:	6922      	ldr	r2, [r4, #16]
 801303c:	3202      	adds	r2, #2
 801303e:	f104 010c 	add.w	r1, r4, #12
 8013042:	0092      	lsls	r2, r2, #2
 8013044:	300c      	adds	r0, #12
 8013046:	f7ff f8c4 	bl	80121d2 <memcpy>
 801304a:	4621      	mov	r1, r4
 801304c:	4638      	mov	r0, r7
 801304e:	f7ff ffa5 	bl	8012f9c <_Bfree>
 8013052:	4644      	mov	r4, r8
 8013054:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013058:	3501      	adds	r5, #1
 801305a:	615e      	str	r6, [r3, #20]
 801305c:	6125      	str	r5, [r4, #16]
 801305e:	4620      	mov	r0, r4
 8013060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013064:	080153fe 	.word	0x080153fe
 8013068:	0801540f 	.word	0x0801540f

0801306c <__hi0bits>:
 801306c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013070:	4603      	mov	r3, r0
 8013072:	bf36      	itet	cc
 8013074:	0403      	lslcc	r3, r0, #16
 8013076:	2000      	movcs	r0, #0
 8013078:	2010      	movcc	r0, #16
 801307a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801307e:	bf3c      	itt	cc
 8013080:	021b      	lslcc	r3, r3, #8
 8013082:	3008      	addcc	r0, #8
 8013084:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013088:	bf3c      	itt	cc
 801308a:	011b      	lslcc	r3, r3, #4
 801308c:	3004      	addcc	r0, #4
 801308e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013092:	bf3c      	itt	cc
 8013094:	009b      	lslcc	r3, r3, #2
 8013096:	3002      	addcc	r0, #2
 8013098:	2b00      	cmp	r3, #0
 801309a:	db05      	blt.n	80130a8 <__hi0bits+0x3c>
 801309c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80130a0:	f100 0001 	add.w	r0, r0, #1
 80130a4:	bf08      	it	eq
 80130a6:	2020      	moveq	r0, #32
 80130a8:	4770      	bx	lr

080130aa <__lo0bits>:
 80130aa:	6803      	ldr	r3, [r0, #0]
 80130ac:	4602      	mov	r2, r0
 80130ae:	f013 0007 	ands.w	r0, r3, #7
 80130b2:	d00b      	beq.n	80130cc <__lo0bits+0x22>
 80130b4:	07d9      	lsls	r1, r3, #31
 80130b6:	d421      	bmi.n	80130fc <__lo0bits+0x52>
 80130b8:	0798      	lsls	r0, r3, #30
 80130ba:	bf49      	itett	mi
 80130bc:	085b      	lsrmi	r3, r3, #1
 80130be:	089b      	lsrpl	r3, r3, #2
 80130c0:	2001      	movmi	r0, #1
 80130c2:	6013      	strmi	r3, [r2, #0]
 80130c4:	bf5c      	itt	pl
 80130c6:	6013      	strpl	r3, [r2, #0]
 80130c8:	2002      	movpl	r0, #2
 80130ca:	4770      	bx	lr
 80130cc:	b299      	uxth	r1, r3
 80130ce:	b909      	cbnz	r1, 80130d4 <__lo0bits+0x2a>
 80130d0:	0c1b      	lsrs	r3, r3, #16
 80130d2:	2010      	movs	r0, #16
 80130d4:	b2d9      	uxtb	r1, r3
 80130d6:	b909      	cbnz	r1, 80130dc <__lo0bits+0x32>
 80130d8:	3008      	adds	r0, #8
 80130da:	0a1b      	lsrs	r3, r3, #8
 80130dc:	0719      	lsls	r1, r3, #28
 80130de:	bf04      	itt	eq
 80130e0:	091b      	lsreq	r3, r3, #4
 80130e2:	3004      	addeq	r0, #4
 80130e4:	0799      	lsls	r1, r3, #30
 80130e6:	bf04      	itt	eq
 80130e8:	089b      	lsreq	r3, r3, #2
 80130ea:	3002      	addeq	r0, #2
 80130ec:	07d9      	lsls	r1, r3, #31
 80130ee:	d403      	bmi.n	80130f8 <__lo0bits+0x4e>
 80130f0:	085b      	lsrs	r3, r3, #1
 80130f2:	f100 0001 	add.w	r0, r0, #1
 80130f6:	d003      	beq.n	8013100 <__lo0bits+0x56>
 80130f8:	6013      	str	r3, [r2, #0]
 80130fa:	4770      	bx	lr
 80130fc:	2000      	movs	r0, #0
 80130fe:	4770      	bx	lr
 8013100:	2020      	movs	r0, #32
 8013102:	4770      	bx	lr

08013104 <__i2b>:
 8013104:	b510      	push	{r4, lr}
 8013106:	460c      	mov	r4, r1
 8013108:	2101      	movs	r1, #1
 801310a:	f7ff ff07 	bl	8012f1c <_Balloc>
 801310e:	4602      	mov	r2, r0
 8013110:	b928      	cbnz	r0, 801311e <__i2b+0x1a>
 8013112:	4b05      	ldr	r3, [pc, #20]	@ (8013128 <__i2b+0x24>)
 8013114:	4805      	ldr	r0, [pc, #20]	@ (801312c <__i2b+0x28>)
 8013116:	f240 1145 	movw	r1, #325	@ 0x145
 801311a:	f000 fb2d 	bl	8013778 <__assert_func>
 801311e:	2301      	movs	r3, #1
 8013120:	6144      	str	r4, [r0, #20]
 8013122:	6103      	str	r3, [r0, #16]
 8013124:	bd10      	pop	{r4, pc}
 8013126:	bf00      	nop
 8013128:	080153fe 	.word	0x080153fe
 801312c:	0801540f 	.word	0x0801540f

08013130 <__multiply>:
 8013130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013134:	4614      	mov	r4, r2
 8013136:	690a      	ldr	r2, [r1, #16]
 8013138:	6923      	ldr	r3, [r4, #16]
 801313a:	429a      	cmp	r2, r3
 801313c:	bfa8      	it	ge
 801313e:	4623      	movge	r3, r4
 8013140:	460f      	mov	r7, r1
 8013142:	bfa4      	itt	ge
 8013144:	460c      	movge	r4, r1
 8013146:	461f      	movge	r7, r3
 8013148:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801314c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013150:	68a3      	ldr	r3, [r4, #8]
 8013152:	6861      	ldr	r1, [r4, #4]
 8013154:	eb0a 0609 	add.w	r6, sl, r9
 8013158:	42b3      	cmp	r3, r6
 801315a:	b085      	sub	sp, #20
 801315c:	bfb8      	it	lt
 801315e:	3101      	addlt	r1, #1
 8013160:	f7ff fedc 	bl	8012f1c <_Balloc>
 8013164:	b930      	cbnz	r0, 8013174 <__multiply+0x44>
 8013166:	4602      	mov	r2, r0
 8013168:	4b44      	ldr	r3, [pc, #272]	@ (801327c <__multiply+0x14c>)
 801316a:	4845      	ldr	r0, [pc, #276]	@ (8013280 <__multiply+0x150>)
 801316c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013170:	f000 fb02 	bl	8013778 <__assert_func>
 8013174:	f100 0514 	add.w	r5, r0, #20
 8013178:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801317c:	462b      	mov	r3, r5
 801317e:	2200      	movs	r2, #0
 8013180:	4543      	cmp	r3, r8
 8013182:	d321      	bcc.n	80131c8 <__multiply+0x98>
 8013184:	f107 0114 	add.w	r1, r7, #20
 8013188:	f104 0214 	add.w	r2, r4, #20
 801318c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013190:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013194:	9302      	str	r3, [sp, #8]
 8013196:	1b13      	subs	r3, r2, r4
 8013198:	3b15      	subs	r3, #21
 801319a:	f023 0303 	bic.w	r3, r3, #3
 801319e:	3304      	adds	r3, #4
 80131a0:	f104 0715 	add.w	r7, r4, #21
 80131a4:	42ba      	cmp	r2, r7
 80131a6:	bf38      	it	cc
 80131a8:	2304      	movcc	r3, #4
 80131aa:	9301      	str	r3, [sp, #4]
 80131ac:	9b02      	ldr	r3, [sp, #8]
 80131ae:	9103      	str	r1, [sp, #12]
 80131b0:	428b      	cmp	r3, r1
 80131b2:	d80c      	bhi.n	80131ce <__multiply+0x9e>
 80131b4:	2e00      	cmp	r6, #0
 80131b6:	dd03      	ble.n	80131c0 <__multiply+0x90>
 80131b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d05b      	beq.n	8013278 <__multiply+0x148>
 80131c0:	6106      	str	r6, [r0, #16]
 80131c2:	b005      	add	sp, #20
 80131c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131c8:	f843 2b04 	str.w	r2, [r3], #4
 80131cc:	e7d8      	b.n	8013180 <__multiply+0x50>
 80131ce:	f8b1 a000 	ldrh.w	sl, [r1]
 80131d2:	f1ba 0f00 	cmp.w	sl, #0
 80131d6:	d024      	beq.n	8013222 <__multiply+0xf2>
 80131d8:	f104 0e14 	add.w	lr, r4, #20
 80131dc:	46a9      	mov	r9, r5
 80131de:	f04f 0c00 	mov.w	ip, #0
 80131e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80131e6:	f8d9 3000 	ldr.w	r3, [r9]
 80131ea:	fa1f fb87 	uxth.w	fp, r7
 80131ee:	b29b      	uxth	r3, r3
 80131f0:	fb0a 330b 	mla	r3, sl, fp, r3
 80131f4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80131f8:	f8d9 7000 	ldr.w	r7, [r9]
 80131fc:	4463      	add	r3, ip
 80131fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013202:	fb0a c70b 	mla	r7, sl, fp, ip
 8013206:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801320a:	b29b      	uxth	r3, r3
 801320c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013210:	4572      	cmp	r2, lr
 8013212:	f849 3b04 	str.w	r3, [r9], #4
 8013216:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801321a:	d8e2      	bhi.n	80131e2 <__multiply+0xb2>
 801321c:	9b01      	ldr	r3, [sp, #4]
 801321e:	f845 c003 	str.w	ip, [r5, r3]
 8013222:	9b03      	ldr	r3, [sp, #12]
 8013224:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013228:	3104      	adds	r1, #4
 801322a:	f1b9 0f00 	cmp.w	r9, #0
 801322e:	d021      	beq.n	8013274 <__multiply+0x144>
 8013230:	682b      	ldr	r3, [r5, #0]
 8013232:	f104 0c14 	add.w	ip, r4, #20
 8013236:	46ae      	mov	lr, r5
 8013238:	f04f 0a00 	mov.w	sl, #0
 801323c:	f8bc b000 	ldrh.w	fp, [ip]
 8013240:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013244:	fb09 770b 	mla	r7, r9, fp, r7
 8013248:	4457      	add	r7, sl
 801324a:	b29b      	uxth	r3, r3
 801324c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013250:	f84e 3b04 	str.w	r3, [lr], #4
 8013254:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013258:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801325c:	f8be 3000 	ldrh.w	r3, [lr]
 8013260:	fb09 330a 	mla	r3, r9, sl, r3
 8013264:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013268:	4562      	cmp	r2, ip
 801326a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801326e:	d8e5      	bhi.n	801323c <__multiply+0x10c>
 8013270:	9f01      	ldr	r7, [sp, #4]
 8013272:	51eb      	str	r3, [r5, r7]
 8013274:	3504      	adds	r5, #4
 8013276:	e799      	b.n	80131ac <__multiply+0x7c>
 8013278:	3e01      	subs	r6, #1
 801327a:	e79b      	b.n	80131b4 <__multiply+0x84>
 801327c:	080153fe 	.word	0x080153fe
 8013280:	0801540f 	.word	0x0801540f

08013284 <__pow5mult>:
 8013284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013288:	4615      	mov	r5, r2
 801328a:	f012 0203 	ands.w	r2, r2, #3
 801328e:	4607      	mov	r7, r0
 8013290:	460e      	mov	r6, r1
 8013292:	d007      	beq.n	80132a4 <__pow5mult+0x20>
 8013294:	4c25      	ldr	r4, [pc, #148]	@ (801332c <__pow5mult+0xa8>)
 8013296:	3a01      	subs	r2, #1
 8013298:	2300      	movs	r3, #0
 801329a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801329e:	f7ff fe9f 	bl	8012fe0 <__multadd>
 80132a2:	4606      	mov	r6, r0
 80132a4:	10ad      	asrs	r5, r5, #2
 80132a6:	d03d      	beq.n	8013324 <__pow5mult+0xa0>
 80132a8:	69fc      	ldr	r4, [r7, #28]
 80132aa:	b97c      	cbnz	r4, 80132cc <__pow5mult+0x48>
 80132ac:	2010      	movs	r0, #16
 80132ae:	f7fe f893 	bl	80113d8 <malloc>
 80132b2:	4602      	mov	r2, r0
 80132b4:	61f8      	str	r0, [r7, #28]
 80132b6:	b928      	cbnz	r0, 80132c4 <__pow5mult+0x40>
 80132b8:	4b1d      	ldr	r3, [pc, #116]	@ (8013330 <__pow5mult+0xac>)
 80132ba:	481e      	ldr	r0, [pc, #120]	@ (8013334 <__pow5mult+0xb0>)
 80132bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80132c0:	f000 fa5a 	bl	8013778 <__assert_func>
 80132c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80132c8:	6004      	str	r4, [r0, #0]
 80132ca:	60c4      	str	r4, [r0, #12]
 80132cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80132d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80132d4:	b94c      	cbnz	r4, 80132ea <__pow5mult+0x66>
 80132d6:	f240 2171 	movw	r1, #625	@ 0x271
 80132da:	4638      	mov	r0, r7
 80132dc:	f7ff ff12 	bl	8013104 <__i2b>
 80132e0:	2300      	movs	r3, #0
 80132e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80132e6:	4604      	mov	r4, r0
 80132e8:	6003      	str	r3, [r0, #0]
 80132ea:	f04f 0900 	mov.w	r9, #0
 80132ee:	07eb      	lsls	r3, r5, #31
 80132f0:	d50a      	bpl.n	8013308 <__pow5mult+0x84>
 80132f2:	4631      	mov	r1, r6
 80132f4:	4622      	mov	r2, r4
 80132f6:	4638      	mov	r0, r7
 80132f8:	f7ff ff1a 	bl	8013130 <__multiply>
 80132fc:	4631      	mov	r1, r6
 80132fe:	4680      	mov	r8, r0
 8013300:	4638      	mov	r0, r7
 8013302:	f7ff fe4b 	bl	8012f9c <_Bfree>
 8013306:	4646      	mov	r6, r8
 8013308:	106d      	asrs	r5, r5, #1
 801330a:	d00b      	beq.n	8013324 <__pow5mult+0xa0>
 801330c:	6820      	ldr	r0, [r4, #0]
 801330e:	b938      	cbnz	r0, 8013320 <__pow5mult+0x9c>
 8013310:	4622      	mov	r2, r4
 8013312:	4621      	mov	r1, r4
 8013314:	4638      	mov	r0, r7
 8013316:	f7ff ff0b 	bl	8013130 <__multiply>
 801331a:	6020      	str	r0, [r4, #0]
 801331c:	f8c0 9000 	str.w	r9, [r0]
 8013320:	4604      	mov	r4, r0
 8013322:	e7e4      	b.n	80132ee <__pow5mult+0x6a>
 8013324:	4630      	mov	r0, r6
 8013326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801332a:	bf00      	nop
 801332c:	08015468 	.word	0x08015468
 8013330:	0801538f 	.word	0x0801538f
 8013334:	0801540f 	.word	0x0801540f

08013338 <__lshift>:
 8013338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801333c:	460c      	mov	r4, r1
 801333e:	6849      	ldr	r1, [r1, #4]
 8013340:	6923      	ldr	r3, [r4, #16]
 8013342:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013346:	68a3      	ldr	r3, [r4, #8]
 8013348:	4607      	mov	r7, r0
 801334a:	4691      	mov	r9, r2
 801334c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013350:	f108 0601 	add.w	r6, r8, #1
 8013354:	42b3      	cmp	r3, r6
 8013356:	db0b      	blt.n	8013370 <__lshift+0x38>
 8013358:	4638      	mov	r0, r7
 801335a:	f7ff fddf 	bl	8012f1c <_Balloc>
 801335e:	4605      	mov	r5, r0
 8013360:	b948      	cbnz	r0, 8013376 <__lshift+0x3e>
 8013362:	4602      	mov	r2, r0
 8013364:	4b28      	ldr	r3, [pc, #160]	@ (8013408 <__lshift+0xd0>)
 8013366:	4829      	ldr	r0, [pc, #164]	@ (801340c <__lshift+0xd4>)
 8013368:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801336c:	f000 fa04 	bl	8013778 <__assert_func>
 8013370:	3101      	adds	r1, #1
 8013372:	005b      	lsls	r3, r3, #1
 8013374:	e7ee      	b.n	8013354 <__lshift+0x1c>
 8013376:	2300      	movs	r3, #0
 8013378:	f100 0114 	add.w	r1, r0, #20
 801337c:	f100 0210 	add.w	r2, r0, #16
 8013380:	4618      	mov	r0, r3
 8013382:	4553      	cmp	r3, sl
 8013384:	db33      	blt.n	80133ee <__lshift+0xb6>
 8013386:	6920      	ldr	r0, [r4, #16]
 8013388:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801338c:	f104 0314 	add.w	r3, r4, #20
 8013390:	f019 091f 	ands.w	r9, r9, #31
 8013394:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013398:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801339c:	d02b      	beq.n	80133f6 <__lshift+0xbe>
 801339e:	f1c9 0e20 	rsb	lr, r9, #32
 80133a2:	468a      	mov	sl, r1
 80133a4:	2200      	movs	r2, #0
 80133a6:	6818      	ldr	r0, [r3, #0]
 80133a8:	fa00 f009 	lsl.w	r0, r0, r9
 80133ac:	4310      	orrs	r0, r2
 80133ae:	f84a 0b04 	str.w	r0, [sl], #4
 80133b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80133b6:	459c      	cmp	ip, r3
 80133b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80133bc:	d8f3      	bhi.n	80133a6 <__lshift+0x6e>
 80133be:	ebac 0304 	sub.w	r3, ip, r4
 80133c2:	3b15      	subs	r3, #21
 80133c4:	f023 0303 	bic.w	r3, r3, #3
 80133c8:	3304      	adds	r3, #4
 80133ca:	f104 0015 	add.w	r0, r4, #21
 80133ce:	4584      	cmp	ip, r0
 80133d0:	bf38      	it	cc
 80133d2:	2304      	movcc	r3, #4
 80133d4:	50ca      	str	r2, [r1, r3]
 80133d6:	b10a      	cbz	r2, 80133dc <__lshift+0xa4>
 80133d8:	f108 0602 	add.w	r6, r8, #2
 80133dc:	3e01      	subs	r6, #1
 80133de:	4638      	mov	r0, r7
 80133e0:	612e      	str	r6, [r5, #16]
 80133e2:	4621      	mov	r1, r4
 80133e4:	f7ff fdda 	bl	8012f9c <_Bfree>
 80133e8:	4628      	mov	r0, r5
 80133ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80133f2:	3301      	adds	r3, #1
 80133f4:	e7c5      	b.n	8013382 <__lshift+0x4a>
 80133f6:	3904      	subs	r1, #4
 80133f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80133fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8013400:	459c      	cmp	ip, r3
 8013402:	d8f9      	bhi.n	80133f8 <__lshift+0xc0>
 8013404:	e7ea      	b.n	80133dc <__lshift+0xa4>
 8013406:	bf00      	nop
 8013408:	080153fe 	.word	0x080153fe
 801340c:	0801540f 	.word	0x0801540f

08013410 <__mcmp>:
 8013410:	690a      	ldr	r2, [r1, #16]
 8013412:	4603      	mov	r3, r0
 8013414:	6900      	ldr	r0, [r0, #16]
 8013416:	1a80      	subs	r0, r0, r2
 8013418:	b530      	push	{r4, r5, lr}
 801341a:	d10e      	bne.n	801343a <__mcmp+0x2a>
 801341c:	3314      	adds	r3, #20
 801341e:	3114      	adds	r1, #20
 8013420:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013424:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013428:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801342c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013430:	4295      	cmp	r5, r2
 8013432:	d003      	beq.n	801343c <__mcmp+0x2c>
 8013434:	d205      	bcs.n	8013442 <__mcmp+0x32>
 8013436:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801343a:	bd30      	pop	{r4, r5, pc}
 801343c:	42a3      	cmp	r3, r4
 801343e:	d3f3      	bcc.n	8013428 <__mcmp+0x18>
 8013440:	e7fb      	b.n	801343a <__mcmp+0x2a>
 8013442:	2001      	movs	r0, #1
 8013444:	e7f9      	b.n	801343a <__mcmp+0x2a>
	...

08013448 <__mdiff>:
 8013448:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801344c:	4689      	mov	r9, r1
 801344e:	4606      	mov	r6, r0
 8013450:	4611      	mov	r1, r2
 8013452:	4648      	mov	r0, r9
 8013454:	4614      	mov	r4, r2
 8013456:	f7ff ffdb 	bl	8013410 <__mcmp>
 801345a:	1e05      	subs	r5, r0, #0
 801345c:	d112      	bne.n	8013484 <__mdiff+0x3c>
 801345e:	4629      	mov	r1, r5
 8013460:	4630      	mov	r0, r6
 8013462:	f7ff fd5b 	bl	8012f1c <_Balloc>
 8013466:	4602      	mov	r2, r0
 8013468:	b928      	cbnz	r0, 8013476 <__mdiff+0x2e>
 801346a:	4b3f      	ldr	r3, [pc, #252]	@ (8013568 <__mdiff+0x120>)
 801346c:	f240 2137 	movw	r1, #567	@ 0x237
 8013470:	483e      	ldr	r0, [pc, #248]	@ (801356c <__mdiff+0x124>)
 8013472:	f000 f981 	bl	8013778 <__assert_func>
 8013476:	2301      	movs	r3, #1
 8013478:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801347c:	4610      	mov	r0, r2
 801347e:	b003      	add	sp, #12
 8013480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013484:	bfbc      	itt	lt
 8013486:	464b      	movlt	r3, r9
 8013488:	46a1      	movlt	r9, r4
 801348a:	4630      	mov	r0, r6
 801348c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013490:	bfba      	itte	lt
 8013492:	461c      	movlt	r4, r3
 8013494:	2501      	movlt	r5, #1
 8013496:	2500      	movge	r5, #0
 8013498:	f7ff fd40 	bl	8012f1c <_Balloc>
 801349c:	4602      	mov	r2, r0
 801349e:	b918      	cbnz	r0, 80134a8 <__mdiff+0x60>
 80134a0:	4b31      	ldr	r3, [pc, #196]	@ (8013568 <__mdiff+0x120>)
 80134a2:	f240 2145 	movw	r1, #581	@ 0x245
 80134a6:	e7e3      	b.n	8013470 <__mdiff+0x28>
 80134a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80134ac:	6926      	ldr	r6, [r4, #16]
 80134ae:	60c5      	str	r5, [r0, #12]
 80134b0:	f109 0310 	add.w	r3, r9, #16
 80134b4:	f109 0514 	add.w	r5, r9, #20
 80134b8:	f104 0e14 	add.w	lr, r4, #20
 80134bc:	f100 0b14 	add.w	fp, r0, #20
 80134c0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80134c4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80134c8:	9301      	str	r3, [sp, #4]
 80134ca:	46d9      	mov	r9, fp
 80134cc:	f04f 0c00 	mov.w	ip, #0
 80134d0:	9b01      	ldr	r3, [sp, #4]
 80134d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80134d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80134da:	9301      	str	r3, [sp, #4]
 80134dc:	fa1f f38a 	uxth.w	r3, sl
 80134e0:	4619      	mov	r1, r3
 80134e2:	b283      	uxth	r3, r0
 80134e4:	1acb      	subs	r3, r1, r3
 80134e6:	0c00      	lsrs	r0, r0, #16
 80134e8:	4463      	add	r3, ip
 80134ea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80134ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80134f2:	b29b      	uxth	r3, r3
 80134f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80134f8:	4576      	cmp	r6, lr
 80134fa:	f849 3b04 	str.w	r3, [r9], #4
 80134fe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013502:	d8e5      	bhi.n	80134d0 <__mdiff+0x88>
 8013504:	1b33      	subs	r3, r6, r4
 8013506:	3b15      	subs	r3, #21
 8013508:	f023 0303 	bic.w	r3, r3, #3
 801350c:	3415      	adds	r4, #21
 801350e:	3304      	adds	r3, #4
 8013510:	42a6      	cmp	r6, r4
 8013512:	bf38      	it	cc
 8013514:	2304      	movcc	r3, #4
 8013516:	441d      	add	r5, r3
 8013518:	445b      	add	r3, fp
 801351a:	461e      	mov	r6, r3
 801351c:	462c      	mov	r4, r5
 801351e:	4544      	cmp	r4, r8
 8013520:	d30e      	bcc.n	8013540 <__mdiff+0xf8>
 8013522:	f108 0103 	add.w	r1, r8, #3
 8013526:	1b49      	subs	r1, r1, r5
 8013528:	f021 0103 	bic.w	r1, r1, #3
 801352c:	3d03      	subs	r5, #3
 801352e:	45a8      	cmp	r8, r5
 8013530:	bf38      	it	cc
 8013532:	2100      	movcc	r1, #0
 8013534:	440b      	add	r3, r1
 8013536:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801353a:	b191      	cbz	r1, 8013562 <__mdiff+0x11a>
 801353c:	6117      	str	r7, [r2, #16]
 801353e:	e79d      	b.n	801347c <__mdiff+0x34>
 8013540:	f854 1b04 	ldr.w	r1, [r4], #4
 8013544:	46e6      	mov	lr, ip
 8013546:	0c08      	lsrs	r0, r1, #16
 8013548:	fa1c fc81 	uxtah	ip, ip, r1
 801354c:	4471      	add	r1, lr
 801354e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013552:	b289      	uxth	r1, r1
 8013554:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013558:	f846 1b04 	str.w	r1, [r6], #4
 801355c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013560:	e7dd      	b.n	801351e <__mdiff+0xd6>
 8013562:	3f01      	subs	r7, #1
 8013564:	e7e7      	b.n	8013536 <__mdiff+0xee>
 8013566:	bf00      	nop
 8013568:	080153fe 	.word	0x080153fe
 801356c:	0801540f 	.word	0x0801540f

08013570 <__d2b>:
 8013570:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013574:	460f      	mov	r7, r1
 8013576:	2101      	movs	r1, #1
 8013578:	ec59 8b10 	vmov	r8, r9, d0
 801357c:	4616      	mov	r6, r2
 801357e:	f7ff fccd 	bl	8012f1c <_Balloc>
 8013582:	4604      	mov	r4, r0
 8013584:	b930      	cbnz	r0, 8013594 <__d2b+0x24>
 8013586:	4602      	mov	r2, r0
 8013588:	4b23      	ldr	r3, [pc, #140]	@ (8013618 <__d2b+0xa8>)
 801358a:	4824      	ldr	r0, [pc, #144]	@ (801361c <__d2b+0xac>)
 801358c:	f240 310f 	movw	r1, #783	@ 0x30f
 8013590:	f000 f8f2 	bl	8013778 <__assert_func>
 8013594:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013598:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801359c:	b10d      	cbz	r5, 80135a2 <__d2b+0x32>
 801359e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80135a2:	9301      	str	r3, [sp, #4]
 80135a4:	f1b8 0300 	subs.w	r3, r8, #0
 80135a8:	d023      	beq.n	80135f2 <__d2b+0x82>
 80135aa:	4668      	mov	r0, sp
 80135ac:	9300      	str	r3, [sp, #0]
 80135ae:	f7ff fd7c 	bl	80130aa <__lo0bits>
 80135b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80135b6:	b1d0      	cbz	r0, 80135ee <__d2b+0x7e>
 80135b8:	f1c0 0320 	rsb	r3, r0, #32
 80135bc:	fa02 f303 	lsl.w	r3, r2, r3
 80135c0:	430b      	orrs	r3, r1
 80135c2:	40c2      	lsrs	r2, r0
 80135c4:	6163      	str	r3, [r4, #20]
 80135c6:	9201      	str	r2, [sp, #4]
 80135c8:	9b01      	ldr	r3, [sp, #4]
 80135ca:	61a3      	str	r3, [r4, #24]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	bf0c      	ite	eq
 80135d0:	2201      	moveq	r2, #1
 80135d2:	2202      	movne	r2, #2
 80135d4:	6122      	str	r2, [r4, #16]
 80135d6:	b1a5      	cbz	r5, 8013602 <__d2b+0x92>
 80135d8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80135dc:	4405      	add	r5, r0
 80135de:	603d      	str	r5, [r7, #0]
 80135e0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80135e4:	6030      	str	r0, [r6, #0]
 80135e6:	4620      	mov	r0, r4
 80135e8:	b003      	add	sp, #12
 80135ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80135ee:	6161      	str	r1, [r4, #20]
 80135f0:	e7ea      	b.n	80135c8 <__d2b+0x58>
 80135f2:	a801      	add	r0, sp, #4
 80135f4:	f7ff fd59 	bl	80130aa <__lo0bits>
 80135f8:	9b01      	ldr	r3, [sp, #4]
 80135fa:	6163      	str	r3, [r4, #20]
 80135fc:	3020      	adds	r0, #32
 80135fe:	2201      	movs	r2, #1
 8013600:	e7e8      	b.n	80135d4 <__d2b+0x64>
 8013602:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013606:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801360a:	6038      	str	r0, [r7, #0]
 801360c:	6918      	ldr	r0, [r3, #16]
 801360e:	f7ff fd2d 	bl	801306c <__hi0bits>
 8013612:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013616:	e7e5      	b.n	80135e4 <__d2b+0x74>
 8013618:	080153fe 	.word	0x080153fe
 801361c:	0801540f 	.word	0x0801540f

08013620 <__sflush_r>:
 8013620:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013628:	0716      	lsls	r6, r2, #28
 801362a:	4605      	mov	r5, r0
 801362c:	460c      	mov	r4, r1
 801362e:	d454      	bmi.n	80136da <__sflush_r+0xba>
 8013630:	684b      	ldr	r3, [r1, #4]
 8013632:	2b00      	cmp	r3, #0
 8013634:	dc02      	bgt.n	801363c <__sflush_r+0x1c>
 8013636:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013638:	2b00      	cmp	r3, #0
 801363a:	dd48      	ble.n	80136ce <__sflush_r+0xae>
 801363c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801363e:	2e00      	cmp	r6, #0
 8013640:	d045      	beq.n	80136ce <__sflush_r+0xae>
 8013642:	2300      	movs	r3, #0
 8013644:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013648:	682f      	ldr	r7, [r5, #0]
 801364a:	6a21      	ldr	r1, [r4, #32]
 801364c:	602b      	str	r3, [r5, #0]
 801364e:	d030      	beq.n	80136b2 <__sflush_r+0x92>
 8013650:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013652:	89a3      	ldrh	r3, [r4, #12]
 8013654:	0759      	lsls	r1, r3, #29
 8013656:	d505      	bpl.n	8013664 <__sflush_r+0x44>
 8013658:	6863      	ldr	r3, [r4, #4]
 801365a:	1ad2      	subs	r2, r2, r3
 801365c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801365e:	b10b      	cbz	r3, 8013664 <__sflush_r+0x44>
 8013660:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013662:	1ad2      	subs	r2, r2, r3
 8013664:	2300      	movs	r3, #0
 8013666:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013668:	6a21      	ldr	r1, [r4, #32]
 801366a:	4628      	mov	r0, r5
 801366c:	47b0      	blx	r6
 801366e:	1c43      	adds	r3, r0, #1
 8013670:	89a3      	ldrh	r3, [r4, #12]
 8013672:	d106      	bne.n	8013682 <__sflush_r+0x62>
 8013674:	6829      	ldr	r1, [r5, #0]
 8013676:	291d      	cmp	r1, #29
 8013678:	d82b      	bhi.n	80136d2 <__sflush_r+0xb2>
 801367a:	4a2a      	ldr	r2, [pc, #168]	@ (8013724 <__sflush_r+0x104>)
 801367c:	410a      	asrs	r2, r1
 801367e:	07d6      	lsls	r6, r2, #31
 8013680:	d427      	bmi.n	80136d2 <__sflush_r+0xb2>
 8013682:	2200      	movs	r2, #0
 8013684:	6062      	str	r2, [r4, #4]
 8013686:	04d9      	lsls	r1, r3, #19
 8013688:	6922      	ldr	r2, [r4, #16]
 801368a:	6022      	str	r2, [r4, #0]
 801368c:	d504      	bpl.n	8013698 <__sflush_r+0x78>
 801368e:	1c42      	adds	r2, r0, #1
 8013690:	d101      	bne.n	8013696 <__sflush_r+0x76>
 8013692:	682b      	ldr	r3, [r5, #0]
 8013694:	b903      	cbnz	r3, 8013698 <__sflush_r+0x78>
 8013696:	6560      	str	r0, [r4, #84]	@ 0x54
 8013698:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801369a:	602f      	str	r7, [r5, #0]
 801369c:	b1b9      	cbz	r1, 80136ce <__sflush_r+0xae>
 801369e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80136a2:	4299      	cmp	r1, r3
 80136a4:	d002      	beq.n	80136ac <__sflush_r+0x8c>
 80136a6:	4628      	mov	r0, r5
 80136a8:	f7ff fbee 	bl	8012e88 <_free_r>
 80136ac:	2300      	movs	r3, #0
 80136ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80136b0:	e00d      	b.n	80136ce <__sflush_r+0xae>
 80136b2:	2301      	movs	r3, #1
 80136b4:	4628      	mov	r0, r5
 80136b6:	47b0      	blx	r6
 80136b8:	4602      	mov	r2, r0
 80136ba:	1c50      	adds	r0, r2, #1
 80136bc:	d1c9      	bne.n	8013652 <__sflush_r+0x32>
 80136be:	682b      	ldr	r3, [r5, #0]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d0c6      	beq.n	8013652 <__sflush_r+0x32>
 80136c4:	2b1d      	cmp	r3, #29
 80136c6:	d001      	beq.n	80136cc <__sflush_r+0xac>
 80136c8:	2b16      	cmp	r3, #22
 80136ca:	d11e      	bne.n	801370a <__sflush_r+0xea>
 80136cc:	602f      	str	r7, [r5, #0]
 80136ce:	2000      	movs	r0, #0
 80136d0:	e022      	b.n	8013718 <__sflush_r+0xf8>
 80136d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80136d6:	b21b      	sxth	r3, r3
 80136d8:	e01b      	b.n	8013712 <__sflush_r+0xf2>
 80136da:	690f      	ldr	r7, [r1, #16]
 80136dc:	2f00      	cmp	r7, #0
 80136de:	d0f6      	beq.n	80136ce <__sflush_r+0xae>
 80136e0:	0793      	lsls	r3, r2, #30
 80136e2:	680e      	ldr	r6, [r1, #0]
 80136e4:	bf08      	it	eq
 80136e6:	694b      	ldreq	r3, [r1, #20]
 80136e8:	600f      	str	r7, [r1, #0]
 80136ea:	bf18      	it	ne
 80136ec:	2300      	movne	r3, #0
 80136ee:	eba6 0807 	sub.w	r8, r6, r7
 80136f2:	608b      	str	r3, [r1, #8]
 80136f4:	f1b8 0f00 	cmp.w	r8, #0
 80136f8:	dde9      	ble.n	80136ce <__sflush_r+0xae>
 80136fa:	6a21      	ldr	r1, [r4, #32]
 80136fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80136fe:	4643      	mov	r3, r8
 8013700:	463a      	mov	r2, r7
 8013702:	4628      	mov	r0, r5
 8013704:	47b0      	blx	r6
 8013706:	2800      	cmp	r0, #0
 8013708:	dc08      	bgt.n	801371c <__sflush_r+0xfc>
 801370a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801370e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013712:	81a3      	strh	r3, [r4, #12]
 8013714:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801371c:	4407      	add	r7, r0
 801371e:	eba8 0800 	sub.w	r8, r8, r0
 8013722:	e7e7      	b.n	80136f4 <__sflush_r+0xd4>
 8013724:	dfbffffe 	.word	0xdfbffffe

08013728 <_fflush_r>:
 8013728:	b538      	push	{r3, r4, r5, lr}
 801372a:	690b      	ldr	r3, [r1, #16]
 801372c:	4605      	mov	r5, r0
 801372e:	460c      	mov	r4, r1
 8013730:	b913      	cbnz	r3, 8013738 <_fflush_r+0x10>
 8013732:	2500      	movs	r5, #0
 8013734:	4628      	mov	r0, r5
 8013736:	bd38      	pop	{r3, r4, r5, pc}
 8013738:	b118      	cbz	r0, 8013742 <_fflush_r+0x1a>
 801373a:	6a03      	ldr	r3, [r0, #32]
 801373c:	b90b      	cbnz	r3, 8013742 <_fflush_r+0x1a>
 801373e:	f7fe fbfb 	bl	8011f38 <__sinit>
 8013742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013746:	2b00      	cmp	r3, #0
 8013748:	d0f3      	beq.n	8013732 <_fflush_r+0xa>
 801374a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801374c:	07d0      	lsls	r0, r2, #31
 801374e:	d404      	bmi.n	801375a <_fflush_r+0x32>
 8013750:	0599      	lsls	r1, r3, #22
 8013752:	d402      	bmi.n	801375a <_fflush_r+0x32>
 8013754:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013756:	f7fe fd3a 	bl	80121ce <__retarget_lock_acquire_recursive>
 801375a:	4628      	mov	r0, r5
 801375c:	4621      	mov	r1, r4
 801375e:	f7ff ff5f 	bl	8013620 <__sflush_r>
 8013762:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013764:	07da      	lsls	r2, r3, #31
 8013766:	4605      	mov	r5, r0
 8013768:	d4e4      	bmi.n	8013734 <_fflush_r+0xc>
 801376a:	89a3      	ldrh	r3, [r4, #12]
 801376c:	059b      	lsls	r3, r3, #22
 801376e:	d4e1      	bmi.n	8013734 <_fflush_r+0xc>
 8013770:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013772:	f7fe fd2d 	bl	80121d0 <__retarget_lock_release_recursive>
 8013776:	e7dd      	b.n	8013734 <_fflush_r+0xc>

08013778 <__assert_func>:
 8013778:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801377a:	4614      	mov	r4, r2
 801377c:	461a      	mov	r2, r3
 801377e:	4b09      	ldr	r3, [pc, #36]	@ (80137a4 <__assert_func+0x2c>)
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	4605      	mov	r5, r0
 8013784:	68d8      	ldr	r0, [r3, #12]
 8013786:	b954      	cbnz	r4, 801379e <__assert_func+0x26>
 8013788:	4b07      	ldr	r3, [pc, #28]	@ (80137a8 <__assert_func+0x30>)
 801378a:	461c      	mov	r4, r3
 801378c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013790:	9100      	str	r1, [sp, #0]
 8013792:	462b      	mov	r3, r5
 8013794:	4905      	ldr	r1, [pc, #20]	@ (80137ac <__assert_func+0x34>)
 8013796:	f000 f841 	bl	801381c <fiprintf>
 801379a:	f7fd fe15 	bl	80113c8 <abort>
 801379e:	4b04      	ldr	r3, [pc, #16]	@ (80137b0 <__assert_func+0x38>)
 80137a0:	e7f4      	b.n	801378c <__assert_func+0x14>
 80137a2:	bf00      	nop
 80137a4:	20000024 	.word	0x20000024
 80137a8:	080155ad 	.word	0x080155ad
 80137ac:	0801557f 	.word	0x0801557f
 80137b0:	08015572 	.word	0x08015572

080137b4 <_calloc_r>:
 80137b4:	b570      	push	{r4, r5, r6, lr}
 80137b6:	fba1 5402 	umull	r5, r4, r1, r2
 80137ba:	b93c      	cbnz	r4, 80137cc <_calloc_r+0x18>
 80137bc:	4629      	mov	r1, r5
 80137be:	f7fd fe3d 	bl	801143c <_malloc_r>
 80137c2:	4606      	mov	r6, r0
 80137c4:	b928      	cbnz	r0, 80137d2 <_calloc_r+0x1e>
 80137c6:	2600      	movs	r6, #0
 80137c8:	4630      	mov	r0, r6
 80137ca:	bd70      	pop	{r4, r5, r6, pc}
 80137cc:	220c      	movs	r2, #12
 80137ce:	6002      	str	r2, [r0, #0]
 80137d0:	e7f9      	b.n	80137c6 <_calloc_r+0x12>
 80137d2:	462a      	mov	r2, r5
 80137d4:	4621      	mov	r1, r4
 80137d6:	f7fe fc28 	bl	801202a <memset>
 80137da:	e7f5      	b.n	80137c8 <_calloc_r+0x14>

080137dc <__ascii_mbtowc>:
 80137dc:	b082      	sub	sp, #8
 80137de:	b901      	cbnz	r1, 80137e2 <__ascii_mbtowc+0x6>
 80137e0:	a901      	add	r1, sp, #4
 80137e2:	b142      	cbz	r2, 80137f6 <__ascii_mbtowc+0x1a>
 80137e4:	b14b      	cbz	r3, 80137fa <__ascii_mbtowc+0x1e>
 80137e6:	7813      	ldrb	r3, [r2, #0]
 80137e8:	600b      	str	r3, [r1, #0]
 80137ea:	7812      	ldrb	r2, [r2, #0]
 80137ec:	1e10      	subs	r0, r2, #0
 80137ee:	bf18      	it	ne
 80137f0:	2001      	movne	r0, #1
 80137f2:	b002      	add	sp, #8
 80137f4:	4770      	bx	lr
 80137f6:	4610      	mov	r0, r2
 80137f8:	e7fb      	b.n	80137f2 <__ascii_mbtowc+0x16>
 80137fa:	f06f 0001 	mvn.w	r0, #1
 80137fe:	e7f8      	b.n	80137f2 <__ascii_mbtowc+0x16>

08013800 <__ascii_wctomb>:
 8013800:	4603      	mov	r3, r0
 8013802:	4608      	mov	r0, r1
 8013804:	b141      	cbz	r1, 8013818 <__ascii_wctomb+0x18>
 8013806:	2aff      	cmp	r2, #255	@ 0xff
 8013808:	d904      	bls.n	8013814 <__ascii_wctomb+0x14>
 801380a:	228a      	movs	r2, #138	@ 0x8a
 801380c:	601a      	str	r2, [r3, #0]
 801380e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013812:	4770      	bx	lr
 8013814:	700a      	strb	r2, [r1, #0]
 8013816:	2001      	movs	r0, #1
 8013818:	4770      	bx	lr
	...

0801381c <fiprintf>:
 801381c:	b40e      	push	{r1, r2, r3}
 801381e:	b503      	push	{r0, r1, lr}
 8013820:	4601      	mov	r1, r0
 8013822:	ab03      	add	r3, sp, #12
 8013824:	4805      	ldr	r0, [pc, #20]	@ (801383c <fiprintf+0x20>)
 8013826:	f853 2b04 	ldr.w	r2, [r3], #4
 801382a:	6800      	ldr	r0, [r0, #0]
 801382c:	9301      	str	r3, [sp, #4]
 801382e:	f000 f831 	bl	8013894 <_vfiprintf_r>
 8013832:	b002      	add	sp, #8
 8013834:	f85d eb04 	ldr.w	lr, [sp], #4
 8013838:	b003      	add	sp, #12
 801383a:	4770      	bx	lr
 801383c:	20000024 	.word	0x20000024

08013840 <__sfputc_r>:
 8013840:	6893      	ldr	r3, [r2, #8]
 8013842:	3b01      	subs	r3, #1
 8013844:	2b00      	cmp	r3, #0
 8013846:	b410      	push	{r4}
 8013848:	6093      	str	r3, [r2, #8]
 801384a:	da08      	bge.n	801385e <__sfputc_r+0x1e>
 801384c:	6994      	ldr	r4, [r2, #24]
 801384e:	42a3      	cmp	r3, r4
 8013850:	db01      	blt.n	8013856 <__sfputc_r+0x16>
 8013852:	290a      	cmp	r1, #10
 8013854:	d103      	bne.n	801385e <__sfputc_r+0x1e>
 8013856:	f85d 4b04 	ldr.w	r4, [sp], #4
 801385a:	f000 b933 	b.w	8013ac4 <__swbuf_r>
 801385e:	6813      	ldr	r3, [r2, #0]
 8013860:	1c58      	adds	r0, r3, #1
 8013862:	6010      	str	r0, [r2, #0]
 8013864:	7019      	strb	r1, [r3, #0]
 8013866:	4608      	mov	r0, r1
 8013868:	f85d 4b04 	ldr.w	r4, [sp], #4
 801386c:	4770      	bx	lr

0801386e <__sfputs_r>:
 801386e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013870:	4606      	mov	r6, r0
 8013872:	460f      	mov	r7, r1
 8013874:	4614      	mov	r4, r2
 8013876:	18d5      	adds	r5, r2, r3
 8013878:	42ac      	cmp	r4, r5
 801387a:	d101      	bne.n	8013880 <__sfputs_r+0x12>
 801387c:	2000      	movs	r0, #0
 801387e:	e007      	b.n	8013890 <__sfputs_r+0x22>
 8013880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013884:	463a      	mov	r2, r7
 8013886:	4630      	mov	r0, r6
 8013888:	f7ff ffda 	bl	8013840 <__sfputc_r>
 801388c:	1c43      	adds	r3, r0, #1
 801388e:	d1f3      	bne.n	8013878 <__sfputs_r+0xa>
 8013890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013894 <_vfiprintf_r>:
 8013894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013898:	460d      	mov	r5, r1
 801389a:	b09d      	sub	sp, #116	@ 0x74
 801389c:	4614      	mov	r4, r2
 801389e:	4698      	mov	r8, r3
 80138a0:	4606      	mov	r6, r0
 80138a2:	b118      	cbz	r0, 80138ac <_vfiprintf_r+0x18>
 80138a4:	6a03      	ldr	r3, [r0, #32]
 80138a6:	b90b      	cbnz	r3, 80138ac <_vfiprintf_r+0x18>
 80138a8:	f7fe fb46 	bl	8011f38 <__sinit>
 80138ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80138ae:	07d9      	lsls	r1, r3, #31
 80138b0:	d405      	bmi.n	80138be <_vfiprintf_r+0x2a>
 80138b2:	89ab      	ldrh	r3, [r5, #12]
 80138b4:	059a      	lsls	r2, r3, #22
 80138b6:	d402      	bmi.n	80138be <_vfiprintf_r+0x2a>
 80138b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80138ba:	f7fe fc88 	bl	80121ce <__retarget_lock_acquire_recursive>
 80138be:	89ab      	ldrh	r3, [r5, #12]
 80138c0:	071b      	lsls	r3, r3, #28
 80138c2:	d501      	bpl.n	80138c8 <_vfiprintf_r+0x34>
 80138c4:	692b      	ldr	r3, [r5, #16]
 80138c6:	b99b      	cbnz	r3, 80138f0 <_vfiprintf_r+0x5c>
 80138c8:	4629      	mov	r1, r5
 80138ca:	4630      	mov	r0, r6
 80138cc:	f000 f938 	bl	8013b40 <__swsetup_r>
 80138d0:	b170      	cbz	r0, 80138f0 <_vfiprintf_r+0x5c>
 80138d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80138d4:	07dc      	lsls	r4, r3, #31
 80138d6:	d504      	bpl.n	80138e2 <_vfiprintf_r+0x4e>
 80138d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80138dc:	b01d      	add	sp, #116	@ 0x74
 80138de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138e2:	89ab      	ldrh	r3, [r5, #12]
 80138e4:	0598      	lsls	r0, r3, #22
 80138e6:	d4f7      	bmi.n	80138d8 <_vfiprintf_r+0x44>
 80138e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80138ea:	f7fe fc71 	bl	80121d0 <__retarget_lock_release_recursive>
 80138ee:	e7f3      	b.n	80138d8 <_vfiprintf_r+0x44>
 80138f0:	2300      	movs	r3, #0
 80138f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80138f4:	2320      	movs	r3, #32
 80138f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80138fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80138fe:	2330      	movs	r3, #48	@ 0x30
 8013900:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013ab0 <_vfiprintf_r+0x21c>
 8013904:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013908:	f04f 0901 	mov.w	r9, #1
 801390c:	4623      	mov	r3, r4
 801390e:	469a      	mov	sl, r3
 8013910:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013914:	b10a      	cbz	r2, 801391a <_vfiprintf_r+0x86>
 8013916:	2a25      	cmp	r2, #37	@ 0x25
 8013918:	d1f9      	bne.n	801390e <_vfiprintf_r+0x7a>
 801391a:	ebba 0b04 	subs.w	fp, sl, r4
 801391e:	d00b      	beq.n	8013938 <_vfiprintf_r+0xa4>
 8013920:	465b      	mov	r3, fp
 8013922:	4622      	mov	r2, r4
 8013924:	4629      	mov	r1, r5
 8013926:	4630      	mov	r0, r6
 8013928:	f7ff ffa1 	bl	801386e <__sfputs_r>
 801392c:	3001      	adds	r0, #1
 801392e:	f000 80a7 	beq.w	8013a80 <_vfiprintf_r+0x1ec>
 8013932:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013934:	445a      	add	r2, fp
 8013936:	9209      	str	r2, [sp, #36]	@ 0x24
 8013938:	f89a 3000 	ldrb.w	r3, [sl]
 801393c:	2b00      	cmp	r3, #0
 801393e:	f000 809f 	beq.w	8013a80 <_vfiprintf_r+0x1ec>
 8013942:	2300      	movs	r3, #0
 8013944:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013948:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801394c:	f10a 0a01 	add.w	sl, sl, #1
 8013950:	9304      	str	r3, [sp, #16]
 8013952:	9307      	str	r3, [sp, #28]
 8013954:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013958:	931a      	str	r3, [sp, #104]	@ 0x68
 801395a:	4654      	mov	r4, sl
 801395c:	2205      	movs	r2, #5
 801395e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013962:	4853      	ldr	r0, [pc, #332]	@ (8013ab0 <_vfiprintf_r+0x21c>)
 8013964:	f7ec fc64 	bl	8000230 <memchr>
 8013968:	9a04      	ldr	r2, [sp, #16]
 801396a:	b9d8      	cbnz	r0, 80139a4 <_vfiprintf_r+0x110>
 801396c:	06d1      	lsls	r1, r2, #27
 801396e:	bf44      	itt	mi
 8013970:	2320      	movmi	r3, #32
 8013972:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013976:	0713      	lsls	r3, r2, #28
 8013978:	bf44      	itt	mi
 801397a:	232b      	movmi	r3, #43	@ 0x2b
 801397c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013980:	f89a 3000 	ldrb.w	r3, [sl]
 8013984:	2b2a      	cmp	r3, #42	@ 0x2a
 8013986:	d015      	beq.n	80139b4 <_vfiprintf_r+0x120>
 8013988:	9a07      	ldr	r2, [sp, #28]
 801398a:	4654      	mov	r4, sl
 801398c:	2000      	movs	r0, #0
 801398e:	f04f 0c0a 	mov.w	ip, #10
 8013992:	4621      	mov	r1, r4
 8013994:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013998:	3b30      	subs	r3, #48	@ 0x30
 801399a:	2b09      	cmp	r3, #9
 801399c:	d94b      	bls.n	8013a36 <_vfiprintf_r+0x1a2>
 801399e:	b1b0      	cbz	r0, 80139ce <_vfiprintf_r+0x13a>
 80139a0:	9207      	str	r2, [sp, #28]
 80139a2:	e014      	b.n	80139ce <_vfiprintf_r+0x13a>
 80139a4:	eba0 0308 	sub.w	r3, r0, r8
 80139a8:	fa09 f303 	lsl.w	r3, r9, r3
 80139ac:	4313      	orrs	r3, r2
 80139ae:	9304      	str	r3, [sp, #16]
 80139b0:	46a2      	mov	sl, r4
 80139b2:	e7d2      	b.n	801395a <_vfiprintf_r+0xc6>
 80139b4:	9b03      	ldr	r3, [sp, #12]
 80139b6:	1d19      	adds	r1, r3, #4
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	9103      	str	r1, [sp, #12]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	bfbb      	ittet	lt
 80139c0:	425b      	neglt	r3, r3
 80139c2:	f042 0202 	orrlt.w	r2, r2, #2
 80139c6:	9307      	strge	r3, [sp, #28]
 80139c8:	9307      	strlt	r3, [sp, #28]
 80139ca:	bfb8      	it	lt
 80139cc:	9204      	strlt	r2, [sp, #16]
 80139ce:	7823      	ldrb	r3, [r4, #0]
 80139d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80139d2:	d10a      	bne.n	80139ea <_vfiprintf_r+0x156>
 80139d4:	7863      	ldrb	r3, [r4, #1]
 80139d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80139d8:	d132      	bne.n	8013a40 <_vfiprintf_r+0x1ac>
 80139da:	9b03      	ldr	r3, [sp, #12]
 80139dc:	1d1a      	adds	r2, r3, #4
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	9203      	str	r2, [sp, #12]
 80139e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80139e6:	3402      	adds	r4, #2
 80139e8:	9305      	str	r3, [sp, #20]
 80139ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013ac0 <_vfiprintf_r+0x22c>
 80139ee:	7821      	ldrb	r1, [r4, #0]
 80139f0:	2203      	movs	r2, #3
 80139f2:	4650      	mov	r0, sl
 80139f4:	f7ec fc1c 	bl	8000230 <memchr>
 80139f8:	b138      	cbz	r0, 8013a0a <_vfiprintf_r+0x176>
 80139fa:	9b04      	ldr	r3, [sp, #16]
 80139fc:	eba0 000a 	sub.w	r0, r0, sl
 8013a00:	2240      	movs	r2, #64	@ 0x40
 8013a02:	4082      	lsls	r2, r0
 8013a04:	4313      	orrs	r3, r2
 8013a06:	3401      	adds	r4, #1
 8013a08:	9304      	str	r3, [sp, #16]
 8013a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a0e:	4829      	ldr	r0, [pc, #164]	@ (8013ab4 <_vfiprintf_r+0x220>)
 8013a10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013a14:	2206      	movs	r2, #6
 8013a16:	f7ec fc0b 	bl	8000230 <memchr>
 8013a1a:	2800      	cmp	r0, #0
 8013a1c:	d03f      	beq.n	8013a9e <_vfiprintf_r+0x20a>
 8013a1e:	4b26      	ldr	r3, [pc, #152]	@ (8013ab8 <_vfiprintf_r+0x224>)
 8013a20:	bb1b      	cbnz	r3, 8013a6a <_vfiprintf_r+0x1d6>
 8013a22:	9b03      	ldr	r3, [sp, #12]
 8013a24:	3307      	adds	r3, #7
 8013a26:	f023 0307 	bic.w	r3, r3, #7
 8013a2a:	3308      	adds	r3, #8
 8013a2c:	9303      	str	r3, [sp, #12]
 8013a2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013a30:	443b      	add	r3, r7
 8013a32:	9309      	str	r3, [sp, #36]	@ 0x24
 8013a34:	e76a      	b.n	801390c <_vfiprintf_r+0x78>
 8013a36:	fb0c 3202 	mla	r2, ip, r2, r3
 8013a3a:	460c      	mov	r4, r1
 8013a3c:	2001      	movs	r0, #1
 8013a3e:	e7a8      	b.n	8013992 <_vfiprintf_r+0xfe>
 8013a40:	2300      	movs	r3, #0
 8013a42:	3401      	adds	r4, #1
 8013a44:	9305      	str	r3, [sp, #20]
 8013a46:	4619      	mov	r1, r3
 8013a48:	f04f 0c0a 	mov.w	ip, #10
 8013a4c:	4620      	mov	r0, r4
 8013a4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013a52:	3a30      	subs	r2, #48	@ 0x30
 8013a54:	2a09      	cmp	r2, #9
 8013a56:	d903      	bls.n	8013a60 <_vfiprintf_r+0x1cc>
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d0c6      	beq.n	80139ea <_vfiprintf_r+0x156>
 8013a5c:	9105      	str	r1, [sp, #20]
 8013a5e:	e7c4      	b.n	80139ea <_vfiprintf_r+0x156>
 8013a60:	fb0c 2101 	mla	r1, ip, r1, r2
 8013a64:	4604      	mov	r4, r0
 8013a66:	2301      	movs	r3, #1
 8013a68:	e7f0      	b.n	8013a4c <_vfiprintf_r+0x1b8>
 8013a6a:	ab03      	add	r3, sp, #12
 8013a6c:	9300      	str	r3, [sp, #0]
 8013a6e:	462a      	mov	r2, r5
 8013a70:	4b12      	ldr	r3, [pc, #72]	@ (8013abc <_vfiprintf_r+0x228>)
 8013a72:	a904      	add	r1, sp, #16
 8013a74:	4630      	mov	r0, r6
 8013a76:	f7fd fe1b 	bl	80116b0 <_printf_float>
 8013a7a:	4607      	mov	r7, r0
 8013a7c:	1c78      	adds	r0, r7, #1
 8013a7e:	d1d6      	bne.n	8013a2e <_vfiprintf_r+0x19a>
 8013a80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013a82:	07d9      	lsls	r1, r3, #31
 8013a84:	d405      	bmi.n	8013a92 <_vfiprintf_r+0x1fe>
 8013a86:	89ab      	ldrh	r3, [r5, #12]
 8013a88:	059a      	lsls	r2, r3, #22
 8013a8a:	d402      	bmi.n	8013a92 <_vfiprintf_r+0x1fe>
 8013a8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013a8e:	f7fe fb9f 	bl	80121d0 <__retarget_lock_release_recursive>
 8013a92:	89ab      	ldrh	r3, [r5, #12]
 8013a94:	065b      	lsls	r3, r3, #25
 8013a96:	f53f af1f 	bmi.w	80138d8 <_vfiprintf_r+0x44>
 8013a9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013a9c:	e71e      	b.n	80138dc <_vfiprintf_r+0x48>
 8013a9e:	ab03      	add	r3, sp, #12
 8013aa0:	9300      	str	r3, [sp, #0]
 8013aa2:	462a      	mov	r2, r5
 8013aa4:	4b05      	ldr	r3, [pc, #20]	@ (8013abc <_vfiprintf_r+0x228>)
 8013aa6:	a904      	add	r1, sp, #16
 8013aa8:	4630      	mov	r0, r6
 8013aaa:	f7fe f899 	bl	8011be0 <_printf_i>
 8013aae:	e7e4      	b.n	8013a7a <_vfiprintf_r+0x1e6>
 8013ab0:	080156af 	.word	0x080156af
 8013ab4:	080156b9 	.word	0x080156b9
 8013ab8:	080116b1 	.word	0x080116b1
 8013abc:	0801386f 	.word	0x0801386f
 8013ac0:	080156b5 	.word	0x080156b5

08013ac4 <__swbuf_r>:
 8013ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ac6:	460e      	mov	r6, r1
 8013ac8:	4614      	mov	r4, r2
 8013aca:	4605      	mov	r5, r0
 8013acc:	b118      	cbz	r0, 8013ad6 <__swbuf_r+0x12>
 8013ace:	6a03      	ldr	r3, [r0, #32]
 8013ad0:	b90b      	cbnz	r3, 8013ad6 <__swbuf_r+0x12>
 8013ad2:	f7fe fa31 	bl	8011f38 <__sinit>
 8013ad6:	69a3      	ldr	r3, [r4, #24]
 8013ad8:	60a3      	str	r3, [r4, #8]
 8013ada:	89a3      	ldrh	r3, [r4, #12]
 8013adc:	071a      	lsls	r2, r3, #28
 8013ade:	d501      	bpl.n	8013ae4 <__swbuf_r+0x20>
 8013ae0:	6923      	ldr	r3, [r4, #16]
 8013ae2:	b943      	cbnz	r3, 8013af6 <__swbuf_r+0x32>
 8013ae4:	4621      	mov	r1, r4
 8013ae6:	4628      	mov	r0, r5
 8013ae8:	f000 f82a 	bl	8013b40 <__swsetup_r>
 8013aec:	b118      	cbz	r0, 8013af6 <__swbuf_r+0x32>
 8013aee:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8013af2:	4638      	mov	r0, r7
 8013af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013af6:	6823      	ldr	r3, [r4, #0]
 8013af8:	6922      	ldr	r2, [r4, #16]
 8013afa:	1a98      	subs	r0, r3, r2
 8013afc:	6963      	ldr	r3, [r4, #20]
 8013afe:	b2f6      	uxtb	r6, r6
 8013b00:	4283      	cmp	r3, r0
 8013b02:	4637      	mov	r7, r6
 8013b04:	dc05      	bgt.n	8013b12 <__swbuf_r+0x4e>
 8013b06:	4621      	mov	r1, r4
 8013b08:	4628      	mov	r0, r5
 8013b0a:	f7ff fe0d 	bl	8013728 <_fflush_r>
 8013b0e:	2800      	cmp	r0, #0
 8013b10:	d1ed      	bne.n	8013aee <__swbuf_r+0x2a>
 8013b12:	68a3      	ldr	r3, [r4, #8]
 8013b14:	3b01      	subs	r3, #1
 8013b16:	60a3      	str	r3, [r4, #8]
 8013b18:	6823      	ldr	r3, [r4, #0]
 8013b1a:	1c5a      	adds	r2, r3, #1
 8013b1c:	6022      	str	r2, [r4, #0]
 8013b1e:	701e      	strb	r6, [r3, #0]
 8013b20:	6962      	ldr	r2, [r4, #20]
 8013b22:	1c43      	adds	r3, r0, #1
 8013b24:	429a      	cmp	r2, r3
 8013b26:	d004      	beq.n	8013b32 <__swbuf_r+0x6e>
 8013b28:	89a3      	ldrh	r3, [r4, #12]
 8013b2a:	07db      	lsls	r3, r3, #31
 8013b2c:	d5e1      	bpl.n	8013af2 <__swbuf_r+0x2e>
 8013b2e:	2e0a      	cmp	r6, #10
 8013b30:	d1df      	bne.n	8013af2 <__swbuf_r+0x2e>
 8013b32:	4621      	mov	r1, r4
 8013b34:	4628      	mov	r0, r5
 8013b36:	f7ff fdf7 	bl	8013728 <_fflush_r>
 8013b3a:	2800      	cmp	r0, #0
 8013b3c:	d0d9      	beq.n	8013af2 <__swbuf_r+0x2e>
 8013b3e:	e7d6      	b.n	8013aee <__swbuf_r+0x2a>

08013b40 <__swsetup_r>:
 8013b40:	b538      	push	{r3, r4, r5, lr}
 8013b42:	4b29      	ldr	r3, [pc, #164]	@ (8013be8 <__swsetup_r+0xa8>)
 8013b44:	4605      	mov	r5, r0
 8013b46:	6818      	ldr	r0, [r3, #0]
 8013b48:	460c      	mov	r4, r1
 8013b4a:	b118      	cbz	r0, 8013b54 <__swsetup_r+0x14>
 8013b4c:	6a03      	ldr	r3, [r0, #32]
 8013b4e:	b90b      	cbnz	r3, 8013b54 <__swsetup_r+0x14>
 8013b50:	f7fe f9f2 	bl	8011f38 <__sinit>
 8013b54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b58:	0719      	lsls	r1, r3, #28
 8013b5a:	d422      	bmi.n	8013ba2 <__swsetup_r+0x62>
 8013b5c:	06da      	lsls	r2, r3, #27
 8013b5e:	d407      	bmi.n	8013b70 <__swsetup_r+0x30>
 8013b60:	2209      	movs	r2, #9
 8013b62:	602a      	str	r2, [r5, #0]
 8013b64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013b68:	81a3      	strh	r3, [r4, #12]
 8013b6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013b6e:	e033      	b.n	8013bd8 <__swsetup_r+0x98>
 8013b70:	0758      	lsls	r0, r3, #29
 8013b72:	d512      	bpl.n	8013b9a <__swsetup_r+0x5a>
 8013b74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013b76:	b141      	cbz	r1, 8013b8a <__swsetup_r+0x4a>
 8013b78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013b7c:	4299      	cmp	r1, r3
 8013b7e:	d002      	beq.n	8013b86 <__swsetup_r+0x46>
 8013b80:	4628      	mov	r0, r5
 8013b82:	f7ff f981 	bl	8012e88 <_free_r>
 8013b86:	2300      	movs	r3, #0
 8013b88:	6363      	str	r3, [r4, #52]	@ 0x34
 8013b8a:	89a3      	ldrh	r3, [r4, #12]
 8013b8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013b90:	81a3      	strh	r3, [r4, #12]
 8013b92:	2300      	movs	r3, #0
 8013b94:	6063      	str	r3, [r4, #4]
 8013b96:	6923      	ldr	r3, [r4, #16]
 8013b98:	6023      	str	r3, [r4, #0]
 8013b9a:	89a3      	ldrh	r3, [r4, #12]
 8013b9c:	f043 0308 	orr.w	r3, r3, #8
 8013ba0:	81a3      	strh	r3, [r4, #12]
 8013ba2:	6923      	ldr	r3, [r4, #16]
 8013ba4:	b94b      	cbnz	r3, 8013bba <__swsetup_r+0x7a>
 8013ba6:	89a3      	ldrh	r3, [r4, #12]
 8013ba8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013bac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013bb0:	d003      	beq.n	8013bba <__swsetup_r+0x7a>
 8013bb2:	4621      	mov	r1, r4
 8013bb4:	4628      	mov	r0, r5
 8013bb6:	f000 f83f 	bl	8013c38 <__smakebuf_r>
 8013bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013bbe:	f013 0201 	ands.w	r2, r3, #1
 8013bc2:	d00a      	beq.n	8013bda <__swsetup_r+0x9a>
 8013bc4:	2200      	movs	r2, #0
 8013bc6:	60a2      	str	r2, [r4, #8]
 8013bc8:	6962      	ldr	r2, [r4, #20]
 8013bca:	4252      	negs	r2, r2
 8013bcc:	61a2      	str	r2, [r4, #24]
 8013bce:	6922      	ldr	r2, [r4, #16]
 8013bd0:	b942      	cbnz	r2, 8013be4 <__swsetup_r+0xa4>
 8013bd2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013bd6:	d1c5      	bne.n	8013b64 <__swsetup_r+0x24>
 8013bd8:	bd38      	pop	{r3, r4, r5, pc}
 8013bda:	0799      	lsls	r1, r3, #30
 8013bdc:	bf58      	it	pl
 8013bde:	6962      	ldrpl	r2, [r4, #20]
 8013be0:	60a2      	str	r2, [r4, #8]
 8013be2:	e7f4      	b.n	8013bce <__swsetup_r+0x8e>
 8013be4:	2000      	movs	r0, #0
 8013be6:	e7f7      	b.n	8013bd8 <__swsetup_r+0x98>
 8013be8:	20000024 	.word	0x20000024

08013bec <__swhatbuf_r>:
 8013bec:	b570      	push	{r4, r5, r6, lr}
 8013bee:	460c      	mov	r4, r1
 8013bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bf4:	2900      	cmp	r1, #0
 8013bf6:	b096      	sub	sp, #88	@ 0x58
 8013bf8:	4615      	mov	r5, r2
 8013bfa:	461e      	mov	r6, r3
 8013bfc:	da0d      	bge.n	8013c1a <__swhatbuf_r+0x2e>
 8013bfe:	89a3      	ldrh	r3, [r4, #12]
 8013c00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013c04:	f04f 0100 	mov.w	r1, #0
 8013c08:	bf14      	ite	ne
 8013c0a:	2340      	movne	r3, #64	@ 0x40
 8013c0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013c10:	2000      	movs	r0, #0
 8013c12:	6031      	str	r1, [r6, #0]
 8013c14:	602b      	str	r3, [r5, #0]
 8013c16:	b016      	add	sp, #88	@ 0x58
 8013c18:	bd70      	pop	{r4, r5, r6, pc}
 8013c1a:	466a      	mov	r2, sp
 8013c1c:	f000 f848 	bl	8013cb0 <_fstat_r>
 8013c20:	2800      	cmp	r0, #0
 8013c22:	dbec      	blt.n	8013bfe <__swhatbuf_r+0x12>
 8013c24:	9901      	ldr	r1, [sp, #4]
 8013c26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013c2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013c2e:	4259      	negs	r1, r3
 8013c30:	4159      	adcs	r1, r3
 8013c32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013c36:	e7eb      	b.n	8013c10 <__swhatbuf_r+0x24>

08013c38 <__smakebuf_r>:
 8013c38:	898b      	ldrh	r3, [r1, #12]
 8013c3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013c3c:	079d      	lsls	r5, r3, #30
 8013c3e:	4606      	mov	r6, r0
 8013c40:	460c      	mov	r4, r1
 8013c42:	d507      	bpl.n	8013c54 <__smakebuf_r+0x1c>
 8013c44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013c48:	6023      	str	r3, [r4, #0]
 8013c4a:	6123      	str	r3, [r4, #16]
 8013c4c:	2301      	movs	r3, #1
 8013c4e:	6163      	str	r3, [r4, #20]
 8013c50:	b003      	add	sp, #12
 8013c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c54:	ab01      	add	r3, sp, #4
 8013c56:	466a      	mov	r2, sp
 8013c58:	f7ff ffc8 	bl	8013bec <__swhatbuf_r>
 8013c5c:	9f00      	ldr	r7, [sp, #0]
 8013c5e:	4605      	mov	r5, r0
 8013c60:	4639      	mov	r1, r7
 8013c62:	4630      	mov	r0, r6
 8013c64:	f7fd fbea 	bl	801143c <_malloc_r>
 8013c68:	b948      	cbnz	r0, 8013c7e <__smakebuf_r+0x46>
 8013c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c6e:	059a      	lsls	r2, r3, #22
 8013c70:	d4ee      	bmi.n	8013c50 <__smakebuf_r+0x18>
 8013c72:	f023 0303 	bic.w	r3, r3, #3
 8013c76:	f043 0302 	orr.w	r3, r3, #2
 8013c7a:	81a3      	strh	r3, [r4, #12]
 8013c7c:	e7e2      	b.n	8013c44 <__smakebuf_r+0xc>
 8013c7e:	89a3      	ldrh	r3, [r4, #12]
 8013c80:	6020      	str	r0, [r4, #0]
 8013c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013c86:	81a3      	strh	r3, [r4, #12]
 8013c88:	9b01      	ldr	r3, [sp, #4]
 8013c8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013c8e:	b15b      	cbz	r3, 8013ca8 <__smakebuf_r+0x70>
 8013c90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013c94:	4630      	mov	r0, r6
 8013c96:	f000 f81d 	bl	8013cd4 <_isatty_r>
 8013c9a:	b128      	cbz	r0, 8013ca8 <__smakebuf_r+0x70>
 8013c9c:	89a3      	ldrh	r3, [r4, #12]
 8013c9e:	f023 0303 	bic.w	r3, r3, #3
 8013ca2:	f043 0301 	orr.w	r3, r3, #1
 8013ca6:	81a3      	strh	r3, [r4, #12]
 8013ca8:	89a3      	ldrh	r3, [r4, #12]
 8013caa:	431d      	orrs	r5, r3
 8013cac:	81a5      	strh	r5, [r4, #12]
 8013cae:	e7cf      	b.n	8013c50 <__smakebuf_r+0x18>

08013cb0 <_fstat_r>:
 8013cb0:	b538      	push	{r3, r4, r5, lr}
 8013cb2:	4d07      	ldr	r5, [pc, #28]	@ (8013cd0 <_fstat_r+0x20>)
 8013cb4:	2300      	movs	r3, #0
 8013cb6:	4604      	mov	r4, r0
 8013cb8:	4608      	mov	r0, r1
 8013cba:	4611      	mov	r1, r2
 8013cbc:	602b      	str	r3, [r5, #0]
 8013cbe:	f7f9 f811 	bl	800cce4 <_fstat>
 8013cc2:	1c43      	adds	r3, r0, #1
 8013cc4:	d102      	bne.n	8013ccc <_fstat_r+0x1c>
 8013cc6:	682b      	ldr	r3, [r5, #0]
 8013cc8:	b103      	cbz	r3, 8013ccc <_fstat_r+0x1c>
 8013cca:	6023      	str	r3, [r4, #0]
 8013ccc:	bd38      	pop	{r3, r4, r5, pc}
 8013cce:	bf00      	nop
 8013cd0:	20000534 	.word	0x20000534

08013cd4 <_isatty_r>:
 8013cd4:	b538      	push	{r3, r4, r5, lr}
 8013cd6:	4d06      	ldr	r5, [pc, #24]	@ (8013cf0 <_isatty_r+0x1c>)
 8013cd8:	2300      	movs	r3, #0
 8013cda:	4604      	mov	r4, r0
 8013cdc:	4608      	mov	r0, r1
 8013cde:	602b      	str	r3, [r5, #0]
 8013ce0:	f7f9 f810 	bl	800cd04 <_isatty>
 8013ce4:	1c43      	adds	r3, r0, #1
 8013ce6:	d102      	bne.n	8013cee <_isatty_r+0x1a>
 8013ce8:	682b      	ldr	r3, [r5, #0]
 8013cea:	b103      	cbz	r3, 8013cee <_isatty_r+0x1a>
 8013cec:	6023      	str	r3, [r4, #0]
 8013cee:	bd38      	pop	{r3, r4, r5, pc}
 8013cf0:	20000534 	.word	0x20000534

08013cf4 <_Unwind_GetDataRelBase>:
 8013cf4:	b508      	push	{r3, lr}
 8013cf6:	f7fd fb67 	bl	80113c8 <abort>

08013cfa <_Unwind_GetTextRelBase>:
 8013cfa:	b508      	push	{r3, lr}
 8013cfc:	f7ff fffa 	bl	8013cf4 <_Unwind_GetDataRelBase>

08013d00 <_init>:
 8013d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d02:	bf00      	nop
 8013d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d06:	bc08      	pop	{r3}
 8013d08:	469e      	mov	lr, r3
 8013d0a:	4770      	bx	lr

08013d0c <_fini>:
 8013d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d0e:	bf00      	nop
 8013d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d12:	bc08      	pop	{r3}
 8013d14:	469e      	mov	lr, r3
 8013d16:	4770      	bx	lr
