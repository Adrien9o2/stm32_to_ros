
stm32_to_ros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015050  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019f0  08015220  08015220  00016220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00001270  08016c10  08016c10  00017c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000d70  08017e80  08017e80  00018e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018bf0  08018bf0  0001a1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08018bf0  08018bf0  00019bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08018c00  08018c00  00019c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08018c08  0001a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  200001f0  08018df8  0001a1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000058c  08018df8  0001a58c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001a1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002809a  00000000  00000000  0001a220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ae4  00000000  00000000  000422ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fb0  00000000  00000000  00045da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001894  00000000  00000000  00047d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028be2  00000000  00000000  000495e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c283  00000000  00000000  000721c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e42d3  00000000  00000000  0008e449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017271c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cb40  00000000  00000000  00172760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0017f2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015208 	.word	0x08015208

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	08015208 	.word	0x08015208

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cbc:	f001 b8f6 	b.w	8001eac <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	460c      	mov	r4, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14e      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	458c      	cmp	ip, r1
 8000ce8:	4686      	mov	lr, r0
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	d962      	bls.n	8000db6 <__udivmoddi4+0xde>
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0320 	rsb	r3, r2, #32
 8000cf6:	4091      	lsls	r1, r2
 8000cf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	4319      	orrs	r1, r3
 8000d02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f f68c 	uxth.w	r6, ip
 8000d0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d16:	fb07 1114 	mls	r1, r7, r4, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb04 f106 	mul.w	r1, r4, r6
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d2e:	f080 8112 	bcs.w	8000f56 <__udivmoddi4+0x27e>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 810f 	bls.w	8000f56 <__udivmoddi4+0x27e>
 8000d38:	3c02      	subs	r4, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	fa1f f38e 	uxth.w	r3, lr
 8000d42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d46:	fb07 1110 	mls	r1, r7, r0, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f606 	mul.w	r6, r0, r6
 8000d52:	429e      	cmp	r6, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x94>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d5e:	f080 80fc 	bcs.w	8000f5a <__udivmoddi4+0x282>
 8000d62:	429e      	cmp	r6, r3
 8000d64:	f240 80f9 	bls.w	8000f5a <__udivmoddi4+0x282>
 8000d68:	4463      	add	r3, ip
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d72:	2100      	movs	r1, #0
 8000d74:	b11d      	cbz	r5, 8000d7e <__udivmoddi4+0xa6>
 8000d76:	40d3      	lsrs	r3, r2
 8000d78:	2200      	movs	r2, #0
 8000d7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d905      	bls.n	8000d92 <__udivmoddi4+0xba>
 8000d86:	b10d      	cbz	r5, 8000d8c <__udivmoddi4+0xb4>
 8000d88:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e7f5      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000d92:	fab3 f183 	clz	r1, r3
 8000d96:	2900      	cmp	r1, #0
 8000d98:	d146      	bne.n	8000e28 <__udivmoddi4+0x150>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d302      	bcc.n	8000da4 <__udivmoddi4+0xcc>
 8000d9e:	4290      	cmp	r0, r2
 8000da0:	f0c0 80f0 	bcc.w	8000f84 <__udivmoddi4+0x2ac>
 8000da4:	1a86      	subs	r6, r0, r2
 8000da6:	eb64 0303 	sbc.w	r3, r4, r3
 8000daa:	2001      	movs	r0, #1
 8000dac:	2d00      	cmp	r5, #0
 8000dae:	d0e6      	beq.n	8000d7e <__udivmoddi4+0xa6>
 8000db0:	e9c5 6300 	strd	r6, r3, [r5]
 8000db4:	e7e3      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	f040 8090 	bne.w	8000edc <__udivmoddi4+0x204>
 8000dbc:	eba1 040c 	sub.w	r4, r1, ip
 8000dc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc4:	fa1f f78c 	uxth.w	r7, ip
 8000dc8:	2101      	movs	r1, #1
 8000dca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dda:	fb07 f006 	mul.w	r0, r7, r6
 8000dde:	4298      	cmp	r0, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x11c>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x11a>
 8000dec:	4298      	cmp	r0, r3
 8000dee:	f200 80cd 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000df2:	4626      	mov	r6, r4
 8000df4:	1a1c      	subs	r4, r3, r0
 8000df6:	fa1f f38e 	uxth.w	r3, lr
 8000dfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000e02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e06:	fb00 f707 	mul.w	r7, r0, r7
 8000e0a:	429f      	cmp	r7, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x148>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e16:	d202      	bcs.n	8000e1e <__udivmoddi4+0x146>
 8000e18:	429f      	cmp	r7, r3
 8000e1a:	f200 80b0 	bhi.w	8000f7e <__udivmoddi4+0x2a6>
 8000e1e:	4620      	mov	r0, r4
 8000e20:	1bdb      	subs	r3, r3, r7
 8000e22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e26:	e7a5      	b.n	8000d74 <__udivmoddi4+0x9c>
 8000e28:	f1c1 0620 	rsb	r6, r1, #32
 8000e2c:	408b      	lsls	r3, r1
 8000e2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e32:	431f      	orrs	r7, r3
 8000e34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e38:	fa04 f301 	lsl.w	r3, r4, r1
 8000e3c:	ea43 030c 	orr.w	r3, r3, ip
 8000e40:	40f4      	lsrs	r4, r6
 8000e42:	fa00 f801 	lsl.w	r8, r0, r1
 8000e46:	0c38      	lsrs	r0, r7, #16
 8000e48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e50:	fa1f fc87 	uxth.w	ip, r7
 8000e54:	fb00 441e 	mls	r4, r0, lr, r4
 8000e58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e60:	45a1      	cmp	r9, r4
 8000e62:	fa02 f201 	lsl.w	r2, r2, r1
 8000e66:	d90a      	bls.n	8000e7e <__udivmoddi4+0x1a6>
 8000e68:	193c      	adds	r4, r7, r4
 8000e6a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e6e:	f080 8084 	bcs.w	8000f7a <__udivmoddi4+0x2a2>
 8000e72:	45a1      	cmp	r9, r4
 8000e74:	f240 8081 	bls.w	8000f7a <__udivmoddi4+0x2a2>
 8000e78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e7c:	443c      	add	r4, r7
 8000e7e:	eba4 0409 	sub.w	r4, r4, r9
 8000e82:	fa1f f983 	uxth.w	r9, r3
 8000e86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e96:	45a4      	cmp	ip, r4
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x1d2>
 8000e9a:	193c      	adds	r4, r7, r4
 8000e9c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ea0:	d267      	bcs.n	8000f72 <__udivmoddi4+0x29a>
 8000ea2:	45a4      	cmp	ip, r4
 8000ea4:	d965      	bls.n	8000f72 <__udivmoddi4+0x29a>
 8000ea6:	3b02      	subs	r3, #2
 8000ea8:	443c      	add	r4, r7
 8000eaa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eae:	fba0 9302 	umull	r9, r3, r0, r2
 8000eb2:	eba4 040c 	sub.w	r4, r4, ip
 8000eb6:	429c      	cmp	r4, r3
 8000eb8:	46ce      	mov	lr, r9
 8000eba:	469c      	mov	ip, r3
 8000ebc:	d351      	bcc.n	8000f62 <__udivmoddi4+0x28a>
 8000ebe:	d04e      	beq.n	8000f5e <__udivmoddi4+0x286>
 8000ec0:	b155      	cbz	r5, 8000ed8 <__udivmoddi4+0x200>
 8000ec2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eca:	fa04 f606 	lsl.w	r6, r4, r6
 8000ece:	40cb      	lsrs	r3, r1
 8000ed0:	431e      	orrs	r6, r3
 8000ed2:	40cc      	lsrs	r4, r1
 8000ed4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	e750      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000edc:	f1c2 0320 	rsb	r3, r2, #32
 8000ee0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eec:	4094      	lsls	r4, r2
 8000eee:	430c      	orrs	r4, r1
 8000ef0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef8:	fa1f f78c 	uxth.w	r7, ip
 8000efc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f00:	fb08 3110 	mls	r1, r8, r0, r3
 8000f04:	0c23      	lsrs	r3, r4, #16
 8000f06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f0a:	fb00 f107 	mul.w	r1, r0, r7
 8000f0e:	4299      	cmp	r1, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x24c>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f1a:	d22c      	bcs.n	8000f76 <__udivmoddi4+0x29e>
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	d92a      	bls.n	8000f76 <__udivmoddi4+0x29e>
 8000f20:	3802      	subs	r0, #2
 8000f22:	4463      	add	r3, ip
 8000f24:	1a5b      	subs	r3, r3, r1
 8000f26:	b2a4      	uxth	r4, r4
 8000f28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f34:	fb01 f307 	mul.w	r3, r1, r7
 8000f38:	42a3      	cmp	r3, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x276>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f44:	d213      	bcs.n	8000f6e <__udivmoddi4+0x296>
 8000f46:	42a3      	cmp	r3, r4
 8000f48:	d911      	bls.n	8000f6e <__udivmoddi4+0x296>
 8000f4a:	3902      	subs	r1, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	1ae4      	subs	r4, r4, r3
 8000f50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f54:	e739      	b.n	8000dca <__udivmoddi4+0xf2>
 8000f56:	4604      	mov	r4, r0
 8000f58:	e6f0      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e706      	b.n	8000d6c <__udivmoddi4+0x94>
 8000f5e:	45c8      	cmp	r8, r9
 8000f60:	d2ae      	bcs.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f6a:	3801      	subs	r0, #1
 8000f6c:	e7a8      	b.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f6e:	4631      	mov	r1, r6
 8000f70:	e7ed      	b.n	8000f4e <__udivmoddi4+0x276>
 8000f72:	4603      	mov	r3, r0
 8000f74:	e799      	b.n	8000eaa <__udivmoddi4+0x1d2>
 8000f76:	4630      	mov	r0, r6
 8000f78:	e7d4      	b.n	8000f24 <__udivmoddi4+0x24c>
 8000f7a:	46d6      	mov	lr, sl
 8000f7c:	e77f      	b.n	8000e7e <__udivmoddi4+0x1a6>
 8000f7e:	4463      	add	r3, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e74d      	b.n	8000e20 <__udivmoddi4+0x148>
 8000f84:	4606      	mov	r6, r0
 8000f86:	4623      	mov	r3, r4
 8000f88:	4608      	mov	r0, r1
 8000f8a:	e70f      	b.n	8000dac <__udivmoddi4+0xd4>
 8000f8c:	3e02      	subs	r6, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	e730      	b.n	8000df4 <__udivmoddi4+0x11c>
 8000f92:	bf00      	nop

08000f94 <selfrel_offset31>:
 8000f94:	6803      	ldr	r3, [r0, #0]
 8000f96:	005a      	lsls	r2, r3, #1
 8000f98:	bf4c      	ite	mi
 8000f9a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8000f9e:	f023 4300 	bicpl.w	r3, r3, #2147483648	@ 0x80000000
 8000fa2:	4418      	add	r0, r3
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <search_EIT_table>:
 8000fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fac:	b349      	cbz	r1, 8001002 <search_EIT_table+0x5a>
 8000fae:	1e4f      	subs	r7, r1, #1
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	4615      	mov	r5, r2
 8000fb4:	463e      	mov	r6, r7
 8000fb6:	f04f 0900 	mov.w	r9, #0
 8000fba:	eb09 0106 	add.w	r1, r9, r6
 8000fbe:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000fc2:	1049      	asrs	r1, r1, #1
 8000fc4:	eb04 08c1 	add.w	r8, r4, r1, lsl #3
 8000fc8:	4640      	mov	r0, r8
 8000fca:	f7ff ffe3 	bl	8000f94 <selfrel_offset31>
 8000fce:	428f      	cmp	r7, r1
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	ea4f 00c1 	mov.w	r0, r1, lsl #3
 8000fd6:	d00f      	beq.n	8000ff8 <search_EIT_table+0x50>
 8000fd8:	3008      	adds	r0, #8
 8000fda:	42ab      	cmp	r3, r5
 8000fdc:	4420      	add	r0, r4
 8000fde:	d807      	bhi.n	8000ff0 <search_EIT_table+0x48>
 8000fe0:	f7ff ffd8 	bl	8000f94 <selfrel_offset31>
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	42a8      	cmp	r0, r5
 8000fe8:	d208      	bcs.n	8000ffc <search_EIT_table+0x54>
 8000fea:	f101 0901 	add.w	r9, r1, #1
 8000fee:	e7e4      	b.n	8000fba <search_EIT_table+0x12>
 8000ff0:	4589      	cmp	r9, r1
 8000ff2:	d006      	beq.n	8001002 <search_EIT_table+0x5a>
 8000ff4:	1e4e      	subs	r6, r1, #1
 8000ff6:	e7e0      	b.n	8000fba <search_EIT_table+0x12>
 8000ff8:	42ab      	cmp	r3, r5
 8000ffa:	d8f9      	bhi.n	8000ff0 <search_EIT_table+0x48>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001002:	f04f 0800 	mov.w	r8, #0
 8001006:	4640      	mov	r0, r8
 8001008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800100c <__gnu_unwind_get_pr_addr>:
 800100c:	2801      	cmp	r0, #1
 800100e:	d007      	beq.n	8001020 <__gnu_unwind_get_pr_addr+0x14>
 8001010:	2802      	cmp	r0, #2
 8001012:	d007      	beq.n	8001024 <__gnu_unwind_get_pr_addr+0x18>
 8001014:	4b04      	ldr	r3, [pc, #16]	@ (8001028 <__gnu_unwind_get_pr_addr+0x1c>)
 8001016:	2800      	cmp	r0, #0
 8001018:	bf0c      	ite	eq
 800101a:	4618      	moveq	r0, r3
 800101c:	2000      	movne	r0, #0
 800101e:	4770      	bx	lr
 8001020:	4802      	ldr	r0, [pc, #8]	@ (800102c <__gnu_unwind_get_pr_addr+0x20>)
 8001022:	4770      	bx	lr
 8001024:	4802      	ldr	r0, [pc, #8]	@ (8001030 <__gnu_unwind_get_pr_addr+0x24>)
 8001026:	4770      	bx	lr
 8001028:	080016d5 	.word	0x080016d5
 800102c:	080016d9 	.word	0x080016d9
 8001030:	080016dd 	.word	0x080016dd

08001034 <get_eit_entry>:
 8001034:	b530      	push	{r4, r5, lr}
 8001036:	4b21      	ldr	r3, [pc, #132]	@ (80010bc <get_eit_entry+0x88>)
 8001038:	b083      	sub	sp, #12
 800103a:	4604      	mov	r4, r0
 800103c:	1e8d      	subs	r5, r1, #2
 800103e:	b31b      	cbz	r3, 8001088 <get_eit_entry+0x54>
 8001040:	a901      	add	r1, sp, #4
 8001042:	4628      	mov	r0, r5
 8001044:	f3af 8000 	nop.w
 8001048:	b388      	cbz	r0, 80010ae <get_eit_entry+0x7a>
 800104a:	9901      	ldr	r1, [sp, #4]
 800104c:	462a      	mov	r2, r5
 800104e:	f7ff ffab 	bl	8000fa8 <search_EIT_table>
 8001052:	4601      	mov	r1, r0
 8001054:	b358      	cbz	r0, 80010ae <get_eit_entry+0x7a>
 8001056:	f7ff ff9d 	bl	8000f94 <selfrel_offset31>
 800105a:	684b      	ldr	r3, [r1, #4]
 800105c:	64a0      	str	r0, [r4, #72]	@ 0x48
 800105e:	2b01      	cmp	r3, #1
 8001060:	d028      	beq.n	80010b4 <get_eit_entry+0x80>
 8001062:	2b00      	cmp	r3, #0
 8001064:	f101 0004 	add.w	r0, r1, #4
 8001068:	db1f      	blt.n	80010aa <get_eit_entry+0x76>
 800106a:	f7ff ff93 	bl	8000f94 <selfrel_offset31>
 800106e:	2300      	movs	r3, #0
 8001070:	6523      	str	r3, [r4, #80]	@ 0x50
 8001072:	6803      	ldr	r3, [r0, #0]
 8001074:	64e0      	str	r0, [r4, #76]	@ 0x4c
 8001076:	2b00      	cmp	r3, #0
 8001078:	db0d      	blt.n	8001096 <get_eit_entry+0x62>
 800107a:	f7ff ff8b 	bl	8000f94 <selfrel_offset31>
 800107e:	4603      	mov	r3, r0
 8001080:	2000      	movs	r0, #0
 8001082:	6123      	str	r3, [r4, #16]
 8001084:	b003      	add	sp, #12
 8001086:	bd30      	pop	{r4, r5, pc}
 8001088:	4b0d      	ldr	r3, [pc, #52]	@ (80010c0 <get_eit_entry+0x8c>)
 800108a:	490e      	ldr	r1, [pc, #56]	@ (80010c4 <get_eit_entry+0x90>)
 800108c:	1ac9      	subs	r1, r1, r3
 800108e:	10c9      	asrs	r1, r1, #3
 8001090:	4618      	mov	r0, r3
 8001092:	9101      	str	r1, [sp, #4]
 8001094:	e7da      	b.n	800104c <get_eit_entry+0x18>
 8001096:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800109a:	f7ff ffb7 	bl	800100c <__gnu_unwind_get_pr_addr>
 800109e:	4603      	mov	r3, r0
 80010a0:	b128      	cbz	r0, 80010ae <get_eit_entry+0x7a>
 80010a2:	2000      	movs	r0, #0
 80010a4:	6123      	str	r3, [r4, #16]
 80010a6:	b003      	add	sp, #12
 80010a8:	bd30      	pop	{r4, r5, pc}
 80010aa:	2301      	movs	r3, #1
 80010ac:	e7e0      	b.n	8001070 <get_eit_entry+0x3c>
 80010ae:	2300      	movs	r3, #0
 80010b0:	2009      	movs	r0, #9
 80010b2:	e7e6      	b.n	8001082 <get_eit_entry+0x4e>
 80010b4:	2300      	movs	r3, #0
 80010b6:	2005      	movs	r0, #5
 80010b8:	e7e3      	b.n	8001082 <get_eit_entry+0x4e>
 80010ba:	bf00      	nop
 80010bc:	00000000 	.word	0x00000000
 80010c0:	08017e80 	.word	0x08017e80
 80010c4:	08018bf0 	.word	0x08018bf0

080010c8 <restore_non_core_regs>:
 80010c8:	6803      	ldr	r3, [r0, #0]
 80010ca:	07da      	lsls	r2, r3, #31
 80010cc:	b510      	push	{r4, lr}
 80010ce:	4604      	mov	r4, r0
 80010d0:	d406      	bmi.n	80010e0 <restore_non_core_regs+0x18>
 80010d2:	079b      	lsls	r3, r3, #30
 80010d4:	f100 0048 	add.w	r0, r0, #72	@ 0x48
 80010d8:	d509      	bpl.n	80010ee <restore_non_core_regs+0x26>
 80010da:	f000 fc69 	bl	80019b0 <__gnu_Unwind_Restore_VFP_D>
 80010de:	6823      	ldr	r3, [r4, #0]
 80010e0:	0759      	lsls	r1, r3, #29
 80010e2:	d509      	bpl.n	80010f8 <restore_non_core_regs+0x30>
 80010e4:	071a      	lsls	r2, r3, #28
 80010e6:	d50e      	bpl.n	8001106 <restore_non_core_regs+0x3e>
 80010e8:	06db      	lsls	r3, r3, #27
 80010ea:	d513      	bpl.n	8001114 <restore_non_core_regs+0x4c>
 80010ec:	bd10      	pop	{r4, pc}
 80010ee:	f000 fc57 	bl	80019a0 <__gnu_Unwind_Restore_VFP>
 80010f2:	6823      	ldr	r3, [r4, #0]
 80010f4:	0759      	lsls	r1, r3, #29
 80010f6:	d4f5      	bmi.n	80010e4 <restore_non_core_regs+0x1c>
 80010f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80010fc:	f000 fc60 	bl	80019c0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001100:	6823      	ldr	r3, [r4, #0]
 8001102:	071a      	lsls	r2, r3, #28
 8001104:	d4f0      	bmi.n	80010e8 <restore_non_core_regs+0x20>
 8001106:	f504 70a8 	add.w	r0, r4, #336	@ 0x150
 800110a:	f000 fc61 	bl	80019d0 <__gnu_Unwind_Restore_WMMXD>
 800110e:	6823      	ldr	r3, [r4, #0]
 8001110:	06db      	lsls	r3, r3, #27
 8001112:	d4eb      	bmi.n	80010ec <restore_non_core_regs+0x24>
 8001114:	f504 70e8 	add.w	r0, r4, #464	@ 0x1d0
 8001118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800111c:	f000 bc9c 	b.w	8001a58 <__gnu_Unwind_Restore_WMMXC>

08001120 <__gnu_unwind_24bit.constprop.0>:
 8001120:	2009      	movs	r0, #9
 8001122:	4770      	bx	lr

08001124 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 8001124:	4603      	mov	r3, r0
 8001126:	6800      	ldr	r0, [r0, #0]
 8001128:	b100      	cbz	r0, 800112c <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 800112a:	4418      	add	r0, r3
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop

08001130 <_Unwind_DebugHook>:
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop

08001134 <unwind_phase2>:
 8001134:	b570      	push	{r4, r5, r6, lr}
 8001136:	4604      	mov	r4, r0
 8001138:	460e      	mov	r6, r1
 800113a:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800113c:	4620      	mov	r0, r4
 800113e:	f7ff ff79 	bl	8001034 <get_eit_entry>
 8001142:	4605      	mov	r5, r0
 8001144:	b988      	cbnz	r0, 800116a <unwind_phase2+0x36>
 8001146:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8001148:	6162      	str	r2, [r4, #20]
 800114a:	6923      	ldr	r3, [r4, #16]
 800114c:	4632      	mov	r2, r6
 800114e:	4621      	mov	r1, r4
 8001150:	2001      	movs	r0, #1
 8001152:	4798      	blx	r3
 8001154:	2808      	cmp	r0, #8
 8001156:	d0f0      	beq.n	800113a <unwind_phase2+0x6>
 8001158:	2807      	cmp	r0, #7
 800115a:	d106      	bne.n	800116a <unwind_phase2+0x36>
 800115c:	4628      	mov	r0, r5
 800115e:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 8001160:	f7ff ffe6 	bl	8001130 <_Unwind_DebugHook>
 8001164:	1d30      	adds	r0, r6, #4
 8001166:	f000 fc0f 	bl	8001988 <__restore_core_regs>
 800116a:	f011 fbaf 	bl	80128cc <abort>
 800116e:	bf00      	nop

08001170 <unwind_phase2_forced>:
 8001170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001174:	1d0d      	adds	r5, r1, #4
 8001176:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800117a:	f8d0 9018 	ldr.w	r9, [r0, #24]
 800117e:	4607      	mov	r7, r0
 8001180:	4614      	mov	r4, r2
 8001182:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001184:	f5ad 7d72 	sub.w	sp, sp, #968	@ 0x3c8
 8001188:	f10d 0c0c 	add.w	ip, sp, #12
 800118c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001190:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001192:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001196:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001198:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800119c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011a0:	ae02      	add	r6, sp, #8
 80011a2:	f04f 0e00 	mov.w	lr, #0
 80011a6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80011aa:	f8c6 e000 	str.w	lr, [r6]
 80011ae:	e020      	b.n	80011f2 <unwind_phase2_forced+0x82>
 80011b0:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80011b8:	4631      	mov	r1, r6
 80011ba:	a87a      	add	r0, sp, #488	@ 0x1e8
 80011bc:	f012 fa8b 	bl	80136d6 <memcpy>
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	aa7a      	add	r2, sp, #488	@ 0x1e8
 80011c4:	4639      	mov	r1, r7
 80011c6:	4650      	mov	r0, sl
 80011c8:	4798      	blx	r3
 80011ca:	9b88      	ldr	r3, [sp, #544]	@ 0x220
 80011cc:	6473      	str	r3, [r6, #68]	@ 0x44
 80011ce:	4621      	mov	r1, r4
 80011d0:	e9cd 6900 	strd	r6, r9, [sp]
 80011d4:	4605      	mov	r5, r0
 80011d6:	463b      	mov	r3, r7
 80011d8:	463a      	mov	r2, r7
 80011da:	2001      	movs	r0, #1
 80011dc:	47c0      	blx	r8
 80011de:	4604      	mov	r4, r0
 80011e0:	bb18      	cbnz	r0, 800122a <unwind_phase2_forced+0xba>
 80011e2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80011e6:	a97a      	add	r1, sp, #488	@ 0x1e8
 80011e8:	4630      	mov	r0, r6
 80011ea:	f012 fa74 	bl	80136d6 <memcpy>
 80011ee:	2d08      	cmp	r5, #8
 80011f0:	d119      	bne.n	8001226 <unwind_phase2_forced+0xb6>
 80011f2:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 80011f4:	4638      	mov	r0, r7
 80011f6:	f7ff ff1d 	bl	8001034 <get_eit_entry>
 80011fa:	3409      	adds	r4, #9
 80011fc:	fa5f fa84 	uxtb.w	sl, r4
 8001200:	4605      	mov	r5, r0
 8001202:	2800      	cmp	r0, #0
 8001204:	d0d4      	beq.n	80011b0 <unwind_phase2_forced+0x40>
 8001206:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8001208:	6473      	str	r3, [r6, #68]	@ 0x44
 800120a:	463a      	mov	r2, r7
 800120c:	e9cd 6900 	strd	r6, r9, [sp]
 8001210:	463b      	mov	r3, r7
 8001212:	f04a 0110 	orr.w	r1, sl, #16
 8001216:	2001      	movs	r0, #1
 8001218:	47c0      	blx	r8
 800121a:	b930      	cbnz	r0, 800122a <unwind_phase2_forced+0xba>
 800121c:	4628      	mov	r0, r5
 800121e:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 8001222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001226:	2d07      	cmp	r5, #7
 8001228:	d005      	beq.n	8001236 <unwind_phase2_forced+0xc6>
 800122a:	2509      	movs	r5, #9
 800122c:	4628      	mov	r0, r5
 800122e:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 8001232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001236:	4620      	mov	r0, r4
 8001238:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800123a:	f7ff ff79 	bl	8001130 <_Unwind_DebugHook>
 800123e:	a803      	add	r0, sp, #12
 8001240:	f000 fba2 	bl	8001988 <__restore_core_regs>

08001244 <_Unwind_GetCFA>:
 8001244:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8001246:	4770      	bx	lr

08001248 <__gnu_Unwind_RaiseException>:
 8001248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124a:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800124c:	640b      	str	r3, [r1, #64]	@ 0x40
 800124e:	f101 0c04 	add.w	ip, r1, #4
 8001252:	460e      	mov	r6, r1
 8001254:	4605      	mov	r5, r0
 8001256:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800125a:	b0f9      	sub	sp, #484	@ 0x1e4
 800125c:	ac01      	add	r4, sp, #4
 800125e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001260:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001266:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800126a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800126c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8001270:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001274:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001278:	9700      	str	r7, [sp, #0]
 800127a:	e006      	b.n	800128a <__gnu_Unwind_RaiseException+0x42>
 800127c:	692b      	ldr	r3, [r5, #16]
 800127e:	466a      	mov	r2, sp
 8001280:	4629      	mov	r1, r5
 8001282:	4798      	blx	r3
 8001284:	2808      	cmp	r0, #8
 8001286:	4604      	mov	r4, r0
 8001288:	d108      	bne.n	800129c <__gnu_Unwind_RaiseException+0x54>
 800128a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800128c:	4628      	mov	r0, r5
 800128e:	f7ff fed1 	bl	8001034 <get_eit_entry>
 8001292:	2800      	cmp	r0, #0
 8001294:	d0f2      	beq.n	800127c <__gnu_Unwind_RaiseException+0x34>
 8001296:	2009      	movs	r0, #9
 8001298:	b079      	add	sp, #484	@ 0x1e4
 800129a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800129c:	4668      	mov	r0, sp
 800129e:	f7ff ff13 	bl	80010c8 <restore_non_core_regs>
 80012a2:	2c06      	cmp	r4, #6
 80012a4:	d1f7      	bne.n	8001296 <__gnu_Unwind_RaiseException+0x4e>
 80012a6:	4631      	mov	r1, r6
 80012a8:	4628      	mov	r0, r5
 80012aa:	f7ff ff43 	bl	8001134 <unwind_phase2>
 80012ae:	bf00      	nop

080012b0 <__gnu_Unwind_ForcedUnwind>:
 80012b0:	60c1      	str	r1, [r0, #12]
 80012b2:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80012b4:	6182      	str	r2, [r0, #24]
 80012b6:	6419      	str	r1, [r3, #64]	@ 0x40
 80012b8:	2200      	movs	r2, #0
 80012ba:	4619      	mov	r1, r3
 80012bc:	e758      	b.n	8001170 <unwind_phase2_forced>
 80012be:	bf00      	nop

080012c0 <__gnu_Unwind_Resume>:
 80012c0:	b570      	push	{r4, r5, r6, lr}
 80012c2:	68c6      	ldr	r6, [r0, #12]
 80012c4:	6943      	ldr	r3, [r0, #20]
 80012c6:	640b      	str	r3, [r1, #64]	@ 0x40
 80012c8:	b9ae      	cbnz	r6, 80012f6 <__gnu_Unwind_Resume+0x36>
 80012ca:	6903      	ldr	r3, [r0, #16]
 80012cc:	460a      	mov	r2, r1
 80012ce:	4604      	mov	r4, r0
 80012d0:	460d      	mov	r5, r1
 80012d2:	4601      	mov	r1, r0
 80012d4:	2002      	movs	r0, #2
 80012d6:	4798      	blx	r3
 80012d8:	2807      	cmp	r0, #7
 80012da:	d005      	beq.n	80012e8 <__gnu_Unwind_Resume+0x28>
 80012dc:	2808      	cmp	r0, #8
 80012de:	d10f      	bne.n	8001300 <__gnu_Unwind_Resume+0x40>
 80012e0:	4629      	mov	r1, r5
 80012e2:	4620      	mov	r0, r4
 80012e4:	f7ff ff26 	bl	8001134 <unwind_phase2>
 80012e8:	4630      	mov	r0, r6
 80012ea:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 80012ec:	f7ff ff20 	bl	8001130 <_Unwind_DebugHook>
 80012f0:	1d28      	adds	r0, r5, #4
 80012f2:	f000 fb49 	bl	8001988 <__restore_core_regs>
 80012f6:	2201      	movs	r2, #1
 80012f8:	f7ff ff3a 	bl	8001170 <unwind_phase2_forced>
 80012fc:	f011 fae6 	bl	80128cc <abort>
 8001300:	f011 fae4 	bl	80128cc <abort>

08001304 <__gnu_Unwind_Resume_or_Rethrow>:
 8001304:	68c2      	ldr	r2, [r0, #12]
 8001306:	b11a      	cbz	r2, 8001310 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8001308:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 800130a:	640a      	str	r2, [r1, #64]	@ 0x40
 800130c:	2200      	movs	r2, #0
 800130e:	e72f      	b.n	8001170 <unwind_phase2_forced>
 8001310:	e79a      	b.n	8001248 <__gnu_Unwind_RaiseException>
 8001312:	bf00      	nop

08001314 <_Unwind_Complete>:
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop

08001318 <_Unwind_DeleteException>:
 8001318:	6883      	ldr	r3, [r0, #8]
 800131a:	4601      	mov	r1, r0
 800131c:	b10b      	cbz	r3, 8001322 <_Unwind_DeleteException+0xa>
 800131e:	2001      	movs	r0, #1
 8001320:	4718      	bx	r3
 8001322:	4770      	bx	lr

08001324 <_Unwind_VRS_Get>:
 8001324:	2901      	cmp	r1, #1
 8001326:	d010      	beq.n	800134a <_Unwind_VRS_Get+0x26>
 8001328:	d809      	bhi.n	800133e <_Unwind_VRS_Get+0x1a>
 800132a:	b983      	cbnz	r3, 800134e <_Unwind_VRS_Get+0x2a>
 800132c:	2a0f      	cmp	r2, #15
 800132e:	d80e      	bhi.n	800134e <_Unwind_VRS_Get+0x2a>
 8001330:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001334:	4618      	mov	r0, r3
 8001336:	6853      	ldr	r3, [r2, #4]
 8001338:	9a00      	ldr	r2, [sp, #0]
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4770      	bx	lr
 800133e:	3903      	subs	r1, #3
 8001340:	2901      	cmp	r1, #1
 8001342:	bf8c      	ite	hi
 8001344:	2002      	movhi	r0, #2
 8001346:	2001      	movls	r0, #1
 8001348:	4770      	bx	lr
 800134a:	4608      	mov	r0, r1
 800134c:	4770      	bx	lr
 800134e:	2002      	movs	r0, #2
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop

08001354 <_Unwind_GetGR>:
 8001354:	b500      	push	{lr}
 8001356:	b085      	sub	sp, #20
 8001358:	460a      	mov	r2, r1
 800135a:	2300      	movs	r3, #0
 800135c:	a903      	add	r1, sp, #12
 800135e:	9100      	str	r1, [sp, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	f7ff ffdf 	bl	8001324 <_Unwind_VRS_Get>
 8001366:	9803      	ldr	r0, [sp, #12]
 8001368:	b005      	add	sp, #20
 800136a:	f85d fb04 	ldr.w	pc, [sp], #4
 800136e:	bf00      	nop

08001370 <_Unwind_VRS_Set>:
 8001370:	2901      	cmp	r1, #1
 8001372:	d010      	beq.n	8001396 <_Unwind_VRS_Set+0x26>
 8001374:	d809      	bhi.n	800138a <_Unwind_VRS_Set+0x1a>
 8001376:	b983      	cbnz	r3, 800139a <_Unwind_VRS_Set+0x2a>
 8001378:	2a0f      	cmp	r2, #15
 800137a:	d80e      	bhi.n	800139a <_Unwind_VRS_Set+0x2a>
 800137c:	9900      	ldr	r1, [sp, #0]
 800137e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001382:	6809      	ldr	r1, [r1, #0]
 8001384:	6051      	str	r1, [r2, #4]
 8001386:	4618      	mov	r0, r3
 8001388:	4770      	bx	lr
 800138a:	3903      	subs	r1, #3
 800138c:	2901      	cmp	r1, #1
 800138e:	bf8c      	ite	hi
 8001390:	2002      	movhi	r0, #2
 8001392:	2001      	movls	r0, #1
 8001394:	4770      	bx	lr
 8001396:	4608      	mov	r0, r1
 8001398:	4770      	bx	lr
 800139a:	2002      	movs	r0, #2
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop

080013a0 <_Unwind_SetGR>:
 80013a0:	b510      	push	{r4, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	2300      	movs	r3, #0
 80013a6:	ac03      	add	r4, sp, #12
 80013a8:	9203      	str	r2, [sp, #12]
 80013aa:	9400      	str	r4, [sp, #0]
 80013ac:	460a      	mov	r2, r1
 80013ae:	4619      	mov	r1, r3
 80013b0:	f7ff ffde 	bl	8001370 <_Unwind_VRS_Set>
 80013b4:	b004      	add	sp, #16
 80013b6:	bd10      	pop	{r4, pc}

080013b8 <__gnu_Unwind_Backtrace>:
 80013b8:	b570      	push	{r4, r5, r6, lr}
 80013ba:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80013bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013be:	f102 0c04 	add.w	ip, r2, #4
 80013c2:	4605      	mov	r5, r0
 80013c4:	460c      	mov	r4, r1
 80013c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80013ca:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 80013ce:	f10d 0e5c 	add.w	lr, sp, #92	@ 0x5c
 80013d2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80013d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80013da:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80013de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80013e2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80013e6:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80013ea:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80013ee:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80013f2:	9616      	str	r6, [sp, #88]	@ 0x58
 80013f4:	e010      	b.n	8001418 <__gnu_Unwind_Backtrace+0x60>
 80013f6:	f7ff ffd3 	bl	80013a0 <_Unwind_SetGR>
 80013fa:	4621      	mov	r1, r4
 80013fc:	a816      	add	r0, sp, #88	@ 0x58
 80013fe:	47a8      	blx	r5
 8001400:	4603      	mov	r3, r0
 8001402:	aa16      	add	r2, sp, #88	@ 0x58
 8001404:	4669      	mov	r1, sp
 8001406:	2008      	movs	r0, #8
 8001408:	b983      	cbnz	r3, 800142c <__gnu_Unwind_Backtrace+0x74>
 800140a:	9b04      	ldr	r3, [sp, #16]
 800140c:	4798      	blx	r3
 800140e:	2805      	cmp	r0, #5
 8001410:	4606      	mov	r6, r0
 8001412:	d00c      	beq.n	800142e <__gnu_Unwind_Backtrace+0x76>
 8001414:	2809      	cmp	r0, #9
 8001416:	d009      	beq.n	800142c <__gnu_Unwind_Backtrace+0x74>
 8001418:	9926      	ldr	r1, [sp, #152]	@ 0x98
 800141a:	4668      	mov	r0, sp
 800141c:	f7ff fe0a 	bl	8001034 <get_eit_entry>
 8001420:	4603      	mov	r3, r0
 8001422:	466a      	mov	r2, sp
 8001424:	210c      	movs	r1, #12
 8001426:	a816      	add	r0, sp, #88	@ 0x58
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0e4      	beq.n	80013f6 <__gnu_Unwind_Backtrace+0x3e>
 800142c:	2609      	movs	r6, #9
 800142e:	a816      	add	r0, sp, #88	@ 0x58
 8001430:	f7ff fe4a 	bl	80010c8 <restore_non_core_regs>
 8001434:	4630      	mov	r0, r6
 8001436:	f50d 7d0e 	add.w	sp, sp, #568	@ 0x238
 800143a:	bd70      	pop	{r4, r5, r6, pc}

0800143c <__gnu_unwind_pr_common>:
 800143c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001440:	4693      	mov	fp, r2
 8001442:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8001444:	b089      	sub	sp, #36	@ 0x24
 8001446:	460d      	mov	r5, r1
 8001448:	f852 1b04 	ldr.w	r1, [r2], #4
 800144c:	9206      	str	r2, [sp, #24]
 800144e:	f000 0c03 	and.w	ip, r0, #3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d079      	beq.n	800154a <__gnu_unwind_pr_common+0x10e>
 8001456:	0c0c      	lsrs	r4, r1, #16
 8001458:	f88d 401d 	strb.w	r4, [sp, #29]
 800145c:	0409      	lsls	r1, r1, #16
 800145e:	b2e4      	uxtb	r4, r4
 8001460:	9105      	str	r1, [sp, #20]
 8001462:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8001466:	2102      	movs	r1, #2
 8001468:	6d2f      	ldr	r7, [r5, #80]	@ 0x50
 800146a:	f88d 101c 	strb.w	r1, [sp, #28]
 800146e:	f1bc 0f02 	cmp.w	ip, #2
 8001472:	bf08      	it	eq
 8001474:	6baa      	ldreq	r2, [r5, #56]	@ 0x38
 8001476:	f017 0701 	ands.w	r7, r7, #1
 800147a:	d00c      	beq.n	8001496 <__gnu_unwind_pr_common+0x5a>
 800147c:	a905      	add	r1, sp, #20
 800147e:	4658      	mov	r0, fp
 8001480:	f000 fb84 	bl	8001b8c <__gnu_unwind_execute>
 8001484:	b918      	cbnz	r0, 800148e <__gnu_unwind_pr_common+0x52>
 8001486:	2008      	movs	r0, #8
 8001488:	b009      	add	sp, #36	@ 0x24
 800148a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800148e:	2009      	movs	r0, #9
 8001490:	b009      	add	sp, #36	@ 0x24
 8001492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001496:	6816      	ldr	r6, [r2, #0]
 8001498:	2e00      	cmp	r6, #0
 800149a:	d0ef      	beq.n	800147c <__gnu_unwind_pr_common+0x40>
 800149c:	f000 0108 	and.w	r1, r0, #8
 80014a0:	9101      	str	r1, [sp, #4]
 80014a2:	46b2      	mov	sl, r6
 80014a4:	9702      	str	r7, [sp, #8]
 80014a6:	4664      	mov	r4, ip
 80014a8:	4699      	mov	r9, r3
 80014aa:	f1b9 0f02 	cmp.w	r9, #2
 80014ae:	d048      	beq.n	8001542 <__gnu_unwind_pr_common+0x106>
 80014b0:	f8b2 a000 	ldrh.w	sl, [r2]
 80014b4:	8856      	ldrh	r6, [r2, #2]
 80014b6:	f102 0804 	add.w	r8, r2, #4
 80014ba:	6caa      	ldr	r2, [r5, #72]	@ 0x48
 80014bc:	f026 0301 	bic.w	r3, r6, #1
 80014c0:	210f      	movs	r1, #15
 80014c2:	4658      	mov	r0, fp
 80014c4:	189f      	adds	r7, r3, r2
 80014c6:	f7ff ff45 	bl	8001354 <_Unwind_GetGR>
 80014ca:	4287      	cmp	r7, r0
 80014cc:	d837      	bhi.n	800153e <__gnu_unwind_pr_common+0x102>
 80014ce:	f02a 0201 	bic.w	r2, sl, #1
 80014d2:	443a      	add	r2, r7
 80014d4:	4282      	cmp	r2, r0
 80014d6:	bf94      	ite	ls
 80014d8:	2200      	movls	r2, #0
 80014da:	2201      	movhi	r2, #1
 80014dc:	0073      	lsls	r3, r6, #1
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	f00a 0a01 	and.w	sl, sl, #1
 80014e6:	ea43 030a 	orr.w	r3, r3, sl
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d047      	beq.n	800157e <__gnu_unwind_pr_common+0x142>
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d031      	beq.n	8001556 <__gnu_unwind_pr_common+0x11a>
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1cb      	bne.n	800148e <__gnu_unwind_pr_common+0x52>
 80014f6:	b114      	cbz	r4, 80014fe <__gnu_unwind_pr_common+0xc2>
 80014f8:	2a00      	cmp	r2, #0
 80014fa:	f040 80c9 	bne.w	8001690 <__gnu_unwind_pr_common+0x254>
 80014fe:	f108 0204 	add.w	r2, r8, #4
 8001502:	f8d2 a000 	ldr.w	sl, [r2]
 8001506:	f1ba 0f00 	cmp.w	sl, #0
 800150a:	d1ce      	bne.n	80014aa <__gnu_unwind_pr_common+0x6e>
 800150c:	a905      	add	r1, sp, #20
 800150e:	4658      	mov	r0, fp
 8001510:	9f02      	ldr	r7, [sp, #8]
 8001512:	f000 fb3b 	bl	8001b8c <__gnu_unwind_execute>
 8001516:	2800      	cmp	r0, #0
 8001518:	d1b9      	bne.n	800148e <__gnu_unwind_pr_common+0x52>
 800151a:	2f00      	cmp	r7, #0
 800151c:	d0b3      	beq.n	8001486 <__gnu_unwind_pr_common+0x4a>
 800151e:	210f      	movs	r1, #15
 8001520:	4658      	mov	r0, fp
 8001522:	f7ff ff17 	bl	8001354 <_Unwind_GetGR>
 8001526:	210e      	movs	r1, #14
 8001528:	4602      	mov	r2, r0
 800152a:	4658      	mov	r0, fp
 800152c:	f7ff ff38 	bl	80013a0 <_Unwind_SetGR>
 8001530:	4a67      	ldr	r2, [pc, #412]	@ (80016d0 <__gnu_unwind_pr_common+0x294>)
 8001532:	210f      	movs	r1, #15
 8001534:	4658      	mov	r0, fp
 8001536:	f7ff ff33 	bl	80013a0 <_Unwind_SetGR>
 800153a:	2007      	movs	r0, #7
 800153c:	e7a8      	b.n	8001490 <__gnu_unwind_pr_common+0x54>
 800153e:	2200      	movs	r2, #0
 8001540:	e7cc      	b.n	80014dc <__gnu_unwind_pr_common+0xa0>
 8001542:	6856      	ldr	r6, [r2, #4]
 8001544:	f102 0808 	add.w	r8, r2, #8
 8001548:	e7b7      	b.n	80014ba <__gnu_unwind_pr_common+0x7e>
 800154a:	0209      	lsls	r1, r1, #8
 800154c:	9105      	str	r1, [sp, #20]
 800154e:	f88d 301d 	strb.w	r3, [sp, #29]
 8001552:	2103      	movs	r1, #3
 8001554:	e788      	b.n	8001468 <__gnu_unwind_pr_common+0x2c>
 8001556:	f8d8 6000 	ldr.w	r6, [r8]
 800155a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800155e:	2c00      	cmp	r4, #0
 8001560:	d144      	bne.n	80015ec <__gnu_unwind_pr_common+0x1b0>
 8001562:	b122      	cbz	r2, 800156e <__gnu_unwind_pr_common+0x132>
 8001564:	9a01      	ldr	r2, [sp, #4]
 8001566:	2a00      	cmp	r2, #0
 8001568:	d05a      	beq.n	8001620 <__gnu_unwind_pr_common+0x1e4>
 800156a:	2b00      	cmp	r3, #0
 800156c:	d058      	beq.n	8001620 <__gnu_unwind_pr_common+0x1e4>
 800156e:	2e00      	cmp	r6, #0
 8001570:	da01      	bge.n	8001576 <__gnu_unwind_pr_common+0x13a>
 8001572:	f108 0804 	add.w	r8, r8, #4
 8001576:	3301      	adds	r3, #1
 8001578:	eb08 0283 	add.w	r2, r8, r3, lsl #2
 800157c:	e7c1      	b.n	8001502 <__gnu_unwind_pr_common+0xc6>
 800157e:	b9ec      	cbnz	r4, 80015bc <__gnu_unwind_pr_common+0x180>
 8001580:	b1ca      	cbz	r2, 80015b6 <__gnu_unwind_pr_common+0x17a>
 8001582:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001586:	f8d8 2000 	ldr.w	r2, [r8]
 800158a:	1c99      	adds	r1, r3, #2
 800158c:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8001590:	f43f af7d 	beq.w	800148e <__gnu_unwind_pr_common+0x52>
 8001594:	f105 0158 	add.w	r1, r5, #88	@ 0x58
 8001598:	3301      	adds	r3, #1
 800159a:	9104      	str	r1, [sp, #16]
 800159c:	f000 808b 	beq.w	80016b6 <__gnu_unwind_pr_common+0x27a>
 80015a0:	f108 0004 	add.w	r0, r8, #4
 80015a4:	f7ff fdbe 	bl	8001124 <_Unwind_decode_typeinfo_ptr.constprop.0>
 80015a8:	ab04      	add	r3, sp, #16
 80015aa:	4601      	mov	r1, r0
 80015ac:	4628      	mov	r0, r5
 80015ae:	f00f fc81 	bl	8010eb4 <__cxa_type_match>
 80015b2:	2800      	cmp	r0, #0
 80015b4:	d157      	bne.n	8001666 <__gnu_unwind_pr_common+0x22a>
 80015b6:	f108 0208 	add.w	r2, r8, #8
 80015ba:	e7a2      	b.n	8001502 <__gnu_unwind_pr_common+0xc6>
 80015bc:	210d      	movs	r1, #13
 80015be:	4658      	mov	r0, fp
 80015c0:	f7ff fec8 	bl	8001354 <_Unwind_GetGR>
 80015c4:	6a2b      	ldr	r3, [r5, #32]
 80015c6:	4283      	cmp	r3, r0
 80015c8:	d1f5      	bne.n	80015b6 <__gnu_unwind_pr_common+0x17a>
 80015ca:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80015cc:	4598      	cmp	r8, r3
 80015ce:	d1f2      	bne.n	80015b6 <__gnu_unwind_pr_common+0x17a>
 80015d0:	4640      	mov	r0, r8
 80015d2:	f7ff fcdf 	bl	8000f94 <selfrel_offset31>
 80015d6:	210f      	movs	r1, #15
 80015d8:	4602      	mov	r2, r0
 80015da:	4658      	mov	r0, fp
 80015dc:	f7ff fee0 	bl	80013a0 <_Unwind_SetGR>
 80015e0:	462a      	mov	r2, r5
 80015e2:	2100      	movs	r1, #0
 80015e4:	4658      	mov	r0, fp
 80015e6:	f7ff fedb 	bl	80013a0 <_Unwind_SetGR>
 80015ea:	e7a6      	b.n	800153a <__gnu_unwind_pr_common+0xfe>
 80015ec:	210d      	movs	r1, #13
 80015ee:	4658      	mov	r0, fp
 80015f0:	9303      	str	r3, [sp, #12]
 80015f2:	f7ff feaf 	bl	8001354 <_Unwind_GetGR>
 80015f6:	6a2a      	ldr	r2, [r5, #32]
 80015f8:	9b03      	ldr	r3, [sp, #12]
 80015fa:	4282      	cmp	r2, r0
 80015fc:	d1b7      	bne.n	800156e <__gnu_unwind_pr_common+0x132>
 80015fe:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8001600:	4590      	cmp	r8, r2
 8001602:	d1b4      	bne.n	800156e <__gnu_unwind_pr_common+0x132>
 8001604:	2700      	movs	r7, #0
 8001606:	2204      	movs	r2, #4
 8001608:	e9c5 720b 	strd	r7, r2, [r5, #44]	@ 0x2c
 800160c:	4442      	add	r2, r8
 800160e:	62ab      	str	r3, [r5, #40]	@ 0x28
 8001610:	636a      	str	r2, [r5, #52]	@ 0x34
 8001612:	f8d8 2000 	ldr.w	r2, [r8]
 8001616:	42ba      	cmp	r2, r7
 8001618:	db55      	blt.n	80016c6 <__gnu_unwind_pr_common+0x28a>
 800161a:	2201      	movs	r2, #1
 800161c:	9202      	str	r2, [sp, #8]
 800161e:	e7aa      	b.n	8001576 <__gnu_unwind_pr_common+0x13a>
 8001620:	9403      	str	r4, [sp, #12]
 8001622:	f108 0a04 	add.w	sl, r8, #4
 8001626:	2600      	movs	r6, #0
 8001628:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800162c:	461c      	mov	r4, r3
 800162e:	e00d      	b.n	800164c <__gnu_unwind_pr_common+0x210>
 8001630:	4650      	mov	r0, sl
 8001632:	9704      	str	r7, [sp, #16]
 8001634:	f7ff fd76 	bl	8001124 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8001638:	2200      	movs	r2, #0
 800163a:	4601      	mov	r1, r0
 800163c:	ab04      	add	r3, sp, #16
 800163e:	4628      	mov	r0, r5
 8001640:	3601      	adds	r6, #1
 8001642:	f10a 0a04 	add.w	sl, sl, #4
 8001646:	f00f fc35 	bl	8010eb4 <__cxa_type_match>
 800164a:	b9e0      	cbnz	r0, 8001686 <__gnu_unwind_pr_common+0x24a>
 800164c:	42a6      	cmp	r6, r4
 800164e:	d1ef      	bne.n	8001630 <__gnu_unwind_pr_common+0x1f4>
 8001650:	210d      	movs	r1, #13
 8001652:	4658      	mov	r0, fp
 8001654:	f7ff fe7e 	bl	8001354 <_Unwind_GetGR>
 8001658:	9b04      	ldr	r3, [sp, #16]
 800165a:	f8c5 8028 	str.w	r8, [r5, #40]	@ 0x28
 800165e:	e9c5 0308 	strd	r0, r3, [r5, #32]
 8001662:	2006      	movs	r0, #6
 8001664:	e714      	b.n	8001490 <__gnu_unwind_pr_common+0x54>
 8001666:	4604      	mov	r4, r0
 8001668:	210d      	movs	r1, #13
 800166a:	4658      	mov	r0, fp
 800166c:	f7ff fe72 	bl	8001354 <_Unwind_GetGR>
 8001670:	9e04      	ldr	r6, [sp, #16]
 8001672:	6228      	str	r0, [r5, #32]
 8001674:	2c02      	cmp	r4, #2
 8001676:	bf04      	itt	eq
 8001678:	62ee      	streq	r6, [r5, #44]	@ 0x2c
 800167a:	f105 062c 	addeq.w	r6, r5, #44	@ 0x2c
 800167e:	e9c5 6809 	strd	r6, r8, [r5, #36]	@ 0x24
 8001682:	2006      	movs	r0, #6
 8001684:	e704      	b.n	8001490 <__gnu_unwind_pr_common+0x54>
 8001686:	4623      	mov	r3, r4
 8001688:	f8d8 6000 	ldr.w	r6, [r8]
 800168c:	9c03      	ldr	r4, [sp, #12]
 800168e:	e76e      	b.n	800156e <__gnu_unwind_pr_common+0x132>
 8001690:	4640      	mov	r0, r8
 8001692:	f7ff fc7f 	bl	8000f94 <selfrel_offset31>
 8001696:	f108 0204 	add.w	r2, r8, #4
 800169a:	4604      	mov	r4, r0
 800169c:	63aa      	str	r2, [r5, #56]	@ 0x38
 800169e:	4628      	mov	r0, r5
 80016a0:	f00f fc66 	bl	8010f70 <__cxa_begin_cleanup>
 80016a4:	2800      	cmp	r0, #0
 80016a6:	f43f aef2 	beq.w	800148e <__gnu_unwind_pr_common+0x52>
 80016aa:	4622      	mov	r2, r4
 80016ac:	210f      	movs	r1, #15
 80016ae:	4658      	mov	r0, fp
 80016b0:	f7ff fe76 	bl	80013a0 <_Unwind_SetGR>
 80016b4:	e741      	b.n	800153a <__gnu_unwind_pr_common+0xfe>
 80016b6:	460c      	mov	r4, r1
 80016b8:	4658      	mov	r0, fp
 80016ba:	210d      	movs	r1, #13
 80016bc:	f7ff fe4a 	bl	8001354 <_Unwind_GetGR>
 80016c0:	4626      	mov	r6, r4
 80016c2:	6228      	str	r0, [r5, #32]
 80016c4:	e7db      	b.n	800167e <__gnu_unwind_pr_common+0x242>
 80016c6:	1c58      	adds	r0, r3, #1
 80016c8:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80016cc:	e781      	b.n	80015d2 <__gnu_unwind_pr_common+0x196>
 80016ce:	bf00      	nop
 80016d0:	08011949 	.word	0x08011949

080016d4 <__aeabi_unwind_cpp_pr0>:
 80016d4:	2300      	movs	r3, #0
 80016d6:	e6b1      	b.n	800143c <__gnu_unwind_pr_common>

080016d8 <__aeabi_unwind_cpp_pr1>:
 80016d8:	2301      	movs	r3, #1
 80016da:	e6af      	b.n	800143c <__gnu_unwind_pr_common>

080016dc <__aeabi_unwind_cpp_pr2>:
 80016dc:	2302      	movs	r3, #2
 80016de:	e6ad      	b.n	800143c <__gnu_unwind_pr_common>

080016e0 <_Unwind_VRS_Pop>:
 80016e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016e4:	4606      	mov	r6, r0
 80016e6:	b0c3      	sub	sp, #268	@ 0x10c
 80016e8:	4615      	mov	r5, r2
 80016ea:	461c      	mov	r4, r3
 80016ec:	2904      	cmp	r1, #4
 80016ee:	f200 80d1 	bhi.w	8001894 <_Unwind_VRS_Pop+0x1b4>
 80016f2:	e8df f001 	tbb	[pc, r1]
 80016f6:	51ac      	.short	0x51ac
 80016f8:	2acf      	.short	0x2acf
 80016fa:	03          	.byte	0x03
 80016fb:	00          	.byte	0x00
 80016fc:	2c00      	cmp	r4, #0
 80016fe:	f040 80c9 	bne.w	8001894 <_Unwind_VRS_Pop+0x1b4>
 8001702:	2a10      	cmp	r2, #16
 8001704:	f200 80c6 	bhi.w	8001894 <_Unwind_VRS_Pop+0x1b4>
 8001708:	6803      	ldr	r3, [r0, #0]
 800170a:	06dc      	lsls	r4, r3, #27
 800170c:	f100 80e7 	bmi.w	80018de <_Unwind_VRS_Pop+0x1fe>
 8001710:	af20      	add	r7, sp, #128	@ 0x80
 8001712:	4638      	mov	r0, r7
 8001714:	f000 f9aa 	bl	8001a6c <__gnu_Unwind_Save_WMMXC>
 8001718:	6bb4      	ldr	r4, [r6, #56]	@ 0x38
 800171a:	4639      	mov	r1, r7
 800171c:	2300      	movs	r3, #0
 800171e:	f04f 0c01 	mov.w	ip, #1
 8001722:	fa0c f203 	lsl.w	r2, ip, r3
 8001726:	422a      	tst	r2, r5
 8001728:	4620      	mov	r0, r4
 800172a:	f103 0301 	add.w	r3, r3, #1
 800172e:	d003      	beq.n	8001738 <_Unwind_VRS_Pop+0x58>
 8001730:	f850 2b04 	ldr.w	r2, [r0], #4
 8001734:	600a      	str	r2, [r1, #0]
 8001736:	4604      	mov	r4, r0
 8001738:	2b04      	cmp	r3, #4
 800173a:	f101 0104 	add.w	r1, r1, #4
 800173e:	d1f0      	bne.n	8001722 <_Unwind_VRS_Pop+0x42>
 8001740:	63b4      	str	r4, [r6, #56]	@ 0x38
 8001742:	4638      	mov	r0, r7
 8001744:	f000 f988 	bl	8001a58 <__gnu_Unwind_Restore_WMMXC>
 8001748:	e099      	b.n	800187e <_Unwind_VRS_Pop+0x19e>
 800174a:	2c03      	cmp	r4, #3
 800174c:	f040 80a2 	bne.w	8001894 <_Unwind_VRS_Pop+0x1b4>
 8001750:	b294      	uxth	r4, r2
 8001752:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8001756:	2b10      	cmp	r3, #16
 8001758:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800175c:	f200 809a 	bhi.w	8001894 <_Unwind_VRS_Pop+0x1b4>
 8001760:	6803      	ldr	r3, [r0, #0]
 8001762:	071f      	lsls	r7, r3, #28
 8001764:	f100 80c3 	bmi.w	80018ee <_Unwind_VRS_Pop+0x20e>
 8001768:	af20      	add	r7, sp, #128	@ 0x80
 800176a:	4638      	mov	r0, r7
 800176c:	f000 f952 	bl	8001a14 <__gnu_Unwind_Save_WMMXD>
 8001770:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8001772:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8001776:	b154      	cbz	r4, 800178e <_Unwind_VRS_Pop+0xae>
 8001778:	460b      	mov	r3, r1
 800177a:	1ad0      	subs	r0, r2, r3
 800177c:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8001780:	00e4      	lsls	r4, r4, #3
 8001782:	581d      	ldr	r5, [r3, r0]
 8001784:	f843 5b04 	str.w	r5, [r3], #4
 8001788:	428b      	cmp	r3, r1
 800178a:	d1fa      	bne.n	8001782 <_Unwind_VRS_Pop+0xa2>
 800178c:	4422      	add	r2, r4
 800178e:	63b2      	str	r2, [r6, #56]	@ 0x38
 8001790:	4638      	mov	r0, r7
 8001792:	f000 f91d 	bl	80019d0 <__gnu_Unwind_Restore_WMMXD>
 8001796:	e072      	b.n	800187e <_Unwind_VRS_Pop+0x19e>
 8001798:	2c01      	cmp	r4, #1
 800179a:	ea4f 4812 	mov.w	r8, r2, lsr #16
 800179e:	b295      	uxth	r5, r2
 80017a0:	d071      	beq.n	8001886 <_Unwind_VRS_Pop+0x1a6>
 80017a2:	2c05      	cmp	r4, #5
 80017a4:	d176      	bne.n	8001894 <_Unwind_VRS_Pop+0x1b4>
 80017a6:	eb08 0905 	add.w	r9, r8, r5
 80017aa:	f1b9 0f20 	cmp.w	r9, #32
 80017ae:	d871      	bhi.n	8001894 <_Unwind_VRS_Pop+0x1b4>
 80017b0:	f1b8 0f0f 	cmp.w	r8, #15
 80017b4:	d872      	bhi.n	800189c <_Unwind_VRS_Pop+0x1bc>
 80017b6:	f1b9 0f10 	cmp.w	r9, #16
 80017ba:	6803      	ldr	r3, [r0, #0]
 80017bc:	f200 809f 	bhi.w	80018fe <_Unwind_VRS_Pop+0x21e>
 80017c0:	07d9      	lsls	r1, r3, #31
 80017c2:	d508      	bpl.n	80017d6 <_Unwind_VRS_Pop+0xf6>
 80017c4:	f023 0301 	bic.w	r3, r3, #1
 80017c8:	4630      	mov	r0, r6
 80017ca:	f043 0302 	orr.w	r3, r3, #2
 80017ce:	f840 3b48 	str.w	r3, [r0], #72
 80017d2:	f000 f8f1 	bl	80019b8 <__gnu_Unwind_Save_VFP_D>
 80017d6:	af20      	add	r7, sp, #128	@ 0x80
 80017d8:	4638      	mov	r0, r7
 80017da:	f000 f8ed 	bl	80019b8 <__gnu_Unwind_Save_VFP_D>
 80017de:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 80017e0:	2d00      	cmp	r5, #0
 80017e2:	f000 80b9 	beq.w	8001958 <_Unwind_VRS_Pop+0x278>
 80017e6:	006d      	lsls	r5, r5, #1
 80017e8:	1e6a      	subs	r2, r5, #1
 80017ea:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 80017ee:	2500      	movs	r5, #0
 80017f0:	3201      	adds	r2, #1
 80017f2:	3904      	subs	r1, #4
 80017f4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80017f8:	f853 0b04 	ldr.w	r0, [r3], #4
 80017fc:	f841 0f04 	str.w	r0, [r1, #4]!
 8001800:	4293      	cmp	r3, r2
 8001802:	d1f9      	bne.n	80017f8 <_Unwind_VRS_Pop+0x118>
 8001804:	2d00      	cmp	r5, #0
 8001806:	f000 80a1 	beq.w	800194c <_Unwind_VRS_Pop+0x26c>
 800180a:	4641      	mov	r1, r8
 800180c:	2910      	cmp	r1, #16
 800180e:	bf38      	it	cc
 8001810:	2110      	movcc	r1, #16
 8001812:	006b      	lsls	r3, r5, #1
 8001814:	3910      	subs	r1, #16
 8001816:	466f      	mov	r7, sp
 8001818:	3b01      	subs	r3, #1
 800181a:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800181e:	3301      	adds	r3, #1
 8001820:	3904      	subs	r1, #4
 8001822:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001826:	f852 0b04 	ldr.w	r0, [r2], #4
 800182a:	f841 0f04 	str.w	r0, [r1, #4]!
 800182e:	429a      	cmp	r2, r3
 8001830:	d1f9      	bne.n	8001826 <_Unwind_VRS_Pop+0x146>
 8001832:	2c01      	cmp	r4, #1
 8001834:	f000 8088 	beq.w	8001948 <_Unwind_VRS_Pop+0x268>
 8001838:	f1b8 0f0f 	cmp.w	r8, #15
 800183c:	63b2      	str	r2, [r6, #56]	@ 0x38
 800183e:	d802      	bhi.n	8001846 <_Unwind_VRS_Pop+0x166>
 8001840:	a820      	add	r0, sp, #128	@ 0x80
 8001842:	f000 f8b5 	bl	80019b0 <__gnu_Unwind_Restore_VFP_D>
 8001846:	4638      	mov	r0, r7
 8001848:	f000 f8ba 	bl	80019c0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800184c:	e017      	b.n	800187e <_Unwind_VRS_Pop+0x19e>
 800184e:	bb0c      	cbnz	r4, 8001894 <_Unwind_VRS_Pop+0x1b4>
 8001850:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001852:	4623      	mov	r3, r4
 8001854:	fa1f fc82 	uxth.w	ip, r2
 8001858:	2401      	movs	r4, #1
 800185a:	1d37      	adds	r7, r6, #4
 800185c:	fa04 f103 	lsl.w	r1, r4, r3
 8001860:	ea11 0f0c 	tst.w	r1, ip
 8001864:	4602      	mov	r2, r0
 8001866:	d004      	beq.n	8001872 <_Unwind_VRS_Pop+0x192>
 8001868:	f852 1b04 	ldr.w	r1, [r2], #4
 800186c:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
 8001870:	4610      	mov	r0, r2
 8001872:	3301      	adds	r3, #1
 8001874:	2b10      	cmp	r3, #16
 8001876:	d1f1      	bne.n	800185c <_Unwind_VRS_Pop+0x17c>
 8001878:	04ac      	lsls	r4, r5, #18
 800187a:	d400      	bmi.n	800187e <_Unwind_VRS_Pop+0x19e>
 800187c:	63b0      	str	r0, [r6, #56]	@ 0x38
 800187e:	2000      	movs	r0, #0
 8001880:	b043      	add	sp, #268	@ 0x10c
 8001882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001886:	eb08 0305 	add.w	r3, r8, r5
 800188a:	2b10      	cmp	r3, #16
 800188c:	d802      	bhi.n	8001894 <_Unwind_VRS_Pop+0x1b4>
 800188e:	f1b8 0f10 	cmp.w	r8, #16
 8001892:	d114      	bne.n	80018be <_Unwind_VRS_Pop+0x1de>
 8001894:	2002      	movs	r0, #2
 8001896:	b043      	add	sp, #268	@ 0x10c
 8001898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800189c:	2d00      	cmp	r5, #0
 800189e:	d0ee      	beq.n	800187e <_Unwind_VRS_Pop+0x19e>
 80018a0:	6803      	ldr	r3, [r0, #0]
 80018a2:	075a      	lsls	r2, r3, #29
 80018a4:	d45c      	bmi.n	8001960 <_Unwind_VRS_Pop+0x280>
 80018a6:	466f      	mov	r7, sp
 80018a8:	4638      	mov	r0, r7
 80018aa:	f000 f88d 	bl	80019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80018ae:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 80018b0:	006b      	lsls	r3, r5, #1
 80018b2:	f1a8 0110 	sub.w	r1, r8, #16
 80018b6:	3b01      	subs	r3, #1
 80018b8:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80018bc:	e7af      	b.n	800181e <_Unwind_VRS_Pop+0x13e>
 80018be:	6803      	ldr	r3, [r0, #0]
 80018c0:	07da      	lsls	r2, r3, #31
 80018c2:	d459      	bmi.n	8001978 <_Unwind_VRS_Pop+0x298>
 80018c4:	af20      	add	r7, sp, #128	@ 0x80
 80018c6:	4638      	mov	r0, r7
 80018c8:	f000 f86e 	bl	80019a8 <__gnu_Unwind_Save_VFP>
 80018cc:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 80018ce:	2d00      	cmp	r5, #0
 80018d0:	d189      	bne.n	80017e6 <_Unwind_VRS_Pop+0x106>
 80018d2:	3304      	adds	r3, #4
 80018d4:	63b3      	str	r3, [r6, #56]	@ 0x38
 80018d6:	4638      	mov	r0, r7
 80018d8:	f000 f862 	bl	80019a0 <__gnu_Unwind_Restore_VFP>
 80018dc:	e7cf      	b.n	800187e <_Unwind_VRS_Pop+0x19e>
 80018de:	f023 0310 	bic.w	r3, r3, #16
 80018e2:	6003      	str	r3, [r0, #0]
 80018e4:	f500 70e8 	add.w	r0, r0, #464	@ 0x1d0
 80018e8:	f000 f8c0 	bl	8001a6c <__gnu_Unwind_Save_WMMXC>
 80018ec:	e710      	b.n	8001710 <_Unwind_VRS_Pop+0x30>
 80018ee:	f023 0308 	bic.w	r3, r3, #8
 80018f2:	6003      	str	r3, [r0, #0]
 80018f4:	f500 70a8 	add.w	r0, r0, #336	@ 0x150
 80018f8:	f000 f88c 	bl	8001a14 <__gnu_Unwind_Save_WMMXD>
 80018fc:	e734      	b.n	8001768 <_Unwind_VRS_Pop+0x88>
 80018fe:	07d9      	lsls	r1, r3, #31
 8001900:	d508      	bpl.n	8001914 <_Unwind_VRS_Pop+0x234>
 8001902:	f023 0301 	bic.w	r3, r3, #1
 8001906:	f043 0302 	orr.w	r3, r3, #2
 800190a:	f840 3b48 	str.w	r3, [r0], #72
 800190e:	f000 f853 	bl	80019b8 <__gnu_Unwind_Save_VFP_D>
 8001912:	6833      	ldr	r3, [r6, #0]
 8001914:	0758      	lsls	r0, r3, #29
 8001916:	d506      	bpl.n	8001926 <_Unwind_VRS_Pop+0x246>
 8001918:	4630      	mov	r0, r6
 800191a:	f023 0304 	bic.w	r3, r3, #4
 800191e:	f840 3bd0 	str.w	r3, [r0], #208
 8001922:	f000 f851 	bl	80019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001926:	af20      	add	r7, sp, #128	@ 0x80
 8001928:	4638      	mov	r0, r7
 800192a:	f000 f845 	bl	80019b8 <__gnu_Unwind_Save_VFP_D>
 800192e:	4668      	mov	r0, sp
 8001930:	f000 f84a 	bl	80019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001934:	f1c8 0210 	rsb	r2, r8, #16
 8001938:	0052      	lsls	r2, r2, #1
 800193a:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 800193c:	f1a9 0510 	sub.w	r5, r9, #16
 8001940:	3a01      	subs	r2, #1
 8001942:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8001946:	e753      	b.n	80017f0 <_Unwind_VRS_Pop+0x110>
 8001948:	af20      	add	r7, sp, #128	@ 0x80
 800194a:	e7c2      	b.n	80018d2 <_Unwind_VRS_Pop+0x1f2>
 800194c:	2c01      	cmp	r4, #1
 800194e:	d0c0      	beq.n	80018d2 <_Unwind_VRS_Pop+0x1f2>
 8001950:	f1b8 0f0f 	cmp.w	r8, #15
 8001954:	63b3      	str	r3, [r6, #56]	@ 0x38
 8001956:	d892      	bhi.n	800187e <_Unwind_VRS_Pop+0x19e>
 8001958:	4638      	mov	r0, r7
 800195a:	f000 f829 	bl	80019b0 <__gnu_Unwind_Restore_VFP_D>
 800195e:	e78e      	b.n	800187e <_Unwind_VRS_Pop+0x19e>
 8001960:	f023 0304 	bic.w	r3, r3, #4
 8001964:	f840 3bd0 	str.w	r3, [r0], #208
 8001968:	466f      	mov	r7, sp
 800196a:	f000 f82d 	bl	80019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800196e:	4638      	mov	r0, r7
 8001970:	f000 f82a 	bl	80019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001974:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8001976:	e79b      	b.n	80018b0 <_Unwind_VRS_Pop+0x1d0>
 8001978:	4630      	mov	r0, r6
 800197a:	f023 0303 	bic.w	r3, r3, #3
 800197e:	f840 3b48 	str.w	r3, [r0], #72
 8001982:	f000 f811 	bl	80019a8 <__gnu_Unwind_Save_VFP>
 8001986:	e79d      	b.n	80018c4 <_Unwind_VRS_Pop+0x1e4>

08001988 <__restore_core_regs>:
 8001988:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 800198c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001990:	469c      	mov	ip, r3
 8001992:	46a6      	mov	lr, r4
 8001994:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8001998:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800199c:	46e5      	mov	sp, ip
 800199e:	bd00      	pop	{pc}

080019a0 <__gnu_Unwind_Restore_VFP>:
 80019a0:	ec90 0b21 	fldmiax	r0, {d0-d15}	@ Deprecated
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop

080019a8 <__gnu_Unwind_Save_VFP>:
 80019a8:	ec80 0b21 	fstmiax	r0, {d0-d15}	@ Deprecated
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop

080019b0 <__gnu_Unwind_Restore_VFP_D>:
 80019b0:	ec90 0b20 	vldmia	r0, {d0-d15}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop

080019b8 <__gnu_Unwind_Save_VFP_D>:
 80019b8:	ec80 0b20 	vstmia	r0, {d0-d15}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop

080019c0 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80019c0:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop

080019c8 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80019c8:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop

080019d0 <__gnu_Unwind_Restore_WMMXD>:
 80019d0:	ecf0 0102 	ldfe	f0, [r0], #8
 80019d4:	ecf0 1102 	ldfe	f1, [r0], #8
 80019d8:	ecf0 2102 	ldfe	f2, [r0], #8
 80019dc:	ecf0 3102 	ldfe	f3, [r0], #8
 80019e0:	ecf0 4102 	ldfe	f4, [r0], #8
 80019e4:	ecf0 5102 	ldfe	f5, [r0], #8
 80019e8:	ecf0 6102 	ldfe	f6, [r0], #8
 80019ec:	ecf0 7102 	ldfe	f7, [r0], #8
 80019f0:	ecf0 8102 	ldfp	f0, [r0], #8
 80019f4:	ecf0 9102 	ldfp	f1, [r0], #8
 80019f8:	ecf0 a102 	ldfp	f2, [r0], #8
 80019fc:	ecf0 b102 	ldfp	f3, [r0], #8
 8001a00:	ecf0 c102 	ldfp	f4, [r0], #8
 8001a04:	ecf0 d102 	ldfp	f5, [r0], #8
 8001a08:	ecf0 e102 	ldfp	f6, [r0], #8
 8001a0c:	ecf0 f102 	ldfp	f7, [r0], #8
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop

08001a14 <__gnu_Unwind_Save_WMMXD>:
 8001a14:	ece0 0102 	stfe	f0, [r0], #8
 8001a18:	ece0 1102 	stfe	f1, [r0], #8
 8001a1c:	ece0 2102 	stfe	f2, [r0], #8
 8001a20:	ece0 3102 	stfe	f3, [r0], #8
 8001a24:	ece0 4102 	stfe	f4, [r0], #8
 8001a28:	ece0 5102 	stfe	f5, [r0], #8
 8001a2c:	ece0 6102 	stfe	f6, [r0], #8
 8001a30:	ece0 7102 	stfe	f7, [r0], #8
 8001a34:	ece0 8102 	stfp	f0, [r0], #8
 8001a38:	ece0 9102 	stfp	f1, [r0], #8
 8001a3c:	ece0 a102 	stfp	f2, [r0], #8
 8001a40:	ece0 b102 	stfp	f3, [r0], #8
 8001a44:	ece0 c102 	stfp	f4, [r0], #8
 8001a48:	ece0 d102 	stfp	f5, [r0], #8
 8001a4c:	ece0 e102 	stfp	f6, [r0], #8
 8001a50:	ece0 f102 	stfp	f7, [r0], #8
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop

08001a58 <__gnu_Unwind_Restore_WMMXC>:
 8001a58:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001a5c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001a60:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001a64:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop

08001a6c <__gnu_Unwind_Save_WMMXC>:
 8001a6c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001a70:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001a74:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001a78:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop

08001a80 <_Unwind_RaiseException>:
 8001a80:	46ec      	mov	ip, sp
 8001a82:	b500      	push	{lr}
 8001a84:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001a88:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001a94:	a901      	add	r1, sp, #4
 8001a96:	f7ff fbd7 	bl	8001248 <__gnu_Unwind_RaiseException>
 8001a9a:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001a9e:	b012      	add	sp, #72	@ 0x48
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop

08001aa4 <_Unwind_Resume>:
 8001aa4:	46ec      	mov	ip, sp
 8001aa6:	b500      	push	{lr}
 8001aa8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001aac:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001ab8:	a901      	add	r1, sp, #4
 8001aba:	f7ff fc01 	bl	80012c0 <__gnu_Unwind_Resume>
 8001abe:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001ac2:	b012      	add	sp, #72	@ 0x48
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop

08001ac8 <_Unwind_Resume_or_Rethrow>:
 8001ac8:	46ec      	mov	ip, sp
 8001aca:	b500      	push	{lr}
 8001acc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001ad0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001adc:	a901      	add	r1, sp, #4
 8001ade:	f7ff fc11 	bl	8001304 <__gnu_Unwind_Resume_or_Rethrow>
 8001ae2:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001ae6:	b012      	add	sp, #72	@ 0x48
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop

08001aec <_Unwind_ForcedUnwind>:
 8001aec:	46ec      	mov	ip, sp
 8001aee:	b500      	push	{lr}
 8001af0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001af4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001af8:	f04f 0300 	mov.w	r3, #0
 8001afc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001b00:	ab01      	add	r3, sp, #4
 8001b02:	f7ff fbd5 	bl	80012b0 <__gnu_Unwind_ForcedUnwind>
 8001b06:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001b0a:	b012      	add	sp, #72	@ 0x48
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop

08001b10 <_Unwind_Backtrace>:
 8001b10:	46ec      	mov	ip, sp
 8001b12:	b500      	push	{lr}
 8001b14:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001b18:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001b1c:	f04f 0300 	mov.w	r3, #0
 8001b20:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001b24:	aa01      	add	r2, sp, #4
 8001b26:	f7ff fc47 	bl	80013b8 <__gnu_Unwind_Backtrace>
 8001b2a:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001b2e:	b012      	add	sp, #72	@ 0x48
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop

08001b34 <next_unwind_byte>:
 8001b34:	7a02      	ldrb	r2, [r0, #8]
 8001b36:	4603      	mov	r3, r0
 8001b38:	b97a      	cbnz	r2, 8001b5a <next_unwind_byte+0x26>
 8001b3a:	7a42      	ldrb	r2, [r0, #9]
 8001b3c:	b1a2      	cbz	r2, 8001b68 <next_unwind_byte+0x34>
 8001b3e:	6841      	ldr	r1, [r0, #4]
 8001b40:	3a01      	subs	r2, #1
 8001b42:	b410      	push	{r4}
 8001b44:	7242      	strb	r2, [r0, #9]
 8001b46:	6808      	ldr	r0, [r1, #0]
 8001b48:	2203      	movs	r2, #3
 8001b4a:	1d0c      	adds	r4, r1, #4
 8001b4c:	721a      	strb	r2, [r3, #8]
 8001b4e:	0202      	lsls	r2, r0, #8
 8001b50:	605c      	str	r4, [r3, #4]
 8001b52:	0e00      	lsrs	r0, r0, #24
 8001b54:	bc10      	pop	{r4}
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	4770      	bx	lr
 8001b5a:	6800      	ldr	r0, [r0, #0]
 8001b5c:	3a01      	subs	r2, #1
 8001b5e:	721a      	strb	r2, [r3, #8]
 8001b60:	0202      	lsls	r2, r0, #8
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	0e00      	lsrs	r0, r0, #24
 8001b66:	4770      	bx	lr
 8001b68:	20b0      	movs	r0, #176	@ 0xb0
 8001b6a:	4770      	bx	lr

08001b6c <_Unwind_GetGR.constprop.0>:
 8001b6c:	b500      	push	{lr}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	2300      	movs	r3, #0
 8001b72:	aa03      	add	r2, sp, #12
 8001b74:	9200      	str	r2, [sp, #0]
 8001b76:	4619      	mov	r1, r3
 8001b78:	220c      	movs	r2, #12
 8001b7a:	f7ff fbd3 	bl	8001324 <_Unwind_VRS_Get>
 8001b7e:	9803      	ldr	r0, [sp, #12]
 8001b80:	b005      	add	sp, #20
 8001b82:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b86:	bf00      	nop

08001b88 <unwind_UCB_from_context>:
 8001b88:	e7f0      	b.n	8001b6c <_Unwind_GetGR.constprop.0>
 8001b8a:	bf00      	nop

08001b8c <__gnu_unwind_execute>:
 8001b8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b90:	4606      	mov	r6, r0
 8001b92:	b085      	sub	sp, #20
 8001b94:	460d      	mov	r5, r1
 8001b96:	f04f 0800 	mov.w	r8, #0
 8001b9a:	4628      	mov	r0, r5
 8001b9c:	f7ff ffca 	bl	8001b34 <next_unwind_byte>
 8001ba0:	28b0      	cmp	r0, #176	@ 0xb0
 8001ba2:	4604      	mov	r4, r0
 8001ba4:	f000 80da 	beq.w	8001d5c <__gnu_unwind_execute+0x1d0>
 8001ba8:	0607      	lsls	r7, r0, #24
 8001baa:	d546      	bpl.n	8001c3a <__gnu_unwind_execute+0xae>
 8001bac:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 8001bb0:	2b80      	cmp	r3, #128	@ 0x80
 8001bb2:	d05e      	beq.n	8001c72 <__gnu_unwind_execute+0xe6>
 8001bb4:	2bb0      	cmp	r3, #176	@ 0xb0
 8001bb6:	d073      	beq.n	8001ca0 <__gnu_unwind_execute+0x114>
 8001bb8:	d81b      	bhi.n	8001bf2 <__gnu_unwind_execute+0x66>
 8001bba:	2b90      	cmp	r3, #144	@ 0x90
 8001bbc:	f000 809b 	beq.w	8001cf6 <__gnu_unwind_execute+0x16a>
 8001bc0:	2ba0      	cmp	r3, #160	@ 0xa0
 8001bc2:	d112      	bne.n	8001bea <__gnu_unwind_execute+0x5e>
 8001bc4:	43c3      	mvns	r3, r0
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
 8001bce:	411a      	asrs	r2, r3
 8001bd0:	0701      	lsls	r1, r0, #28
 8001bd2:	f402 627f 	and.w	r2, r2, #4080	@ 0xff0
 8001bd6:	d501      	bpl.n	8001bdc <__gnu_unwind_execute+0x50>
 8001bd8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001bdc:	2300      	movs	r3, #0
 8001bde:	4619      	mov	r1, r3
 8001be0:	4630      	mov	r0, r6
 8001be2:	f7ff fd7d 	bl	80016e0 <_Unwind_VRS_Pop>
 8001be6:	2800      	cmp	r0, #0
 8001be8:	d0d7      	beq.n	8001b9a <__gnu_unwind_execute+0xe>
 8001bea:	2009      	movs	r0, #9
 8001bec:	b005      	add	sp, #20
 8001bee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001bf2:	2bc0      	cmp	r3, #192	@ 0xc0
 8001bf4:	d16d      	bne.n	8001cd2 <__gnu_unwind_execute+0x146>
 8001bf6:	28c6      	cmp	r0, #198	@ 0xc6
 8001bf8:	f000 8093 	beq.w	8001d22 <__gnu_unwind_execute+0x196>
 8001bfc:	28c7      	cmp	r0, #199	@ 0xc7
 8001bfe:	f000 80b2 	beq.w	8001d66 <__gnu_unwind_execute+0x1da>
 8001c02:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8001c06:	2bc0      	cmp	r3, #192	@ 0xc0
 8001c08:	f000 80d2 	beq.w	8001db0 <__gnu_unwind_execute+0x224>
 8001c0c:	28c8      	cmp	r0, #200	@ 0xc8
 8001c0e:	f000 80dd 	beq.w	8001dcc <__gnu_unwind_execute+0x240>
 8001c12:	28c9      	cmp	r0, #201	@ 0xc9
 8001c14:	d1e9      	bne.n	8001bea <__gnu_unwind_execute+0x5e>
 8001c16:	4628      	mov	r0, r5
 8001c18:	f7ff ff8c 	bl	8001b34 <next_unwind_byte>
 8001c1c:	0302      	lsls	r2, r0, #12
 8001c1e:	f000 000f 	and.w	r0, r0, #15
 8001c22:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001c26:	3001      	adds	r0, #1
 8001c28:	4302      	orrs	r2, r0
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	2305      	movs	r3, #5
 8001c2e:	4630      	mov	r0, r6
 8001c30:	f7ff fd56 	bl	80016e0 <_Unwind_VRS_Pop>
 8001c34:	2800      	cmp	r0, #0
 8001c36:	d0b0      	beq.n	8001b9a <__gnu_unwind_execute+0xe>
 8001c38:	e7d7      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001c3a:	0083      	lsls	r3, r0, #2
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	1d1f      	adds	r7, r3, #4
 8001c40:	f10d 090c 	add.w	r9, sp, #12
 8001c44:	2300      	movs	r3, #0
 8001c46:	4619      	mov	r1, r3
 8001c48:	f8cd 9000 	str.w	r9, [sp]
 8001c4c:	220d      	movs	r2, #13
 8001c4e:	4630      	mov	r0, r6
 8001c50:	f7ff fb68 	bl	8001324 <_Unwind_VRS_Get>
 8001c54:	9b03      	ldr	r3, [sp, #12]
 8001c56:	f8cd 9000 	str.w	r9, [sp]
 8001c5a:	0660      	lsls	r0, r4, #25
 8001c5c:	bf4c      	ite	mi
 8001c5e:	1bdf      	submi	r7, r3, r7
 8001c60:	18ff      	addpl	r7, r7, r3
 8001c62:	2300      	movs	r3, #0
 8001c64:	220d      	movs	r2, #13
 8001c66:	4619      	mov	r1, r3
 8001c68:	4630      	mov	r0, r6
 8001c6a:	9703      	str	r7, [sp, #12]
 8001c6c:	f7ff fb80 	bl	8001370 <_Unwind_VRS_Set>
 8001c70:	e793      	b.n	8001b9a <__gnu_unwind_execute+0xe>
 8001c72:	4628      	mov	r0, r5
 8001c74:	f7ff ff5e 	bl	8001b34 <next_unwind_byte>
 8001c78:	0224      	lsls	r4, r4, #8
 8001c7a:	4320      	orrs	r0, r4
 8001c7c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001c80:	d0b3      	beq.n	8001bea <__gnu_unwind_execute+0x5e>
 8001c82:	0104      	lsls	r4, r0, #4
 8001c84:	2300      	movs	r3, #0
 8001c86:	b2a2      	uxth	r2, r4
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4630      	mov	r0, r6
 8001c8c:	f7ff fd28 	bl	80016e0 <_Unwind_VRS_Pop>
 8001c90:	2800      	cmp	r0, #0
 8001c92:	d1aa      	bne.n	8001bea <__gnu_unwind_execute+0x5e>
 8001c94:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 8001c98:	bf18      	it	ne
 8001c9a:	f04f 0801 	movne.w	r8, #1
 8001c9e:	e77c      	b.n	8001b9a <__gnu_unwind_execute+0xe>
 8001ca0:	28b1      	cmp	r0, #177	@ 0xb1
 8001ca2:	d051      	beq.n	8001d48 <__gnu_unwind_execute+0x1bc>
 8001ca4:	28b2      	cmp	r0, #178	@ 0xb2
 8001ca6:	f000 80ad 	beq.w	8001e04 <__gnu_unwind_execute+0x278>
 8001caa:	28b3      	cmp	r0, #179	@ 0xb3
 8001cac:	d06d      	beq.n	8001d8a <__gnu_unwind_execute+0x1fe>
 8001cae:	f000 03fc 	and.w	r3, r0, #252	@ 0xfc
 8001cb2:	2bb4      	cmp	r3, #180	@ 0xb4
 8001cb4:	d099      	beq.n	8001bea <__gnu_unwind_execute+0x5e>
 8001cb6:	f000 0207 	and.w	r2, r0, #7
 8001cba:	3201      	adds	r2, #1
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4630      	mov	r0, r6
 8001cc6:	f7ff fd0b 	bl	80016e0 <_Unwind_VRS_Pop>
 8001cca:	2800      	cmp	r0, #0
 8001ccc:	f43f af65 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001cd0:	e78b      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001cd2:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8001cd6:	2bd0      	cmp	r3, #208	@ 0xd0
 8001cd8:	d187      	bne.n	8001bea <__gnu_unwind_execute+0x5e>
 8001cda:	f000 0207 	and.w	r2, r0, #7
 8001cde:	3201      	adds	r2, #1
 8001ce0:	2305      	movs	r3, #5
 8001ce2:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	4630      	mov	r0, r6
 8001cea:	f7ff fcf9 	bl	80016e0 <_Unwind_VRS_Pop>
 8001cee:	2800      	cmp	r0, #0
 8001cf0:	f43f af53 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001cf4:	e779      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001cf6:	f000 030d 	and.w	r3, r0, #13
 8001cfa:	2b0d      	cmp	r3, #13
 8001cfc:	f43f af75 	beq.w	8001bea <__gnu_unwind_execute+0x5e>
 8001d00:	af03      	add	r7, sp, #12
 8001d02:	2300      	movs	r3, #0
 8001d04:	f000 020f 	and.w	r2, r0, #15
 8001d08:	4619      	mov	r1, r3
 8001d0a:	9700      	str	r7, [sp, #0]
 8001d0c:	4630      	mov	r0, r6
 8001d0e:	f7ff fb09 	bl	8001324 <_Unwind_VRS_Get>
 8001d12:	2300      	movs	r3, #0
 8001d14:	9700      	str	r7, [sp, #0]
 8001d16:	220d      	movs	r2, #13
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4630      	mov	r0, r6
 8001d1c:	f7ff fb28 	bl	8001370 <_Unwind_VRS_Set>
 8001d20:	e73b      	b.n	8001b9a <__gnu_unwind_execute+0xe>
 8001d22:	4628      	mov	r0, r5
 8001d24:	f7ff ff06 	bl	8001b34 <next_unwind_byte>
 8001d28:	0302      	lsls	r2, r0, #12
 8001d2a:	f000 000f 	and.w	r0, r0, #15
 8001d2e:	3001      	adds	r0, #1
 8001d30:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001d34:	2303      	movs	r3, #3
 8001d36:	4302      	orrs	r2, r0
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4630      	mov	r0, r6
 8001d3c:	f7ff fcd0 	bl	80016e0 <_Unwind_VRS_Pop>
 8001d40:	2800      	cmp	r0, #0
 8001d42:	f43f af2a 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001d46:	e750      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001d48:	4628      	mov	r0, r5
 8001d4a:	f7ff fef3 	bl	8001b34 <next_unwind_byte>
 8001d4e:	1e43      	subs	r3, r0, #1
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b0e      	cmp	r3, #14
 8001d54:	4602      	mov	r2, r0
 8001d56:	f67f af41 	bls.w	8001bdc <__gnu_unwind_execute+0x50>
 8001d5a:	e746      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001d5c:	f1b8 0f00 	cmp.w	r8, #0
 8001d60:	d040      	beq.n	8001de4 <__gnu_unwind_execute+0x258>
 8001d62:	2000      	movs	r0, #0
 8001d64:	e742      	b.n	8001bec <__gnu_unwind_execute+0x60>
 8001d66:	4628      	mov	r0, r5
 8001d68:	f7ff fee4 	bl	8001b34 <next_unwind_byte>
 8001d6c:	1e43      	subs	r3, r0, #1
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b0e      	cmp	r3, #14
 8001d72:	4602      	mov	r2, r0
 8001d74:	f63f af39 	bhi.w	8001bea <__gnu_unwind_execute+0x5e>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	2104      	movs	r1, #4
 8001d7c:	4630      	mov	r0, r6
 8001d7e:	f7ff fcaf 	bl	80016e0 <_Unwind_VRS_Pop>
 8001d82:	2800      	cmp	r0, #0
 8001d84:	f43f af09 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001d88:	e72f      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001d8a:	4628      	mov	r0, r5
 8001d8c:	f7ff fed2 	bl	8001b34 <next_unwind_byte>
 8001d90:	0302      	lsls	r2, r0, #12
 8001d92:	f000 000f 	and.w	r0, r0, #15
 8001d96:	3001      	adds	r0, #1
 8001d98:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	4302      	orrs	r2, r0
 8001da0:	4619      	mov	r1, r3
 8001da2:	4630      	mov	r0, r6
 8001da4:	f7ff fc9c 	bl	80016e0 <_Unwind_VRS_Pop>
 8001da8:	2800      	cmp	r0, #0
 8001daa:	f43f aef6 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001dae:	e71c      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001db0:	f000 020f 	and.w	r2, r0, #15
 8001db4:	3201      	adds	r2, #1
 8001db6:	2303      	movs	r3, #3
 8001db8:	f442 2220 	orr.w	r2, r2, #655360	@ 0xa0000
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4630      	mov	r0, r6
 8001dc0:	f7ff fc8e 	bl	80016e0 <_Unwind_VRS_Pop>
 8001dc4:	2800      	cmp	r0, #0
 8001dc6:	f43f aee8 	beq.w	8001b9a <__gnu_unwind_execute+0xe>
 8001dca:	e70e      	b.n	8001bea <__gnu_unwind_execute+0x5e>
 8001dcc:	4628      	mov	r0, r5
 8001dce:	f7ff feb1 	bl	8001b34 <next_unwind_byte>
 8001dd2:	f000 02f0 	and.w	r2, r0, #240	@ 0xf0
 8001dd6:	f000 030f 	and.w	r3, r0, #15
 8001dda:	3210      	adds	r2, #16
 8001ddc:	3301      	adds	r3, #1
 8001dde:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001de2:	e722      	b.n	8001c2a <__gnu_unwind_execute+0x9e>
 8001de4:	ac03      	add	r4, sp, #12
 8001de6:	4643      	mov	r3, r8
 8001de8:	4641      	mov	r1, r8
 8001dea:	220e      	movs	r2, #14
 8001dec:	9400      	str	r4, [sp, #0]
 8001dee:	4630      	mov	r0, r6
 8001df0:	f7ff fa98 	bl	8001324 <_Unwind_VRS_Get>
 8001df4:	9400      	str	r4, [sp, #0]
 8001df6:	4643      	mov	r3, r8
 8001df8:	220f      	movs	r2, #15
 8001dfa:	4641      	mov	r1, r8
 8001dfc:	4630      	mov	r0, r6
 8001dfe:	f7ff fab7 	bl	8001370 <_Unwind_VRS_Set>
 8001e02:	e7ae      	b.n	8001d62 <__gnu_unwind_execute+0x1d6>
 8001e04:	2300      	movs	r3, #0
 8001e06:	f10d 090c 	add.w	r9, sp, #12
 8001e0a:	220d      	movs	r2, #13
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f8cd 9000 	str.w	r9, [sp]
 8001e12:	4630      	mov	r0, r6
 8001e14:	f7ff fa86 	bl	8001324 <_Unwind_VRS_Get>
 8001e18:	4628      	mov	r0, r5
 8001e1a:	f7ff fe8b 	bl	8001b34 <next_unwind_byte>
 8001e1e:	0602      	lsls	r2, r0, #24
 8001e20:	9c03      	ldr	r4, [sp, #12]
 8001e22:	f04f 0702 	mov.w	r7, #2
 8001e26:	d50b      	bpl.n	8001e40 <__gnu_unwind_execute+0x2b4>
 8001e28:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8001e2c:	40b8      	lsls	r0, r7
 8001e2e:	4404      	add	r4, r0
 8001e30:	4628      	mov	r0, r5
 8001e32:	9403      	str	r4, [sp, #12]
 8001e34:	f7ff fe7e 	bl	8001b34 <next_unwind_byte>
 8001e38:	0603      	lsls	r3, r0, #24
 8001e3a:	f107 0707 	add.w	r7, r7, #7
 8001e3e:	d4f3      	bmi.n	8001e28 <__gnu_unwind_execute+0x29c>
 8001e40:	fa00 f207 	lsl.w	r2, r0, r7
 8001e44:	f504 7401 	add.w	r4, r4, #516	@ 0x204
 8001e48:	4422      	add	r2, r4
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	9203      	str	r2, [sp, #12]
 8001e4e:	f8cd 9000 	str.w	r9, [sp]
 8001e52:	220d      	movs	r2, #13
 8001e54:	4619      	mov	r1, r3
 8001e56:	4630      	mov	r0, r6
 8001e58:	f7ff fa8a 	bl	8001370 <_Unwind_VRS_Set>
 8001e5c:	e69d      	b.n	8001b9a <__gnu_unwind_execute+0xe>
 8001e5e:	bf00      	nop

08001e60 <__gnu_unwind_frame>:
 8001e60:	b510      	push	{r4, lr}
 8001e62:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8001e64:	6853      	ldr	r3, [r2, #4]
 8001e66:	b084      	sub	sp, #16
 8001e68:	f04f 0c03 	mov.w	ip, #3
 8001e6c:	3208      	adds	r2, #8
 8001e6e:	021c      	lsls	r4, r3, #8
 8001e70:	4608      	mov	r0, r1
 8001e72:	0e1b      	lsrs	r3, r3, #24
 8001e74:	a901      	add	r1, sp, #4
 8001e76:	9401      	str	r4, [sp, #4]
 8001e78:	9202      	str	r2, [sp, #8]
 8001e7a:	f88d c00c 	strb.w	ip, [sp, #12]
 8001e7e:	f88d 300d 	strb.w	r3, [sp, #13]
 8001e82:	f7ff fe83 	bl	8001b8c <__gnu_unwind_execute>
 8001e86:	b004      	add	sp, #16
 8001e88:	bd10      	pop	{r4, pc}
 8001e8a:	bf00      	nop

08001e8c <_Unwind_GetRegionStart>:
 8001e8c:	b508      	push	{r3, lr}
 8001e8e:	f7ff fe7b 	bl	8001b88 <unwind_UCB_from_context>
 8001e92:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8001e94:	bd08      	pop	{r3, pc}
 8001e96:	bf00      	nop

08001e98 <_Unwind_GetLanguageSpecificData>:
 8001e98:	b508      	push	{r3, lr}
 8001e9a:	f7ff fe75 	bl	8001b88 <unwind_UCB_from_context>
 8001e9e:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8001ea0:	79c3      	ldrb	r3, [r0, #7]
 8001ea2:	3302      	adds	r3, #2
 8001ea4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001ea8:	bd08      	pop	{r3, pc}
 8001eaa:	bf00      	nop

08001eac <__aeabi_idiv0>:
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop

08001eb0 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>:
	 * @param standby_reset_port port name of the STBY\RST pin of the xnucleo shield.
	 * @param standby_reset_pin pin of the STBY\RST pin of the xnucleo shield.
	 * @param ssel_port     port name of the SSEL pin used for SPI communication.
	 * @param ssel_pin     pin of the SSEL used for SPI communication.
	 */
	XNucleoIHM02A1(L6470_init_t *init_0, L6470_init_t *init_1, SPI_HandleTypeDef *spi, GPIO_TypeDef* standby_reset_port  ,uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin) :spi(spi), standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin)
 8001eb0:	b5b0      	push	{r4, r5, r7, lr}
 8001eb2:	b08a      	sub	sp, #40	@ 0x28
 8001eb4:	af02      	add	r7, sp, #8
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	603b      	str	r3, [r7, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ec8:	619a      	str	r2, [r3, #24]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001ece:	839a      	strh	r2, [r3, #28]
	{
	    HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8001ed0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001ed8:	f00b ffb2 	bl	800de40 <HAL_GPIO_WritePin>


	    if( shield_1::count == 0)
 8001edc:	4b69      	ldr	r3, [pc, #420]	@ (8002084 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1d4>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d126      	bne.n	8001f32 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x82>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001ee4:	2008      	movs	r0, #8
 8001ee6:	f00f fb94 	bl	8011612 <_Znaj>
 8001eea:	4603      	mov	r3, r0
 8001eec:	461a      	mov	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
 8001ef6:	e018      	b.n	8001f2a <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x7a>
	    	{
				motor_drivers[i] = new L6470<shield_1>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001ef8:	206c      	movs	r0, #108	@ 0x6c
 8001efa:	f00f fb79 	bl	80115f0 <_Znwj>
 8001efe:	4603      	mov	r3, r0
 8001f00:	461c      	mov	r4, r3
 8001f02:	2501      	movs	r5, #1
 8001f04:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	9301      	str	r3, [sp, #4]
 8001f0a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001f12:	4620      	mov	r0, r4
 8001f14:	f001 f8ee 	bl	80030f4 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	3301      	adds	r3, #1
 8001f28:	61fb      	str	r3, [r7, #28]
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	dde3      	ble.n	8001ef8 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x48>
 8001f30:	e063      	b.n	8001ffa <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x14a>
	    	}
	    }
	    else if( shield_2::count == 0)
 8001f32:	4b55      	ldr	r3, [pc, #340]	@ (8002088 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1d8>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d126      	bne.n	8001f88 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xd8>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001f3a:	2008      	movs	r0, #8
 8001f3c:	f00f fb69 	bl	8011612 <_Znaj>
 8001f40:	4603      	mov	r3, r0
 8001f42:	461a      	mov	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61bb      	str	r3, [r7, #24]
 8001f4c:	e018      	b.n	8001f80 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xd0>
	    	{
				motor_drivers[i] = new L6470<shield_2>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001f4e:	206c      	movs	r0, #108	@ 0x6c
 8001f50:	f00f fb4e 	bl	80115f0 <_Znwj>
 8001f54:	4603      	mov	r3, r0
 8001f56:	461c      	mov	r4, r3
 8001f58:	2501      	movs	r5, #1
 8001f5a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	9301      	str	r3, [sp, #4]
 8001f60:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f66:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001f68:	4620      	mov	r0, r4
 8001f6a:	f001 f935 	bl	80031d8 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	61bb      	str	r3, [r7, #24]
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	dde3      	ble.n	8001f4e <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x9e>
 8001f86:	e038      	b.n	8001ffa <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x14a>
	    	}
	    }
	    else if( shield_3::count == 0)
 8001f88:	4b40      	ldr	r3, [pc, #256]	@ (800208c <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1dc>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d126      	bne.n	8001fde <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x12e>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001f90:	2008      	movs	r0, #8
 8001f92:	f00f fb3e 	bl	8011612 <_Znaj>
 8001f96:	4603      	mov	r3, r0
 8001f98:	461a      	mov	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	e018      	b.n	8001fd6 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x126>
	    	{
				motor_drivers[i] = new L6470<shield_3>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001fa4:	206c      	movs	r0, #108	@ 0x6c
 8001fa6:	f00f fb23 	bl	80115f0 <_Znwj>
 8001faa:	4603      	mov	r3, r0
 8001fac:	461c      	mov	r4, r3
 8001fae:	2501      	movs	r5, #1
 8001fb0:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	9301      	str	r3, [sp, #4]
 8001fb6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fbc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	f001 f97c 	bl	80032bc <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	dde3      	ble.n	8001fa4 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xf4>
 8001fdc:	e00d      	b.n	8001ffa <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x14a>
	    	}
	    }
	    else
	    {
	    	throw std::runtime_error("Cannot create more than 3 shields");
 8001fde:	2008      	movs	r0, #8
 8001fe0:	f00e ff0a 	bl	8010df8 <__cxa_allocate_exception>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	461c      	mov	r4, r3
 8001fe8:	4929      	ldr	r1, [pc, #164]	@ (8002090 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1e0>)
 8001fea:	4620      	mov	r0, r4
 8001fec:	f00f fc04 	bl	80117f8 <_ZNSt13runtime_errorC1EPKc>
 8001ff0:	4a28      	ldr	r2, [pc, #160]	@ (8002094 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1e4>)
 8001ff2:	4929      	ldr	r1, [pc, #164]	@ (8002098 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1e8>)
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	f00f fae1 	bl	80115bc <__cxa_throw>




	    /* Initializing the motor_drivers. */
	    init_motor_drivers[0] = init_0;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	68ba      	ldr	r2, [r7, #8]
 8001ffe:	609a      	str	r2, [r3, #8]
	    init_motor_drivers[1] = init_1;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	60da      	str	r2, [r3, #12]
	    if (!init()) {
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 f84a 	bl	80020a0 <_ZNK14XNucleoIHM02A14initEv>
 800200c:	4603      	mov	r3, r0
 800200e:	f083 0301 	eor.w	r3, r3, #1
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00d      	beq.n	8002034 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x184>
	        /*Do nothing*/
	    	throw std::runtime_error("init failed");
 8002018:	2008      	movs	r0, #8
 800201a:	f00e feed 	bl	8010df8 <__cxa_allocate_exception>
 800201e:	4603      	mov	r3, r0
 8002020:	461c      	mov	r4, r3
 8002022:	491e      	ldr	r1, [pc, #120]	@ (800209c <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1ec>)
 8002024:	4620      	mov	r0, r4
 8002026:	f00f fbe7 	bl	80117f8 <_ZNSt13runtime_errorC1EPKc>
 800202a:	4a1a      	ldr	r2, [pc, #104]	@ (8002094 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1e4>)
 800202c:	491a      	ldr	r1, [pc, #104]	@ (8002098 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1e8>)
 800202e:	4620      	mov	r0, r4
 8002030:	f00f fac4 	bl	80115bc <__cxa_throw>
	    }
	}
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	e021      	b.n	800207c <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1cc>
				motor_drivers[i] = new L6470<shield_1>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8002038:	2d00      	cmp	r5, #0
 800203a:	d003      	beq.n	8002044 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x194>
 800203c:	216c      	movs	r1, #108	@ 0x6c
 800203e:	4620      	mov	r0, r4
 8002040:	f00e fe7c 	bl	8010d3c <_ZdlPvj>
 8002044:	f00e ff12 	bl	8010e6c <__cxa_end_cleanup>
				motor_drivers[i] = new L6470<shield_2>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8002048:	2d00      	cmp	r5, #0
 800204a:	d003      	beq.n	8002054 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1a4>
 800204c:	216c      	movs	r1, #108	@ 0x6c
 800204e:	4620      	mov	r0, r4
 8002050:	f00e fe74 	bl	8010d3c <_ZdlPvj>
 8002054:	f00e ff0a 	bl	8010e6c <__cxa_end_cleanup>
				motor_drivers[i] = new L6470<shield_3>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8002058:	2d00      	cmp	r5, #0
 800205a:	d003      	beq.n	8002064 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1b4>
 800205c:	216c      	movs	r1, #108	@ 0x6c
 800205e:	4620      	mov	r0, r4
 8002060:	f00e fe6c 	bl	8010d3c <_ZdlPvj>
 8002064:	f00e ff02 	bl	8010e6c <__cxa_end_cleanup>
	    	throw std::runtime_error("Cannot create more than 3 shields");
 8002068:	4620      	mov	r0, r4
 800206a:	f00e fedb 	bl	8010e24 <__cxa_free_exception>
 800206e:	f00e fefd 	bl	8010e6c <__cxa_end_cleanup>
	    	throw std::runtime_error("init failed");
 8002072:	4620      	mov	r0, r4
 8002074:	f00e fed6 	bl	8010e24 <__cxa_free_exception>
 8002078:	f00e fef8 	bl	8010e6c <__cxa_end_cleanup>
	}
 800207c:	4618      	mov	r0, r3
 800207e:	3720      	adds	r7, #32
 8002080:	46bd      	mov	sp, r7
 8002082:	bdb0      	pop	{r4, r5, r7, pc}
 8002084:	200002e8 	.word	0x200002e8
 8002088:	200002e9 	.word	0x200002e9
 800208c:	200002ea 	.word	0x200002ea
 8002090:	08015220 	.word	0x08015220
 8002094:	08011751 	.word	0x08011751
 8002098:	08016808 	.word	0x08016808
 800209c:	08015244 	.word	0x08015244

080020a0 <_ZNK14XNucleoIHM02A14initEv>:

    /**
     * @brief Initializing the X_NUCLEO_IHM02A1 board.
     * @retval true if initialization is successful, false otherwise.
     */
    bool init(void) const noexcept
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
    {
        /* Disable the L6470. */

    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6998      	ldr	r0, [r3, #24]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	8b9b      	ldrh	r3, [r3, #28]
 80020b0:	2200      	movs	r2, #0
 80020b2:	4619      	mov	r1, r3
 80020b4:	f00b fec4 	bl	800de40 <HAL_GPIO_WritePin>

    	/* Wait for at least t_STBY,min */
    	HAL_Delay(1);
 80020b8:	2001      	movs	r0, #1
 80020ba:	f00b fb65 	bl	800d788 <HAL_Delay>

    	/* Enable the L6470. */
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_SET);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6998      	ldr	r0, [r3, #24]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	8b9b      	ldrh	r3, [r3, #28]
 80020c6:	2201      	movs	r2, #1
 80020c8:	4619      	mov	r1, r3
 80020ca:	f00b feb9 	bl	800de40 <HAL_GPIO_WritePin>

    	/* Wait for at least t_logicwu */
    	HAL_Delay(1);
 80020ce:	2001      	movs	r0, #1
 80020d0:	f00b fb5a 	bl	800d788 <HAL_Delay>



        return init_all_motor_drivers();
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f892 	bl	80021fe <_ZNK14XNucleoIHM02A122init_all_motor_driversEv>
 80020da:	4603      	mov	r3, r0
    }
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <_ZNK14XNucleoIHM02A117get_motor_driversEv>:
    /**
     * @brief  Getting the array of motor_drivers.
     * @param  None.
     * @retval The array of motor_drivers.
     */
    abstractL6470 **get_motor_drivers(void) const noexcept
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
    {
        return motor_drivers;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
    }
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>:
      *         "Prepare<Action>()" methods, one for each motor of the daisy-chain.
      * @param  None.
      * @retval A pointer to the results returned by the motor_drivers, i.e. an
      *         integer value for each of them.
      */
    uint32_t* perform_prepared_actions(void) noexcept
 80020fc:	b5b0      	push	{r4, r5, r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
    {
        /* Performing pre-actions, if needed. */
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
 8002108:	e040      	b.n	800218c <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0x90>
            /*
               "GetPosition()" is needed by "PrepareSetMark()" at the time when the
               prepared actions get performed.
            */
            if (motor_drivers[m]->get_prepared_action() == prepared_action_t::PREPARED_SET_MARK) {
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	6819      	ldr	r1, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4608      	mov	r0, r1
 800212c:	4798      	blx	r3
 800212e:	4603      	mov	r3, r0
 8002130:	2b09      	cmp	r3, #9
 8002132:	bf0c      	ite	eq
 8002134:	2301      	moveq	r3, #1
 8002136:	2300      	movne	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d023      	beq.n	8002186 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0x8a>
                motor_drivers[m]->prepare_set_mark((uint32_t) motor_drivers[m]->get_position());
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	681d      	ldr	r5, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	33cc      	adds	r3, #204	@ 0xcc
 800215a:	681c      	ldr	r4, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	6819      	ldr	r1, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	3314      	adds	r3, #20
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4608      	mov	r0, r1
 800217c:	4798      	blx	r3
 800217e:	4603      	mov	r3, r0
 8002180:	4619      	mov	r1, r3
 8002182:	4628      	mov	r0, r5
 8002184:	47a0      	blx	r4
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	3301      	adds	r3, #1
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	2b01      	cmp	r3, #1
 8002190:	ddbb      	ble.n	800210a <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0xe>
            }
        }
        
        /* Performing the prepared actions and getting back raw data. */
        uint8_t *raw_data = motor_drivers[0]->perform_prepared_actions();
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4610      	mov	r0, r2
 80021a8:	4798      	blx	r3
 80021aa:	4603      	mov	r3, r0
 80021ac:	60fb      	str	r3, [r7, #12]

        /* Processing raw data. */
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 80021ae:	2300      	movs	r3, #0
 80021b0:	613b      	str	r3, [r7, #16]
 80021b2:	e01b      	b.n	80021ec <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0xf0>
            results[m] = motor_drivers[m]->get_result(raw_data);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	6818      	ldr	r0, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68f9      	ldr	r1, [r7, #12]
 80021d6:	4798      	blx	r3
 80021d8:	4603      	mov	r3, r0
 80021da:	4619      	mov	r1, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	3204      	adds	r2, #4
 80021e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	3301      	adds	r3, #1
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	dde0      	ble.n	80021b4 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0xb8>
        }

        /* Returning results. */
        return results;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3310      	adds	r3, #16
    }
 80021f6:	4618      	mov	r0, r3
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bdb0      	pop	{r4, r5, r7, pc}

080021fe <_ZNK14XNucleoIHM02A122init_all_motor_driversEv>:

    /**
     * @brief  Initialize the L6470 motor drivers.
     * @retval true if initialization is successful, false otherwise.
     */
    bool init_all_motor_drivers() const noexcept
 80021fe:	b580      	push	{r7, lr}
 8002200:	b084      	sub	sp, #16
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
    {
    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	e022      	b.n	8002252 <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x54>
    	{
    		if(motor_drivers[i]->init((void*) init_motor_drivers[i]) != COMPONENT_OK)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	6818      	ldr	r0, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	3308      	adds	r3, #8
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68f9      	ldr	r1, [r7, #12]
 800222e:	3102      	adds	r1, #2
 8002230:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002234:	4611      	mov	r1, r2
 8002236:	4798      	blx	r3
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	bf14      	ite	ne
 800223e:	2301      	movne	r3, #1
 8002240:	2300      	moveq	r3, #0
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x4e>
    		{
    			return false;
 8002248:	2300      	movs	r3, #0
 800224a:	e006      	b.n	800225a <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x5c>
    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	3301      	adds	r3, #1
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2b01      	cmp	r3, #1
 8002256:	ddd9      	ble.n	800220c <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0xe>
    		}
    	}
    	return true;
 8002258:	2301      	movs	r3, #1

    }
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>:
  * @param standby_reset_port_shield_2 , port du GPIO du signal de reset du shield 2
  * @param standby_reset_pin_shield_2  , pin  du GPIO du signal de reset du shield 2
  * @param ssel_port_shield_2          , port du GPIO de commmunication SPI pour le shield 2
  * @param ssel_port_shield_2          , pin  du GPIO de commmunication SPI pour le shield 2
  */
BlocMoteurs::BlocMoteurs(SPI_HandleTypeDef *spi,
 8002264:	b5b0      	push	{r4, r5, r7, lr}
 8002266:	b08a      	sub	sp, #40	@ 0x28
 8002268:	af04      	add	r7, sp, #16
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	807b      	strh	r3, [r7, #2]
		GPIO_TypeDef* standby_reset_port_shield_1  ,uint16_t standby_reset_pin_shield_1 ,GPIO_TypeDef* ssel_port_shield_1 , uint16_t ssel_pin_shield_1,
		GPIO_TypeDef* standby_reset_port_shield_2  ,uint16_t standby_reset_pin_shield_2 ,GPIO_TypeDef* ssel_port_shield_2 , uint16_t ssel_pin_shield_2):
    index_to_enum{back_right, back_left, front_left, front_right}, //Wiring dependant
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	4a4a      	ldr	r2, [pc, #296]	@ (80023a0 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x13c>)
 8002276:	6812      	ldr	r2, [r2, #0]
 8002278:	615a      	str	r2, [r3, #20]
    motor_direction_inverter{1.0, -1.0, 1.0, -1.0}
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4a49      	ldr	r2, [pc, #292]	@ (80023a4 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x140>)
 800227e:	f103 0418 	add.w	r4, r3, #24
 8002282:	4613      	mov	r3, r2
 8002284:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002286:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4a46      	ldr	r2, [pc, #280]	@ (80023a8 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x144>)
 800228e:	332c      	adds	r3, #44	@ 0x2c
 8002290:	4611      	mov	r1, r2
 8002292:	22b0      	movs	r2, #176	@ 0xb0
 8002294:	4618      	mov	r0, r3
 8002296:	f011 fa1e 	bl	80136d6 <memcpy>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	4a42      	ldr	r2, [pc, #264]	@ (80023a8 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x144>)
 800229e:	33dc      	adds	r3, #220	@ 0xdc
 80022a0:	4611      	mov	r1, r2
 80022a2:	22b0      	movs	r2, #176	@ 0xb0
 80022a4:	4618      	mov	r0, r3
 80022a6:	f011 fa16 	bl	80136d6 <memcpy>
{
	//moteurs à l'arret par défaut
	moteurs_arret = 0;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]
	//vitesse par défaut
	max_vitesse = MAX_VITESSE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022b6:	605a      	str	r2, [r3, #4]

  shield_1 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_1, standby_reset_pin_shield_1, ssel_port_shield_1, ssel_pin_shield_1);
 80022b8:	2020      	movs	r0, #32
 80022ba:	f00f f999 	bl	80115f0 <_Znwj>
 80022be:	4603      	mov	r3, r0
 80022c0:	461c      	mov	r4, r3
 80022c2:	2501      	movs	r5, #1
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f503 729a 	add.w	r2, r3, #308	@ 0x134
 80022d0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80022d2:	9303      	str	r3, [sp, #12]
 80022d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022d6:	9302      	str	r3, [sp, #8]
 80022d8:	887b      	ldrh	r3, [r7, #2]
 80022da:	9301      	str	r3, [sp, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	4620      	mov	r0, r4
 80022e4:	f7ff fde4 	bl	8001eb0 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	609c      	str	r4, [r3, #8]
  shield_2 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_2, standby_reset_pin_shield_2, ssel_port_shield_2, ssel_pin_shield_2);
 80022ec:	2020      	movs	r0, #32
 80022ee:	f00f f97f 	bl	80115f0 <_Znwj>
 80022f2:	4603      	mov	r3, r0
 80022f4:	461c      	mov	r4, r3
 80022f6:	2501      	movs	r5, #1
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f503 729a 	add.w	r2, r3, #308	@ 0x134
 8002304:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002306:	9303      	str	r3, [sp, #12]
 8002308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800230a:	9302      	str	r3, [sp, #8]
 800230c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	4620      	mov	r0, r4
 8002318:	f7ff fdca 	bl	8001eb0 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	60dc      	str	r4, [r3, #12]
  abstractL6470** moteurs_shield_1 = shield_1->get_motor_drivers();
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff fedd 	bl	80020e4 <_ZNK14XNucleoIHM02A117get_motor_driversEv>
 800232a:	6178      	str	r0, [r7, #20]
  abstractL6470** moteurs_shield_2 = shield_2->get_motor_drivers();
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fed7 	bl	80020e4 <_ZNK14XNucleoIHM02A117get_motor_driversEv>
 8002336:	6138      	str	r0, [r7, #16]
  moteurs = new abstractL6470*[NMOTEURS];
 8002338:	2010      	movs	r0, #16
 800233a:	f00f f96a 	bl	8011612 <_Znaj>
 800233e:	4603      	mov	r3, r0
 8002340:	461a      	mov	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	611a      	str	r2, [r3, #16]



  moteurs[front_left] = moteurs_shield_2[0]; //Wiring dependant
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	601a      	str	r2, [r3, #0]
  moteurs[front_right] = moteurs_shield_2[1]; //Wiring dependant
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	3304      	adds	r3, #4
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	6852      	ldr	r2, [r2, #4]
 800235a:	601a      	str	r2, [r3, #0]
  moteurs[back_left] = moteurs_shield_1[1];  //Wiring dependant
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	3308      	adds	r3, #8
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	6852      	ldr	r2, [r2, #4]
 8002366:	601a      	str	r2, [r3, #0]
  moteurs[back_right] = moteurs_shield_1[0]; //Wiring dependant
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	330c      	adds	r3, #12
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	601a      	str	r2, [r3, #0]
  // shield_2->perform_prepared_actions();
  // HAL_Delay(4000);
  // motors_stop_hard();


}
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	e00f      	b.n	8002398 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x134>
  shield_1 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_1, standby_reset_pin_shield_1, ssel_port_shield_1, ssel_pin_shield_1);
 8002378:	2d00      	cmp	r5, #0
 800237a:	d003      	beq.n	8002384 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x120>
 800237c:	2120      	movs	r1, #32
 800237e:	4620      	mov	r0, r4
 8002380:	f00e fcdc 	bl	8010d3c <_ZdlPvj>
 8002384:	f00e fd72 	bl	8010e6c <__cxa_end_cleanup>
  shield_2 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_2, standby_reset_pin_shield_2, ssel_port_shield_2, ssel_pin_shield_2);
 8002388:	2d00      	cmp	r5, #0
 800238a:	d003      	beq.n	8002394 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x130>
 800238c:	2120      	movs	r1, #32
 800238e:	4620      	mov	r0, r4
 8002390:	f00e fcd4 	bl	8010d3c <_ZdlPvj>
 8002394:	f00e fd6a 	bl	8010e6c <__cxa_end_cleanup>
}
 8002398:	4618      	mov	r0, r3
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bdb0      	pop	{r4, r5, r7, pc}
 80023a0:	08015250 	.word	0x08015250
 80023a4:	08015254 	.word	0x08015254
 80023a8:	08015264 	.word	0x08015264

080023ac <_ZN11BlocMoteurs11rad_to_stepEf>:

constexpr float RAD_PER_FULL_STEP = (DEG_PER_FULL_STEP*M_PI)/180.0;

float BlocMoteurs::rad_to_step( float rad)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	ed87 0a00 	vstr	s0, [r7]
	return  (rad/RAD_PER_FULL_STEP);
 80023b8:	edd7 7a00 	vldr	s15, [r7]
 80023bc:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80023d8 <_ZN11BlocMoteurs11rad_to_stepEf+0x2c>
 80023c0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80023c4:	eef0 7a66 	vmov.f32	s15, s13
}
 80023c8:	eeb0 0a67 	vmov.f32	s0, s15
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	3d00adfd 	.word	0x3d00adfd

080023dc <_ZN11BlocMoteurs11step_to_radEj>:
float BlocMoteurs::step_to_rad( unsigned int step)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
	return (RAD_PER_FULL_STEP*step);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	ee07 3a90 	vmov	s15, r3
 80023ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023f0:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002408 <_ZN11BlocMoteurs11step_to_radEj+0x2c>
 80023f4:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80023f8:	eeb0 0a67 	vmov.f32	s0, s15
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	3d00adfd 	.word	0x3d00adfd

0800240c <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff>:
  * @param  vitesse_normalisee_FR vitesse du moteur Avant droit
  * @param  vitesse_normalisee_BL vitesse du moteur Arriere gauche
  * @param  vitesse_normalisee_BR vitesse du moteur Arriere droit
  */
void BlocMoteurs::commande_vitesses_normalisees(float vitesse_normalisee_FL, float vitesse_normalisee_FR, float vitesse_normalisee_BL, float vitesse_normalisee_BR )
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b094      	sub	sp, #80	@ 0x50
 8002410:	af00      	add	r7, sp, #0
 8002412:	6178      	str	r0, [r7, #20]
 8002414:	ed87 0a04 	vstr	s0, [r7, #16]
 8002418:	edc7 0a03 	vstr	s1, [r7, #12]
 800241c:	ed87 1a02 	vstr	s2, [r7, #8]
 8002420:	edc7 1a01 	vstr	s3, [r7, #4]
    /////////////////////////////////////////////////////////////
    // Assurance que les parametres sont entre -1 et 1 ////////////////
    vitesse_normalisee_FL = std::min(1.0f, vitesse_normalisee_FL);
 8002424:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002428:	61fb      	str	r3, [r7, #28]
 800242a:	f107 0210 	add.w	r2, r7, #16
 800242e:	f107 031c 	add.w	r3, r7, #28
 8002432:	4611      	mov	r1, r2
 8002434:	4618      	mov	r0, r3
 8002436:	f000 ffb3 	bl	80033a0 <_ZSt3minIfERKT_S2_S2_>
 800243a:	4603      	mov	r3, r0
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	613b      	str	r3, [r7, #16]
    vitesse_normalisee_FL = std::max(-1.0f, vitesse_normalisee_FL);
 8002440:	4b86      	ldr	r3, [pc, #536]	@ (800265c <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x250>)
 8002442:	623b      	str	r3, [r7, #32]
 8002444:	f107 0210 	add.w	r2, r7, #16
 8002448:	f107 0320 	add.w	r3, r7, #32
 800244c:	4611      	mov	r1, r2
 800244e:	4618      	mov	r0, r3
 8002450:	f000 ffbf 	bl	80033d2 <_ZSt3maxIfERKT_S2_S2_>
 8002454:	4603      	mov	r3, r0
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	613b      	str	r3, [r7, #16]

    vitesse_normalisee_FR = std::min(1.0f, vitesse_normalisee_FR);
 800245a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800245e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002460:	f107 020c 	add.w	r2, r7, #12
 8002464:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002468:	4611      	mov	r1, r2
 800246a:	4618      	mov	r0, r3
 800246c:	f000 ff98 	bl	80033a0 <_ZSt3minIfERKT_S2_S2_>
 8002470:	4603      	mov	r3, r0
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60fb      	str	r3, [r7, #12]
    vitesse_normalisee_FR = std::max(-1.0f, vitesse_normalisee_FR);
 8002476:	4b79      	ldr	r3, [pc, #484]	@ (800265c <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x250>)
 8002478:	62bb      	str	r3, [r7, #40]	@ 0x28
 800247a:	f107 020c 	add.w	r2, r7, #12
 800247e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002482:	4611      	mov	r1, r2
 8002484:	4618      	mov	r0, r3
 8002486:	f000 ffa4 	bl	80033d2 <_ZSt3maxIfERKT_S2_S2_>
 800248a:	4603      	mov	r3, r0
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	60fb      	str	r3, [r7, #12]

    vitesse_normalisee_BL = std::min(1.0f, vitesse_normalisee_BL);
 8002490:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002494:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002496:	f107 0208 	add.w	r2, r7, #8
 800249a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800249e:	4611      	mov	r1, r2
 80024a0:	4618      	mov	r0, r3
 80024a2:	f000 ff7d 	bl	80033a0 <_ZSt3minIfERKT_S2_S2_>
 80024a6:	4603      	mov	r3, r0
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	60bb      	str	r3, [r7, #8]
    vitesse_normalisee_BL = std::max(-1.0f, vitesse_normalisee_BL);
 80024ac:	4b6b      	ldr	r3, [pc, #428]	@ (800265c <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x250>)
 80024ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80024b0:	f107 0208 	add.w	r2, r7, #8
 80024b4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80024b8:	4611      	mov	r1, r2
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 ff89 	bl	80033d2 <_ZSt3maxIfERKT_S2_S2_>
 80024c0:	4603      	mov	r3, r0
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	60bb      	str	r3, [r7, #8]

    vitesse_normalisee_BR = std::min(1.0f, vitesse_normalisee_BR);
 80024c6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80024ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80024cc:	1d3a      	adds	r2, r7, #4
 80024ce:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80024d2:	4611      	mov	r1, r2
 80024d4:	4618      	mov	r0, r3
 80024d6:	f000 ff63 	bl	80033a0 <_ZSt3minIfERKT_S2_S2_>
 80024da:	4603      	mov	r3, r0
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	607b      	str	r3, [r7, #4]
    vitesse_normalisee_BR = std::max(-1.0f, vitesse_normalisee_BR);
 80024e0:	4b5e      	ldr	r3, [pc, #376]	@ (800265c <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x250>)
 80024e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024e4:	1d3a      	adds	r2, r7, #4
 80024e6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80024ea:	4611      	mov	r1, r2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 ff70 	bl	80033d2 <_ZSt3maxIfERKT_S2_S2_>
 80024f2:	4603      	mov	r3, r0
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	607b      	str	r3, [r7, #4]
    /////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////

    // Détermination du signe des vitesses (logique inversée entre les deux moteurs droits/gauches car placés symétriquement sur le robot et branchement identique)
    StepperMotor::direction_t sens_FL = vitesse_normalisee_FL*motor_direction_inverter[front_left] >= 0.0f ? StepperMotor::FWD : StepperMotor::BWD;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	ed93 7a06 	vldr	s14, [r3, #24]
 80024fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8002502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002506:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800250a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250e:	db01      	blt.n	8002514 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x108>
 8002510:	2301      	movs	r3, #1
 8002512:	e000      	b.n	8002516 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x10a>
 8002514:	2300      	movs	r3, #0
 8002516:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
    StepperMotor::direction_t sens_FR = vitesse_normalisee_FR*motor_direction_inverter[front_right] >= 0.0f ? StepperMotor::FWD : StepperMotor::BWD;
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002520:	edd7 7a03 	vldr	s15, [r7, #12]
 8002524:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002528:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800252c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002530:	db01      	blt.n	8002536 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x12a>
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x12c>
 8002536:	2300      	movs	r3, #0
 8002538:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e

    StepperMotor::direction_t sens_BL = vitesse_normalisee_BL*motor_direction_inverter[back_left] >= 0.0f ? StepperMotor::FWD : StepperMotor::BWD;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	ed93 7a08 	vldr	s14, [r3, #32]
 8002542:	edd7 7a02 	vldr	s15, [r7, #8]
 8002546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800254a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800254e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002552:	db01      	blt.n	8002558 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x14c>
 8002554:	2301      	movs	r3, #1
 8002556:	e000      	b.n	800255a <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x14e>
 8002558:	2300      	movs	r3, #0
 800255a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    StepperMotor::direction_t sens_BR = vitesse_normalisee_BR*motor_direction_inverter[back_right] >= 0.0f ? StepperMotor::FWD : StepperMotor::BWD;
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8002564:	edd7 7a01 	vldr	s15, [r7, #4]
 8002568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800256c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002574:	db01      	blt.n	800257a <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x16e>
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x170>
 800257a:	2300      	movs	r3, #0
 800257c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

    // Détermination des valeurs de vitesses réelles à envoyer au shield
    unsigned int vitesse_FL = ( (float) fabs(vitesse_normalisee_FL) * max_vitesse);
 8002580:	edd7 7a04 	vldr	s15, [r7, #16]
 8002584:	eeb0 7ae7 	vabs.f32	s14, s15
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	ee07 3a90 	vmov	s15, r3
 8002590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800259c:	ee17 3a90 	vmov	r3, s15
 80025a0:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned int vitesse_FR = ( (float) fabs(vitesse_normalisee_FR) * max_vitesse);
 80025a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80025a6:	eeb0 7ae7 	vabs.f32	s14, s15
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	ee07 3a90 	vmov	s15, r3
 80025b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025be:	ee17 3a90 	vmov	r3, s15
 80025c2:	647b      	str	r3, [r7, #68]	@ 0x44
    unsigned int vitesse_BL = ( (float) fabs(vitesse_normalisee_BL) * max_vitesse);
 80025c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80025c8:	eeb0 7ae7 	vabs.f32	s14, s15
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	ee07 3a90 	vmov	s15, r3
 80025d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025e0:	ee17 3a90 	vmov	r3, s15
 80025e4:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned int vitesse_BR = ( (float) fabs(vitesse_normalisee_BR) * max_vitesse);
 80025e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80025ea:	eeb0 7ae7 	vabs.f32	s14, s15
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	ee07 3a90 	vmov	s15, r3
 80025f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002602:	ee17 3a90 	vmov	r3, s15
 8002606:	63fb      	str	r3, [r7, #60]	@ 0x3c

    set_vitesse_moteur(vitesse_FL, sens_FL, id_moteurs::front_left);
 8002608:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800260c:	2300      	movs	r3, #0
 800260e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002610:	6978      	ldr	r0, [r7, #20]
 8002612:	f000 f825 	bl	8002660 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    set_vitesse_moteur(vitesse_FR, sens_FR, id_moteurs::front_right);
 8002616:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 800261a:	2301      	movs	r3, #1
 800261c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800261e:	6978      	ldr	r0, [r7, #20]
 8002620:	f000 f81e 	bl	8002660 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    set_vitesse_moteur(vitesse_BL, sens_BL, id_moteurs::back_left);
 8002624:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002628:	2302      	movs	r3, #2
 800262a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800262c:	6978      	ldr	r0, [r7, #20]
 800262e:	f000 f817 	bl	8002660 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    set_vitesse_moteur(vitesse_BR, sens_BR, id_moteurs::back_right);
 8002632:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8002636:	2303      	movs	r3, #3
 8002638:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800263a:	6978      	ldr	r0, [r7, #20]
 800263c:	f000 f810 	bl	8002660 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    shield_1->perform_prepared_actions();
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fd59 	bl	80020fc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
    shield_2->perform_prepared_actions();
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff fd54 	bl	80020fc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>

}
 8002654:	bf00      	nop
 8002656:	3750      	adds	r7, #80	@ 0x50
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	bf800000 	.word	0xbf800000

08002660 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>:
  * @param vitesse , vitesse absolue en step/s
  * @param dir , sens de rotation (FWD / BWD)
  * @param id , id du moteur (front_left, front_right, back_left, back_right)
  */
void BlocMoteurs::set_vitesse_moteur(unsigned int vitesse, StepperMotor::direction_t dir, id_moteurs id)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	4611      	mov	r1, r2
 800266c:	461a      	mov	r2, r3
 800266e:	460b      	mov	r3, r1
 8002670:	71fb      	strb	r3, [r7, #7]
 8002672:	4613      	mov	r3, r2
 8002674:	71bb      	strb	r3, [r7, #6]
    if (!moteurs_arret)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	f083 0301 	eor.w	r3, r3, #1
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d012      	beq.n	80026aa <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs+0x4a>
    {
        moteurs[id]->prepare_run(dir, vitesse);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	79bb      	ldrb	r3, [r7, #6]
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	79bb      	ldrb	r3, [r7, #6]
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	33fc      	adds	r3, #252	@ 0xfc
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	79f9      	ldrb	r1, [r7, #7]
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	4798      	blx	r3
    }
    else
    {
    	moteurs[id]->prepare_hard_hiz(); // mode haute impédence pour pouvoir déplacer le robot à la main
    }
}
 80026a8:	e011      	b.n	80026ce <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs+0x6e>
    	moteurs[id]->prepare_hard_hiz(); // mode haute impédence pour pouvoir déplacer le robot à la main
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	691a      	ldr	r2, [r3, #16]
 80026ae:	79bb      	ldrb	r3, [r7, #6]
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	6819      	ldr	r1, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	691a      	ldr	r2, [r3, #16]
 80026ba:	79bb      	ldrb	r3, [r7, #6]
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4608      	mov	r0, r1
 80026cc:	4798      	blx	r3
}
 80026ce:	bf00      	nop
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <_ZN11BlocMoteurs26commande_vitesses_absoluesEffff>:
  * @param  vitesse_absolue_FR vitesse du moteur Avant droit
  * @param  vitesse_absolue_BL vitesse du moteur Arriere gauche
  * @param  vitesse_absolue_BR vitesse du moteur Arriere droit
  */
void BlocMoteurs::commande_vitesses_absolues(float vitesse_absolue_FL, float vitesse_absolue_FR, float vitesse_absolue_BL, float vitesse_absolue_BR )
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	ed2d 8b04 	vpush	{d8-d9}
 80026dc:	b086      	sub	sp, #24
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6178      	str	r0, [r7, #20]
 80026e2:	ed87 0a04 	vstr	s0, [r7, #16]
 80026e6:	edc7 0a03 	vstr	s1, [r7, #12]
 80026ea:	ed87 1a02 	vstr	s2, [r7, #8]
 80026ee:	edc7 1a01 	vstr	s3, [r7, #4]
	commande_vitesses_normalisees(rad_to_step(vitesse_absolue_FL)/max_vitesse,rad_to_step(vitesse_absolue_FR)/max_vitesse,
 80026f2:	ed97 0a04 	vldr	s0, [r7, #16]
 80026f6:	6978      	ldr	r0, [r7, #20]
 80026f8:	f7ff fe58 	bl	80023ac <_ZN11BlocMoteurs11rad_to_stepEf>
 80026fc:	eeb0 7a40 	vmov.f32	s14, s0
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	ee07 3a90 	vmov	s15, r3
 8002708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800270c:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8002710:	ed97 0a03 	vldr	s0, [r7, #12]
 8002714:	6978      	ldr	r0, [r7, #20]
 8002716:	f7ff fe49 	bl	80023ac <_ZN11BlocMoteurs11rad_to_stepEf>
 800271a:	eeb0 7a40 	vmov.f32	s14, s0
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	ee07 3a90 	vmov	s15, r3
 8002726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800272a:	eec7 8a27 	vdiv.f32	s17, s14, s15
								  rad_to_step(vitesse_absolue_BL)/max_vitesse,rad_to_step(vitesse_absolue_BR)/max_vitesse);
 800272e:	ed97 0a02 	vldr	s0, [r7, #8]
 8002732:	6978      	ldr	r0, [r7, #20]
 8002734:	f7ff fe3a 	bl	80023ac <_ZN11BlocMoteurs11rad_to_stepEf>
 8002738:	eeb0 7a40 	vmov.f32	s14, s0
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	685b      	ldr	r3, [r3, #4]
	commande_vitesses_normalisees(rad_to_step(vitesse_absolue_FL)/max_vitesse,rad_to_step(vitesse_absolue_FR)/max_vitesse,
 8002740:	ee07 3a90 	vmov	s15, r3
 8002744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002748:	ee87 9a27 	vdiv.f32	s18, s14, s15
								  rad_to_step(vitesse_absolue_BL)/max_vitesse,rad_to_step(vitesse_absolue_BR)/max_vitesse);
 800274c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002750:	6978      	ldr	r0, [r7, #20]
 8002752:	f7ff fe2b 	bl	80023ac <_ZN11BlocMoteurs11rad_to_stepEf>
 8002756:	eef0 6a40 	vmov.f32	s13, s0
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	685b      	ldr	r3, [r3, #4]
	commande_vitesses_normalisees(rad_to_step(vitesse_absolue_FL)/max_vitesse,rad_to_step(vitesse_absolue_FR)/max_vitesse,
 800275e:	ee07 3a90 	vmov	s15, r3
 8002762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800276a:	eef0 1a47 	vmov.f32	s3, s14
 800276e:	eeb0 1a49 	vmov.f32	s2, s18
 8002772:	eef0 0a68 	vmov.f32	s1, s17
 8002776:	eeb0 0a48 	vmov.f32	s0, s16
 800277a:	6978      	ldr	r0, [r7, #20]
 800277c:	f7ff fe46 	bl	800240c <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff>

}
 8002780:	bf00      	nop
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	ecbd 8b04 	vpop	{d8-d9}
 800278a:	bd80      	pop	{r7, pc}

0800278c <_ZN11BlocMoteurs13commande_stepEiiii>:
  * @param  nuber_of_step_FR : nombre de pas à effectuer > 0 nombre de pas positif dans le sens du robot
  * @param  nuber_of_step_BL : nombre de pas à effectuer > 0 nombre de pas positif dans le sens du robot
  * @param  nuber_of_step_BR : nombre de pas à effectuer > 0 nombre de pas positif dans le sens du robot 
  */
void BlocMoteurs::commande_step(int number_of_step_FL, int number_of_step_FR, int number_of_step_BL, int number_of_step_BR)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
 8002798:	603b      	str	r3, [r7, #0]
  StepperMotor::direction_t dir_FL = (StepperMotor::direction_t) ( StepperMotor::direction_t::FWD*( number_of_step_FL*motor_direction_inverter[id_moteurs::front_left] > 0)
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	ee07 3a90 	vmov	s15, r3
 80027a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	edd3 7a06 	vldr	s15, [r3, #24]
 80027aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b6:	bfcc      	ite	gt
 80027b8:	2301      	movgt	r3, #1
 80027ba:	2300      	movle	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	75fb      	strb	r3, [r7, #23]
                                   + StepperMotor::direction_t::BWD*( number_of_step_FL*motor_direction_inverter[id_moteurs::front_left] < 0));

  StepperMotor::direction_t dir_FR = (StepperMotor::direction_t) (StepperMotor::direction_t::FWD*( number_of_step_FR*motor_direction_inverter[id_moteurs::front_right] > 0)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	ee07 3a90 	vmov	s15, r3
 80027c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	edd3 7a07 	vldr	s15, [r3, #28]
 80027d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027dc:	bfcc      	ite	gt
 80027de:	2301      	movgt	r3, #1
 80027e0:	2300      	movle	r3, #0
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	75bb      	strb	r3, [r7, #22]
                                   + StepperMotor::direction_t::BWD*( number_of_step_FR*motor_direction_inverter[id_moteurs::front_right] < 0));
  
  StepperMotor::direction_t dir_BL = (StepperMotor::direction_t) (StepperMotor::direction_t::FWD*( number_of_step_BL*motor_direction_inverter[id_moteurs::back_left] > 0)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	ee07 3a90 	vmov	s15, r3
 80027ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	edd3 7a08 	vldr	s15, [r3, #32]
 80027f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002802:	bfcc      	ite	gt
 8002804:	2301      	movgt	r3, #1
 8002806:	2300      	movle	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	757b      	strb	r3, [r7, #21]
                                   + StepperMotor::direction_t::BWD*( number_of_step_BL*motor_direction_inverter[id_moteurs::back_left] < 0));

  StepperMotor::direction_t dir_BR = (StepperMotor::direction_t) (StepperMotor::direction_t::FWD*( number_of_step_BR*motor_direction_inverter[id_moteurs::back_right] > 0)
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	ee07 3a90 	vmov	s15, r3
 8002812:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800281c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002820:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002828:	bfcc      	ite	gt
 800282a:	2301      	movgt	r3, #1
 800282c:	2300      	movle	r3, #0
 800282e:	b2db      	uxtb	r3, r3
 8002830:	753b      	strb	r3, [r7, #20]
                                   + StepperMotor::direction_t::BWD*( number_of_step_BR*motor_direction_inverter[id_moteurs::back_right] < 0));


	set_step_moteur(abs(number_of_step_FL), dir_FL, id_moteurs::front_left);
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	bfb8      	it	lt
 8002838:	425b      	neglt	r3, r3
 800283a:	4619      	mov	r1, r3
 800283c:	7dfa      	ldrb	r2, [r7, #23]
 800283e:	2300      	movs	r3, #0
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 f82c 	bl	800289e <_ZN11BlocMoteurs15set_step_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
	set_step_moteur(abs(number_of_step_FR), dir_FR, id_moteurs::front_right);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	bfb8      	it	lt
 800284c:	425b      	neglt	r3, r3
 800284e:	4619      	mov	r1, r3
 8002850:	7dba      	ldrb	r2, [r7, #22]
 8002852:	2301      	movs	r3, #1
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 f822 	bl	800289e <_ZN11BlocMoteurs15set_step_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
	set_step_moteur(abs(number_of_step_BL), dir_BL, id_moteurs::back_left);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	bfb8      	it	lt
 8002860:	425b      	neglt	r3, r3
 8002862:	4619      	mov	r1, r3
 8002864:	7d7a      	ldrb	r2, [r7, #21]
 8002866:	2302      	movs	r3, #2
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 f818 	bl	800289e <_ZN11BlocMoteurs15set_step_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
	set_step_moteur(abs(number_of_step_BR), dir_BR ,id_moteurs::back_right);
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	2b00      	cmp	r3, #0
 8002872:	bfb8      	it	lt
 8002874:	425b      	neglt	r3, r3
 8002876:	4619      	mov	r1, r3
 8002878:	7d3a      	ldrb	r2, [r7, #20]
 800287a:	2303      	movs	r3, #3
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 f80e 	bl	800289e <_ZN11BlocMoteurs15set_step_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
  shield_1->perform_prepared_actions();
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff fc38 	bl	80020fc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
  shield_2->perform_prepared_actions();
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff fc33 	bl	80020fc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>

}
 8002896:	bf00      	nop
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <_ZN11BlocMoteurs15set_step_moteurEjN12StepperMotor11direction_tE11_id_moteurs>:
  * @param step , nombre de step
  * @param dir , sens de rotation (FWD / BWD)
  * @param id , id du moteur (front_left, front_right, back_left, back_right)
  */
void BlocMoteurs::set_step_moteur(unsigned int steps, StepperMotor::direction_t dir, id_moteurs id)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b084      	sub	sp, #16
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	4611      	mov	r1, r2
 80028aa:	461a      	mov	r2, r3
 80028ac:	460b      	mov	r3, r1
 80028ae:	71fb      	strb	r3, [r7, #7]
 80028b0:	4613      	mov	r3, r2
 80028b2:	71bb      	strb	r3, [r7, #6]
    if (!moteurs_arret)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	f083 0301 	eor.w	r3, r3, #1
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d013      	beq.n	80028ea <_ZN11BlocMoteurs15set_step_moteurEjN12StepperMotor11direction_tE11_id_moteurs+0x4c>
    {
        moteurs[id]->prepare_move(dir, steps);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	691a      	ldr	r2, [r3, #16]
 80028c6:	79bb      	ldrb	r3, [r7, #6]
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	691a      	ldr	r2, [r3, #16]
 80028d2:	79bb      	ldrb	r3, [r7, #6]
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	79f9      	ldrb	r1, [r7, #7]
 80028e4:	68ba      	ldr	r2, [r7, #8]
 80028e6:	4798      	blx	r3
    }
    else
    {
    	moteurs[id]->prepare_hard_hiz(); // mode haute impédence pour pouvoir déplacer le robot à la main
    }
}
 80028e8:	e011      	b.n	800290e <_ZN11BlocMoteurs15set_step_moteurEjN12StepperMotor11direction_tE11_id_moteurs+0x70>
    	moteurs[id]->prepare_hard_hiz(); // mode haute impédence pour pouvoir déplacer le robot à la main
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	691a      	ldr	r2, [r3, #16]
 80028ee:	79bb      	ldrb	r3, [r7, #6]
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	6819      	ldr	r1, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	691a      	ldr	r2, [r3, #16]
 80028fa:	79bb      	ldrb	r3, [r7, #6]
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4608      	mov	r0, r1
 800290c:	4798      	blx	r3
}
 800290e:	bf00      	nop
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <_ZN11BlocMoteurs9motors_onEv>:

/**
  * @brief  autorise les commandes de vitesse jusqu'a l'appel des fonctions motors_stop
  */
void BlocMoteurs::motors_on()
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
    moteurs_arret = 0;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	701a      	strb	r2, [r3, #0]
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <_ZN11BlocMoteurs16motors_stop_softEv>:
  * Le passage a la vitesse a zero respecte les parametre de deceleration maximale du robot
  * et se realise au mieux des capacites du driver
  * (contrairement a la methode motors_stop_soft)
  */
void BlocMoteurs::motors_stop_soft()
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]

	for(int i = 0; i < NMOTEURS; i ++)
 8002938:	2300      	movs	r3, #0
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	e014      	b.n	8002968 <_ZN11BlocMoteurs16motors_stop_softEv+0x38>
	{
		moteurs[i]->prepare_soft_stop();
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691a      	ldr	r2, [r3, #16]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	6819      	ldr	r1, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691a      	ldr	r2, [r3, #16]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4608      	mov	r0, r1
 8002960:	4798      	blx	r3
	for(int i = 0; i < NMOTEURS; i ++)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	3301      	adds	r3, #1
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2b03      	cmp	r3, #3
 800296c:	dde7      	ble.n	800293e <_ZN11BlocMoteurs16motors_stop_softEv+0xe>
	}
    shield_1->perform_prepared_actions();
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff fbc2 	bl	80020fc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
    shield_2->perform_prepared_actions();
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff fbbd 	bl	80020fc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>

    moteurs_arret = true;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	701a      	strb	r2, [r3, #0]
}
 8002988:	bf00      	nop
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <_ZN11BlocMoteurs21set_max_speed_moteursEffff>:
  * @param  vitesse_rad_s_FR vitesse max (en valeur absolue) du moteur FR
  * @param  vitesse_rad_s_BL vitesse max (en valeur absolue) du moteur BL
  * @param  vitesse_rad_s_BR vitesse max (en valeur absolue) du moteur BR
  */
void BlocMoteurs::set_max_speed_moteurs(float vitesse_rad_s_FL, float vitesse_rad_s_FR, float vitesse_rad_s_BL, float vitesse_rad_s_BR)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08c      	sub	sp, #48	@ 0x30
 8002994:	af00      	add	r7, sp, #0
 8002996:	6178      	str	r0, [r7, #20]
 8002998:	ed87 0a04 	vstr	s0, [r7, #16]
 800299c:	edc7 0a03 	vstr	s1, [r7, #12]
 80029a0:	ed87 1a02 	vstr	s2, [r7, #8]
 80029a4:	edc7 1a01 	vstr	s3, [r7, #4]
	unsigned int pps[4] = {rad_to_step(fabs(vitesse_rad_s_FL)), rad_to_step(fabs(vitesse_rad_s_FR)), rad_to_step(fabs(vitesse_rad_s_BL)), rad_to_step(fabs(vitesse_rad_s_FR))};
 80029a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80029ac:	eef0 7ae7 	vabs.f32	s15, s15
 80029b0:	eeb0 0a67 	vmov.f32	s0, s15
 80029b4:	6978      	ldr	r0, [r7, #20]
 80029b6:	f7ff fcf9 	bl	80023ac <_ZN11BlocMoteurs11rad_to_stepEf>
 80029ba:	eef0 7a40 	vmov.f32	s15, s0
 80029be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029c2:	ee17 3a90 	vmov	r3, s15
 80029c6:	61fb      	str	r3, [r7, #28]
 80029c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80029cc:	eef0 7ae7 	vabs.f32	s15, s15
 80029d0:	eeb0 0a67 	vmov.f32	s0, s15
 80029d4:	6978      	ldr	r0, [r7, #20]
 80029d6:	f7ff fce9 	bl	80023ac <_ZN11BlocMoteurs11rad_to_stepEf>
 80029da:	eef0 7a40 	vmov.f32	s15, s0
 80029de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029e2:	ee17 3a90 	vmov	r3, s15
 80029e6:	623b      	str	r3, [r7, #32]
 80029e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80029ec:	eef0 7ae7 	vabs.f32	s15, s15
 80029f0:	eeb0 0a67 	vmov.f32	s0, s15
 80029f4:	6978      	ldr	r0, [r7, #20]
 80029f6:	f7ff fcd9 	bl	80023ac <_ZN11BlocMoteurs11rad_to_stepEf>
 80029fa:	eef0 7a40 	vmov.f32	s15, s0
 80029fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a02:	ee17 3a90 	vmov	r3, s15
 8002a06:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a08:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a0c:	eef0 7ae7 	vabs.f32	s15, s15
 8002a10:	eeb0 0a67 	vmov.f32	s0, s15
 8002a14:	6978      	ldr	r0, [r7, #20]
 8002a16:	f7ff fcc9 	bl	80023ac <_ZN11BlocMoteurs11rad_to_stepEf>
 8002a1a:	eef0 7a40 	vmov.f32	s15, s0
 8002a1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a22:	ee17 3a90 	vmov	r3, s15
 8002a26:	62bb      	str	r3, [r7, #40]	@ 0x28
	for( int i = 0; i < NMOTEURS; i ++)
 8002a28:	2300      	movs	r3, #0
 8002a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a2c:	e019      	b.n	8002a62 <_ZN11BlocMoteurs21set_max_speed_moteursEffff+0xd2>
	{
		moteurs[i]->prepare_set_max_speed(pps[i]);
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	691a      	ldr	r2, [r3, #16]
 8002a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	6818      	ldr	r0, [r3, #0]
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	691a      	ldr	r2, [r3, #16]
 8002a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	33d4      	adds	r3, #212	@ 0xd4
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	3330      	adds	r3, #48	@ 0x30
 8002a52:	443b      	add	r3, r7
 8002a54:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4790      	blx	r2
	for( int i = 0; i < NMOTEURS; i ++)
 8002a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a5e:	3301      	adds	r3, #1
 8002a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a64:	2b03      	cmp	r3, #3
 8002a66:	dde2      	ble.n	8002a2e <_ZN11BlocMoteurs21set_max_speed_moteursEffff+0x9e>
    
	}
  shield_1->perform_prepared_actions();
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff fb45 	bl	80020fc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
  shield_2->perform_prepared_actions();
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff fb40 	bl	80020fc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>

}
 8002a7c:	bf00      	nop
 8002a7e:	3730      	adds	r7, #48	@ 0x30
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <_ZN11BlocMoteurs19set_max_acc_moteursEffff>:
  * @param  acc_rad_s2_FR accéleration angulaire en rad/s^2 du moteur FR
  * @param  acc_rad_s2_BL accéleration angulaire en rad/s^2 du moteur BL
  * @param  acc_rad_s2_FR accéleration angulaire en rad/s^2 du moteur BR
  */
void BlocMoteurs::set_max_acc_moteurs(float acc_rad_s2_FL, float acc_rad_s2_FR, float acc_rad_s2_BL, float acc_rad_s2_BR)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08c      	sub	sp, #48	@ 0x30
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6178      	str	r0, [r7, #20]
 8002a8c:	ed87 0a04 	vstr	s0, [r7, #16]
 8002a90:	edc7 0a03 	vstr	s1, [r7, #12]
 8002a94:	ed87 1a02 	vstr	s2, [r7, #8]
 8002a98:	edc7 1a01 	vstr	s3, [r7, #4]
unsigned int pps2[4] = {rad_to_step(acc_rad_s2_FL), rad_to_step(acc_rad_s2_FR), rad_to_step(acc_rad_s2_BL), rad_to_step(acc_rad_s2_BR)};
 8002a9c:	ed97 0a04 	vldr	s0, [r7, #16]
 8002aa0:	6978      	ldr	r0, [r7, #20]
 8002aa2:	f7ff fc83 	bl	80023ac <_ZN11BlocMoteurs11rad_to_stepEf>
 8002aa6:	eef0 7a40 	vmov.f32	s15, s0
 8002aaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aae:	ee17 3a90 	vmov	r3, s15
 8002ab2:	61fb      	str	r3, [r7, #28]
 8002ab4:	ed97 0a03 	vldr	s0, [r7, #12]
 8002ab8:	6978      	ldr	r0, [r7, #20]
 8002aba:	f7ff fc77 	bl	80023ac <_ZN11BlocMoteurs11rad_to_stepEf>
 8002abe:	eef0 7a40 	vmov.f32	s15, s0
 8002ac2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ac6:	ee17 3a90 	vmov	r3, s15
 8002aca:	623b      	str	r3, [r7, #32]
 8002acc:	ed97 0a02 	vldr	s0, [r7, #8]
 8002ad0:	6978      	ldr	r0, [r7, #20]
 8002ad2:	f7ff fc6b 	bl	80023ac <_ZN11BlocMoteurs11rad_to_stepEf>
 8002ad6:	eef0 7a40 	vmov.f32	s15, s0
 8002ada:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ade:	ee17 3a90 	vmov	r3, s15
 8002ae2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ae4:	ed97 0a01 	vldr	s0, [r7, #4]
 8002ae8:	6978      	ldr	r0, [r7, #20]
 8002aea:	f7ff fc5f 	bl	80023ac <_ZN11BlocMoteurs11rad_to_stepEf>
 8002aee:	eef0 7a40 	vmov.f32	s15, s0
 8002af2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002af6:	ee17 3a90 	vmov	r3, s15
 8002afa:	62bb      	str	r3, [r7, #40]	@ 0x28
	for( int i = 0; i < NMOTEURS; i ++)
 8002afc:	2300      	movs	r3, #0
 8002afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b00:	e019      	b.n	8002b36 <_ZN11BlocMoteurs19set_max_acc_moteursEffff+0xb2>
	{
		moteurs[i]->prepare_set_acceleration(pps2[i]);
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	691a      	ldr	r2, [r3, #16]
 8002b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	691a      	ldr	r2, [r3, #16]
 8002b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	33dc      	adds	r3, #220	@ 0xdc
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	3330      	adds	r3, #48	@ 0x30
 8002b26:	443b      	add	r3, r7
 8002b28:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4790      	blx	r2
	for( int i = 0; i < NMOTEURS; i ++)
 8002b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b32:	3301      	adds	r3, #1
 8002b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	dde2      	ble.n	8002b02 <_ZN11BlocMoteurs19set_max_acc_moteursEffff+0x7e>
	}
  shield_1->perform_prepared_actions();
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff fadb 	bl	80020fc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
  shield_2->perform_prepared_actions();
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff fad6 	bl	80020fc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>

}
 8002b50:	bf00      	nop
 8002b52:	3730      	adds	r7, #48	@ 0x30
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <_ZN11BlocMoteurs19set_max_dec_moteursEffff>:
  * @param  dec_rad_s2_FR décéleration angulaire en rad/s^2 du moteur FR
  * @param  dec_rad_s2_BL décéleration angulaire en rad/s^2 du moteur BL
  * @param  dec_rad_s2_FR décéleration angulaire en rad/s^2 du moteur BR
  */
void BlocMoteurs::set_max_dec_moteurs(float dec_rad_s2_FL, float dec_rad_s2_FR, float dec_rad_s2_BL, float dec_rad_s2_BR)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08c      	sub	sp, #48	@ 0x30
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6178      	str	r0, [r7, #20]
 8002b60:	ed87 0a04 	vstr	s0, [r7, #16]
 8002b64:	edc7 0a03 	vstr	s1, [r7, #12]
 8002b68:	ed87 1a02 	vstr	s2, [r7, #8]
 8002b6c:	edc7 1a01 	vstr	s3, [r7, #4]
unsigned int pps2[4] = {rad_to_step(dec_rad_s2_FL), rad_to_step(dec_rad_s2_FR), rad_to_step(dec_rad_s2_BL), rad_to_step(dec_rad_s2_BR)};
 8002b70:	ed97 0a04 	vldr	s0, [r7, #16]
 8002b74:	6978      	ldr	r0, [r7, #20]
 8002b76:	f7ff fc19 	bl	80023ac <_ZN11BlocMoteurs11rad_to_stepEf>
 8002b7a:	eef0 7a40 	vmov.f32	s15, s0
 8002b7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b82:	ee17 3a90 	vmov	r3, s15
 8002b86:	61fb      	str	r3, [r7, #28]
 8002b88:	ed97 0a03 	vldr	s0, [r7, #12]
 8002b8c:	6978      	ldr	r0, [r7, #20]
 8002b8e:	f7ff fc0d 	bl	80023ac <_ZN11BlocMoteurs11rad_to_stepEf>
 8002b92:	eef0 7a40 	vmov.f32	s15, s0
 8002b96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b9a:	ee17 3a90 	vmov	r3, s15
 8002b9e:	623b      	str	r3, [r7, #32]
 8002ba0:	ed97 0a02 	vldr	s0, [r7, #8]
 8002ba4:	6978      	ldr	r0, [r7, #20]
 8002ba6:	f7ff fc01 	bl	80023ac <_ZN11BlocMoteurs11rad_to_stepEf>
 8002baa:	eef0 7a40 	vmov.f32	s15, s0
 8002bae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bb2:	ee17 3a90 	vmov	r3, s15
 8002bb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bb8:	ed97 0a01 	vldr	s0, [r7, #4]
 8002bbc:	6978      	ldr	r0, [r7, #20]
 8002bbe:	f7ff fbf5 	bl	80023ac <_ZN11BlocMoteurs11rad_to_stepEf>
 8002bc2:	eef0 7a40 	vmov.f32	s15, s0
 8002bc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bca:	ee17 3a90 	vmov	r3, s15
 8002bce:	62bb      	str	r3, [r7, #40]	@ 0x28
	for( int i = 0; i < NMOTEURS; i ++)
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bd4:	e019      	b.n	8002c0a <_ZN11BlocMoteurs19set_max_dec_moteursEffff+0xb2>
	{
		moteurs[i]->prepare_set_deceleration(pps2[i]);
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	691a      	ldr	r2, [r3, #16]
 8002bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	6818      	ldr	r0, [r3, #0]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	691a      	ldr	r2, [r3, #16]
 8002be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	33e0      	adds	r3, #224	@ 0xe0
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	3330      	adds	r3, #48	@ 0x30
 8002bfa:	443b      	add	r3, r7
 8002bfc:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8002c00:	4619      	mov	r1, r3
 8002c02:	4790      	blx	r2
	for( int i = 0; i < NMOTEURS; i ++)
 8002c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c06:	3301      	adds	r3, #1
 8002c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c0c:	2b03      	cmp	r3, #3
 8002c0e:	dde2      	ble.n	8002bd6 <_ZN11BlocMoteurs19set_max_dec_moteursEffff+0x7e>
	}
  shield_1->perform_prepared_actions();
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff fa71 	bl	80020fc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
  shield_2->perform_prepared_actions();
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff fa6c 	bl	80020fc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>

}
 8002c24:	bf00      	nop
 8002c26:	3730      	adds	r7, #48	@ 0x30
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <_ZN11BlocMoteurs19mesure_vitesses_radEv>:
  *
  * @retval tableau float des 4 valeursen rad/s des vitesse. Les index correspondent à l'enum motor id
  * ex : id_moteurs::front_left = 0 -> to_return[0] = vitesse du moteur Avant gauche (front left)
  */
float* BlocMoteurs::mesure_vitesses_rad()
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  static float to_return[NMOTEURS];
  int32_t* moteurs_speed_step = mesure_vitesses_step();
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 f823 	bl	8002c80 <_ZN11BlocMoteurs20mesure_vitesses_stepEv>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	60bb      	str	r3, [r7, #8]
  for( int i = 0; i<4; i ++)
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	e013      	b.n	8002c6c <_ZN11BlocMoteurs19mesure_vitesses_radEv+0x40>
  {
    to_return[i] = step_to_rad( moteurs_speed_step[i]);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4619      	mov	r1, r3
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7ff fbc3 	bl	80023dc <_ZN11BlocMoteurs11step_to_radEj>
 8002c56:	eef0 7a40 	vmov.f32	s15, s0
 8002c5a:	4a08      	ldr	r2, [pc, #32]	@ (8002c7c <_ZN11BlocMoteurs19mesure_vitesses_radEv+0x50>)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	edc3 7a00 	vstr	s15, [r3]
  for( int i = 0; i<4; i ++)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2b03      	cmp	r3, #3
 8002c70:	dde8      	ble.n	8002c44 <_ZN11BlocMoteurs19mesure_vitesses_radEv+0x18>
  }
  return to_return;
 8002c72:	4b02      	ldr	r3, [pc, #8]	@ (8002c7c <_ZN11BlocMoteurs19mesure_vitesses_radEv+0x50>)
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	2000020c 	.word	0x2000020c

08002c80 <_ZN11BlocMoteurs20mesure_vitesses_stepEv>:
  *
  * @retval tableau float des 4 valeursen rad/s des vitesse. Les index correspondent à l'enum motor id
  * ex : id_moteurs::front_left = 0 -> to_return[0] = vitesse du moteur Avant gauche (front left)
  */
int32_t * BlocMoteurs::mesure_vitesses_step()
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b090      	sub	sp, #64	@ 0x40
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
	static int32_t to_return[NMOTEURS];
	for( int i = 0; i < NMOTEURS; i ++)
 8002c88:	2300      	movs	r3, #0
 8002c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c8c:	e013      	b.n	8002cb6 <_ZN11BlocMoteurs20mesure_vitesses_stepEv+0x36>
	{
		moteurs[i]->prepare_get_speed();
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691a      	ldr	r2, [r3, #16]
 8002c92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	6819      	ldr	r1, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691a      	ldr	r2, [r3, #16]
 8002c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	33a8      	adds	r3, #168	@ 0xa8
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4608      	mov	r0, r1
 8002cae:	4798      	blx	r3
	for( int i = 0; i < NMOTEURS; i ++)
 8002cb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	dde8      	ble.n	8002c8e <_ZN11BlocMoteurs20mesure_vitesses_stepEv+0xe>
	}
	uint32_t* result1 = shield_1->perform_prepared_actions();
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff fa1b 	bl	80020fc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
 8002cc6:	6338      	str	r0, [r7, #48]	@ 0x30
	uint32_t* result2 = shield_2->perform_prepared_actions();
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff fa15 	bl	80020fc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
 8002cd2:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t results[4] = {result1[0], result1[1], result2[0], result2[1]};
 8002cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	613b      	str	r3, [r7, #16]
 8002cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	61bb      	str	r3, [r7, #24]
 8002ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	61fb      	str	r3, [r7, #28]

	for( int i = 0; i < NMOTEURS; i ++)
 8002cec:	2300      	movs	r3, #0
 8002cee:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002cf0:	e013      	b.n	8002d1a <_ZN11BlocMoteurs20mesure_vitesses_stepEv+0x9a>
	{
		moteurs[i]->prepare_get_direction();
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691a      	ldr	r2, [r3, #16]
 8002cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	6819      	ldr	r1, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691a      	ldr	r2, [r3, #16]
 8002d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	33bc      	adds	r3, #188	@ 0xbc
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4608      	mov	r0, r1
 8002d12:	4798      	blx	r3
	for( int i = 0; i < NMOTEURS; i ++)
 8002d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d16:	3301      	adds	r3, #1
 8002d18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d1c:	2b03      	cmp	r3, #3
 8002d1e:	dde8      	ble.n	8002cf2 <_ZN11BlocMoteurs20mesure_vitesses_stepEv+0x72>
	}
	uint32_t* result1_dir = shield_1->perform_prepared_actions();
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff f9e9 	bl	80020fc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
 8002d2a:	62b8      	str	r0, [r7, #40]	@ 0x28
	uint32_t* result2_dir = shield_2->perform_prepared_actions();
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff f9e3 	bl	80020fc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
 8002d36:	6278      	str	r0, [r7, #36]	@ 0x24
  StepperMotor::direction_t results_dir[4] = {(StepperMotor::direction_t)result1_dir[0], 
 8002d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	b2db      	uxtb	r3, r3
                                              (StepperMotor::direction_t)result1_dir[1], 
                                              (StepperMotor::direction_t)result2_dir[0], 
                                              (StepperMotor::direction_t)result2_dir[1]};
 8002d3e:	733b      	strb	r3, [r7, #12]
                                              (StepperMotor::direction_t)result1_dir[1], 
 8002d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d42:	3304      	adds	r3, #4
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	b2db      	uxtb	r3, r3
                                              (StepperMotor::direction_t)result2_dir[1]};
 8002d48:	737b      	strb	r3, [r7, #13]
                                              (StepperMotor::direction_t)result2_dir[0], 
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	b2db      	uxtb	r3, r3
                                              (StepperMotor::direction_t)result2_dir[1]};
 8002d50:	73bb      	strb	r3, [r7, #14]
 8002d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d54:	3304      	adds	r3, #4
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	73fb      	strb	r3, [r7, #15]


  for( int i = 0; i< 4; i ++)
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d60:	e042      	b.n	8002de8 <_ZN11BlocMoteurs20mesure_vitesses_stepEv+0x168>
  {
    int32_t multiplier = 1*(results_dir[i]==StepperMotor::FWD) -1*(results_dir[i]==StepperMotor::BWD);
 8002d62:	f107 020c 	add.w	r2, r7, #12
 8002d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d68:	4413      	add	r3, r2
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	bf0c      	ite	eq
 8002d70:	2301      	moveq	r3, #1
 8002d72:	2300      	movne	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	4619      	mov	r1, r3
 8002d78:	f107 020c 	add.w	r2, r7, #12
 8002d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d7e:	4413      	add	r3, r2
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	bf0c      	ite	eq
 8002d86:	2301      	moveq	r3, #1
 8002d88:	2300      	movne	r3, #0
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	1acb      	subs	r3, r1, r3
 8002d8e:	623b      	str	r3, [r7, #32]
    multiplier*= motor_direction_inverter[index_to_enum[i]];
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	ee07 3a90 	vmov	s15, r3
 8002d96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d9e:	4413      	add	r3, r2
 8002da0:	3314      	adds	r3, #20
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	3306      	adds	r3, #6
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	edd3 7a00 	vldr	s15, [r3]
 8002db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002db8:	ee17 3a90 	vmov	r3, s15
 8002dbc:	623b      	str	r3, [r7, #32]

    to_return[ index_to_enum[i] ] =  multiplier*(results[i]); //utilisation du tableau de correspondance pour assigner la bonne vitesse au bon moteur
 8002dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	3340      	adds	r3, #64	@ 0x40
 8002dc4:	443b      	add	r3, r7
 8002dc6:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8002dca:	6a3a      	ldr	r2, [r7, #32]
 8002dcc:	fb02 f103 	mul.w	r1, r2, r3
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3314      	adds	r3, #20
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	4b06      	ldr	r3, [pc, #24]	@ (8002df8 <_ZN11BlocMoteurs20mesure_vitesses_stepEv+0x178>)
 8002dde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for( int i = 0; i< 4; i ++)
 8002de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002de4:	3301      	adds	r3, #1
 8002de6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dea:	2b03      	cmp	r3, #3
 8002dec:	ddb9      	ble.n	8002d62 <_ZN11BlocMoteurs20mesure_vitesses_stepEv+0xe2>
  }

	return to_return;
 8002dee:	4b02      	ldr	r3, [pc, #8]	@ (8002df8 <_ZN11BlocMoteurs20mesure_vitesses_stepEv+0x178>)
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3740      	adds	r7, #64	@ 0x40
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	2000021c 	.word	0x2000021c

08002dfc <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8002dfc:	b5b0      	push	{r4, r5, r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7fd fbbc 	bl	8000584 <__aeabi_i2d>
 8002e0c:	4604      	mov	r4, r0
 8002e0e:	460d      	mov	r5, r1
 8002e10:	6838      	ldr	r0, [r7, #0]
 8002e12:	f7fd fbb7 	bl	8000584 <__aeabi_i2d>
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	ec43 2b11 	vmov	d1, r2, r3
 8002e1e:	ec45 4b10 	vmov	d0, r4, r5
 8002e22:	f00e fdf3 	bl	8011a0c <pow>
 8002e26:	eeb0 7a40 	vmov.f32	s14, s0
 8002e2a:	eef0 7a60 	vmov.f32	s15, s1
    }
 8002e2e:	eeb0 0a47 	vmov.f32	s0, s14
 8002e32:	eef0 0a67 	vmov.f32	s1, s15
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bdb0      	pop	{r4, r5, r7, pc}

08002e3c <_ZN11BlocMoteurs17mesure_pas_ecouleEv>:
  *
  * @retval tableau float des 4 valeursen des pas ecoulees. Les index correspondent à l'enum motor id
  * ex : id_moteurs::front_left = 0 -> to_return[0] = nombre de pas ecoulees du moteur Avant gauche (front left)
  */
int32_t* BlocMoteurs::mesure_pas_ecoule()
{
 8002e3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e40:	b08d      	sub	sp, #52	@ 0x34
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  static uint32_t last_values[NMOTEURS] = {0,0,0,0};
  static int32_t to_return[NMOTEURS];
  
	for( int i = 0; i < NMOTEURS; i ++)
 8002e46:	2300      	movs	r3, #0
 8002e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e4a:	e013      	b.n	8002e74 <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x38>
	{
		moteurs[i]->prepare_get_position();
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691a      	ldr	r2, [r3, #16]
 8002e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	6819      	ldr	r1, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	33a0      	adds	r3, #160	@ 0xa0
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4608      	mov	r0, r1
 8002e6c:	4798      	blx	r3
	for( int i = 0; i < NMOTEURS; i ++)
 8002e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e70:	3301      	adds	r3, #1
 8002e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	dde8      	ble.n	8002e4c <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x10>
	}
	uint32_t* result1 = shield_1->perform_prepared_actions();
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff f93c 	bl	80020fc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
 8002e84:	6238      	str	r0, [r7, #32]
	uint32_t* result2 = shield_2->perform_prepared_actions();
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff f936 	bl	80020fc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
 8002e90:	61f8      	str	r0, [r7, #28]
  uint32_t results[4] = {result1[0], result1[1], result2[0], result2[1]};
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	617b      	str	r3, [r7, #20]
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	61bb      	str	r3, [r7, #24]
	
  for( int i = 0; i < NMOTEURS; i ++)
 8002eaa:	2300      	movs	r3, #0
 8002eac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002eae:	e0a2      	b.n	8002ff6 <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x1ba>
	{
		int32_t diff = results[i] - last_values[i] ;
 8002eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	3330      	adds	r3, #48	@ 0x30
 8002eb6:	443b      	add	r3, r7
 8002eb8:	f853 2c24 	ldr.w	r2, [r3, #-36]
 8002ebc:	4953      	ldr	r1, [pc, #332]	@ (800300c <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x1d0>)
 8002ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ec0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	627b      	str	r3, [r7, #36]	@ 0x24
		if( diff > std::pow(2,21)-1)
 8002ec8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002eca:	f7fd fb5b 	bl	8000584 <__aeabi_i2d>
 8002ece:	4680      	mov	r8, r0
 8002ed0:	4689      	mov	r9, r1
 8002ed2:	2115      	movs	r1, #21
 8002ed4:	2002      	movs	r0, #2
 8002ed6:	f7ff ff91 	bl	8002dfc <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002eda:	ec51 0b10 	vmov	r0, r1, d0
 8002ede:	f04f 0200 	mov.w	r2, #0
 8002ee2:	4b4b      	ldr	r3, [pc, #300]	@ (8003010 <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x1d4>)
 8002ee4:	f7fd fa00 	bl	80002e8 <__aeabi_dsub>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	2101      	movs	r1, #1
 8002eee:	460e      	mov	r6, r1
 8002ef0:	4640      	mov	r0, r8
 8002ef2:	4649      	mov	r1, r9
 8002ef4:	f7fd fe40 	bl	8000b78 <__aeabi_dcmpgt>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0xc6>
 8002efe:	2300      	movs	r3, #0
 8002f00:	461e      	mov	r6, r3
 8002f02:	b2f3      	uxtb	r3, r6
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d015      	beq.n	8002f34 <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0xf8>
		{
		  diff-=std::pow(2,22);
 8002f08:	2116      	movs	r1, #22
 8002f0a:	2002      	movs	r0, #2
 8002f0c:	f7ff ff76 	bl	8002dfc <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002f10:	ec59 8b10 	vmov	r8, r9, d0
 8002f14:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002f16:	f7fd fb35 	bl	8000584 <__aeabi_i2d>
 8002f1a:	4642      	mov	r2, r8
 8002f1c:	464b      	mov	r3, r9
 8002f1e:	f7fd f9e3 	bl	80002e8 <__aeabi_dsub>
 8002f22:	4602      	mov	r2, r0
 8002f24:	460b      	mov	r3, r1
 8002f26:	4610      	mov	r0, r2
 8002f28:	4619      	mov	r1, r3
 8002f2a:	f7fd fe45 	bl	8000bb8 <__aeabi_d2iz>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f32:	e034      	b.n	8002f9e <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x162>

		}
		else if( diff < -std::pow(2,21) )
 8002f34:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002f36:	f7fd fb25 	bl	8000584 <__aeabi_i2d>
 8002f3a:	4680      	mov	r8, r0
 8002f3c:	4689      	mov	r9, r1
 8002f3e:	2115      	movs	r1, #21
 8002f40:	2002      	movs	r0, #2
 8002f42:	f7ff ff5b 	bl	8002dfc <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002f46:	ec53 2b10 	vmov	r2, r3, d0
 8002f4a:	4614      	mov	r4, r2
 8002f4c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002f50:	2301      	movs	r3, #1
 8002f52:	461e      	mov	r6, r3
 8002f54:	4622      	mov	r2, r4
 8002f56:	462b      	mov	r3, r5
 8002f58:	4640      	mov	r0, r8
 8002f5a:	4649      	mov	r1, r9
 8002f5c:	f7fd fdee 	bl	8000b3c <__aeabi_dcmplt>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x12e>
 8002f66:	2300      	movs	r3, #0
 8002f68:	461e      	mov	r6, r3
 8002f6a:	b2f3      	uxtb	r3, r6
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d016      	beq.n	8002f9e <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x162>
		{
		  diff+=std::pow(2,22);
 8002f70:	2116      	movs	r1, #22
 8002f72:	2002      	movs	r0, #2
 8002f74:	f7ff ff42 	bl	8002dfc <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002f78:	ec59 8b10 	vmov	r8, r9, d0
 8002f7c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002f7e:	f7fd fb01 	bl	8000584 <__aeabi_i2d>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	4640      	mov	r0, r8
 8002f88:	4649      	mov	r1, r9
 8002f8a:	f7fd f9af 	bl	80002ec <__adddf3>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	4610      	mov	r0, r2
 8002f94:	4619      	mov	r1, r3
 8002f96:	f7fd fe0f 	bl	8000bb8 <__aeabi_d2iz>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		to_return[index_to_enum[i]] = motor_direction_inverter[index_to_enum[i]]*( diff);
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa2:	4413      	add	r3, r2
 8002fa4:	3314      	adds	r3, #20
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	3306      	adds	r3, #6
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	ed93 7a00 	vldr	s14, [r3]
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb6:	ee07 3a90 	vmov	s15, r3
 8002fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3314      	adds	r3, #20
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fd2:	ee17 1a90 	vmov	r1, s15
 8002fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8003014 <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x1d8>)
 8002fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		last_values[i] = results[i];
 8002fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	3330      	adds	r3, #48	@ 0x30
 8002fe2:	443b      	add	r3, r7
 8002fe4:	f853 2c24 	ldr.w	r2, [r3, #-36]
 8002fe8:	4908      	ldr	r1, [pc, #32]	@ (800300c <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x1d0>)
 8002fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for( int i = 0; i < NMOTEURS; i ++)
 8002ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff8:	2b03      	cmp	r3, #3
 8002ffa:	f77f af59 	ble.w	8002eb0 <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x74>
	}
  return to_return;
 8002ffe:	4b05      	ldr	r3, [pc, #20]	@ (8003014 <_ZN11BlocMoteurs17mesure_pas_ecouleEv+0x1d8>)

}
 8003000:	4618      	mov	r0, r3
 8003002:	3734      	adds	r7, #52	@ 0x34
 8003004:	46bd      	mov	sp, r7
 8003006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800300a:	bf00      	nop
 800300c:	2000022c 	.word	0x2000022c
 8003010:	3ff00000 	.word	0x3ff00000
 8003014:	2000023c 	.word	0x2000023c

08003018 <_ZN11BlocMoteurs8get_busyEv>:

bool BlocMoteurs::get_busy()
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08a      	sub	sp, #40	@ 0x28
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]

	uint32_t motr0_status = moteurs[0]->get_status();
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	330c      	adds	r3, #12
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4610      	mov	r0, r2
 8003034:	4798      	blx	r3
 8003036:	4603      	mov	r3, r0
 8003038:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t motr1_status = moteurs[1]->get_status();
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	3304      	adds	r3, #4
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	3304      	adds	r3, #4
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	330c      	adds	r3, #12
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4610      	mov	r0, r2
 8003052:	4798      	blx	r3
 8003054:	4603      	mov	r3, r0
 8003056:	623b      	str	r3, [r7, #32]
	uint32_t motr2_status = moteurs[2]->get_status();
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	3308      	adds	r3, #8
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	3308      	adds	r3, #8
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	330c      	adds	r3, #12
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4610      	mov	r0, r2
 8003070:	4798      	blx	r3
 8003072:	4603      	mov	r3, r0
 8003074:	61fb      	str	r3, [r7, #28]
	uint32_t motr3_status = moteurs[3]->get_status();
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	330c      	adds	r3, #12
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	330c      	adds	r3, #12
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	330c      	adds	r3, #12
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4610      	mov	r0, r2
 800308e:	4798      	blx	r3
 8003090:	4603      	mov	r3, r0
 8003092:	61bb      	str	r3, [r7, #24]



  sL6470_StatusRegister_t* status_registers[4] = {(sL6470_StatusRegister_t*) &motr0_status,(sL6470_StatusRegister_t*)&motr1_status,(sL6470_StatusRegister_t*)&motr2_status,(sL6470_StatusRegister_t*)&motr3_status};
 8003094:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003098:	60bb      	str	r3, [r7, #8]
 800309a:	f107 0320 	add.w	r3, r7, #32
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	f107 031c 	add.w	r3, r7, #28
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	f107 0318 	add.w	r3, r7, #24
 80030aa:	617b      	str	r3, [r7, #20]

  return !status_registers[0]->BUSY ||  !status_registers[1]->BUSY || !status_registers[2]->BUSY || !status_registers[3]->BUSY;
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d014      	beq.n	80030e4 <_ZN11BlocMoteurs8get_busyEv+0xcc>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00d      	beq.n	80030e4 <_ZN11BlocMoteurs8get_busyEv+0xcc>
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d006      	beq.n	80030e4 <_ZN11BlocMoteurs8get_busyEv+0xcc>
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <_ZN11BlocMoteurs8get_busyEv+0xd0>
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <_ZN11BlocMoteurs8get_busyEv+0xd2>
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3728      	adds	r7, #40	@ 0x28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
     * @param standby_reset pin name of the STBY\RST pin of the component.
     * @param ssel_port     port name of the SSEL pin of the SPI device to be used for communication.
     * @param ssel_pin      pin name of the SSEL pin of the SPI device to be used for communication.
     * @param spi           SPI handler to be used for communication.
     */
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	603b      	str	r3, [r7, #0]
 8003100:	4613      	mov	r3, r2
 8003102:	80fb      	strh	r3, [r7, #6]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4618      	mov	r0, r3
 8003108:	f009 fc54 	bl	800c9b4 <_ZN13abstractL6470C1Ev>
 800310c:	4a27      	ldr	r2, [pc, #156]	@ (80031ac <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	609a      	str	r2, [r3, #8]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	88fa      	ldrh	r2, [r7, #6]
 800311c:	819a      	strh	r2, [r3, #12]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	611a      	str	r2, [r3, #16]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8b3a      	ldrh	r2, [r7, #24]
 8003128:	829a      	strh	r2, [r3, #20]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	69fa      	ldr	r2, [r7, #28]
 800312e:	619a      	str	r2, [r3, #24]
    {

    	if(std::is_same<shield_x,shield_1>::value)
    	{
    		shield_id = 1;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2201      	movs	r2, #1
 8003134:	711a      	strb	r2, [r3, #4]
    		shield_1::count++;
 8003136:	4b1e      	ldr	r3, [pc, #120]	@ (80031b0 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	3301      	adds	r3, #1
 800313c:	b2da      	uxtb	r2, r3
 800313e:	4b1c      	ldr	r3, [pc, #112]	@ (80031b0 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8003140:	701a      	strb	r2, [r3, #0]
    	}
    	else
    	{
    		throw std::runtime_error("template of L6470 must be shield_1, shield_2 or shield_3");
    	}
        L6470_Register = &_L6470_Register[0];
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4a1b      	ldr	r2, [pc, #108]	@ (80031b4 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 8003146:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4a1b      	ldr	r2, [pc, #108]	@ (80031b8 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 800314c:	625a      	str	r2, [r3, #36]	@ 0x24
        L6470_Direction = &_L6470_Direction[0];
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	4a1a      	ldr	r2, [pc, #104]	@ (80031bc <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 8003152:	629a      	str	r2, [r3, #40]	@ 0x28
        L6470_ACT = &_L6470_ACT[0];
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4a1a      	ldr	r2, [pc, #104]	@ (80031c0 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 8003158:	62da      	str	r2, [r3, #44]	@ 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	635a      	str	r2, [r3, #52]	@ 0x34
        prepared_action = PREPARED_NO_ACTION;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        L6470_Id = number_of_devices++;
 800316c:	4b15      	ldr	r3, [pc, #84]	@ (80031c4 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	1c5a      	adds	r2, r3, #1
 8003172:	b2d1      	uxtb	r1, r2
 8003174:	4a13      	ldr	r2, [pc, #76]	@ (80031c4 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8003176:	7011      	strb	r1, [r2, #0]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 800317c:	4b12      	ldr	r3, [pc, #72]	@ (80031c8 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 800317e:	2200      	movs	r2, #0
 8003180:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 8003182:	2220      	movs	r2, #32
 8003184:	2100      	movs	r1, #0
 8003186:	4811      	ldr	r0, [pc, #68]	@ (80031cc <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 8003188:	f010 f9d1 	bl	801352e <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 800318c:	2208      	movs	r2, #8
 800318e:	2100      	movs	r1, #0
 8003190:	480f      	ldr	r0, [pc, #60]	@ (80031d0 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 8003192:	f010 f9cc 	bl	801352e <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8003196:	2208      	movs	r2, #8
 8003198:	2100      	movs	r1, #0
 800319a:	480e      	ldr	r0, [pc, #56]	@ (80031d4 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 800319c:	f010 f9c7 	bl	801352e <memset>
    }
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	080157f4 	.word	0x080157f4
 80031b0:	200002e8 	.word	0x200002e8
 80031b4:	08015ab8 	.word	0x08015ab8
 80031b8:	08015cac 	.word	0x08015cac
 80031bc:	08015db8 	.word	0x08015db8
 80031c0:	08015dcc 	.word	0x08015dcc
 80031c4:	2000024c 	.word	0x2000024c
 80031c8:	2000024d 	.word	0x2000024d
 80031cc:	20000250 	.word	0x20000250
 80031d0:	20000270 	.word	0x20000270
 80031d4:	20000278 	.word	0x20000278

080031d8 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	603b      	str	r3, [r7, #0]
 80031e4:	4613      	mov	r3, r2
 80031e6:	80fb      	strh	r3, [r7, #6]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f009 fbe2 	bl	800c9b4 <_ZN13abstractL6470C1Ev>
 80031f0:	4a27      	ldr	r2, [pc, #156]	@ (8003290 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	609a      	str	r2, [r3, #8]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	88fa      	ldrh	r2, [r7, #6]
 8003200:	819a      	strh	r2, [r3, #12]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	611a      	str	r2, [r3, #16]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8b3a      	ldrh	r2, [r7, #24]
 800320c:	829a      	strh	r2, [r3, #20]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	69fa      	ldr	r2, [r7, #28]
 8003212:	619a      	str	r2, [r3, #24]
    		shield_id = 2;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2202      	movs	r2, #2
 8003218:	711a      	strb	r2, [r3, #4]
    		shield_2::count++;
 800321a:	4b1e      	ldr	r3, [pc, #120]	@ (8003294 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	3301      	adds	r3, #1
 8003220:	b2da      	uxtb	r2, r3
 8003222:	4b1c      	ldr	r3, [pc, #112]	@ (8003294 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8003224:	701a      	strb	r2, [r3, #0]
        L6470_Register = &_L6470_Register[0];
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4a1b      	ldr	r2, [pc, #108]	@ (8003298 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 800322a:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4a1b      	ldr	r2, [pc, #108]	@ (800329c <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 8003230:	625a      	str	r2, [r3, #36]	@ 0x24
        L6470_Direction = &_L6470_Direction[0];
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4a1a      	ldr	r2, [pc, #104]	@ (80032a0 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 8003236:	629a      	str	r2, [r3, #40]	@ 0x28
        L6470_ACT = &_L6470_ACT[0];
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4a1a      	ldr	r2, [pc, #104]	@ (80032a4 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 800323c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	635a      	str	r2, [r3, #52]	@ 0x34
        prepared_action = PREPARED_NO_ACTION;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        L6470_Id = number_of_devices++;
 8003250:	4b15      	ldr	r3, [pc, #84]	@ (80032a8 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	b2d1      	uxtb	r1, r2
 8003258:	4a13      	ldr	r2, [pc, #76]	@ (80032a8 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 800325a:	7011      	strb	r1, [r2, #0]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 8003260:	4b12      	ldr	r3, [pc, #72]	@ (80032ac <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 8003262:	2200      	movs	r2, #0
 8003264:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 8003266:	2220      	movs	r2, #32
 8003268:	2100      	movs	r1, #0
 800326a:	4811      	ldr	r0, [pc, #68]	@ (80032b0 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 800326c:	f010 f95f 	bl	801352e <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8003270:	2208      	movs	r2, #8
 8003272:	2100      	movs	r1, #0
 8003274:	480f      	ldr	r0, [pc, #60]	@ (80032b4 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 8003276:	f010 f95a 	bl	801352e <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 800327a:	2208      	movs	r2, #8
 800327c:	2100      	movs	r1, #0
 800327e:	480e      	ldr	r0, [pc, #56]	@ (80032b8 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 8003280:	f010 f955 	bl	801352e <memset>
    }
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	08015588 	.word	0x08015588
 8003294:	200002e9 	.word	0x200002e9
 8003298:	08015dd8 	.word	0x08015dd8
 800329c:	08015fcc 	.word	0x08015fcc
 80032a0:	080160d8 	.word	0x080160d8
 80032a4:	080160ec 	.word	0x080160ec
 80032a8:	20000280 	.word	0x20000280
 80032ac:	20000281 	.word	0x20000281
 80032b0:	20000284 	.word	0x20000284
 80032b4:	200002a4 	.word	0x200002a4
 80032b8:	200002ac 	.word	0x200002ac

080032bc <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	603b      	str	r3, [r7, #0]
 80032c8:	4613      	mov	r3, r2
 80032ca:	80fb      	strh	r3, [r7, #6]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f009 fb70 	bl	800c9b4 <_ZN13abstractL6470C1Ev>
 80032d4:	4a27      	ldr	r2, [pc, #156]	@ (8003374 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	88fa      	ldrh	r2, [r7, #6]
 80032e4:	819a      	strh	r2, [r3, #12]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	611a      	str	r2, [r3, #16]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8b3a      	ldrh	r2, [r7, #24]
 80032f0:	829a      	strh	r2, [r3, #20]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	69fa      	ldr	r2, [r7, #28]
 80032f6:	619a      	str	r2, [r3, #24]
    		shield_id = 3;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2203      	movs	r2, #3
 80032fc:	711a      	strb	r2, [r3, #4]
    		shield_3::count++;
 80032fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003378 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	3301      	adds	r3, #1
 8003304:	b2da      	uxtb	r2, r3
 8003306:	4b1c      	ldr	r3, [pc, #112]	@ (8003378 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8003308:	701a      	strb	r2, [r3, #0]
        L6470_Register = &_L6470_Register[0];
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4a1b      	ldr	r2, [pc, #108]	@ (800337c <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 800330e:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4a1b      	ldr	r2, [pc, #108]	@ (8003380 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 8003314:	625a      	str	r2, [r3, #36]	@ 0x24
        L6470_Direction = &_L6470_Direction[0];
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4a1a      	ldr	r2, [pc, #104]	@ (8003384 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 800331a:	629a      	str	r2, [r3, #40]	@ 0x28
        L6470_ACT = &_L6470_ACT[0];
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4a1a      	ldr	r2, [pc, #104]	@ (8003388 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 8003320:	62da      	str	r2, [r3, #44]	@ 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	635a      	str	r2, [r3, #52]	@ 0x34
        prepared_action = PREPARED_NO_ACTION;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        L6470_Id = number_of_devices++;
 8003334:	4b15      	ldr	r3, [pc, #84]	@ (800338c <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	b2d1      	uxtb	r1, r2
 800333c:	4a13      	ldr	r2, [pc, #76]	@ (800338c <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 800333e:	7011      	strb	r1, [r2, #0]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 8003344:	4b12      	ldr	r3, [pc, #72]	@ (8003390 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 8003346:	2200      	movs	r2, #0
 8003348:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 800334a:	2220      	movs	r2, #32
 800334c:	2100      	movs	r1, #0
 800334e:	4811      	ldr	r0, [pc, #68]	@ (8003394 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 8003350:	f010 f8ed 	bl	801352e <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8003354:	2208      	movs	r2, #8
 8003356:	2100      	movs	r1, #0
 8003358:	480f      	ldr	r0, [pc, #60]	@ (8003398 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 800335a:	f010 f8e8 	bl	801352e <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 800335e:	2208      	movs	r2, #8
 8003360:	2100      	movs	r1, #0
 8003362:	480e      	ldr	r0, [pc, #56]	@ (800339c <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 8003364:	f010 f8e3 	bl	801352e <memset>
    }
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	0801531c 	.word	0x0801531c
 8003378:	200002ea 	.word	0x200002ea
 800337c:	080160f8 	.word	0x080160f8
 8003380:	080162ec 	.word	0x080162ec
 8003384:	080163f8 	.word	0x080163f8
 8003388:	0801640c 	.word	0x0801640c
 800338c:	200002b4 	.word	0x200002b4
 8003390:	200002b5 	.word	0x200002b5
 8003394:	200002b8 	.word	0x200002b8
 8003398:	200002d8 	.word	0x200002d8
 800339c:	200002e0 	.word	0x200002e0

080033a0 <_ZSt3minIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	ed93 7a00 	vldr	s14, [r3]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	edd3 7a00 	vldr	s15, [r3]
 80033b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033be:	d501      	bpl.n	80033c4 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	e000      	b.n	80033c6 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 80033c4:	687b      	ldr	r3, [r7, #4]
    }
 80033c6:	4618      	mov	r0, r3
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	ed93 7a00 	vldr	s14, [r3]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	edd3 7a00 	vldr	s15, [r3]
 80033e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033f0:	d501      	bpl.n	80033f6 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	e000      	b.n	80033f8 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 80033f6:	687b      	ldr	r3, [r7, #4]
    }
 80033f8:	4618      	mov	r0, r3
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <_ZN5L6470I8shield_3ED1Ev>:

    /**
     * @brief Destructor.
     */
    ~L6470(void) = default;
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	4a05      	ldr	r2, [pc, #20]	@ (8003424 <_ZN5L6470I8shield_3ED1Ev+0x20>)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4618      	mov	r0, r3
 8003416:	f009 fadd 	bl	800c9d4 <_ZN13abstractL6470D1Ev>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4618      	mov	r0, r3
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	0801531c 	.word	0x0801531c

08003428 <_ZN5L6470I8shield_3ED0Ev>:
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7ff ffe7 	bl	8003404 <_ZN5L6470I8shield_3ED1Ev>
 8003436:	216c      	movs	r1, #108	@ 0x6c
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f00d fc7f 	bl	8010d3c <_ZdlPvj>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <_ZN5L6470I8shield_2ED1Ev>:
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	4a05      	ldr	r2, [pc, #20]	@ (8003468 <_ZN5L6470I8shield_2ED1Ev+0x20>)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	601a      	str	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4618      	mov	r0, r3
 800345a:	f009 fabb 	bl	800c9d4 <_ZN13abstractL6470D1Ev>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	08015588 	.word	0x08015588

0800346c <_ZN5L6470I8shield_2ED0Ev>:
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7ff ffe7 	bl	8003448 <_ZN5L6470I8shield_2ED1Ev>
 800347a:	216c      	movs	r1, #108	@ 0x6c
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f00d fc5d 	bl	8010d3c <_ZdlPvj>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4618      	mov	r0, r3
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <_ZN5L6470I8shield_1ED1Ev>:
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	4a05      	ldr	r2, [pc, #20]	@ (80034ac <_ZN5L6470I8shield_1ED1Ev+0x20>)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4618      	mov	r0, r3
 800349e:	f009 fa99 	bl	800c9d4 <_ZN13abstractL6470D1Ev>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4618      	mov	r0, r3
 80034a6:	3708      	adds	r7, #8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	080157f4 	.word	0x080157f4

080034b0 <_ZN5L6470I8shield_1ED0Ev>:
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7ff ffe7 	bl	800348c <_ZN5L6470I8shield_1ED1Ev>
 80034be:	216c      	movs	r1, #108	@ 0x6c
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f00d fc3b 	bl	8010d3c <_ZdlPvj>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4618      	mov	r0, r3
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <_ZN5L6470I8shield_3E4initEPv>:
    /**
     * @brief  Initializing the component.
     * @param  init Pointer to device specific initalization structure.
     * @retval "0" in case of success, an error code otherwise.
     */
    virtual int init(void *init)
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
    {
        return (int) L6470_Config((void *) init);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6839      	ldr	r1, [r7, #0]
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	4798      	blx	r3
 80034ea:	4603      	mov	r3, r0
    }
 80034ec:	4618      	mov	r0, r3
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <_ZN5L6470I8shield_3E10get_statusEv>:
    /**
     * @brief  Getting the status.
     * @param  None.
     * @retval The status.
     */
    virtual unsigned int get_status(void)
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
    {
        return (unsigned int) L6470_GetStatus();
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	4798      	blx	r3
 800350a:	4603      	mov	r3, r0
    }
 800350c:	4618      	mov	r0, r3
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <_ZN5L6470I8shield_3E13get_parameterEj>:
     *           + L6470_STEP_MODE_ID
     *           + L6470_ALARM_EN_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual unsigned int get_parameter(unsigned int parameter)
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
    {
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	4611      	mov	r1, r2
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	4798      	blx	r3
 8003532:	4603      	mov	r3, r0
    }
 8003534:	4618      	mov	r0, r3
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <_ZN5L6470I8shield_3E12get_positionEv>:
    /**
     * @brief  Getting the position.
     * @param  None.
     * @retval The position.
     */
    virtual signed int get_position(void)
 800353c:	b590      	push	{r4, r7, lr}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
    {
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800354c:	681c      	ldr	r4, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2100      	movs	r1, #0
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	4798      	blx	r3
 800355e:	4603      	mov	r3, r0
 8003560:	4619      	mov	r1, r3
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	47a0      	blx	r4
 8003566:	4603      	mov	r3, r0
    }
 8003568:	4618      	mov	r0, r3
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	bd90      	pop	{r4, r7, pc}

08003570 <_ZN5L6470I8shield_3E8get_markEv>:
    /**
     * @brief  Getting the marked position.
     * @param  None.
     * @retval The marked position.
     */
    virtual signed int get_mark(void)
 8003570:	b590      	push	{r4, r7, lr}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
    {
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8003580:	681c      	ldr	r4, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2102      	movs	r1, #2
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	4798      	blx	r3
 8003592:	4603      	mov	r3, r0
 8003594:	4619      	mov	r1, r3
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	47a0      	blx	r4
 800359a:	4603      	mov	r3, r0
    }
 800359c:	4618      	mov	r0, r3
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd90      	pop	{r4, r7, pc}

080035a4 <_ZN5L6470I8shield_3E9get_speedEv>:
    /**
     * @brief  Getting the current speed in pps.
     * @param  None.
     * @retval The current speed in pps.
     */
    virtual unsigned int get_speed(void)
 80035a4:	b5b0      	push	{r4, r5, r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035b4:	681c      	ldr	r4, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80035be:	681d      	ldr	r5, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2103      	movs	r1, #3
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	4798      	blx	r3
 80035d0:	4603      	mov	r3, r0
 80035d2:	4619      	mov	r1, r3
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	47a8      	blx	r5
 80035d8:	eef0 7a40 	vmov.f32	s15, s0
 80035dc:	eeb0 0a67 	vmov.f32	s0, s15
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	47a0      	blx	r4
 80035e4:	4603      	mov	r3, r0
    }
 80035e6:	4618      	mov	r0, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bdb0      	pop	{r4, r5, r7, pc}

080035ee <_ZN5L6470I8shield_3E13get_max_speedEv>:
    /**
     * @brief  Getting the maximum speed in pps.
     * @param  None.
     * @retval The maximum speed in pps.
     */
    virtual unsigned int get_max_speed(void)
 80035ee:	b5b0      	push	{r4, r5, r7, lr}
 80035f0:	b082      	sub	sp, #8
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035fe:	681c      	ldr	r4, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003608:	681d      	ldr	r5, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2106      	movs	r1, #6
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	4798      	blx	r3
 800361a:	4603      	mov	r3, r0
 800361c:	b29b      	uxth	r3, r3
 800361e:	4619      	mov	r1, r3
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	47a8      	blx	r5
 8003624:	eef0 7a40 	vmov.f32	s15, s0
 8003628:	eeb0 0a67 	vmov.f32	s0, s15
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	47a0      	blx	r4
 8003630:	4603      	mov	r3, r0
    }
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bdb0      	pop	{r4, r5, r7, pc}

0800363a <_ZN5L6470I8shield_3E13get_min_speedEv>:
    /**
     * @brief  Getting the minimum speed in pps.
     * @param  None.
     * @retval The minimum speed in pps.
     */
    virtual unsigned int get_min_speed(void)
 800363a:	b5b0      	push	{r4, r5, r7, lr}
 800363c:	b082      	sub	sp, #8
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800364a:	681c      	ldr	r4, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8003654:	681d      	ldr	r5, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2107      	movs	r1, #7
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	4798      	blx	r3
 8003666:	4603      	mov	r3, r0
 8003668:	b29b      	uxth	r3, r3
 800366a:	4619      	mov	r1, r3
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	47a8      	blx	r5
 8003670:	eef0 7a40 	vmov.f32	s15, s0
 8003674:	eeb0 0a67 	vmov.f32	s0, s15
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	47a0      	blx	r4
 800367c:	4603      	mov	r3, r0
    }
 800367e:	4618      	mov	r0, r3
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bdb0      	pop	{r4, r5, r7, pc}

08003686 <_ZN5L6470I8shield_3E16get_accelerationEv>:
    /**
     * @brief  Getting the acceleration in pps^2.
     * @param  None.
     * @retval The acceleration in pps^2.
     */
    virtual unsigned int get_acceleration(void)
 8003686:	b5b0      	push	{r4, r5, r7, lr}
 8003688:	b082      	sub	sp, #8
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003696:	681c      	ldr	r4, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80036a0:	681d      	ldr	r5, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2104      	movs	r1, #4
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	4798      	blx	r3
 80036b2:	4603      	mov	r3, r0
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	4619      	mov	r1, r3
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	47a8      	blx	r5
 80036bc:	eef0 7a40 	vmov.f32	s15, s0
 80036c0:	eeb0 0a67 	vmov.f32	s0, s15
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	47a0      	blx	r4
 80036c8:	4603      	mov	r3, r0
    }
 80036ca:	4618      	mov	r0, r3
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bdb0      	pop	{r4, r5, r7, pc}

080036d2 <_ZN5L6470I8shield_3E16get_decelerationEv>:
    /**
     * @brief  Getting the deceleration in pps^2.
     * @param  None.
     * @retval The deceleration in pps^2.
     */
    virtual unsigned int get_deceleration(void)
 80036d2:	b5b0      	push	{r4, r5, r7, lr}
 80036d4:	b082      	sub	sp, #8
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036e2:	681c      	ldr	r4, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80036ec:	681d      	ldr	r5, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2105      	movs	r1, #5
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	4798      	blx	r3
 80036fe:	4603      	mov	r3, r0
 8003700:	b29b      	uxth	r3, r3
 8003702:	4619      	mov	r1, r3
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	47a8      	blx	r5
 8003708:	eef0 7a40 	vmov.f32	s15, s0
 800370c:	eeb0 0a67 	vmov.f32	s0, s15
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	47a0      	blx	r4
 8003714:	4603      	mov	r3, r0
    }
 8003716:	4618      	mov	r0, r3
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bdb0      	pop	{r4, r5, r7, pc}

0800371e <_ZN5L6470I8shield_3E13get_directionEv>:
    /**
     * @brief  Getting the direction of rotation.
     * @param  None.
     * @retval The direction of rotation.
     */
    virtual StepperMotor::direction_t get_direction(void)
 800371e:	b580      	push	{r7, lr}
 8003720:	b082      	sub	sp, #8
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
    {
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2104      	movs	r1, #4
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	4798      	blx	r3
 8003736:	4603      	mov	r3, r0
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <_ZN5L6470I8shield_3E13get_directionEv+0x22>
 800373c:	2301      	movs	r3, #1
 800373e:	e000      	b.n	8003742 <_ZN5L6470I8shield_3E13get_directionEv+0x24>
 8003740:	2300      	movs	r3, #0
    }
 8003742:	4618      	mov	r0, r3
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <_ZN5L6470I8shield_3E13set_parameterEjj>:
     *           + L6470_ADC_OUT_ID
     *           + L6470_STEP_MODE_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 800374a:	b580      	push	{r7, lr}
 800374c:	b084      	sub	sp, #16
 800374e:	af00      	add	r7, sp, #0
 8003750:	60f8      	str	r0, [r7, #12]
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	607a      	str	r2, [r7, #4]
    {
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	b2d1      	uxtb	r1, r2
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	4798      	blx	r3
    }
 800376a:	bf00      	nop
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <_ZN5L6470I8shield_3E8set_homeEv>:
    /**
     * @brief  Setting the current position to be the home position.
     * @param  None.
     * @retval None.
     */
    virtual void set_home(void)
 8003772:	b580      	push	{r7, lr}
 8003774:	b082      	sub	sp, #8
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
    {
        L6470_ResetPos();
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	4798      	blx	r3
    }
 8003788:	bf00      	nop
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <_ZN5L6470I8shield_3E8set_markEv>:
    /**
     * @brief  Setting the current position to be the marked position.
     * @param  None.
     * @retval None.
     */
    virtual void set_mark(void)
 8003790:	b590      	push	{r4, r7, lr}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80037a0:	681c      	ldr	r4, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2100      	movs	r1, #0
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	4798      	blx	r3
 80037b2:	4603      	mov	r3, r0
 80037b4:	461a      	mov	r2, r3
 80037b6:	2102      	movs	r1, #2
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	47a0      	blx	r4
    }
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd90      	pop	{r4, r7, pc}

080037c4 <_ZN5L6470I8shield_3E8set_markEi>:
    /**
     * @brief  Setting the current position to be the marked position.
     * @param  position The given position.
     * @retval None.
     */
    virtual void set_mark(signed int position)
 80037c4:	b590      	push	{r4, r7, lr}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80037d6:	681c      	ldr	r4, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6839      	ldr	r1, [r7, #0]
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	4798      	blx	r3
 80037e8:	4603      	mov	r3, r0
 80037ea:	461a      	mov	r2, r3
 80037ec:	2102      	movs	r1, #2
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	47a0      	blx	r4
    }
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd90      	pop	{r4, r7, pc}

080037fa <_ZN5L6470I8shield_3E13set_max_speedEj>:
    /**
     * @brief  Setting the maximum speed in pps.
     * @param  speed The maximum speed in pps.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_max_speed(unsigned int speed)
 80037fa:	b590      	push	{r4, r7, lr}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800380c:	681c      	ldr	r4, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	ee07 2a90 	vmov	s15, r2
 800381e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003822:	eeb0 0a67 	vmov.f32	s0, s15
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	4798      	blx	r3
 800382a:	4603      	mov	r3, r0
 800382c:	461a      	mov	r2, r3
 800382e:	2106      	movs	r1, #6
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	47a0      	blx	r4
        return true;
 8003834:	2301      	movs	r3, #1
    }
 8003836:	4618      	mov	r0, r3
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	bd90      	pop	{r4, r7, pc}

0800383e <_ZN5L6470I8shield_3E13set_min_speedEj>:
    /**
     * @brief  Setting the minimum speed in pps.
     * @param  speed The minimum speed in pps.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_min_speed(unsigned int speed)
 800383e:	b590      	push	{r4, r7, lr}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
 8003846:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8003850:	681c      	ldr	r4, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	ee07 2a90 	vmov	s15, r2
 8003862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003866:	eeb0 0a67 	vmov.f32	s0, s15
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	4798      	blx	r3
 800386e:	4603      	mov	r3, r0
 8003870:	461a      	mov	r2, r3
 8003872:	2107      	movs	r1, #7
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	47a0      	blx	r4
        return true;
 8003878:	2301      	movs	r3, #1
    }
 800387a:	4618      	mov	r0, r3
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	bd90      	pop	{r4, r7, pc}

08003882 <_ZN5L6470I8shield_3E16set_accelerationEj>:
    /**
     * @brief  Setting the acceleration in pps^2.
     * @param  acceleration The acceleration in pps^2.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_acceleration(unsigned int acceleration)
 8003882:	b590      	push	{r4, r7, lr}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8003894:	681c      	ldr	r4, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	ee07 2a90 	vmov	s15, r2
 80038a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038aa:	eeb0 0a67 	vmov.f32	s0, s15
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	4798      	blx	r3
 80038b2:	4603      	mov	r3, r0
 80038b4:	461a      	mov	r2, r3
 80038b6:	2104      	movs	r1, #4
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	47a0      	blx	r4
        return true;
 80038bc:	2301      	movs	r3, #1
    }
 80038be:	4618      	mov	r0, r3
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd90      	pop	{r4, r7, pc}

080038c6 <_ZN5L6470I8shield_3E16set_decelerationEj>:
    /**
     * @brief  Setting the deceleration in pps^2.
     * @param  deceleration The deceleration in pps^2.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_deceleration(unsigned int deceleration)
 80038c6:	b590      	push	{r4, r7, lr}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80038d8:	681c      	ldr	r4, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	ee07 2a90 	vmov	s15, r2
 80038ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ee:	eeb0 0a67 	vmov.f32	s0, s15
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	4798      	blx	r3
 80038f6:	4603      	mov	r3, r0
 80038f8:	461a      	mov	r2, r3
 80038fa:	2105      	movs	r1, #5
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	47a0      	blx	r4
        return true;
 8003900:	2301      	movs	r3, #1
    }
 8003902:	4618      	mov	r0, r3
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	bd90      	pop	{r4, r7, pc}

0800390a <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE>:
     * @warning Setting the step mode implies first disabling the power bridge through
     *          the soft_hiz() method.
     * @warning Every time step mode is changed, the values of the home
     *          and mark positions lose meaning and are reset.
     */
    virtual bool set_step_mode(step_mode_t step_mode)
 800390a:	b580      	push	{r7, lr}
 800390c:	b082      	sub	sp, #8
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
 8003912:	460b      	mov	r3, r1
 8003914:	70fb      	strb	r3, [r7, #3]
    {
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 8003916:	78fb      	ldrb	r3, [r7, #3]
 8003918:	2b07      	cmp	r3, #7
 800391a:	d901      	bls.n	8003920 <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 800391c:	2300      	movs	r3, #0
 800391e:	e00f      	b.n	8003940 <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        }
        soft_hiz();
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	3380      	adds	r3, #128	@ 0x80
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	78fa      	ldrb	r2, [r7, #3]
 8003938:	2115      	movs	r1, #21
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	4798      	blx	r3
        return true;
 800393e:	2301      	movs	r3, #1
    }
 8003940:	4618      	mov	r0, r3
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <_ZN5L6470I8shield_3E5go_toEi>:
    /**
     * @brief  Going to a specified position through the shortest path.
     * @param  position The desired position.
     * @retval None.
     */
    virtual void go_to(signed int position)
 8003948:	b590      	push	{r4, r7, lr}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
    {
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 800395a:	681c      	ldr	r4, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6839      	ldr	r1, [r7, #0]
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	4798      	blx	r3
 800396c:	4603      	mov	r3, r0
 800396e:	4619      	mov	r1, r3
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	47a0      	blx	r4
    }
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	bd90      	pop	{r4, r7, pc}

0800397c <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE>:
     * @brief  Going to a specified position imposing the desired direction.
     * @param  position The desired position.
     * @param  direction The direction of rotation.
     * @retval None.
     */
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 800397c:	b5b0      	push	{r4, r5, r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	4613      	mov	r3, r2
 8003988:	71fb      	strb	r3, [r7, #7]
    {
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8003992:	681c      	ldr	r4, [r3, #0]
 8003994:	79fb      	ldrb	r3, [r7, #7]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d101      	bne.n	800399e <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE+0x22>
 800399a:	2501      	movs	r5, #1
 800399c:	e000      	b.n	80039a0 <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE+0x24>
 800399e:	2500      	movs	r5, #0
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68b9      	ldr	r1, [r7, #8]
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	4798      	blx	r3
 80039b0:	4603      	mov	r3, r0
 80039b2:	461a      	mov	r2, r3
 80039b4:	4629      	mov	r1, r5
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	47a0      	blx	r4
    }
 80039ba:	bf00      	nop
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bdb0      	pop	{r4, r5, r7, pc}

080039c2 <_ZN5L6470I8shield_3E7go_homeEv>:
    /**
     * @brief  Going to the home position.
     * @param  None.
     * @retval None.
     */
    virtual void go_home(void)
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b082      	sub	sp, #8
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
    {
        L6470_GoHome();
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	4798      	blx	r3
    }
 80039d8:	bf00      	nop
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <_ZN5L6470I8shield_3E7go_markEv>:
    /**
     * @brief  Going to the marked position.
     * @param  None.
     * @retval None.
     */
    virtual void go_mark(void)
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
    {
        L6470_GoMark();
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	4798      	blx	r3
    }
 80039f6:	bf00      	nop
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
     * @note   The identifier of the action about the absolute position can be
     *         one of the following:
     *           + L6470_ACT_RST_ID: the absolute position is reset;
     *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
     */
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 80039fe:	b5b0      	push	{r4, r5, r7, lr}
 8003a00:	b084      	sub	sp, #16
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	60f8      	str	r0, [r7, #12]
 8003a06:	607b      	str	r3, [r7, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	72fb      	strb	r3, [r7, #11]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	72bb      	strb	r3, [r7, #10]
    {
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003a18:	681c      	ldr	r4, [r3, #0]
 8003a1a:	7abb      	ldrb	r3, [r7, #10]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d101      	bne.n	8003a24 <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8003a20:	2501      	movs	r5, #1
 8003a22:	e000      	b.n	8003a26 <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8003a24:	2500      	movs	r5, #0
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	ee07 2a90 	vmov	s15, r2
 8003a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a3a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	4798      	blx	r3
 8003a42:	4603      	mov	r3, r0
 8003a44:	7af9      	ldrb	r1, [r7, #11]
 8003a46:	462a      	mov	r2, r5
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	47a0      	blx	r4
    }
 8003a4c:	bf00      	nop
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bdb0      	pop	{r4, r5, r7, pc}

08003a54 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE>:
    /**
     * @brief  Running towards a specified direction.
     * @param  direction The direction of rotation.
     * @retval None.
     */
    virtual void run(StepperMotor::direction_t direction)
 8003a54:	b5b0      	push	{r4, r5, r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	70fb      	strb	r3, [r7, #3]
    {
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8003a68:	681c      	ldr	r4, [r3, #0]
 8003a6a:	78fb      	ldrb	r3, [r7, #3]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE+0x20>
 8003a70:	2501      	movs	r5, #1
 8003a72:	e000      	b.n	8003a76 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE+0x22>
 8003a74:	2500      	movs	r5, #0
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2106      	movs	r1, #6
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	4798      	blx	r3
 8003a86:	4603      	mov	r3, r0
 8003a88:	461a      	mov	r2, r3
 8003a8a:	4629      	mov	r1, r5
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	47a0      	blx	r4
    }
 8003a90:	bf00      	nop
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bdb0      	pop	{r4, r5, r7, pc}

08003a98 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj>:
     * @brief  Running towards a specified direction at the given speed.
     * @param  direction The direction of rotation.
     * @param  speed The speed value in pps.
     * @retval None.
     */
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 8003a98:	b5b0      	push	{r4, r5, r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	607a      	str	r2, [r7, #4]
 8003aa4:	72fb      	strb	r3, [r7, #11]
    {
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8003aae:	681c      	ldr	r4, [r3, #0]
 8003ab0:	7afb      	ldrb	r3, [r7, #11]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d101      	bne.n	8003aba <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj+0x22>
 8003ab6:	2501      	movs	r5, #1
 8003ab8:	e000      	b.n	8003abc <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj+0x24>
 8003aba:	2500      	movs	r5, #0
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	ee07 2a90 	vmov	s15, r2
 8003acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ad0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	4798      	blx	r3
 8003ad8:	4603      	mov	r3, r0
 8003ada:	461a      	mov	r2, r3
 8003adc:	4629      	mov	r1, r5
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	47a0      	blx	r4
    }
 8003ae2:	bf00      	nop
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bdb0      	pop	{r4, r5, r7, pc}

08003aea <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj>:
     * @brief  Moving towards a specified direction for a certain number of steps.
     * @param  direction The direction of rotation.
     * @param  steps The desired number of steps.
     * @retval None.
     */
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b084      	sub	sp, #16
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	60f8      	str	r0, [r7, #12]
 8003af2:	460b      	mov	r3, r1
 8003af4:	607a      	str	r2, [r7, #4]
 8003af6:	72fb      	strb	r3, [r7, #11]
    {
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	7afa      	ldrb	r2, [r7, #11]
 8003b04:	2a01      	cmp	r2, #1
 8003b06:	d101      	bne.n	8003b0c <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj+0x22>
 8003b08:	2101      	movs	r1, #1
 8003b0a:	e000      	b.n	8003b0e <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj+0x24>
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	4798      	blx	r3
    }
 8003b14:	bf00      	nop
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <_ZN5L6470I8shield_3E9soft_stopEv>:
     * @brief  Stopping the motor through an immediate deceleration up to zero speed.
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     */
    virtual void soft_stop(void)
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
    {
        L6470_SoftStop();
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	4798      	blx	r3
    }
 8003b32:	bf00      	nop
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <_ZN5L6470I8shield_3E9hard_stopEv>:
    /**
     * @brief  Stopping the motor through an immediate infinite deceleration.
     * @param  None.
     * @retval None.
     */
    virtual void hard_stop(void)
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b082      	sub	sp, #8
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
    {
        L6470_HardStop();
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	4798      	blx	r3
    }
 8003b50:	bf00      	nop
 8003b52:	3708      	adds	r7, #8
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <_ZN5L6470I8shield_3E8soft_hizEv>:
     * @brief  Disabling the power bridge after performing a deceleration to zero.
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     */
    virtual void soft_hiz(void)
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
    {
        L6470_SoftHiZ();
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	4798      	blx	r3
    }
 8003b6e:	bf00      	nop
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <_ZN5L6470I8shield_3E8hard_hizEv>:
    /**
     * @brief  Disabling the power bridge immediately.
     * @param  None.
     * @retval None.
     */
    virtual void hard_hiz(void)
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b082      	sub	sp, #8
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
    {
        L6470_HardHiZ();
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f503 73ee 	add.w	r3, r3, #476	@ 0x1dc
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	4798      	blx	r3
    }
 8003b8c:	bf00      	nop
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <_ZN5L6470I8shield_3E17wait_while_activeEv>:
    /**
     * @brief  Waiting while the motor is active.
     * @param  None.
     * @retval None.
     */
    virtual void wait_while_active(void)
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
    {
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 8003b9c:	bf00      	nop
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2101      	movs	r1, #1
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	4798      	blx	r3
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	bf0c      	ite	eq
 8003bb4:	2301      	moveq	r3, #1
 8003bb6:	2300      	movne	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1ef      	bne.n	8003b9e <_ZN5L6470I8shield_3E17wait_while_activeEv+0xa>
    }
 8003bbe:	bf00      	nop
 8003bc0:	bf00      	nop
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE>:
     * @param   direction The direction of rotation.
     * @retval  None.
     * @warning Setting the step-clock mode implies first disabling the power bridge through
     *          the soft_hiz() method.
     */
    virtual void step_clock(StepperMotor::direction_t direction)
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	70fb      	strb	r3, [r7, #3]
    {
        soft_hiz();
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	3380      	adds	r3, #128	@ 0x80
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	78fa      	ldrb	r2, [r7, #3]
 8003bec:	2a01      	cmp	r2, #1
 8003bee:	d101      	bne.n	8003bf4 <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE+0x2c>
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	e000      	b.n	8003bf6 <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE+0x2e>
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	4798      	blx	r3
    }
 8003bfc:	bf00      	nop
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
      * @note   The identifier of the action about the absolute position can be
      *         one of the following:
      *           + L6470_ACT_RST_ID: the absolute position is reset;
      *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
      */
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	70fb      	strb	r3, [r7, #3]
 8003c10:	4613      	mov	r3, r2
 8003c12:	70bb      	strb	r3, [r7, #2]
    {
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	78ba      	ldrb	r2, [r7, #2]
 8003c20:	2a01      	cmp	r2, #1
 8003c22:	d101      	bne.n	8003c28 <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8003c24:	2201      	movs	r2, #1
 8003c26:	e000      	b.n	8003c2a <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8003c28:	2200      	movs	r2, #0
 8003c2a:	78f9      	ldrb	r1, [r7, #3]
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	4798      	blx	r3
    }
 8003c30:	bf00      	nop
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <_ZN5L6470I8shield_3E12reset_deviceEv>:
    /**
      * @brief  Resetting the device to power-up conditions.
      * @param  None.
      * @retval None.
      */
    virtual void reset_device(void)
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
    {
        L6470_ResetDevice();
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	4798      	blx	r3
    }
 8003c4e:	bf00      	nop
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <_ZN5L6470I8shield_3E18prepare_get_statusEv>:
     * @brief  Preparing the command to get the status.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_status(void)
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b082      	sub	sp, #8
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetStatus();
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003c74:	bf00      	nop
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <_ZN5L6470I8shield_3E21prepare_get_parameterEj>:
     *           + L6470_STEP_MODE_ID
     *           + L6470_ALARM_EN_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void prepare_get_parameter(unsigned int parameter)
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	4611      	mov	r1, r2
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003ca2:	bf00      	nop
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <_ZN5L6470I8shield_3E20prepare_get_positionEv>:
     * @brief  Preparing the command to get the position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_position(void)
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b082      	sub	sp, #8
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003cca:	bf00      	nop
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <_ZN5L6470I8shield_3E16prepare_get_markEv>:
     * @brief  Preparing the command to get the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_mark(void)
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b082      	sub	sp, #8
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2102      	movs	r1, #2
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2202      	movs	r2, #2
 8003cee:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003cf2:	bf00      	nop
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <_ZN5L6470I8shield_3E17prepare_get_speedEv>:
     * @brief  Preparing the command to get the current speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_speed(void)
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b082      	sub	sp, #8
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2103      	movs	r1, #3
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2203      	movs	r2, #3
 8003d16:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <_ZN5L6470I8shield_3E21prepare_get_max_speedEv>:
     * @brief  Preparing the command to get the maximum speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_max_speed(void)
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b082      	sub	sp, #8
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2106      	movs	r1, #6
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2204      	movs	r2, #4
 8003d3e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003d42:	bf00      	nop
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <_ZN5L6470I8shield_3E21prepare_get_min_speedEv>:
     * @brief  Preparing the command to get the minimum speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_min_speed(void)
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b082      	sub	sp, #8
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2107      	movs	r1, #7
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2205      	movs	r2, #5
 8003d66:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003d6a:	bf00      	nop
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <_ZN5L6470I8shield_3E24prepare_get_accelerationEv>:
     * @brief  Preparing the command to get the acceleration in pps^2.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_acceleration(void)
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b082      	sub	sp, #8
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2104      	movs	r1, #4
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2206      	movs	r2, #6
 8003d8e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003d92:	bf00      	nop
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <_ZN5L6470I8shield_3E24prepare_get_decelerationEv>:
     * @brief  Preparing the command to get the deceleration in pps^2.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_deceleration(void)
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b082      	sub	sp, #8
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2105      	movs	r1, #5
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2207      	movs	r2, #7
 8003db6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003dba:	bf00      	nop
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
	...

08003dc4 <_ZN5L6470I8shield_3E21prepare_get_directionEv>:
     * @brief  Preparing the command to get the direction of rotation.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_direction(void)
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
    {
        if (!L6470_DaisyChain_HalfPrepared) {
 8003dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8003dfc <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x38>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10a      	bne.n	8003dea <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x26>
            /* To avoid deleting the previous entered command. */
            L6470_DaisyChain_HalfPrepared = ONE_F;
 8003dd4:	4b09      	ldr	r3, [pc, #36]	@ (8003dfc <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x38>)
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	701a      	strb	r2, [r3, #0]
            /* Resetting commands. */
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4906      	ldr	r1, [pc, #24]	@ (8003e00 <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x3c>)
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	4798      	blx	r3
        }
        prepared_action = PREPARED_GET_DIRECTION;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2208      	movs	r2, #8
 8003dee:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003df2:	bf00      	nop
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	200002b5 	.word	0x200002b5
 8003e00:	200002b8 	.word	0x200002b8

08003e04 <_ZN5L6470I8shield_3E21prepare_set_parameterEjj>:
     *           + L6470_ADC_OUT_ID
     *           + L6470_STEP_MODE_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	b2d1      	uxtb	r1, r2
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003e2c:	bf00      	nop
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <_ZN5L6470I8shield_3E16prepare_set_homeEv>:
     *         the home position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_home(void)
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareResetPos();
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003e52:	bf00      	nop
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <_ZN5L6470I8shield_3E16prepare_set_markEv>:
     *         the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_mark(void)
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b082      	sub	sp, #8
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
        /*
           Set "0" now as marked position. This value will be replaced by the
           actual position read at the time when the prepared actions will be
           performed.
        */
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	2102      	movs	r1, #2
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2209      	movs	r2, #9
 8003e78:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003e7c:	bf00      	nop
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <_ZN5L6470I8shield_3E16prepare_set_markEi>:
     *         the marked position.
     * @param  position The given position.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_mark(signed int position)
 8003e84:	b590      	push	{r4, r7, lr}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003e96:	681c      	ldr	r4, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6839      	ldr	r1, [r7, #0]
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	4798      	blx	r3
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	461a      	mov	r2, r3
 8003eac:	2102      	movs	r1, #2
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd90      	pop	{r4, r7, pc}

08003ec2 <_ZN5L6470I8shield_3E17prepare_set_speedEj>:
     * @brief  Preparing the command to set the current speed in pps.
     * @param  speed The current speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_speed(unsigned int speed)
 8003ec2:	b590      	push	{r4, r7, lr}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003ed4:	681c      	ldr	r4, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	ee07 2a90 	vmov	s15, r2
 8003ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eea:	eeb0 0a67 	vmov.f32	s0, s15
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	4798      	blx	r3
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	2103      	movs	r1, #3
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd90      	pop	{r4, r7, pc}

08003f0c <_ZN5L6470I8shield_3E21prepare_set_max_speedEj>:
     * @brief  Preparing the command to set the maximum speed in pps.
     * @param  speed The maximum speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_max_speed(unsigned int speed)
 8003f0c:	b590      	push	{r4, r7, lr}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003f1e:	681c      	ldr	r4, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	ee07 2a90 	vmov	s15, r2
 8003f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f34:	eeb0 0a67 	vmov.f32	s0, s15
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	4798      	blx	r3
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	461a      	mov	r2, r3
 8003f40:	2106      	movs	r1, #6
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003f4e:	bf00      	nop
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd90      	pop	{r4, r7, pc}

08003f56 <_ZN5L6470I8shield_3E21prepare_set_min_speedEj>:
     * @brief  Preparing the command to set the minimum speed in pps.
     * @param  speed The minimum speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_min_speed(unsigned int speed)
 8003f56:	b590      	push	{r4, r7, lr}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
 8003f5e:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003f68:	681c      	ldr	r4, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	ee07 2a90 	vmov	s15, r2
 8003f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f7e:	eeb0 0a67 	vmov.f32	s0, s15
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	4798      	blx	r3
 8003f86:	4603      	mov	r3, r0
 8003f88:	461a      	mov	r2, r3
 8003f8a:	2107      	movs	r1, #7
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd90      	pop	{r4, r7, pc}

08003fa0 <_ZN5L6470I8shield_3E24prepare_set_accelerationEj>:
     * @brief  Preparing the command to set the acceleration in pps^2.
     * @param  acceleration The acceleration in pps^2.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_acceleration(unsigned int acceleration)
 8003fa0:	b590      	push	{r4, r7, lr}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003fb2:	681c      	ldr	r4, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	ee07 2a90 	vmov	s15, r2
 8003fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	4798      	blx	r3
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	2104      	movs	r1, #4
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd90      	pop	{r4, r7, pc}

08003fea <_ZN5L6470I8shield_3E24prepare_set_decelerationEj>:
     * @brief  Preparing the command to set the deceleration in pps^2.
     * @param  deceleration The deceleration in pps^2.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_deceleration(unsigned int deceleration)
 8003fea:	b590      	push	{r4, r7, lr}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
 8003ff2:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003ffc:	681c      	ldr	r4, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	ee07 2a90 	vmov	s15, r2
 800400e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004012:	eeb0 0a67 	vmov.f32	s0, s15
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	4798      	blx	r3
 800401a:	4603      	mov	r3, r0
 800401c:	461a      	mov	r2, r3
 800401e:	2105      	movs	r1, #5
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	bd90      	pop	{r4, r7, pc}

08004034 <_ZN5L6470I8shield_3E13prepare_go_toEi>:
     * @brief  Preparing the command to go to a specified position.
     * @param  position The desired position.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_to(signed int position)
 8004034:	b590      	push	{r4, r7, lr}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8004046:	681c      	ldr	r4, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6839      	ldr	r1, [r7, #0]
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	4798      	blx	r3
 8004058:	4603      	mov	r3, r0
 800405a:	4619      	mov	r1, r3
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	bd90      	pop	{r4, r7, pc}

08004070 <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE>:
     * @param  position The desired position.
     * @param  direction The direction of rotation.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 8004070:	b5b0      	push	{r4, r5, r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	4613      	mov	r3, r2
 800407c:	71fb      	strb	r3, [r7, #7]
    {
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8004086:	681c      	ldr	r4, [r3, #0]
 8004088:	79fb      	ldrb	r3, [r7, #7]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d101      	bne.n	8004092 <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 800408e:	2501      	movs	r5, #1
 8004090:	e000      	b.n	8004094 <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 8004092:	2500      	movs	r5, #0
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68b9      	ldr	r1, [r7, #8]
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	4798      	blx	r3
 80040a4:	4603      	mov	r3, r0
 80040a6:	461a      	mov	r2, r3
 80040a8:	4629      	mov	r1, r5
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80040b6:	bf00      	nop
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bdb0      	pop	{r4, r5, r7, pc}

080040be <_ZN5L6470I8shield_3E15prepare_go_homeEv>:
     * @brief  Preparing the command to go to the home position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_home(void)
 80040be:	b580      	push	{r7, lr}
 80040c0:	b082      	sub	sp, #8
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGoHome();
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80040dc:	bf00      	nop
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <_ZN5L6470I8shield_3E15prepare_go_markEv>:
     * @brief  Preparing the command to go to the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_mark(void)
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGoMark();
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8004102:	bf00      	nop
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
     *         The identifier of the action about the absolute position can be
     *         one of the following:
     *           + L6470_ACT_RST_ID: the absolute position is reset;
     *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
     */
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 800410a:	b5b0      	push	{r4, r5, r7, lr}
 800410c:	b084      	sub	sp, #16
 800410e:	af00      	add	r7, sp, #0
 8004110:	60f8      	str	r0, [r7, #12]
 8004112:	607b      	str	r3, [r7, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	72fb      	strb	r3, [r7, #11]
 8004118:	4613      	mov	r3, r2
 800411a:	72bb      	strb	r3, [r7, #10]
    {
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004124:	681c      	ldr	r4, [r3, #0]
 8004126:	7abb      	ldrb	r3, [r7, #10]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 800412c:	2501      	movs	r5, #1
 800412e:	e000      	b.n	8004132 <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8004130:	2500      	movs	r5, #0
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	ee07 2a90 	vmov	s15, r2
 8004142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004146:	eeb0 0a67 	vmov.f32	s0, s15
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	4798      	blx	r3
 800414e:	4603      	mov	r3, r0
 8004150:	7af9      	ldrb	r1, [r7, #11]
 8004152:	462a      	mov	r2, r5
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8004160:	bf00      	nop
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bdb0      	pop	{r4, r5, r7, pc}

08004168 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE>:
     *         at the maximum speed.
     * @param  direction The direction of rotation.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_run(StepperMotor::direction_t direction)
 8004168:	b5b0      	push	{r4, r5, r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	460b      	mov	r3, r1
 8004172:	70fb      	strb	r3, [r7, #3]
    {
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800417c:	681c      	ldr	r4, [r3, #0]
 800417e:	78fb      	ldrb	r3, [r7, #3]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d101      	bne.n	8004188 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE+0x20>
 8004184:	2501      	movs	r5, #1
 8004186:	e000      	b.n	800418a <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE+0x22>
 8004188:	2500      	movs	r5, #0
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2106      	movs	r1, #6
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	4798      	blx	r3
 800419a:	4603      	mov	r3, r0
 800419c:	461a      	mov	r2, r3
 800419e:	4629      	mov	r1, r5
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80041ac:	bf00      	nop
 80041ae:	3708      	adds	r7, #8
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bdb0      	pop	{r4, r5, r7, pc}

080041b4 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj>:
     * @param  direction The direction of rotation.
     * @param  speed The speed value in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 80041b4:	b5b0      	push	{r4, r5, r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	460b      	mov	r3, r1
 80041be:	607a      	str	r2, [r7, #4]
 80041c0:	72fb      	strb	r3, [r7, #11]
    {
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80041ca:	681c      	ldr	r4, [r3, #0]
 80041cc:	7afb      	ldrb	r3, [r7, #11]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d101      	bne.n	80041d6 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 80041d2:	2501      	movs	r5, #1
 80041d4:	e000      	b.n	80041d8 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 80041d6:	2500      	movs	r5, #0
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	ee07 2a90 	vmov	s15, r2
 80041e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ec:	eeb0 0a67 	vmov.f32	s0, s15
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	4798      	blx	r3
 80041f4:	4603      	mov	r3, r0
 80041f6:	461a      	mov	r2, r3
 80041f8:	4629      	mov	r1, r5
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8004206:	bf00      	nop
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bdb0      	pop	{r4, r5, r7, pc}

0800420e <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj>:
     * @param  direction The direction of rotation.
     * @param  steps The desired number of steps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 800420e:	b580      	push	{r7, lr}
 8004210:	b084      	sub	sp, #16
 8004212:	af00      	add	r7, sp, #0
 8004214:	60f8      	str	r0, [r7, #12]
 8004216:	460b      	mov	r3, r1
 8004218:	607a      	str	r2, [r7, #4]
 800421a:	72fb      	strb	r3, [r7, #11]
    {
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	7afa      	ldrb	r2, [r7, #11]
 8004228:	2a01      	cmp	r2, #1
 800422a:	d101      	bne.n	8004230 <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 800422c:	2101      	movs	r1, #1
 800422e:	e000      	b.n	8004232 <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 8004230:	2100      	movs	r1, #0
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8004240:	bf00      	nop
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <_ZN5L6470I8shield_3E17prepare_soft_stopEv>:
     * @brief  Preparing the command to stop the motor.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_soft_stop(void)
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareSoftStop();
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8004266:	bf00      	nop
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <_ZN5L6470I8shield_3E17prepare_hard_stopEv>:
     * @brief  Preparing the command to stop the motor and disabling the power bridge.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_hard_stop(void)
 800426e:	b580      	push	{r7, lr}
 8004270:	b082      	sub	sp, #8
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareHardStop();
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800428c:	bf00      	nop
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <_ZN5L6470I8shield_3E16prepare_soft_hizEv>:
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_soft_hiz(void)
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareSoftHiZ();
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80042b2:	bf00      	nop
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <_ZN5L6470I8shield_3E16prepare_hard_hizEv>:
     * @brief  Preparing the command to disable the power bridge immediately.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_hard_hiz(void)
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b082      	sub	sp, #8
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareHardHiZ();
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80042d8:	bf00      	nop
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE>:
     * @retval  None.
     * @warning Setting the step-clock mode requires an explicit action by the user to first
     *          disable the power bridge through the soft_hiz() method.
     * @note    The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	460b      	mov	r3, r1
 80042ea:	70fb      	strb	r3, [r7, #3]
    {
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	78fa      	ldrb	r2, [r7, #3]
 80042f8:	2a01      	cmp	r2, #1
 80042fa:	d101      	bne.n	8004300 <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 80042fc:	2201      	movs	r2, #1
 80042fe:	e000      	b.n	8004302 <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 8004300:	2200      	movs	r2, #0
 8004302:	4611      	mov	r1, r2
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8004310:	bf00      	nop
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
      *         The identifier of the action about the absolute position can be
      *         one of the following:
      *           + L6470_ACT_RST_ID: the absolute position is reset;
      *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
      */
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	70fb      	strb	r3, [r7, #3]
 8004324:	4613      	mov	r3, r2
 8004326:	70bb      	strb	r3, [r7, #2]
    {
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	78ba      	ldrb	r2, [r7, #2]
 8004334:	2a01      	cmp	r2, #1
 8004336:	d101      	bne.n	800433c <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8004338:	2201      	movs	r2, #1
 800433a:	e000      	b.n	800433e <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 800433c:	2200      	movs	r2, #0
 800433e:	78f9      	ldrb	r1, [r7, #3]
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800434c:	bf00      	nop
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <_ZN5L6470I8shield_3E20prepare_reset_deviceEv>:
      * @brief  Preparing the command to reset the device to power-up conditions.
      * @param  None.
      * @retval None.
      * @note   The command will be sent by issuing "perform_action()".
      */
    virtual void prepare_reset_device(void)
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareResetDevice();
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8004372:	bf00      	nop
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <_ZN5L6470I8shield_3E24perform_prepared_actionsEv>:
      * @brief    Performing all the actions prepared on the components
      *           of the daisy-chain.
      * @param    None.
      * @retval   The raw data returned by the components.
      */
    uint8_t* perform_prepared_actions(void)
 800437a:	b580      	push	{r7, lr}
 800437c:	b082      	sub	sp, #8
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
    {
        return L6470_PerformPreparedApplicationCommand();
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	4798      	blx	r3
 8004390:	4603      	mov	r3, r0
    }
 8004392:	4618      	mov	r0, r3
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <_ZN5L6470I8shield_3E19get_prepared_actionEv>:
    /**
      * @brief    Getting the prepared action.
      * @param    None
      * @retval   The prepared action.
      */
    prepared_action_t get_prepared_action(void)
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
    {
        return prepared_action;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    }
 80043a8:	4618      	mov	r0, r3
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <_ZN5L6470I8shield_3E10get_resultEPh>:
      * @brief    Converting the raw data received by the component according to
      *           the action performed on it.
      * @param    raw_data The received raw data.
      * @retval   The result of the action performed.
      */
    int32_t get_result(uint8_t *raw_data)
 80043b4:	b5b0      	push	{r4, r5, r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
    {
        switch (prepared_action) {
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80043c4:	3b01      	subs	r3, #1
 80043c6:	2b07      	cmp	r3, #7
 80043c8:	f200 80fe 	bhi.w	80045c8 <_ZN5L6470I8shield_3E10get_resultEPh+0x214>
 80043cc:	a201      	add	r2, pc, #4	@ (adr r2, 80043d4 <_ZN5L6470I8shield_3E10get_resultEPh+0x20>)
 80043ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d2:	bf00      	nop
 80043d4:	080043f5 	.word	0x080043f5
 80043d8:	08004421 	.word	0x08004421
 80043dc:	0800444f 	.word	0x0800444f
 80043e0:	08004493 	.word	0x08004493
 80043e4:	080044d9 	.word	0x080044d9
 80043e8:	0800451f 	.word	0x0800451f
 80043ec:	08004565 	.word	0x08004565
 80043f0:	080045ab 	.word	0x080045ab
            case PREPARED_GET_POSITION:
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 80043fc:	681c      	ldr	r4, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6a12      	ldr	r2, [r2, #32]
 800440c:	7b92      	ldrb	r2, [r2, #14]
 800440e:	6839      	ldr	r1, [r7, #0]
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	4798      	blx	r3
 8004414:	4603      	mov	r3, r0
 8004416:	4619      	mov	r1, r3
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	47a0      	blx	r4
 800441c:	4603      	mov	r3, r0
 800441e:	e0d4      	b.n	80045ca <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_MARK:
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8004428:	681c      	ldr	r4, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6a12      	ldr	r2, [r2, #32]
 8004438:	3228      	adds	r2, #40	@ 0x28
 800443a:	7b92      	ldrb	r2, [r2, #14]
 800443c:	6839      	ldr	r1, [r7, #0]
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	4798      	blx	r3
 8004442:	4603      	mov	r3, r0
 8004444:	4619      	mov	r1, r3
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	47a0      	blx	r4
 800444a:	4603      	mov	r3, r0
 800444c:	e0bd      	b.n	80045ca <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_SPEED:
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004456:	681c      	ldr	r4, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8004460:	681d      	ldr	r5, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6a12      	ldr	r2, [r2, #32]
 8004470:	323c      	adds	r2, #60	@ 0x3c
 8004472:	7b92      	ldrb	r2, [r2, #14]
 8004474:	6839      	ldr	r1, [r7, #0]
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	4798      	blx	r3
 800447a:	4603      	mov	r3, r0
 800447c:	4619      	mov	r1, r3
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	47a8      	blx	r5
 8004482:	eef0 7a40 	vmov.f32	s15, s0
 8004486:	eeb0 0a67 	vmov.f32	s0, s15
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	47a0      	blx	r4
 800448e:	4603      	mov	r3, r0
 8004490:	e09b      	b.n	80045ca <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_MAX_SPEED:
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800449a:	681c      	ldr	r4, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80044a4:	681d      	ldr	r5, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6a12      	ldr	r2, [r2, #32]
 80044b4:	3278      	adds	r2, #120	@ 0x78
 80044b6:	7b92      	ldrb	r2, [r2, #14]
 80044b8:	6839      	ldr	r1, [r7, #0]
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	4798      	blx	r3
 80044be:	4603      	mov	r3, r0
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	4619      	mov	r1, r3
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	47a8      	blx	r5
 80044c8:	eef0 7a40 	vmov.f32	s15, s0
 80044cc:	eeb0 0a67 	vmov.f32	s0, s15
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	47a0      	blx	r4
 80044d4:	4603      	mov	r3, r0
 80044d6:	e078      	b.n	80045ca <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_MIN_SPEED:
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80044e0:	681c      	ldr	r4, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80044ea:	681d      	ldr	r5, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6a12      	ldr	r2, [r2, #32]
 80044fa:	328c      	adds	r2, #140	@ 0x8c
 80044fc:	7b92      	ldrb	r2, [r2, #14]
 80044fe:	6839      	ldr	r1, [r7, #0]
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	4798      	blx	r3
 8004504:	4603      	mov	r3, r0
 8004506:	b29b      	uxth	r3, r3
 8004508:	4619      	mov	r1, r3
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	47a8      	blx	r5
 800450e:	eef0 7a40 	vmov.f32	s15, s0
 8004512:	eeb0 0a67 	vmov.f32	s0, s15
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	47a0      	blx	r4
 800451a:	4603      	mov	r3, r0
 800451c:	e055      	b.n	80045ca <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_ACCELERATION:
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004526:	681c      	ldr	r4, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8004530:	681d      	ldr	r5, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6a12      	ldr	r2, [r2, #32]
 8004540:	3250      	adds	r2, #80	@ 0x50
 8004542:	7b92      	ldrb	r2, [r2, #14]
 8004544:	6839      	ldr	r1, [r7, #0]
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	4798      	blx	r3
 800454a:	4603      	mov	r3, r0
 800454c:	b29b      	uxth	r3, r3
 800454e:	4619      	mov	r1, r3
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	47a8      	blx	r5
 8004554:	eef0 7a40 	vmov.f32	s15, s0
 8004558:	eeb0 0a67 	vmov.f32	s0, s15
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	47a0      	blx	r4
 8004560:	4603      	mov	r3, r0
 8004562:	e032      	b.n	80045ca <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_DECELERATION:
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800456c:	681c      	ldr	r4, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004576:	681d      	ldr	r5, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6a12      	ldr	r2, [r2, #32]
 8004586:	3264      	adds	r2, #100	@ 0x64
 8004588:	7b92      	ldrb	r2, [r2, #14]
 800458a:	6839      	ldr	r1, [r7, #0]
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	4798      	blx	r3
 8004590:	4603      	mov	r3, r0
 8004592:	b29b      	uxth	r3, r3
 8004594:	4619      	mov	r1, r3
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	47a8      	blx	r5
 800459a:	eef0 7a40 	vmov.f32	s15, s0
 800459e:	eeb0 0a67 	vmov.f32	s0, s15
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	47a0      	blx	r4
 80045a6:	4603      	mov	r3, r0
 80045a8:	e00f      	b.n	80045ca <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_DIRECTION:
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2104      	movs	r1, #4
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	4798      	blx	r3
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d101      	bne.n	80045c4 <_ZN5L6470I8shield_3E10get_resultEPh+0x210>
 80045c0:	2301      	movs	r3, #1
 80045c2:	e002      	b.n	80045ca <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
 80045c4:	2300      	movs	r3, #0
 80045c6:	e000      	b.n	80045ca <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            default:
            case PREPARED_NO_ACTION:
                return 0;
 80045c8:	2300      	movs	r3, #0
        }
    }
 80045ca:	4618      	mov	r0, r3
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bdb0      	pop	{r4, r5, r7, pc}
 80045d2:	bf00      	nop

080045d4 <_ZN5L6470I8shield_3E13L6470_DISABLEEv>:
    }

    /*
     * Puts the device in reset mode.
     */
    void L6470_DISABLE(void)
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
    {
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6898      	ldr	r0, [r3, #8]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	899b      	ldrh	r3, [r3, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	4619      	mov	r1, r3
 80045e8:	f009 fc2a 	bl	800de40 <HAL_GPIO_WritePin>
    }
 80045ec:	bf00      	nop
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm>:
  * 
  * @param  AbsPos      The absolute position in the range from [-(2^21)] to [+(2^21)-1].
  * @retval Position    The position as signed number.
  */
template <class shield_x>
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
{
  if (AbsPos > L6470_MAX_POSITION)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004604:	d303      	bcc.n	800460e <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	f5a3 0380 	sub.w	r3, r3, #4194304	@ 0x400000
 800460c:	e000      	b.n	8004610 <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm+0x1c>
  else
    return AbsPos;
 800460e:	683b      	ldr	r3, [r7, #0]
}
 8004610:	4618      	mov	r0, r3
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl>:
  * 
  * @param  Position    The position as signed number.
  * @retval AbsPos      The absolute position in the range from [-(2^21)] to [+(2^21)-1].
  */
template <class shield_x>
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
{
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	db05      	blt.n	8004638 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x1c>
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004632:	da01      	bge.n	8004638 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	e00c      	b.n	8004652 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x36>
  else
  {
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	f513 1f00 	cmn.w	r3, #2097152	@ 0x200000
 800463e:	db06      	blt.n	800464e <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x32>
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	da03      	bge.n	800464e <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	f503 0380 	add.w	r3, r3, #4194304	@ 0x400000
 800464c:	e001      	b.n	8004652 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x36>
    else
      return (L6470_POSITION_RANGE + 1);        // OVF
 800464e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  }
}
 8004652:	4618      	mov	r0, r3
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
	...

08004660 <_ZN5L6470I8shield_3E20L6470_Speed_2_Step_sEm>:
  * 
  * @param  Speed       The SPEED register value.
  * @retval step/s      The speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
{
  return (Speed * ((float)14.9012e-3));
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	ee07 3a90 	vmov	s15, r3
 8004670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004674:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800468c <_ZN5L6470I8shield_3E20L6470_Speed_2_Step_sEm+0x2c>
 8004678:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800467c:	eeb0 0a67 	vmov.f32	s0, s15
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	3c74242a 	.word	0x3c74242a

08004690 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf>:
  * 
  * @param  step/s      The speed as step/s.
  * @retval Speed       The SPEED register value.
  */
template <class shield_x>
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 800469c:	edd7 7a00 	vldr	s15, [r7]
 80046a0:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80046d4 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x44>
 80046a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ac:	d80a      	bhi.n	80046c4 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 80046ae:	ed97 7a00 	vldr	s14, [r7]
 80046b2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80046d8 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x48>
 80046b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046be:	ee17 3a90 	vmov	r3, s15
 80046c2:	e000      	b.n	80046c6 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x36>
  else
    return 0;   // Warning
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	4674241b 	.word	0x4674241b
 80046d8:	3c74242a 	.word	0x3c74242a

080046dc <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et>:
  * 
  * @param  Acc         The ACCEL register value.
  * @retval step/(s^2)  The acceleration as step/(s^2).
  */
template <class shield_x>
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	460b      	mov	r3, r1
 80046e6:	807b      	strh	r3, [r7, #2]
{
  if (Acc <= L6470_MAX_ACC)
 80046e8:	887b      	ldrh	r3, [r7, #2]
 80046ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046ee:	d209      	bcs.n	8004704 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 80046f0:	887b      	ldrh	r3, [r7, #2]
 80046f2:	ee07 3a90 	vmov	s15, r3
 80046f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046fa:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8004718 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x3c>
 80046fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004702:	e001      	b.n	8004708 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x2c>
  else
    return 0;   // Warning
 8004704:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800471c <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x40>
}
 8004708:	eeb0 0a67 	vmov.f32	s0, s15
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	4168d4fe 	.word	0x4168d4fe
 800471c:	00000000 	.word	0x00000000

08004720 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf>:
  * 
  * @param  step/(s^2)  The acceleration as step/(s^2).
  * @retval Acc         The ACCEL register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 800472c:	edd7 7a00 	vldr	s15, [r7]
 8004730:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8004764 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x44>
 8004734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800473c:	d80b      	bhi.n	8004756 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 800473e:	ed97 7a00 	vldr	s14, [r7]
 8004742:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8004768 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x48>
 8004746:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800474a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800474e:	ee17 3a90 	vmov	r3, s15
 8004752:	b29b      	uxth	r3, r3
 8004754:	e000      	b.n	8004758 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x38>
  else
    return 0;   // Warning
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	4768c671 	.word	0x4768c671
 8004768:	4168d4fe 	.word	0x4168d4fe

0800476c <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et>:
  * 
  * @param  Dec         The DECEL register value.
  * @retval step/(s^2)  The deceleration as step/(s^2).
  */
template <class shield_x>
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	460b      	mov	r3, r1
 8004776:	807b      	strh	r3, [r7, #2]
{
  if (Dec <= L6470_MAX_DEC)
 8004778:	887b      	ldrh	r3, [r7, #2]
 800477a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800477e:	d209      	bcs.n	8004794 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 8004780:	887b      	ldrh	r3, [r7, #2]
 8004782:	ee07 3a90 	vmov	s15, r3
 8004786:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800478a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80047a8 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x3c>
 800478e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004792:	e001      	b.n	8004798 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x2c>
  else
    return 0;   // Warning
 8004794:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80047ac <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x40>
}
 8004798:	eeb0 0a67 	vmov.f32	s0, s15
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	4168d4fe 	.word	0x4168d4fe
 80047ac:	00000000 	.word	0x00000000

080047b0 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf>:
  * 
  * @param  step/(s^2)  The deceleration as step/(s^2).
  * @retval Dec         The DECEL register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 80047bc:	edd7 7a00 	vldr	s15, [r7]
 80047c0:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80047f4 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x44>
 80047c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047cc:	d80b      	bhi.n	80047e6 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 80047ce:	ed97 7a00 	vldr	s14, [r7]
 80047d2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80047f8 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x48>
 80047d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047de:	ee17 3a90 	vmov	r3, s15
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	e000      	b.n	80047e8 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x38>
  else
    return 0;   // Warning
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	4768c671 	.word	0x4768c671
 80047f8:	4168d4fe 	.word	0x4168d4fe

080047fc <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt>:
  * 
  * @param  MaxSpeed    The MAX_SPEED register value.
  * @retval step/s      The max speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	807b      	strh	r3, [r7, #2]
{
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 8004808:	887b      	ldrh	r3, [r7, #2]
 800480a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800480e:	d209      	bcs.n	8004824 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 8004810:	887b      	ldrh	r3, [r7, #2]
 8004812:	ee07 3a90 	vmov	s15, r3
 8004816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800481a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8004838 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 800481e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004822:	e001      	b.n	8004828 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 8004824:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800483c <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 8004828:	eeb0 0a67 	vmov.f32	s0, s15
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	4174240b 	.word	0x4174240b
 800483c:	00000000 	.word	0x00000000

08004840 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf>:
  * 
  * @param  step/s      The max speed as step/s.
  * @retval MaxSpeed    The MAX_SPEED register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 800484c:	edd7 7a00 	vldr	s15, [r7]
 8004850:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8004884 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x44>
 8004854:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800485c:	d80b      	bhi.n	8004876 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 800485e:	ed97 7a00 	vldr	s14, [r7]
 8004862:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8004888 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x48>
 8004866:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800486a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800486e:	ee17 3a90 	vmov	r3, s15
 8004872:	b29b      	uxth	r3, r3
 8004874:	e000      	b.n	8004878 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x38>
  else
    return 0;   // Warning
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	4673e702 	.word	0x4673e702
 8004888:	4174240b 	.word	0x4174240b

0800488c <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt>:
  * 
  * @param  MinSpeed    The MIN_SPEED register value.
  * @retval step/s      The min speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	460b      	mov	r3, r1
 8004896:	807b      	strh	r3, [r7, #2]
{
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 8004898:	887b      	ldrh	r3, [r7, #2]
 800489a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800489e:	d209      	bcs.n	80048b4 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 80048a0:	887b      	ldrh	r3, [r7, #2]
 80048a2:	ee07 3a90 	vmov	s15, r3
 80048a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048aa:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80048c8 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x3c>
 80048ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048b2:	e001      	b.n	80048b8 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 80048b4:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80048cc <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 80048b8:	eeb0 0a67 	vmov.f32	s0, s15
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	3e742401 	.word	0x3e742401
 80048cc:	00000000 	.word	0x00000000

080048d0 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf>:
  * 
  * @param  step/s      The min speed as step/s.
  * @retval MinSpeed    The MIN_SPEED register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 80048dc:	edd7 7a00 	vldr	s15, [r7]
 80048e0:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8004914 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x44>
 80048e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ec:	d80b      	bhi.n	8004906 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 80048ee:	ed97 7a00 	vldr	s14, [r7]
 80048f2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8004918 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x48>
 80048f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048fe:	ee17 3a90 	vmov	r3, s15
 8004902:	b29b      	uxth	r3, r3
 8004904:	e000      	b.n	8004908 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x38>
  else
    return 0;   // Warning
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	447414bf 	.word	0x447414bf
 8004918:	3e742401 	.word	0x3e742401

0800491c <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt>:
  * 
  * @param  FsSpd       The FS_SPD register value.
  * @retval step/s      The full-step speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	460b      	mov	r3, r1
 8004926:	807b      	strh	r3, [r7, #2]
{
  if (FsSpd <= L6470_MAX_FS_SPD)
 8004928:	887b      	ldrh	r3, [r7, #2]
 800492a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800492e:	d219      	bcs.n	8004964 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 8004930:	887b      	ldrh	r3, [r7, #2]
 8004932:	4618      	mov	r0, r3
 8004934:	f7fb fe26 	bl	8000584 <__aeabi_i2d>
 8004938:	f04f 0200 	mov.w	r2, #0
 800493c:	4b0e      	ldr	r3, [pc, #56]	@ (8004978 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x5c>)
 800493e:	f7fb fcd5 	bl	80002ec <__adddf3>
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	4610      	mov	r0, r2
 8004948:	4619      	mov	r1, r3
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	4b0b      	ldr	r3, [pc, #44]	@ (800497c <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x60>)
 8004950:	f7fb fe82 	bl	8000658 <__aeabi_dmul>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	4610      	mov	r0, r2
 800495a:	4619      	mov	r1, r3
 800495c:	f7fc f954 	bl	8000c08 <__aeabi_d2f>
 8004960:	4603      	mov	r3, r0
 8004962:	e001      	b.n	8004968 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x4c>
  else
    return 0;   // Warning
 8004964:	f04f 0300 	mov.w	r3, #0
}
 8004968:	ee07 3a90 	vmov	s15, r3
 800496c:	eeb0 0a67 	vmov.f32	s0, s15
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	3fe00000 	.word	0x3fe00000
 800497c:	402e8000 	.word	0x402e8000

08004980 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 800498c:	edd7 7a00 	vldr	s15, [r7]
 8004990:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80049cc <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x4c>
 8004994:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800499c:	d80f      	bhi.n	80049be <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 800499e:	ed97 7a00 	vldr	s14, [r7]
 80049a2:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80049d0 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x50>
 80049a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049aa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80049ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80049b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049b6:	ee17 3a90 	vmov	r3, s15
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	e000      	b.n	80049c0 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x40>
  else
    return 0;   // Warning
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	4673e180 	.word	0x4673e180
 80049d0:	41740000 	.word	0x41740000

080049d4 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	460b      	mov	r3, r1
 80049de:	807b      	strh	r3, [r7, #2]
{
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 80049e0:	887b      	ldrh	r3, [r7, #2]
 80049e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049e6:	d209      	bcs.n	80049fc <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 80049e8:	887b      	ldrh	r3, [r7, #2]
 80049ea:	ee07 3a90 	vmov	s15, r3
 80049ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049f2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8004a10 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x3c>
 80049f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049fa:	e001      	b.n	8004a00 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 80049fc:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004a14 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 8004a00:	eeb0 0a67 	vmov.f32	s0, s15
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	3d7423f4 	.word	0x3d7423f4
 8004a14:	00000000 	.word	0x00000000

08004a18 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 8004a24:	edd7 7a00 	vldr	s15, [r7]
 8004a28:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8004a5c <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x44>
 8004a2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a34:	d80b      	bhi.n	8004a4e <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 8004a36:	ed97 7a00 	vldr	s14, [r7]
 8004a3a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8004a60 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x48>
 8004a3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a46:	ee17 3a90 	vmov	r3, s15
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	e000      	b.n	8004a50 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x38>
  else
    return 0;   // Warning
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	44742023 	.word	0x44742023
 8004a60:	3d7423f4 	.word	0x3d7423f4

08004a64 <_ZN5L6470I8shield_3E20L6470_StSlp_2_s_StepEh>:
  * 
  * @param  StartSlope  The ST_SLP register value.
  * @retval s/step      The start slope as s/step.
  */
template <class shield_x>
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	70fb      	strb	r3, [r7, #3]
{
//  if (StSlp <= L6470_MAX_ST_SLP)
    return (StSlp * ((float)1.5686e-5));
 8004a70:	78fb      	ldrb	r3, [r7, #3]
 8004a72:	ee07 3a90 	vmov	s15, r3
 8004a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a7a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8004a90 <_ZN5L6470I8shield_3E20L6470_StSlp_2_s_StepEh+0x2c>
 8004a7e:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 8004a82:	eeb0 0a67 	vmov.f32	s0, s15
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	3783956e 	.word	0x3783956e

08004a94 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 8004aa0:	edd7 7a02 	vldr	s15, [r7, #8]
 8004aa4:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8004adc <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x48>
 8004aa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ab0:	d80c      	bhi.n	8004acc <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8004ab2:	ed97 7a02 	vldr	s14, [r7, #8]
 8004ab6:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8004ae0 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x4c>
 8004aba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004abe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ac2:	edc7 7a01 	vstr	s15, [r7, #4]
 8004ac6:	793b      	ldrb	r3, [r7, #4]
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	e000      	b.n	8004ace <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x3a>
  else
    return 0;   // Warning
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	3b8311d9 	.word	0x3b8311d9
 8004ae0:	3783956e 	.word	0x3783956e

08004ae4 <_ZN5L6470I8shield_3E23L6470_FnSlpAcc_2_s_StepEh>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	460b      	mov	r3, r1
 8004aee:	70fb      	strb	r3, [r7, #3]
{
//  if (FnSlpAcc <= L6470_MAX_FN_SLP_ACC)
    return (FnSlpAcc * ((float)1.5686e-5));
 8004af0:	78fb      	ldrb	r3, [r7, #3]
 8004af2:	ee07 3a90 	vmov	s15, r3
 8004af6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004afa:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8004b10 <_ZN5L6470I8shield_3E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 8004afe:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 8004b02:	eeb0 0a67 	vmov.f32	s0, s15
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	3783956e 	.word	0x3783956e

08004b14 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 8004b20:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b24:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8004b5c <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x48>
 8004b28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b30:	d80c      	bhi.n	8004b4c <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8004b32:	ed97 7a02 	vldr	s14, [r7, #8]
 8004b36:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8004b60 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 8004b3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b42:	edc7 7a01 	vstr	s15, [r7, #4]
 8004b46:	793b      	ldrb	r3, [r7, #4]
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	e000      	b.n	8004b4e <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x3a>
  else
    return 0;   // Warning
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	3b8311d9 	.word	0x3b8311d9
 8004b60:	3783956e 	.word	0x3783956e

08004b64 <_ZN5L6470I8shield_3E23L6470_FnSlpDec_2_s_StepEh>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	70fb      	strb	r3, [r7, #3]
{
//  if (FnSlpDec <= L6470_MAX_FN_SLP_DEC)
    return (FnSlpDec * ((float)1.5686e-5));
 8004b70:	78fb      	ldrb	r3, [r7, #3]
 8004b72:	ee07 3a90 	vmov	s15, r3
 8004b76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b7a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8004b90 <_ZN5L6470I8shield_3E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 8004b7e:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 8004b82:	eeb0 0a67 	vmov.f32	s0, s15
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	3783956e 	.word	0x3783956e

08004b94 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 8004ba0:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ba4:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8004bdc <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x48>
 8004ba8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb0:	d80c      	bhi.n	8004bcc <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8004bb2:	ed97 7a02 	vldr	s14, [r7, #8]
 8004bb6:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8004be0 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 8004bba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bc2:	edc7 7a01 	vstr	s15, [r7, #4]
 8004bc6:	793b      	ldrb	r3, [r7, #4]
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	e000      	b.n	8004bce <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x3a>
  else
    return 0;   // Warning
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	3b8311d9 	.word	0x3b8311d9
 8004be0:	3783956e 	.word	0x3783956e

08004be4 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh>:
  * 
  * @param  OcdTh       The OCD_TH register value.
  * @retval mA          The overcurrent threshold as mA.
  */
template <class shield_x>
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	460b      	mov	r3, r1
 8004bee:	70fb      	strb	r3, [r7, #3]
{
  if (OcdTh <= L6470_MAX_OCD_TH)
 8004bf0:	78fb      	ldrb	r3, [r7, #3]
 8004bf2:	2b0f      	cmp	r3, #15
 8004bf4:	d80a      	bhi.n	8004c0c <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 8004bf6:	78fb      	ldrb	r3, [r7, #3]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	ee07 3a90 	vmov	s15, r3
 8004bfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c02:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8004c20 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x3c>
 8004c06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c0a:	e001      	b.n	8004c10 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x2c>
  else
    return 0;   // Warning
 8004c0c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004c24 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x40>
}
 8004c10:	eeb0 0a67 	vmov.f32	s0, s15
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	43bb8000 	.word	0x43bb8000
 8004c24:	00000000 	.word	0x00000000

08004c28 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf>:
  * 
  * @param  mA          The overcurrent threshold as mA.
  * @retval OcdTh       The OCD_TH register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	ed87 0a02 	vstr	s0, [r7, #8]
{
  float result, decimal;
  
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 8004c34:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c38:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8004cc4 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x9c>
 8004c3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c44:	d836      	bhi.n	8004cb4 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8c>
  {
    result = (mA / ((float)375));
 8004c46:	ed97 7a02 	vldr	s14, [r7, #8]
 8004c4a:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8004cc8 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0xa0>
 8004c4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c52:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 8004c56:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c5e:	edc7 7a01 	vstr	s15, [r7, #4]
 8004c62:	793b      	ldrb	r3, [r7, #4]
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	ee07 3a90 	vmov	s15, r3
 8004c6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c6e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004c72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c76:	edc7 7a04 	vstr	s15, [r7, #16]
    
    if (decimal < (float)0.5)
 8004c7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c7e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004c82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c8a:	d50a      	bpl.n	8004ca2 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 8004c8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c94:	edc7 7a01 	vstr	s15, [r7, #4]
 8004c98:	793b      	ldrb	r3, [r7, #4]
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	e009      	b.n	8004cb6 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8e>
    else
      return ((uint8_t)result);    
 8004ca2:	edd7 7a05 	vldr	s15, [r7, #20]
 8004ca6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004caa:	edc7 7a01 	vstr	s15, [r7, #4]
 8004cae:	793b      	ldrb	r3, [r7, #4]
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	e000      	b.n	8004cb6 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8e>
  }
  else
    return 0;   // Warning
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	371c      	adds	r7, #28
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	45bb8000 	.word	0x45bb8000
 8004cc8:	43bb8000 	.word	0x43bb8000

08004ccc <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh>:
  * 
  * @param  StallTh     The STALL_TH register value.
  * @retval mA          The stall detection threshold as mA.
  */
template <class shield_x>
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	70fb      	strb	r3, [r7, #3]
{
  if (StallTh <= L6470_MAX_STALL_TH)
 8004cd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	db0a      	blt.n	8004cf6 <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 8004ce0:	78fb      	ldrb	r3, [r7, #3]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	ee07 3a90 	vmov	s15, r3
 8004ce8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cec:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8004d08 <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x3c>
 8004cf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cf4:	e001      	b.n	8004cfa <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x2e>
  else
    return 0;   // Warning
 8004cf6:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004d0c <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x40>
}
 8004cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	41fa0000 	.word	0x41fa0000
 8004d0c:	00000000 	.word	0x00000000

08004d10 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf>:
  * 
  * @param  mA          The stall detection threshold as mA.
  * @retval StallTh     The STALL_TH register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 8004d10:	b480      	push	{r7}
 8004d12:	b087      	sub	sp, #28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	ed87 0a02 	vstr	s0, [r7, #8]
{
  float result, decimal;
  
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 8004d1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004d20:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8004dac <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x9c>
 8004d24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d2c:	d836      	bhi.n	8004d9c <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8c>
  {
    result = (mA / ((float)31.25));
 8004d2e:	ed97 7a02 	vldr	s14, [r7, #8]
 8004d32:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8004db0 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0xa0>
 8004d36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d3a:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 8004d3e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d46:	edc7 7a01 	vstr	s15, [r7, #4]
 8004d4a:	793b      	ldrb	r3, [r7, #4]
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	ee07 3a90 	vmov	s15, r3
 8004d52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d56:	ed97 7a05 	vldr	s14, [r7, #20]
 8004d5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d5e:	edc7 7a04 	vstr	s15, [r7, #16]
    
    if (decimal < (float)0.5)
 8004d62:	edd7 7a04 	vldr	s15, [r7, #16]
 8004d66:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004d6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d72:	d50a      	bpl.n	8004d8a <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 8004d74:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d7c:	edc7 7a01 	vstr	s15, [r7, #4]
 8004d80:	793b      	ldrb	r3, [r7, #4]
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	3b01      	subs	r3, #1
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	e009      	b.n	8004d9e <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8e>
    else
      return ((uint8_t)result);    
 8004d8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d92:	edc7 7a01 	vstr	s15, [r7, #4]
 8004d96:	793b      	ldrb	r3, [r7, #4]
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	e000      	b.n	8004d9e <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8e>
  }
  else
    return 0;   // Warning
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	371c      	adds	r7, #28
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	457a0000 	.word	0x457a0000
 8004db0:	41fa0000 	.word	0x41fa0000

08004db4 <_ZN5L6470I8shield_3E12L6470_ConfigEPv>:
/**
  * @brief  Configures the L6470 registers.
  * @param  init The pointer to the initialization structure.
  */
template <class shield_x>
status_t L6470<shield_x>::L6470_Config(void *init)
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
{
  /* Reset devices. */
  reset_device();
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	3394      	adds	r3, #148	@ 0x94
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	4798      	blx	r3

  /* Reset Status Register flags. */
  get_status();
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	330c      	adds	r3, #12
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	4798      	blx	r3

  /* Prepare the 'Register' field of StepperMotorDriverHandle */
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	edd2 7a05 	vldr	s15, [r2, #20]
 8004dea:	eeb0 0a67 	vmov.f32	s0, s15
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	4798      	blx	r3
 8004df2:	4603      	mov	r3, r0
 8004df4:	461a      	mov	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	edd2 7a06 	vldr	s15, [r2, #24]
 8004e0c:	eeb0 0a67 	vmov.f32	s0, s15
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	4798      	blx	r3
 8004e14:	4603      	mov	r3, r0
 8004e16:	461a      	mov	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	edd2 7a07 	vldr	s15, [r2, #28]
 8004e2e:	eeb0 0a67 	vmov.f32	s0, s15
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	4798      	blx	r3
 8004e36:	4603      	mov	r3, r0
 8004e38:	461a      	mov	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	edd2 7a08 	vldr	s15, [r2, #32]
 8004e50:	eeb0 0a67 	vmov.f32	s0, s15
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	4798      	blx	r3
 8004e58:	4603      	mov	r3, r0
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 8004e72:	eeb0 0a67 	vmov.f32	s0, s15
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	4798      	blx	r3
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004e8a:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800515c <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 8004e8e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	ed93 7a00 	vldr	s14, [r3]
 8004e98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ea0:	edc7 7a01 	vstr	s15, [r7, #4]
 8004ea4:	793b      	ldrb	r3, [r7, #4]
 8004ea6:	b2da      	uxtb	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8004eb4:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 800515c <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 8004eb8:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	ed93 7a00 	vldr	s14, [r3]
 8004ec2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004eca:	edc7 7a01 	vstr	s15, [r7, #4]
 8004ece:	793b      	ldrb	r3, [r7, #4]
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004ede:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 800515c <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 8004ee2:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	ed93 7a00 	vldr	s14, [r3]
 8004eec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ef0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ef4:	edc7 7a01 	vstr	s15, [r7, #4]
 8004ef8:	793b      	ldrb	r3, [r7, #4]
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004f08:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 800515c <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 8004f0c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	ed93 7a00 	vldr	s14, [r3]
 8004f16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f1e:	edc7 7a01 	vstr	s15, [r7, #4]
 8004f22:	793b      	ldrb	r3, [r7, #4]
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 8004f3c:	eeb0 0a67 	vmov.f32	s0, s15
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	4798      	blx	r3
 8004f44:	4603      	mov	r3, r0
 8004f46:	461a      	mov	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 8004f5e:	eeb0 0a67 	vmov.f32	s0, s15
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	4798      	blx	r3
 8004f66:	4603      	mov	r3, r0
 8004f68:	461a      	mov	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	edd2 7a10 	vldr	s15, [r2, #64]	@ 0x40
 8004f80:	eeb0 0a67 	vmov.f32	s0, s15
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	4798      	blx	r3
 8004f88:	4603      	mov	r3, r0
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	edd2 7a11 	vldr	s15, [r2, #68]	@ 0x44
 8004fa2:	eeb0 0a67 	vmov.f32	s0, s15
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	4798      	blx	r3
 8004faa:	4603      	mov	r3, r0
 8004fac:	461a      	mov	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	edd2 7a13 	vldr	s15, [r2, #76]	@ 0x4c
 8004fd0:	eeb0 0a67 	vmov.f32	s0, s15
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	4798      	blx	r3
 8004fd8:	4603      	mov	r3, r0
 8004fda:	461a      	mov	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	edd2 7a14 	vldr	s15, [r2, #80]	@ 0x50
 8004ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	4798      	blx	r3
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f

  /* Write the L6470 registers with the prepared data */
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 8005038:	2104      	movs	r1, #4
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 800504e:	2105      	movs	r1, #5
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	f8b2 204c 	ldrh.w	r2, [r2, #76]	@ 0x4c
 8005064:	2106      	movs	r1, #6
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	f8b2 204e 	ldrh.w	r2, [r2, #78]	@ 0x4e
 800507a:	2107      	movs	r1, #7
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 8005090:	2108      	movs	r1, #8
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 80050a6:	2109      	movs	r1, #9
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	f892 2053 	ldrb.w	r2, [r2, #83]	@ 0x53
 80050bc:	210a      	movs	r1, #10
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80050d2:	210b      	movs	r1, #11
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80050e8:	210c      	movs	r1, #12
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
 80050fe:	210d      	movs	r1, #13
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	f892 2058 	ldrb.w	r2, [r2, #88]	@ 0x58
 8005114:	210e      	movs	r1, #14
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	f892 2059 	ldrb.w	r2, [r2, #89]	@ 0x59
 800512a:	210f      	movs	r1, #15
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	f892 205a 	ldrb.w	r2, [r2, #90]	@ 0x5a
 8005140:	2110      	movs	r1, #16
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	f892 205b 	ldrb.w	r2, [r2, #91]	@ 0x5b
 8005156:	2111      	movs	r1, #17
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	e001      	b.n	8005160 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3ac>
 800515c:	43800000 	.word	0x43800000
 8005160:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	f892 205d 	ldrb.w	r2, [r2, #93]	@ 0x5d
 8005172:	2113      	movs	r1, #19
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	f892 205e 	ldrb.w	r2, [r2, #94]	@ 0x5e
 8005188:	2114      	movs	r1, #20
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800519e:	2116      	movs	r1, #22
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	f8b2 2062 	ldrh.w	r2, [r2, #98]	@ 0x62
 80051b4:	2117      	movs	r1, #23
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	3354      	adds	r3, #84	@ 0x54
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	f892 205f 	ldrb.w	r2, [r2, #95]	@ 0x5f
 80051c8:	4611      	mov	r1, r2
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	4798      	blx	r3
 80051ce:	4603      	mov	r3, r0
 80051d0:	f083 0301 	eor.w	r3, r3, #1
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e000      	b.n	80051e0 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x42c>
  
  return COMPONENT_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3718      	adds	r7, #24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 80051e8:	b590      	push	{r4, r7, lr}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af02      	add	r7, sp, #8
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	460b      	mov	r3, r1
 80051f2:	607a      	str	r2, [r7, #4]
 80051f4:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80051fe:	681c      	ldr	r4, [r3, #0]
 8005200:	7afa      	ldrb	r2, [r7, #11]
 8005202:	2300      	movs	r3, #0
 8005204:	9301      	str	r3, [sp, #4]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	4613      	mov	r3, r2
 800520c:	2201      	movs	r2, #1
 800520e:	490c      	ldr	r1, [pc, #48]	@ (8005240 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a09      	ldr	r2, [pc, #36]	@ (8005244 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8005220:	4907      	ldr	r1, [pc, #28]	@ (8005240 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a05      	ldr	r2, [pc, #20]	@ (8005248 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 8005232:	4904      	ldr	r1, [pc, #16]	@ (8005244 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	4798      	blx	r3
}
 8005238:	bf00      	nop
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	bd90      	pop	{r4, r7, pc}
 8005240:	200002b8 	.word	0x200002b8
 8005244:	200002d8 	.word	0x200002d8
 8005248:	200002e0 	.word	0x200002e0

0800524c <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 800524c:	b590      	push	{r4, r7, lr}
 800524e:	b087      	sub	sp, #28
 8005250:	af02      	add	r7, sp, #8
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	460b      	mov	r3, r1
 8005256:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005260:	681c      	ldr	r4, [r3, #0]
 8005262:	78fb      	ldrb	r3, [r7, #3]
 8005264:	2200      	movs	r2, #0
 8005266:	9201      	str	r2, [sp, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	9200      	str	r2, [sp, #0]
 800526c:	2202      	movs	r2, #2
 800526e:	4917      	ldr	r1, [pc, #92]	@ (80052cc <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a14      	ldr	r2, [pc, #80]	@ (80052d0 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8005280:	4912      	ldr	r1, [pc, #72]	@ (80052cc <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a10      	ldr	r2, [pc, #64]	@ (80052d4 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8005292:	490f      	ldr	r1, [pc, #60]	@ (80052d0 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a19      	ldr	r1, [r3, #32]
 800529c:	78fa      	ldrb	r2, [r7, #3]
 800529e:	4613      	mov	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4413      	add	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	440b      	add	r3, r1
 80052a8:	7b9b      	ldrb	r3, [r3, #14]
 80052aa:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	7bfa      	ldrb	r2, [r7, #15]
 80052b8:	4906      	ldr	r1, [pc, #24]	@ (80052d4 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	4798      	blx	r3
 80052be:	4603      	mov	r3, r0
 80052c0:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 80052c2:	68bb      	ldr	r3, [r7, #8]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd90      	pop	{r4, r7, pc}
 80052cc:	200002b8 	.word	0x200002b8
 80052d0:	200002d8 	.word	0x200002d8
 80052d4:	200002e0 	.word	0x200002e0

080052d8 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 80052d8:	b590      	push	{r4, r7, lr}
 80052da:	b087      	sub	sp, #28
 80052dc:	af02      	add	r7, sp, #8
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	460b      	mov	r3, r1
 80052e2:	607a      	str	r2, [r7, #4]
 80052e4:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80052ee:	681c      	ldr	r4, [r3, #0]
 80052f0:	7afa      	ldrb	r2, [r7, #11]
 80052f2:	2300      	movs	r3, #0
 80052f4:	9301      	str	r3, [sp, #4]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	4613      	mov	r3, r2
 80052fc:	2203      	movs	r2, #3
 80052fe:	490c      	ldr	r1, [pc, #48]	@ (8005330 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a09      	ldr	r2, [pc, #36]	@ (8005334 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8005310:	4907      	ldr	r1, [pc, #28]	@ (8005330 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a05      	ldr	r2, [pc, #20]	@ (8005338 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x60>)
 8005322:	4904      	ldr	r1, [pc, #16]	@ (8005334 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	4798      	blx	r3
}
 8005328:	bf00      	nop
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	bd90      	pop	{r4, r7, pc}
 8005330:	200002b8 	.word	0x200002b8
 8005334:	200002d8 	.word	0x200002d8
 8005338:	200002e0 	.word	0x200002e0

0800533c <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 800533c:	b590      	push	{r4, r7, lr}
 800533e:	b085      	sub	sp, #20
 8005340:	af02      	add	r7, sp, #8
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	460b      	mov	r3, r1
 8005346:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005350:	681c      	ldr	r4, [r3, #0]
 8005352:	78fb      	ldrb	r3, [r7, #3]
 8005354:	2200      	movs	r2, #0
 8005356:	9201      	str	r2, [sp, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	9200      	str	r2, [sp, #0]
 800535c:	2204      	movs	r2, #4
 800535e:	490c      	ldr	r1, [pc, #48]	@ (8005390 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a09      	ldr	r2, [pc, #36]	@ (8005394 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8005370:	4907      	ldr	r1, [pc, #28]	@ (8005390 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a05      	ldr	r2, [pc, #20]	@ (8005398 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 8005382:	4904      	ldr	r1, [pc, #16]	@ (8005394 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	4798      	blx	r3
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	bd90      	pop	{r4, r7, pc}
 8005390:	200002b8 	.word	0x200002b8
 8005394:	200002d8 	.word	0x200002d8
 8005398:	200002e0 	.word	0x200002e0

0800539c <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 800539c:	b590      	push	{r4, r7, lr}
 800539e:	b087      	sub	sp, #28
 80053a0:	af02      	add	r7, sp, #8
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	460b      	mov	r3, r1
 80053a6:	607a      	str	r2, [r7, #4]
 80053a8:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80053b2:	681c      	ldr	r4, [r3, #0]
 80053b4:	7afa      	ldrb	r2, [r7, #11]
 80053b6:	2300      	movs	r3, #0
 80053b8:	9301      	str	r3, [sp, #4]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	4613      	mov	r3, r2
 80053c0:	2205      	movs	r2, #5
 80053c2:	490c      	ldr	r1, [pc, #48]	@ (80053f4 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a09      	ldr	r2, [pc, #36]	@ (80053f8 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 80053d4:	4907      	ldr	r1, [pc, #28]	@ (80053f4 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a05      	ldr	r2, [pc, #20]	@ (80053fc <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 80053e6:	4904      	ldr	r1, [pc, #16]	@ (80053f8 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	4798      	blx	r3
}
 80053ec:	bf00      	nop
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd90      	pop	{r4, r7, pc}
 80053f4:	200002b8 	.word	0x200002b8
 80053f8:	200002d8 	.word	0x200002d8
 80053fc:	200002e0 	.word	0x200002e0

08005400 <_ZN5L6470I8shield_3E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 8005400:	b590      	push	{r4, r7, lr}
 8005402:	b085      	sub	sp, #20
 8005404:	af02      	add	r7, sp, #8
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005410:	d21f      	bcs.n	8005452 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800541a:	681c      	ldr	r4, [r3, #0]
 800541c:	2300      	movs	r3, #0
 800541e:	9301      	str	r3, [sp, #4]
 8005420:	2300      	movs	r3, #0
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	2206      	movs	r2, #6
 8005428:	490c      	ldr	r1, [pc, #48]	@ (800545c <_ZN5L6470I8shield_3E10L6470_GoToEm+0x5c>)
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a09      	ldr	r2, [pc, #36]	@ (8005460 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x60>)
 800543a:	4908      	ldr	r1, [pc, #32]	@ (800545c <_ZN5L6470I8shield_3E10L6470_GoToEm+0x5c>)
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a06      	ldr	r2, [pc, #24]	@ (8005464 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x64>)
 800544c:	4904      	ldr	r1, [pc, #16]	@ (8005460 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x60>)
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	4798      	blx	r3
}
 8005452:	bf00      	nop
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	bd90      	pop	{r4, r7, pc}
 800545a:	bf00      	nop
 800545c:	200002b8 	.word	0x200002b8
 8005460:	200002d8 	.word	0x200002d8
 8005464:	200002e0 	.word	0x200002e0

08005468 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 8005468:	b590      	push	{r4, r7, lr}
 800546a:	b087      	sub	sp, #28
 800546c:	af02      	add	r7, sp, #8
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	460b      	mov	r3, r1
 8005472:	607a      	str	r2, [r7, #4]
 8005474:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800547c:	d220      	bcs.n	80054c0 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005486:	681c      	ldr	r4, [r3, #0]
 8005488:	7afa      	ldrb	r2, [r7, #11]
 800548a:	2300      	movs	r3, #0
 800548c:	9301      	str	r3, [sp, #4]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	4613      	mov	r3, r2
 8005494:	2207      	movs	r2, #7
 8005496:	490c      	ldr	r1, [pc, #48]	@ (80054c8 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a09      	ldr	r2, [pc, #36]	@ (80054cc <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 80054a8:	4907      	ldr	r1, [pc, #28]	@ (80054c8 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a05      	ldr	r2, [pc, #20]	@ (80054d0 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 80054ba:	4904      	ldr	r1, [pc, #16]	@ (80054cc <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	4798      	blx	r3
}
 80054c0:	bf00      	nop
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd90      	pop	{r4, r7, pc}
 80054c8:	200002b8 	.word	0x200002b8
 80054cc:	200002d8 	.word	0x200002d8
 80054d0:	200002e0 	.word	0x200002e0

080054d4 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 80054d4:	b590      	push	{r4, r7, lr}
 80054d6:	b087      	sub	sp, #28
 80054d8:	af02      	add	r7, sp, #8
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	607b      	str	r3, [r7, #4]
 80054de:	460b      	mov	r3, r1
 80054e0:	72fb      	strb	r3, [r7, #11]
 80054e2:	4613      	mov	r3, r2
 80054e4:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80054ee:	681c      	ldr	r4, [r3, #0]
 80054f0:	7af9      	ldrb	r1, [r7, #11]
 80054f2:	7abb      	ldrb	r3, [r7, #10]
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	9201      	str	r2, [sp, #4]
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	460b      	mov	r3, r1
 80054fc:	2208      	movs	r2, #8
 80054fe:	490c      	ldr	r1, [pc, #48]	@ (8005530 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a09      	ldr	r2, [pc, #36]	@ (8005534 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8005510:	4907      	ldr	r1, [pc, #28]	@ (8005530 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a05      	ldr	r2, [pc, #20]	@ (8005538 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 8005522:	4904      	ldr	r1, [pc, #16]	@ (8005534 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	4798      	blx	r3
}
 8005528:	bf00      	nop
 800552a:	3714      	adds	r7, #20
 800552c:	46bd      	mov	sp, r7
 800552e:	bd90      	pop	{r4, r7, pc}
 8005530:	200002b8 	.word	0x200002b8
 8005534:	200002d8 	.word	0x200002d8
 8005538:	200002e0 	.word	0x200002e0

0800553c <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 800553c:	b590      	push	{r4, r7, lr}
 800553e:	b085      	sub	sp, #20
 8005540:	af02      	add	r7, sp, #8
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	460b      	mov	r3, r1
 8005546:	70fb      	strb	r3, [r7, #3]
 8005548:	4613      	mov	r3, r2
 800554a:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005554:	681c      	ldr	r4, [r3, #0]
 8005556:	78fa      	ldrb	r2, [r7, #3]
 8005558:	78bb      	ldrb	r3, [r7, #2]
 800555a:	2100      	movs	r1, #0
 800555c:	9101      	str	r1, [sp, #4]
 800555e:	9300      	str	r3, [sp, #0]
 8005560:	4613      	mov	r3, r2
 8005562:	2209      	movs	r2, #9
 8005564:	490c      	ldr	r1, [pc, #48]	@ (8005598 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a09      	ldr	r2, [pc, #36]	@ (800559c <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8005576:	4908      	ldr	r1, [pc, #32]	@ (8005598 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a06      	ldr	r2, [pc, #24]	@ (80055a0 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 8005588:	4904      	ldr	r1, [pc, #16]	@ (800559c <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	4798      	blx	r3
}
 800558e:	bf00      	nop
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	bd90      	pop	{r4, r7, pc}
 8005596:	bf00      	nop
 8005598:	200002b8 	.word	0x200002b8
 800559c:	200002d8 	.word	0x200002d8
 80055a0:	200002e0 	.word	0x200002e0

080055a4 <_ZN5L6470I8shield_3E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 80055a4:	b590      	push	{r4, r7, lr}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af02      	add	r7, sp, #8
 80055aa:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80055b4:	681c      	ldr	r4, [r3, #0]
 80055b6:	2300      	movs	r3, #0
 80055b8:	9301      	str	r3, [sp, #4]
 80055ba:	2300      	movs	r3, #0
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	2300      	movs	r3, #0
 80055c0:	220a      	movs	r2, #10
 80055c2:	490c      	ldr	r1, [pc, #48]	@ (80055f4 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x50>)
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a09      	ldr	r2, [pc, #36]	@ (80055f8 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x54>)
 80055d4:	4907      	ldr	r1, [pc, #28]	@ (80055f4 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x50>)
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a05      	ldr	r2, [pc, #20]	@ (80055fc <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x58>)
 80055e6:	4904      	ldr	r1, [pc, #16]	@ (80055f8 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x54>)
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	4798      	blx	r3
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd90      	pop	{r4, r7, pc}
 80055f4:	200002b8 	.word	0x200002b8
 80055f8:	200002d8 	.word	0x200002d8
 80055fc:	200002e0 	.word	0x200002e0

08005600 <_ZN5L6470I8shield_3E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 8005600:	b590      	push	{r4, r7, lr}
 8005602:	b085      	sub	sp, #20
 8005604:	af02      	add	r7, sp, #8
 8005606:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005610:	681c      	ldr	r4, [r3, #0]
 8005612:	2300      	movs	r3, #0
 8005614:	9301      	str	r3, [sp, #4]
 8005616:	2300      	movs	r3, #0
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	2300      	movs	r3, #0
 800561c:	220b      	movs	r2, #11
 800561e:	490c      	ldr	r1, [pc, #48]	@ (8005650 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x50>)
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a09      	ldr	r2, [pc, #36]	@ (8005654 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x54>)
 8005630:	4907      	ldr	r1, [pc, #28]	@ (8005650 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x50>)
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a05      	ldr	r2, [pc, #20]	@ (8005658 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x58>)
 8005642:	4904      	ldr	r1, [pc, #16]	@ (8005654 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x54>)
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	4798      	blx	r3
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	bd90      	pop	{r4, r7, pc}
 8005650:	200002b8 	.word	0x200002b8
 8005654:	200002d8 	.word	0x200002d8
 8005658:	200002e0 	.word	0x200002e0

0800565c <_ZN5L6470I8shield_3E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 800565c:	b590      	push	{r4, r7, lr}
 800565e:	b085      	sub	sp, #20
 8005660:	af02      	add	r7, sp, #8
 8005662:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800566c:	681c      	ldr	r4, [r3, #0]
 800566e:	2300      	movs	r3, #0
 8005670:	9301      	str	r3, [sp, #4]
 8005672:	2300      	movs	r3, #0
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	2300      	movs	r3, #0
 8005678:	220c      	movs	r2, #12
 800567a:	490c      	ldr	r1, [pc, #48]	@ (80056ac <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x50>)
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a09      	ldr	r2, [pc, #36]	@ (80056b0 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x54>)
 800568c:	4907      	ldr	r1, [pc, #28]	@ (80056ac <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x50>)
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a05      	ldr	r2, [pc, #20]	@ (80056b4 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x58>)
 800569e:	4904      	ldr	r1, [pc, #16]	@ (80056b0 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x54>)
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	4798      	blx	r3
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd90      	pop	{r4, r7, pc}
 80056ac:	200002b8 	.word	0x200002b8
 80056b0:	200002d8 	.word	0x200002d8
 80056b4:	200002e0 	.word	0x200002e0

080056b8 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 80056b8:	b590      	push	{r4, r7, lr}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af02      	add	r7, sp, #8
 80056be:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80056c8:	681c      	ldr	r4, [r3, #0]
 80056ca:	2300      	movs	r3, #0
 80056cc:	9301      	str	r3, [sp, #4]
 80056ce:	2300      	movs	r3, #0
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	2300      	movs	r3, #0
 80056d4:	220d      	movs	r2, #13
 80056d6:	490c      	ldr	r1, [pc, #48]	@ (8005708 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x50>)
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a09      	ldr	r2, [pc, #36]	@ (800570c <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x54>)
 80056e8:	4907      	ldr	r1, [pc, #28]	@ (8005708 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x50>)
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a05      	ldr	r2, [pc, #20]	@ (8005710 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x58>)
 80056fa:	4904      	ldr	r1, [pc, #16]	@ (800570c <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x54>)
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	4798      	blx	r3
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	bd90      	pop	{r4, r7, pc}
 8005708:	200002b8 	.word	0x200002b8
 800570c:	200002d8 	.word	0x200002d8
 8005710:	200002e0 	.word	0x200002e0

08005714 <_ZN5L6470I8shield_3E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 8005714:	b590      	push	{r4, r7, lr}
 8005716:	b085      	sub	sp, #20
 8005718:	af02      	add	r7, sp, #8
 800571a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005724:	681c      	ldr	r4, [r3, #0]
 8005726:	2300      	movs	r3, #0
 8005728:	9301      	str	r3, [sp, #4]
 800572a:	2300      	movs	r3, #0
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	2300      	movs	r3, #0
 8005730:	220e      	movs	r2, #14
 8005732:	490c      	ldr	r1, [pc, #48]	@ (8005764 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x50>)
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a09      	ldr	r2, [pc, #36]	@ (8005768 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x54>)
 8005744:	4907      	ldr	r1, [pc, #28]	@ (8005764 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x50>)
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a05      	ldr	r2, [pc, #20]	@ (800576c <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x58>)
 8005756:	4904      	ldr	r1, [pc, #16]	@ (8005768 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x54>)
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	4798      	blx	r3
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	bd90      	pop	{r4, r7, pc}
 8005764:	200002b8 	.word	0x200002b8
 8005768:	200002d8 	.word	0x200002d8
 800576c:	200002e0 	.word	0x200002e0

08005770 <_ZN5L6470I8shield_3E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 8005770:	b590      	push	{r4, r7, lr}
 8005772:	b085      	sub	sp, #20
 8005774:	af02      	add	r7, sp, #8
 8005776:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005780:	681c      	ldr	r4, [r3, #0]
 8005782:	2300      	movs	r3, #0
 8005784:	9301      	str	r3, [sp, #4]
 8005786:	2300      	movs	r3, #0
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	2300      	movs	r3, #0
 800578c:	220f      	movs	r2, #15
 800578e:	490c      	ldr	r1, [pc, #48]	@ (80057c0 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x50>)
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a09      	ldr	r2, [pc, #36]	@ (80057c4 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x54>)
 80057a0:	4907      	ldr	r1, [pc, #28]	@ (80057c0 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x50>)
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a05      	ldr	r2, [pc, #20]	@ (80057c8 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x58>)
 80057b2:	4904      	ldr	r1, [pc, #16]	@ (80057c4 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x54>)
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	4798      	blx	r3
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd90      	pop	{r4, r7, pc}
 80057c0:	200002b8 	.word	0x200002b8
 80057c4:	200002d8 	.word	0x200002d8
 80057c8:	200002e0 	.word	0x200002e0

080057cc <_ZN5L6470I8shield_3E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 80057cc:	b590      	push	{r4, r7, lr}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af02      	add	r7, sp, #8
 80057d2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80057dc:	681c      	ldr	r4, [r3, #0]
 80057de:	2300      	movs	r3, #0
 80057e0:	9301      	str	r3, [sp, #4]
 80057e2:	2300      	movs	r3, #0
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	2300      	movs	r3, #0
 80057e8:	2210      	movs	r2, #16
 80057ea:	490c      	ldr	r1, [pc, #48]	@ (800581c <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x50>)
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a09      	ldr	r2, [pc, #36]	@ (8005820 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x54>)
 80057fc:	4907      	ldr	r1, [pc, #28]	@ (800581c <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x50>)
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a05      	ldr	r2, [pc, #20]	@ (8005824 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x58>)
 800580e:	4904      	ldr	r1, [pc, #16]	@ (8005820 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x54>)
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	4798      	blx	r3
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	bd90      	pop	{r4, r7, pc}
 800581c:	200002b8 	.word	0x200002b8
 8005820:	200002d8 	.word	0x200002d8
 8005824:	200002e0 	.word	0x200002e0

08005828 <_ZN5L6470I8shield_3E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 8005828:	b590      	push	{r4, r7, lr}
 800582a:	b085      	sub	sp, #20
 800582c:	af02      	add	r7, sp, #8
 800582e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005838:	681c      	ldr	r4, [r3, #0]
 800583a:	2300      	movs	r3, #0
 800583c:	9301      	str	r3, [sp, #4]
 800583e:	2300      	movs	r3, #0
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	2300      	movs	r3, #0
 8005844:	2211      	movs	r2, #17
 8005846:	490c      	ldr	r1, [pc, #48]	@ (8005878 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x50>)
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a09      	ldr	r2, [pc, #36]	@ (800587c <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x54>)
 8005858:	4907      	ldr	r1, [pc, #28]	@ (8005878 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x50>)
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a05      	ldr	r2, [pc, #20]	@ (8005880 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x58>)
 800586a:	4904      	ldr	r1, [pc, #16]	@ (800587c <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x54>)
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	4798      	blx	r3
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	bd90      	pop	{r4, r7, pc}
 8005878:	200002b8 	.word	0x200002b8
 800587c:	200002d8 	.word	0x200002d8
 8005880:	200002e0 	.word	0x200002e0

08005884 <_ZN5L6470I8shield_3E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 8005884:	b590      	push	{r4, r7, lr}
 8005886:	b087      	sub	sp, #28
 8005888:	af02      	add	r7, sp, #8
 800588a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005894:	681c      	ldr	r4, [r3, #0]
 8005896:	2300      	movs	r3, #0
 8005898:	9301      	str	r3, [sp, #4]
 800589a:	2300      	movs	r3, #0
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	2300      	movs	r3, #0
 80058a0:	2212      	movs	r2, #18
 80058a2:	4912      	ldr	r1, [pc, #72]	@ (80058ec <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x68>)
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a0f      	ldr	r2, [pc, #60]	@ (80058f0 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x6c>)
 80058b4:	490d      	ldr	r1, [pc, #52]	@ (80058ec <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x68>)
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a0b      	ldr	r2, [pc, #44]	@ (80058f4 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x70>)
 80058c6:	490a      	ldr	r1, [pc, #40]	@ (80058f0 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x6c>)
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2202      	movs	r2, #2
 80058d8:	4906      	ldr	r1, [pc, #24]	@ (80058f4 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x70>)
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	4798      	blx	r3
 80058de:	4603      	mov	r3, r0
 80058e0:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 80058e2:	89fb      	ldrh	r3, [r7, #14]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3714      	adds	r7, #20
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd90      	pop	{r4, r7, pc}
 80058ec:	200002b8 	.word	0x200002b8
 80058f0:	200002d8 	.word	0x200002d8
 80058f4:	200002e0 	.word	0x200002e0

080058f8 <_ZN5L6470I8shield_3E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 80058f8:	b590      	push	{r4, r7, lr}
 80058fa:	b087      	sub	sp, #28
 80058fc:	af02      	add	r7, sp, #8
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	460b      	mov	r3, r1
 8005902:	607a      	str	r2, [r7, #4]
 8005904:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800590e:	681c      	ldr	r4, [r3, #0]
 8005910:	7afa      	ldrb	r2, [r7, #11]
 8005912:	2300      	movs	r3, #0
 8005914:	9301      	str	r3, [sp, #4]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	9300      	str	r3, [sp, #0]
 800591a:	4613      	mov	r3, r2
 800591c:	2201      	movs	r2, #1
 800591e:	4903      	ldr	r1, [pc, #12]	@ (800592c <_ZN5L6470I8shield_3E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	47a0      	blx	r4
}
 8005924:	bf00      	nop
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	bd90      	pop	{r4, r7, pc}
 800592c:	200002b8 	.word	0x200002b8

08005930 <_ZN5L6470I8shield_3E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 8005930:	b590      	push	{r4, r7, lr}
 8005932:	b085      	sub	sp, #20
 8005934:	af02      	add	r7, sp, #8
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	460b      	mov	r3, r1
 800593a:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005944:	681c      	ldr	r4, [r3, #0]
 8005946:	78fb      	ldrb	r3, [r7, #3]
 8005948:	2200      	movs	r2, #0
 800594a:	9201      	str	r2, [sp, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	9200      	str	r2, [sp, #0]
 8005950:	2202      	movs	r2, #2
 8005952:	4903      	ldr	r1, [pc, #12]	@ (8005960 <_ZN5L6470I8shield_3E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	47a0      	blx	r4
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	bd90      	pop	{r4, r7, pc}
 8005960:	200002b8 	.word	0x200002b8

08005964 <_ZN5L6470I8shield_3E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8005964:	b590      	push	{r4, r7, lr}
 8005966:	b087      	sub	sp, #28
 8005968:	af02      	add	r7, sp, #8
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	460b      	mov	r3, r1
 800596e:	607a      	str	r2, [r7, #4]
 8005970:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800597a:	681c      	ldr	r4, [r3, #0]
 800597c:	7afa      	ldrb	r2, [r7, #11]
 800597e:	2300      	movs	r3, #0
 8005980:	9301      	str	r3, [sp, #4]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	4613      	mov	r3, r2
 8005988:	2203      	movs	r2, #3
 800598a:	4903      	ldr	r1, [pc, #12]	@ (8005998 <_ZN5L6470I8shield_3E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	47a0      	blx	r4
}
 8005990:	bf00      	nop
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	bd90      	pop	{r4, r7, pc}
 8005998:	200002b8 	.word	0x200002b8

0800599c <_ZN5L6470I8shield_3E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 800599c:	b590      	push	{r4, r7, lr}
 800599e:	b085      	sub	sp, #20
 80059a0:	af02      	add	r7, sp, #8
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	460b      	mov	r3, r1
 80059a6:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80059b0:	681c      	ldr	r4, [r3, #0]
 80059b2:	78fb      	ldrb	r3, [r7, #3]
 80059b4:	2200      	movs	r2, #0
 80059b6:	9201      	str	r2, [sp, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	9200      	str	r2, [sp, #0]
 80059bc:	2204      	movs	r2, #4
 80059be:	4903      	ldr	r1, [pc, #12]	@ (80059cc <_ZN5L6470I8shield_3E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	47a0      	blx	r4
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd90      	pop	{r4, r7, pc}
 80059cc:	200002b8 	.word	0x200002b8

080059d0 <_ZN5L6470I8shield_3E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 80059d0:	b590      	push	{r4, r7, lr}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af02      	add	r7, sp, #8
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	460b      	mov	r3, r1
 80059da:	607a      	str	r2, [r7, #4]
 80059dc:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80059e6:	681c      	ldr	r4, [r3, #0]
 80059e8:	7afa      	ldrb	r2, [r7, #11]
 80059ea:	2300      	movs	r3, #0
 80059ec:	9301      	str	r3, [sp, #4]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	4613      	mov	r3, r2
 80059f4:	2205      	movs	r2, #5
 80059f6:	4903      	ldr	r1, [pc, #12]	@ (8005a04 <_ZN5L6470I8shield_3E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	47a0      	blx	r4
}
 80059fc:	bf00      	nop
 80059fe:	3714      	adds	r7, #20
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd90      	pop	{r4, r7, pc}
 8005a04:	200002b8 	.word	0x200002b8

08005a08 <_ZN5L6470I8shield_3E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 8005a08:	b590      	push	{r4, r7, lr}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af02      	add	r7, sp, #8
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005a1a:	681c      	ldr	r4, [r3, #0]
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	9301      	str	r3, [sp, #4]
 8005a20:	2300      	movs	r3, #0
 8005a22:	9300      	str	r3, [sp, #0]
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	2206      	movs	r2, #6
 8005a28:	4903      	ldr	r1, [pc, #12]	@ (8005a38 <_ZN5L6470I8shield_3E17L6470_PrepareGoToEm+0x30>)
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	47a0      	blx	r4
}
 8005a2e:	bf00      	nop
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd90      	pop	{r4, r7, pc}
 8005a36:	bf00      	nop
 8005a38:	200002b8 	.word	0x200002b8

08005a3c <_ZN5L6470I8shield_3E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 8005a3c:	b590      	push	{r4, r7, lr}
 8005a3e:	b087      	sub	sp, #28
 8005a40:	af02      	add	r7, sp, #8
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	460b      	mov	r3, r1
 8005a46:	607a      	str	r2, [r7, #4]
 8005a48:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005a52:	681c      	ldr	r4, [r3, #0]
 8005a54:	7afa      	ldrb	r2, [r7, #11]
 8005a56:	2300      	movs	r3, #0
 8005a58:	9301      	str	r3, [sp, #4]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	2207      	movs	r2, #7
 8005a62:	4903      	ldr	r1, [pc, #12]	@ (8005a70 <_ZN5L6470I8shield_3E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	47a0      	blx	r4
}
 8005a68:	bf00      	nop
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd90      	pop	{r4, r7, pc}
 8005a70:	200002b8 	.word	0x200002b8

08005a74 <_ZN5L6470I8shield_3E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8005a74:	b590      	push	{r4, r7, lr}
 8005a76:	b087      	sub	sp, #28
 8005a78:	af02      	add	r7, sp, #8
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	607b      	str	r3, [r7, #4]
 8005a7e:	460b      	mov	r3, r1
 8005a80:	72fb      	strb	r3, [r7, #11]
 8005a82:	4613      	mov	r3, r2
 8005a84:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005a8e:	681c      	ldr	r4, [r3, #0]
 8005a90:	7af9      	ldrb	r1, [r7, #11]
 8005a92:	7abb      	ldrb	r3, [r7, #10]
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	9201      	str	r2, [sp, #4]
 8005a98:	9300      	str	r3, [sp, #0]
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	2208      	movs	r2, #8
 8005a9e:	4903      	ldr	r1, [pc, #12]	@ (8005aac <_ZN5L6470I8shield_3E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	47a0      	blx	r4
}
 8005aa4:	bf00      	nop
 8005aa6:	3714      	adds	r7, #20
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd90      	pop	{r4, r7, pc}
 8005aac:	200002b8 	.word	0x200002b8

08005ab0 <_ZN5L6470I8shield_3E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8005ab0:	b590      	push	{r4, r7, lr}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af02      	add	r7, sp, #8
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	460b      	mov	r3, r1
 8005aba:	70fb      	strb	r3, [r7, #3]
 8005abc:	4613      	mov	r3, r2
 8005abe:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005ac8:	681c      	ldr	r4, [r3, #0]
 8005aca:	78fa      	ldrb	r2, [r7, #3]
 8005acc:	78bb      	ldrb	r3, [r7, #2]
 8005ace:	2100      	movs	r1, #0
 8005ad0:	9101      	str	r1, [sp, #4]
 8005ad2:	9300      	str	r3, [sp, #0]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	2209      	movs	r2, #9
 8005ad8:	4903      	ldr	r1, [pc, #12]	@ (8005ae8 <_ZN5L6470I8shield_3E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	47a0      	blx	r4
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd90      	pop	{r4, r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	200002b8 	.word	0x200002b8

08005aec <_ZN5L6470I8shield_3E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 8005aec:	b590      	push	{r4, r7, lr}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af02      	add	r7, sp, #8
 8005af2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005afc:	681c      	ldr	r4, [r3, #0]
 8005afe:	2300      	movs	r3, #0
 8005b00:	9301      	str	r3, [sp, #4]
 8005b02:	2300      	movs	r3, #0
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	2300      	movs	r3, #0
 8005b08:	220a      	movs	r2, #10
 8005b0a:	4903      	ldr	r1, [pc, #12]	@ (8005b18 <_ZN5L6470I8shield_3E19L6470_PrepareGoHomeEv+0x2c>)
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	47a0      	blx	r4
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd90      	pop	{r4, r7, pc}
 8005b18:	200002b8 	.word	0x200002b8

08005b1c <_ZN5L6470I8shield_3E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 8005b1c:	b590      	push	{r4, r7, lr}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af02      	add	r7, sp, #8
 8005b22:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005b2c:	681c      	ldr	r4, [r3, #0]
 8005b2e:	2300      	movs	r3, #0
 8005b30:	9301      	str	r3, [sp, #4]
 8005b32:	2300      	movs	r3, #0
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	2300      	movs	r3, #0
 8005b38:	220b      	movs	r2, #11
 8005b3a:	4903      	ldr	r1, [pc, #12]	@ (8005b48 <_ZN5L6470I8shield_3E19L6470_PrepareGoMarkEv+0x2c>)
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	47a0      	blx	r4
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd90      	pop	{r4, r7, pc}
 8005b48:	200002b8 	.word	0x200002b8

08005b4c <_ZN5L6470I8shield_3E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 8005b4c:	b590      	push	{r4, r7, lr}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af02      	add	r7, sp, #8
 8005b52:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005b5c:	681c      	ldr	r4, [r3, #0]
 8005b5e:	2300      	movs	r3, #0
 8005b60:	9301      	str	r3, [sp, #4]
 8005b62:	2300      	movs	r3, #0
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	2300      	movs	r3, #0
 8005b68:	220c      	movs	r2, #12
 8005b6a:	4903      	ldr	r1, [pc, #12]	@ (8005b78 <_ZN5L6470I8shield_3E21L6470_PrepareResetPosEv+0x2c>)
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	47a0      	blx	r4
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd90      	pop	{r4, r7, pc}
 8005b78:	200002b8 	.word	0x200002b8

08005b7c <_ZN5L6470I8shield_3E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 8005b7c:	b590      	push	{r4, r7, lr}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af02      	add	r7, sp, #8
 8005b82:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005b8c:	681c      	ldr	r4, [r3, #0]
 8005b8e:	2300      	movs	r3, #0
 8005b90:	9301      	str	r3, [sp, #4]
 8005b92:	2300      	movs	r3, #0
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	2300      	movs	r3, #0
 8005b98:	220d      	movs	r2, #13
 8005b9a:	4903      	ldr	r1, [pc, #12]	@ (8005ba8 <_ZN5L6470I8shield_3E24L6470_PrepareResetDeviceEv+0x2c>)
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	47a0      	blx	r4
}
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd90      	pop	{r4, r7, pc}
 8005ba8:	200002b8 	.word	0x200002b8

08005bac <_ZN5L6470I8shield_3E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 8005bac:	b590      	push	{r4, r7, lr}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af02      	add	r7, sp, #8
 8005bb2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005bbc:	681c      	ldr	r4, [r3, #0]
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	9301      	str	r3, [sp, #4]
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	220e      	movs	r2, #14
 8005bca:	4903      	ldr	r1, [pc, #12]	@ (8005bd8 <_ZN5L6470I8shield_3E21L6470_PrepareSoftStopEv+0x2c>)
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	47a0      	blx	r4
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd90      	pop	{r4, r7, pc}
 8005bd8:	200002b8 	.word	0x200002b8

08005bdc <_ZN5L6470I8shield_3E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 8005bdc:	b590      	push	{r4, r7, lr}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af02      	add	r7, sp, #8
 8005be2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005bec:	681c      	ldr	r4, [r3, #0]
 8005bee:	2300      	movs	r3, #0
 8005bf0:	9301      	str	r3, [sp, #4]
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	220f      	movs	r2, #15
 8005bfa:	4903      	ldr	r1, [pc, #12]	@ (8005c08 <_ZN5L6470I8shield_3E21L6470_PrepareHardStopEv+0x2c>)
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	47a0      	blx	r4
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd90      	pop	{r4, r7, pc}
 8005c08:	200002b8 	.word	0x200002b8

08005c0c <_ZN5L6470I8shield_3E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 8005c0c:	b590      	push	{r4, r7, lr}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af02      	add	r7, sp, #8
 8005c12:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005c1c:	681c      	ldr	r4, [r3, #0]
 8005c1e:	2300      	movs	r3, #0
 8005c20:	9301      	str	r3, [sp, #4]
 8005c22:	2300      	movs	r3, #0
 8005c24:	9300      	str	r3, [sp, #0]
 8005c26:	2300      	movs	r3, #0
 8005c28:	2210      	movs	r2, #16
 8005c2a:	4903      	ldr	r1, [pc, #12]	@ (8005c38 <_ZN5L6470I8shield_3E20L6470_PrepareSoftHiZEv+0x2c>)
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	47a0      	blx	r4
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd90      	pop	{r4, r7, pc}
 8005c38:	200002b8 	.word	0x200002b8

08005c3c <_ZN5L6470I8shield_3E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 8005c3c:	b590      	push	{r4, r7, lr}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af02      	add	r7, sp, #8
 8005c42:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005c4c:	681c      	ldr	r4, [r3, #0]
 8005c4e:	2300      	movs	r3, #0
 8005c50:	9301      	str	r3, [sp, #4]
 8005c52:	2300      	movs	r3, #0
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	2300      	movs	r3, #0
 8005c58:	2211      	movs	r2, #17
 8005c5a:	4903      	ldr	r1, [pc, #12]	@ (8005c68 <_ZN5L6470I8shield_3E20L6470_PrepareHardHiZEv+0x2c>)
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	47a0      	blx	r4
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd90      	pop	{r4, r7, pc}
 8005c68:	200002b8 	.word	0x200002b8

08005c6c <_ZN5L6470I8shield_3E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 8005c6c:	b590      	push	{r4, r7, lr}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af02      	add	r7, sp, #8
 8005c72:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005c7c:	681c      	ldr	r4, [r3, #0]
 8005c7e:	2300      	movs	r3, #0
 8005c80:	9301      	str	r3, [sp, #4]
 8005c82:	2300      	movs	r3, #0
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	2300      	movs	r3, #0
 8005c88:	2212      	movs	r2, #18
 8005c8a:	4903      	ldr	r1, [pc, #12]	@ (8005c98 <_ZN5L6470I8shield_3E22L6470_PrepareGetStatusEv+0x2c>)
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	47a0      	blx	r4
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd90      	pop	{r4, r7, pc}
 8005c98:	200002b8 	.word	0x200002b8

08005c9c <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a09      	ldr	r2, [pc, #36]	@ (8005cd4 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 8005cb0:	4909      	ldr	r1, [pc, #36]	@ (8005cd8 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a06      	ldr	r2, [pc, #24]	@ (8005cdc <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 8005cc2:	4904      	ldr	r1, [pc, #16]	@ (8005cd4 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 8005cc8:	4b04      	ldr	r3, [pc, #16]	@ (8005cdc <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3708      	adds	r7, #8
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	200002d8 	.word	0x200002d8
 8005cd8:	200002b8 	.word	0x200002b8
 8005cdc:	200002e0 	.word	0x200002e0

08005ce0 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 8005ce0:	b590      	push	{r4, r7, lr}
 8005ce2:	b089      	sub	sp, #36	@ 0x24
 8005ce4:	af02      	add	r7, sp, #8
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 8005cec:	4b17      	ldr	r3, [pc, #92]	@ (8005d4c <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	75fb      	strb	r3, [r7, #23]
 8005cf6:	e020      	b.n	8005d3a <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005d00:	681c      	ldr	r4, [r3, #0]
 8005d02:	7dfb      	ldrb	r3, [r7, #23]
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	461a      	mov	r2, r3
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	1899      	adds	r1, r3, r2
 8005d0c:	7dfb      	ldrb	r3, [r7, #23]
 8005d0e:	005b      	lsls	r3, r3, #1
 8005d10:	461a      	mov	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	441a      	add	r2, r3
 8005d16:	230a      	movs	r3, #10
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 8005d20:	2300      	movs	r3, #0
 8005d22:	75bb      	strb	r3, [r7, #22]
 8005d24:	e003      	b.n	8005d2e <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x4e>
 8005d26:	bf00      	nop
 8005d28:	7dbb      	ldrb	r3, [r7, #22]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	75bb      	strb	r3, [r7, #22]
 8005d2e:	7dbb      	ldrb	r3, [r7, #22]
 8005d30:	2b7c      	cmp	r3, #124	@ 0x7c
 8005d32:	d9f8      	bls.n	8005d26 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8005d34:	7dfb      	ldrb	r3, [r7, #23]
 8005d36:	3301      	adds	r3, #1
 8005d38:	75fb      	strb	r3, [r7, #23]
 8005d3a:	7dfb      	ldrb	r3, [r7, #23]
 8005d3c:	2b03      	cmp	r3, #3
 8005d3e:	d9db      	bls.n	8005cf8 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 8005d40:	bf00      	nop
}
 8005d42:	bf00      	nop
 8005d44:	371c      	adds	r7, #28
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd90      	pop	{r4, r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	200002b5 	.word	0x200002b5

08005d50 <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 8005d50:	b480      	push	{r7}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8005d62:	2301      	movs	r3, #1
 8005d64:	74fb      	strb	r3, [r7, #19]
 8005d66:	e016      	b.n	8005d96 <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 8005d68:	7cfb      	ldrb	r3, [r7, #19]
 8005d6a:	005b      	lsls	r3, r3, #1
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	7f1b      	ldrb	r3, [r3, #28]
 8005d72:	4413      	add	r3, r2
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	4413      	add	r3, r2
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	79fa      	ldrb	r2, [r7, #7]
 8005d7e:	7cfb      	ldrb	r3, [r7, #19]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	fa01 f303 	lsl.w	r3, r1, r3
 8005d88:	461a      	mov	r2, r3
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8005d90:	7cfb      	ldrb	r3, [r7, #19]
 8005d92:	3301      	adds	r3, #1
 8005d94:	74fb      	strb	r3, [r7, #19]
 8005d96:	7cfb      	ldrb	r3, [r7, #19]
 8005d98:	2b03      	cmp	r3, #3
 8005d9a:	d9e5      	bls.n	8005d68 <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 8005d9c:	697b      	ldr	r3, [r7, #20]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	371c      	adds	r7, #28
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
	...

08005dac <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	460b      	mov	r3, r1
 8005db6:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 8005db8:	2300      	movs	r3, #0
 8005dba:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2118      	movs	r1, #24
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	4798      	blx	r3
 8005dcc:	4602      	mov	r2, r0
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dd2:	b292      	uxth	r2, r2
 8005dd4:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 8005dd6:	78fb      	ldrb	r3, [r7, #3]
 8005dd8:	2b0e      	cmp	r3, #14
 8005dda:	f200 8099 	bhi.w	8005f10 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
 8005dde:	a201      	add	r2, pc, #4	@ (adr r2, 8005de4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x38>)
 8005de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de4:	08005e21 	.word	0x08005e21
 8005de8:	08005e31 	.word	0x08005e31
 8005dec:	08005e41 	.word	0x08005e41
 8005df0:	08005e51 	.word	0x08005e51
 8005df4:	08005e61 	.word	0x08005e61
 8005df8:	08005e71 	.word	0x08005e71
 8005dfc:	08005e81 	.word	0x08005e81
 8005e00:	08005e91 	.word	0x08005e91
 8005e04:	08005ea1 	.word	0x08005ea1
 8005e08:	08005eb1 	.word	0x08005eb1
 8005e0c:	08005ec1 	.word	0x08005ec1
 8005e10:	08005ed1 	.word	0x08005ed1
 8005e14:	08005ee1 	.word	0x08005ee1
 8005e18:	08005ef1 	.word	0x08005ef1
 8005e1c:	08005f01 	.word	0x08005f01
      state = pL6470_StatusRegister->HiZ;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e2e:	e06f      	b.n	8005f10 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e3e:	e067      	b.n	8005f10 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e4e:	e05f      	b.n	8005f10 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e5e:	e057      	b.n	8005f10 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e6e:	e04f      	b.n	8005f10 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e7e:	e047      	b.n	8005f10 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e8e:	e03f      	b.n	8005f10 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e94:	785b      	ldrb	r3, [r3, #1]
 8005e96:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e9e:	e037      	b.n	8005f10 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ea4:	785b      	ldrb	r3, [r3, #1]
 8005ea6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	73fb      	strb	r3, [r7, #15]
      break;
 8005eae:	e02f      	b.n	8005f10 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eb4:	785b      	ldrb	r3, [r3, #1]
 8005eb6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	73fb      	strb	r3, [r7, #15]
      break;
 8005ebe:	e027      	b.n	8005f10 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ec4:	785b      	ldrb	r3, [r3, #1]
 8005ec6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	73fb      	strb	r3, [r7, #15]
      break;
 8005ece:	e01f      	b.n	8005f10 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ed4:	785b      	ldrb	r3, [r3, #1]
 8005ed6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	73fb      	strb	r3, [r7, #15]
      break;
 8005ede:	e017      	b.n	8005f10 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ee4:	785b      	ldrb	r3, [r3, #1]
 8005ee6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	73fb      	strb	r3, [r7, #15]
      break;
 8005eee:	e00f      	b.n	8005f10 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ef4:	785b      	ldrb	r3, [r3, #1]
 8005ef6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	73fb      	strb	r3, [r7, #15]
      break;
 8005efe:	e007      	b.n	8005f10 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f04:	785b      	ldrb	r3, [r3, #1]
 8005f06:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	73fb      	strb	r3, [r7, #15]
      break;
 8005f0e:	bf00      	nop
  return state;
 8005f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop

08005f1c <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	460b      	mov	r3, r1
 8005f26:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 8005f28:	78fb      	ldrb	r3, [r7, #3]
 8005f2a:	2b18      	cmp	r3, #24
 8005f2c:	d809      	bhi.n	8005f42 <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a19      	ldr	r1, [r3, #32]
 8005f32:	78fa      	ldrb	r2, [r7, #3]
 8005f34:	4613      	mov	r3, r2
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	4413      	add	r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	440b      	add	r3, r1
 8005f3e:	3301      	adds	r3, #1
 8005f40:	e000      	b.n	8005f44 <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	73fb      	strb	r3, [r7, #15]
 8005f5e:	e01a      	b.n	8005f96 <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
 8005f62:	011b      	lsls	r3, r3, #4
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	4413      	add	r3, r2
 8005f68:	2200      	movs	r2, #0
 8005f6a:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 8005f6c:	7bfb      	ldrb	r3, [r7, #15]
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	4413      	add	r3, r2
 8005f74:	2200      	movs	r2, #0
 8005f76:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
 8005f7a:	011b      	lsls	r3, r3, #4
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	4413      	add	r3, r2
 8005f80:	2200      	movs	r2, #0
 8005f82:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 8005f84:	7bfb      	ldrb	r3, [r7, #15]
 8005f86:	011b      	lsls	r3, r3, #4
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 8005f90:	7bfb      	ldrb	r3, [r7, #15]
 8005f92:	3301      	adds	r3, #1
 8005f94:	73fb      	strb	r3, [r7, #15]
 8005f96:	7bfb      	ldrb	r3, [r7, #15]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d9e1      	bls.n	8005f60 <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 8005f9c:	bf00      	nop
 8005f9e:	bf00      	nop
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <_ZN5L6470I8shield_3E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 8005faa:	b480      	push	{r7}
 8005fac:	b085      	sub	sp, #20
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	60f8      	str	r0, [r7, #12]
 8005fb2:	60b9      	str	r1, [r7, #8]
 8005fb4:	603b      	str	r3, [r7, #0]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	7f1b      	ldrb	r3, [r3, #28]
 8005fbe:	011b      	lsls	r3, r3, #4
 8005fc0:	68ba      	ldr	r2, [r7, #8]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	79fa      	ldrb	r2, [r7, #7]
 8005fc6:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	7f1b      	ldrb	r3, [r3, #28]
 8005fcc:	011b      	lsls	r3, r3, #4
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	7f1b      	ldrb	r3, [r3, #28]
 8005fda:	011b      	lsls	r3, r3, #4
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	4413      	add	r3, r2
 8005fe0:	69ba      	ldr	r2, [r7, #24]
 8005fe2:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	7f1b      	ldrb	r3, [r3, #28]
 8005fe8:	011b      	lsls	r3, r3, #4
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	4413      	add	r3, r2
 8005fee:	69fa      	ldr	r2, [r7, #28]
 8005ff0:	60da      	str	r2, [r3, #12]
}
 8005ff2:	bf00      	nop
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
	...

08006000 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 8006000:	b590      	push	{r4, r7, lr}
 8006002:	b087      	sub	sp, #28
 8006004:	af02      	add	r7, sp, #8
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	603b      	str	r3, [r7, #0]
 800600c:	4613      	mov	r3, r2
 800600e:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 8006010:	4b10      	ldr	r3, [pc, #64]	@ (8006054 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10a      	bne.n	800602e <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8006018:	4b0e      	ldr	r3, [pc, #56]	@ (8006054 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 800601a:	2201      	movs	r2, #1
 800601c:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68b9      	ldr	r1, [r7, #8]
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8006036:	681c      	ldr	r4, [r3, #0]
 8006038:	79fa      	ldrb	r2, [r7, #7]
 800603a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603c:	9301      	str	r3, [sp, #4]
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	68b9      	ldr	r1, [r7, #8]
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	47a0      	blx	r4
}
 800604a:	bf00      	nop
 800604c:	3714      	adds	r7, #20
 800604e:	46bd      	mov	sp, r7
 8006050:	bd90      	pop	{r4, r7, pc}
 8006052:	bf00      	nop
 8006054:	200002b5 	.word	0x200002b5

08006058 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 8006058:	b480      	push	{r7}
 800605a:	b087      	sub	sp, #28
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 8006064:	2300      	movs	r3, #0
 8006066:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8006068:	2300      	movs	r3, #0
 800606a:	75bb      	strb	r3, [r7, #22]
 800606c:	e013      	b.n	8006096 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800606e:	2300      	movs	r3, #0
 8006070:	75fb      	strb	r3, [r7, #23]
 8006072:	e00a      	b.n	800608a <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 8006074:	7d7b      	ldrb	r3, [r7, #21]
 8006076:	1c5a      	adds	r2, r3, #1
 8006078:	757a      	strb	r2, [r7, #21]
 800607a:	461a      	mov	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4413      	add	r3, r2
 8006080:	2200      	movs	r2, #0
 8006082:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8006084:	7dfb      	ldrb	r3, [r7, #23]
 8006086:	3301      	adds	r3, #1
 8006088:	75fb      	strb	r3, [r7, #23]
 800608a:	7dfb      	ldrb	r3, [r7, #23]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d9f1      	bls.n	8006074 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8006090:	7dbb      	ldrb	r3, [r7, #22]
 8006092:	3301      	adds	r3, #1
 8006094:	75bb      	strb	r3, [r7, #22]
 8006096:	7dbb      	ldrb	r3, [r7, #22]
 8006098:	2b03      	cmp	r3, #3
 800609a:	d9e8      	bls.n	800606e <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800609c:	2300      	movs	r3, #0
 800609e:	75fb      	strb	r3, [r7, #23]
 80060a0:	e1f1      	b.n	8006486 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80060a6:	7dfb      	ldrb	r3, [r7, #23]
 80060a8:	011b      	lsls	r3, r3, #4
 80060aa:	68b9      	ldr	r1, [r7, #8]
 80060ac:	440b      	add	r3, r1
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	4619      	mov	r1, r3
 80060b2:	460b      	mov	r3, r1
 80060b4:	00db      	lsls	r3, r3, #3
 80060b6:	1a5b      	subs	r3, r3, r1
 80060b8:	005b      	lsls	r3, r3, #1
 80060ba:	441a      	add	r2, r3
 80060bc:	7dfb      	ldrb	r3, [r7, #23]
 80060be:	6879      	ldr	r1, [r7, #4]
 80060c0:	440b      	add	r3, r1
 80060c2:	7b12      	ldrb	r2, [r2, #12]
 80060c4:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 80060c6:	7dfb      	ldrb	r3, [r7, #23]
 80060c8:	011b      	lsls	r3, r3, #4
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	4413      	add	r3, r2
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	2b12      	cmp	r3, #18
 80060d2:	f200 81d5 	bhi.w	8006480 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 80060d6:	a201      	add	r2, pc, #4	@ (adr r2, 80060dc <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 80060d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060dc:	08006481 	.word	0x08006481
 80060e0:	08006129 	.word	0x08006129
 80060e4:	080061b1 	.word	0x080061b1
 80060e8:	080061e1 	.word	0x080061e1
 80060ec:	08006249 	.word	0x08006249
 80060f0:	08006277 	.word	0x08006277
 80060f4:	080062df 	.word	0x080062df
 80060f8:	0800631b 	.word	0x0800631b
 80060fc:	08006383 	.word	0x08006383
 8006100:	0800641f 	.word	0x0800641f
 8006104:	08006481 	.word	0x08006481
 8006108:	08006481 	.word	0x08006481
 800610c:	08006481 	.word	0x08006481
 8006110:	08006481 	.word	0x08006481
 8006114:	08006481 	.word	0x08006481
 8006118:	08006481 	.word	0x08006481
 800611c:	08006481 	.word	0x08006481
 8006120:	08006481 	.word	0x08006481
 8006124:	08006481 	.word	0x08006481
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8006128:	7dfb      	ldrb	r3, [r7, #23]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	4413      	add	r3, r2
 800612e:	7819      	ldrb	r1, [r3, #0]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6a18      	ldr	r0, [r3, #32]
 8006134:	7dfb      	ldrb	r3, [r7, #23]
 8006136:	011b      	lsls	r3, r3, #4
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	4413      	add	r3, r2
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	4613      	mov	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4413      	add	r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4403      	add	r3, r0
 8006148:	781a      	ldrb	r2, [r3, #0]
 800614a:	7dfb      	ldrb	r3, [r7, #23]
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	4403      	add	r3, r0
 8006150:	430a      	orrs	r2, r1
 8006152:	b2d2      	uxtb	r2, r2
 8006154:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6a19      	ldr	r1, [r3, #32]
 800615a:	7dfb      	ldrb	r3, [r7, #23]
 800615c:	011b      	lsls	r3, r3, #4
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	4413      	add	r3, r2
 8006162:	685a      	ldr	r2, [r3, #4]
 8006164:	4613      	mov	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	4413      	add	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	440b      	add	r3, r1
 800616e:	7b9b      	ldrb	r3, [r3, #14]
 8006170:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8006172:	2301      	movs	r3, #1
 8006174:	75bb      	strb	r3, [r7, #22]
 8006176:	e016      	b.n	80061a6 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 8006178:	7dfb      	ldrb	r3, [r7, #23]
 800617a:	011b      	lsls	r3, r3, #4
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	4413      	add	r3, r2
 8006180:	689a      	ldr	r2, [r3, #8]
 8006182:	7d39      	ldrb	r1, [r7, #20]
 8006184:	7dbb      	ldrb	r3, [r7, #22]
 8006186:	1acb      	subs	r3, r1, r3
 8006188:	00db      	lsls	r3, r3, #3
 800618a:	fa22 f103 	lsr.w	r1, r2, r3
 800618e:	7dbb      	ldrb	r3, [r7, #22]
 8006190:	005a      	lsls	r2, r3, #1
 8006192:	7dfb      	ldrb	r3, [r7, #23]
 8006194:	4413      	add	r3, r2
 8006196:	461a      	mov	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4413      	add	r3, r2
 800619c:	b2ca      	uxtb	r2, r1
 800619e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 80061a0:	7dbb      	ldrb	r3, [r7, #22]
 80061a2:	3301      	adds	r3, #1
 80061a4:	75bb      	strb	r3, [r7, #22]
 80061a6:	7d3a      	ldrb	r2, [r7, #20]
 80061a8:	7dbb      	ldrb	r3, [r7, #22]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d2e4      	bcs.n	8006178 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 80061ae:	e167      	b.n	8006480 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 80061b0:	7dfb      	ldrb	r3, [r7, #23]
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	4413      	add	r3, r2
 80061b6:	7819      	ldrb	r1, [r3, #0]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6a18      	ldr	r0, [r3, #32]
 80061bc:	7dfb      	ldrb	r3, [r7, #23]
 80061be:	011b      	lsls	r3, r3, #4
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	4413      	add	r3, r2
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	4613      	mov	r3, r2
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4403      	add	r3, r0
 80061d0:	781a      	ldrb	r2, [r3, #0]
 80061d2:	7dfb      	ldrb	r3, [r7, #23]
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	4403      	add	r3, r0
 80061d8:	430a      	orrs	r2, r1
 80061da:	b2d2      	uxtb	r2, r2
 80061dc:	701a      	strb	r2, [r3, #0]
      break;
 80061de:	e14f      	b.n	8006480 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 80061e0:	7dfb      	ldrb	r3, [r7, #23]
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	4413      	add	r3, r2
 80061e6:	7819      	ldrb	r1, [r3, #0]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80061ec:	7dfb      	ldrb	r3, [r7, #23]
 80061ee:	011b      	lsls	r3, r3, #4
 80061f0:	68ba      	ldr	r2, [r7, #8]
 80061f2:	4413      	add	r3, r2
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	4613      	mov	r3, r2
 80061f8:	00db      	lsls	r3, r3, #3
 80061fa:	4413      	add	r3, r2
 80061fc:	4403      	add	r3, r0
 80061fe:	7a1a      	ldrb	r2, [r3, #8]
 8006200:	7dfb      	ldrb	r3, [r7, #23]
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	4403      	add	r3, r0
 8006206:	430a      	orrs	r2, r1
 8006208:	b2d2      	uxtb	r2, r2
 800620a:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800620c:	2301      	movs	r3, #1
 800620e:	75bb      	strb	r3, [r7, #22]
 8006210:	e016      	b.n	8006240 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8006212:	7dfb      	ldrb	r3, [r7, #23]
 8006214:	011b      	lsls	r3, r3, #4
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	4413      	add	r3, r2
 800621a:	689a      	ldr	r2, [r3, #8]
 800621c:	7dbb      	ldrb	r3, [r7, #22]
 800621e:	f1c3 0303 	rsb	r3, r3, #3
 8006222:	00db      	lsls	r3, r3, #3
 8006224:	fa22 f103 	lsr.w	r1, r2, r3
 8006228:	7dbb      	ldrb	r3, [r7, #22]
 800622a:	005a      	lsls	r2, r3, #1
 800622c:	7dfb      	ldrb	r3, [r7, #23]
 800622e:	4413      	add	r3, r2
 8006230:	461a      	mov	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4413      	add	r3, r2
 8006236:	b2ca      	uxtb	r2, r1
 8006238:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800623a:	7dbb      	ldrb	r3, [r7, #22]
 800623c:	3301      	adds	r3, #1
 800623e:	75bb      	strb	r3, [r7, #22]
 8006240:	7dbb      	ldrb	r3, [r7, #22]
 8006242:	2b03      	cmp	r3, #3
 8006244:	d9e5      	bls.n	8006212 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 8006246:	e11b      	b.n	8006480 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8006248:	7dfb      	ldrb	r3, [r7, #23]
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	4413      	add	r3, r2
 800624e:	7819      	ldrb	r1, [r3, #0]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8006254:	7dfb      	ldrb	r3, [r7, #23]
 8006256:	011b      	lsls	r3, r3, #4
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	4413      	add	r3, r2
 800625c:	685a      	ldr	r2, [r3, #4]
 800625e:	4613      	mov	r3, r2
 8006260:	00db      	lsls	r3, r3, #3
 8006262:	4413      	add	r3, r2
 8006264:	4403      	add	r3, r0
 8006266:	7a1a      	ldrb	r2, [r3, #8]
 8006268:	7dfb      	ldrb	r3, [r7, #23]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	4403      	add	r3, r0
 800626e:	430a      	orrs	r2, r1
 8006270:	b2d2      	uxtb	r2, r2
 8006272:	701a      	strb	r2, [r3, #0]
      break;
 8006274:	e104      	b.n	8006480 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8006276:	7dfb      	ldrb	r3, [r7, #23]
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	4413      	add	r3, r2
 800627c:	7819      	ldrb	r1, [r3, #0]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8006282:	7dfb      	ldrb	r3, [r7, #23]
 8006284:	011b      	lsls	r3, r3, #4
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	4413      	add	r3, r2
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	4613      	mov	r3, r2
 800628e:	00db      	lsls	r3, r3, #3
 8006290:	4413      	add	r3, r2
 8006292:	4403      	add	r3, r0
 8006294:	7a1a      	ldrb	r2, [r3, #8]
 8006296:	7dfb      	ldrb	r3, [r7, #23]
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	4403      	add	r3, r0
 800629c:	430a      	orrs	r2, r1
 800629e:	b2d2      	uxtb	r2, r2
 80062a0:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80062a2:	2301      	movs	r3, #1
 80062a4:	75bb      	strb	r3, [r7, #22]
 80062a6:	e016      	b.n	80062d6 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 80062a8:	7dfb      	ldrb	r3, [r7, #23]
 80062aa:	011b      	lsls	r3, r3, #4
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	4413      	add	r3, r2
 80062b0:	689a      	ldr	r2, [r3, #8]
 80062b2:	7dbb      	ldrb	r3, [r7, #22]
 80062b4:	f1c3 0303 	rsb	r3, r3, #3
 80062b8:	00db      	lsls	r3, r3, #3
 80062ba:	fa22 f103 	lsr.w	r1, r2, r3
 80062be:	7dbb      	ldrb	r3, [r7, #22]
 80062c0:	005a      	lsls	r2, r3, #1
 80062c2:	7dfb      	ldrb	r3, [r7, #23]
 80062c4:	4413      	add	r3, r2
 80062c6:	461a      	mov	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4413      	add	r3, r2
 80062cc:	b2ca      	uxtb	r2, r1
 80062ce:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80062d0:	7dbb      	ldrb	r3, [r7, #22]
 80062d2:	3301      	adds	r3, #1
 80062d4:	75bb      	strb	r3, [r7, #22]
 80062d6:	7dbb      	ldrb	r3, [r7, #22]
 80062d8:	2b03      	cmp	r3, #3
 80062da:	d9e5      	bls.n	80062a8 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 80062dc:	e0d0      	b.n	8006480 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80062de:	2301      	movs	r3, #1
 80062e0:	75bb      	strb	r3, [r7, #22]
 80062e2:	e016      	b.n	8006312 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 80062e4:	7dfb      	ldrb	r3, [r7, #23]
 80062e6:	011b      	lsls	r3, r3, #4
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	4413      	add	r3, r2
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	7dbb      	ldrb	r3, [r7, #22]
 80062f0:	f1c3 0303 	rsb	r3, r3, #3
 80062f4:	00db      	lsls	r3, r3, #3
 80062f6:	fa22 f103 	lsr.w	r1, r2, r3
 80062fa:	7dbb      	ldrb	r3, [r7, #22]
 80062fc:	005a      	lsls	r2, r3, #1
 80062fe:	7dfb      	ldrb	r3, [r7, #23]
 8006300:	4413      	add	r3, r2
 8006302:	461a      	mov	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4413      	add	r3, r2
 8006308:	b2ca      	uxtb	r2, r1
 800630a:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800630c:	7dbb      	ldrb	r3, [r7, #22]
 800630e:	3301      	adds	r3, #1
 8006310:	75bb      	strb	r3, [r7, #22]
 8006312:	7dbb      	ldrb	r3, [r7, #22]
 8006314:	2b03      	cmp	r3, #3
 8006316:	d9e5      	bls.n	80062e4 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 8006318:	e0b2      	b.n	8006480 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800631a:	7dfb      	ldrb	r3, [r7, #23]
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	4413      	add	r3, r2
 8006320:	7819      	ldrb	r1, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8006326:	7dfb      	ldrb	r3, [r7, #23]
 8006328:	011b      	lsls	r3, r3, #4
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	4413      	add	r3, r2
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	4613      	mov	r3, r2
 8006332:	00db      	lsls	r3, r3, #3
 8006334:	4413      	add	r3, r2
 8006336:	4403      	add	r3, r0
 8006338:	7a1a      	ldrb	r2, [r3, #8]
 800633a:	7dfb      	ldrb	r3, [r7, #23]
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	4403      	add	r3, r0
 8006340:	430a      	orrs	r2, r1
 8006342:	b2d2      	uxtb	r2, r2
 8006344:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8006346:	2301      	movs	r3, #1
 8006348:	75bb      	strb	r3, [r7, #22]
 800634a:	e016      	b.n	800637a <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800634c:	7dfb      	ldrb	r3, [r7, #23]
 800634e:	011b      	lsls	r3, r3, #4
 8006350:	68ba      	ldr	r2, [r7, #8]
 8006352:	4413      	add	r3, r2
 8006354:	689a      	ldr	r2, [r3, #8]
 8006356:	7dbb      	ldrb	r3, [r7, #22]
 8006358:	f1c3 0303 	rsb	r3, r3, #3
 800635c:	00db      	lsls	r3, r3, #3
 800635e:	fa22 f103 	lsr.w	r1, r2, r3
 8006362:	7dbb      	ldrb	r3, [r7, #22]
 8006364:	005a      	lsls	r2, r3, #1
 8006366:	7dfb      	ldrb	r3, [r7, #23]
 8006368:	4413      	add	r3, r2
 800636a:	461a      	mov	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4413      	add	r3, r2
 8006370:	b2ca      	uxtb	r2, r1
 8006372:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8006374:	7dbb      	ldrb	r3, [r7, #22]
 8006376:	3301      	adds	r3, #1
 8006378:	75bb      	strb	r3, [r7, #22]
 800637a:	7dbb      	ldrb	r3, [r7, #22]
 800637c:	2b03      	cmp	r3, #3
 800637e:	d9e5      	bls.n	800634c <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 8006380:	e07e      	b.n	8006480 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8006382:	7dfb      	ldrb	r3, [r7, #23]
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	4413      	add	r3, r2
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	b259      	sxtb	r1, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006390:	7dfb      	ldrb	r3, [r7, #23]
 8006392:	011b      	lsls	r3, r3, #4
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	4413      	add	r3, r2
 8006398:	685a      	ldr	r2, [r3, #4]
 800639a:	4613      	mov	r3, r2
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	4413      	add	r3, r2
 80063a0:	4403      	add	r3, r0
 80063a2:	791b      	ldrb	r3, [r3, #4]
 80063a4:	00db      	lsls	r3, r3, #3
 80063a6:	b25b      	sxtb	r3, r3
 80063a8:	430b      	orrs	r3, r1
 80063aa:	b259      	sxtb	r1, r3
 80063ac:	7dfb      	ldrb	r3, [r7, #23]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	4413      	add	r3, r2
 80063b2:	b2ca      	uxtb	r2, r1
 80063b4:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 80063b6:	7dfb      	ldrb	r3, [r7, #23]
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	4413      	add	r3, r2
 80063bc:	7819      	ldrb	r1, [r3, #0]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80063c2:	7dfb      	ldrb	r3, [r7, #23]
 80063c4:	011b      	lsls	r3, r3, #4
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	4413      	add	r3, r2
 80063ca:	689a      	ldr	r2, [r3, #8]
 80063cc:	4613      	mov	r3, r2
 80063ce:	00db      	lsls	r3, r3, #3
 80063d0:	4413      	add	r3, r2
 80063d2:	4403      	add	r3, r0
 80063d4:	7a1a      	ldrb	r2, [r3, #8]
 80063d6:	7dfb      	ldrb	r3, [r7, #23]
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	4403      	add	r3, r0
 80063dc:	430a      	orrs	r2, r1
 80063de:	b2d2      	uxtb	r2, r2
 80063e0:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80063e2:	2301      	movs	r3, #1
 80063e4:	75bb      	strb	r3, [r7, #22]
 80063e6:	e016      	b.n	8006416 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 80063e8:	7dfb      	ldrb	r3, [r7, #23]
 80063ea:	011b      	lsls	r3, r3, #4
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	4413      	add	r3, r2
 80063f0:	68da      	ldr	r2, [r3, #12]
 80063f2:	7dbb      	ldrb	r3, [r7, #22]
 80063f4:	f1c3 0303 	rsb	r3, r3, #3
 80063f8:	00db      	lsls	r3, r3, #3
 80063fa:	fa22 f103 	lsr.w	r1, r2, r3
 80063fe:	7dbb      	ldrb	r3, [r7, #22]
 8006400:	005a      	lsls	r2, r3, #1
 8006402:	7dfb      	ldrb	r3, [r7, #23]
 8006404:	4413      	add	r3, r2
 8006406:	461a      	mov	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4413      	add	r3, r2
 800640c:	b2ca      	uxtb	r2, r1
 800640e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8006410:	7dbb      	ldrb	r3, [r7, #22]
 8006412:	3301      	adds	r3, #1
 8006414:	75bb      	strb	r3, [r7, #22]
 8006416:	7dbb      	ldrb	r3, [r7, #22]
 8006418:	2b03      	cmp	r3, #3
 800641a:	d9e5      	bls.n	80063e8 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 800641c:	e030      	b.n	8006480 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 800641e:	7dfb      	ldrb	r3, [r7, #23]
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	4413      	add	r3, r2
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	b259      	sxtb	r1, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800642c:	7dfb      	ldrb	r3, [r7, #23]
 800642e:	011b      	lsls	r3, r3, #4
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	4413      	add	r3, r2
 8006434:	685a      	ldr	r2, [r3, #4]
 8006436:	4613      	mov	r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4413      	add	r3, r2
 800643c:	4403      	add	r3, r0
 800643e:	791b      	ldrb	r3, [r3, #4]
 8006440:	00db      	lsls	r3, r3, #3
 8006442:	b25b      	sxtb	r3, r3
 8006444:	430b      	orrs	r3, r1
 8006446:	b259      	sxtb	r1, r3
 8006448:	7dfb      	ldrb	r3, [r7, #23]
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	4413      	add	r3, r2
 800644e:	b2ca      	uxtb	r2, r1
 8006450:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8006452:	7dfb      	ldrb	r3, [r7, #23]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	4413      	add	r3, r2
 8006458:	7819      	ldrb	r1, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800645e:	7dfb      	ldrb	r3, [r7, #23]
 8006460:	011b      	lsls	r3, r3, #4
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	4413      	add	r3, r2
 8006466:	689a      	ldr	r2, [r3, #8]
 8006468:	4613      	mov	r3, r2
 800646a:	00db      	lsls	r3, r3, #3
 800646c:	4413      	add	r3, r2
 800646e:	4403      	add	r3, r0
 8006470:	7a1a      	ldrb	r2, [r3, #8]
 8006472:	7dfb      	ldrb	r3, [r7, #23]
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	4403      	add	r3, r0
 8006478:	430a      	orrs	r2, r1
 800647a:	b2d2      	uxtb	r2, r2
 800647c:	701a      	strb	r2, [r3, #0]
      break;
 800647e:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8006480:	7dfb      	ldrb	r3, [r7, #23]
 8006482:	3301      	adds	r3, #1
 8006484:	75fb      	strb	r3, [r7, #23]
 8006486:	7dfb      	ldrb	r3, [r7, #23]
 8006488:	2b01      	cmp	r3, #1
 800648a:	f67f ae0a 	bls.w	80060a2 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 800648e:	bf00      	nop
 8006490:	bf00      	nop
 8006492:	371c      	adds	r7, #28
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <_ZN5L6470I8shield_3E11L6470_roundEf>:
    /**
     * @brief  Rounding a floating point number to the nearest unsigned integer number.
     * @param  f The floating point number.
     * @retval The nearest unsigned integer number.
     */
    int L6470_round(float f)
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	ed87 0a00 	vstr	s0, [r7]
    {
        if (f >= 0) {
 80064a8:	edd7 7a00 	vldr	s15, [r7]
 80064ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80064b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064b4:	db1e      	blt.n	80064f4 <_ZN5L6470I8shield_3E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 80064b6:	edd7 7a00 	vldr	s15, [r7]
 80064ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064be:	ee17 2a90 	vmov	r2, s15
 80064c2:	edd7 7a00 	vldr	s15, [r7]
 80064c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064ce:	ed97 7a00 	vldr	s14, [r7]
 80064d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064d6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80064da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064e2:	bf4c      	ite	mi
 80064e4:	2301      	movmi	r3, #1
 80064e6:	2300      	movpl	r3, #0
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	f083 0301 	eor.w	r3, r3, #1
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	4413      	add	r3, r2
 80064f2:	e01a      	b.n	800652a <_ZN5L6470I8shield_3E11L6470_roundEf+0x8e>
        } else {
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 80064f4:	edd7 7a00 	vldr	s15, [r7]
 80064f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064fc:	ee17 2a90 	vmov	r2, s15
 8006500:	edd7 7a00 	vldr	s15, [r7]
 8006504:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800650c:	ed97 7a00 	vldr	s14, [r7]
 8006510:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006514:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8006518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800651c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006520:	d501      	bpl.n	8006526 <_ZN5L6470I8shield_3E11L6470_roundEf+0x8a>
 8006522:	2301      	movs	r3, #1
 8006524:	e000      	b.n	8006528 <_ZN5L6470I8shield_3E11L6470_roundEf+0x8c>
 8006526:	2300      	movs	r3, #0
 8006528:	1ad3      	subs	r3, r2, r3
        }
    }
 800652a:	4618      	mov	r0, r3
 800652c:	370c      	adds	r7, #12
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr

08006536 <_ZN5L6470I8shield_3E4ReadEPht>:
     * @brief      Utility function to read data from L6470.
     * @param[out] pBuffer pointer to the buffer to read data into.
     * @param[in]  NumBytesToRead number of bytes to read.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 8006536:	b580      	push	{r7, lr}
 8006538:	b086      	sub	sp, #24
 800653a:	af00      	add	r7, sp, #0
 800653c:	60f8      	str	r0, [r7, #12]
 800653e:	60b9      	str	r1, [r7, #8]
 8006540:	4613      	mov	r3, r2
 8006542:	80fb      	strh	r3, [r7, #6]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6918      	ldr	r0, [r3, #16]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	8a9b      	ldrh	r3, [r3, #20]
 800654c:	2200      	movs	r2, #0
 800654e:	4619      	mov	r1, r3
 8006550:	f007 fc76 	bl	800de40 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6998      	ldr	r0, [r3, #24]
 8006558:	88fa      	ldrh	r2, [r7, #6]
 800655a:	2364      	movs	r3, #100	@ 0x64
 800655c:	68b9      	ldr	r1, [r7, #8]
 800655e:	f008 fc86 	bl	800ee6e <HAL_SPI_Receive>
 8006562:	4603      	mov	r3, r0
 8006564:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6918      	ldr	r0, [r3, #16]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	8a9b      	ldrh	r3, [r3, #20]
 800656e:	2201      	movs	r2, #1
 8006570:	4619      	mov	r1, r3
 8006572:	f007 fc65 	bl	800de40 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8006576:	7dfb      	ldrb	r3, [r7, #23]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <_ZN5L6470I8shield_3E4ReadEPht+0x4a>
        {
        	return COMPONENT_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e000      	b.n	8006582 <_ZN5L6470I8shield_3E4ReadEPht+0x4c>
        }
        return COMPONENT_OK;
 8006580:	2300      	movs	r3, #0
    }
 8006582:	4618      	mov	r0, r3
 8006584:	3718      	adds	r7, #24
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <_ZN5L6470I8shield_3E5WriteEPht>:
     * @brief      Utility function to write data to L6470.
     * @param[in]  pBuffer pointer to the buffer of data to send.
     * @param[in]  NumBytesToWrite number of bytes to write.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 800658a:	b580      	push	{r7, lr}
 800658c:	b086      	sub	sp, #24
 800658e:	af00      	add	r7, sp, #0
 8006590:	60f8      	str	r0, [r7, #12]
 8006592:	60b9      	str	r1, [r7, #8]
 8006594:	4613      	mov	r3, r2
 8006596:	80fb      	strh	r3, [r7, #6]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6918      	ldr	r0, [r3, #16]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	8a9b      	ldrh	r3, [r3, #20]
 80065a0:	2200      	movs	r2, #0
 80065a2:	4619      	mov	r1, r3
 80065a4:	f007 fc4c 	bl	800de40 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6998      	ldr	r0, [r3, #24]
 80065ac:	88fa      	ldrh	r2, [r7, #6]
 80065ae:	2364      	movs	r3, #100	@ 0x64
 80065b0:	68b9      	ldr	r1, [r7, #8]
 80065b2:	f008 fb20 	bl	800ebf6 <HAL_SPI_Transmit>
 80065b6:	4603      	mov	r3, r0
 80065b8:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6918      	ldr	r0, [r3, #16]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	8a9b      	ldrh	r3, [r3, #20]
 80065c2:	2201      	movs	r2, #1
 80065c4:	4619      	mov	r1, r3
 80065c6:	f007 fc3b 	bl	800de40 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 80065ca:	7dfb      	ldrb	r3, [r7, #23]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d001      	beq.n	80065d4 <_ZN5L6470I8shield_3E5WriteEPht+0x4a>
        {
        	return COMPONENT_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e000      	b.n	80065d6 <_ZN5L6470I8shield_3E5WriteEPht+0x4c>
        }
        return COMPONENT_OK;
 80065d4:	2300      	movs	r3, #0
    }
 80065d6:	4618      	mov	r0, r3
 80065d8:	3718      	adds	r7, #24
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t>:
     * @param[out] pBufferToRead pointer to the buffer to read data into.
     * @param[in]  pBufferToWrite pointer to the buffer of data to send.
     * @param[in]  NumBytes number of bytes to read and write.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 80065de:	b580      	push	{r7, lr}
 80065e0:	b088      	sub	sp, #32
 80065e2:	af02      	add	r7, sp, #8
 80065e4:	60f8      	str	r0, [r7, #12]
 80065e6:	60b9      	str	r1, [r7, #8]
 80065e8:	607a      	str	r2, [r7, #4]
 80065ea:	807b      	strh	r3, [r7, #2]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6918      	ldr	r0, [r3, #16]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	8a9b      	ldrh	r3, [r3, #20]
 80065f4:	2200      	movs	r2, #0
 80065f6:	4619      	mov	r1, r3
 80065f8:	f007 fc22 	bl	800de40 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6998      	ldr	r0, [r3, #24]
 8006600:	887b      	ldrh	r3, [r7, #2]
 8006602:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006606:	9200      	str	r2, [sp, #0]
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	6879      	ldr	r1, [r7, #4]
 800660c:	f008 fd40 	bl	800f090 <HAL_SPI_TransmitReceive>
 8006610:	4603      	mov	r3, r0
 8006612:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 8006614:	7dfb      	ldrb	r3, [r7, #23]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d009      	beq.n	800662e <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t+0x50>
        {
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6918      	ldr	r0, [r3, #16]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	8a9b      	ldrh	r3, [r3, #20]
 8006622:	2201      	movs	r2, #1
 8006624:	4619      	mov	r1, r3
 8006626:	f007 fc0b 	bl	800de40 <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e008      	b.n	8006640 <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t+0x62>
        }
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6918      	ldr	r0, [r3, #16]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	8a9b      	ldrh	r3, [r3, #20]
 8006636:	2201      	movs	r2, #1
 8006638:	4619      	mov	r1, r3
 800663a:	f007 fc01 	bl	800de40 <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 800663e:	2300      	movs	r3, #0
    }
 8006640:	4618      	mov	r0, r3
 8006642:	3718      	adds	r7, #24
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <_ZN5L6470I8shield_3E23L6470_SPI_CommunicationEPhS2_tm>:


    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 8006648:	b590      	push	{r4, r7, lr}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
 8006654:	807b      	strh	r3, [r7, #2]
    {
        ReadWrite(pRxData, pTxData, Size);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800665e:	681c      	ldr	r4, [r3, #0]
 8006660:	887b      	ldrh	r3, [r7, #2]
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	6879      	ldr	r1, [r7, #4]
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	47a0      	blx	r4
    }
 800666a:	bf00      	nop
 800666c:	3714      	adds	r7, #20
 800666e:	46bd      	mov	sp, r7
 8006670:	bd90      	pop	{r4, r7, pc}

08006672 <_ZN5L6470I8shield_2E4initEPv>:
    virtual int init(void *init)
 8006672:	b580      	push	{r7, lr}
 8006674:	b082      	sub	sp, #8
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	6039      	str	r1, [r7, #0]
        return (int) L6470_Config((void *) init);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	6839      	ldr	r1, [r7, #0]
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	4798      	blx	r3
 800668c:	4603      	mov	r3, r0
    }
 800668e:	4618      	mov	r0, r3
 8006690:	3708      	adds	r7, #8
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <_ZN5L6470I8shield_2E10get_statusEv>:
    virtual unsigned int get_status(void)
 8006696:	b580      	push	{r7, lr}
 8006698:	b082      	sub	sp, #8
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
        return (unsigned int) L6470_GetStatus();
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	4798      	blx	r3
 80066ac:	4603      	mov	r3, r0
    }
 80066ae:	4618      	mov	r0, r3
 80066b0:	3708      	adds	r7, #8
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <_ZN5L6470I8shield_2E13get_parameterEj>:
    virtual unsigned int get_parameter(unsigned int parameter)
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b082      	sub	sp, #8
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
 80066be:	6039      	str	r1, [r7, #0]
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	b2d2      	uxtb	r2, r2
 80066ce:	4611      	mov	r1, r2
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	4798      	blx	r3
 80066d4:	4603      	mov	r3, r0
    }
 80066d6:	4618      	mov	r0, r3
 80066d8:	3708      	adds	r7, #8
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <_ZN5L6470I8shield_2E12get_positionEv>:
    virtual signed int get_position(void)
 80066de:	b590      	push	{r4, r7, lr}
 80066e0:	b083      	sub	sp, #12
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 80066ee:	681c      	ldr	r4, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2100      	movs	r1, #0
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	4798      	blx	r3
 8006700:	4603      	mov	r3, r0
 8006702:	4619      	mov	r1, r3
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	47a0      	blx	r4
 8006708:	4603      	mov	r3, r0
    }
 800670a:	4618      	mov	r0, r3
 800670c:	370c      	adds	r7, #12
 800670e:	46bd      	mov	sp, r7
 8006710:	bd90      	pop	{r4, r7, pc}

08006712 <_ZN5L6470I8shield_2E8get_markEv>:
    virtual signed int get_mark(void)
 8006712:	b590      	push	{r4, r7, lr}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8006722:	681c      	ldr	r4, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2102      	movs	r1, #2
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	4798      	blx	r3
 8006734:	4603      	mov	r3, r0
 8006736:	4619      	mov	r1, r3
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	47a0      	blx	r4
 800673c:	4603      	mov	r3, r0
    }
 800673e:	4618      	mov	r0, r3
 8006740:	370c      	adds	r7, #12
 8006742:	46bd      	mov	sp, r7
 8006744:	bd90      	pop	{r4, r7, pc}

08006746 <_ZN5L6470I8shield_2E9get_speedEv>:
    virtual unsigned int get_speed(void)
 8006746:	b5b0      	push	{r4, r5, r7, lr}
 8006748:	b082      	sub	sp, #8
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006756:	681c      	ldr	r4, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8006760:	681d      	ldr	r5, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2103      	movs	r1, #3
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	4798      	blx	r3
 8006772:	4603      	mov	r3, r0
 8006774:	4619      	mov	r1, r3
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	47a8      	blx	r5
 800677a:	eef0 7a40 	vmov.f32	s15, s0
 800677e:	eeb0 0a67 	vmov.f32	s0, s15
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	47a0      	blx	r4
 8006786:	4603      	mov	r3, r0
    }
 8006788:	4618      	mov	r0, r3
 800678a:	3708      	adds	r7, #8
 800678c:	46bd      	mov	sp, r7
 800678e:	bdb0      	pop	{r4, r5, r7, pc}

08006790 <_ZN5L6470I8shield_2E13get_max_speedEv>:
    virtual unsigned int get_max_speed(void)
 8006790:	b5b0      	push	{r4, r5, r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80067a0:	681c      	ldr	r4, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80067aa:	681d      	ldr	r5, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2106      	movs	r1, #6
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	4798      	blx	r3
 80067bc:	4603      	mov	r3, r0
 80067be:	b29b      	uxth	r3, r3
 80067c0:	4619      	mov	r1, r3
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	47a8      	blx	r5
 80067c6:	eef0 7a40 	vmov.f32	s15, s0
 80067ca:	eeb0 0a67 	vmov.f32	s0, s15
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	47a0      	blx	r4
 80067d2:	4603      	mov	r3, r0
    }
 80067d4:	4618      	mov	r0, r3
 80067d6:	3708      	adds	r7, #8
 80067d8:	46bd      	mov	sp, r7
 80067da:	bdb0      	pop	{r4, r5, r7, pc}

080067dc <_ZN5L6470I8shield_2E13get_min_speedEv>:
    virtual unsigned int get_min_speed(void)
 80067dc:	b5b0      	push	{r4, r5, r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80067ec:	681c      	ldr	r4, [r3, #0]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80067f6:	681d      	ldr	r5, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2107      	movs	r1, #7
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	4798      	blx	r3
 8006808:	4603      	mov	r3, r0
 800680a:	b29b      	uxth	r3, r3
 800680c:	4619      	mov	r1, r3
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	47a8      	blx	r5
 8006812:	eef0 7a40 	vmov.f32	s15, s0
 8006816:	eeb0 0a67 	vmov.f32	s0, s15
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	47a0      	blx	r4
 800681e:	4603      	mov	r3, r0
    }
 8006820:	4618      	mov	r0, r3
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bdb0      	pop	{r4, r5, r7, pc}

08006828 <_ZN5L6470I8shield_2E16get_accelerationEv>:
    virtual unsigned int get_acceleration(void)
 8006828:	b5b0      	push	{r4, r5, r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006838:	681c      	ldr	r4, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8006842:	681d      	ldr	r5, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2104      	movs	r1, #4
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	4798      	blx	r3
 8006854:	4603      	mov	r3, r0
 8006856:	b29b      	uxth	r3, r3
 8006858:	4619      	mov	r1, r3
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	47a8      	blx	r5
 800685e:	eef0 7a40 	vmov.f32	s15, s0
 8006862:	eeb0 0a67 	vmov.f32	s0, s15
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	47a0      	blx	r4
 800686a:	4603      	mov	r3, r0
    }
 800686c:	4618      	mov	r0, r3
 800686e:	3708      	adds	r7, #8
 8006870:	46bd      	mov	sp, r7
 8006872:	bdb0      	pop	{r4, r5, r7, pc}

08006874 <_ZN5L6470I8shield_2E16get_decelerationEv>:
    virtual unsigned int get_deceleration(void)
 8006874:	b5b0      	push	{r4, r5, r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006884:	681c      	ldr	r4, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800688e:	681d      	ldr	r5, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2105      	movs	r1, #5
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	4798      	blx	r3
 80068a0:	4603      	mov	r3, r0
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	4619      	mov	r1, r3
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	47a8      	blx	r5
 80068aa:	eef0 7a40 	vmov.f32	s15, s0
 80068ae:	eeb0 0a67 	vmov.f32	s0, s15
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	47a0      	blx	r4
 80068b6:	4603      	mov	r3, r0
    }
 80068b8:	4618      	mov	r0, r3
 80068ba:	3708      	adds	r7, #8
 80068bc:	46bd      	mov	sp, r7
 80068be:	bdb0      	pop	{r4, r5, r7, pc}

080068c0 <_ZN5L6470I8shield_2E13get_directionEv>:
    virtual StepperMotor::direction_t get_direction(void)
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2104      	movs	r1, #4
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	4798      	blx	r3
 80068d8:	4603      	mov	r3, r0
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d101      	bne.n	80068e2 <_ZN5L6470I8shield_2E13get_directionEv+0x22>
 80068de:	2301      	movs	r3, #1
 80068e0:	e000      	b.n	80068e4 <_ZN5L6470I8shield_2E13get_directionEv+0x24>
 80068e2:	2300      	movs	r3, #0
    }
 80068e4:	4618      	mov	r0, r3
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <_ZN5L6470I8shield_2E13set_parameterEjj>:
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	b2d1      	uxtb	r1, r2
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	4798      	blx	r3
    }
 800690c:	bf00      	nop
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <_ZN5L6470I8shield_2E8set_homeEv>:
    virtual void set_home(void)
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
        L6470_ResetPos();
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	4798      	blx	r3
    }
 800692a:	bf00      	nop
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <_ZN5L6470I8shield_2E8set_markEv>:
    virtual void set_mark(void)
 8006932:	b590      	push	{r4, r7, lr}
 8006934:	b083      	sub	sp, #12
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8006942:	681c      	ldr	r4, [r3, #0]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2100      	movs	r1, #0
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	4798      	blx	r3
 8006954:	4603      	mov	r3, r0
 8006956:	461a      	mov	r2, r3
 8006958:	2102      	movs	r1, #2
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	47a0      	blx	r4
    }
 800695e:	bf00      	nop
 8006960:	370c      	adds	r7, #12
 8006962:	46bd      	mov	sp, r7
 8006964:	bd90      	pop	{r4, r7, pc}

08006966 <_ZN5L6470I8shield_2E8set_markEi>:
    virtual void set_mark(signed int position)
 8006966:	b590      	push	{r4, r7, lr}
 8006968:	b083      	sub	sp, #12
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
 800696e:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8006978:	681c      	ldr	r4, [r3, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6839      	ldr	r1, [r7, #0]
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	4798      	blx	r3
 800698a:	4603      	mov	r3, r0
 800698c:	461a      	mov	r2, r3
 800698e:	2102      	movs	r1, #2
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	47a0      	blx	r4
    }
 8006994:	bf00      	nop
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	bd90      	pop	{r4, r7, pc}

0800699c <_ZN5L6470I8shield_2E13set_max_speedEj>:
    virtual bool set_max_speed(unsigned int speed)
 800699c:	b590      	push	{r4, r7, lr}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80069ae:	681c      	ldr	r4, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	ee07 2a90 	vmov	s15, r2
 80069c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069c4:	eeb0 0a67 	vmov.f32	s0, s15
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	4798      	blx	r3
 80069cc:	4603      	mov	r3, r0
 80069ce:	461a      	mov	r2, r3
 80069d0:	2106      	movs	r1, #6
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	47a0      	blx	r4
        return true;
 80069d6:	2301      	movs	r3, #1
    }
 80069d8:	4618      	mov	r0, r3
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd90      	pop	{r4, r7, pc}

080069e0 <_ZN5L6470I8shield_2E13set_min_speedEj>:
    virtual bool set_min_speed(unsigned int speed)
 80069e0:	b590      	push	{r4, r7, lr}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80069f2:	681c      	ldr	r4, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	683a      	ldr	r2, [r7, #0]
 8006a00:	ee07 2a90 	vmov	s15, r2
 8006a04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a08:	eeb0 0a67 	vmov.f32	s0, s15
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	4798      	blx	r3
 8006a10:	4603      	mov	r3, r0
 8006a12:	461a      	mov	r2, r3
 8006a14:	2107      	movs	r1, #7
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	47a0      	blx	r4
        return true;
 8006a1a:	2301      	movs	r3, #1
    }
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd90      	pop	{r4, r7, pc}

08006a24 <_ZN5L6470I8shield_2E16set_accelerationEj>:
    virtual bool set_acceleration(unsigned int acceleration)
 8006a24:	b590      	push	{r4, r7, lr}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8006a36:	681c      	ldr	r4, [r3, #0]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	683a      	ldr	r2, [r7, #0]
 8006a44:	ee07 2a90 	vmov	s15, r2
 8006a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	4798      	blx	r3
 8006a54:	4603      	mov	r3, r0
 8006a56:	461a      	mov	r2, r3
 8006a58:	2104      	movs	r1, #4
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	47a0      	blx	r4
        return true;
 8006a5e:	2301      	movs	r3, #1
    }
 8006a60:	4618      	mov	r0, r3
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd90      	pop	{r4, r7, pc}

08006a68 <_ZN5L6470I8shield_2E16set_decelerationEj>:
    virtual bool set_deceleration(unsigned int deceleration)
 8006a68:	b590      	push	{r4, r7, lr}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8006a7a:	681c      	ldr	r4, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	683a      	ldr	r2, [r7, #0]
 8006a88:	ee07 2a90 	vmov	s15, r2
 8006a8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a90:	eeb0 0a67 	vmov.f32	s0, s15
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	4798      	blx	r3
 8006a98:	4603      	mov	r3, r0
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	2105      	movs	r1, #5
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	47a0      	blx	r4
        return true;
 8006aa2:	2301      	movs	r3, #1
    }
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd90      	pop	{r4, r7, pc}

08006aac <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE>:
    virtual bool set_step_mode(step_mode_t step_mode)
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	70fb      	strb	r3, [r7, #3]
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 8006ab8:	78fb      	ldrb	r3, [r7, #3]
 8006aba:	2b07      	cmp	r3, #7
 8006abc:	d901      	bls.n	8006ac2 <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	e00f      	b.n	8006ae2 <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        soft_hiz();
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3380      	adds	r3, #128	@ 0x80
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	78fa      	ldrb	r2, [r7, #3]
 8006ada:	2115      	movs	r1, #21
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	4798      	blx	r3
        return true;
 8006ae0:	2301      	movs	r3, #1
    }
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3708      	adds	r7, #8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <_ZN5L6470I8shield_2E5go_toEi>:
    virtual void go_to(signed int position)
 8006aea:	b590      	push	{r4, r7, lr}
 8006aec:	b083      	sub	sp, #12
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	6039      	str	r1, [r7, #0]
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8006afc:	681c      	ldr	r4, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	6839      	ldr	r1, [r7, #0]
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	4798      	blx	r3
 8006b0e:	4603      	mov	r3, r0
 8006b10:	4619      	mov	r1, r3
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	47a0      	blx	r4
    }
 8006b16:	bf00      	nop
 8006b18:	370c      	adds	r7, #12
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd90      	pop	{r4, r7, pc}

08006b1e <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE>:
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 8006b1e:	b5b0      	push	{r4, r5, r7, lr}
 8006b20:	b084      	sub	sp, #16
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	60f8      	str	r0, [r7, #12]
 8006b26:	60b9      	str	r1, [r7, #8]
 8006b28:	4613      	mov	r3, r2
 8006b2a:	71fb      	strb	r3, [r7, #7]
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8006b34:	681c      	ldr	r4, [r3, #0]
 8006b36:	79fb      	ldrb	r3, [r7, #7]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d101      	bne.n	8006b40 <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE+0x22>
 8006b3c:	2501      	movs	r5, #1
 8006b3e:	e000      	b.n	8006b42 <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE+0x24>
 8006b40:	2500      	movs	r5, #0
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68b9      	ldr	r1, [r7, #8]
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	4798      	blx	r3
 8006b52:	4603      	mov	r3, r0
 8006b54:	461a      	mov	r2, r3
 8006b56:	4629      	mov	r1, r5
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	47a0      	blx	r4
    }
 8006b5c:	bf00      	nop
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bdb0      	pop	{r4, r5, r7, pc}

08006b64 <_ZN5L6470I8shield_2E7go_homeEv>:
    virtual void go_home(void)
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
        L6470_GoHome();
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	4798      	blx	r3
    }
 8006b7a:	bf00      	nop
 8006b7c:	3708      	adds	r7, #8
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <_ZN5L6470I8shield_2E7go_markEv>:
    virtual void go_mark(void)
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b082      	sub	sp, #8
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
        L6470_GoMark();
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	4798      	blx	r3
    }
 8006b98:	bf00      	nop
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 8006ba0:	b5b0      	push	{r4, r5, r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	607b      	str	r3, [r7, #4]
 8006baa:	460b      	mov	r3, r1
 8006bac:	72fb      	strb	r3, [r7, #11]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	72bb      	strb	r3, [r7, #10]
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006bba:	681c      	ldr	r4, [r3, #0]
 8006bbc:	7abb      	ldrb	r3, [r7, #10]
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d101      	bne.n	8006bc6 <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8006bc2:	2501      	movs	r5, #1
 8006bc4:	e000      	b.n	8006bc8 <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8006bc6:	2500      	movs	r5, #0
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	ee07 2a90 	vmov	s15, r2
 8006bd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bdc:	eeb0 0a67 	vmov.f32	s0, s15
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	4798      	blx	r3
 8006be4:	4603      	mov	r3, r0
 8006be6:	7af9      	ldrb	r1, [r7, #11]
 8006be8:	462a      	mov	r2, r5
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	47a0      	blx	r4
    }
 8006bee:	bf00      	nop
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bdb0      	pop	{r4, r5, r7, pc}

08006bf6 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE>:
    virtual void run(StepperMotor::direction_t direction)
 8006bf6:	b5b0      	push	{r4, r5, r7, lr}
 8006bf8:	b082      	sub	sp, #8
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
 8006bfe:	460b      	mov	r3, r1
 8006c00:	70fb      	strb	r3, [r7, #3]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8006c0a:	681c      	ldr	r4, [r3, #0]
 8006c0c:	78fb      	ldrb	r3, [r7, #3]
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d101      	bne.n	8006c16 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE+0x20>
 8006c12:	2501      	movs	r5, #1
 8006c14:	e000      	b.n	8006c18 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE+0x22>
 8006c16:	2500      	movs	r5, #0
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2106      	movs	r1, #6
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	4798      	blx	r3
 8006c28:	4603      	mov	r3, r0
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	4629      	mov	r1, r5
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	47a0      	blx	r4
    }
 8006c32:	bf00      	nop
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bdb0      	pop	{r4, r5, r7, pc}

08006c3a <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj>:
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 8006c3a:	b5b0      	push	{r4, r5, r7, lr}
 8006c3c:	b084      	sub	sp, #16
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	60f8      	str	r0, [r7, #12]
 8006c42:	460b      	mov	r3, r1
 8006c44:	607a      	str	r2, [r7, #4]
 8006c46:	72fb      	strb	r3, [r7, #11]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8006c50:	681c      	ldr	r4, [r3, #0]
 8006c52:	7afb      	ldrb	r3, [r7, #11]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d101      	bne.n	8006c5c <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj+0x22>
 8006c58:	2501      	movs	r5, #1
 8006c5a:	e000      	b.n	8006c5e <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj+0x24>
 8006c5c:	2500      	movs	r5, #0
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	ee07 2a90 	vmov	s15, r2
 8006c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c72:	eeb0 0a67 	vmov.f32	s0, s15
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	4798      	blx	r3
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	4629      	mov	r1, r5
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	47a0      	blx	r4
    }
 8006c84:	bf00      	nop
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bdb0      	pop	{r4, r5, r7, pc}

08006c8c <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj>:
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	460b      	mov	r3, r1
 8006c96:	607a      	str	r2, [r7, #4]
 8006c98:	72fb      	strb	r3, [r7, #11]
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	7afa      	ldrb	r2, [r7, #11]
 8006ca6:	2a01      	cmp	r2, #1
 8006ca8:	d101      	bne.n	8006cae <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj+0x22>
 8006caa:	2101      	movs	r1, #1
 8006cac:	e000      	b.n	8006cb0 <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj+0x24>
 8006cae:	2100      	movs	r1, #0
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	4798      	blx	r3
    }
 8006cb6:	bf00      	nop
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <_ZN5L6470I8shield_2E9soft_stopEv>:
    virtual void soft_stop(void)
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b082      	sub	sp, #8
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
        L6470_SoftStop();
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	4798      	blx	r3
    }
 8006cd4:	bf00      	nop
 8006cd6:	3708      	adds	r7, #8
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <_ZN5L6470I8shield_2E9hard_stopEv>:
    virtual void hard_stop(void)
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
        L6470_HardStop();
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	4798      	blx	r3
    }
 8006cf2:	bf00      	nop
 8006cf4:	3708      	adds	r7, #8
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <_ZN5L6470I8shield_2E8soft_hizEv>:
    virtual void soft_hiz(void)
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b082      	sub	sp, #8
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
        L6470_SoftHiZ();
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	4798      	blx	r3
    }
 8006d10:	bf00      	nop
 8006d12:	3708      	adds	r7, #8
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <_ZN5L6470I8shield_2E8hard_hizEv>:
    virtual void hard_hiz(void)
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
        L6470_HardHiZ();
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f503 73ee 	add.w	r3, r3, #476	@ 0x1dc
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	4798      	blx	r3
    }
 8006d2e:	bf00      	nop
 8006d30:	3708      	adds	r7, #8
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <_ZN5L6470I8shield_2E17wait_while_activeEv>:
    virtual void wait_while_active(void)
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b082      	sub	sp, #8
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 8006d3e:	bf00      	nop
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2101      	movs	r1, #1
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	4798      	blx	r3
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	bf0c      	ite	eq
 8006d56:	2301      	moveq	r3, #1
 8006d58:	2300      	movne	r3, #0
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1ef      	bne.n	8006d40 <_ZN5L6470I8shield_2E17wait_while_activeEv+0xa>
    }
 8006d60:	bf00      	nop
 8006d62:	bf00      	nop
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE>:
    virtual void step_clock(StepperMotor::direction_t direction)
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b082      	sub	sp, #8
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	460b      	mov	r3, r1
 8006d74:	70fb      	strb	r3, [r7, #3]
        soft_hiz();
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	3380      	adds	r3, #128	@ 0x80
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	78fa      	ldrb	r2, [r7, #3]
 8006d8e:	2a01      	cmp	r2, #1
 8006d90:	d101      	bne.n	8006d96 <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE+0x2c>
 8006d92:	2201      	movs	r2, #1
 8006d94:	e000      	b.n	8006d98 <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE+0x2e>
 8006d96:	2200      	movs	r2, #0
 8006d98:	4611      	mov	r1, r2
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	4798      	blx	r3
    }
 8006d9e:	bf00      	nop
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b082      	sub	sp, #8
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	460b      	mov	r3, r1
 8006db0:	70fb      	strb	r3, [r7, #3]
 8006db2:	4613      	mov	r3, r2
 8006db4:	70bb      	strb	r3, [r7, #2]
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	78ba      	ldrb	r2, [r7, #2]
 8006dc2:	2a01      	cmp	r2, #1
 8006dc4:	d101      	bne.n	8006dca <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	e000      	b.n	8006dcc <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8006dca:	2200      	movs	r2, #0
 8006dcc:	78f9      	ldrb	r1, [r7, #3]
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	4798      	blx	r3
    }
 8006dd2:	bf00      	nop
 8006dd4:	3708      	adds	r7, #8
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <_ZN5L6470I8shield_2E12reset_deviceEv>:
    virtual void reset_device(void)
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b082      	sub	sp, #8
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
        L6470_ResetDevice();
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	4798      	blx	r3
    }
 8006df0:	bf00      	nop
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <_ZN5L6470I8shield_2E18prepare_get_statusEv>:
    virtual void prepare_get_status(void)
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetStatus();
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006e16:	bf00      	nop
 8006e18:	3708      	adds	r7, #8
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <_ZN5L6470I8shield_2E21prepare_get_parameterEj>:
    virtual void prepare_get_parameter(unsigned int parameter)
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b082      	sub	sp, #8
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
 8006e26:	6039      	str	r1, [r7, #0]
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	b2d2      	uxtb	r2, r2
 8006e36:	4611      	mov	r1, r2
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006e44:	bf00      	nop
 8006e46:	3708      	adds	r7, #8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <_ZN5L6470I8shield_2E20prepare_get_positionEv>:
    virtual void prepare_get_position(void)
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2100      	movs	r1, #0
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006e6c:	bf00      	nop
 8006e6e:	3708      	adds	r7, #8
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <_ZN5L6470I8shield_2E16prepare_get_markEv>:
    virtual void prepare_get_mark(void)
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2102      	movs	r1, #2
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2202      	movs	r2, #2
 8006e90:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006e94:	bf00      	nop
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <_ZN5L6470I8shield_2E17prepare_get_speedEv>:
    virtual void prepare_get_speed(void)
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2103      	movs	r1, #3
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2203      	movs	r2, #3
 8006eb8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006ebc:	bf00      	nop
 8006ebe:	3708      	adds	r7, #8
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <_ZN5L6470I8shield_2E21prepare_get_max_speedEv>:
    virtual void prepare_get_max_speed(void)
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2106      	movs	r1, #6
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2204      	movs	r2, #4
 8006ee0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006ee4:	bf00      	nop
 8006ee6:	3708      	adds	r7, #8
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <_ZN5L6470I8shield_2E21prepare_get_min_speedEv>:
    virtual void prepare_get_min_speed(void)
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2107      	movs	r1, #7
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2205      	movs	r2, #5
 8006f08:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006f0c:	bf00      	nop
 8006f0e:	3708      	adds	r7, #8
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <_ZN5L6470I8shield_2E24prepare_get_accelerationEv>:
    virtual void prepare_get_acceleration(void)
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2104      	movs	r1, #4
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2206      	movs	r2, #6
 8006f30:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006f34:	bf00      	nop
 8006f36:	3708      	adds	r7, #8
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <_ZN5L6470I8shield_2E24prepare_get_decelerationEv>:
    virtual void prepare_get_deceleration(void)
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2105      	movs	r1, #5
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2207      	movs	r2, #7
 8006f58:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006f5c:	bf00      	nop
 8006f5e:	3708      	adds	r7, #8
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <_ZN5L6470I8shield_2E21prepare_get_directionEv>:
    virtual void prepare_get_direction(void)
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
        if (!L6470_DaisyChain_HalfPrepared) {
 8006f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8006f9c <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x38>)
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10a      	bne.n	8006f8a <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x26>
            L6470_DaisyChain_HalfPrepared = ONE_F;
 8006f74:	4b09      	ldr	r3, [pc, #36]	@ (8006f9c <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x38>)
 8006f76:	2201      	movs	r2, #1
 8006f78:	701a      	strb	r2, [r3, #0]
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4906      	ldr	r1, [pc, #24]	@ (8006fa0 <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x3c>)
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	4798      	blx	r3
        prepared_action = PREPARED_GET_DIRECTION;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2208      	movs	r2, #8
 8006f8e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006f92:	bf00      	nop
 8006f94:	3708      	adds	r7, #8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	20000281 	.word	0x20000281
 8006fa0:	20000284 	.word	0x20000284

08006fa4 <_ZN5L6470I8shield_2E21prepare_set_parameterEjj>:
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	b2d1      	uxtb	r1, r2
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006fcc:	bf00      	nop
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <_ZN5L6470I8shield_2E16prepare_set_homeEv>:
    virtual void prepare_set_home(void)
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetPos();
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006ff2:	bf00      	nop
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <_ZN5L6470I8shield_2E16prepare_set_markEv>:
    virtual void prepare_set_mark(void)
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2200      	movs	r2, #0
 800700e:	2102      	movs	r1, #2
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2209      	movs	r2, #9
 8007018:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800701c:	bf00      	nop
 800701e:	3708      	adds	r7, #8
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <_ZN5L6470I8shield_2E16prepare_set_markEi>:
    virtual void prepare_set_mark(signed int position)
 8007024:	b590      	push	{r4, r7, lr}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007036:	681c      	ldr	r4, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	4798      	blx	r3
 8007048:	4603      	mov	r3, r0
 800704a:	461a      	mov	r2, r3
 800704c:	2102      	movs	r1, #2
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800705a:	bf00      	nop
 800705c:	370c      	adds	r7, #12
 800705e:	46bd      	mov	sp, r7
 8007060:	bd90      	pop	{r4, r7, pc}

08007062 <_ZN5L6470I8shield_2E17prepare_set_speedEj>:
    virtual void prepare_set_speed(unsigned int speed)
 8007062:	b590      	push	{r4, r7, lr}
 8007064:	b083      	sub	sp, #12
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
 800706a:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007074:	681c      	ldr	r4, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	683a      	ldr	r2, [r7, #0]
 8007082:	ee07 2a90 	vmov	s15, r2
 8007086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800708a:	eeb0 0a67 	vmov.f32	s0, s15
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	4798      	blx	r3
 8007092:	4603      	mov	r3, r0
 8007094:	461a      	mov	r2, r3
 8007096:	2103      	movs	r1, #3
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd90      	pop	{r4, r7, pc}

080070ac <_ZN5L6470I8shield_2E21prepare_set_max_speedEj>:
    virtual void prepare_set_max_speed(unsigned int speed)
 80070ac:	b590      	push	{r4, r7, lr}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80070be:	681c      	ldr	r4, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	683a      	ldr	r2, [r7, #0]
 80070cc:	ee07 2a90 	vmov	s15, r2
 80070d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d4:	eeb0 0a67 	vmov.f32	s0, s15
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	4798      	blx	r3
 80070dc:	4603      	mov	r3, r0
 80070de:	461a      	mov	r2, r3
 80070e0:	2106      	movs	r1, #6
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80070ee:	bf00      	nop
 80070f0:	370c      	adds	r7, #12
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd90      	pop	{r4, r7, pc}

080070f6 <_ZN5L6470I8shield_2E21prepare_set_min_speedEj>:
    virtual void prepare_set_min_speed(unsigned int speed)
 80070f6:	b590      	push	{r4, r7, lr}
 80070f8:	b083      	sub	sp, #12
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
 80070fe:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007108:	681c      	ldr	r4, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	683a      	ldr	r2, [r7, #0]
 8007116:	ee07 2a90 	vmov	s15, r2
 800711a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800711e:	eeb0 0a67 	vmov.f32	s0, s15
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	4798      	blx	r3
 8007126:	4603      	mov	r3, r0
 8007128:	461a      	mov	r2, r3
 800712a:	2107      	movs	r1, #7
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8007138:	bf00      	nop
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	bd90      	pop	{r4, r7, pc}

08007140 <_ZN5L6470I8shield_2E24prepare_set_accelerationEj>:
    virtual void prepare_set_acceleration(unsigned int acceleration)
 8007140:	b590      	push	{r4, r7, lr}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007152:	681c      	ldr	r4, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	683a      	ldr	r2, [r7, #0]
 8007160:	ee07 2a90 	vmov	s15, r2
 8007164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007168:	eeb0 0a67 	vmov.f32	s0, s15
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	4798      	blx	r3
 8007170:	4603      	mov	r3, r0
 8007172:	461a      	mov	r2, r3
 8007174:	2104      	movs	r1, #4
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8007182:	bf00      	nop
 8007184:	370c      	adds	r7, #12
 8007186:	46bd      	mov	sp, r7
 8007188:	bd90      	pop	{r4, r7, pc}

0800718a <_ZN5L6470I8shield_2E24prepare_set_decelerationEj>:
    virtual void prepare_set_deceleration(unsigned int deceleration)
 800718a:	b590      	push	{r4, r7, lr}
 800718c:	b083      	sub	sp, #12
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800719c:	681c      	ldr	r4, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	683a      	ldr	r2, [r7, #0]
 80071aa:	ee07 2a90 	vmov	s15, r2
 80071ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b2:	eeb0 0a67 	vmov.f32	s0, s15
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	4798      	blx	r3
 80071ba:	4603      	mov	r3, r0
 80071bc:	461a      	mov	r2, r3
 80071be:	2105      	movs	r1, #5
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd90      	pop	{r4, r7, pc}

080071d4 <_ZN5L6470I8shield_2E13prepare_go_toEi>:
    virtual void prepare_go_to(signed int position)
 80071d4:	b590      	push	{r4, r7, lr}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80071e6:	681c      	ldr	r4, [r3, #0]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	6839      	ldr	r1, [r7, #0]
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	4798      	blx	r3
 80071f8:	4603      	mov	r3, r0
 80071fa:	4619      	mov	r1, r3
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	bd90      	pop	{r4, r7, pc}

08007210 <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE>:
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 8007210:	b5b0      	push	{r4, r5, r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	4613      	mov	r3, r2
 800721c:	71fb      	strb	r3, [r7, #7]
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8007226:	681c      	ldr	r4, [r3, #0]
 8007228:	79fb      	ldrb	r3, [r7, #7]
 800722a:	2b01      	cmp	r3, #1
 800722c:	d101      	bne.n	8007232 <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 800722e:	2501      	movs	r5, #1
 8007230:	e000      	b.n	8007234 <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 8007232:	2500      	movs	r5, #0
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68b9      	ldr	r1, [r7, #8]
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	4798      	blx	r3
 8007244:	4603      	mov	r3, r0
 8007246:	461a      	mov	r2, r3
 8007248:	4629      	mov	r1, r5
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8007256:	bf00      	nop
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bdb0      	pop	{r4, r5, r7, pc}

0800725e <_ZN5L6470I8shield_2E15prepare_go_homeEv>:
    virtual void prepare_go_home(void)
 800725e:	b580      	push	{r7, lr}
 8007260:	b082      	sub	sp, #8
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoHome();
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800727c:	bf00      	nop
 800727e:	3708      	adds	r7, #8
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <_ZN5L6470I8shield_2E15prepare_go_markEv>:
    virtual void prepare_go_mark(void)
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoMark();
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80072a2:	bf00      	nop
 80072a4:	3708      	adds	r7, #8
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 80072aa:	b5b0      	push	{r4, r5, r7, lr}
 80072ac:	b084      	sub	sp, #16
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	60f8      	str	r0, [r7, #12]
 80072b2:	607b      	str	r3, [r7, #4]
 80072b4:	460b      	mov	r3, r1
 80072b6:	72fb      	strb	r3, [r7, #11]
 80072b8:	4613      	mov	r3, r2
 80072ba:	72bb      	strb	r3, [r7, #10]
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80072c4:	681c      	ldr	r4, [r3, #0]
 80072c6:	7abb      	ldrb	r3, [r7, #10]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d101      	bne.n	80072d0 <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 80072cc:	2501      	movs	r5, #1
 80072ce:	e000      	b.n	80072d2 <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 80072d0:	2500      	movs	r5, #0
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	ee07 2a90 	vmov	s15, r2
 80072e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e6:	eeb0 0a67 	vmov.f32	s0, s15
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	4798      	blx	r3
 80072ee:	4603      	mov	r3, r0
 80072f0:	7af9      	ldrb	r1, [r7, #11]
 80072f2:	462a      	mov	r2, r5
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8007300:	bf00      	nop
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bdb0      	pop	{r4, r5, r7, pc}

08007308 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE>:
    virtual void prepare_run(StepperMotor::direction_t direction)
 8007308:	b5b0      	push	{r4, r5, r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	460b      	mov	r3, r1
 8007312:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800731c:	681c      	ldr	r4, [r3, #0]
 800731e:	78fb      	ldrb	r3, [r7, #3]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d101      	bne.n	8007328 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE+0x20>
 8007324:	2501      	movs	r5, #1
 8007326:	e000      	b.n	800732a <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE+0x22>
 8007328:	2500      	movs	r5, #0
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2106      	movs	r1, #6
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	4798      	blx	r3
 800733a:	4603      	mov	r3, r0
 800733c:	461a      	mov	r2, r3
 800733e:	4629      	mov	r1, r5
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800734c:	bf00      	nop
 800734e:	3708      	adds	r7, #8
 8007350:	46bd      	mov	sp, r7
 8007352:	bdb0      	pop	{r4, r5, r7, pc}

08007354 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj>:
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 8007354:	b5b0      	push	{r4, r5, r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	460b      	mov	r3, r1
 800735e:	607a      	str	r2, [r7, #4]
 8007360:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800736a:	681c      	ldr	r4, [r3, #0]
 800736c:	7afb      	ldrb	r3, [r7, #11]
 800736e:	2b01      	cmp	r3, #1
 8007370:	d101      	bne.n	8007376 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 8007372:	2501      	movs	r5, #1
 8007374:	e000      	b.n	8007378 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 8007376:	2500      	movs	r5, #0
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	ee07 2a90 	vmov	s15, r2
 8007388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800738c:	eeb0 0a67 	vmov.f32	s0, s15
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	4798      	blx	r3
 8007394:	4603      	mov	r3, r0
 8007396:	461a      	mov	r2, r3
 8007398:	4629      	mov	r1, r5
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80073a6:	bf00      	nop
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bdb0      	pop	{r4, r5, r7, pc}

080073ae <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj>:
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b084      	sub	sp, #16
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	60f8      	str	r0, [r7, #12]
 80073b6:	460b      	mov	r3, r1
 80073b8:	607a      	str	r2, [r7, #4]
 80073ba:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	7afa      	ldrb	r2, [r7, #11]
 80073c8:	2a01      	cmp	r2, #1
 80073ca:	d101      	bne.n	80073d0 <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 80073cc:	2101      	movs	r1, #1
 80073ce:	e000      	b.n	80073d2 <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 80073d0:	2100      	movs	r1, #0
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	68f8      	ldr	r0, [r7, #12]
 80073d6:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80073e0:	bf00      	nop
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <_ZN5L6470I8shield_2E17prepare_soft_stopEv>:
    virtual void prepare_soft_stop(void)
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftStop();
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8007406:	bf00      	nop
 8007408:	3708      	adds	r7, #8
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <_ZN5L6470I8shield_2E17prepare_hard_stopEv>:
    virtual void prepare_hard_stop(void)
 800740e:	b580      	push	{r7, lr}
 8007410:	b082      	sub	sp, #8
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardStop();
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800742c:	bf00      	nop
 800742e:	3708      	adds	r7, #8
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <_ZN5L6470I8shield_2E16prepare_soft_hizEv>:
    virtual void prepare_soft_hiz(void)
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftHiZ();
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8007452:	bf00      	nop
 8007454:	3708      	adds	r7, #8
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <_ZN5L6470I8shield_2E16prepare_hard_hizEv>:
    virtual void prepare_hard_hiz(void)
 800745a:	b580      	push	{r7, lr}
 800745c:	b082      	sub	sp, #8
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardHiZ();
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8007478:	bf00      	nop
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE>:
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	460b      	mov	r3, r1
 800748a:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	78fa      	ldrb	r2, [r7, #3]
 8007498:	2a01      	cmp	r2, #1
 800749a:	d101      	bne.n	80074a0 <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 800749c:	2201      	movs	r2, #1
 800749e:	e000      	b.n	80074a2 <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 80074a0:	2200      	movs	r2, #0
 80074a2:	4611      	mov	r1, r2
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80074b0:	bf00      	nop
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	460b      	mov	r3, r1
 80074c2:	70fb      	strb	r3, [r7, #3]
 80074c4:	4613      	mov	r3, r2
 80074c6:	70bb      	strb	r3, [r7, #2]
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	78ba      	ldrb	r2, [r7, #2]
 80074d4:	2a01      	cmp	r2, #1
 80074d6:	d101      	bne.n	80074dc <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 80074d8:	2201      	movs	r2, #1
 80074da:	e000      	b.n	80074de <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 80074dc:	2200      	movs	r2, #0
 80074de:	78f9      	ldrb	r1, [r7, #3]
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80074ec:	bf00      	nop
 80074ee:	3708      	adds	r7, #8
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <_ZN5L6470I8shield_2E20prepare_reset_deviceEv>:
    virtual void prepare_reset_device(void)
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetDevice();
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8007512:	bf00      	nop
 8007514:	3708      	adds	r7, #8
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <_ZN5L6470I8shield_2E24perform_prepared_actionsEv>:
    uint8_t* perform_prepared_actions(void)
 800751a:	b580      	push	{r7, lr}
 800751c:	b082      	sub	sp, #8
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
        return L6470_PerformPreparedApplicationCommand();
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	4798      	blx	r3
 8007530:	4603      	mov	r3, r0
    }
 8007532:	4618      	mov	r0, r3
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <_ZN5L6470I8shield_2E19get_prepared_actionEv>:
    prepared_action_t get_prepared_action(void)
 800753a:	b480      	push	{r7}
 800753c:	b083      	sub	sp, #12
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
        return prepared_action;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    }
 8007548:	4618      	mov	r0, r3
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <_ZN5L6470I8shield_2E10get_resultEPh>:
    int32_t get_result(uint8_t *raw_data)
 8007554:	b5b0      	push	{r4, r5, r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
        switch (prepared_action) {
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8007564:	3b01      	subs	r3, #1
 8007566:	2b07      	cmp	r3, #7
 8007568:	f200 80fe 	bhi.w	8007768 <_ZN5L6470I8shield_2E10get_resultEPh+0x214>
 800756c:	a201      	add	r2, pc, #4	@ (adr r2, 8007574 <_ZN5L6470I8shield_2E10get_resultEPh+0x20>)
 800756e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007572:	bf00      	nop
 8007574:	08007595 	.word	0x08007595
 8007578:	080075c1 	.word	0x080075c1
 800757c:	080075ef 	.word	0x080075ef
 8007580:	08007633 	.word	0x08007633
 8007584:	08007679 	.word	0x08007679
 8007588:	080076bf 	.word	0x080076bf
 800758c:	08007705 	.word	0x08007705
 8007590:	0800774b 	.word	0x0800774b
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800759c:	681c      	ldr	r4, [r3, #0]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	6a12      	ldr	r2, [r2, #32]
 80075ac:	7b92      	ldrb	r2, [r2, #14]
 80075ae:	6839      	ldr	r1, [r7, #0]
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	4798      	blx	r3
 80075b4:	4603      	mov	r3, r0
 80075b6:	4619      	mov	r1, r3
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	47a0      	blx	r4
 80075bc:	4603      	mov	r3, r0
 80075be:	e0d4      	b.n	800776a <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 80075c8:	681c      	ldr	r4, [r3, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	6a12      	ldr	r2, [r2, #32]
 80075d8:	3228      	adds	r2, #40	@ 0x28
 80075da:	7b92      	ldrb	r2, [r2, #14]
 80075dc:	6839      	ldr	r1, [r7, #0]
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	4798      	blx	r3
 80075e2:	4603      	mov	r3, r0
 80075e4:	4619      	mov	r1, r3
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	47a0      	blx	r4
 80075ea:	4603      	mov	r3, r0
 80075ec:	e0bd      	b.n	800776a <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80075f6:	681c      	ldr	r4, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8007600:	681d      	ldr	r5, [r3, #0]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	6a12      	ldr	r2, [r2, #32]
 8007610:	323c      	adds	r2, #60	@ 0x3c
 8007612:	7b92      	ldrb	r2, [r2, #14]
 8007614:	6839      	ldr	r1, [r7, #0]
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	4798      	blx	r3
 800761a:	4603      	mov	r3, r0
 800761c:	4619      	mov	r1, r3
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	47a8      	blx	r5
 8007622:	eef0 7a40 	vmov.f32	s15, s0
 8007626:	eeb0 0a67 	vmov.f32	s0, s15
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	47a0      	blx	r4
 800762e:	4603      	mov	r3, r0
 8007630:	e09b      	b.n	800776a <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800763a:	681c      	ldr	r4, [r3, #0]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007644:	681d      	ldr	r5, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	6a12      	ldr	r2, [r2, #32]
 8007654:	3278      	adds	r2, #120	@ 0x78
 8007656:	7b92      	ldrb	r2, [r2, #14]
 8007658:	6839      	ldr	r1, [r7, #0]
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	4798      	blx	r3
 800765e:	4603      	mov	r3, r0
 8007660:	b29b      	uxth	r3, r3
 8007662:	4619      	mov	r1, r3
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	47a8      	blx	r5
 8007668:	eef0 7a40 	vmov.f32	s15, s0
 800766c:	eeb0 0a67 	vmov.f32	s0, s15
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	47a0      	blx	r4
 8007674:	4603      	mov	r3, r0
 8007676:	e078      	b.n	800776a <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007680:	681c      	ldr	r4, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800768a:	681d      	ldr	r5, [r3, #0]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	6a12      	ldr	r2, [r2, #32]
 800769a:	328c      	adds	r2, #140	@ 0x8c
 800769c:	7b92      	ldrb	r2, [r2, #14]
 800769e:	6839      	ldr	r1, [r7, #0]
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	4798      	blx	r3
 80076a4:	4603      	mov	r3, r0
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	4619      	mov	r1, r3
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	47a8      	blx	r5
 80076ae:	eef0 7a40 	vmov.f32	s15, s0
 80076b2:	eeb0 0a67 	vmov.f32	s0, s15
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	47a0      	blx	r4
 80076ba:	4603      	mov	r3, r0
 80076bc:	e055      	b.n	800776a <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80076c6:	681c      	ldr	r4, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80076d0:	681d      	ldr	r5, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	6a12      	ldr	r2, [r2, #32]
 80076e0:	3250      	adds	r2, #80	@ 0x50
 80076e2:	7b92      	ldrb	r2, [r2, #14]
 80076e4:	6839      	ldr	r1, [r7, #0]
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	4798      	blx	r3
 80076ea:	4603      	mov	r3, r0
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	4619      	mov	r1, r3
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	47a8      	blx	r5
 80076f4:	eef0 7a40 	vmov.f32	s15, s0
 80076f8:	eeb0 0a67 	vmov.f32	s0, s15
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	47a0      	blx	r4
 8007700:	4603      	mov	r3, r0
 8007702:	e032      	b.n	800776a <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800770c:	681c      	ldr	r4, [r3, #0]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8007716:	681d      	ldr	r5, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	6a12      	ldr	r2, [r2, #32]
 8007726:	3264      	adds	r2, #100	@ 0x64
 8007728:	7b92      	ldrb	r2, [r2, #14]
 800772a:	6839      	ldr	r1, [r7, #0]
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	4798      	blx	r3
 8007730:	4603      	mov	r3, r0
 8007732:	b29b      	uxth	r3, r3
 8007734:	4619      	mov	r1, r3
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	47a8      	blx	r5
 800773a:	eef0 7a40 	vmov.f32	s15, s0
 800773e:	eeb0 0a67 	vmov.f32	s0, s15
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	47a0      	blx	r4
 8007746:	4603      	mov	r3, r0
 8007748:	e00f      	b.n	800776a <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2104      	movs	r1, #4
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	4798      	blx	r3
 800775a:	4603      	mov	r3, r0
 800775c:	2b01      	cmp	r3, #1
 800775e:	d101      	bne.n	8007764 <_ZN5L6470I8shield_2E10get_resultEPh+0x210>
 8007760:	2301      	movs	r3, #1
 8007762:	e002      	b.n	800776a <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
 8007764:	2300      	movs	r3, #0
 8007766:	e000      	b.n	800776a <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return 0;
 8007768:	2300      	movs	r3, #0
    }
 800776a:	4618      	mov	r0, r3
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bdb0      	pop	{r4, r5, r7, pc}
 8007772:	bf00      	nop

08007774 <_ZN5L6470I8shield_2E13L6470_DISABLEEv>:
    void L6470_DISABLE(void)
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6898      	ldr	r0, [r3, #8]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	899b      	ldrh	r3, [r3, #12]
 8007784:	2200      	movs	r2, #0
 8007786:	4619      	mov	r1, r3
 8007788:	f006 fb5a 	bl	800de40 <HAL_GPIO_WritePin>
    }
 800778c:	bf00      	nop
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm>:
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  if (AbsPos > L6470_MAX_POSITION)
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80077a4:	d303      	bcc.n	80077ae <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	f5a3 0380 	sub.w	r3, r3, #4194304	@ 0x400000
 80077ac:	e000      	b.n	80077b0 <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm+0x1c>
    return AbsPos;
 80077ae:	683b      	ldr	r3, [r7, #0]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl>:
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	db05      	blt.n	80077d8 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x1c>
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80077d2:	da01      	bge.n	80077d8 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	e00c      	b.n	80077f2 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x36>
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	f513 1f00 	cmn.w	r3, #2097152	@ 0x200000
 80077de:	db06      	blt.n	80077ee <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x32>
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	da03      	bge.n	80077ee <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	f503 0380 	add.w	r3, r3, #4194304	@ 0x400000
 80077ec:	e001      	b.n	80077f2 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x36>
      return (L6470_POSITION_RANGE + 1);        // OVF
 80077ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	370c      	adds	r7, #12
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
	...

08007800 <_ZN5L6470I8shield_2E20L6470_Speed_2_Step_sEm>:
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  return (Speed * ((float)14.9012e-3));
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	ee07 3a90 	vmov	s15, r3
 8007810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007814:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800782c <_ZN5L6470I8shield_2E20L6470_Speed_2_Step_sEm+0x2c>
 8007818:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800781c:	eeb0 0a67 	vmov.f32	s0, s15
 8007820:	370c      	adds	r7, #12
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	3c74242a 	.word	0x3c74242a

08007830 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf>:
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 800783c:	edd7 7a00 	vldr	s15, [r7]
 8007840:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8007874 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x44>
 8007844:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800784c:	d80a      	bhi.n	8007864 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 800784e:	ed97 7a00 	vldr	s14, [r7]
 8007852:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007878 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x48>
 8007856:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800785a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800785e:	ee17 3a90 	vmov	r3, s15
 8007862:	e000      	b.n	8007866 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x36>
    return 0;   // Warning
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	370c      	adds	r7, #12
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	4674241b 	.word	0x4674241b
 8007878:	3c74242a 	.word	0x3c74242a

0800787c <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et>:
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	460b      	mov	r3, r1
 8007886:	807b      	strh	r3, [r7, #2]
  if (Acc <= L6470_MAX_ACC)
 8007888:	887b      	ldrh	r3, [r7, #2]
 800788a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800788e:	d209      	bcs.n	80078a4 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 8007890:	887b      	ldrh	r3, [r7, #2]
 8007892:	ee07 3a90 	vmov	s15, r3
 8007896:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800789a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80078b8 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x3c>
 800789e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80078a2:	e001      	b.n	80078a8 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x2c>
    return 0;   // Warning
 80078a4:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80078bc <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x40>
}
 80078a8:	eeb0 0a67 	vmov.f32	s0, s15
 80078ac:	370c      	adds	r7, #12
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	4168d4fe 	.word	0x4168d4fe
 80078bc:	00000000 	.word	0x00000000

080078c0 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 80078cc:	edd7 7a00 	vldr	s15, [r7]
 80078d0:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8007904 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x44>
 80078d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078dc:	d80b      	bhi.n	80078f6 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 80078de:	ed97 7a00 	vldr	s14, [r7]
 80078e2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007908 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x48>
 80078e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80078ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078ee:	ee17 3a90 	vmov	r3, s15
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	e000      	b.n	80078f8 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x38>
    return 0;   // Warning
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr
 8007904:	4768c671 	.word	0x4768c671
 8007908:	4168d4fe 	.word	0x4168d4fe

0800790c <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et>:
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	460b      	mov	r3, r1
 8007916:	807b      	strh	r3, [r7, #2]
  if (Dec <= L6470_MAX_DEC)
 8007918:	887b      	ldrh	r3, [r7, #2]
 800791a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800791e:	d209      	bcs.n	8007934 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 8007920:	887b      	ldrh	r3, [r7, #2]
 8007922:	ee07 3a90 	vmov	s15, r3
 8007926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800792a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8007948 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x3c>
 800792e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007932:	e001      	b.n	8007938 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x2c>
    return 0;   // Warning
 8007934:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800794c <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x40>
}
 8007938:	eeb0 0a67 	vmov.f32	s0, s15
 800793c:	370c      	adds	r7, #12
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	4168d4fe 	.word	0x4168d4fe
 800794c:	00000000 	.word	0x00000000

08007950 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 800795c:	edd7 7a00 	vldr	s15, [r7]
 8007960:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8007994 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x44>
 8007964:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800796c:	d80b      	bhi.n	8007986 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 800796e:	ed97 7a00 	vldr	s14, [r7]
 8007972:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007998 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x48>
 8007976:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800797a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800797e:	ee17 3a90 	vmov	r3, s15
 8007982:	b29b      	uxth	r3, r3
 8007984:	e000      	b.n	8007988 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x38>
    return 0;   // Warning
 8007986:	2300      	movs	r3, #0
}
 8007988:	4618      	mov	r0, r3
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr
 8007994:	4768c671 	.word	0x4768c671
 8007998:	4168d4fe 	.word	0x4168d4fe

0800799c <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	460b      	mov	r3, r1
 80079a6:	807b      	strh	r3, [r7, #2]
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 80079a8:	887b      	ldrh	r3, [r7, #2]
 80079aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079ae:	d209      	bcs.n	80079c4 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 80079b0:	887b      	ldrh	r3, [r7, #2]
 80079b2:	ee07 3a90 	vmov	s15, r3
 80079b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80079ba:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80079d8 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 80079be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80079c2:	e001      	b.n	80079c8 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 80079c4:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80079dc <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 80079c8:	eeb0 0a67 	vmov.f32	s0, s15
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop
 80079d8:	4174240b 	.word	0x4174240b
 80079dc:	00000000 	.word	0x00000000

080079e0 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 80079ec:	edd7 7a00 	vldr	s15, [r7]
 80079f0:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8007a24 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x44>
 80079f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80079f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079fc:	d80b      	bhi.n	8007a16 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 80079fe:	ed97 7a00 	vldr	s14, [r7]
 8007a02:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007a28 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x48>
 8007a06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007a0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a0e:	ee17 3a90 	vmov	r3, s15
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	e000      	b.n	8007a18 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x38>
    return 0;   // Warning
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr
 8007a24:	4673e702 	.word	0x4673e702
 8007a28:	4174240b 	.word	0x4174240b

08007a2c <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	460b      	mov	r3, r1
 8007a36:	807b      	strh	r3, [r7, #2]
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 8007a38:	887b      	ldrh	r3, [r7, #2]
 8007a3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a3e:	d209      	bcs.n	8007a54 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 8007a40:	887b      	ldrh	r3, [r7, #2]
 8007a42:	ee07 3a90 	vmov	s15, r3
 8007a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a4a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8007a68 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x3c>
 8007a4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007a52:	e001      	b.n	8007a58 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 8007a54:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007a6c <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 8007a58:	eeb0 0a67 	vmov.f32	s0, s15
 8007a5c:	370c      	adds	r7, #12
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	3e742401 	.word	0x3e742401
 8007a6c:	00000000 	.word	0x00000000

08007a70 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 8007a7c:	edd7 7a00 	vldr	s15, [r7]
 8007a80:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8007ab4 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x44>
 8007a84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a8c:	d80b      	bhi.n	8007aa6 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 8007a8e:	ed97 7a00 	vldr	s14, [r7]
 8007a92:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007ab8 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x48>
 8007a96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007a9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a9e:	ee17 3a90 	vmov	r3, s15
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	e000      	b.n	8007aa8 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x38>
    return 0;   // Warning
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr
 8007ab4:	447414bf 	.word	0x447414bf
 8007ab8:	3e742401 	.word	0x3e742401

08007abc <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt>:
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	807b      	strh	r3, [r7, #2]
  if (FsSpd <= L6470_MAX_FS_SPD)
 8007ac8:	887b      	ldrh	r3, [r7, #2]
 8007aca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ace:	d219      	bcs.n	8007b04 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 8007ad0:	887b      	ldrh	r3, [r7, #2]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7f8 fd56 	bl	8000584 <__aeabi_i2d>
 8007ad8:	f04f 0200 	mov.w	r2, #0
 8007adc:	4b0e      	ldr	r3, [pc, #56]	@ (8007b18 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x5c>)
 8007ade:	f7f8 fc05 	bl	80002ec <__adddf3>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	4610      	mov	r0, r2
 8007ae8:	4619      	mov	r1, r3
 8007aea:	f04f 0200 	mov.w	r2, #0
 8007aee:	4b0b      	ldr	r3, [pc, #44]	@ (8007b1c <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x60>)
 8007af0:	f7f8 fdb2 	bl	8000658 <__aeabi_dmul>
 8007af4:	4602      	mov	r2, r0
 8007af6:	460b      	mov	r3, r1
 8007af8:	4610      	mov	r0, r2
 8007afa:	4619      	mov	r1, r3
 8007afc:	f7f9 f884 	bl	8000c08 <__aeabi_d2f>
 8007b00:	4603      	mov	r3, r0
 8007b02:	e001      	b.n	8007b08 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x4c>
    return 0;   // Warning
 8007b04:	f04f 0300 	mov.w	r3, #0
}
 8007b08:	ee07 3a90 	vmov	s15, r3
 8007b0c:	eeb0 0a67 	vmov.f32	s0, s15
 8007b10:	3708      	adds	r7, #8
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	3fe00000 	.word	0x3fe00000
 8007b1c:	402e8000 	.word	0x402e8000

08007b20 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 8007b2c:	edd7 7a00 	vldr	s15, [r7]
 8007b30:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8007b6c <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x4c>
 8007b34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b3c:	d80f      	bhi.n	8007b5e <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 8007b3e:	ed97 7a00 	vldr	s14, [r7]
 8007b42:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8007b70 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x50>
 8007b46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007b4a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007b4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b56:	ee17 3a90 	vmov	r3, s15
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	e000      	b.n	8007b60 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x40>
    return 0;   // Warning
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr
 8007b6c:	4673e180 	.word	0x4673e180
 8007b70:	41740000 	.word	0x41740000

08007b74 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	807b      	strh	r3, [r7, #2]
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 8007b80:	887b      	ldrh	r3, [r7, #2]
 8007b82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b86:	d209      	bcs.n	8007b9c <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 8007b88:	887b      	ldrh	r3, [r7, #2]
 8007b8a:	ee07 3a90 	vmov	s15, r3
 8007b8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b92:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8007bb0 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x3c>
 8007b96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b9a:	e001      	b.n	8007ba0 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 8007b9c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007bb4 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 8007ba0:	eeb0 0a67 	vmov.f32	s0, s15
 8007ba4:	370c      	adds	r7, #12
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	3d7423f4 	.word	0x3d7423f4
 8007bb4:	00000000 	.word	0x00000000

08007bb8 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 8007bc4:	edd7 7a00 	vldr	s15, [r7]
 8007bc8:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8007bfc <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x44>
 8007bcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bd4:	d80b      	bhi.n	8007bee <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 8007bd6:	ed97 7a00 	vldr	s14, [r7]
 8007bda:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007c00 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x48>
 8007bde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007be2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007be6:	ee17 3a90 	vmov	r3, s15
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	e000      	b.n	8007bf0 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x38>
    return 0;   // Warning
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr
 8007bfc:	44742023 	.word	0x44742023
 8007c00:	3d7423f4 	.word	0x3d7423f4

08007c04 <_ZN5L6470I8shield_2E20L6470_StSlp_2_s_StepEh>:
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	70fb      	strb	r3, [r7, #3]
    return (StSlp * ((float)1.5686e-5));
 8007c10:	78fb      	ldrb	r3, [r7, #3]
 8007c12:	ee07 3a90 	vmov	s15, r3
 8007c16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c1a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8007c30 <_ZN5L6470I8shield_2E20L6470_StSlp_2_s_StepEh+0x2c>
 8007c1e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8007c22:	eeb0 0a67 	vmov.f32	s0, s15
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr
 8007c30:	3783956e 	.word	0x3783956e

08007c34 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 8007c40:	edd7 7a02 	vldr	s15, [r7, #8]
 8007c44:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8007c7c <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x48>
 8007c48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c50:	d80c      	bhi.n	8007c6c <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8007c52:	ed97 7a02 	vldr	s14, [r7, #8]
 8007c56:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8007c80 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x4c>
 8007c5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007c5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c62:	edc7 7a01 	vstr	s15, [r7, #4]
 8007c66:	793b      	ldrb	r3, [r7, #4]
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	e000      	b.n	8007c6e <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x3a>
    return 0;   // Warning
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3714      	adds	r7, #20
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	3b8311d9 	.word	0x3b8311d9
 8007c80:	3783956e 	.word	0x3783956e

08007c84 <_ZN5L6470I8shield_2E23L6470_FnSlpAcc_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	70fb      	strb	r3, [r7, #3]
    return (FnSlpAcc * ((float)1.5686e-5));
 8007c90:	78fb      	ldrb	r3, [r7, #3]
 8007c92:	ee07 3a90 	vmov	s15, r3
 8007c96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c9a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8007cb0 <_ZN5L6470I8shield_2E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 8007c9e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8007ca2:	eeb0 0a67 	vmov.f32	s0, s15
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr
 8007cb0:	3783956e 	.word	0x3783956e

08007cb4 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 8007cc0:	edd7 7a02 	vldr	s15, [r7, #8]
 8007cc4:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8007cfc <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x48>
 8007cc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cd0:	d80c      	bhi.n	8007cec <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8007cd2:	ed97 7a02 	vldr	s14, [r7, #8]
 8007cd6:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8007d00 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 8007cda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007cde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ce2:	edc7 7a01 	vstr	s15, [r7, #4]
 8007ce6:	793b      	ldrb	r3, [r7, #4]
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	e000      	b.n	8007cee <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x3a>
    return 0;   // Warning
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	3b8311d9 	.word	0x3b8311d9
 8007d00:	3783956e 	.word	0x3783956e

08007d04 <_ZN5L6470I8shield_2E23L6470_FnSlpDec_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	70fb      	strb	r3, [r7, #3]
    return (FnSlpDec * ((float)1.5686e-5));
 8007d10:	78fb      	ldrb	r3, [r7, #3]
 8007d12:	ee07 3a90 	vmov	s15, r3
 8007d16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d1a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8007d30 <_ZN5L6470I8shield_2E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 8007d1e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8007d22:	eeb0 0a67 	vmov.f32	s0, s15
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr
 8007d30:	3783956e 	.word	0x3783956e

08007d34 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 8007d34:	b480      	push	{r7}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 8007d40:	edd7 7a02 	vldr	s15, [r7, #8]
 8007d44:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8007d7c <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x48>
 8007d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d50:	d80c      	bhi.n	8007d6c <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8007d52:	ed97 7a02 	vldr	s14, [r7, #8]
 8007d56:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8007d80 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 8007d5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007d5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d62:	edc7 7a01 	vstr	s15, [r7, #4]
 8007d66:	793b      	ldrb	r3, [r7, #4]
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	e000      	b.n	8007d6e <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x3a>
    return 0;   // Warning
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3714      	adds	r7, #20
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	3b8311d9 	.word	0x3b8311d9
 8007d80:	3783956e 	.word	0x3783956e

08007d84 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh>:
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	70fb      	strb	r3, [r7, #3]
  if (OcdTh <= L6470_MAX_OCD_TH)
 8007d90:	78fb      	ldrb	r3, [r7, #3]
 8007d92:	2b0f      	cmp	r3, #15
 8007d94:	d80a      	bhi.n	8007dac <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 8007d96:	78fb      	ldrb	r3, [r7, #3]
 8007d98:	3301      	adds	r3, #1
 8007d9a:	ee07 3a90 	vmov	s15, r3
 8007d9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007da2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8007dc0 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x3c>
 8007da6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007daa:	e001      	b.n	8007db0 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x2c>
    return 0;   // Warning
 8007dac:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007dc4 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x40>
}
 8007db0:	eeb0 0a67 	vmov.f32	s0, s15
 8007db4:	370c      	adds	r7, #12
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	43bb8000 	.word	0x43bb8000
 8007dc4:	00000000 	.word	0x00000000

08007dc8 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 8007dc8:	b480      	push	{r7}
 8007dca:	b087      	sub	sp, #28
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 8007dd4:	edd7 7a02 	vldr	s15, [r7, #8]
 8007dd8:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8007e64 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x9c>
 8007ddc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007de4:	d836      	bhi.n	8007e54 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8c>
    result = (mA / ((float)375));
 8007de6:	ed97 7a02 	vldr	s14, [r7, #8]
 8007dea:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8007e68 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0xa0>
 8007dee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007df2:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 8007df6:	edd7 7a05 	vldr	s15, [r7, #20]
 8007dfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dfe:	edc7 7a01 	vstr	s15, [r7, #4]
 8007e02:	793b      	ldrb	r3, [r7, #4]
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	ee07 3a90 	vmov	s15, r3
 8007e0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e0e:	ed97 7a05 	vldr	s14, [r7, #20]
 8007e12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e16:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 8007e1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8007e1e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007e22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e2a:	d50a      	bpl.n	8007e42 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 8007e2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8007e30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e34:	edc7 7a01 	vstr	s15, [r7, #4]
 8007e38:	793b      	ldrb	r3, [r7, #4]
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	e009      	b.n	8007e56 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8e>
      return ((uint8_t)result);    
 8007e42:	edd7 7a05 	vldr	s15, [r7, #20]
 8007e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e4a:	edc7 7a01 	vstr	s15, [r7, #4]
 8007e4e:	793b      	ldrb	r3, [r7, #4]
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	e000      	b.n	8007e56 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8e>
    return 0;   // Warning
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	371c      	adds	r7, #28
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	45bb8000 	.word	0x45bb8000
 8007e68:	43bb8000 	.word	0x43bb8000

08007e6c <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh>:
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	460b      	mov	r3, r1
 8007e76:	70fb      	strb	r3, [r7, #3]
  if (StallTh <= L6470_MAX_STALL_TH)
 8007e78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	db0a      	blt.n	8007e96 <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 8007e80:	78fb      	ldrb	r3, [r7, #3]
 8007e82:	3301      	adds	r3, #1
 8007e84:	ee07 3a90 	vmov	s15, r3
 8007e88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e8c:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8007ea8 <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x3c>
 8007e90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007e94:	e001      	b.n	8007e9a <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x2e>
    return 0;   // Warning
 8007e96:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007eac <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x40>
}
 8007e9a:	eeb0 0a67 	vmov.f32	s0, s15
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr
 8007ea8:	41fa0000 	.word	0x41fa0000
 8007eac:	00000000 	.word	0x00000000

08007eb0 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 8007eb0:	b480      	push	{r7}
 8007eb2:	b087      	sub	sp, #28
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 8007ebc:	edd7 7a02 	vldr	s15, [r7, #8]
 8007ec0:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8007f4c <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x9c>
 8007ec4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ecc:	d836      	bhi.n	8007f3c <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8c>
    result = (mA / ((float)31.25));
 8007ece:	ed97 7a02 	vldr	s14, [r7, #8]
 8007ed2:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8007f50 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0xa0>
 8007ed6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007eda:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 8007ede:	edd7 7a05 	vldr	s15, [r7, #20]
 8007ee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ee6:	edc7 7a01 	vstr	s15, [r7, #4]
 8007eea:	793b      	ldrb	r3, [r7, #4]
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	ee07 3a90 	vmov	s15, r3
 8007ef2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ef6:	ed97 7a05 	vldr	s14, [r7, #20]
 8007efa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007efe:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 8007f02:	edd7 7a04 	vldr	s15, [r7, #16]
 8007f06:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007f0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f12:	d50a      	bpl.n	8007f2a <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 8007f14:	edd7 7a05 	vldr	s15, [r7, #20]
 8007f18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f1c:	edc7 7a01 	vstr	s15, [r7, #4]
 8007f20:	793b      	ldrb	r3, [r7, #4]
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	3b01      	subs	r3, #1
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	e009      	b.n	8007f3e <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8e>
      return ((uint8_t)result);    
 8007f2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8007f2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f32:	edc7 7a01 	vstr	s15, [r7, #4]
 8007f36:	793b      	ldrb	r3, [r7, #4]
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	e000      	b.n	8007f3e <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8e>
    return 0;   // Warning
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	371c      	adds	r7, #28
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	457a0000 	.word	0x457a0000
 8007f50:	41fa0000 	.word	0x41fa0000

08007f54 <_ZN5L6470I8shield_2E12L6470_ConfigEPv>:
status_t L6470<shield_x>::L6470_Config(void *init)
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
  reset_device();
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	3394      	adds	r3, #148	@ 0x94
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	4798      	blx	r3
  get_status();
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	330c      	adds	r3, #12
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	4798      	blx	r3
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	697a      	ldr	r2, [r7, #20]
 8007f86:	edd2 7a05 	vldr	s15, [r2, #20]
 8007f8a:	eeb0 0a67 	vmov.f32	s0, s15
 8007f8e:	68f8      	ldr	r0, [r7, #12]
 8007f90:	4798      	blx	r3
 8007f92:	4603      	mov	r3, r0
 8007f94:	461a      	mov	r2, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	697a      	ldr	r2, [r7, #20]
 8007fa8:	edd2 7a06 	vldr	s15, [r2, #24]
 8007fac:	eeb0 0a67 	vmov.f32	s0, s15
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	4798      	blx	r3
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	697a      	ldr	r2, [r7, #20]
 8007fca:	edd2 7a07 	vldr	s15, [r2, #28]
 8007fce:	eeb0 0a67 	vmov.f32	s0, s15
 8007fd2:	68f8      	ldr	r0, [r7, #12]
 8007fd4:	4798      	blx	r3
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	461a      	mov	r2, r3
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	697a      	ldr	r2, [r7, #20]
 8007fec:	edd2 7a08 	vldr	s15, [r2, #32]
 8007ff0:	eeb0 0a67 	vmov.f32	s0, s15
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	4798      	blx	r3
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	697a      	ldr	r2, [r7, #20]
 800800e:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 8008012:	eeb0 0a67 	vmov.f32	s0, s15
 8008016:	68f8      	ldr	r0, [r7, #12]
 8008018:	4798      	blx	r3
 800801a:	4603      	mov	r3, r0
 800801c:	461a      	mov	r2, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800802a:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 80082fc <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 800802e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	ed93 7a00 	vldr	s14, [r3]
 8008038:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800803c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008040:	edc7 7a01 	vstr	s15, [r7, #4]
 8008044:	793b      	ldrb	r3, [r7, #4]
 8008046:	b2da      	uxtb	r2, r3
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8008054:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 80082fc <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 8008058:	ee67 6a87 	vmul.f32	s13, s15, s14
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	ed93 7a00 	vldr	s14, [r3]
 8008062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800806a:	edc7 7a01 	vstr	s15, [r7, #4]
 800806e:	793b      	ldrb	r3, [r7, #4]
 8008070:	b2da      	uxtb	r2, r3
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800807e:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 80082fc <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 8008082:	ee67 6a87 	vmul.f32	s13, s15, s14
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	ed93 7a00 	vldr	s14, [r3]
 800808c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008090:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008094:	edc7 7a01 	vstr	s15, [r7, #4]
 8008098:	793b      	ldrb	r3, [r7, #4]
 800809a:	b2da      	uxtb	r2, r3
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80080a8:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 80082fc <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 80080ac:	ee67 6a87 	vmul.f32	s13, s15, s14
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	ed93 7a00 	vldr	s14, [r3]
 80080b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080be:	edc7 7a01 	vstr	s15, [r7, #4]
 80080c2:	793b      	ldrb	r3, [r7, #4]
 80080c4:	b2da      	uxtb	r2, r3
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	697a      	ldr	r2, [r7, #20]
 80080d8:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 80080dc:	eeb0 0a67 	vmov.f32	s0, s15
 80080e0:	68f8      	ldr	r0, [r7, #12]
 80080e2:	4798      	blx	r3
 80080e4:	4603      	mov	r3, r0
 80080e6:	461a      	mov	r2, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	697a      	ldr	r2, [r7, #20]
 80080fa:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 80080fe:	eeb0 0a67 	vmov.f32	s0, s15
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	4798      	blx	r3
 8008106:	4603      	mov	r3, r0
 8008108:	461a      	mov	r2, r3
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	edd2 7a10 	vldr	s15, [r2, #64]	@ 0x40
 8008120:	eeb0 0a67 	vmov.f32	s0, s15
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	4798      	blx	r3
 8008128:	4603      	mov	r3, r0
 800812a:	461a      	mov	r2, r3
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	697a      	ldr	r2, [r7, #20]
 800813e:	edd2 7a11 	vldr	s15, [r2, #68]	@ 0x44
 8008142:	eeb0 0a67 	vmov.f32	s0, s15
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	4798      	blx	r3
 800814a:	4603      	mov	r3, r0
 800814c:	461a      	mov	r2, r3
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	697a      	ldr	r2, [r7, #20]
 800816c:	edd2 7a13 	vldr	s15, [r2, #76]	@ 0x4c
 8008170:	eeb0 0a67 	vmov.f32	s0, s15
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	4798      	blx	r3
 8008178:	4603      	mov	r3, r0
 800817a:	461a      	mov	r2, r3
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	697a      	ldr	r2, [r7, #20]
 800818e:	edd2 7a14 	vldr	s15, [r2, #80]	@ 0x50
 8008192:	eeb0 0a67 	vmov.f32	s0, s15
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	4798      	blx	r3
 800819a:	4603      	mov	r3, r0
 800819c:	461a      	mov	r2, r3
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 80081d8:	2104      	movs	r1, #4
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 80081ee:	2105      	movs	r1, #5
 80081f0:	68f8      	ldr	r0, [r7, #12]
 80081f2:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	f8b2 204c 	ldrh.w	r2, [r2, #76]	@ 0x4c
 8008204:	2106      	movs	r1, #6
 8008206:	68f8      	ldr	r0, [r7, #12]
 8008208:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	f8b2 204e 	ldrh.w	r2, [r2, #78]	@ 0x4e
 800821a:	2107      	movs	r1, #7
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 8008230:	2108      	movs	r1, #8
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 8008246:	2109      	movs	r1, #9
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	f892 2053 	ldrb.w	r2, [r2, #83]	@ 0x53
 800825c:	210a      	movs	r1, #10
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8008272:	210b      	movs	r1, #11
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	68fa      	ldr	r2, [r7, #12]
 8008284:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8008288:	210c      	movs	r1, #12
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
 800829e:	210d      	movs	r1, #13
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68fa      	ldr	r2, [r7, #12]
 80082b0:	f892 2058 	ldrb.w	r2, [r2, #88]	@ 0x58
 80082b4:	210e      	movs	r1, #14
 80082b6:	68f8      	ldr	r0, [r7, #12]
 80082b8:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	f892 2059 	ldrb.w	r2, [r2, #89]	@ 0x59
 80082ca:	210f      	movs	r1, #15
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	f892 205a 	ldrb.w	r2, [r2, #90]	@ 0x5a
 80082e0:	2110      	movs	r1, #16
 80082e2:	68f8      	ldr	r0, [r7, #12]
 80082e4:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	f892 205b 	ldrb.w	r2, [r2, #91]	@ 0x5b
 80082f6:	2111      	movs	r1, #17
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	e001      	b.n	8008300 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3ac>
 80082fc:	43800000 	.word	0x43800000
 8008300:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	f892 205d 	ldrb.w	r2, [r2, #93]	@ 0x5d
 8008312:	2113      	movs	r1, #19
 8008314:	68f8      	ldr	r0, [r7, #12]
 8008316:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	f892 205e 	ldrb.w	r2, [r2, #94]	@ 0x5e
 8008328:	2114      	movs	r1, #20
 800832a:	68f8      	ldr	r0, [r7, #12]
 800832c:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800833e:	2116      	movs	r1, #22
 8008340:	68f8      	ldr	r0, [r7, #12]
 8008342:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	f8b2 2062 	ldrh.w	r2, [r2, #98]	@ 0x62
 8008354:	2117      	movs	r1, #23
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	3354      	adds	r3, #84	@ 0x54
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	f892 205f 	ldrb.w	r2, [r2, #95]	@ 0x5f
 8008368:	4611      	mov	r1, r2
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	4798      	blx	r3
 800836e:	4603      	mov	r3, r0
 8008370:	f083 0301 	eor.w	r3, r3, #1
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b00      	cmp	r3, #0
 8008378:	d001      	beq.n	800837e <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	e000      	b.n	8008380 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x42c>
  return COMPONENT_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3718      	adds	r7, #24
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 8008388:	b590      	push	{r4, r7, lr}
 800838a:	b087      	sub	sp, #28
 800838c:	af02      	add	r7, sp, #8
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	460b      	mov	r3, r1
 8008392:	607a      	str	r2, [r7, #4]
 8008394:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800839e:	681c      	ldr	r4, [r3, #0]
 80083a0:	7afa      	ldrb	r2, [r7, #11]
 80083a2:	2300      	movs	r3, #0
 80083a4:	9301      	str	r3, [sp, #4]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	9300      	str	r3, [sp, #0]
 80083aa:	4613      	mov	r3, r2
 80083ac:	2201      	movs	r2, #1
 80083ae:	490c      	ldr	r1, [pc, #48]	@ (80083e0 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a09      	ldr	r2, [pc, #36]	@ (80083e4 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 80083c0:	4907      	ldr	r1, [pc, #28]	@ (80083e0 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 80083c2:	68f8      	ldr	r0, [r7, #12]
 80083c4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a05      	ldr	r2, [pc, #20]	@ (80083e8 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 80083d2:	4904      	ldr	r1, [pc, #16]	@ (80083e4 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 80083d4:	68f8      	ldr	r0, [r7, #12]
 80083d6:	4798      	blx	r3
}
 80083d8:	bf00      	nop
 80083da:	3714      	adds	r7, #20
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd90      	pop	{r4, r7, pc}
 80083e0:	20000284 	.word	0x20000284
 80083e4:	200002a4 	.word	0x200002a4
 80083e8:	200002ac 	.word	0x200002ac

080083ec <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 80083ec:	b590      	push	{r4, r7, lr}
 80083ee:	b087      	sub	sp, #28
 80083f0:	af02      	add	r7, sp, #8
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	460b      	mov	r3, r1
 80083f6:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008400:	681c      	ldr	r4, [r3, #0]
 8008402:	78fb      	ldrb	r3, [r7, #3]
 8008404:	2200      	movs	r2, #0
 8008406:	9201      	str	r2, [sp, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	9200      	str	r2, [sp, #0]
 800840c:	2202      	movs	r2, #2
 800840e:	4917      	ldr	r1, [pc, #92]	@ (800846c <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a14      	ldr	r2, [pc, #80]	@ (8008470 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8008420:	4912      	ldr	r1, [pc, #72]	@ (800846c <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a10      	ldr	r2, [pc, #64]	@ (8008474 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8008432:	490f      	ldr	r1, [pc, #60]	@ (8008470 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a19      	ldr	r1, [r3, #32]
 800843c:	78fa      	ldrb	r2, [r7, #3]
 800843e:	4613      	mov	r3, r2
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4413      	add	r3, r2
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	440b      	add	r3, r1
 8008448:	7b9b      	ldrb	r3, [r3, #14]
 800844a:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	7bfa      	ldrb	r2, [r7, #15]
 8008458:	4906      	ldr	r1, [pc, #24]	@ (8008474 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	4798      	blx	r3
 800845e:	4603      	mov	r3, r0
 8008460:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 8008462:	68bb      	ldr	r3, [r7, #8]
}
 8008464:	4618      	mov	r0, r3
 8008466:	3714      	adds	r7, #20
 8008468:	46bd      	mov	sp, r7
 800846a:	bd90      	pop	{r4, r7, pc}
 800846c:	20000284 	.word	0x20000284
 8008470:	200002a4 	.word	0x200002a4
 8008474:	200002ac 	.word	0x200002ac

08008478 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8008478:	b590      	push	{r4, r7, lr}
 800847a:	b087      	sub	sp, #28
 800847c:	af02      	add	r7, sp, #8
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	460b      	mov	r3, r1
 8008482:	607a      	str	r2, [r7, #4]
 8008484:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800848e:	681c      	ldr	r4, [r3, #0]
 8008490:	7afa      	ldrb	r2, [r7, #11]
 8008492:	2300      	movs	r3, #0
 8008494:	9301      	str	r3, [sp, #4]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	9300      	str	r3, [sp, #0]
 800849a:	4613      	mov	r3, r2
 800849c:	2203      	movs	r2, #3
 800849e:	490c      	ldr	r1, [pc, #48]	@ (80084d0 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x58>)
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a09      	ldr	r2, [pc, #36]	@ (80084d4 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 80084b0:	4907      	ldr	r1, [pc, #28]	@ (80084d0 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x58>)
 80084b2:	68f8      	ldr	r0, [r7, #12]
 80084b4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a05      	ldr	r2, [pc, #20]	@ (80084d8 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x60>)
 80084c2:	4904      	ldr	r1, [pc, #16]	@ (80084d4 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	4798      	blx	r3
}
 80084c8:	bf00      	nop
 80084ca:	3714      	adds	r7, #20
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd90      	pop	{r4, r7, pc}
 80084d0:	20000284 	.word	0x20000284
 80084d4:	200002a4 	.word	0x200002a4
 80084d8:	200002ac 	.word	0x200002ac

080084dc <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 80084dc:	b590      	push	{r4, r7, lr}
 80084de:	b085      	sub	sp, #20
 80084e0:	af02      	add	r7, sp, #8
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	460b      	mov	r3, r1
 80084e6:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80084f0:	681c      	ldr	r4, [r3, #0]
 80084f2:	78fb      	ldrb	r3, [r7, #3]
 80084f4:	2200      	movs	r2, #0
 80084f6:	9201      	str	r2, [sp, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	9200      	str	r2, [sp, #0]
 80084fc:	2204      	movs	r2, #4
 80084fe:	490c      	ldr	r1, [pc, #48]	@ (8008530 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a09      	ldr	r2, [pc, #36]	@ (8008534 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8008510:	4907      	ldr	r1, [pc, #28]	@ (8008530 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a05      	ldr	r2, [pc, #20]	@ (8008538 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 8008522:	4904      	ldr	r1, [pc, #16]	@ (8008534 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	4798      	blx	r3
}
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	bd90      	pop	{r4, r7, pc}
 8008530:	20000284 	.word	0x20000284
 8008534:	200002a4 	.word	0x200002a4
 8008538:	200002ac 	.word	0x200002ac

0800853c <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 800853c:	b590      	push	{r4, r7, lr}
 800853e:	b087      	sub	sp, #28
 8008540:	af02      	add	r7, sp, #8
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	460b      	mov	r3, r1
 8008546:	607a      	str	r2, [r7, #4]
 8008548:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008552:	681c      	ldr	r4, [r3, #0]
 8008554:	7afa      	ldrb	r2, [r7, #11]
 8008556:	2300      	movs	r3, #0
 8008558:	9301      	str	r3, [sp, #4]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	9300      	str	r3, [sp, #0]
 800855e:	4613      	mov	r3, r2
 8008560:	2205      	movs	r2, #5
 8008562:	490c      	ldr	r1, [pc, #48]	@ (8008594 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a09      	ldr	r2, [pc, #36]	@ (8008598 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8008574:	4907      	ldr	r1, [pc, #28]	@ (8008594 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a05      	ldr	r2, [pc, #20]	@ (800859c <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 8008586:	4904      	ldr	r1, [pc, #16]	@ (8008598 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8008588:	68f8      	ldr	r0, [r7, #12]
 800858a:	4798      	blx	r3
}
 800858c:	bf00      	nop
 800858e:	3714      	adds	r7, #20
 8008590:	46bd      	mov	sp, r7
 8008592:	bd90      	pop	{r4, r7, pc}
 8008594:	20000284 	.word	0x20000284
 8008598:	200002a4 	.word	0x200002a4
 800859c:	200002ac 	.word	0x200002ac

080085a0 <_ZN5L6470I8shield_2E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 80085a0:	b590      	push	{r4, r7, lr}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af02      	add	r7, sp, #8
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80085b0:	d21f      	bcs.n	80085f2 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80085ba:	681c      	ldr	r4, [r3, #0]
 80085bc:	2300      	movs	r3, #0
 80085be:	9301      	str	r3, [sp, #4]
 80085c0:	2300      	movs	r3, #0
 80085c2:	9300      	str	r3, [sp, #0]
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	2206      	movs	r2, #6
 80085c8:	490c      	ldr	r1, [pc, #48]	@ (80085fc <_ZN5L6470I8shield_2E10L6470_GoToEm+0x5c>)
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a09      	ldr	r2, [pc, #36]	@ (8008600 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x60>)
 80085da:	4908      	ldr	r1, [pc, #32]	@ (80085fc <_ZN5L6470I8shield_2E10L6470_GoToEm+0x5c>)
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a06      	ldr	r2, [pc, #24]	@ (8008604 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x64>)
 80085ec:	4904      	ldr	r1, [pc, #16]	@ (8008600 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x60>)
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	4798      	blx	r3
}
 80085f2:	bf00      	nop
 80085f4:	370c      	adds	r7, #12
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd90      	pop	{r4, r7, pc}
 80085fa:	bf00      	nop
 80085fc:	20000284 	.word	0x20000284
 8008600:	200002a4 	.word	0x200002a4
 8008604:	200002ac 	.word	0x200002ac

08008608 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 8008608:	b590      	push	{r4, r7, lr}
 800860a:	b087      	sub	sp, #28
 800860c:	af02      	add	r7, sp, #8
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	460b      	mov	r3, r1
 8008612:	607a      	str	r2, [r7, #4]
 8008614:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800861c:	d220      	bcs.n	8008660 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008626:	681c      	ldr	r4, [r3, #0]
 8008628:	7afa      	ldrb	r2, [r7, #11]
 800862a:	2300      	movs	r3, #0
 800862c:	9301      	str	r3, [sp, #4]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	9300      	str	r3, [sp, #0]
 8008632:	4613      	mov	r3, r2
 8008634:	2207      	movs	r2, #7
 8008636:	490c      	ldr	r1, [pc, #48]	@ (8008668 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a09      	ldr	r2, [pc, #36]	@ (800866c <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8008648:	4907      	ldr	r1, [pc, #28]	@ (8008668 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a05      	ldr	r2, [pc, #20]	@ (8008670 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 800865a:	4904      	ldr	r1, [pc, #16]	@ (800866c <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	4798      	blx	r3
}
 8008660:	bf00      	nop
 8008662:	3714      	adds	r7, #20
 8008664:	46bd      	mov	sp, r7
 8008666:	bd90      	pop	{r4, r7, pc}
 8008668:	20000284 	.word	0x20000284
 800866c:	200002a4 	.word	0x200002a4
 8008670:	200002ac 	.word	0x200002ac

08008674 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8008674:	b590      	push	{r4, r7, lr}
 8008676:	b087      	sub	sp, #28
 8008678:	af02      	add	r7, sp, #8
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	607b      	str	r3, [r7, #4]
 800867e:	460b      	mov	r3, r1
 8008680:	72fb      	strb	r3, [r7, #11]
 8008682:	4613      	mov	r3, r2
 8008684:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800868e:	681c      	ldr	r4, [r3, #0]
 8008690:	7af9      	ldrb	r1, [r7, #11]
 8008692:	7abb      	ldrb	r3, [r7, #10]
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	9201      	str	r2, [sp, #4]
 8008698:	9300      	str	r3, [sp, #0]
 800869a:	460b      	mov	r3, r1
 800869c:	2208      	movs	r2, #8
 800869e:	490c      	ldr	r1, [pc, #48]	@ (80086d0 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a09      	ldr	r2, [pc, #36]	@ (80086d4 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 80086b0:	4907      	ldr	r1, [pc, #28]	@ (80086d0 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a05      	ldr	r2, [pc, #20]	@ (80086d8 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 80086c2:	4904      	ldr	r1, [pc, #16]	@ (80086d4 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	4798      	blx	r3
}
 80086c8:	bf00      	nop
 80086ca:	3714      	adds	r7, #20
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd90      	pop	{r4, r7, pc}
 80086d0:	20000284 	.word	0x20000284
 80086d4:	200002a4 	.word	0x200002a4
 80086d8:	200002ac 	.word	0x200002ac

080086dc <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 80086dc:	b590      	push	{r4, r7, lr}
 80086de:	b085      	sub	sp, #20
 80086e0:	af02      	add	r7, sp, #8
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	460b      	mov	r3, r1
 80086e6:	70fb      	strb	r3, [r7, #3]
 80086e8:	4613      	mov	r3, r2
 80086ea:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80086f4:	681c      	ldr	r4, [r3, #0]
 80086f6:	78fa      	ldrb	r2, [r7, #3]
 80086f8:	78bb      	ldrb	r3, [r7, #2]
 80086fa:	2100      	movs	r1, #0
 80086fc:	9101      	str	r1, [sp, #4]
 80086fe:	9300      	str	r3, [sp, #0]
 8008700:	4613      	mov	r3, r2
 8008702:	2209      	movs	r2, #9
 8008704:	490c      	ldr	r1, [pc, #48]	@ (8008738 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a09      	ldr	r2, [pc, #36]	@ (800873c <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8008716:	4908      	ldr	r1, [pc, #32]	@ (8008738 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a06      	ldr	r2, [pc, #24]	@ (8008740 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 8008728:	4904      	ldr	r1, [pc, #16]	@ (800873c <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	4798      	blx	r3
}
 800872e:	bf00      	nop
 8008730:	370c      	adds	r7, #12
 8008732:	46bd      	mov	sp, r7
 8008734:	bd90      	pop	{r4, r7, pc}
 8008736:	bf00      	nop
 8008738:	20000284 	.word	0x20000284
 800873c:	200002a4 	.word	0x200002a4
 8008740:	200002ac 	.word	0x200002ac

08008744 <_ZN5L6470I8shield_2E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 8008744:	b590      	push	{r4, r7, lr}
 8008746:	b085      	sub	sp, #20
 8008748:	af02      	add	r7, sp, #8
 800874a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008754:	681c      	ldr	r4, [r3, #0]
 8008756:	2300      	movs	r3, #0
 8008758:	9301      	str	r3, [sp, #4]
 800875a:	2300      	movs	r3, #0
 800875c:	9300      	str	r3, [sp, #0]
 800875e:	2300      	movs	r3, #0
 8008760:	220a      	movs	r2, #10
 8008762:	490c      	ldr	r1, [pc, #48]	@ (8008794 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x50>)
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a09      	ldr	r2, [pc, #36]	@ (8008798 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x54>)
 8008774:	4907      	ldr	r1, [pc, #28]	@ (8008794 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x50>)
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a05      	ldr	r2, [pc, #20]	@ (800879c <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x58>)
 8008786:	4904      	ldr	r1, [pc, #16]	@ (8008798 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x54>)
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	4798      	blx	r3
}
 800878c:	bf00      	nop
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	bd90      	pop	{r4, r7, pc}
 8008794:	20000284 	.word	0x20000284
 8008798:	200002a4 	.word	0x200002a4
 800879c:	200002ac 	.word	0x200002ac

080087a0 <_ZN5L6470I8shield_2E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 80087a0:	b590      	push	{r4, r7, lr}
 80087a2:	b085      	sub	sp, #20
 80087a4:	af02      	add	r7, sp, #8
 80087a6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80087b0:	681c      	ldr	r4, [r3, #0]
 80087b2:	2300      	movs	r3, #0
 80087b4:	9301      	str	r3, [sp, #4]
 80087b6:	2300      	movs	r3, #0
 80087b8:	9300      	str	r3, [sp, #0]
 80087ba:	2300      	movs	r3, #0
 80087bc:	220b      	movs	r2, #11
 80087be:	490c      	ldr	r1, [pc, #48]	@ (80087f0 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x50>)
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a09      	ldr	r2, [pc, #36]	@ (80087f4 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x54>)
 80087d0:	4907      	ldr	r1, [pc, #28]	@ (80087f0 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x50>)
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a05      	ldr	r2, [pc, #20]	@ (80087f8 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x58>)
 80087e2:	4904      	ldr	r1, [pc, #16]	@ (80087f4 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x54>)
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	4798      	blx	r3
}
 80087e8:	bf00      	nop
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd90      	pop	{r4, r7, pc}
 80087f0:	20000284 	.word	0x20000284
 80087f4:	200002a4 	.word	0x200002a4
 80087f8:	200002ac 	.word	0x200002ac

080087fc <_ZN5L6470I8shield_2E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 80087fc:	b590      	push	{r4, r7, lr}
 80087fe:	b085      	sub	sp, #20
 8008800:	af02      	add	r7, sp, #8
 8008802:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800880c:	681c      	ldr	r4, [r3, #0]
 800880e:	2300      	movs	r3, #0
 8008810:	9301      	str	r3, [sp, #4]
 8008812:	2300      	movs	r3, #0
 8008814:	9300      	str	r3, [sp, #0]
 8008816:	2300      	movs	r3, #0
 8008818:	220c      	movs	r2, #12
 800881a:	490c      	ldr	r1, [pc, #48]	@ (800884c <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x50>)
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a09      	ldr	r2, [pc, #36]	@ (8008850 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x54>)
 800882c:	4907      	ldr	r1, [pc, #28]	@ (800884c <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x50>)
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a05      	ldr	r2, [pc, #20]	@ (8008854 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x58>)
 800883e:	4904      	ldr	r1, [pc, #16]	@ (8008850 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x54>)
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	4798      	blx	r3
}
 8008844:	bf00      	nop
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	bd90      	pop	{r4, r7, pc}
 800884c:	20000284 	.word	0x20000284
 8008850:	200002a4 	.word	0x200002a4
 8008854:	200002ac 	.word	0x200002ac

08008858 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 8008858:	b590      	push	{r4, r7, lr}
 800885a:	b085      	sub	sp, #20
 800885c:	af02      	add	r7, sp, #8
 800885e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008868:	681c      	ldr	r4, [r3, #0]
 800886a:	2300      	movs	r3, #0
 800886c:	9301      	str	r3, [sp, #4]
 800886e:	2300      	movs	r3, #0
 8008870:	9300      	str	r3, [sp, #0]
 8008872:	2300      	movs	r3, #0
 8008874:	220d      	movs	r2, #13
 8008876:	490c      	ldr	r1, [pc, #48]	@ (80088a8 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x50>)
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a09      	ldr	r2, [pc, #36]	@ (80088ac <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x54>)
 8008888:	4907      	ldr	r1, [pc, #28]	@ (80088a8 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x50>)
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a05      	ldr	r2, [pc, #20]	@ (80088b0 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x58>)
 800889a:	4904      	ldr	r1, [pc, #16]	@ (80088ac <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x54>)
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	4798      	blx	r3
}
 80088a0:	bf00      	nop
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd90      	pop	{r4, r7, pc}
 80088a8:	20000284 	.word	0x20000284
 80088ac:	200002a4 	.word	0x200002a4
 80088b0:	200002ac 	.word	0x200002ac

080088b4 <_ZN5L6470I8shield_2E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 80088b4:	b590      	push	{r4, r7, lr}
 80088b6:	b085      	sub	sp, #20
 80088b8:	af02      	add	r7, sp, #8
 80088ba:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80088c4:	681c      	ldr	r4, [r3, #0]
 80088c6:	2300      	movs	r3, #0
 80088c8:	9301      	str	r3, [sp, #4]
 80088ca:	2300      	movs	r3, #0
 80088cc:	9300      	str	r3, [sp, #0]
 80088ce:	2300      	movs	r3, #0
 80088d0:	220e      	movs	r2, #14
 80088d2:	490c      	ldr	r1, [pc, #48]	@ (8008904 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x50>)
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a09      	ldr	r2, [pc, #36]	@ (8008908 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x54>)
 80088e4:	4907      	ldr	r1, [pc, #28]	@ (8008904 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x50>)
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a05      	ldr	r2, [pc, #20]	@ (800890c <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x58>)
 80088f6:	4904      	ldr	r1, [pc, #16]	@ (8008908 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x54>)
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	4798      	blx	r3
}
 80088fc:	bf00      	nop
 80088fe:	370c      	adds	r7, #12
 8008900:	46bd      	mov	sp, r7
 8008902:	bd90      	pop	{r4, r7, pc}
 8008904:	20000284 	.word	0x20000284
 8008908:	200002a4 	.word	0x200002a4
 800890c:	200002ac 	.word	0x200002ac

08008910 <_ZN5L6470I8shield_2E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 8008910:	b590      	push	{r4, r7, lr}
 8008912:	b085      	sub	sp, #20
 8008914:	af02      	add	r7, sp, #8
 8008916:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008920:	681c      	ldr	r4, [r3, #0]
 8008922:	2300      	movs	r3, #0
 8008924:	9301      	str	r3, [sp, #4]
 8008926:	2300      	movs	r3, #0
 8008928:	9300      	str	r3, [sp, #0]
 800892a:	2300      	movs	r3, #0
 800892c:	220f      	movs	r2, #15
 800892e:	490c      	ldr	r1, [pc, #48]	@ (8008960 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x50>)
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a09      	ldr	r2, [pc, #36]	@ (8008964 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x54>)
 8008940:	4907      	ldr	r1, [pc, #28]	@ (8008960 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x50>)
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a05      	ldr	r2, [pc, #20]	@ (8008968 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x58>)
 8008952:	4904      	ldr	r1, [pc, #16]	@ (8008964 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x54>)
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	4798      	blx	r3
}
 8008958:	bf00      	nop
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	bd90      	pop	{r4, r7, pc}
 8008960:	20000284 	.word	0x20000284
 8008964:	200002a4 	.word	0x200002a4
 8008968:	200002ac 	.word	0x200002ac

0800896c <_ZN5L6470I8shield_2E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 800896c:	b590      	push	{r4, r7, lr}
 800896e:	b085      	sub	sp, #20
 8008970:	af02      	add	r7, sp, #8
 8008972:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800897c:	681c      	ldr	r4, [r3, #0]
 800897e:	2300      	movs	r3, #0
 8008980:	9301      	str	r3, [sp, #4]
 8008982:	2300      	movs	r3, #0
 8008984:	9300      	str	r3, [sp, #0]
 8008986:	2300      	movs	r3, #0
 8008988:	2210      	movs	r2, #16
 800898a:	490c      	ldr	r1, [pc, #48]	@ (80089bc <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x50>)
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a09      	ldr	r2, [pc, #36]	@ (80089c0 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x54>)
 800899c:	4907      	ldr	r1, [pc, #28]	@ (80089bc <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x50>)
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a05      	ldr	r2, [pc, #20]	@ (80089c4 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x58>)
 80089ae:	4904      	ldr	r1, [pc, #16]	@ (80089c0 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x54>)
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	4798      	blx	r3
}
 80089b4:	bf00      	nop
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd90      	pop	{r4, r7, pc}
 80089bc:	20000284 	.word	0x20000284
 80089c0:	200002a4 	.word	0x200002a4
 80089c4:	200002ac 	.word	0x200002ac

080089c8 <_ZN5L6470I8shield_2E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 80089c8:	b590      	push	{r4, r7, lr}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af02      	add	r7, sp, #8
 80089ce:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80089d8:	681c      	ldr	r4, [r3, #0]
 80089da:	2300      	movs	r3, #0
 80089dc:	9301      	str	r3, [sp, #4]
 80089de:	2300      	movs	r3, #0
 80089e0:	9300      	str	r3, [sp, #0]
 80089e2:	2300      	movs	r3, #0
 80089e4:	2211      	movs	r2, #17
 80089e6:	490c      	ldr	r1, [pc, #48]	@ (8008a18 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x50>)
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a09      	ldr	r2, [pc, #36]	@ (8008a1c <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x54>)
 80089f8:	4907      	ldr	r1, [pc, #28]	@ (8008a18 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x50>)
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a05      	ldr	r2, [pc, #20]	@ (8008a20 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x58>)
 8008a0a:	4904      	ldr	r1, [pc, #16]	@ (8008a1c <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x54>)
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	4798      	blx	r3
}
 8008a10:	bf00      	nop
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd90      	pop	{r4, r7, pc}
 8008a18:	20000284 	.word	0x20000284
 8008a1c:	200002a4 	.word	0x200002a4
 8008a20:	200002ac 	.word	0x200002ac

08008a24 <_ZN5L6470I8shield_2E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 8008a24:	b590      	push	{r4, r7, lr}
 8008a26:	b087      	sub	sp, #28
 8008a28:	af02      	add	r7, sp, #8
 8008a2a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008a34:	681c      	ldr	r4, [r3, #0]
 8008a36:	2300      	movs	r3, #0
 8008a38:	9301      	str	r3, [sp, #4]
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	9300      	str	r3, [sp, #0]
 8008a3e:	2300      	movs	r3, #0
 8008a40:	2212      	movs	r2, #18
 8008a42:	4912      	ldr	r1, [pc, #72]	@ (8008a8c <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x68>)
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a0f      	ldr	r2, [pc, #60]	@ (8008a90 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x6c>)
 8008a54:	490d      	ldr	r1, [pc, #52]	@ (8008a8c <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x68>)
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a0b      	ldr	r2, [pc, #44]	@ (8008a94 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x70>)
 8008a66:	490a      	ldr	r1, [pc, #40]	@ (8008a90 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x6c>)
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2202      	movs	r2, #2
 8008a78:	4906      	ldr	r1, [pc, #24]	@ (8008a94 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x70>)
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	4798      	blx	r3
 8008a7e:	4603      	mov	r3, r0
 8008a80:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 8008a82:	89fb      	ldrh	r3, [r7, #14]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3714      	adds	r7, #20
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd90      	pop	{r4, r7, pc}
 8008a8c:	20000284 	.word	0x20000284
 8008a90:	200002a4 	.word	0x200002a4
 8008a94:	200002ac 	.word	0x200002ac

08008a98 <_ZN5L6470I8shield_2E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 8008a98:	b590      	push	{r4, r7, lr}
 8008a9a:	b087      	sub	sp, #28
 8008a9c:	af02      	add	r7, sp, #8
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	607a      	str	r2, [r7, #4]
 8008aa4:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008aae:	681c      	ldr	r4, [r3, #0]
 8008ab0:	7afa      	ldrb	r2, [r7, #11]
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	9301      	str	r3, [sp, #4]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	9300      	str	r3, [sp, #0]
 8008aba:	4613      	mov	r3, r2
 8008abc:	2201      	movs	r2, #1
 8008abe:	4903      	ldr	r1, [pc, #12]	@ (8008acc <_ZN5L6470I8shield_2E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	47a0      	blx	r4
}
 8008ac4:	bf00      	nop
 8008ac6:	3714      	adds	r7, #20
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd90      	pop	{r4, r7, pc}
 8008acc:	20000284 	.word	0x20000284

08008ad0 <_ZN5L6470I8shield_2E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 8008ad0:	b590      	push	{r4, r7, lr}
 8008ad2:	b085      	sub	sp, #20
 8008ad4:	af02      	add	r7, sp, #8
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	460b      	mov	r3, r1
 8008ada:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008ae4:	681c      	ldr	r4, [r3, #0]
 8008ae6:	78fb      	ldrb	r3, [r7, #3]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	9201      	str	r2, [sp, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	9200      	str	r2, [sp, #0]
 8008af0:	2202      	movs	r2, #2
 8008af2:	4903      	ldr	r1, [pc, #12]	@ (8008b00 <_ZN5L6470I8shield_2E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	47a0      	blx	r4
}
 8008af8:	bf00      	nop
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd90      	pop	{r4, r7, pc}
 8008b00:	20000284 	.word	0x20000284

08008b04 <_ZN5L6470I8shield_2E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8008b04:	b590      	push	{r4, r7, lr}
 8008b06:	b087      	sub	sp, #28
 8008b08:	af02      	add	r7, sp, #8
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	607a      	str	r2, [r7, #4]
 8008b10:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008b1a:	681c      	ldr	r4, [r3, #0]
 8008b1c:	7afa      	ldrb	r2, [r7, #11]
 8008b1e:	2300      	movs	r3, #0
 8008b20:	9301      	str	r3, [sp, #4]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	9300      	str	r3, [sp, #0]
 8008b26:	4613      	mov	r3, r2
 8008b28:	2203      	movs	r2, #3
 8008b2a:	4903      	ldr	r1, [pc, #12]	@ (8008b38 <_ZN5L6470I8shield_2E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	47a0      	blx	r4
}
 8008b30:	bf00      	nop
 8008b32:	3714      	adds	r7, #20
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd90      	pop	{r4, r7, pc}
 8008b38:	20000284 	.word	0x20000284

08008b3c <_ZN5L6470I8shield_2E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 8008b3c:	b590      	push	{r4, r7, lr}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af02      	add	r7, sp, #8
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	460b      	mov	r3, r1
 8008b46:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008b50:	681c      	ldr	r4, [r3, #0]
 8008b52:	78fb      	ldrb	r3, [r7, #3]
 8008b54:	2200      	movs	r2, #0
 8008b56:	9201      	str	r2, [sp, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	9200      	str	r2, [sp, #0]
 8008b5c:	2204      	movs	r2, #4
 8008b5e:	4903      	ldr	r1, [pc, #12]	@ (8008b6c <_ZN5L6470I8shield_2E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	47a0      	blx	r4
}
 8008b64:	bf00      	nop
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd90      	pop	{r4, r7, pc}
 8008b6c:	20000284 	.word	0x20000284

08008b70 <_ZN5L6470I8shield_2E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8008b70:	b590      	push	{r4, r7, lr}
 8008b72:	b087      	sub	sp, #28
 8008b74:	af02      	add	r7, sp, #8
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	460b      	mov	r3, r1
 8008b7a:	607a      	str	r2, [r7, #4]
 8008b7c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008b86:	681c      	ldr	r4, [r3, #0]
 8008b88:	7afa      	ldrb	r2, [r7, #11]
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	9301      	str	r3, [sp, #4]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	9300      	str	r3, [sp, #0]
 8008b92:	4613      	mov	r3, r2
 8008b94:	2205      	movs	r2, #5
 8008b96:	4903      	ldr	r1, [pc, #12]	@ (8008ba4 <_ZN5L6470I8shield_2E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	47a0      	blx	r4
}
 8008b9c:	bf00      	nop
 8008b9e:	3714      	adds	r7, #20
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd90      	pop	{r4, r7, pc}
 8008ba4:	20000284 	.word	0x20000284

08008ba8 <_ZN5L6470I8shield_2E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 8008ba8:	b590      	push	{r4, r7, lr}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af02      	add	r7, sp, #8
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008bba:	681c      	ldr	r4, [r3, #0]
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	9301      	str	r3, [sp, #4]
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	9300      	str	r3, [sp, #0]
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	2206      	movs	r2, #6
 8008bc8:	4903      	ldr	r1, [pc, #12]	@ (8008bd8 <_ZN5L6470I8shield_2E17L6470_PrepareGoToEm+0x30>)
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	47a0      	blx	r4
}
 8008bce:	bf00      	nop
 8008bd0:	370c      	adds	r7, #12
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd90      	pop	{r4, r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	20000284 	.word	0x20000284

08008bdc <_ZN5L6470I8shield_2E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 8008bdc:	b590      	push	{r4, r7, lr}
 8008bde:	b087      	sub	sp, #28
 8008be0:	af02      	add	r7, sp, #8
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	460b      	mov	r3, r1
 8008be6:	607a      	str	r2, [r7, #4]
 8008be8:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008bf2:	681c      	ldr	r4, [r3, #0]
 8008bf4:	7afa      	ldrb	r2, [r7, #11]
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	9301      	str	r3, [sp, #4]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	9300      	str	r3, [sp, #0]
 8008bfe:	4613      	mov	r3, r2
 8008c00:	2207      	movs	r2, #7
 8008c02:	4903      	ldr	r1, [pc, #12]	@ (8008c10 <_ZN5L6470I8shield_2E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 8008c04:	68f8      	ldr	r0, [r7, #12]
 8008c06:	47a0      	blx	r4
}
 8008c08:	bf00      	nop
 8008c0a:	3714      	adds	r7, #20
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd90      	pop	{r4, r7, pc}
 8008c10:	20000284 	.word	0x20000284

08008c14 <_ZN5L6470I8shield_2E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8008c14:	b590      	push	{r4, r7, lr}
 8008c16:	b087      	sub	sp, #28
 8008c18:	af02      	add	r7, sp, #8
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	607b      	str	r3, [r7, #4]
 8008c1e:	460b      	mov	r3, r1
 8008c20:	72fb      	strb	r3, [r7, #11]
 8008c22:	4613      	mov	r3, r2
 8008c24:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008c2e:	681c      	ldr	r4, [r3, #0]
 8008c30:	7af9      	ldrb	r1, [r7, #11]
 8008c32:	7abb      	ldrb	r3, [r7, #10]
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	9201      	str	r2, [sp, #4]
 8008c38:	9300      	str	r3, [sp, #0]
 8008c3a:	460b      	mov	r3, r1
 8008c3c:	2208      	movs	r2, #8
 8008c3e:	4903      	ldr	r1, [pc, #12]	@ (8008c4c <_ZN5L6470I8shield_2E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 8008c40:	68f8      	ldr	r0, [r7, #12]
 8008c42:	47a0      	blx	r4
}
 8008c44:	bf00      	nop
 8008c46:	3714      	adds	r7, #20
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd90      	pop	{r4, r7, pc}
 8008c4c:	20000284 	.word	0x20000284

08008c50 <_ZN5L6470I8shield_2E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8008c50:	b590      	push	{r4, r7, lr}
 8008c52:	b085      	sub	sp, #20
 8008c54:	af02      	add	r7, sp, #8
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	460b      	mov	r3, r1
 8008c5a:	70fb      	strb	r3, [r7, #3]
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008c68:	681c      	ldr	r4, [r3, #0]
 8008c6a:	78fa      	ldrb	r2, [r7, #3]
 8008c6c:	78bb      	ldrb	r3, [r7, #2]
 8008c6e:	2100      	movs	r1, #0
 8008c70:	9101      	str	r1, [sp, #4]
 8008c72:	9300      	str	r3, [sp, #0]
 8008c74:	4613      	mov	r3, r2
 8008c76:	2209      	movs	r2, #9
 8008c78:	4903      	ldr	r1, [pc, #12]	@ (8008c88 <_ZN5L6470I8shield_2E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	47a0      	blx	r4
}
 8008c7e:	bf00      	nop
 8008c80:	370c      	adds	r7, #12
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd90      	pop	{r4, r7, pc}
 8008c86:	bf00      	nop
 8008c88:	20000284 	.word	0x20000284

08008c8c <_ZN5L6470I8shield_2E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 8008c8c:	b590      	push	{r4, r7, lr}
 8008c8e:	b085      	sub	sp, #20
 8008c90:	af02      	add	r7, sp, #8
 8008c92:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008c9c:	681c      	ldr	r4, [r3, #0]
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	9301      	str	r3, [sp, #4]
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	9300      	str	r3, [sp, #0]
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	220a      	movs	r2, #10
 8008caa:	4903      	ldr	r1, [pc, #12]	@ (8008cb8 <_ZN5L6470I8shield_2E19L6470_PrepareGoHomeEv+0x2c>)
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	47a0      	blx	r4
}
 8008cb0:	bf00      	nop
 8008cb2:	370c      	adds	r7, #12
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd90      	pop	{r4, r7, pc}
 8008cb8:	20000284 	.word	0x20000284

08008cbc <_ZN5L6470I8shield_2E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 8008cbc:	b590      	push	{r4, r7, lr}
 8008cbe:	b085      	sub	sp, #20
 8008cc0:	af02      	add	r7, sp, #8
 8008cc2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008ccc:	681c      	ldr	r4, [r3, #0]
 8008cce:	2300      	movs	r3, #0
 8008cd0:	9301      	str	r3, [sp, #4]
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	9300      	str	r3, [sp, #0]
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	220b      	movs	r2, #11
 8008cda:	4903      	ldr	r1, [pc, #12]	@ (8008ce8 <_ZN5L6470I8shield_2E19L6470_PrepareGoMarkEv+0x2c>)
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	47a0      	blx	r4
}
 8008ce0:	bf00      	nop
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd90      	pop	{r4, r7, pc}
 8008ce8:	20000284 	.word	0x20000284

08008cec <_ZN5L6470I8shield_2E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 8008cec:	b590      	push	{r4, r7, lr}
 8008cee:	b085      	sub	sp, #20
 8008cf0:	af02      	add	r7, sp, #8
 8008cf2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008cfc:	681c      	ldr	r4, [r3, #0]
 8008cfe:	2300      	movs	r3, #0
 8008d00:	9301      	str	r3, [sp, #4]
 8008d02:	2300      	movs	r3, #0
 8008d04:	9300      	str	r3, [sp, #0]
 8008d06:	2300      	movs	r3, #0
 8008d08:	220c      	movs	r2, #12
 8008d0a:	4903      	ldr	r1, [pc, #12]	@ (8008d18 <_ZN5L6470I8shield_2E21L6470_PrepareResetPosEv+0x2c>)
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	47a0      	blx	r4
}
 8008d10:	bf00      	nop
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd90      	pop	{r4, r7, pc}
 8008d18:	20000284 	.word	0x20000284

08008d1c <_ZN5L6470I8shield_2E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 8008d1c:	b590      	push	{r4, r7, lr}
 8008d1e:	b085      	sub	sp, #20
 8008d20:	af02      	add	r7, sp, #8
 8008d22:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008d2c:	681c      	ldr	r4, [r3, #0]
 8008d2e:	2300      	movs	r3, #0
 8008d30:	9301      	str	r3, [sp, #4]
 8008d32:	2300      	movs	r3, #0
 8008d34:	9300      	str	r3, [sp, #0]
 8008d36:	2300      	movs	r3, #0
 8008d38:	220d      	movs	r2, #13
 8008d3a:	4903      	ldr	r1, [pc, #12]	@ (8008d48 <_ZN5L6470I8shield_2E24L6470_PrepareResetDeviceEv+0x2c>)
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	47a0      	blx	r4
}
 8008d40:	bf00      	nop
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd90      	pop	{r4, r7, pc}
 8008d48:	20000284 	.word	0x20000284

08008d4c <_ZN5L6470I8shield_2E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 8008d4c:	b590      	push	{r4, r7, lr}
 8008d4e:	b085      	sub	sp, #20
 8008d50:	af02      	add	r7, sp, #8
 8008d52:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008d5c:	681c      	ldr	r4, [r3, #0]
 8008d5e:	2300      	movs	r3, #0
 8008d60:	9301      	str	r3, [sp, #4]
 8008d62:	2300      	movs	r3, #0
 8008d64:	9300      	str	r3, [sp, #0]
 8008d66:	2300      	movs	r3, #0
 8008d68:	220e      	movs	r2, #14
 8008d6a:	4903      	ldr	r1, [pc, #12]	@ (8008d78 <_ZN5L6470I8shield_2E21L6470_PrepareSoftStopEv+0x2c>)
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	47a0      	blx	r4
}
 8008d70:	bf00      	nop
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd90      	pop	{r4, r7, pc}
 8008d78:	20000284 	.word	0x20000284

08008d7c <_ZN5L6470I8shield_2E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 8008d7c:	b590      	push	{r4, r7, lr}
 8008d7e:	b085      	sub	sp, #20
 8008d80:	af02      	add	r7, sp, #8
 8008d82:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008d8c:	681c      	ldr	r4, [r3, #0]
 8008d8e:	2300      	movs	r3, #0
 8008d90:	9301      	str	r3, [sp, #4]
 8008d92:	2300      	movs	r3, #0
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	2300      	movs	r3, #0
 8008d98:	220f      	movs	r2, #15
 8008d9a:	4903      	ldr	r1, [pc, #12]	@ (8008da8 <_ZN5L6470I8shield_2E21L6470_PrepareHardStopEv+0x2c>)
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	47a0      	blx	r4
}
 8008da0:	bf00      	nop
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd90      	pop	{r4, r7, pc}
 8008da8:	20000284 	.word	0x20000284

08008dac <_ZN5L6470I8shield_2E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 8008dac:	b590      	push	{r4, r7, lr}
 8008dae:	b085      	sub	sp, #20
 8008db0:	af02      	add	r7, sp, #8
 8008db2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008dbc:	681c      	ldr	r4, [r3, #0]
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	9301      	str	r3, [sp, #4]
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	9300      	str	r3, [sp, #0]
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	2210      	movs	r2, #16
 8008dca:	4903      	ldr	r1, [pc, #12]	@ (8008dd8 <_ZN5L6470I8shield_2E20L6470_PrepareSoftHiZEv+0x2c>)
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	47a0      	blx	r4
}
 8008dd0:	bf00      	nop
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd90      	pop	{r4, r7, pc}
 8008dd8:	20000284 	.word	0x20000284

08008ddc <_ZN5L6470I8shield_2E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 8008ddc:	b590      	push	{r4, r7, lr}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af02      	add	r7, sp, #8
 8008de2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008dec:	681c      	ldr	r4, [r3, #0]
 8008dee:	2300      	movs	r3, #0
 8008df0:	9301      	str	r3, [sp, #4]
 8008df2:	2300      	movs	r3, #0
 8008df4:	9300      	str	r3, [sp, #0]
 8008df6:	2300      	movs	r3, #0
 8008df8:	2211      	movs	r2, #17
 8008dfa:	4903      	ldr	r1, [pc, #12]	@ (8008e08 <_ZN5L6470I8shield_2E20L6470_PrepareHardHiZEv+0x2c>)
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	47a0      	blx	r4
}
 8008e00:	bf00      	nop
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd90      	pop	{r4, r7, pc}
 8008e08:	20000284 	.word	0x20000284

08008e0c <_ZN5L6470I8shield_2E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 8008e0c:	b590      	push	{r4, r7, lr}
 8008e0e:	b085      	sub	sp, #20
 8008e10:	af02      	add	r7, sp, #8
 8008e12:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008e1c:	681c      	ldr	r4, [r3, #0]
 8008e1e:	2300      	movs	r3, #0
 8008e20:	9301      	str	r3, [sp, #4]
 8008e22:	2300      	movs	r3, #0
 8008e24:	9300      	str	r3, [sp, #0]
 8008e26:	2300      	movs	r3, #0
 8008e28:	2212      	movs	r2, #18
 8008e2a:	4903      	ldr	r1, [pc, #12]	@ (8008e38 <_ZN5L6470I8shield_2E22L6470_PrepareGetStatusEv+0x2c>)
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	47a0      	blx	r4
}
 8008e30:	bf00      	nop
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd90      	pop	{r4, r7, pc}
 8008e38:	20000284 	.word	0x20000284

08008e3c <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a09      	ldr	r2, [pc, #36]	@ (8008e74 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 8008e50:	4909      	ldr	r1, [pc, #36]	@ (8008e78 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a06      	ldr	r2, [pc, #24]	@ (8008e7c <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 8008e62:	4904      	ldr	r1, [pc, #16]	@ (8008e74 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 8008e68:	4b04      	ldr	r3, [pc, #16]	@ (8008e7c <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3708      	adds	r7, #8
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	200002a4 	.word	0x200002a4
 8008e78:	20000284 	.word	0x20000284
 8008e7c:	200002ac 	.word	0x200002ac

08008e80 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 8008e80:	b590      	push	{r4, r7, lr}
 8008e82:	b089      	sub	sp, #36	@ 0x24
 8008e84:	af02      	add	r7, sp, #8
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 8008e8c:	4b17      	ldr	r3, [pc, #92]	@ (8008eec <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 8008e8e:	2200      	movs	r2, #0
 8008e90:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8008e92:	2300      	movs	r3, #0
 8008e94:	75fb      	strb	r3, [r7, #23]
 8008e96:	e020      	b.n	8008eda <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008ea0:	681c      	ldr	r4, [r3, #0]
 8008ea2:	7dfb      	ldrb	r3, [r7, #23]
 8008ea4:	005b      	lsls	r3, r3, #1
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	1899      	adds	r1, r3, r2
 8008eac:	7dfb      	ldrb	r3, [r7, #23]
 8008eae:	005b      	lsls	r3, r3, #1
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	441a      	add	r2, r3
 8008eb6:	230a      	movs	r3, #10
 8008eb8:	9300      	str	r3, [sp, #0]
 8008eba:	2302      	movs	r3, #2
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	75bb      	strb	r3, [r7, #22]
 8008ec4:	e003      	b.n	8008ece <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x4e>
 8008ec6:	bf00      	nop
 8008ec8:	7dbb      	ldrb	r3, [r7, #22]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	75bb      	strb	r3, [r7, #22]
 8008ece:	7dbb      	ldrb	r3, [r7, #22]
 8008ed0:	2b7c      	cmp	r3, #124	@ 0x7c
 8008ed2:	d9f8      	bls.n	8008ec6 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8008ed4:	7dfb      	ldrb	r3, [r7, #23]
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	75fb      	strb	r3, [r7, #23]
 8008eda:	7dfb      	ldrb	r3, [r7, #23]
 8008edc:	2b03      	cmp	r3, #3
 8008ede:	d9db      	bls.n	8008e98 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 8008ee0:	bf00      	nop
}
 8008ee2:	bf00      	nop
 8008ee4:	371c      	adds	r7, #28
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd90      	pop	{r4, r7, pc}
 8008eea:	bf00      	nop
 8008eec:	20000281 	.word	0x20000281

08008ef0 <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 8008ef0:	b480      	push	{r7}
 8008ef2:	b087      	sub	sp, #28
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	4613      	mov	r3, r2
 8008efc:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 8008efe:	2300      	movs	r3, #0
 8008f00:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8008f02:	2301      	movs	r3, #1
 8008f04:	74fb      	strb	r3, [r7, #19]
 8008f06:	e016      	b.n	8008f36 <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 8008f08:	7cfb      	ldrb	r3, [r7, #19]
 8008f0a:	005b      	lsls	r3, r3, #1
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	7f1b      	ldrb	r3, [r3, #28]
 8008f12:	4413      	add	r3, r2
 8008f14:	68ba      	ldr	r2, [r7, #8]
 8008f16:	4413      	add	r3, r2
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	79fa      	ldrb	r2, [r7, #7]
 8008f1e:	7cfb      	ldrb	r3, [r7, #19]
 8008f20:	1ad3      	subs	r3, r2, r3
 8008f22:	00db      	lsls	r3, r3, #3
 8008f24:	fa01 f303 	lsl.w	r3, r1, r3
 8008f28:	461a      	mov	r2, r3
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8008f30:	7cfb      	ldrb	r3, [r7, #19]
 8008f32:	3301      	adds	r3, #1
 8008f34:	74fb      	strb	r3, [r7, #19]
 8008f36:	7cfb      	ldrb	r3, [r7, #19]
 8008f38:	2b03      	cmp	r3, #3
 8008f3a:	d9e5      	bls.n	8008f08 <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 8008f3c:	697b      	ldr	r3, [r7, #20]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	371c      	adds	r7, #28
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr
	...

08008f4c <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	460b      	mov	r3, r1
 8008f56:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2118      	movs	r1, #24
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	4798      	blx	r3
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f72:	b292      	uxth	r2, r2
 8008f74:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 8008f76:	78fb      	ldrb	r3, [r7, #3]
 8008f78:	2b0e      	cmp	r3, #14
 8008f7a:	f200 8099 	bhi.w	80090b0 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
 8008f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f84 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x38>)
 8008f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f84:	08008fc1 	.word	0x08008fc1
 8008f88:	08008fd1 	.word	0x08008fd1
 8008f8c:	08008fe1 	.word	0x08008fe1
 8008f90:	08008ff1 	.word	0x08008ff1
 8008f94:	08009001 	.word	0x08009001
 8008f98:	08009011 	.word	0x08009011
 8008f9c:	08009021 	.word	0x08009021
 8008fa0:	08009031 	.word	0x08009031
 8008fa4:	08009041 	.word	0x08009041
 8008fa8:	08009051 	.word	0x08009051
 8008fac:	08009061 	.word	0x08009061
 8008fb0:	08009071 	.word	0x08009071
 8008fb4:	08009081 	.word	0x08009081
 8008fb8:	08009091 	.word	0x08009091
 8008fbc:	080090a1 	.word	0x080090a1
      state = pL6470_StatusRegister->HiZ;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	73fb      	strb	r3, [r7, #15]
      break;
 8008fce:	e06f      	b.n	80090b0 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	73fb      	strb	r3, [r7, #15]
      break;
 8008fde:	e067      	b.n	80090b0 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	73fb      	strb	r3, [r7, #15]
      break;
 8008fee:	e05f      	b.n	80090b0 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	73fb      	strb	r3, [r7, #15]
      break;
 8008ffe:	e057      	b.n	80090b0 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800900a:	b2db      	uxtb	r3, r3
 800900c:	73fb      	strb	r3, [r7, #15]
      break;
 800900e:	e04f      	b.n	80090b0 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800901a:	b2db      	uxtb	r3, r3
 800901c:	73fb      	strb	r3, [r7, #15]
      break;
 800901e:	e047      	b.n	80090b0 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800902a:	b2db      	uxtb	r3, r3
 800902c:	73fb      	strb	r3, [r7, #15]
      break;
 800902e:	e03f      	b.n	80090b0 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009034:	785b      	ldrb	r3, [r3, #1]
 8009036:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800903a:	b2db      	uxtb	r3, r3
 800903c:	73fb      	strb	r3, [r7, #15]
      break;
 800903e:	e037      	b.n	80090b0 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009044:	785b      	ldrb	r3, [r3, #1]
 8009046:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800904a:	b2db      	uxtb	r3, r3
 800904c:	73fb      	strb	r3, [r7, #15]
      break;
 800904e:	e02f      	b.n	80090b0 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009054:	785b      	ldrb	r3, [r3, #1]
 8009056:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800905a:	b2db      	uxtb	r3, r3
 800905c:	73fb      	strb	r3, [r7, #15]
      break;
 800905e:	e027      	b.n	80090b0 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009064:	785b      	ldrb	r3, [r3, #1]
 8009066:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800906a:	b2db      	uxtb	r3, r3
 800906c:	73fb      	strb	r3, [r7, #15]
      break;
 800906e:	e01f      	b.n	80090b0 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009074:	785b      	ldrb	r3, [r3, #1]
 8009076:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800907a:	b2db      	uxtb	r3, r3
 800907c:	73fb      	strb	r3, [r7, #15]
      break;
 800907e:	e017      	b.n	80090b0 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009084:	785b      	ldrb	r3, [r3, #1]
 8009086:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800908a:	b2db      	uxtb	r3, r3
 800908c:	73fb      	strb	r3, [r7, #15]
      break;
 800908e:	e00f      	b.n	80090b0 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009094:	785b      	ldrb	r3, [r3, #1]
 8009096:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800909a:	b2db      	uxtb	r3, r3
 800909c:	73fb      	strb	r3, [r7, #15]
      break;
 800909e:	e007      	b.n	80090b0 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090a4:	785b      	ldrb	r3, [r3, #1]
 80090a6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	73fb      	strb	r3, [r7, #15]
      break;
 80090ae:	bf00      	nop
  return state;
 80090b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop

080090bc <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	460b      	mov	r3, r1
 80090c6:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 80090c8:	78fb      	ldrb	r3, [r7, #3]
 80090ca:	2b18      	cmp	r3, #24
 80090cc:	d809      	bhi.n	80090e2 <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a19      	ldr	r1, [r3, #32]
 80090d2:	78fa      	ldrb	r2, [r7, #3]
 80090d4:	4613      	mov	r3, r2
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	4413      	add	r3, r2
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	440b      	add	r3, r1
 80090de:	3301      	adds	r3, #1
 80090e0:	e000      	b.n	80090e4 <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 80090f0:	b480      	push	{r7}
 80090f2:	b085      	sub	sp, #20
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 80090fa:	2300      	movs	r3, #0
 80090fc:	73fb      	strb	r3, [r7, #15]
 80090fe:	e01a      	b.n	8009136 <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8009100:	7bfb      	ldrb	r3, [r7, #15]
 8009102:	011b      	lsls	r3, r3, #4
 8009104:	683a      	ldr	r2, [r7, #0]
 8009106:	4413      	add	r3, r2
 8009108:	2200      	movs	r2, #0
 800910a:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 800910c:	7bfb      	ldrb	r3, [r7, #15]
 800910e:	011b      	lsls	r3, r3, #4
 8009110:	683a      	ldr	r2, [r7, #0]
 8009112:	4413      	add	r3, r2
 8009114:	2200      	movs	r2, #0
 8009116:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 8009118:	7bfb      	ldrb	r3, [r7, #15]
 800911a:	011b      	lsls	r3, r3, #4
 800911c:	683a      	ldr	r2, [r7, #0]
 800911e:	4413      	add	r3, r2
 8009120:	2200      	movs	r2, #0
 8009122:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 8009124:	7bfb      	ldrb	r3, [r7, #15]
 8009126:	011b      	lsls	r3, r3, #4
 8009128:	683a      	ldr	r2, [r7, #0]
 800912a:	4413      	add	r3, r2
 800912c:	2200      	movs	r2, #0
 800912e:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 8009130:	7bfb      	ldrb	r3, [r7, #15]
 8009132:	3301      	adds	r3, #1
 8009134:	73fb      	strb	r3, [r7, #15]
 8009136:	7bfb      	ldrb	r3, [r7, #15]
 8009138:	2b01      	cmp	r3, #1
 800913a:	d9e1      	bls.n	8009100 <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 800913c:	bf00      	nop
 800913e:	bf00      	nop
 8009140:	3714      	adds	r7, #20
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr

0800914a <_ZN5L6470I8shield_2E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 800914a:	b480      	push	{r7}
 800914c:	b085      	sub	sp, #20
 800914e:	af00      	add	r7, sp, #0
 8009150:	60f8      	str	r0, [r7, #12]
 8009152:	60b9      	str	r1, [r7, #8]
 8009154:	603b      	str	r3, [r7, #0]
 8009156:	4613      	mov	r3, r2
 8009158:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	7f1b      	ldrb	r3, [r3, #28]
 800915e:	011b      	lsls	r3, r3, #4
 8009160:	68ba      	ldr	r2, [r7, #8]
 8009162:	4413      	add	r3, r2
 8009164:	79fa      	ldrb	r2, [r7, #7]
 8009166:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	7f1b      	ldrb	r3, [r3, #28]
 800916c:	011b      	lsls	r3, r3, #4
 800916e:	68ba      	ldr	r2, [r7, #8]
 8009170:	4413      	add	r3, r2
 8009172:	683a      	ldr	r2, [r7, #0]
 8009174:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	7f1b      	ldrb	r3, [r3, #28]
 800917a:	011b      	lsls	r3, r3, #4
 800917c:	68ba      	ldr	r2, [r7, #8]
 800917e:	4413      	add	r3, r2
 8009180:	69ba      	ldr	r2, [r7, #24]
 8009182:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	7f1b      	ldrb	r3, [r3, #28]
 8009188:	011b      	lsls	r3, r3, #4
 800918a:	68ba      	ldr	r2, [r7, #8]
 800918c:	4413      	add	r3, r2
 800918e:	69fa      	ldr	r2, [r7, #28]
 8009190:	60da      	str	r2, [r3, #12]
}
 8009192:	bf00      	nop
 8009194:	3714      	adds	r7, #20
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr
	...

080091a0 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 80091a0:	b590      	push	{r4, r7, lr}
 80091a2:	b087      	sub	sp, #28
 80091a4:	af02      	add	r7, sp, #8
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	60b9      	str	r1, [r7, #8]
 80091aa:	603b      	str	r3, [r7, #0]
 80091ac:	4613      	mov	r3, r2
 80091ae:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 80091b0:	4b10      	ldr	r3, [pc, #64]	@ (80091f4 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d10a      	bne.n	80091ce <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 80091b8:	4b0e      	ldr	r3, [pc, #56]	@ (80091f4 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 80091ba:	2201      	movs	r2, #1
 80091bc:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68b9      	ldr	r1, [r7, #8]
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 80091d6:	681c      	ldr	r4, [r3, #0]
 80091d8:	79fa      	ldrb	r2, [r7, #7]
 80091da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091dc:	9301      	str	r3, [sp, #4]
 80091de:	6a3b      	ldr	r3, [r7, #32]
 80091e0:	9300      	str	r3, [sp, #0]
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	68b9      	ldr	r1, [r7, #8]
 80091e6:	68f8      	ldr	r0, [r7, #12]
 80091e8:	47a0      	blx	r4
}
 80091ea:	bf00      	nop
 80091ec:	3714      	adds	r7, #20
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd90      	pop	{r4, r7, pc}
 80091f2:	bf00      	nop
 80091f4:	20000281 	.word	0x20000281

080091f8 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 80091f8:	b480      	push	{r7}
 80091fa:	b087      	sub	sp, #28
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 8009204:	2300      	movs	r3, #0
 8009206:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8009208:	2300      	movs	r3, #0
 800920a:	75bb      	strb	r3, [r7, #22]
 800920c:	e013      	b.n	8009236 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800920e:	2300      	movs	r3, #0
 8009210:	75fb      	strb	r3, [r7, #23]
 8009212:	e00a      	b.n	800922a <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 8009214:	7d7b      	ldrb	r3, [r7, #21]
 8009216:	1c5a      	adds	r2, r3, #1
 8009218:	757a      	strb	r2, [r7, #21]
 800921a:	461a      	mov	r2, r3
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	4413      	add	r3, r2
 8009220:	2200      	movs	r2, #0
 8009222:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8009224:	7dfb      	ldrb	r3, [r7, #23]
 8009226:	3301      	adds	r3, #1
 8009228:	75fb      	strb	r3, [r7, #23]
 800922a:	7dfb      	ldrb	r3, [r7, #23]
 800922c:	2b01      	cmp	r3, #1
 800922e:	d9f1      	bls.n	8009214 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8009230:	7dbb      	ldrb	r3, [r7, #22]
 8009232:	3301      	adds	r3, #1
 8009234:	75bb      	strb	r3, [r7, #22]
 8009236:	7dbb      	ldrb	r3, [r7, #22]
 8009238:	2b03      	cmp	r3, #3
 800923a:	d9e8      	bls.n	800920e <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800923c:	2300      	movs	r3, #0
 800923e:	75fb      	strb	r3, [r7, #23]
 8009240:	e1f1      	b.n	8009626 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009246:	7dfb      	ldrb	r3, [r7, #23]
 8009248:	011b      	lsls	r3, r3, #4
 800924a:	68b9      	ldr	r1, [r7, #8]
 800924c:	440b      	add	r3, r1
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	4619      	mov	r1, r3
 8009252:	460b      	mov	r3, r1
 8009254:	00db      	lsls	r3, r3, #3
 8009256:	1a5b      	subs	r3, r3, r1
 8009258:	005b      	lsls	r3, r3, #1
 800925a:	441a      	add	r2, r3
 800925c:	7dfb      	ldrb	r3, [r7, #23]
 800925e:	6879      	ldr	r1, [r7, #4]
 8009260:	440b      	add	r3, r1
 8009262:	7b12      	ldrb	r2, [r2, #12]
 8009264:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 8009266:	7dfb      	ldrb	r3, [r7, #23]
 8009268:	011b      	lsls	r3, r3, #4
 800926a:	68ba      	ldr	r2, [r7, #8]
 800926c:	4413      	add	r3, r2
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	2b12      	cmp	r3, #18
 8009272:	f200 81d5 	bhi.w	8009620 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 8009276:	a201      	add	r2, pc, #4	@ (adr r2, 800927c <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 8009278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800927c:	08009621 	.word	0x08009621
 8009280:	080092c9 	.word	0x080092c9
 8009284:	08009351 	.word	0x08009351
 8009288:	08009381 	.word	0x08009381
 800928c:	080093e9 	.word	0x080093e9
 8009290:	08009417 	.word	0x08009417
 8009294:	0800947f 	.word	0x0800947f
 8009298:	080094bb 	.word	0x080094bb
 800929c:	08009523 	.word	0x08009523
 80092a0:	080095bf 	.word	0x080095bf
 80092a4:	08009621 	.word	0x08009621
 80092a8:	08009621 	.word	0x08009621
 80092ac:	08009621 	.word	0x08009621
 80092b0:	08009621 	.word	0x08009621
 80092b4:	08009621 	.word	0x08009621
 80092b8:	08009621 	.word	0x08009621
 80092bc:	08009621 	.word	0x08009621
 80092c0:	08009621 	.word	0x08009621
 80092c4:	08009621 	.word	0x08009621
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 80092c8:	7dfb      	ldrb	r3, [r7, #23]
 80092ca:	687a      	ldr	r2, [r7, #4]
 80092cc:	4413      	add	r3, r2
 80092ce:	7819      	ldrb	r1, [r3, #0]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6a18      	ldr	r0, [r3, #32]
 80092d4:	7dfb      	ldrb	r3, [r7, #23]
 80092d6:	011b      	lsls	r3, r3, #4
 80092d8:	68ba      	ldr	r2, [r7, #8]
 80092da:	4413      	add	r3, r2
 80092dc:	685a      	ldr	r2, [r3, #4]
 80092de:	4613      	mov	r3, r2
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	4413      	add	r3, r2
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	4403      	add	r3, r0
 80092e8:	781a      	ldrb	r2, [r3, #0]
 80092ea:	7dfb      	ldrb	r3, [r7, #23]
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	4403      	add	r3, r0
 80092f0:	430a      	orrs	r2, r1
 80092f2:	b2d2      	uxtb	r2, r2
 80092f4:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	6a19      	ldr	r1, [r3, #32]
 80092fa:	7dfb      	ldrb	r3, [r7, #23]
 80092fc:	011b      	lsls	r3, r3, #4
 80092fe:	68ba      	ldr	r2, [r7, #8]
 8009300:	4413      	add	r3, r2
 8009302:	685a      	ldr	r2, [r3, #4]
 8009304:	4613      	mov	r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	4413      	add	r3, r2
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	440b      	add	r3, r1
 800930e:	7b9b      	ldrb	r3, [r3, #14]
 8009310:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8009312:	2301      	movs	r3, #1
 8009314:	75bb      	strb	r3, [r7, #22]
 8009316:	e016      	b.n	8009346 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 8009318:	7dfb      	ldrb	r3, [r7, #23]
 800931a:	011b      	lsls	r3, r3, #4
 800931c:	68ba      	ldr	r2, [r7, #8]
 800931e:	4413      	add	r3, r2
 8009320:	689a      	ldr	r2, [r3, #8]
 8009322:	7d39      	ldrb	r1, [r7, #20]
 8009324:	7dbb      	ldrb	r3, [r7, #22]
 8009326:	1acb      	subs	r3, r1, r3
 8009328:	00db      	lsls	r3, r3, #3
 800932a:	fa22 f103 	lsr.w	r1, r2, r3
 800932e:	7dbb      	ldrb	r3, [r7, #22]
 8009330:	005a      	lsls	r2, r3, #1
 8009332:	7dfb      	ldrb	r3, [r7, #23]
 8009334:	4413      	add	r3, r2
 8009336:	461a      	mov	r2, r3
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	4413      	add	r3, r2
 800933c:	b2ca      	uxtb	r2, r1
 800933e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8009340:	7dbb      	ldrb	r3, [r7, #22]
 8009342:	3301      	adds	r3, #1
 8009344:	75bb      	strb	r3, [r7, #22]
 8009346:	7d3a      	ldrb	r2, [r7, #20]
 8009348:	7dbb      	ldrb	r3, [r7, #22]
 800934a:	429a      	cmp	r2, r3
 800934c:	d2e4      	bcs.n	8009318 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 800934e:	e167      	b.n	8009620 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8009350:	7dfb      	ldrb	r3, [r7, #23]
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	4413      	add	r3, r2
 8009356:	7819      	ldrb	r1, [r3, #0]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	6a18      	ldr	r0, [r3, #32]
 800935c:	7dfb      	ldrb	r3, [r7, #23]
 800935e:	011b      	lsls	r3, r3, #4
 8009360:	68ba      	ldr	r2, [r7, #8]
 8009362:	4413      	add	r3, r2
 8009364:	685a      	ldr	r2, [r3, #4]
 8009366:	4613      	mov	r3, r2
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	4413      	add	r3, r2
 800936c:	009b      	lsls	r3, r3, #2
 800936e:	4403      	add	r3, r0
 8009370:	781a      	ldrb	r2, [r3, #0]
 8009372:	7dfb      	ldrb	r3, [r7, #23]
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	4403      	add	r3, r0
 8009378:	430a      	orrs	r2, r1
 800937a:	b2d2      	uxtb	r2, r2
 800937c:	701a      	strb	r2, [r3, #0]
      break;
 800937e:	e14f      	b.n	8009620 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8009380:	7dfb      	ldrb	r3, [r7, #23]
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	4413      	add	r3, r2
 8009386:	7819      	ldrb	r1, [r3, #0]
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800938c:	7dfb      	ldrb	r3, [r7, #23]
 800938e:	011b      	lsls	r3, r3, #4
 8009390:	68ba      	ldr	r2, [r7, #8]
 8009392:	4413      	add	r3, r2
 8009394:	685a      	ldr	r2, [r3, #4]
 8009396:	4613      	mov	r3, r2
 8009398:	00db      	lsls	r3, r3, #3
 800939a:	4413      	add	r3, r2
 800939c:	4403      	add	r3, r0
 800939e:	7a1a      	ldrb	r2, [r3, #8]
 80093a0:	7dfb      	ldrb	r3, [r7, #23]
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	4403      	add	r3, r0
 80093a6:	430a      	orrs	r2, r1
 80093a8:	b2d2      	uxtb	r2, r2
 80093aa:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80093ac:	2301      	movs	r3, #1
 80093ae:	75bb      	strb	r3, [r7, #22]
 80093b0:	e016      	b.n	80093e0 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 80093b2:	7dfb      	ldrb	r3, [r7, #23]
 80093b4:	011b      	lsls	r3, r3, #4
 80093b6:	68ba      	ldr	r2, [r7, #8]
 80093b8:	4413      	add	r3, r2
 80093ba:	689a      	ldr	r2, [r3, #8]
 80093bc:	7dbb      	ldrb	r3, [r7, #22]
 80093be:	f1c3 0303 	rsb	r3, r3, #3
 80093c2:	00db      	lsls	r3, r3, #3
 80093c4:	fa22 f103 	lsr.w	r1, r2, r3
 80093c8:	7dbb      	ldrb	r3, [r7, #22]
 80093ca:	005a      	lsls	r2, r3, #1
 80093cc:	7dfb      	ldrb	r3, [r7, #23]
 80093ce:	4413      	add	r3, r2
 80093d0:	461a      	mov	r2, r3
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4413      	add	r3, r2
 80093d6:	b2ca      	uxtb	r2, r1
 80093d8:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80093da:	7dbb      	ldrb	r3, [r7, #22]
 80093dc:	3301      	adds	r3, #1
 80093de:	75bb      	strb	r3, [r7, #22]
 80093e0:	7dbb      	ldrb	r3, [r7, #22]
 80093e2:	2b03      	cmp	r3, #3
 80093e4:	d9e5      	bls.n	80093b2 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 80093e6:	e11b      	b.n	8009620 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 80093e8:	7dfb      	ldrb	r3, [r7, #23]
 80093ea:	687a      	ldr	r2, [r7, #4]
 80093ec:	4413      	add	r3, r2
 80093ee:	7819      	ldrb	r1, [r3, #0]
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80093f4:	7dfb      	ldrb	r3, [r7, #23]
 80093f6:	011b      	lsls	r3, r3, #4
 80093f8:	68ba      	ldr	r2, [r7, #8]
 80093fa:	4413      	add	r3, r2
 80093fc:	685a      	ldr	r2, [r3, #4]
 80093fe:	4613      	mov	r3, r2
 8009400:	00db      	lsls	r3, r3, #3
 8009402:	4413      	add	r3, r2
 8009404:	4403      	add	r3, r0
 8009406:	7a1a      	ldrb	r2, [r3, #8]
 8009408:	7dfb      	ldrb	r3, [r7, #23]
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	4403      	add	r3, r0
 800940e:	430a      	orrs	r2, r1
 8009410:	b2d2      	uxtb	r2, r2
 8009412:	701a      	strb	r2, [r3, #0]
      break;
 8009414:	e104      	b.n	8009620 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8009416:	7dfb      	ldrb	r3, [r7, #23]
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	4413      	add	r3, r2
 800941c:	7819      	ldrb	r1, [r3, #0]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8009422:	7dfb      	ldrb	r3, [r7, #23]
 8009424:	011b      	lsls	r3, r3, #4
 8009426:	68ba      	ldr	r2, [r7, #8]
 8009428:	4413      	add	r3, r2
 800942a:	685a      	ldr	r2, [r3, #4]
 800942c:	4613      	mov	r3, r2
 800942e:	00db      	lsls	r3, r3, #3
 8009430:	4413      	add	r3, r2
 8009432:	4403      	add	r3, r0
 8009434:	7a1a      	ldrb	r2, [r3, #8]
 8009436:	7dfb      	ldrb	r3, [r7, #23]
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	4403      	add	r3, r0
 800943c:	430a      	orrs	r2, r1
 800943e:	b2d2      	uxtb	r2, r2
 8009440:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8009442:	2301      	movs	r3, #1
 8009444:	75bb      	strb	r3, [r7, #22]
 8009446:	e016      	b.n	8009476 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8009448:	7dfb      	ldrb	r3, [r7, #23]
 800944a:	011b      	lsls	r3, r3, #4
 800944c:	68ba      	ldr	r2, [r7, #8]
 800944e:	4413      	add	r3, r2
 8009450:	689a      	ldr	r2, [r3, #8]
 8009452:	7dbb      	ldrb	r3, [r7, #22]
 8009454:	f1c3 0303 	rsb	r3, r3, #3
 8009458:	00db      	lsls	r3, r3, #3
 800945a:	fa22 f103 	lsr.w	r1, r2, r3
 800945e:	7dbb      	ldrb	r3, [r7, #22]
 8009460:	005a      	lsls	r2, r3, #1
 8009462:	7dfb      	ldrb	r3, [r7, #23]
 8009464:	4413      	add	r3, r2
 8009466:	461a      	mov	r2, r3
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4413      	add	r3, r2
 800946c:	b2ca      	uxtb	r2, r1
 800946e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8009470:	7dbb      	ldrb	r3, [r7, #22]
 8009472:	3301      	adds	r3, #1
 8009474:	75bb      	strb	r3, [r7, #22]
 8009476:	7dbb      	ldrb	r3, [r7, #22]
 8009478:	2b03      	cmp	r3, #3
 800947a:	d9e5      	bls.n	8009448 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 800947c:	e0d0      	b.n	8009620 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800947e:	2301      	movs	r3, #1
 8009480:	75bb      	strb	r3, [r7, #22]
 8009482:	e016      	b.n	80094b2 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 8009484:	7dfb      	ldrb	r3, [r7, #23]
 8009486:	011b      	lsls	r3, r3, #4
 8009488:	68ba      	ldr	r2, [r7, #8]
 800948a:	4413      	add	r3, r2
 800948c:	685a      	ldr	r2, [r3, #4]
 800948e:	7dbb      	ldrb	r3, [r7, #22]
 8009490:	f1c3 0303 	rsb	r3, r3, #3
 8009494:	00db      	lsls	r3, r3, #3
 8009496:	fa22 f103 	lsr.w	r1, r2, r3
 800949a:	7dbb      	ldrb	r3, [r7, #22]
 800949c:	005a      	lsls	r2, r3, #1
 800949e:	7dfb      	ldrb	r3, [r7, #23]
 80094a0:	4413      	add	r3, r2
 80094a2:	461a      	mov	r2, r3
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4413      	add	r3, r2
 80094a8:	b2ca      	uxtb	r2, r1
 80094aa:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80094ac:	7dbb      	ldrb	r3, [r7, #22]
 80094ae:	3301      	adds	r3, #1
 80094b0:	75bb      	strb	r3, [r7, #22]
 80094b2:	7dbb      	ldrb	r3, [r7, #22]
 80094b4:	2b03      	cmp	r3, #3
 80094b6:	d9e5      	bls.n	8009484 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 80094b8:	e0b2      	b.n	8009620 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 80094ba:	7dfb      	ldrb	r3, [r7, #23]
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	4413      	add	r3, r2
 80094c0:	7819      	ldrb	r1, [r3, #0]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80094c6:	7dfb      	ldrb	r3, [r7, #23]
 80094c8:	011b      	lsls	r3, r3, #4
 80094ca:	68ba      	ldr	r2, [r7, #8]
 80094cc:	4413      	add	r3, r2
 80094ce:	685a      	ldr	r2, [r3, #4]
 80094d0:	4613      	mov	r3, r2
 80094d2:	00db      	lsls	r3, r3, #3
 80094d4:	4413      	add	r3, r2
 80094d6:	4403      	add	r3, r0
 80094d8:	7a1a      	ldrb	r2, [r3, #8]
 80094da:	7dfb      	ldrb	r3, [r7, #23]
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	4403      	add	r3, r0
 80094e0:	430a      	orrs	r2, r1
 80094e2:	b2d2      	uxtb	r2, r2
 80094e4:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80094e6:	2301      	movs	r3, #1
 80094e8:	75bb      	strb	r3, [r7, #22]
 80094ea:	e016      	b.n	800951a <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 80094ec:	7dfb      	ldrb	r3, [r7, #23]
 80094ee:	011b      	lsls	r3, r3, #4
 80094f0:	68ba      	ldr	r2, [r7, #8]
 80094f2:	4413      	add	r3, r2
 80094f4:	689a      	ldr	r2, [r3, #8]
 80094f6:	7dbb      	ldrb	r3, [r7, #22]
 80094f8:	f1c3 0303 	rsb	r3, r3, #3
 80094fc:	00db      	lsls	r3, r3, #3
 80094fe:	fa22 f103 	lsr.w	r1, r2, r3
 8009502:	7dbb      	ldrb	r3, [r7, #22]
 8009504:	005a      	lsls	r2, r3, #1
 8009506:	7dfb      	ldrb	r3, [r7, #23]
 8009508:	4413      	add	r3, r2
 800950a:	461a      	mov	r2, r3
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4413      	add	r3, r2
 8009510:	b2ca      	uxtb	r2, r1
 8009512:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8009514:	7dbb      	ldrb	r3, [r7, #22]
 8009516:	3301      	adds	r3, #1
 8009518:	75bb      	strb	r3, [r7, #22]
 800951a:	7dbb      	ldrb	r3, [r7, #22]
 800951c:	2b03      	cmp	r3, #3
 800951e:	d9e5      	bls.n	80094ec <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 8009520:	e07e      	b.n	8009620 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8009522:	7dfb      	ldrb	r3, [r7, #23]
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	4413      	add	r3, r2
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	b259      	sxtb	r1, r3
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8009530:	7dfb      	ldrb	r3, [r7, #23]
 8009532:	011b      	lsls	r3, r3, #4
 8009534:	68ba      	ldr	r2, [r7, #8]
 8009536:	4413      	add	r3, r2
 8009538:	685a      	ldr	r2, [r3, #4]
 800953a:	4613      	mov	r3, r2
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	4413      	add	r3, r2
 8009540:	4403      	add	r3, r0
 8009542:	791b      	ldrb	r3, [r3, #4]
 8009544:	00db      	lsls	r3, r3, #3
 8009546:	b25b      	sxtb	r3, r3
 8009548:	430b      	orrs	r3, r1
 800954a:	b259      	sxtb	r1, r3
 800954c:	7dfb      	ldrb	r3, [r7, #23]
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	4413      	add	r3, r2
 8009552:	b2ca      	uxtb	r2, r1
 8009554:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8009556:	7dfb      	ldrb	r3, [r7, #23]
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	4413      	add	r3, r2
 800955c:	7819      	ldrb	r1, [r3, #0]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8009562:	7dfb      	ldrb	r3, [r7, #23]
 8009564:	011b      	lsls	r3, r3, #4
 8009566:	68ba      	ldr	r2, [r7, #8]
 8009568:	4413      	add	r3, r2
 800956a:	689a      	ldr	r2, [r3, #8]
 800956c:	4613      	mov	r3, r2
 800956e:	00db      	lsls	r3, r3, #3
 8009570:	4413      	add	r3, r2
 8009572:	4403      	add	r3, r0
 8009574:	7a1a      	ldrb	r2, [r3, #8]
 8009576:	7dfb      	ldrb	r3, [r7, #23]
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	4403      	add	r3, r0
 800957c:	430a      	orrs	r2, r1
 800957e:	b2d2      	uxtb	r2, r2
 8009580:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8009582:	2301      	movs	r3, #1
 8009584:	75bb      	strb	r3, [r7, #22]
 8009586:	e016      	b.n	80095b6 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 8009588:	7dfb      	ldrb	r3, [r7, #23]
 800958a:	011b      	lsls	r3, r3, #4
 800958c:	68ba      	ldr	r2, [r7, #8]
 800958e:	4413      	add	r3, r2
 8009590:	68da      	ldr	r2, [r3, #12]
 8009592:	7dbb      	ldrb	r3, [r7, #22]
 8009594:	f1c3 0303 	rsb	r3, r3, #3
 8009598:	00db      	lsls	r3, r3, #3
 800959a:	fa22 f103 	lsr.w	r1, r2, r3
 800959e:	7dbb      	ldrb	r3, [r7, #22]
 80095a0:	005a      	lsls	r2, r3, #1
 80095a2:	7dfb      	ldrb	r3, [r7, #23]
 80095a4:	4413      	add	r3, r2
 80095a6:	461a      	mov	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4413      	add	r3, r2
 80095ac:	b2ca      	uxtb	r2, r1
 80095ae:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80095b0:	7dbb      	ldrb	r3, [r7, #22]
 80095b2:	3301      	adds	r3, #1
 80095b4:	75bb      	strb	r3, [r7, #22]
 80095b6:	7dbb      	ldrb	r3, [r7, #22]
 80095b8:	2b03      	cmp	r3, #3
 80095ba:	d9e5      	bls.n	8009588 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 80095bc:	e030      	b.n	8009620 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 80095be:	7dfb      	ldrb	r3, [r7, #23]
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	4413      	add	r3, r2
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	b259      	sxtb	r1, r3
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80095cc:	7dfb      	ldrb	r3, [r7, #23]
 80095ce:	011b      	lsls	r3, r3, #4
 80095d0:	68ba      	ldr	r2, [r7, #8]
 80095d2:	4413      	add	r3, r2
 80095d4:	685a      	ldr	r2, [r3, #4]
 80095d6:	4613      	mov	r3, r2
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	4413      	add	r3, r2
 80095dc:	4403      	add	r3, r0
 80095de:	791b      	ldrb	r3, [r3, #4]
 80095e0:	00db      	lsls	r3, r3, #3
 80095e2:	b25b      	sxtb	r3, r3
 80095e4:	430b      	orrs	r3, r1
 80095e6:	b259      	sxtb	r1, r3
 80095e8:	7dfb      	ldrb	r3, [r7, #23]
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	4413      	add	r3, r2
 80095ee:	b2ca      	uxtb	r2, r1
 80095f0:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 80095f2:	7dfb      	ldrb	r3, [r7, #23]
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	4413      	add	r3, r2
 80095f8:	7819      	ldrb	r1, [r3, #0]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80095fe:	7dfb      	ldrb	r3, [r7, #23]
 8009600:	011b      	lsls	r3, r3, #4
 8009602:	68ba      	ldr	r2, [r7, #8]
 8009604:	4413      	add	r3, r2
 8009606:	689a      	ldr	r2, [r3, #8]
 8009608:	4613      	mov	r3, r2
 800960a:	00db      	lsls	r3, r3, #3
 800960c:	4413      	add	r3, r2
 800960e:	4403      	add	r3, r0
 8009610:	7a1a      	ldrb	r2, [r3, #8]
 8009612:	7dfb      	ldrb	r3, [r7, #23]
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	4403      	add	r3, r0
 8009618:	430a      	orrs	r2, r1
 800961a:	b2d2      	uxtb	r2, r2
 800961c:	701a      	strb	r2, [r3, #0]
      break;
 800961e:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8009620:	7dfb      	ldrb	r3, [r7, #23]
 8009622:	3301      	adds	r3, #1
 8009624:	75fb      	strb	r3, [r7, #23]
 8009626:	7dfb      	ldrb	r3, [r7, #23]
 8009628:	2b01      	cmp	r3, #1
 800962a:	f67f ae0a 	bls.w	8009242 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 800962e:	bf00      	nop
 8009630:	bf00      	nop
 8009632:	371c      	adds	r7, #28
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <_ZN5L6470I8shield_2E11L6470_roundEf>:
    int L6470_round(float f)
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	ed87 0a00 	vstr	s0, [r7]
        if (f >= 0) {
 8009648:	edd7 7a00 	vldr	s15, [r7]
 800964c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009654:	db1e      	blt.n	8009694 <_ZN5L6470I8shield_2E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 8009656:	edd7 7a00 	vldr	s15, [r7]
 800965a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800965e:	ee17 2a90 	vmov	r2, s15
 8009662:	edd7 7a00 	vldr	s15, [r7]
 8009666:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800966a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800966e:	ed97 7a00 	vldr	s14, [r7]
 8009672:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009676:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800967a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800967e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009682:	bf4c      	ite	mi
 8009684:	2301      	movmi	r3, #1
 8009686:	2300      	movpl	r3, #0
 8009688:	b2db      	uxtb	r3, r3
 800968a:	f083 0301 	eor.w	r3, r3, #1
 800968e:	b2db      	uxtb	r3, r3
 8009690:	4413      	add	r3, r2
 8009692:	e01a      	b.n	80096ca <_ZN5L6470I8shield_2E11L6470_roundEf+0x8e>
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 8009694:	edd7 7a00 	vldr	s15, [r7]
 8009698:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800969c:	ee17 2a90 	vmov	r2, s15
 80096a0:	edd7 7a00 	vldr	s15, [r7]
 80096a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80096a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80096ac:	ed97 7a00 	vldr	s14, [r7]
 80096b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096b4:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80096b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80096bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096c0:	d501      	bpl.n	80096c6 <_ZN5L6470I8shield_2E11L6470_roundEf+0x8a>
 80096c2:	2301      	movs	r3, #1
 80096c4:	e000      	b.n	80096c8 <_ZN5L6470I8shield_2E11L6470_roundEf+0x8c>
 80096c6:	2300      	movs	r3, #0
 80096c8:	1ad3      	subs	r3, r2, r3
    }
 80096ca:	4618      	mov	r0, r3
 80096cc:	370c      	adds	r7, #12
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr

080096d6 <_ZN5L6470I8shield_2E4ReadEPht>:
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b086      	sub	sp, #24
 80096da:	af00      	add	r7, sp, #0
 80096dc:	60f8      	str	r0, [r7, #12]
 80096de:	60b9      	str	r1, [r7, #8]
 80096e0:	4613      	mov	r3, r2
 80096e2:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	6918      	ldr	r0, [r3, #16]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	8a9b      	ldrh	r3, [r3, #20]
 80096ec:	2200      	movs	r2, #0
 80096ee:	4619      	mov	r1, r3
 80096f0:	f004 fba6 	bl	800de40 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	6998      	ldr	r0, [r3, #24]
 80096f8:	88fa      	ldrh	r2, [r7, #6]
 80096fa:	2364      	movs	r3, #100	@ 0x64
 80096fc:	68b9      	ldr	r1, [r7, #8]
 80096fe:	f005 fbb6 	bl	800ee6e <HAL_SPI_Receive>
 8009702:	4603      	mov	r3, r0
 8009704:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6918      	ldr	r0, [r3, #16]
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	8a9b      	ldrh	r3, [r3, #20]
 800970e:	2201      	movs	r2, #1
 8009710:	4619      	mov	r1, r3
 8009712:	f004 fb95 	bl	800de40 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8009716:	7dfb      	ldrb	r3, [r7, #23]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d001      	beq.n	8009720 <_ZN5L6470I8shield_2E4ReadEPht+0x4a>
        	return COMPONENT_ERROR;
 800971c:	2301      	movs	r3, #1
 800971e:	e000      	b.n	8009722 <_ZN5L6470I8shield_2E4ReadEPht+0x4c>
        return COMPONENT_OK;
 8009720:	2300      	movs	r3, #0
    }
 8009722:	4618      	mov	r0, r3
 8009724:	3718      	adds	r7, #24
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}

0800972a <_ZN5L6470I8shield_2E5WriteEPht>:
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 800972a:	b580      	push	{r7, lr}
 800972c:	b086      	sub	sp, #24
 800972e:	af00      	add	r7, sp, #0
 8009730:	60f8      	str	r0, [r7, #12]
 8009732:	60b9      	str	r1, [r7, #8]
 8009734:	4613      	mov	r3, r2
 8009736:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6918      	ldr	r0, [r3, #16]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	8a9b      	ldrh	r3, [r3, #20]
 8009740:	2200      	movs	r2, #0
 8009742:	4619      	mov	r1, r3
 8009744:	f004 fb7c 	bl	800de40 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6998      	ldr	r0, [r3, #24]
 800974c:	88fa      	ldrh	r2, [r7, #6]
 800974e:	2364      	movs	r3, #100	@ 0x64
 8009750:	68b9      	ldr	r1, [r7, #8]
 8009752:	f005 fa50 	bl	800ebf6 <HAL_SPI_Transmit>
 8009756:	4603      	mov	r3, r0
 8009758:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	6918      	ldr	r0, [r3, #16]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	8a9b      	ldrh	r3, [r3, #20]
 8009762:	2201      	movs	r2, #1
 8009764:	4619      	mov	r1, r3
 8009766:	f004 fb6b 	bl	800de40 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 800976a:	7dfb      	ldrb	r3, [r7, #23]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d001      	beq.n	8009774 <_ZN5L6470I8shield_2E5WriteEPht+0x4a>
        	return COMPONENT_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	e000      	b.n	8009776 <_ZN5L6470I8shield_2E5WriteEPht+0x4c>
        return COMPONENT_OK;
 8009774:	2300      	movs	r3, #0
    }
 8009776:	4618      	mov	r0, r3
 8009778:	3718      	adds	r7, #24
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}

0800977e <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t>:
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 800977e:	b580      	push	{r7, lr}
 8009780:	b088      	sub	sp, #32
 8009782:	af02      	add	r7, sp, #8
 8009784:	60f8      	str	r0, [r7, #12]
 8009786:	60b9      	str	r1, [r7, #8]
 8009788:	607a      	str	r2, [r7, #4]
 800978a:	807b      	strh	r3, [r7, #2]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	6918      	ldr	r0, [r3, #16]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	8a9b      	ldrh	r3, [r3, #20]
 8009794:	2200      	movs	r2, #0
 8009796:	4619      	mov	r1, r3
 8009798:	f004 fb52 	bl	800de40 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	6998      	ldr	r0, [r3, #24]
 80097a0:	887b      	ldrh	r3, [r7, #2]
 80097a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80097a6:	9200      	str	r2, [sp, #0]
 80097a8:	68ba      	ldr	r2, [r7, #8]
 80097aa:	6879      	ldr	r1, [r7, #4]
 80097ac:	f005 fc70 	bl	800f090 <HAL_SPI_TransmitReceive>
 80097b0:	4603      	mov	r3, r0
 80097b2:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 80097b4:	7dfb      	ldrb	r3, [r7, #23]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d009      	beq.n	80097ce <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t+0x50>
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6918      	ldr	r0, [r3, #16]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	8a9b      	ldrh	r3, [r3, #20]
 80097c2:	2201      	movs	r2, #1
 80097c4:	4619      	mov	r1, r3
 80097c6:	f004 fb3b 	bl	800de40 <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 80097ca:	2301      	movs	r3, #1
 80097cc:	e008      	b.n	80097e0 <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t+0x62>
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6918      	ldr	r0, [r3, #16]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	8a9b      	ldrh	r3, [r3, #20]
 80097d6:	2201      	movs	r2, #1
 80097d8:	4619      	mov	r1, r3
 80097da:	f004 fb31 	bl	800de40 <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 80097de:	2300      	movs	r3, #0
    }
 80097e0:	4618      	mov	r0, r3
 80097e2:	3718      	adds	r7, #24
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <_ZN5L6470I8shield_2E23L6470_SPI_CommunicationEPhS2_tm>:
    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 80097e8:	b590      	push	{r4, r7, lr}
 80097ea:	b085      	sub	sp, #20
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	607a      	str	r2, [r7, #4]
 80097f4:	807b      	strh	r3, [r7, #2]
        ReadWrite(pRxData, pTxData, Size);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80097fe:	681c      	ldr	r4, [r3, #0]
 8009800:	887b      	ldrh	r3, [r7, #2]
 8009802:	68ba      	ldr	r2, [r7, #8]
 8009804:	6879      	ldr	r1, [r7, #4]
 8009806:	68f8      	ldr	r0, [r7, #12]
 8009808:	47a0      	blx	r4
    }
 800980a:	bf00      	nop
 800980c:	3714      	adds	r7, #20
 800980e:	46bd      	mov	sp, r7
 8009810:	bd90      	pop	{r4, r7, pc}

08009812 <_ZN5L6470I8shield_1E4initEPv>:
    virtual int init(void *init)
 8009812:	b580      	push	{r7, lr}
 8009814:	b082      	sub	sp, #8
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
 800981a:	6039      	str	r1, [r7, #0]
        return (int) L6470_Config((void *) init);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	6839      	ldr	r1, [r7, #0]
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	4798      	blx	r3
 800982c:	4603      	mov	r3, r0
    }
 800982e:	4618      	mov	r0, r3
 8009830:	3708      	adds	r7, #8
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <_ZN5L6470I8shield_1E10get_statusEv>:
    virtual unsigned int get_status(void)
 8009836:	b580      	push	{r7, lr}
 8009838:	b082      	sub	sp, #8
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
        return (unsigned int) L6470_GetStatus();
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	4798      	blx	r3
 800984c:	4603      	mov	r3, r0
    }
 800984e:	4618      	mov	r0, r3
 8009850:	3708      	adds	r7, #8
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <_ZN5L6470I8shield_1E13get_parameterEj>:
    virtual unsigned int get_parameter(unsigned int parameter)
 8009856:	b580      	push	{r7, lr}
 8009858:	b082      	sub	sp, #8
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
 800985e:	6039      	str	r1, [r7, #0]
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	683a      	ldr	r2, [r7, #0]
 800986c:	b2d2      	uxtb	r2, r2
 800986e:	4611      	mov	r1, r2
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	4798      	blx	r3
 8009874:	4603      	mov	r3, r0
    }
 8009876:	4618      	mov	r0, r3
 8009878:	3708      	adds	r7, #8
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <_ZN5L6470I8shield_1E12get_positionEv>:
    virtual signed int get_position(void)
 800987e:	b590      	push	{r4, r7, lr}
 8009880:	b083      	sub	sp, #12
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800988e:	681c      	ldr	r4, [r3, #0]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2100      	movs	r1, #0
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	4798      	blx	r3
 80098a0:	4603      	mov	r3, r0
 80098a2:	4619      	mov	r1, r3
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	47a0      	blx	r4
 80098a8:	4603      	mov	r3, r0
    }
 80098aa:	4618      	mov	r0, r3
 80098ac:	370c      	adds	r7, #12
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd90      	pop	{r4, r7, pc}

080098b2 <_ZN5L6470I8shield_1E8get_markEv>:
    virtual signed int get_mark(void)
 80098b2:	b590      	push	{r4, r7, lr}
 80098b4:	b083      	sub	sp, #12
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 80098c2:	681c      	ldr	r4, [r3, #0]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	2102      	movs	r1, #2
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	4798      	blx	r3
 80098d4:	4603      	mov	r3, r0
 80098d6:	4619      	mov	r1, r3
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	47a0      	blx	r4
 80098dc:	4603      	mov	r3, r0
    }
 80098de:	4618      	mov	r0, r3
 80098e0:	370c      	adds	r7, #12
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd90      	pop	{r4, r7, pc}

080098e6 <_ZN5L6470I8shield_1E9get_speedEv>:
    virtual unsigned int get_speed(void)
 80098e6:	b5b0      	push	{r4, r5, r7, lr}
 80098e8:	b082      	sub	sp, #8
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80098f6:	681c      	ldr	r4, [r3, #0]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8009900:	681d      	ldr	r5, [r3, #0]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	2103      	movs	r1, #3
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	4798      	blx	r3
 8009912:	4603      	mov	r3, r0
 8009914:	4619      	mov	r1, r3
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	47a8      	blx	r5
 800991a:	eef0 7a40 	vmov.f32	s15, s0
 800991e:	eeb0 0a67 	vmov.f32	s0, s15
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	47a0      	blx	r4
 8009926:	4603      	mov	r3, r0
    }
 8009928:	4618      	mov	r0, r3
 800992a:	3708      	adds	r7, #8
 800992c:	46bd      	mov	sp, r7
 800992e:	bdb0      	pop	{r4, r5, r7, pc}

08009930 <_ZN5L6470I8shield_1E13get_max_speedEv>:
    virtual unsigned int get_max_speed(void)
 8009930:	b5b0      	push	{r4, r5, r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009940:	681c      	ldr	r4, [r3, #0]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800994a:	681d      	ldr	r5, [r3, #0]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	2106      	movs	r1, #6
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	4798      	blx	r3
 800995c:	4603      	mov	r3, r0
 800995e:	b29b      	uxth	r3, r3
 8009960:	4619      	mov	r1, r3
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	47a8      	blx	r5
 8009966:	eef0 7a40 	vmov.f32	s15, s0
 800996a:	eeb0 0a67 	vmov.f32	s0, s15
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	47a0      	blx	r4
 8009972:	4603      	mov	r3, r0
    }
 8009974:	4618      	mov	r0, r3
 8009976:	3708      	adds	r7, #8
 8009978:	46bd      	mov	sp, r7
 800997a:	bdb0      	pop	{r4, r5, r7, pc}

0800997c <_ZN5L6470I8shield_1E13get_min_speedEv>:
    virtual unsigned int get_min_speed(void)
 800997c:	b5b0      	push	{r4, r5, r7, lr}
 800997e:	b082      	sub	sp, #8
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800998c:	681c      	ldr	r4, [r3, #0]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009996:	681d      	ldr	r5, [r3, #0]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	2107      	movs	r1, #7
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	4798      	blx	r3
 80099a8:	4603      	mov	r3, r0
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	4619      	mov	r1, r3
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	47a8      	blx	r5
 80099b2:	eef0 7a40 	vmov.f32	s15, s0
 80099b6:	eeb0 0a67 	vmov.f32	s0, s15
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	47a0      	blx	r4
 80099be:	4603      	mov	r3, r0
    }
 80099c0:	4618      	mov	r0, r3
 80099c2:	3708      	adds	r7, #8
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bdb0      	pop	{r4, r5, r7, pc}

080099c8 <_ZN5L6470I8shield_1E16get_accelerationEv>:
    virtual unsigned int get_acceleration(void)
 80099c8:	b5b0      	push	{r4, r5, r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80099d8:	681c      	ldr	r4, [r3, #0]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80099e2:	681d      	ldr	r5, [r3, #0]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	2104      	movs	r1, #4
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	4798      	blx	r3
 80099f4:	4603      	mov	r3, r0
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	4619      	mov	r1, r3
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	47a8      	blx	r5
 80099fe:	eef0 7a40 	vmov.f32	s15, s0
 8009a02:	eeb0 0a67 	vmov.f32	s0, s15
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	47a0      	blx	r4
 8009a0a:	4603      	mov	r3, r0
    }
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3708      	adds	r7, #8
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bdb0      	pop	{r4, r5, r7, pc}

08009a14 <_ZN5L6470I8shield_1E16get_decelerationEv>:
    virtual unsigned int get_deceleration(void)
 8009a14:	b5b0      	push	{r4, r5, r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009a24:	681c      	ldr	r4, [r3, #0]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8009a2e:	681d      	ldr	r5, [r3, #0]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2105      	movs	r1, #5
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	4798      	blx	r3
 8009a40:	4603      	mov	r3, r0
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	4619      	mov	r1, r3
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	47a8      	blx	r5
 8009a4a:	eef0 7a40 	vmov.f32	s15, s0
 8009a4e:	eeb0 0a67 	vmov.f32	s0, s15
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	47a0      	blx	r4
 8009a56:	4603      	mov	r3, r0
    }
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3708      	adds	r7, #8
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bdb0      	pop	{r4, r5, r7, pc}

08009a60 <_ZN5L6470I8shield_1E13get_directionEv>:
    virtual StepperMotor::direction_t get_direction(void)
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	2104      	movs	r1, #4
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	4798      	blx	r3
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b01      	cmp	r3, #1
 8009a7c:	d101      	bne.n	8009a82 <_ZN5L6470I8shield_1E13get_directionEv+0x22>
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e000      	b.n	8009a84 <_ZN5L6470I8shield_1E13get_directionEv+0x24>
 8009a82:	2300      	movs	r3, #0
    }
 8009a84:	4618      	mov	r0, r3
 8009a86:	3708      	adds	r7, #8
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <_ZN5L6470I8shield_1E13set_parameterEjj>:
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	60b9      	str	r1, [r7, #8]
 8009a96:	607a      	str	r2, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	68ba      	ldr	r2, [r7, #8]
 8009aa4:	b2d1      	uxtb	r1, r2
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	68f8      	ldr	r0, [r7, #12]
 8009aaa:	4798      	blx	r3
    }
 8009aac:	bf00      	nop
 8009aae:	3710      	adds	r7, #16
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <_ZN5L6470I8shield_1E8set_homeEv>:
    virtual void set_home(void)
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
        L6470_ResetPos();
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	4798      	blx	r3
    }
 8009aca:	bf00      	nop
 8009acc:	3708      	adds	r7, #8
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <_ZN5L6470I8shield_1E8set_markEv>:
    virtual void set_mark(void)
 8009ad2:	b590      	push	{r4, r7, lr}
 8009ad4:	b083      	sub	sp, #12
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8009ae2:	681c      	ldr	r4, [r3, #0]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	2100      	movs	r1, #0
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	4798      	blx	r3
 8009af4:	4603      	mov	r3, r0
 8009af6:	461a      	mov	r2, r3
 8009af8:	2102      	movs	r1, #2
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	47a0      	blx	r4
    }
 8009afe:	bf00      	nop
 8009b00:	370c      	adds	r7, #12
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd90      	pop	{r4, r7, pc}

08009b06 <_ZN5L6470I8shield_1E8set_markEi>:
    virtual void set_mark(signed int position)
 8009b06:	b590      	push	{r4, r7, lr}
 8009b08:	b083      	sub	sp, #12
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
 8009b0e:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8009b18:	681c      	ldr	r4, [r3, #0]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	6839      	ldr	r1, [r7, #0]
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	4798      	blx	r3
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	2102      	movs	r1, #2
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	47a0      	blx	r4
    }
 8009b34:	bf00      	nop
 8009b36:	370c      	adds	r7, #12
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd90      	pop	{r4, r7, pc}

08009b3c <_ZN5L6470I8shield_1E13set_max_speedEj>:
    virtual bool set_max_speed(unsigned int speed)
 8009b3c:	b590      	push	{r4, r7, lr}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8009b4e:	681c      	ldr	r4, [r3, #0]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	683a      	ldr	r2, [r7, #0]
 8009b5c:	ee07 2a90 	vmov	s15, r2
 8009b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b64:	eeb0 0a67 	vmov.f32	s0, s15
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	4798      	blx	r3
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	461a      	mov	r2, r3
 8009b70:	2106      	movs	r1, #6
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	47a0      	blx	r4
        return true;
 8009b76:	2301      	movs	r3, #1
    }
 8009b78:	4618      	mov	r0, r3
 8009b7a:	370c      	adds	r7, #12
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd90      	pop	{r4, r7, pc}

08009b80 <_ZN5L6470I8shield_1E13set_min_speedEj>:
    virtual bool set_min_speed(unsigned int speed)
 8009b80:	b590      	push	{r4, r7, lr}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8009b92:	681c      	ldr	r4, [r3, #0]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	683a      	ldr	r2, [r7, #0]
 8009ba0:	ee07 2a90 	vmov	s15, r2
 8009ba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ba8:	eeb0 0a67 	vmov.f32	s0, s15
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	4798      	blx	r3
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	2107      	movs	r1, #7
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	47a0      	blx	r4
        return true;
 8009bba:	2301      	movs	r3, #1
    }
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	370c      	adds	r7, #12
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd90      	pop	{r4, r7, pc}

08009bc4 <_ZN5L6470I8shield_1E16set_accelerationEj>:
    virtual bool set_acceleration(unsigned int acceleration)
 8009bc4:	b590      	push	{r4, r7, lr}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8009bd6:	681c      	ldr	r4, [r3, #0]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	683a      	ldr	r2, [r7, #0]
 8009be4:	ee07 2a90 	vmov	s15, r2
 8009be8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bec:	eeb0 0a67 	vmov.f32	s0, s15
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	4798      	blx	r3
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	2104      	movs	r1, #4
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	47a0      	blx	r4
        return true;
 8009bfe:	2301      	movs	r3, #1
    }
 8009c00:	4618      	mov	r0, r3
 8009c02:	370c      	adds	r7, #12
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd90      	pop	{r4, r7, pc}

08009c08 <_ZN5L6470I8shield_1E16set_decelerationEj>:
    virtual bool set_deceleration(unsigned int deceleration)
 8009c08:	b590      	push	{r4, r7, lr}
 8009c0a:	b083      	sub	sp, #12
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8009c1a:	681c      	ldr	r4, [r3, #0]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	683a      	ldr	r2, [r7, #0]
 8009c28:	ee07 2a90 	vmov	s15, r2
 8009c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c30:	eeb0 0a67 	vmov.f32	s0, s15
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	4798      	blx	r3
 8009c38:	4603      	mov	r3, r0
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	2105      	movs	r1, #5
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	47a0      	blx	r4
        return true;
 8009c42:	2301      	movs	r3, #1
    }
 8009c44:	4618      	mov	r0, r3
 8009c46:	370c      	adds	r7, #12
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd90      	pop	{r4, r7, pc}

08009c4c <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE>:
    virtual bool set_step_mode(step_mode_t step_mode)
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	460b      	mov	r3, r1
 8009c56:	70fb      	strb	r3, [r7, #3]
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 8009c58:	78fb      	ldrb	r3, [r7, #3]
 8009c5a:	2b07      	cmp	r3, #7
 8009c5c:	d901      	bls.n	8009c62 <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	e00f      	b.n	8009c82 <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        soft_hiz();
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	3380      	adds	r3, #128	@ 0x80
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	78fa      	ldrb	r2, [r7, #3]
 8009c7a:	2115      	movs	r1, #21
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	4798      	blx	r3
        return true;
 8009c80:	2301      	movs	r3, #1
    }
 8009c82:	4618      	mov	r0, r3
 8009c84:	3708      	adds	r7, #8
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}

08009c8a <_ZN5L6470I8shield_1E5go_toEi>:
    virtual void go_to(signed int position)
 8009c8a:	b590      	push	{r4, r7, lr}
 8009c8c:	b083      	sub	sp, #12
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
 8009c92:	6039      	str	r1, [r7, #0]
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8009c9c:	681c      	ldr	r4, [r3, #0]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	6839      	ldr	r1, [r7, #0]
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	4798      	blx	r3
 8009cae:	4603      	mov	r3, r0
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	47a0      	blx	r4
    }
 8009cb6:	bf00      	nop
 8009cb8:	370c      	adds	r7, #12
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd90      	pop	{r4, r7, pc}

08009cbe <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE>:
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 8009cbe:	b5b0      	push	{r4, r5, r7, lr}
 8009cc0:	b084      	sub	sp, #16
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	60f8      	str	r0, [r7, #12]
 8009cc6:	60b9      	str	r1, [r7, #8]
 8009cc8:	4613      	mov	r3, r2
 8009cca:	71fb      	strb	r3, [r7, #7]
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8009cd4:	681c      	ldr	r4, [r3, #0]
 8009cd6:	79fb      	ldrb	r3, [r7, #7]
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d101      	bne.n	8009ce0 <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE+0x22>
 8009cdc:	2501      	movs	r5, #1
 8009cde:	e000      	b.n	8009ce2 <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE+0x24>
 8009ce0:	2500      	movs	r5, #0
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	68b9      	ldr	r1, [r7, #8]
 8009cee:	68f8      	ldr	r0, [r7, #12]
 8009cf0:	4798      	blx	r3
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	4629      	mov	r1, r5
 8009cf8:	68f8      	ldr	r0, [r7, #12]
 8009cfa:	47a0      	blx	r4
    }
 8009cfc:	bf00      	nop
 8009cfe:	3710      	adds	r7, #16
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bdb0      	pop	{r4, r5, r7, pc}

08009d04 <_ZN5L6470I8shield_1E7go_homeEv>:
    virtual void go_home(void)
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
        L6470_GoHome();
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	4798      	blx	r3
    }
 8009d1a:	bf00      	nop
 8009d1c:	3708      	adds	r7, #8
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <_ZN5L6470I8shield_1E7go_markEv>:
    virtual void go_mark(void)
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b082      	sub	sp, #8
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
        L6470_GoMark();
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	4798      	blx	r3
    }
 8009d38:	bf00      	nop
 8009d3a:	3708      	adds	r7, #8
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 8009d40:	b5b0      	push	{r4, r5, r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	60f8      	str	r0, [r7, #12]
 8009d48:	607b      	str	r3, [r7, #4]
 8009d4a:	460b      	mov	r3, r1
 8009d4c:	72fb      	strb	r3, [r7, #11]
 8009d4e:	4613      	mov	r3, r2
 8009d50:	72bb      	strb	r3, [r7, #10]
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8009d5a:	681c      	ldr	r4, [r3, #0]
 8009d5c:	7abb      	ldrb	r3, [r7, #10]
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d101      	bne.n	8009d66 <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8009d62:	2501      	movs	r5, #1
 8009d64:	e000      	b.n	8009d68 <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8009d66:	2500      	movs	r5, #0
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	ee07 2a90 	vmov	s15, r2
 8009d78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d7c:	eeb0 0a67 	vmov.f32	s0, s15
 8009d80:	68f8      	ldr	r0, [r7, #12]
 8009d82:	4798      	blx	r3
 8009d84:	4603      	mov	r3, r0
 8009d86:	7af9      	ldrb	r1, [r7, #11]
 8009d88:	462a      	mov	r2, r5
 8009d8a:	68f8      	ldr	r0, [r7, #12]
 8009d8c:	47a0      	blx	r4
    }
 8009d8e:	bf00      	nop
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bdb0      	pop	{r4, r5, r7, pc}

08009d96 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE>:
    virtual void run(StepperMotor::direction_t direction)
 8009d96:	b5b0      	push	{r4, r5, r7, lr}
 8009d98:	b082      	sub	sp, #8
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
 8009d9e:	460b      	mov	r3, r1
 8009da0:	70fb      	strb	r3, [r7, #3]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8009daa:	681c      	ldr	r4, [r3, #0]
 8009dac:	78fb      	ldrb	r3, [r7, #3]
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d101      	bne.n	8009db6 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE+0x20>
 8009db2:	2501      	movs	r5, #1
 8009db4:	e000      	b.n	8009db8 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE+0x22>
 8009db6:	2500      	movs	r5, #0
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	2106      	movs	r1, #6
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	4798      	blx	r3
 8009dc8:	4603      	mov	r3, r0
 8009dca:	461a      	mov	r2, r3
 8009dcc:	4629      	mov	r1, r5
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	47a0      	blx	r4
    }
 8009dd2:	bf00      	nop
 8009dd4:	3708      	adds	r7, #8
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bdb0      	pop	{r4, r5, r7, pc}

08009dda <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj>:
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 8009dda:	b5b0      	push	{r4, r5, r7, lr}
 8009ddc:	b084      	sub	sp, #16
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	60f8      	str	r0, [r7, #12]
 8009de2:	460b      	mov	r3, r1
 8009de4:	607a      	str	r2, [r7, #4]
 8009de6:	72fb      	strb	r3, [r7, #11]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8009df0:	681c      	ldr	r4, [r3, #0]
 8009df2:	7afb      	ldrb	r3, [r7, #11]
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d101      	bne.n	8009dfc <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj+0x22>
 8009df8:	2501      	movs	r5, #1
 8009dfa:	e000      	b.n	8009dfe <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj+0x24>
 8009dfc:	2500      	movs	r5, #0
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	ee07 2a90 	vmov	s15, r2
 8009e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e12:	eeb0 0a67 	vmov.f32	s0, s15
 8009e16:	68f8      	ldr	r0, [r7, #12]
 8009e18:	4798      	blx	r3
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	4629      	mov	r1, r5
 8009e20:	68f8      	ldr	r0, [r7, #12]
 8009e22:	47a0      	blx	r4
    }
 8009e24:	bf00      	nop
 8009e26:	3710      	adds	r7, #16
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bdb0      	pop	{r4, r5, r7, pc}

08009e2c <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj>:
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	460b      	mov	r3, r1
 8009e36:	607a      	str	r2, [r7, #4]
 8009e38:	72fb      	strb	r3, [r7, #11]
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	7afa      	ldrb	r2, [r7, #11]
 8009e46:	2a01      	cmp	r2, #1
 8009e48:	d101      	bne.n	8009e4e <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj+0x22>
 8009e4a:	2101      	movs	r1, #1
 8009e4c:	e000      	b.n	8009e50 <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj+0x24>
 8009e4e:	2100      	movs	r1, #0
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	68f8      	ldr	r0, [r7, #12]
 8009e54:	4798      	blx	r3
    }
 8009e56:	bf00      	nop
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <_ZN5L6470I8shield_1E9soft_stopEv>:
    virtual void soft_stop(void)
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b082      	sub	sp, #8
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
        L6470_SoftStop();
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	4798      	blx	r3
    }
 8009e74:	bf00      	nop
 8009e76:	3708      	adds	r7, #8
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <_ZN5L6470I8shield_1E9hard_stopEv>:
    virtual void hard_stop(void)
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
        L6470_HardStop();
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	4798      	blx	r3
    }
 8009e92:	bf00      	nop
 8009e94:	3708      	adds	r7, #8
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}

08009e9a <_ZN5L6470I8shield_1E8soft_hizEv>:
    virtual void soft_hiz(void)
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b082      	sub	sp, #8
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
        L6470_SoftHiZ();
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	4798      	blx	r3
    }
 8009eb0:	bf00      	nop
 8009eb2:	3708      	adds	r7, #8
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <_ZN5L6470I8shield_1E8hard_hizEv>:
    virtual void hard_hiz(void)
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
        L6470_HardHiZ();
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f503 73ee 	add.w	r3, r3, #476	@ 0x1dc
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	4798      	blx	r3
    }
 8009ece:	bf00      	nop
 8009ed0:	3708      	adds	r7, #8
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <_ZN5L6470I8shield_1E17wait_while_activeEv>:
    virtual void wait_while_active(void)
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b082      	sub	sp, #8
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 8009ede:	bf00      	nop
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	2101      	movs	r1, #1
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	4798      	blx	r3
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	bf0c      	ite	eq
 8009ef6:	2301      	moveq	r3, #1
 8009ef8:	2300      	movne	r3, #0
 8009efa:	b2db      	uxtb	r3, r3
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d1ef      	bne.n	8009ee0 <_ZN5L6470I8shield_1E17wait_while_activeEv+0xa>
    }
 8009f00:	bf00      	nop
 8009f02:	bf00      	nop
 8009f04:	3708      	adds	r7, #8
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE>:
    virtual void step_clock(StepperMotor::direction_t direction)
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b082      	sub	sp, #8
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
 8009f12:	460b      	mov	r3, r1
 8009f14:	70fb      	strb	r3, [r7, #3]
        soft_hiz();
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	3380      	adds	r3, #128	@ 0x80
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	78fa      	ldrb	r2, [r7, #3]
 8009f2e:	2a01      	cmp	r2, #1
 8009f30:	d101      	bne.n	8009f36 <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE+0x2c>
 8009f32:	2201      	movs	r2, #1
 8009f34:	e000      	b.n	8009f38 <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE+0x2e>
 8009f36:	2200      	movs	r2, #0
 8009f38:	4611      	mov	r1, r2
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	4798      	blx	r3
    }
 8009f3e:	bf00      	nop
 8009f40:	3708      	adds	r7, #8
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b082      	sub	sp, #8
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
 8009f4e:	460b      	mov	r3, r1
 8009f50:	70fb      	strb	r3, [r7, #3]
 8009f52:	4613      	mov	r3, r2
 8009f54:	70bb      	strb	r3, [r7, #2]
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	78ba      	ldrb	r2, [r7, #2]
 8009f62:	2a01      	cmp	r2, #1
 8009f64:	d101      	bne.n	8009f6a <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8009f66:	2201      	movs	r2, #1
 8009f68:	e000      	b.n	8009f6c <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	78f9      	ldrb	r1, [r7, #3]
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	4798      	blx	r3
    }
 8009f72:	bf00      	nop
 8009f74:	3708      	adds	r7, #8
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <_ZN5L6470I8shield_1E12reset_deviceEv>:
    virtual void reset_device(void)
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b082      	sub	sp, #8
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
        L6470_ResetDevice();
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	4798      	blx	r3
    }
 8009f90:	bf00      	nop
 8009f92:	3708      	adds	r7, #8
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <_ZN5L6470I8shield_1E18prepare_get_statusEv>:
    virtual void prepare_get_status(void)
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetStatus();
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009fb6:	bf00      	nop
 8009fb8:	3708      	adds	r7, #8
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <_ZN5L6470I8shield_1E21prepare_get_parameterEj>:
    virtual void prepare_get_parameter(unsigned int parameter)
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b082      	sub	sp, #8
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
 8009fc6:	6039      	str	r1, [r7, #0]
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	683a      	ldr	r2, [r7, #0]
 8009fd4:	b2d2      	uxtb	r2, r2
 8009fd6:	4611      	mov	r1, r2
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009fe4:	bf00      	nop
 8009fe6:	3708      	adds	r7, #8
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <_ZN5L6470I8shield_1E20prepare_get_positionEv>:
    virtual void prepare_get_position(void)
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2100      	movs	r1, #0
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2201      	movs	r2, #1
 800a008:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a00c:	bf00      	nop
 800a00e:	3708      	adds	r7, #8
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <_ZN5L6470I8shield_1E16prepare_get_markEv>:
    virtual void prepare_get_mark(void)
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	2102      	movs	r1, #2
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2202      	movs	r2, #2
 800a030:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a034:	bf00      	nop
 800a036:	3708      	adds	r7, #8
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <_ZN5L6470I8shield_1E17prepare_get_speedEv>:
    virtual void prepare_get_speed(void)
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	2103      	movs	r1, #3
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2203      	movs	r2, #3
 800a058:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a05c:	bf00      	nop
 800a05e:	3708      	adds	r7, #8
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <_ZN5L6470I8shield_1E21prepare_get_max_speedEv>:
    virtual void prepare_get_max_speed(void)
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	2106      	movs	r1, #6
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2204      	movs	r2, #4
 800a080:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a084:	bf00      	nop
 800a086:	3708      	adds	r7, #8
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <_ZN5L6470I8shield_1E21prepare_get_min_speedEv>:
    virtual void prepare_get_min_speed(void)
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	2107      	movs	r1, #7
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2205      	movs	r2, #5
 800a0a8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a0ac:	bf00      	nop
 800a0ae:	3708      	adds	r7, #8
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <_ZN5L6470I8shield_1E24prepare_get_accelerationEv>:
    virtual void prepare_get_acceleration(void)
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	2104      	movs	r1, #4
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2206      	movs	r2, #6
 800a0d0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a0d4:	bf00      	nop
 800a0d6:	3708      	adds	r7, #8
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <_ZN5L6470I8shield_1E24prepare_get_decelerationEv>:
    virtual void prepare_get_deceleration(void)
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	2105      	movs	r1, #5
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2207      	movs	r2, #7
 800a0f8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a0fc:	bf00      	nop
 800a0fe:	3708      	adds	r7, #8
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <_ZN5L6470I8shield_1E21prepare_get_directionEv>:
    virtual void prepare_get_direction(void)
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
        if (!L6470_DaisyChain_HalfPrepared) {
 800a10c:	4b0b      	ldr	r3, [pc, #44]	@ (800a13c <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x38>)
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d10a      	bne.n	800a12a <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x26>
            L6470_DaisyChain_HalfPrepared = ONE_F;
 800a114:	4b09      	ldr	r3, [pc, #36]	@ (800a13c <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x38>)
 800a116:	2201      	movs	r2, #1
 800a118:	701a      	strb	r2, [r3, #0]
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4906      	ldr	r1, [pc, #24]	@ (800a140 <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x3c>)
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	4798      	blx	r3
        prepared_action = PREPARED_GET_DIRECTION;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2208      	movs	r2, #8
 800a12e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a132:	bf00      	nop
 800a134:	3708      	adds	r7, #8
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	2000024d 	.word	0x2000024d
 800a140:	20000250 	.word	0x20000250

0800a144 <_ZN5L6470I8shield_1E21prepare_set_parameterEjj>:
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	607a      	str	r2, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	68ba      	ldr	r2, [r7, #8]
 800a15c:	b2d1      	uxtb	r1, r2
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	68f8      	ldr	r0, [r7, #12]
 800a162:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2200      	movs	r2, #0
 800a168:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a16c:	bf00      	nop
 800a16e:	3710      	adds	r7, #16
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <_ZN5L6470I8shield_1E16prepare_set_homeEv>:
    virtual void prepare_set_home(void)
 800a174:	b580      	push	{r7, lr}
 800a176:	b082      	sub	sp, #8
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetPos();
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2200      	movs	r2, #0
 800a18e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a192:	bf00      	nop
 800a194:	3708      	adds	r7, #8
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <_ZN5L6470I8shield_1E16prepare_set_markEv>:
    virtual void prepare_set_mark(void)
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b082      	sub	sp, #8
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	2102      	movs	r1, #2
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2209      	movs	r2, #9
 800a1b8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a1bc:	bf00      	nop
 800a1be:	3708      	adds	r7, #8
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <_ZN5L6470I8shield_1E16prepare_set_markEi>:
    virtual void prepare_set_mark(signed int position)
 800a1c4:	b590      	push	{r4, r7, lr}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a1d6:	681c      	ldr	r4, [r3, #0]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	6839      	ldr	r1, [r7, #0]
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	4798      	blx	r3
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	2102      	movs	r1, #2
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a1fa:	bf00      	nop
 800a1fc:	370c      	adds	r7, #12
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd90      	pop	{r4, r7, pc}

0800a202 <_ZN5L6470I8shield_1E17prepare_set_speedEj>:
    virtual void prepare_set_speed(unsigned int speed)
 800a202:	b590      	push	{r4, r7, lr}
 800a204:	b083      	sub	sp, #12
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
 800a20a:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a214:	681c      	ldr	r4, [r3, #0]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	683a      	ldr	r2, [r7, #0]
 800a222:	ee07 2a90 	vmov	s15, r2
 800a226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a22a:	eeb0 0a67 	vmov.f32	s0, s15
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	4798      	blx	r3
 800a232:	4603      	mov	r3, r0
 800a234:	461a      	mov	r2, r3
 800a236:	2103      	movs	r1, #3
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2200      	movs	r2, #0
 800a240:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a244:	bf00      	nop
 800a246:	370c      	adds	r7, #12
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd90      	pop	{r4, r7, pc}

0800a24c <_ZN5L6470I8shield_1E21prepare_set_max_speedEj>:
    virtual void prepare_set_max_speed(unsigned int speed)
 800a24c:	b590      	push	{r4, r7, lr}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a25e:	681c      	ldr	r4, [r3, #0]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	683a      	ldr	r2, [r7, #0]
 800a26c:	ee07 2a90 	vmov	s15, r2
 800a270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a274:	eeb0 0a67 	vmov.f32	s0, s15
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	4798      	blx	r3
 800a27c:	4603      	mov	r3, r0
 800a27e:	461a      	mov	r2, r3
 800a280:	2106      	movs	r1, #6
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a28e:	bf00      	nop
 800a290:	370c      	adds	r7, #12
 800a292:	46bd      	mov	sp, r7
 800a294:	bd90      	pop	{r4, r7, pc}

0800a296 <_ZN5L6470I8shield_1E21prepare_set_min_speedEj>:
    virtual void prepare_set_min_speed(unsigned int speed)
 800a296:	b590      	push	{r4, r7, lr}
 800a298:	b083      	sub	sp, #12
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
 800a29e:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a2a8:	681c      	ldr	r4, [r3, #0]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	683a      	ldr	r2, [r7, #0]
 800a2b6:	ee07 2a90 	vmov	s15, r2
 800a2ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2be:	eeb0 0a67 	vmov.f32	s0, s15
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	4798      	blx	r3
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	2107      	movs	r1, #7
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a2d8:	bf00      	nop
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd90      	pop	{r4, r7, pc}

0800a2e0 <_ZN5L6470I8shield_1E24prepare_set_accelerationEj>:
    virtual void prepare_set_acceleration(unsigned int acceleration)
 800a2e0:	b590      	push	{r4, r7, lr}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a2f2:	681c      	ldr	r4, [r3, #0]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	683a      	ldr	r2, [r7, #0]
 800a300:	ee07 2a90 	vmov	s15, r2
 800a304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a308:	eeb0 0a67 	vmov.f32	s0, s15
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	4798      	blx	r3
 800a310:	4603      	mov	r3, r0
 800a312:	461a      	mov	r2, r3
 800a314:	2104      	movs	r1, #4
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2200      	movs	r2, #0
 800a31e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a322:	bf00      	nop
 800a324:	370c      	adds	r7, #12
 800a326:	46bd      	mov	sp, r7
 800a328:	bd90      	pop	{r4, r7, pc}

0800a32a <_ZN5L6470I8shield_1E24prepare_set_decelerationEj>:
    virtual void prepare_set_deceleration(unsigned int deceleration)
 800a32a:	b590      	push	{r4, r7, lr}
 800a32c:	b083      	sub	sp, #12
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
 800a332:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a33c:	681c      	ldr	r4, [r3, #0]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	683a      	ldr	r2, [r7, #0]
 800a34a:	ee07 2a90 	vmov	s15, r2
 800a34e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a352:	eeb0 0a67 	vmov.f32	s0, s15
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	4798      	blx	r3
 800a35a:	4603      	mov	r3, r0
 800a35c:	461a      	mov	r2, r3
 800a35e:	2105      	movs	r1, #5
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2200      	movs	r2, #0
 800a368:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a36c:	bf00      	nop
 800a36e:	370c      	adds	r7, #12
 800a370:	46bd      	mov	sp, r7
 800a372:	bd90      	pop	{r4, r7, pc}

0800a374 <_ZN5L6470I8shield_1E13prepare_go_toEi>:
    virtual void prepare_go_to(signed int position)
 800a374:	b590      	push	{r4, r7, lr}
 800a376:	b083      	sub	sp, #12
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 800a386:	681c      	ldr	r4, [r3, #0]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	6839      	ldr	r1, [r7, #0]
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	4798      	blx	r3
 800a398:	4603      	mov	r3, r0
 800a39a:	4619      	mov	r1, r3
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a3a8:	bf00      	nop
 800a3aa:	370c      	adds	r7, #12
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd90      	pop	{r4, r7, pc}

0800a3b0 <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE>:
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 800a3b0:	b5b0      	push	{r4, r5, r7, lr}
 800a3b2:	b084      	sub	sp, #16
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	60f8      	str	r0, [r7, #12]
 800a3b8:	60b9      	str	r1, [r7, #8]
 800a3ba:	4613      	mov	r3, r2
 800a3bc:	71fb      	strb	r3, [r7, #7]
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 800a3c6:	681c      	ldr	r4, [r3, #0]
 800a3c8:	79fb      	ldrb	r3, [r7, #7]
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d101      	bne.n	800a3d2 <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 800a3ce:	2501      	movs	r5, #1
 800a3d0:	e000      	b.n	800a3d4 <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 800a3d2:	2500      	movs	r5, #0
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	68b9      	ldr	r1, [r7, #8]
 800a3e0:	68f8      	ldr	r0, [r7, #12]
 800a3e2:	4798      	blx	r3
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	4629      	mov	r1, r5
 800a3ea:	68f8      	ldr	r0, [r7, #12]
 800a3ec:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a3f6:	bf00      	nop
 800a3f8:	3710      	adds	r7, #16
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bdb0      	pop	{r4, r5, r7, pc}

0800a3fe <_ZN5L6470I8shield_1E15prepare_go_homeEv>:
    virtual void prepare_go_home(void)
 800a3fe:	b580      	push	{r7, lr}
 800a400:	b082      	sub	sp, #8
 800a402:	af00      	add	r7, sp, #0
 800a404:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoHome();
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a41c:	bf00      	nop
 800a41e:	3708      	adds	r7, #8
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <_ZN5L6470I8shield_1E15prepare_go_markEv>:
    virtual void prepare_go_mark(void)
 800a424:	b580      	push	{r7, lr}
 800a426:	b082      	sub	sp, #8
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoMark();
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2200      	movs	r2, #0
 800a43e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a442:	bf00      	nop
 800a444:	3708      	adds	r7, #8
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 800a44a:	b5b0      	push	{r4, r5, r7, lr}
 800a44c:	b084      	sub	sp, #16
 800a44e:	af00      	add	r7, sp, #0
 800a450:	60f8      	str	r0, [r7, #12]
 800a452:	607b      	str	r3, [r7, #4]
 800a454:	460b      	mov	r3, r1
 800a456:	72fb      	strb	r3, [r7, #11]
 800a458:	4613      	mov	r3, r2
 800a45a:	72bb      	strb	r3, [r7, #10]
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800a464:	681c      	ldr	r4, [r3, #0]
 800a466:	7abb      	ldrb	r3, [r7, #10]
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d101      	bne.n	800a470 <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 800a46c:	2501      	movs	r5, #1
 800a46e:	e000      	b.n	800a472 <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 800a470:	2500      	movs	r5, #0
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	ee07 2a90 	vmov	s15, r2
 800a482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a486:	eeb0 0a67 	vmov.f32	s0, s15
 800a48a:	68f8      	ldr	r0, [r7, #12]
 800a48c:	4798      	blx	r3
 800a48e:	4603      	mov	r3, r0
 800a490:	7af9      	ldrb	r1, [r7, #11]
 800a492:	462a      	mov	r2, r5
 800a494:	68f8      	ldr	r0, [r7, #12]
 800a496:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2200      	movs	r2, #0
 800a49c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a4a0:	bf00      	nop
 800a4a2:	3710      	adds	r7, #16
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bdb0      	pop	{r4, r5, r7, pc}

0800a4a8 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE>:
    virtual void prepare_run(StepperMotor::direction_t direction)
 800a4a8:	b5b0      	push	{r4, r5, r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800a4bc:	681c      	ldr	r4, [r3, #0]
 800a4be:	78fb      	ldrb	r3, [r7, #3]
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	d101      	bne.n	800a4c8 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE+0x20>
 800a4c4:	2501      	movs	r5, #1
 800a4c6:	e000      	b.n	800a4ca <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE+0x22>
 800a4c8:	2500      	movs	r5, #0
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	2106      	movs	r1, #6
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	4798      	blx	r3
 800a4da:	4603      	mov	r3, r0
 800a4dc:	461a      	mov	r2, r3
 800a4de:	4629      	mov	r1, r5
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a4ec:	bf00      	nop
 800a4ee:	3708      	adds	r7, #8
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bdb0      	pop	{r4, r5, r7, pc}

0800a4f4 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj>:
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 800a4f4:	b5b0      	push	{r4, r5, r7, lr}
 800a4f6:	b084      	sub	sp, #16
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	460b      	mov	r3, r1
 800a4fe:	607a      	str	r2, [r7, #4]
 800a500:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800a50a:	681c      	ldr	r4, [r3, #0]
 800a50c:	7afb      	ldrb	r3, [r7, #11]
 800a50e:	2b01      	cmp	r3, #1
 800a510:	d101      	bne.n	800a516 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 800a512:	2501      	movs	r5, #1
 800a514:	e000      	b.n	800a518 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 800a516:	2500      	movs	r5, #0
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	687a      	ldr	r2, [r7, #4]
 800a524:	ee07 2a90 	vmov	s15, r2
 800a528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a52c:	eeb0 0a67 	vmov.f32	s0, s15
 800a530:	68f8      	ldr	r0, [r7, #12]
 800a532:	4798      	blx	r3
 800a534:	4603      	mov	r3, r0
 800a536:	461a      	mov	r2, r3
 800a538:	4629      	mov	r1, r5
 800a53a:	68f8      	ldr	r0, [r7, #12]
 800a53c:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2200      	movs	r2, #0
 800a542:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a546:	bf00      	nop
 800a548:	3710      	adds	r7, #16
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bdb0      	pop	{r4, r5, r7, pc}

0800a54e <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj>:
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 800a54e:	b580      	push	{r7, lr}
 800a550:	b084      	sub	sp, #16
 800a552:	af00      	add	r7, sp, #0
 800a554:	60f8      	str	r0, [r7, #12]
 800a556:	460b      	mov	r3, r1
 800a558:	607a      	str	r2, [r7, #4]
 800a55a:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	7afa      	ldrb	r2, [r7, #11]
 800a568:	2a01      	cmp	r2, #1
 800a56a:	d101      	bne.n	800a570 <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 800a56c:	2101      	movs	r1, #1
 800a56e:	e000      	b.n	800a572 <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 800a570:	2100      	movs	r1, #0
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	68f8      	ldr	r0, [r7, #12]
 800a576:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2200      	movs	r2, #0
 800a57c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a580:	bf00      	nop
 800a582:	3710      	adds	r7, #16
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <_ZN5L6470I8shield_1E17prepare_soft_stopEv>:
    virtual void prepare_soft_stop(void)
 800a588:	b580      	push	{r7, lr}
 800a58a:	b082      	sub	sp, #8
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftStop();
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a5a6:	bf00      	nop
 800a5a8:	3708      	adds	r7, #8
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <_ZN5L6470I8shield_1E17prepare_hard_stopEv>:
    virtual void prepare_hard_stop(void)
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b082      	sub	sp, #8
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardStop();
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a5cc:	bf00      	nop
 800a5ce:	3708      	adds	r7, #8
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <_ZN5L6470I8shield_1E16prepare_soft_hizEv>:
    virtual void prepare_soft_hiz(void)
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftHiZ();
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a5f2:	bf00      	nop
 800a5f4:	3708      	adds	r7, #8
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}

0800a5fa <_ZN5L6470I8shield_1E16prepare_hard_hizEv>:
    virtual void prepare_hard_hiz(void)
 800a5fa:	b580      	push	{r7, lr}
 800a5fc:	b082      	sub	sp, #8
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardHiZ();
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2200      	movs	r2, #0
 800a614:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a618:	bf00      	nop
 800a61a:	3708      	adds	r7, #8
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE>:
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	460b      	mov	r3, r1
 800a62a:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	78fa      	ldrb	r2, [r7, #3]
 800a638:	2a01      	cmp	r2, #1
 800a63a:	d101      	bne.n	800a640 <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 800a63c:	2201      	movs	r2, #1
 800a63e:	e000      	b.n	800a642 <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 800a640:	2200      	movs	r2, #0
 800a642:	4611      	mov	r1, r2
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a650:	bf00      	nop
 800a652:	3708      	adds	r7, #8
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	460b      	mov	r3, r1
 800a662:	70fb      	strb	r3, [r7, #3]
 800a664:	4613      	mov	r3, r2
 800a666:	70bb      	strb	r3, [r7, #2]
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	78ba      	ldrb	r2, [r7, #2]
 800a674:	2a01      	cmp	r2, #1
 800a676:	d101      	bne.n	800a67c <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 800a678:	2201      	movs	r2, #1
 800a67a:	e000      	b.n	800a67e <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 800a67c:	2200      	movs	r2, #0
 800a67e:	78f9      	ldrb	r1, [r7, #3]
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a68c:	bf00      	nop
 800a68e:	3708      	adds	r7, #8
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <_ZN5L6470I8shield_1E20prepare_reset_deviceEv>:
    virtual void prepare_reset_device(void)
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetDevice();
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800a6b2:	bf00      	nop
 800a6b4:	3708      	adds	r7, #8
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <_ZN5L6470I8shield_1E24perform_prepared_actionsEv>:
    uint8_t* perform_prepared_actions(void)
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b082      	sub	sp, #8
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
        return L6470_PerformPreparedApplicationCommand();
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	4798      	blx	r3
 800a6d0:	4603      	mov	r3, r0
    }
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3708      	adds	r7, #8
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}

0800a6da <_ZN5L6470I8shield_1E19get_prepared_actionEv>:
    prepared_action_t get_prepared_action(void)
 800a6da:	b480      	push	{r7}
 800a6dc:	b083      	sub	sp, #12
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
        return prepared_action;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    }
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	370c      	adds	r7, #12
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <_ZN5L6470I8shield_1E10get_resultEPh>:
    int32_t get_result(uint8_t *raw_data)
 800a6f4:	b5b0      	push	{r4, r5, r7, lr}
 800a6f6:	b082      	sub	sp, #8
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	6039      	str	r1, [r7, #0]
        switch (prepared_action) {
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800a704:	3b01      	subs	r3, #1
 800a706:	2b07      	cmp	r3, #7
 800a708:	f200 80fe 	bhi.w	800a908 <_ZN5L6470I8shield_1E10get_resultEPh+0x214>
 800a70c:	a201      	add	r2, pc, #4	@ (adr r2, 800a714 <_ZN5L6470I8shield_1E10get_resultEPh+0x20>)
 800a70e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a712:	bf00      	nop
 800a714:	0800a735 	.word	0x0800a735
 800a718:	0800a761 	.word	0x0800a761
 800a71c:	0800a78f 	.word	0x0800a78f
 800a720:	0800a7d3 	.word	0x0800a7d3
 800a724:	0800a819 	.word	0x0800a819
 800a728:	0800a85f 	.word	0x0800a85f
 800a72c:	0800a8a5 	.word	0x0800a8a5
 800a730:	0800a8eb 	.word	0x0800a8eb
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800a73c:	681c      	ldr	r4, [r3, #0]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	6a12      	ldr	r2, [r2, #32]
 800a74c:	7b92      	ldrb	r2, [r2, #14]
 800a74e:	6839      	ldr	r1, [r7, #0]
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	4798      	blx	r3
 800a754:	4603      	mov	r3, r0
 800a756:	4619      	mov	r1, r3
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	47a0      	blx	r4
 800a75c:	4603      	mov	r3, r0
 800a75e:	e0d4      	b.n	800a90a <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800a768:	681c      	ldr	r4, [r3, #0]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	687a      	ldr	r2, [r7, #4]
 800a776:	6a12      	ldr	r2, [r2, #32]
 800a778:	3228      	adds	r2, #40	@ 0x28
 800a77a:	7b92      	ldrb	r2, [r2, #14]
 800a77c:	6839      	ldr	r1, [r7, #0]
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	4798      	blx	r3
 800a782:	4603      	mov	r3, r0
 800a784:	4619      	mov	r1, r3
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	47a0      	blx	r4
 800a78a:	4603      	mov	r3, r0
 800a78c:	e0bd      	b.n	800a90a <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a796:	681c      	ldr	r4, [r3, #0]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800a7a0:	681d      	ldr	r5, [r3, #0]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	6a12      	ldr	r2, [r2, #32]
 800a7b0:	323c      	adds	r2, #60	@ 0x3c
 800a7b2:	7b92      	ldrb	r2, [r2, #14]
 800a7b4:	6839      	ldr	r1, [r7, #0]
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	4798      	blx	r3
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	4619      	mov	r1, r3
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	47a8      	blx	r5
 800a7c2:	eef0 7a40 	vmov.f32	s15, s0
 800a7c6:	eeb0 0a67 	vmov.f32	s0, s15
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	47a0      	blx	r4
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	e09b      	b.n	800a90a <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a7da:	681c      	ldr	r4, [r3, #0]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a7e4:	681d      	ldr	r5, [r3, #0]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	6a12      	ldr	r2, [r2, #32]
 800a7f4:	3278      	adds	r2, #120	@ 0x78
 800a7f6:	7b92      	ldrb	r2, [r2, #14]
 800a7f8:	6839      	ldr	r1, [r7, #0]
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	4798      	blx	r3
 800a7fe:	4603      	mov	r3, r0
 800a800:	b29b      	uxth	r3, r3
 800a802:	4619      	mov	r1, r3
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	47a8      	blx	r5
 800a808:	eef0 7a40 	vmov.f32	s15, s0
 800a80c:	eeb0 0a67 	vmov.f32	s0, s15
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	47a0      	blx	r4
 800a814:	4603      	mov	r3, r0
 800a816:	e078      	b.n	800a90a <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a820:	681c      	ldr	r4, [r3, #0]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800a82a:	681d      	ldr	r5, [r3, #0]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	6a12      	ldr	r2, [r2, #32]
 800a83a:	328c      	adds	r2, #140	@ 0x8c
 800a83c:	7b92      	ldrb	r2, [r2, #14]
 800a83e:	6839      	ldr	r1, [r7, #0]
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	4798      	blx	r3
 800a844:	4603      	mov	r3, r0
 800a846:	b29b      	uxth	r3, r3
 800a848:	4619      	mov	r1, r3
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	47a8      	blx	r5
 800a84e:	eef0 7a40 	vmov.f32	s15, s0
 800a852:	eeb0 0a67 	vmov.f32	s0, s15
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	47a0      	blx	r4
 800a85a:	4603      	mov	r3, r0
 800a85c:	e055      	b.n	800a90a <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a866:	681c      	ldr	r4, [r3, #0]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800a870:	681d      	ldr	r5, [r3, #0]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	6a12      	ldr	r2, [r2, #32]
 800a880:	3250      	adds	r2, #80	@ 0x50
 800a882:	7b92      	ldrb	r2, [r2, #14]
 800a884:	6839      	ldr	r1, [r7, #0]
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	4798      	blx	r3
 800a88a:	4603      	mov	r3, r0
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	4619      	mov	r1, r3
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	47a8      	blx	r5
 800a894:	eef0 7a40 	vmov.f32	s15, s0
 800a898:	eeb0 0a67 	vmov.f32	s0, s15
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	47a0      	blx	r4
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	e032      	b.n	800a90a <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a8ac:	681c      	ldr	r4, [r3, #0]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800a8b6:	681d      	ldr	r5, [r3, #0]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	687a      	ldr	r2, [r7, #4]
 800a8c4:	6a12      	ldr	r2, [r2, #32]
 800a8c6:	3264      	adds	r2, #100	@ 0x64
 800a8c8:	7b92      	ldrb	r2, [r2, #14]
 800a8ca:	6839      	ldr	r1, [r7, #0]
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	4798      	blx	r3
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	47a8      	blx	r5
 800a8da:	eef0 7a40 	vmov.f32	s15, s0
 800a8de:	eeb0 0a67 	vmov.f32	s0, s15
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	47a0      	blx	r4
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	e00f      	b.n	800a90a <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	2104      	movs	r1, #4
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	4798      	blx	r3
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d101      	bne.n	800a904 <_ZN5L6470I8shield_1E10get_resultEPh+0x210>
 800a900:	2301      	movs	r3, #1
 800a902:	e002      	b.n	800a90a <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
 800a904:	2300      	movs	r3, #0
 800a906:	e000      	b.n	800a90a <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return 0;
 800a908:	2300      	movs	r3, #0
    }
 800a90a:	4618      	mov	r0, r3
 800a90c:	3708      	adds	r7, #8
 800a90e:	46bd      	mov	sp, r7
 800a910:	bdb0      	pop	{r4, r5, r7, pc}
 800a912:	bf00      	nop

0800a914 <_ZN5L6470I8shield_1E13L6470_DISABLEEv>:
    void L6470_DISABLE(void)
 800a914:	b580      	push	{r7, lr}
 800a916:	b082      	sub	sp, #8
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6898      	ldr	r0, [r3, #8]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	899b      	ldrh	r3, [r3, #12]
 800a924:	2200      	movs	r2, #0
 800a926:	4619      	mov	r1, r3
 800a928:	f003 fa8a 	bl	800de40 <HAL_GPIO_WritePin>
    }
 800a92c:	bf00      	nop
 800a92e:	3708      	adds	r7, #8
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm>:
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  if (AbsPos > L6470_MAX_POSITION)
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a944:	d303      	bcc.n	800a94e <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	f5a3 0380 	sub.w	r3, r3, #4194304	@ 0x400000
 800a94c:	e000      	b.n	800a950 <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm+0x1c>
    return AbsPos;
 800a94e:	683b      	ldr	r3, [r7, #0]
}
 800a950:	4618      	mov	r0, r3
 800a952:	370c      	adds	r7, #12
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr

0800a95c <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl>:
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	db05      	blt.n	800a978 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x1c>
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a972:	da01      	bge.n	800a978 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	e00c      	b.n	800a992 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x36>
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	f513 1f00 	cmn.w	r3, #2097152	@ 0x200000
 800a97e:	db06      	blt.n	800a98e <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x32>
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	2b00      	cmp	r3, #0
 800a984:	da03      	bge.n	800a98e <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	f503 0380 	add.w	r3, r3, #4194304	@ 0x400000
 800a98c:	e001      	b.n	800a992 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x36>
      return (L6470_POSITION_RANGE + 1);        // OVF
 800a98e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
}
 800a992:	4618      	mov	r0, r3
 800a994:	370c      	adds	r7, #12
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr
	...

0800a9a0 <_ZN5L6470I8shield_1E20L6470_Speed_2_Step_sEm>:
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 800a9a0:	b480      	push	{r7}
 800a9a2:	b083      	sub	sp, #12
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	6039      	str	r1, [r7, #0]
  return (Speed * ((float)14.9012e-3));
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	ee07 3a90 	vmov	s15, r3
 800a9b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9b4:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800a9cc <_ZN5L6470I8shield_1E20L6470_Speed_2_Step_sEm+0x2c>
 800a9b8:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a9bc:	eeb0 0a67 	vmov.f32	s0, s15
 800a9c0:	370c      	adds	r7, #12
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr
 800a9ca:	bf00      	nop
 800a9cc:	3c74242a 	.word	0x3c74242a

0800a9d0 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf>:
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 800a9d0:	b480      	push	{r7}
 800a9d2:	b083      	sub	sp, #12
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 800a9dc:	edd7 7a00 	vldr	s15, [r7]
 800a9e0:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800aa14 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x44>
 800a9e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a9e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9ec:	d80a      	bhi.n	800aa04 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 800a9ee:	ed97 7a00 	vldr	s14, [r7]
 800a9f2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800aa18 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x48>
 800a9f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a9fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9fe:	ee17 3a90 	vmov	r3, s15
 800aa02:	e000      	b.n	800aa06 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x36>
    return 0;   // Warning
 800aa04:	2300      	movs	r3, #0
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	370c      	adds	r7, #12
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr
 800aa12:	bf00      	nop
 800aa14:	4674241b 	.word	0x4674241b
 800aa18:	3c74242a 	.word	0x3c74242a

0800aa1c <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et>:
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 800aa1c:	b480      	push	{r7}
 800aa1e:	b083      	sub	sp, #12
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	460b      	mov	r3, r1
 800aa26:	807b      	strh	r3, [r7, #2]
  if (Acc <= L6470_MAX_ACC)
 800aa28:	887b      	ldrh	r3, [r7, #2]
 800aa2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa2e:	d209      	bcs.n	800aa44 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 800aa30:	887b      	ldrh	r3, [r7, #2]
 800aa32:	ee07 3a90 	vmov	s15, r3
 800aa36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa3a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800aa58 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x3c>
 800aa3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aa42:	e001      	b.n	800aa48 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x2c>
    return 0;   // Warning
 800aa44:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800aa5c <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x40>
}
 800aa48:	eeb0 0a67 	vmov.f32	s0, s15
 800aa4c:	370c      	adds	r7, #12
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr
 800aa56:	bf00      	nop
 800aa58:	4168d4fe 	.word	0x4168d4fe
 800aa5c:	00000000 	.word	0x00000000

0800aa60 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 800aa6c:	edd7 7a00 	vldr	s15, [r7]
 800aa70:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800aaa4 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x44>
 800aa74:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa7c:	d80b      	bhi.n	800aa96 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 800aa7e:	ed97 7a00 	vldr	s14, [r7]
 800aa82:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800aaa8 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x48>
 800aa86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800aa8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa8e:	ee17 3a90 	vmov	r3, s15
 800aa92:	b29b      	uxth	r3, r3
 800aa94:	e000      	b.n	800aa98 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x38>
    return 0;   // Warning
 800aa96:	2300      	movs	r3, #0
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr
 800aaa4:	4768c671 	.word	0x4768c671
 800aaa8:	4168d4fe 	.word	0x4168d4fe

0800aaac <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et>:
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 800aaac:	b480      	push	{r7}
 800aaae:	b083      	sub	sp, #12
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	460b      	mov	r3, r1
 800aab6:	807b      	strh	r3, [r7, #2]
  if (Dec <= L6470_MAX_DEC)
 800aab8:	887b      	ldrh	r3, [r7, #2]
 800aaba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aabe:	d209      	bcs.n	800aad4 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 800aac0:	887b      	ldrh	r3, [r7, #2]
 800aac2:	ee07 3a90 	vmov	s15, r3
 800aac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aaca:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800aae8 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x3c>
 800aace:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aad2:	e001      	b.n	800aad8 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x2c>
    return 0;   // Warning
 800aad4:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800aaec <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x40>
}
 800aad8:	eeb0 0a67 	vmov.f32	s0, s15
 800aadc:	370c      	adds	r7, #12
 800aade:	46bd      	mov	sp, r7
 800aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae4:	4770      	bx	lr
 800aae6:	bf00      	nop
 800aae8:	4168d4fe 	.word	0x4168d4fe
 800aaec:	00000000 	.word	0x00000000

0800aaf0 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 800aaf0:	b480      	push	{r7}
 800aaf2:	b083      	sub	sp, #12
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 800aafc:	edd7 7a00 	vldr	s15, [r7]
 800ab00:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800ab34 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x44>
 800ab04:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab0c:	d80b      	bhi.n	800ab26 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 800ab0e:	ed97 7a00 	vldr	s14, [r7]
 800ab12:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800ab38 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x48>
 800ab16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ab1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab1e:	ee17 3a90 	vmov	r3, s15
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	e000      	b.n	800ab28 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x38>
    return 0;   // Warning
 800ab26:	2300      	movs	r3, #0
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	370c      	adds	r7, #12
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr
 800ab34:	4768c671 	.word	0x4768c671
 800ab38:	4168d4fe 	.word	0x4168d4fe

0800ab3c <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 800ab3c:	b480      	push	{r7}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	460b      	mov	r3, r1
 800ab46:	807b      	strh	r3, [r7, #2]
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 800ab48:	887b      	ldrh	r3, [r7, #2]
 800ab4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab4e:	d209      	bcs.n	800ab64 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 800ab50:	887b      	ldrh	r3, [r7, #2]
 800ab52:	ee07 3a90 	vmov	s15, r3
 800ab56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ab5a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800ab78 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 800ab5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ab62:	e001      	b.n	800ab68 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800ab64:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800ab7c <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 800ab68:	eeb0 0a67 	vmov.f32	s0, s15
 800ab6c:	370c      	adds	r7, #12
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr
 800ab76:	bf00      	nop
 800ab78:	4174240b 	.word	0x4174240b
 800ab7c:	00000000 	.word	0x00000000

0800ab80 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 800ab80:	b480      	push	{r7}
 800ab82:	b083      	sub	sp, #12
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 800ab8c:	edd7 7a00 	vldr	s15, [r7]
 800ab90:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800abc4 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x44>
 800ab94:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab9c:	d80b      	bhi.n	800abb6 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 800ab9e:	ed97 7a00 	vldr	s14, [r7]
 800aba2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800abc8 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x48>
 800aba6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800abaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abae:	ee17 3a90 	vmov	r3, s15
 800abb2:	b29b      	uxth	r3, r3
 800abb4:	e000      	b.n	800abb8 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x38>
    return 0;   // Warning
 800abb6:	2300      	movs	r3, #0
}
 800abb8:	4618      	mov	r0, r3
 800abba:	370c      	adds	r7, #12
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr
 800abc4:	4673e702 	.word	0x4673e702
 800abc8:	4174240b 	.word	0x4174240b

0800abcc <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	460b      	mov	r3, r1
 800abd6:	807b      	strh	r3, [r7, #2]
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 800abd8:	887b      	ldrh	r3, [r7, #2]
 800abda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800abde:	d209      	bcs.n	800abf4 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 800abe0:	887b      	ldrh	r3, [r7, #2]
 800abe2:	ee07 3a90 	vmov	s15, r3
 800abe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800abea:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800ac08 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x3c>
 800abee:	ee67 7a87 	vmul.f32	s15, s15, s14
 800abf2:	e001      	b.n	800abf8 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800abf4:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800ac0c <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 800abf8:	eeb0 0a67 	vmov.f32	s0, s15
 800abfc:	370c      	adds	r7, #12
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr
 800ac06:	bf00      	nop
 800ac08:	3e742401 	.word	0x3e742401
 800ac0c:	00000000 	.word	0x00000000

0800ac10 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 800ac10:	b480      	push	{r7}
 800ac12:	b083      	sub	sp, #12
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 800ac1c:	edd7 7a00 	vldr	s15, [r7]
 800ac20:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800ac54 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x44>
 800ac24:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac2c:	d80b      	bhi.n	800ac46 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 800ac2e:	ed97 7a00 	vldr	s14, [r7]
 800ac32:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800ac58 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x48>
 800ac36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ac3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac3e:	ee17 3a90 	vmov	r3, s15
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	e000      	b.n	800ac48 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x38>
    return 0;   // Warning
 800ac46:	2300      	movs	r3, #0
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	370c      	adds	r7, #12
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr
 800ac54:	447414bf 	.word	0x447414bf
 800ac58:	3e742401 	.word	0x3e742401

0800ac5c <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt>:
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b082      	sub	sp, #8
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	460b      	mov	r3, r1
 800ac66:	807b      	strh	r3, [r7, #2]
  if (FsSpd <= L6470_MAX_FS_SPD)
 800ac68:	887b      	ldrh	r3, [r7, #2]
 800ac6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ac6e:	d219      	bcs.n	800aca4 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 800ac70:	887b      	ldrh	r3, [r7, #2]
 800ac72:	4618      	mov	r0, r3
 800ac74:	f7f5 fc86 	bl	8000584 <__aeabi_i2d>
 800ac78:	f04f 0200 	mov.w	r2, #0
 800ac7c:	4b0e      	ldr	r3, [pc, #56]	@ (800acb8 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x5c>)
 800ac7e:	f7f5 fb35 	bl	80002ec <__adddf3>
 800ac82:	4602      	mov	r2, r0
 800ac84:	460b      	mov	r3, r1
 800ac86:	4610      	mov	r0, r2
 800ac88:	4619      	mov	r1, r3
 800ac8a:	f04f 0200 	mov.w	r2, #0
 800ac8e:	4b0b      	ldr	r3, [pc, #44]	@ (800acbc <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x60>)
 800ac90:	f7f5 fce2 	bl	8000658 <__aeabi_dmul>
 800ac94:	4602      	mov	r2, r0
 800ac96:	460b      	mov	r3, r1
 800ac98:	4610      	mov	r0, r2
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	f7f5 ffb4 	bl	8000c08 <__aeabi_d2f>
 800aca0:	4603      	mov	r3, r0
 800aca2:	e001      	b.n	800aca8 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x4c>
    return 0;   // Warning
 800aca4:	f04f 0300 	mov.w	r3, #0
}
 800aca8:	ee07 3a90 	vmov	s15, r3
 800acac:	eeb0 0a67 	vmov.f32	s0, s15
 800acb0:	3708      	adds	r7, #8
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	3fe00000 	.word	0x3fe00000
 800acbc:	402e8000 	.word	0x402e8000

0800acc0 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 800acc0:	b480      	push	{r7}
 800acc2:	b083      	sub	sp, #12
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 800accc:	edd7 7a00 	vldr	s15, [r7]
 800acd0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800ad0c <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x4c>
 800acd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800acd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acdc:	d80f      	bhi.n	800acfe <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 800acde:	ed97 7a00 	vldr	s14, [r7]
 800ace2:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800ad10 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x50>
 800ace6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800acea:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800acee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800acf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acf6:	ee17 3a90 	vmov	r3, s15
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	e000      	b.n	800ad00 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x40>
    return 0;   // Warning
 800acfe:	2300      	movs	r3, #0
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	370c      	adds	r7, #12
 800ad04:	46bd      	mov	sp, r7
 800ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0a:	4770      	bx	lr
 800ad0c:	4673e180 	.word	0x4673e180
 800ad10:	41740000 	.word	0x41740000

0800ad14 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 800ad14:	b480      	push	{r7}
 800ad16:	b083      	sub	sp, #12
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	807b      	strh	r3, [r7, #2]
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 800ad20:	887b      	ldrh	r3, [r7, #2]
 800ad22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ad26:	d209      	bcs.n	800ad3c <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 800ad28:	887b      	ldrh	r3, [r7, #2]
 800ad2a:	ee07 3a90 	vmov	s15, r3
 800ad2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad32:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800ad50 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x3c>
 800ad36:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ad3a:	e001      	b.n	800ad40 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800ad3c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800ad54 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 800ad40:	eeb0 0a67 	vmov.f32	s0, s15
 800ad44:	370c      	adds	r7, #12
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr
 800ad4e:	bf00      	nop
 800ad50:	3d7423f4 	.word	0x3d7423f4
 800ad54:	00000000 	.word	0x00000000

0800ad58 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 800ad58:	b480      	push	{r7}
 800ad5a:	b083      	sub	sp, #12
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 800ad64:	edd7 7a00 	vldr	s15, [r7]
 800ad68:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800ad9c <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x44>
 800ad6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad74:	d80b      	bhi.n	800ad8e <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 800ad76:	ed97 7a00 	vldr	s14, [r7]
 800ad7a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800ada0 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x48>
 800ad7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ad82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad86:	ee17 3a90 	vmov	r3, s15
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	e000      	b.n	800ad90 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x38>
    return 0;   // Warning
 800ad8e:	2300      	movs	r3, #0
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	370c      	adds	r7, #12
 800ad94:	46bd      	mov	sp, r7
 800ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9a:	4770      	bx	lr
 800ad9c:	44742023 	.word	0x44742023
 800ada0:	3d7423f4 	.word	0x3d7423f4

0800ada4 <_ZN5L6470I8shield_1E20L6470_StSlp_2_s_StepEh>:
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 800ada4:	b480      	push	{r7}
 800ada6:	b083      	sub	sp, #12
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	460b      	mov	r3, r1
 800adae:	70fb      	strb	r3, [r7, #3]
    return (StSlp * ((float)1.5686e-5));
 800adb0:	78fb      	ldrb	r3, [r7, #3]
 800adb2:	ee07 3a90 	vmov	s15, r3
 800adb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800adba:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800add0 <_ZN5L6470I8shield_1E20L6470_StSlp_2_s_StepEh+0x2c>
 800adbe:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800adc2:	eeb0 0a67 	vmov.f32	s0, s15
 800adc6:	370c      	adds	r7, #12
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr
 800add0:	3783956e 	.word	0x3783956e

0800add4 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 800add4:	b480      	push	{r7}
 800add6:	b085      	sub	sp, #20
 800add8:	af00      	add	r7, sp, #0
 800adda:	60f8      	str	r0, [r7, #12]
 800addc:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 800ade0:	edd7 7a02 	vldr	s15, [r7, #8]
 800ade4:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800ae1c <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x48>
 800ade8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800adec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adf0:	d80c      	bhi.n	800ae0c <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800adf2:	ed97 7a02 	vldr	s14, [r7, #8]
 800adf6:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800ae20 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x4c>
 800adfa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800adfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae02:	edc7 7a01 	vstr	s15, [r7, #4]
 800ae06:	793b      	ldrb	r3, [r7, #4]
 800ae08:	b2db      	uxtb	r3, r3
 800ae0a:	e000      	b.n	800ae0e <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x3a>
    return 0;   // Warning
 800ae0c:	2300      	movs	r3, #0
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3714      	adds	r7, #20
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr
 800ae1a:	bf00      	nop
 800ae1c:	3b8311d9 	.word	0x3b8311d9
 800ae20:	3783956e 	.word	0x3783956e

0800ae24 <_ZN5L6470I8shield_1E23L6470_FnSlpAcc_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	460b      	mov	r3, r1
 800ae2e:	70fb      	strb	r3, [r7, #3]
    return (FnSlpAcc * ((float)1.5686e-5));
 800ae30:	78fb      	ldrb	r3, [r7, #3]
 800ae32:	ee07 3a90 	vmov	s15, r3
 800ae36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae3a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800ae50 <_ZN5L6470I8shield_1E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 800ae3e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800ae42:	eeb0 0a67 	vmov.f32	s0, s15
 800ae46:	370c      	adds	r7, #12
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr
 800ae50:	3783956e 	.word	0x3783956e

0800ae54 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 800ae54:	b480      	push	{r7}
 800ae56:	b085      	sub	sp, #20
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	60f8      	str	r0, [r7, #12]
 800ae5c:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 800ae60:	edd7 7a02 	vldr	s15, [r7, #8]
 800ae64:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800ae9c <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x48>
 800ae68:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae70:	d80c      	bhi.n	800ae8c <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800ae72:	ed97 7a02 	vldr	s14, [r7, #8]
 800ae76:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800aea0 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 800ae7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ae7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae82:	edc7 7a01 	vstr	s15, [r7, #4]
 800ae86:	793b      	ldrb	r3, [r7, #4]
 800ae88:	b2db      	uxtb	r3, r3
 800ae8a:	e000      	b.n	800ae8e <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x3a>
    return 0;   // Warning
 800ae8c:	2300      	movs	r3, #0
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3714      	adds	r7, #20
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr
 800ae9a:	bf00      	nop
 800ae9c:	3b8311d9 	.word	0x3b8311d9
 800aea0:	3783956e 	.word	0x3783956e

0800aea4 <_ZN5L6470I8shield_1E23L6470_FnSlpDec_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 800aea4:	b480      	push	{r7}
 800aea6:	b083      	sub	sp, #12
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	460b      	mov	r3, r1
 800aeae:	70fb      	strb	r3, [r7, #3]
    return (FnSlpDec * ((float)1.5686e-5));
 800aeb0:	78fb      	ldrb	r3, [r7, #3]
 800aeb2:	ee07 3a90 	vmov	s15, r3
 800aeb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aeba:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800aed0 <_ZN5L6470I8shield_1E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 800aebe:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800aec2:	eeb0 0a67 	vmov.f32	s0, s15
 800aec6:	370c      	adds	r7, #12
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr
 800aed0:	3783956e 	.word	0x3783956e

0800aed4 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 800aed4:	b480      	push	{r7}
 800aed6:	b085      	sub	sp, #20
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	60f8      	str	r0, [r7, #12]
 800aedc:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 800aee0:	edd7 7a02 	vldr	s15, [r7, #8]
 800aee4:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800af1c <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x48>
 800aee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aeec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aef0:	d80c      	bhi.n	800af0c <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800aef2:	ed97 7a02 	vldr	s14, [r7, #8]
 800aef6:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800af20 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 800aefa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800aefe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af02:	edc7 7a01 	vstr	s15, [r7, #4]
 800af06:	793b      	ldrb	r3, [r7, #4]
 800af08:	b2db      	uxtb	r3, r3
 800af0a:	e000      	b.n	800af0e <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x3a>
    return 0;   // Warning
 800af0c:	2300      	movs	r3, #0
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3714      	adds	r7, #20
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr
 800af1a:	bf00      	nop
 800af1c:	3b8311d9 	.word	0x3b8311d9
 800af20:	3783956e 	.word	0x3783956e

0800af24 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh>:
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 800af24:	b480      	push	{r7}
 800af26:	b083      	sub	sp, #12
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	460b      	mov	r3, r1
 800af2e:	70fb      	strb	r3, [r7, #3]
  if (OcdTh <= L6470_MAX_OCD_TH)
 800af30:	78fb      	ldrb	r3, [r7, #3]
 800af32:	2b0f      	cmp	r3, #15
 800af34:	d80a      	bhi.n	800af4c <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 800af36:	78fb      	ldrb	r3, [r7, #3]
 800af38:	3301      	adds	r3, #1
 800af3a:	ee07 3a90 	vmov	s15, r3
 800af3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af42:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800af60 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x3c>
 800af46:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af4a:	e001      	b.n	800af50 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x2c>
    return 0;   // Warning
 800af4c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800af64 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x40>
}
 800af50:	eeb0 0a67 	vmov.f32	s0, s15
 800af54:	370c      	adds	r7, #12
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr
 800af5e:	bf00      	nop
 800af60:	43bb8000 	.word	0x43bb8000
 800af64:	00000000 	.word	0x00000000

0800af68 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 800af68:	b480      	push	{r7}
 800af6a:	b087      	sub	sp, #28
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	60f8      	str	r0, [r7, #12]
 800af70:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 800af74:	edd7 7a02 	vldr	s15, [r7, #8]
 800af78:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800b004 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x9c>
 800af7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800af80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af84:	d836      	bhi.n	800aff4 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8c>
    result = (mA / ((float)375));
 800af86:	ed97 7a02 	vldr	s14, [r7, #8]
 800af8a:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800b008 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0xa0>
 800af8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800af92:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800af96:	edd7 7a05 	vldr	s15, [r7, #20]
 800af9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af9e:	edc7 7a01 	vstr	s15, [r7, #4]
 800afa2:	793b      	ldrb	r3, [r7, #4]
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	ee07 3a90 	vmov	s15, r3
 800afaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800afae:	ed97 7a05 	vldr	s14, [r7, #20]
 800afb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800afb6:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 800afba:	edd7 7a04 	vldr	s15, [r7, #16]
 800afbe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800afc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800afc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afca:	d50a      	bpl.n	800afe2 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 800afcc:	edd7 7a05 	vldr	s15, [r7, #20]
 800afd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afd4:	edc7 7a01 	vstr	s15, [r7, #4]
 800afd8:	793b      	ldrb	r3, [r7, #4]
 800afda:	b2db      	uxtb	r3, r3
 800afdc:	3b01      	subs	r3, #1
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	e009      	b.n	800aff6 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8e>
      return ((uint8_t)result);    
 800afe2:	edd7 7a05 	vldr	s15, [r7, #20]
 800afe6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afea:	edc7 7a01 	vstr	s15, [r7, #4]
 800afee:	793b      	ldrb	r3, [r7, #4]
 800aff0:	b2db      	uxtb	r3, r3
 800aff2:	e000      	b.n	800aff6 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8e>
    return 0;   // Warning
 800aff4:	2300      	movs	r3, #0
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	371c      	adds	r7, #28
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr
 800b002:	bf00      	nop
 800b004:	45bb8000 	.word	0x45bb8000
 800b008:	43bb8000 	.word	0x43bb8000

0800b00c <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh>:
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 800b00c:	b480      	push	{r7}
 800b00e:	b083      	sub	sp, #12
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	460b      	mov	r3, r1
 800b016:	70fb      	strb	r3, [r7, #3]
  if (StallTh <= L6470_MAX_STALL_TH)
 800b018:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	db0a      	blt.n	800b036 <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 800b020:	78fb      	ldrb	r3, [r7, #3]
 800b022:	3301      	adds	r3, #1
 800b024:	ee07 3a90 	vmov	s15, r3
 800b028:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b02c:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800b048 <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x3c>
 800b030:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b034:	e001      	b.n	800b03a <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x2e>
    return 0;   // Warning
 800b036:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800b04c <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x40>
}
 800b03a:	eeb0 0a67 	vmov.f32	s0, s15
 800b03e:	370c      	adds	r7, #12
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr
 800b048:	41fa0000 	.word	0x41fa0000
 800b04c:	00000000 	.word	0x00000000

0800b050 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 800b050:	b480      	push	{r7}
 800b052:	b087      	sub	sp, #28
 800b054:	af00      	add	r7, sp, #0
 800b056:	60f8      	str	r0, [r7, #12]
 800b058:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 800b05c:	edd7 7a02 	vldr	s15, [r7, #8]
 800b060:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800b0ec <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x9c>
 800b064:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b06c:	d836      	bhi.n	800b0dc <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8c>
    result = (mA / ((float)31.25));
 800b06e:	ed97 7a02 	vldr	s14, [r7, #8]
 800b072:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800b0f0 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0xa0>
 800b076:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b07a:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800b07e:	edd7 7a05 	vldr	s15, [r7, #20]
 800b082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b086:	edc7 7a01 	vstr	s15, [r7, #4]
 800b08a:	793b      	ldrb	r3, [r7, #4]
 800b08c:	b2db      	uxtb	r3, r3
 800b08e:	ee07 3a90 	vmov	s15, r3
 800b092:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b096:	ed97 7a05 	vldr	s14, [r7, #20]
 800b09a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b09e:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 800b0a2:	edd7 7a04 	vldr	s15, [r7, #16]
 800b0a6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800b0aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b0ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0b2:	d50a      	bpl.n	800b0ca <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 800b0b4:	edd7 7a05 	vldr	s15, [r7, #20]
 800b0b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0bc:	edc7 7a01 	vstr	s15, [r7, #4]
 800b0c0:	793b      	ldrb	r3, [r7, #4]
 800b0c2:	b2db      	uxtb	r3, r3
 800b0c4:	3b01      	subs	r3, #1
 800b0c6:	b2db      	uxtb	r3, r3
 800b0c8:	e009      	b.n	800b0de <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8e>
      return ((uint8_t)result);    
 800b0ca:	edd7 7a05 	vldr	s15, [r7, #20]
 800b0ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0d2:	edc7 7a01 	vstr	s15, [r7, #4]
 800b0d6:	793b      	ldrb	r3, [r7, #4]
 800b0d8:	b2db      	uxtb	r3, r3
 800b0da:	e000      	b.n	800b0de <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8e>
    return 0;   // Warning
 800b0dc:	2300      	movs	r3, #0
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	371c      	adds	r7, #28
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e8:	4770      	bx	lr
 800b0ea:	bf00      	nop
 800b0ec:	457a0000 	.word	0x457a0000
 800b0f0:	41fa0000 	.word	0x41fa0000

0800b0f4 <_ZN5L6470I8shield_1E12L6470_ConfigEPv>:
status_t L6470<shield_x>::L6470_Config(void *init)
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b086      	sub	sp, #24
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	60f8      	str	r0, [r7, #12]
 800b0fc:	60b9      	str	r1, [r7, #8]
  reset_device();
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	3394      	adds	r3, #148	@ 0x94
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	68f8      	ldr	r0, [r7, #12]
 800b108:	4798      	blx	r3
  get_status();
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	330c      	adds	r3, #12
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	68f8      	ldr	r0, [r7, #12]
 800b114:	4798      	blx	r3
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	697a      	ldr	r2, [r7, #20]
 800b126:	edd2 7a05 	vldr	s15, [r2, #20]
 800b12a:	eeb0 0a67 	vmov.f32	s0, s15
 800b12e:	68f8      	ldr	r0, [r7, #12]
 800b130:	4798      	blx	r3
 800b132:	4603      	mov	r3, r0
 800b134:	461a      	mov	r2, r3
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	697a      	ldr	r2, [r7, #20]
 800b148:	edd2 7a06 	vldr	s15, [r2, #24]
 800b14c:	eeb0 0a67 	vmov.f32	s0, s15
 800b150:	68f8      	ldr	r0, [r7, #12]
 800b152:	4798      	blx	r3
 800b154:	4603      	mov	r3, r0
 800b156:	461a      	mov	r2, r3
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	697a      	ldr	r2, [r7, #20]
 800b16a:	edd2 7a07 	vldr	s15, [r2, #28]
 800b16e:	eeb0 0a67 	vmov.f32	s0, s15
 800b172:	68f8      	ldr	r0, [r7, #12]
 800b174:	4798      	blx	r3
 800b176:	4603      	mov	r3, r0
 800b178:	461a      	mov	r2, r3
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	697a      	ldr	r2, [r7, #20]
 800b18c:	edd2 7a08 	vldr	s15, [r2, #32]
 800b190:	eeb0 0a67 	vmov.f32	s0, s15
 800b194:	68f8      	ldr	r0, [r7, #12]
 800b196:	4798      	blx	r3
 800b198:	4603      	mov	r3, r0
 800b19a:	461a      	mov	r2, r3
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	697a      	ldr	r2, [r7, #20]
 800b1ae:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 800b1b2:	eeb0 0a67 	vmov.f32	s0, s15
 800b1b6:	68f8      	ldr	r0, [r7, #12]
 800b1b8:	4798      	blx	r3
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	461a      	mov	r2, r3
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800b1ca:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800b49c <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800b1ce:	ee67 6a87 	vmul.f32	s13, s15, s14
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	ed93 7a00 	vldr	s14, [r3]
 800b1d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1e0:	edc7 7a01 	vstr	s15, [r7, #4]
 800b1e4:	793b      	ldrb	r3, [r7, #4]
 800b1e6:	b2da      	uxtb	r2, r3
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800b1f4:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 800b49c <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800b1f8:	ee67 6a87 	vmul.f32	s13, s15, s14
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	ed93 7a00 	vldr	s14, [r3]
 800b202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b206:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b20a:	edc7 7a01 	vstr	s15, [r7, #4]
 800b20e:	793b      	ldrb	r3, [r7, #4]
 800b210:	b2da      	uxtb	r2, r3
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800b21e:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 800b49c <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800b222:	ee67 6a87 	vmul.f32	s13, s15, s14
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	ed93 7a00 	vldr	s14, [r3]
 800b22c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b230:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b234:	edc7 7a01 	vstr	s15, [r7, #4]
 800b238:	793b      	ldrb	r3, [r7, #4]
 800b23a:	b2da      	uxtb	r2, r3
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800b248:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 800b49c <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800b24c:	ee67 6a87 	vmul.f32	s13, s15, s14
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	ed93 7a00 	vldr	s14, [r3]
 800b256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b25a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b25e:	edc7 7a01 	vstr	s15, [r7, #4]
 800b262:	793b      	ldrb	r3, [r7, #4]
 800b264:	b2da      	uxtb	r2, r3
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	697a      	ldr	r2, [r7, #20]
 800b278:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 800b27c:	eeb0 0a67 	vmov.f32	s0, s15
 800b280:	68f8      	ldr	r0, [r7, #12]
 800b282:	4798      	blx	r3
 800b284:	4603      	mov	r3, r0
 800b286:	461a      	mov	r2, r3
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	697a      	ldr	r2, [r7, #20]
 800b29a:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 800b29e:	eeb0 0a67 	vmov.f32	s0, s15
 800b2a2:	68f8      	ldr	r0, [r7, #12]
 800b2a4:	4798      	blx	r3
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	697a      	ldr	r2, [r7, #20]
 800b2bc:	edd2 7a10 	vldr	s15, [r2, #64]	@ 0x40
 800b2c0:	eeb0 0a67 	vmov.f32	s0, s15
 800b2c4:	68f8      	ldr	r0, [r7, #12]
 800b2c6:	4798      	blx	r3
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	697a      	ldr	r2, [r7, #20]
 800b2de:	edd2 7a11 	vldr	s15, [r2, #68]	@ 0x44
 800b2e2:	eeb0 0a67 	vmov.f32	s0, s15
 800b2e6:	68f8      	ldr	r0, [r7, #12]
 800b2e8:	4798      	blx	r3
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	697a      	ldr	r2, [r7, #20]
 800b30c:	edd2 7a13 	vldr	s15, [r2, #76]	@ 0x4c
 800b310:	eeb0 0a67 	vmov.f32	s0, s15
 800b314:	68f8      	ldr	r0, [r7, #12]
 800b316:	4798      	blx	r3
 800b318:	4603      	mov	r3, r0
 800b31a:	461a      	mov	r2, r3
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	697a      	ldr	r2, [r7, #20]
 800b32e:	edd2 7a14 	vldr	s15, [r2, #80]	@ 0x50
 800b332:	eeb0 0a67 	vmov.f32	s0, s15
 800b336:	68f8      	ldr	r0, [r7, #12]
 800b338:	4798      	blx	r3
 800b33a:	4603      	mov	r3, r0
 800b33c:	461a      	mov	r2, r3
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	68fa      	ldr	r2, [r7, #12]
 800b374:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 800b378:	2104      	movs	r1, #4
 800b37a:	68f8      	ldr	r0, [r7, #12]
 800b37c:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	68fa      	ldr	r2, [r7, #12]
 800b38a:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 800b38e:	2105      	movs	r1, #5
 800b390:	68f8      	ldr	r0, [r7, #12]
 800b392:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	68fa      	ldr	r2, [r7, #12]
 800b3a0:	f8b2 204c 	ldrh.w	r2, [r2, #76]	@ 0x4c
 800b3a4:	2106      	movs	r1, #6
 800b3a6:	68f8      	ldr	r0, [r7, #12]
 800b3a8:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	68fa      	ldr	r2, [r7, #12]
 800b3b6:	f8b2 204e 	ldrh.w	r2, [r2, #78]	@ 0x4e
 800b3ba:	2107      	movs	r1, #7
 800b3bc:	68f8      	ldr	r0, [r7, #12]
 800b3be:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	68fa      	ldr	r2, [r7, #12]
 800b3cc:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 800b3d0:	2108      	movs	r1, #8
 800b3d2:	68f8      	ldr	r0, [r7, #12]
 800b3d4:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	68fa      	ldr	r2, [r7, #12]
 800b3e2:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 800b3e6:	2109      	movs	r1, #9
 800b3e8:	68f8      	ldr	r0, [r7, #12]
 800b3ea:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	68fa      	ldr	r2, [r7, #12]
 800b3f8:	f892 2053 	ldrb.w	r2, [r2, #83]	@ 0x53
 800b3fc:	210a      	movs	r1, #10
 800b3fe:	68f8      	ldr	r0, [r7, #12]
 800b400:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	68fa      	ldr	r2, [r7, #12]
 800b40e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800b412:	210b      	movs	r1, #11
 800b414:	68f8      	ldr	r0, [r7, #12]
 800b416:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	68fa      	ldr	r2, [r7, #12]
 800b424:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800b428:	210c      	movs	r1, #12
 800b42a:	68f8      	ldr	r0, [r7, #12]
 800b42c:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	68fa      	ldr	r2, [r7, #12]
 800b43a:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
 800b43e:	210d      	movs	r1, #13
 800b440:	68f8      	ldr	r0, [r7, #12]
 800b442:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	68fa      	ldr	r2, [r7, #12]
 800b450:	f892 2058 	ldrb.w	r2, [r2, #88]	@ 0x58
 800b454:	210e      	movs	r1, #14
 800b456:	68f8      	ldr	r0, [r7, #12]
 800b458:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	68fa      	ldr	r2, [r7, #12]
 800b466:	f892 2059 	ldrb.w	r2, [r2, #89]	@ 0x59
 800b46a:	210f      	movs	r1, #15
 800b46c:	68f8      	ldr	r0, [r7, #12]
 800b46e:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	68fa      	ldr	r2, [r7, #12]
 800b47c:	f892 205a 	ldrb.w	r2, [r2, #90]	@ 0x5a
 800b480:	2110      	movs	r1, #16
 800b482:	68f8      	ldr	r0, [r7, #12]
 800b484:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	68fa      	ldr	r2, [r7, #12]
 800b492:	f892 205b 	ldrb.w	r2, [r2, #91]	@ 0x5b
 800b496:	2111      	movs	r1, #17
 800b498:	68f8      	ldr	r0, [r7, #12]
 800b49a:	e001      	b.n	800b4a0 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3ac>
 800b49c:	43800000 	.word	0x43800000
 800b4a0:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	68fa      	ldr	r2, [r7, #12]
 800b4ae:	f892 205d 	ldrb.w	r2, [r2, #93]	@ 0x5d
 800b4b2:	2113      	movs	r1, #19
 800b4b4:	68f8      	ldr	r0, [r7, #12]
 800b4b6:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	68fa      	ldr	r2, [r7, #12]
 800b4c4:	f892 205e 	ldrb.w	r2, [r2, #94]	@ 0x5e
 800b4c8:	2114      	movs	r1, #20
 800b4ca:	68f8      	ldr	r0, [r7, #12]
 800b4cc:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	68fa      	ldr	r2, [r7, #12]
 800b4da:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800b4de:	2116      	movs	r1, #22
 800b4e0:	68f8      	ldr	r0, [r7, #12]
 800b4e2:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	68fa      	ldr	r2, [r7, #12]
 800b4f0:	f8b2 2062 	ldrh.w	r2, [r2, #98]	@ 0x62
 800b4f4:	2117      	movs	r1, #23
 800b4f6:	68f8      	ldr	r0, [r7, #12]
 800b4f8:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	3354      	adds	r3, #84	@ 0x54
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	68fa      	ldr	r2, [r7, #12]
 800b504:	f892 205f 	ldrb.w	r2, [r2, #95]	@ 0x5f
 800b508:	4611      	mov	r1, r2
 800b50a:	68f8      	ldr	r0, [r7, #12]
 800b50c:	4798      	blx	r3
 800b50e:	4603      	mov	r3, r0
 800b510:	f083 0301 	eor.w	r3, r3, #1
 800b514:	b2db      	uxtb	r3, r3
 800b516:	2b00      	cmp	r3, #0
 800b518:	d001      	beq.n	800b51e <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 800b51a:	2301      	movs	r3, #1
 800b51c:	e000      	b.n	800b520 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x42c>
  return COMPONENT_OK;
 800b51e:	2300      	movs	r3, #0
}
 800b520:	4618      	mov	r0, r3
 800b522:	3718      	adds	r7, #24
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 800b528:	b590      	push	{r4, r7, lr}
 800b52a:	b087      	sub	sp, #28
 800b52c:	af02      	add	r7, sp, #8
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	460b      	mov	r3, r1
 800b532:	607a      	str	r2, [r7, #4]
 800b534:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b53e:	681c      	ldr	r4, [r3, #0]
 800b540:	7afa      	ldrb	r2, [r7, #11]
 800b542:	2300      	movs	r3, #0
 800b544:	9301      	str	r3, [sp, #4]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	9300      	str	r3, [sp, #0]
 800b54a:	4613      	mov	r3, r2
 800b54c:	2201      	movs	r2, #1
 800b54e:	490c      	ldr	r1, [pc, #48]	@ (800b580 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 800b550:	68f8      	ldr	r0, [r7, #12]
 800b552:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	4a09      	ldr	r2, [pc, #36]	@ (800b584 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 800b560:	4907      	ldr	r1, [pc, #28]	@ (800b580 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 800b562:	68f8      	ldr	r0, [r7, #12]
 800b564:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4a05      	ldr	r2, [pc, #20]	@ (800b588 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 800b572:	4904      	ldr	r1, [pc, #16]	@ (800b584 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 800b574:	68f8      	ldr	r0, [r7, #12]
 800b576:	4798      	blx	r3
}
 800b578:	bf00      	nop
 800b57a:	3714      	adds	r7, #20
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd90      	pop	{r4, r7, pc}
 800b580:	20000250 	.word	0x20000250
 800b584:	20000270 	.word	0x20000270
 800b588:	20000278 	.word	0x20000278

0800b58c <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 800b58c:	b590      	push	{r4, r7, lr}
 800b58e:	b087      	sub	sp, #28
 800b590:	af02      	add	r7, sp, #8
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	460b      	mov	r3, r1
 800b596:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b5a0:	681c      	ldr	r4, [r3, #0]
 800b5a2:	78fb      	ldrb	r3, [r7, #3]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	9201      	str	r2, [sp, #4]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	9200      	str	r2, [sp, #0]
 800b5ac:	2202      	movs	r2, #2
 800b5ae:	4917      	ldr	r1, [pc, #92]	@ (800b60c <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	4a14      	ldr	r2, [pc, #80]	@ (800b610 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 800b5c0:	4912      	ldr	r1, [pc, #72]	@ (800b60c <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a10      	ldr	r2, [pc, #64]	@ (800b614 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 800b5d2:	490f      	ldr	r1, [pc, #60]	@ (800b610 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6a19      	ldr	r1, [r3, #32]
 800b5dc:	78fa      	ldrb	r2, [r7, #3]
 800b5de:	4613      	mov	r3, r2
 800b5e0:	009b      	lsls	r3, r3, #2
 800b5e2:	4413      	add	r3, r2
 800b5e4:	009b      	lsls	r3, r3, #2
 800b5e6:	440b      	add	r3, r1
 800b5e8:	7b9b      	ldrb	r3, [r3, #14]
 800b5ea:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	7bfa      	ldrb	r2, [r7, #15]
 800b5f8:	4906      	ldr	r1, [pc, #24]	@ (800b614 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	4798      	blx	r3
 800b5fe:	4603      	mov	r3, r0
 800b600:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 800b602:	68bb      	ldr	r3, [r7, #8]
}
 800b604:	4618      	mov	r0, r3
 800b606:	3714      	adds	r7, #20
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd90      	pop	{r4, r7, pc}
 800b60c:	20000250 	.word	0x20000250
 800b610:	20000270 	.word	0x20000270
 800b614:	20000278 	.word	0x20000278

0800b618 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800b618:	b590      	push	{r4, r7, lr}
 800b61a:	b087      	sub	sp, #28
 800b61c:	af02      	add	r7, sp, #8
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	460b      	mov	r3, r1
 800b622:	607a      	str	r2, [r7, #4]
 800b624:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b62e:	681c      	ldr	r4, [r3, #0]
 800b630:	7afa      	ldrb	r2, [r7, #11]
 800b632:	2300      	movs	r3, #0
 800b634:	9301      	str	r3, [sp, #4]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	9300      	str	r3, [sp, #0]
 800b63a:	4613      	mov	r3, r2
 800b63c:	2203      	movs	r2, #3
 800b63e:	490c      	ldr	r1, [pc, #48]	@ (800b670 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x58>)
 800b640:	68f8      	ldr	r0, [r7, #12]
 800b642:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	4a09      	ldr	r2, [pc, #36]	@ (800b674 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 800b650:	4907      	ldr	r1, [pc, #28]	@ (800b670 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x58>)
 800b652:	68f8      	ldr	r0, [r7, #12]
 800b654:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4a05      	ldr	r2, [pc, #20]	@ (800b678 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x60>)
 800b662:	4904      	ldr	r1, [pc, #16]	@ (800b674 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 800b664:	68f8      	ldr	r0, [r7, #12]
 800b666:	4798      	blx	r3
}
 800b668:	bf00      	nop
 800b66a:	3714      	adds	r7, #20
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd90      	pop	{r4, r7, pc}
 800b670:	20000250 	.word	0x20000250
 800b674:	20000270 	.word	0x20000270
 800b678:	20000278 	.word	0x20000278

0800b67c <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 800b67c:	b590      	push	{r4, r7, lr}
 800b67e:	b085      	sub	sp, #20
 800b680:	af02      	add	r7, sp, #8
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	460b      	mov	r3, r1
 800b686:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b690:	681c      	ldr	r4, [r3, #0]
 800b692:	78fb      	ldrb	r3, [r7, #3]
 800b694:	2200      	movs	r2, #0
 800b696:	9201      	str	r2, [sp, #4]
 800b698:	2200      	movs	r2, #0
 800b69a:	9200      	str	r2, [sp, #0]
 800b69c:	2204      	movs	r2, #4
 800b69e:	490c      	ldr	r1, [pc, #48]	@ (800b6d0 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	4a09      	ldr	r2, [pc, #36]	@ (800b6d4 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 800b6b0:	4907      	ldr	r1, [pc, #28]	@ (800b6d0 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	4a05      	ldr	r2, [pc, #20]	@ (800b6d8 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 800b6c2:	4904      	ldr	r1, [pc, #16]	@ (800b6d4 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	4798      	blx	r3
}
 800b6c8:	bf00      	nop
 800b6ca:	370c      	adds	r7, #12
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd90      	pop	{r4, r7, pc}
 800b6d0:	20000250 	.word	0x20000250
 800b6d4:	20000270 	.word	0x20000270
 800b6d8:	20000278 	.word	0x20000278

0800b6dc <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 800b6dc:	b590      	push	{r4, r7, lr}
 800b6de:	b087      	sub	sp, #28
 800b6e0:	af02      	add	r7, sp, #8
 800b6e2:	60f8      	str	r0, [r7, #12]
 800b6e4:	460b      	mov	r3, r1
 800b6e6:	607a      	str	r2, [r7, #4]
 800b6e8:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b6f2:	681c      	ldr	r4, [r3, #0]
 800b6f4:	7afa      	ldrb	r2, [r7, #11]
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	9301      	str	r3, [sp, #4]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	9300      	str	r3, [sp, #0]
 800b6fe:	4613      	mov	r3, r2
 800b700:	2205      	movs	r2, #5
 800b702:	490c      	ldr	r1, [pc, #48]	@ (800b734 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 800b704:	68f8      	ldr	r0, [r7, #12]
 800b706:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	4a09      	ldr	r2, [pc, #36]	@ (800b738 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 800b714:	4907      	ldr	r1, [pc, #28]	@ (800b734 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 800b716:	68f8      	ldr	r0, [r7, #12]
 800b718:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	4a05      	ldr	r2, [pc, #20]	@ (800b73c <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 800b726:	4904      	ldr	r1, [pc, #16]	@ (800b738 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 800b728:	68f8      	ldr	r0, [r7, #12]
 800b72a:	4798      	blx	r3
}
 800b72c:	bf00      	nop
 800b72e:	3714      	adds	r7, #20
 800b730:	46bd      	mov	sp, r7
 800b732:	bd90      	pop	{r4, r7, pc}
 800b734:	20000250 	.word	0x20000250
 800b738:	20000270 	.word	0x20000270
 800b73c:	20000278 	.word	0x20000278

0800b740 <_ZN5L6470I8shield_1E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 800b740:	b590      	push	{r4, r7, lr}
 800b742:	b085      	sub	sp, #20
 800b744:	af02      	add	r7, sp, #8
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b750:	d21f      	bcs.n	800b792 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b75a:	681c      	ldr	r4, [r3, #0]
 800b75c:	2300      	movs	r3, #0
 800b75e:	9301      	str	r3, [sp, #4]
 800b760:	2300      	movs	r3, #0
 800b762:	9300      	str	r3, [sp, #0]
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	2206      	movs	r2, #6
 800b768:	490c      	ldr	r1, [pc, #48]	@ (800b79c <_ZN5L6470I8shield_1E10L6470_GoToEm+0x5c>)
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	4a09      	ldr	r2, [pc, #36]	@ (800b7a0 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x60>)
 800b77a:	4908      	ldr	r1, [pc, #32]	@ (800b79c <_ZN5L6470I8shield_1E10L6470_GoToEm+0x5c>)
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	4a06      	ldr	r2, [pc, #24]	@ (800b7a4 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x64>)
 800b78c:	4904      	ldr	r1, [pc, #16]	@ (800b7a0 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x60>)
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	4798      	blx	r3
}
 800b792:	bf00      	nop
 800b794:	370c      	adds	r7, #12
 800b796:	46bd      	mov	sp, r7
 800b798:	bd90      	pop	{r4, r7, pc}
 800b79a:	bf00      	nop
 800b79c:	20000250 	.word	0x20000250
 800b7a0:	20000270 	.word	0x20000270
 800b7a4:	20000278 	.word	0x20000278

0800b7a8 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 800b7a8:	b590      	push	{r4, r7, lr}
 800b7aa:	b087      	sub	sp, #28
 800b7ac:	af02      	add	r7, sp, #8
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	460b      	mov	r3, r1
 800b7b2:	607a      	str	r2, [r7, #4]
 800b7b4:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b7bc:	d220      	bcs.n	800b800 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b7c6:	681c      	ldr	r4, [r3, #0]
 800b7c8:	7afa      	ldrb	r2, [r7, #11]
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	9301      	str	r3, [sp, #4]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	9300      	str	r3, [sp, #0]
 800b7d2:	4613      	mov	r3, r2
 800b7d4:	2207      	movs	r2, #7
 800b7d6:	490c      	ldr	r1, [pc, #48]	@ (800b808 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 800b7d8:	68f8      	ldr	r0, [r7, #12]
 800b7da:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4a09      	ldr	r2, [pc, #36]	@ (800b80c <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 800b7e8:	4907      	ldr	r1, [pc, #28]	@ (800b808 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 800b7ea:	68f8      	ldr	r0, [r7, #12]
 800b7ec:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	4a05      	ldr	r2, [pc, #20]	@ (800b810 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 800b7fa:	4904      	ldr	r1, [pc, #16]	@ (800b80c <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 800b7fc:	68f8      	ldr	r0, [r7, #12]
 800b7fe:	4798      	blx	r3
}
 800b800:	bf00      	nop
 800b802:	3714      	adds	r7, #20
 800b804:	46bd      	mov	sp, r7
 800b806:	bd90      	pop	{r4, r7, pc}
 800b808:	20000250 	.word	0x20000250
 800b80c:	20000270 	.word	0x20000270
 800b810:	20000278 	.word	0x20000278

0800b814 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800b814:	b590      	push	{r4, r7, lr}
 800b816:	b087      	sub	sp, #28
 800b818:	af02      	add	r7, sp, #8
 800b81a:	60f8      	str	r0, [r7, #12]
 800b81c:	607b      	str	r3, [r7, #4]
 800b81e:	460b      	mov	r3, r1
 800b820:	72fb      	strb	r3, [r7, #11]
 800b822:	4613      	mov	r3, r2
 800b824:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b82e:	681c      	ldr	r4, [r3, #0]
 800b830:	7af9      	ldrb	r1, [r7, #11]
 800b832:	7abb      	ldrb	r3, [r7, #10]
 800b834:	687a      	ldr	r2, [r7, #4]
 800b836:	9201      	str	r2, [sp, #4]
 800b838:	9300      	str	r3, [sp, #0]
 800b83a:	460b      	mov	r3, r1
 800b83c:	2208      	movs	r2, #8
 800b83e:	490c      	ldr	r1, [pc, #48]	@ (800b870 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 800b840:	68f8      	ldr	r0, [r7, #12]
 800b842:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	4a09      	ldr	r2, [pc, #36]	@ (800b874 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 800b850:	4907      	ldr	r1, [pc, #28]	@ (800b870 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 800b852:	68f8      	ldr	r0, [r7, #12]
 800b854:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4a05      	ldr	r2, [pc, #20]	@ (800b878 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 800b862:	4904      	ldr	r1, [pc, #16]	@ (800b874 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 800b864:	68f8      	ldr	r0, [r7, #12]
 800b866:	4798      	blx	r3
}
 800b868:	bf00      	nop
 800b86a:	3714      	adds	r7, #20
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd90      	pop	{r4, r7, pc}
 800b870:	20000250 	.word	0x20000250
 800b874:	20000270 	.word	0x20000270
 800b878:	20000278 	.word	0x20000278

0800b87c <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 800b87c:	b590      	push	{r4, r7, lr}
 800b87e:	b085      	sub	sp, #20
 800b880:	af02      	add	r7, sp, #8
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	460b      	mov	r3, r1
 800b886:	70fb      	strb	r3, [r7, #3]
 800b888:	4613      	mov	r3, r2
 800b88a:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b894:	681c      	ldr	r4, [r3, #0]
 800b896:	78fa      	ldrb	r2, [r7, #3]
 800b898:	78bb      	ldrb	r3, [r7, #2]
 800b89a:	2100      	movs	r1, #0
 800b89c:	9101      	str	r1, [sp, #4]
 800b89e:	9300      	str	r3, [sp, #0]
 800b8a0:	4613      	mov	r3, r2
 800b8a2:	2209      	movs	r2, #9
 800b8a4:	490c      	ldr	r1, [pc, #48]	@ (800b8d8 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	4a09      	ldr	r2, [pc, #36]	@ (800b8dc <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 800b8b6:	4908      	ldr	r1, [pc, #32]	@ (800b8d8 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	4a06      	ldr	r2, [pc, #24]	@ (800b8e0 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 800b8c8:	4904      	ldr	r1, [pc, #16]	@ (800b8dc <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	4798      	blx	r3
}
 800b8ce:	bf00      	nop
 800b8d0:	370c      	adds	r7, #12
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd90      	pop	{r4, r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	20000250 	.word	0x20000250
 800b8dc:	20000270 	.word	0x20000270
 800b8e0:	20000278 	.word	0x20000278

0800b8e4 <_ZN5L6470I8shield_1E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 800b8e4:	b590      	push	{r4, r7, lr}
 800b8e6:	b085      	sub	sp, #20
 800b8e8:	af02      	add	r7, sp, #8
 800b8ea:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b8f4:	681c      	ldr	r4, [r3, #0]
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	9301      	str	r3, [sp, #4]
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	9300      	str	r3, [sp, #0]
 800b8fe:	2300      	movs	r3, #0
 800b900:	220a      	movs	r2, #10
 800b902:	490c      	ldr	r1, [pc, #48]	@ (800b934 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x50>)
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	4a09      	ldr	r2, [pc, #36]	@ (800b938 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x54>)
 800b914:	4907      	ldr	r1, [pc, #28]	@ (800b934 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x50>)
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	4a05      	ldr	r2, [pc, #20]	@ (800b93c <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x58>)
 800b926:	4904      	ldr	r1, [pc, #16]	@ (800b938 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x54>)
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	4798      	blx	r3
}
 800b92c:	bf00      	nop
 800b92e:	370c      	adds	r7, #12
 800b930:	46bd      	mov	sp, r7
 800b932:	bd90      	pop	{r4, r7, pc}
 800b934:	20000250 	.word	0x20000250
 800b938:	20000270 	.word	0x20000270
 800b93c:	20000278 	.word	0x20000278

0800b940 <_ZN5L6470I8shield_1E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 800b940:	b590      	push	{r4, r7, lr}
 800b942:	b085      	sub	sp, #20
 800b944:	af02      	add	r7, sp, #8
 800b946:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b950:	681c      	ldr	r4, [r3, #0]
 800b952:	2300      	movs	r3, #0
 800b954:	9301      	str	r3, [sp, #4]
 800b956:	2300      	movs	r3, #0
 800b958:	9300      	str	r3, [sp, #0]
 800b95a:	2300      	movs	r3, #0
 800b95c:	220b      	movs	r2, #11
 800b95e:	490c      	ldr	r1, [pc, #48]	@ (800b990 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x50>)
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	4a09      	ldr	r2, [pc, #36]	@ (800b994 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x54>)
 800b970:	4907      	ldr	r1, [pc, #28]	@ (800b990 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x50>)
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4a05      	ldr	r2, [pc, #20]	@ (800b998 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x58>)
 800b982:	4904      	ldr	r1, [pc, #16]	@ (800b994 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x54>)
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	4798      	blx	r3
}
 800b988:	bf00      	nop
 800b98a:	370c      	adds	r7, #12
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd90      	pop	{r4, r7, pc}
 800b990:	20000250 	.word	0x20000250
 800b994:	20000270 	.word	0x20000270
 800b998:	20000278 	.word	0x20000278

0800b99c <_ZN5L6470I8shield_1E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 800b99c:	b590      	push	{r4, r7, lr}
 800b99e:	b085      	sub	sp, #20
 800b9a0:	af02      	add	r7, sp, #8
 800b9a2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b9ac:	681c      	ldr	r4, [r3, #0]
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	9301      	str	r3, [sp, #4]
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	9300      	str	r3, [sp, #0]
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	220c      	movs	r2, #12
 800b9ba:	490c      	ldr	r1, [pc, #48]	@ (800b9ec <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x50>)
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	4a09      	ldr	r2, [pc, #36]	@ (800b9f0 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x54>)
 800b9cc:	4907      	ldr	r1, [pc, #28]	@ (800b9ec <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x50>)
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4a05      	ldr	r2, [pc, #20]	@ (800b9f4 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x58>)
 800b9de:	4904      	ldr	r1, [pc, #16]	@ (800b9f0 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x54>)
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	4798      	blx	r3
}
 800b9e4:	bf00      	nop
 800b9e6:	370c      	adds	r7, #12
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd90      	pop	{r4, r7, pc}
 800b9ec:	20000250 	.word	0x20000250
 800b9f0:	20000270 	.word	0x20000270
 800b9f4:	20000278 	.word	0x20000278

0800b9f8 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 800b9f8:	b590      	push	{r4, r7, lr}
 800b9fa:	b085      	sub	sp, #20
 800b9fc:	af02      	add	r7, sp, #8
 800b9fe:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800ba08:	681c      	ldr	r4, [r3, #0]
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	9301      	str	r3, [sp, #4]
 800ba0e:	2300      	movs	r3, #0
 800ba10:	9300      	str	r3, [sp, #0]
 800ba12:	2300      	movs	r3, #0
 800ba14:	220d      	movs	r2, #13
 800ba16:	490c      	ldr	r1, [pc, #48]	@ (800ba48 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x50>)
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	4a09      	ldr	r2, [pc, #36]	@ (800ba4c <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x54>)
 800ba28:	4907      	ldr	r1, [pc, #28]	@ (800ba48 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x50>)
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	4a05      	ldr	r2, [pc, #20]	@ (800ba50 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x58>)
 800ba3a:	4904      	ldr	r1, [pc, #16]	@ (800ba4c <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x54>)
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	4798      	blx	r3
}
 800ba40:	bf00      	nop
 800ba42:	370c      	adds	r7, #12
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd90      	pop	{r4, r7, pc}
 800ba48:	20000250 	.word	0x20000250
 800ba4c:	20000270 	.word	0x20000270
 800ba50:	20000278 	.word	0x20000278

0800ba54 <_ZN5L6470I8shield_1E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 800ba54:	b590      	push	{r4, r7, lr}
 800ba56:	b085      	sub	sp, #20
 800ba58:	af02      	add	r7, sp, #8
 800ba5a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800ba64:	681c      	ldr	r4, [r3, #0]
 800ba66:	2300      	movs	r3, #0
 800ba68:	9301      	str	r3, [sp, #4]
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	9300      	str	r3, [sp, #0]
 800ba6e:	2300      	movs	r3, #0
 800ba70:	220e      	movs	r2, #14
 800ba72:	490c      	ldr	r1, [pc, #48]	@ (800baa4 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x50>)
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	4a09      	ldr	r2, [pc, #36]	@ (800baa8 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x54>)
 800ba84:	4907      	ldr	r1, [pc, #28]	@ (800baa4 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x50>)
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	4a05      	ldr	r2, [pc, #20]	@ (800baac <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x58>)
 800ba96:	4904      	ldr	r1, [pc, #16]	@ (800baa8 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x54>)
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	4798      	blx	r3
}
 800ba9c:	bf00      	nop
 800ba9e:	370c      	adds	r7, #12
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd90      	pop	{r4, r7, pc}
 800baa4:	20000250 	.word	0x20000250
 800baa8:	20000270 	.word	0x20000270
 800baac:	20000278 	.word	0x20000278

0800bab0 <_ZN5L6470I8shield_1E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 800bab0:	b590      	push	{r4, r7, lr}
 800bab2:	b085      	sub	sp, #20
 800bab4:	af02      	add	r7, sp, #8
 800bab6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800bac0:	681c      	ldr	r4, [r3, #0]
 800bac2:	2300      	movs	r3, #0
 800bac4:	9301      	str	r3, [sp, #4]
 800bac6:	2300      	movs	r3, #0
 800bac8:	9300      	str	r3, [sp, #0]
 800baca:	2300      	movs	r3, #0
 800bacc:	220f      	movs	r2, #15
 800bace:	490c      	ldr	r1, [pc, #48]	@ (800bb00 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x50>)
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	4a09      	ldr	r2, [pc, #36]	@ (800bb04 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x54>)
 800bae0:	4907      	ldr	r1, [pc, #28]	@ (800bb00 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x50>)
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4a05      	ldr	r2, [pc, #20]	@ (800bb08 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x58>)
 800baf2:	4904      	ldr	r1, [pc, #16]	@ (800bb04 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x54>)
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	4798      	blx	r3
}
 800baf8:	bf00      	nop
 800bafa:	370c      	adds	r7, #12
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd90      	pop	{r4, r7, pc}
 800bb00:	20000250 	.word	0x20000250
 800bb04:	20000270 	.word	0x20000270
 800bb08:	20000278 	.word	0x20000278

0800bb0c <_ZN5L6470I8shield_1E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 800bb0c:	b590      	push	{r4, r7, lr}
 800bb0e:	b085      	sub	sp, #20
 800bb10:	af02      	add	r7, sp, #8
 800bb12:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800bb1c:	681c      	ldr	r4, [r3, #0]
 800bb1e:	2300      	movs	r3, #0
 800bb20:	9301      	str	r3, [sp, #4]
 800bb22:	2300      	movs	r3, #0
 800bb24:	9300      	str	r3, [sp, #0]
 800bb26:	2300      	movs	r3, #0
 800bb28:	2210      	movs	r2, #16
 800bb2a:	490c      	ldr	r1, [pc, #48]	@ (800bb5c <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x50>)
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	4a09      	ldr	r2, [pc, #36]	@ (800bb60 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x54>)
 800bb3c:	4907      	ldr	r1, [pc, #28]	@ (800bb5c <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x50>)
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	4a05      	ldr	r2, [pc, #20]	@ (800bb64 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x58>)
 800bb4e:	4904      	ldr	r1, [pc, #16]	@ (800bb60 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x54>)
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	4798      	blx	r3
}
 800bb54:	bf00      	nop
 800bb56:	370c      	adds	r7, #12
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd90      	pop	{r4, r7, pc}
 800bb5c:	20000250 	.word	0x20000250
 800bb60:	20000270 	.word	0x20000270
 800bb64:	20000278 	.word	0x20000278

0800bb68 <_ZN5L6470I8shield_1E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 800bb68:	b590      	push	{r4, r7, lr}
 800bb6a:	b085      	sub	sp, #20
 800bb6c:	af02      	add	r7, sp, #8
 800bb6e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800bb78:	681c      	ldr	r4, [r3, #0]
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	9301      	str	r3, [sp, #4]
 800bb7e:	2300      	movs	r3, #0
 800bb80:	9300      	str	r3, [sp, #0]
 800bb82:	2300      	movs	r3, #0
 800bb84:	2211      	movs	r2, #17
 800bb86:	490c      	ldr	r1, [pc, #48]	@ (800bbb8 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x50>)
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4a09      	ldr	r2, [pc, #36]	@ (800bbbc <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x54>)
 800bb98:	4907      	ldr	r1, [pc, #28]	@ (800bbb8 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x50>)
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	4a05      	ldr	r2, [pc, #20]	@ (800bbc0 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x58>)
 800bbaa:	4904      	ldr	r1, [pc, #16]	@ (800bbbc <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x54>)
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	4798      	blx	r3
}
 800bbb0:	bf00      	nop
 800bbb2:	370c      	adds	r7, #12
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd90      	pop	{r4, r7, pc}
 800bbb8:	20000250 	.word	0x20000250
 800bbbc:	20000270 	.word	0x20000270
 800bbc0:	20000278 	.word	0x20000278

0800bbc4 <_ZN5L6470I8shield_1E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 800bbc4:	b590      	push	{r4, r7, lr}
 800bbc6:	b087      	sub	sp, #28
 800bbc8:	af02      	add	r7, sp, #8
 800bbca:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800bbd4:	681c      	ldr	r4, [r3, #0]
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	9301      	str	r3, [sp, #4]
 800bbda:	2300      	movs	r3, #0
 800bbdc:	9300      	str	r3, [sp, #0]
 800bbde:	2300      	movs	r3, #0
 800bbe0:	2212      	movs	r2, #18
 800bbe2:	4912      	ldr	r1, [pc, #72]	@ (800bc2c <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x68>)
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	4a0f      	ldr	r2, [pc, #60]	@ (800bc30 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x6c>)
 800bbf4:	490d      	ldr	r1, [pc, #52]	@ (800bc2c <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x68>)
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	4a0b      	ldr	r2, [pc, #44]	@ (800bc34 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x70>)
 800bc06:	490a      	ldr	r1, [pc, #40]	@ (800bc30 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x6c>)
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	2202      	movs	r2, #2
 800bc18:	4906      	ldr	r1, [pc, #24]	@ (800bc34 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x70>)
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	4798      	blx	r3
 800bc1e:	4603      	mov	r3, r0
 800bc20:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 800bc22:	89fb      	ldrh	r3, [r7, #14]
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3714      	adds	r7, #20
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd90      	pop	{r4, r7, pc}
 800bc2c:	20000250 	.word	0x20000250
 800bc30:	20000270 	.word	0x20000270
 800bc34:	20000278 	.word	0x20000278

0800bc38 <_ZN5L6470I8shield_1E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 800bc38:	b590      	push	{r4, r7, lr}
 800bc3a:	b087      	sub	sp, #28
 800bc3c:	af02      	add	r7, sp, #8
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	460b      	mov	r3, r1
 800bc42:	607a      	str	r2, [r7, #4]
 800bc44:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800bc4e:	681c      	ldr	r4, [r3, #0]
 800bc50:	7afa      	ldrb	r2, [r7, #11]
 800bc52:	2300      	movs	r3, #0
 800bc54:	9301      	str	r3, [sp, #4]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	9300      	str	r3, [sp, #0]
 800bc5a:	4613      	mov	r3, r2
 800bc5c:	2201      	movs	r2, #1
 800bc5e:	4903      	ldr	r1, [pc, #12]	@ (800bc6c <_ZN5L6470I8shield_1E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 800bc60:	68f8      	ldr	r0, [r7, #12]
 800bc62:	47a0      	blx	r4
}
 800bc64:	bf00      	nop
 800bc66:	3714      	adds	r7, #20
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd90      	pop	{r4, r7, pc}
 800bc6c:	20000250 	.word	0x20000250

0800bc70 <_ZN5L6470I8shield_1E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 800bc70:	b590      	push	{r4, r7, lr}
 800bc72:	b085      	sub	sp, #20
 800bc74:	af02      	add	r7, sp, #8
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	460b      	mov	r3, r1
 800bc7a:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800bc84:	681c      	ldr	r4, [r3, #0]
 800bc86:	78fb      	ldrb	r3, [r7, #3]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	9201      	str	r2, [sp, #4]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	9200      	str	r2, [sp, #0]
 800bc90:	2202      	movs	r2, #2
 800bc92:	4903      	ldr	r1, [pc, #12]	@ (800bca0 <_ZN5L6470I8shield_1E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	47a0      	blx	r4
}
 800bc98:	bf00      	nop
 800bc9a:	370c      	adds	r7, #12
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd90      	pop	{r4, r7, pc}
 800bca0:	20000250 	.word	0x20000250

0800bca4 <_ZN5L6470I8shield_1E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800bca4:	b590      	push	{r4, r7, lr}
 800bca6:	b087      	sub	sp, #28
 800bca8:	af02      	add	r7, sp, #8
 800bcaa:	60f8      	str	r0, [r7, #12]
 800bcac:	460b      	mov	r3, r1
 800bcae:	607a      	str	r2, [r7, #4]
 800bcb0:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800bcba:	681c      	ldr	r4, [r3, #0]
 800bcbc:	7afa      	ldrb	r2, [r7, #11]
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	9301      	str	r3, [sp, #4]
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	9300      	str	r3, [sp, #0]
 800bcc6:	4613      	mov	r3, r2
 800bcc8:	2203      	movs	r2, #3
 800bcca:	4903      	ldr	r1, [pc, #12]	@ (800bcd8 <_ZN5L6470I8shield_1E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 800bccc:	68f8      	ldr	r0, [r7, #12]
 800bcce:	47a0      	blx	r4
}
 800bcd0:	bf00      	nop
 800bcd2:	3714      	adds	r7, #20
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd90      	pop	{r4, r7, pc}
 800bcd8:	20000250 	.word	0x20000250

0800bcdc <_ZN5L6470I8shield_1E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 800bcdc:	b590      	push	{r4, r7, lr}
 800bcde:	b085      	sub	sp, #20
 800bce0:	af02      	add	r7, sp, #8
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	460b      	mov	r3, r1
 800bce6:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800bcf0:	681c      	ldr	r4, [r3, #0]
 800bcf2:	78fb      	ldrb	r3, [r7, #3]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	9201      	str	r2, [sp, #4]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	9200      	str	r2, [sp, #0]
 800bcfc:	2204      	movs	r2, #4
 800bcfe:	4903      	ldr	r1, [pc, #12]	@ (800bd0c <_ZN5L6470I8shield_1E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	47a0      	blx	r4
}
 800bd04:	bf00      	nop
 800bd06:	370c      	adds	r7, #12
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd90      	pop	{r4, r7, pc}
 800bd0c:	20000250 	.word	0x20000250

0800bd10 <_ZN5L6470I8shield_1E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 800bd10:	b590      	push	{r4, r7, lr}
 800bd12:	b087      	sub	sp, #28
 800bd14:	af02      	add	r7, sp, #8
 800bd16:	60f8      	str	r0, [r7, #12]
 800bd18:	460b      	mov	r3, r1
 800bd1a:	607a      	str	r2, [r7, #4]
 800bd1c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800bd26:	681c      	ldr	r4, [r3, #0]
 800bd28:	7afa      	ldrb	r2, [r7, #11]
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	9301      	str	r3, [sp, #4]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	9300      	str	r3, [sp, #0]
 800bd32:	4613      	mov	r3, r2
 800bd34:	2205      	movs	r2, #5
 800bd36:	4903      	ldr	r1, [pc, #12]	@ (800bd44 <_ZN5L6470I8shield_1E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 800bd38:	68f8      	ldr	r0, [r7, #12]
 800bd3a:	47a0      	blx	r4
}
 800bd3c:	bf00      	nop
 800bd3e:	3714      	adds	r7, #20
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd90      	pop	{r4, r7, pc}
 800bd44:	20000250 	.word	0x20000250

0800bd48 <_ZN5L6470I8shield_1E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 800bd48:	b590      	push	{r4, r7, lr}
 800bd4a:	b085      	sub	sp, #20
 800bd4c:	af02      	add	r7, sp, #8
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800bd5a:	681c      	ldr	r4, [r3, #0]
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	9301      	str	r3, [sp, #4]
 800bd60:	2300      	movs	r3, #0
 800bd62:	9300      	str	r3, [sp, #0]
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	2206      	movs	r2, #6
 800bd68:	4903      	ldr	r1, [pc, #12]	@ (800bd78 <_ZN5L6470I8shield_1E17L6470_PrepareGoToEm+0x30>)
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	47a0      	blx	r4
}
 800bd6e:	bf00      	nop
 800bd70:	370c      	adds	r7, #12
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd90      	pop	{r4, r7, pc}
 800bd76:	bf00      	nop
 800bd78:	20000250 	.word	0x20000250

0800bd7c <_ZN5L6470I8shield_1E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 800bd7c:	b590      	push	{r4, r7, lr}
 800bd7e:	b087      	sub	sp, #28
 800bd80:	af02      	add	r7, sp, #8
 800bd82:	60f8      	str	r0, [r7, #12]
 800bd84:	460b      	mov	r3, r1
 800bd86:	607a      	str	r2, [r7, #4]
 800bd88:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800bd92:	681c      	ldr	r4, [r3, #0]
 800bd94:	7afa      	ldrb	r2, [r7, #11]
 800bd96:	2300      	movs	r3, #0
 800bd98:	9301      	str	r3, [sp, #4]
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	9300      	str	r3, [sp, #0]
 800bd9e:	4613      	mov	r3, r2
 800bda0:	2207      	movs	r2, #7
 800bda2:	4903      	ldr	r1, [pc, #12]	@ (800bdb0 <_ZN5L6470I8shield_1E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 800bda4:	68f8      	ldr	r0, [r7, #12]
 800bda6:	47a0      	blx	r4
}
 800bda8:	bf00      	nop
 800bdaa:	3714      	adds	r7, #20
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd90      	pop	{r4, r7, pc}
 800bdb0:	20000250 	.word	0x20000250

0800bdb4 <_ZN5L6470I8shield_1E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800bdb4:	b590      	push	{r4, r7, lr}
 800bdb6:	b087      	sub	sp, #28
 800bdb8:	af02      	add	r7, sp, #8
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	607b      	str	r3, [r7, #4]
 800bdbe:	460b      	mov	r3, r1
 800bdc0:	72fb      	strb	r3, [r7, #11]
 800bdc2:	4613      	mov	r3, r2
 800bdc4:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800bdce:	681c      	ldr	r4, [r3, #0]
 800bdd0:	7af9      	ldrb	r1, [r7, #11]
 800bdd2:	7abb      	ldrb	r3, [r7, #10]
 800bdd4:	687a      	ldr	r2, [r7, #4]
 800bdd6:	9201      	str	r2, [sp, #4]
 800bdd8:	9300      	str	r3, [sp, #0]
 800bdda:	460b      	mov	r3, r1
 800bddc:	2208      	movs	r2, #8
 800bdde:	4903      	ldr	r1, [pc, #12]	@ (800bdec <_ZN5L6470I8shield_1E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 800bde0:	68f8      	ldr	r0, [r7, #12]
 800bde2:	47a0      	blx	r4
}
 800bde4:	bf00      	nop
 800bde6:	3714      	adds	r7, #20
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd90      	pop	{r4, r7, pc}
 800bdec:	20000250 	.word	0x20000250

0800bdf0 <_ZN5L6470I8shield_1E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 800bdf0:	b590      	push	{r4, r7, lr}
 800bdf2:	b085      	sub	sp, #20
 800bdf4:	af02      	add	r7, sp, #8
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	460b      	mov	r3, r1
 800bdfa:	70fb      	strb	r3, [r7, #3]
 800bdfc:	4613      	mov	r3, r2
 800bdfe:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800be08:	681c      	ldr	r4, [r3, #0]
 800be0a:	78fa      	ldrb	r2, [r7, #3]
 800be0c:	78bb      	ldrb	r3, [r7, #2]
 800be0e:	2100      	movs	r1, #0
 800be10:	9101      	str	r1, [sp, #4]
 800be12:	9300      	str	r3, [sp, #0]
 800be14:	4613      	mov	r3, r2
 800be16:	2209      	movs	r2, #9
 800be18:	4903      	ldr	r1, [pc, #12]	@ (800be28 <_ZN5L6470I8shield_1E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	47a0      	blx	r4
}
 800be1e:	bf00      	nop
 800be20:	370c      	adds	r7, #12
 800be22:	46bd      	mov	sp, r7
 800be24:	bd90      	pop	{r4, r7, pc}
 800be26:	bf00      	nop
 800be28:	20000250 	.word	0x20000250

0800be2c <_ZN5L6470I8shield_1E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 800be2c:	b590      	push	{r4, r7, lr}
 800be2e:	b085      	sub	sp, #20
 800be30:	af02      	add	r7, sp, #8
 800be32:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800be3c:	681c      	ldr	r4, [r3, #0]
 800be3e:	2300      	movs	r3, #0
 800be40:	9301      	str	r3, [sp, #4]
 800be42:	2300      	movs	r3, #0
 800be44:	9300      	str	r3, [sp, #0]
 800be46:	2300      	movs	r3, #0
 800be48:	220a      	movs	r2, #10
 800be4a:	4903      	ldr	r1, [pc, #12]	@ (800be58 <_ZN5L6470I8shield_1E19L6470_PrepareGoHomeEv+0x2c>)
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	47a0      	blx	r4
}
 800be50:	bf00      	nop
 800be52:	370c      	adds	r7, #12
 800be54:	46bd      	mov	sp, r7
 800be56:	bd90      	pop	{r4, r7, pc}
 800be58:	20000250 	.word	0x20000250

0800be5c <_ZN5L6470I8shield_1E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 800be5c:	b590      	push	{r4, r7, lr}
 800be5e:	b085      	sub	sp, #20
 800be60:	af02      	add	r7, sp, #8
 800be62:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800be6c:	681c      	ldr	r4, [r3, #0]
 800be6e:	2300      	movs	r3, #0
 800be70:	9301      	str	r3, [sp, #4]
 800be72:	2300      	movs	r3, #0
 800be74:	9300      	str	r3, [sp, #0]
 800be76:	2300      	movs	r3, #0
 800be78:	220b      	movs	r2, #11
 800be7a:	4903      	ldr	r1, [pc, #12]	@ (800be88 <_ZN5L6470I8shield_1E19L6470_PrepareGoMarkEv+0x2c>)
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	47a0      	blx	r4
}
 800be80:	bf00      	nop
 800be82:	370c      	adds	r7, #12
 800be84:	46bd      	mov	sp, r7
 800be86:	bd90      	pop	{r4, r7, pc}
 800be88:	20000250 	.word	0x20000250

0800be8c <_ZN5L6470I8shield_1E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 800be8c:	b590      	push	{r4, r7, lr}
 800be8e:	b085      	sub	sp, #20
 800be90:	af02      	add	r7, sp, #8
 800be92:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800be9c:	681c      	ldr	r4, [r3, #0]
 800be9e:	2300      	movs	r3, #0
 800bea0:	9301      	str	r3, [sp, #4]
 800bea2:	2300      	movs	r3, #0
 800bea4:	9300      	str	r3, [sp, #0]
 800bea6:	2300      	movs	r3, #0
 800bea8:	220c      	movs	r2, #12
 800beaa:	4903      	ldr	r1, [pc, #12]	@ (800beb8 <_ZN5L6470I8shield_1E21L6470_PrepareResetPosEv+0x2c>)
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	47a0      	blx	r4
}
 800beb0:	bf00      	nop
 800beb2:	370c      	adds	r7, #12
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd90      	pop	{r4, r7, pc}
 800beb8:	20000250 	.word	0x20000250

0800bebc <_ZN5L6470I8shield_1E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 800bebc:	b590      	push	{r4, r7, lr}
 800bebe:	b085      	sub	sp, #20
 800bec0:	af02      	add	r7, sp, #8
 800bec2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800becc:	681c      	ldr	r4, [r3, #0]
 800bece:	2300      	movs	r3, #0
 800bed0:	9301      	str	r3, [sp, #4]
 800bed2:	2300      	movs	r3, #0
 800bed4:	9300      	str	r3, [sp, #0]
 800bed6:	2300      	movs	r3, #0
 800bed8:	220d      	movs	r2, #13
 800beda:	4903      	ldr	r1, [pc, #12]	@ (800bee8 <_ZN5L6470I8shield_1E24L6470_PrepareResetDeviceEv+0x2c>)
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	47a0      	blx	r4
}
 800bee0:	bf00      	nop
 800bee2:	370c      	adds	r7, #12
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd90      	pop	{r4, r7, pc}
 800bee8:	20000250 	.word	0x20000250

0800beec <_ZN5L6470I8shield_1E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 800beec:	b590      	push	{r4, r7, lr}
 800beee:	b085      	sub	sp, #20
 800bef0:	af02      	add	r7, sp, #8
 800bef2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800befc:	681c      	ldr	r4, [r3, #0]
 800befe:	2300      	movs	r3, #0
 800bf00:	9301      	str	r3, [sp, #4]
 800bf02:	2300      	movs	r3, #0
 800bf04:	9300      	str	r3, [sp, #0]
 800bf06:	2300      	movs	r3, #0
 800bf08:	220e      	movs	r2, #14
 800bf0a:	4903      	ldr	r1, [pc, #12]	@ (800bf18 <_ZN5L6470I8shield_1E21L6470_PrepareSoftStopEv+0x2c>)
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	47a0      	blx	r4
}
 800bf10:	bf00      	nop
 800bf12:	370c      	adds	r7, #12
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd90      	pop	{r4, r7, pc}
 800bf18:	20000250 	.word	0x20000250

0800bf1c <_ZN5L6470I8shield_1E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 800bf1c:	b590      	push	{r4, r7, lr}
 800bf1e:	b085      	sub	sp, #20
 800bf20:	af02      	add	r7, sp, #8
 800bf22:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800bf2c:	681c      	ldr	r4, [r3, #0]
 800bf2e:	2300      	movs	r3, #0
 800bf30:	9301      	str	r3, [sp, #4]
 800bf32:	2300      	movs	r3, #0
 800bf34:	9300      	str	r3, [sp, #0]
 800bf36:	2300      	movs	r3, #0
 800bf38:	220f      	movs	r2, #15
 800bf3a:	4903      	ldr	r1, [pc, #12]	@ (800bf48 <_ZN5L6470I8shield_1E21L6470_PrepareHardStopEv+0x2c>)
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	47a0      	blx	r4
}
 800bf40:	bf00      	nop
 800bf42:	370c      	adds	r7, #12
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd90      	pop	{r4, r7, pc}
 800bf48:	20000250 	.word	0x20000250

0800bf4c <_ZN5L6470I8shield_1E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 800bf4c:	b590      	push	{r4, r7, lr}
 800bf4e:	b085      	sub	sp, #20
 800bf50:	af02      	add	r7, sp, #8
 800bf52:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800bf5c:	681c      	ldr	r4, [r3, #0]
 800bf5e:	2300      	movs	r3, #0
 800bf60:	9301      	str	r3, [sp, #4]
 800bf62:	2300      	movs	r3, #0
 800bf64:	9300      	str	r3, [sp, #0]
 800bf66:	2300      	movs	r3, #0
 800bf68:	2210      	movs	r2, #16
 800bf6a:	4903      	ldr	r1, [pc, #12]	@ (800bf78 <_ZN5L6470I8shield_1E20L6470_PrepareSoftHiZEv+0x2c>)
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	47a0      	blx	r4
}
 800bf70:	bf00      	nop
 800bf72:	370c      	adds	r7, #12
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd90      	pop	{r4, r7, pc}
 800bf78:	20000250 	.word	0x20000250

0800bf7c <_ZN5L6470I8shield_1E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 800bf7c:	b590      	push	{r4, r7, lr}
 800bf7e:	b085      	sub	sp, #20
 800bf80:	af02      	add	r7, sp, #8
 800bf82:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800bf8c:	681c      	ldr	r4, [r3, #0]
 800bf8e:	2300      	movs	r3, #0
 800bf90:	9301      	str	r3, [sp, #4]
 800bf92:	2300      	movs	r3, #0
 800bf94:	9300      	str	r3, [sp, #0]
 800bf96:	2300      	movs	r3, #0
 800bf98:	2211      	movs	r2, #17
 800bf9a:	4903      	ldr	r1, [pc, #12]	@ (800bfa8 <_ZN5L6470I8shield_1E20L6470_PrepareHardHiZEv+0x2c>)
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	47a0      	blx	r4
}
 800bfa0:	bf00      	nop
 800bfa2:	370c      	adds	r7, #12
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd90      	pop	{r4, r7, pc}
 800bfa8:	20000250 	.word	0x20000250

0800bfac <_ZN5L6470I8shield_1E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 800bfac:	b590      	push	{r4, r7, lr}
 800bfae:	b085      	sub	sp, #20
 800bfb0:	af02      	add	r7, sp, #8
 800bfb2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800bfbc:	681c      	ldr	r4, [r3, #0]
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	9301      	str	r3, [sp, #4]
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	9300      	str	r3, [sp, #0]
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	2212      	movs	r2, #18
 800bfca:	4903      	ldr	r1, [pc, #12]	@ (800bfd8 <_ZN5L6470I8shield_1E22L6470_PrepareGetStatusEv+0x2c>)
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	47a0      	blx	r4
}
 800bfd0:	bf00      	nop
 800bfd2:	370c      	adds	r7, #12
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd90      	pop	{r4, r7, pc}
 800bfd8:	20000250 	.word	0x20000250

0800bfdc <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b082      	sub	sp, #8
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	4a09      	ldr	r2, [pc, #36]	@ (800c014 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 800bff0:	4909      	ldr	r1, [pc, #36]	@ (800c018 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	4a06      	ldr	r2, [pc, #24]	@ (800c01c <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 800c002:	4904      	ldr	r1, [pc, #16]	@ (800c014 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 800c008:	4b04      	ldr	r3, [pc, #16]	@ (800c01c <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3708      	adds	r7, #8
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}
 800c012:	bf00      	nop
 800c014:	20000270 	.word	0x20000270
 800c018:	20000250 	.word	0x20000250
 800c01c:	20000278 	.word	0x20000278

0800c020 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 800c020:	b590      	push	{r4, r7, lr}
 800c022:	b089      	sub	sp, #36	@ 0x24
 800c024:	af02      	add	r7, sp, #8
 800c026:	60f8      	str	r0, [r7, #12]
 800c028:	60b9      	str	r1, [r7, #8]
 800c02a:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 800c02c:	4b17      	ldr	r3, [pc, #92]	@ (800c08c <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 800c02e:	2200      	movs	r2, #0
 800c030:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 800c032:	2300      	movs	r3, #0
 800c034:	75fb      	strb	r3, [r7, #23]
 800c036:	e020      	b.n	800c07a <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c040:	681c      	ldr	r4, [r3, #0]
 800c042:	7dfb      	ldrb	r3, [r7, #23]
 800c044:	005b      	lsls	r3, r3, #1
 800c046:	461a      	mov	r2, r3
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	1899      	adds	r1, r3, r2
 800c04c:	7dfb      	ldrb	r3, [r7, #23]
 800c04e:	005b      	lsls	r3, r3, #1
 800c050:	461a      	mov	r2, r3
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	441a      	add	r2, r3
 800c056:	230a      	movs	r3, #10
 800c058:	9300      	str	r3, [sp, #0]
 800c05a:	2302      	movs	r3, #2
 800c05c:	68f8      	ldr	r0, [r7, #12]
 800c05e:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 800c060:	2300      	movs	r3, #0
 800c062:	75bb      	strb	r3, [r7, #22]
 800c064:	e003      	b.n	800c06e <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x4e>
 800c066:	bf00      	nop
 800c068:	7dbb      	ldrb	r3, [r7, #22]
 800c06a:	3301      	adds	r3, #1
 800c06c:	75bb      	strb	r3, [r7, #22]
 800c06e:	7dbb      	ldrb	r3, [r7, #22]
 800c070:	2b7c      	cmp	r3, #124	@ 0x7c
 800c072:	d9f8      	bls.n	800c066 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 800c074:	7dfb      	ldrb	r3, [r7, #23]
 800c076:	3301      	adds	r3, #1
 800c078:	75fb      	strb	r3, [r7, #23]
 800c07a:	7dfb      	ldrb	r3, [r7, #23]
 800c07c:	2b03      	cmp	r3, #3
 800c07e:	d9db      	bls.n	800c038 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 800c080:	bf00      	nop
}
 800c082:	bf00      	nop
 800c084:	371c      	adds	r7, #28
 800c086:	46bd      	mov	sp, r7
 800c088:	bd90      	pop	{r4, r7, pc}
 800c08a:	bf00      	nop
 800c08c:	2000024d 	.word	0x2000024d

0800c090 <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 800c090:	b480      	push	{r7}
 800c092:	b087      	sub	sp, #28
 800c094:	af00      	add	r7, sp, #0
 800c096:	60f8      	str	r0, [r7, #12]
 800c098:	60b9      	str	r1, [r7, #8]
 800c09a:	4613      	mov	r3, r2
 800c09c:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	74fb      	strb	r3, [r7, #19]
 800c0a6:	e016      	b.n	800c0d6 <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 800c0a8:	7cfb      	ldrb	r3, [r7, #19]
 800c0aa:	005b      	lsls	r3, r3, #1
 800c0ac:	461a      	mov	r2, r3
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	7f1b      	ldrb	r3, [r3, #28]
 800c0b2:	4413      	add	r3, r2
 800c0b4:	68ba      	ldr	r2, [r7, #8]
 800c0b6:	4413      	add	r3, r2
 800c0b8:	781b      	ldrb	r3, [r3, #0]
 800c0ba:	4619      	mov	r1, r3
 800c0bc:	79fa      	ldrb	r2, [r7, #7]
 800c0be:	7cfb      	ldrb	r3, [r7, #19]
 800c0c0:	1ad3      	subs	r3, r2, r3
 800c0c2:	00db      	lsls	r3, r3, #3
 800c0c4:	fa01 f303 	lsl.w	r3, r1, r3
 800c0c8:	461a      	mov	r2, r3
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	4313      	orrs	r3, r2
 800c0ce:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 800c0d0:	7cfb      	ldrb	r3, [r7, #19]
 800c0d2:	3301      	adds	r3, #1
 800c0d4:	74fb      	strb	r3, [r7, #19]
 800c0d6:	7cfb      	ldrb	r3, [r7, #19]
 800c0d8:	2b03      	cmp	r3, #3
 800c0da:	d9e5      	bls.n	800c0a8 <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 800c0dc:	697b      	ldr	r3, [r7, #20]
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	371c      	adds	r7, #28
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e8:	4770      	bx	lr
	...

0800c0ec <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b084      	sub	sp, #16
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
 800c0f4:	460b      	mov	r3, r1
 800c0f6:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	2118      	movs	r1, #24
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	4798      	blx	r3
 800c10c:	4602      	mov	r2, r0
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c112:	b292      	uxth	r2, r2
 800c114:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 800c116:	78fb      	ldrb	r3, [r7, #3]
 800c118:	2b0e      	cmp	r3, #14
 800c11a:	f200 8099 	bhi.w	800c250 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
 800c11e:	a201      	add	r2, pc, #4	@ (adr r2, 800c124 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x38>)
 800c120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c124:	0800c161 	.word	0x0800c161
 800c128:	0800c171 	.word	0x0800c171
 800c12c:	0800c181 	.word	0x0800c181
 800c130:	0800c191 	.word	0x0800c191
 800c134:	0800c1a1 	.word	0x0800c1a1
 800c138:	0800c1b1 	.word	0x0800c1b1
 800c13c:	0800c1c1 	.word	0x0800c1c1
 800c140:	0800c1d1 	.word	0x0800c1d1
 800c144:	0800c1e1 	.word	0x0800c1e1
 800c148:	0800c1f1 	.word	0x0800c1f1
 800c14c:	0800c201 	.word	0x0800c201
 800c150:	0800c211 	.word	0x0800c211
 800c154:	0800c221 	.word	0x0800c221
 800c158:	0800c231 	.word	0x0800c231
 800c15c:	0800c241 	.word	0x0800c241
      state = pL6470_StatusRegister->HiZ;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c164:	781b      	ldrb	r3, [r3, #0]
 800c166:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c16a:	b2db      	uxtb	r3, r3
 800c16c:	73fb      	strb	r3, [r7, #15]
      break;
 800c16e:	e06f      	b.n	800c250 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c174:	781b      	ldrb	r3, [r3, #0]
 800c176:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c17a:	b2db      	uxtb	r3, r3
 800c17c:	73fb      	strb	r3, [r7, #15]
      break;
 800c17e:	e067      	b.n	800c250 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c18a:	b2db      	uxtb	r3, r3
 800c18c:	73fb      	strb	r3, [r7, #15]
      break;
 800c18e:	e05f      	b.n	800c250 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c194:	781b      	ldrb	r3, [r3, #0]
 800c196:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c19a:	b2db      	uxtb	r3, r3
 800c19c:	73fb      	strb	r3, [r7, #15]
      break;
 800c19e:	e057      	b.n	800c250 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c1aa:	b2db      	uxtb	r3, r3
 800c1ac:	73fb      	strb	r3, [r7, #15]
      break;
 800c1ae:	e04f      	b.n	800c250 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1b4:	781b      	ldrb	r3, [r3, #0]
 800c1b6:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800c1ba:	b2db      	uxtb	r3, r3
 800c1bc:	73fb      	strb	r3, [r7, #15]
      break;
 800c1be:	e047      	b.n	800c250 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1c4:	781b      	ldrb	r3, [r3, #0]
 800c1c6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c1ca:	b2db      	uxtb	r3, r3
 800c1cc:	73fb      	strb	r3, [r7, #15]
      break;
 800c1ce:	e03f      	b.n	800c250 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1d4:	785b      	ldrb	r3, [r3, #1]
 800c1d6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c1da:	b2db      	uxtb	r3, r3
 800c1dc:	73fb      	strb	r3, [r7, #15]
      break;
 800c1de:	e037      	b.n	800c250 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1e4:	785b      	ldrb	r3, [r3, #1]
 800c1e6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c1ea:	b2db      	uxtb	r3, r3
 800c1ec:	73fb      	strb	r3, [r7, #15]
      break;
 800c1ee:	e02f      	b.n	800c250 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1f4:	785b      	ldrb	r3, [r3, #1]
 800c1f6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	73fb      	strb	r3, [r7, #15]
      break;
 800c1fe:	e027      	b.n	800c250 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c204:	785b      	ldrb	r3, [r3, #1]
 800c206:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c20a:	b2db      	uxtb	r3, r3
 800c20c:	73fb      	strb	r3, [r7, #15]
      break;
 800c20e:	e01f      	b.n	800c250 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c214:	785b      	ldrb	r3, [r3, #1]
 800c216:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c21a:	b2db      	uxtb	r3, r3
 800c21c:	73fb      	strb	r3, [r7, #15]
      break;
 800c21e:	e017      	b.n	800c250 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c224:	785b      	ldrb	r3, [r3, #1]
 800c226:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c22a:	b2db      	uxtb	r3, r3
 800c22c:	73fb      	strb	r3, [r7, #15]
      break;
 800c22e:	e00f      	b.n	800c250 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c234:	785b      	ldrb	r3, [r3, #1]
 800c236:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800c23a:	b2db      	uxtb	r3, r3
 800c23c:	73fb      	strb	r3, [r7, #15]
      break;
 800c23e:	e007      	b.n	800c250 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c244:	785b      	ldrb	r3, [r3, #1]
 800c246:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c24a:	b2db      	uxtb	r3, r3
 800c24c:	73fb      	strb	r3, [r7, #15]
      break;
 800c24e:	bf00      	nop
  return state;
 800c250:	7bfb      	ldrb	r3, [r7, #15]
}
 800c252:	4618      	mov	r0, r3
 800c254:	3710      	adds	r7, #16
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}
 800c25a:	bf00      	nop

0800c25c <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 800c25c:	b480      	push	{r7}
 800c25e:	b083      	sub	sp, #12
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	460b      	mov	r3, r1
 800c266:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 800c268:	78fb      	ldrb	r3, [r7, #3]
 800c26a:	2b18      	cmp	r3, #24
 800c26c:	d809      	bhi.n	800c282 <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6a19      	ldr	r1, [r3, #32]
 800c272:	78fa      	ldrb	r2, [r7, #3]
 800c274:	4613      	mov	r3, r2
 800c276:	009b      	lsls	r3, r3, #2
 800c278:	4413      	add	r3, r2
 800c27a:	009b      	lsls	r3, r3, #2
 800c27c:	440b      	add	r3, r1
 800c27e:	3301      	adds	r3, #1
 800c280:	e000      	b.n	800c284 <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 800c282:	2300      	movs	r3, #0
}
 800c284:	4618      	mov	r0, r3
 800c286:	370c      	adds	r7, #12
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr

0800c290 <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 800c290:	b480      	push	{r7}
 800c292:	b085      	sub	sp, #20
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 800c29a:	2300      	movs	r3, #0
 800c29c:	73fb      	strb	r3, [r7, #15]
 800c29e:	e01a      	b.n	800c2d6 <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 800c2a0:	7bfb      	ldrb	r3, [r7, #15]
 800c2a2:	011b      	lsls	r3, r3, #4
 800c2a4:	683a      	ldr	r2, [r7, #0]
 800c2a6:	4413      	add	r3, r2
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 800c2ac:	7bfb      	ldrb	r3, [r7, #15]
 800c2ae:	011b      	lsls	r3, r3, #4
 800c2b0:	683a      	ldr	r2, [r7, #0]
 800c2b2:	4413      	add	r3, r2
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 800c2b8:	7bfb      	ldrb	r3, [r7, #15]
 800c2ba:	011b      	lsls	r3, r3, #4
 800c2bc:	683a      	ldr	r2, [r7, #0]
 800c2be:	4413      	add	r3, r2
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 800c2c4:	7bfb      	ldrb	r3, [r7, #15]
 800c2c6:	011b      	lsls	r3, r3, #4
 800c2c8:	683a      	ldr	r2, [r7, #0]
 800c2ca:	4413      	add	r3, r2
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 800c2d0:	7bfb      	ldrb	r3, [r7, #15]
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	73fb      	strb	r3, [r7, #15]
 800c2d6:	7bfb      	ldrb	r3, [r7, #15]
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d9e1      	bls.n	800c2a0 <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 800c2dc:	bf00      	nop
 800c2de:	bf00      	nop
 800c2e0:	3714      	adds	r7, #20
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e8:	4770      	bx	lr

0800c2ea <_ZN5L6470I8shield_1E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 800c2ea:	b480      	push	{r7}
 800c2ec:	b085      	sub	sp, #20
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	60f8      	str	r0, [r7, #12]
 800c2f2:	60b9      	str	r1, [r7, #8]
 800c2f4:	603b      	str	r3, [r7, #0]
 800c2f6:	4613      	mov	r3, r2
 800c2f8:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	7f1b      	ldrb	r3, [r3, #28]
 800c2fe:	011b      	lsls	r3, r3, #4
 800c300:	68ba      	ldr	r2, [r7, #8]
 800c302:	4413      	add	r3, r2
 800c304:	79fa      	ldrb	r2, [r7, #7]
 800c306:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	7f1b      	ldrb	r3, [r3, #28]
 800c30c:	011b      	lsls	r3, r3, #4
 800c30e:	68ba      	ldr	r2, [r7, #8]
 800c310:	4413      	add	r3, r2
 800c312:	683a      	ldr	r2, [r7, #0]
 800c314:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	7f1b      	ldrb	r3, [r3, #28]
 800c31a:	011b      	lsls	r3, r3, #4
 800c31c:	68ba      	ldr	r2, [r7, #8]
 800c31e:	4413      	add	r3, r2
 800c320:	69ba      	ldr	r2, [r7, #24]
 800c322:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	7f1b      	ldrb	r3, [r3, #28]
 800c328:	011b      	lsls	r3, r3, #4
 800c32a:	68ba      	ldr	r2, [r7, #8]
 800c32c:	4413      	add	r3, r2
 800c32e:	69fa      	ldr	r2, [r7, #28]
 800c330:	60da      	str	r2, [r3, #12]
}
 800c332:	bf00      	nop
 800c334:	3714      	adds	r7, #20
 800c336:	46bd      	mov	sp, r7
 800c338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33c:	4770      	bx	lr
	...

0800c340 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 800c340:	b590      	push	{r4, r7, lr}
 800c342:	b087      	sub	sp, #28
 800c344:	af02      	add	r7, sp, #8
 800c346:	60f8      	str	r0, [r7, #12]
 800c348:	60b9      	str	r1, [r7, #8]
 800c34a:	603b      	str	r3, [r7, #0]
 800c34c:	4613      	mov	r3, r2
 800c34e:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 800c350:	4b10      	ldr	r3, [pc, #64]	@ (800c394 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 800c352:	781b      	ldrb	r3, [r3, #0]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d10a      	bne.n	800c36e <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800c358:	4b0e      	ldr	r3, [pc, #56]	@ (800c394 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 800c35a:	2201      	movs	r2, #1
 800c35c:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	68b9      	ldr	r1, [r7, #8]
 800c36a:	68f8      	ldr	r0, [r7, #12]
 800c36c:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 800c376:	681c      	ldr	r4, [r3, #0]
 800c378:	79fa      	ldrb	r2, [r7, #7]
 800c37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c37c:	9301      	str	r3, [sp, #4]
 800c37e:	6a3b      	ldr	r3, [r7, #32]
 800c380:	9300      	str	r3, [sp, #0]
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	68b9      	ldr	r1, [r7, #8]
 800c386:	68f8      	ldr	r0, [r7, #12]
 800c388:	47a0      	blx	r4
}
 800c38a:	bf00      	nop
 800c38c:	3714      	adds	r7, #20
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd90      	pop	{r4, r7, pc}
 800c392:	bf00      	nop
 800c394:	2000024d 	.word	0x2000024d

0800c398 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 800c398:	b480      	push	{r7}
 800c39a:	b087      	sub	sp, #28
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	60f8      	str	r0, [r7, #12]
 800c3a0:	60b9      	str	r1, [r7, #8]
 800c3a2:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	75bb      	strb	r3, [r7, #22]
 800c3ac:	e013      	b.n	800c3d6 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	75fb      	strb	r3, [r7, #23]
 800c3b2:	e00a      	b.n	800c3ca <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 800c3b4:	7d7b      	ldrb	r3, [r7, #21]
 800c3b6:	1c5a      	adds	r2, r3, #1
 800c3b8:	757a      	strb	r2, [r7, #21]
 800c3ba:	461a      	mov	r2, r3
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	4413      	add	r3, r2
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800c3c4:	7dfb      	ldrb	r3, [r7, #23]
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	75fb      	strb	r3, [r7, #23]
 800c3ca:	7dfb      	ldrb	r3, [r7, #23]
 800c3cc:	2b01      	cmp	r3, #1
 800c3ce:	d9f1      	bls.n	800c3b4 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800c3d0:	7dbb      	ldrb	r3, [r7, #22]
 800c3d2:	3301      	adds	r3, #1
 800c3d4:	75bb      	strb	r3, [r7, #22]
 800c3d6:	7dbb      	ldrb	r3, [r7, #22]
 800c3d8:	2b03      	cmp	r3, #3
 800c3da:	d9e8      	bls.n	800c3ae <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800c3dc:	2300      	movs	r3, #0
 800c3de:	75fb      	strb	r3, [r7, #23]
 800c3e0:	e1f1      	b.n	800c7c6 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c3e6:	7dfb      	ldrb	r3, [r7, #23]
 800c3e8:	011b      	lsls	r3, r3, #4
 800c3ea:	68b9      	ldr	r1, [r7, #8]
 800c3ec:	440b      	add	r3, r1
 800c3ee:	781b      	ldrb	r3, [r3, #0]
 800c3f0:	4619      	mov	r1, r3
 800c3f2:	460b      	mov	r3, r1
 800c3f4:	00db      	lsls	r3, r3, #3
 800c3f6:	1a5b      	subs	r3, r3, r1
 800c3f8:	005b      	lsls	r3, r3, #1
 800c3fa:	441a      	add	r2, r3
 800c3fc:	7dfb      	ldrb	r3, [r7, #23]
 800c3fe:	6879      	ldr	r1, [r7, #4]
 800c400:	440b      	add	r3, r1
 800c402:	7b12      	ldrb	r2, [r2, #12]
 800c404:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 800c406:	7dfb      	ldrb	r3, [r7, #23]
 800c408:	011b      	lsls	r3, r3, #4
 800c40a:	68ba      	ldr	r2, [r7, #8]
 800c40c:	4413      	add	r3, r2
 800c40e:	781b      	ldrb	r3, [r3, #0]
 800c410:	2b12      	cmp	r3, #18
 800c412:	f200 81d5 	bhi.w	800c7c0 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 800c416:	a201      	add	r2, pc, #4	@ (adr r2, 800c41c <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 800c418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c41c:	0800c7c1 	.word	0x0800c7c1
 800c420:	0800c469 	.word	0x0800c469
 800c424:	0800c4f1 	.word	0x0800c4f1
 800c428:	0800c521 	.word	0x0800c521
 800c42c:	0800c589 	.word	0x0800c589
 800c430:	0800c5b7 	.word	0x0800c5b7
 800c434:	0800c61f 	.word	0x0800c61f
 800c438:	0800c65b 	.word	0x0800c65b
 800c43c:	0800c6c3 	.word	0x0800c6c3
 800c440:	0800c75f 	.word	0x0800c75f
 800c444:	0800c7c1 	.word	0x0800c7c1
 800c448:	0800c7c1 	.word	0x0800c7c1
 800c44c:	0800c7c1 	.word	0x0800c7c1
 800c450:	0800c7c1 	.word	0x0800c7c1
 800c454:	0800c7c1 	.word	0x0800c7c1
 800c458:	0800c7c1 	.word	0x0800c7c1
 800c45c:	0800c7c1 	.word	0x0800c7c1
 800c460:	0800c7c1 	.word	0x0800c7c1
 800c464:	0800c7c1 	.word	0x0800c7c1
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 800c468:	7dfb      	ldrb	r3, [r7, #23]
 800c46a:	687a      	ldr	r2, [r7, #4]
 800c46c:	4413      	add	r3, r2
 800c46e:	7819      	ldrb	r1, [r3, #0]
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	6a18      	ldr	r0, [r3, #32]
 800c474:	7dfb      	ldrb	r3, [r7, #23]
 800c476:	011b      	lsls	r3, r3, #4
 800c478:	68ba      	ldr	r2, [r7, #8]
 800c47a:	4413      	add	r3, r2
 800c47c:	685a      	ldr	r2, [r3, #4]
 800c47e:	4613      	mov	r3, r2
 800c480:	009b      	lsls	r3, r3, #2
 800c482:	4413      	add	r3, r2
 800c484:	009b      	lsls	r3, r3, #2
 800c486:	4403      	add	r3, r0
 800c488:	781a      	ldrb	r2, [r3, #0]
 800c48a:	7dfb      	ldrb	r3, [r7, #23]
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	4403      	add	r3, r0
 800c490:	430a      	orrs	r2, r1
 800c492:	b2d2      	uxtb	r2, r2
 800c494:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	6a19      	ldr	r1, [r3, #32]
 800c49a:	7dfb      	ldrb	r3, [r7, #23]
 800c49c:	011b      	lsls	r3, r3, #4
 800c49e:	68ba      	ldr	r2, [r7, #8]
 800c4a0:	4413      	add	r3, r2
 800c4a2:	685a      	ldr	r2, [r3, #4]
 800c4a4:	4613      	mov	r3, r2
 800c4a6:	009b      	lsls	r3, r3, #2
 800c4a8:	4413      	add	r3, r2
 800c4aa:	009b      	lsls	r3, r3, #2
 800c4ac:	440b      	add	r3, r1
 800c4ae:	7b9b      	ldrb	r3, [r3, #14]
 800c4b0:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	75bb      	strb	r3, [r7, #22]
 800c4b6:	e016      	b.n	800c4e6 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 800c4b8:	7dfb      	ldrb	r3, [r7, #23]
 800c4ba:	011b      	lsls	r3, r3, #4
 800c4bc:	68ba      	ldr	r2, [r7, #8]
 800c4be:	4413      	add	r3, r2
 800c4c0:	689a      	ldr	r2, [r3, #8]
 800c4c2:	7d39      	ldrb	r1, [r7, #20]
 800c4c4:	7dbb      	ldrb	r3, [r7, #22]
 800c4c6:	1acb      	subs	r3, r1, r3
 800c4c8:	00db      	lsls	r3, r3, #3
 800c4ca:	fa22 f103 	lsr.w	r1, r2, r3
 800c4ce:	7dbb      	ldrb	r3, [r7, #22]
 800c4d0:	005a      	lsls	r2, r3, #1
 800c4d2:	7dfb      	ldrb	r3, [r7, #23]
 800c4d4:	4413      	add	r3, r2
 800c4d6:	461a      	mov	r2, r3
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	4413      	add	r3, r2
 800c4dc:	b2ca      	uxtb	r2, r1
 800c4de:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 800c4e0:	7dbb      	ldrb	r3, [r7, #22]
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	75bb      	strb	r3, [r7, #22]
 800c4e6:	7d3a      	ldrb	r2, [r7, #20]
 800c4e8:	7dbb      	ldrb	r3, [r7, #22]
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d2e4      	bcs.n	800c4b8 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 800c4ee:	e167      	b.n	800c7c0 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 800c4f0:	7dfb      	ldrb	r3, [r7, #23]
 800c4f2:	687a      	ldr	r2, [r7, #4]
 800c4f4:	4413      	add	r3, r2
 800c4f6:	7819      	ldrb	r1, [r3, #0]
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	6a18      	ldr	r0, [r3, #32]
 800c4fc:	7dfb      	ldrb	r3, [r7, #23]
 800c4fe:	011b      	lsls	r3, r3, #4
 800c500:	68ba      	ldr	r2, [r7, #8]
 800c502:	4413      	add	r3, r2
 800c504:	685a      	ldr	r2, [r3, #4]
 800c506:	4613      	mov	r3, r2
 800c508:	009b      	lsls	r3, r3, #2
 800c50a:	4413      	add	r3, r2
 800c50c:	009b      	lsls	r3, r3, #2
 800c50e:	4403      	add	r3, r0
 800c510:	781a      	ldrb	r2, [r3, #0]
 800c512:	7dfb      	ldrb	r3, [r7, #23]
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	4403      	add	r3, r0
 800c518:	430a      	orrs	r2, r1
 800c51a:	b2d2      	uxtb	r2, r2
 800c51c:	701a      	strb	r2, [r3, #0]
      break;
 800c51e:	e14f      	b.n	800c7c0 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800c520:	7dfb      	ldrb	r3, [r7, #23]
 800c522:	687a      	ldr	r2, [r7, #4]
 800c524:	4413      	add	r3, r2
 800c526:	7819      	ldrb	r1, [r3, #0]
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800c52c:	7dfb      	ldrb	r3, [r7, #23]
 800c52e:	011b      	lsls	r3, r3, #4
 800c530:	68ba      	ldr	r2, [r7, #8]
 800c532:	4413      	add	r3, r2
 800c534:	685a      	ldr	r2, [r3, #4]
 800c536:	4613      	mov	r3, r2
 800c538:	00db      	lsls	r3, r3, #3
 800c53a:	4413      	add	r3, r2
 800c53c:	4403      	add	r3, r0
 800c53e:	7a1a      	ldrb	r2, [r3, #8]
 800c540:	7dfb      	ldrb	r3, [r7, #23]
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	4403      	add	r3, r0
 800c546:	430a      	orrs	r2, r1
 800c548:	b2d2      	uxtb	r2, r2
 800c54a:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800c54c:	2301      	movs	r3, #1
 800c54e:	75bb      	strb	r3, [r7, #22]
 800c550:	e016      	b.n	800c580 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800c552:	7dfb      	ldrb	r3, [r7, #23]
 800c554:	011b      	lsls	r3, r3, #4
 800c556:	68ba      	ldr	r2, [r7, #8]
 800c558:	4413      	add	r3, r2
 800c55a:	689a      	ldr	r2, [r3, #8]
 800c55c:	7dbb      	ldrb	r3, [r7, #22]
 800c55e:	f1c3 0303 	rsb	r3, r3, #3
 800c562:	00db      	lsls	r3, r3, #3
 800c564:	fa22 f103 	lsr.w	r1, r2, r3
 800c568:	7dbb      	ldrb	r3, [r7, #22]
 800c56a:	005a      	lsls	r2, r3, #1
 800c56c:	7dfb      	ldrb	r3, [r7, #23]
 800c56e:	4413      	add	r3, r2
 800c570:	461a      	mov	r2, r3
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	4413      	add	r3, r2
 800c576:	b2ca      	uxtb	r2, r1
 800c578:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800c57a:	7dbb      	ldrb	r3, [r7, #22]
 800c57c:	3301      	adds	r3, #1
 800c57e:	75bb      	strb	r3, [r7, #22]
 800c580:	7dbb      	ldrb	r3, [r7, #22]
 800c582:	2b03      	cmp	r3, #3
 800c584:	d9e5      	bls.n	800c552 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 800c586:	e11b      	b.n	800c7c0 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800c588:	7dfb      	ldrb	r3, [r7, #23]
 800c58a:	687a      	ldr	r2, [r7, #4]
 800c58c:	4413      	add	r3, r2
 800c58e:	7819      	ldrb	r1, [r3, #0]
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800c594:	7dfb      	ldrb	r3, [r7, #23]
 800c596:	011b      	lsls	r3, r3, #4
 800c598:	68ba      	ldr	r2, [r7, #8]
 800c59a:	4413      	add	r3, r2
 800c59c:	685a      	ldr	r2, [r3, #4]
 800c59e:	4613      	mov	r3, r2
 800c5a0:	00db      	lsls	r3, r3, #3
 800c5a2:	4413      	add	r3, r2
 800c5a4:	4403      	add	r3, r0
 800c5a6:	7a1a      	ldrb	r2, [r3, #8]
 800c5a8:	7dfb      	ldrb	r3, [r7, #23]
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	4403      	add	r3, r0
 800c5ae:	430a      	orrs	r2, r1
 800c5b0:	b2d2      	uxtb	r2, r2
 800c5b2:	701a      	strb	r2, [r3, #0]
      break;
 800c5b4:	e104      	b.n	800c7c0 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800c5b6:	7dfb      	ldrb	r3, [r7, #23]
 800c5b8:	687a      	ldr	r2, [r7, #4]
 800c5ba:	4413      	add	r3, r2
 800c5bc:	7819      	ldrb	r1, [r3, #0]
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800c5c2:	7dfb      	ldrb	r3, [r7, #23]
 800c5c4:	011b      	lsls	r3, r3, #4
 800c5c6:	68ba      	ldr	r2, [r7, #8]
 800c5c8:	4413      	add	r3, r2
 800c5ca:	685a      	ldr	r2, [r3, #4]
 800c5cc:	4613      	mov	r3, r2
 800c5ce:	00db      	lsls	r3, r3, #3
 800c5d0:	4413      	add	r3, r2
 800c5d2:	4403      	add	r3, r0
 800c5d4:	7a1a      	ldrb	r2, [r3, #8]
 800c5d6:	7dfb      	ldrb	r3, [r7, #23]
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	4403      	add	r3, r0
 800c5dc:	430a      	orrs	r2, r1
 800c5de:	b2d2      	uxtb	r2, r2
 800c5e0:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	75bb      	strb	r3, [r7, #22]
 800c5e6:	e016      	b.n	800c616 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800c5e8:	7dfb      	ldrb	r3, [r7, #23]
 800c5ea:	011b      	lsls	r3, r3, #4
 800c5ec:	68ba      	ldr	r2, [r7, #8]
 800c5ee:	4413      	add	r3, r2
 800c5f0:	689a      	ldr	r2, [r3, #8]
 800c5f2:	7dbb      	ldrb	r3, [r7, #22]
 800c5f4:	f1c3 0303 	rsb	r3, r3, #3
 800c5f8:	00db      	lsls	r3, r3, #3
 800c5fa:	fa22 f103 	lsr.w	r1, r2, r3
 800c5fe:	7dbb      	ldrb	r3, [r7, #22]
 800c600:	005a      	lsls	r2, r3, #1
 800c602:	7dfb      	ldrb	r3, [r7, #23]
 800c604:	4413      	add	r3, r2
 800c606:	461a      	mov	r2, r3
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	4413      	add	r3, r2
 800c60c:	b2ca      	uxtb	r2, r1
 800c60e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800c610:	7dbb      	ldrb	r3, [r7, #22]
 800c612:	3301      	adds	r3, #1
 800c614:	75bb      	strb	r3, [r7, #22]
 800c616:	7dbb      	ldrb	r3, [r7, #22]
 800c618:	2b03      	cmp	r3, #3
 800c61a:	d9e5      	bls.n	800c5e8 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 800c61c:	e0d0      	b.n	800c7c0 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800c61e:	2301      	movs	r3, #1
 800c620:	75bb      	strb	r3, [r7, #22]
 800c622:	e016      	b.n	800c652 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 800c624:	7dfb      	ldrb	r3, [r7, #23]
 800c626:	011b      	lsls	r3, r3, #4
 800c628:	68ba      	ldr	r2, [r7, #8]
 800c62a:	4413      	add	r3, r2
 800c62c:	685a      	ldr	r2, [r3, #4]
 800c62e:	7dbb      	ldrb	r3, [r7, #22]
 800c630:	f1c3 0303 	rsb	r3, r3, #3
 800c634:	00db      	lsls	r3, r3, #3
 800c636:	fa22 f103 	lsr.w	r1, r2, r3
 800c63a:	7dbb      	ldrb	r3, [r7, #22]
 800c63c:	005a      	lsls	r2, r3, #1
 800c63e:	7dfb      	ldrb	r3, [r7, #23]
 800c640:	4413      	add	r3, r2
 800c642:	461a      	mov	r2, r3
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	4413      	add	r3, r2
 800c648:	b2ca      	uxtb	r2, r1
 800c64a:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800c64c:	7dbb      	ldrb	r3, [r7, #22]
 800c64e:	3301      	adds	r3, #1
 800c650:	75bb      	strb	r3, [r7, #22]
 800c652:	7dbb      	ldrb	r3, [r7, #22]
 800c654:	2b03      	cmp	r3, #3
 800c656:	d9e5      	bls.n	800c624 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 800c658:	e0b2      	b.n	800c7c0 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800c65a:	7dfb      	ldrb	r3, [r7, #23]
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	4413      	add	r3, r2
 800c660:	7819      	ldrb	r1, [r3, #0]
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800c666:	7dfb      	ldrb	r3, [r7, #23]
 800c668:	011b      	lsls	r3, r3, #4
 800c66a:	68ba      	ldr	r2, [r7, #8]
 800c66c:	4413      	add	r3, r2
 800c66e:	685a      	ldr	r2, [r3, #4]
 800c670:	4613      	mov	r3, r2
 800c672:	00db      	lsls	r3, r3, #3
 800c674:	4413      	add	r3, r2
 800c676:	4403      	add	r3, r0
 800c678:	7a1a      	ldrb	r2, [r3, #8]
 800c67a:	7dfb      	ldrb	r3, [r7, #23]
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	4403      	add	r3, r0
 800c680:	430a      	orrs	r2, r1
 800c682:	b2d2      	uxtb	r2, r2
 800c684:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800c686:	2301      	movs	r3, #1
 800c688:	75bb      	strb	r3, [r7, #22]
 800c68a:	e016      	b.n	800c6ba <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800c68c:	7dfb      	ldrb	r3, [r7, #23]
 800c68e:	011b      	lsls	r3, r3, #4
 800c690:	68ba      	ldr	r2, [r7, #8]
 800c692:	4413      	add	r3, r2
 800c694:	689a      	ldr	r2, [r3, #8]
 800c696:	7dbb      	ldrb	r3, [r7, #22]
 800c698:	f1c3 0303 	rsb	r3, r3, #3
 800c69c:	00db      	lsls	r3, r3, #3
 800c69e:	fa22 f103 	lsr.w	r1, r2, r3
 800c6a2:	7dbb      	ldrb	r3, [r7, #22]
 800c6a4:	005a      	lsls	r2, r3, #1
 800c6a6:	7dfb      	ldrb	r3, [r7, #23]
 800c6a8:	4413      	add	r3, r2
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	4413      	add	r3, r2
 800c6b0:	b2ca      	uxtb	r2, r1
 800c6b2:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800c6b4:	7dbb      	ldrb	r3, [r7, #22]
 800c6b6:	3301      	adds	r3, #1
 800c6b8:	75bb      	strb	r3, [r7, #22]
 800c6ba:	7dbb      	ldrb	r3, [r7, #22]
 800c6bc:	2b03      	cmp	r3, #3
 800c6be:	d9e5      	bls.n	800c68c <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 800c6c0:	e07e      	b.n	800c7c0 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 800c6c2:	7dfb      	ldrb	r3, [r7, #23]
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	4413      	add	r3, r2
 800c6c8:	781b      	ldrb	r3, [r3, #0]
 800c6ca:	b259      	sxtb	r1, r3
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800c6d0:	7dfb      	ldrb	r3, [r7, #23]
 800c6d2:	011b      	lsls	r3, r3, #4
 800c6d4:	68ba      	ldr	r2, [r7, #8]
 800c6d6:	4413      	add	r3, r2
 800c6d8:	685a      	ldr	r2, [r3, #4]
 800c6da:	4613      	mov	r3, r2
 800c6dc:	009b      	lsls	r3, r3, #2
 800c6de:	4413      	add	r3, r2
 800c6e0:	4403      	add	r3, r0
 800c6e2:	791b      	ldrb	r3, [r3, #4]
 800c6e4:	00db      	lsls	r3, r3, #3
 800c6e6:	b25b      	sxtb	r3, r3
 800c6e8:	430b      	orrs	r3, r1
 800c6ea:	b259      	sxtb	r1, r3
 800c6ec:	7dfb      	ldrb	r3, [r7, #23]
 800c6ee:	687a      	ldr	r2, [r7, #4]
 800c6f0:	4413      	add	r3, r2
 800c6f2:	b2ca      	uxtb	r2, r1
 800c6f4:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 800c6f6:	7dfb      	ldrb	r3, [r7, #23]
 800c6f8:	687a      	ldr	r2, [r7, #4]
 800c6fa:	4413      	add	r3, r2
 800c6fc:	7819      	ldrb	r1, [r3, #0]
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800c702:	7dfb      	ldrb	r3, [r7, #23]
 800c704:	011b      	lsls	r3, r3, #4
 800c706:	68ba      	ldr	r2, [r7, #8]
 800c708:	4413      	add	r3, r2
 800c70a:	689a      	ldr	r2, [r3, #8]
 800c70c:	4613      	mov	r3, r2
 800c70e:	00db      	lsls	r3, r3, #3
 800c710:	4413      	add	r3, r2
 800c712:	4403      	add	r3, r0
 800c714:	7a1a      	ldrb	r2, [r3, #8]
 800c716:	7dfb      	ldrb	r3, [r7, #23]
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	4403      	add	r3, r0
 800c71c:	430a      	orrs	r2, r1
 800c71e:	b2d2      	uxtb	r2, r2
 800c720:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800c722:	2301      	movs	r3, #1
 800c724:	75bb      	strb	r3, [r7, #22]
 800c726:	e016      	b.n	800c756 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 800c728:	7dfb      	ldrb	r3, [r7, #23]
 800c72a:	011b      	lsls	r3, r3, #4
 800c72c:	68ba      	ldr	r2, [r7, #8]
 800c72e:	4413      	add	r3, r2
 800c730:	68da      	ldr	r2, [r3, #12]
 800c732:	7dbb      	ldrb	r3, [r7, #22]
 800c734:	f1c3 0303 	rsb	r3, r3, #3
 800c738:	00db      	lsls	r3, r3, #3
 800c73a:	fa22 f103 	lsr.w	r1, r2, r3
 800c73e:	7dbb      	ldrb	r3, [r7, #22]
 800c740:	005a      	lsls	r2, r3, #1
 800c742:	7dfb      	ldrb	r3, [r7, #23]
 800c744:	4413      	add	r3, r2
 800c746:	461a      	mov	r2, r3
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	4413      	add	r3, r2
 800c74c:	b2ca      	uxtb	r2, r1
 800c74e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800c750:	7dbb      	ldrb	r3, [r7, #22]
 800c752:	3301      	adds	r3, #1
 800c754:	75bb      	strb	r3, [r7, #22]
 800c756:	7dbb      	ldrb	r3, [r7, #22]
 800c758:	2b03      	cmp	r3, #3
 800c75a:	d9e5      	bls.n	800c728 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 800c75c:	e030      	b.n	800c7c0 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 800c75e:	7dfb      	ldrb	r3, [r7, #23]
 800c760:	687a      	ldr	r2, [r7, #4]
 800c762:	4413      	add	r3, r2
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	b259      	sxtb	r1, r3
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800c76c:	7dfb      	ldrb	r3, [r7, #23]
 800c76e:	011b      	lsls	r3, r3, #4
 800c770:	68ba      	ldr	r2, [r7, #8]
 800c772:	4413      	add	r3, r2
 800c774:	685a      	ldr	r2, [r3, #4]
 800c776:	4613      	mov	r3, r2
 800c778:	009b      	lsls	r3, r3, #2
 800c77a:	4413      	add	r3, r2
 800c77c:	4403      	add	r3, r0
 800c77e:	791b      	ldrb	r3, [r3, #4]
 800c780:	00db      	lsls	r3, r3, #3
 800c782:	b25b      	sxtb	r3, r3
 800c784:	430b      	orrs	r3, r1
 800c786:	b259      	sxtb	r1, r3
 800c788:	7dfb      	ldrb	r3, [r7, #23]
 800c78a:	687a      	ldr	r2, [r7, #4]
 800c78c:	4413      	add	r3, r2
 800c78e:	b2ca      	uxtb	r2, r1
 800c790:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 800c792:	7dfb      	ldrb	r3, [r7, #23]
 800c794:	687a      	ldr	r2, [r7, #4]
 800c796:	4413      	add	r3, r2
 800c798:	7819      	ldrb	r1, [r3, #0]
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800c79e:	7dfb      	ldrb	r3, [r7, #23]
 800c7a0:	011b      	lsls	r3, r3, #4
 800c7a2:	68ba      	ldr	r2, [r7, #8]
 800c7a4:	4413      	add	r3, r2
 800c7a6:	689a      	ldr	r2, [r3, #8]
 800c7a8:	4613      	mov	r3, r2
 800c7aa:	00db      	lsls	r3, r3, #3
 800c7ac:	4413      	add	r3, r2
 800c7ae:	4403      	add	r3, r0
 800c7b0:	7a1a      	ldrb	r2, [r3, #8]
 800c7b2:	7dfb      	ldrb	r3, [r7, #23]
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	4403      	add	r3, r0
 800c7b8:	430a      	orrs	r2, r1
 800c7ba:	b2d2      	uxtb	r2, r2
 800c7bc:	701a      	strb	r2, [r3, #0]
      break;
 800c7be:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800c7c0:	7dfb      	ldrb	r3, [r7, #23]
 800c7c2:	3301      	adds	r3, #1
 800c7c4:	75fb      	strb	r3, [r7, #23]
 800c7c6:	7dfb      	ldrb	r3, [r7, #23]
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	f67f ae0a 	bls.w	800c3e2 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 800c7ce:	bf00      	nop
 800c7d0:	bf00      	nop
 800c7d2:	371c      	adds	r7, #28
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7da:	4770      	bx	lr

0800c7dc <_ZN5L6470I8shield_1E11L6470_roundEf>:
    int L6470_round(float f)
 800c7dc:	b480      	push	{r7}
 800c7de:	b083      	sub	sp, #12
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
 800c7e4:	ed87 0a00 	vstr	s0, [r7]
        if (f >= 0) {
 800c7e8:	edd7 7a00 	vldr	s15, [r7]
 800c7ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c7f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7f4:	db1e      	blt.n	800c834 <_ZN5L6470I8shield_1E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 800c7f6:	edd7 7a00 	vldr	s15, [r7]
 800c7fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c7fe:	ee17 2a90 	vmov	r2, s15
 800c802:	edd7 7a00 	vldr	s15, [r7]
 800c806:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c80a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c80e:	ed97 7a00 	vldr	s14, [r7]
 800c812:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c816:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800c81a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c81e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c822:	bf4c      	ite	mi
 800c824:	2301      	movmi	r3, #1
 800c826:	2300      	movpl	r3, #0
 800c828:	b2db      	uxtb	r3, r3
 800c82a:	f083 0301 	eor.w	r3, r3, #1
 800c82e:	b2db      	uxtb	r3, r3
 800c830:	4413      	add	r3, r2
 800c832:	e01a      	b.n	800c86a <_ZN5L6470I8shield_1E11L6470_roundEf+0x8e>
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 800c834:	edd7 7a00 	vldr	s15, [r7]
 800c838:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c83c:	ee17 2a90 	vmov	r2, s15
 800c840:	edd7 7a00 	vldr	s15, [r7]
 800c844:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c848:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c84c:	ed97 7a00 	vldr	s14, [r7]
 800c850:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c854:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800c858:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c85c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c860:	d501      	bpl.n	800c866 <_ZN5L6470I8shield_1E11L6470_roundEf+0x8a>
 800c862:	2301      	movs	r3, #1
 800c864:	e000      	b.n	800c868 <_ZN5L6470I8shield_1E11L6470_roundEf+0x8c>
 800c866:	2300      	movs	r3, #0
 800c868:	1ad3      	subs	r3, r2, r3
    }
 800c86a:	4618      	mov	r0, r3
 800c86c:	370c      	adds	r7, #12
 800c86e:	46bd      	mov	sp, r7
 800c870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c874:	4770      	bx	lr

0800c876 <_ZN5L6470I8shield_1E4ReadEPht>:
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 800c876:	b580      	push	{r7, lr}
 800c878:	b086      	sub	sp, #24
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	60f8      	str	r0, [r7, #12]
 800c87e:	60b9      	str	r1, [r7, #8]
 800c880:	4613      	mov	r3, r2
 800c882:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	6918      	ldr	r0, [r3, #16]
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	8a9b      	ldrh	r3, [r3, #20]
 800c88c:	2200      	movs	r2, #0
 800c88e:	4619      	mov	r1, r3
 800c890:	f001 fad6 	bl	800de40 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	6998      	ldr	r0, [r3, #24]
 800c898:	88fa      	ldrh	r2, [r7, #6]
 800c89a:	2364      	movs	r3, #100	@ 0x64
 800c89c:	68b9      	ldr	r1, [r7, #8]
 800c89e:	f002 fae6 	bl	800ee6e <HAL_SPI_Receive>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	6918      	ldr	r0, [r3, #16]
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	8a9b      	ldrh	r3, [r3, #20]
 800c8ae:	2201      	movs	r2, #1
 800c8b0:	4619      	mov	r1, r3
 800c8b2:	f001 fac5 	bl	800de40 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 800c8b6:	7dfb      	ldrb	r3, [r7, #23]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d001      	beq.n	800c8c0 <_ZN5L6470I8shield_1E4ReadEPht+0x4a>
        	return COMPONENT_ERROR;
 800c8bc:	2301      	movs	r3, #1
 800c8be:	e000      	b.n	800c8c2 <_ZN5L6470I8shield_1E4ReadEPht+0x4c>
        return COMPONENT_OK;
 800c8c0:	2300      	movs	r3, #0
    }
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	3718      	adds	r7, #24
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}

0800c8ca <_ZN5L6470I8shield_1E5WriteEPht>:
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 800c8ca:	b580      	push	{r7, lr}
 800c8cc:	b086      	sub	sp, #24
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	60f8      	str	r0, [r7, #12]
 800c8d2:	60b9      	str	r1, [r7, #8]
 800c8d4:	4613      	mov	r3, r2
 800c8d6:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	6918      	ldr	r0, [r3, #16]
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	8a9b      	ldrh	r3, [r3, #20]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	f001 faac 	bl	800de40 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	6998      	ldr	r0, [r3, #24]
 800c8ec:	88fa      	ldrh	r2, [r7, #6]
 800c8ee:	2364      	movs	r3, #100	@ 0x64
 800c8f0:	68b9      	ldr	r1, [r7, #8]
 800c8f2:	f002 f980 	bl	800ebf6 <HAL_SPI_Transmit>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	6918      	ldr	r0, [r3, #16]
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	8a9b      	ldrh	r3, [r3, #20]
 800c902:	2201      	movs	r2, #1
 800c904:	4619      	mov	r1, r3
 800c906:	f001 fa9b 	bl	800de40 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 800c90a:	7dfb      	ldrb	r3, [r7, #23]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d001      	beq.n	800c914 <_ZN5L6470I8shield_1E5WriteEPht+0x4a>
        	return COMPONENT_ERROR;
 800c910:	2301      	movs	r3, #1
 800c912:	e000      	b.n	800c916 <_ZN5L6470I8shield_1E5WriteEPht+0x4c>
        return COMPONENT_OK;
 800c914:	2300      	movs	r3, #0
    }
 800c916:	4618      	mov	r0, r3
 800c918:	3718      	adds	r7, #24
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}

0800c91e <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t>:
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 800c91e:	b580      	push	{r7, lr}
 800c920:	b088      	sub	sp, #32
 800c922:	af02      	add	r7, sp, #8
 800c924:	60f8      	str	r0, [r7, #12]
 800c926:	60b9      	str	r1, [r7, #8]
 800c928:	607a      	str	r2, [r7, #4]
 800c92a:	807b      	strh	r3, [r7, #2]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	6918      	ldr	r0, [r3, #16]
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	8a9b      	ldrh	r3, [r3, #20]
 800c934:	2200      	movs	r2, #0
 800c936:	4619      	mov	r1, r3
 800c938:	f001 fa82 	bl	800de40 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	6998      	ldr	r0, [r3, #24]
 800c940:	887b      	ldrh	r3, [r7, #2]
 800c942:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c946:	9200      	str	r2, [sp, #0]
 800c948:	68ba      	ldr	r2, [r7, #8]
 800c94a:	6879      	ldr	r1, [r7, #4]
 800c94c:	f002 fba0 	bl	800f090 <HAL_SPI_TransmitReceive>
 800c950:	4603      	mov	r3, r0
 800c952:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 800c954:	7dfb      	ldrb	r3, [r7, #23]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d009      	beq.n	800c96e <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t+0x50>
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	6918      	ldr	r0, [r3, #16]
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	8a9b      	ldrh	r3, [r3, #20]
 800c962:	2201      	movs	r2, #1
 800c964:	4619      	mov	r1, r3
 800c966:	f001 fa6b 	bl	800de40 <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 800c96a:	2301      	movs	r3, #1
 800c96c:	e008      	b.n	800c980 <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t+0x62>
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	6918      	ldr	r0, [r3, #16]
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	8a9b      	ldrh	r3, [r3, #20]
 800c976:	2201      	movs	r2, #1
 800c978:	4619      	mov	r1, r3
 800c97a:	f001 fa61 	bl	800de40 <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 800c97e:	2300      	movs	r3, #0
    }
 800c980:	4618      	mov	r0, r3
 800c982:	3718      	adds	r7, #24
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}

0800c988 <_ZN5L6470I8shield_1E23L6470_SPI_CommunicationEPhS2_tm>:
    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 800c988:	b590      	push	{r4, r7, lr}
 800c98a:	b085      	sub	sp, #20
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	60f8      	str	r0, [r7, #12]
 800c990:	60b9      	str	r1, [r7, #8]
 800c992:	607a      	str	r2, [r7, #4]
 800c994:	807b      	strh	r3, [r7, #2]
        ReadWrite(pRxData, pTxData, Size);
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800c99e:	681c      	ldr	r4, [r3, #0]
 800c9a0:	887b      	ldrh	r3, [r7, #2]
 800c9a2:	68ba      	ldr	r2, [r7, #8]
 800c9a4:	6879      	ldr	r1, [r7, #4]
 800c9a6:	68f8      	ldr	r0, [r7, #12]
 800c9a8:	47a0      	blx	r4
    }
 800c9aa:	bf00      	nop
 800c9ac:	3714      	adds	r7, #20
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd90      	pop	{r4, r7, pc}
	...

0800c9b4 <_ZN13abstractL6470C1Ev>:

uint8_t shield_1::count = 0;
uint8_t shield_2::count = 0;
uint8_t shield_3::count = 0;

abstractL6470::abstractL6470()
 800c9b4:	b480      	push	{r7}
 800c9b6:	b083      	sub	sp, #12
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
 800c9bc:	4a04      	ldr	r2, [pc, #16]	@ (800c9d0 <_ZN13abstractL6470C1Ev+0x1c>)
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	601a      	str	r2, [r3, #0]
{

}
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	370c      	adds	r7, #12
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ce:	4770      	bx	lr
 800c9d0:	08016420 	.word	0x08016420

0800c9d4 <_ZN13abstractL6470D1Ev>:

abstractL6470::~abstractL6470()
 800c9d4:	b480      	push	{r7}
 800c9d6:	b083      	sub	sp, #12
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	4a04      	ldr	r2, [pc, #16]	@ (800c9f0 <_ZN13abstractL6470D1Ev+0x1c>)
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	601a      	str	r2, [r3, #0]
{

}
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	370c      	adds	r7, #12
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr
 800c9f0:	08016420 	.word	0x08016420

0800c9f4 <_ZN10MsgHandlerC1EP20__UART_HandleTypeDef>:
	public:
		/*
		* @brief Constructor of MsgHandler
		* @param huart2, pointer to huart wich MsgHandler will handle 
		*/
		MsgHandler(UART_HandleTypeDef *huart2) : huart(huart2)
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b082      	sub	sp, #8
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	6039      	str	r1, [r7, #0]
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	683a      	ldr	r2, [r7, #0]
 800ca02:	601a      	str	r2, [r3, #0]
		{
			motor_speeds = new float[4];
 800ca04:	2010      	movs	r0, #16
 800ca06:	f004 fe04 	bl	8011612 <_Znaj>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	461a      	mov	r2, r3
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	605a      	str	r2, [r3, #4]
			sending = false;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2200      	movs	r2, #0
 800ca16:	725a      	strb	r2, [r3, #9]
			receiving = false;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	729a      	strb	r2, [r3, #10]
			received_motor_speeds = false;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2200      	movs	r2, #0
 800ca22:	721a      	strb	r2, [r3, #8]
		}
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	4618      	mov	r0, r3
 800ca28:	3708      	adds	r7, #8
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}

0800ca2e <_ZN10MsgHandlerD1Ev>:
		/*
		* @brief Destructor of MsgHandler
		*/
		~MsgHandler() { delete [] motor_speeds;}
 800ca2e:	b580      	push	{r7, lr}
 800ca30:	b082      	sub	sp, #8
 800ca32:	af00      	add	r7, sp, #0
 800ca34:	6078      	str	r0, [r7, #4]
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	685b      	ldr	r3, [r3, #4]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d004      	beq.n	800ca48 <_ZN10MsgHandlerD1Ev+0x1a>
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	685b      	ldr	r3, [r3, #4]
 800ca42:	4618      	mov	r0, r3
 800ca44:	f004 f97c 	bl	8010d40 <_ZdaPv>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3708      	adds	r7, #8
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}

0800ca52 <_ZN10MsgHandler14unlock_timeoutEv>:
		void send_motor_speeds(float* input_motor_speeds);
		bool get_received_motor_speeds(float* to_fill_motor_speeds);
		/*
		* @brief Reset flags that may lock functions waiting those flags
		*/
		bool unlock_timeout() { receiving = false; sending = false; };
 800ca52:	b480      	push	{r7}
 800ca54:	b083      	sub	sp, #12
 800ca56:	af00      	add	r7, sp, #0
 800ca58:	6078      	str	r0, [r7, #4]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	729a      	strb	r2, [r3, #10]
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2200      	movs	r2, #0
 800ca64:	725a      	strb	r2, [r3, #9]
 800ca66:	bf00      	nop
 800ca68:	4618      	mov	r0, r3
 800ca6a:	370c      	adds	r7, #12
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca72:	4770      	bx	lr
 800ca74:	0000      	movs	r0, r0
	...

0800ca78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ca78:	b5b0      	push	{r4, r5, r7, lr}
 800ca7a:	b08e      	sub	sp, #56	@ 0x38
 800ca7c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ca7e:	f000 fe11 	bl	800d6a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ca82:	f000 f957 	bl	800cd34 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ca86:	f000 fa9d 	bl	800cfc4 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 800ca8a:	f000 fa6d 	bl	800cf68 <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 800ca8e:	f000 fa0f 	bl	800ceb0 <_ZL12MX_TIM2_Initv>
  MX_SPI1_Init();
 800ca92:	f000 f9d1 	bl	800ce38 <_ZL12MX_SPI1_Initv>
  //Start Timer2 interrupt (every 20 ms here)
  //HAL_TIM_Base_Start_IT(&htim2);

  //Init motor class
  moteurs = new BlocMoteurs(&hspi1, reset_shield_1_GPIO_Port, reset_shield_1_Pin, ssel1_GPIO_Port, ssel1_Pin,
		  	  	  	  	  	  	    reset_shield_2_GPIO_Port, reset_shield_2_Pin, ssel2_GPIO_Port, ssel2_Pin);
 800ca96:	f44f 70c6 	mov.w	r0, #396	@ 0x18c
 800ca9a:	f004 fda9 	bl	80115f0 <_Znwj>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	461c      	mov	r4, r3
  moteurs = new BlocMoteurs(&hspi1, reset_shield_1_GPIO_Port, reset_shield_1_Pin, ssel1_GPIO_Port, ssel1_Pin,
 800caa2:	2501      	movs	r5, #1
		  	  	  	  	  	  	    reset_shield_2_GPIO_Port, reset_shield_2_Pin, ssel2_GPIO_Port, ssel2_Pin);
 800caa4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800caa8:	9305      	str	r3, [sp, #20]
 800caaa:	4b9b      	ldr	r3, [pc, #620]	@ (800cd18 <main+0x2a0>)
 800caac:	9304      	str	r3, [sp, #16]
 800caae:	2310      	movs	r3, #16
 800cab0:	9303      	str	r3, [sp, #12]
 800cab2:	4b9a      	ldr	r3, [pc, #616]	@ (800cd1c <main+0x2a4>)
 800cab4:	9302      	str	r3, [sp, #8]
 800cab6:	2310      	movs	r3, #16
 800cab8:	9301      	str	r3, [sp, #4]
 800caba:	4b97      	ldr	r3, [pc, #604]	@ (800cd18 <main+0x2a0>)
 800cabc:	9300      	str	r3, [sp, #0]
 800cabe:	2320      	movs	r3, #32
 800cac0:	4a96      	ldr	r2, [pc, #600]	@ (800cd1c <main+0x2a4>)
 800cac2:	4997      	ldr	r1, [pc, #604]	@ (800cd20 <main+0x2a8>)
 800cac4:	4620      	mov	r0, r4
 800cac6:	f7f5 fbcd 	bl	8002264 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>
  moteurs = new BlocMoteurs(&hspi1, reset_shield_1_GPIO_Port, reset_shield_1_Pin, ssel1_GPIO_Port, ssel1_Pin,
 800caca:	4b96      	ldr	r3, [pc, #600]	@ (800cd24 <main+0x2ac>)
 800cacc:	601c      	str	r4, [r3, #0]

  //Contrôle par vitesse :

  //accélération pendant 1s, 3s à 5rad/s, décélération pendant 1s

  int timer_start = HAL_GetTick();
 800cace:	f000 fe4f 	bl	800d770 <HAL_GetTick>
 800cad2:	4603      	mov	r3, r0
 800cad4:	60fb      	str	r3, [r7, #12]
  bool stopped_motor = false;
 800cad6:	2300      	movs	r3, #0
 800cad8:	77fb      	strb	r3, [r7, #31]
  float* mesure_vitesse_rad;
  moteurs->set_max_acc_moteurs(5.0, 5.0, 5.0, 5.0);
 800cada:	4b92      	ldr	r3, [pc, #584]	@ (800cd24 <main+0x2ac>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 800cae2:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 800cae6:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 800caea:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 800caee:	4618      	mov	r0, r3
 800caf0:	f7f5 ffc8 	bl	8002a84 <_ZN11BlocMoteurs19set_max_acc_moteursEffff>
  moteurs->set_max_dec_moteurs(5.0, 5.0, 5.0, 5.0);
 800caf4:	4b8b      	ldr	r3, [pc, #556]	@ (800cd24 <main+0x2ac>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 800cafc:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 800cb00:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 800cb04:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f7f6 f825 	bl	8002b58 <_ZN11BlocMoteurs19set_max_dec_moteursEffff>
  moteurs->motors_on();
 800cb0e:	4b85      	ldr	r3, [pc, #532]	@ (800cd24 <main+0x2ac>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7f5 feff 	bl	8002916 <_ZN11BlocMoteurs9motors_onEv>
  moteurs->commande_vitesses_absolues(5.0, 5.0, 5.0, 5.0);
 800cb18:	4b82      	ldr	r3, [pc, #520]	@ (800cd24 <main+0x2ac>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 800cb20:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 800cb24:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 800cb28:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f7f5 fdd2 	bl	80026d6 <_ZN11BlocMoteurs26commande_vitesses_absoluesEffff>
  while(HAL_GetTick()-timer_start < 5000)
 800cb32:	e060      	b.n	800cbf6 <main+0x17e>
  {
	  int timer_start_loop = HAL_GetTick();
 800cb34:	f000 fe1c 	bl	800d770 <HAL_GetTick>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	60bb      	str	r3, [r7, #8]
	  mesure_vitesse_rad = moteurs->mesure_vitesses_rad();
 800cb3c:	4b79      	ldr	r3, [pc, #484]	@ (800cd24 <main+0x2ac>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4618      	mov	r0, r3
 800cb42:	f7f6 f873 	bl	8002c2c <_ZN11BlocMoteurs19mesure_vitesses_radEv>
 800cb46:	4603      	mov	r3, r0
 800cb48:	607b      	str	r3, [r7, #4]

	  for( int i = 0; i< 4; i ++)
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	61bb      	str	r3, [r7, #24]
 800cb4e:	e02b      	b.n	800cba8 <main+0x130>
	  {
		  distance_totale[i] += mesure_vitesse_rad[i]*0.02;
 800cb50:	4a75      	ldr	r2, [pc, #468]	@ (800cd28 <main+0x2b0>)
 800cb52:	69bb      	ldr	r3, [r7, #24]
 800cb54:	009b      	lsls	r3, r3, #2
 800cb56:	4413      	add	r3, r2
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f7f3 fd24 	bl	80005a8 <__aeabi_f2d>
 800cb60:	4604      	mov	r4, r0
 800cb62:	460d      	mov	r5, r1
 800cb64:	69bb      	ldr	r3, [r7, #24]
 800cb66:	009b      	lsls	r3, r3, #2
 800cb68:	687a      	ldr	r2, [r7, #4]
 800cb6a:	4413      	add	r3, r2
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f7f3 fd1a 	bl	80005a8 <__aeabi_f2d>
 800cb74:	a366      	add	r3, pc, #408	@ (adr r3, 800cd10 <main+0x298>)
 800cb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb7a:	f7f3 fd6d 	bl	8000658 <__aeabi_dmul>
 800cb7e:	4602      	mov	r2, r0
 800cb80:	460b      	mov	r3, r1
 800cb82:	4620      	mov	r0, r4
 800cb84:	4629      	mov	r1, r5
 800cb86:	f7f3 fbb1 	bl	80002ec <__adddf3>
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	460b      	mov	r3, r1
 800cb8e:	4610      	mov	r0, r2
 800cb90:	4619      	mov	r1, r3
 800cb92:	f7f4 f839 	bl	8000c08 <__aeabi_d2f>
 800cb96:	4602      	mov	r2, r0
 800cb98:	4963      	ldr	r1, [pc, #396]	@ (800cd28 <main+0x2b0>)
 800cb9a:	69bb      	ldr	r3, [r7, #24]
 800cb9c:	009b      	lsls	r3, r3, #2
 800cb9e:	440b      	add	r3, r1
 800cba0:	601a      	str	r2, [r3, #0]
	  for( int i = 0; i< 4; i ++)
 800cba2:	69bb      	ldr	r3, [r7, #24]
 800cba4:	3301      	adds	r3, #1
 800cba6:	61bb      	str	r3, [r7, #24]
 800cba8:	69bb      	ldr	r3, [r7, #24]
 800cbaa:	2b03      	cmp	r3, #3
 800cbac:	ddd0      	ble.n	800cb50 <main+0xd8>
	  }

	  if( HAL_GetTick() - timer_start > 4000 && stopped_motor==false )
 800cbae:	f000 fddf 	bl	800d770 <HAL_GetTick>
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	1ad3      	subs	r3, r2, r3
 800cbb8:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800cbbc:	d904      	bls.n	800cbc8 <main+0x150>
 800cbbe:	7ffb      	ldrb	r3, [r7, #31]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d101      	bne.n	800cbc8 <main+0x150>
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	e000      	b.n	800cbca <main+0x152>
 800cbc8:	2300      	movs	r3, #0
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d006      	beq.n	800cbdc <main+0x164>
	  {
		  stopped_motor=true;
 800cbce:	2301      	movs	r3, #1
 800cbd0:	77fb      	strb	r3, [r7, #31]
		  moteurs->motors_stop_soft();
 800cbd2:	4b54      	ldr	r3, [pc, #336]	@ (800cd24 <main+0x2ac>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f7f5 feaa 	bl	8002930 <_ZN11BlocMoteurs16motors_stop_softEv>
	  }
	  while( HAL_GetTick() - timer_start_loop < 20);
 800cbdc:	bf00      	nop
 800cbde:	f000 fdc7 	bl	800d770 <HAL_GetTick>
 800cbe2:	4602      	mov	r2, r0
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	1ad3      	subs	r3, r2, r3
 800cbe8:	2b13      	cmp	r3, #19
 800cbea:	bf94      	ite	ls
 800cbec:	2301      	movls	r3, #1
 800cbee:	2300      	movhi	r3, #0
 800cbf0:	b2db      	uxtb	r3, r3
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d1f3      	bne.n	800cbde <main+0x166>
  while(HAL_GetTick()-timer_start < 5000)
 800cbf6:	f000 fdbb 	bl	800d770 <HAL_GetTick>
 800cbfa:	4602      	mov	r2, r0
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	1ad3      	subs	r3, r2, r3
 800cc00:	f241 3287 	movw	r2, #4999	@ 0x1387
 800cc04:	4293      	cmp	r3, r2
 800cc06:	bf94      	ite	ls
 800cc08:	2301      	movls	r3, #1
 800cc0a:	2300      	movhi	r3, #0
 800cc0c:	b2db      	uxtb	r3, r3
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d190      	bne.n	800cb34 <main+0xbc>

  }


  HAL_Delay(5000);
 800cc12:	f241 3088 	movw	r0, #5000	@ 0x1388
 800cc16:	f000 fdb7 	bl	800d788 <HAL_Delay>
  moteurs->set_max_speed_moteurs(5.0,5.0,5.0,5.0);
 800cc1a:	4b42      	ldr	r3, [pc, #264]	@ (800cd24 <main+0x2ac>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 800cc22:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 800cc26:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 800cc2a:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f7f5 feae 	bl	8002990 <_ZN11BlocMoteurs21set_max_speed_moteursEffff>
  moteurs->motors_on();
 800cc34:	4b3b      	ldr	r3, [pc, #236]	@ (800cd24 <main+0x2ac>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f7f5 fe6c 	bl	8002916 <_ZN11BlocMoteurs9motors_onEv>
  moteurs->mesure_pas_ecoule();
 800cc3e:	4b39      	ldr	r3, [pc, #228]	@ (800cd24 <main+0x2ac>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	4618      	mov	r0, r3
 800cc44:	f7f6 f8fa 	bl	8002e3c <_ZN11BlocMoteurs17mesure_pas_ecouleEv>
  moteurs->commande_step(636,636,636,636);
 800cc48:	4b36      	ldr	r3, [pc, #216]	@ (800cd24 <main+0x2ac>)
 800cc4a:	6818      	ldr	r0, [r3, #0]
 800cc4c:	f44f 731f 	mov.w	r3, #636	@ 0x27c
 800cc50:	9300      	str	r3, [sp, #0]
 800cc52:	f44f 731f 	mov.w	r3, #636	@ 0x27c
 800cc56:	f44f 721f 	mov.w	r2, #636	@ 0x27c
 800cc5a:	f44f 711f 	mov.w	r1, #636	@ 0x27c
 800cc5e:	f7f5 fd95 	bl	800278c <_ZN11BlocMoteurs13commande_stepEiiii>

  while(moteurs->get_busy())
 800cc62:	e01f      	b.n	800cca4 <main+0x22c>
  {
	  mesure_pas_ecoulees = moteurs->mesure_pas_ecoule();
 800cc64:	4b2f      	ldr	r3, [pc, #188]	@ (800cd24 <main+0x2ac>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f7f6 f8e7 	bl	8002e3c <_ZN11BlocMoteurs17mesure_pas_ecouleEv>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	4a2e      	ldr	r2, [pc, #184]	@ (800cd2c <main+0x2b4>)
 800cc72:	6013      	str	r3, [r2, #0]
	  for( int i = 0; i<4; i ++)
 800cc74:	2300      	movs	r3, #0
 800cc76:	617b      	str	r3, [r7, #20]
 800cc78:	e011      	b.n	800cc9e <main+0x226>
	  {
		  somme_mesure_pas_ecoulees[i]+=mesure_pas_ecoulees[i];
 800cc7a:	4a2d      	ldr	r2, [pc, #180]	@ (800cd30 <main+0x2b8>)
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cc82:	4b2a      	ldr	r3, [pc, #168]	@ (800cd2c <main+0x2b4>)
 800cc84:	6819      	ldr	r1, [r3, #0]
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	009b      	lsls	r3, r3, #2
 800cc8a:	440b      	add	r3, r1
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	441a      	add	r2, r3
 800cc90:	4927      	ldr	r1, [pc, #156]	@ (800cd30 <main+0x2b8>)
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for( int i = 0; i<4; i ++)
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	617b      	str	r3, [r7, #20]
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	2b03      	cmp	r3, #3
 800cca2:	ddea      	ble.n	800cc7a <main+0x202>
  while(moteurs->get_busy())
 800cca4:	4b1f      	ldr	r3, [pc, #124]	@ (800cd24 <main+0x2ac>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f7f6 f9b5 	bl	8003018 <_ZN11BlocMoteurs8get_busyEv>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d1d7      	bne.n	800cc64 <main+0x1ec>
	  }
  }
  mesure_pas_ecoulees = moteurs->mesure_pas_ecoule();
 800ccb4:	4b1b      	ldr	r3, [pc, #108]	@ (800cd24 <main+0x2ac>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f7f6 f8bf 	bl	8002e3c <_ZN11BlocMoteurs17mesure_pas_ecouleEv>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	4a1a      	ldr	r2, [pc, #104]	@ (800cd2c <main+0x2b4>)
 800ccc2:	6013      	str	r3, [r2, #0]
  for( int i = 0; i<4; i ++)
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	613b      	str	r3, [r7, #16]
 800ccc8:	e011      	b.n	800ccee <main+0x276>
  {
	  somme_mesure_pas_ecoulees[i]+=mesure_pas_ecoulees[i];
 800ccca:	4a19      	ldr	r2, [pc, #100]	@ (800cd30 <main+0x2b8>)
 800cccc:	693b      	ldr	r3, [r7, #16]
 800ccce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ccd2:	4b16      	ldr	r3, [pc, #88]	@ (800cd2c <main+0x2b4>)
 800ccd4:	6819      	ldr	r1, [r3, #0]
 800ccd6:	693b      	ldr	r3, [r7, #16]
 800ccd8:	009b      	lsls	r3, r3, #2
 800ccda:	440b      	add	r3, r1
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	441a      	add	r2, r3
 800cce0:	4913      	ldr	r1, [pc, #76]	@ (800cd30 <main+0x2b8>)
 800cce2:	693b      	ldr	r3, [r7, #16]
 800cce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for( int i = 0; i<4; i ++)
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	3301      	adds	r3, #1
 800ccec:	613b      	str	r3, [r7, #16]
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	2b03      	cmp	r3, #3
 800ccf2:	ddea      	ble.n	800ccca <main+0x252>
  }


  
  while(1);
 800ccf4:	bf00      	nop
 800ccf6:	e7fd      	b.n	800ccf4 <main+0x27c>
  moteurs = new BlocMoteurs(&hspi1, reset_shield_1_GPIO_Port, reset_shield_1_Pin, ssel1_GPIO_Port, ssel1_Pin,
 800ccf8:	2d00      	cmp	r5, #0
 800ccfa:	d004      	beq.n	800cd06 <main+0x28e>
		  	  	  	  	  	  	    reset_shield_2_GPIO_Port, reset_shield_2_Pin, ssel2_GPIO_Port, ssel2_Pin);
 800ccfc:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 800cd00:	4620      	mov	r0, r4
 800cd02:	f004 f81b 	bl	8010d3c <_ZdlPvj>
 800cd06:	f004 f8b1 	bl	8010e6c <__cxa_end_cleanup>
 800cd0a:	bf00      	nop
 800cd0c:	f3af 8000 	nop.w
 800cd10:	47ae147b 	.word	0x47ae147b
 800cd14:	3f947ae1 	.word	0x3f947ae1
 800cd18:	40020000 	.word	0x40020000
 800cd1c:	40020400 	.word	0x40020400
 800cd20:	200002ec 	.word	0x200002ec
 800cd24:	20000404 	.word	0x20000404
 800cd28:	200003e0 	.word	0x200003e0
 800cd2c:	200003f0 	.word	0x200003f0
 800cd30:	200003f4 	.word	0x200003f4

0800cd34 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b094      	sub	sp, #80	@ 0x50
 800cd38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800cd3a:	f107 031c 	add.w	r3, r7, #28
 800cd3e:	2234      	movs	r2, #52	@ 0x34
 800cd40:	2100      	movs	r1, #0
 800cd42:	4618      	mov	r0, r3
 800cd44:	f006 fbf3 	bl	801352e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800cd48:	f107 0308 	add.w	r3, r7, #8
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	601a      	str	r2, [r3, #0]
 800cd50:	605a      	str	r2, [r3, #4]
 800cd52:	609a      	str	r2, [r3, #8]
 800cd54:	60da      	str	r2, [r3, #12]
 800cd56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800cd58:	2300      	movs	r3, #0
 800cd5a:	607b      	str	r3, [r7, #4]
 800cd5c:	4b34      	ldr	r3, [pc, #208]	@ (800ce30 <_Z18SystemClock_Configv+0xfc>)
 800cd5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd60:	4a33      	ldr	r2, [pc, #204]	@ (800ce30 <_Z18SystemClock_Configv+0xfc>)
 800cd62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cd66:	6413      	str	r3, [r2, #64]	@ 0x40
 800cd68:	4b31      	ldr	r3, [pc, #196]	@ (800ce30 <_Z18SystemClock_Configv+0xfc>)
 800cd6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cd70:	607b      	str	r3, [r7, #4]
 800cd72:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800cd74:	2300      	movs	r3, #0
 800cd76:	603b      	str	r3, [r7, #0]
 800cd78:	4b2e      	ldr	r3, [pc, #184]	@ (800ce34 <_Z18SystemClock_Configv+0x100>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	4a2d      	ldr	r2, [pc, #180]	@ (800ce34 <_Z18SystemClock_Configv+0x100>)
 800cd7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cd82:	6013      	str	r3, [r2, #0]
 800cd84:	4b2b      	ldr	r3, [pc, #172]	@ (800ce34 <_Z18SystemClock_Configv+0x100>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800cd8c:	603b      	str	r3, [r7, #0]
 800cd8e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800cd90:	2302      	movs	r3, #2
 800cd92:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800cd94:	2301      	movs	r3, #1
 800cd96:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800cd98:	2310      	movs	r3, #16
 800cd9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800cd9c:	2302      	movs	r3, #2
 800cd9e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800cda0:	2300      	movs	r3, #0
 800cda2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800cda4:	2308      	movs	r3, #8
 800cda6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800cda8:	23b4      	movs	r3, #180	@ 0xb4
 800cdaa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800cdac:	2302      	movs	r3, #2
 800cdae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800cdb0:	2302      	movs	r3, #2
 800cdb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800cdb4:	2302      	movs	r3, #2
 800cdb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800cdb8:	f107 031c 	add.w	r3, r7, #28
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f001 fbf3 	bl	800e5a8 <HAL_RCC_OscConfig>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	bf14      	ite	ne
 800cdc8:	2301      	movne	r3, #1
 800cdca:	2300      	moveq	r3, #0
 800cdcc:	b2db      	uxtb	r3, r3
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d001      	beq.n	800cdd6 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800cdd2:	f000 f9c3 	bl	800d15c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800cdd6:	f001 f84d 	bl	800de74 <HAL_PWREx_EnableOverDrive>
 800cdda:	4603      	mov	r3, r0
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	bf14      	ite	ne
 800cde0:	2301      	movne	r3, #1
 800cde2:	2300      	moveq	r3, #0
 800cde4:	b2db      	uxtb	r3, r3
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d001      	beq.n	800cdee <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 800cdea:	f000 f9b7 	bl	800d15c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800cdee:	230f      	movs	r3, #15
 800cdf0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800cdf2:	2302      	movs	r3, #2
 800cdf4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800cdfa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800cdfe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800ce00:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800ce04:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800ce06:	f107 0308 	add.w	r3, r7, #8
 800ce0a:	2105      	movs	r1, #5
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f001 f881 	bl	800df14 <HAL_RCC_ClockConfig>
 800ce12:	4603      	mov	r3, r0
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	bf14      	ite	ne
 800ce18:	2301      	movne	r3, #1
 800ce1a:	2300      	moveq	r3, #0
 800ce1c:	b2db      	uxtb	r3, r3
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d001      	beq.n	800ce26 <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 800ce22:	f000 f99b 	bl	800d15c <Error_Handler>
  }
}
 800ce26:	bf00      	nop
 800ce28:	3750      	adds	r7, #80	@ 0x50
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}
 800ce2e:	bf00      	nop
 800ce30:	40023800 	.word	0x40023800
 800ce34:	40007000 	.word	0x40007000

0800ce38 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800ce3c:	4b1a      	ldr	r3, [pc, #104]	@ (800cea8 <_ZL12MX_SPI1_Initv+0x70>)
 800ce3e:	4a1b      	ldr	r2, [pc, #108]	@ (800ceac <_ZL12MX_SPI1_Initv+0x74>)
 800ce40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800ce42:	4b19      	ldr	r3, [pc, #100]	@ (800cea8 <_ZL12MX_SPI1_Initv+0x70>)
 800ce44:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800ce48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800ce4a:	4b17      	ldr	r3, [pc, #92]	@ (800cea8 <_ZL12MX_SPI1_Initv+0x70>)
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800ce50:	4b15      	ldr	r3, [pc, #84]	@ (800cea8 <_ZL12MX_SPI1_Initv+0x70>)
 800ce52:	2200      	movs	r2, #0
 800ce54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800ce56:	4b14      	ldr	r3, [pc, #80]	@ (800cea8 <_ZL12MX_SPI1_Initv+0x70>)
 800ce58:	2202      	movs	r2, #2
 800ce5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800ce5c:	4b12      	ldr	r3, [pc, #72]	@ (800cea8 <_ZL12MX_SPI1_Initv+0x70>)
 800ce5e:	2201      	movs	r2, #1
 800ce60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800ce62:	4b11      	ldr	r3, [pc, #68]	@ (800cea8 <_ZL12MX_SPI1_Initv+0x70>)
 800ce64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ce68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800ce6a:	4b0f      	ldr	r3, [pc, #60]	@ (800cea8 <_ZL12MX_SPI1_Initv+0x70>)
 800ce6c:	2210      	movs	r2, #16
 800ce6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ce70:	4b0d      	ldr	r3, [pc, #52]	@ (800cea8 <_ZL12MX_SPI1_Initv+0x70>)
 800ce72:	2200      	movs	r2, #0
 800ce74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800ce76:	4b0c      	ldr	r3, [pc, #48]	@ (800cea8 <_ZL12MX_SPI1_Initv+0x70>)
 800ce78:	2200      	movs	r2, #0
 800ce7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ce7c:	4b0a      	ldr	r3, [pc, #40]	@ (800cea8 <_ZL12MX_SPI1_Initv+0x70>)
 800ce7e:	2200      	movs	r2, #0
 800ce80:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800ce82:	4b09      	ldr	r3, [pc, #36]	@ (800cea8 <_ZL12MX_SPI1_Initv+0x70>)
 800ce84:	220a      	movs	r2, #10
 800ce86:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800ce88:	4807      	ldr	r0, [pc, #28]	@ (800cea8 <_ZL12MX_SPI1_Initv+0x70>)
 800ce8a:	f001 fe2b 	bl	800eae4 <HAL_SPI_Init>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	bf14      	ite	ne
 800ce94:	2301      	movne	r3, #1
 800ce96:	2300      	moveq	r3, #0
 800ce98:	b2db      	uxtb	r3, r3
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d001      	beq.n	800cea2 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800ce9e:	f000 f95d 	bl	800d15c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800cea2:	bf00      	nop
 800cea4:	bd80      	pop	{r7, pc}
 800cea6:	bf00      	nop
 800cea8:	200002ec 	.word	0x200002ec
 800ceac:	40013000 	.word	0x40013000

0800ceb0 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b086      	sub	sp, #24
 800ceb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ceb6:	f107 0308 	add.w	r3, r7, #8
 800ceba:	2200      	movs	r2, #0
 800cebc:	601a      	str	r2, [r3, #0]
 800cebe:	605a      	str	r2, [r3, #4]
 800cec0:	609a      	str	r2, [r3, #8]
 800cec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cec4:	463b      	mov	r3, r7
 800cec6:	2200      	movs	r2, #0
 800cec8:	601a      	str	r2, [r3, #0]
 800ceca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800cecc:	4b24      	ldr	r3, [pc, #144]	@ (800cf60 <_ZL12MX_TIM2_Initv+0xb0>)
 800cece:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800ced2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800ced4:	4b22      	ldr	r3, [pc, #136]	@ (800cf60 <_ZL12MX_TIM2_Initv+0xb0>)
 800ced6:	2200      	movs	r2, #0
 800ced8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ceda:	4b21      	ldr	r3, [pc, #132]	@ (800cf60 <_ZL12MX_TIM2_Initv+0xb0>)
 800cedc:	2200      	movs	r2, #0
 800cede:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1800000;
 800cee0:	4b1f      	ldr	r3, [pc, #124]	@ (800cf60 <_ZL12MX_TIM2_Initv+0xb0>)
 800cee2:	4a20      	ldr	r2, [pc, #128]	@ (800cf64 <_ZL12MX_TIM2_Initv+0xb4>)
 800cee4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cee6:	4b1e      	ldr	r3, [pc, #120]	@ (800cf60 <_ZL12MX_TIM2_Initv+0xb0>)
 800cee8:	2200      	movs	r2, #0
 800ceea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800ceec:	4b1c      	ldr	r3, [pc, #112]	@ (800cf60 <_ZL12MX_TIM2_Initv+0xb0>)
 800ceee:	2280      	movs	r2, #128	@ 0x80
 800cef0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800cef2:	481b      	ldr	r0, [pc, #108]	@ (800cf60 <_ZL12MX_TIM2_Initv+0xb0>)
 800cef4:	f002 fb9e 	bl	800f634 <HAL_TIM_Base_Init>
 800cef8:	4603      	mov	r3, r0
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	bf14      	ite	ne
 800cefe:	2301      	movne	r3, #1
 800cf00:	2300      	moveq	r3, #0
 800cf02:	b2db      	uxtb	r3, r3
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d001      	beq.n	800cf0c <_ZL12MX_TIM2_Initv+0x5c>
  {
    Error_Handler();
 800cf08:	f000 f928 	bl	800d15c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800cf0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cf10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800cf12:	f107 0308 	add.w	r3, r7, #8
 800cf16:	4619      	mov	r1, r3
 800cf18:	4811      	ldr	r0, [pc, #68]	@ (800cf60 <_ZL12MX_TIM2_Initv+0xb0>)
 800cf1a:	f002 fce2 	bl	800f8e2 <HAL_TIM_ConfigClockSource>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	bf14      	ite	ne
 800cf24:	2301      	movne	r3, #1
 800cf26:	2300      	moveq	r3, #0
 800cf28:	b2db      	uxtb	r3, r3
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d001      	beq.n	800cf32 <_ZL12MX_TIM2_Initv+0x82>
  {
    Error_Handler();
 800cf2e:	f000 f915 	bl	800d15c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cf32:	2300      	movs	r3, #0
 800cf34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cf36:	2300      	movs	r3, #0
 800cf38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800cf3a:	463b      	mov	r3, r7
 800cf3c:	4619      	mov	r1, r3
 800cf3e:	4808      	ldr	r0, [pc, #32]	@ (800cf60 <_ZL12MX_TIM2_Initv+0xb0>)
 800cf40:	f002 fef8 	bl	800fd34 <HAL_TIMEx_MasterConfigSynchronization>
 800cf44:	4603      	mov	r3, r0
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	bf14      	ite	ne
 800cf4a:	2301      	movne	r3, #1
 800cf4c:	2300      	moveq	r3, #0
 800cf4e:	b2db      	uxtb	r3, r3
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d001      	beq.n	800cf58 <_ZL12MX_TIM2_Initv+0xa8>
  {
    Error_Handler();
 800cf54:	f000 f902 	bl	800d15c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800cf58:	bf00      	nop
 800cf5a:	3718      	adds	r7, #24
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}
 800cf60:	20000344 	.word	0x20000344
 800cf64:	001b7740 	.word	0x001b7740

0800cf68 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800cf6c:	4b13      	ldr	r3, [pc, #76]	@ (800cfbc <_ZL19MX_USART2_UART_Initv+0x54>)
 800cf6e:	4a14      	ldr	r2, [pc, #80]	@ (800cfc0 <_ZL19MX_USART2_UART_Initv+0x58>)
 800cf70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800cf72:	4b12      	ldr	r3, [pc, #72]	@ (800cfbc <_ZL19MX_USART2_UART_Initv+0x54>)
 800cf74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800cf78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800cf7a:	4b10      	ldr	r3, [pc, #64]	@ (800cfbc <_ZL19MX_USART2_UART_Initv+0x54>)
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800cf80:	4b0e      	ldr	r3, [pc, #56]	@ (800cfbc <_ZL19MX_USART2_UART_Initv+0x54>)
 800cf82:	2200      	movs	r2, #0
 800cf84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800cf86:	4b0d      	ldr	r3, [pc, #52]	@ (800cfbc <_ZL19MX_USART2_UART_Initv+0x54>)
 800cf88:	2200      	movs	r2, #0
 800cf8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800cf8c:	4b0b      	ldr	r3, [pc, #44]	@ (800cfbc <_ZL19MX_USART2_UART_Initv+0x54>)
 800cf8e:	220c      	movs	r2, #12
 800cf90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cf92:	4b0a      	ldr	r3, [pc, #40]	@ (800cfbc <_ZL19MX_USART2_UART_Initv+0x54>)
 800cf94:	2200      	movs	r2, #0
 800cf96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800cf98:	4b08      	ldr	r3, [pc, #32]	@ (800cfbc <_ZL19MX_USART2_UART_Initv+0x54>)
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800cf9e:	4807      	ldr	r0, [pc, #28]	@ (800cfbc <_ZL19MX_USART2_UART_Initv+0x54>)
 800cfa0:	f002 ff58 	bl	800fe54 <HAL_UART_Init>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	bf14      	ite	ne
 800cfaa:	2301      	movne	r3, #1
 800cfac:	2300      	moveq	r3, #0
 800cfae:	b2db      	uxtb	r3, r3
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d001      	beq.n	800cfb8 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 800cfb4:	f000 f8d2 	bl	800d15c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800cfb8:	bf00      	nop
 800cfba:	bd80      	pop	{r7, pc}
 800cfbc:	2000038c 	.word	0x2000038c
 800cfc0:	40004400 	.word	0x40004400

0800cfc4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b08a      	sub	sp, #40	@ 0x28
 800cfc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cfca:	f107 0314 	add.w	r3, r7, #20
 800cfce:	2200      	movs	r2, #0
 800cfd0:	601a      	str	r2, [r3, #0]
 800cfd2:	605a      	str	r2, [r3, #4]
 800cfd4:	609a      	str	r2, [r3, #8]
 800cfd6:	60da      	str	r2, [r3, #12]
 800cfd8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800cfda:	2300      	movs	r3, #0
 800cfdc:	613b      	str	r3, [r7, #16]
 800cfde:	4b38      	ldr	r3, [pc, #224]	@ (800d0c0 <_ZL12MX_GPIO_Initv+0xfc>)
 800cfe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfe2:	4a37      	ldr	r2, [pc, #220]	@ (800d0c0 <_ZL12MX_GPIO_Initv+0xfc>)
 800cfe4:	f043 0304 	orr.w	r3, r3, #4
 800cfe8:	6313      	str	r3, [r2, #48]	@ 0x30
 800cfea:	4b35      	ldr	r3, [pc, #212]	@ (800d0c0 <_ZL12MX_GPIO_Initv+0xfc>)
 800cfec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfee:	f003 0304 	and.w	r3, r3, #4
 800cff2:	613b      	str	r3, [r7, #16]
 800cff4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800cff6:	2300      	movs	r3, #0
 800cff8:	60fb      	str	r3, [r7, #12]
 800cffa:	4b31      	ldr	r3, [pc, #196]	@ (800d0c0 <_ZL12MX_GPIO_Initv+0xfc>)
 800cffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cffe:	4a30      	ldr	r2, [pc, #192]	@ (800d0c0 <_ZL12MX_GPIO_Initv+0xfc>)
 800d000:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d004:	6313      	str	r3, [r2, #48]	@ 0x30
 800d006:	4b2e      	ldr	r3, [pc, #184]	@ (800d0c0 <_ZL12MX_GPIO_Initv+0xfc>)
 800d008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d00a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d00e:	60fb      	str	r3, [r7, #12]
 800d010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d012:	2300      	movs	r3, #0
 800d014:	60bb      	str	r3, [r7, #8]
 800d016:	4b2a      	ldr	r3, [pc, #168]	@ (800d0c0 <_ZL12MX_GPIO_Initv+0xfc>)
 800d018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d01a:	4a29      	ldr	r2, [pc, #164]	@ (800d0c0 <_ZL12MX_GPIO_Initv+0xfc>)
 800d01c:	f043 0301 	orr.w	r3, r3, #1
 800d020:	6313      	str	r3, [r2, #48]	@ 0x30
 800d022:	4b27      	ldr	r3, [pc, #156]	@ (800d0c0 <_ZL12MX_GPIO_Initv+0xfc>)
 800d024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d026:	f003 0301 	and.w	r3, r3, #1
 800d02a:	60bb      	str	r3, [r7, #8]
 800d02c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d02e:	2300      	movs	r3, #0
 800d030:	607b      	str	r3, [r7, #4]
 800d032:	4b23      	ldr	r3, [pc, #140]	@ (800d0c0 <_ZL12MX_GPIO_Initv+0xfc>)
 800d034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d036:	4a22      	ldr	r2, [pc, #136]	@ (800d0c0 <_ZL12MX_GPIO_Initv+0xfc>)
 800d038:	f043 0302 	orr.w	r3, r3, #2
 800d03c:	6313      	str	r3, [r2, #48]	@ 0x30
 800d03e:	4b20      	ldr	r3, [pc, #128]	@ (800d0c0 <_ZL12MX_GPIO_Initv+0xfc>)
 800d040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d042:	f003 0302 	and.w	r3, r3, #2
 800d046:	607b      	str	r3, [r7, #4]
 800d048:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ssel1_Pin|LD2_Pin|ssel2_Pin, GPIO_PIN_RESET);
 800d04a:	2200      	movs	r2, #0
 800d04c:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 800d050:	481c      	ldr	r0, [pc, #112]	@ (800d0c4 <_ZL12MX_GPIO_Initv+0x100>)
 800d052:	f000 fef5 	bl	800de40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, reset_shield_2_Pin|reset_shield_1_Pin, GPIO_PIN_RESET);
 800d056:	2200      	movs	r2, #0
 800d058:	2130      	movs	r1, #48	@ 0x30
 800d05a:	481b      	ldr	r0, [pc, #108]	@ (800d0c8 <_ZL12MX_GPIO_Initv+0x104>)
 800d05c:	f000 fef0 	bl	800de40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800d060:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800d066:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800d06a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d06c:	2300      	movs	r3, #0
 800d06e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800d070:	f107 0314 	add.w	r3, r7, #20
 800d074:	4619      	mov	r1, r3
 800d076:	4815      	ldr	r0, [pc, #84]	@ (800d0cc <_ZL12MX_GPIO_Initv+0x108>)
 800d078:	f000 fd4e 	bl	800db18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ssel1_Pin LD2_Pin ssel2_Pin */
  GPIO_InitStruct.Pin = ssel1_Pin|LD2_Pin|ssel2_Pin;
 800d07c:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 800d080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d082:	2301      	movs	r3, #1
 800d084:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d086:	2300      	movs	r3, #0
 800d088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d08a:	2300      	movs	r3, #0
 800d08c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d08e:	f107 0314 	add.w	r3, r7, #20
 800d092:	4619      	mov	r1, r3
 800d094:	480b      	ldr	r0, [pc, #44]	@ (800d0c4 <_ZL12MX_GPIO_Initv+0x100>)
 800d096:	f000 fd3f 	bl	800db18 <HAL_GPIO_Init>

  /*Configure GPIO pins : reset_shield_2_Pin reset_shield_1_Pin */
  GPIO_InitStruct.Pin = reset_shield_2_Pin|reset_shield_1_Pin;
 800d09a:	2330      	movs	r3, #48	@ 0x30
 800d09c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d09e:	2301      	movs	r3, #1
 800d0a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d0aa:	f107 0314 	add.w	r3, r7, #20
 800d0ae:	4619      	mov	r1, r3
 800d0b0:	4805      	ldr	r0, [pc, #20]	@ (800d0c8 <_ZL12MX_GPIO_Initv+0x104>)
 800d0b2:	f000 fd31 	bl	800db18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800d0b6:	bf00      	nop
 800d0b8:	3728      	adds	r7, #40	@ 0x28
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}
 800d0be:	bf00      	nop
 800d0c0:	40023800 	.word	0x40023800
 800d0c4:	40020000 	.word	0x40020000
 800d0c8:	40020400 	.word	0x40020400
 800d0cc:	40020800 	.word	0x40020800

0800d0d0 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */

//Redirect Uart callback to msg_handler if huart is huart2 peripheral
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b082      	sub	sp, #8
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	4a05      	ldr	r2, [pc, #20]	@ (800d0f0 <HAL_UART_TxCpltCallback+0x20>)
 800d0dc:	4293      	cmp	r3, r2
 800d0de:	d102      	bne.n	800d0e6 <HAL_UART_TxCpltCallback+0x16>
	{
		msg_handler.process_txclpt_callback();
 800d0e0:	4804      	ldr	r0, [pc, #16]	@ (800d0f4 <HAL_UART_TxCpltCallback+0x24>)
 800d0e2:	f000 f875 	bl	800d1d0 <_ZN10MsgHandler23process_txclpt_callbackEv>
	}


}
 800d0e6:	bf00      	nop
 800d0e8:	3708      	adds	r7, #8
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}
 800d0ee:	bf00      	nop
 800d0f0:	2000038c 	.word	0x2000038c
 800d0f4:	200003d0 	.word	0x200003d0

0800d0f8 <HAL_UART_RxCpltCallback>:

//Redirect Uart callback to msg_handler if huart is huart2 peripheral
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b082      	sub	sp, #8
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
	if( huart == &huart2)
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	4a05      	ldr	r2, [pc, #20]	@ (800d118 <HAL_UART_RxCpltCallback+0x20>)
 800d104:	4293      	cmp	r3, r2
 800d106:	d102      	bne.n	800d10e <HAL_UART_RxCpltCallback+0x16>
	{
		msg_handler.process_rxclpt_callback();
 800d108:	4804      	ldr	r0, [pc, #16]	@ (800d11c <HAL_UART_RxCpltCallback+0x24>)
 800d10a:	f000 f86e 	bl	800d1ea <_ZN10MsgHandler23process_rxclpt_callbackEv>
	}

}
 800d10e:	bf00      	nop
 800d110:	3708      	adds	r7, #8
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	2000038c 	.word	0x2000038c
 800d11c:	200003d0 	.word	0x200003d0

0800d120 <HAL_TIM_PeriodElapsedCallback>:

//Timer 2 interrupt (every 20ms)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b082      	sub	sp, #8
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim2 )
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	4a09      	ldr	r2, [pc, #36]	@ (800d150 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800d12c:	4293      	cmp	r3, r2
 800d12e:	d10b      	bne.n	800d148 <HAL_TIM_PeriodElapsedCallback+0x28>
  {

	  timer_timeout_count++;
 800d130:	4b08      	ldr	r3, [pc, #32]	@ (800d154 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	3301      	adds	r3, #1
 800d136:	4a07      	ldr	r2, [pc, #28]	@ (800d154 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800d138:	6013      	str	r3, [r2, #0]
	  if (timer_timeout_count > 10) //in case of a timeout, reset flags that may lock the logic of the msg_handler 
 800d13a:	4b06      	ldr	r3, [pc, #24]	@ (800d154 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	2b0a      	cmp	r3, #10
 800d140:	dd02      	ble.n	800d148 <HAL_TIM_PeriodElapsedCallback+0x28>
	  {
		  msg_handler.unlock_timeout();
 800d142:	4805      	ldr	r0, [pc, #20]	@ (800d158 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800d144:	f7ff fc85 	bl	800ca52 <_ZN10MsgHandler14unlock_timeoutEv>
	  }

  }
}
 800d148:	bf00      	nop
 800d14a:	3708      	adds	r7, #8
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}
 800d150:	20000344 	.word	0x20000344
 800d154:	200003dc 	.word	0x200003dc
 800d158:	200003d0 	.word	0x200003d0

0800d15c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d15c:	b480      	push	{r7}
 800d15e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d160:	b672      	cpsid	i
}
 800d162:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800d164:	bf00      	nop
 800d166:	e7fd      	b.n	800d164 <Error_Handler+0x8>

0800d168 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800d168:	b580      	push	{r7, lr}
 800d16a:	b082      	sub	sp, #8
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	6039      	str	r1, [r7, #0]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2b01      	cmp	r3, #1
 800d176:	d108      	bne.n	800d18a <_Z41__static_initialization_and_destruction_0ii+0x22>
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d17e:	4293      	cmp	r3, r2
 800d180:	d103      	bne.n	800d18a <_Z41__static_initialization_and_destruction_0ii+0x22>
MsgHandler msg_handler(&huart2);
 800d182:	4909      	ldr	r1, [pc, #36]	@ (800d1a8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800d184:	4809      	ldr	r0, [pc, #36]	@ (800d1ac <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800d186:	f7ff fc35 	bl	800c9f4 <_ZN10MsgHandlerC1EP20__UART_HandleTypeDef>
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d107      	bne.n	800d1a0 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d196:	4293      	cmp	r3, r2
 800d198:	d102      	bne.n	800d1a0 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800d19a:	4804      	ldr	r0, [pc, #16]	@ (800d1ac <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800d19c:	f7ff fc47 	bl	800ca2e <_ZN10MsgHandlerD1Ev>
}
 800d1a0:	bf00      	nop
 800d1a2:	3708      	adds	r7, #8
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}
 800d1a8:	2000038c 	.word	0x2000038c
 800d1ac:	200003d0 	.word	0x200003d0

0800d1b0 <_GLOBAL__sub_I_hspi1>:
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	af00      	add	r7, sp, #0
 800d1b4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800d1b8:	2001      	movs	r0, #1
 800d1ba:	f7ff ffd5 	bl	800d168 <_Z41__static_initialization_and_destruction_0ii>
 800d1be:	bd80      	pop	{r7, pc}

0800d1c0 <_GLOBAL__sub_D_hspi1>:
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	af00      	add	r7, sp, #0
 800d1c4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800d1c8:	2000      	movs	r0, #0
 800d1ca:	f7ff ffcd 	bl	800d168 <_Z41__static_initialization_and_destruction_0ii>
 800d1ce:	bd80      	pop	{r7, pc}

0800d1d0 <_ZN10MsgHandler23process_txclpt_callbackEv>:

/*
  * @brief  called upon completion of HAL_UART_TRANSMIT_IT
*/
void MsgHandler::process_txclpt_callback()
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b083      	sub	sp, #12
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
	sending =false;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	725a      	strb	r2, [r3, #9]
}
 800d1de:	bf00      	nop
 800d1e0:	370c      	adds	r7, #12
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e8:	4770      	bx	lr

0800d1ea <_ZN10MsgHandler23process_rxclpt_callbackEv>:

/*
  * @brief  called upon completion of HAL_UART_RECEIVE_IT
*/
void MsgHandler::process_rxclpt_callback()
{
 800d1ea:	b480      	push	{r7}
 800d1ec:	b083      	sub	sp, #12
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	6078      	str	r0, [r7, #4]
	receiving = false;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	729a      	strb	r2, [r3, #10]
	received_motor_speeds = true;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2201      	movs	r2, #1
 800d1fc:	721a      	strb	r2, [r3, #8]
}
 800d1fe:	bf00      	nop
 800d200:	370c      	adds	r7, #12
 800d202:	46bd      	mov	sp, r7
 800d204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d208:	4770      	bx	lr
	...

0800d20c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b082      	sub	sp, #8
 800d210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d212:	2300      	movs	r3, #0
 800d214:	607b      	str	r3, [r7, #4]
 800d216:	4b10      	ldr	r3, [pc, #64]	@ (800d258 <HAL_MspInit+0x4c>)
 800d218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d21a:	4a0f      	ldr	r2, [pc, #60]	@ (800d258 <HAL_MspInit+0x4c>)
 800d21c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d220:	6453      	str	r3, [r2, #68]	@ 0x44
 800d222:	4b0d      	ldr	r3, [pc, #52]	@ (800d258 <HAL_MspInit+0x4c>)
 800d224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d226:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d22a:	607b      	str	r3, [r7, #4]
 800d22c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d22e:	2300      	movs	r3, #0
 800d230:	603b      	str	r3, [r7, #0]
 800d232:	4b09      	ldr	r3, [pc, #36]	@ (800d258 <HAL_MspInit+0x4c>)
 800d234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d236:	4a08      	ldr	r2, [pc, #32]	@ (800d258 <HAL_MspInit+0x4c>)
 800d238:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d23c:	6413      	str	r3, [r2, #64]	@ 0x40
 800d23e:	4b06      	ldr	r3, [pc, #24]	@ (800d258 <HAL_MspInit+0x4c>)
 800d240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d246:	603b      	str	r3, [r7, #0]
 800d248:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800d24a:	2007      	movs	r0, #7
 800d24c:	f000 fb90 	bl	800d970 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d250:	bf00      	nop
 800d252:	3708      	adds	r7, #8
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}
 800d258:	40023800 	.word	0x40023800

0800d25c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b08a      	sub	sp, #40	@ 0x28
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d264:	f107 0314 	add.w	r3, r7, #20
 800d268:	2200      	movs	r2, #0
 800d26a:	601a      	str	r2, [r3, #0]
 800d26c:	605a      	str	r2, [r3, #4]
 800d26e:	609a      	str	r2, [r3, #8]
 800d270:	60da      	str	r2, [r3, #12]
 800d272:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	4a28      	ldr	r2, [pc, #160]	@ (800d31c <HAL_SPI_MspInit+0xc0>)
 800d27a:	4293      	cmp	r3, r2
 800d27c:	d149      	bne.n	800d312 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800d27e:	2300      	movs	r3, #0
 800d280:	613b      	str	r3, [r7, #16]
 800d282:	4b27      	ldr	r3, [pc, #156]	@ (800d320 <HAL_SPI_MspInit+0xc4>)
 800d284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d286:	4a26      	ldr	r2, [pc, #152]	@ (800d320 <HAL_SPI_MspInit+0xc4>)
 800d288:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d28c:	6453      	str	r3, [r2, #68]	@ 0x44
 800d28e:	4b24      	ldr	r3, [pc, #144]	@ (800d320 <HAL_SPI_MspInit+0xc4>)
 800d290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d292:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d296:	613b      	str	r3, [r7, #16]
 800d298:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d29a:	2300      	movs	r3, #0
 800d29c:	60fb      	str	r3, [r7, #12]
 800d29e:	4b20      	ldr	r3, [pc, #128]	@ (800d320 <HAL_SPI_MspInit+0xc4>)
 800d2a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2a2:	4a1f      	ldr	r2, [pc, #124]	@ (800d320 <HAL_SPI_MspInit+0xc4>)
 800d2a4:	f043 0301 	orr.w	r3, r3, #1
 800d2a8:	6313      	str	r3, [r2, #48]	@ 0x30
 800d2aa:	4b1d      	ldr	r3, [pc, #116]	@ (800d320 <HAL_SPI_MspInit+0xc4>)
 800d2ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2ae:	f003 0301 	and.w	r3, r3, #1
 800d2b2:	60fb      	str	r3, [r7, #12]
 800d2b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	60bb      	str	r3, [r7, #8]
 800d2ba:	4b19      	ldr	r3, [pc, #100]	@ (800d320 <HAL_SPI_MspInit+0xc4>)
 800d2bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2be:	4a18      	ldr	r2, [pc, #96]	@ (800d320 <HAL_SPI_MspInit+0xc4>)
 800d2c0:	f043 0302 	orr.w	r3, r3, #2
 800d2c4:	6313      	str	r3, [r2, #48]	@ 0x30
 800d2c6:	4b16      	ldr	r3, [pc, #88]	@ (800d320 <HAL_SPI_MspInit+0xc4>)
 800d2c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2ca:	f003 0302 	and.w	r3, r3, #2
 800d2ce:	60bb      	str	r3, [r7, #8]
 800d2d0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800d2d2:	23c0      	movs	r3, #192	@ 0xc0
 800d2d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2d6:	2302      	movs	r3, #2
 800d2d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d2de:	2303      	movs	r3, #3
 800d2e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800d2e2:	2305      	movs	r3, #5
 800d2e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d2e6:	f107 0314 	add.w	r3, r7, #20
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	480d      	ldr	r0, [pc, #52]	@ (800d324 <HAL_SPI_MspInit+0xc8>)
 800d2ee:	f000 fc13 	bl	800db18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800d2f2:	2308      	movs	r3, #8
 800d2f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2f6:	2302      	movs	r3, #2
 800d2f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d2fe:	2303      	movs	r3, #3
 800d300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800d302:	2305      	movs	r3, #5
 800d304:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d306:	f107 0314 	add.w	r3, r7, #20
 800d30a:	4619      	mov	r1, r3
 800d30c:	4806      	ldr	r0, [pc, #24]	@ (800d328 <HAL_SPI_MspInit+0xcc>)
 800d30e:	f000 fc03 	bl	800db18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800d312:	bf00      	nop
 800d314:	3728      	adds	r7, #40	@ 0x28
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}
 800d31a:	bf00      	nop
 800d31c:	40013000 	.word	0x40013000
 800d320:	40023800 	.word	0x40023800
 800d324:	40020000 	.word	0x40020000
 800d328:	40020400 	.word	0x40020400

0800d32c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b084      	sub	sp, #16
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d33c:	d115      	bne.n	800d36a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800d33e:	2300      	movs	r3, #0
 800d340:	60fb      	str	r3, [r7, #12]
 800d342:	4b0c      	ldr	r3, [pc, #48]	@ (800d374 <HAL_TIM_Base_MspInit+0x48>)
 800d344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d346:	4a0b      	ldr	r2, [pc, #44]	@ (800d374 <HAL_TIM_Base_MspInit+0x48>)
 800d348:	f043 0301 	orr.w	r3, r3, #1
 800d34c:	6413      	str	r3, [r2, #64]	@ 0x40
 800d34e:	4b09      	ldr	r3, [pc, #36]	@ (800d374 <HAL_TIM_Base_MspInit+0x48>)
 800d350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d352:	f003 0301 	and.w	r3, r3, #1
 800d356:	60fb      	str	r3, [r7, #12]
 800d358:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 800d35a:	2202      	movs	r2, #2
 800d35c:	2100      	movs	r1, #0
 800d35e:	201c      	movs	r0, #28
 800d360:	f000 fb11 	bl	800d986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800d364:	201c      	movs	r0, #28
 800d366:	f000 fb2a 	bl	800d9be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800d36a:	bf00      	nop
 800d36c:	3710      	adds	r7, #16
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}
 800d372:	bf00      	nop
 800d374:	40023800 	.word	0x40023800

0800d378 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b08a      	sub	sp, #40	@ 0x28
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d380:	f107 0314 	add.w	r3, r7, #20
 800d384:	2200      	movs	r2, #0
 800d386:	601a      	str	r2, [r3, #0]
 800d388:	605a      	str	r2, [r3, #4]
 800d38a:	609a      	str	r2, [r3, #8]
 800d38c:	60da      	str	r2, [r3, #12]
 800d38e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	4a1d      	ldr	r2, [pc, #116]	@ (800d40c <HAL_UART_MspInit+0x94>)
 800d396:	4293      	cmp	r3, r2
 800d398:	d133      	bne.n	800d402 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800d39a:	2300      	movs	r3, #0
 800d39c:	613b      	str	r3, [r7, #16]
 800d39e:	4b1c      	ldr	r3, [pc, #112]	@ (800d410 <HAL_UART_MspInit+0x98>)
 800d3a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3a2:	4a1b      	ldr	r2, [pc, #108]	@ (800d410 <HAL_UART_MspInit+0x98>)
 800d3a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d3a8:	6413      	str	r3, [r2, #64]	@ 0x40
 800d3aa:	4b19      	ldr	r3, [pc, #100]	@ (800d410 <HAL_UART_MspInit+0x98>)
 800d3ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d3b2:	613b      	str	r3, [r7, #16]
 800d3b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	60fb      	str	r3, [r7, #12]
 800d3ba:	4b15      	ldr	r3, [pc, #84]	@ (800d410 <HAL_UART_MspInit+0x98>)
 800d3bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3be:	4a14      	ldr	r2, [pc, #80]	@ (800d410 <HAL_UART_MspInit+0x98>)
 800d3c0:	f043 0301 	orr.w	r3, r3, #1
 800d3c4:	6313      	str	r3, [r2, #48]	@ 0x30
 800d3c6:	4b12      	ldr	r3, [pc, #72]	@ (800d410 <HAL_UART_MspInit+0x98>)
 800d3c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3ca:	f003 0301 	and.w	r3, r3, #1
 800d3ce:	60fb      	str	r3, [r7, #12]
 800d3d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800d3d2:	230c      	movs	r3, #12
 800d3d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3d6:	2302      	movs	r3, #2
 800d3d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d3de:	2303      	movs	r3, #3
 800d3e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800d3e2:	2307      	movs	r3, #7
 800d3e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d3e6:	f107 0314 	add.w	r3, r7, #20
 800d3ea:	4619      	mov	r1, r3
 800d3ec:	4809      	ldr	r0, [pc, #36]	@ (800d414 <HAL_UART_MspInit+0x9c>)
 800d3ee:	f000 fb93 	bl	800db18 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	2100      	movs	r1, #0
 800d3f6:	2026      	movs	r0, #38	@ 0x26
 800d3f8:	f000 fac5 	bl	800d986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800d3fc:	2026      	movs	r0, #38	@ 0x26
 800d3fe:	f000 fade 	bl	800d9be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800d402:	bf00      	nop
 800d404:	3728      	adds	r7, #40	@ 0x28
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}
 800d40a:	bf00      	nop
 800d40c:	40004400 	.word	0x40004400
 800d410:	40023800 	.word	0x40023800
 800d414:	40020000 	.word	0x40020000

0800d418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d418:	b480      	push	{r7}
 800d41a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800d41c:	bf00      	nop
 800d41e:	e7fd      	b.n	800d41c <NMI_Handler+0x4>

0800d420 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d420:	b480      	push	{r7}
 800d422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d424:	bf00      	nop
 800d426:	e7fd      	b.n	800d424 <HardFault_Handler+0x4>

0800d428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d428:	b480      	push	{r7}
 800d42a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d42c:	bf00      	nop
 800d42e:	e7fd      	b.n	800d42c <MemManage_Handler+0x4>

0800d430 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d430:	b480      	push	{r7}
 800d432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d434:	bf00      	nop
 800d436:	e7fd      	b.n	800d434 <BusFault_Handler+0x4>

0800d438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d438:	b480      	push	{r7}
 800d43a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d43c:	bf00      	nop
 800d43e:	e7fd      	b.n	800d43c <UsageFault_Handler+0x4>

0800d440 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d440:	b480      	push	{r7}
 800d442:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800d444:	bf00      	nop
 800d446:	46bd      	mov	sp, r7
 800d448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44c:	4770      	bx	lr

0800d44e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d44e:	b480      	push	{r7}
 800d450:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d452:	bf00      	nop
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr

0800d45c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d45c:	b480      	push	{r7}
 800d45e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d460:	bf00      	nop
 800d462:	46bd      	mov	sp, r7
 800d464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d468:	4770      	bx	lr

0800d46a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d46a:	b580      	push	{r7, lr}
 800d46c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d46e:	f000 f96b 	bl	800d748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d472:	bf00      	nop
 800d474:	bd80      	pop	{r7, pc}
	...

0800d478 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800d47c:	4802      	ldr	r0, [pc, #8]	@ (800d488 <TIM2_IRQHandler+0x10>)
 800d47e:	f002 f928 	bl	800f6d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800d482:	bf00      	nop
 800d484:	bd80      	pop	{r7, pc}
 800d486:	bf00      	nop
 800d488:	20000344 	.word	0x20000344

0800d48c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800d490:	4802      	ldr	r0, [pc, #8]	@ (800d49c <USART2_IRQHandler+0x10>)
 800d492:	f002 fd2d 	bl	800fef0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800d496:	bf00      	nop
 800d498:	bd80      	pop	{r7, pc}
 800d49a:	bf00      	nop
 800d49c:	2000038c 	.word	0x2000038c

0800d4a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	af00      	add	r7, sp, #0
  return 1;
 800d4a4:	2301      	movs	r3, #1
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ae:	4770      	bx	lr

0800d4b0 <_kill>:

int _kill(int pid, int sig)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b082      	sub	sp, #8
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
 800d4b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800d4ba:	f006 f8df 	bl	801367c <__errno>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	2216      	movs	r2, #22
 800d4c2:	601a      	str	r2, [r3, #0]
  return -1;
 800d4c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3708      	adds	r7, #8
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}

0800d4d0 <_exit>:

void _exit (int status)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b082      	sub	sp, #8
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800d4d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f7ff ffe7 	bl	800d4b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 800d4e2:	bf00      	nop
 800d4e4:	e7fd      	b.n	800d4e2 <_exit+0x12>

0800d4e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800d4e6:	b580      	push	{r7, lr}
 800d4e8:	b086      	sub	sp, #24
 800d4ea:	af00      	add	r7, sp, #0
 800d4ec:	60f8      	str	r0, [r7, #12]
 800d4ee:	60b9      	str	r1, [r7, #8]
 800d4f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	617b      	str	r3, [r7, #20]
 800d4f6:	e00a      	b.n	800d50e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800d4f8:	f3af 8000 	nop.w
 800d4fc:	4601      	mov	r1, r0
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	1c5a      	adds	r2, r3, #1
 800d502:	60ba      	str	r2, [r7, #8]
 800d504:	b2ca      	uxtb	r2, r1
 800d506:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	3301      	adds	r3, #1
 800d50c:	617b      	str	r3, [r7, #20]
 800d50e:	697a      	ldr	r2, [r7, #20]
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	429a      	cmp	r2, r3
 800d514:	dbf0      	blt.n	800d4f8 <_read+0x12>
  }

  return len;
 800d516:	687b      	ldr	r3, [r7, #4]
}
 800d518:	4618      	mov	r0, r3
 800d51a:	3718      	adds	r7, #24
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}

0800d520 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b086      	sub	sp, #24
 800d524:	af00      	add	r7, sp, #0
 800d526:	60f8      	str	r0, [r7, #12]
 800d528:	60b9      	str	r1, [r7, #8]
 800d52a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d52c:	2300      	movs	r3, #0
 800d52e:	617b      	str	r3, [r7, #20]
 800d530:	e009      	b.n	800d546 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	1c5a      	adds	r2, r3, #1
 800d536:	60ba      	str	r2, [r7, #8]
 800d538:	781b      	ldrb	r3, [r3, #0]
 800d53a:	4618      	mov	r0, r3
 800d53c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	3301      	adds	r3, #1
 800d544:	617b      	str	r3, [r7, #20]
 800d546:	697a      	ldr	r2, [r7, #20]
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	429a      	cmp	r2, r3
 800d54c:	dbf1      	blt.n	800d532 <_write+0x12>
  }
  return len;
 800d54e:	687b      	ldr	r3, [r7, #4]
}
 800d550:	4618      	mov	r0, r3
 800d552:	3718      	adds	r7, #24
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}

0800d558 <_close>:

int _close(int file)
{
 800d558:	b480      	push	{r7}
 800d55a:	b083      	sub	sp, #12
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800d560:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800d564:	4618      	mov	r0, r3
 800d566:	370c      	adds	r7, #12
 800d568:	46bd      	mov	sp, r7
 800d56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56e:	4770      	bx	lr

0800d570 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800d570:	b480      	push	{r7}
 800d572:	b083      	sub	sp, #12
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800d580:	605a      	str	r2, [r3, #4]
  return 0;
 800d582:	2300      	movs	r3, #0
}
 800d584:	4618      	mov	r0, r3
 800d586:	370c      	adds	r7, #12
 800d588:	46bd      	mov	sp, r7
 800d58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58e:	4770      	bx	lr

0800d590 <_isatty>:

int _isatty(int file)
{
 800d590:	b480      	push	{r7}
 800d592:	b083      	sub	sp, #12
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800d598:	2301      	movs	r3, #1
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	370c      	adds	r7, #12
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a4:	4770      	bx	lr

0800d5a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800d5a6:	b480      	push	{r7}
 800d5a8:	b085      	sub	sp, #20
 800d5aa:	af00      	add	r7, sp, #0
 800d5ac:	60f8      	str	r0, [r7, #12]
 800d5ae:	60b9      	str	r1, [r7, #8]
 800d5b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800d5b2:	2300      	movs	r3, #0
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	3714      	adds	r7, #20
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5be:	4770      	bx	lr

0800d5c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b086      	sub	sp, #24
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d5c8:	4a14      	ldr	r2, [pc, #80]	@ (800d61c <_sbrk+0x5c>)
 800d5ca:	4b15      	ldr	r3, [pc, #84]	@ (800d620 <_sbrk+0x60>)
 800d5cc:	1ad3      	subs	r3, r2, r3
 800d5ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800d5d0:	697b      	ldr	r3, [r7, #20]
 800d5d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d5d4:	4b13      	ldr	r3, [pc, #76]	@ (800d624 <_sbrk+0x64>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d102      	bne.n	800d5e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d5dc:	4b11      	ldr	r3, [pc, #68]	@ (800d624 <_sbrk+0x64>)
 800d5de:	4a12      	ldr	r2, [pc, #72]	@ (800d628 <_sbrk+0x68>)
 800d5e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d5e2:	4b10      	ldr	r3, [pc, #64]	@ (800d624 <_sbrk+0x64>)
 800d5e4:	681a      	ldr	r2, [r3, #0]
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	4413      	add	r3, r2
 800d5ea:	693a      	ldr	r2, [r7, #16]
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	d207      	bcs.n	800d600 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800d5f0:	f006 f844 	bl	801367c <__errno>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	220c      	movs	r2, #12
 800d5f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800d5fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d5fe:	e009      	b.n	800d614 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800d600:	4b08      	ldr	r3, [pc, #32]	@ (800d624 <_sbrk+0x64>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800d606:	4b07      	ldr	r3, [pc, #28]	@ (800d624 <_sbrk+0x64>)
 800d608:	681a      	ldr	r2, [r3, #0]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	4413      	add	r3, r2
 800d60e:	4a05      	ldr	r2, [pc, #20]	@ (800d624 <_sbrk+0x64>)
 800d610:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800d612:	68fb      	ldr	r3, [r7, #12]
}
 800d614:	4618      	mov	r0, r3
 800d616:	3718      	adds	r7, #24
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}
 800d61c:	20020000 	.word	0x20020000
 800d620:	00000400 	.word	0x00000400
 800d624:	20000408 	.word	0x20000408
 800d628:	20000590 	.word	0x20000590

0800d62c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d62c:	b480      	push	{r7}
 800d62e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d630:	4b06      	ldr	r3, [pc, #24]	@ (800d64c <SystemInit+0x20>)
 800d632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d636:	4a05      	ldr	r2, [pc, #20]	@ (800d64c <SystemInit+0x20>)
 800d638:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d63c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800d640:	bf00      	nop
 800d642:	46bd      	mov	sp, r7
 800d644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d648:	4770      	bx	lr
 800d64a:	bf00      	nop
 800d64c:	e000ed00 	.word	0xe000ed00

0800d650 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800d650:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800d688 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800d654:	480d      	ldr	r0, [pc, #52]	@ (800d68c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800d656:	490e      	ldr	r1, [pc, #56]	@ (800d690 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800d658:	4a0e      	ldr	r2, [pc, #56]	@ (800d694 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800d65a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800d65c:	e002      	b.n	800d664 <LoopCopyDataInit>

0800d65e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800d65e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d662:	3304      	adds	r3, #4

0800d664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800d668:	d3f9      	bcc.n	800d65e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800d66a:	4a0b      	ldr	r2, [pc, #44]	@ (800d698 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800d66c:	4c0b      	ldr	r4, [pc, #44]	@ (800d69c <LoopFillZerobss+0x26>)
  movs r3, #0
 800d66e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800d670:	e001      	b.n	800d676 <LoopFillZerobss>

0800d672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800d672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d674:	3204      	adds	r2, #4

0800d676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800d676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800d678:	d3fb      	bcc.n	800d672 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800d67a:	f7ff ffd7 	bl	800d62c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d67e:	f006 f803 	bl	8013688 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d682:	f7ff f9f9 	bl	800ca78 <main>
  bx  lr    
 800d686:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800d688:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800d68c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800d690:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 800d694:	08018c08 	.word	0x08018c08
  ldr r2, =_sbss
 800d698:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800d69c:	2000058c 	.word	0x2000058c

0800d6a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d6a0:	e7fe      	b.n	800d6a0 <ADC_IRQHandler>
	...

0800d6a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800d6a8:	4b0e      	ldr	r3, [pc, #56]	@ (800d6e4 <HAL_Init+0x40>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	4a0d      	ldr	r2, [pc, #52]	@ (800d6e4 <HAL_Init+0x40>)
 800d6ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d6b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800d6b4:	4b0b      	ldr	r3, [pc, #44]	@ (800d6e4 <HAL_Init+0x40>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	4a0a      	ldr	r2, [pc, #40]	@ (800d6e4 <HAL_Init+0x40>)
 800d6ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d6be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800d6c0:	4b08      	ldr	r3, [pc, #32]	@ (800d6e4 <HAL_Init+0x40>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	4a07      	ldr	r2, [pc, #28]	@ (800d6e4 <HAL_Init+0x40>)
 800d6c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d6ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d6cc:	2003      	movs	r0, #3
 800d6ce:	f000 f94f 	bl	800d970 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800d6d2:	2000      	movs	r0, #0
 800d6d4:	f000 f808 	bl	800d6e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800d6d8:	f7ff fd98 	bl	800d20c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800d6dc:	2300      	movs	r3, #0
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	bd80      	pop	{r7, pc}
 800d6e2:	bf00      	nop
 800d6e4:	40023c00 	.word	0x40023c00

0800d6e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b082      	sub	sp, #8
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800d6f0:	4b12      	ldr	r3, [pc, #72]	@ (800d73c <HAL_InitTick+0x54>)
 800d6f2:	681a      	ldr	r2, [r3, #0]
 800d6f4:	4b12      	ldr	r3, [pc, #72]	@ (800d740 <HAL_InitTick+0x58>)
 800d6f6:	781b      	ldrb	r3, [r3, #0]
 800d6f8:	4619      	mov	r1, r3
 800d6fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d6fe:	fbb3 f3f1 	udiv	r3, r3, r1
 800d702:	fbb2 f3f3 	udiv	r3, r2, r3
 800d706:	4618      	mov	r0, r3
 800d708:	f000 f967 	bl	800d9da <HAL_SYSTICK_Config>
 800d70c:	4603      	mov	r3, r0
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d001      	beq.n	800d716 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800d712:	2301      	movs	r3, #1
 800d714:	e00e      	b.n	800d734 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2b0f      	cmp	r3, #15
 800d71a:	d80a      	bhi.n	800d732 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800d71c:	2200      	movs	r2, #0
 800d71e:	6879      	ldr	r1, [r7, #4]
 800d720:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d724:	f000 f92f 	bl	800d986 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800d728:	4a06      	ldr	r2, [pc, #24]	@ (800d744 <HAL_InitTick+0x5c>)
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800d72e:	2300      	movs	r3, #0
 800d730:	e000      	b.n	800d734 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800d732:	2301      	movs	r3, #1
}
 800d734:	4618      	mov	r0, r3
 800d736:	3708      	adds	r7, #8
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}
 800d73c:	20000004 	.word	0x20000004
 800d740:	2000000c 	.word	0x2000000c
 800d744:	20000008 	.word	0x20000008

0800d748 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800d748:	b480      	push	{r7}
 800d74a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800d74c:	4b06      	ldr	r3, [pc, #24]	@ (800d768 <HAL_IncTick+0x20>)
 800d74e:	781b      	ldrb	r3, [r3, #0]
 800d750:	461a      	mov	r2, r3
 800d752:	4b06      	ldr	r3, [pc, #24]	@ (800d76c <HAL_IncTick+0x24>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	4413      	add	r3, r2
 800d758:	4a04      	ldr	r2, [pc, #16]	@ (800d76c <HAL_IncTick+0x24>)
 800d75a:	6013      	str	r3, [r2, #0]
}
 800d75c:	bf00      	nop
 800d75e:	46bd      	mov	sp, r7
 800d760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d764:	4770      	bx	lr
 800d766:	bf00      	nop
 800d768:	2000000c 	.word	0x2000000c
 800d76c:	2000040c 	.word	0x2000040c

0800d770 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800d770:	b480      	push	{r7}
 800d772:	af00      	add	r7, sp, #0
  return uwTick;
 800d774:	4b03      	ldr	r3, [pc, #12]	@ (800d784 <HAL_GetTick+0x14>)
 800d776:	681b      	ldr	r3, [r3, #0]
}
 800d778:	4618      	mov	r0, r3
 800d77a:	46bd      	mov	sp, r7
 800d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d780:	4770      	bx	lr
 800d782:	bf00      	nop
 800d784:	2000040c 	.word	0x2000040c

0800d788 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b084      	sub	sp, #16
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800d790:	f7ff ffee 	bl	800d770 <HAL_GetTick>
 800d794:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d7a0:	d005      	beq.n	800d7ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800d7a2:	4b0a      	ldr	r3, [pc, #40]	@ (800d7cc <HAL_Delay+0x44>)
 800d7a4:	781b      	ldrb	r3, [r3, #0]
 800d7a6:	461a      	mov	r2, r3
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	4413      	add	r3, r2
 800d7ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800d7ae:	bf00      	nop
 800d7b0:	f7ff ffde 	bl	800d770 <HAL_GetTick>
 800d7b4:	4602      	mov	r2, r0
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	1ad3      	subs	r3, r2, r3
 800d7ba:	68fa      	ldr	r2, [r7, #12]
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	d8f7      	bhi.n	800d7b0 <HAL_Delay+0x28>
  {
  }
}
 800d7c0:	bf00      	nop
 800d7c2:	bf00      	nop
 800d7c4:	3710      	adds	r7, #16
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}
 800d7ca:	bf00      	nop
 800d7cc:	2000000c 	.word	0x2000000c

0800d7d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	b085      	sub	sp, #20
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f003 0307 	and.w	r3, r3, #7
 800d7de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d7e0:	4b0c      	ldr	r3, [pc, #48]	@ (800d814 <__NVIC_SetPriorityGrouping+0x44>)
 800d7e2:	68db      	ldr	r3, [r3, #12]
 800d7e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d7e6:	68ba      	ldr	r2, [r7, #8]
 800d7e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800d7ec:	4013      	ands	r3, r2
 800d7ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800d7f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800d7fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800d802:	4a04      	ldr	r2, [pc, #16]	@ (800d814 <__NVIC_SetPriorityGrouping+0x44>)
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	60d3      	str	r3, [r2, #12]
}
 800d808:	bf00      	nop
 800d80a:	3714      	adds	r7, #20
 800d80c:	46bd      	mov	sp, r7
 800d80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d812:	4770      	bx	lr
 800d814:	e000ed00 	.word	0xe000ed00

0800d818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800d818:	b480      	push	{r7}
 800d81a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d81c:	4b04      	ldr	r3, [pc, #16]	@ (800d830 <__NVIC_GetPriorityGrouping+0x18>)
 800d81e:	68db      	ldr	r3, [r3, #12]
 800d820:	0a1b      	lsrs	r3, r3, #8
 800d822:	f003 0307 	and.w	r3, r3, #7
}
 800d826:	4618      	mov	r0, r3
 800d828:	46bd      	mov	sp, r7
 800d82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82e:	4770      	bx	lr
 800d830:	e000ed00 	.word	0xe000ed00

0800d834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d834:	b480      	push	{r7}
 800d836:	b083      	sub	sp, #12
 800d838:	af00      	add	r7, sp, #0
 800d83a:	4603      	mov	r3, r0
 800d83c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d83e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d842:	2b00      	cmp	r3, #0
 800d844:	db0b      	blt.n	800d85e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d846:	79fb      	ldrb	r3, [r7, #7]
 800d848:	f003 021f 	and.w	r2, r3, #31
 800d84c:	4907      	ldr	r1, [pc, #28]	@ (800d86c <__NVIC_EnableIRQ+0x38>)
 800d84e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d852:	095b      	lsrs	r3, r3, #5
 800d854:	2001      	movs	r0, #1
 800d856:	fa00 f202 	lsl.w	r2, r0, r2
 800d85a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800d85e:	bf00      	nop
 800d860:	370c      	adds	r7, #12
 800d862:	46bd      	mov	sp, r7
 800d864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d868:	4770      	bx	lr
 800d86a:	bf00      	nop
 800d86c:	e000e100 	.word	0xe000e100

0800d870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800d870:	b480      	push	{r7}
 800d872:	b083      	sub	sp, #12
 800d874:	af00      	add	r7, sp, #0
 800d876:	4603      	mov	r3, r0
 800d878:	6039      	str	r1, [r7, #0]
 800d87a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d87c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d880:	2b00      	cmp	r3, #0
 800d882:	db0a      	blt.n	800d89a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	b2da      	uxtb	r2, r3
 800d888:	490c      	ldr	r1, [pc, #48]	@ (800d8bc <__NVIC_SetPriority+0x4c>)
 800d88a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d88e:	0112      	lsls	r2, r2, #4
 800d890:	b2d2      	uxtb	r2, r2
 800d892:	440b      	add	r3, r1
 800d894:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800d898:	e00a      	b.n	800d8b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	b2da      	uxtb	r2, r3
 800d89e:	4908      	ldr	r1, [pc, #32]	@ (800d8c0 <__NVIC_SetPriority+0x50>)
 800d8a0:	79fb      	ldrb	r3, [r7, #7]
 800d8a2:	f003 030f 	and.w	r3, r3, #15
 800d8a6:	3b04      	subs	r3, #4
 800d8a8:	0112      	lsls	r2, r2, #4
 800d8aa:	b2d2      	uxtb	r2, r2
 800d8ac:	440b      	add	r3, r1
 800d8ae:	761a      	strb	r2, [r3, #24]
}
 800d8b0:	bf00      	nop
 800d8b2:	370c      	adds	r7, #12
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ba:	4770      	bx	lr
 800d8bc:	e000e100 	.word	0xe000e100
 800d8c0:	e000ed00 	.word	0xe000ed00

0800d8c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	b089      	sub	sp, #36	@ 0x24
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	60f8      	str	r0, [r7, #12]
 800d8cc:	60b9      	str	r1, [r7, #8]
 800d8ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	f003 0307 	and.w	r3, r3, #7
 800d8d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d8d8:	69fb      	ldr	r3, [r7, #28]
 800d8da:	f1c3 0307 	rsb	r3, r3, #7
 800d8de:	2b04      	cmp	r3, #4
 800d8e0:	bf28      	it	cs
 800d8e2:	2304      	movcs	r3, #4
 800d8e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d8e6:	69fb      	ldr	r3, [r7, #28]
 800d8e8:	3304      	adds	r3, #4
 800d8ea:	2b06      	cmp	r3, #6
 800d8ec:	d902      	bls.n	800d8f4 <NVIC_EncodePriority+0x30>
 800d8ee:	69fb      	ldr	r3, [r7, #28]
 800d8f0:	3b03      	subs	r3, #3
 800d8f2:	e000      	b.n	800d8f6 <NVIC_EncodePriority+0x32>
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d8f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d8fc:	69bb      	ldr	r3, [r7, #24]
 800d8fe:	fa02 f303 	lsl.w	r3, r2, r3
 800d902:	43da      	mvns	r2, r3
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	401a      	ands	r2, r3
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d90c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	fa01 f303 	lsl.w	r3, r1, r3
 800d916:	43d9      	mvns	r1, r3
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d91c:	4313      	orrs	r3, r2
         );
}
 800d91e:	4618      	mov	r0, r3
 800d920:	3724      	adds	r7, #36	@ 0x24
 800d922:	46bd      	mov	sp, r7
 800d924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d928:	4770      	bx	lr
	...

0800d92c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b082      	sub	sp, #8
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	3b01      	subs	r3, #1
 800d938:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d93c:	d301      	bcc.n	800d942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800d93e:	2301      	movs	r3, #1
 800d940:	e00f      	b.n	800d962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800d942:	4a0a      	ldr	r2, [pc, #40]	@ (800d96c <SysTick_Config+0x40>)
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	3b01      	subs	r3, #1
 800d948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800d94a:	210f      	movs	r1, #15
 800d94c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d950:	f7ff ff8e 	bl	800d870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800d954:	4b05      	ldr	r3, [pc, #20]	@ (800d96c <SysTick_Config+0x40>)
 800d956:	2200      	movs	r2, #0
 800d958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800d95a:	4b04      	ldr	r3, [pc, #16]	@ (800d96c <SysTick_Config+0x40>)
 800d95c:	2207      	movs	r2, #7
 800d95e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800d960:	2300      	movs	r3, #0
}
 800d962:	4618      	mov	r0, r3
 800d964:	3708      	adds	r7, #8
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}
 800d96a:	bf00      	nop
 800d96c:	e000e010 	.word	0xe000e010

0800d970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b082      	sub	sp, #8
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f7ff ff29 	bl	800d7d0 <__NVIC_SetPriorityGrouping>
}
 800d97e:	bf00      	nop
 800d980:	3708      	adds	r7, #8
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}

0800d986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800d986:	b580      	push	{r7, lr}
 800d988:	b086      	sub	sp, #24
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	4603      	mov	r3, r0
 800d98e:	60b9      	str	r1, [r7, #8]
 800d990:	607a      	str	r2, [r7, #4]
 800d992:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800d994:	2300      	movs	r3, #0
 800d996:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800d998:	f7ff ff3e 	bl	800d818 <__NVIC_GetPriorityGrouping>
 800d99c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800d99e:	687a      	ldr	r2, [r7, #4]
 800d9a0:	68b9      	ldr	r1, [r7, #8]
 800d9a2:	6978      	ldr	r0, [r7, #20]
 800d9a4:	f7ff ff8e 	bl	800d8c4 <NVIC_EncodePriority>
 800d9a8:	4602      	mov	r2, r0
 800d9aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9ae:	4611      	mov	r1, r2
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f7ff ff5d 	bl	800d870 <__NVIC_SetPriority>
}
 800d9b6:	bf00      	nop
 800d9b8:	3718      	adds	r7, #24
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}

0800d9be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d9be:	b580      	push	{r7, lr}
 800d9c0:	b082      	sub	sp, #8
 800d9c2:	af00      	add	r7, sp, #0
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800d9c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	f7ff ff31 	bl	800d834 <__NVIC_EnableIRQ>
}
 800d9d2:	bf00      	nop
 800d9d4:	3708      	adds	r7, #8
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}

0800d9da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800d9da:	b580      	push	{r7, lr}
 800d9dc:	b082      	sub	sp, #8
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800d9e2:	6878      	ldr	r0, [r7, #4]
 800d9e4:	f7ff ffa2 	bl	800d92c <SysTick_Config>
 800d9e8:	4603      	mov	r3, r0
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	3708      	adds	r7, #8
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}

0800d9f2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800d9f2:	b580      	push	{r7, lr}
 800d9f4:	b084      	sub	sp, #16
 800d9f6:	af00      	add	r7, sp, #0
 800d9f8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d9fe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800da00:	f7ff feb6 	bl	800d770 <HAL_GetTick>
 800da04:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800da0c:	b2db      	uxtb	r3, r3
 800da0e:	2b02      	cmp	r3, #2
 800da10:	d008      	beq.n	800da24 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2280      	movs	r2, #128	@ 0x80
 800da16:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2200      	movs	r2, #0
 800da1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800da20:	2301      	movs	r3, #1
 800da22:	e052      	b.n	800daca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	681a      	ldr	r2, [r3, #0]
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	f022 0216 	bic.w	r2, r2, #22
 800da32:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	695a      	ldr	r2, [r3, #20]
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800da42:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d103      	bne.n	800da54 <HAL_DMA_Abort+0x62>
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800da50:	2b00      	cmp	r3, #0
 800da52:	d007      	beq.n	800da64 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	681a      	ldr	r2, [r3, #0]
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	f022 0208 	bic.w	r2, r2, #8
 800da62:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	681a      	ldr	r2, [r3, #0]
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	f022 0201 	bic.w	r2, r2, #1
 800da72:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800da74:	e013      	b.n	800da9e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800da76:	f7ff fe7b 	bl	800d770 <HAL_GetTick>
 800da7a:	4602      	mov	r2, r0
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	1ad3      	subs	r3, r2, r3
 800da80:	2b05      	cmp	r3, #5
 800da82:	d90c      	bls.n	800da9e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2220      	movs	r2, #32
 800da88:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2203      	movs	r2, #3
 800da8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2200      	movs	r2, #0
 800da96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800da9a:	2303      	movs	r3, #3
 800da9c:	e015      	b.n	800daca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	f003 0301 	and.w	r3, r3, #1
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d1e4      	bne.n	800da76 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dab0:	223f      	movs	r2, #63	@ 0x3f
 800dab2:	409a      	lsls	r2, r3
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2201      	movs	r2, #1
 800dabc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2200      	movs	r2, #0
 800dac4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800dac8:	2300      	movs	r3, #0
}
 800daca:	4618      	mov	r0, r3
 800dacc:	3710      	adds	r7, #16
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}

0800dad2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800dad2:	b480      	push	{r7}
 800dad4:	b083      	sub	sp, #12
 800dad6:	af00      	add	r7, sp, #0
 800dad8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800dae0:	b2db      	uxtb	r3, r3
 800dae2:	2b02      	cmp	r3, #2
 800dae4:	d004      	beq.n	800daf0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2280      	movs	r2, #128	@ 0x80
 800daea:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800daec:	2301      	movs	r3, #1
 800daee:	e00c      	b.n	800db0a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2205      	movs	r2, #5
 800daf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	681a      	ldr	r2, [r3, #0]
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	f022 0201 	bic.w	r2, r2, #1
 800db06:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800db08:	2300      	movs	r3, #0
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	370c      	adds	r7, #12
 800db0e:	46bd      	mov	sp, r7
 800db10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db14:	4770      	bx	lr
	...

0800db18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800db18:	b480      	push	{r7}
 800db1a:	b089      	sub	sp, #36	@ 0x24
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
 800db20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800db22:	2300      	movs	r3, #0
 800db24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800db26:	2300      	movs	r3, #0
 800db28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800db2a:	2300      	movs	r3, #0
 800db2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800db2e:	2300      	movs	r3, #0
 800db30:	61fb      	str	r3, [r7, #28]
 800db32:	e165      	b.n	800de00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800db34:	2201      	movs	r2, #1
 800db36:	69fb      	ldr	r3, [r7, #28]
 800db38:	fa02 f303 	lsl.w	r3, r2, r3
 800db3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	697a      	ldr	r2, [r7, #20]
 800db44:	4013      	ands	r3, r2
 800db46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800db48:	693a      	ldr	r2, [r7, #16]
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	429a      	cmp	r2, r3
 800db4e:	f040 8154 	bne.w	800ddfa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	685b      	ldr	r3, [r3, #4]
 800db56:	f003 0303 	and.w	r3, r3, #3
 800db5a:	2b01      	cmp	r3, #1
 800db5c:	d005      	beq.n	800db6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	685b      	ldr	r3, [r3, #4]
 800db62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800db66:	2b02      	cmp	r3, #2
 800db68:	d130      	bne.n	800dbcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	689b      	ldr	r3, [r3, #8]
 800db6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800db70:	69fb      	ldr	r3, [r7, #28]
 800db72:	005b      	lsls	r3, r3, #1
 800db74:	2203      	movs	r2, #3
 800db76:	fa02 f303 	lsl.w	r3, r2, r3
 800db7a:	43db      	mvns	r3, r3
 800db7c:	69ba      	ldr	r2, [r7, #24]
 800db7e:	4013      	ands	r3, r2
 800db80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	68da      	ldr	r2, [r3, #12]
 800db86:	69fb      	ldr	r3, [r7, #28]
 800db88:	005b      	lsls	r3, r3, #1
 800db8a:	fa02 f303 	lsl.w	r3, r2, r3
 800db8e:	69ba      	ldr	r2, [r7, #24]
 800db90:	4313      	orrs	r3, r2
 800db92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	69ba      	ldr	r2, [r7, #24]
 800db98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	685b      	ldr	r3, [r3, #4]
 800db9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800dba0:	2201      	movs	r2, #1
 800dba2:	69fb      	ldr	r3, [r7, #28]
 800dba4:	fa02 f303 	lsl.w	r3, r2, r3
 800dba8:	43db      	mvns	r3, r3
 800dbaa:	69ba      	ldr	r2, [r7, #24]
 800dbac:	4013      	ands	r3, r2
 800dbae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	685b      	ldr	r3, [r3, #4]
 800dbb4:	091b      	lsrs	r3, r3, #4
 800dbb6:	f003 0201 	and.w	r2, r3, #1
 800dbba:	69fb      	ldr	r3, [r7, #28]
 800dbbc:	fa02 f303 	lsl.w	r3, r2, r3
 800dbc0:	69ba      	ldr	r2, [r7, #24]
 800dbc2:	4313      	orrs	r3, r2
 800dbc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	69ba      	ldr	r2, [r7, #24]
 800dbca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	685b      	ldr	r3, [r3, #4]
 800dbd0:	f003 0303 	and.w	r3, r3, #3
 800dbd4:	2b03      	cmp	r3, #3
 800dbd6:	d017      	beq.n	800dc08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	68db      	ldr	r3, [r3, #12]
 800dbdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800dbde:	69fb      	ldr	r3, [r7, #28]
 800dbe0:	005b      	lsls	r3, r3, #1
 800dbe2:	2203      	movs	r2, #3
 800dbe4:	fa02 f303 	lsl.w	r3, r2, r3
 800dbe8:	43db      	mvns	r3, r3
 800dbea:	69ba      	ldr	r2, [r7, #24]
 800dbec:	4013      	ands	r3, r2
 800dbee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	689a      	ldr	r2, [r3, #8]
 800dbf4:	69fb      	ldr	r3, [r7, #28]
 800dbf6:	005b      	lsls	r3, r3, #1
 800dbf8:	fa02 f303 	lsl.w	r3, r2, r3
 800dbfc:	69ba      	ldr	r2, [r7, #24]
 800dbfe:	4313      	orrs	r3, r2
 800dc00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	69ba      	ldr	r2, [r7, #24]
 800dc06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	685b      	ldr	r3, [r3, #4]
 800dc0c:	f003 0303 	and.w	r3, r3, #3
 800dc10:	2b02      	cmp	r3, #2
 800dc12:	d123      	bne.n	800dc5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800dc14:	69fb      	ldr	r3, [r7, #28]
 800dc16:	08da      	lsrs	r2, r3, #3
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	3208      	adds	r2, #8
 800dc1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800dc22:	69fb      	ldr	r3, [r7, #28]
 800dc24:	f003 0307 	and.w	r3, r3, #7
 800dc28:	009b      	lsls	r3, r3, #2
 800dc2a:	220f      	movs	r2, #15
 800dc2c:	fa02 f303 	lsl.w	r3, r2, r3
 800dc30:	43db      	mvns	r3, r3
 800dc32:	69ba      	ldr	r2, [r7, #24]
 800dc34:	4013      	ands	r3, r2
 800dc36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	691a      	ldr	r2, [r3, #16]
 800dc3c:	69fb      	ldr	r3, [r7, #28]
 800dc3e:	f003 0307 	and.w	r3, r3, #7
 800dc42:	009b      	lsls	r3, r3, #2
 800dc44:	fa02 f303 	lsl.w	r3, r2, r3
 800dc48:	69ba      	ldr	r2, [r7, #24]
 800dc4a:	4313      	orrs	r3, r2
 800dc4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800dc4e:	69fb      	ldr	r3, [r7, #28]
 800dc50:	08da      	lsrs	r2, r3, #3
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	3208      	adds	r2, #8
 800dc56:	69b9      	ldr	r1, [r7, #24]
 800dc58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800dc62:	69fb      	ldr	r3, [r7, #28]
 800dc64:	005b      	lsls	r3, r3, #1
 800dc66:	2203      	movs	r2, #3
 800dc68:	fa02 f303 	lsl.w	r3, r2, r3
 800dc6c:	43db      	mvns	r3, r3
 800dc6e:	69ba      	ldr	r2, [r7, #24]
 800dc70:	4013      	ands	r3, r2
 800dc72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	685b      	ldr	r3, [r3, #4]
 800dc78:	f003 0203 	and.w	r2, r3, #3
 800dc7c:	69fb      	ldr	r3, [r7, #28]
 800dc7e:	005b      	lsls	r3, r3, #1
 800dc80:	fa02 f303 	lsl.w	r3, r2, r3
 800dc84:	69ba      	ldr	r2, [r7, #24]
 800dc86:	4313      	orrs	r3, r2
 800dc88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	69ba      	ldr	r2, [r7, #24]
 800dc8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	685b      	ldr	r3, [r3, #4]
 800dc94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	f000 80ae 	beq.w	800ddfa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dc9e:	2300      	movs	r3, #0
 800dca0:	60fb      	str	r3, [r7, #12]
 800dca2:	4b5d      	ldr	r3, [pc, #372]	@ (800de18 <HAL_GPIO_Init+0x300>)
 800dca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dca6:	4a5c      	ldr	r2, [pc, #368]	@ (800de18 <HAL_GPIO_Init+0x300>)
 800dca8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800dcac:	6453      	str	r3, [r2, #68]	@ 0x44
 800dcae:	4b5a      	ldr	r3, [pc, #360]	@ (800de18 <HAL_GPIO_Init+0x300>)
 800dcb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dcb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dcb6:	60fb      	str	r3, [r7, #12]
 800dcb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800dcba:	4a58      	ldr	r2, [pc, #352]	@ (800de1c <HAL_GPIO_Init+0x304>)
 800dcbc:	69fb      	ldr	r3, [r7, #28]
 800dcbe:	089b      	lsrs	r3, r3, #2
 800dcc0:	3302      	adds	r3, #2
 800dcc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dcc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800dcc8:	69fb      	ldr	r3, [r7, #28]
 800dcca:	f003 0303 	and.w	r3, r3, #3
 800dcce:	009b      	lsls	r3, r3, #2
 800dcd0:	220f      	movs	r2, #15
 800dcd2:	fa02 f303 	lsl.w	r3, r2, r3
 800dcd6:	43db      	mvns	r3, r3
 800dcd8:	69ba      	ldr	r2, [r7, #24]
 800dcda:	4013      	ands	r3, r2
 800dcdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	4a4f      	ldr	r2, [pc, #316]	@ (800de20 <HAL_GPIO_Init+0x308>)
 800dce2:	4293      	cmp	r3, r2
 800dce4:	d025      	beq.n	800dd32 <HAL_GPIO_Init+0x21a>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	4a4e      	ldr	r2, [pc, #312]	@ (800de24 <HAL_GPIO_Init+0x30c>)
 800dcea:	4293      	cmp	r3, r2
 800dcec:	d01f      	beq.n	800dd2e <HAL_GPIO_Init+0x216>
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	4a4d      	ldr	r2, [pc, #308]	@ (800de28 <HAL_GPIO_Init+0x310>)
 800dcf2:	4293      	cmp	r3, r2
 800dcf4:	d019      	beq.n	800dd2a <HAL_GPIO_Init+0x212>
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	4a4c      	ldr	r2, [pc, #304]	@ (800de2c <HAL_GPIO_Init+0x314>)
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	d013      	beq.n	800dd26 <HAL_GPIO_Init+0x20e>
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	4a4b      	ldr	r2, [pc, #300]	@ (800de30 <HAL_GPIO_Init+0x318>)
 800dd02:	4293      	cmp	r3, r2
 800dd04:	d00d      	beq.n	800dd22 <HAL_GPIO_Init+0x20a>
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	4a4a      	ldr	r2, [pc, #296]	@ (800de34 <HAL_GPIO_Init+0x31c>)
 800dd0a:	4293      	cmp	r3, r2
 800dd0c:	d007      	beq.n	800dd1e <HAL_GPIO_Init+0x206>
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	4a49      	ldr	r2, [pc, #292]	@ (800de38 <HAL_GPIO_Init+0x320>)
 800dd12:	4293      	cmp	r3, r2
 800dd14:	d101      	bne.n	800dd1a <HAL_GPIO_Init+0x202>
 800dd16:	2306      	movs	r3, #6
 800dd18:	e00c      	b.n	800dd34 <HAL_GPIO_Init+0x21c>
 800dd1a:	2307      	movs	r3, #7
 800dd1c:	e00a      	b.n	800dd34 <HAL_GPIO_Init+0x21c>
 800dd1e:	2305      	movs	r3, #5
 800dd20:	e008      	b.n	800dd34 <HAL_GPIO_Init+0x21c>
 800dd22:	2304      	movs	r3, #4
 800dd24:	e006      	b.n	800dd34 <HAL_GPIO_Init+0x21c>
 800dd26:	2303      	movs	r3, #3
 800dd28:	e004      	b.n	800dd34 <HAL_GPIO_Init+0x21c>
 800dd2a:	2302      	movs	r3, #2
 800dd2c:	e002      	b.n	800dd34 <HAL_GPIO_Init+0x21c>
 800dd2e:	2301      	movs	r3, #1
 800dd30:	e000      	b.n	800dd34 <HAL_GPIO_Init+0x21c>
 800dd32:	2300      	movs	r3, #0
 800dd34:	69fa      	ldr	r2, [r7, #28]
 800dd36:	f002 0203 	and.w	r2, r2, #3
 800dd3a:	0092      	lsls	r2, r2, #2
 800dd3c:	4093      	lsls	r3, r2
 800dd3e:	69ba      	ldr	r2, [r7, #24]
 800dd40:	4313      	orrs	r3, r2
 800dd42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800dd44:	4935      	ldr	r1, [pc, #212]	@ (800de1c <HAL_GPIO_Init+0x304>)
 800dd46:	69fb      	ldr	r3, [r7, #28]
 800dd48:	089b      	lsrs	r3, r3, #2
 800dd4a:	3302      	adds	r3, #2
 800dd4c:	69ba      	ldr	r2, [r7, #24]
 800dd4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800dd52:	4b3a      	ldr	r3, [pc, #232]	@ (800de3c <HAL_GPIO_Init+0x324>)
 800dd54:	689b      	ldr	r3, [r3, #8]
 800dd56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	43db      	mvns	r3, r3
 800dd5c:	69ba      	ldr	r2, [r7, #24]
 800dd5e:	4013      	ands	r3, r2
 800dd60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	685b      	ldr	r3, [r3, #4]
 800dd66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d003      	beq.n	800dd76 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800dd6e:	69ba      	ldr	r2, [r7, #24]
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	4313      	orrs	r3, r2
 800dd74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800dd76:	4a31      	ldr	r2, [pc, #196]	@ (800de3c <HAL_GPIO_Init+0x324>)
 800dd78:	69bb      	ldr	r3, [r7, #24]
 800dd7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800dd7c:	4b2f      	ldr	r3, [pc, #188]	@ (800de3c <HAL_GPIO_Init+0x324>)
 800dd7e:	68db      	ldr	r3, [r3, #12]
 800dd80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800dd82:	693b      	ldr	r3, [r7, #16]
 800dd84:	43db      	mvns	r3, r3
 800dd86:	69ba      	ldr	r2, [r7, #24]
 800dd88:	4013      	ands	r3, r2
 800dd8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	685b      	ldr	r3, [r3, #4]
 800dd90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d003      	beq.n	800dda0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800dd98:	69ba      	ldr	r2, [r7, #24]
 800dd9a:	693b      	ldr	r3, [r7, #16]
 800dd9c:	4313      	orrs	r3, r2
 800dd9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800dda0:	4a26      	ldr	r2, [pc, #152]	@ (800de3c <HAL_GPIO_Init+0x324>)
 800dda2:	69bb      	ldr	r3, [r7, #24]
 800dda4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800dda6:	4b25      	ldr	r3, [pc, #148]	@ (800de3c <HAL_GPIO_Init+0x324>)
 800dda8:	685b      	ldr	r3, [r3, #4]
 800ddaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	43db      	mvns	r3, r3
 800ddb0:	69ba      	ldr	r2, [r7, #24]
 800ddb2:	4013      	ands	r3, r2
 800ddb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	685b      	ldr	r3, [r3, #4]
 800ddba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d003      	beq.n	800ddca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800ddc2:	69ba      	ldr	r2, [r7, #24]
 800ddc4:	693b      	ldr	r3, [r7, #16]
 800ddc6:	4313      	orrs	r3, r2
 800ddc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ddca:	4a1c      	ldr	r2, [pc, #112]	@ (800de3c <HAL_GPIO_Init+0x324>)
 800ddcc:	69bb      	ldr	r3, [r7, #24]
 800ddce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ddd0:	4b1a      	ldr	r3, [pc, #104]	@ (800de3c <HAL_GPIO_Init+0x324>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ddd6:	693b      	ldr	r3, [r7, #16]
 800ddd8:	43db      	mvns	r3, r3
 800ddda:	69ba      	ldr	r2, [r7, #24]
 800dddc:	4013      	ands	r3, r2
 800ddde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	685b      	ldr	r3, [r3, #4]
 800dde4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d003      	beq.n	800ddf4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800ddec:	69ba      	ldr	r2, [r7, #24]
 800ddee:	693b      	ldr	r3, [r7, #16]
 800ddf0:	4313      	orrs	r3, r2
 800ddf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ddf4:	4a11      	ldr	r2, [pc, #68]	@ (800de3c <HAL_GPIO_Init+0x324>)
 800ddf6:	69bb      	ldr	r3, [r7, #24]
 800ddf8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ddfa:	69fb      	ldr	r3, [r7, #28]
 800ddfc:	3301      	adds	r3, #1
 800ddfe:	61fb      	str	r3, [r7, #28]
 800de00:	69fb      	ldr	r3, [r7, #28]
 800de02:	2b0f      	cmp	r3, #15
 800de04:	f67f ae96 	bls.w	800db34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800de08:	bf00      	nop
 800de0a:	bf00      	nop
 800de0c:	3724      	adds	r7, #36	@ 0x24
 800de0e:	46bd      	mov	sp, r7
 800de10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de14:	4770      	bx	lr
 800de16:	bf00      	nop
 800de18:	40023800 	.word	0x40023800
 800de1c:	40013800 	.word	0x40013800
 800de20:	40020000 	.word	0x40020000
 800de24:	40020400 	.word	0x40020400
 800de28:	40020800 	.word	0x40020800
 800de2c:	40020c00 	.word	0x40020c00
 800de30:	40021000 	.word	0x40021000
 800de34:	40021400 	.word	0x40021400
 800de38:	40021800 	.word	0x40021800
 800de3c:	40013c00 	.word	0x40013c00

0800de40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800de40:	b480      	push	{r7}
 800de42:	b083      	sub	sp, #12
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
 800de48:	460b      	mov	r3, r1
 800de4a:	807b      	strh	r3, [r7, #2]
 800de4c:	4613      	mov	r3, r2
 800de4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800de50:	787b      	ldrb	r3, [r7, #1]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d003      	beq.n	800de5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800de56:	887a      	ldrh	r2, [r7, #2]
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800de5c:	e003      	b.n	800de66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800de5e:	887b      	ldrh	r3, [r7, #2]
 800de60:	041a      	lsls	r2, r3, #16
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	619a      	str	r2, [r3, #24]
}
 800de66:	bf00      	nop
 800de68:	370c      	adds	r7, #12
 800de6a:	46bd      	mov	sp, r7
 800de6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de70:	4770      	bx	lr
	...

0800de74 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b082      	sub	sp, #8
 800de78:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800de7a:	2300      	movs	r3, #0
 800de7c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800de7e:	2300      	movs	r3, #0
 800de80:	603b      	str	r3, [r7, #0]
 800de82:	4b20      	ldr	r3, [pc, #128]	@ (800df04 <HAL_PWREx_EnableOverDrive+0x90>)
 800de84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de86:	4a1f      	ldr	r2, [pc, #124]	@ (800df04 <HAL_PWREx_EnableOverDrive+0x90>)
 800de88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800de8c:	6413      	str	r3, [r2, #64]	@ 0x40
 800de8e:	4b1d      	ldr	r3, [pc, #116]	@ (800df04 <HAL_PWREx_EnableOverDrive+0x90>)
 800de90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800de96:	603b      	str	r3, [r7, #0]
 800de98:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800de9a:	4b1b      	ldr	r3, [pc, #108]	@ (800df08 <HAL_PWREx_EnableOverDrive+0x94>)
 800de9c:	2201      	movs	r2, #1
 800de9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800dea0:	f7ff fc66 	bl	800d770 <HAL_GetTick>
 800dea4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800dea6:	e009      	b.n	800debc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800dea8:	f7ff fc62 	bl	800d770 <HAL_GetTick>
 800deac:	4602      	mov	r2, r0
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	1ad3      	subs	r3, r2, r3
 800deb2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800deb6:	d901      	bls.n	800debc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800deb8:	2303      	movs	r3, #3
 800deba:	e01f      	b.n	800defc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800debc:	4b13      	ldr	r3, [pc, #76]	@ (800df0c <HAL_PWREx_EnableOverDrive+0x98>)
 800debe:	685b      	ldr	r3, [r3, #4]
 800dec0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dec8:	d1ee      	bne.n	800dea8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800deca:	4b11      	ldr	r3, [pc, #68]	@ (800df10 <HAL_PWREx_EnableOverDrive+0x9c>)
 800decc:	2201      	movs	r2, #1
 800dece:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ded0:	f7ff fc4e 	bl	800d770 <HAL_GetTick>
 800ded4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ded6:	e009      	b.n	800deec <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ded8:	f7ff fc4a 	bl	800d770 <HAL_GetTick>
 800dedc:	4602      	mov	r2, r0
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	1ad3      	subs	r3, r2, r3
 800dee2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dee6:	d901      	bls.n	800deec <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800dee8:	2303      	movs	r3, #3
 800deea:	e007      	b.n	800defc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800deec:	4b07      	ldr	r3, [pc, #28]	@ (800df0c <HAL_PWREx_EnableOverDrive+0x98>)
 800deee:	685b      	ldr	r3, [r3, #4]
 800def0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800def4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800def8:	d1ee      	bne.n	800ded8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800defa:	2300      	movs	r3, #0
}
 800defc:	4618      	mov	r0, r3
 800defe:	3708      	adds	r7, #8
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}
 800df04:	40023800 	.word	0x40023800
 800df08:	420e0040 	.word	0x420e0040
 800df0c:	40007000 	.word	0x40007000
 800df10:	420e0044 	.word	0x420e0044

0800df14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b084      	sub	sp, #16
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
 800df1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d101      	bne.n	800df28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800df24:	2301      	movs	r3, #1
 800df26:	e0cc      	b.n	800e0c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800df28:	4b68      	ldr	r3, [pc, #416]	@ (800e0cc <HAL_RCC_ClockConfig+0x1b8>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	f003 030f 	and.w	r3, r3, #15
 800df30:	683a      	ldr	r2, [r7, #0]
 800df32:	429a      	cmp	r2, r3
 800df34:	d90c      	bls.n	800df50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800df36:	4b65      	ldr	r3, [pc, #404]	@ (800e0cc <HAL_RCC_ClockConfig+0x1b8>)
 800df38:	683a      	ldr	r2, [r7, #0]
 800df3a:	b2d2      	uxtb	r2, r2
 800df3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800df3e:	4b63      	ldr	r3, [pc, #396]	@ (800e0cc <HAL_RCC_ClockConfig+0x1b8>)
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	f003 030f 	and.w	r3, r3, #15
 800df46:	683a      	ldr	r2, [r7, #0]
 800df48:	429a      	cmp	r2, r3
 800df4a:	d001      	beq.n	800df50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800df4c:	2301      	movs	r3, #1
 800df4e:	e0b8      	b.n	800e0c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	f003 0302 	and.w	r3, r3, #2
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d020      	beq.n	800df9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	f003 0304 	and.w	r3, r3, #4
 800df64:	2b00      	cmp	r3, #0
 800df66:	d005      	beq.n	800df74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800df68:	4b59      	ldr	r3, [pc, #356]	@ (800e0d0 <HAL_RCC_ClockConfig+0x1bc>)
 800df6a:	689b      	ldr	r3, [r3, #8]
 800df6c:	4a58      	ldr	r2, [pc, #352]	@ (800e0d0 <HAL_RCC_ClockConfig+0x1bc>)
 800df6e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800df72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	f003 0308 	and.w	r3, r3, #8
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d005      	beq.n	800df8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800df80:	4b53      	ldr	r3, [pc, #332]	@ (800e0d0 <HAL_RCC_ClockConfig+0x1bc>)
 800df82:	689b      	ldr	r3, [r3, #8]
 800df84:	4a52      	ldr	r2, [pc, #328]	@ (800e0d0 <HAL_RCC_ClockConfig+0x1bc>)
 800df86:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800df8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800df8c:	4b50      	ldr	r3, [pc, #320]	@ (800e0d0 <HAL_RCC_ClockConfig+0x1bc>)
 800df8e:	689b      	ldr	r3, [r3, #8]
 800df90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	689b      	ldr	r3, [r3, #8]
 800df98:	494d      	ldr	r1, [pc, #308]	@ (800e0d0 <HAL_RCC_ClockConfig+0x1bc>)
 800df9a:	4313      	orrs	r3, r2
 800df9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	f003 0301 	and.w	r3, r3, #1
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d044      	beq.n	800e034 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	685b      	ldr	r3, [r3, #4]
 800dfae:	2b01      	cmp	r3, #1
 800dfb0:	d107      	bne.n	800dfc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dfb2:	4b47      	ldr	r3, [pc, #284]	@ (800e0d0 <HAL_RCC_ClockConfig+0x1bc>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d119      	bne.n	800dff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	e07f      	b.n	800e0c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	685b      	ldr	r3, [r3, #4]
 800dfc6:	2b02      	cmp	r3, #2
 800dfc8:	d003      	beq.n	800dfd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dfce:	2b03      	cmp	r3, #3
 800dfd0:	d107      	bne.n	800dfe2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dfd2:	4b3f      	ldr	r3, [pc, #252]	@ (800e0d0 <HAL_RCC_ClockConfig+0x1bc>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d109      	bne.n	800dff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dfde:	2301      	movs	r3, #1
 800dfe0:	e06f      	b.n	800e0c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dfe2:	4b3b      	ldr	r3, [pc, #236]	@ (800e0d0 <HAL_RCC_ClockConfig+0x1bc>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	f003 0302 	and.w	r3, r3, #2
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d101      	bne.n	800dff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dfee:	2301      	movs	r3, #1
 800dff0:	e067      	b.n	800e0c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800dff2:	4b37      	ldr	r3, [pc, #220]	@ (800e0d0 <HAL_RCC_ClockConfig+0x1bc>)
 800dff4:	689b      	ldr	r3, [r3, #8]
 800dff6:	f023 0203 	bic.w	r2, r3, #3
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	685b      	ldr	r3, [r3, #4]
 800dffe:	4934      	ldr	r1, [pc, #208]	@ (800e0d0 <HAL_RCC_ClockConfig+0x1bc>)
 800e000:	4313      	orrs	r3, r2
 800e002:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e004:	f7ff fbb4 	bl	800d770 <HAL_GetTick>
 800e008:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e00a:	e00a      	b.n	800e022 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e00c:	f7ff fbb0 	bl	800d770 <HAL_GetTick>
 800e010:	4602      	mov	r2, r0
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	1ad3      	subs	r3, r2, r3
 800e016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e01a:	4293      	cmp	r3, r2
 800e01c:	d901      	bls.n	800e022 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e01e:	2303      	movs	r3, #3
 800e020:	e04f      	b.n	800e0c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e022:	4b2b      	ldr	r3, [pc, #172]	@ (800e0d0 <HAL_RCC_ClockConfig+0x1bc>)
 800e024:	689b      	ldr	r3, [r3, #8]
 800e026:	f003 020c 	and.w	r2, r3, #12
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	685b      	ldr	r3, [r3, #4]
 800e02e:	009b      	lsls	r3, r3, #2
 800e030:	429a      	cmp	r2, r3
 800e032:	d1eb      	bne.n	800e00c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e034:	4b25      	ldr	r3, [pc, #148]	@ (800e0cc <HAL_RCC_ClockConfig+0x1b8>)
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	f003 030f 	and.w	r3, r3, #15
 800e03c:	683a      	ldr	r2, [r7, #0]
 800e03e:	429a      	cmp	r2, r3
 800e040:	d20c      	bcs.n	800e05c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e042:	4b22      	ldr	r3, [pc, #136]	@ (800e0cc <HAL_RCC_ClockConfig+0x1b8>)
 800e044:	683a      	ldr	r2, [r7, #0]
 800e046:	b2d2      	uxtb	r2, r2
 800e048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e04a:	4b20      	ldr	r3, [pc, #128]	@ (800e0cc <HAL_RCC_ClockConfig+0x1b8>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	f003 030f 	and.w	r3, r3, #15
 800e052:	683a      	ldr	r2, [r7, #0]
 800e054:	429a      	cmp	r2, r3
 800e056:	d001      	beq.n	800e05c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800e058:	2301      	movs	r3, #1
 800e05a:	e032      	b.n	800e0c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	f003 0304 	and.w	r3, r3, #4
 800e064:	2b00      	cmp	r3, #0
 800e066:	d008      	beq.n	800e07a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e068:	4b19      	ldr	r3, [pc, #100]	@ (800e0d0 <HAL_RCC_ClockConfig+0x1bc>)
 800e06a:	689b      	ldr	r3, [r3, #8]
 800e06c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	68db      	ldr	r3, [r3, #12]
 800e074:	4916      	ldr	r1, [pc, #88]	@ (800e0d0 <HAL_RCC_ClockConfig+0x1bc>)
 800e076:	4313      	orrs	r3, r2
 800e078:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	f003 0308 	and.w	r3, r3, #8
 800e082:	2b00      	cmp	r3, #0
 800e084:	d009      	beq.n	800e09a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e086:	4b12      	ldr	r3, [pc, #72]	@ (800e0d0 <HAL_RCC_ClockConfig+0x1bc>)
 800e088:	689b      	ldr	r3, [r3, #8]
 800e08a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	691b      	ldr	r3, [r3, #16]
 800e092:	00db      	lsls	r3, r3, #3
 800e094:	490e      	ldr	r1, [pc, #56]	@ (800e0d0 <HAL_RCC_ClockConfig+0x1bc>)
 800e096:	4313      	orrs	r3, r2
 800e098:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800e09a:	f000 f855 	bl	800e148 <HAL_RCC_GetSysClockFreq>
 800e09e:	4602      	mov	r2, r0
 800e0a0:	4b0b      	ldr	r3, [pc, #44]	@ (800e0d0 <HAL_RCC_ClockConfig+0x1bc>)
 800e0a2:	689b      	ldr	r3, [r3, #8]
 800e0a4:	091b      	lsrs	r3, r3, #4
 800e0a6:	f003 030f 	and.w	r3, r3, #15
 800e0aa:	490a      	ldr	r1, [pc, #40]	@ (800e0d4 <HAL_RCC_ClockConfig+0x1c0>)
 800e0ac:	5ccb      	ldrb	r3, [r1, r3]
 800e0ae:	fa22 f303 	lsr.w	r3, r2, r3
 800e0b2:	4a09      	ldr	r2, [pc, #36]	@ (800e0d8 <HAL_RCC_ClockConfig+0x1c4>)
 800e0b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800e0b6:	4b09      	ldr	r3, [pc, #36]	@ (800e0dc <HAL_RCC_ClockConfig+0x1c8>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f7ff fb14 	bl	800d6e8 <HAL_InitTick>

  return HAL_OK;
 800e0c0:	2300      	movs	r3, #0
}
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	3710      	adds	r7, #16
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd80      	pop	{r7, pc}
 800e0ca:	bf00      	nop
 800e0cc:	40023c00 	.word	0x40023c00
 800e0d0:	40023800 	.word	0x40023800
 800e0d4:	0801669c 	.word	0x0801669c
 800e0d8:	20000004 	.word	0x20000004
 800e0dc:	20000008 	.word	0x20000008

0800e0e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e0e0:	b480      	push	{r7}
 800e0e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e0e4:	4b03      	ldr	r3, [pc, #12]	@ (800e0f4 <HAL_RCC_GetHCLKFreq+0x14>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
}
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f0:	4770      	bx	lr
 800e0f2:	bf00      	nop
 800e0f4:	20000004 	.word	0x20000004

0800e0f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e0fc:	f7ff fff0 	bl	800e0e0 <HAL_RCC_GetHCLKFreq>
 800e100:	4602      	mov	r2, r0
 800e102:	4b05      	ldr	r3, [pc, #20]	@ (800e118 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e104:	689b      	ldr	r3, [r3, #8]
 800e106:	0a9b      	lsrs	r3, r3, #10
 800e108:	f003 0307 	and.w	r3, r3, #7
 800e10c:	4903      	ldr	r1, [pc, #12]	@ (800e11c <HAL_RCC_GetPCLK1Freq+0x24>)
 800e10e:	5ccb      	ldrb	r3, [r1, r3]
 800e110:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e114:	4618      	mov	r0, r3
 800e116:	bd80      	pop	{r7, pc}
 800e118:	40023800 	.word	0x40023800
 800e11c:	080166ac 	.word	0x080166ac

0800e120 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e124:	f7ff ffdc 	bl	800e0e0 <HAL_RCC_GetHCLKFreq>
 800e128:	4602      	mov	r2, r0
 800e12a:	4b05      	ldr	r3, [pc, #20]	@ (800e140 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e12c:	689b      	ldr	r3, [r3, #8]
 800e12e:	0b5b      	lsrs	r3, r3, #13
 800e130:	f003 0307 	and.w	r3, r3, #7
 800e134:	4903      	ldr	r1, [pc, #12]	@ (800e144 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e136:	5ccb      	ldrb	r3, [r1, r3]
 800e138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e13c:	4618      	mov	r0, r3
 800e13e:	bd80      	pop	{r7, pc}
 800e140:	40023800 	.word	0x40023800
 800e144:	080166ac 	.word	0x080166ac

0800e148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e14c:	b0ae      	sub	sp, #184	@ 0xb8
 800e14e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800e150:	2300      	movs	r3, #0
 800e152:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800e156:	2300      	movs	r3, #0
 800e158:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800e15c:	2300      	movs	r3, #0
 800e15e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800e162:	2300      	movs	r3, #0
 800e164:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800e168:	2300      	movs	r3, #0
 800e16a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e16e:	4bcb      	ldr	r3, [pc, #812]	@ (800e49c <HAL_RCC_GetSysClockFreq+0x354>)
 800e170:	689b      	ldr	r3, [r3, #8]
 800e172:	f003 030c 	and.w	r3, r3, #12
 800e176:	2b0c      	cmp	r3, #12
 800e178:	f200 8206 	bhi.w	800e588 <HAL_RCC_GetSysClockFreq+0x440>
 800e17c:	a201      	add	r2, pc, #4	@ (adr r2, 800e184 <HAL_RCC_GetSysClockFreq+0x3c>)
 800e17e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e182:	bf00      	nop
 800e184:	0800e1b9 	.word	0x0800e1b9
 800e188:	0800e589 	.word	0x0800e589
 800e18c:	0800e589 	.word	0x0800e589
 800e190:	0800e589 	.word	0x0800e589
 800e194:	0800e1c1 	.word	0x0800e1c1
 800e198:	0800e589 	.word	0x0800e589
 800e19c:	0800e589 	.word	0x0800e589
 800e1a0:	0800e589 	.word	0x0800e589
 800e1a4:	0800e1c9 	.word	0x0800e1c9
 800e1a8:	0800e589 	.word	0x0800e589
 800e1ac:	0800e589 	.word	0x0800e589
 800e1b0:	0800e589 	.word	0x0800e589
 800e1b4:	0800e3b9 	.word	0x0800e3b9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e1b8:	4bb9      	ldr	r3, [pc, #740]	@ (800e4a0 <HAL_RCC_GetSysClockFreq+0x358>)
 800e1ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800e1be:	e1e7      	b.n	800e590 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e1c0:	4bb8      	ldr	r3, [pc, #736]	@ (800e4a4 <HAL_RCC_GetSysClockFreq+0x35c>)
 800e1c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800e1c6:	e1e3      	b.n	800e590 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e1c8:	4bb4      	ldr	r3, [pc, #720]	@ (800e49c <HAL_RCC_GetSysClockFreq+0x354>)
 800e1ca:	685b      	ldr	r3, [r3, #4]
 800e1cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e1d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e1d4:	4bb1      	ldr	r3, [pc, #708]	@ (800e49c <HAL_RCC_GetSysClockFreq+0x354>)
 800e1d6:	685b      	ldr	r3, [r3, #4]
 800e1d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d071      	beq.n	800e2c4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e1e0:	4bae      	ldr	r3, [pc, #696]	@ (800e49c <HAL_RCC_GetSysClockFreq+0x354>)
 800e1e2:	685b      	ldr	r3, [r3, #4]
 800e1e4:	099b      	lsrs	r3, r3, #6
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e1ec:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800e1f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e1f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e202:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800e206:	4622      	mov	r2, r4
 800e208:	462b      	mov	r3, r5
 800e20a:	f04f 0000 	mov.w	r0, #0
 800e20e:	f04f 0100 	mov.w	r1, #0
 800e212:	0159      	lsls	r1, r3, #5
 800e214:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e218:	0150      	lsls	r0, r2, #5
 800e21a:	4602      	mov	r2, r0
 800e21c:	460b      	mov	r3, r1
 800e21e:	4621      	mov	r1, r4
 800e220:	1a51      	subs	r1, r2, r1
 800e222:	6439      	str	r1, [r7, #64]	@ 0x40
 800e224:	4629      	mov	r1, r5
 800e226:	eb63 0301 	sbc.w	r3, r3, r1
 800e22a:	647b      	str	r3, [r7, #68]	@ 0x44
 800e22c:	f04f 0200 	mov.w	r2, #0
 800e230:	f04f 0300 	mov.w	r3, #0
 800e234:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800e238:	4649      	mov	r1, r9
 800e23a:	018b      	lsls	r3, r1, #6
 800e23c:	4641      	mov	r1, r8
 800e23e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e242:	4641      	mov	r1, r8
 800e244:	018a      	lsls	r2, r1, #6
 800e246:	4641      	mov	r1, r8
 800e248:	1a51      	subs	r1, r2, r1
 800e24a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800e24c:	4649      	mov	r1, r9
 800e24e:	eb63 0301 	sbc.w	r3, r3, r1
 800e252:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e254:	f04f 0200 	mov.w	r2, #0
 800e258:	f04f 0300 	mov.w	r3, #0
 800e25c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800e260:	4649      	mov	r1, r9
 800e262:	00cb      	lsls	r3, r1, #3
 800e264:	4641      	mov	r1, r8
 800e266:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e26a:	4641      	mov	r1, r8
 800e26c:	00ca      	lsls	r2, r1, #3
 800e26e:	4610      	mov	r0, r2
 800e270:	4619      	mov	r1, r3
 800e272:	4603      	mov	r3, r0
 800e274:	4622      	mov	r2, r4
 800e276:	189b      	adds	r3, r3, r2
 800e278:	633b      	str	r3, [r7, #48]	@ 0x30
 800e27a:	462b      	mov	r3, r5
 800e27c:	460a      	mov	r2, r1
 800e27e:	eb42 0303 	adc.w	r3, r2, r3
 800e282:	637b      	str	r3, [r7, #52]	@ 0x34
 800e284:	f04f 0200 	mov.w	r2, #0
 800e288:	f04f 0300 	mov.w	r3, #0
 800e28c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800e290:	4629      	mov	r1, r5
 800e292:	024b      	lsls	r3, r1, #9
 800e294:	4621      	mov	r1, r4
 800e296:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800e29a:	4621      	mov	r1, r4
 800e29c:	024a      	lsls	r2, r1, #9
 800e29e:	4610      	mov	r0, r2
 800e2a0:	4619      	mov	r1, r3
 800e2a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e2ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800e2b0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800e2b4:	f7f2 fcf8 	bl	8000ca8 <__aeabi_uldivmod>
 800e2b8:	4602      	mov	r2, r0
 800e2ba:	460b      	mov	r3, r1
 800e2bc:	4613      	mov	r3, r2
 800e2be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e2c2:	e067      	b.n	800e394 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e2c4:	4b75      	ldr	r3, [pc, #468]	@ (800e49c <HAL_RCC_GetSysClockFreq+0x354>)
 800e2c6:	685b      	ldr	r3, [r3, #4]
 800e2c8:	099b      	lsrs	r3, r3, #6
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e2d0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800e2d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e2d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e2de:	2300      	movs	r3, #0
 800e2e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e2e2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800e2e6:	4622      	mov	r2, r4
 800e2e8:	462b      	mov	r3, r5
 800e2ea:	f04f 0000 	mov.w	r0, #0
 800e2ee:	f04f 0100 	mov.w	r1, #0
 800e2f2:	0159      	lsls	r1, r3, #5
 800e2f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e2f8:	0150      	lsls	r0, r2, #5
 800e2fa:	4602      	mov	r2, r0
 800e2fc:	460b      	mov	r3, r1
 800e2fe:	4621      	mov	r1, r4
 800e300:	1a51      	subs	r1, r2, r1
 800e302:	62b9      	str	r1, [r7, #40]	@ 0x28
 800e304:	4629      	mov	r1, r5
 800e306:	eb63 0301 	sbc.w	r3, r3, r1
 800e30a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e30c:	f04f 0200 	mov.w	r2, #0
 800e310:	f04f 0300 	mov.w	r3, #0
 800e314:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800e318:	4649      	mov	r1, r9
 800e31a:	018b      	lsls	r3, r1, #6
 800e31c:	4641      	mov	r1, r8
 800e31e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e322:	4641      	mov	r1, r8
 800e324:	018a      	lsls	r2, r1, #6
 800e326:	4641      	mov	r1, r8
 800e328:	ebb2 0a01 	subs.w	sl, r2, r1
 800e32c:	4649      	mov	r1, r9
 800e32e:	eb63 0b01 	sbc.w	fp, r3, r1
 800e332:	f04f 0200 	mov.w	r2, #0
 800e336:	f04f 0300 	mov.w	r3, #0
 800e33a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e33e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e342:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e346:	4692      	mov	sl, r2
 800e348:	469b      	mov	fp, r3
 800e34a:	4623      	mov	r3, r4
 800e34c:	eb1a 0303 	adds.w	r3, sl, r3
 800e350:	623b      	str	r3, [r7, #32]
 800e352:	462b      	mov	r3, r5
 800e354:	eb4b 0303 	adc.w	r3, fp, r3
 800e358:	627b      	str	r3, [r7, #36]	@ 0x24
 800e35a:	f04f 0200 	mov.w	r2, #0
 800e35e:	f04f 0300 	mov.w	r3, #0
 800e362:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800e366:	4629      	mov	r1, r5
 800e368:	028b      	lsls	r3, r1, #10
 800e36a:	4621      	mov	r1, r4
 800e36c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800e370:	4621      	mov	r1, r4
 800e372:	028a      	lsls	r2, r1, #10
 800e374:	4610      	mov	r0, r2
 800e376:	4619      	mov	r1, r3
 800e378:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e37c:	2200      	movs	r2, #0
 800e37e:	673b      	str	r3, [r7, #112]	@ 0x70
 800e380:	677a      	str	r2, [r7, #116]	@ 0x74
 800e382:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800e386:	f7f2 fc8f 	bl	8000ca8 <__aeabi_uldivmod>
 800e38a:	4602      	mov	r2, r0
 800e38c:	460b      	mov	r3, r1
 800e38e:	4613      	mov	r3, r2
 800e390:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800e394:	4b41      	ldr	r3, [pc, #260]	@ (800e49c <HAL_RCC_GetSysClockFreq+0x354>)
 800e396:	685b      	ldr	r3, [r3, #4]
 800e398:	0c1b      	lsrs	r3, r3, #16
 800e39a:	f003 0303 	and.w	r3, r3, #3
 800e39e:	3301      	adds	r3, #1
 800e3a0:	005b      	lsls	r3, r3, #1
 800e3a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800e3a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e3aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e3ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800e3b6:	e0eb      	b.n	800e590 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e3b8:	4b38      	ldr	r3, [pc, #224]	@ (800e49c <HAL_RCC_GetSysClockFreq+0x354>)
 800e3ba:	685b      	ldr	r3, [r3, #4]
 800e3bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e3c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e3c4:	4b35      	ldr	r3, [pc, #212]	@ (800e49c <HAL_RCC_GetSysClockFreq+0x354>)
 800e3c6:	685b      	ldr	r3, [r3, #4]
 800e3c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d06b      	beq.n	800e4a8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e3d0:	4b32      	ldr	r3, [pc, #200]	@ (800e49c <HAL_RCC_GetSysClockFreq+0x354>)
 800e3d2:	685b      	ldr	r3, [r3, #4]
 800e3d4:	099b      	lsrs	r3, r3, #6
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e3da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e3dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e3de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3e2:	663b      	str	r3, [r7, #96]	@ 0x60
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	667b      	str	r3, [r7, #100]	@ 0x64
 800e3e8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800e3ec:	4622      	mov	r2, r4
 800e3ee:	462b      	mov	r3, r5
 800e3f0:	f04f 0000 	mov.w	r0, #0
 800e3f4:	f04f 0100 	mov.w	r1, #0
 800e3f8:	0159      	lsls	r1, r3, #5
 800e3fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e3fe:	0150      	lsls	r0, r2, #5
 800e400:	4602      	mov	r2, r0
 800e402:	460b      	mov	r3, r1
 800e404:	4621      	mov	r1, r4
 800e406:	1a51      	subs	r1, r2, r1
 800e408:	61b9      	str	r1, [r7, #24]
 800e40a:	4629      	mov	r1, r5
 800e40c:	eb63 0301 	sbc.w	r3, r3, r1
 800e410:	61fb      	str	r3, [r7, #28]
 800e412:	f04f 0200 	mov.w	r2, #0
 800e416:	f04f 0300 	mov.w	r3, #0
 800e41a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800e41e:	4659      	mov	r1, fp
 800e420:	018b      	lsls	r3, r1, #6
 800e422:	4651      	mov	r1, sl
 800e424:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e428:	4651      	mov	r1, sl
 800e42a:	018a      	lsls	r2, r1, #6
 800e42c:	4651      	mov	r1, sl
 800e42e:	ebb2 0801 	subs.w	r8, r2, r1
 800e432:	4659      	mov	r1, fp
 800e434:	eb63 0901 	sbc.w	r9, r3, r1
 800e438:	f04f 0200 	mov.w	r2, #0
 800e43c:	f04f 0300 	mov.w	r3, #0
 800e440:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e444:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e448:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e44c:	4690      	mov	r8, r2
 800e44e:	4699      	mov	r9, r3
 800e450:	4623      	mov	r3, r4
 800e452:	eb18 0303 	adds.w	r3, r8, r3
 800e456:	613b      	str	r3, [r7, #16]
 800e458:	462b      	mov	r3, r5
 800e45a:	eb49 0303 	adc.w	r3, r9, r3
 800e45e:	617b      	str	r3, [r7, #20]
 800e460:	f04f 0200 	mov.w	r2, #0
 800e464:	f04f 0300 	mov.w	r3, #0
 800e468:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800e46c:	4629      	mov	r1, r5
 800e46e:	024b      	lsls	r3, r1, #9
 800e470:	4621      	mov	r1, r4
 800e472:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800e476:	4621      	mov	r1, r4
 800e478:	024a      	lsls	r2, r1, #9
 800e47a:	4610      	mov	r0, r2
 800e47c:	4619      	mov	r1, r3
 800e47e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e482:	2200      	movs	r2, #0
 800e484:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e486:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800e488:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800e48c:	f7f2 fc0c 	bl	8000ca8 <__aeabi_uldivmod>
 800e490:	4602      	mov	r2, r0
 800e492:	460b      	mov	r3, r1
 800e494:	4613      	mov	r3, r2
 800e496:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e49a:	e065      	b.n	800e568 <HAL_RCC_GetSysClockFreq+0x420>
 800e49c:	40023800 	.word	0x40023800
 800e4a0:	00f42400 	.word	0x00f42400
 800e4a4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e4a8:	4b3d      	ldr	r3, [pc, #244]	@ (800e5a0 <HAL_RCC_GetSysClockFreq+0x458>)
 800e4aa:	685b      	ldr	r3, [r3, #4]
 800e4ac:	099b      	lsrs	r3, r3, #6
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	4611      	mov	r1, r2
 800e4b4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800e4b8:	653b      	str	r3, [r7, #80]	@ 0x50
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	657b      	str	r3, [r7, #84]	@ 0x54
 800e4be:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800e4c2:	4642      	mov	r2, r8
 800e4c4:	464b      	mov	r3, r9
 800e4c6:	f04f 0000 	mov.w	r0, #0
 800e4ca:	f04f 0100 	mov.w	r1, #0
 800e4ce:	0159      	lsls	r1, r3, #5
 800e4d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e4d4:	0150      	lsls	r0, r2, #5
 800e4d6:	4602      	mov	r2, r0
 800e4d8:	460b      	mov	r3, r1
 800e4da:	4641      	mov	r1, r8
 800e4dc:	1a51      	subs	r1, r2, r1
 800e4de:	60b9      	str	r1, [r7, #8]
 800e4e0:	4649      	mov	r1, r9
 800e4e2:	eb63 0301 	sbc.w	r3, r3, r1
 800e4e6:	60fb      	str	r3, [r7, #12]
 800e4e8:	f04f 0200 	mov.w	r2, #0
 800e4ec:	f04f 0300 	mov.w	r3, #0
 800e4f0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800e4f4:	4659      	mov	r1, fp
 800e4f6:	018b      	lsls	r3, r1, #6
 800e4f8:	4651      	mov	r1, sl
 800e4fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e4fe:	4651      	mov	r1, sl
 800e500:	018a      	lsls	r2, r1, #6
 800e502:	4651      	mov	r1, sl
 800e504:	1a54      	subs	r4, r2, r1
 800e506:	4659      	mov	r1, fp
 800e508:	eb63 0501 	sbc.w	r5, r3, r1
 800e50c:	f04f 0200 	mov.w	r2, #0
 800e510:	f04f 0300 	mov.w	r3, #0
 800e514:	00eb      	lsls	r3, r5, #3
 800e516:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e51a:	00e2      	lsls	r2, r4, #3
 800e51c:	4614      	mov	r4, r2
 800e51e:	461d      	mov	r5, r3
 800e520:	4643      	mov	r3, r8
 800e522:	18e3      	adds	r3, r4, r3
 800e524:	603b      	str	r3, [r7, #0]
 800e526:	464b      	mov	r3, r9
 800e528:	eb45 0303 	adc.w	r3, r5, r3
 800e52c:	607b      	str	r3, [r7, #4]
 800e52e:	f04f 0200 	mov.w	r2, #0
 800e532:	f04f 0300 	mov.w	r3, #0
 800e536:	e9d7 4500 	ldrd	r4, r5, [r7]
 800e53a:	4629      	mov	r1, r5
 800e53c:	028b      	lsls	r3, r1, #10
 800e53e:	4621      	mov	r1, r4
 800e540:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800e544:	4621      	mov	r1, r4
 800e546:	028a      	lsls	r2, r1, #10
 800e548:	4610      	mov	r0, r2
 800e54a:	4619      	mov	r1, r3
 800e54c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e550:	2200      	movs	r2, #0
 800e552:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e554:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800e556:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800e55a:	f7f2 fba5 	bl	8000ca8 <__aeabi_uldivmod>
 800e55e:	4602      	mov	r2, r0
 800e560:	460b      	mov	r3, r1
 800e562:	4613      	mov	r3, r2
 800e564:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800e568:	4b0d      	ldr	r3, [pc, #52]	@ (800e5a0 <HAL_RCC_GetSysClockFreq+0x458>)
 800e56a:	685b      	ldr	r3, [r3, #4]
 800e56c:	0f1b      	lsrs	r3, r3, #28
 800e56e:	f003 0307 	and.w	r3, r3, #7
 800e572:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800e576:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e57a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e57e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e582:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800e586:	e003      	b.n	800e590 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e588:	4b06      	ldr	r3, [pc, #24]	@ (800e5a4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800e58a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800e58e:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e590:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800e594:	4618      	mov	r0, r3
 800e596:	37b8      	adds	r7, #184	@ 0xb8
 800e598:	46bd      	mov	sp, r7
 800e59a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e59e:	bf00      	nop
 800e5a0:	40023800 	.word	0x40023800
 800e5a4:	00f42400 	.word	0x00f42400

0800e5a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b086      	sub	sp, #24
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d101      	bne.n	800e5ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e5b6:	2301      	movs	r3, #1
 800e5b8:	e28d      	b.n	800ead6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	f003 0301 	and.w	r3, r3, #1
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	f000 8083 	beq.w	800e6ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800e5c8:	4b94      	ldr	r3, [pc, #592]	@ (800e81c <HAL_RCC_OscConfig+0x274>)
 800e5ca:	689b      	ldr	r3, [r3, #8]
 800e5cc:	f003 030c 	and.w	r3, r3, #12
 800e5d0:	2b04      	cmp	r3, #4
 800e5d2:	d019      	beq.n	800e608 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800e5d4:	4b91      	ldr	r3, [pc, #580]	@ (800e81c <HAL_RCC_OscConfig+0x274>)
 800e5d6:	689b      	ldr	r3, [r3, #8]
 800e5d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800e5dc:	2b08      	cmp	r3, #8
 800e5de:	d106      	bne.n	800e5ee <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800e5e0:	4b8e      	ldr	r3, [pc, #568]	@ (800e81c <HAL_RCC_OscConfig+0x274>)
 800e5e2:	685b      	ldr	r3, [r3, #4]
 800e5e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e5e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e5ec:	d00c      	beq.n	800e608 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e5ee:	4b8b      	ldr	r3, [pc, #556]	@ (800e81c <HAL_RCC_OscConfig+0x274>)
 800e5f0:	689b      	ldr	r3, [r3, #8]
 800e5f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800e5f6:	2b0c      	cmp	r3, #12
 800e5f8:	d112      	bne.n	800e620 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e5fa:	4b88      	ldr	r3, [pc, #544]	@ (800e81c <HAL_RCC_OscConfig+0x274>)
 800e5fc:	685b      	ldr	r3, [r3, #4]
 800e5fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e602:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e606:	d10b      	bne.n	800e620 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e608:	4b84      	ldr	r3, [pc, #528]	@ (800e81c <HAL_RCC_OscConfig+0x274>)
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e610:	2b00      	cmp	r3, #0
 800e612:	d05b      	beq.n	800e6cc <HAL_RCC_OscConfig+0x124>
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	685b      	ldr	r3, [r3, #4]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d157      	bne.n	800e6cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800e61c:	2301      	movs	r3, #1
 800e61e:	e25a      	b.n	800ead6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	685b      	ldr	r3, [r3, #4]
 800e624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e628:	d106      	bne.n	800e638 <HAL_RCC_OscConfig+0x90>
 800e62a:	4b7c      	ldr	r3, [pc, #496]	@ (800e81c <HAL_RCC_OscConfig+0x274>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	4a7b      	ldr	r2, [pc, #492]	@ (800e81c <HAL_RCC_OscConfig+0x274>)
 800e630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e634:	6013      	str	r3, [r2, #0]
 800e636:	e01d      	b.n	800e674 <HAL_RCC_OscConfig+0xcc>
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	685b      	ldr	r3, [r3, #4]
 800e63c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e640:	d10c      	bne.n	800e65c <HAL_RCC_OscConfig+0xb4>
 800e642:	4b76      	ldr	r3, [pc, #472]	@ (800e81c <HAL_RCC_OscConfig+0x274>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	4a75      	ldr	r2, [pc, #468]	@ (800e81c <HAL_RCC_OscConfig+0x274>)
 800e648:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e64c:	6013      	str	r3, [r2, #0]
 800e64e:	4b73      	ldr	r3, [pc, #460]	@ (800e81c <HAL_RCC_OscConfig+0x274>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	4a72      	ldr	r2, [pc, #456]	@ (800e81c <HAL_RCC_OscConfig+0x274>)
 800e654:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e658:	6013      	str	r3, [r2, #0]
 800e65a:	e00b      	b.n	800e674 <HAL_RCC_OscConfig+0xcc>
 800e65c:	4b6f      	ldr	r3, [pc, #444]	@ (800e81c <HAL_RCC_OscConfig+0x274>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	4a6e      	ldr	r2, [pc, #440]	@ (800e81c <HAL_RCC_OscConfig+0x274>)
 800e662:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e666:	6013      	str	r3, [r2, #0]
 800e668:	4b6c      	ldr	r3, [pc, #432]	@ (800e81c <HAL_RCC_OscConfig+0x274>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	4a6b      	ldr	r2, [pc, #428]	@ (800e81c <HAL_RCC_OscConfig+0x274>)
 800e66e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	685b      	ldr	r3, [r3, #4]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d013      	beq.n	800e6a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e67c:	f7ff f878 	bl	800d770 <HAL_GetTick>
 800e680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e682:	e008      	b.n	800e696 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e684:	f7ff f874 	bl	800d770 <HAL_GetTick>
 800e688:	4602      	mov	r2, r0
 800e68a:	693b      	ldr	r3, [r7, #16]
 800e68c:	1ad3      	subs	r3, r2, r3
 800e68e:	2b64      	cmp	r3, #100	@ 0x64
 800e690:	d901      	bls.n	800e696 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800e692:	2303      	movs	r3, #3
 800e694:	e21f      	b.n	800ead6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e696:	4b61      	ldr	r3, [pc, #388]	@ (800e81c <HAL_RCC_OscConfig+0x274>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d0f0      	beq.n	800e684 <HAL_RCC_OscConfig+0xdc>
 800e6a2:	e014      	b.n	800e6ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e6a4:	f7ff f864 	bl	800d770 <HAL_GetTick>
 800e6a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e6aa:	e008      	b.n	800e6be <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e6ac:	f7ff f860 	bl	800d770 <HAL_GetTick>
 800e6b0:	4602      	mov	r2, r0
 800e6b2:	693b      	ldr	r3, [r7, #16]
 800e6b4:	1ad3      	subs	r3, r2, r3
 800e6b6:	2b64      	cmp	r3, #100	@ 0x64
 800e6b8:	d901      	bls.n	800e6be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800e6ba:	2303      	movs	r3, #3
 800e6bc:	e20b      	b.n	800ead6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e6be:	4b57      	ldr	r3, [pc, #348]	@ (800e81c <HAL_RCC_OscConfig+0x274>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d1f0      	bne.n	800e6ac <HAL_RCC_OscConfig+0x104>
 800e6ca:	e000      	b.n	800e6ce <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e6cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	f003 0302 	and.w	r3, r3, #2
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d06f      	beq.n	800e7ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800e6da:	4b50      	ldr	r3, [pc, #320]	@ (800e81c <HAL_RCC_OscConfig+0x274>)
 800e6dc:	689b      	ldr	r3, [r3, #8]
 800e6de:	f003 030c 	and.w	r3, r3, #12
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d017      	beq.n	800e716 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800e6e6:	4b4d      	ldr	r3, [pc, #308]	@ (800e81c <HAL_RCC_OscConfig+0x274>)
 800e6e8:	689b      	ldr	r3, [r3, #8]
 800e6ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800e6ee:	2b08      	cmp	r3, #8
 800e6f0:	d105      	bne.n	800e6fe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800e6f2:	4b4a      	ldr	r3, [pc, #296]	@ (800e81c <HAL_RCC_OscConfig+0x274>)
 800e6f4:	685b      	ldr	r3, [r3, #4]
 800e6f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d00b      	beq.n	800e716 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e6fe:	4b47      	ldr	r3, [pc, #284]	@ (800e81c <HAL_RCC_OscConfig+0x274>)
 800e700:	689b      	ldr	r3, [r3, #8]
 800e702:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800e706:	2b0c      	cmp	r3, #12
 800e708:	d11c      	bne.n	800e744 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e70a:	4b44      	ldr	r3, [pc, #272]	@ (800e81c <HAL_RCC_OscConfig+0x274>)
 800e70c:	685b      	ldr	r3, [r3, #4]
 800e70e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e712:	2b00      	cmp	r3, #0
 800e714:	d116      	bne.n	800e744 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e716:	4b41      	ldr	r3, [pc, #260]	@ (800e81c <HAL_RCC_OscConfig+0x274>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	f003 0302 	and.w	r3, r3, #2
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d005      	beq.n	800e72e <HAL_RCC_OscConfig+0x186>
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	68db      	ldr	r3, [r3, #12]
 800e726:	2b01      	cmp	r3, #1
 800e728:	d001      	beq.n	800e72e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800e72a:	2301      	movs	r3, #1
 800e72c:	e1d3      	b.n	800ead6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e72e:	4b3b      	ldr	r3, [pc, #236]	@ (800e81c <HAL_RCC_OscConfig+0x274>)
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	691b      	ldr	r3, [r3, #16]
 800e73a:	00db      	lsls	r3, r3, #3
 800e73c:	4937      	ldr	r1, [pc, #220]	@ (800e81c <HAL_RCC_OscConfig+0x274>)
 800e73e:	4313      	orrs	r3, r2
 800e740:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e742:	e03a      	b.n	800e7ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	68db      	ldr	r3, [r3, #12]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d020      	beq.n	800e78e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e74c:	4b34      	ldr	r3, [pc, #208]	@ (800e820 <HAL_RCC_OscConfig+0x278>)
 800e74e:	2201      	movs	r2, #1
 800e750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e752:	f7ff f80d 	bl	800d770 <HAL_GetTick>
 800e756:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e758:	e008      	b.n	800e76c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e75a:	f7ff f809 	bl	800d770 <HAL_GetTick>
 800e75e:	4602      	mov	r2, r0
 800e760:	693b      	ldr	r3, [r7, #16]
 800e762:	1ad3      	subs	r3, r2, r3
 800e764:	2b02      	cmp	r3, #2
 800e766:	d901      	bls.n	800e76c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800e768:	2303      	movs	r3, #3
 800e76a:	e1b4      	b.n	800ead6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e76c:	4b2b      	ldr	r3, [pc, #172]	@ (800e81c <HAL_RCC_OscConfig+0x274>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	f003 0302 	and.w	r3, r3, #2
 800e774:	2b00      	cmp	r3, #0
 800e776:	d0f0      	beq.n	800e75a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e778:	4b28      	ldr	r3, [pc, #160]	@ (800e81c <HAL_RCC_OscConfig+0x274>)
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	691b      	ldr	r3, [r3, #16]
 800e784:	00db      	lsls	r3, r3, #3
 800e786:	4925      	ldr	r1, [pc, #148]	@ (800e81c <HAL_RCC_OscConfig+0x274>)
 800e788:	4313      	orrs	r3, r2
 800e78a:	600b      	str	r3, [r1, #0]
 800e78c:	e015      	b.n	800e7ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e78e:	4b24      	ldr	r3, [pc, #144]	@ (800e820 <HAL_RCC_OscConfig+0x278>)
 800e790:	2200      	movs	r2, #0
 800e792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e794:	f7fe ffec 	bl	800d770 <HAL_GetTick>
 800e798:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e79a:	e008      	b.n	800e7ae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e79c:	f7fe ffe8 	bl	800d770 <HAL_GetTick>
 800e7a0:	4602      	mov	r2, r0
 800e7a2:	693b      	ldr	r3, [r7, #16]
 800e7a4:	1ad3      	subs	r3, r2, r3
 800e7a6:	2b02      	cmp	r3, #2
 800e7a8:	d901      	bls.n	800e7ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800e7aa:	2303      	movs	r3, #3
 800e7ac:	e193      	b.n	800ead6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e7ae:	4b1b      	ldr	r3, [pc, #108]	@ (800e81c <HAL_RCC_OscConfig+0x274>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	f003 0302 	and.w	r3, r3, #2
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d1f0      	bne.n	800e79c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	f003 0308 	and.w	r3, r3, #8
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d036      	beq.n	800e834 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	695b      	ldr	r3, [r3, #20]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d016      	beq.n	800e7fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e7ce:	4b15      	ldr	r3, [pc, #84]	@ (800e824 <HAL_RCC_OscConfig+0x27c>)
 800e7d0:	2201      	movs	r2, #1
 800e7d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e7d4:	f7fe ffcc 	bl	800d770 <HAL_GetTick>
 800e7d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e7da:	e008      	b.n	800e7ee <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e7dc:	f7fe ffc8 	bl	800d770 <HAL_GetTick>
 800e7e0:	4602      	mov	r2, r0
 800e7e2:	693b      	ldr	r3, [r7, #16]
 800e7e4:	1ad3      	subs	r3, r2, r3
 800e7e6:	2b02      	cmp	r3, #2
 800e7e8:	d901      	bls.n	800e7ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800e7ea:	2303      	movs	r3, #3
 800e7ec:	e173      	b.n	800ead6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e7ee:	4b0b      	ldr	r3, [pc, #44]	@ (800e81c <HAL_RCC_OscConfig+0x274>)
 800e7f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e7f2:	f003 0302 	and.w	r3, r3, #2
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d0f0      	beq.n	800e7dc <HAL_RCC_OscConfig+0x234>
 800e7fa:	e01b      	b.n	800e834 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e7fc:	4b09      	ldr	r3, [pc, #36]	@ (800e824 <HAL_RCC_OscConfig+0x27c>)
 800e7fe:	2200      	movs	r2, #0
 800e800:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e802:	f7fe ffb5 	bl	800d770 <HAL_GetTick>
 800e806:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e808:	e00e      	b.n	800e828 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e80a:	f7fe ffb1 	bl	800d770 <HAL_GetTick>
 800e80e:	4602      	mov	r2, r0
 800e810:	693b      	ldr	r3, [r7, #16]
 800e812:	1ad3      	subs	r3, r2, r3
 800e814:	2b02      	cmp	r3, #2
 800e816:	d907      	bls.n	800e828 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800e818:	2303      	movs	r3, #3
 800e81a:	e15c      	b.n	800ead6 <HAL_RCC_OscConfig+0x52e>
 800e81c:	40023800 	.word	0x40023800
 800e820:	42470000 	.word	0x42470000
 800e824:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e828:	4b8a      	ldr	r3, [pc, #552]	@ (800ea54 <HAL_RCC_OscConfig+0x4ac>)
 800e82a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e82c:	f003 0302 	and.w	r3, r3, #2
 800e830:	2b00      	cmp	r3, #0
 800e832:	d1ea      	bne.n	800e80a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	f003 0304 	and.w	r3, r3, #4
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	f000 8097 	beq.w	800e970 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e842:	2300      	movs	r3, #0
 800e844:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e846:	4b83      	ldr	r3, [pc, #524]	@ (800ea54 <HAL_RCC_OscConfig+0x4ac>)
 800e848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e84a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d10f      	bne.n	800e872 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e852:	2300      	movs	r3, #0
 800e854:	60bb      	str	r3, [r7, #8]
 800e856:	4b7f      	ldr	r3, [pc, #508]	@ (800ea54 <HAL_RCC_OscConfig+0x4ac>)
 800e858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e85a:	4a7e      	ldr	r2, [pc, #504]	@ (800ea54 <HAL_RCC_OscConfig+0x4ac>)
 800e85c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e860:	6413      	str	r3, [r2, #64]	@ 0x40
 800e862:	4b7c      	ldr	r3, [pc, #496]	@ (800ea54 <HAL_RCC_OscConfig+0x4ac>)
 800e864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e86a:	60bb      	str	r3, [r7, #8]
 800e86c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e86e:	2301      	movs	r3, #1
 800e870:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e872:	4b79      	ldr	r3, [pc, #484]	@ (800ea58 <HAL_RCC_OscConfig+0x4b0>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d118      	bne.n	800e8b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e87e:	4b76      	ldr	r3, [pc, #472]	@ (800ea58 <HAL_RCC_OscConfig+0x4b0>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	4a75      	ldr	r2, [pc, #468]	@ (800ea58 <HAL_RCC_OscConfig+0x4b0>)
 800e884:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e888:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e88a:	f7fe ff71 	bl	800d770 <HAL_GetTick>
 800e88e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e890:	e008      	b.n	800e8a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e892:	f7fe ff6d 	bl	800d770 <HAL_GetTick>
 800e896:	4602      	mov	r2, r0
 800e898:	693b      	ldr	r3, [r7, #16]
 800e89a:	1ad3      	subs	r3, r2, r3
 800e89c:	2b02      	cmp	r3, #2
 800e89e:	d901      	bls.n	800e8a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800e8a0:	2303      	movs	r3, #3
 800e8a2:	e118      	b.n	800ead6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e8a4:	4b6c      	ldr	r3, [pc, #432]	@ (800ea58 <HAL_RCC_OscConfig+0x4b0>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d0f0      	beq.n	800e892 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	689b      	ldr	r3, [r3, #8]
 800e8b4:	2b01      	cmp	r3, #1
 800e8b6:	d106      	bne.n	800e8c6 <HAL_RCC_OscConfig+0x31e>
 800e8b8:	4b66      	ldr	r3, [pc, #408]	@ (800ea54 <HAL_RCC_OscConfig+0x4ac>)
 800e8ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e8bc:	4a65      	ldr	r2, [pc, #404]	@ (800ea54 <HAL_RCC_OscConfig+0x4ac>)
 800e8be:	f043 0301 	orr.w	r3, r3, #1
 800e8c2:	6713      	str	r3, [r2, #112]	@ 0x70
 800e8c4:	e01c      	b.n	800e900 <HAL_RCC_OscConfig+0x358>
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	689b      	ldr	r3, [r3, #8]
 800e8ca:	2b05      	cmp	r3, #5
 800e8cc:	d10c      	bne.n	800e8e8 <HAL_RCC_OscConfig+0x340>
 800e8ce:	4b61      	ldr	r3, [pc, #388]	@ (800ea54 <HAL_RCC_OscConfig+0x4ac>)
 800e8d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e8d2:	4a60      	ldr	r2, [pc, #384]	@ (800ea54 <HAL_RCC_OscConfig+0x4ac>)
 800e8d4:	f043 0304 	orr.w	r3, r3, #4
 800e8d8:	6713      	str	r3, [r2, #112]	@ 0x70
 800e8da:	4b5e      	ldr	r3, [pc, #376]	@ (800ea54 <HAL_RCC_OscConfig+0x4ac>)
 800e8dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e8de:	4a5d      	ldr	r2, [pc, #372]	@ (800ea54 <HAL_RCC_OscConfig+0x4ac>)
 800e8e0:	f043 0301 	orr.w	r3, r3, #1
 800e8e4:	6713      	str	r3, [r2, #112]	@ 0x70
 800e8e6:	e00b      	b.n	800e900 <HAL_RCC_OscConfig+0x358>
 800e8e8:	4b5a      	ldr	r3, [pc, #360]	@ (800ea54 <HAL_RCC_OscConfig+0x4ac>)
 800e8ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e8ec:	4a59      	ldr	r2, [pc, #356]	@ (800ea54 <HAL_RCC_OscConfig+0x4ac>)
 800e8ee:	f023 0301 	bic.w	r3, r3, #1
 800e8f2:	6713      	str	r3, [r2, #112]	@ 0x70
 800e8f4:	4b57      	ldr	r3, [pc, #348]	@ (800ea54 <HAL_RCC_OscConfig+0x4ac>)
 800e8f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e8f8:	4a56      	ldr	r2, [pc, #344]	@ (800ea54 <HAL_RCC_OscConfig+0x4ac>)
 800e8fa:	f023 0304 	bic.w	r3, r3, #4
 800e8fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	689b      	ldr	r3, [r3, #8]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d015      	beq.n	800e934 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e908:	f7fe ff32 	bl	800d770 <HAL_GetTick>
 800e90c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e90e:	e00a      	b.n	800e926 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e910:	f7fe ff2e 	bl	800d770 <HAL_GetTick>
 800e914:	4602      	mov	r2, r0
 800e916:	693b      	ldr	r3, [r7, #16]
 800e918:	1ad3      	subs	r3, r2, r3
 800e91a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e91e:	4293      	cmp	r3, r2
 800e920:	d901      	bls.n	800e926 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800e922:	2303      	movs	r3, #3
 800e924:	e0d7      	b.n	800ead6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e926:	4b4b      	ldr	r3, [pc, #300]	@ (800ea54 <HAL_RCC_OscConfig+0x4ac>)
 800e928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e92a:	f003 0302 	and.w	r3, r3, #2
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d0ee      	beq.n	800e910 <HAL_RCC_OscConfig+0x368>
 800e932:	e014      	b.n	800e95e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e934:	f7fe ff1c 	bl	800d770 <HAL_GetTick>
 800e938:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e93a:	e00a      	b.n	800e952 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e93c:	f7fe ff18 	bl	800d770 <HAL_GetTick>
 800e940:	4602      	mov	r2, r0
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	1ad3      	subs	r3, r2, r3
 800e946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e94a:	4293      	cmp	r3, r2
 800e94c:	d901      	bls.n	800e952 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800e94e:	2303      	movs	r3, #3
 800e950:	e0c1      	b.n	800ead6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e952:	4b40      	ldr	r3, [pc, #256]	@ (800ea54 <HAL_RCC_OscConfig+0x4ac>)
 800e954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e956:	f003 0302 	and.w	r3, r3, #2
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d1ee      	bne.n	800e93c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e95e:	7dfb      	ldrb	r3, [r7, #23]
 800e960:	2b01      	cmp	r3, #1
 800e962:	d105      	bne.n	800e970 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e964:	4b3b      	ldr	r3, [pc, #236]	@ (800ea54 <HAL_RCC_OscConfig+0x4ac>)
 800e966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e968:	4a3a      	ldr	r2, [pc, #232]	@ (800ea54 <HAL_RCC_OscConfig+0x4ac>)
 800e96a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e96e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	699b      	ldr	r3, [r3, #24]
 800e974:	2b00      	cmp	r3, #0
 800e976:	f000 80ad 	beq.w	800ead4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e97a:	4b36      	ldr	r3, [pc, #216]	@ (800ea54 <HAL_RCC_OscConfig+0x4ac>)
 800e97c:	689b      	ldr	r3, [r3, #8]
 800e97e:	f003 030c 	and.w	r3, r3, #12
 800e982:	2b08      	cmp	r3, #8
 800e984:	d060      	beq.n	800ea48 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	699b      	ldr	r3, [r3, #24]
 800e98a:	2b02      	cmp	r3, #2
 800e98c:	d145      	bne.n	800ea1a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e98e:	4b33      	ldr	r3, [pc, #204]	@ (800ea5c <HAL_RCC_OscConfig+0x4b4>)
 800e990:	2200      	movs	r2, #0
 800e992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e994:	f7fe feec 	bl	800d770 <HAL_GetTick>
 800e998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e99a:	e008      	b.n	800e9ae <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e99c:	f7fe fee8 	bl	800d770 <HAL_GetTick>
 800e9a0:	4602      	mov	r2, r0
 800e9a2:	693b      	ldr	r3, [r7, #16]
 800e9a4:	1ad3      	subs	r3, r2, r3
 800e9a6:	2b02      	cmp	r3, #2
 800e9a8:	d901      	bls.n	800e9ae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800e9aa:	2303      	movs	r3, #3
 800e9ac:	e093      	b.n	800ead6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e9ae:	4b29      	ldr	r3, [pc, #164]	@ (800ea54 <HAL_RCC_OscConfig+0x4ac>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d1f0      	bne.n	800e99c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	69da      	ldr	r2, [r3, #28]
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6a1b      	ldr	r3, [r3, #32]
 800e9c2:	431a      	orrs	r2, r3
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9c8:	019b      	lsls	r3, r3, #6
 800e9ca:	431a      	orrs	r2, r3
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e9d0:	085b      	lsrs	r3, r3, #1
 800e9d2:	3b01      	subs	r3, #1
 800e9d4:	041b      	lsls	r3, r3, #16
 800e9d6:	431a      	orrs	r2, r3
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9dc:	061b      	lsls	r3, r3, #24
 800e9de:	431a      	orrs	r2, r3
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9e4:	071b      	lsls	r3, r3, #28
 800e9e6:	491b      	ldr	r1, [pc, #108]	@ (800ea54 <HAL_RCC_OscConfig+0x4ac>)
 800e9e8:	4313      	orrs	r3, r2
 800e9ea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e9ec:	4b1b      	ldr	r3, [pc, #108]	@ (800ea5c <HAL_RCC_OscConfig+0x4b4>)
 800e9ee:	2201      	movs	r2, #1
 800e9f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e9f2:	f7fe febd 	bl	800d770 <HAL_GetTick>
 800e9f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e9f8:	e008      	b.n	800ea0c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e9fa:	f7fe feb9 	bl	800d770 <HAL_GetTick>
 800e9fe:	4602      	mov	r2, r0
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	1ad3      	subs	r3, r2, r3
 800ea04:	2b02      	cmp	r3, #2
 800ea06:	d901      	bls.n	800ea0c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800ea08:	2303      	movs	r3, #3
 800ea0a:	e064      	b.n	800ead6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ea0c:	4b11      	ldr	r3, [pc, #68]	@ (800ea54 <HAL_RCC_OscConfig+0x4ac>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d0f0      	beq.n	800e9fa <HAL_RCC_OscConfig+0x452>
 800ea18:	e05c      	b.n	800ead4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ea1a:	4b10      	ldr	r3, [pc, #64]	@ (800ea5c <HAL_RCC_OscConfig+0x4b4>)
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ea20:	f7fe fea6 	bl	800d770 <HAL_GetTick>
 800ea24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ea26:	e008      	b.n	800ea3a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ea28:	f7fe fea2 	bl	800d770 <HAL_GetTick>
 800ea2c:	4602      	mov	r2, r0
 800ea2e:	693b      	ldr	r3, [r7, #16]
 800ea30:	1ad3      	subs	r3, r2, r3
 800ea32:	2b02      	cmp	r3, #2
 800ea34:	d901      	bls.n	800ea3a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800ea36:	2303      	movs	r3, #3
 800ea38:	e04d      	b.n	800ead6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ea3a:	4b06      	ldr	r3, [pc, #24]	@ (800ea54 <HAL_RCC_OscConfig+0x4ac>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d1f0      	bne.n	800ea28 <HAL_RCC_OscConfig+0x480>
 800ea46:	e045      	b.n	800ead4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	699b      	ldr	r3, [r3, #24]
 800ea4c:	2b01      	cmp	r3, #1
 800ea4e:	d107      	bne.n	800ea60 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800ea50:	2301      	movs	r3, #1
 800ea52:	e040      	b.n	800ead6 <HAL_RCC_OscConfig+0x52e>
 800ea54:	40023800 	.word	0x40023800
 800ea58:	40007000 	.word	0x40007000
 800ea5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ea60:	4b1f      	ldr	r3, [pc, #124]	@ (800eae0 <HAL_RCC_OscConfig+0x538>)
 800ea62:	685b      	ldr	r3, [r3, #4]
 800ea64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	699b      	ldr	r3, [r3, #24]
 800ea6a:	2b01      	cmp	r3, #1
 800ea6c:	d030      	beq.n	800ead0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ea78:	429a      	cmp	r2, r3
 800ea7a:	d129      	bne.n	800ead0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ea86:	429a      	cmp	r2, r3
 800ea88:	d122      	bne.n	800ead0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ea8a:	68fa      	ldr	r2, [r7, #12]
 800ea8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800ea90:	4013      	ands	r3, r2
 800ea92:	687a      	ldr	r2, [r7, #4]
 800ea94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ea96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ea98:	4293      	cmp	r3, r2
 800ea9a:	d119      	bne.n	800ead0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eaa6:	085b      	lsrs	r3, r3, #1
 800eaa8:	3b01      	subs	r3, #1
 800eaaa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d10f      	bne.n	800ead0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eaba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800eabc:	429a      	cmp	r2, r3
 800eabe:	d107      	bne.n	800ead0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eaca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800eacc:	429a      	cmp	r2, r3
 800eace:	d001      	beq.n	800ead4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800ead0:	2301      	movs	r3, #1
 800ead2:	e000      	b.n	800ead6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800ead4:	2300      	movs	r3, #0
}
 800ead6:	4618      	mov	r0, r3
 800ead8:	3718      	adds	r7, #24
 800eada:	46bd      	mov	sp, r7
 800eadc:	bd80      	pop	{r7, pc}
 800eade:	bf00      	nop
 800eae0:	40023800 	.word	0x40023800

0800eae4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b082      	sub	sp, #8
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d101      	bne.n	800eaf6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	e07b      	b.n	800ebee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d108      	bne.n	800eb10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	685b      	ldr	r3, [r3, #4]
 800eb02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800eb06:	d009      	beq.n	800eb1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	61da      	str	r2, [r3, #28]
 800eb0e:	e005      	b.n	800eb1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2200      	movs	r2, #0
 800eb14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	2200      	movs	r2, #0
 800eb1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800eb28:	b2db      	uxtb	r3, r3
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d106      	bne.n	800eb3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2200      	movs	r2, #0
 800eb32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800eb36:	6878      	ldr	r0, [r7, #4]
 800eb38:	f7fe fb90 	bl	800d25c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2202      	movs	r2, #2
 800eb40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	681a      	ldr	r2, [r3, #0]
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800eb52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	685b      	ldr	r3, [r3, #4]
 800eb58:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	689b      	ldr	r3, [r3, #8]
 800eb60:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800eb64:	431a      	orrs	r2, r3
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	68db      	ldr	r3, [r3, #12]
 800eb6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800eb6e:	431a      	orrs	r2, r3
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	691b      	ldr	r3, [r3, #16]
 800eb74:	f003 0302 	and.w	r3, r3, #2
 800eb78:	431a      	orrs	r2, r3
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	695b      	ldr	r3, [r3, #20]
 800eb7e:	f003 0301 	and.w	r3, r3, #1
 800eb82:	431a      	orrs	r2, r3
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	699b      	ldr	r3, [r3, #24]
 800eb88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800eb8c:	431a      	orrs	r2, r3
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	69db      	ldr	r3, [r3, #28]
 800eb92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800eb96:	431a      	orrs	r2, r3
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6a1b      	ldr	r3, [r3, #32]
 800eb9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eba0:	ea42 0103 	orr.w	r1, r2, r3
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eba8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	430a      	orrs	r2, r1
 800ebb2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	699b      	ldr	r3, [r3, #24]
 800ebb8:	0c1b      	lsrs	r3, r3, #16
 800ebba:	f003 0104 	and.w	r1, r3, #4
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebc2:	f003 0210 	and.w	r2, r3, #16
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	430a      	orrs	r2, r1
 800ebcc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	69da      	ldr	r2, [r3, #28]
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ebdc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2201      	movs	r2, #1
 800ebe8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800ebec:	2300      	movs	r3, #0
}
 800ebee:	4618      	mov	r0, r3
 800ebf0:	3708      	adds	r7, #8
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}

0800ebf6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ebf6:	b580      	push	{r7, lr}
 800ebf8:	b088      	sub	sp, #32
 800ebfa:	af00      	add	r7, sp, #0
 800ebfc:	60f8      	str	r0, [r7, #12]
 800ebfe:	60b9      	str	r1, [r7, #8]
 800ec00:	603b      	str	r3, [r7, #0]
 800ec02:	4613      	mov	r3, r2
 800ec04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ec06:	2300      	movs	r3, #0
 800ec08:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ec10:	2b01      	cmp	r3, #1
 800ec12:	d101      	bne.n	800ec18 <HAL_SPI_Transmit+0x22>
 800ec14:	2302      	movs	r3, #2
 800ec16:	e126      	b.n	800ee66 <HAL_SPI_Transmit+0x270>
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	2201      	movs	r2, #1
 800ec1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ec20:	f7fe fda6 	bl	800d770 <HAL_GetTick>
 800ec24:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ec26:	88fb      	ldrh	r3, [r7, #6]
 800ec28:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ec30:	b2db      	uxtb	r3, r3
 800ec32:	2b01      	cmp	r3, #1
 800ec34:	d002      	beq.n	800ec3c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ec36:	2302      	movs	r3, #2
 800ec38:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ec3a:	e10b      	b.n	800ee54 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d002      	beq.n	800ec48 <HAL_SPI_Transmit+0x52>
 800ec42:	88fb      	ldrh	r3, [r7, #6]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d102      	bne.n	800ec4e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ec48:	2301      	movs	r3, #1
 800ec4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ec4c:	e102      	b.n	800ee54 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	2203      	movs	r2, #3
 800ec52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	2200      	movs	r2, #0
 800ec5a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	68ba      	ldr	r2, [r7, #8]
 800ec60:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	88fa      	ldrh	r2, [r7, #6]
 800ec66:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	88fa      	ldrh	r2, [r7, #6]
 800ec6c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	2200      	movs	r2, #0
 800ec72:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	2200      	movs	r2, #0
 800ec78:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	2200      	movs	r2, #0
 800ec84:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	2200      	movs	r2, #0
 800ec8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	689b      	ldr	r3, [r3, #8]
 800ec90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ec94:	d10f      	bne.n	800ecb6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	681a      	ldr	r2, [r3, #0]
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800eca4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	681a      	ldr	r2, [r3, #0]
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ecb4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ecc0:	2b40      	cmp	r3, #64	@ 0x40
 800ecc2:	d007      	beq.n	800ecd4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	681a      	ldr	r2, [r3, #0]
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ecd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	68db      	ldr	r3, [r3, #12]
 800ecd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ecdc:	d14b      	bne.n	800ed76 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	685b      	ldr	r3, [r3, #4]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d002      	beq.n	800ecec <HAL_SPI_Transmit+0xf6>
 800ece6:	8afb      	ldrh	r3, [r7, #22]
 800ece8:	2b01      	cmp	r3, #1
 800ecea:	d13e      	bne.n	800ed6a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ecf0:	881a      	ldrh	r2, [r3, #0]
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ecfc:	1c9a      	adds	r2, r3, #2
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ed06:	b29b      	uxth	r3, r3
 800ed08:	3b01      	subs	r3, #1
 800ed0a:	b29a      	uxth	r2, r3
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ed10:	e02b      	b.n	800ed6a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	689b      	ldr	r3, [r3, #8]
 800ed18:	f003 0302 	and.w	r3, r3, #2
 800ed1c:	2b02      	cmp	r3, #2
 800ed1e:	d112      	bne.n	800ed46 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed24:	881a      	ldrh	r2, [r3, #0]
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed30:	1c9a      	adds	r2, r3, #2
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ed3a:	b29b      	uxth	r3, r3
 800ed3c:	3b01      	subs	r3, #1
 800ed3e:	b29a      	uxth	r2, r3
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	86da      	strh	r2, [r3, #54]	@ 0x36
 800ed44:	e011      	b.n	800ed6a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ed46:	f7fe fd13 	bl	800d770 <HAL_GetTick>
 800ed4a:	4602      	mov	r2, r0
 800ed4c:	69bb      	ldr	r3, [r7, #24]
 800ed4e:	1ad3      	subs	r3, r2, r3
 800ed50:	683a      	ldr	r2, [r7, #0]
 800ed52:	429a      	cmp	r2, r3
 800ed54:	d803      	bhi.n	800ed5e <HAL_SPI_Transmit+0x168>
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ed5c:	d102      	bne.n	800ed64 <HAL_SPI_Transmit+0x16e>
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d102      	bne.n	800ed6a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800ed64:	2303      	movs	r3, #3
 800ed66:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ed68:	e074      	b.n	800ee54 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ed6e:	b29b      	uxth	r3, r3
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d1ce      	bne.n	800ed12 <HAL_SPI_Transmit+0x11c>
 800ed74:	e04c      	b.n	800ee10 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	685b      	ldr	r3, [r3, #4]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d002      	beq.n	800ed84 <HAL_SPI_Transmit+0x18e>
 800ed7e:	8afb      	ldrh	r3, [r7, #22]
 800ed80:	2b01      	cmp	r3, #1
 800ed82:	d140      	bne.n	800ee06 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	330c      	adds	r3, #12
 800ed8e:	7812      	ldrb	r2, [r2, #0]
 800ed90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed96:	1c5a      	adds	r2, r3, #1
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800eda0:	b29b      	uxth	r3, r3
 800eda2:	3b01      	subs	r3, #1
 800eda4:	b29a      	uxth	r2, r3
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800edaa:	e02c      	b.n	800ee06 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	689b      	ldr	r3, [r3, #8]
 800edb2:	f003 0302 	and.w	r3, r3, #2
 800edb6:	2b02      	cmp	r3, #2
 800edb8:	d113      	bne.n	800ede2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	330c      	adds	r3, #12
 800edc4:	7812      	ldrb	r2, [r2, #0]
 800edc6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800edcc:	1c5a      	adds	r2, r3, #1
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800edd6:	b29b      	uxth	r3, r3
 800edd8:	3b01      	subs	r3, #1
 800edda:	b29a      	uxth	r2, r3
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	86da      	strh	r2, [r3, #54]	@ 0x36
 800ede0:	e011      	b.n	800ee06 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ede2:	f7fe fcc5 	bl	800d770 <HAL_GetTick>
 800ede6:	4602      	mov	r2, r0
 800ede8:	69bb      	ldr	r3, [r7, #24]
 800edea:	1ad3      	subs	r3, r2, r3
 800edec:	683a      	ldr	r2, [r7, #0]
 800edee:	429a      	cmp	r2, r3
 800edf0:	d803      	bhi.n	800edfa <HAL_SPI_Transmit+0x204>
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800edf8:	d102      	bne.n	800ee00 <HAL_SPI_Transmit+0x20a>
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d102      	bne.n	800ee06 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800ee00:	2303      	movs	r3, #3
 800ee02:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ee04:	e026      	b.n	800ee54 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ee0a:	b29b      	uxth	r3, r3
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d1cd      	bne.n	800edac <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ee10:	69ba      	ldr	r2, [r7, #24]
 800ee12:	6839      	ldr	r1, [r7, #0]
 800ee14:	68f8      	ldr	r0, [r7, #12]
 800ee16:	f000 fbcb 	bl	800f5b0 <SPI_EndRxTxTransaction>
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d002      	beq.n	800ee26 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	2220      	movs	r2, #32
 800ee24:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	689b      	ldr	r3, [r3, #8]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d10a      	bne.n	800ee44 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ee2e:	2300      	movs	r3, #0
 800ee30:	613b      	str	r3, [r7, #16]
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	68db      	ldr	r3, [r3, #12]
 800ee38:	613b      	str	r3, [r7, #16]
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	689b      	ldr	r3, [r3, #8]
 800ee40:	613b      	str	r3, [r7, #16]
 800ee42:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d002      	beq.n	800ee52 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	77fb      	strb	r3, [r7, #31]
 800ee50:	e000      	b.n	800ee54 <HAL_SPI_Transmit+0x25e>
  }

error:
 800ee52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	2201      	movs	r2, #1
 800ee58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	2200      	movs	r2, #0
 800ee60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800ee64:	7ffb      	ldrb	r3, [r7, #31]
}
 800ee66:	4618      	mov	r0, r3
 800ee68:	3720      	adds	r7, #32
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}

0800ee6e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ee6e:	b580      	push	{r7, lr}
 800ee70:	b088      	sub	sp, #32
 800ee72:	af02      	add	r7, sp, #8
 800ee74:	60f8      	str	r0, [r7, #12]
 800ee76:	60b9      	str	r1, [r7, #8]
 800ee78:	603b      	str	r3, [r7, #0]
 800ee7a:	4613      	mov	r3, r2
 800ee7c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	685b      	ldr	r3, [r3, #4]
 800ee86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ee8a:	d112      	bne.n	800eeb2 <HAL_SPI_Receive+0x44>
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	689b      	ldr	r3, [r3, #8]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d10e      	bne.n	800eeb2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	2204      	movs	r2, #4
 800ee98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ee9c:	88fa      	ldrh	r2, [r7, #6]
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	9300      	str	r3, [sp, #0]
 800eea2:	4613      	mov	r3, r2
 800eea4:	68ba      	ldr	r2, [r7, #8]
 800eea6:	68b9      	ldr	r1, [r7, #8]
 800eea8:	68f8      	ldr	r0, [r7, #12]
 800eeaa:	f000 f8f1 	bl	800f090 <HAL_SPI_TransmitReceive>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	e0ea      	b.n	800f088 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800eeb8:	2b01      	cmp	r3, #1
 800eeba:	d101      	bne.n	800eec0 <HAL_SPI_Receive+0x52>
 800eebc:	2302      	movs	r3, #2
 800eebe:	e0e3      	b.n	800f088 <HAL_SPI_Receive+0x21a>
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	2201      	movs	r2, #1
 800eec4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eec8:	f7fe fc52 	bl	800d770 <HAL_GetTick>
 800eecc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800eed4:	b2db      	uxtb	r3, r3
 800eed6:	2b01      	cmp	r3, #1
 800eed8:	d002      	beq.n	800eee0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800eeda:	2302      	movs	r3, #2
 800eedc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800eede:	e0ca      	b.n	800f076 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800eee0:	68bb      	ldr	r3, [r7, #8]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d002      	beq.n	800eeec <HAL_SPI_Receive+0x7e>
 800eee6:	88fb      	ldrh	r3, [r7, #6]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d102      	bne.n	800eef2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800eeec:	2301      	movs	r3, #1
 800eeee:	75fb      	strb	r3, [r7, #23]
    goto error;
 800eef0:	e0c1      	b.n	800f076 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	2204      	movs	r2, #4
 800eef6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	2200      	movs	r2, #0
 800eefe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	68ba      	ldr	r2, [r7, #8]
 800ef04:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	88fa      	ldrh	r2, [r7, #6]
 800ef0a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	88fa      	ldrh	r2, [r7, #6]
 800ef10:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	2200      	movs	r2, #0
 800ef16:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	2200      	movs	r2, #0
 800ef22:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	2200      	movs	r2, #0
 800ef28:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	689b      	ldr	r3, [r3, #8]
 800ef34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ef38:	d10f      	bne.n	800ef5a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	681a      	ldr	r2, [r3, #0]
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ef48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	681a      	ldr	r2, [r3, #0]
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ef58:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef64:	2b40      	cmp	r3, #64	@ 0x40
 800ef66:	d007      	beq.n	800ef78 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	681a      	ldr	r2, [r3, #0]
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ef76:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	68db      	ldr	r3, [r3, #12]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d162      	bne.n	800f046 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800ef80:	e02e      	b.n	800efe0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	689b      	ldr	r3, [r3, #8]
 800ef88:	f003 0301 	and.w	r3, r3, #1
 800ef8c:	2b01      	cmp	r3, #1
 800ef8e:	d115      	bne.n	800efbc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	f103 020c 	add.w	r2, r3, #12
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef9c:	7812      	ldrb	r2, [r2, #0]
 800ef9e:	b2d2      	uxtb	r2, r2
 800efa0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800efa6:	1c5a      	adds	r2, r3, #1
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800efb0:	b29b      	uxth	r3, r3
 800efb2:	3b01      	subs	r3, #1
 800efb4:	b29a      	uxth	r2, r3
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800efba:	e011      	b.n	800efe0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800efbc:	f7fe fbd8 	bl	800d770 <HAL_GetTick>
 800efc0:	4602      	mov	r2, r0
 800efc2:	693b      	ldr	r3, [r7, #16]
 800efc4:	1ad3      	subs	r3, r2, r3
 800efc6:	683a      	ldr	r2, [r7, #0]
 800efc8:	429a      	cmp	r2, r3
 800efca:	d803      	bhi.n	800efd4 <HAL_SPI_Receive+0x166>
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800efd2:	d102      	bne.n	800efda <HAL_SPI_Receive+0x16c>
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d102      	bne.n	800efe0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800efda:	2303      	movs	r3, #3
 800efdc:	75fb      	strb	r3, [r7, #23]
          goto error;
 800efde:	e04a      	b.n	800f076 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800efe4:	b29b      	uxth	r3, r3
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d1cb      	bne.n	800ef82 <HAL_SPI_Receive+0x114>
 800efea:	e031      	b.n	800f050 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	689b      	ldr	r3, [r3, #8]
 800eff2:	f003 0301 	and.w	r3, r3, #1
 800eff6:	2b01      	cmp	r3, #1
 800eff8:	d113      	bne.n	800f022 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	68da      	ldr	r2, [r3, #12]
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f004:	b292      	uxth	r2, r2
 800f006:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f00c:	1c9a      	adds	r2, r3, #2
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f016:	b29b      	uxth	r3, r3
 800f018:	3b01      	subs	r3, #1
 800f01a:	b29a      	uxth	r2, r3
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f020:	e011      	b.n	800f046 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f022:	f7fe fba5 	bl	800d770 <HAL_GetTick>
 800f026:	4602      	mov	r2, r0
 800f028:	693b      	ldr	r3, [r7, #16]
 800f02a:	1ad3      	subs	r3, r2, r3
 800f02c:	683a      	ldr	r2, [r7, #0]
 800f02e:	429a      	cmp	r2, r3
 800f030:	d803      	bhi.n	800f03a <HAL_SPI_Receive+0x1cc>
 800f032:	683b      	ldr	r3, [r7, #0]
 800f034:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f038:	d102      	bne.n	800f040 <HAL_SPI_Receive+0x1d2>
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d102      	bne.n	800f046 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800f040:	2303      	movs	r3, #3
 800f042:	75fb      	strb	r3, [r7, #23]
          goto error;
 800f044:	e017      	b.n	800f076 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f04a:	b29b      	uxth	r3, r3
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d1cd      	bne.n	800efec <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f050:	693a      	ldr	r2, [r7, #16]
 800f052:	6839      	ldr	r1, [r7, #0]
 800f054:	68f8      	ldr	r0, [r7, #12]
 800f056:	f000 fa45 	bl	800f4e4 <SPI_EndRxTransaction>
 800f05a:	4603      	mov	r3, r0
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d002      	beq.n	800f066 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	2220      	movs	r2, #32
 800f064:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d002      	beq.n	800f074 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800f06e:	2301      	movs	r3, #1
 800f070:	75fb      	strb	r3, [r7, #23]
 800f072:	e000      	b.n	800f076 <HAL_SPI_Receive+0x208>
  }

error :
 800f074:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	2201      	movs	r2, #1
 800f07a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	2200      	movs	r2, #0
 800f082:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800f086:	7dfb      	ldrb	r3, [r7, #23]
}
 800f088:	4618      	mov	r0, r3
 800f08a:	3718      	adds	r7, #24
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}

0800f090 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b08c      	sub	sp, #48	@ 0x30
 800f094:	af00      	add	r7, sp, #0
 800f096:	60f8      	str	r0, [r7, #12]
 800f098:	60b9      	str	r1, [r7, #8]
 800f09a:	607a      	str	r2, [r7, #4]
 800f09c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f09e:	2301      	movs	r3, #1
 800f0a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f0ae:	2b01      	cmp	r3, #1
 800f0b0:	d101      	bne.n	800f0b6 <HAL_SPI_TransmitReceive+0x26>
 800f0b2:	2302      	movs	r3, #2
 800f0b4:	e18a      	b.n	800f3cc <HAL_SPI_TransmitReceive+0x33c>
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	2201      	movs	r2, #1
 800f0ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f0be:	f7fe fb57 	bl	800d770 <HAL_GetTick>
 800f0c2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f0ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	685b      	ldr	r3, [r3, #4]
 800f0d2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800f0d4:	887b      	ldrh	r3, [r7, #2]
 800f0d6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f0d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f0dc:	2b01      	cmp	r3, #1
 800f0de:	d00f      	beq.n	800f100 <HAL_SPI_TransmitReceive+0x70>
 800f0e0:	69fb      	ldr	r3, [r7, #28]
 800f0e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f0e6:	d107      	bne.n	800f0f8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	689b      	ldr	r3, [r3, #8]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d103      	bne.n	800f0f8 <HAL_SPI_TransmitReceive+0x68>
 800f0f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f0f4:	2b04      	cmp	r3, #4
 800f0f6:	d003      	beq.n	800f100 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800f0f8:	2302      	movs	r3, #2
 800f0fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800f0fe:	e15b      	b.n	800f3b8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f100:	68bb      	ldr	r3, [r7, #8]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d005      	beq.n	800f112 <HAL_SPI_TransmitReceive+0x82>
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d002      	beq.n	800f112 <HAL_SPI_TransmitReceive+0x82>
 800f10c:	887b      	ldrh	r3, [r7, #2]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d103      	bne.n	800f11a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800f112:	2301      	movs	r3, #1
 800f114:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800f118:	e14e      	b.n	800f3b8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f120:	b2db      	uxtb	r3, r3
 800f122:	2b04      	cmp	r3, #4
 800f124:	d003      	beq.n	800f12e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	2205      	movs	r2, #5
 800f12a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	2200      	movs	r2, #0
 800f132:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	687a      	ldr	r2, [r7, #4]
 800f138:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	887a      	ldrh	r2, [r7, #2]
 800f13e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	887a      	ldrh	r2, [r7, #2]
 800f144:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	68ba      	ldr	r2, [r7, #8]
 800f14a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	887a      	ldrh	r2, [r7, #2]
 800f150:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	887a      	ldrh	r2, [r7, #2]
 800f156:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	2200      	movs	r2, #0
 800f15c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	2200      	movs	r2, #0
 800f162:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f16e:	2b40      	cmp	r3, #64	@ 0x40
 800f170:	d007      	beq.n	800f182 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	681a      	ldr	r2, [r3, #0]
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f180:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	68db      	ldr	r3, [r3, #12]
 800f186:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f18a:	d178      	bne.n	800f27e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	685b      	ldr	r3, [r3, #4]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d002      	beq.n	800f19a <HAL_SPI_TransmitReceive+0x10a>
 800f194:	8b7b      	ldrh	r3, [r7, #26]
 800f196:	2b01      	cmp	r3, #1
 800f198:	d166      	bne.n	800f268 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f19e:	881a      	ldrh	r2, [r3, #0]
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f1aa:	1c9a      	adds	r2, r3, #2
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f1b4:	b29b      	uxth	r3, r3
 800f1b6:	3b01      	subs	r3, #1
 800f1b8:	b29a      	uxth	r2, r3
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f1be:	e053      	b.n	800f268 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	689b      	ldr	r3, [r3, #8]
 800f1c6:	f003 0302 	and.w	r3, r3, #2
 800f1ca:	2b02      	cmp	r3, #2
 800f1cc:	d11b      	bne.n	800f206 <HAL_SPI_TransmitReceive+0x176>
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f1d2:	b29b      	uxth	r3, r3
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d016      	beq.n	800f206 <HAL_SPI_TransmitReceive+0x176>
 800f1d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1da:	2b01      	cmp	r3, #1
 800f1dc:	d113      	bne.n	800f206 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f1e2:	881a      	ldrh	r2, [r3, #0]
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f1ee:	1c9a      	adds	r2, r3, #2
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f1f8:	b29b      	uxth	r3, r3
 800f1fa:	3b01      	subs	r3, #1
 800f1fc:	b29a      	uxth	r2, r3
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f202:	2300      	movs	r3, #0
 800f204:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	689b      	ldr	r3, [r3, #8]
 800f20c:	f003 0301 	and.w	r3, r3, #1
 800f210:	2b01      	cmp	r3, #1
 800f212:	d119      	bne.n	800f248 <HAL_SPI_TransmitReceive+0x1b8>
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f218:	b29b      	uxth	r3, r3
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d014      	beq.n	800f248 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	68da      	ldr	r2, [r3, #12]
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f228:	b292      	uxth	r2, r2
 800f22a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f230:	1c9a      	adds	r2, r3, #2
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f23a:	b29b      	uxth	r3, r3
 800f23c:	3b01      	subs	r3, #1
 800f23e:	b29a      	uxth	r2, r3
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f244:	2301      	movs	r3, #1
 800f246:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f248:	f7fe fa92 	bl	800d770 <HAL_GetTick>
 800f24c:	4602      	mov	r2, r0
 800f24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f250:	1ad3      	subs	r3, r2, r3
 800f252:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f254:	429a      	cmp	r2, r3
 800f256:	d807      	bhi.n	800f268 <HAL_SPI_TransmitReceive+0x1d8>
 800f258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f25a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f25e:	d003      	beq.n	800f268 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800f260:	2303      	movs	r3, #3
 800f262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800f266:	e0a7      	b.n	800f3b8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f26c:	b29b      	uxth	r3, r3
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d1a6      	bne.n	800f1c0 <HAL_SPI_TransmitReceive+0x130>
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f276:	b29b      	uxth	r3, r3
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d1a1      	bne.n	800f1c0 <HAL_SPI_TransmitReceive+0x130>
 800f27c:	e07c      	b.n	800f378 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	685b      	ldr	r3, [r3, #4]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d002      	beq.n	800f28c <HAL_SPI_TransmitReceive+0x1fc>
 800f286:	8b7b      	ldrh	r3, [r7, #26]
 800f288:	2b01      	cmp	r3, #1
 800f28a:	d16b      	bne.n	800f364 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	330c      	adds	r3, #12
 800f296:	7812      	ldrb	r2, [r2, #0]
 800f298:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f29e:	1c5a      	adds	r2, r3, #1
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f2a8:	b29b      	uxth	r3, r3
 800f2aa:	3b01      	subs	r3, #1
 800f2ac:	b29a      	uxth	r2, r3
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f2b2:	e057      	b.n	800f364 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	689b      	ldr	r3, [r3, #8]
 800f2ba:	f003 0302 	and.w	r3, r3, #2
 800f2be:	2b02      	cmp	r3, #2
 800f2c0:	d11c      	bne.n	800f2fc <HAL_SPI_TransmitReceive+0x26c>
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f2c6:	b29b      	uxth	r3, r3
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d017      	beq.n	800f2fc <HAL_SPI_TransmitReceive+0x26c>
 800f2cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2ce:	2b01      	cmp	r3, #1
 800f2d0:	d114      	bne.n	800f2fc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	330c      	adds	r3, #12
 800f2dc:	7812      	ldrb	r2, [r2, #0]
 800f2de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f2e4:	1c5a      	adds	r2, r3, #1
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f2ee:	b29b      	uxth	r3, r3
 800f2f0:	3b01      	subs	r3, #1
 800f2f2:	b29a      	uxth	r2, r3
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	689b      	ldr	r3, [r3, #8]
 800f302:	f003 0301 	and.w	r3, r3, #1
 800f306:	2b01      	cmp	r3, #1
 800f308:	d119      	bne.n	800f33e <HAL_SPI_TransmitReceive+0x2ae>
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f30e:	b29b      	uxth	r3, r3
 800f310:	2b00      	cmp	r3, #0
 800f312:	d014      	beq.n	800f33e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	68da      	ldr	r2, [r3, #12]
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f31e:	b2d2      	uxtb	r2, r2
 800f320:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f326:	1c5a      	adds	r2, r3, #1
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f330:	b29b      	uxth	r3, r3
 800f332:	3b01      	subs	r3, #1
 800f334:	b29a      	uxth	r2, r3
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f33a:	2301      	movs	r3, #1
 800f33c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f33e:	f7fe fa17 	bl	800d770 <HAL_GetTick>
 800f342:	4602      	mov	r2, r0
 800f344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f346:	1ad3      	subs	r3, r2, r3
 800f348:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f34a:	429a      	cmp	r2, r3
 800f34c:	d803      	bhi.n	800f356 <HAL_SPI_TransmitReceive+0x2c6>
 800f34e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f350:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f354:	d102      	bne.n	800f35c <HAL_SPI_TransmitReceive+0x2cc>
 800f356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d103      	bne.n	800f364 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800f35c:	2303      	movs	r3, #3
 800f35e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800f362:	e029      	b.n	800f3b8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f368:	b29b      	uxth	r3, r3
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d1a2      	bne.n	800f2b4 <HAL_SPI_TransmitReceive+0x224>
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f372:	b29b      	uxth	r3, r3
 800f374:	2b00      	cmp	r3, #0
 800f376:	d19d      	bne.n	800f2b4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f378:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f37a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f37c:	68f8      	ldr	r0, [r7, #12]
 800f37e:	f000 f917 	bl	800f5b0 <SPI_EndRxTxTransaction>
 800f382:	4603      	mov	r3, r0
 800f384:	2b00      	cmp	r3, #0
 800f386:	d006      	beq.n	800f396 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800f388:	2301      	movs	r3, #1
 800f38a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	2220      	movs	r2, #32
 800f392:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800f394:	e010      	b.n	800f3b8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	689b      	ldr	r3, [r3, #8]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d10b      	bne.n	800f3b6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f39e:	2300      	movs	r3, #0
 800f3a0:	617b      	str	r3, [r7, #20]
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	68db      	ldr	r3, [r3, #12]
 800f3a8:	617b      	str	r3, [r7, #20]
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	689b      	ldr	r3, [r3, #8]
 800f3b0:	617b      	str	r3, [r7, #20]
 800f3b2:	697b      	ldr	r3, [r7, #20]
 800f3b4:	e000      	b.n	800f3b8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800f3b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	2201      	movs	r2, #1
 800f3bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800f3c8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	3730      	adds	r7, #48	@ 0x30
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}

0800f3d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b088      	sub	sp, #32
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	60f8      	str	r0, [r7, #12]
 800f3dc:	60b9      	str	r1, [r7, #8]
 800f3de:	603b      	str	r3, [r7, #0]
 800f3e0:	4613      	mov	r3, r2
 800f3e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f3e4:	f7fe f9c4 	bl	800d770 <HAL_GetTick>
 800f3e8:	4602      	mov	r2, r0
 800f3ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3ec:	1a9b      	subs	r3, r3, r2
 800f3ee:	683a      	ldr	r2, [r7, #0]
 800f3f0:	4413      	add	r3, r2
 800f3f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f3f4:	f7fe f9bc 	bl	800d770 <HAL_GetTick>
 800f3f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f3fa:	4b39      	ldr	r3, [pc, #228]	@ (800f4e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	015b      	lsls	r3, r3, #5
 800f400:	0d1b      	lsrs	r3, r3, #20
 800f402:	69fa      	ldr	r2, [r7, #28]
 800f404:	fb02 f303 	mul.w	r3, r2, r3
 800f408:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f40a:	e054      	b.n	800f4b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f412:	d050      	beq.n	800f4b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f414:	f7fe f9ac 	bl	800d770 <HAL_GetTick>
 800f418:	4602      	mov	r2, r0
 800f41a:	69bb      	ldr	r3, [r7, #24]
 800f41c:	1ad3      	subs	r3, r2, r3
 800f41e:	69fa      	ldr	r2, [r7, #28]
 800f420:	429a      	cmp	r2, r3
 800f422:	d902      	bls.n	800f42a <SPI_WaitFlagStateUntilTimeout+0x56>
 800f424:	69fb      	ldr	r3, [r7, #28]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d13d      	bne.n	800f4a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	685a      	ldr	r2, [r3, #4]
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f438:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	685b      	ldr	r3, [r3, #4]
 800f43e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f442:	d111      	bne.n	800f468 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	689b      	ldr	r3, [r3, #8]
 800f448:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f44c:	d004      	beq.n	800f458 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	689b      	ldr	r3, [r3, #8]
 800f452:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f456:	d107      	bne.n	800f468 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	681a      	ldr	r2, [r3, #0]
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f466:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f46c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f470:	d10f      	bne.n	800f492 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	681a      	ldr	r2, [r3, #0]
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f480:	601a      	str	r2, [r3, #0]
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	681a      	ldr	r2, [r3, #0]
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f490:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	2201      	movs	r2, #1
 800f496:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	2200      	movs	r2, #0
 800f49e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800f4a2:	2303      	movs	r3, #3
 800f4a4:	e017      	b.n	800f4d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f4a6:	697b      	ldr	r3, [r7, #20]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d101      	bne.n	800f4b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f4b0:	697b      	ldr	r3, [r7, #20]
 800f4b2:	3b01      	subs	r3, #1
 800f4b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	689a      	ldr	r2, [r3, #8]
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	4013      	ands	r3, r2
 800f4c0:	68ba      	ldr	r2, [r7, #8]
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	bf0c      	ite	eq
 800f4c6:	2301      	moveq	r3, #1
 800f4c8:	2300      	movne	r3, #0
 800f4ca:	b2db      	uxtb	r3, r3
 800f4cc:	461a      	mov	r2, r3
 800f4ce:	79fb      	ldrb	r3, [r7, #7]
 800f4d0:	429a      	cmp	r2, r3
 800f4d2:	d19b      	bne.n	800f40c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f4d4:	2300      	movs	r3, #0
}
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	3720      	adds	r7, #32
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bd80      	pop	{r7, pc}
 800f4de:	bf00      	nop
 800f4e0:	20000004 	.word	0x20000004

0800f4e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b086      	sub	sp, #24
 800f4e8:	af02      	add	r7, sp, #8
 800f4ea:	60f8      	str	r0, [r7, #12]
 800f4ec:	60b9      	str	r1, [r7, #8]
 800f4ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	685b      	ldr	r3, [r3, #4]
 800f4f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f4f8:	d111      	bne.n	800f51e <SPI_EndRxTransaction+0x3a>
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	689b      	ldr	r3, [r3, #8]
 800f4fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f502:	d004      	beq.n	800f50e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	689b      	ldr	r3, [r3, #8]
 800f508:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f50c:	d107      	bne.n	800f51e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	681a      	ldr	r2, [r3, #0]
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f51c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	685b      	ldr	r3, [r3, #4]
 800f522:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f526:	d12a      	bne.n	800f57e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	689b      	ldr	r3, [r3, #8]
 800f52c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f530:	d012      	beq.n	800f558 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	9300      	str	r3, [sp, #0]
 800f536:	68bb      	ldr	r3, [r7, #8]
 800f538:	2200      	movs	r2, #0
 800f53a:	2180      	movs	r1, #128	@ 0x80
 800f53c:	68f8      	ldr	r0, [r7, #12]
 800f53e:	f7ff ff49 	bl	800f3d4 <SPI_WaitFlagStateUntilTimeout>
 800f542:	4603      	mov	r3, r0
 800f544:	2b00      	cmp	r3, #0
 800f546:	d02d      	beq.n	800f5a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f54c:	f043 0220 	orr.w	r2, r3, #32
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800f554:	2303      	movs	r3, #3
 800f556:	e026      	b.n	800f5a6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	9300      	str	r3, [sp, #0]
 800f55c:	68bb      	ldr	r3, [r7, #8]
 800f55e:	2200      	movs	r2, #0
 800f560:	2101      	movs	r1, #1
 800f562:	68f8      	ldr	r0, [r7, #12]
 800f564:	f7ff ff36 	bl	800f3d4 <SPI_WaitFlagStateUntilTimeout>
 800f568:	4603      	mov	r3, r0
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d01a      	beq.n	800f5a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f572:	f043 0220 	orr.w	r2, r3, #32
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800f57a:	2303      	movs	r3, #3
 800f57c:	e013      	b.n	800f5a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	9300      	str	r3, [sp, #0]
 800f582:	68bb      	ldr	r3, [r7, #8]
 800f584:	2200      	movs	r2, #0
 800f586:	2101      	movs	r1, #1
 800f588:	68f8      	ldr	r0, [r7, #12]
 800f58a:	f7ff ff23 	bl	800f3d4 <SPI_WaitFlagStateUntilTimeout>
 800f58e:	4603      	mov	r3, r0
 800f590:	2b00      	cmp	r3, #0
 800f592:	d007      	beq.n	800f5a4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f598:	f043 0220 	orr.w	r2, r3, #32
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800f5a0:	2303      	movs	r3, #3
 800f5a2:	e000      	b.n	800f5a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800f5a4:	2300      	movs	r3, #0
}
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	3710      	adds	r7, #16
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	bd80      	pop	{r7, pc}
	...

0800f5b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b088      	sub	sp, #32
 800f5b4:	af02      	add	r7, sp, #8
 800f5b6:	60f8      	str	r0, [r7, #12]
 800f5b8:	60b9      	str	r1, [r7, #8]
 800f5ba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f5bc:	4b1b      	ldr	r3, [pc, #108]	@ (800f62c <SPI_EndRxTxTransaction+0x7c>)
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	4a1b      	ldr	r2, [pc, #108]	@ (800f630 <SPI_EndRxTxTransaction+0x80>)
 800f5c2:	fba2 2303 	umull	r2, r3, r2, r3
 800f5c6:	0d5b      	lsrs	r3, r3, #21
 800f5c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f5cc:	fb02 f303 	mul.w	r3, r2, r3
 800f5d0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	685b      	ldr	r3, [r3, #4]
 800f5d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f5da:	d112      	bne.n	800f602 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	9300      	str	r3, [sp, #0]
 800f5e0:	68bb      	ldr	r3, [r7, #8]
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	2180      	movs	r1, #128	@ 0x80
 800f5e6:	68f8      	ldr	r0, [r7, #12]
 800f5e8:	f7ff fef4 	bl	800f3d4 <SPI_WaitFlagStateUntilTimeout>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d016      	beq.n	800f620 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f5f6:	f043 0220 	orr.w	r2, r3, #32
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800f5fe:	2303      	movs	r3, #3
 800f600:	e00f      	b.n	800f622 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f602:	697b      	ldr	r3, [r7, #20]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d00a      	beq.n	800f61e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800f608:	697b      	ldr	r3, [r7, #20]
 800f60a:	3b01      	subs	r3, #1
 800f60c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	689b      	ldr	r3, [r3, #8]
 800f614:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f618:	2b80      	cmp	r3, #128	@ 0x80
 800f61a:	d0f2      	beq.n	800f602 <SPI_EndRxTxTransaction+0x52>
 800f61c:	e000      	b.n	800f620 <SPI_EndRxTxTransaction+0x70>
        break;
 800f61e:	bf00      	nop
  }

  return HAL_OK;
 800f620:	2300      	movs	r3, #0
}
 800f622:	4618      	mov	r0, r3
 800f624:	3718      	adds	r7, #24
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}
 800f62a:	bf00      	nop
 800f62c:	20000004 	.word	0x20000004
 800f630:	165e9f81 	.word	0x165e9f81

0800f634 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b082      	sub	sp, #8
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d101      	bne.n	800f646 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f642:	2301      	movs	r3, #1
 800f644:	e041      	b.n	800f6ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f64c:	b2db      	uxtb	r3, r3
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d106      	bne.n	800f660 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	2200      	movs	r2, #0
 800f656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f65a:	6878      	ldr	r0, [r7, #4]
 800f65c:	f7fd fe66 	bl	800d32c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	2202      	movs	r2, #2
 800f664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	681a      	ldr	r2, [r3, #0]
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	3304      	adds	r3, #4
 800f670:	4619      	mov	r1, r3
 800f672:	4610      	mov	r0, r2
 800f674:	f000 fa24 	bl	800fac0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	2201      	movs	r2, #1
 800f67c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2201      	movs	r2, #1
 800f684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2201      	movs	r2, #1
 800f68c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	2201      	movs	r2, #1
 800f694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2201      	movs	r2, #1
 800f69c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	2201      	movs	r2, #1
 800f6a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	2201      	movs	r2, #1
 800f6ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2201      	movs	r2, #1
 800f6b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2201      	movs	r2, #1
 800f6bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2201      	movs	r2, #1
 800f6c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f6c8:	2300      	movs	r3, #0
}
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	3708      	adds	r7, #8
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd80      	pop	{r7, pc}

0800f6d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f6d2:	b580      	push	{r7, lr}
 800f6d4:	b082      	sub	sp, #8
 800f6d6:	af00      	add	r7, sp, #0
 800f6d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	691b      	ldr	r3, [r3, #16]
 800f6e0:	f003 0302 	and.w	r3, r3, #2
 800f6e4:	2b02      	cmp	r3, #2
 800f6e6:	d122      	bne.n	800f72e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	68db      	ldr	r3, [r3, #12]
 800f6ee:	f003 0302 	and.w	r3, r3, #2
 800f6f2:	2b02      	cmp	r3, #2
 800f6f4:	d11b      	bne.n	800f72e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	f06f 0202 	mvn.w	r2, #2
 800f6fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2201      	movs	r2, #1
 800f704:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	699b      	ldr	r3, [r3, #24]
 800f70c:	f003 0303 	and.w	r3, r3, #3
 800f710:	2b00      	cmp	r3, #0
 800f712:	d003      	beq.n	800f71c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f714:	6878      	ldr	r0, [r7, #4]
 800f716:	f000 f9b5 	bl	800fa84 <HAL_TIM_IC_CaptureCallback>
 800f71a:	e005      	b.n	800f728 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f71c:	6878      	ldr	r0, [r7, #4]
 800f71e:	f000 f9a7 	bl	800fa70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f722:	6878      	ldr	r0, [r7, #4]
 800f724:	f000 f9b8 	bl	800fa98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	2200      	movs	r2, #0
 800f72c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	691b      	ldr	r3, [r3, #16]
 800f734:	f003 0304 	and.w	r3, r3, #4
 800f738:	2b04      	cmp	r3, #4
 800f73a:	d122      	bne.n	800f782 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	68db      	ldr	r3, [r3, #12]
 800f742:	f003 0304 	and.w	r3, r3, #4
 800f746:	2b04      	cmp	r3, #4
 800f748:	d11b      	bne.n	800f782 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	f06f 0204 	mvn.w	r2, #4
 800f752:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2202      	movs	r2, #2
 800f758:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	699b      	ldr	r3, [r3, #24]
 800f760:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f764:	2b00      	cmp	r3, #0
 800f766:	d003      	beq.n	800f770 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f768:	6878      	ldr	r0, [r7, #4]
 800f76a:	f000 f98b 	bl	800fa84 <HAL_TIM_IC_CaptureCallback>
 800f76e:	e005      	b.n	800f77c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f770:	6878      	ldr	r0, [r7, #4]
 800f772:	f000 f97d 	bl	800fa70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f776:	6878      	ldr	r0, [r7, #4]
 800f778:	f000 f98e 	bl	800fa98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	2200      	movs	r2, #0
 800f780:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	691b      	ldr	r3, [r3, #16]
 800f788:	f003 0308 	and.w	r3, r3, #8
 800f78c:	2b08      	cmp	r3, #8
 800f78e:	d122      	bne.n	800f7d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	68db      	ldr	r3, [r3, #12]
 800f796:	f003 0308 	and.w	r3, r3, #8
 800f79a:	2b08      	cmp	r3, #8
 800f79c:	d11b      	bne.n	800f7d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	f06f 0208 	mvn.w	r2, #8
 800f7a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	2204      	movs	r2, #4
 800f7ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	69db      	ldr	r3, [r3, #28]
 800f7b4:	f003 0303 	and.w	r3, r3, #3
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d003      	beq.n	800f7c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f7bc:	6878      	ldr	r0, [r7, #4]
 800f7be:	f000 f961 	bl	800fa84 <HAL_TIM_IC_CaptureCallback>
 800f7c2:	e005      	b.n	800f7d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f7c4:	6878      	ldr	r0, [r7, #4]
 800f7c6:	f000 f953 	bl	800fa70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f7ca:	6878      	ldr	r0, [r7, #4]
 800f7cc:	f000 f964 	bl	800fa98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	691b      	ldr	r3, [r3, #16]
 800f7dc:	f003 0310 	and.w	r3, r3, #16
 800f7e0:	2b10      	cmp	r3, #16
 800f7e2:	d122      	bne.n	800f82a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	68db      	ldr	r3, [r3, #12]
 800f7ea:	f003 0310 	and.w	r3, r3, #16
 800f7ee:	2b10      	cmp	r3, #16
 800f7f0:	d11b      	bne.n	800f82a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	f06f 0210 	mvn.w	r2, #16
 800f7fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2208      	movs	r2, #8
 800f800:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	69db      	ldr	r3, [r3, #28]
 800f808:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d003      	beq.n	800f818 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f000 f937 	bl	800fa84 <HAL_TIM_IC_CaptureCallback>
 800f816:	e005      	b.n	800f824 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f818:	6878      	ldr	r0, [r7, #4]
 800f81a:	f000 f929 	bl	800fa70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f81e:	6878      	ldr	r0, [r7, #4]
 800f820:	f000 f93a 	bl	800fa98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	2200      	movs	r2, #0
 800f828:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	691b      	ldr	r3, [r3, #16]
 800f830:	f003 0301 	and.w	r3, r3, #1
 800f834:	2b01      	cmp	r3, #1
 800f836:	d10e      	bne.n	800f856 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	68db      	ldr	r3, [r3, #12]
 800f83e:	f003 0301 	and.w	r3, r3, #1
 800f842:	2b01      	cmp	r3, #1
 800f844:	d107      	bne.n	800f856 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	f06f 0201 	mvn.w	r2, #1
 800f84e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f850:	6878      	ldr	r0, [r7, #4]
 800f852:	f7fd fc65 	bl	800d120 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	691b      	ldr	r3, [r3, #16]
 800f85c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f860:	2b80      	cmp	r3, #128	@ 0x80
 800f862:	d10e      	bne.n	800f882 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	68db      	ldr	r3, [r3, #12]
 800f86a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f86e:	2b80      	cmp	r3, #128	@ 0x80
 800f870:	d107      	bne.n	800f882 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800f87a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f87c:	6878      	ldr	r0, [r7, #4]
 800f87e:	f000 fadf 	bl	800fe40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	691b      	ldr	r3, [r3, #16]
 800f888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f88c:	2b40      	cmp	r3, #64	@ 0x40
 800f88e:	d10e      	bne.n	800f8ae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	68db      	ldr	r3, [r3, #12]
 800f896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f89a:	2b40      	cmp	r3, #64	@ 0x40
 800f89c:	d107      	bne.n	800f8ae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f8a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f000 f8ff 	bl	800faac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	691b      	ldr	r3, [r3, #16]
 800f8b4:	f003 0320 	and.w	r3, r3, #32
 800f8b8:	2b20      	cmp	r3, #32
 800f8ba:	d10e      	bne.n	800f8da <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	68db      	ldr	r3, [r3, #12]
 800f8c2:	f003 0320 	and.w	r3, r3, #32
 800f8c6:	2b20      	cmp	r3, #32
 800f8c8:	d107      	bne.n	800f8da <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	f06f 0220 	mvn.w	r2, #32
 800f8d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f000 faa9 	bl	800fe2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f8da:	bf00      	nop
 800f8dc:	3708      	adds	r7, #8
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	bd80      	pop	{r7, pc}

0800f8e2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f8e2:	b580      	push	{r7, lr}
 800f8e4:	b084      	sub	sp, #16
 800f8e6:	af00      	add	r7, sp, #0
 800f8e8:	6078      	str	r0, [r7, #4]
 800f8ea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f8f6:	2b01      	cmp	r3, #1
 800f8f8:	d101      	bne.n	800f8fe <HAL_TIM_ConfigClockSource+0x1c>
 800f8fa:	2302      	movs	r3, #2
 800f8fc:	e0b4      	b.n	800fa68 <HAL_TIM_ConfigClockSource+0x186>
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	2201      	movs	r2, #1
 800f902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	2202      	movs	r2, #2
 800f90a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	689b      	ldr	r3, [r3, #8]
 800f914:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f916:	68bb      	ldr	r3, [r7, #8]
 800f918:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800f91c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f91e:	68bb      	ldr	r3, [r7, #8]
 800f920:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f924:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	68ba      	ldr	r2, [r7, #8]
 800f92c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f936:	d03e      	beq.n	800f9b6 <HAL_TIM_ConfigClockSource+0xd4>
 800f938:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f93c:	f200 8087 	bhi.w	800fa4e <HAL_TIM_ConfigClockSource+0x16c>
 800f940:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f944:	f000 8086 	beq.w	800fa54 <HAL_TIM_ConfigClockSource+0x172>
 800f948:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f94c:	d87f      	bhi.n	800fa4e <HAL_TIM_ConfigClockSource+0x16c>
 800f94e:	2b70      	cmp	r3, #112	@ 0x70
 800f950:	d01a      	beq.n	800f988 <HAL_TIM_ConfigClockSource+0xa6>
 800f952:	2b70      	cmp	r3, #112	@ 0x70
 800f954:	d87b      	bhi.n	800fa4e <HAL_TIM_ConfigClockSource+0x16c>
 800f956:	2b60      	cmp	r3, #96	@ 0x60
 800f958:	d050      	beq.n	800f9fc <HAL_TIM_ConfigClockSource+0x11a>
 800f95a:	2b60      	cmp	r3, #96	@ 0x60
 800f95c:	d877      	bhi.n	800fa4e <HAL_TIM_ConfigClockSource+0x16c>
 800f95e:	2b50      	cmp	r3, #80	@ 0x50
 800f960:	d03c      	beq.n	800f9dc <HAL_TIM_ConfigClockSource+0xfa>
 800f962:	2b50      	cmp	r3, #80	@ 0x50
 800f964:	d873      	bhi.n	800fa4e <HAL_TIM_ConfigClockSource+0x16c>
 800f966:	2b40      	cmp	r3, #64	@ 0x40
 800f968:	d058      	beq.n	800fa1c <HAL_TIM_ConfigClockSource+0x13a>
 800f96a:	2b40      	cmp	r3, #64	@ 0x40
 800f96c:	d86f      	bhi.n	800fa4e <HAL_TIM_ConfigClockSource+0x16c>
 800f96e:	2b30      	cmp	r3, #48	@ 0x30
 800f970:	d064      	beq.n	800fa3c <HAL_TIM_ConfigClockSource+0x15a>
 800f972:	2b30      	cmp	r3, #48	@ 0x30
 800f974:	d86b      	bhi.n	800fa4e <HAL_TIM_ConfigClockSource+0x16c>
 800f976:	2b20      	cmp	r3, #32
 800f978:	d060      	beq.n	800fa3c <HAL_TIM_ConfigClockSource+0x15a>
 800f97a:	2b20      	cmp	r3, #32
 800f97c:	d867      	bhi.n	800fa4e <HAL_TIM_ConfigClockSource+0x16c>
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d05c      	beq.n	800fa3c <HAL_TIM_ConfigClockSource+0x15a>
 800f982:	2b10      	cmp	r3, #16
 800f984:	d05a      	beq.n	800fa3c <HAL_TIM_ConfigClockSource+0x15a>
 800f986:	e062      	b.n	800fa4e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6818      	ldr	r0, [r3, #0]
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	6899      	ldr	r1, [r3, #8]
 800f990:	683b      	ldr	r3, [r7, #0]
 800f992:	685a      	ldr	r2, [r3, #4]
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	68db      	ldr	r3, [r3, #12]
 800f998:	f000 f9ac 	bl	800fcf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	689b      	ldr	r3, [r3, #8]
 800f9a2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f9aa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	68ba      	ldr	r2, [r7, #8]
 800f9b2:	609a      	str	r2, [r3, #8]
      break;
 800f9b4:	e04f      	b.n	800fa56 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	6818      	ldr	r0, [r3, #0]
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	6899      	ldr	r1, [r3, #8]
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	685a      	ldr	r2, [r3, #4]
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	68db      	ldr	r3, [r3, #12]
 800f9c6:	f000 f995 	bl	800fcf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	689a      	ldr	r2, [r3, #8]
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f9d8:	609a      	str	r2, [r3, #8]
      break;
 800f9da:	e03c      	b.n	800fa56 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	6818      	ldr	r0, [r3, #0]
 800f9e0:	683b      	ldr	r3, [r7, #0]
 800f9e2:	6859      	ldr	r1, [r3, #4]
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	68db      	ldr	r3, [r3, #12]
 800f9e8:	461a      	mov	r2, r3
 800f9ea:	f000 f909 	bl	800fc00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	2150      	movs	r1, #80	@ 0x50
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f000 f962 	bl	800fcbe <TIM_ITRx_SetConfig>
      break;
 800f9fa:	e02c      	b.n	800fa56 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	6818      	ldr	r0, [r3, #0]
 800fa00:	683b      	ldr	r3, [r7, #0]
 800fa02:	6859      	ldr	r1, [r3, #4]
 800fa04:	683b      	ldr	r3, [r7, #0]
 800fa06:	68db      	ldr	r3, [r3, #12]
 800fa08:	461a      	mov	r2, r3
 800fa0a:	f000 f928 	bl	800fc5e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	2160      	movs	r1, #96	@ 0x60
 800fa14:	4618      	mov	r0, r3
 800fa16:	f000 f952 	bl	800fcbe <TIM_ITRx_SetConfig>
      break;
 800fa1a:	e01c      	b.n	800fa56 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	6818      	ldr	r0, [r3, #0]
 800fa20:	683b      	ldr	r3, [r7, #0]
 800fa22:	6859      	ldr	r1, [r3, #4]
 800fa24:	683b      	ldr	r3, [r7, #0]
 800fa26:	68db      	ldr	r3, [r3, #12]
 800fa28:	461a      	mov	r2, r3
 800fa2a:	f000 f8e9 	bl	800fc00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	2140      	movs	r1, #64	@ 0x40
 800fa34:	4618      	mov	r0, r3
 800fa36:	f000 f942 	bl	800fcbe <TIM_ITRx_SetConfig>
      break;
 800fa3a:	e00c      	b.n	800fa56 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681a      	ldr	r2, [r3, #0]
 800fa40:	683b      	ldr	r3, [r7, #0]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	4619      	mov	r1, r3
 800fa46:	4610      	mov	r0, r2
 800fa48:	f000 f939 	bl	800fcbe <TIM_ITRx_SetConfig>
      break;
 800fa4c:	e003      	b.n	800fa56 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800fa4e:	2301      	movs	r3, #1
 800fa50:	73fb      	strb	r3, [r7, #15]
      break;
 800fa52:	e000      	b.n	800fa56 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800fa54:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	2201      	movs	r2, #1
 800fa5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	2200      	movs	r2, #0
 800fa62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800fa66:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa68:	4618      	mov	r0, r3
 800fa6a:	3710      	adds	r7, #16
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bd80      	pop	{r7, pc}

0800fa70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fa70:	b480      	push	{r7}
 800fa72:	b083      	sub	sp, #12
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fa78:	bf00      	nop
 800fa7a:	370c      	adds	r7, #12
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa82:	4770      	bx	lr

0800fa84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fa84:	b480      	push	{r7}
 800fa86:	b083      	sub	sp, #12
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fa8c:	bf00      	nop
 800fa8e:	370c      	adds	r7, #12
 800fa90:	46bd      	mov	sp, r7
 800fa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa96:	4770      	bx	lr

0800fa98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fa98:	b480      	push	{r7}
 800fa9a:	b083      	sub	sp, #12
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800faa0:	bf00      	nop
 800faa2:	370c      	adds	r7, #12
 800faa4:	46bd      	mov	sp, r7
 800faa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faaa:	4770      	bx	lr

0800faac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800faac:	b480      	push	{r7}
 800faae:	b083      	sub	sp, #12
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fab4:	bf00      	nop
 800fab6:	370c      	adds	r7, #12
 800fab8:	46bd      	mov	sp, r7
 800faba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabe:	4770      	bx	lr

0800fac0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800fac0:	b480      	push	{r7}
 800fac2:	b085      	sub	sp, #20
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
 800fac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	4a40      	ldr	r2, [pc, #256]	@ (800fbd4 <TIM_Base_SetConfig+0x114>)
 800fad4:	4293      	cmp	r3, r2
 800fad6:	d013      	beq.n	800fb00 <TIM_Base_SetConfig+0x40>
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fade:	d00f      	beq.n	800fb00 <TIM_Base_SetConfig+0x40>
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	4a3d      	ldr	r2, [pc, #244]	@ (800fbd8 <TIM_Base_SetConfig+0x118>)
 800fae4:	4293      	cmp	r3, r2
 800fae6:	d00b      	beq.n	800fb00 <TIM_Base_SetConfig+0x40>
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	4a3c      	ldr	r2, [pc, #240]	@ (800fbdc <TIM_Base_SetConfig+0x11c>)
 800faec:	4293      	cmp	r3, r2
 800faee:	d007      	beq.n	800fb00 <TIM_Base_SetConfig+0x40>
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	4a3b      	ldr	r2, [pc, #236]	@ (800fbe0 <TIM_Base_SetConfig+0x120>)
 800faf4:	4293      	cmp	r3, r2
 800faf6:	d003      	beq.n	800fb00 <TIM_Base_SetConfig+0x40>
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	4a3a      	ldr	r2, [pc, #232]	@ (800fbe4 <TIM_Base_SetConfig+0x124>)
 800fafc:	4293      	cmp	r3, r2
 800fafe:	d108      	bne.n	800fb12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fb06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	685b      	ldr	r3, [r3, #4]
 800fb0c:	68fa      	ldr	r2, [r7, #12]
 800fb0e:	4313      	orrs	r3, r2
 800fb10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	4a2f      	ldr	r2, [pc, #188]	@ (800fbd4 <TIM_Base_SetConfig+0x114>)
 800fb16:	4293      	cmp	r3, r2
 800fb18:	d02b      	beq.n	800fb72 <TIM_Base_SetConfig+0xb2>
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fb20:	d027      	beq.n	800fb72 <TIM_Base_SetConfig+0xb2>
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	4a2c      	ldr	r2, [pc, #176]	@ (800fbd8 <TIM_Base_SetConfig+0x118>)
 800fb26:	4293      	cmp	r3, r2
 800fb28:	d023      	beq.n	800fb72 <TIM_Base_SetConfig+0xb2>
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	4a2b      	ldr	r2, [pc, #172]	@ (800fbdc <TIM_Base_SetConfig+0x11c>)
 800fb2e:	4293      	cmp	r3, r2
 800fb30:	d01f      	beq.n	800fb72 <TIM_Base_SetConfig+0xb2>
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	4a2a      	ldr	r2, [pc, #168]	@ (800fbe0 <TIM_Base_SetConfig+0x120>)
 800fb36:	4293      	cmp	r3, r2
 800fb38:	d01b      	beq.n	800fb72 <TIM_Base_SetConfig+0xb2>
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	4a29      	ldr	r2, [pc, #164]	@ (800fbe4 <TIM_Base_SetConfig+0x124>)
 800fb3e:	4293      	cmp	r3, r2
 800fb40:	d017      	beq.n	800fb72 <TIM_Base_SetConfig+0xb2>
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	4a28      	ldr	r2, [pc, #160]	@ (800fbe8 <TIM_Base_SetConfig+0x128>)
 800fb46:	4293      	cmp	r3, r2
 800fb48:	d013      	beq.n	800fb72 <TIM_Base_SetConfig+0xb2>
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	4a27      	ldr	r2, [pc, #156]	@ (800fbec <TIM_Base_SetConfig+0x12c>)
 800fb4e:	4293      	cmp	r3, r2
 800fb50:	d00f      	beq.n	800fb72 <TIM_Base_SetConfig+0xb2>
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	4a26      	ldr	r2, [pc, #152]	@ (800fbf0 <TIM_Base_SetConfig+0x130>)
 800fb56:	4293      	cmp	r3, r2
 800fb58:	d00b      	beq.n	800fb72 <TIM_Base_SetConfig+0xb2>
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	4a25      	ldr	r2, [pc, #148]	@ (800fbf4 <TIM_Base_SetConfig+0x134>)
 800fb5e:	4293      	cmp	r3, r2
 800fb60:	d007      	beq.n	800fb72 <TIM_Base_SetConfig+0xb2>
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	4a24      	ldr	r2, [pc, #144]	@ (800fbf8 <TIM_Base_SetConfig+0x138>)
 800fb66:	4293      	cmp	r3, r2
 800fb68:	d003      	beq.n	800fb72 <TIM_Base_SetConfig+0xb2>
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	4a23      	ldr	r2, [pc, #140]	@ (800fbfc <TIM_Base_SetConfig+0x13c>)
 800fb6e:	4293      	cmp	r3, r2
 800fb70:	d108      	bne.n	800fb84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fb78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fb7a:	683b      	ldr	r3, [r7, #0]
 800fb7c:	68db      	ldr	r3, [r3, #12]
 800fb7e:	68fa      	ldr	r2, [r7, #12]
 800fb80:	4313      	orrs	r3, r2
 800fb82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800fb8a:	683b      	ldr	r3, [r7, #0]
 800fb8c:	695b      	ldr	r3, [r3, #20]
 800fb8e:	4313      	orrs	r3, r2
 800fb90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	68fa      	ldr	r2, [r7, #12]
 800fb96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	689a      	ldr	r2, [r3, #8]
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fba0:	683b      	ldr	r3, [r7, #0]
 800fba2:	681a      	ldr	r2, [r3, #0]
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	4a0a      	ldr	r2, [pc, #40]	@ (800fbd4 <TIM_Base_SetConfig+0x114>)
 800fbac:	4293      	cmp	r3, r2
 800fbae:	d003      	beq.n	800fbb8 <TIM_Base_SetConfig+0xf8>
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	4a0c      	ldr	r2, [pc, #48]	@ (800fbe4 <TIM_Base_SetConfig+0x124>)
 800fbb4:	4293      	cmp	r3, r2
 800fbb6:	d103      	bne.n	800fbc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	691a      	ldr	r2, [r3, #16]
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	2201      	movs	r2, #1
 800fbc4:	615a      	str	r2, [r3, #20]
}
 800fbc6:	bf00      	nop
 800fbc8:	3714      	adds	r7, #20
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd0:	4770      	bx	lr
 800fbd2:	bf00      	nop
 800fbd4:	40010000 	.word	0x40010000
 800fbd8:	40000400 	.word	0x40000400
 800fbdc:	40000800 	.word	0x40000800
 800fbe0:	40000c00 	.word	0x40000c00
 800fbe4:	40010400 	.word	0x40010400
 800fbe8:	40014000 	.word	0x40014000
 800fbec:	40014400 	.word	0x40014400
 800fbf0:	40014800 	.word	0x40014800
 800fbf4:	40001800 	.word	0x40001800
 800fbf8:	40001c00 	.word	0x40001c00
 800fbfc:	40002000 	.word	0x40002000

0800fc00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fc00:	b480      	push	{r7}
 800fc02:	b087      	sub	sp, #28
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	60f8      	str	r0, [r7, #12]
 800fc08:	60b9      	str	r1, [r7, #8]
 800fc0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	6a1b      	ldr	r3, [r3, #32]
 800fc10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	6a1b      	ldr	r3, [r3, #32]
 800fc16:	f023 0201 	bic.w	r2, r3, #1
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	699b      	ldr	r3, [r3, #24]
 800fc22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fc24:	693b      	ldr	r3, [r7, #16]
 800fc26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800fc2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	011b      	lsls	r3, r3, #4
 800fc30:	693a      	ldr	r2, [r7, #16]
 800fc32:	4313      	orrs	r3, r2
 800fc34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fc36:	697b      	ldr	r3, [r7, #20]
 800fc38:	f023 030a 	bic.w	r3, r3, #10
 800fc3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fc3e:	697a      	ldr	r2, [r7, #20]
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	4313      	orrs	r3, r2
 800fc44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	693a      	ldr	r2, [r7, #16]
 800fc4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	697a      	ldr	r2, [r7, #20]
 800fc50:	621a      	str	r2, [r3, #32]
}
 800fc52:	bf00      	nop
 800fc54:	371c      	adds	r7, #28
 800fc56:	46bd      	mov	sp, r7
 800fc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5c:	4770      	bx	lr

0800fc5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fc5e:	b480      	push	{r7}
 800fc60:	b087      	sub	sp, #28
 800fc62:	af00      	add	r7, sp, #0
 800fc64:	60f8      	str	r0, [r7, #12]
 800fc66:	60b9      	str	r1, [r7, #8]
 800fc68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	6a1b      	ldr	r3, [r3, #32]
 800fc6e:	f023 0210 	bic.w	r2, r3, #16
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	699b      	ldr	r3, [r3, #24]
 800fc7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	6a1b      	ldr	r3, [r3, #32]
 800fc80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fc82:	697b      	ldr	r3, [r7, #20]
 800fc84:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800fc88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	031b      	lsls	r3, r3, #12
 800fc8e:	697a      	ldr	r2, [r7, #20]
 800fc90:	4313      	orrs	r3, r2
 800fc92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fc94:	693b      	ldr	r3, [r7, #16]
 800fc96:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800fc9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fc9c:	68bb      	ldr	r3, [r7, #8]
 800fc9e:	011b      	lsls	r3, r3, #4
 800fca0:	693a      	ldr	r2, [r7, #16]
 800fca2:	4313      	orrs	r3, r2
 800fca4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	697a      	ldr	r2, [r7, #20]
 800fcaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	693a      	ldr	r2, [r7, #16]
 800fcb0:	621a      	str	r2, [r3, #32]
}
 800fcb2:	bf00      	nop
 800fcb4:	371c      	adds	r7, #28
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcbc:	4770      	bx	lr

0800fcbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fcbe:	b480      	push	{r7}
 800fcc0:	b085      	sub	sp, #20
 800fcc2:	af00      	add	r7, sp, #0
 800fcc4:	6078      	str	r0, [r7, #4]
 800fcc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	689b      	ldr	r3, [r3, #8]
 800fccc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fcd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fcd6:	683a      	ldr	r2, [r7, #0]
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	4313      	orrs	r3, r2
 800fcdc:	f043 0307 	orr.w	r3, r3, #7
 800fce0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	68fa      	ldr	r2, [r7, #12]
 800fce6:	609a      	str	r2, [r3, #8]
}
 800fce8:	bf00      	nop
 800fcea:	3714      	adds	r7, #20
 800fcec:	46bd      	mov	sp, r7
 800fcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf2:	4770      	bx	lr

0800fcf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fcf4:	b480      	push	{r7}
 800fcf6:	b087      	sub	sp, #28
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	60f8      	str	r0, [r7, #12]
 800fcfc:	60b9      	str	r1, [r7, #8]
 800fcfe:	607a      	str	r2, [r7, #4]
 800fd00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	689b      	ldr	r3, [r3, #8]
 800fd06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fd08:	697b      	ldr	r3, [r7, #20]
 800fd0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fd0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	021a      	lsls	r2, r3, #8
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	431a      	orrs	r2, r3
 800fd18:	68bb      	ldr	r3, [r7, #8]
 800fd1a:	4313      	orrs	r3, r2
 800fd1c:	697a      	ldr	r2, [r7, #20]
 800fd1e:	4313      	orrs	r3, r2
 800fd20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	697a      	ldr	r2, [r7, #20]
 800fd26:	609a      	str	r2, [r3, #8]
}
 800fd28:	bf00      	nop
 800fd2a:	371c      	adds	r7, #28
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd32:	4770      	bx	lr

0800fd34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fd34:	b480      	push	{r7}
 800fd36:	b085      	sub	sp, #20
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
 800fd3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fd44:	2b01      	cmp	r3, #1
 800fd46:	d101      	bne.n	800fd4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fd48:	2302      	movs	r3, #2
 800fd4a:	e05a      	b.n	800fe02 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	2201      	movs	r2, #1
 800fd50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	2202      	movs	r2, #2
 800fd58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	685b      	ldr	r3, [r3, #4]
 800fd62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	689b      	ldr	r3, [r3, #8]
 800fd6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fd72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fd74:	683b      	ldr	r3, [r7, #0]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	68fa      	ldr	r2, [r7, #12]
 800fd7a:	4313      	orrs	r3, r2
 800fd7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	68fa      	ldr	r2, [r7, #12]
 800fd84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	4a21      	ldr	r2, [pc, #132]	@ (800fe10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800fd8c:	4293      	cmp	r3, r2
 800fd8e:	d022      	beq.n	800fdd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fd98:	d01d      	beq.n	800fdd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	4a1d      	ldr	r2, [pc, #116]	@ (800fe14 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800fda0:	4293      	cmp	r3, r2
 800fda2:	d018      	beq.n	800fdd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	4a1b      	ldr	r2, [pc, #108]	@ (800fe18 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800fdaa:	4293      	cmp	r3, r2
 800fdac:	d013      	beq.n	800fdd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	4a1a      	ldr	r2, [pc, #104]	@ (800fe1c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800fdb4:	4293      	cmp	r3, r2
 800fdb6:	d00e      	beq.n	800fdd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	4a18      	ldr	r2, [pc, #96]	@ (800fe20 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800fdbe:	4293      	cmp	r3, r2
 800fdc0:	d009      	beq.n	800fdd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	4a17      	ldr	r2, [pc, #92]	@ (800fe24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800fdc8:	4293      	cmp	r3, r2
 800fdca:	d004      	beq.n	800fdd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	4a15      	ldr	r2, [pc, #84]	@ (800fe28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800fdd2:	4293      	cmp	r3, r2
 800fdd4:	d10c      	bne.n	800fdf0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fdd6:	68bb      	ldr	r3, [r7, #8]
 800fdd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fddc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fdde:	683b      	ldr	r3, [r7, #0]
 800fde0:	685b      	ldr	r3, [r3, #4]
 800fde2:	68ba      	ldr	r2, [r7, #8]
 800fde4:	4313      	orrs	r3, r2
 800fde6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	68ba      	ldr	r2, [r7, #8]
 800fdee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	2201      	movs	r2, #1
 800fdf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fe00:	2300      	movs	r3, #0
}
 800fe02:	4618      	mov	r0, r3
 800fe04:	3714      	adds	r7, #20
 800fe06:	46bd      	mov	sp, r7
 800fe08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0c:	4770      	bx	lr
 800fe0e:	bf00      	nop
 800fe10:	40010000 	.word	0x40010000
 800fe14:	40000400 	.word	0x40000400
 800fe18:	40000800 	.word	0x40000800
 800fe1c:	40000c00 	.word	0x40000c00
 800fe20:	40010400 	.word	0x40010400
 800fe24:	40014000 	.word	0x40014000
 800fe28:	40001800 	.word	0x40001800

0800fe2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fe2c:	b480      	push	{r7}
 800fe2e:	b083      	sub	sp, #12
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fe34:	bf00      	nop
 800fe36:	370c      	adds	r7, #12
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3e:	4770      	bx	lr

0800fe40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fe40:	b480      	push	{r7}
 800fe42:	b083      	sub	sp, #12
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fe48:	bf00      	nop
 800fe4a:	370c      	adds	r7, #12
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe52:	4770      	bx	lr

0800fe54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b082      	sub	sp, #8
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d101      	bne.n	800fe66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fe62:	2301      	movs	r3, #1
 800fe64:	e03f      	b.n	800fee6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fe6c:	b2db      	uxtb	r3, r3
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d106      	bne.n	800fe80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	2200      	movs	r2, #0
 800fe76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fe7a:	6878      	ldr	r0, [r7, #4]
 800fe7c:	f7fd fa7c 	bl	800d378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2224      	movs	r2, #36	@ 0x24
 800fe84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	68da      	ldr	r2, [r3, #12]
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800fe96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800fe98:	6878      	ldr	r0, [r7, #4]
 800fe9a:	f000 fc67 	bl	801076c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	691a      	ldr	r2, [r3, #16]
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800feac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	695a      	ldr	r2, [r3, #20]
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800febc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	68da      	ldr	r2, [r3, #12]
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800fecc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	2200      	movs	r2, #0
 800fed2:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	2220      	movs	r2, #32
 800fed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	2220      	movs	r2, #32
 800fee0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800fee4:	2300      	movs	r3, #0
}
 800fee6:	4618      	mov	r0, r3
 800fee8:	3708      	adds	r7, #8
 800feea:	46bd      	mov	sp, r7
 800feec:	bd80      	pop	{r7, pc}
	...

0800fef0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b0ba      	sub	sp, #232	@ 0xe8
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	68db      	ldr	r3, [r3, #12]
 800ff08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	695b      	ldr	r3, [r3, #20]
 800ff12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800ff16:	2300      	movs	r3, #0
 800ff18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ff22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff26:	f003 030f 	and.w	r3, r3, #15
 800ff2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800ff2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d10f      	bne.n	800ff56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ff36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff3a:	f003 0320 	and.w	r3, r3, #32
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d009      	beq.n	800ff56 <HAL_UART_IRQHandler+0x66>
 800ff42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ff46:	f003 0320 	and.w	r3, r3, #32
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d003      	beq.n	800ff56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ff4e:	6878      	ldr	r0, [r7, #4]
 800ff50:	f000 fb51 	bl	80105f6 <UART_Receive_IT>
      return;
 800ff54:	e256      	b.n	8010404 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ff56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	f000 80de 	beq.w	801011c <HAL_UART_IRQHandler+0x22c>
 800ff60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ff64:	f003 0301 	and.w	r3, r3, #1
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d106      	bne.n	800ff7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ff6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ff70:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	f000 80d1 	beq.w	801011c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ff7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff7e:	f003 0301 	and.w	r3, r3, #1
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d00b      	beq.n	800ff9e <HAL_UART_IRQHandler+0xae>
 800ff86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ff8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d005      	beq.n	800ff9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff96:	f043 0201 	orr.w	r2, r3, #1
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ff9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ffa2:	f003 0304 	and.w	r3, r3, #4
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d00b      	beq.n	800ffc2 <HAL_UART_IRQHandler+0xd2>
 800ffaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ffae:	f003 0301 	and.w	r3, r3, #1
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d005      	beq.n	800ffc2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ffba:	f043 0202 	orr.w	r2, r3, #2
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ffc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ffc6:	f003 0302 	and.w	r3, r3, #2
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d00b      	beq.n	800ffe6 <HAL_UART_IRQHandler+0xf6>
 800ffce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ffd2:	f003 0301 	and.w	r3, r3, #1
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d005      	beq.n	800ffe6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ffde:	f043 0204 	orr.w	r2, r3, #4
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ffe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ffea:	f003 0308 	and.w	r3, r3, #8
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d011      	beq.n	8010016 <HAL_UART_IRQHandler+0x126>
 800fff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fff6:	f003 0320 	and.w	r3, r3, #32
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d105      	bne.n	801000a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800fffe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010002:	f003 0301 	and.w	r3, r3, #1
 8010006:	2b00      	cmp	r3, #0
 8010008:	d005      	beq.n	8010016 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801000e:	f043 0208 	orr.w	r2, r3, #8
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801001a:	2b00      	cmp	r3, #0
 801001c:	f000 81ed 	beq.w	80103fa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010024:	f003 0320 	and.w	r3, r3, #32
 8010028:	2b00      	cmp	r3, #0
 801002a:	d008      	beq.n	801003e <HAL_UART_IRQHandler+0x14e>
 801002c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010030:	f003 0320 	and.w	r3, r3, #32
 8010034:	2b00      	cmp	r3, #0
 8010036:	d002      	beq.n	801003e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8010038:	6878      	ldr	r0, [r7, #4]
 801003a:	f000 fadc 	bl	80105f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	695b      	ldr	r3, [r3, #20]
 8010044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010048:	2b40      	cmp	r3, #64	@ 0x40
 801004a:	bf0c      	ite	eq
 801004c:	2301      	moveq	r3, #1
 801004e:	2300      	movne	r3, #0
 8010050:	b2db      	uxtb	r3, r3
 8010052:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801005a:	f003 0308 	and.w	r3, r3, #8
 801005e:	2b00      	cmp	r3, #0
 8010060:	d103      	bne.n	801006a <HAL_UART_IRQHandler+0x17a>
 8010062:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010066:	2b00      	cmp	r3, #0
 8010068:	d04f      	beq.n	801010a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801006a:	6878      	ldr	r0, [r7, #4]
 801006c:	f000 f9e4 	bl	8010438 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	695b      	ldr	r3, [r3, #20]
 8010076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801007a:	2b40      	cmp	r3, #64	@ 0x40
 801007c:	d141      	bne.n	8010102 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	3314      	adds	r3, #20
 8010084:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010088:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801008c:	e853 3f00 	ldrex	r3, [r3]
 8010090:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8010094:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010098:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801009c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	3314      	adds	r3, #20
 80100a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80100aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80100ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80100b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80100ba:	e841 2300 	strex	r3, r2, [r1]
 80100be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80100c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d1d9      	bne.n	801007e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d013      	beq.n	80100fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100d6:	4a7d      	ldr	r2, [pc, #500]	@ (80102cc <HAL_UART_IRQHandler+0x3dc>)
 80100d8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100de:	4618      	mov	r0, r3
 80100e0:	f7fd fcf7 	bl	800dad2 <HAL_DMA_Abort_IT>
 80100e4:	4603      	mov	r3, r0
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d016      	beq.n	8010118 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80100f0:	687a      	ldr	r2, [r7, #4]
 80100f2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80100f4:	4610      	mov	r0, r2
 80100f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100f8:	e00e      	b.n	8010118 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80100fa:	6878      	ldr	r0, [r7, #4]
 80100fc:	f000 f986 	bl	801040c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010100:	e00a      	b.n	8010118 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010102:	6878      	ldr	r0, [r7, #4]
 8010104:	f000 f982 	bl	801040c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010108:	e006      	b.n	8010118 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801010a:	6878      	ldr	r0, [r7, #4]
 801010c:	f000 f97e 	bl	801040c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	2200      	movs	r2, #0
 8010114:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8010116:	e170      	b.n	80103fa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010118:	bf00      	nop
    return;
 801011a:	e16e      	b.n	80103fa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010120:	2b01      	cmp	r3, #1
 8010122:	f040 814a 	bne.w	80103ba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8010126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801012a:	f003 0310 	and.w	r3, r3, #16
 801012e:	2b00      	cmp	r3, #0
 8010130:	f000 8143 	beq.w	80103ba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8010134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010138:	f003 0310 	and.w	r3, r3, #16
 801013c:	2b00      	cmp	r3, #0
 801013e:	f000 813c 	beq.w	80103ba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010142:	2300      	movs	r3, #0
 8010144:	60bb      	str	r3, [r7, #8]
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	60bb      	str	r3, [r7, #8]
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	685b      	ldr	r3, [r3, #4]
 8010154:	60bb      	str	r3, [r7, #8]
 8010156:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	695b      	ldr	r3, [r3, #20]
 801015e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010162:	2b40      	cmp	r3, #64	@ 0x40
 8010164:	f040 80b4 	bne.w	80102d0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	685b      	ldr	r3, [r3, #4]
 8010170:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010174:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8010178:	2b00      	cmp	r3, #0
 801017a:	f000 8140 	beq.w	80103fe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8010182:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010186:	429a      	cmp	r2, r3
 8010188:	f080 8139 	bcs.w	80103fe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010192:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010198:	69db      	ldr	r3, [r3, #28]
 801019a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801019e:	f000 8088 	beq.w	80102b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	330c      	adds	r3, #12
 80101a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80101b0:	e853 3f00 	ldrex	r3, [r3]
 80101b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80101b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80101bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80101c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	330c      	adds	r3, #12
 80101ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80101ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80101d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80101da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80101de:	e841 2300 	strex	r3, r2, [r1]
 80101e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80101e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d1d9      	bne.n	80101a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	3314      	adds	r3, #20
 80101f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80101f8:	e853 3f00 	ldrex	r3, [r3]
 80101fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80101fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010200:	f023 0301 	bic.w	r3, r3, #1
 8010204:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	3314      	adds	r3, #20
 801020e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8010212:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8010216:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010218:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801021a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801021e:	e841 2300 	strex	r3, r2, [r1]
 8010222:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010224:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010226:	2b00      	cmp	r3, #0
 8010228:	d1e1      	bne.n	80101ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	3314      	adds	r3, #20
 8010230:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010232:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010234:	e853 3f00 	ldrex	r3, [r3]
 8010238:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801023a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801023c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010240:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	3314      	adds	r3, #20
 801024a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801024e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010250:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010252:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010254:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010256:	e841 2300 	strex	r3, r2, [r1]
 801025a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801025c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801025e:	2b00      	cmp	r3, #0
 8010260:	d1e3      	bne.n	801022a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	2220      	movs	r2, #32
 8010266:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	2200      	movs	r2, #0
 801026e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	330c      	adds	r3, #12
 8010276:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010278:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801027a:	e853 3f00 	ldrex	r3, [r3]
 801027e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010280:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010282:	f023 0310 	bic.w	r3, r3, #16
 8010286:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	330c      	adds	r3, #12
 8010290:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8010294:	65ba      	str	r2, [r7, #88]	@ 0x58
 8010296:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010298:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801029a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801029c:	e841 2300 	strex	r3, r2, [r1]
 80102a0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80102a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d1e3      	bne.n	8010270 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102ac:	4618      	mov	r0, r3
 80102ae:	f7fd fba0 	bl	800d9f2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80102ba:	b29b      	uxth	r3, r3
 80102bc:	1ad3      	subs	r3, r2, r3
 80102be:	b29b      	uxth	r3, r3
 80102c0:	4619      	mov	r1, r3
 80102c2:	6878      	ldr	r0, [r7, #4]
 80102c4:	f000 f8ac 	bl	8010420 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80102c8:	e099      	b.n	80103fe <HAL_UART_IRQHandler+0x50e>
 80102ca:	bf00      	nop
 80102cc:	080104ff 	.word	0x080104ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80102d8:	b29b      	uxth	r3, r3
 80102da:	1ad3      	subs	r3, r2, r3
 80102dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80102e4:	b29b      	uxth	r3, r3
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	f000 808b 	beq.w	8010402 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80102ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	f000 8086 	beq.w	8010402 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	330c      	adds	r3, #12
 80102fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010300:	e853 3f00 	ldrex	r3, [r3]
 8010304:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010308:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801030c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	330c      	adds	r3, #12
 8010316:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 801031a:	647a      	str	r2, [r7, #68]	@ 0x44
 801031c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801031e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010320:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010322:	e841 2300 	strex	r3, r2, [r1]
 8010326:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801032a:	2b00      	cmp	r3, #0
 801032c:	d1e3      	bne.n	80102f6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	3314      	adds	r3, #20
 8010334:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010338:	e853 3f00 	ldrex	r3, [r3]
 801033c:	623b      	str	r3, [r7, #32]
   return(result);
 801033e:	6a3b      	ldr	r3, [r7, #32]
 8010340:	f023 0301 	bic.w	r3, r3, #1
 8010344:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	3314      	adds	r3, #20
 801034e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8010352:	633a      	str	r2, [r7, #48]	@ 0x30
 8010354:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010356:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010358:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801035a:	e841 2300 	strex	r3, r2, [r1]
 801035e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010362:	2b00      	cmp	r3, #0
 8010364:	d1e3      	bne.n	801032e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	2220      	movs	r2, #32
 801036a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	2200      	movs	r2, #0
 8010372:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	330c      	adds	r3, #12
 801037a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801037c:	693b      	ldr	r3, [r7, #16]
 801037e:	e853 3f00 	ldrex	r3, [r3]
 8010382:	60fb      	str	r3, [r7, #12]
   return(result);
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	f023 0310 	bic.w	r3, r3, #16
 801038a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	330c      	adds	r3, #12
 8010394:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8010398:	61fa      	str	r2, [r7, #28]
 801039a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801039c:	69b9      	ldr	r1, [r7, #24]
 801039e:	69fa      	ldr	r2, [r7, #28]
 80103a0:	e841 2300 	strex	r3, r2, [r1]
 80103a4:	617b      	str	r3, [r7, #20]
   return(result);
 80103a6:	697b      	ldr	r3, [r7, #20]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d1e3      	bne.n	8010374 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80103ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80103b0:	4619      	mov	r1, r3
 80103b2:	6878      	ldr	r0, [r7, #4]
 80103b4:	f000 f834 	bl	8010420 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80103b8:	e023      	b.n	8010402 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80103ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80103be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d009      	beq.n	80103da <HAL_UART_IRQHandler+0x4ea>
 80103c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80103ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d003      	beq.n	80103da <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80103d2:	6878      	ldr	r0, [r7, #4]
 80103d4:	f000 f8a7 	bl	8010526 <UART_Transmit_IT>
    return;
 80103d8:	e014      	b.n	8010404 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80103da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80103de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d00e      	beq.n	8010404 <HAL_UART_IRQHandler+0x514>
 80103e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80103ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d008      	beq.n	8010404 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80103f2:	6878      	ldr	r0, [r7, #4]
 80103f4:	f000 f8e7 	bl	80105c6 <UART_EndTransmit_IT>
    return;
 80103f8:	e004      	b.n	8010404 <HAL_UART_IRQHandler+0x514>
    return;
 80103fa:	bf00      	nop
 80103fc:	e002      	b.n	8010404 <HAL_UART_IRQHandler+0x514>
      return;
 80103fe:	bf00      	nop
 8010400:	e000      	b.n	8010404 <HAL_UART_IRQHandler+0x514>
      return;
 8010402:	bf00      	nop
  }
}
 8010404:	37e8      	adds	r7, #232	@ 0xe8
 8010406:	46bd      	mov	sp, r7
 8010408:	bd80      	pop	{r7, pc}
 801040a:	bf00      	nop

0801040c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801040c:	b480      	push	{r7}
 801040e:	b083      	sub	sp, #12
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8010414:	bf00      	nop
 8010416:	370c      	adds	r7, #12
 8010418:	46bd      	mov	sp, r7
 801041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041e:	4770      	bx	lr

08010420 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010420:	b480      	push	{r7}
 8010422:	b083      	sub	sp, #12
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
 8010428:	460b      	mov	r3, r1
 801042a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801042c:	bf00      	nop
 801042e:	370c      	adds	r7, #12
 8010430:	46bd      	mov	sp, r7
 8010432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010436:	4770      	bx	lr

08010438 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010438:	b480      	push	{r7}
 801043a:	b095      	sub	sp, #84	@ 0x54
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	330c      	adds	r3, #12
 8010446:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801044a:	e853 3f00 	ldrex	r3, [r3]
 801044e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010452:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010456:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	330c      	adds	r3, #12
 801045e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010460:	643a      	str	r2, [r7, #64]	@ 0x40
 8010462:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010464:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010466:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010468:	e841 2300 	strex	r3, r2, [r1]
 801046c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801046e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010470:	2b00      	cmp	r3, #0
 8010472:	d1e5      	bne.n	8010440 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	3314      	adds	r3, #20
 801047a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801047c:	6a3b      	ldr	r3, [r7, #32]
 801047e:	e853 3f00 	ldrex	r3, [r3]
 8010482:	61fb      	str	r3, [r7, #28]
   return(result);
 8010484:	69fb      	ldr	r3, [r7, #28]
 8010486:	f023 0301 	bic.w	r3, r3, #1
 801048a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	3314      	adds	r3, #20
 8010492:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010494:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010496:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010498:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801049a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801049c:	e841 2300 	strex	r3, r2, [r1]
 80104a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80104a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d1e5      	bne.n	8010474 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80104ac:	2b01      	cmp	r3, #1
 80104ae:	d119      	bne.n	80104e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	330c      	adds	r3, #12
 80104b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	e853 3f00 	ldrex	r3, [r3]
 80104be:	60bb      	str	r3, [r7, #8]
   return(result);
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	f023 0310 	bic.w	r3, r3, #16
 80104c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	330c      	adds	r3, #12
 80104ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80104d0:	61ba      	str	r2, [r7, #24]
 80104d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104d4:	6979      	ldr	r1, [r7, #20]
 80104d6:	69ba      	ldr	r2, [r7, #24]
 80104d8:	e841 2300 	strex	r3, r2, [r1]
 80104dc:	613b      	str	r3, [r7, #16]
   return(result);
 80104de:	693b      	ldr	r3, [r7, #16]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d1e5      	bne.n	80104b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	2220      	movs	r2, #32
 80104e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	2200      	movs	r2, #0
 80104f0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80104f2:	bf00      	nop
 80104f4:	3754      	adds	r7, #84	@ 0x54
 80104f6:	46bd      	mov	sp, r7
 80104f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fc:	4770      	bx	lr

080104fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80104fe:	b580      	push	{r7, lr}
 8010500:	b084      	sub	sp, #16
 8010502:	af00      	add	r7, sp, #0
 8010504:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801050a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	2200      	movs	r2, #0
 8010510:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	2200      	movs	r2, #0
 8010516:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010518:	68f8      	ldr	r0, [r7, #12]
 801051a:	f7ff ff77 	bl	801040c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801051e:	bf00      	nop
 8010520:	3710      	adds	r7, #16
 8010522:	46bd      	mov	sp, r7
 8010524:	bd80      	pop	{r7, pc}

08010526 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8010526:	b480      	push	{r7}
 8010528:	b085      	sub	sp, #20
 801052a:	af00      	add	r7, sp, #0
 801052c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010534:	b2db      	uxtb	r3, r3
 8010536:	2b21      	cmp	r3, #33	@ 0x21
 8010538:	d13e      	bne.n	80105b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	689b      	ldr	r3, [r3, #8]
 801053e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010542:	d114      	bne.n	801056e <UART_Transmit_IT+0x48>
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	691b      	ldr	r3, [r3, #16]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d110      	bne.n	801056e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	6a1b      	ldr	r3, [r3, #32]
 8010550:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	881b      	ldrh	r3, [r3, #0]
 8010556:	461a      	mov	r2, r3
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010560:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	6a1b      	ldr	r3, [r3, #32]
 8010566:	1c9a      	adds	r2, r3, #2
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	621a      	str	r2, [r3, #32]
 801056c:	e008      	b.n	8010580 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	6a1b      	ldr	r3, [r3, #32]
 8010572:	1c59      	adds	r1, r3, #1
 8010574:	687a      	ldr	r2, [r7, #4]
 8010576:	6211      	str	r1, [r2, #32]
 8010578:	781a      	ldrb	r2, [r3, #0]
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8010584:	b29b      	uxth	r3, r3
 8010586:	3b01      	subs	r3, #1
 8010588:	b29b      	uxth	r3, r3
 801058a:	687a      	ldr	r2, [r7, #4]
 801058c:	4619      	mov	r1, r3
 801058e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8010590:	2b00      	cmp	r3, #0
 8010592:	d10f      	bne.n	80105b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	68da      	ldr	r2, [r3, #12]
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80105a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	68da      	ldr	r2, [r3, #12]
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80105b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80105b4:	2300      	movs	r3, #0
 80105b6:	e000      	b.n	80105ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80105b8:	2302      	movs	r3, #2
  }
}
 80105ba:	4618      	mov	r0, r3
 80105bc:	3714      	adds	r7, #20
 80105be:	46bd      	mov	sp, r7
 80105c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c4:	4770      	bx	lr

080105c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80105c6:	b580      	push	{r7, lr}
 80105c8:	b082      	sub	sp, #8
 80105ca:	af00      	add	r7, sp, #0
 80105cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	68da      	ldr	r2, [r3, #12]
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80105dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	2220      	movs	r2, #32
 80105e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80105e6:	6878      	ldr	r0, [r7, #4]
 80105e8:	f7fc fd72 	bl	800d0d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80105ec:	2300      	movs	r3, #0
}
 80105ee:	4618      	mov	r0, r3
 80105f0:	3708      	adds	r7, #8
 80105f2:	46bd      	mov	sp, r7
 80105f4:	bd80      	pop	{r7, pc}

080105f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80105f6:	b580      	push	{r7, lr}
 80105f8:	b08c      	sub	sp, #48	@ 0x30
 80105fa:	af00      	add	r7, sp, #0
 80105fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010604:	b2db      	uxtb	r3, r3
 8010606:	2b22      	cmp	r3, #34	@ 0x22
 8010608:	f040 80ab 	bne.w	8010762 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	689b      	ldr	r3, [r3, #8]
 8010610:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010614:	d117      	bne.n	8010646 <UART_Receive_IT+0x50>
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	691b      	ldr	r3, [r3, #16]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d113      	bne.n	8010646 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 801061e:	2300      	movs	r3, #0
 8010620:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010626:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	685b      	ldr	r3, [r3, #4]
 801062e:	b29b      	uxth	r3, r3
 8010630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010634:	b29a      	uxth	r2, r3
 8010636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010638:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801063e:	1c9a      	adds	r2, r3, #2
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	629a      	str	r2, [r3, #40]	@ 0x28
 8010644:	e026      	b.n	8010694 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801064a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 801064c:	2300      	movs	r3, #0
 801064e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	689b      	ldr	r3, [r3, #8]
 8010654:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010658:	d007      	beq.n	801066a <UART_Receive_IT+0x74>
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	689b      	ldr	r3, [r3, #8]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d10a      	bne.n	8010678 <UART_Receive_IT+0x82>
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	691b      	ldr	r3, [r3, #16]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d106      	bne.n	8010678 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	685b      	ldr	r3, [r3, #4]
 8010670:	b2da      	uxtb	r2, r3
 8010672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010674:	701a      	strb	r2, [r3, #0]
 8010676:	e008      	b.n	801068a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	685b      	ldr	r3, [r3, #4]
 801067e:	b2db      	uxtb	r3, r3
 8010680:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010684:	b2da      	uxtb	r2, r3
 8010686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010688:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801068e:	1c5a      	adds	r2, r3, #1
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010698:	b29b      	uxth	r3, r3
 801069a:	3b01      	subs	r3, #1
 801069c:	b29b      	uxth	r3, r3
 801069e:	687a      	ldr	r2, [r7, #4]
 80106a0:	4619      	mov	r1, r3
 80106a2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d15a      	bne.n	801075e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	68da      	ldr	r2, [r3, #12]
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	f022 0220 	bic.w	r2, r2, #32
 80106b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	68da      	ldr	r2, [r3, #12]
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80106c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	695a      	ldr	r2, [r3, #20]
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	f022 0201 	bic.w	r2, r2, #1
 80106d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	2220      	movs	r2, #32
 80106dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80106e4:	2b01      	cmp	r3, #1
 80106e6:	d135      	bne.n	8010754 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	2200      	movs	r2, #0
 80106ec:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	330c      	adds	r3, #12
 80106f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106f6:	697b      	ldr	r3, [r7, #20]
 80106f8:	e853 3f00 	ldrex	r3, [r3]
 80106fc:	613b      	str	r3, [r7, #16]
   return(result);
 80106fe:	693b      	ldr	r3, [r7, #16]
 8010700:	f023 0310 	bic.w	r3, r3, #16
 8010704:	627b      	str	r3, [r7, #36]	@ 0x24
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	330c      	adds	r3, #12
 801070c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801070e:	623a      	str	r2, [r7, #32]
 8010710:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010712:	69f9      	ldr	r1, [r7, #28]
 8010714:	6a3a      	ldr	r2, [r7, #32]
 8010716:	e841 2300 	strex	r3, r2, [r1]
 801071a:	61bb      	str	r3, [r7, #24]
   return(result);
 801071c:	69bb      	ldr	r3, [r7, #24]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d1e5      	bne.n	80106ee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	f003 0310 	and.w	r3, r3, #16
 801072c:	2b10      	cmp	r3, #16
 801072e:	d10a      	bne.n	8010746 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010730:	2300      	movs	r3, #0
 8010732:	60fb      	str	r3, [r7, #12]
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	60fb      	str	r3, [r7, #12]
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	685b      	ldr	r3, [r3, #4]
 8010742:	60fb      	str	r3, [r7, #12]
 8010744:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801074a:	4619      	mov	r1, r3
 801074c:	6878      	ldr	r0, [r7, #4]
 801074e:	f7ff fe67 	bl	8010420 <HAL_UARTEx_RxEventCallback>
 8010752:	e002      	b.n	801075a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8010754:	6878      	ldr	r0, [r7, #4]
 8010756:	f7fc fccf 	bl	800d0f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801075a:	2300      	movs	r3, #0
 801075c:	e002      	b.n	8010764 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 801075e:	2300      	movs	r3, #0
 8010760:	e000      	b.n	8010764 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8010762:	2302      	movs	r3, #2
  }
}
 8010764:	4618      	mov	r0, r3
 8010766:	3730      	adds	r7, #48	@ 0x30
 8010768:	46bd      	mov	sp, r7
 801076a:	bd80      	pop	{r7, pc}

0801076c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801076c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010770:	b0c0      	sub	sp, #256	@ 0x100
 8010772:	af00      	add	r7, sp, #0
 8010774:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	691b      	ldr	r3, [r3, #16]
 8010780:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8010784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010788:	68d9      	ldr	r1, [r3, #12]
 801078a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801078e:	681a      	ldr	r2, [r3, #0]
 8010790:	ea40 0301 	orr.w	r3, r0, r1
 8010794:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801079a:	689a      	ldr	r2, [r3, #8]
 801079c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80107a0:	691b      	ldr	r3, [r3, #16]
 80107a2:	431a      	orrs	r2, r3
 80107a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80107a8:	695b      	ldr	r3, [r3, #20]
 80107aa:	431a      	orrs	r2, r3
 80107ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80107b0:	69db      	ldr	r3, [r3, #28]
 80107b2:	4313      	orrs	r3, r2
 80107b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80107b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	68db      	ldr	r3, [r3, #12]
 80107c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80107c4:	f021 010c 	bic.w	r1, r1, #12
 80107c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80107cc:	681a      	ldr	r2, [r3, #0]
 80107ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80107d2:	430b      	orrs	r3, r1
 80107d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80107d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	695b      	ldr	r3, [r3, #20]
 80107de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80107e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80107e6:	6999      	ldr	r1, [r3, #24]
 80107e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80107ec:	681a      	ldr	r2, [r3, #0]
 80107ee:	ea40 0301 	orr.w	r3, r0, r1
 80107f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80107f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80107f8:	681a      	ldr	r2, [r3, #0]
 80107fa:	4b8f      	ldr	r3, [pc, #572]	@ (8010a38 <UART_SetConfig+0x2cc>)
 80107fc:	429a      	cmp	r2, r3
 80107fe:	d005      	beq.n	801080c <UART_SetConfig+0xa0>
 8010800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010804:	681a      	ldr	r2, [r3, #0]
 8010806:	4b8d      	ldr	r3, [pc, #564]	@ (8010a3c <UART_SetConfig+0x2d0>)
 8010808:	429a      	cmp	r2, r3
 801080a:	d104      	bne.n	8010816 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801080c:	f7fd fc88 	bl	800e120 <HAL_RCC_GetPCLK2Freq>
 8010810:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8010814:	e003      	b.n	801081e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8010816:	f7fd fc6f 	bl	800e0f8 <HAL_RCC_GetPCLK1Freq>
 801081a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801081e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010822:	69db      	ldr	r3, [r3, #28]
 8010824:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010828:	f040 810c 	bne.w	8010a44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801082c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010830:	2200      	movs	r2, #0
 8010832:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8010836:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 801083a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 801083e:	4622      	mov	r2, r4
 8010840:	462b      	mov	r3, r5
 8010842:	1891      	adds	r1, r2, r2
 8010844:	65b9      	str	r1, [r7, #88]	@ 0x58
 8010846:	415b      	adcs	r3, r3
 8010848:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801084a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 801084e:	4621      	mov	r1, r4
 8010850:	eb12 0801 	adds.w	r8, r2, r1
 8010854:	4629      	mov	r1, r5
 8010856:	eb43 0901 	adc.w	r9, r3, r1
 801085a:	f04f 0200 	mov.w	r2, #0
 801085e:	f04f 0300 	mov.w	r3, #0
 8010862:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8010866:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801086a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801086e:	4690      	mov	r8, r2
 8010870:	4699      	mov	r9, r3
 8010872:	4623      	mov	r3, r4
 8010874:	eb18 0303 	adds.w	r3, r8, r3
 8010878:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801087c:	462b      	mov	r3, r5
 801087e:	eb49 0303 	adc.w	r3, r9, r3
 8010882:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8010886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801088a:	685b      	ldr	r3, [r3, #4]
 801088c:	2200      	movs	r2, #0
 801088e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8010892:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8010896:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801089a:	460b      	mov	r3, r1
 801089c:	18db      	adds	r3, r3, r3
 801089e:	653b      	str	r3, [r7, #80]	@ 0x50
 80108a0:	4613      	mov	r3, r2
 80108a2:	eb42 0303 	adc.w	r3, r2, r3
 80108a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80108a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80108ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80108b0:	f7f0 f9fa 	bl	8000ca8 <__aeabi_uldivmod>
 80108b4:	4602      	mov	r2, r0
 80108b6:	460b      	mov	r3, r1
 80108b8:	4b61      	ldr	r3, [pc, #388]	@ (8010a40 <UART_SetConfig+0x2d4>)
 80108ba:	fba3 2302 	umull	r2, r3, r3, r2
 80108be:	095b      	lsrs	r3, r3, #5
 80108c0:	011c      	lsls	r4, r3, #4
 80108c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80108c6:	2200      	movs	r2, #0
 80108c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80108cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80108d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80108d4:	4642      	mov	r2, r8
 80108d6:	464b      	mov	r3, r9
 80108d8:	1891      	adds	r1, r2, r2
 80108da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80108dc:	415b      	adcs	r3, r3
 80108de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80108e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80108e4:	4641      	mov	r1, r8
 80108e6:	eb12 0a01 	adds.w	sl, r2, r1
 80108ea:	4649      	mov	r1, r9
 80108ec:	eb43 0b01 	adc.w	fp, r3, r1
 80108f0:	f04f 0200 	mov.w	r2, #0
 80108f4:	f04f 0300 	mov.w	r3, #0
 80108f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80108fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8010900:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010904:	4692      	mov	sl, r2
 8010906:	469b      	mov	fp, r3
 8010908:	4643      	mov	r3, r8
 801090a:	eb1a 0303 	adds.w	r3, sl, r3
 801090e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010912:	464b      	mov	r3, r9
 8010914:	eb4b 0303 	adc.w	r3, fp, r3
 8010918:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801091c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010920:	685b      	ldr	r3, [r3, #4]
 8010922:	2200      	movs	r2, #0
 8010924:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010928:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 801092c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8010930:	460b      	mov	r3, r1
 8010932:	18db      	adds	r3, r3, r3
 8010934:	643b      	str	r3, [r7, #64]	@ 0x40
 8010936:	4613      	mov	r3, r2
 8010938:	eb42 0303 	adc.w	r3, r2, r3
 801093c:	647b      	str	r3, [r7, #68]	@ 0x44
 801093e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8010942:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8010946:	f7f0 f9af 	bl	8000ca8 <__aeabi_uldivmod>
 801094a:	4602      	mov	r2, r0
 801094c:	460b      	mov	r3, r1
 801094e:	4611      	mov	r1, r2
 8010950:	4b3b      	ldr	r3, [pc, #236]	@ (8010a40 <UART_SetConfig+0x2d4>)
 8010952:	fba3 2301 	umull	r2, r3, r3, r1
 8010956:	095b      	lsrs	r3, r3, #5
 8010958:	2264      	movs	r2, #100	@ 0x64
 801095a:	fb02 f303 	mul.w	r3, r2, r3
 801095e:	1acb      	subs	r3, r1, r3
 8010960:	00db      	lsls	r3, r3, #3
 8010962:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8010966:	4b36      	ldr	r3, [pc, #216]	@ (8010a40 <UART_SetConfig+0x2d4>)
 8010968:	fba3 2302 	umull	r2, r3, r3, r2
 801096c:	095b      	lsrs	r3, r3, #5
 801096e:	005b      	lsls	r3, r3, #1
 8010970:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8010974:	441c      	add	r4, r3
 8010976:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801097a:	2200      	movs	r2, #0
 801097c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010980:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8010984:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8010988:	4642      	mov	r2, r8
 801098a:	464b      	mov	r3, r9
 801098c:	1891      	adds	r1, r2, r2
 801098e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8010990:	415b      	adcs	r3, r3
 8010992:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010994:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8010998:	4641      	mov	r1, r8
 801099a:	1851      	adds	r1, r2, r1
 801099c:	6339      	str	r1, [r7, #48]	@ 0x30
 801099e:	4649      	mov	r1, r9
 80109a0:	414b      	adcs	r3, r1
 80109a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80109a4:	f04f 0200 	mov.w	r2, #0
 80109a8:	f04f 0300 	mov.w	r3, #0
 80109ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80109b0:	4659      	mov	r1, fp
 80109b2:	00cb      	lsls	r3, r1, #3
 80109b4:	4651      	mov	r1, sl
 80109b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80109ba:	4651      	mov	r1, sl
 80109bc:	00ca      	lsls	r2, r1, #3
 80109be:	4610      	mov	r0, r2
 80109c0:	4619      	mov	r1, r3
 80109c2:	4603      	mov	r3, r0
 80109c4:	4642      	mov	r2, r8
 80109c6:	189b      	adds	r3, r3, r2
 80109c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80109cc:	464b      	mov	r3, r9
 80109ce:	460a      	mov	r2, r1
 80109d0:	eb42 0303 	adc.w	r3, r2, r3
 80109d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80109d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80109dc:	685b      	ldr	r3, [r3, #4]
 80109de:	2200      	movs	r2, #0
 80109e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80109e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80109e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80109ec:	460b      	mov	r3, r1
 80109ee:	18db      	adds	r3, r3, r3
 80109f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80109f2:	4613      	mov	r3, r2
 80109f4:	eb42 0303 	adc.w	r3, r2, r3
 80109f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80109fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80109fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8010a02:	f7f0 f951 	bl	8000ca8 <__aeabi_uldivmod>
 8010a06:	4602      	mov	r2, r0
 8010a08:	460b      	mov	r3, r1
 8010a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8010a40 <UART_SetConfig+0x2d4>)
 8010a0c:	fba3 1302 	umull	r1, r3, r3, r2
 8010a10:	095b      	lsrs	r3, r3, #5
 8010a12:	2164      	movs	r1, #100	@ 0x64
 8010a14:	fb01 f303 	mul.w	r3, r1, r3
 8010a18:	1ad3      	subs	r3, r2, r3
 8010a1a:	00db      	lsls	r3, r3, #3
 8010a1c:	3332      	adds	r3, #50	@ 0x32
 8010a1e:	4a08      	ldr	r2, [pc, #32]	@ (8010a40 <UART_SetConfig+0x2d4>)
 8010a20:	fba2 2303 	umull	r2, r3, r2, r3
 8010a24:	095b      	lsrs	r3, r3, #5
 8010a26:	f003 0207 	and.w	r2, r3, #7
 8010a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	4422      	add	r2, r4
 8010a32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8010a34:	e106      	b.n	8010c44 <UART_SetConfig+0x4d8>
 8010a36:	bf00      	nop
 8010a38:	40011000 	.word	0x40011000
 8010a3c:	40011400 	.word	0x40011400
 8010a40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010a44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010a48:	2200      	movs	r2, #0
 8010a4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010a4e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8010a52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8010a56:	4642      	mov	r2, r8
 8010a58:	464b      	mov	r3, r9
 8010a5a:	1891      	adds	r1, r2, r2
 8010a5c:	6239      	str	r1, [r7, #32]
 8010a5e:	415b      	adcs	r3, r3
 8010a60:	627b      	str	r3, [r7, #36]	@ 0x24
 8010a62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010a66:	4641      	mov	r1, r8
 8010a68:	1854      	adds	r4, r2, r1
 8010a6a:	4649      	mov	r1, r9
 8010a6c:	eb43 0501 	adc.w	r5, r3, r1
 8010a70:	f04f 0200 	mov.w	r2, #0
 8010a74:	f04f 0300 	mov.w	r3, #0
 8010a78:	00eb      	lsls	r3, r5, #3
 8010a7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010a7e:	00e2      	lsls	r2, r4, #3
 8010a80:	4614      	mov	r4, r2
 8010a82:	461d      	mov	r5, r3
 8010a84:	4643      	mov	r3, r8
 8010a86:	18e3      	adds	r3, r4, r3
 8010a88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8010a8c:	464b      	mov	r3, r9
 8010a8e:	eb45 0303 	adc.w	r3, r5, r3
 8010a92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010a9a:	685b      	ldr	r3, [r3, #4]
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010aa2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8010aa6:	f04f 0200 	mov.w	r2, #0
 8010aaa:	f04f 0300 	mov.w	r3, #0
 8010aae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8010ab2:	4629      	mov	r1, r5
 8010ab4:	008b      	lsls	r3, r1, #2
 8010ab6:	4621      	mov	r1, r4
 8010ab8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010abc:	4621      	mov	r1, r4
 8010abe:	008a      	lsls	r2, r1, #2
 8010ac0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8010ac4:	f7f0 f8f0 	bl	8000ca8 <__aeabi_uldivmod>
 8010ac8:	4602      	mov	r2, r0
 8010aca:	460b      	mov	r3, r1
 8010acc:	4b60      	ldr	r3, [pc, #384]	@ (8010c50 <UART_SetConfig+0x4e4>)
 8010ace:	fba3 2302 	umull	r2, r3, r3, r2
 8010ad2:	095b      	lsrs	r3, r3, #5
 8010ad4:	011c      	lsls	r4, r3, #4
 8010ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010ada:	2200      	movs	r2, #0
 8010adc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010ae0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8010ae4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8010ae8:	4642      	mov	r2, r8
 8010aea:	464b      	mov	r3, r9
 8010aec:	1891      	adds	r1, r2, r2
 8010aee:	61b9      	str	r1, [r7, #24]
 8010af0:	415b      	adcs	r3, r3
 8010af2:	61fb      	str	r3, [r7, #28]
 8010af4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010af8:	4641      	mov	r1, r8
 8010afa:	1851      	adds	r1, r2, r1
 8010afc:	6139      	str	r1, [r7, #16]
 8010afe:	4649      	mov	r1, r9
 8010b00:	414b      	adcs	r3, r1
 8010b02:	617b      	str	r3, [r7, #20]
 8010b04:	f04f 0200 	mov.w	r2, #0
 8010b08:	f04f 0300 	mov.w	r3, #0
 8010b0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8010b10:	4659      	mov	r1, fp
 8010b12:	00cb      	lsls	r3, r1, #3
 8010b14:	4651      	mov	r1, sl
 8010b16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010b1a:	4651      	mov	r1, sl
 8010b1c:	00ca      	lsls	r2, r1, #3
 8010b1e:	4610      	mov	r0, r2
 8010b20:	4619      	mov	r1, r3
 8010b22:	4603      	mov	r3, r0
 8010b24:	4642      	mov	r2, r8
 8010b26:	189b      	adds	r3, r3, r2
 8010b28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010b2c:	464b      	mov	r3, r9
 8010b2e:	460a      	mov	r2, r1
 8010b30:	eb42 0303 	adc.w	r3, r2, r3
 8010b34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010b3c:	685b      	ldr	r3, [r3, #4]
 8010b3e:	2200      	movs	r2, #0
 8010b40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010b42:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8010b44:	f04f 0200 	mov.w	r2, #0
 8010b48:	f04f 0300 	mov.w	r3, #0
 8010b4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8010b50:	4649      	mov	r1, r9
 8010b52:	008b      	lsls	r3, r1, #2
 8010b54:	4641      	mov	r1, r8
 8010b56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010b5a:	4641      	mov	r1, r8
 8010b5c:	008a      	lsls	r2, r1, #2
 8010b5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8010b62:	f7f0 f8a1 	bl	8000ca8 <__aeabi_uldivmod>
 8010b66:	4602      	mov	r2, r0
 8010b68:	460b      	mov	r3, r1
 8010b6a:	4611      	mov	r1, r2
 8010b6c:	4b38      	ldr	r3, [pc, #224]	@ (8010c50 <UART_SetConfig+0x4e4>)
 8010b6e:	fba3 2301 	umull	r2, r3, r3, r1
 8010b72:	095b      	lsrs	r3, r3, #5
 8010b74:	2264      	movs	r2, #100	@ 0x64
 8010b76:	fb02 f303 	mul.w	r3, r2, r3
 8010b7a:	1acb      	subs	r3, r1, r3
 8010b7c:	011b      	lsls	r3, r3, #4
 8010b7e:	3332      	adds	r3, #50	@ 0x32
 8010b80:	4a33      	ldr	r2, [pc, #204]	@ (8010c50 <UART_SetConfig+0x4e4>)
 8010b82:	fba2 2303 	umull	r2, r3, r2, r3
 8010b86:	095b      	lsrs	r3, r3, #5
 8010b88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010b8c:	441c      	add	r4, r3
 8010b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010b92:	2200      	movs	r2, #0
 8010b94:	673b      	str	r3, [r7, #112]	@ 0x70
 8010b96:	677a      	str	r2, [r7, #116]	@ 0x74
 8010b98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8010b9c:	4642      	mov	r2, r8
 8010b9e:	464b      	mov	r3, r9
 8010ba0:	1891      	adds	r1, r2, r2
 8010ba2:	60b9      	str	r1, [r7, #8]
 8010ba4:	415b      	adcs	r3, r3
 8010ba6:	60fb      	str	r3, [r7, #12]
 8010ba8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010bac:	4641      	mov	r1, r8
 8010bae:	1851      	adds	r1, r2, r1
 8010bb0:	6039      	str	r1, [r7, #0]
 8010bb2:	4649      	mov	r1, r9
 8010bb4:	414b      	adcs	r3, r1
 8010bb6:	607b      	str	r3, [r7, #4]
 8010bb8:	f04f 0200 	mov.w	r2, #0
 8010bbc:	f04f 0300 	mov.w	r3, #0
 8010bc0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8010bc4:	4659      	mov	r1, fp
 8010bc6:	00cb      	lsls	r3, r1, #3
 8010bc8:	4651      	mov	r1, sl
 8010bca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010bce:	4651      	mov	r1, sl
 8010bd0:	00ca      	lsls	r2, r1, #3
 8010bd2:	4610      	mov	r0, r2
 8010bd4:	4619      	mov	r1, r3
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	4642      	mov	r2, r8
 8010bda:	189b      	adds	r3, r3, r2
 8010bdc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010bde:	464b      	mov	r3, r9
 8010be0:	460a      	mov	r2, r1
 8010be2:	eb42 0303 	adc.w	r3, r2, r3
 8010be6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010bec:	685b      	ldr	r3, [r3, #4]
 8010bee:	2200      	movs	r2, #0
 8010bf0:	663b      	str	r3, [r7, #96]	@ 0x60
 8010bf2:	667a      	str	r2, [r7, #100]	@ 0x64
 8010bf4:	f04f 0200 	mov.w	r2, #0
 8010bf8:	f04f 0300 	mov.w	r3, #0
 8010bfc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8010c00:	4649      	mov	r1, r9
 8010c02:	008b      	lsls	r3, r1, #2
 8010c04:	4641      	mov	r1, r8
 8010c06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010c0a:	4641      	mov	r1, r8
 8010c0c:	008a      	lsls	r2, r1, #2
 8010c0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8010c12:	f7f0 f849 	bl	8000ca8 <__aeabi_uldivmod>
 8010c16:	4602      	mov	r2, r0
 8010c18:	460b      	mov	r3, r1
 8010c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8010c50 <UART_SetConfig+0x4e4>)
 8010c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8010c20:	095b      	lsrs	r3, r3, #5
 8010c22:	2164      	movs	r1, #100	@ 0x64
 8010c24:	fb01 f303 	mul.w	r3, r1, r3
 8010c28:	1ad3      	subs	r3, r2, r3
 8010c2a:	011b      	lsls	r3, r3, #4
 8010c2c:	3332      	adds	r3, #50	@ 0x32
 8010c2e:	4a08      	ldr	r2, [pc, #32]	@ (8010c50 <UART_SetConfig+0x4e4>)
 8010c30:	fba2 2303 	umull	r2, r3, r2, r3
 8010c34:	095b      	lsrs	r3, r3, #5
 8010c36:	f003 020f 	and.w	r2, r3, #15
 8010c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	4422      	add	r2, r4
 8010c42:	609a      	str	r2, [r3, #8]
}
 8010c44:	bf00      	nop
 8010c46:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010c50:	51eb851f 	.word	0x51eb851f

08010c54 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8010c54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010c56:	2400      	movs	r4, #0
 8010c58:	2310      	movs	r3, #16
 8010c5a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8010c5e:	6803      	ldr	r3, [r0, #0]
 8010c60:	4615      	mov	r5, r2
 8010c62:	699e      	ldr	r6, [r3, #24]
 8010c64:	6812      	ldr	r2, [r2, #0]
 8010c66:	466b      	mov	r3, sp
 8010c68:	e9cd 4400 	strd	r4, r4, [sp]
 8010c6c:	47b0      	blx	r6
 8010c6e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010c72:	f003 0306 	and.w	r3, r3, #6
 8010c76:	2b06      	cmp	r3, #6
 8010c78:	bf03      	ittte	eq
 8010c7a:	9b00      	ldreq	r3, [sp, #0]
 8010c7c:	602b      	streq	r3, [r5, #0]
 8010c7e:	2001      	moveq	r0, #1
 8010c80:	4620      	movne	r0, r4
 8010c82:	b004      	add	sp, #16
 8010c84:	bd70      	pop	{r4, r5, r6, pc}

08010c86 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8010c86:	9800      	ldr	r0, [sp, #0]
 8010c88:	4290      	cmp	r0, r2
 8010c8a:	bf0c      	ite	eq
 8010c8c:	2006      	moveq	r0, #6
 8010c8e:	2001      	movne	r0, #1
 8010c90:	4770      	bx	lr
	...

08010c94 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8010c94:	b510      	push	{r4, lr}
 8010c96:	4b03      	ldr	r3, [pc, #12]	@ (8010ca4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8010c98:	6003      	str	r3, [r0, #0]
 8010c9a:	4604      	mov	r4, r0
 8010c9c:	f000 fd3d 	bl	801171a <_ZNSt9type_infoD1Ev>
 8010ca0:	4620      	mov	r0, r4
 8010ca2:	bd10      	pop	{r4, pc}
 8010ca4:	080166ec 	.word	0x080166ec

08010ca8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8010ca8:	b510      	push	{r4, lr}
 8010caa:	4604      	mov	r4, r0
 8010cac:	f7ff fff2 	bl	8010c94 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8010cb0:	4620      	mov	r0, r4
 8010cb2:	2108      	movs	r1, #8
 8010cb4:	f000 f842 	bl	8010d3c <_ZdlPvj>
 8010cb8:	4620      	mov	r0, r4
 8010cba:	bd10      	pop	{r4, pc}

08010cbc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8010cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cc0:	461f      	mov	r7, r3
 8010cc2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8010cc6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8010cca:	4598      	cmp	r8, r3
 8010ccc:	4606      	mov	r6, r0
 8010cce:	4615      	mov	r5, r2
 8010cd0:	d107      	bne.n	8010ce2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8010cd2:	9907      	ldr	r1, [sp, #28]
 8010cd4:	f000 fd24 	bl	8011720 <_ZNKSt9type_info7__equalERKS_>
 8010cd8:	b118      	cbz	r0, 8010ce2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8010cda:	7165      	strb	r5, [r4, #5]
 8010cdc:	2000      	movs	r0, #0
 8010cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ce2:	4639      	mov	r1, r7
 8010ce4:	4630      	mov	r0, r6
 8010ce6:	f000 fd1b 	bl	8011720 <_ZNKSt9type_info7__equalERKS_>
 8010cea:	2800      	cmp	r0, #0
 8010cec:	d0f6      	beq.n	8010cdc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8010cee:	2301      	movs	r3, #1
 8010cf0:	f8c4 8000 	str.w	r8, [r4]
 8010cf4:	7125      	strb	r5, [r4, #4]
 8010cf6:	71a3      	strb	r3, [r4, #6]
 8010cf8:	e7f0      	b.n	8010cdc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

08010cfa <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8010cfa:	b538      	push	{r3, r4, r5, lr}
 8010cfc:	4615      	mov	r5, r2
 8010cfe:	461c      	mov	r4, r3
 8010d00:	f000 fd0e 	bl	8011720 <_ZNKSt9type_info7__equalERKS_>
 8010d04:	b120      	cbz	r0, 8010d10 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8010d06:	2308      	movs	r3, #8
 8010d08:	60e3      	str	r3, [r4, #12]
 8010d0a:	2306      	movs	r3, #6
 8010d0c:	6025      	str	r5, [r4, #0]
 8010d0e:	7123      	strb	r3, [r4, #4]
 8010d10:	bd38      	pop	{r3, r4, r5, pc}

08010d12 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8010d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d16:	4605      	mov	r5, r0
 8010d18:	460c      	mov	r4, r1
 8010d1a:	4616      	mov	r6, r2
 8010d1c:	461f      	mov	r7, r3
 8010d1e:	f000 fcff 	bl	8011720 <_ZNKSt9type_info7__equalERKS_>
 8010d22:	b948      	cbnz	r0, 8010d38 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8010d24:	2f03      	cmp	r7, #3
 8010d26:	d807      	bhi.n	8010d38 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8010d28:	6823      	ldr	r3, [r4, #0]
 8010d2a:	4632      	mov	r2, r6
 8010d2c:	4629      	mov	r1, r5
 8010d2e:	4620      	mov	r0, r4
 8010d30:	695b      	ldr	r3, [r3, #20]
 8010d32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d36:	4718      	bx	r3
 8010d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010d3c <_ZdlPvj>:
 8010d3c:	f000 bdd6 	b.w	80118ec <_ZdlPv>

08010d40 <_ZdaPv>:
 8010d40:	f000 bdd4 	b.w	80118ec <_ZdlPv>

08010d44 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>:
 8010d44:	4a19      	ldr	r2, [pc, #100]	@ (8010dac <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x68>)
 8010d46:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8010d4a:	6853      	ldr	r3, [r2, #4]
 8010d4c:	b570      	push	{r4, r5, r6, lr}
 8010d4e:	f1a0 0408 	sub.w	r4, r0, #8
 8010d52:	b113      	cbz	r3, 8010d5a <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x16>
 8010d54:	1865      	adds	r5, r4, r1
 8010d56:	42ab      	cmp	r3, r5
 8010d58:	d903      	bls.n	8010d62 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1e>
 8010d5a:	f840 3c04 	str.w	r3, [r0, #-4]
 8010d5e:	6054      	str	r4, [r2, #4]
 8010d60:	bd70      	pop	{r4, r5, r6, pc}
 8010d62:	685e      	ldr	r6, [r3, #4]
 8010d64:	d11f      	bne.n	8010da6 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x62>
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	440b      	add	r3, r1
 8010d6a:	e940 3602 	strd	r3, r6, [r0, #-8]
 8010d6e:	e7f6      	b.n	8010d5e <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1a>
 8010d70:	1d1a      	adds	r2, r3, #4
 8010d72:	4633      	mov	r3, r6
 8010d74:	685e      	ldr	r6, [r3, #4]
 8010d76:	b136      	cbz	r6, 8010d86 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x42>
 8010d78:	42b5      	cmp	r5, r6
 8010d7a:	d3f9      	bcc.n	8010d70 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x2c>
 8010d7c:	bf01      	itttt	eq
 8010d7e:	682e      	ldreq	r6, [r5, #0]
 8010d80:	686d      	ldreq	r5, [r5, #4]
 8010d82:	605d      	streq	r5, [r3, #4]
 8010d84:	1989      	addeq	r1, r1, r6
 8010d86:	6813      	ldr	r3, [r2, #0]
 8010d88:	681d      	ldr	r5, [r3, #0]
 8010d8a:	195e      	adds	r6, r3, r5
 8010d8c:	42b4      	cmp	r4, r6
 8010d8e:	bf1f      	itttt	ne
 8010d90:	685b      	ldrne	r3, [r3, #4]
 8010d92:	f840 3c04 	strne.w	r3, [r0, #-4]
 8010d96:	6813      	ldrne	r3, [r2, #0]
 8010d98:	f840 1c08 	strne.w	r1, [r0, #-8]
 8010d9c:	bf06      	itte	eq
 8010d9e:	186d      	addeq	r5, r5, r1
 8010da0:	601d      	streq	r5, [r3, #0]
 8010da2:	605c      	strne	r4, [r3, #4]
 8010da4:	e7dc      	b.n	8010d60 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1c>
 8010da6:	3204      	adds	r2, #4
 8010da8:	e7e4      	b.n	8010d74 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x30>
 8010daa:	bf00      	nop
 8010dac:	20000410 	.word	0x20000410

08010db0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>:
 8010db0:	3008      	adds	r0, #8
 8010db2:	2808      	cmp	r0, #8
 8010db4:	b530      	push	{r4, r5, lr}
 8010db6:	4a0f      	ldr	r2, [pc, #60]	@ (8010df4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x44>)
 8010db8:	bf38      	it	cc
 8010dba:	2008      	movcc	r0, #8
 8010dbc:	3007      	adds	r0, #7
 8010dbe:	f020 0307 	bic.w	r3, r0, #7
 8010dc2:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8010dc6:	b198      	cbz	r0, 8010df0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x40>
 8010dc8:	6801      	ldr	r1, [r0, #0]
 8010dca:	428b      	cmp	r3, r1
 8010dcc:	d806      	bhi.n	8010ddc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x2c>
 8010dce:	1acd      	subs	r5, r1, r3
 8010dd0:	2d07      	cmp	r5, #7
 8010dd2:	6844      	ldr	r4, [r0, #4]
 8010dd4:	d805      	bhi.n	8010de2 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x32>
 8010dd6:	6001      	str	r1, [r0, #0]
 8010dd8:	4621      	mov	r1, r4
 8010dda:	e007      	b.n	8010dec <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x3c>
 8010ddc:	1d02      	adds	r2, r0, #4
 8010dde:	6840      	ldr	r0, [r0, #4]
 8010de0:	e7f1      	b.n	8010dc6 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x16>
 8010de2:	18c1      	adds	r1, r0, r3
 8010de4:	604c      	str	r4, [r1, #4]
 8010de6:	50c5      	str	r5, [r0, r3]
 8010de8:	6810      	ldr	r0, [r2, #0]
 8010dea:	6003      	str	r3, [r0, #0]
 8010dec:	6011      	str	r1, [r2, #0]
 8010dee:	3008      	adds	r0, #8
 8010df0:	bd30      	pop	{r4, r5, pc}
 8010df2:	bf00      	nop
 8010df4:	20000410 	.word	0x20000410

08010df8 <__cxa_allocate_exception>:
 8010df8:	b510      	push	{r4, lr}
 8010dfa:	f100 0480 	add.w	r4, r0, #128	@ 0x80
 8010dfe:	4620      	mov	r0, r4
 8010e00:	f001 fd6c 	bl	80128dc <malloc>
 8010e04:	4603      	mov	r3, r0
 8010e06:	b930      	cbnz	r0, 8010e16 <__cxa_allocate_exception+0x1e>
 8010e08:	4620      	mov	r0, r4
 8010e0a:	f7ff ffd1 	bl	8010db0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>
 8010e0e:	4603      	mov	r3, r0
 8010e10:	b908      	cbnz	r0, 8010e16 <__cxa_allocate_exception+0x1e>
 8010e12:	f000 fb6d 	bl	80114f0 <_ZSt9terminatev>
 8010e16:	2280      	movs	r2, #128	@ 0x80
 8010e18:	2100      	movs	r1, #0
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	f002 fb87 	bl	801352e <memset>
 8010e20:	3080      	adds	r0, #128	@ 0x80
 8010e22:	bd10      	pop	{r4, pc}

08010e24 <__cxa_free_exception>:
 8010e24:	4a06      	ldr	r2, [pc, #24]	@ (8010e40 <__cxa_free_exception+0x1c>)
 8010e26:	6893      	ldr	r3, [r2, #8]
 8010e28:	3880      	subs	r0, #128	@ 0x80
 8010e2a:	4298      	cmp	r0, r3
 8010e2c:	d905      	bls.n	8010e3a <__cxa_free_exception+0x16>
 8010e2e:	68d2      	ldr	r2, [r2, #12]
 8010e30:	4413      	add	r3, r2
 8010e32:	4298      	cmp	r0, r3
 8010e34:	d201      	bcs.n	8010e3a <__cxa_free_exception+0x16>
 8010e36:	f7ff bf85 	b.w	8010d44 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
 8010e3a:	f001 bd57 	b.w	80128ec <free>
 8010e3e:	bf00      	nop
 8010e40:	20000410 	.word	0x20000410

08010e44 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 8010e44:	b538      	push	{r3, r4, r5, lr}
 8010e46:	4c08      	ldr	r4, [pc, #32]	@ (8010e68 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 8010e48:	f44f 651e 	mov.w	r5, #2528	@ 0x9e0
 8010e4c:	4628      	mov	r0, r5
 8010e4e:	60e5      	str	r5, [r4, #12]
 8010e50:	f001 fd44 	bl	80128dc <malloc>
 8010e54:	60a0      	str	r0, [r4, #8]
 8010e56:	b910      	cbnz	r0, 8010e5e <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1a>
 8010e58:	60e0      	str	r0, [r4, #12]
 8010e5a:	6060      	str	r0, [r4, #4]
 8010e5c:	bd38      	pop	{r3, r4, r5, pc}
 8010e5e:	2300      	movs	r3, #0
 8010e60:	6060      	str	r0, [r4, #4]
 8010e62:	6005      	str	r5, [r0, #0]
 8010e64:	6043      	str	r3, [r0, #4]
 8010e66:	e7f9      	b.n	8010e5c <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x18>
 8010e68:	20000410 	.word	0x20000410

08010e6c <__cxa_end_cleanup>:
 8010e6c:	b41e      	push	{r1, r2, r3, r4}
 8010e6e:	f000 f89c 	bl	8010faa <__gnu_end_cleanup>
 8010e72:	bc1e      	pop	{r1, r2, r3, r4}
 8010e74:	f7f0 fe16 	bl	8001aa4 <_Unwind_Resume>

08010e78 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8010e78:	7803      	ldrb	r3, [r0, #0]
 8010e7a:	2b47      	cmp	r3, #71	@ 0x47
 8010e7c:	d117      	bne.n	8010eae <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8010e7e:	7843      	ldrb	r3, [r0, #1]
 8010e80:	2b4e      	cmp	r3, #78	@ 0x4e
 8010e82:	d114      	bne.n	8010eae <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8010e84:	7883      	ldrb	r3, [r0, #2]
 8010e86:	2b55      	cmp	r3, #85	@ 0x55
 8010e88:	d111      	bne.n	8010eae <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8010e8a:	78c3      	ldrb	r3, [r0, #3]
 8010e8c:	2b43      	cmp	r3, #67	@ 0x43
 8010e8e:	d10e      	bne.n	8010eae <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8010e90:	7903      	ldrb	r3, [r0, #4]
 8010e92:	2b43      	cmp	r3, #67	@ 0x43
 8010e94:	d10b      	bne.n	8010eae <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8010e96:	7943      	ldrb	r3, [r0, #5]
 8010e98:	2b2b      	cmp	r3, #43	@ 0x2b
 8010e9a:	d108      	bne.n	8010eae <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8010e9c:	7983      	ldrb	r3, [r0, #6]
 8010e9e:	2b2b      	cmp	r3, #43	@ 0x2b
 8010ea0:	d105      	bne.n	8010eae <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8010ea2:	79c0      	ldrb	r0, [r0, #7]
 8010ea4:	2801      	cmp	r0, #1
 8010ea6:	bf8c      	ite	hi
 8010ea8:	2000      	movhi	r0, #0
 8010eaa:	2001      	movls	r0, #1
 8010eac:	4770      	bx	lr
 8010eae:	2000      	movs	r0, #0
 8010eb0:	4770      	bx	lr
	...

08010eb4 <__cxa_type_match>:
 8010eb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010eb8:	461d      	mov	r5, r3
 8010eba:	7803      	ldrb	r3, [r0, #0]
 8010ebc:	2b47      	cmp	r3, #71	@ 0x47
 8010ebe:	460e      	mov	r6, r1
 8010ec0:	4602      	mov	r2, r0
 8010ec2:	79c1      	ldrb	r1, [r0, #7]
 8010ec4:	d113      	bne.n	8010eee <__cxa_type_match+0x3a>
 8010ec6:	7843      	ldrb	r3, [r0, #1]
 8010ec8:	2b4e      	cmp	r3, #78	@ 0x4e
 8010eca:	d110      	bne.n	8010eee <__cxa_type_match+0x3a>
 8010ecc:	7883      	ldrb	r3, [r0, #2]
 8010ece:	2b55      	cmp	r3, #85	@ 0x55
 8010ed0:	d10d      	bne.n	8010eee <__cxa_type_match+0x3a>
 8010ed2:	78c3      	ldrb	r3, [r0, #3]
 8010ed4:	2b43      	cmp	r3, #67	@ 0x43
 8010ed6:	d10a      	bne.n	8010eee <__cxa_type_match+0x3a>
 8010ed8:	7903      	ldrb	r3, [r0, #4]
 8010eda:	2b46      	cmp	r3, #70	@ 0x46
 8010edc:	d107      	bne.n	8010eee <__cxa_type_match+0x3a>
 8010ede:	7943      	ldrb	r3, [r0, #5]
 8010ee0:	2b4f      	cmp	r3, #79	@ 0x4f
 8010ee2:	d104      	bne.n	8010eee <__cxa_type_match+0x3a>
 8010ee4:	7983      	ldrb	r3, [r0, #6]
 8010ee6:	2b52      	cmp	r3, #82	@ 0x52
 8010ee8:	d101      	bne.n	8010eee <__cxa_type_match+0x3a>
 8010eea:	2900      	cmp	r1, #0
 8010eec:	d031      	beq.n	8010f52 <__cxa_type_match+0x9e>
 8010eee:	4610      	mov	r0, r2
 8010ef0:	f7ff ffc2 	bl	8010e78 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8010ef4:	f080 0401 	eor.w	r4, r0, #1
 8010ef8:	b2e4      	uxtb	r4, r4
 8010efa:	2300      	movs	r3, #0
 8010efc:	2000      	movs	r0, #0
 8010efe:	9001      	str	r0, [sp, #4]
 8010f00:	bb53      	cbnz	r3, 8010f58 <__cxa_type_match+0xa4>
 8010f02:	bb5c      	cbnz	r4, 8010f5c <__cxa_type_match+0xa8>
 8010f04:	2901      	cmp	r1, #1
 8010f06:	bf0a      	itet	eq
 8010f08:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8010f0c:	f1a2 0320 	subne.w	r3, r2, #32
 8010f10:	3b78      	subeq	r3, #120	@ 0x78
 8010f12:	2901      	cmp	r1, #1
 8010f14:	bf08      	it	eq
 8010f16:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8010f1a:	681c      	ldr	r4, [r3, #0]
 8010f1c:	bf18      	it	ne
 8010f1e:	3258      	addne	r2, #88	@ 0x58
 8010f20:	9201      	str	r2, [sp, #4]
 8010f22:	6823      	ldr	r3, [r4, #0]
 8010f24:	4620      	mov	r0, r4
 8010f26:	689b      	ldr	r3, [r3, #8]
 8010f28:	4798      	blx	r3
 8010f2a:	b1c8      	cbz	r0, 8010f60 <__cxa_type_match+0xac>
 8010f2c:	9b01      	ldr	r3, [sp, #4]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	9301      	str	r3, [sp, #4]
 8010f32:	2702      	movs	r7, #2
 8010f34:	6833      	ldr	r3, [r6, #0]
 8010f36:	aa01      	add	r2, sp, #4
 8010f38:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8010f3c:	4621      	mov	r1, r4
 8010f3e:	2301      	movs	r3, #1
 8010f40:	4630      	mov	r0, r6
 8010f42:	47c0      	blx	r8
 8010f44:	b170      	cbz	r0, 8010f64 <__cxa_type_match+0xb0>
 8010f46:	9b01      	ldr	r3, [sp, #4]
 8010f48:	602b      	str	r3, [r5, #0]
 8010f4a:	4638      	mov	r0, r7
 8010f4c:	b002      	add	sp, #8
 8010f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f52:	2301      	movs	r3, #1
 8010f54:	460c      	mov	r4, r1
 8010f56:	e7d1      	b.n	8010efc <__cxa_type_match+0x48>
 8010f58:	4c03      	ldr	r4, [pc, #12]	@ (8010f68 <__cxa_type_match+0xb4>)
 8010f5a:	e7e2      	b.n	8010f22 <__cxa_type_match+0x6e>
 8010f5c:	4c03      	ldr	r4, [pc, #12]	@ (8010f6c <__cxa_type_match+0xb8>)
 8010f5e:	e7e0      	b.n	8010f22 <__cxa_type_match+0x6e>
 8010f60:	2701      	movs	r7, #1
 8010f62:	e7e7      	b.n	8010f34 <__cxa_type_match+0x80>
 8010f64:	4607      	mov	r7, r0
 8010f66:	e7f0      	b.n	8010f4a <__cxa_type_match+0x96>
 8010f68:	08016748 	.word	0x08016748
 8010f6c:	08016774 	.word	0x08016774

08010f70 <__cxa_begin_cleanup>:
 8010f70:	b510      	push	{r4, lr}
 8010f72:	4604      	mov	r4, r0
 8010f74:	f000 f834 	bl	8010fe0 <__cxa_get_globals>
 8010f78:	4602      	mov	r2, r0
 8010f7a:	4620      	mov	r0, r4
 8010f7c:	f1a4 0120 	sub.w	r1, r4, #32
 8010f80:	f7ff ff7a 	bl	8010e78 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8010f84:	b160      	cbz	r0, 8010fa0 <__cxa_begin_cleanup+0x30>
 8010f86:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010f8a:	3301      	adds	r3, #1
 8010f8c:	2b01      	cmp	r3, #1
 8010f8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8010f92:	d103      	bne.n	8010f9c <__cxa_begin_cleanup+0x2c>
 8010f94:	6893      	ldr	r3, [r2, #8]
 8010f96:	f844 3c08 	str.w	r3, [r4, #-8]
 8010f9a:	6091      	str	r1, [r2, #8]
 8010f9c:	2001      	movs	r0, #1
 8010f9e:	bd10      	pop	{r4, pc}
 8010fa0:	6893      	ldr	r3, [r2, #8]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d0f9      	beq.n	8010f9a <__cxa_begin_cleanup+0x2a>
 8010fa6:	f000 faa3 	bl	80114f0 <_ZSt9terminatev>

08010faa <__gnu_end_cleanup>:
 8010faa:	b510      	push	{r4, lr}
 8010fac:	f000 f818 	bl	8010fe0 <__cxa_get_globals>
 8010fb0:	6882      	ldr	r2, [r0, #8]
 8010fb2:	4601      	mov	r1, r0
 8010fb4:	b90a      	cbnz	r2, 8010fba <__gnu_end_cleanup+0x10>
 8010fb6:	f000 fa9b 	bl	80114f0 <_ZSt9terminatev>
 8010fba:	f102 0420 	add.w	r4, r2, #32
 8010fbe:	4620      	mov	r0, r4
 8010fc0:	f7ff ff5a 	bl	8010e78 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8010fc4:	b140      	cbz	r0, 8010fd8 <__gnu_end_cleanup+0x2e>
 8010fc6:	69d3      	ldr	r3, [r2, #28]
 8010fc8:	3b01      	subs	r3, #1
 8010fca:	61d3      	str	r3, [r2, #28]
 8010fcc:	b913      	cbnz	r3, 8010fd4 <__gnu_end_cleanup+0x2a>
 8010fce:	6990      	ldr	r0, [r2, #24]
 8010fd0:	6088      	str	r0, [r1, #8]
 8010fd2:	6193      	str	r3, [r2, #24]
 8010fd4:	4620      	mov	r0, r4
 8010fd6:	bd10      	pop	{r4, pc}
 8010fd8:	6088      	str	r0, [r1, #8]
 8010fda:	e7fb      	b.n	8010fd4 <__gnu_end_cleanup+0x2a>

08010fdc <_ZNSt9exceptionD1Ev>:
 8010fdc:	4770      	bx	lr

08010fde <_ZN12_GLOBAL__N_113constant_initD1Ev>:
 8010fde:	4770      	bx	lr

08010fe0 <__cxa_get_globals>:
 8010fe0:	4800      	ldr	r0, [pc, #0]	@ (8010fe4 <__cxa_get_globals+0x4>)
 8010fe2:	4770      	bx	lr
 8010fe4:	20000420 	.word	0x20000420

08010fe8 <_GLOBAL__sub_I___cxa_get_globals_fast>:
 8010fe8:	4a02      	ldr	r2, [pc, #8]	@ (8010ff4 <_GLOBAL__sub_I___cxa_get_globals_fast+0xc>)
 8010fea:	4903      	ldr	r1, [pc, #12]	@ (8010ff8 <_GLOBAL__sub_I___cxa_get_globals_fast+0x10>)
 8010fec:	4803      	ldr	r0, [pc, #12]	@ (8010ffc <_GLOBAL__sub_I___cxa_get_globals_fast+0x14>)
 8010fee:	f000 bc78 	b.w	80118e2 <__aeabi_atexit>
 8010ff2:	bf00      	nop
 8010ff4:	20000000 	.word	0x20000000
 8010ff8:	08010fdf 	.word	0x08010fdf
 8010ffc:	20000420 	.word	0x20000420

08011000 <_ZL12read_uleb128PKhPm>:
 8011000:	b530      	push	{r4, r5, lr}
 8011002:	2300      	movs	r3, #0
 8011004:	461a      	mov	r2, r3
 8011006:	f810 5b01 	ldrb.w	r5, [r0], #1
 801100a:	f005 047f 	and.w	r4, r5, #127	@ 0x7f
 801100e:	4094      	lsls	r4, r2
 8011010:	4323      	orrs	r3, r4
 8011012:	062c      	lsls	r4, r5, #24
 8011014:	f102 0207 	add.w	r2, r2, #7
 8011018:	d4f5      	bmi.n	8011006 <_ZL12read_uleb128PKhPm+0x6>
 801101a:	600b      	str	r3, [r1, #0]
 801101c:	bd30      	pop	{r4, r5, pc}

0801101e <_ZL12read_sleb128PKhPl>:
 801101e:	b530      	push	{r4, r5, lr}
 8011020:	2300      	movs	r3, #0
 8011022:	461a      	mov	r2, r3
 8011024:	f810 4b01 	ldrb.w	r4, [r0], #1
 8011028:	f004 057f 	and.w	r5, r4, #127	@ 0x7f
 801102c:	4095      	lsls	r5, r2
 801102e:	432b      	orrs	r3, r5
 8011030:	0625      	lsls	r5, r4, #24
 8011032:	f102 0207 	add.w	r2, r2, #7
 8011036:	d4f5      	bmi.n	8011024 <_ZL12read_sleb128PKhPl+0x6>
 8011038:	2a1f      	cmp	r2, #31
 801103a:	d806      	bhi.n	801104a <_ZL12read_sleb128PKhPl+0x2c>
 801103c:	0664      	lsls	r4, r4, #25
 801103e:	bf42      	ittt	mi
 8011040:	f04f 34ff 	movmi.w	r4, #4294967295	@ 0xffffffff
 8011044:	fa04 f202 	lslmi.w	r2, r4, r2
 8011048:	4313      	orrmi	r3, r2
 801104a:	600b      	str	r3, [r1, #0]
 801104c:	bd30      	pop	{r4, r5, pc}

0801104e <_ZL28read_encoded_value_with_basehjPKhPj>:
 801104e:	2850      	cmp	r0, #80	@ 0x50
 8011050:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011054:	4606      	mov	r6, r0
 8011056:	4688      	mov	r8, r1
 8011058:	4615      	mov	r5, r2
 801105a:	461f      	mov	r7, r3
 801105c:	d108      	bne.n	8011070 <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
 801105e:	1cd0      	adds	r0, r2, #3
 8011060:	f020 0003 	bic.w	r0, r0, #3
 8011064:	f850 4b04 	ldr.w	r4, [r0], #4
 8011068:	603c      	str	r4, [r7, #0]
 801106a:	b002      	add	sp, #8
 801106c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011070:	f000 030f 	and.w	r3, r0, #15
 8011074:	2b0c      	cmp	r3, #12
 8011076:	d82e      	bhi.n	80110d6 <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
 8011078:	e8df f003 	tbb	[pc, r3]
 801107c:	251d0725 	.word	0x251d0725
 8011080:	2d2d2d29 	.word	0x2d2d2d29
 8011084:	2521182d 	.word	0x2521182d
 8011088:	29          	.byte	0x29
 8011089:	00          	.byte	0x00
 801108a:	a901      	add	r1, sp, #4
 801108c:	4628      	mov	r0, r5
 801108e:	f7ff ffb7 	bl	8011000 <_ZL12read_uleb128PKhPm>
 8011092:	9c01      	ldr	r4, [sp, #4]
 8011094:	2c00      	cmp	r4, #0
 8011096:	d0e7      	beq.n	8011068 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8011098:	f006 0370 	and.w	r3, r6, #112	@ 0x70
 801109c:	2b10      	cmp	r3, #16
 801109e:	bf08      	it	eq
 80110a0:	46a8      	moveq	r8, r5
 80110a2:	4444      	add	r4, r8
 80110a4:	0633      	lsls	r3, r6, #24
 80110a6:	bf48      	it	mi
 80110a8:	6824      	ldrmi	r4, [r4, #0]
 80110aa:	e7dd      	b.n	8011068 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 80110ac:	a901      	add	r1, sp, #4
 80110ae:	4628      	mov	r0, r5
 80110b0:	f7ff ffb5 	bl	801101e <_ZL12read_sleb128PKhPl>
 80110b4:	e7ed      	b.n	8011092 <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
 80110b6:	4628      	mov	r0, r5
 80110b8:	f830 4b02 	ldrh.w	r4, [r0], #2
 80110bc:	e7ea      	b.n	8011094 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 80110be:	4628      	mov	r0, r5
 80110c0:	f930 4b02 	ldrsh.w	r4, [r0], #2
 80110c4:	e7e6      	b.n	8011094 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 80110c6:	4628      	mov	r0, r5
 80110c8:	f850 4b04 	ldr.w	r4, [r0], #4
 80110cc:	e7e2      	b.n	8011094 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 80110ce:	4628      	mov	r0, r5
 80110d0:	f850 4b08 	ldr.w	r4, [r0], #8
 80110d4:	e7de      	b.n	8011094 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 80110d6:	f001 fbf9 	bl	80128cc <abort>

080110da <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 80110da:	b508      	push	{r3, lr}
 80110dc:	4603      	mov	r3, r0
 80110de:	2bff      	cmp	r3, #255	@ 0xff
 80110e0:	4608      	mov	r0, r1
 80110e2:	d00d      	beq.n	8011100 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
 80110e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80110e8:	2b30      	cmp	r3, #48	@ 0x30
 80110ea:	d00f      	beq.n	801110c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
 80110ec:	d804      	bhi.n	80110f8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1e>
 80110ee:	2b20      	cmp	r3, #32
 80110f0:	d008      	beq.n	8011104 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
 80110f2:	d905      	bls.n	8011100 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
 80110f4:	f001 fbea 	bl	80128cc <abort>
 80110f8:	2b40      	cmp	r3, #64	@ 0x40
 80110fa:	d00b      	beq.n	8011114 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3a>
 80110fc:	2b50      	cmp	r3, #80	@ 0x50
 80110fe:	d1f9      	bne.n	80110f4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8011100:	2000      	movs	r0, #0
 8011102:	bd08      	pop	{r3, pc}
 8011104:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011108:	f004 b87b 	b.w	8015202 <_Unwind_GetTextRelBase>
 801110c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011110:	f004 b874 	b.w	80151fc <_Unwind_GetDataRelBase>
 8011114:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011118:	f7f0 beb8 	b.w	8001e8c <_Unwind_GetRegionStart>

0801111c <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 801111c:	b570      	push	{r4, r5, r6, lr}
 801111e:	460c      	mov	r4, r1
 8011120:	4601      	mov	r1, r0
 8011122:	4620      	mov	r0, r4
 8011124:	4615      	mov	r5, r2
 8011126:	461e      	mov	r6, r3
 8011128:	f7ff ffd7 	bl	80110da <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 801112c:	4633      	mov	r3, r6
 801112e:	4601      	mov	r1, r0
 8011130:	462a      	mov	r2, r5
 8011132:	4620      	mov	r0, r4
 8011134:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011138:	f7ff bf89 	b.w	801104e <_ZL28read_encoded_value_with_basehjPKhPj>

0801113c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 801113c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801113e:	460c      	mov	r4, r1
 8011140:	4615      	mov	r5, r2
 8011142:	4606      	mov	r6, r0
 8011144:	b108      	cbz	r0, 801114a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 8011146:	f7f0 fea1 	bl	8001e8c <_Unwind_GetRegionStart>
 801114a:	4622      	mov	r2, r4
 801114c:	6028      	str	r0, [r5, #0]
 801114e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8011152:	29ff      	cmp	r1, #255	@ 0xff
 8011154:	d01c      	beq.n	8011190 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
 8011156:	1d2b      	adds	r3, r5, #4
 8011158:	4630      	mov	r0, r6
 801115a:	f7ff ffdf 	bl	801111c <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 801115e:	4602      	mov	r2, r0
 8011160:	4610      	mov	r0, r2
 8011162:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011166:	2bff      	cmp	r3, #255	@ 0xff
 8011168:	d014      	beq.n	8011194 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x58>
 801116a:	2310      	movs	r3, #16
 801116c:	752b      	strb	r3, [r5, #20]
 801116e:	a901      	add	r1, sp, #4
 8011170:	f7ff ff46 	bl	8011000 <_ZL12read_uleb128PKhPm>
 8011174:	9b01      	ldr	r3, [sp, #4]
 8011176:	4403      	add	r3, r0
 8011178:	60eb      	str	r3, [r5, #12]
 801117a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801117e:	756b      	strb	r3, [r5, #21]
 8011180:	a901      	add	r1, sp, #4
 8011182:	f7ff ff3d 	bl	8011000 <_ZL12read_uleb128PKhPm>
 8011186:	9b01      	ldr	r3, [sp, #4]
 8011188:	4403      	add	r3, r0
 801118a:	612b      	str	r3, [r5, #16]
 801118c:	b002      	add	sp, #8
 801118e:	bd70      	pop	{r4, r5, r6, pc}
 8011190:	6068      	str	r0, [r5, #4]
 8011192:	e7e5      	b.n	8011160 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x24>
 8011194:	752b      	strb	r3, [r5, #20]
 8011196:	2300      	movs	r3, #0
 8011198:	e7ee      	b.n	8011178 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>

0801119a <_Unwind_GetGR>:
 801119a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801119c:	ab03      	add	r3, sp, #12
 801119e:	9300      	str	r3, [sp, #0]
 80111a0:	2300      	movs	r3, #0
 80111a2:	460a      	mov	r2, r1
 80111a4:	4619      	mov	r1, r3
 80111a6:	f7f0 f8bd 	bl	8001324 <_Unwind_VRS_Get>
 80111aa:	9803      	ldr	r0, [sp, #12]
 80111ac:	b005      	add	sp, #20
 80111ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080111b4 <__gxx_personality_v0>:
 80111b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111b8:	b093      	sub	sp, #76	@ 0x4c
 80111ba:	2300      	movs	r3, #0
 80111bc:	9307      	str	r3, [sp, #28]
 80111be:	f000 0303 	and.w	r3, r0, #3
 80111c2:	2b01      	cmp	r3, #1
 80111c4:	4605      	mov	r5, r0
 80111c6:	460c      	mov	r4, r1
 80111c8:	4616      	mov	r6, r2
 80111ca:	d010      	beq.n	80111ee <__gxx_personality_v0+0x3a>
 80111cc:	2b02      	cmp	r3, #2
 80111ce:	d003      	beq.n	80111d8 <__gxx_personality_v0+0x24>
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d13b      	bne.n	801124c <__gxx_personality_v0+0x98>
 80111d4:	0701      	lsls	r1, r0, #28
 80111d6:	d53b      	bpl.n	8011250 <__gxx_personality_v0+0x9c>
 80111d8:	4631      	mov	r1, r6
 80111da:	4620      	mov	r0, r4
 80111dc:	f7f0 fe40 	bl	8001e60 <__gnu_unwind_frame>
 80111e0:	b118      	cbz	r0, 80111ea <__gxx_personality_v0+0x36>
 80111e2:	2009      	movs	r0, #9
 80111e4:	b013      	add	sp, #76	@ 0x4c
 80111e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111ea:	2008      	movs	r0, #8
 80111ec:	e7fa      	b.n	80111e4 <__gxx_personality_v0+0x30>
 80111ee:	0702      	lsls	r2, r0, #28
 80111f0:	d523      	bpl.n	801123a <__gxx_personality_v0+0x86>
 80111f2:	2302      	movs	r3, #2
 80111f4:	f005 0508 	and.w	r5, r5, #8
 80111f8:	431d      	orrs	r5, r3
 80111fa:	ab0c      	add	r3, sp, #48	@ 0x30
 80111fc:	9300      	str	r3, [sp, #0]
 80111fe:	2300      	movs	r3, #0
 8011200:	220c      	movs	r2, #12
 8011202:	4619      	mov	r1, r3
 8011204:	4630      	mov	r0, r6
 8011206:	940c      	str	r4, [sp, #48]	@ 0x30
 8011208:	f7f0 f8b2 	bl	8001370 <_Unwind_VRS_Set>
 801120c:	2d06      	cmp	r5, #6
 801120e:	d121      	bne.n	8011254 <__gxx_personality_v0+0xa0>
 8011210:	f8d4 8030 	ldr.w	r8, [r4, #48]	@ 0x30
 8011214:	e9d4 790a 	ldrd	r7, r9, [r4, #40]	@ 0x28
 8011218:	f1b8 0f00 	cmp.w	r8, #0
 801121c:	bf0c      	ite	eq
 801121e:	f04f 0a01 	moveq.w	sl, #1
 8011222:	f04f 0a03 	movne.w	sl, #3
 8011226:	f015 0508 	ands.w	r5, r5, #8
 801122a:	f000 8103 	beq.w	8011434 <__gxx_personality_v0+0x280>
 801122e:	f1ba 0f01 	cmp.w	sl, #1
 8011232:	f040 80fb 	bne.w	801142c <__gxx_personality_v0+0x278>
 8011236:	f000 f95b 	bl	80114f0 <_ZSt9terminatev>
 801123a:	6a0f      	ldr	r7, [r1, #32]
 801123c:	4630      	mov	r0, r6
 801123e:	210d      	movs	r1, #13
 8011240:	f7ff ffab 	bl	801119a <_Unwind_GetGR>
 8011244:	4287      	cmp	r7, r0
 8011246:	d1d4      	bne.n	80111f2 <__gxx_personality_v0+0x3e>
 8011248:	2306      	movs	r3, #6
 801124a:	e7d3      	b.n	80111f4 <__gxx_personality_v0+0x40>
 801124c:	f001 fb3e 	bl	80128cc <abort>
 8011250:	2301      	movs	r3, #1
 8011252:	e7cf      	b.n	80111f4 <__gxx_personality_v0+0x40>
 8011254:	4630      	mov	r0, r6
 8011256:	f7f0 fe1f 	bl	8001e98 <_Unwind_GetLanguageSpecificData>
 801125a:	4681      	mov	r9, r0
 801125c:	2800      	cmp	r0, #0
 801125e:	d0bb      	beq.n	80111d8 <__gxx_personality_v0+0x24>
 8011260:	aa0c      	add	r2, sp, #48	@ 0x30
 8011262:	4601      	mov	r1, r0
 8011264:	4630      	mov	r0, r6
 8011266:	f7ff ff69 	bl	801113c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 801126a:	f89d b044 	ldrb.w	fp, [sp, #68]	@ 0x44
 801126e:	9003      	str	r0, [sp, #12]
 8011270:	4631      	mov	r1, r6
 8011272:	4658      	mov	r0, fp
 8011274:	f7ff ff31 	bl	80110da <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8011278:	210f      	movs	r1, #15
 801127a:	9002      	str	r0, [sp, #8]
 801127c:	900e      	str	r0, [sp, #56]	@ 0x38
 801127e:	4630      	mov	r0, r6
 8011280:	f7ff ff8b 	bl	801119a <_Unwind_GetGR>
 8011284:	9a03      	ldr	r2, [sp, #12]
 8011286:	f020 0801 	bic.w	r8, r0, #1
 801128a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801128e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8011290:	4297      	cmp	r7, r2
 8011292:	d815      	bhi.n	80112c0 <__gxx_personality_v0+0x10c>
 8011294:	2700      	movs	r7, #0
 8011296:	46b8      	mov	r8, r7
 8011298:	f04f 0a01 	mov.w	sl, #1
 801129c:	07eb      	lsls	r3, r5, #31
 801129e:	d5c2      	bpl.n	8011226 <__gxx_personality_v0+0x72>
 80112a0:	f1ba 0f02 	cmp.w	sl, #2
 80112a4:	d098      	beq.n	80111d8 <__gxx_personality_v0+0x24>
 80112a6:	210d      	movs	r1, #13
 80112a8:	4630      	mov	r0, r6
 80112aa:	9d07      	ldr	r5, [sp, #28]
 80112ac:	f7ff ff75 	bl	801119a <_Unwind_GetGR>
 80112b0:	e9c4 790a 	strd	r7, r9, [r4, #40]	@ 0x28
 80112b4:	e9c4 0508 	strd	r0, r5, [r4, #32]
 80112b8:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
 80112bc:	2006      	movs	r0, #6
 80112be:	e791      	b.n	80111e4 <__gxx_personality_v0+0x30>
 80112c0:	f89d a045 	ldrb.w	sl, [sp, #69]	@ 0x45
 80112c4:	ab08      	add	r3, sp, #32
 80112c6:	4651      	mov	r1, sl
 80112c8:	2000      	movs	r0, #0
 80112ca:	f7ff ff27 	bl	801111c <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80112ce:	ab09      	add	r3, sp, #36	@ 0x24
 80112d0:	4602      	mov	r2, r0
 80112d2:	4651      	mov	r1, sl
 80112d4:	2000      	movs	r0, #0
 80112d6:	f7ff ff21 	bl	801111c <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80112da:	ab0a      	add	r3, sp, #40	@ 0x28
 80112dc:	4602      	mov	r2, r0
 80112de:	4651      	mov	r1, sl
 80112e0:	2000      	movs	r0, #0
 80112e2:	f7ff ff1b 	bl	801111c <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80112e6:	a90b      	add	r1, sp, #44	@ 0x2c
 80112e8:	f7ff fe8a 	bl	8011000 <_ZL12read_uleb128PKhPm>
 80112ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80112ee:	9908      	ldr	r1, [sp, #32]
 80112f0:	440b      	add	r3, r1
 80112f2:	4543      	cmp	r3, r8
 80112f4:	4602      	mov	r2, r0
 80112f6:	d84b      	bhi.n	8011390 <__gxx_personality_v0+0x1dc>
 80112f8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80112fa:	440b      	add	r3, r1
 80112fc:	4543      	cmp	r3, r8
 80112fe:	d9c6      	bls.n	801128e <__gxx_personality_v0+0xda>
 8011300:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 8011304:	f1b8 0f00 	cmp.w	r8, #0
 8011308:	d001      	beq.n	801130e <__gxx_personality_v0+0x15a>
 801130a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801130c:	4498      	add	r8, r3
 801130e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8011310:	b108      	cbz	r0, 8011316 <__gxx_personality_v0+0x162>
 8011312:	3801      	subs	r0, #1
 8011314:	4438      	add	r0, r7
 8011316:	f1b8 0f00 	cmp.w	r8, #0
 801131a:	f43f af5d 	beq.w	80111d8 <__gxx_personality_v0+0x24>
 801131e:	2800      	cmp	r0, #0
 8011320:	f000 80d6 	beq.w	80114d0 <__gxx_personality_v0+0x31c>
 8011324:	f015 0308 	ands.w	r3, r5, #8
 8011328:	9304      	str	r3, [sp, #16]
 801132a:	d033      	beq.n	8011394 <__gxx_personality_v0+0x1e0>
 801132c:	2347      	movs	r3, #71	@ 0x47
 801132e:	7023      	strb	r3, [r4, #0]
 8011330:	234e      	movs	r3, #78	@ 0x4e
 8011332:	7063      	strb	r3, [r4, #1]
 8011334:	2355      	movs	r3, #85	@ 0x55
 8011336:	70a3      	strb	r3, [r4, #2]
 8011338:	2343      	movs	r3, #67	@ 0x43
 801133a:	70e3      	strb	r3, [r4, #3]
 801133c:	2346      	movs	r3, #70	@ 0x46
 801133e:	7123      	strb	r3, [r4, #4]
 8011340:	234f      	movs	r3, #79	@ 0x4f
 8011342:	7163      	strb	r3, [r4, #5]
 8011344:	2352      	movs	r3, #82	@ 0x52
 8011346:	71a3      	strb	r3, [r4, #6]
 8011348:	2300      	movs	r3, #0
 801134a:	71e3      	strb	r3, [r4, #7]
 801134c:	2300      	movs	r3, #0
 801134e:	9303      	str	r3, [sp, #12]
 8011350:	a909      	add	r1, sp, #36	@ 0x24
 8011352:	f7ff fe64 	bl	801101e <_ZL12read_sleb128PKhPl>
 8011356:	a90a      	add	r1, sp, #40	@ 0x28
 8011358:	9005      	str	r0, [sp, #20]
 801135a:	f7ff fe60 	bl	801101e <_ZL12read_sleb128PKhPl>
 801135e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8011360:	2f00      	cmp	r7, #0
 8011362:	d060      	beq.n	8011426 <__gxx_personality_v0+0x272>
 8011364:	dd3a      	ble.n	80113dc <__gxx_personality_v0+0x228>
 8011366:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801136a:	d033      	beq.n	80113d4 <__gxx_personality_v0+0x220>
 801136c:	f00b 0307 	and.w	r3, fp, #7
 8011370:	2b04      	cmp	r3, #4
 8011372:	f63f af6b 	bhi.w	801124c <__gxx_personality_v0+0x98>
 8011376:	a201      	add	r2, pc, #4	@ (adr r2, 801137c <__gxx_personality_v0+0x1c8>)
 8011378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801137c:	080113d9 	.word	0x080113d9
 8011380:	0801124d 	.word	0x0801124d
 8011384:	080113a7 	.word	0x080113a7
 8011388:	080113d9 	.word	0x080113d9
 801138c:	080113d1 	.word	0x080113d1
 8011390:	463a      	mov	r2, r7
 8011392:	e77c      	b.n	801128e <__gxx_personality_v0+0xda>
 8011394:	79e3      	ldrb	r3, [r4, #7]
 8011396:	2b01      	cmp	r3, #1
 8011398:	bf0c      	ite	eq
 801139a:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 801139e:	f104 0358 	addne.w	r3, r4, #88	@ 0x58
 80113a2:	9307      	str	r3, [sp, #28]
 80113a4:	e7d2      	b.n	801134c <__gxx_personality_v0+0x198>
 80113a6:	2202      	movs	r2, #2
 80113a8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80113aa:	ab0b      	add	r3, sp, #44	@ 0x2c
 80113ac:	fb07 1212 	mls	r2, r7, r2, r1
 80113b0:	4658      	mov	r0, fp
 80113b2:	9902      	ldr	r1, [sp, #8]
 80113b4:	f7ff fe4b 	bl	801104e <_ZL28read_encoded_value_with_basehjPKhPj>
 80113b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80113ba:	b131      	cbz	r1, 80113ca <__gxx_personality_v0+0x216>
 80113bc:	b33c      	cbz	r4, 801140e <__gxx_personality_v0+0x25a>
 80113be:	ab07      	add	r3, sp, #28
 80113c0:	2200      	movs	r2, #0
 80113c2:	4620      	mov	r0, r4
 80113c4:	f7ff fd76 	bl	8010eb4 <__cxa_type_match>
 80113c8:	b308      	cbz	r0, 801140e <__gxx_personality_v0+0x25a>
 80113ca:	f04f 0a03 	mov.w	sl, #3
 80113ce:	e765      	b.n	801129c <__gxx_personality_v0+0xe8>
 80113d0:	2208      	movs	r2, #8
 80113d2:	e7e9      	b.n	80113a8 <__gxx_personality_v0+0x1f4>
 80113d4:	2200      	movs	r2, #0
 80113d6:	e7e7      	b.n	80113a8 <__gxx_personality_v0+0x1f4>
 80113d8:	2204      	movs	r2, #4
 80113da:	e7e5      	b.n	80113a8 <__gxx_personality_v0+0x1f4>
 80113dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80113de:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 80113e2:	1bd2      	subs	r2, r2, r7
 80113e4:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
 80113e8:	b1c4      	cbz	r4, 801141c <__gxx_personality_v0+0x268>
 80113ea:	9904      	ldr	r1, [sp, #16]
 80113ec:	b9b1      	cbnz	r1, 801141c <__gxx_personality_v0+0x268>
 80113ee:	9b07      	ldr	r3, [sp, #28]
 80113f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80113f2:	f1aa 0a04 	sub.w	sl, sl, #4
 80113f6:	f85a 1f04 	ldr.w	r1, [sl, #4]!
 80113fa:	2900      	cmp	r1, #0
 80113fc:	d0e5      	beq.n	80113ca <__gxx_personality_v0+0x216>
 80113fe:	ab0b      	add	r3, sp, #44	@ 0x2c
 8011400:	2200      	movs	r2, #0
 8011402:	4451      	add	r1, sl
 8011404:	4620      	mov	r0, r4
 8011406:	f7ff fd55 	bl	8010eb4 <__cxa_type_match>
 801140a:	2800      	cmp	r0, #0
 801140c:	d0f3      	beq.n	80113f6 <__gxx_personality_v0+0x242>
 801140e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011410:	2800      	cmp	r0, #0
 8011412:	d059      	beq.n	80114c8 <__gxx_personality_v0+0x314>
 8011414:	9b05      	ldr	r3, [sp, #20]
 8011416:	4403      	add	r3, r0
 8011418:	4618      	mov	r0, r3
 801141a:	e799      	b.n	8011350 <__gxx_personality_v0+0x19c>
 801141c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d1f4      	bne.n	801140e <__gxx_personality_v0+0x25a>
 8011424:	e7d1      	b.n	80113ca <__gxx_personality_v0+0x216>
 8011426:	2301      	movs	r3, #1
 8011428:	9303      	str	r3, [sp, #12]
 801142a:	e7f0      	b.n	801140e <__gxx_personality_v0+0x25a>
 801142c:	2f00      	cmp	r7, #0
 801142e:	da1f      	bge.n	8011470 <__gxx_personality_v0+0x2bc>
 8011430:	f000 f870 	bl	8011514 <_ZSt10unexpectedv>
 8011434:	f1ba 0f01 	cmp.w	sl, #1
 8011438:	d102      	bne.n	8011440 <__gxx_personality_v0+0x28c>
 801143a:	4620      	mov	r0, r4
 801143c:	f000 fa75 	bl	801192a <__cxa_call_terminate>
 8011440:	2f00      	cmp	r7, #0
 8011442:	da15      	bge.n	8011470 <__gxx_personality_v0+0x2bc>
 8011444:	aa0c      	add	r2, sp, #48	@ 0x30
 8011446:	4649      	mov	r1, r9
 8011448:	4630      	mov	r0, r6
 801144a:	f7ff fe77 	bl	801113c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 801144e:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8011452:	4631      	mov	r1, r6
 8011454:	f7ff fe41 	bl	80110da <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8011458:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801145a:	43fa      	mvns	r2, r7
 801145c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8011460:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8011464:	bb52      	cbnz	r2, 80114bc <__gxx_personality_v0+0x308>
 8011466:	2204      	movs	r2, #4
 8011468:	e9c4 500a 	strd	r5, r0, [r4, #40]	@ 0x28
 801146c:	e9c4 230c 	strd	r2, r3, [r4, #48]	@ 0x30
 8011470:	2300      	movs	r3, #0
 8011472:	ad0b      	add	r5, sp, #44	@ 0x2c
 8011474:	461a      	mov	r2, r3
 8011476:	4619      	mov	r1, r3
 8011478:	9500      	str	r5, [sp, #0]
 801147a:	4630      	mov	r0, r6
 801147c:	940b      	str	r4, [sp, #44]	@ 0x2c
 801147e:	f7ef ff77 	bl	8001370 <_Unwind_VRS_Set>
 8011482:	2300      	movs	r3, #0
 8011484:	4619      	mov	r1, r3
 8011486:	2201      	movs	r2, #1
 8011488:	9500      	str	r5, [sp, #0]
 801148a:	4630      	mov	r0, r6
 801148c:	970b      	str	r7, [sp, #44]	@ 0x2c
 801148e:	f7ef ff6f 	bl	8001370 <_Unwind_VRS_Set>
 8011492:	210f      	movs	r1, #15
 8011494:	4630      	mov	r0, r6
 8011496:	f7ff fe80 	bl	801119a <_Unwind_GetGR>
 801149a:	f000 0001 	and.w	r0, r0, #1
 801149e:	ea40 0008 	orr.w	r0, r0, r8
 80114a2:	2300      	movs	r3, #0
 80114a4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80114a6:	9500      	str	r5, [sp, #0]
 80114a8:	220f      	movs	r2, #15
 80114aa:	4619      	mov	r1, r3
 80114ac:	4630      	mov	r0, r6
 80114ae:	f7ef ff5f 	bl	8001370 <_Unwind_VRS_Set>
 80114b2:	f1ba 0f02 	cmp.w	sl, #2
 80114b6:	d003      	beq.n	80114c0 <__gxx_personality_v0+0x30c>
 80114b8:	2007      	movs	r0, #7
 80114ba:	e693      	b.n	80111e4 <__gxx_personality_v0+0x30>
 80114bc:	3501      	adds	r5, #1
 80114be:	e7cf      	b.n	8011460 <__gxx_personality_v0+0x2ac>
 80114c0:	4620      	mov	r0, r4
 80114c2:	f7ff fd55 	bl	8010f70 <__cxa_begin_cleanup>
 80114c6:	e7f7      	b.n	80114b8 <__gxx_personality_v0+0x304>
 80114c8:	9b03      	ldr	r3, [sp, #12]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	f43f ae84 	beq.w	80111d8 <__gxx_personality_v0+0x24>
 80114d0:	2700      	movs	r7, #0
 80114d2:	f04f 0a02 	mov.w	sl, #2
 80114d6:	e6e1      	b.n	801129c <__gxx_personality_v0+0xe8>

080114d8 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80114d8:	b508      	push	{r3, lr}
 80114da:	4780      	blx	r0
 80114dc:	f001 f9f6 	bl	80128cc <abort>

080114e0 <_ZSt13get_terminatev>:
 80114e0:	4b02      	ldr	r3, [pc, #8]	@ (80114ec <_ZSt13get_terminatev+0xc>)
 80114e2:	6818      	ldr	r0, [r3, #0]
 80114e4:	f3bf 8f5b 	dmb	ish
 80114e8:	4770      	bx	lr
 80114ea:	bf00      	nop
 80114ec:	20000014 	.word	0x20000014

080114f0 <_ZSt9terminatev>:
 80114f0:	b508      	push	{r3, lr}
 80114f2:	f7ff fff5 	bl	80114e0 <_ZSt13get_terminatev>
 80114f6:	f7ff ffef 	bl	80114d8 <_ZN10__cxxabiv111__terminateEPFvvE>

080114fa <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 80114fa:	b508      	push	{r3, lr}
 80114fc:	4780      	blx	r0
 80114fe:	f7ff fff7 	bl	80114f0 <_ZSt9terminatev>
	...

08011504 <_ZSt14get_unexpectedv>:
 8011504:	4b02      	ldr	r3, [pc, #8]	@ (8011510 <_ZSt14get_unexpectedv+0xc>)
 8011506:	6818      	ldr	r0, [r3, #0]
 8011508:	f3bf 8f5b 	dmb	ish
 801150c:	4770      	bx	lr
 801150e:	bf00      	nop
 8011510:	20000010 	.word	0x20000010

08011514 <_ZSt10unexpectedv>:
 8011514:	b508      	push	{r3, lr}
 8011516:	f7ff fff5 	bl	8011504 <_ZSt14get_unexpectedv>
 801151a:	f7ff ffee 	bl	80114fa <_ZN10__cxxabiv112__unexpectedEPFvvE>

0801151e <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 801151e:	2801      	cmp	r0, #1
 8011520:	b510      	push	{r4, lr}
 8011522:	d903      	bls.n	801152c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
 8011524:	f851 0c14 	ldr.w	r0, [r1, #-20]
 8011528:	f7ff ffd6 	bl	80114d8 <_ZN10__cxxabiv111__terminateEPFvvE>
 801152c:	f1a1 0328 	sub.w	r3, r1, #40	@ 0x28
 8011530:	f3bf 8f5b 	dmb	ish
 8011534:	e853 2f00 	ldrex	r2, [r3]
 8011538:	3a01      	subs	r2, #1
 801153a:	e843 2000 	strex	r0, r2, [r3]
 801153e:	2800      	cmp	r0, #0
 8011540:	d1f8      	bne.n	8011534 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x16>
 8011542:	f3bf 8f5b 	dmb	ish
 8011546:	b95a      	cbnz	r2, 8011560 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x42>
 8011548:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 801154c:	f101 0458 	add.w	r4, r1, #88	@ 0x58
 8011550:	b10b      	cbz	r3, 8011556 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x38>
 8011552:	4620      	mov	r0, r4
 8011554:	4798      	blx	r3
 8011556:	4620      	mov	r0, r4
 8011558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801155c:	f7ff bc62 	b.w	8010e24 <__cxa_free_exception>
 8011560:	bd10      	pop	{r4, pc}
	...

08011564 <__cxa_init_primary_exception>:
 8011564:	b538      	push	{r3, r4, r5, lr}
 8011566:	2500      	movs	r5, #0
 8011568:	e940 121e 	strd	r1, r2, [r0, #-120]	@ 0x78
 801156c:	f840 5c80 	str.w	r5, [r0, #-128]
 8011570:	4604      	mov	r4, r0
 8011572:	f7ff ffc7 	bl	8011504 <_ZSt14get_unexpectedv>
 8011576:	f844 0c70 	str.w	r0, [r4, #-112]
 801157a:	f7ff ffb1 	bl	80114e0 <_ZSt13get_terminatev>
 801157e:	2347      	movs	r3, #71	@ 0x47
 8011580:	f804 3c58 	strb.w	r3, [r4, #-88]
 8011584:	234e      	movs	r3, #78	@ 0x4e
 8011586:	f804 3c57 	strb.w	r3, [r4, #-87]
 801158a:	2355      	movs	r3, #85	@ 0x55
 801158c:	f804 3c56 	strb.w	r3, [r4, #-86]
 8011590:	2343      	movs	r3, #67	@ 0x43
 8011592:	f804 3c55 	strb.w	r3, [r4, #-85]
 8011596:	f804 3c54 	strb.w	r3, [r4, #-84]
 801159a:	232b      	movs	r3, #43	@ 0x2b
 801159c:	f804 3c53 	strb.w	r3, [r4, #-83]
 80115a0:	f804 3c52 	strb.w	r3, [r4, #-82]
 80115a4:	f804 5c51 	strb.w	r5, [r4, #-81]
 80115a8:	4b03      	ldr	r3, [pc, #12]	@ (80115b8 <__cxa_init_primary_exception+0x54>)
 80115aa:	f844 0c6c 	str.w	r0, [r4, #-108]
 80115ae:	f844 3c50 	str.w	r3, [r4, #-80]
 80115b2:	f1a4 0080 	sub.w	r0, r4, #128	@ 0x80
 80115b6:	bd38      	pop	{r3, r4, r5, pc}
 80115b8:	0801151f 	.word	0x0801151f

080115bc <__cxa_throw>:
 80115bc:	b508      	push	{r3, lr}
 80115be:	4604      	mov	r4, r0
 80115c0:	460d      	mov	r5, r1
 80115c2:	4616      	mov	r6, r2
 80115c4:	f7ff fd0c 	bl	8010fe0 <__cxa_get_globals>
 80115c8:	6843      	ldr	r3, [r0, #4]
 80115ca:	3301      	adds	r3, #1
 80115cc:	6043      	str	r3, [r0, #4]
 80115ce:	4632      	mov	r2, r6
 80115d0:	4629      	mov	r1, r5
 80115d2:	4620      	mov	r0, r4
 80115d4:	f7ff ffc6 	bl	8011564 <__cxa_init_primary_exception>
 80115d8:	4604      	mov	r4, r0
 80115da:	2301      	movs	r3, #1
 80115dc:	f844 3b28 	str.w	r3, [r4], #40
 80115e0:	4620      	mov	r0, r4
 80115e2:	f7f0 fa4d 	bl	8001a80 <_Unwind_RaiseException>
 80115e6:	4620      	mov	r0, r4
 80115e8:	f000 f9df 	bl	80119aa <__cxa_begin_catch>
 80115ec:	f7ff ff80 	bl	80114f0 <_ZSt9terminatev>

080115f0 <_Znwj>:
 80115f0:	2801      	cmp	r0, #1
 80115f2:	bf38      	it	cc
 80115f4:	2001      	movcc	r0, #1
 80115f6:	b510      	push	{r4, lr}
 80115f8:	4604      	mov	r4, r0
 80115fa:	4620      	mov	r0, r4
 80115fc:	f001 f96e 	bl	80128dc <malloc>
 8011600:	b100      	cbz	r0, 8011604 <_Znwj+0x14>
 8011602:	bd10      	pop	{r4, pc}
 8011604:	f000 f9fa 	bl	80119fc <_ZSt15get_new_handlerv>
 8011608:	b908      	cbnz	r0, 801160e <_Znwj+0x1e>
 801160a:	f001 f95f 	bl	80128cc <abort>
 801160e:	4780      	blx	r0
 8011610:	e7f3      	b.n	80115fa <_Znwj+0xa>

08011612 <_Znaj>:
 8011612:	f7ff bfed 	b.w	80115f0 <_Znwj>
	...

08011618 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8011618:	b510      	push	{r4, lr}
 801161a:	4b03      	ldr	r3, [pc, #12]	@ (8011628 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 801161c:	6003      	str	r3, [r0, #0]
 801161e:	4604      	mov	r4, r0
 8011620:	f7ff fb38 	bl	8010c94 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8011624:	4620      	mov	r0, r4
 8011626:	bd10      	pop	{r4, pc}
 8011628:	080167b8 	.word	0x080167b8

0801162c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 801162c:	b510      	push	{r4, lr}
 801162e:	4604      	mov	r4, r0
 8011630:	f7ff fff2 	bl	8011618 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8011634:	4620      	mov	r0, r4
 8011636:	210c      	movs	r1, #12
 8011638:	f7ff fb80 	bl	8010d3c <_ZdlPvj>
 801163c:	4620      	mov	r0, r4
 801163e:	bd10      	pop	{r4, pc}

08011640 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8011640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011644:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8011648:	4590      	cmp	r8, r2
 801164a:	4606      	mov	r6, r0
 801164c:	460f      	mov	r7, r1
 801164e:	4615      	mov	r5, r2
 8011650:	461c      	mov	r4, r3
 8011652:	d00b      	beq.n	801166c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 8011654:	68b0      	ldr	r0, [r6, #8]
 8011656:	6803      	ldr	r3, [r0, #0]
 8011658:	f8cd 8018 	str.w	r8, [sp, #24]
 801165c:	6a1e      	ldr	r6, [r3, #32]
 801165e:	462a      	mov	r2, r5
 8011660:	4623      	mov	r3, r4
 8011662:	4639      	mov	r1, r7
 8011664:	46b4      	mov	ip, r6
 8011666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801166a:	4760      	bx	ip
 801166c:	4619      	mov	r1, r3
 801166e:	f000 f857 	bl	8011720 <_ZNKSt9type_info7__equalERKS_>
 8011672:	2800      	cmp	r0, #0
 8011674:	d0ee      	beq.n	8011654 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 8011676:	2006      	movs	r0, #6
 8011678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801167c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 801167c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011680:	460d      	mov	r5, r1
 8011682:	4619      	mov	r1, r3
 8011684:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	@ 0x28
 8011688:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	@ 0x30
 801168c:	4681      	mov	r9, r0
 801168e:	4617      	mov	r7, r2
 8011690:	4698      	mov	r8, r3
 8011692:	f000 f845 	bl	8011720 <_ZNKSt9type_info7__equalERKS_>
 8011696:	b190      	cbz	r0, 80116be <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8011698:	2d00      	cmp	r5, #0
 801169a:	6034      	str	r4, [r6, #0]
 801169c:	7137      	strb	r7, [r6, #4]
 801169e:	db09      	blt.n	80116b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80116a0:	442c      	add	r4, r5
 80116a2:	45a2      	cmp	sl, r4
 80116a4:	bf14      	ite	ne
 80116a6:	2401      	movne	r4, #1
 80116a8:	2406      	moveq	r4, #6
 80116aa:	71b4      	strb	r4, [r6, #6]
 80116ac:	2000      	movs	r0, #0
 80116ae:	b001      	add	sp, #4
 80116b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116b4:	3502      	adds	r5, #2
 80116b6:	d1f9      	bne.n	80116ac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80116b8:	2301      	movs	r3, #1
 80116ba:	71b3      	strb	r3, [r6, #6]
 80116bc:	e7f6      	b.n	80116ac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80116be:	4554      	cmp	r4, sl
 80116c0:	d106      	bne.n	80116d0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80116c2:	4659      	mov	r1, fp
 80116c4:	4648      	mov	r0, r9
 80116c6:	f000 f82b 	bl	8011720 <_ZNKSt9type_info7__equalERKS_>
 80116ca:	b108      	cbz	r0, 80116d0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80116cc:	7177      	strb	r7, [r6, #5]
 80116ce:	e7ed      	b.n	80116ac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80116d0:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80116d4:	6803      	ldr	r3, [r0, #0]
 80116d6:	e9cd a60c 	strd	sl, r6, [sp, #48]	@ 0x30
 80116da:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
 80116de:	69dc      	ldr	r4, [r3, #28]
 80116e0:	463a      	mov	r2, r7
 80116e2:	4643      	mov	r3, r8
 80116e4:	4629      	mov	r1, r5
 80116e6:	46a4      	mov	ip, r4
 80116e8:	b001      	add	sp, #4
 80116ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116ee:	4760      	bx	ip

080116f0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80116f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116f4:	4607      	mov	r7, r0
 80116f6:	460c      	mov	r4, r1
 80116f8:	4615      	mov	r5, r2
 80116fa:	461e      	mov	r6, r3
 80116fc:	f7ff fafd 	bl	8010cfa <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8011700:	b948      	cbnz	r0, 8011716 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8011702:	68b8      	ldr	r0, [r7, #8]
 8011704:	6803      	ldr	r3, [r0, #0]
 8011706:	699f      	ldr	r7, [r3, #24]
 8011708:	462a      	mov	r2, r5
 801170a:	4633      	mov	r3, r6
 801170c:	4621      	mov	r1, r4
 801170e:	46bc      	mov	ip, r7
 8011710:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011714:	4760      	bx	ip
 8011716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801171a <_ZNSt9type_infoD1Ev>:
 801171a:	4770      	bx	lr

0801171c <_ZNKSt9type_info14__is_pointer_pEv>:
 801171c:	2000      	movs	r0, #0
 801171e:	4770      	bx	lr

08011720 <_ZNKSt9type_info7__equalERKS_>:
 8011720:	4281      	cmp	r1, r0
 8011722:	b508      	push	{r3, lr}
 8011724:	d00e      	beq.n	8011744 <_ZNKSt9type_info7__equalERKS_+0x24>
 8011726:	6840      	ldr	r0, [r0, #4]
 8011728:	7803      	ldrb	r3, [r0, #0]
 801172a:	2b2a      	cmp	r3, #42	@ 0x2a
 801172c:	d00c      	beq.n	8011748 <_ZNKSt9type_info7__equalERKS_+0x28>
 801172e:	6849      	ldr	r1, [r1, #4]
 8011730:	780b      	ldrb	r3, [r1, #0]
 8011732:	2b2a      	cmp	r3, #42	@ 0x2a
 8011734:	bf08      	it	eq
 8011736:	3101      	addeq	r1, #1
 8011738:	f7ee fd6a 	bl	8000210 <strcmp>
 801173c:	fab0 f080 	clz	r0, r0
 8011740:	0940      	lsrs	r0, r0, #5
 8011742:	bd08      	pop	{r3, pc}
 8011744:	2001      	movs	r0, #1
 8011746:	e7fc      	b.n	8011742 <_ZNKSt9type_info7__equalERKS_+0x22>
 8011748:	2000      	movs	r0, #0
 801174a:	e7fa      	b.n	8011742 <_ZNKSt9type_info7__equalERKS_+0x22>

0801174c <_ZNKSt11logic_error4whatEv>:
 801174c:	6840      	ldr	r0, [r0, #4]
 801174e:	4770      	bx	lr

08011750 <_ZNSt13runtime_errorD1Ev>:
 8011750:	b513      	push	{r0, r1, r4, lr}
 8011752:	4b07      	ldr	r3, [pc, #28]	@ (8011770 <_ZNSt13runtime_errorD1Ev+0x20>)
 8011754:	6003      	str	r3, [r0, #0]
 8011756:	4604      	mov	r4, r0
 8011758:	6840      	ldr	r0, [r0, #4]
 801175a:	a901      	add	r1, sp, #4
 801175c:	380c      	subs	r0, #12
 801175e:	f000 f8a9 	bl	80118b4 <_ZNSs4_Rep10_M_disposeERKSaIcE>
 8011762:	4620      	mov	r0, r4
 8011764:	f7ff fc3a 	bl	8010fdc <_ZNSt9exceptionD1Ev>
 8011768:	4620      	mov	r0, r4
 801176a:	b002      	add	sp, #8
 801176c:	bd10      	pop	{r4, pc}
 801176e:	bf00      	nop
 8011770:	0801681c 	.word	0x0801681c

08011774 <_ZNSt13runtime_errorD0Ev>:
 8011774:	b510      	push	{r4, lr}
 8011776:	4604      	mov	r4, r0
 8011778:	f7ff ffea 	bl	8011750 <_ZNSt13runtime_errorD1Ev>
 801177c:	4620      	mov	r0, r4
 801177e:	f000 f8b5 	bl	80118ec <_ZdlPv>
 8011782:	4620      	mov	r0, r4
 8011784:	bd10      	pop	{r4, pc}
	...

08011788 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0>:
 8011788:	4288      	cmp	r0, r1
 801178a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801178e:	4604      	mov	r4, r0
 8011790:	460d      	mov	r5, r1
 8011792:	d018      	beq.n	80117c6 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x3e>
 8011794:	b1a0      	cbz	r0, 80117c0 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x38>
 8011796:	eba1 0800 	sub.w	r8, r1, r0
 801179a:	4640      	mov	r0, r8
 801179c:	2100      	movs	r1, #0
 801179e:	f000 f857 	bl	8011850 <_ZNSs4_Rep9_S_createEjjRKSaIcE>
 80117a2:	f100 070c 	add.w	r7, r0, #12
 80117a6:	4606      	mov	r6, r0
 80117a8:	4621      	mov	r1, r4
 80117aa:	4638      	mov	r0, r7
 80117ac:	462a      	mov	r2, r5
 80117ae:	f000 f83d 	bl	801182c <_ZNSs13_S_copy_charsEPcPKcS1_>
 80117b2:	4641      	mov	r1, r8
 80117b4:	4630      	mov	r0, r6
 80117b6:	f000 f83f 	bl	8011838 <_ZNSs4_Rep26_M_set_length_and_sharableEj>
 80117ba:	4638      	mov	r0, r7
 80117bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117c0:	4802      	ldr	r0, [pc, #8]	@ (80117cc <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x44>)
 80117c2:	f000 f888 	bl	80118d6 <_ZSt19__throw_logic_errorPKc>
 80117c6:	4f02      	ldr	r7, [pc, #8]	@ (80117d0 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x48>)
 80117c8:	e7f7      	b.n	80117ba <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x32>
 80117ca:	bf00      	nop
 80117cc:	08016828 	.word	0x08016828
 80117d0:	20000438 	.word	0x20000438

080117d4 <_ZNSsC2EPKcRKSaIcE.isra.0>:
 80117d4:	b570      	push	{r4, r5, r6, lr}
 80117d6:	4605      	mov	r5, r0
 80117d8:	4616      	mov	r6, r2
 80117da:	460c      	mov	r4, r1
 80117dc:	b149      	cbz	r1, 80117f2 <_ZNSsC2EPKcRKSaIcE.isra.0+0x1e>
 80117de:	4608      	mov	r0, r1
 80117e0:	f7ee fd76 	bl	80002d0 <strlen>
 80117e4:	1821      	adds	r1, r4, r0
 80117e6:	4632      	mov	r2, r6
 80117e8:	4620      	mov	r0, r4
 80117ea:	f7ff ffcd 	bl	8011788 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0>
 80117ee:	6028      	str	r0, [r5, #0]
 80117f0:	bd70      	pop	{r4, r5, r6, pc}
 80117f2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80117f6:	e7f6      	b.n	80117e6 <_ZNSsC2EPKcRKSaIcE.isra.0+0x12>

080117f8 <_ZNSt13runtime_errorC1EPKc>:
 80117f8:	b513      	push	{r0, r1, r4, lr}
 80117fa:	4b05      	ldr	r3, [pc, #20]	@ (8011810 <_ZNSt13runtime_errorC1EPKc+0x18>)
 80117fc:	4604      	mov	r4, r0
 80117fe:	aa01      	add	r2, sp, #4
 8011800:	f840 3b04 	str.w	r3, [r0], #4
 8011804:	f7ff ffe6 	bl	80117d4 <_ZNSsC2EPKcRKSaIcE.isra.0>
 8011808:	4620      	mov	r0, r4
 801180a:	b002      	add	sp, #8
 801180c:	bd10      	pop	{r4, pc}
 801180e:	bf00      	nop
 8011810:	0801681c 	.word	0x0801681c

08011814 <_ZNSs7_M_copyEPcPKcj>:
 8011814:	2a01      	cmp	r2, #1
 8011816:	b430      	push	{r4, r5}
 8011818:	d103      	bne.n	8011822 <_ZNSs7_M_copyEPcPKcj+0xe>
 801181a:	780b      	ldrb	r3, [r1, #0]
 801181c:	7003      	strb	r3, [r0, #0]
 801181e:	bc30      	pop	{r4, r5}
 8011820:	4770      	bx	lr
 8011822:	2a00      	cmp	r2, #0
 8011824:	d0fb      	beq.n	801181e <_ZNSs7_M_copyEPcPKcj+0xa>
 8011826:	bc30      	pop	{r4, r5}
 8011828:	f001 bf55 	b.w	80136d6 <memcpy>

0801182c <_ZNSs13_S_copy_charsEPcPKcS1_>:
 801182c:	b508      	push	{r3, lr}
 801182e:	1a52      	subs	r2, r2, r1
 8011830:	f7ff fff0 	bl	8011814 <_ZNSs7_M_copyEPcPKcj>
 8011834:	bd08      	pop	{r3, pc}
	...

08011838 <_ZNSs4_Rep26_M_set_length_and_sharableEj>:
 8011838:	4b04      	ldr	r3, [pc, #16]	@ (801184c <_ZNSs4_Rep26_M_set_length_and_sharableEj+0x14>)
 801183a:	4298      	cmp	r0, r3
 801183c:	d004      	beq.n	8011848 <_ZNSs4_Rep26_M_set_length_and_sharableEj+0x10>
 801183e:	2300      	movs	r3, #0
 8011840:	6083      	str	r3, [r0, #8]
 8011842:	6001      	str	r1, [r0, #0]
 8011844:	4408      	add	r0, r1
 8011846:	7303      	strb	r3, [r0, #12]
 8011848:	4770      	bx	lr
 801184a:	bf00      	nop
 801184c:	2000042c 	.word	0x2000042c

08011850 <_ZNSs4_Rep9_S_createEjjRKSaIcE>:
 8011850:	4b15      	ldr	r3, [pc, #84]	@ (80118a8 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x58>)
 8011852:	4298      	cmp	r0, r3
 8011854:	b510      	push	{r4, lr}
 8011856:	4604      	mov	r4, r0
 8011858:	d902      	bls.n	8011860 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x10>
 801185a:	4814      	ldr	r0, [pc, #80]	@ (80118ac <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x5c>)
 801185c:	f000 f83e 	bl	80118dc <_ZSt20__throw_length_errorPKc>
 8011860:	4288      	cmp	r0, r1
 8011862:	d903      	bls.n	801186c <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x1c>
 8011864:	004b      	lsls	r3, r1, #1
 8011866:	4298      	cmp	r0, r3
 8011868:	bf38      	it	cc
 801186a:	461c      	movcc	r4, r3
 801186c:	f104 031d 	add.w	r3, r4, #29
 8011870:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011874:	f104 000d 	add.w	r0, r4, #13
 8011878:	d90c      	bls.n	8011894 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 801187a:	428c      	cmp	r4, r1
 801187c:	d90a      	bls.n	8011894 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 801187e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011882:	f504 5480 	add.w	r4, r4, #4096	@ 0x1000
 8011886:	1ae4      	subs	r4, r4, r3
 8011888:	4b07      	ldr	r3, [pc, #28]	@ (80118a8 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x58>)
 801188a:	429c      	cmp	r4, r3
 801188c:	bf28      	it	cs
 801188e:	461c      	movcs	r4, r3
 8011890:	f104 000d 	add.w	r0, r4, #13
 8011894:	2800      	cmp	r0, #0
 8011896:	da01      	bge.n	801189c <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x4c>
 8011898:	f000 f81a 	bl	80118d0 <_ZSt17__throw_bad_allocv>
 801189c:	f7ff fea8 	bl	80115f0 <_Znwj>
 80118a0:	2200      	movs	r2, #0
 80118a2:	6044      	str	r4, [r0, #4]
 80118a4:	6082      	str	r2, [r0, #8]
 80118a6:	bd10      	pop	{r4, pc}
 80118a8:	3ffffffc 	.word	0x3ffffffc
 80118ac:	08016852 	.word	0x08016852

080118b0 <_ZNSs4_Rep10_M_destroyERKSaIcE>:
 80118b0:	f000 b81c 	b.w	80118ec <_ZdlPv>

080118b4 <_ZNSs4_Rep10_M_disposeERKSaIcE>:
 80118b4:	4a05      	ldr	r2, [pc, #20]	@ (80118cc <_ZNSs4_Rep10_M_disposeERKSaIcE+0x18>)
 80118b6:	4290      	cmp	r0, r2
 80118b8:	b510      	push	{r4, lr}
 80118ba:	d006      	beq.n	80118ca <_ZNSs4_Rep10_M_disposeERKSaIcE+0x16>
 80118bc:	6882      	ldr	r2, [r0, #8]
 80118be:	1e54      	subs	r4, r2, #1
 80118c0:	2a00      	cmp	r2, #0
 80118c2:	6084      	str	r4, [r0, #8]
 80118c4:	dc01      	bgt.n	80118ca <_ZNSs4_Rep10_M_disposeERKSaIcE+0x16>
 80118c6:	f7ff fff3 	bl	80118b0 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 80118ca:	bd10      	pop	{r4, pc}
 80118cc:	2000042c 	.word	0x2000042c

080118d0 <_ZSt17__throw_bad_allocv>:
 80118d0:	b508      	push	{r3, lr}
 80118d2:	f000 fffb 	bl	80128cc <abort>

080118d6 <_ZSt19__throw_logic_errorPKc>:
 80118d6:	b508      	push	{r3, lr}
 80118d8:	f000 fff8 	bl	80128cc <abort>

080118dc <_ZSt20__throw_length_errorPKc>:
 80118dc:	b508      	push	{r3, lr}
 80118de:	f000 fff5 	bl	80128cc <abort>

080118e2 <__aeabi_atexit>:
 80118e2:	460b      	mov	r3, r1
 80118e4:	4601      	mov	r1, r0
 80118e6:	4618      	mov	r0, r3
 80118e8:	f001 b8b6 	b.w	8012a58 <__cxa_atexit>

080118ec <_ZdlPv>:
 80118ec:	f000 bffe 	b.w	80128ec <free>

080118f0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80118f0:	7803      	ldrb	r3, [r0, #0]
 80118f2:	2b47      	cmp	r3, #71	@ 0x47
 80118f4:	d117      	bne.n	8011926 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80118f6:	7843      	ldrb	r3, [r0, #1]
 80118f8:	2b4e      	cmp	r3, #78	@ 0x4e
 80118fa:	d114      	bne.n	8011926 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80118fc:	7883      	ldrb	r3, [r0, #2]
 80118fe:	2b55      	cmp	r3, #85	@ 0x55
 8011900:	d111      	bne.n	8011926 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011902:	78c3      	ldrb	r3, [r0, #3]
 8011904:	2b43      	cmp	r3, #67	@ 0x43
 8011906:	d10e      	bne.n	8011926 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011908:	7903      	ldrb	r3, [r0, #4]
 801190a:	2b43      	cmp	r3, #67	@ 0x43
 801190c:	d10b      	bne.n	8011926 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801190e:	7943      	ldrb	r3, [r0, #5]
 8011910:	2b2b      	cmp	r3, #43	@ 0x2b
 8011912:	d108      	bne.n	8011926 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011914:	7983      	ldrb	r3, [r0, #6]
 8011916:	2b2b      	cmp	r3, #43	@ 0x2b
 8011918:	d105      	bne.n	8011926 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801191a:	79c0      	ldrb	r0, [r0, #7]
 801191c:	2801      	cmp	r0, #1
 801191e:	bf8c      	ite	hi
 8011920:	2000      	movhi	r0, #0
 8011922:	2001      	movls	r0, #1
 8011924:	4770      	bx	lr
 8011926:	2000      	movs	r0, #0
 8011928:	4770      	bx	lr

0801192a <__cxa_call_terminate>:
 801192a:	b510      	push	{r4, lr}
 801192c:	4604      	mov	r4, r0
 801192e:	b148      	cbz	r0, 8011944 <__cxa_call_terminate+0x1a>
 8011930:	f000 f83b 	bl	80119aa <__cxa_begin_catch>
 8011934:	4620      	mov	r0, r4
 8011936:	f7ff ffdb 	bl	80118f0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 801193a:	b118      	cbz	r0, 8011944 <__cxa_call_terminate+0x1a>
 801193c:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8011940:	f7ff fdca 	bl	80114d8 <_ZN10__cxxabiv111__terminateEPFvvE>
 8011944:	f7ff fdd4 	bl	80114f0 <_ZSt9terminatev>

08011948 <__cxa_call_unexpected>:
 8011948:	b538      	push	{r3, r4, r5, lr}
 801194a:	4602      	mov	r2, r0
 801194c:	f7ff ffd0 	bl	80118f0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8011950:	4604      	mov	r4, r0
 8011952:	b140      	cbz	r0, 8011966 <__cxa_call_unexpected+0x1e>
 8011954:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8011958:	2500      	movs	r5, #0
 801195a:	4610      	mov	r0, r2
 801195c:	f000 f825 	bl	80119aa <__cxa_begin_catch>
 8011960:	b11d      	cbz	r5, 801196a <__cxa_call_unexpected+0x22>
 8011962:	f7ff fdd7 	bl	8011514 <_ZSt10unexpectedv>
 8011966:	2501      	movs	r5, #1
 8011968:	e7f7      	b.n	801195a <__cxa_call_unexpected+0x12>
 801196a:	4620      	mov	r0, r4
 801196c:	f7ff fdc5 	bl	80114fa <_ZN10__cxxabiv112__unexpectedEPFvvE>

08011970 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8011970:	7803      	ldrb	r3, [r0, #0]
 8011972:	2b47      	cmp	r3, #71	@ 0x47
 8011974:	d117      	bne.n	80119a6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011976:	7843      	ldrb	r3, [r0, #1]
 8011978:	2b4e      	cmp	r3, #78	@ 0x4e
 801197a:	d114      	bne.n	80119a6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801197c:	7883      	ldrb	r3, [r0, #2]
 801197e:	2b55      	cmp	r3, #85	@ 0x55
 8011980:	d111      	bne.n	80119a6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011982:	78c3      	ldrb	r3, [r0, #3]
 8011984:	2b43      	cmp	r3, #67	@ 0x43
 8011986:	d10e      	bne.n	80119a6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011988:	7903      	ldrb	r3, [r0, #4]
 801198a:	2b43      	cmp	r3, #67	@ 0x43
 801198c:	d10b      	bne.n	80119a6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801198e:	7943      	ldrb	r3, [r0, #5]
 8011990:	2b2b      	cmp	r3, #43	@ 0x2b
 8011992:	d108      	bne.n	80119a6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011994:	7983      	ldrb	r3, [r0, #6]
 8011996:	2b2b      	cmp	r3, #43	@ 0x2b
 8011998:	d105      	bne.n	80119a6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801199a:	79c0      	ldrb	r0, [r0, #7]
 801199c:	2801      	cmp	r0, #1
 801199e:	bf8c      	ite	hi
 80119a0:	2000      	movhi	r0, #0
 80119a2:	2001      	movls	r0, #1
 80119a4:	4770      	bx	lr
 80119a6:	2000      	movs	r0, #0
 80119a8:	4770      	bx	lr

080119aa <__cxa_begin_catch>:
 80119aa:	b538      	push	{r3, r4, r5, lr}
 80119ac:	4604      	mov	r4, r0
 80119ae:	f7ff fb17 	bl	8010fe0 <__cxa_get_globals>
 80119b2:	6805      	ldr	r5, [r0, #0]
 80119b4:	4602      	mov	r2, r0
 80119b6:	4620      	mov	r0, r4
 80119b8:	f1a4 0120 	sub.w	r1, r4, #32
 80119bc:	f7ff ffd8 	bl	8011970 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80119c0:	b928      	cbnz	r0, 80119ce <__cxa_begin_catch+0x24>
 80119c2:	b10d      	cbz	r5, 80119c8 <__cxa_begin_catch+0x1e>
 80119c4:	f7ff fd94 	bl	80114f0 <_ZSt9terminatev>
 80119c8:	6011      	str	r1, [r2, #0]
 80119ca:	4628      	mov	r0, r5
 80119cc:	bd38      	pop	{r3, r4, r5, pc}
 80119ce:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	bfb4      	ite	lt
 80119d6:	f1c3 0301 	rsblt	r3, r3, #1
 80119da:	3301      	addge	r3, #1
 80119dc:	f844 3c0c 	str.w	r3, [r4, #-12]
 80119e0:	6853      	ldr	r3, [r2, #4]
 80119e2:	428d      	cmp	r5, r1
 80119e4:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80119e8:	6053      	str	r3, [r2, #4]
 80119ea:	4620      	mov	r0, r4
 80119ec:	bf1c      	itt	ne
 80119ee:	f844 5c10 	strne.w	r5, [r4, #-16]
 80119f2:	6011      	strne	r1, [r2, #0]
 80119f4:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80119f6:	f7ef fc8d 	bl	8001314 <_Unwind_Complete>
 80119fa:	e7e6      	b.n	80119ca <__cxa_begin_catch+0x20>

080119fc <_ZSt15get_new_handlerv>:
 80119fc:	4b02      	ldr	r3, [pc, #8]	@ (8011a08 <_ZSt15get_new_handlerv+0xc>)
 80119fe:	6818      	ldr	r0, [r3, #0]
 8011a00:	f3bf 8f5b 	dmb	ish
 8011a04:	4770      	bx	lr
 8011a06:	bf00      	nop
 8011a08:	2000043c 	.word	0x2000043c

08011a0c <pow>:
 8011a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a0e:	ed2d 8b02 	vpush	{d8}
 8011a12:	eeb0 8a40 	vmov.f32	s16, s0
 8011a16:	eef0 8a60 	vmov.f32	s17, s1
 8011a1a:	ec55 4b11 	vmov	r4, r5, d1
 8011a1e:	f000 f873 	bl	8011b08 <__ieee754_pow>
 8011a22:	4622      	mov	r2, r4
 8011a24:	462b      	mov	r3, r5
 8011a26:	4620      	mov	r0, r4
 8011a28:	4629      	mov	r1, r5
 8011a2a:	ec57 6b10 	vmov	r6, r7, d0
 8011a2e:	f7ef f8ad 	bl	8000b8c <__aeabi_dcmpun>
 8011a32:	2800      	cmp	r0, #0
 8011a34:	d13b      	bne.n	8011aae <pow+0xa2>
 8011a36:	ec51 0b18 	vmov	r0, r1, d8
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	f7ef f873 	bl	8000b28 <__aeabi_dcmpeq>
 8011a42:	b1b8      	cbz	r0, 8011a74 <pow+0x68>
 8011a44:	2200      	movs	r2, #0
 8011a46:	2300      	movs	r3, #0
 8011a48:	4620      	mov	r0, r4
 8011a4a:	4629      	mov	r1, r5
 8011a4c:	f7ef f86c 	bl	8000b28 <__aeabi_dcmpeq>
 8011a50:	2800      	cmp	r0, #0
 8011a52:	d146      	bne.n	8011ae2 <pow+0xd6>
 8011a54:	ec45 4b10 	vmov	d0, r4, r5
 8011a58:	f000 f848 	bl	8011aec <finite>
 8011a5c:	b338      	cbz	r0, 8011aae <pow+0xa2>
 8011a5e:	2200      	movs	r2, #0
 8011a60:	2300      	movs	r3, #0
 8011a62:	4620      	mov	r0, r4
 8011a64:	4629      	mov	r1, r5
 8011a66:	f7ef f869 	bl	8000b3c <__aeabi_dcmplt>
 8011a6a:	b300      	cbz	r0, 8011aae <pow+0xa2>
 8011a6c:	f001 fe06 	bl	801367c <__errno>
 8011a70:	2322      	movs	r3, #34	@ 0x22
 8011a72:	e01b      	b.n	8011aac <pow+0xa0>
 8011a74:	ec47 6b10 	vmov	d0, r6, r7
 8011a78:	f000 f838 	bl	8011aec <finite>
 8011a7c:	b9e0      	cbnz	r0, 8011ab8 <pow+0xac>
 8011a7e:	eeb0 0a48 	vmov.f32	s0, s16
 8011a82:	eef0 0a68 	vmov.f32	s1, s17
 8011a86:	f000 f831 	bl	8011aec <finite>
 8011a8a:	b1a8      	cbz	r0, 8011ab8 <pow+0xac>
 8011a8c:	ec45 4b10 	vmov	d0, r4, r5
 8011a90:	f000 f82c 	bl	8011aec <finite>
 8011a94:	b180      	cbz	r0, 8011ab8 <pow+0xac>
 8011a96:	4632      	mov	r2, r6
 8011a98:	463b      	mov	r3, r7
 8011a9a:	4630      	mov	r0, r6
 8011a9c:	4639      	mov	r1, r7
 8011a9e:	f7ef f875 	bl	8000b8c <__aeabi_dcmpun>
 8011aa2:	2800      	cmp	r0, #0
 8011aa4:	d0e2      	beq.n	8011a6c <pow+0x60>
 8011aa6:	f001 fde9 	bl	801367c <__errno>
 8011aaa:	2321      	movs	r3, #33	@ 0x21
 8011aac:	6003      	str	r3, [r0, #0]
 8011aae:	ecbd 8b02 	vpop	{d8}
 8011ab2:	ec47 6b10 	vmov	d0, r6, r7
 8011ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ab8:	2200      	movs	r2, #0
 8011aba:	2300      	movs	r3, #0
 8011abc:	4630      	mov	r0, r6
 8011abe:	4639      	mov	r1, r7
 8011ac0:	f7ef f832 	bl	8000b28 <__aeabi_dcmpeq>
 8011ac4:	2800      	cmp	r0, #0
 8011ac6:	d0f2      	beq.n	8011aae <pow+0xa2>
 8011ac8:	eeb0 0a48 	vmov.f32	s0, s16
 8011acc:	eef0 0a68 	vmov.f32	s1, s17
 8011ad0:	f000 f80c 	bl	8011aec <finite>
 8011ad4:	2800      	cmp	r0, #0
 8011ad6:	d0ea      	beq.n	8011aae <pow+0xa2>
 8011ad8:	ec45 4b10 	vmov	d0, r4, r5
 8011adc:	f000 f806 	bl	8011aec <finite>
 8011ae0:	e7c3      	b.n	8011a6a <pow+0x5e>
 8011ae2:	4f01      	ldr	r7, [pc, #4]	@ (8011ae8 <pow+0xdc>)
 8011ae4:	2600      	movs	r6, #0
 8011ae6:	e7e2      	b.n	8011aae <pow+0xa2>
 8011ae8:	3ff00000 	.word	0x3ff00000

08011aec <finite>:
 8011aec:	b082      	sub	sp, #8
 8011aee:	ed8d 0b00 	vstr	d0, [sp]
 8011af2:	9801      	ldr	r0, [sp, #4]
 8011af4:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8011af8:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8011afc:	0fc0      	lsrs	r0, r0, #31
 8011afe:	b002      	add	sp, #8
 8011b00:	4770      	bx	lr
 8011b02:	0000      	movs	r0, r0
 8011b04:	0000      	movs	r0, r0
	...

08011b08 <__ieee754_pow>:
 8011b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b0c:	b091      	sub	sp, #68	@ 0x44
 8011b0e:	ed8d 1b00 	vstr	d1, [sp]
 8011b12:	e9dd 1900 	ldrd	r1, r9, [sp]
 8011b16:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8011b1a:	ea5a 0001 	orrs.w	r0, sl, r1
 8011b1e:	ec57 6b10 	vmov	r6, r7, d0
 8011b22:	d113      	bne.n	8011b4c <__ieee754_pow+0x44>
 8011b24:	19b3      	adds	r3, r6, r6
 8011b26:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8011b2a:	4152      	adcs	r2, r2
 8011b2c:	4298      	cmp	r0, r3
 8011b2e:	4b98      	ldr	r3, [pc, #608]	@ (8011d90 <__ieee754_pow+0x288>)
 8011b30:	4193      	sbcs	r3, r2
 8011b32:	f080 84ea 	bcs.w	801250a <__ieee754_pow+0xa02>
 8011b36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011b3a:	4630      	mov	r0, r6
 8011b3c:	4639      	mov	r1, r7
 8011b3e:	f7ee fbd5 	bl	80002ec <__adddf3>
 8011b42:	ec41 0b10 	vmov	d0, r0, r1
 8011b46:	b011      	add	sp, #68	@ 0x44
 8011b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b4c:	4a91      	ldr	r2, [pc, #580]	@ (8011d94 <__ieee754_pow+0x28c>)
 8011b4e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8011b52:	4590      	cmp	r8, r2
 8011b54:	463d      	mov	r5, r7
 8011b56:	4633      	mov	r3, r6
 8011b58:	d806      	bhi.n	8011b68 <__ieee754_pow+0x60>
 8011b5a:	d101      	bne.n	8011b60 <__ieee754_pow+0x58>
 8011b5c:	2e00      	cmp	r6, #0
 8011b5e:	d1ea      	bne.n	8011b36 <__ieee754_pow+0x2e>
 8011b60:	4592      	cmp	sl, r2
 8011b62:	d801      	bhi.n	8011b68 <__ieee754_pow+0x60>
 8011b64:	d10e      	bne.n	8011b84 <__ieee754_pow+0x7c>
 8011b66:	b169      	cbz	r1, 8011b84 <__ieee754_pow+0x7c>
 8011b68:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8011b6c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8011b70:	431d      	orrs	r5, r3
 8011b72:	d1e0      	bne.n	8011b36 <__ieee754_pow+0x2e>
 8011b74:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011b78:	18db      	adds	r3, r3, r3
 8011b7a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8011b7e:	4152      	adcs	r2, r2
 8011b80:	429d      	cmp	r5, r3
 8011b82:	e7d4      	b.n	8011b2e <__ieee754_pow+0x26>
 8011b84:	2d00      	cmp	r5, #0
 8011b86:	46c3      	mov	fp, r8
 8011b88:	da3a      	bge.n	8011c00 <__ieee754_pow+0xf8>
 8011b8a:	4a83      	ldr	r2, [pc, #524]	@ (8011d98 <__ieee754_pow+0x290>)
 8011b8c:	4592      	cmp	sl, r2
 8011b8e:	d84d      	bhi.n	8011c2c <__ieee754_pow+0x124>
 8011b90:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8011b94:	4592      	cmp	sl, r2
 8011b96:	f240 84c7 	bls.w	8012528 <__ieee754_pow+0xa20>
 8011b9a:	ea4f 522a 	mov.w	r2, sl, asr #20
 8011b9e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8011ba2:	2a14      	cmp	r2, #20
 8011ba4:	dd0f      	ble.n	8011bc6 <__ieee754_pow+0xbe>
 8011ba6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8011baa:	fa21 f402 	lsr.w	r4, r1, r2
 8011bae:	fa04 f202 	lsl.w	r2, r4, r2
 8011bb2:	428a      	cmp	r2, r1
 8011bb4:	f040 84b8 	bne.w	8012528 <__ieee754_pow+0xa20>
 8011bb8:	f004 0401 	and.w	r4, r4, #1
 8011bbc:	f1c4 0402 	rsb	r4, r4, #2
 8011bc0:	2900      	cmp	r1, #0
 8011bc2:	d158      	bne.n	8011c76 <__ieee754_pow+0x16e>
 8011bc4:	e00e      	b.n	8011be4 <__ieee754_pow+0xdc>
 8011bc6:	2900      	cmp	r1, #0
 8011bc8:	d154      	bne.n	8011c74 <__ieee754_pow+0x16c>
 8011bca:	f1c2 0214 	rsb	r2, r2, #20
 8011bce:	fa4a f402 	asr.w	r4, sl, r2
 8011bd2:	fa04 f202 	lsl.w	r2, r4, r2
 8011bd6:	4552      	cmp	r2, sl
 8011bd8:	f040 84a3 	bne.w	8012522 <__ieee754_pow+0xa1a>
 8011bdc:	f004 0401 	and.w	r4, r4, #1
 8011be0:	f1c4 0402 	rsb	r4, r4, #2
 8011be4:	4a6d      	ldr	r2, [pc, #436]	@ (8011d9c <__ieee754_pow+0x294>)
 8011be6:	4592      	cmp	sl, r2
 8011be8:	d12e      	bne.n	8011c48 <__ieee754_pow+0x140>
 8011bea:	f1b9 0f00 	cmp.w	r9, #0
 8011bee:	f280 8494 	bge.w	801251a <__ieee754_pow+0xa12>
 8011bf2:	496a      	ldr	r1, [pc, #424]	@ (8011d9c <__ieee754_pow+0x294>)
 8011bf4:	4632      	mov	r2, r6
 8011bf6:	463b      	mov	r3, r7
 8011bf8:	2000      	movs	r0, #0
 8011bfa:	f7ee fe57 	bl	80008ac <__aeabi_ddiv>
 8011bfe:	e7a0      	b.n	8011b42 <__ieee754_pow+0x3a>
 8011c00:	2400      	movs	r4, #0
 8011c02:	bbc1      	cbnz	r1, 8011c76 <__ieee754_pow+0x16e>
 8011c04:	4a63      	ldr	r2, [pc, #396]	@ (8011d94 <__ieee754_pow+0x28c>)
 8011c06:	4592      	cmp	sl, r2
 8011c08:	d1ec      	bne.n	8011be4 <__ieee754_pow+0xdc>
 8011c0a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8011c0e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8011c12:	431a      	orrs	r2, r3
 8011c14:	f000 8479 	beq.w	801250a <__ieee754_pow+0xa02>
 8011c18:	4b61      	ldr	r3, [pc, #388]	@ (8011da0 <__ieee754_pow+0x298>)
 8011c1a:	4598      	cmp	r8, r3
 8011c1c:	d908      	bls.n	8011c30 <__ieee754_pow+0x128>
 8011c1e:	f1b9 0f00 	cmp.w	r9, #0
 8011c22:	f2c0 8476 	blt.w	8012512 <__ieee754_pow+0xa0a>
 8011c26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011c2a:	e78a      	b.n	8011b42 <__ieee754_pow+0x3a>
 8011c2c:	2402      	movs	r4, #2
 8011c2e:	e7e8      	b.n	8011c02 <__ieee754_pow+0xfa>
 8011c30:	f1b9 0f00 	cmp.w	r9, #0
 8011c34:	f04f 0000 	mov.w	r0, #0
 8011c38:	f04f 0100 	mov.w	r1, #0
 8011c3c:	da81      	bge.n	8011b42 <__ieee754_pow+0x3a>
 8011c3e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8011c42:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8011c46:	e77c      	b.n	8011b42 <__ieee754_pow+0x3a>
 8011c48:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8011c4c:	d106      	bne.n	8011c5c <__ieee754_pow+0x154>
 8011c4e:	4632      	mov	r2, r6
 8011c50:	463b      	mov	r3, r7
 8011c52:	4630      	mov	r0, r6
 8011c54:	4639      	mov	r1, r7
 8011c56:	f7ee fcff 	bl	8000658 <__aeabi_dmul>
 8011c5a:	e772      	b.n	8011b42 <__ieee754_pow+0x3a>
 8011c5c:	4a51      	ldr	r2, [pc, #324]	@ (8011da4 <__ieee754_pow+0x29c>)
 8011c5e:	4591      	cmp	r9, r2
 8011c60:	d109      	bne.n	8011c76 <__ieee754_pow+0x16e>
 8011c62:	2d00      	cmp	r5, #0
 8011c64:	db07      	blt.n	8011c76 <__ieee754_pow+0x16e>
 8011c66:	ec47 6b10 	vmov	d0, r6, r7
 8011c6a:	b011      	add	sp, #68	@ 0x44
 8011c6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c70:	f000 bd52 	b.w	8012718 <__ieee754_sqrt>
 8011c74:	2400      	movs	r4, #0
 8011c76:	ec47 6b10 	vmov	d0, r6, r7
 8011c7a:	9302      	str	r3, [sp, #8]
 8011c7c:	f000 fc88 	bl	8012590 <fabs>
 8011c80:	9b02      	ldr	r3, [sp, #8]
 8011c82:	ec51 0b10 	vmov	r0, r1, d0
 8011c86:	bb53      	cbnz	r3, 8011cde <__ieee754_pow+0x1d6>
 8011c88:	4b44      	ldr	r3, [pc, #272]	@ (8011d9c <__ieee754_pow+0x294>)
 8011c8a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8011c8e:	429a      	cmp	r2, r3
 8011c90:	d002      	beq.n	8011c98 <__ieee754_pow+0x190>
 8011c92:	f1b8 0f00 	cmp.w	r8, #0
 8011c96:	d122      	bne.n	8011cde <__ieee754_pow+0x1d6>
 8011c98:	f1b9 0f00 	cmp.w	r9, #0
 8011c9c:	da05      	bge.n	8011caa <__ieee754_pow+0x1a2>
 8011c9e:	4602      	mov	r2, r0
 8011ca0:	460b      	mov	r3, r1
 8011ca2:	2000      	movs	r0, #0
 8011ca4:	493d      	ldr	r1, [pc, #244]	@ (8011d9c <__ieee754_pow+0x294>)
 8011ca6:	f7ee fe01 	bl	80008ac <__aeabi_ddiv>
 8011caa:	2d00      	cmp	r5, #0
 8011cac:	f6bf af49 	bge.w	8011b42 <__ieee754_pow+0x3a>
 8011cb0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8011cb4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8011cb8:	ea58 0804 	orrs.w	r8, r8, r4
 8011cbc:	d108      	bne.n	8011cd0 <__ieee754_pow+0x1c8>
 8011cbe:	4602      	mov	r2, r0
 8011cc0:	460b      	mov	r3, r1
 8011cc2:	4610      	mov	r0, r2
 8011cc4:	4619      	mov	r1, r3
 8011cc6:	f7ee fb0f 	bl	80002e8 <__aeabi_dsub>
 8011cca:	4602      	mov	r2, r0
 8011ccc:	460b      	mov	r3, r1
 8011cce:	e794      	b.n	8011bfa <__ieee754_pow+0xf2>
 8011cd0:	2c01      	cmp	r4, #1
 8011cd2:	f47f af36 	bne.w	8011b42 <__ieee754_pow+0x3a>
 8011cd6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011cda:	4619      	mov	r1, r3
 8011cdc:	e731      	b.n	8011b42 <__ieee754_pow+0x3a>
 8011cde:	0feb      	lsrs	r3, r5, #31
 8011ce0:	3b01      	subs	r3, #1
 8011ce2:	ea53 0204 	orrs.w	r2, r3, r4
 8011ce6:	d102      	bne.n	8011cee <__ieee754_pow+0x1e6>
 8011ce8:	4632      	mov	r2, r6
 8011cea:	463b      	mov	r3, r7
 8011cec:	e7e9      	b.n	8011cc2 <__ieee754_pow+0x1ba>
 8011cee:	3c01      	subs	r4, #1
 8011cf0:	431c      	orrs	r4, r3
 8011cf2:	d016      	beq.n	8011d22 <__ieee754_pow+0x21a>
 8011cf4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8011d80 <__ieee754_pow+0x278>
 8011cf8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8011cfc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011d00:	f240 8112 	bls.w	8011f28 <__ieee754_pow+0x420>
 8011d04:	4b28      	ldr	r3, [pc, #160]	@ (8011da8 <__ieee754_pow+0x2a0>)
 8011d06:	459a      	cmp	sl, r3
 8011d08:	4b25      	ldr	r3, [pc, #148]	@ (8011da0 <__ieee754_pow+0x298>)
 8011d0a:	d916      	bls.n	8011d3a <__ieee754_pow+0x232>
 8011d0c:	4598      	cmp	r8, r3
 8011d0e:	d80b      	bhi.n	8011d28 <__ieee754_pow+0x220>
 8011d10:	f1b9 0f00 	cmp.w	r9, #0
 8011d14:	da0b      	bge.n	8011d2e <__ieee754_pow+0x226>
 8011d16:	2000      	movs	r0, #0
 8011d18:	b011      	add	sp, #68	@ 0x44
 8011d1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d1e:	f000 bcf3 	b.w	8012708 <__math_oflow>
 8011d22:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8011d88 <__ieee754_pow+0x280>
 8011d26:	e7e7      	b.n	8011cf8 <__ieee754_pow+0x1f0>
 8011d28:	f1b9 0f00 	cmp.w	r9, #0
 8011d2c:	dcf3      	bgt.n	8011d16 <__ieee754_pow+0x20e>
 8011d2e:	2000      	movs	r0, #0
 8011d30:	b011      	add	sp, #68	@ 0x44
 8011d32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d36:	f000 bcdf 	b.w	80126f8 <__math_uflow>
 8011d3a:	4598      	cmp	r8, r3
 8011d3c:	d20c      	bcs.n	8011d58 <__ieee754_pow+0x250>
 8011d3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d42:	2200      	movs	r2, #0
 8011d44:	2300      	movs	r3, #0
 8011d46:	f7ee fef9 	bl	8000b3c <__aeabi_dcmplt>
 8011d4a:	3800      	subs	r0, #0
 8011d4c:	bf18      	it	ne
 8011d4e:	2001      	movne	r0, #1
 8011d50:	f1b9 0f00 	cmp.w	r9, #0
 8011d54:	daec      	bge.n	8011d30 <__ieee754_pow+0x228>
 8011d56:	e7df      	b.n	8011d18 <__ieee754_pow+0x210>
 8011d58:	4b10      	ldr	r3, [pc, #64]	@ (8011d9c <__ieee754_pow+0x294>)
 8011d5a:	4598      	cmp	r8, r3
 8011d5c:	f04f 0200 	mov.w	r2, #0
 8011d60:	d924      	bls.n	8011dac <__ieee754_pow+0x2a4>
 8011d62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d66:	2300      	movs	r3, #0
 8011d68:	f7ee fee8 	bl	8000b3c <__aeabi_dcmplt>
 8011d6c:	3800      	subs	r0, #0
 8011d6e:	bf18      	it	ne
 8011d70:	2001      	movne	r0, #1
 8011d72:	f1b9 0f00 	cmp.w	r9, #0
 8011d76:	dccf      	bgt.n	8011d18 <__ieee754_pow+0x210>
 8011d78:	e7da      	b.n	8011d30 <__ieee754_pow+0x228>
 8011d7a:	bf00      	nop
 8011d7c:	f3af 8000 	nop.w
 8011d80:	00000000 	.word	0x00000000
 8011d84:	3ff00000 	.word	0x3ff00000
 8011d88:	00000000 	.word	0x00000000
 8011d8c:	bff00000 	.word	0xbff00000
 8011d90:	fff00000 	.word	0xfff00000
 8011d94:	7ff00000 	.word	0x7ff00000
 8011d98:	433fffff 	.word	0x433fffff
 8011d9c:	3ff00000 	.word	0x3ff00000
 8011da0:	3fefffff 	.word	0x3fefffff
 8011da4:	3fe00000 	.word	0x3fe00000
 8011da8:	43f00000 	.word	0x43f00000
 8011dac:	4b5a      	ldr	r3, [pc, #360]	@ (8011f18 <__ieee754_pow+0x410>)
 8011dae:	f7ee fa9b 	bl	80002e8 <__aeabi_dsub>
 8011db2:	a351      	add	r3, pc, #324	@ (adr r3, 8011ef8 <__ieee754_pow+0x3f0>)
 8011db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011db8:	4604      	mov	r4, r0
 8011dba:	460d      	mov	r5, r1
 8011dbc:	f7ee fc4c 	bl	8000658 <__aeabi_dmul>
 8011dc0:	a34f      	add	r3, pc, #316	@ (adr r3, 8011f00 <__ieee754_pow+0x3f8>)
 8011dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dc6:	4606      	mov	r6, r0
 8011dc8:	460f      	mov	r7, r1
 8011dca:	4620      	mov	r0, r4
 8011dcc:	4629      	mov	r1, r5
 8011dce:	f7ee fc43 	bl	8000658 <__aeabi_dmul>
 8011dd2:	4b52      	ldr	r3, [pc, #328]	@ (8011f1c <__ieee754_pow+0x414>)
 8011dd4:	4682      	mov	sl, r0
 8011dd6:	468b      	mov	fp, r1
 8011dd8:	2200      	movs	r2, #0
 8011dda:	4620      	mov	r0, r4
 8011ddc:	4629      	mov	r1, r5
 8011dde:	f7ee fc3b 	bl	8000658 <__aeabi_dmul>
 8011de2:	4602      	mov	r2, r0
 8011de4:	460b      	mov	r3, r1
 8011de6:	a148      	add	r1, pc, #288	@ (adr r1, 8011f08 <__ieee754_pow+0x400>)
 8011de8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011dec:	f7ee fa7c 	bl	80002e8 <__aeabi_dsub>
 8011df0:	4622      	mov	r2, r4
 8011df2:	462b      	mov	r3, r5
 8011df4:	f7ee fc30 	bl	8000658 <__aeabi_dmul>
 8011df8:	4602      	mov	r2, r0
 8011dfa:	460b      	mov	r3, r1
 8011dfc:	2000      	movs	r0, #0
 8011dfe:	4948      	ldr	r1, [pc, #288]	@ (8011f20 <__ieee754_pow+0x418>)
 8011e00:	f7ee fa72 	bl	80002e8 <__aeabi_dsub>
 8011e04:	4622      	mov	r2, r4
 8011e06:	4680      	mov	r8, r0
 8011e08:	4689      	mov	r9, r1
 8011e0a:	462b      	mov	r3, r5
 8011e0c:	4620      	mov	r0, r4
 8011e0e:	4629      	mov	r1, r5
 8011e10:	f7ee fc22 	bl	8000658 <__aeabi_dmul>
 8011e14:	4602      	mov	r2, r0
 8011e16:	460b      	mov	r3, r1
 8011e18:	4640      	mov	r0, r8
 8011e1a:	4649      	mov	r1, r9
 8011e1c:	f7ee fc1c 	bl	8000658 <__aeabi_dmul>
 8011e20:	a33b      	add	r3, pc, #236	@ (adr r3, 8011f10 <__ieee754_pow+0x408>)
 8011e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e26:	f7ee fc17 	bl	8000658 <__aeabi_dmul>
 8011e2a:	4602      	mov	r2, r0
 8011e2c:	460b      	mov	r3, r1
 8011e2e:	4650      	mov	r0, sl
 8011e30:	4659      	mov	r1, fp
 8011e32:	f7ee fa59 	bl	80002e8 <__aeabi_dsub>
 8011e36:	4602      	mov	r2, r0
 8011e38:	460b      	mov	r3, r1
 8011e3a:	4680      	mov	r8, r0
 8011e3c:	4689      	mov	r9, r1
 8011e3e:	4630      	mov	r0, r6
 8011e40:	4639      	mov	r1, r7
 8011e42:	f7ee fa53 	bl	80002ec <__adddf3>
 8011e46:	2400      	movs	r4, #0
 8011e48:	4632      	mov	r2, r6
 8011e4a:	463b      	mov	r3, r7
 8011e4c:	4620      	mov	r0, r4
 8011e4e:	460d      	mov	r5, r1
 8011e50:	f7ee fa4a 	bl	80002e8 <__aeabi_dsub>
 8011e54:	4602      	mov	r2, r0
 8011e56:	460b      	mov	r3, r1
 8011e58:	4640      	mov	r0, r8
 8011e5a:	4649      	mov	r1, r9
 8011e5c:	f7ee fa44 	bl	80002e8 <__aeabi_dsub>
 8011e60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011e64:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011e68:	2300      	movs	r3, #0
 8011e6a:	9304      	str	r3, [sp, #16]
 8011e6c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8011e70:	4606      	mov	r6, r0
 8011e72:	460f      	mov	r7, r1
 8011e74:	4652      	mov	r2, sl
 8011e76:	465b      	mov	r3, fp
 8011e78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011e7c:	f7ee fa34 	bl	80002e8 <__aeabi_dsub>
 8011e80:	4622      	mov	r2, r4
 8011e82:	462b      	mov	r3, r5
 8011e84:	f7ee fbe8 	bl	8000658 <__aeabi_dmul>
 8011e88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011e8c:	4680      	mov	r8, r0
 8011e8e:	4689      	mov	r9, r1
 8011e90:	4630      	mov	r0, r6
 8011e92:	4639      	mov	r1, r7
 8011e94:	f7ee fbe0 	bl	8000658 <__aeabi_dmul>
 8011e98:	4602      	mov	r2, r0
 8011e9a:	460b      	mov	r3, r1
 8011e9c:	4640      	mov	r0, r8
 8011e9e:	4649      	mov	r1, r9
 8011ea0:	f7ee fa24 	bl	80002ec <__adddf3>
 8011ea4:	4652      	mov	r2, sl
 8011ea6:	465b      	mov	r3, fp
 8011ea8:	4606      	mov	r6, r0
 8011eaa:	460f      	mov	r7, r1
 8011eac:	4620      	mov	r0, r4
 8011eae:	4629      	mov	r1, r5
 8011eb0:	f7ee fbd2 	bl	8000658 <__aeabi_dmul>
 8011eb4:	460b      	mov	r3, r1
 8011eb6:	4602      	mov	r2, r0
 8011eb8:	4680      	mov	r8, r0
 8011eba:	4689      	mov	r9, r1
 8011ebc:	4630      	mov	r0, r6
 8011ebe:	4639      	mov	r1, r7
 8011ec0:	f7ee fa14 	bl	80002ec <__adddf3>
 8011ec4:	4b17      	ldr	r3, [pc, #92]	@ (8011f24 <__ieee754_pow+0x41c>)
 8011ec6:	4299      	cmp	r1, r3
 8011ec8:	4604      	mov	r4, r0
 8011eca:	460d      	mov	r5, r1
 8011ecc:	468a      	mov	sl, r1
 8011ece:	468b      	mov	fp, r1
 8011ed0:	f340 82ef 	ble.w	80124b2 <__ieee754_pow+0x9aa>
 8011ed4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8011ed8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8011edc:	4303      	orrs	r3, r0
 8011ede:	f000 81e8 	beq.w	80122b2 <__ieee754_pow+0x7aa>
 8011ee2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ee6:	2200      	movs	r2, #0
 8011ee8:	2300      	movs	r3, #0
 8011eea:	f7ee fe27 	bl	8000b3c <__aeabi_dcmplt>
 8011eee:	3800      	subs	r0, #0
 8011ef0:	bf18      	it	ne
 8011ef2:	2001      	movne	r0, #1
 8011ef4:	e710      	b.n	8011d18 <__ieee754_pow+0x210>
 8011ef6:	bf00      	nop
 8011ef8:	60000000 	.word	0x60000000
 8011efc:	3ff71547 	.word	0x3ff71547
 8011f00:	f85ddf44 	.word	0xf85ddf44
 8011f04:	3e54ae0b 	.word	0x3e54ae0b
 8011f08:	55555555 	.word	0x55555555
 8011f0c:	3fd55555 	.word	0x3fd55555
 8011f10:	652b82fe 	.word	0x652b82fe
 8011f14:	3ff71547 	.word	0x3ff71547
 8011f18:	3ff00000 	.word	0x3ff00000
 8011f1c:	3fd00000 	.word	0x3fd00000
 8011f20:	3fe00000 	.word	0x3fe00000
 8011f24:	408fffff 	.word	0x408fffff
 8011f28:	4bd5      	ldr	r3, [pc, #852]	@ (8012280 <__ieee754_pow+0x778>)
 8011f2a:	402b      	ands	r3, r5
 8011f2c:	2200      	movs	r2, #0
 8011f2e:	b92b      	cbnz	r3, 8011f3c <__ieee754_pow+0x434>
 8011f30:	4bd4      	ldr	r3, [pc, #848]	@ (8012284 <__ieee754_pow+0x77c>)
 8011f32:	f7ee fb91 	bl	8000658 <__aeabi_dmul>
 8011f36:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8011f3a:	468b      	mov	fp, r1
 8011f3c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8011f40:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8011f44:	4413      	add	r3, r2
 8011f46:	930a      	str	r3, [sp, #40]	@ 0x28
 8011f48:	4bcf      	ldr	r3, [pc, #828]	@ (8012288 <__ieee754_pow+0x780>)
 8011f4a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8011f4e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8011f52:	459b      	cmp	fp, r3
 8011f54:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011f58:	dd08      	ble.n	8011f6c <__ieee754_pow+0x464>
 8011f5a:	4bcc      	ldr	r3, [pc, #816]	@ (801228c <__ieee754_pow+0x784>)
 8011f5c:	459b      	cmp	fp, r3
 8011f5e:	f340 81a5 	ble.w	80122ac <__ieee754_pow+0x7a4>
 8011f62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011f64:	3301      	adds	r3, #1
 8011f66:	930a      	str	r3, [sp, #40]	@ 0x28
 8011f68:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8011f6c:	f04f 0a00 	mov.w	sl, #0
 8011f70:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8011f74:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011f76:	4bc6      	ldr	r3, [pc, #792]	@ (8012290 <__ieee754_pow+0x788>)
 8011f78:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011f7c:	ed93 7b00 	vldr	d7, [r3]
 8011f80:	4629      	mov	r1, r5
 8011f82:	ec53 2b17 	vmov	r2, r3, d7
 8011f86:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011f8a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011f8e:	f7ee f9ab 	bl	80002e8 <__aeabi_dsub>
 8011f92:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011f96:	4606      	mov	r6, r0
 8011f98:	460f      	mov	r7, r1
 8011f9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011f9e:	f7ee f9a5 	bl	80002ec <__adddf3>
 8011fa2:	4602      	mov	r2, r0
 8011fa4:	460b      	mov	r3, r1
 8011fa6:	2000      	movs	r0, #0
 8011fa8:	49ba      	ldr	r1, [pc, #744]	@ (8012294 <__ieee754_pow+0x78c>)
 8011faa:	f7ee fc7f 	bl	80008ac <__aeabi_ddiv>
 8011fae:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8011fb2:	4602      	mov	r2, r0
 8011fb4:	460b      	mov	r3, r1
 8011fb6:	4630      	mov	r0, r6
 8011fb8:	4639      	mov	r1, r7
 8011fba:	f7ee fb4d 	bl	8000658 <__aeabi_dmul>
 8011fbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011fc2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8011fc6:	106d      	asrs	r5, r5, #1
 8011fc8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8011fcc:	f04f 0b00 	mov.w	fp, #0
 8011fd0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8011fd4:	4661      	mov	r1, ip
 8011fd6:	2200      	movs	r2, #0
 8011fd8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8011fdc:	4658      	mov	r0, fp
 8011fde:	46e1      	mov	r9, ip
 8011fe0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8011fe4:	4614      	mov	r4, r2
 8011fe6:	461d      	mov	r5, r3
 8011fe8:	f7ee fb36 	bl	8000658 <__aeabi_dmul>
 8011fec:	4602      	mov	r2, r0
 8011fee:	460b      	mov	r3, r1
 8011ff0:	4630      	mov	r0, r6
 8011ff2:	4639      	mov	r1, r7
 8011ff4:	f7ee f978 	bl	80002e8 <__aeabi_dsub>
 8011ff8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011ffc:	4606      	mov	r6, r0
 8011ffe:	460f      	mov	r7, r1
 8012000:	4620      	mov	r0, r4
 8012002:	4629      	mov	r1, r5
 8012004:	f7ee f970 	bl	80002e8 <__aeabi_dsub>
 8012008:	4602      	mov	r2, r0
 801200a:	460b      	mov	r3, r1
 801200c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012010:	f7ee f96a 	bl	80002e8 <__aeabi_dsub>
 8012014:	465a      	mov	r2, fp
 8012016:	464b      	mov	r3, r9
 8012018:	f7ee fb1e 	bl	8000658 <__aeabi_dmul>
 801201c:	4602      	mov	r2, r0
 801201e:	460b      	mov	r3, r1
 8012020:	4630      	mov	r0, r6
 8012022:	4639      	mov	r1, r7
 8012024:	f7ee f960 	bl	80002e8 <__aeabi_dsub>
 8012028:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801202c:	f7ee fb14 	bl	8000658 <__aeabi_dmul>
 8012030:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012034:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012038:	4610      	mov	r0, r2
 801203a:	4619      	mov	r1, r3
 801203c:	f7ee fb0c 	bl	8000658 <__aeabi_dmul>
 8012040:	a37d      	add	r3, pc, #500	@ (adr r3, 8012238 <__ieee754_pow+0x730>)
 8012042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012046:	4604      	mov	r4, r0
 8012048:	460d      	mov	r5, r1
 801204a:	f7ee fb05 	bl	8000658 <__aeabi_dmul>
 801204e:	a37c      	add	r3, pc, #496	@ (adr r3, 8012240 <__ieee754_pow+0x738>)
 8012050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012054:	f7ee f94a 	bl	80002ec <__adddf3>
 8012058:	4622      	mov	r2, r4
 801205a:	462b      	mov	r3, r5
 801205c:	f7ee fafc 	bl	8000658 <__aeabi_dmul>
 8012060:	a379      	add	r3, pc, #484	@ (adr r3, 8012248 <__ieee754_pow+0x740>)
 8012062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012066:	f7ee f941 	bl	80002ec <__adddf3>
 801206a:	4622      	mov	r2, r4
 801206c:	462b      	mov	r3, r5
 801206e:	f7ee faf3 	bl	8000658 <__aeabi_dmul>
 8012072:	a377      	add	r3, pc, #476	@ (adr r3, 8012250 <__ieee754_pow+0x748>)
 8012074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012078:	f7ee f938 	bl	80002ec <__adddf3>
 801207c:	4622      	mov	r2, r4
 801207e:	462b      	mov	r3, r5
 8012080:	f7ee faea 	bl	8000658 <__aeabi_dmul>
 8012084:	a374      	add	r3, pc, #464	@ (adr r3, 8012258 <__ieee754_pow+0x750>)
 8012086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801208a:	f7ee f92f 	bl	80002ec <__adddf3>
 801208e:	4622      	mov	r2, r4
 8012090:	462b      	mov	r3, r5
 8012092:	f7ee fae1 	bl	8000658 <__aeabi_dmul>
 8012096:	a372      	add	r3, pc, #456	@ (adr r3, 8012260 <__ieee754_pow+0x758>)
 8012098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801209c:	f7ee f926 	bl	80002ec <__adddf3>
 80120a0:	4622      	mov	r2, r4
 80120a2:	4606      	mov	r6, r0
 80120a4:	460f      	mov	r7, r1
 80120a6:	462b      	mov	r3, r5
 80120a8:	4620      	mov	r0, r4
 80120aa:	4629      	mov	r1, r5
 80120ac:	f7ee fad4 	bl	8000658 <__aeabi_dmul>
 80120b0:	4602      	mov	r2, r0
 80120b2:	460b      	mov	r3, r1
 80120b4:	4630      	mov	r0, r6
 80120b6:	4639      	mov	r1, r7
 80120b8:	f7ee face 	bl	8000658 <__aeabi_dmul>
 80120bc:	465a      	mov	r2, fp
 80120be:	4604      	mov	r4, r0
 80120c0:	460d      	mov	r5, r1
 80120c2:	464b      	mov	r3, r9
 80120c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80120c8:	f7ee f910 	bl	80002ec <__adddf3>
 80120cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80120d0:	f7ee fac2 	bl	8000658 <__aeabi_dmul>
 80120d4:	4622      	mov	r2, r4
 80120d6:	462b      	mov	r3, r5
 80120d8:	f7ee f908 	bl	80002ec <__adddf3>
 80120dc:	465a      	mov	r2, fp
 80120de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80120e2:	464b      	mov	r3, r9
 80120e4:	4658      	mov	r0, fp
 80120e6:	4649      	mov	r1, r9
 80120e8:	f7ee fab6 	bl	8000658 <__aeabi_dmul>
 80120ec:	4b6a      	ldr	r3, [pc, #424]	@ (8012298 <__ieee754_pow+0x790>)
 80120ee:	2200      	movs	r2, #0
 80120f0:	4606      	mov	r6, r0
 80120f2:	460f      	mov	r7, r1
 80120f4:	f7ee f8fa 	bl	80002ec <__adddf3>
 80120f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80120fc:	f7ee f8f6 	bl	80002ec <__adddf3>
 8012100:	46d8      	mov	r8, fp
 8012102:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8012106:	460d      	mov	r5, r1
 8012108:	465a      	mov	r2, fp
 801210a:	460b      	mov	r3, r1
 801210c:	4640      	mov	r0, r8
 801210e:	4649      	mov	r1, r9
 8012110:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8012114:	f7ee faa0 	bl	8000658 <__aeabi_dmul>
 8012118:	465c      	mov	r4, fp
 801211a:	4680      	mov	r8, r0
 801211c:	4689      	mov	r9, r1
 801211e:	4b5e      	ldr	r3, [pc, #376]	@ (8012298 <__ieee754_pow+0x790>)
 8012120:	2200      	movs	r2, #0
 8012122:	4620      	mov	r0, r4
 8012124:	4629      	mov	r1, r5
 8012126:	f7ee f8df 	bl	80002e8 <__aeabi_dsub>
 801212a:	4632      	mov	r2, r6
 801212c:	463b      	mov	r3, r7
 801212e:	f7ee f8db 	bl	80002e8 <__aeabi_dsub>
 8012132:	4602      	mov	r2, r0
 8012134:	460b      	mov	r3, r1
 8012136:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801213a:	f7ee f8d5 	bl	80002e8 <__aeabi_dsub>
 801213e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012142:	f7ee fa89 	bl	8000658 <__aeabi_dmul>
 8012146:	4622      	mov	r2, r4
 8012148:	4606      	mov	r6, r0
 801214a:	460f      	mov	r7, r1
 801214c:	462b      	mov	r3, r5
 801214e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012152:	f7ee fa81 	bl	8000658 <__aeabi_dmul>
 8012156:	4602      	mov	r2, r0
 8012158:	460b      	mov	r3, r1
 801215a:	4630      	mov	r0, r6
 801215c:	4639      	mov	r1, r7
 801215e:	f7ee f8c5 	bl	80002ec <__adddf3>
 8012162:	4606      	mov	r6, r0
 8012164:	460f      	mov	r7, r1
 8012166:	4602      	mov	r2, r0
 8012168:	460b      	mov	r3, r1
 801216a:	4640      	mov	r0, r8
 801216c:	4649      	mov	r1, r9
 801216e:	f7ee f8bd 	bl	80002ec <__adddf3>
 8012172:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8012176:	a33c      	add	r3, pc, #240	@ (adr r3, 8012268 <__ieee754_pow+0x760>)
 8012178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801217c:	4658      	mov	r0, fp
 801217e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8012182:	460d      	mov	r5, r1
 8012184:	f7ee fa68 	bl	8000658 <__aeabi_dmul>
 8012188:	465c      	mov	r4, fp
 801218a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801218e:	4642      	mov	r2, r8
 8012190:	464b      	mov	r3, r9
 8012192:	4620      	mov	r0, r4
 8012194:	4629      	mov	r1, r5
 8012196:	f7ee f8a7 	bl	80002e8 <__aeabi_dsub>
 801219a:	4602      	mov	r2, r0
 801219c:	460b      	mov	r3, r1
 801219e:	4630      	mov	r0, r6
 80121a0:	4639      	mov	r1, r7
 80121a2:	f7ee f8a1 	bl	80002e8 <__aeabi_dsub>
 80121a6:	a332      	add	r3, pc, #200	@ (adr r3, 8012270 <__ieee754_pow+0x768>)
 80121a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ac:	f7ee fa54 	bl	8000658 <__aeabi_dmul>
 80121b0:	a331      	add	r3, pc, #196	@ (adr r3, 8012278 <__ieee754_pow+0x770>)
 80121b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121b6:	4606      	mov	r6, r0
 80121b8:	460f      	mov	r7, r1
 80121ba:	4620      	mov	r0, r4
 80121bc:	4629      	mov	r1, r5
 80121be:	f7ee fa4b 	bl	8000658 <__aeabi_dmul>
 80121c2:	4602      	mov	r2, r0
 80121c4:	460b      	mov	r3, r1
 80121c6:	4630      	mov	r0, r6
 80121c8:	4639      	mov	r1, r7
 80121ca:	f7ee f88f 	bl	80002ec <__adddf3>
 80121ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80121d0:	4b32      	ldr	r3, [pc, #200]	@ (801229c <__ieee754_pow+0x794>)
 80121d2:	4413      	add	r3, r2
 80121d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121d8:	f7ee f888 	bl	80002ec <__adddf3>
 80121dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80121e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80121e2:	f7ee f9cf 	bl	8000584 <__aeabi_i2d>
 80121e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80121e8:	4b2d      	ldr	r3, [pc, #180]	@ (80122a0 <__ieee754_pow+0x798>)
 80121ea:	4413      	add	r3, r2
 80121ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80121f0:	4606      	mov	r6, r0
 80121f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80121f6:	460f      	mov	r7, r1
 80121f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80121fc:	f7ee f876 	bl	80002ec <__adddf3>
 8012200:	4642      	mov	r2, r8
 8012202:	464b      	mov	r3, r9
 8012204:	f7ee f872 	bl	80002ec <__adddf3>
 8012208:	4632      	mov	r2, r6
 801220a:	463b      	mov	r3, r7
 801220c:	f7ee f86e 	bl	80002ec <__adddf3>
 8012210:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8012214:	4632      	mov	r2, r6
 8012216:	463b      	mov	r3, r7
 8012218:	4658      	mov	r0, fp
 801221a:	460d      	mov	r5, r1
 801221c:	f7ee f864 	bl	80002e8 <__aeabi_dsub>
 8012220:	4642      	mov	r2, r8
 8012222:	464b      	mov	r3, r9
 8012224:	f7ee f860 	bl	80002e8 <__aeabi_dsub>
 8012228:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801222c:	f7ee f85c 	bl	80002e8 <__aeabi_dsub>
 8012230:	465c      	mov	r4, fp
 8012232:	4602      	mov	r2, r0
 8012234:	e036      	b.n	80122a4 <__ieee754_pow+0x79c>
 8012236:	bf00      	nop
 8012238:	4a454eef 	.word	0x4a454eef
 801223c:	3fca7e28 	.word	0x3fca7e28
 8012240:	93c9db65 	.word	0x93c9db65
 8012244:	3fcd864a 	.word	0x3fcd864a
 8012248:	a91d4101 	.word	0xa91d4101
 801224c:	3fd17460 	.word	0x3fd17460
 8012250:	518f264d 	.word	0x518f264d
 8012254:	3fd55555 	.word	0x3fd55555
 8012258:	db6fabff 	.word	0xdb6fabff
 801225c:	3fdb6db6 	.word	0x3fdb6db6
 8012260:	33333303 	.word	0x33333303
 8012264:	3fe33333 	.word	0x3fe33333
 8012268:	e0000000 	.word	0xe0000000
 801226c:	3feec709 	.word	0x3feec709
 8012270:	dc3a03fd 	.word	0xdc3a03fd
 8012274:	3feec709 	.word	0x3feec709
 8012278:	145b01f5 	.word	0x145b01f5
 801227c:	be3e2fe0 	.word	0xbe3e2fe0
 8012280:	7ff00000 	.word	0x7ff00000
 8012284:	43400000 	.word	0x43400000
 8012288:	0003988e 	.word	0x0003988e
 801228c:	000bb679 	.word	0x000bb679
 8012290:	08016890 	.word	0x08016890
 8012294:	3ff00000 	.word	0x3ff00000
 8012298:	40080000 	.word	0x40080000
 801229c:	08016870 	.word	0x08016870
 80122a0:	08016880 	.word	0x08016880
 80122a4:	460b      	mov	r3, r1
 80122a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80122aa:	e5d7      	b.n	8011e5c <__ieee754_pow+0x354>
 80122ac:	f04f 0a01 	mov.w	sl, #1
 80122b0:	e65e      	b.n	8011f70 <__ieee754_pow+0x468>
 80122b2:	a3b4      	add	r3, pc, #720	@ (adr r3, 8012584 <__ieee754_pow+0xa7c>)
 80122b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122b8:	4630      	mov	r0, r6
 80122ba:	4639      	mov	r1, r7
 80122bc:	f7ee f816 	bl	80002ec <__adddf3>
 80122c0:	4642      	mov	r2, r8
 80122c2:	e9cd 0100 	strd	r0, r1, [sp]
 80122c6:	464b      	mov	r3, r9
 80122c8:	4620      	mov	r0, r4
 80122ca:	4629      	mov	r1, r5
 80122cc:	f7ee f80c 	bl	80002e8 <__aeabi_dsub>
 80122d0:	4602      	mov	r2, r0
 80122d2:	460b      	mov	r3, r1
 80122d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80122d8:	f7ee fc4e 	bl	8000b78 <__aeabi_dcmpgt>
 80122dc:	2800      	cmp	r0, #0
 80122de:	f47f ae00 	bne.w	8011ee2 <__ieee754_pow+0x3da>
 80122e2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80122e6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80122ea:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80122ee:	fa43 fa0a 	asr.w	sl, r3, sl
 80122f2:	44da      	add	sl, fp
 80122f4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80122f8:	489d      	ldr	r0, [pc, #628]	@ (8012570 <__ieee754_pow+0xa68>)
 80122fa:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80122fe:	4108      	asrs	r0, r1
 8012300:	ea00 030a 	and.w	r3, r0, sl
 8012304:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8012308:	f1c1 0114 	rsb	r1, r1, #20
 801230c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8012310:	fa4a fa01 	asr.w	sl, sl, r1
 8012314:	f1bb 0f00 	cmp.w	fp, #0
 8012318:	4640      	mov	r0, r8
 801231a:	4649      	mov	r1, r9
 801231c:	f04f 0200 	mov.w	r2, #0
 8012320:	bfb8      	it	lt
 8012322:	f1ca 0a00 	rsblt	sl, sl, #0
 8012326:	f7ed ffdf 	bl	80002e8 <__aeabi_dsub>
 801232a:	4680      	mov	r8, r0
 801232c:	4689      	mov	r9, r1
 801232e:	4632      	mov	r2, r6
 8012330:	463b      	mov	r3, r7
 8012332:	4640      	mov	r0, r8
 8012334:	4649      	mov	r1, r9
 8012336:	f7ed ffd9 	bl	80002ec <__adddf3>
 801233a:	2400      	movs	r4, #0
 801233c:	a37c      	add	r3, pc, #496	@ (adr r3, 8012530 <__ieee754_pow+0xa28>)
 801233e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012342:	4620      	mov	r0, r4
 8012344:	460d      	mov	r5, r1
 8012346:	f7ee f987 	bl	8000658 <__aeabi_dmul>
 801234a:	4642      	mov	r2, r8
 801234c:	e9cd 0100 	strd	r0, r1, [sp]
 8012350:	464b      	mov	r3, r9
 8012352:	4620      	mov	r0, r4
 8012354:	4629      	mov	r1, r5
 8012356:	f7ed ffc7 	bl	80002e8 <__aeabi_dsub>
 801235a:	4602      	mov	r2, r0
 801235c:	460b      	mov	r3, r1
 801235e:	4630      	mov	r0, r6
 8012360:	4639      	mov	r1, r7
 8012362:	f7ed ffc1 	bl	80002e8 <__aeabi_dsub>
 8012366:	a374      	add	r3, pc, #464	@ (adr r3, 8012538 <__ieee754_pow+0xa30>)
 8012368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801236c:	f7ee f974 	bl	8000658 <__aeabi_dmul>
 8012370:	a373      	add	r3, pc, #460	@ (adr r3, 8012540 <__ieee754_pow+0xa38>)
 8012372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012376:	4680      	mov	r8, r0
 8012378:	4689      	mov	r9, r1
 801237a:	4620      	mov	r0, r4
 801237c:	4629      	mov	r1, r5
 801237e:	f7ee f96b 	bl	8000658 <__aeabi_dmul>
 8012382:	4602      	mov	r2, r0
 8012384:	460b      	mov	r3, r1
 8012386:	4640      	mov	r0, r8
 8012388:	4649      	mov	r1, r9
 801238a:	f7ed ffaf 	bl	80002ec <__adddf3>
 801238e:	4604      	mov	r4, r0
 8012390:	460d      	mov	r5, r1
 8012392:	4602      	mov	r2, r0
 8012394:	460b      	mov	r3, r1
 8012396:	e9dd 0100 	ldrd	r0, r1, [sp]
 801239a:	f7ed ffa7 	bl	80002ec <__adddf3>
 801239e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80123a2:	4680      	mov	r8, r0
 80123a4:	4689      	mov	r9, r1
 80123a6:	f7ed ff9f 	bl	80002e8 <__aeabi_dsub>
 80123aa:	4602      	mov	r2, r0
 80123ac:	460b      	mov	r3, r1
 80123ae:	4620      	mov	r0, r4
 80123b0:	4629      	mov	r1, r5
 80123b2:	f7ed ff99 	bl	80002e8 <__aeabi_dsub>
 80123b6:	4642      	mov	r2, r8
 80123b8:	4606      	mov	r6, r0
 80123ba:	460f      	mov	r7, r1
 80123bc:	464b      	mov	r3, r9
 80123be:	4640      	mov	r0, r8
 80123c0:	4649      	mov	r1, r9
 80123c2:	f7ee f949 	bl	8000658 <__aeabi_dmul>
 80123c6:	a360      	add	r3, pc, #384	@ (adr r3, 8012548 <__ieee754_pow+0xa40>)
 80123c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123cc:	4604      	mov	r4, r0
 80123ce:	460d      	mov	r5, r1
 80123d0:	f7ee f942 	bl	8000658 <__aeabi_dmul>
 80123d4:	a35e      	add	r3, pc, #376	@ (adr r3, 8012550 <__ieee754_pow+0xa48>)
 80123d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123da:	f7ed ff85 	bl	80002e8 <__aeabi_dsub>
 80123de:	4622      	mov	r2, r4
 80123e0:	462b      	mov	r3, r5
 80123e2:	f7ee f939 	bl	8000658 <__aeabi_dmul>
 80123e6:	a35c      	add	r3, pc, #368	@ (adr r3, 8012558 <__ieee754_pow+0xa50>)
 80123e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ec:	f7ed ff7e 	bl	80002ec <__adddf3>
 80123f0:	4622      	mov	r2, r4
 80123f2:	462b      	mov	r3, r5
 80123f4:	f7ee f930 	bl	8000658 <__aeabi_dmul>
 80123f8:	a359      	add	r3, pc, #356	@ (adr r3, 8012560 <__ieee754_pow+0xa58>)
 80123fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123fe:	f7ed ff73 	bl	80002e8 <__aeabi_dsub>
 8012402:	4622      	mov	r2, r4
 8012404:	462b      	mov	r3, r5
 8012406:	f7ee f927 	bl	8000658 <__aeabi_dmul>
 801240a:	a357      	add	r3, pc, #348	@ (adr r3, 8012568 <__ieee754_pow+0xa60>)
 801240c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012410:	f7ed ff6c 	bl	80002ec <__adddf3>
 8012414:	4622      	mov	r2, r4
 8012416:	462b      	mov	r3, r5
 8012418:	f7ee f91e 	bl	8000658 <__aeabi_dmul>
 801241c:	4602      	mov	r2, r0
 801241e:	460b      	mov	r3, r1
 8012420:	4640      	mov	r0, r8
 8012422:	4649      	mov	r1, r9
 8012424:	f7ed ff60 	bl	80002e8 <__aeabi_dsub>
 8012428:	4604      	mov	r4, r0
 801242a:	460d      	mov	r5, r1
 801242c:	4602      	mov	r2, r0
 801242e:	460b      	mov	r3, r1
 8012430:	4640      	mov	r0, r8
 8012432:	4649      	mov	r1, r9
 8012434:	f7ee f910 	bl	8000658 <__aeabi_dmul>
 8012438:	2200      	movs	r2, #0
 801243a:	e9cd 0100 	strd	r0, r1, [sp]
 801243e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012442:	4620      	mov	r0, r4
 8012444:	4629      	mov	r1, r5
 8012446:	f7ed ff4f 	bl	80002e8 <__aeabi_dsub>
 801244a:	4602      	mov	r2, r0
 801244c:	460b      	mov	r3, r1
 801244e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012452:	f7ee fa2b 	bl	80008ac <__aeabi_ddiv>
 8012456:	4632      	mov	r2, r6
 8012458:	4604      	mov	r4, r0
 801245a:	460d      	mov	r5, r1
 801245c:	463b      	mov	r3, r7
 801245e:	4640      	mov	r0, r8
 8012460:	4649      	mov	r1, r9
 8012462:	f7ee f8f9 	bl	8000658 <__aeabi_dmul>
 8012466:	4632      	mov	r2, r6
 8012468:	463b      	mov	r3, r7
 801246a:	f7ed ff3f 	bl	80002ec <__adddf3>
 801246e:	4602      	mov	r2, r0
 8012470:	460b      	mov	r3, r1
 8012472:	4620      	mov	r0, r4
 8012474:	4629      	mov	r1, r5
 8012476:	f7ed ff37 	bl	80002e8 <__aeabi_dsub>
 801247a:	4642      	mov	r2, r8
 801247c:	464b      	mov	r3, r9
 801247e:	f7ed ff33 	bl	80002e8 <__aeabi_dsub>
 8012482:	460b      	mov	r3, r1
 8012484:	4602      	mov	r2, r0
 8012486:	493b      	ldr	r1, [pc, #236]	@ (8012574 <__ieee754_pow+0xa6c>)
 8012488:	2000      	movs	r0, #0
 801248a:	f7ed ff2d 	bl	80002e8 <__aeabi_dsub>
 801248e:	ec41 0b10 	vmov	d0, r0, r1
 8012492:	ee10 3a90 	vmov	r3, s1
 8012496:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801249a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801249e:	da30      	bge.n	8012502 <__ieee754_pow+0x9fa>
 80124a0:	4650      	mov	r0, sl
 80124a2:	f000 f87d 	bl	80125a0 <scalbn>
 80124a6:	ec51 0b10 	vmov	r0, r1, d0
 80124aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80124ae:	f7ff bbd2 	b.w	8011c56 <__ieee754_pow+0x14e>
 80124b2:	4c31      	ldr	r4, [pc, #196]	@ (8012578 <__ieee754_pow+0xa70>)
 80124b4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80124b8:	42a3      	cmp	r3, r4
 80124ba:	d91a      	bls.n	80124f2 <__ieee754_pow+0x9ea>
 80124bc:	4b2f      	ldr	r3, [pc, #188]	@ (801257c <__ieee754_pow+0xa74>)
 80124be:	440b      	add	r3, r1
 80124c0:	4303      	orrs	r3, r0
 80124c2:	d009      	beq.n	80124d8 <__ieee754_pow+0x9d0>
 80124c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80124c8:	2200      	movs	r2, #0
 80124ca:	2300      	movs	r3, #0
 80124cc:	f7ee fb36 	bl	8000b3c <__aeabi_dcmplt>
 80124d0:	3800      	subs	r0, #0
 80124d2:	bf18      	it	ne
 80124d4:	2001      	movne	r0, #1
 80124d6:	e42b      	b.n	8011d30 <__ieee754_pow+0x228>
 80124d8:	4642      	mov	r2, r8
 80124da:	464b      	mov	r3, r9
 80124dc:	f7ed ff04 	bl	80002e8 <__aeabi_dsub>
 80124e0:	4632      	mov	r2, r6
 80124e2:	463b      	mov	r3, r7
 80124e4:	f7ee fb3e 	bl	8000b64 <__aeabi_dcmpge>
 80124e8:	2800      	cmp	r0, #0
 80124ea:	d1eb      	bne.n	80124c4 <__ieee754_pow+0x9bc>
 80124ec:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 801258c <__ieee754_pow+0xa84>
 80124f0:	e6f7      	b.n	80122e2 <__ieee754_pow+0x7da>
 80124f2:	469a      	mov	sl, r3
 80124f4:	4b22      	ldr	r3, [pc, #136]	@ (8012580 <__ieee754_pow+0xa78>)
 80124f6:	459a      	cmp	sl, r3
 80124f8:	f63f aef3 	bhi.w	80122e2 <__ieee754_pow+0x7da>
 80124fc:	f8dd a010 	ldr.w	sl, [sp, #16]
 8012500:	e715      	b.n	801232e <__ieee754_pow+0x826>
 8012502:	ec51 0b10 	vmov	r0, r1, d0
 8012506:	4619      	mov	r1, r3
 8012508:	e7cf      	b.n	80124aa <__ieee754_pow+0x9a2>
 801250a:	491a      	ldr	r1, [pc, #104]	@ (8012574 <__ieee754_pow+0xa6c>)
 801250c:	2000      	movs	r0, #0
 801250e:	f7ff bb18 	b.w	8011b42 <__ieee754_pow+0x3a>
 8012512:	2000      	movs	r0, #0
 8012514:	2100      	movs	r1, #0
 8012516:	f7ff bb14 	b.w	8011b42 <__ieee754_pow+0x3a>
 801251a:	4630      	mov	r0, r6
 801251c:	4639      	mov	r1, r7
 801251e:	f7ff bb10 	b.w	8011b42 <__ieee754_pow+0x3a>
 8012522:	460c      	mov	r4, r1
 8012524:	f7ff bb5e 	b.w	8011be4 <__ieee754_pow+0xdc>
 8012528:	2400      	movs	r4, #0
 801252a:	f7ff bb49 	b.w	8011bc0 <__ieee754_pow+0xb8>
 801252e:	bf00      	nop
 8012530:	00000000 	.word	0x00000000
 8012534:	3fe62e43 	.word	0x3fe62e43
 8012538:	fefa39ef 	.word	0xfefa39ef
 801253c:	3fe62e42 	.word	0x3fe62e42
 8012540:	0ca86c39 	.word	0x0ca86c39
 8012544:	be205c61 	.word	0xbe205c61
 8012548:	72bea4d0 	.word	0x72bea4d0
 801254c:	3e663769 	.word	0x3e663769
 8012550:	c5d26bf1 	.word	0xc5d26bf1
 8012554:	3ebbbd41 	.word	0x3ebbbd41
 8012558:	af25de2c 	.word	0xaf25de2c
 801255c:	3f11566a 	.word	0x3f11566a
 8012560:	16bebd93 	.word	0x16bebd93
 8012564:	3f66c16c 	.word	0x3f66c16c
 8012568:	5555553e 	.word	0x5555553e
 801256c:	3fc55555 	.word	0x3fc55555
 8012570:	fff00000 	.word	0xfff00000
 8012574:	3ff00000 	.word	0x3ff00000
 8012578:	4090cbff 	.word	0x4090cbff
 801257c:	3f6f3400 	.word	0x3f6f3400
 8012580:	3fe00000 	.word	0x3fe00000
 8012584:	652b82fe 	.word	0x652b82fe
 8012588:	3c971547 	.word	0x3c971547
 801258c:	4090cc00 	.word	0x4090cc00

08012590 <fabs>:
 8012590:	ec51 0b10 	vmov	r0, r1, d0
 8012594:	4602      	mov	r2, r0
 8012596:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801259a:	ec43 2b10 	vmov	d0, r2, r3
 801259e:	4770      	bx	lr

080125a0 <scalbn>:
 80125a0:	b570      	push	{r4, r5, r6, lr}
 80125a2:	ec55 4b10 	vmov	r4, r5, d0
 80125a6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80125aa:	4606      	mov	r6, r0
 80125ac:	462b      	mov	r3, r5
 80125ae:	b991      	cbnz	r1, 80125d6 <scalbn+0x36>
 80125b0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80125b4:	4323      	orrs	r3, r4
 80125b6:	d03d      	beq.n	8012634 <scalbn+0x94>
 80125b8:	4b35      	ldr	r3, [pc, #212]	@ (8012690 <scalbn+0xf0>)
 80125ba:	4620      	mov	r0, r4
 80125bc:	4629      	mov	r1, r5
 80125be:	2200      	movs	r2, #0
 80125c0:	f7ee f84a 	bl	8000658 <__aeabi_dmul>
 80125c4:	4b33      	ldr	r3, [pc, #204]	@ (8012694 <scalbn+0xf4>)
 80125c6:	429e      	cmp	r6, r3
 80125c8:	4604      	mov	r4, r0
 80125ca:	460d      	mov	r5, r1
 80125cc:	da0f      	bge.n	80125ee <scalbn+0x4e>
 80125ce:	a328      	add	r3, pc, #160	@ (adr r3, 8012670 <scalbn+0xd0>)
 80125d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125d4:	e01e      	b.n	8012614 <scalbn+0x74>
 80125d6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80125da:	4291      	cmp	r1, r2
 80125dc:	d10b      	bne.n	80125f6 <scalbn+0x56>
 80125de:	4622      	mov	r2, r4
 80125e0:	4620      	mov	r0, r4
 80125e2:	4629      	mov	r1, r5
 80125e4:	f7ed fe82 	bl	80002ec <__adddf3>
 80125e8:	4604      	mov	r4, r0
 80125ea:	460d      	mov	r5, r1
 80125ec:	e022      	b.n	8012634 <scalbn+0x94>
 80125ee:	460b      	mov	r3, r1
 80125f0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80125f4:	3936      	subs	r1, #54	@ 0x36
 80125f6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80125fa:	4296      	cmp	r6, r2
 80125fc:	dd0d      	ble.n	801261a <scalbn+0x7a>
 80125fe:	2d00      	cmp	r5, #0
 8012600:	a11d      	add	r1, pc, #116	@ (adr r1, 8012678 <scalbn+0xd8>)
 8012602:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012606:	da02      	bge.n	801260e <scalbn+0x6e>
 8012608:	a11d      	add	r1, pc, #116	@ (adr r1, 8012680 <scalbn+0xe0>)
 801260a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801260e:	a31a      	add	r3, pc, #104	@ (adr r3, 8012678 <scalbn+0xd8>)
 8012610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012614:	f7ee f820 	bl	8000658 <__aeabi_dmul>
 8012618:	e7e6      	b.n	80125e8 <scalbn+0x48>
 801261a:	1872      	adds	r2, r6, r1
 801261c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8012620:	428a      	cmp	r2, r1
 8012622:	dcec      	bgt.n	80125fe <scalbn+0x5e>
 8012624:	2a00      	cmp	r2, #0
 8012626:	dd08      	ble.n	801263a <scalbn+0x9a>
 8012628:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801262c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8012630:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012634:	ec45 4b10 	vmov	d0, r4, r5
 8012638:	bd70      	pop	{r4, r5, r6, pc}
 801263a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801263e:	da08      	bge.n	8012652 <scalbn+0xb2>
 8012640:	2d00      	cmp	r5, #0
 8012642:	a10b      	add	r1, pc, #44	@ (adr r1, 8012670 <scalbn+0xd0>)
 8012644:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012648:	dac1      	bge.n	80125ce <scalbn+0x2e>
 801264a:	a10f      	add	r1, pc, #60	@ (adr r1, 8012688 <scalbn+0xe8>)
 801264c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012650:	e7bd      	b.n	80125ce <scalbn+0x2e>
 8012652:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8012656:	3236      	adds	r2, #54	@ 0x36
 8012658:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801265c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012660:	4620      	mov	r0, r4
 8012662:	4b0d      	ldr	r3, [pc, #52]	@ (8012698 <scalbn+0xf8>)
 8012664:	4629      	mov	r1, r5
 8012666:	2200      	movs	r2, #0
 8012668:	e7d4      	b.n	8012614 <scalbn+0x74>
 801266a:	bf00      	nop
 801266c:	f3af 8000 	nop.w
 8012670:	c2f8f359 	.word	0xc2f8f359
 8012674:	01a56e1f 	.word	0x01a56e1f
 8012678:	8800759c 	.word	0x8800759c
 801267c:	7e37e43c 	.word	0x7e37e43c
 8012680:	8800759c 	.word	0x8800759c
 8012684:	fe37e43c 	.word	0xfe37e43c
 8012688:	c2f8f359 	.word	0xc2f8f359
 801268c:	81a56e1f 	.word	0x81a56e1f
 8012690:	43500000 	.word	0x43500000
 8012694:	ffff3cb0 	.word	0xffff3cb0
 8012698:	3c900000 	.word	0x3c900000

0801269c <with_errno>:
 801269c:	b510      	push	{r4, lr}
 801269e:	ed2d 8b02 	vpush	{d8}
 80126a2:	eeb0 8a40 	vmov.f32	s16, s0
 80126a6:	eef0 8a60 	vmov.f32	s17, s1
 80126aa:	4604      	mov	r4, r0
 80126ac:	f000 ffe6 	bl	801367c <__errno>
 80126b0:	eeb0 0a48 	vmov.f32	s0, s16
 80126b4:	eef0 0a68 	vmov.f32	s1, s17
 80126b8:	ecbd 8b02 	vpop	{d8}
 80126bc:	6004      	str	r4, [r0, #0]
 80126be:	bd10      	pop	{r4, pc}

080126c0 <xflow>:
 80126c0:	4603      	mov	r3, r0
 80126c2:	b507      	push	{r0, r1, r2, lr}
 80126c4:	ec51 0b10 	vmov	r0, r1, d0
 80126c8:	b183      	cbz	r3, 80126ec <xflow+0x2c>
 80126ca:	4602      	mov	r2, r0
 80126cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80126d0:	e9cd 2300 	strd	r2, r3, [sp]
 80126d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80126d8:	f7ed ffbe 	bl	8000658 <__aeabi_dmul>
 80126dc:	ec41 0b10 	vmov	d0, r0, r1
 80126e0:	2022      	movs	r0, #34	@ 0x22
 80126e2:	b003      	add	sp, #12
 80126e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80126e8:	f7ff bfd8 	b.w	801269c <with_errno>
 80126ec:	4602      	mov	r2, r0
 80126ee:	460b      	mov	r3, r1
 80126f0:	e7ee      	b.n	80126d0 <xflow+0x10>
 80126f2:	0000      	movs	r0, r0
 80126f4:	0000      	movs	r0, r0
	...

080126f8 <__math_uflow>:
 80126f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012700 <__math_uflow+0x8>
 80126fc:	f7ff bfe0 	b.w	80126c0 <xflow>
 8012700:	00000000 	.word	0x00000000
 8012704:	10000000 	.word	0x10000000

08012708 <__math_oflow>:
 8012708:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012710 <__math_oflow+0x8>
 801270c:	f7ff bfd8 	b.w	80126c0 <xflow>
 8012710:	00000000 	.word	0x00000000
 8012714:	70000000 	.word	0x70000000

08012718 <__ieee754_sqrt>:
 8012718:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801271c:	4a68      	ldr	r2, [pc, #416]	@ (80128c0 <__ieee754_sqrt+0x1a8>)
 801271e:	ec55 4b10 	vmov	r4, r5, d0
 8012722:	43aa      	bics	r2, r5
 8012724:	462b      	mov	r3, r5
 8012726:	4621      	mov	r1, r4
 8012728:	d110      	bne.n	801274c <__ieee754_sqrt+0x34>
 801272a:	4622      	mov	r2, r4
 801272c:	4620      	mov	r0, r4
 801272e:	4629      	mov	r1, r5
 8012730:	f7ed ff92 	bl	8000658 <__aeabi_dmul>
 8012734:	4602      	mov	r2, r0
 8012736:	460b      	mov	r3, r1
 8012738:	4620      	mov	r0, r4
 801273a:	4629      	mov	r1, r5
 801273c:	f7ed fdd6 	bl	80002ec <__adddf3>
 8012740:	4604      	mov	r4, r0
 8012742:	460d      	mov	r5, r1
 8012744:	ec45 4b10 	vmov	d0, r4, r5
 8012748:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801274c:	2d00      	cmp	r5, #0
 801274e:	dc0e      	bgt.n	801276e <__ieee754_sqrt+0x56>
 8012750:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8012754:	4322      	orrs	r2, r4
 8012756:	d0f5      	beq.n	8012744 <__ieee754_sqrt+0x2c>
 8012758:	b19d      	cbz	r5, 8012782 <__ieee754_sqrt+0x6a>
 801275a:	4622      	mov	r2, r4
 801275c:	4620      	mov	r0, r4
 801275e:	4629      	mov	r1, r5
 8012760:	f7ed fdc2 	bl	80002e8 <__aeabi_dsub>
 8012764:	4602      	mov	r2, r0
 8012766:	460b      	mov	r3, r1
 8012768:	f7ee f8a0 	bl	80008ac <__aeabi_ddiv>
 801276c:	e7e8      	b.n	8012740 <__ieee754_sqrt+0x28>
 801276e:	152a      	asrs	r2, r5, #20
 8012770:	d115      	bne.n	801279e <__ieee754_sqrt+0x86>
 8012772:	2000      	movs	r0, #0
 8012774:	e009      	b.n	801278a <__ieee754_sqrt+0x72>
 8012776:	0acb      	lsrs	r3, r1, #11
 8012778:	3a15      	subs	r2, #21
 801277a:	0549      	lsls	r1, r1, #21
 801277c:	2b00      	cmp	r3, #0
 801277e:	d0fa      	beq.n	8012776 <__ieee754_sqrt+0x5e>
 8012780:	e7f7      	b.n	8012772 <__ieee754_sqrt+0x5a>
 8012782:	462a      	mov	r2, r5
 8012784:	e7fa      	b.n	801277c <__ieee754_sqrt+0x64>
 8012786:	005b      	lsls	r3, r3, #1
 8012788:	3001      	adds	r0, #1
 801278a:	02dc      	lsls	r4, r3, #11
 801278c:	d5fb      	bpl.n	8012786 <__ieee754_sqrt+0x6e>
 801278e:	1e44      	subs	r4, r0, #1
 8012790:	1b12      	subs	r2, r2, r4
 8012792:	f1c0 0420 	rsb	r4, r0, #32
 8012796:	fa21 f404 	lsr.w	r4, r1, r4
 801279a:	4323      	orrs	r3, r4
 801279c:	4081      	lsls	r1, r0
 801279e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80127a2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80127a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80127aa:	07d2      	lsls	r2, r2, #31
 80127ac:	bf5c      	itt	pl
 80127ae:	005b      	lslpl	r3, r3, #1
 80127b0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80127b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80127b8:	bf58      	it	pl
 80127ba:	0049      	lslpl	r1, r1, #1
 80127bc:	2600      	movs	r6, #0
 80127be:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80127c2:	106d      	asrs	r5, r5, #1
 80127c4:	0049      	lsls	r1, r1, #1
 80127c6:	2016      	movs	r0, #22
 80127c8:	4632      	mov	r2, r6
 80127ca:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80127ce:	1917      	adds	r7, r2, r4
 80127d0:	429f      	cmp	r7, r3
 80127d2:	bfde      	ittt	le
 80127d4:	193a      	addle	r2, r7, r4
 80127d6:	1bdb      	suble	r3, r3, r7
 80127d8:	1936      	addle	r6, r6, r4
 80127da:	0fcf      	lsrs	r7, r1, #31
 80127dc:	3801      	subs	r0, #1
 80127de:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80127e2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80127e6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80127ea:	d1f0      	bne.n	80127ce <__ieee754_sqrt+0xb6>
 80127ec:	4604      	mov	r4, r0
 80127ee:	2720      	movs	r7, #32
 80127f0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80127f4:	429a      	cmp	r2, r3
 80127f6:	eb00 0e0c 	add.w	lr, r0, ip
 80127fa:	db02      	blt.n	8012802 <__ieee754_sqrt+0xea>
 80127fc:	d113      	bne.n	8012826 <__ieee754_sqrt+0x10e>
 80127fe:	458e      	cmp	lr, r1
 8012800:	d811      	bhi.n	8012826 <__ieee754_sqrt+0x10e>
 8012802:	f1be 0f00 	cmp.w	lr, #0
 8012806:	eb0e 000c 	add.w	r0, lr, ip
 801280a:	da42      	bge.n	8012892 <__ieee754_sqrt+0x17a>
 801280c:	2800      	cmp	r0, #0
 801280e:	db40      	blt.n	8012892 <__ieee754_sqrt+0x17a>
 8012810:	f102 0801 	add.w	r8, r2, #1
 8012814:	1a9b      	subs	r3, r3, r2
 8012816:	458e      	cmp	lr, r1
 8012818:	bf88      	it	hi
 801281a:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 801281e:	eba1 010e 	sub.w	r1, r1, lr
 8012822:	4464      	add	r4, ip
 8012824:	4642      	mov	r2, r8
 8012826:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801282a:	3f01      	subs	r7, #1
 801282c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8012830:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012834:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8012838:	d1dc      	bne.n	80127f4 <__ieee754_sqrt+0xdc>
 801283a:	4319      	orrs	r1, r3
 801283c:	d01b      	beq.n	8012876 <__ieee754_sqrt+0x15e>
 801283e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80128c4 <__ieee754_sqrt+0x1ac>
 8012842:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80128c8 <__ieee754_sqrt+0x1b0>
 8012846:	e9da 0100 	ldrd	r0, r1, [sl]
 801284a:	e9db 2300 	ldrd	r2, r3, [fp]
 801284e:	f7ed fd4b 	bl	80002e8 <__aeabi_dsub>
 8012852:	e9da 8900 	ldrd	r8, r9, [sl]
 8012856:	4602      	mov	r2, r0
 8012858:	460b      	mov	r3, r1
 801285a:	4640      	mov	r0, r8
 801285c:	4649      	mov	r1, r9
 801285e:	f7ee f977 	bl	8000b50 <__aeabi_dcmple>
 8012862:	b140      	cbz	r0, 8012876 <__ieee754_sqrt+0x15e>
 8012864:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8012868:	e9da 0100 	ldrd	r0, r1, [sl]
 801286c:	e9db 2300 	ldrd	r2, r3, [fp]
 8012870:	d111      	bne.n	8012896 <__ieee754_sqrt+0x17e>
 8012872:	3601      	adds	r6, #1
 8012874:	463c      	mov	r4, r7
 8012876:	1072      	asrs	r2, r6, #1
 8012878:	0863      	lsrs	r3, r4, #1
 801287a:	07f1      	lsls	r1, r6, #31
 801287c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8012880:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8012884:	bf48      	it	mi
 8012886:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801288a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801288e:	4618      	mov	r0, r3
 8012890:	e756      	b.n	8012740 <__ieee754_sqrt+0x28>
 8012892:	4690      	mov	r8, r2
 8012894:	e7be      	b.n	8012814 <__ieee754_sqrt+0xfc>
 8012896:	f7ed fd29 	bl	80002ec <__adddf3>
 801289a:	e9da 8900 	ldrd	r8, r9, [sl]
 801289e:	4602      	mov	r2, r0
 80128a0:	460b      	mov	r3, r1
 80128a2:	4640      	mov	r0, r8
 80128a4:	4649      	mov	r1, r9
 80128a6:	f7ee f949 	bl	8000b3c <__aeabi_dcmplt>
 80128aa:	b120      	cbz	r0, 80128b6 <__ieee754_sqrt+0x19e>
 80128ac:	1ca0      	adds	r0, r4, #2
 80128ae:	bf08      	it	eq
 80128b0:	3601      	addeq	r6, #1
 80128b2:	3402      	adds	r4, #2
 80128b4:	e7df      	b.n	8012876 <__ieee754_sqrt+0x15e>
 80128b6:	1c63      	adds	r3, r4, #1
 80128b8:	f023 0401 	bic.w	r4, r3, #1
 80128bc:	e7db      	b.n	8012876 <__ieee754_sqrt+0x15e>
 80128be:	bf00      	nop
 80128c0:	7ff00000 	.word	0x7ff00000
 80128c4:	20000020 	.word	0x20000020
 80128c8:	20000018 	.word	0x20000018

080128cc <abort>:
 80128cc:	b508      	push	{r3, lr}
 80128ce:	2006      	movs	r0, #6
 80128d0:	f000 fe5e 	bl	8013590 <raise>
 80128d4:	2001      	movs	r0, #1
 80128d6:	f7fa fdfb 	bl	800d4d0 <_exit>
	...

080128dc <malloc>:
 80128dc:	4b02      	ldr	r3, [pc, #8]	@ (80128e8 <malloc+0xc>)
 80128de:	4601      	mov	r1, r0
 80128e0:	6818      	ldr	r0, [r3, #0]
 80128e2:	f000 b82d 	b.w	8012940 <_malloc_r>
 80128e6:	bf00      	nop
 80128e8:	20000034 	.word	0x20000034

080128ec <free>:
 80128ec:	4b02      	ldr	r3, [pc, #8]	@ (80128f8 <free+0xc>)
 80128ee:	4601      	mov	r1, r0
 80128f0:	6818      	ldr	r0, [r3, #0]
 80128f2:	f001 bd4d 	b.w	8014390 <_free_r>
 80128f6:	bf00      	nop
 80128f8:	20000034 	.word	0x20000034

080128fc <sbrk_aligned>:
 80128fc:	b570      	push	{r4, r5, r6, lr}
 80128fe:	4e0f      	ldr	r6, [pc, #60]	@ (801293c <sbrk_aligned+0x40>)
 8012900:	460c      	mov	r4, r1
 8012902:	6831      	ldr	r1, [r6, #0]
 8012904:	4605      	mov	r5, r0
 8012906:	b911      	cbnz	r1, 801290e <sbrk_aligned+0x12>
 8012908:	f000 fe96 	bl	8013638 <_sbrk_r>
 801290c:	6030      	str	r0, [r6, #0]
 801290e:	4621      	mov	r1, r4
 8012910:	4628      	mov	r0, r5
 8012912:	f000 fe91 	bl	8013638 <_sbrk_r>
 8012916:	1c43      	adds	r3, r0, #1
 8012918:	d103      	bne.n	8012922 <sbrk_aligned+0x26>
 801291a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801291e:	4620      	mov	r0, r4
 8012920:	bd70      	pop	{r4, r5, r6, pc}
 8012922:	1cc4      	adds	r4, r0, #3
 8012924:	f024 0403 	bic.w	r4, r4, #3
 8012928:	42a0      	cmp	r0, r4
 801292a:	d0f8      	beq.n	801291e <sbrk_aligned+0x22>
 801292c:	1a21      	subs	r1, r4, r0
 801292e:	4628      	mov	r0, r5
 8012930:	f000 fe82 	bl	8013638 <_sbrk_r>
 8012934:	3001      	adds	r0, #1
 8012936:	d1f2      	bne.n	801291e <sbrk_aligned+0x22>
 8012938:	e7ef      	b.n	801291a <sbrk_aligned+0x1e>
 801293a:	bf00      	nop
 801293c:	20000440 	.word	0x20000440

08012940 <_malloc_r>:
 8012940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012944:	1ccd      	adds	r5, r1, #3
 8012946:	f025 0503 	bic.w	r5, r5, #3
 801294a:	3508      	adds	r5, #8
 801294c:	2d0c      	cmp	r5, #12
 801294e:	bf38      	it	cc
 8012950:	250c      	movcc	r5, #12
 8012952:	2d00      	cmp	r5, #0
 8012954:	4606      	mov	r6, r0
 8012956:	db01      	blt.n	801295c <_malloc_r+0x1c>
 8012958:	42a9      	cmp	r1, r5
 801295a:	d904      	bls.n	8012966 <_malloc_r+0x26>
 801295c:	230c      	movs	r3, #12
 801295e:	6033      	str	r3, [r6, #0]
 8012960:	2000      	movs	r0, #0
 8012962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012966:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012a3c <_malloc_r+0xfc>
 801296a:	f000 f869 	bl	8012a40 <__malloc_lock>
 801296e:	f8d8 3000 	ldr.w	r3, [r8]
 8012972:	461c      	mov	r4, r3
 8012974:	bb44      	cbnz	r4, 80129c8 <_malloc_r+0x88>
 8012976:	4629      	mov	r1, r5
 8012978:	4630      	mov	r0, r6
 801297a:	f7ff ffbf 	bl	80128fc <sbrk_aligned>
 801297e:	1c43      	adds	r3, r0, #1
 8012980:	4604      	mov	r4, r0
 8012982:	d158      	bne.n	8012a36 <_malloc_r+0xf6>
 8012984:	f8d8 4000 	ldr.w	r4, [r8]
 8012988:	4627      	mov	r7, r4
 801298a:	2f00      	cmp	r7, #0
 801298c:	d143      	bne.n	8012a16 <_malloc_r+0xd6>
 801298e:	2c00      	cmp	r4, #0
 8012990:	d04b      	beq.n	8012a2a <_malloc_r+0xea>
 8012992:	6823      	ldr	r3, [r4, #0]
 8012994:	4639      	mov	r1, r7
 8012996:	4630      	mov	r0, r6
 8012998:	eb04 0903 	add.w	r9, r4, r3
 801299c:	f000 fe4c 	bl	8013638 <_sbrk_r>
 80129a0:	4581      	cmp	r9, r0
 80129a2:	d142      	bne.n	8012a2a <_malloc_r+0xea>
 80129a4:	6821      	ldr	r1, [r4, #0]
 80129a6:	1a6d      	subs	r5, r5, r1
 80129a8:	4629      	mov	r1, r5
 80129aa:	4630      	mov	r0, r6
 80129ac:	f7ff ffa6 	bl	80128fc <sbrk_aligned>
 80129b0:	3001      	adds	r0, #1
 80129b2:	d03a      	beq.n	8012a2a <_malloc_r+0xea>
 80129b4:	6823      	ldr	r3, [r4, #0]
 80129b6:	442b      	add	r3, r5
 80129b8:	6023      	str	r3, [r4, #0]
 80129ba:	f8d8 3000 	ldr.w	r3, [r8]
 80129be:	685a      	ldr	r2, [r3, #4]
 80129c0:	bb62      	cbnz	r2, 8012a1c <_malloc_r+0xdc>
 80129c2:	f8c8 7000 	str.w	r7, [r8]
 80129c6:	e00f      	b.n	80129e8 <_malloc_r+0xa8>
 80129c8:	6822      	ldr	r2, [r4, #0]
 80129ca:	1b52      	subs	r2, r2, r5
 80129cc:	d420      	bmi.n	8012a10 <_malloc_r+0xd0>
 80129ce:	2a0b      	cmp	r2, #11
 80129d0:	d917      	bls.n	8012a02 <_malloc_r+0xc2>
 80129d2:	1961      	adds	r1, r4, r5
 80129d4:	42a3      	cmp	r3, r4
 80129d6:	6025      	str	r5, [r4, #0]
 80129d8:	bf18      	it	ne
 80129da:	6059      	strne	r1, [r3, #4]
 80129dc:	6863      	ldr	r3, [r4, #4]
 80129de:	bf08      	it	eq
 80129e0:	f8c8 1000 	streq.w	r1, [r8]
 80129e4:	5162      	str	r2, [r4, r5]
 80129e6:	604b      	str	r3, [r1, #4]
 80129e8:	4630      	mov	r0, r6
 80129ea:	f000 f82f 	bl	8012a4c <__malloc_unlock>
 80129ee:	f104 000b 	add.w	r0, r4, #11
 80129f2:	1d23      	adds	r3, r4, #4
 80129f4:	f020 0007 	bic.w	r0, r0, #7
 80129f8:	1ac2      	subs	r2, r0, r3
 80129fa:	bf1c      	itt	ne
 80129fc:	1a1b      	subne	r3, r3, r0
 80129fe:	50a3      	strne	r3, [r4, r2]
 8012a00:	e7af      	b.n	8012962 <_malloc_r+0x22>
 8012a02:	6862      	ldr	r2, [r4, #4]
 8012a04:	42a3      	cmp	r3, r4
 8012a06:	bf0c      	ite	eq
 8012a08:	f8c8 2000 	streq.w	r2, [r8]
 8012a0c:	605a      	strne	r2, [r3, #4]
 8012a0e:	e7eb      	b.n	80129e8 <_malloc_r+0xa8>
 8012a10:	4623      	mov	r3, r4
 8012a12:	6864      	ldr	r4, [r4, #4]
 8012a14:	e7ae      	b.n	8012974 <_malloc_r+0x34>
 8012a16:	463c      	mov	r4, r7
 8012a18:	687f      	ldr	r7, [r7, #4]
 8012a1a:	e7b6      	b.n	801298a <_malloc_r+0x4a>
 8012a1c:	461a      	mov	r2, r3
 8012a1e:	685b      	ldr	r3, [r3, #4]
 8012a20:	42a3      	cmp	r3, r4
 8012a22:	d1fb      	bne.n	8012a1c <_malloc_r+0xdc>
 8012a24:	2300      	movs	r3, #0
 8012a26:	6053      	str	r3, [r2, #4]
 8012a28:	e7de      	b.n	80129e8 <_malloc_r+0xa8>
 8012a2a:	230c      	movs	r3, #12
 8012a2c:	6033      	str	r3, [r6, #0]
 8012a2e:	4630      	mov	r0, r6
 8012a30:	f000 f80c 	bl	8012a4c <__malloc_unlock>
 8012a34:	e794      	b.n	8012960 <_malloc_r+0x20>
 8012a36:	6005      	str	r5, [r0, #0]
 8012a38:	e7d6      	b.n	80129e8 <_malloc_r+0xa8>
 8012a3a:	bf00      	nop
 8012a3c:	20000444 	.word	0x20000444

08012a40 <__malloc_lock>:
 8012a40:	4801      	ldr	r0, [pc, #4]	@ (8012a48 <__malloc_lock+0x8>)
 8012a42:	f000 be46 	b.w	80136d2 <__retarget_lock_acquire_recursive>
 8012a46:	bf00      	nop
 8012a48:	20000588 	.word	0x20000588

08012a4c <__malloc_unlock>:
 8012a4c:	4801      	ldr	r0, [pc, #4]	@ (8012a54 <__malloc_unlock+0x8>)
 8012a4e:	f000 be41 	b.w	80136d4 <__retarget_lock_release_recursive>
 8012a52:	bf00      	nop
 8012a54:	20000588 	.word	0x20000588

08012a58 <__cxa_atexit>:
 8012a58:	b510      	push	{r4, lr}
 8012a5a:	4604      	mov	r4, r0
 8012a5c:	4804      	ldr	r0, [pc, #16]	@ (8012a70 <__cxa_atexit+0x18>)
 8012a5e:	4613      	mov	r3, r2
 8012a60:	b120      	cbz	r0, 8012a6c <__cxa_atexit+0x14>
 8012a62:	460a      	mov	r2, r1
 8012a64:	2002      	movs	r0, #2
 8012a66:	4621      	mov	r1, r4
 8012a68:	f3af 8000 	nop.w
 8012a6c:	bd10      	pop	{r4, pc}
 8012a6e:	bf00      	nop
 8012a70:	00000000 	.word	0x00000000

08012a74 <__cvt>:
 8012a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012a78:	ec57 6b10 	vmov	r6, r7, d0
 8012a7c:	2f00      	cmp	r7, #0
 8012a7e:	460c      	mov	r4, r1
 8012a80:	4619      	mov	r1, r3
 8012a82:	463b      	mov	r3, r7
 8012a84:	bfbb      	ittet	lt
 8012a86:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8012a8a:	461f      	movlt	r7, r3
 8012a8c:	2300      	movge	r3, #0
 8012a8e:	232d      	movlt	r3, #45	@ 0x2d
 8012a90:	700b      	strb	r3, [r1, #0]
 8012a92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012a94:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8012a98:	4691      	mov	r9, r2
 8012a9a:	f023 0820 	bic.w	r8, r3, #32
 8012a9e:	bfbc      	itt	lt
 8012aa0:	4632      	movlt	r2, r6
 8012aa2:	4616      	movlt	r6, r2
 8012aa4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012aa8:	d005      	beq.n	8012ab6 <__cvt+0x42>
 8012aaa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8012aae:	d100      	bne.n	8012ab2 <__cvt+0x3e>
 8012ab0:	3401      	adds	r4, #1
 8012ab2:	2102      	movs	r1, #2
 8012ab4:	e000      	b.n	8012ab8 <__cvt+0x44>
 8012ab6:	2103      	movs	r1, #3
 8012ab8:	ab03      	add	r3, sp, #12
 8012aba:	9301      	str	r3, [sp, #4]
 8012abc:	ab02      	add	r3, sp, #8
 8012abe:	9300      	str	r3, [sp, #0]
 8012ac0:	ec47 6b10 	vmov	d0, r6, r7
 8012ac4:	4653      	mov	r3, sl
 8012ac6:	4622      	mov	r2, r4
 8012ac8:	f000 fe9e 	bl	8013808 <_dtoa_r>
 8012acc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8012ad0:	4605      	mov	r5, r0
 8012ad2:	d119      	bne.n	8012b08 <__cvt+0x94>
 8012ad4:	f019 0f01 	tst.w	r9, #1
 8012ad8:	d00e      	beq.n	8012af8 <__cvt+0x84>
 8012ada:	eb00 0904 	add.w	r9, r0, r4
 8012ade:	2200      	movs	r2, #0
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	4630      	mov	r0, r6
 8012ae4:	4639      	mov	r1, r7
 8012ae6:	f7ee f81f 	bl	8000b28 <__aeabi_dcmpeq>
 8012aea:	b108      	cbz	r0, 8012af0 <__cvt+0x7c>
 8012aec:	f8cd 900c 	str.w	r9, [sp, #12]
 8012af0:	2230      	movs	r2, #48	@ 0x30
 8012af2:	9b03      	ldr	r3, [sp, #12]
 8012af4:	454b      	cmp	r3, r9
 8012af6:	d31e      	bcc.n	8012b36 <__cvt+0xc2>
 8012af8:	9b03      	ldr	r3, [sp, #12]
 8012afa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012afc:	1b5b      	subs	r3, r3, r5
 8012afe:	4628      	mov	r0, r5
 8012b00:	6013      	str	r3, [r2, #0]
 8012b02:	b004      	add	sp, #16
 8012b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012b0c:	eb00 0904 	add.w	r9, r0, r4
 8012b10:	d1e5      	bne.n	8012ade <__cvt+0x6a>
 8012b12:	7803      	ldrb	r3, [r0, #0]
 8012b14:	2b30      	cmp	r3, #48	@ 0x30
 8012b16:	d10a      	bne.n	8012b2e <__cvt+0xba>
 8012b18:	2200      	movs	r2, #0
 8012b1a:	2300      	movs	r3, #0
 8012b1c:	4630      	mov	r0, r6
 8012b1e:	4639      	mov	r1, r7
 8012b20:	f7ee f802 	bl	8000b28 <__aeabi_dcmpeq>
 8012b24:	b918      	cbnz	r0, 8012b2e <__cvt+0xba>
 8012b26:	f1c4 0401 	rsb	r4, r4, #1
 8012b2a:	f8ca 4000 	str.w	r4, [sl]
 8012b2e:	f8da 3000 	ldr.w	r3, [sl]
 8012b32:	4499      	add	r9, r3
 8012b34:	e7d3      	b.n	8012ade <__cvt+0x6a>
 8012b36:	1c59      	adds	r1, r3, #1
 8012b38:	9103      	str	r1, [sp, #12]
 8012b3a:	701a      	strb	r2, [r3, #0]
 8012b3c:	e7d9      	b.n	8012af2 <__cvt+0x7e>

08012b3e <__exponent>:
 8012b3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012b40:	2900      	cmp	r1, #0
 8012b42:	bfba      	itte	lt
 8012b44:	4249      	neglt	r1, r1
 8012b46:	232d      	movlt	r3, #45	@ 0x2d
 8012b48:	232b      	movge	r3, #43	@ 0x2b
 8012b4a:	2909      	cmp	r1, #9
 8012b4c:	7002      	strb	r2, [r0, #0]
 8012b4e:	7043      	strb	r3, [r0, #1]
 8012b50:	dd29      	ble.n	8012ba6 <__exponent+0x68>
 8012b52:	f10d 0307 	add.w	r3, sp, #7
 8012b56:	461d      	mov	r5, r3
 8012b58:	270a      	movs	r7, #10
 8012b5a:	461a      	mov	r2, r3
 8012b5c:	fbb1 f6f7 	udiv	r6, r1, r7
 8012b60:	fb07 1416 	mls	r4, r7, r6, r1
 8012b64:	3430      	adds	r4, #48	@ 0x30
 8012b66:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012b6a:	460c      	mov	r4, r1
 8012b6c:	2c63      	cmp	r4, #99	@ 0x63
 8012b6e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8012b72:	4631      	mov	r1, r6
 8012b74:	dcf1      	bgt.n	8012b5a <__exponent+0x1c>
 8012b76:	3130      	adds	r1, #48	@ 0x30
 8012b78:	1e94      	subs	r4, r2, #2
 8012b7a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012b7e:	1c41      	adds	r1, r0, #1
 8012b80:	4623      	mov	r3, r4
 8012b82:	42ab      	cmp	r3, r5
 8012b84:	d30a      	bcc.n	8012b9c <__exponent+0x5e>
 8012b86:	f10d 0309 	add.w	r3, sp, #9
 8012b8a:	1a9b      	subs	r3, r3, r2
 8012b8c:	42ac      	cmp	r4, r5
 8012b8e:	bf88      	it	hi
 8012b90:	2300      	movhi	r3, #0
 8012b92:	3302      	adds	r3, #2
 8012b94:	4403      	add	r3, r0
 8012b96:	1a18      	subs	r0, r3, r0
 8012b98:	b003      	add	sp, #12
 8012b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b9c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012ba0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012ba4:	e7ed      	b.n	8012b82 <__exponent+0x44>
 8012ba6:	2330      	movs	r3, #48	@ 0x30
 8012ba8:	3130      	adds	r1, #48	@ 0x30
 8012baa:	7083      	strb	r3, [r0, #2]
 8012bac:	70c1      	strb	r1, [r0, #3]
 8012bae:	1d03      	adds	r3, r0, #4
 8012bb0:	e7f1      	b.n	8012b96 <__exponent+0x58>
	...

08012bb4 <_printf_float>:
 8012bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bb8:	b08d      	sub	sp, #52	@ 0x34
 8012bba:	460c      	mov	r4, r1
 8012bbc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8012bc0:	4616      	mov	r6, r2
 8012bc2:	461f      	mov	r7, r3
 8012bc4:	4605      	mov	r5, r0
 8012bc6:	f000 fceb 	bl	80135a0 <_localeconv_r>
 8012bca:	6803      	ldr	r3, [r0, #0]
 8012bcc:	9304      	str	r3, [sp, #16]
 8012bce:	4618      	mov	r0, r3
 8012bd0:	f7ed fb7e 	bl	80002d0 <strlen>
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8012bd8:	f8d8 3000 	ldr.w	r3, [r8]
 8012bdc:	9005      	str	r0, [sp, #20]
 8012bde:	3307      	adds	r3, #7
 8012be0:	f023 0307 	bic.w	r3, r3, #7
 8012be4:	f103 0208 	add.w	r2, r3, #8
 8012be8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012bec:	f8d4 b000 	ldr.w	fp, [r4]
 8012bf0:	f8c8 2000 	str.w	r2, [r8]
 8012bf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012bf8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8012bfc:	9307      	str	r3, [sp, #28]
 8012bfe:	f8cd 8018 	str.w	r8, [sp, #24]
 8012c02:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8012c06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012c0a:	4b9c      	ldr	r3, [pc, #624]	@ (8012e7c <_printf_float+0x2c8>)
 8012c0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012c10:	f7ed ffbc 	bl	8000b8c <__aeabi_dcmpun>
 8012c14:	bb70      	cbnz	r0, 8012c74 <_printf_float+0xc0>
 8012c16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012c1a:	4b98      	ldr	r3, [pc, #608]	@ (8012e7c <_printf_float+0x2c8>)
 8012c1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012c20:	f7ed ff96 	bl	8000b50 <__aeabi_dcmple>
 8012c24:	bb30      	cbnz	r0, 8012c74 <_printf_float+0xc0>
 8012c26:	2200      	movs	r2, #0
 8012c28:	2300      	movs	r3, #0
 8012c2a:	4640      	mov	r0, r8
 8012c2c:	4649      	mov	r1, r9
 8012c2e:	f7ed ff85 	bl	8000b3c <__aeabi_dcmplt>
 8012c32:	b110      	cbz	r0, 8012c3a <_printf_float+0x86>
 8012c34:	232d      	movs	r3, #45	@ 0x2d
 8012c36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012c3a:	4a91      	ldr	r2, [pc, #580]	@ (8012e80 <_printf_float+0x2cc>)
 8012c3c:	4b91      	ldr	r3, [pc, #580]	@ (8012e84 <_printf_float+0x2d0>)
 8012c3e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012c42:	bf94      	ite	ls
 8012c44:	4690      	movls	r8, r2
 8012c46:	4698      	movhi	r8, r3
 8012c48:	2303      	movs	r3, #3
 8012c4a:	6123      	str	r3, [r4, #16]
 8012c4c:	f02b 0304 	bic.w	r3, fp, #4
 8012c50:	6023      	str	r3, [r4, #0]
 8012c52:	f04f 0900 	mov.w	r9, #0
 8012c56:	9700      	str	r7, [sp, #0]
 8012c58:	4633      	mov	r3, r6
 8012c5a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012c5c:	4621      	mov	r1, r4
 8012c5e:	4628      	mov	r0, r5
 8012c60:	f000 f9d2 	bl	8013008 <_printf_common>
 8012c64:	3001      	adds	r0, #1
 8012c66:	f040 808d 	bne.w	8012d84 <_printf_float+0x1d0>
 8012c6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012c6e:	b00d      	add	sp, #52	@ 0x34
 8012c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c74:	4642      	mov	r2, r8
 8012c76:	464b      	mov	r3, r9
 8012c78:	4640      	mov	r0, r8
 8012c7a:	4649      	mov	r1, r9
 8012c7c:	f7ed ff86 	bl	8000b8c <__aeabi_dcmpun>
 8012c80:	b140      	cbz	r0, 8012c94 <_printf_float+0xe0>
 8012c82:	464b      	mov	r3, r9
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	bfbc      	itt	lt
 8012c88:	232d      	movlt	r3, #45	@ 0x2d
 8012c8a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012c8e:	4a7e      	ldr	r2, [pc, #504]	@ (8012e88 <_printf_float+0x2d4>)
 8012c90:	4b7e      	ldr	r3, [pc, #504]	@ (8012e8c <_printf_float+0x2d8>)
 8012c92:	e7d4      	b.n	8012c3e <_printf_float+0x8a>
 8012c94:	6863      	ldr	r3, [r4, #4]
 8012c96:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8012c9a:	9206      	str	r2, [sp, #24]
 8012c9c:	1c5a      	adds	r2, r3, #1
 8012c9e:	d13b      	bne.n	8012d18 <_printf_float+0x164>
 8012ca0:	2306      	movs	r3, #6
 8012ca2:	6063      	str	r3, [r4, #4]
 8012ca4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8012ca8:	2300      	movs	r3, #0
 8012caa:	6022      	str	r2, [r4, #0]
 8012cac:	9303      	str	r3, [sp, #12]
 8012cae:	ab0a      	add	r3, sp, #40	@ 0x28
 8012cb0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8012cb4:	ab09      	add	r3, sp, #36	@ 0x24
 8012cb6:	9300      	str	r3, [sp, #0]
 8012cb8:	6861      	ldr	r1, [r4, #4]
 8012cba:	ec49 8b10 	vmov	d0, r8, r9
 8012cbe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012cc2:	4628      	mov	r0, r5
 8012cc4:	f7ff fed6 	bl	8012a74 <__cvt>
 8012cc8:	9b06      	ldr	r3, [sp, #24]
 8012cca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012ccc:	2b47      	cmp	r3, #71	@ 0x47
 8012cce:	4680      	mov	r8, r0
 8012cd0:	d129      	bne.n	8012d26 <_printf_float+0x172>
 8012cd2:	1cc8      	adds	r0, r1, #3
 8012cd4:	db02      	blt.n	8012cdc <_printf_float+0x128>
 8012cd6:	6863      	ldr	r3, [r4, #4]
 8012cd8:	4299      	cmp	r1, r3
 8012cda:	dd41      	ble.n	8012d60 <_printf_float+0x1ac>
 8012cdc:	f1aa 0a02 	sub.w	sl, sl, #2
 8012ce0:	fa5f fa8a 	uxtb.w	sl, sl
 8012ce4:	3901      	subs	r1, #1
 8012ce6:	4652      	mov	r2, sl
 8012ce8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012cec:	9109      	str	r1, [sp, #36]	@ 0x24
 8012cee:	f7ff ff26 	bl	8012b3e <__exponent>
 8012cf2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012cf4:	1813      	adds	r3, r2, r0
 8012cf6:	2a01      	cmp	r2, #1
 8012cf8:	4681      	mov	r9, r0
 8012cfa:	6123      	str	r3, [r4, #16]
 8012cfc:	dc02      	bgt.n	8012d04 <_printf_float+0x150>
 8012cfe:	6822      	ldr	r2, [r4, #0]
 8012d00:	07d2      	lsls	r2, r2, #31
 8012d02:	d501      	bpl.n	8012d08 <_printf_float+0x154>
 8012d04:	3301      	adds	r3, #1
 8012d06:	6123      	str	r3, [r4, #16]
 8012d08:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d0a2      	beq.n	8012c56 <_printf_float+0xa2>
 8012d10:	232d      	movs	r3, #45	@ 0x2d
 8012d12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012d16:	e79e      	b.n	8012c56 <_printf_float+0xa2>
 8012d18:	9a06      	ldr	r2, [sp, #24]
 8012d1a:	2a47      	cmp	r2, #71	@ 0x47
 8012d1c:	d1c2      	bne.n	8012ca4 <_printf_float+0xf0>
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d1c0      	bne.n	8012ca4 <_printf_float+0xf0>
 8012d22:	2301      	movs	r3, #1
 8012d24:	e7bd      	b.n	8012ca2 <_printf_float+0xee>
 8012d26:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012d2a:	d9db      	bls.n	8012ce4 <_printf_float+0x130>
 8012d2c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8012d30:	d118      	bne.n	8012d64 <_printf_float+0x1b0>
 8012d32:	2900      	cmp	r1, #0
 8012d34:	6863      	ldr	r3, [r4, #4]
 8012d36:	dd0b      	ble.n	8012d50 <_printf_float+0x19c>
 8012d38:	6121      	str	r1, [r4, #16]
 8012d3a:	b913      	cbnz	r3, 8012d42 <_printf_float+0x18e>
 8012d3c:	6822      	ldr	r2, [r4, #0]
 8012d3e:	07d0      	lsls	r0, r2, #31
 8012d40:	d502      	bpl.n	8012d48 <_printf_float+0x194>
 8012d42:	3301      	adds	r3, #1
 8012d44:	440b      	add	r3, r1
 8012d46:	6123      	str	r3, [r4, #16]
 8012d48:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012d4a:	f04f 0900 	mov.w	r9, #0
 8012d4e:	e7db      	b.n	8012d08 <_printf_float+0x154>
 8012d50:	b913      	cbnz	r3, 8012d58 <_printf_float+0x1a4>
 8012d52:	6822      	ldr	r2, [r4, #0]
 8012d54:	07d2      	lsls	r2, r2, #31
 8012d56:	d501      	bpl.n	8012d5c <_printf_float+0x1a8>
 8012d58:	3302      	adds	r3, #2
 8012d5a:	e7f4      	b.n	8012d46 <_printf_float+0x192>
 8012d5c:	2301      	movs	r3, #1
 8012d5e:	e7f2      	b.n	8012d46 <_printf_float+0x192>
 8012d60:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8012d64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012d66:	4299      	cmp	r1, r3
 8012d68:	db05      	blt.n	8012d76 <_printf_float+0x1c2>
 8012d6a:	6823      	ldr	r3, [r4, #0]
 8012d6c:	6121      	str	r1, [r4, #16]
 8012d6e:	07d8      	lsls	r0, r3, #31
 8012d70:	d5ea      	bpl.n	8012d48 <_printf_float+0x194>
 8012d72:	1c4b      	adds	r3, r1, #1
 8012d74:	e7e7      	b.n	8012d46 <_printf_float+0x192>
 8012d76:	2900      	cmp	r1, #0
 8012d78:	bfd4      	ite	le
 8012d7a:	f1c1 0202 	rsble	r2, r1, #2
 8012d7e:	2201      	movgt	r2, #1
 8012d80:	4413      	add	r3, r2
 8012d82:	e7e0      	b.n	8012d46 <_printf_float+0x192>
 8012d84:	6823      	ldr	r3, [r4, #0]
 8012d86:	055a      	lsls	r2, r3, #21
 8012d88:	d407      	bmi.n	8012d9a <_printf_float+0x1e6>
 8012d8a:	6923      	ldr	r3, [r4, #16]
 8012d8c:	4642      	mov	r2, r8
 8012d8e:	4631      	mov	r1, r6
 8012d90:	4628      	mov	r0, r5
 8012d92:	47b8      	blx	r7
 8012d94:	3001      	adds	r0, #1
 8012d96:	d12b      	bne.n	8012df0 <_printf_float+0x23c>
 8012d98:	e767      	b.n	8012c6a <_printf_float+0xb6>
 8012d9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012d9e:	f240 80dd 	bls.w	8012f5c <_printf_float+0x3a8>
 8012da2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012da6:	2200      	movs	r2, #0
 8012da8:	2300      	movs	r3, #0
 8012daa:	f7ed febd 	bl	8000b28 <__aeabi_dcmpeq>
 8012dae:	2800      	cmp	r0, #0
 8012db0:	d033      	beq.n	8012e1a <_printf_float+0x266>
 8012db2:	4a37      	ldr	r2, [pc, #220]	@ (8012e90 <_printf_float+0x2dc>)
 8012db4:	2301      	movs	r3, #1
 8012db6:	4631      	mov	r1, r6
 8012db8:	4628      	mov	r0, r5
 8012dba:	47b8      	blx	r7
 8012dbc:	3001      	adds	r0, #1
 8012dbe:	f43f af54 	beq.w	8012c6a <_printf_float+0xb6>
 8012dc2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8012dc6:	4543      	cmp	r3, r8
 8012dc8:	db02      	blt.n	8012dd0 <_printf_float+0x21c>
 8012dca:	6823      	ldr	r3, [r4, #0]
 8012dcc:	07d8      	lsls	r0, r3, #31
 8012dce:	d50f      	bpl.n	8012df0 <_printf_float+0x23c>
 8012dd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012dd4:	4631      	mov	r1, r6
 8012dd6:	4628      	mov	r0, r5
 8012dd8:	47b8      	blx	r7
 8012dda:	3001      	adds	r0, #1
 8012ddc:	f43f af45 	beq.w	8012c6a <_printf_float+0xb6>
 8012de0:	f04f 0900 	mov.w	r9, #0
 8012de4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8012de8:	f104 0a1a 	add.w	sl, r4, #26
 8012dec:	45c8      	cmp	r8, r9
 8012dee:	dc09      	bgt.n	8012e04 <_printf_float+0x250>
 8012df0:	6823      	ldr	r3, [r4, #0]
 8012df2:	079b      	lsls	r3, r3, #30
 8012df4:	f100 8103 	bmi.w	8012ffe <_printf_float+0x44a>
 8012df8:	68e0      	ldr	r0, [r4, #12]
 8012dfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012dfc:	4298      	cmp	r0, r3
 8012dfe:	bfb8      	it	lt
 8012e00:	4618      	movlt	r0, r3
 8012e02:	e734      	b.n	8012c6e <_printf_float+0xba>
 8012e04:	2301      	movs	r3, #1
 8012e06:	4652      	mov	r2, sl
 8012e08:	4631      	mov	r1, r6
 8012e0a:	4628      	mov	r0, r5
 8012e0c:	47b8      	blx	r7
 8012e0e:	3001      	adds	r0, #1
 8012e10:	f43f af2b 	beq.w	8012c6a <_printf_float+0xb6>
 8012e14:	f109 0901 	add.w	r9, r9, #1
 8012e18:	e7e8      	b.n	8012dec <_printf_float+0x238>
 8012e1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	dc39      	bgt.n	8012e94 <_printf_float+0x2e0>
 8012e20:	4a1b      	ldr	r2, [pc, #108]	@ (8012e90 <_printf_float+0x2dc>)
 8012e22:	2301      	movs	r3, #1
 8012e24:	4631      	mov	r1, r6
 8012e26:	4628      	mov	r0, r5
 8012e28:	47b8      	blx	r7
 8012e2a:	3001      	adds	r0, #1
 8012e2c:	f43f af1d 	beq.w	8012c6a <_printf_float+0xb6>
 8012e30:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012e34:	ea59 0303 	orrs.w	r3, r9, r3
 8012e38:	d102      	bne.n	8012e40 <_printf_float+0x28c>
 8012e3a:	6823      	ldr	r3, [r4, #0]
 8012e3c:	07d9      	lsls	r1, r3, #31
 8012e3e:	d5d7      	bpl.n	8012df0 <_printf_float+0x23c>
 8012e40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012e44:	4631      	mov	r1, r6
 8012e46:	4628      	mov	r0, r5
 8012e48:	47b8      	blx	r7
 8012e4a:	3001      	adds	r0, #1
 8012e4c:	f43f af0d 	beq.w	8012c6a <_printf_float+0xb6>
 8012e50:	f04f 0a00 	mov.w	sl, #0
 8012e54:	f104 0b1a 	add.w	fp, r4, #26
 8012e58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e5a:	425b      	negs	r3, r3
 8012e5c:	4553      	cmp	r3, sl
 8012e5e:	dc01      	bgt.n	8012e64 <_printf_float+0x2b0>
 8012e60:	464b      	mov	r3, r9
 8012e62:	e793      	b.n	8012d8c <_printf_float+0x1d8>
 8012e64:	2301      	movs	r3, #1
 8012e66:	465a      	mov	r2, fp
 8012e68:	4631      	mov	r1, r6
 8012e6a:	4628      	mov	r0, r5
 8012e6c:	47b8      	blx	r7
 8012e6e:	3001      	adds	r0, #1
 8012e70:	f43f aefb 	beq.w	8012c6a <_printf_float+0xb6>
 8012e74:	f10a 0a01 	add.w	sl, sl, #1
 8012e78:	e7ee      	b.n	8012e58 <_printf_float+0x2a4>
 8012e7a:	bf00      	nop
 8012e7c:	7fefffff 	.word	0x7fefffff
 8012e80:	080168a0 	.word	0x080168a0
 8012e84:	080168a4 	.word	0x080168a4
 8012e88:	080168a8 	.word	0x080168a8
 8012e8c:	080168ac 	.word	0x080168ac
 8012e90:	080168b0 	.word	0x080168b0
 8012e94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012e96:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012e9a:	4553      	cmp	r3, sl
 8012e9c:	bfa8      	it	ge
 8012e9e:	4653      	movge	r3, sl
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	4699      	mov	r9, r3
 8012ea4:	dc36      	bgt.n	8012f14 <_printf_float+0x360>
 8012ea6:	f04f 0b00 	mov.w	fp, #0
 8012eaa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012eae:	f104 021a 	add.w	r2, r4, #26
 8012eb2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012eb4:	9306      	str	r3, [sp, #24]
 8012eb6:	eba3 0309 	sub.w	r3, r3, r9
 8012eba:	455b      	cmp	r3, fp
 8012ebc:	dc31      	bgt.n	8012f22 <_printf_float+0x36e>
 8012ebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ec0:	459a      	cmp	sl, r3
 8012ec2:	dc3a      	bgt.n	8012f3a <_printf_float+0x386>
 8012ec4:	6823      	ldr	r3, [r4, #0]
 8012ec6:	07da      	lsls	r2, r3, #31
 8012ec8:	d437      	bmi.n	8012f3a <_printf_float+0x386>
 8012eca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ecc:	ebaa 0903 	sub.w	r9, sl, r3
 8012ed0:	9b06      	ldr	r3, [sp, #24]
 8012ed2:	ebaa 0303 	sub.w	r3, sl, r3
 8012ed6:	4599      	cmp	r9, r3
 8012ed8:	bfa8      	it	ge
 8012eda:	4699      	movge	r9, r3
 8012edc:	f1b9 0f00 	cmp.w	r9, #0
 8012ee0:	dc33      	bgt.n	8012f4a <_printf_float+0x396>
 8012ee2:	f04f 0800 	mov.w	r8, #0
 8012ee6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012eea:	f104 0b1a 	add.w	fp, r4, #26
 8012eee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ef0:	ebaa 0303 	sub.w	r3, sl, r3
 8012ef4:	eba3 0309 	sub.w	r3, r3, r9
 8012ef8:	4543      	cmp	r3, r8
 8012efa:	f77f af79 	ble.w	8012df0 <_printf_float+0x23c>
 8012efe:	2301      	movs	r3, #1
 8012f00:	465a      	mov	r2, fp
 8012f02:	4631      	mov	r1, r6
 8012f04:	4628      	mov	r0, r5
 8012f06:	47b8      	blx	r7
 8012f08:	3001      	adds	r0, #1
 8012f0a:	f43f aeae 	beq.w	8012c6a <_printf_float+0xb6>
 8012f0e:	f108 0801 	add.w	r8, r8, #1
 8012f12:	e7ec      	b.n	8012eee <_printf_float+0x33a>
 8012f14:	4642      	mov	r2, r8
 8012f16:	4631      	mov	r1, r6
 8012f18:	4628      	mov	r0, r5
 8012f1a:	47b8      	blx	r7
 8012f1c:	3001      	adds	r0, #1
 8012f1e:	d1c2      	bne.n	8012ea6 <_printf_float+0x2f2>
 8012f20:	e6a3      	b.n	8012c6a <_printf_float+0xb6>
 8012f22:	2301      	movs	r3, #1
 8012f24:	4631      	mov	r1, r6
 8012f26:	4628      	mov	r0, r5
 8012f28:	9206      	str	r2, [sp, #24]
 8012f2a:	47b8      	blx	r7
 8012f2c:	3001      	adds	r0, #1
 8012f2e:	f43f ae9c 	beq.w	8012c6a <_printf_float+0xb6>
 8012f32:	9a06      	ldr	r2, [sp, #24]
 8012f34:	f10b 0b01 	add.w	fp, fp, #1
 8012f38:	e7bb      	b.n	8012eb2 <_printf_float+0x2fe>
 8012f3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012f3e:	4631      	mov	r1, r6
 8012f40:	4628      	mov	r0, r5
 8012f42:	47b8      	blx	r7
 8012f44:	3001      	adds	r0, #1
 8012f46:	d1c0      	bne.n	8012eca <_printf_float+0x316>
 8012f48:	e68f      	b.n	8012c6a <_printf_float+0xb6>
 8012f4a:	9a06      	ldr	r2, [sp, #24]
 8012f4c:	464b      	mov	r3, r9
 8012f4e:	4442      	add	r2, r8
 8012f50:	4631      	mov	r1, r6
 8012f52:	4628      	mov	r0, r5
 8012f54:	47b8      	blx	r7
 8012f56:	3001      	adds	r0, #1
 8012f58:	d1c3      	bne.n	8012ee2 <_printf_float+0x32e>
 8012f5a:	e686      	b.n	8012c6a <_printf_float+0xb6>
 8012f5c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012f60:	f1ba 0f01 	cmp.w	sl, #1
 8012f64:	dc01      	bgt.n	8012f6a <_printf_float+0x3b6>
 8012f66:	07db      	lsls	r3, r3, #31
 8012f68:	d536      	bpl.n	8012fd8 <_printf_float+0x424>
 8012f6a:	2301      	movs	r3, #1
 8012f6c:	4642      	mov	r2, r8
 8012f6e:	4631      	mov	r1, r6
 8012f70:	4628      	mov	r0, r5
 8012f72:	47b8      	blx	r7
 8012f74:	3001      	adds	r0, #1
 8012f76:	f43f ae78 	beq.w	8012c6a <_printf_float+0xb6>
 8012f7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012f7e:	4631      	mov	r1, r6
 8012f80:	4628      	mov	r0, r5
 8012f82:	47b8      	blx	r7
 8012f84:	3001      	adds	r0, #1
 8012f86:	f43f ae70 	beq.w	8012c6a <_printf_float+0xb6>
 8012f8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012f8e:	2200      	movs	r2, #0
 8012f90:	2300      	movs	r3, #0
 8012f92:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8012f96:	f7ed fdc7 	bl	8000b28 <__aeabi_dcmpeq>
 8012f9a:	b9c0      	cbnz	r0, 8012fce <_printf_float+0x41a>
 8012f9c:	4653      	mov	r3, sl
 8012f9e:	f108 0201 	add.w	r2, r8, #1
 8012fa2:	4631      	mov	r1, r6
 8012fa4:	4628      	mov	r0, r5
 8012fa6:	47b8      	blx	r7
 8012fa8:	3001      	adds	r0, #1
 8012faa:	d10c      	bne.n	8012fc6 <_printf_float+0x412>
 8012fac:	e65d      	b.n	8012c6a <_printf_float+0xb6>
 8012fae:	2301      	movs	r3, #1
 8012fb0:	465a      	mov	r2, fp
 8012fb2:	4631      	mov	r1, r6
 8012fb4:	4628      	mov	r0, r5
 8012fb6:	47b8      	blx	r7
 8012fb8:	3001      	adds	r0, #1
 8012fba:	f43f ae56 	beq.w	8012c6a <_printf_float+0xb6>
 8012fbe:	f108 0801 	add.w	r8, r8, #1
 8012fc2:	45d0      	cmp	r8, sl
 8012fc4:	dbf3      	blt.n	8012fae <_printf_float+0x3fa>
 8012fc6:	464b      	mov	r3, r9
 8012fc8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012fcc:	e6df      	b.n	8012d8e <_printf_float+0x1da>
 8012fce:	f04f 0800 	mov.w	r8, #0
 8012fd2:	f104 0b1a 	add.w	fp, r4, #26
 8012fd6:	e7f4      	b.n	8012fc2 <_printf_float+0x40e>
 8012fd8:	2301      	movs	r3, #1
 8012fda:	4642      	mov	r2, r8
 8012fdc:	e7e1      	b.n	8012fa2 <_printf_float+0x3ee>
 8012fde:	2301      	movs	r3, #1
 8012fe0:	464a      	mov	r2, r9
 8012fe2:	4631      	mov	r1, r6
 8012fe4:	4628      	mov	r0, r5
 8012fe6:	47b8      	blx	r7
 8012fe8:	3001      	adds	r0, #1
 8012fea:	f43f ae3e 	beq.w	8012c6a <_printf_float+0xb6>
 8012fee:	f108 0801 	add.w	r8, r8, #1
 8012ff2:	68e3      	ldr	r3, [r4, #12]
 8012ff4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012ff6:	1a5b      	subs	r3, r3, r1
 8012ff8:	4543      	cmp	r3, r8
 8012ffa:	dcf0      	bgt.n	8012fde <_printf_float+0x42a>
 8012ffc:	e6fc      	b.n	8012df8 <_printf_float+0x244>
 8012ffe:	f04f 0800 	mov.w	r8, #0
 8013002:	f104 0919 	add.w	r9, r4, #25
 8013006:	e7f4      	b.n	8012ff2 <_printf_float+0x43e>

08013008 <_printf_common>:
 8013008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801300c:	4616      	mov	r6, r2
 801300e:	4698      	mov	r8, r3
 8013010:	688a      	ldr	r2, [r1, #8]
 8013012:	690b      	ldr	r3, [r1, #16]
 8013014:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013018:	4293      	cmp	r3, r2
 801301a:	bfb8      	it	lt
 801301c:	4613      	movlt	r3, r2
 801301e:	6033      	str	r3, [r6, #0]
 8013020:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013024:	4607      	mov	r7, r0
 8013026:	460c      	mov	r4, r1
 8013028:	b10a      	cbz	r2, 801302e <_printf_common+0x26>
 801302a:	3301      	adds	r3, #1
 801302c:	6033      	str	r3, [r6, #0]
 801302e:	6823      	ldr	r3, [r4, #0]
 8013030:	0699      	lsls	r1, r3, #26
 8013032:	bf42      	ittt	mi
 8013034:	6833      	ldrmi	r3, [r6, #0]
 8013036:	3302      	addmi	r3, #2
 8013038:	6033      	strmi	r3, [r6, #0]
 801303a:	6825      	ldr	r5, [r4, #0]
 801303c:	f015 0506 	ands.w	r5, r5, #6
 8013040:	d106      	bne.n	8013050 <_printf_common+0x48>
 8013042:	f104 0a19 	add.w	sl, r4, #25
 8013046:	68e3      	ldr	r3, [r4, #12]
 8013048:	6832      	ldr	r2, [r6, #0]
 801304a:	1a9b      	subs	r3, r3, r2
 801304c:	42ab      	cmp	r3, r5
 801304e:	dc26      	bgt.n	801309e <_printf_common+0x96>
 8013050:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013054:	6822      	ldr	r2, [r4, #0]
 8013056:	3b00      	subs	r3, #0
 8013058:	bf18      	it	ne
 801305a:	2301      	movne	r3, #1
 801305c:	0692      	lsls	r2, r2, #26
 801305e:	d42b      	bmi.n	80130b8 <_printf_common+0xb0>
 8013060:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013064:	4641      	mov	r1, r8
 8013066:	4638      	mov	r0, r7
 8013068:	47c8      	blx	r9
 801306a:	3001      	adds	r0, #1
 801306c:	d01e      	beq.n	80130ac <_printf_common+0xa4>
 801306e:	6823      	ldr	r3, [r4, #0]
 8013070:	6922      	ldr	r2, [r4, #16]
 8013072:	f003 0306 	and.w	r3, r3, #6
 8013076:	2b04      	cmp	r3, #4
 8013078:	bf02      	ittt	eq
 801307a:	68e5      	ldreq	r5, [r4, #12]
 801307c:	6833      	ldreq	r3, [r6, #0]
 801307e:	1aed      	subeq	r5, r5, r3
 8013080:	68a3      	ldr	r3, [r4, #8]
 8013082:	bf0c      	ite	eq
 8013084:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013088:	2500      	movne	r5, #0
 801308a:	4293      	cmp	r3, r2
 801308c:	bfc4      	itt	gt
 801308e:	1a9b      	subgt	r3, r3, r2
 8013090:	18ed      	addgt	r5, r5, r3
 8013092:	2600      	movs	r6, #0
 8013094:	341a      	adds	r4, #26
 8013096:	42b5      	cmp	r5, r6
 8013098:	d11a      	bne.n	80130d0 <_printf_common+0xc8>
 801309a:	2000      	movs	r0, #0
 801309c:	e008      	b.n	80130b0 <_printf_common+0xa8>
 801309e:	2301      	movs	r3, #1
 80130a0:	4652      	mov	r2, sl
 80130a2:	4641      	mov	r1, r8
 80130a4:	4638      	mov	r0, r7
 80130a6:	47c8      	blx	r9
 80130a8:	3001      	adds	r0, #1
 80130aa:	d103      	bne.n	80130b4 <_printf_common+0xac>
 80130ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80130b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130b4:	3501      	adds	r5, #1
 80130b6:	e7c6      	b.n	8013046 <_printf_common+0x3e>
 80130b8:	18e1      	adds	r1, r4, r3
 80130ba:	1c5a      	adds	r2, r3, #1
 80130bc:	2030      	movs	r0, #48	@ 0x30
 80130be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80130c2:	4422      	add	r2, r4
 80130c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80130c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80130cc:	3302      	adds	r3, #2
 80130ce:	e7c7      	b.n	8013060 <_printf_common+0x58>
 80130d0:	2301      	movs	r3, #1
 80130d2:	4622      	mov	r2, r4
 80130d4:	4641      	mov	r1, r8
 80130d6:	4638      	mov	r0, r7
 80130d8:	47c8      	blx	r9
 80130da:	3001      	adds	r0, #1
 80130dc:	d0e6      	beq.n	80130ac <_printf_common+0xa4>
 80130de:	3601      	adds	r6, #1
 80130e0:	e7d9      	b.n	8013096 <_printf_common+0x8e>
	...

080130e4 <_printf_i>:
 80130e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80130e8:	7e0f      	ldrb	r7, [r1, #24]
 80130ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80130ec:	2f78      	cmp	r7, #120	@ 0x78
 80130ee:	4691      	mov	r9, r2
 80130f0:	4680      	mov	r8, r0
 80130f2:	460c      	mov	r4, r1
 80130f4:	469a      	mov	sl, r3
 80130f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80130fa:	d807      	bhi.n	801310c <_printf_i+0x28>
 80130fc:	2f62      	cmp	r7, #98	@ 0x62
 80130fe:	d80a      	bhi.n	8013116 <_printf_i+0x32>
 8013100:	2f00      	cmp	r7, #0
 8013102:	f000 80d2 	beq.w	80132aa <_printf_i+0x1c6>
 8013106:	2f58      	cmp	r7, #88	@ 0x58
 8013108:	f000 80b9 	beq.w	801327e <_printf_i+0x19a>
 801310c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013110:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013114:	e03a      	b.n	801318c <_printf_i+0xa8>
 8013116:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801311a:	2b15      	cmp	r3, #21
 801311c:	d8f6      	bhi.n	801310c <_printf_i+0x28>
 801311e:	a101      	add	r1, pc, #4	@ (adr r1, 8013124 <_printf_i+0x40>)
 8013120:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013124:	0801317d 	.word	0x0801317d
 8013128:	08013191 	.word	0x08013191
 801312c:	0801310d 	.word	0x0801310d
 8013130:	0801310d 	.word	0x0801310d
 8013134:	0801310d 	.word	0x0801310d
 8013138:	0801310d 	.word	0x0801310d
 801313c:	08013191 	.word	0x08013191
 8013140:	0801310d 	.word	0x0801310d
 8013144:	0801310d 	.word	0x0801310d
 8013148:	0801310d 	.word	0x0801310d
 801314c:	0801310d 	.word	0x0801310d
 8013150:	08013291 	.word	0x08013291
 8013154:	080131bb 	.word	0x080131bb
 8013158:	0801324b 	.word	0x0801324b
 801315c:	0801310d 	.word	0x0801310d
 8013160:	0801310d 	.word	0x0801310d
 8013164:	080132b3 	.word	0x080132b3
 8013168:	0801310d 	.word	0x0801310d
 801316c:	080131bb 	.word	0x080131bb
 8013170:	0801310d 	.word	0x0801310d
 8013174:	0801310d 	.word	0x0801310d
 8013178:	08013253 	.word	0x08013253
 801317c:	6833      	ldr	r3, [r6, #0]
 801317e:	1d1a      	adds	r2, r3, #4
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	6032      	str	r2, [r6, #0]
 8013184:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013188:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801318c:	2301      	movs	r3, #1
 801318e:	e09d      	b.n	80132cc <_printf_i+0x1e8>
 8013190:	6833      	ldr	r3, [r6, #0]
 8013192:	6820      	ldr	r0, [r4, #0]
 8013194:	1d19      	adds	r1, r3, #4
 8013196:	6031      	str	r1, [r6, #0]
 8013198:	0606      	lsls	r6, r0, #24
 801319a:	d501      	bpl.n	80131a0 <_printf_i+0xbc>
 801319c:	681d      	ldr	r5, [r3, #0]
 801319e:	e003      	b.n	80131a8 <_printf_i+0xc4>
 80131a0:	0645      	lsls	r5, r0, #25
 80131a2:	d5fb      	bpl.n	801319c <_printf_i+0xb8>
 80131a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80131a8:	2d00      	cmp	r5, #0
 80131aa:	da03      	bge.n	80131b4 <_printf_i+0xd0>
 80131ac:	232d      	movs	r3, #45	@ 0x2d
 80131ae:	426d      	negs	r5, r5
 80131b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80131b4:	4859      	ldr	r0, [pc, #356]	@ (801331c <_printf_i+0x238>)
 80131b6:	230a      	movs	r3, #10
 80131b8:	e011      	b.n	80131de <_printf_i+0xfa>
 80131ba:	6821      	ldr	r1, [r4, #0]
 80131bc:	6833      	ldr	r3, [r6, #0]
 80131be:	0608      	lsls	r0, r1, #24
 80131c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80131c4:	d402      	bmi.n	80131cc <_printf_i+0xe8>
 80131c6:	0649      	lsls	r1, r1, #25
 80131c8:	bf48      	it	mi
 80131ca:	b2ad      	uxthmi	r5, r5
 80131cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80131ce:	4853      	ldr	r0, [pc, #332]	@ (801331c <_printf_i+0x238>)
 80131d0:	6033      	str	r3, [r6, #0]
 80131d2:	bf14      	ite	ne
 80131d4:	230a      	movne	r3, #10
 80131d6:	2308      	moveq	r3, #8
 80131d8:	2100      	movs	r1, #0
 80131da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80131de:	6866      	ldr	r6, [r4, #4]
 80131e0:	60a6      	str	r6, [r4, #8]
 80131e2:	2e00      	cmp	r6, #0
 80131e4:	bfa2      	ittt	ge
 80131e6:	6821      	ldrge	r1, [r4, #0]
 80131e8:	f021 0104 	bicge.w	r1, r1, #4
 80131ec:	6021      	strge	r1, [r4, #0]
 80131ee:	b90d      	cbnz	r5, 80131f4 <_printf_i+0x110>
 80131f0:	2e00      	cmp	r6, #0
 80131f2:	d04b      	beq.n	801328c <_printf_i+0x1a8>
 80131f4:	4616      	mov	r6, r2
 80131f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80131fa:	fb03 5711 	mls	r7, r3, r1, r5
 80131fe:	5dc7      	ldrb	r7, [r0, r7]
 8013200:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013204:	462f      	mov	r7, r5
 8013206:	42bb      	cmp	r3, r7
 8013208:	460d      	mov	r5, r1
 801320a:	d9f4      	bls.n	80131f6 <_printf_i+0x112>
 801320c:	2b08      	cmp	r3, #8
 801320e:	d10b      	bne.n	8013228 <_printf_i+0x144>
 8013210:	6823      	ldr	r3, [r4, #0]
 8013212:	07df      	lsls	r7, r3, #31
 8013214:	d508      	bpl.n	8013228 <_printf_i+0x144>
 8013216:	6923      	ldr	r3, [r4, #16]
 8013218:	6861      	ldr	r1, [r4, #4]
 801321a:	4299      	cmp	r1, r3
 801321c:	bfde      	ittt	le
 801321e:	2330      	movle	r3, #48	@ 0x30
 8013220:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013224:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8013228:	1b92      	subs	r2, r2, r6
 801322a:	6122      	str	r2, [r4, #16]
 801322c:	f8cd a000 	str.w	sl, [sp]
 8013230:	464b      	mov	r3, r9
 8013232:	aa03      	add	r2, sp, #12
 8013234:	4621      	mov	r1, r4
 8013236:	4640      	mov	r0, r8
 8013238:	f7ff fee6 	bl	8013008 <_printf_common>
 801323c:	3001      	adds	r0, #1
 801323e:	d14a      	bne.n	80132d6 <_printf_i+0x1f2>
 8013240:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013244:	b004      	add	sp, #16
 8013246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801324a:	6823      	ldr	r3, [r4, #0]
 801324c:	f043 0320 	orr.w	r3, r3, #32
 8013250:	6023      	str	r3, [r4, #0]
 8013252:	4833      	ldr	r0, [pc, #204]	@ (8013320 <_printf_i+0x23c>)
 8013254:	2778      	movs	r7, #120	@ 0x78
 8013256:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801325a:	6823      	ldr	r3, [r4, #0]
 801325c:	6831      	ldr	r1, [r6, #0]
 801325e:	061f      	lsls	r7, r3, #24
 8013260:	f851 5b04 	ldr.w	r5, [r1], #4
 8013264:	d402      	bmi.n	801326c <_printf_i+0x188>
 8013266:	065f      	lsls	r7, r3, #25
 8013268:	bf48      	it	mi
 801326a:	b2ad      	uxthmi	r5, r5
 801326c:	6031      	str	r1, [r6, #0]
 801326e:	07d9      	lsls	r1, r3, #31
 8013270:	bf44      	itt	mi
 8013272:	f043 0320 	orrmi.w	r3, r3, #32
 8013276:	6023      	strmi	r3, [r4, #0]
 8013278:	b11d      	cbz	r5, 8013282 <_printf_i+0x19e>
 801327a:	2310      	movs	r3, #16
 801327c:	e7ac      	b.n	80131d8 <_printf_i+0xf4>
 801327e:	4827      	ldr	r0, [pc, #156]	@ (801331c <_printf_i+0x238>)
 8013280:	e7e9      	b.n	8013256 <_printf_i+0x172>
 8013282:	6823      	ldr	r3, [r4, #0]
 8013284:	f023 0320 	bic.w	r3, r3, #32
 8013288:	6023      	str	r3, [r4, #0]
 801328a:	e7f6      	b.n	801327a <_printf_i+0x196>
 801328c:	4616      	mov	r6, r2
 801328e:	e7bd      	b.n	801320c <_printf_i+0x128>
 8013290:	6833      	ldr	r3, [r6, #0]
 8013292:	6825      	ldr	r5, [r4, #0]
 8013294:	6961      	ldr	r1, [r4, #20]
 8013296:	1d18      	adds	r0, r3, #4
 8013298:	6030      	str	r0, [r6, #0]
 801329a:	062e      	lsls	r6, r5, #24
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	d501      	bpl.n	80132a4 <_printf_i+0x1c0>
 80132a0:	6019      	str	r1, [r3, #0]
 80132a2:	e002      	b.n	80132aa <_printf_i+0x1c6>
 80132a4:	0668      	lsls	r0, r5, #25
 80132a6:	d5fb      	bpl.n	80132a0 <_printf_i+0x1bc>
 80132a8:	8019      	strh	r1, [r3, #0]
 80132aa:	2300      	movs	r3, #0
 80132ac:	6123      	str	r3, [r4, #16]
 80132ae:	4616      	mov	r6, r2
 80132b0:	e7bc      	b.n	801322c <_printf_i+0x148>
 80132b2:	6833      	ldr	r3, [r6, #0]
 80132b4:	1d1a      	adds	r2, r3, #4
 80132b6:	6032      	str	r2, [r6, #0]
 80132b8:	681e      	ldr	r6, [r3, #0]
 80132ba:	6862      	ldr	r2, [r4, #4]
 80132bc:	2100      	movs	r1, #0
 80132be:	4630      	mov	r0, r6
 80132c0:	f7ec ffb6 	bl	8000230 <memchr>
 80132c4:	b108      	cbz	r0, 80132ca <_printf_i+0x1e6>
 80132c6:	1b80      	subs	r0, r0, r6
 80132c8:	6060      	str	r0, [r4, #4]
 80132ca:	6863      	ldr	r3, [r4, #4]
 80132cc:	6123      	str	r3, [r4, #16]
 80132ce:	2300      	movs	r3, #0
 80132d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80132d4:	e7aa      	b.n	801322c <_printf_i+0x148>
 80132d6:	6923      	ldr	r3, [r4, #16]
 80132d8:	4632      	mov	r2, r6
 80132da:	4649      	mov	r1, r9
 80132dc:	4640      	mov	r0, r8
 80132de:	47d0      	blx	sl
 80132e0:	3001      	adds	r0, #1
 80132e2:	d0ad      	beq.n	8013240 <_printf_i+0x15c>
 80132e4:	6823      	ldr	r3, [r4, #0]
 80132e6:	079b      	lsls	r3, r3, #30
 80132e8:	d413      	bmi.n	8013312 <_printf_i+0x22e>
 80132ea:	68e0      	ldr	r0, [r4, #12]
 80132ec:	9b03      	ldr	r3, [sp, #12]
 80132ee:	4298      	cmp	r0, r3
 80132f0:	bfb8      	it	lt
 80132f2:	4618      	movlt	r0, r3
 80132f4:	e7a6      	b.n	8013244 <_printf_i+0x160>
 80132f6:	2301      	movs	r3, #1
 80132f8:	4632      	mov	r2, r6
 80132fa:	4649      	mov	r1, r9
 80132fc:	4640      	mov	r0, r8
 80132fe:	47d0      	blx	sl
 8013300:	3001      	adds	r0, #1
 8013302:	d09d      	beq.n	8013240 <_printf_i+0x15c>
 8013304:	3501      	adds	r5, #1
 8013306:	68e3      	ldr	r3, [r4, #12]
 8013308:	9903      	ldr	r1, [sp, #12]
 801330a:	1a5b      	subs	r3, r3, r1
 801330c:	42ab      	cmp	r3, r5
 801330e:	dcf2      	bgt.n	80132f6 <_printf_i+0x212>
 8013310:	e7eb      	b.n	80132ea <_printf_i+0x206>
 8013312:	2500      	movs	r5, #0
 8013314:	f104 0619 	add.w	r6, r4, #25
 8013318:	e7f5      	b.n	8013306 <_printf_i+0x222>
 801331a:	bf00      	nop
 801331c:	080168b2 	.word	0x080168b2
 8013320:	080168c3 	.word	0x080168c3

08013324 <std>:
 8013324:	2300      	movs	r3, #0
 8013326:	b510      	push	{r4, lr}
 8013328:	4604      	mov	r4, r0
 801332a:	e9c0 3300 	strd	r3, r3, [r0]
 801332e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013332:	6083      	str	r3, [r0, #8]
 8013334:	8181      	strh	r1, [r0, #12]
 8013336:	6643      	str	r3, [r0, #100]	@ 0x64
 8013338:	81c2      	strh	r2, [r0, #14]
 801333a:	6183      	str	r3, [r0, #24]
 801333c:	4619      	mov	r1, r3
 801333e:	2208      	movs	r2, #8
 8013340:	305c      	adds	r0, #92	@ 0x5c
 8013342:	f000 f8f4 	bl	801352e <memset>
 8013346:	4b0d      	ldr	r3, [pc, #52]	@ (801337c <std+0x58>)
 8013348:	6263      	str	r3, [r4, #36]	@ 0x24
 801334a:	4b0d      	ldr	r3, [pc, #52]	@ (8013380 <std+0x5c>)
 801334c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801334e:	4b0d      	ldr	r3, [pc, #52]	@ (8013384 <std+0x60>)
 8013350:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013352:	4b0d      	ldr	r3, [pc, #52]	@ (8013388 <std+0x64>)
 8013354:	6323      	str	r3, [r4, #48]	@ 0x30
 8013356:	4b0d      	ldr	r3, [pc, #52]	@ (801338c <std+0x68>)
 8013358:	6224      	str	r4, [r4, #32]
 801335a:	429c      	cmp	r4, r3
 801335c:	d006      	beq.n	801336c <std+0x48>
 801335e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013362:	4294      	cmp	r4, r2
 8013364:	d002      	beq.n	801336c <std+0x48>
 8013366:	33d0      	adds	r3, #208	@ 0xd0
 8013368:	429c      	cmp	r4, r3
 801336a:	d105      	bne.n	8013378 <std+0x54>
 801336c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013374:	f000 b9ac 	b.w	80136d0 <__retarget_lock_init_recursive>
 8013378:	bd10      	pop	{r4, pc}
 801337a:	bf00      	nop
 801337c:	080134a9 	.word	0x080134a9
 8013380:	080134cb 	.word	0x080134cb
 8013384:	08013503 	.word	0x08013503
 8013388:	08013527 	.word	0x08013527
 801338c:	20000448 	.word	0x20000448

08013390 <stdio_exit_handler>:
 8013390:	4a02      	ldr	r2, [pc, #8]	@ (801339c <stdio_exit_handler+0xc>)
 8013392:	4903      	ldr	r1, [pc, #12]	@ (80133a0 <stdio_exit_handler+0x10>)
 8013394:	4803      	ldr	r0, [pc, #12]	@ (80133a4 <stdio_exit_handler+0x14>)
 8013396:	f000 b869 	b.w	801346c <_fwalk_sglue>
 801339a:	bf00      	nop
 801339c:	20000028 	.word	0x20000028
 80133a0:	08014c31 	.word	0x08014c31
 80133a4:	20000038 	.word	0x20000038

080133a8 <cleanup_stdio>:
 80133a8:	6841      	ldr	r1, [r0, #4]
 80133aa:	4b0c      	ldr	r3, [pc, #48]	@ (80133dc <cleanup_stdio+0x34>)
 80133ac:	4299      	cmp	r1, r3
 80133ae:	b510      	push	{r4, lr}
 80133b0:	4604      	mov	r4, r0
 80133b2:	d001      	beq.n	80133b8 <cleanup_stdio+0x10>
 80133b4:	f001 fc3c 	bl	8014c30 <_fflush_r>
 80133b8:	68a1      	ldr	r1, [r4, #8]
 80133ba:	4b09      	ldr	r3, [pc, #36]	@ (80133e0 <cleanup_stdio+0x38>)
 80133bc:	4299      	cmp	r1, r3
 80133be:	d002      	beq.n	80133c6 <cleanup_stdio+0x1e>
 80133c0:	4620      	mov	r0, r4
 80133c2:	f001 fc35 	bl	8014c30 <_fflush_r>
 80133c6:	68e1      	ldr	r1, [r4, #12]
 80133c8:	4b06      	ldr	r3, [pc, #24]	@ (80133e4 <cleanup_stdio+0x3c>)
 80133ca:	4299      	cmp	r1, r3
 80133cc:	d004      	beq.n	80133d8 <cleanup_stdio+0x30>
 80133ce:	4620      	mov	r0, r4
 80133d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133d4:	f001 bc2c 	b.w	8014c30 <_fflush_r>
 80133d8:	bd10      	pop	{r4, pc}
 80133da:	bf00      	nop
 80133dc:	20000448 	.word	0x20000448
 80133e0:	200004b0 	.word	0x200004b0
 80133e4:	20000518 	.word	0x20000518

080133e8 <global_stdio_init.part.0>:
 80133e8:	b510      	push	{r4, lr}
 80133ea:	4b0b      	ldr	r3, [pc, #44]	@ (8013418 <global_stdio_init.part.0+0x30>)
 80133ec:	4c0b      	ldr	r4, [pc, #44]	@ (801341c <global_stdio_init.part.0+0x34>)
 80133ee:	4a0c      	ldr	r2, [pc, #48]	@ (8013420 <global_stdio_init.part.0+0x38>)
 80133f0:	601a      	str	r2, [r3, #0]
 80133f2:	4620      	mov	r0, r4
 80133f4:	2200      	movs	r2, #0
 80133f6:	2104      	movs	r1, #4
 80133f8:	f7ff ff94 	bl	8013324 <std>
 80133fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013400:	2201      	movs	r2, #1
 8013402:	2109      	movs	r1, #9
 8013404:	f7ff ff8e 	bl	8013324 <std>
 8013408:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801340c:	2202      	movs	r2, #2
 801340e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013412:	2112      	movs	r1, #18
 8013414:	f7ff bf86 	b.w	8013324 <std>
 8013418:	20000580 	.word	0x20000580
 801341c:	20000448 	.word	0x20000448
 8013420:	08013391 	.word	0x08013391

08013424 <__sfp_lock_acquire>:
 8013424:	4801      	ldr	r0, [pc, #4]	@ (801342c <__sfp_lock_acquire+0x8>)
 8013426:	f000 b954 	b.w	80136d2 <__retarget_lock_acquire_recursive>
 801342a:	bf00      	nop
 801342c:	20000589 	.word	0x20000589

08013430 <__sfp_lock_release>:
 8013430:	4801      	ldr	r0, [pc, #4]	@ (8013438 <__sfp_lock_release+0x8>)
 8013432:	f000 b94f 	b.w	80136d4 <__retarget_lock_release_recursive>
 8013436:	bf00      	nop
 8013438:	20000589 	.word	0x20000589

0801343c <__sinit>:
 801343c:	b510      	push	{r4, lr}
 801343e:	4604      	mov	r4, r0
 8013440:	f7ff fff0 	bl	8013424 <__sfp_lock_acquire>
 8013444:	6a23      	ldr	r3, [r4, #32]
 8013446:	b11b      	cbz	r3, 8013450 <__sinit+0x14>
 8013448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801344c:	f7ff bff0 	b.w	8013430 <__sfp_lock_release>
 8013450:	4b04      	ldr	r3, [pc, #16]	@ (8013464 <__sinit+0x28>)
 8013452:	6223      	str	r3, [r4, #32]
 8013454:	4b04      	ldr	r3, [pc, #16]	@ (8013468 <__sinit+0x2c>)
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	2b00      	cmp	r3, #0
 801345a:	d1f5      	bne.n	8013448 <__sinit+0xc>
 801345c:	f7ff ffc4 	bl	80133e8 <global_stdio_init.part.0>
 8013460:	e7f2      	b.n	8013448 <__sinit+0xc>
 8013462:	bf00      	nop
 8013464:	080133a9 	.word	0x080133a9
 8013468:	20000580 	.word	0x20000580

0801346c <_fwalk_sglue>:
 801346c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013470:	4607      	mov	r7, r0
 8013472:	4688      	mov	r8, r1
 8013474:	4614      	mov	r4, r2
 8013476:	2600      	movs	r6, #0
 8013478:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801347c:	f1b9 0901 	subs.w	r9, r9, #1
 8013480:	d505      	bpl.n	801348e <_fwalk_sglue+0x22>
 8013482:	6824      	ldr	r4, [r4, #0]
 8013484:	2c00      	cmp	r4, #0
 8013486:	d1f7      	bne.n	8013478 <_fwalk_sglue+0xc>
 8013488:	4630      	mov	r0, r6
 801348a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801348e:	89ab      	ldrh	r3, [r5, #12]
 8013490:	2b01      	cmp	r3, #1
 8013492:	d907      	bls.n	80134a4 <_fwalk_sglue+0x38>
 8013494:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013498:	3301      	adds	r3, #1
 801349a:	d003      	beq.n	80134a4 <_fwalk_sglue+0x38>
 801349c:	4629      	mov	r1, r5
 801349e:	4638      	mov	r0, r7
 80134a0:	47c0      	blx	r8
 80134a2:	4306      	orrs	r6, r0
 80134a4:	3568      	adds	r5, #104	@ 0x68
 80134a6:	e7e9      	b.n	801347c <_fwalk_sglue+0x10>

080134a8 <__sread>:
 80134a8:	b510      	push	{r4, lr}
 80134aa:	460c      	mov	r4, r1
 80134ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134b0:	f000 f89c 	bl	80135ec <_read_r>
 80134b4:	2800      	cmp	r0, #0
 80134b6:	bfab      	itete	ge
 80134b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80134ba:	89a3      	ldrhlt	r3, [r4, #12]
 80134bc:	181b      	addge	r3, r3, r0
 80134be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80134c2:	bfac      	ite	ge
 80134c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80134c6:	81a3      	strhlt	r3, [r4, #12]
 80134c8:	bd10      	pop	{r4, pc}

080134ca <__swrite>:
 80134ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134ce:	461f      	mov	r7, r3
 80134d0:	898b      	ldrh	r3, [r1, #12]
 80134d2:	05db      	lsls	r3, r3, #23
 80134d4:	4605      	mov	r5, r0
 80134d6:	460c      	mov	r4, r1
 80134d8:	4616      	mov	r6, r2
 80134da:	d505      	bpl.n	80134e8 <__swrite+0x1e>
 80134dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134e0:	2302      	movs	r3, #2
 80134e2:	2200      	movs	r2, #0
 80134e4:	f000 f870 	bl	80135c8 <_lseek_r>
 80134e8:	89a3      	ldrh	r3, [r4, #12]
 80134ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80134ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80134f2:	81a3      	strh	r3, [r4, #12]
 80134f4:	4632      	mov	r2, r6
 80134f6:	463b      	mov	r3, r7
 80134f8:	4628      	mov	r0, r5
 80134fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80134fe:	f000 b8ab 	b.w	8013658 <_write_r>

08013502 <__sseek>:
 8013502:	b510      	push	{r4, lr}
 8013504:	460c      	mov	r4, r1
 8013506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801350a:	f000 f85d 	bl	80135c8 <_lseek_r>
 801350e:	1c43      	adds	r3, r0, #1
 8013510:	89a3      	ldrh	r3, [r4, #12]
 8013512:	bf15      	itete	ne
 8013514:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013516:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801351a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801351e:	81a3      	strheq	r3, [r4, #12]
 8013520:	bf18      	it	ne
 8013522:	81a3      	strhne	r3, [r4, #12]
 8013524:	bd10      	pop	{r4, pc}

08013526 <__sclose>:
 8013526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801352a:	f000 b83d 	b.w	80135a8 <_close_r>

0801352e <memset>:
 801352e:	4402      	add	r2, r0
 8013530:	4603      	mov	r3, r0
 8013532:	4293      	cmp	r3, r2
 8013534:	d100      	bne.n	8013538 <memset+0xa>
 8013536:	4770      	bx	lr
 8013538:	f803 1b01 	strb.w	r1, [r3], #1
 801353c:	e7f9      	b.n	8013532 <memset+0x4>

0801353e <_raise_r>:
 801353e:	291f      	cmp	r1, #31
 8013540:	b538      	push	{r3, r4, r5, lr}
 8013542:	4605      	mov	r5, r0
 8013544:	460c      	mov	r4, r1
 8013546:	d904      	bls.n	8013552 <_raise_r+0x14>
 8013548:	2316      	movs	r3, #22
 801354a:	6003      	str	r3, [r0, #0]
 801354c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013550:	bd38      	pop	{r3, r4, r5, pc}
 8013552:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013554:	b112      	cbz	r2, 801355c <_raise_r+0x1e>
 8013556:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801355a:	b94b      	cbnz	r3, 8013570 <_raise_r+0x32>
 801355c:	4628      	mov	r0, r5
 801355e:	f000 f869 	bl	8013634 <_getpid_r>
 8013562:	4622      	mov	r2, r4
 8013564:	4601      	mov	r1, r0
 8013566:	4628      	mov	r0, r5
 8013568:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801356c:	f000 b850 	b.w	8013610 <_kill_r>
 8013570:	2b01      	cmp	r3, #1
 8013572:	d00a      	beq.n	801358a <_raise_r+0x4c>
 8013574:	1c59      	adds	r1, r3, #1
 8013576:	d103      	bne.n	8013580 <_raise_r+0x42>
 8013578:	2316      	movs	r3, #22
 801357a:	6003      	str	r3, [r0, #0]
 801357c:	2001      	movs	r0, #1
 801357e:	e7e7      	b.n	8013550 <_raise_r+0x12>
 8013580:	2100      	movs	r1, #0
 8013582:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013586:	4620      	mov	r0, r4
 8013588:	4798      	blx	r3
 801358a:	2000      	movs	r0, #0
 801358c:	e7e0      	b.n	8013550 <_raise_r+0x12>
	...

08013590 <raise>:
 8013590:	4b02      	ldr	r3, [pc, #8]	@ (801359c <raise+0xc>)
 8013592:	4601      	mov	r1, r0
 8013594:	6818      	ldr	r0, [r3, #0]
 8013596:	f7ff bfd2 	b.w	801353e <_raise_r>
 801359a:	bf00      	nop
 801359c:	20000034 	.word	0x20000034

080135a0 <_localeconv_r>:
 80135a0:	4800      	ldr	r0, [pc, #0]	@ (80135a4 <_localeconv_r+0x4>)
 80135a2:	4770      	bx	lr
 80135a4:	20000174 	.word	0x20000174

080135a8 <_close_r>:
 80135a8:	b538      	push	{r3, r4, r5, lr}
 80135aa:	4d06      	ldr	r5, [pc, #24]	@ (80135c4 <_close_r+0x1c>)
 80135ac:	2300      	movs	r3, #0
 80135ae:	4604      	mov	r4, r0
 80135b0:	4608      	mov	r0, r1
 80135b2:	602b      	str	r3, [r5, #0]
 80135b4:	f7f9 ffd0 	bl	800d558 <_close>
 80135b8:	1c43      	adds	r3, r0, #1
 80135ba:	d102      	bne.n	80135c2 <_close_r+0x1a>
 80135bc:	682b      	ldr	r3, [r5, #0]
 80135be:	b103      	cbz	r3, 80135c2 <_close_r+0x1a>
 80135c0:	6023      	str	r3, [r4, #0]
 80135c2:	bd38      	pop	{r3, r4, r5, pc}
 80135c4:	20000584 	.word	0x20000584

080135c8 <_lseek_r>:
 80135c8:	b538      	push	{r3, r4, r5, lr}
 80135ca:	4d07      	ldr	r5, [pc, #28]	@ (80135e8 <_lseek_r+0x20>)
 80135cc:	4604      	mov	r4, r0
 80135ce:	4608      	mov	r0, r1
 80135d0:	4611      	mov	r1, r2
 80135d2:	2200      	movs	r2, #0
 80135d4:	602a      	str	r2, [r5, #0]
 80135d6:	461a      	mov	r2, r3
 80135d8:	f7f9 ffe5 	bl	800d5a6 <_lseek>
 80135dc:	1c43      	adds	r3, r0, #1
 80135de:	d102      	bne.n	80135e6 <_lseek_r+0x1e>
 80135e0:	682b      	ldr	r3, [r5, #0]
 80135e2:	b103      	cbz	r3, 80135e6 <_lseek_r+0x1e>
 80135e4:	6023      	str	r3, [r4, #0]
 80135e6:	bd38      	pop	{r3, r4, r5, pc}
 80135e8:	20000584 	.word	0x20000584

080135ec <_read_r>:
 80135ec:	b538      	push	{r3, r4, r5, lr}
 80135ee:	4d07      	ldr	r5, [pc, #28]	@ (801360c <_read_r+0x20>)
 80135f0:	4604      	mov	r4, r0
 80135f2:	4608      	mov	r0, r1
 80135f4:	4611      	mov	r1, r2
 80135f6:	2200      	movs	r2, #0
 80135f8:	602a      	str	r2, [r5, #0]
 80135fa:	461a      	mov	r2, r3
 80135fc:	f7f9 ff73 	bl	800d4e6 <_read>
 8013600:	1c43      	adds	r3, r0, #1
 8013602:	d102      	bne.n	801360a <_read_r+0x1e>
 8013604:	682b      	ldr	r3, [r5, #0]
 8013606:	b103      	cbz	r3, 801360a <_read_r+0x1e>
 8013608:	6023      	str	r3, [r4, #0]
 801360a:	bd38      	pop	{r3, r4, r5, pc}
 801360c:	20000584 	.word	0x20000584

08013610 <_kill_r>:
 8013610:	b538      	push	{r3, r4, r5, lr}
 8013612:	4d07      	ldr	r5, [pc, #28]	@ (8013630 <_kill_r+0x20>)
 8013614:	2300      	movs	r3, #0
 8013616:	4604      	mov	r4, r0
 8013618:	4608      	mov	r0, r1
 801361a:	4611      	mov	r1, r2
 801361c:	602b      	str	r3, [r5, #0]
 801361e:	f7f9 ff47 	bl	800d4b0 <_kill>
 8013622:	1c43      	adds	r3, r0, #1
 8013624:	d102      	bne.n	801362c <_kill_r+0x1c>
 8013626:	682b      	ldr	r3, [r5, #0]
 8013628:	b103      	cbz	r3, 801362c <_kill_r+0x1c>
 801362a:	6023      	str	r3, [r4, #0]
 801362c:	bd38      	pop	{r3, r4, r5, pc}
 801362e:	bf00      	nop
 8013630:	20000584 	.word	0x20000584

08013634 <_getpid_r>:
 8013634:	f7f9 bf34 	b.w	800d4a0 <_getpid>

08013638 <_sbrk_r>:
 8013638:	b538      	push	{r3, r4, r5, lr}
 801363a:	4d06      	ldr	r5, [pc, #24]	@ (8013654 <_sbrk_r+0x1c>)
 801363c:	2300      	movs	r3, #0
 801363e:	4604      	mov	r4, r0
 8013640:	4608      	mov	r0, r1
 8013642:	602b      	str	r3, [r5, #0]
 8013644:	f7f9 ffbc 	bl	800d5c0 <_sbrk>
 8013648:	1c43      	adds	r3, r0, #1
 801364a:	d102      	bne.n	8013652 <_sbrk_r+0x1a>
 801364c:	682b      	ldr	r3, [r5, #0]
 801364e:	b103      	cbz	r3, 8013652 <_sbrk_r+0x1a>
 8013650:	6023      	str	r3, [r4, #0]
 8013652:	bd38      	pop	{r3, r4, r5, pc}
 8013654:	20000584 	.word	0x20000584

08013658 <_write_r>:
 8013658:	b538      	push	{r3, r4, r5, lr}
 801365a:	4d07      	ldr	r5, [pc, #28]	@ (8013678 <_write_r+0x20>)
 801365c:	4604      	mov	r4, r0
 801365e:	4608      	mov	r0, r1
 8013660:	4611      	mov	r1, r2
 8013662:	2200      	movs	r2, #0
 8013664:	602a      	str	r2, [r5, #0]
 8013666:	461a      	mov	r2, r3
 8013668:	f7f9 ff5a 	bl	800d520 <_write>
 801366c:	1c43      	adds	r3, r0, #1
 801366e:	d102      	bne.n	8013676 <_write_r+0x1e>
 8013670:	682b      	ldr	r3, [r5, #0]
 8013672:	b103      	cbz	r3, 8013676 <_write_r+0x1e>
 8013674:	6023      	str	r3, [r4, #0]
 8013676:	bd38      	pop	{r3, r4, r5, pc}
 8013678:	20000584 	.word	0x20000584

0801367c <__errno>:
 801367c:	4b01      	ldr	r3, [pc, #4]	@ (8013684 <__errno+0x8>)
 801367e:	6818      	ldr	r0, [r3, #0]
 8013680:	4770      	bx	lr
 8013682:	bf00      	nop
 8013684:	20000034 	.word	0x20000034

08013688 <__libc_init_array>:
 8013688:	b570      	push	{r4, r5, r6, lr}
 801368a:	4d0d      	ldr	r5, [pc, #52]	@ (80136c0 <__libc_init_array+0x38>)
 801368c:	4c0d      	ldr	r4, [pc, #52]	@ (80136c4 <__libc_init_array+0x3c>)
 801368e:	1b64      	subs	r4, r4, r5
 8013690:	10a4      	asrs	r4, r4, #2
 8013692:	2600      	movs	r6, #0
 8013694:	42a6      	cmp	r6, r4
 8013696:	d109      	bne.n	80136ac <__libc_init_array+0x24>
 8013698:	4d0b      	ldr	r5, [pc, #44]	@ (80136c8 <__libc_init_array+0x40>)
 801369a:	4c0c      	ldr	r4, [pc, #48]	@ (80136cc <__libc_init_array+0x44>)
 801369c:	f001 fdb4 	bl	8015208 <_init>
 80136a0:	1b64      	subs	r4, r4, r5
 80136a2:	10a4      	asrs	r4, r4, #2
 80136a4:	2600      	movs	r6, #0
 80136a6:	42a6      	cmp	r6, r4
 80136a8:	d105      	bne.n	80136b6 <__libc_init_array+0x2e>
 80136aa:	bd70      	pop	{r4, r5, r6, pc}
 80136ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80136b0:	4798      	blx	r3
 80136b2:	3601      	adds	r6, #1
 80136b4:	e7ee      	b.n	8013694 <__libc_init_array+0xc>
 80136b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80136ba:	4798      	blx	r3
 80136bc:	3601      	adds	r6, #1
 80136be:	e7f2      	b.n	80136a6 <__libc_init_array+0x1e>
 80136c0:	08018bf0 	.word	0x08018bf0
 80136c4:	08018bf0 	.word	0x08018bf0
 80136c8:	08018bf0 	.word	0x08018bf0
 80136cc:	08018c00 	.word	0x08018c00

080136d0 <__retarget_lock_init_recursive>:
 80136d0:	4770      	bx	lr

080136d2 <__retarget_lock_acquire_recursive>:
 80136d2:	4770      	bx	lr

080136d4 <__retarget_lock_release_recursive>:
 80136d4:	4770      	bx	lr

080136d6 <memcpy>:
 80136d6:	440a      	add	r2, r1
 80136d8:	4291      	cmp	r1, r2
 80136da:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80136de:	d100      	bne.n	80136e2 <memcpy+0xc>
 80136e0:	4770      	bx	lr
 80136e2:	b510      	push	{r4, lr}
 80136e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80136e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80136ec:	4291      	cmp	r1, r2
 80136ee:	d1f9      	bne.n	80136e4 <memcpy+0xe>
 80136f0:	bd10      	pop	{r4, pc}

080136f2 <quorem>:
 80136f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136f6:	6903      	ldr	r3, [r0, #16]
 80136f8:	690c      	ldr	r4, [r1, #16]
 80136fa:	42a3      	cmp	r3, r4
 80136fc:	4607      	mov	r7, r0
 80136fe:	db7e      	blt.n	80137fe <quorem+0x10c>
 8013700:	3c01      	subs	r4, #1
 8013702:	f101 0814 	add.w	r8, r1, #20
 8013706:	00a3      	lsls	r3, r4, #2
 8013708:	f100 0514 	add.w	r5, r0, #20
 801370c:	9300      	str	r3, [sp, #0]
 801370e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013712:	9301      	str	r3, [sp, #4]
 8013714:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013718:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801371c:	3301      	adds	r3, #1
 801371e:	429a      	cmp	r2, r3
 8013720:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013724:	fbb2 f6f3 	udiv	r6, r2, r3
 8013728:	d32e      	bcc.n	8013788 <quorem+0x96>
 801372a:	f04f 0a00 	mov.w	sl, #0
 801372e:	46c4      	mov	ip, r8
 8013730:	46ae      	mov	lr, r5
 8013732:	46d3      	mov	fp, sl
 8013734:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013738:	b298      	uxth	r0, r3
 801373a:	fb06 a000 	mla	r0, r6, r0, sl
 801373e:	0c02      	lsrs	r2, r0, #16
 8013740:	0c1b      	lsrs	r3, r3, #16
 8013742:	fb06 2303 	mla	r3, r6, r3, r2
 8013746:	f8de 2000 	ldr.w	r2, [lr]
 801374a:	b280      	uxth	r0, r0
 801374c:	b292      	uxth	r2, r2
 801374e:	1a12      	subs	r2, r2, r0
 8013750:	445a      	add	r2, fp
 8013752:	f8de 0000 	ldr.w	r0, [lr]
 8013756:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801375a:	b29b      	uxth	r3, r3
 801375c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8013760:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8013764:	b292      	uxth	r2, r2
 8013766:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801376a:	45e1      	cmp	r9, ip
 801376c:	f84e 2b04 	str.w	r2, [lr], #4
 8013770:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8013774:	d2de      	bcs.n	8013734 <quorem+0x42>
 8013776:	9b00      	ldr	r3, [sp, #0]
 8013778:	58eb      	ldr	r3, [r5, r3]
 801377a:	b92b      	cbnz	r3, 8013788 <quorem+0x96>
 801377c:	9b01      	ldr	r3, [sp, #4]
 801377e:	3b04      	subs	r3, #4
 8013780:	429d      	cmp	r5, r3
 8013782:	461a      	mov	r2, r3
 8013784:	d32f      	bcc.n	80137e6 <quorem+0xf4>
 8013786:	613c      	str	r4, [r7, #16]
 8013788:	4638      	mov	r0, r7
 801378a:	f001 f8c5 	bl	8014918 <__mcmp>
 801378e:	2800      	cmp	r0, #0
 8013790:	db25      	blt.n	80137de <quorem+0xec>
 8013792:	4629      	mov	r1, r5
 8013794:	2000      	movs	r0, #0
 8013796:	f858 2b04 	ldr.w	r2, [r8], #4
 801379a:	f8d1 c000 	ldr.w	ip, [r1]
 801379e:	fa1f fe82 	uxth.w	lr, r2
 80137a2:	fa1f f38c 	uxth.w	r3, ip
 80137a6:	eba3 030e 	sub.w	r3, r3, lr
 80137aa:	4403      	add	r3, r0
 80137ac:	0c12      	lsrs	r2, r2, #16
 80137ae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80137b2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80137b6:	b29b      	uxth	r3, r3
 80137b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80137bc:	45c1      	cmp	r9, r8
 80137be:	f841 3b04 	str.w	r3, [r1], #4
 80137c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80137c6:	d2e6      	bcs.n	8013796 <quorem+0xa4>
 80137c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80137cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80137d0:	b922      	cbnz	r2, 80137dc <quorem+0xea>
 80137d2:	3b04      	subs	r3, #4
 80137d4:	429d      	cmp	r5, r3
 80137d6:	461a      	mov	r2, r3
 80137d8:	d30b      	bcc.n	80137f2 <quorem+0x100>
 80137da:	613c      	str	r4, [r7, #16]
 80137dc:	3601      	adds	r6, #1
 80137de:	4630      	mov	r0, r6
 80137e0:	b003      	add	sp, #12
 80137e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137e6:	6812      	ldr	r2, [r2, #0]
 80137e8:	3b04      	subs	r3, #4
 80137ea:	2a00      	cmp	r2, #0
 80137ec:	d1cb      	bne.n	8013786 <quorem+0x94>
 80137ee:	3c01      	subs	r4, #1
 80137f0:	e7c6      	b.n	8013780 <quorem+0x8e>
 80137f2:	6812      	ldr	r2, [r2, #0]
 80137f4:	3b04      	subs	r3, #4
 80137f6:	2a00      	cmp	r2, #0
 80137f8:	d1ef      	bne.n	80137da <quorem+0xe8>
 80137fa:	3c01      	subs	r4, #1
 80137fc:	e7ea      	b.n	80137d4 <quorem+0xe2>
 80137fe:	2000      	movs	r0, #0
 8013800:	e7ee      	b.n	80137e0 <quorem+0xee>
 8013802:	0000      	movs	r0, r0
 8013804:	0000      	movs	r0, r0
	...

08013808 <_dtoa_r>:
 8013808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801380c:	69c7      	ldr	r7, [r0, #28]
 801380e:	b099      	sub	sp, #100	@ 0x64
 8013810:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013814:	ec55 4b10 	vmov	r4, r5, d0
 8013818:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801381a:	9109      	str	r1, [sp, #36]	@ 0x24
 801381c:	4683      	mov	fp, r0
 801381e:	920e      	str	r2, [sp, #56]	@ 0x38
 8013820:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013822:	b97f      	cbnz	r7, 8013844 <_dtoa_r+0x3c>
 8013824:	2010      	movs	r0, #16
 8013826:	f7ff f859 	bl	80128dc <malloc>
 801382a:	4602      	mov	r2, r0
 801382c:	f8cb 001c 	str.w	r0, [fp, #28]
 8013830:	b920      	cbnz	r0, 801383c <_dtoa_r+0x34>
 8013832:	4ba7      	ldr	r3, [pc, #668]	@ (8013ad0 <_dtoa_r+0x2c8>)
 8013834:	21ef      	movs	r1, #239	@ 0xef
 8013836:	48a7      	ldr	r0, [pc, #668]	@ (8013ad4 <_dtoa_r+0x2cc>)
 8013838:	f001 fa22 	bl	8014c80 <__assert_func>
 801383c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013840:	6007      	str	r7, [r0, #0]
 8013842:	60c7      	str	r7, [r0, #12]
 8013844:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013848:	6819      	ldr	r1, [r3, #0]
 801384a:	b159      	cbz	r1, 8013864 <_dtoa_r+0x5c>
 801384c:	685a      	ldr	r2, [r3, #4]
 801384e:	604a      	str	r2, [r1, #4]
 8013850:	2301      	movs	r3, #1
 8013852:	4093      	lsls	r3, r2
 8013854:	608b      	str	r3, [r1, #8]
 8013856:	4658      	mov	r0, fp
 8013858:	f000 fe24 	bl	80144a4 <_Bfree>
 801385c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013860:	2200      	movs	r2, #0
 8013862:	601a      	str	r2, [r3, #0]
 8013864:	1e2b      	subs	r3, r5, #0
 8013866:	bfb9      	ittee	lt
 8013868:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801386c:	9303      	strlt	r3, [sp, #12]
 801386e:	2300      	movge	r3, #0
 8013870:	6033      	strge	r3, [r6, #0]
 8013872:	9f03      	ldr	r7, [sp, #12]
 8013874:	4b98      	ldr	r3, [pc, #608]	@ (8013ad8 <_dtoa_r+0x2d0>)
 8013876:	bfbc      	itt	lt
 8013878:	2201      	movlt	r2, #1
 801387a:	6032      	strlt	r2, [r6, #0]
 801387c:	43bb      	bics	r3, r7
 801387e:	d112      	bne.n	80138a6 <_dtoa_r+0x9e>
 8013880:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013882:	f242 730f 	movw	r3, #9999	@ 0x270f
 8013886:	6013      	str	r3, [r2, #0]
 8013888:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801388c:	4323      	orrs	r3, r4
 801388e:	f000 854d 	beq.w	801432c <_dtoa_r+0xb24>
 8013892:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013894:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8013aec <_dtoa_r+0x2e4>
 8013898:	2b00      	cmp	r3, #0
 801389a:	f000 854f 	beq.w	801433c <_dtoa_r+0xb34>
 801389e:	f10a 0303 	add.w	r3, sl, #3
 80138a2:	f000 bd49 	b.w	8014338 <_dtoa_r+0xb30>
 80138a6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80138aa:	2200      	movs	r2, #0
 80138ac:	ec51 0b17 	vmov	r0, r1, d7
 80138b0:	2300      	movs	r3, #0
 80138b2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80138b6:	f7ed f937 	bl	8000b28 <__aeabi_dcmpeq>
 80138ba:	4680      	mov	r8, r0
 80138bc:	b158      	cbz	r0, 80138d6 <_dtoa_r+0xce>
 80138be:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80138c0:	2301      	movs	r3, #1
 80138c2:	6013      	str	r3, [r2, #0]
 80138c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80138c6:	b113      	cbz	r3, 80138ce <_dtoa_r+0xc6>
 80138c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80138ca:	4b84      	ldr	r3, [pc, #528]	@ (8013adc <_dtoa_r+0x2d4>)
 80138cc:	6013      	str	r3, [r2, #0]
 80138ce:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8013af0 <_dtoa_r+0x2e8>
 80138d2:	f000 bd33 	b.w	801433c <_dtoa_r+0xb34>
 80138d6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80138da:	aa16      	add	r2, sp, #88	@ 0x58
 80138dc:	a917      	add	r1, sp, #92	@ 0x5c
 80138de:	4658      	mov	r0, fp
 80138e0:	f001 f8ca 	bl	8014a78 <__d2b>
 80138e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80138e8:	4681      	mov	r9, r0
 80138ea:	2e00      	cmp	r6, #0
 80138ec:	d077      	beq.n	80139de <_dtoa_r+0x1d6>
 80138ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80138f0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80138f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80138f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80138fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8013900:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8013904:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8013908:	4619      	mov	r1, r3
 801390a:	2200      	movs	r2, #0
 801390c:	4b74      	ldr	r3, [pc, #464]	@ (8013ae0 <_dtoa_r+0x2d8>)
 801390e:	f7ec fceb 	bl	80002e8 <__aeabi_dsub>
 8013912:	a369      	add	r3, pc, #420	@ (adr r3, 8013ab8 <_dtoa_r+0x2b0>)
 8013914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013918:	f7ec fe9e 	bl	8000658 <__aeabi_dmul>
 801391c:	a368      	add	r3, pc, #416	@ (adr r3, 8013ac0 <_dtoa_r+0x2b8>)
 801391e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013922:	f7ec fce3 	bl	80002ec <__adddf3>
 8013926:	4604      	mov	r4, r0
 8013928:	4630      	mov	r0, r6
 801392a:	460d      	mov	r5, r1
 801392c:	f7ec fe2a 	bl	8000584 <__aeabi_i2d>
 8013930:	a365      	add	r3, pc, #404	@ (adr r3, 8013ac8 <_dtoa_r+0x2c0>)
 8013932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013936:	f7ec fe8f 	bl	8000658 <__aeabi_dmul>
 801393a:	4602      	mov	r2, r0
 801393c:	460b      	mov	r3, r1
 801393e:	4620      	mov	r0, r4
 8013940:	4629      	mov	r1, r5
 8013942:	f7ec fcd3 	bl	80002ec <__adddf3>
 8013946:	4604      	mov	r4, r0
 8013948:	460d      	mov	r5, r1
 801394a:	f7ed f935 	bl	8000bb8 <__aeabi_d2iz>
 801394e:	2200      	movs	r2, #0
 8013950:	4607      	mov	r7, r0
 8013952:	2300      	movs	r3, #0
 8013954:	4620      	mov	r0, r4
 8013956:	4629      	mov	r1, r5
 8013958:	f7ed f8f0 	bl	8000b3c <__aeabi_dcmplt>
 801395c:	b140      	cbz	r0, 8013970 <_dtoa_r+0x168>
 801395e:	4638      	mov	r0, r7
 8013960:	f7ec fe10 	bl	8000584 <__aeabi_i2d>
 8013964:	4622      	mov	r2, r4
 8013966:	462b      	mov	r3, r5
 8013968:	f7ed f8de 	bl	8000b28 <__aeabi_dcmpeq>
 801396c:	b900      	cbnz	r0, 8013970 <_dtoa_r+0x168>
 801396e:	3f01      	subs	r7, #1
 8013970:	2f16      	cmp	r7, #22
 8013972:	d851      	bhi.n	8013a18 <_dtoa_r+0x210>
 8013974:	4b5b      	ldr	r3, [pc, #364]	@ (8013ae4 <_dtoa_r+0x2dc>)
 8013976:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801397a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801397e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013982:	f7ed f8db 	bl	8000b3c <__aeabi_dcmplt>
 8013986:	2800      	cmp	r0, #0
 8013988:	d048      	beq.n	8013a1c <_dtoa_r+0x214>
 801398a:	3f01      	subs	r7, #1
 801398c:	2300      	movs	r3, #0
 801398e:	9312      	str	r3, [sp, #72]	@ 0x48
 8013990:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013992:	1b9b      	subs	r3, r3, r6
 8013994:	1e5a      	subs	r2, r3, #1
 8013996:	bf44      	itt	mi
 8013998:	f1c3 0801 	rsbmi	r8, r3, #1
 801399c:	2300      	movmi	r3, #0
 801399e:	9208      	str	r2, [sp, #32]
 80139a0:	bf54      	ite	pl
 80139a2:	f04f 0800 	movpl.w	r8, #0
 80139a6:	9308      	strmi	r3, [sp, #32]
 80139a8:	2f00      	cmp	r7, #0
 80139aa:	db39      	blt.n	8013a20 <_dtoa_r+0x218>
 80139ac:	9b08      	ldr	r3, [sp, #32]
 80139ae:	970f      	str	r7, [sp, #60]	@ 0x3c
 80139b0:	443b      	add	r3, r7
 80139b2:	9308      	str	r3, [sp, #32]
 80139b4:	2300      	movs	r3, #0
 80139b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80139b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80139ba:	2b09      	cmp	r3, #9
 80139bc:	d864      	bhi.n	8013a88 <_dtoa_r+0x280>
 80139be:	2b05      	cmp	r3, #5
 80139c0:	bfc4      	itt	gt
 80139c2:	3b04      	subgt	r3, #4
 80139c4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80139c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80139c8:	f1a3 0302 	sub.w	r3, r3, #2
 80139cc:	bfcc      	ite	gt
 80139ce:	2400      	movgt	r4, #0
 80139d0:	2401      	movle	r4, #1
 80139d2:	2b03      	cmp	r3, #3
 80139d4:	d863      	bhi.n	8013a9e <_dtoa_r+0x296>
 80139d6:	e8df f003 	tbb	[pc, r3]
 80139da:	372a      	.short	0x372a
 80139dc:	5535      	.short	0x5535
 80139de:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80139e2:	441e      	add	r6, r3
 80139e4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80139e8:	2b20      	cmp	r3, #32
 80139ea:	bfc1      	itttt	gt
 80139ec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80139f0:	409f      	lslgt	r7, r3
 80139f2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80139f6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80139fa:	bfd6      	itet	le
 80139fc:	f1c3 0320 	rsble	r3, r3, #32
 8013a00:	ea47 0003 	orrgt.w	r0, r7, r3
 8013a04:	fa04 f003 	lslle.w	r0, r4, r3
 8013a08:	f7ec fdac 	bl	8000564 <__aeabi_ui2d>
 8013a0c:	2201      	movs	r2, #1
 8013a0e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8013a12:	3e01      	subs	r6, #1
 8013a14:	9214      	str	r2, [sp, #80]	@ 0x50
 8013a16:	e777      	b.n	8013908 <_dtoa_r+0x100>
 8013a18:	2301      	movs	r3, #1
 8013a1a:	e7b8      	b.n	801398e <_dtoa_r+0x186>
 8013a1c:	9012      	str	r0, [sp, #72]	@ 0x48
 8013a1e:	e7b7      	b.n	8013990 <_dtoa_r+0x188>
 8013a20:	427b      	negs	r3, r7
 8013a22:	930a      	str	r3, [sp, #40]	@ 0x28
 8013a24:	2300      	movs	r3, #0
 8013a26:	eba8 0807 	sub.w	r8, r8, r7
 8013a2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013a2c:	e7c4      	b.n	80139b8 <_dtoa_r+0x1b0>
 8013a2e:	2300      	movs	r3, #0
 8013a30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013a32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	dc35      	bgt.n	8013aa4 <_dtoa_r+0x29c>
 8013a38:	2301      	movs	r3, #1
 8013a3a:	9300      	str	r3, [sp, #0]
 8013a3c:	9307      	str	r3, [sp, #28]
 8013a3e:	461a      	mov	r2, r3
 8013a40:	920e      	str	r2, [sp, #56]	@ 0x38
 8013a42:	e00b      	b.n	8013a5c <_dtoa_r+0x254>
 8013a44:	2301      	movs	r3, #1
 8013a46:	e7f3      	b.n	8013a30 <_dtoa_r+0x228>
 8013a48:	2300      	movs	r3, #0
 8013a4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013a4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013a4e:	18fb      	adds	r3, r7, r3
 8013a50:	9300      	str	r3, [sp, #0]
 8013a52:	3301      	adds	r3, #1
 8013a54:	2b01      	cmp	r3, #1
 8013a56:	9307      	str	r3, [sp, #28]
 8013a58:	bfb8      	it	lt
 8013a5a:	2301      	movlt	r3, #1
 8013a5c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8013a60:	2100      	movs	r1, #0
 8013a62:	2204      	movs	r2, #4
 8013a64:	f102 0514 	add.w	r5, r2, #20
 8013a68:	429d      	cmp	r5, r3
 8013a6a:	d91f      	bls.n	8013aac <_dtoa_r+0x2a4>
 8013a6c:	6041      	str	r1, [r0, #4]
 8013a6e:	4658      	mov	r0, fp
 8013a70:	f000 fcd8 	bl	8014424 <_Balloc>
 8013a74:	4682      	mov	sl, r0
 8013a76:	2800      	cmp	r0, #0
 8013a78:	d13c      	bne.n	8013af4 <_dtoa_r+0x2ec>
 8013a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8013ae8 <_dtoa_r+0x2e0>)
 8013a7c:	4602      	mov	r2, r0
 8013a7e:	f240 11af 	movw	r1, #431	@ 0x1af
 8013a82:	e6d8      	b.n	8013836 <_dtoa_r+0x2e>
 8013a84:	2301      	movs	r3, #1
 8013a86:	e7e0      	b.n	8013a4a <_dtoa_r+0x242>
 8013a88:	2401      	movs	r4, #1
 8013a8a:	2300      	movs	r3, #0
 8013a8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8013a8e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013a90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013a94:	9300      	str	r3, [sp, #0]
 8013a96:	9307      	str	r3, [sp, #28]
 8013a98:	2200      	movs	r2, #0
 8013a9a:	2312      	movs	r3, #18
 8013a9c:	e7d0      	b.n	8013a40 <_dtoa_r+0x238>
 8013a9e:	2301      	movs	r3, #1
 8013aa0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013aa2:	e7f5      	b.n	8013a90 <_dtoa_r+0x288>
 8013aa4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013aa6:	9300      	str	r3, [sp, #0]
 8013aa8:	9307      	str	r3, [sp, #28]
 8013aaa:	e7d7      	b.n	8013a5c <_dtoa_r+0x254>
 8013aac:	3101      	adds	r1, #1
 8013aae:	0052      	lsls	r2, r2, #1
 8013ab0:	e7d8      	b.n	8013a64 <_dtoa_r+0x25c>
 8013ab2:	bf00      	nop
 8013ab4:	f3af 8000 	nop.w
 8013ab8:	636f4361 	.word	0x636f4361
 8013abc:	3fd287a7 	.word	0x3fd287a7
 8013ac0:	8b60c8b3 	.word	0x8b60c8b3
 8013ac4:	3fc68a28 	.word	0x3fc68a28
 8013ac8:	509f79fb 	.word	0x509f79fb
 8013acc:	3fd34413 	.word	0x3fd34413
 8013ad0:	080168e1 	.word	0x080168e1
 8013ad4:	080168f8 	.word	0x080168f8
 8013ad8:	7ff00000 	.word	0x7ff00000
 8013adc:	080168b1 	.word	0x080168b1
 8013ae0:	3ff80000 	.word	0x3ff80000
 8013ae4:	080169f0 	.word	0x080169f0
 8013ae8:	08016950 	.word	0x08016950
 8013aec:	080168dd 	.word	0x080168dd
 8013af0:	080168b0 	.word	0x080168b0
 8013af4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013af8:	6018      	str	r0, [r3, #0]
 8013afa:	9b07      	ldr	r3, [sp, #28]
 8013afc:	2b0e      	cmp	r3, #14
 8013afe:	f200 80a4 	bhi.w	8013c4a <_dtoa_r+0x442>
 8013b02:	2c00      	cmp	r4, #0
 8013b04:	f000 80a1 	beq.w	8013c4a <_dtoa_r+0x442>
 8013b08:	2f00      	cmp	r7, #0
 8013b0a:	dd33      	ble.n	8013b74 <_dtoa_r+0x36c>
 8013b0c:	4bad      	ldr	r3, [pc, #692]	@ (8013dc4 <_dtoa_r+0x5bc>)
 8013b0e:	f007 020f 	and.w	r2, r7, #15
 8013b12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013b16:	ed93 7b00 	vldr	d7, [r3]
 8013b1a:	05f8      	lsls	r0, r7, #23
 8013b1c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013b20:	ea4f 1427 	mov.w	r4, r7, asr #4
 8013b24:	d516      	bpl.n	8013b54 <_dtoa_r+0x34c>
 8013b26:	4ba8      	ldr	r3, [pc, #672]	@ (8013dc8 <_dtoa_r+0x5c0>)
 8013b28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013b2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013b30:	f7ec febc 	bl	80008ac <__aeabi_ddiv>
 8013b34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013b38:	f004 040f 	and.w	r4, r4, #15
 8013b3c:	2603      	movs	r6, #3
 8013b3e:	4da2      	ldr	r5, [pc, #648]	@ (8013dc8 <_dtoa_r+0x5c0>)
 8013b40:	b954      	cbnz	r4, 8013b58 <_dtoa_r+0x350>
 8013b42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013b46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013b4a:	f7ec feaf 	bl	80008ac <__aeabi_ddiv>
 8013b4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013b52:	e028      	b.n	8013ba6 <_dtoa_r+0x39e>
 8013b54:	2602      	movs	r6, #2
 8013b56:	e7f2      	b.n	8013b3e <_dtoa_r+0x336>
 8013b58:	07e1      	lsls	r1, r4, #31
 8013b5a:	d508      	bpl.n	8013b6e <_dtoa_r+0x366>
 8013b5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013b60:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013b64:	f7ec fd78 	bl	8000658 <__aeabi_dmul>
 8013b68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013b6c:	3601      	adds	r6, #1
 8013b6e:	1064      	asrs	r4, r4, #1
 8013b70:	3508      	adds	r5, #8
 8013b72:	e7e5      	b.n	8013b40 <_dtoa_r+0x338>
 8013b74:	f000 80d2 	beq.w	8013d1c <_dtoa_r+0x514>
 8013b78:	427c      	negs	r4, r7
 8013b7a:	4b92      	ldr	r3, [pc, #584]	@ (8013dc4 <_dtoa_r+0x5bc>)
 8013b7c:	4d92      	ldr	r5, [pc, #584]	@ (8013dc8 <_dtoa_r+0x5c0>)
 8013b7e:	f004 020f 	and.w	r2, r4, #15
 8013b82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013b8e:	f7ec fd63 	bl	8000658 <__aeabi_dmul>
 8013b92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013b96:	1124      	asrs	r4, r4, #4
 8013b98:	2300      	movs	r3, #0
 8013b9a:	2602      	movs	r6, #2
 8013b9c:	2c00      	cmp	r4, #0
 8013b9e:	f040 80b2 	bne.w	8013d06 <_dtoa_r+0x4fe>
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d1d3      	bne.n	8013b4e <_dtoa_r+0x346>
 8013ba6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013ba8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	f000 80b7 	beq.w	8013d20 <_dtoa_r+0x518>
 8013bb2:	4b86      	ldr	r3, [pc, #536]	@ (8013dcc <_dtoa_r+0x5c4>)
 8013bb4:	2200      	movs	r2, #0
 8013bb6:	4620      	mov	r0, r4
 8013bb8:	4629      	mov	r1, r5
 8013bba:	f7ec ffbf 	bl	8000b3c <__aeabi_dcmplt>
 8013bbe:	2800      	cmp	r0, #0
 8013bc0:	f000 80ae 	beq.w	8013d20 <_dtoa_r+0x518>
 8013bc4:	9b07      	ldr	r3, [sp, #28]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	f000 80aa 	beq.w	8013d20 <_dtoa_r+0x518>
 8013bcc:	9b00      	ldr	r3, [sp, #0]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	dd37      	ble.n	8013c42 <_dtoa_r+0x43a>
 8013bd2:	1e7b      	subs	r3, r7, #1
 8013bd4:	9304      	str	r3, [sp, #16]
 8013bd6:	4620      	mov	r0, r4
 8013bd8:	4b7d      	ldr	r3, [pc, #500]	@ (8013dd0 <_dtoa_r+0x5c8>)
 8013bda:	2200      	movs	r2, #0
 8013bdc:	4629      	mov	r1, r5
 8013bde:	f7ec fd3b 	bl	8000658 <__aeabi_dmul>
 8013be2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013be6:	9c00      	ldr	r4, [sp, #0]
 8013be8:	3601      	adds	r6, #1
 8013bea:	4630      	mov	r0, r6
 8013bec:	f7ec fcca 	bl	8000584 <__aeabi_i2d>
 8013bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013bf4:	f7ec fd30 	bl	8000658 <__aeabi_dmul>
 8013bf8:	4b76      	ldr	r3, [pc, #472]	@ (8013dd4 <_dtoa_r+0x5cc>)
 8013bfa:	2200      	movs	r2, #0
 8013bfc:	f7ec fb76 	bl	80002ec <__adddf3>
 8013c00:	4605      	mov	r5, r0
 8013c02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8013c06:	2c00      	cmp	r4, #0
 8013c08:	f040 808d 	bne.w	8013d26 <_dtoa_r+0x51e>
 8013c0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013c10:	4b71      	ldr	r3, [pc, #452]	@ (8013dd8 <_dtoa_r+0x5d0>)
 8013c12:	2200      	movs	r2, #0
 8013c14:	f7ec fb68 	bl	80002e8 <__aeabi_dsub>
 8013c18:	4602      	mov	r2, r0
 8013c1a:	460b      	mov	r3, r1
 8013c1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013c20:	462a      	mov	r2, r5
 8013c22:	4633      	mov	r3, r6
 8013c24:	f7ec ffa8 	bl	8000b78 <__aeabi_dcmpgt>
 8013c28:	2800      	cmp	r0, #0
 8013c2a:	f040 828b 	bne.w	8014144 <_dtoa_r+0x93c>
 8013c2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013c32:	462a      	mov	r2, r5
 8013c34:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8013c38:	f7ec ff80 	bl	8000b3c <__aeabi_dcmplt>
 8013c3c:	2800      	cmp	r0, #0
 8013c3e:	f040 8128 	bne.w	8013e92 <_dtoa_r+0x68a>
 8013c42:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8013c46:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8013c4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	f2c0 815a 	blt.w	8013f06 <_dtoa_r+0x6fe>
 8013c52:	2f0e      	cmp	r7, #14
 8013c54:	f300 8157 	bgt.w	8013f06 <_dtoa_r+0x6fe>
 8013c58:	4b5a      	ldr	r3, [pc, #360]	@ (8013dc4 <_dtoa_r+0x5bc>)
 8013c5a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013c5e:	ed93 7b00 	vldr	d7, [r3]
 8013c62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	ed8d 7b00 	vstr	d7, [sp]
 8013c6a:	da03      	bge.n	8013c74 <_dtoa_r+0x46c>
 8013c6c:	9b07      	ldr	r3, [sp, #28]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	f340 8101 	ble.w	8013e76 <_dtoa_r+0x66e>
 8013c74:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013c78:	4656      	mov	r6, sl
 8013c7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c7e:	4620      	mov	r0, r4
 8013c80:	4629      	mov	r1, r5
 8013c82:	f7ec fe13 	bl	80008ac <__aeabi_ddiv>
 8013c86:	f7ec ff97 	bl	8000bb8 <__aeabi_d2iz>
 8013c8a:	4680      	mov	r8, r0
 8013c8c:	f7ec fc7a 	bl	8000584 <__aeabi_i2d>
 8013c90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c94:	f7ec fce0 	bl	8000658 <__aeabi_dmul>
 8013c98:	4602      	mov	r2, r0
 8013c9a:	460b      	mov	r3, r1
 8013c9c:	4620      	mov	r0, r4
 8013c9e:	4629      	mov	r1, r5
 8013ca0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8013ca4:	f7ec fb20 	bl	80002e8 <__aeabi_dsub>
 8013ca8:	f806 4b01 	strb.w	r4, [r6], #1
 8013cac:	9d07      	ldr	r5, [sp, #28]
 8013cae:	eba6 040a 	sub.w	r4, r6, sl
 8013cb2:	42a5      	cmp	r5, r4
 8013cb4:	4602      	mov	r2, r0
 8013cb6:	460b      	mov	r3, r1
 8013cb8:	f040 8117 	bne.w	8013eea <_dtoa_r+0x6e2>
 8013cbc:	f7ec fb16 	bl	80002ec <__adddf3>
 8013cc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013cc4:	4604      	mov	r4, r0
 8013cc6:	460d      	mov	r5, r1
 8013cc8:	f7ec ff56 	bl	8000b78 <__aeabi_dcmpgt>
 8013ccc:	2800      	cmp	r0, #0
 8013cce:	f040 80f9 	bne.w	8013ec4 <_dtoa_r+0x6bc>
 8013cd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013cd6:	4620      	mov	r0, r4
 8013cd8:	4629      	mov	r1, r5
 8013cda:	f7ec ff25 	bl	8000b28 <__aeabi_dcmpeq>
 8013cde:	b118      	cbz	r0, 8013ce8 <_dtoa_r+0x4e0>
 8013ce0:	f018 0f01 	tst.w	r8, #1
 8013ce4:	f040 80ee 	bne.w	8013ec4 <_dtoa_r+0x6bc>
 8013ce8:	4649      	mov	r1, r9
 8013cea:	4658      	mov	r0, fp
 8013cec:	f000 fbda 	bl	80144a4 <_Bfree>
 8013cf0:	2300      	movs	r3, #0
 8013cf2:	7033      	strb	r3, [r6, #0]
 8013cf4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013cf6:	3701      	adds	r7, #1
 8013cf8:	601f      	str	r7, [r3, #0]
 8013cfa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	f000 831d 	beq.w	801433c <_dtoa_r+0xb34>
 8013d02:	601e      	str	r6, [r3, #0]
 8013d04:	e31a      	b.n	801433c <_dtoa_r+0xb34>
 8013d06:	07e2      	lsls	r2, r4, #31
 8013d08:	d505      	bpl.n	8013d16 <_dtoa_r+0x50e>
 8013d0a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013d0e:	f7ec fca3 	bl	8000658 <__aeabi_dmul>
 8013d12:	3601      	adds	r6, #1
 8013d14:	2301      	movs	r3, #1
 8013d16:	1064      	asrs	r4, r4, #1
 8013d18:	3508      	adds	r5, #8
 8013d1a:	e73f      	b.n	8013b9c <_dtoa_r+0x394>
 8013d1c:	2602      	movs	r6, #2
 8013d1e:	e742      	b.n	8013ba6 <_dtoa_r+0x39e>
 8013d20:	9c07      	ldr	r4, [sp, #28]
 8013d22:	9704      	str	r7, [sp, #16]
 8013d24:	e761      	b.n	8013bea <_dtoa_r+0x3e2>
 8013d26:	4b27      	ldr	r3, [pc, #156]	@ (8013dc4 <_dtoa_r+0x5bc>)
 8013d28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013d2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013d2e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013d32:	4454      	add	r4, sl
 8013d34:	2900      	cmp	r1, #0
 8013d36:	d053      	beq.n	8013de0 <_dtoa_r+0x5d8>
 8013d38:	4928      	ldr	r1, [pc, #160]	@ (8013ddc <_dtoa_r+0x5d4>)
 8013d3a:	2000      	movs	r0, #0
 8013d3c:	f7ec fdb6 	bl	80008ac <__aeabi_ddiv>
 8013d40:	4633      	mov	r3, r6
 8013d42:	462a      	mov	r2, r5
 8013d44:	f7ec fad0 	bl	80002e8 <__aeabi_dsub>
 8013d48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013d4c:	4656      	mov	r6, sl
 8013d4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013d52:	f7ec ff31 	bl	8000bb8 <__aeabi_d2iz>
 8013d56:	4605      	mov	r5, r0
 8013d58:	f7ec fc14 	bl	8000584 <__aeabi_i2d>
 8013d5c:	4602      	mov	r2, r0
 8013d5e:	460b      	mov	r3, r1
 8013d60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013d64:	f7ec fac0 	bl	80002e8 <__aeabi_dsub>
 8013d68:	3530      	adds	r5, #48	@ 0x30
 8013d6a:	4602      	mov	r2, r0
 8013d6c:	460b      	mov	r3, r1
 8013d6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013d72:	f806 5b01 	strb.w	r5, [r6], #1
 8013d76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013d7a:	f7ec fedf 	bl	8000b3c <__aeabi_dcmplt>
 8013d7e:	2800      	cmp	r0, #0
 8013d80:	d171      	bne.n	8013e66 <_dtoa_r+0x65e>
 8013d82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013d86:	4911      	ldr	r1, [pc, #68]	@ (8013dcc <_dtoa_r+0x5c4>)
 8013d88:	2000      	movs	r0, #0
 8013d8a:	f7ec faad 	bl	80002e8 <__aeabi_dsub>
 8013d8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013d92:	f7ec fed3 	bl	8000b3c <__aeabi_dcmplt>
 8013d96:	2800      	cmp	r0, #0
 8013d98:	f040 8095 	bne.w	8013ec6 <_dtoa_r+0x6be>
 8013d9c:	42a6      	cmp	r6, r4
 8013d9e:	f43f af50 	beq.w	8013c42 <_dtoa_r+0x43a>
 8013da2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013da6:	4b0a      	ldr	r3, [pc, #40]	@ (8013dd0 <_dtoa_r+0x5c8>)
 8013da8:	2200      	movs	r2, #0
 8013daa:	f7ec fc55 	bl	8000658 <__aeabi_dmul>
 8013dae:	4b08      	ldr	r3, [pc, #32]	@ (8013dd0 <_dtoa_r+0x5c8>)
 8013db0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013db4:	2200      	movs	r2, #0
 8013db6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013dba:	f7ec fc4d 	bl	8000658 <__aeabi_dmul>
 8013dbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013dc2:	e7c4      	b.n	8013d4e <_dtoa_r+0x546>
 8013dc4:	080169f0 	.word	0x080169f0
 8013dc8:	080169c8 	.word	0x080169c8
 8013dcc:	3ff00000 	.word	0x3ff00000
 8013dd0:	40240000 	.word	0x40240000
 8013dd4:	401c0000 	.word	0x401c0000
 8013dd8:	40140000 	.word	0x40140000
 8013ddc:	3fe00000 	.word	0x3fe00000
 8013de0:	4631      	mov	r1, r6
 8013de2:	4628      	mov	r0, r5
 8013de4:	f7ec fc38 	bl	8000658 <__aeabi_dmul>
 8013de8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013dec:	9415      	str	r4, [sp, #84]	@ 0x54
 8013dee:	4656      	mov	r6, sl
 8013df0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013df4:	f7ec fee0 	bl	8000bb8 <__aeabi_d2iz>
 8013df8:	4605      	mov	r5, r0
 8013dfa:	f7ec fbc3 	bl	8000584 <__aeabi_i2d>
 8013dfe:	4602      	mov	r2, r0
 8013e00:	460b      	mov	r3, r1
 8013e02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013e06:	f7ec fa6f 	bl	80002e8 <__aeabi_dsub>
 8013e0a:	3530      	adds	r5, #48	@ 0x30
 8013e0c:	f806 5b01 	strb.w	r5, [r6], #1
 8013e10:	4602      	mov	r2, r0
 8013e12:	460b      	mov	r3, r1
 8013e14:	42a6      	cmp	r6, r4
 8013e16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013e1a:	f04f 0200 	mov.w	r2, #0
 8013e1e:	d124      	bne.n	8013e6a <_dtoa_r+0x662>
 8013e20:	4bac      	ldr	r3, [pc, #688]	@ (80140d4 <_dtoa_r+0x8cc>)
 8013e22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013e26:	f7ec fa61 	bl	80002ec <__adddf3>
 8013e2a:	4602      	mov	r2, r0
 8013e2c:	460b      	mov	r3, r1
 8013e2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013e32:	f7ec fea1 	bl	8000b78 <__aeabi_dcmpgt>
 8013e36:	2800      	cmp	r0, #0
 8013e38:	d145      	bne.n	8013ec6 <_dtoa_r+0x6be>
 8013e3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013e3e:	49a5      	ldr	r1, [pc, #660]	@ (80140d4 <_dtoa_r+0x8cc>)
 8013e40:	2000      	movs	r0, #0
 8013e42:	f7ec fa51 	bl	80002e8 <__aeabi_dsub>
 8013e46:	4602      	mov	r2, r0
 8013e48:	460b      	mov	r3, r1
 8013e4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013e4e:	f7ec fe75 	bl	8000b3c <__aeabi_dcmplt>
 8013e52:	2800      	cmp	r0, #0
 8013e54:	f43f aef5 	beq.w	8013c42 <_dtoa_r+0x43a>
 8013e58:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8013e5a:	1e73      	subs	r3, r6, #1
 8013e5c:	9315      	str	r3, [sp, #84]	@ 0x54
 8013e5e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013e62:	2b30      	cmp	r3, #48	@ 0x30
 8013e64:	d0f8      	beq.n	8013e58 <_dtoa_r+0x650>
 8013e66:	9f04      	ldr	r7, [sp, #16]
 8013e68:	e73e      	b.n	8013ce8 <_dtoa_r+0x4e0>
 8013e6a:	4b9b      	ldr	r3, [pc, #620]	@ (80140d8 <_dtoa_r+0x8d0>)
 8013e6c:	f7ec fbf4 	bl	8000658 <__aeabi_dmul>
 8013e70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013e74:	e7bc      	b.n	8013df0 <_dtoa_r+0x5e8>
 8013e76:	d10c      	bne.n	8013e92 <_dtoa_r+0x68a>
 8013e78:	4b98      	ldr	r3, [pc, #608]	@ (80140dc <_dtoa_r+0x8d4>)
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013e80:	f7ec fbea 	bl	8000658 <__aeabi_dmul>
 8013e84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013e88:	f7ec fe6c 	bl	8000b64 <__aeabi_dcmpge>
 8013e8c:	2800      	cmp	r0, #0
 8013e8e:	f000 8157 	beq.w	8014140 <_dtoa_r+0x938>
 8013e92:	2400      	movs	r4, #0
 8013e94:	4625      	mov	r5, r4
 8013e96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013e98:	43db      	mvns	r3, r3
 8013e9a:	9304      	str	r3, [sp, #16]
 8013e9c:	4656      	mov	r6, sl
 8013e9e:	2700      	movs	r7, #0
 8013ea0:	4621      	mov	r1, r4
 8013ea2:	4658      	mov	r0, fp
 8013ea4:	f000 fafe 	bl	80144a4 <_Bfree>
 8013ea8:	2d00      	cmp	r5, #0
 8013eaa:	d0dc      	beq.n	8013e66 <_dtoa_r+0x65e>
 8013eac:	b12f      	cbz	r7, 8013eba <_dtoa_r+0x6b2>
 8013eae:	42af      	cmp	r7, r5
 8013eb0:	d003      	beq.n	8013eba <_dtoa_r+0x6b2>
 8013eb2:	4639      	mov	r1, r7
 8013eb4:	4658      	mov	r0, fp
 8013eb6:	f000 faf5 	bl	80144a4 <_Bfree>
 8013eba:	4629      	mov	r1, r5
 8013ebc:	4658      	mov	r0, fp
 8013ebe:	f000 faf1 	bl	80144a4 <_Bfree>
 8013ec2:	e7d0      	b.n	8013e66 <_dtoa_r+0x65e>
 8013ec4:	9704      	str	r7, [sp, #16]
 8013ec6:	4633      	mov	r3, r6
 8013ec8:	461e      	mov	r6, r3
 8013eca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013ece:	2a39      	cmp	r2, #57	@ 0x39
 8013ed0:	d107      	bne.n	8013ee2 <_dtoa_r+0x6da>
 8013ed2:	459a      	cmp	sl, r3
 8013ed4:	d1f8      	bne.n	8013ec8 <_dtoa_r+0x6c0>
 8013ed6:	9a04      	ldr	r2, [sp, #16]
 8013ed8:	3201      	adds	r2, #1
 8013eda:	9204      	str	r2, [sp, #16]
 8013edc:	2230      	movs	r2, #48	@ 0x30
 8013ede:	f88a 2000 	strb.w	r2, [sl]
 8013ee2:	781a      	ldrb	r2, [r3, #0]
 8013ee4:	3201      	adds	r2, #1
 8013ee6:	701a      	strb	r2, [r3, #0]
 8013ee8:	e7bd      	b.n	8013e66 <_dtoa_r+0x65e>
 8013eea:	4b7b      	ldr	r3, [pc, #492]	@ (80140d8 <_dtoa_r+0x8d0>)
 8013eec:	2200      	movs	r2, #0
 8013eee:	f7ec fbb3 	bl	8000658 <__aeabi_dmul>
 8013ef2:	2200      	movs	r2, #0
 8013ef4:	2300      	movs	r3, #0
 8013ef6:	4604      	mov	r4, r0
 8013ef8:	460d      	mov	r5, r1
 8013efa:	f7ec fe15 	bl	8000b28 <__aeabi_dcmpeq>
 8013efe:	2800      	cmp	r0, #0
 8013f00:	f43f aebb 	beq.w	8013c7a <_dtoa_r+0x472>
 8013f04:	e6f0      	b.n	8013ce8 <_dtoa_r+0x4e0>
 8013f06:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013f08:	2a00      	cmp	r2, #0
 8013f0a:	f000 80db 	beq.w	80140c4 <_dtoa_r+0x8bc>
 8013f0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013f10:	2a01      	cmp	r2, #1
 8013f12:	f300 80bf 	bgt.w	8014094 <_dtoa_r+0x88c>
 8013f16:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013f18:	2a00      	cmp	r2, #0
 8013f1a:	f000 80b7 	beq.w	801408c <_dtoa_r+0x884>
 8013f1e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8013f22:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013f24:	4646      	mov	r6, r8
 8013f26:	9a08      	ldr	r2, [sp, #32]
 8013f28:	2101      	movs	r1, #1
 8013f2a:	441a      	add	r2, r3
 8013f2c:	4658      	mov	r0, fp
 8013f2e:	4498      	add	r8, r3
 8013f30:	9208      	str	r2, [sp, #32]
 8013f32:	f000 fb6b 	bl	801460c <__i2b>
 8013f36:	4605      	mov	r5, r0
 8013f38:	b15e      	cbz	r6, 8013f52 <_dtoa_r+0x74a>
 8013f3a:	9b08      	ldr	r3, [sp, #32]
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	dd08      	ble.n	8013f52 <_dtoa_r+0x74a>
 8013f40:	42b3      	cmp	r3, r6
 8013f42:	9a08      	ldr	r2, [sp, #32]
 8013f44:	bfa8      	it	ge
 8013f46:	4633      	movge	r3, r6
 8013f48:	eba8 0803 	sub.w	r8, r8, r3
 8013f4c:	1af6      	subs	r6, r6, r3
 8013f4e:	1ad3      	subs	r3, r2, r3
 8013f50:	9308      	str	r3, [sp, #32]
 8013f52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013f54:	b1f3      	cbz	r3, 8013f94 <_dtoa_r+0x78c>
 8013f56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	f000 80b7 	beq.w	80140cc <_dtoa_r+0x8c4>
 8013f5e:	b18c      	cbz	r4, 8013f84 <_dtoa_r+0x77c>
 8013f60:	4629      	mov	r1, r5
 8013f62:	4622      	mov	r2, r4
 8013f64:	4658      	mov	r0, fp
 8013f66:	f000 fc11 	bl	801478c <__pow5mult>
 8013f6a:	464a      	mov	r2, r9
 8013f6c:	4601      	mov	r1, r0
 8013f6e:	4605      	mov	r5, r0
 8013f70:	4658      	mov	r0, fp
 8013f72:	f000 fb61 	bl	8014638 <__multiply>
 8013f76:	4649      	mov	r1, r9
 8013f78:	9004      	str	r0, [sp, #16]
 8013f7a:	4658      	mov	r0, fp
 8013f7c:	f000 fa92 	bl	80144a4 <_Bfree>
 8013f80:	9b04      	ldr	r3, [sp, #16]
 8013f82:	4699      	mov	r9, r3
 8013f84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013f86:	1b1a      	subs	r2, r3, r4
 8013f88:	d004      	beq.n	8013f94 <_dtoa_r+0x78c>
 8013f8a:	4649      	mov	r1, r9
 8013f8c:	4658      	mov	r0, fp
 8013f8e:	f000 fbfd 	bl	801478c <__pow5mult>
 8013f92:	4681      	mov	r9, r0
 8013f94:	2101      	movs	r1, #1
 8013f96:	4658      	mov	r0, fp
 8013f98:	f000 fb38 	bl	801460c <__i2b>
 8013f9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013f9e:	4604      	mov	r4, r0
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	f000 81cf 	beq.w	8014344 <_dtoa_r+0xb3c>
 8013fa6:	461a      	mov	r2, r3
 8013fa8:	4601      	mov	r1, r0
 8013faa:	4658      	mov	r0, fp
 8013fac:	f000 fbee 	bl	801478c <__pow5mult>
 8013fb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013fb2:	2b01      	cmp	r3, #1
 8013fb4:	4604      	mov	r4, r0
 8013fb6:	f300 8095 	bgt.w	80140e4 <_dtoa_r+0x8dc>
 8013fba:	9b02      	ldr	r3, [sp, #8]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	f040 8087 	bne.w	80140d0 <_dtoa_r+0x8c8>
 8013fc2:	9b03      	ldr	r3, [sp, #12]
 8013fc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	f040 8089 	bne.w	80140e0 <_dtoa_r+0x8d8>
 8013fce:	9b03      	ldr	r3, [sp, #12]
 8013fd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013fd4:	0d1b      	lsrs	r3, r3, #20
 8013fd6:	051b      	lsls	r3, r3, #20
 8013fd8:	b12b      	cbz	r3, 8013fe6 <_dtoa_r+0x7de>
 8013fda:	9b08      	ldr	r3, [sp, #32]
 8013fdc:	3301      	adds	r3, #1
 8013fde:	9308      	str	r3, [sp, #32]
 8013fe0:	f108 0801 	add.w	r8, r8, #1
 8013fe4:	2301      	movs	r3, #1
 8013fe6:	930a      	str	r3, [sp, #40]	@ 0x28
 8013fe8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	f000 81b0 	beq.w	8014350 <_dtoa_r+0xb48>
 8013ff0:	6923      	ldr	r3, [r4, #16]
 8013ff2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013ff6:	6918      	ldr	r0, [r3, #16]
 8013ff8:	f000 fabc 	bl	8014574 <__hi0bits>
 8013ffc:	f1c0 0020 	rsb	r0, r0, #32
 8014000:	9b08      	ldr	r3, [sp, #32]
 8014002:	4418      	add	r0, r3
 8014004:	f010 001f 	ands.w	r0, r0, #31
 8014008:	d077      	beq.n	80140fa <_dtoa_r+0x8f2>
 801400a:	f1c0 0320 	rsb	r3, r0, #32
 801400e:	2b04      	cmp	r3, #4
 8014010:	dd6b      	ble.n	80140ea <_dtoa_r+0x8e2>
 8014012:	9b08      	ldr	r3, [sp, #32]
 8014014:	f1c0 001c 	rsb	r0, r0, #28
 8014018:	4403      	add	r3, r0
 801401a:	4480      	add	r8, r0
 801401c:	4406      	add	r6, r0
 801401e:	9308      	str	r3, [sp, #32]
 8014020:	f1b8 0f00 	cmp.w	r8, #0
 8014024:	dd05      	ble.n	8014032 <_dtoa_r+0x82a>
 8014026:	4649      	mov	r1, r9
 8014028:	4642      	mov	r2, r8
 801402a:	4658      	mov	r0, fp
 801402c:	f000 fc08 	bl	8014840 <__lshift>
 8014030:	4681      	mov	r9, r0
 8014032:	9b08      	ldr	r3, [sp, #32]
 8014034:	2b00      	cmp	r3, #0
 8014036:	dd05      	ble.n	8014044 <_dtoa_r+0x83c>
 8014038:	4621      	mov	r1, r4
 801403a:	461a      	mov	r2, r3
 801403c:	4658      	mov	r0, fp
 801403e:	f000 fbff 	bl	8014840 <__lshift>
 8014042:	4604      	mov	r4, r0
 8014044:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014046:	2b00      	cmp	r3, #0
 8014048:	d059      	beq.n	80140fe <_dtoa_r+0x8f6>
 801404a:	4621      	mov	r1, r4
 801404c:	4648      	mov	r0, r9
 801404e:	f000 fc63 	bl	8014918 <__mcmp>
 8014052:	2800      	cmp	r0, #0
 8014054:	da53      	bge.n	80140fe <_dtoa_r+0x8f6>
 8014056:	1e7b      	subs	r3, r7, #1
 8014058:	9304      	str	r3, [sp, #16]
 801405a:	4649      	mov	r1, r9
 801405c:	2300      	movs	r3, #0
 801405e:	220a      	movs	r2, #10
 8014060:	4658      	mov	r0, fp
 8014062:	f000 fa41 	bl	80144e8 <__multadd>
 8014066:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014068:	4681      	mov	r9, r0
 801406a:	2b00      	cmp	r3, #0
 801406c:	f000 8172 	beq.w	8014354 <_dtoa_r+0xb4c>
 8014070:	2300      	movs	r3, #0
 8014072:	4629      	mov	r1, r5
 8014074:	220a      	movs	r2, #10
 8014076:	4658      	mov	r0, fp
 8014078:	f000 fa36 	bl	80144e8 <__multadd>
 801407c:	9b00      	ldr	r3, [sp, #0]
 801407e:	2b00      	cmp	r3, #0
 8014080:	4605      	mov	r5, r0
 8014082:	dc67      	bgt.n	8014154 <_dtoa_r+0x94c>
 8014084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014086:	2b02      	cmp	r3, #2
 8014088:	dc41      	bgt.n	801410e <_dtoa_r+0x906>
 801408a:	e063      	b.n	8014154 <_dtoa_r+0x94c>
 801408c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801408e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8014092:	e746      	b.n	8013f22 <_dtoa_r+0x71a>
 8014094:	9b07      	ldr	r3, [sp, #28]
 8014096:	1e5c      	subs	r4, r3, #1
 8014098:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801409a:	42a3      	cmp	r3, r4
 801409c:	bfbf      	itttt	lt
 801409e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80140a0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80140a2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80140a4:	1ae3      	sublt	r3, r4, r3
 80140a6:	bfb4      	ite	lt
 80140a8:	18d2      	addlt	r2, r2, r3
 80140aa:	1b1c      	subge	r4, r3, r4
 80140ac:	9b07      	ldr	r3, [sp, #28]
 80140ae:	bfbc      	itt	lt
 80140b0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80140b2:	2400      	movlt	r4, #0
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	bfb5      	itete	lt
 80140b8:	eba8 0603 	sublt.w	r6, r8, r3
 80140bc:	9b07      	ldrge	r3, [sp, #28]
 80140be:	2300      	movlt	r3, #0
 80140c0:	4646      	movge	r6, r8
 80140c2:	e730      	b.n	8013f26 <_dtoa_r+0x71e>
 80140c4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80140c6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80140c8:	4646      	mov	r6, r8
 80140ca:	e735      	b.n	8013f38 <_dtoa_r+0x730>
 80140cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80140ce:	e75c      	b.n	8013f8a <_dtoa_r+0x782>
 80140d0:	2300      	movs	r3, #0
 80140d2:	e788      	b.n	8013fe6 <_dtoa_r+0x7de>
 80140d4:	3fe00000 	.word	0x3fe00000
 80140d8:	40240000 	.word	0x40240000
 80140dc:	40140000 	.word	0x40140000
 80140e0:	9b02      	ldr	r3, [sp, #8]
 80140e2:	e780      	b.n	8013fe6 <_dtoa_r+0x7de>
 80140e4:	2300      	movs	r3, #0
 80140e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80140e8:	e782      	b.n	8013ff0 <_dtoa_r+0x7e8>
 80140ea:	d099      	beq.n	8014020 <_dtoa_r+0x818>
 80140ec:	9a08      	ldr	r2, [sp, #32]
 80140ee:	331c      	adds	r3, #28
 80140f0:	441a      	add	r2, r3
 80140f2:	4498      	add	r8, r3
 80140f4:	441e      	add	r6, r3
 80140f6:	9208      	str	r2, [sp, #32]
 80140f8:	e792      	b.n	8014020 <_dtoa_r+0x818>
 80140fa:	4603      	mov	r3, r0
 80140fc:	e7f6      	b.n	80140ec <_dtoa_r+0x8e4>
 80140fe:	9b07      	ldr	r3, [sp, #28]
 8014100:	9704      	str	r7, [sp, #16]
 8014102:	2b00      	cmp	r3, #0
 8014104:	dc20      	bgt.n	8014148 <_dtoa_r+0x940>
 8014106:	9300      	str	r3, [sp, #0]
 8014108:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801410a:	2b02      	cmp	r3, #2
 801410c:	dd1e      	ble.n	801414c <_dtoa_r+0x944>
 801410e:	9b00      	ldr	r3, [sp, #0]
 8014110:	2b00      	cmp	r3, #0
 8014112:	f47f aec0 	bne.w	8013e96 <_dtoa_r+0x68e>
 8014116:	4621      	mov	r1, r4
 8014118:	2205      	movs	r2, #5
 801411a:	4658      	mov	r0, fp
 801411c:	f000 f9e4 	bl	80144e8 <__multadd>
 8014120:	4601      	mov	r1, r0
 8014122:	4604      	mov	r4, r0
 8014124:	4648      	mov	r0, r9
 8014126:	f000 fbf7 	bl	8014918 <__mcmp>
 801412a:	2800      	cmp	r0, #0
 801412c:	f77f aeb3 	ble.w	8013e96 <_dtoa_r+0x68e>
 8014130:	4656      	mov	r6, sl
 8014132:	2331      	movs	r3, #49	@ 0x31
 8014134:	f806 3b01 	strb.w	r3, [r6], #1
 8014138:	9b04      	ldr	r3, [sp, #16]
 801413a:	3301      	adds	r3, #1
 801413c:	9304      	str	r3, [sp, #16]
 801413e:	e6ae      	b.n	8013e9e <_dtoa_r+0x696>
 8014140:	9c07      	ldr	r4, [sp, #28]
 8014142:	9704      	str	r7, [sp, #16]
 8014144:	4625      	mov	r5, r4
 8014146:	e7f3      	b.n	8014130 <_dtoa_r+0x928>
 8014148:	9b07      	ldr	r3, [sp, #28]
 801414a:	9300      	str	r3, [sp, #0]
 801414c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801414e:	2b00      	cmp	r3, #0
 8014150:	f000 8104 	beq.w	801435c <_dtoa_r+0xb54>
 8014154:	2e00      	cmp	r6, #0
 8014156:	dd05      	ble.n	8014164 <_dtoa_r+0x95c>
 8014158:	4629      	mov	r1, r5
 801415a:	4632      	mov	r2, r6
 801415c:	4658      	mov	r0, fp
 801415e:	f000 fb6f 	bl	8014840 <__lshift>
 8014162:	4605      	mov	r5, r0
 8014164:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014166:	2b00      	cmp	r3, #0
 8014168:	d05a      	beq.n	8014220 <_dtoa_r+0xa18>
 801416a:	6869      	ldr	r1, [r5, #4]
 801416c:	4658      	mov	r0, fp
 801416e:	f000 f959 	bl	8014424 <_Balloc>
 8014172:	4606      	mov	r6, r0
 8014174:	b928      	cbnz	r0, 8014182 <_dtoa_r+0x97a>
 8014176:	4b84      	ldr	r3, [pc, #528]	@ (8014388 <_dtoa_r+0xb80>)
 8014178:	4602      	mov	r2, r0
 801417a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801417e:	f7ff bb5a 	b.w	8013836 <_dtoa_r+0x2e>
 8014182:	692a      	ldr	r2, [r5, #16]
 8014184:	3202      	adds	r2, #2
 8014186:	0092      	lsls	r2, r2, #2
 8014188:	f105 010c 	add.w	r1, r5, #12
 801418c:	300c      	adds	r0, #12
 801418e:	f7ff faa2 	bl	80136d6 <memcpy>
 8014192:	2201      	movs	r2, #1
 8014194:	4631      	mov	r1, r6
 8014196:	4658      	mov	r0, fp
 8014198:	f000 fb52 	bl	8014840 <__lshift>
 801419c:	f10a 0301 	add.w	r3, sl, #1
 80141a0:	9307      	str	r3, [sp, #28]
 80141a2:	9b00      	ldr	r3, [sp, #0]
 80141a4:	4453      	add	r3, sl
 80141a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80141a8:	9b02      	ldr	r3, [sp, #8]
 80141aa:	f003 0301 	and.w	r3, r3, #1
 80141ae:	462f      	mov	r7, r5
 80141b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80141b2:	4605      	mov	r5, r0
 80141b4:	9b07      	ldr	r3, [sp, #28]
 80141b6:	4621      	mov	r1, r4
 80141b8:	3b01      	subs	r3, #1
 80141ba:	4648      	mov	r0, r9
 80141bc:	9300      	str	r3, [sp, #0]
 80141be:	f7ff fa98 	bl	80136f2 <quorem>
 80141c2:	4639      	mov	r1, r7
 80141c4:	9002      	str	r0, [sp, #8]
 80141c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80141ca:	4648      	mov	r0, r9
 80141cc:	f000 fba4 	bl	8014918 <__mcmp>
 80141d0:	462a      	mov	r2, r5
 80141d2:	9008      	str	r0, [sp, #32]
 80141d4:	4621      	mov	r1, r4
 80141d6:	4658      	mov	r0, fp
 80141d8:	f000 fbba 	bl	8014950 <__mdiff>
 80141dc:	68c2      	ldr	r2, [r0, #12]
 80141de:	4606      	mov	r6, r0
 80141e0:	bb02      	cbnz	r2, 8014224 <_dtoa_r+0xa1c>
 80141e2:	4601      	mov	r1, r0
 80141e4:	4648      	mov	r0, r9
 80141e6:	f000 fb97 	bl	8014918 <__mcmp>
 80141ea:	4602      	mov	r2, r0
 80141ec:	4631      	mov	r1, r6
 80141ee:	4658      	mov	r0, fp
 80141f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80141f2:	f000 f957 	bl	80144a4 <_Bfree>
 80141f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80141f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80141fa:	9e07      	ldr	r6, [sp, #28]
 80141fc:	ea43 0102 	orr.w	r1, r3, r2
 8014200:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014202:	4319      	orrs	r1, r3
 8014204:	d110      	bne.n	8014228 <_dtoa_r+0xa20>
 8014206:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801420a:	d029      	beq.n	8014260 <_dtoa_r+0xa58>
 801420c:	9b08      	ldr	r3, [sp, #32]
 801420e:	2b00      	cmp	r3, #0
 8014210:	dd02      	ble.n	8014218 <_dtoa_r+0xa10>
 8014212:	9b02      	ldr	r3, [sp, #8]
 8014214:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8014218:	9b00      	ldr	r3, [sp, #0]
 801421a:	f883 8000 	strb.w	r8, [r3]
 801421e:	e63f      	b.n	8013ea0 <_dtoa_r+0x698>
 8014220:	4628      	mov	r0, r5
 8014222:	e7bb      	b.n	801419c <_dtoa_r+0x994>
 8014224:	2201      	movs	r2, #1
 8014226:	e7e1      	b.n	80141ec <_dtoa_r+0x9e4>
 8014228:	9b08      	ldr	r3, [sp, #32]
 801422a:	2b00      	cmp	r3, #0
 801422c:	db04      	blt.n	8014238 <_dtoa_r+0xa30>
 801422e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014230:	430b      	orrs	r3, r1
 8014232:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8014234:	430b      	orrs	r3, r1
 8014236:	d120      	bne.n	801427a <_dtoa_r+0xa72>
 8014238:	2a00      	cmp	r2, #0
 801423a:	dded      	ble.n	8014218 <_dtoa_r+0xa10>
 801423c:	4649      	mov	r1, r9
 801423e:	2201      	movs	r2, #1
 8014240:	4658      	mov	r0, fp
 8014242:	f000 fafd 	bl	8014840 <__lshift>
 8014246:	4621      	mov	r1, r4
 8014248:	4681      	mov	r9, r0
 801424a:	f000 fb65 	bl	8014918 <__mcmp>
 801424e:	2800      	cmp	r0, #0
 8014250:	dc03      	bgt.n	801425a <_dtoa_r+0xa52>
 8014252:	d1e1      	bne.n	8014218 <_dtoa_r+0xa10>
 8014254:	f018 0f01 	tst.w	r8, #1
 8014258:	d0de      	beq.n	8014218 <_dtoa_r+0xa10>
 801425a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801425e:	d1d8      	bne.n	8014212 <_dtoa_r+0xa0a>
 8014260:	9a00      	ldr	r2, [sp, #0]
 8014262:	2339      	movs	r3, #57	@ 0x39
 8014264:	7013      	strb	r3, [r2, #0]
 8014266:	4633      	mov	r3, r6
 8014268:	461e      	mov	r6, r3
 801426a:	3b01      	subs	r3, #1
 801426c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014270:	2a39      	cmp	r2, #57	@ 0x39
 8014272:	d052      	beq.n	801431a <_dtoa_r+0xb12>
 8014274:	3201      	adds	r2, #1
 8014276:	701a      	strb	r2, [r3, #0]
 8014278:	e612      	b.n	8013ea0 <_dtoa_r+0x698>
 801427a:	2a00      	cmp	r2, #0
 801427c:	dd07      	ble.n	801428e <_dtoa_r+0xa86>
 801427e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8014282:	d0ed      	beq.n	8014260 <_dtoa_r+0xa58>
 8014284:	9a00      	ldr	r2, [sp, #0]
 8014286:	f108 0301 	add.w	r3, r8, #1
 801428a:	7013      	strb	r3, [r2, #0]
 801428c:	e608      	b.n	8013ea0 <_dtoa_r+0x698>
 801428e:	9b07      	ldr	r3, [sp, #28]
 8014290:	9a07      	ldr	r2, [sp, #28]
 8014292:	f803 8c01 	strb.w	r8, [r3, #-1]
 8014296:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014298:	4293      	cmp	r3, r2
 801429a:	d028      	beq.n	80142ee <_dtoa_r+0xae6>
 801429c:	4649      	mov	r1, r9
 801429e:	2300      	movs	r3, #0
 80142a0:	220a      	movs	r2, #10
 80142a2:	4658      	mov	r0, fp
 80142a4:	f000 f920 	bl	80144e8 <__multadd>
 80142a8:	42af      	cmp	r7, r5
 80142aa:	4681      	mov	r9, r0
 80142ac:	f04f 0300 	mov.w	r3, #0
 80142b0:	f04f 020a 	mov.w	r2, #10
 80142b4:	4639      	mov	r1, r7
 80142b6:	4658      	mov	r0, fp
 80142b8:	d107      	bne.n	80142ca <_dtoa_r+0xac2>
 80142ba:	f000 f915 	bl	80144e8 <__multadd>
 80142be:	4607      	mov	r7, r0
 80142c0:	4605      	mov	r5, r0
 80142c2:	9b07      	ldr	r3, [sp, #28]
 80142c4:	3301      	adds	r3, #1
 80142c6:	9307      	str	r3, [sp, #28]
 80142c8:	e774      	b.n	80141b4 <_dtoa_r+0x9ac>
 80142ca:	f000 f90d 	bl	80144e8 <__multadd>
 80142ce:	4629      	mov	r1, r5
 80142d0:	4607      	mov	r7, r0
 80142d2:	2300      	movs	r3, #0
 80142d4:	220a      	movs	r2, #10
 80142d6:	4658      	mov	r0, fp
 80142d8:	f000 f906 	bl	80144e8 <__multadd>
 80142dc:	4605      	mov	r5, r0
 80142de:	e7f0      	b.n	80142c2 <_dtoa_r+0xaba>
 80142e0:	9b00      	ldr	r3, [sp, #0]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	bfcc      	ite	gt
 80142e6:	461e      	movgt	r6, r3
 80142e8:	2601      	movle	r6, #1
 80142ea:	4456      	add	r6, sl
 80142ec:	2700      	movs	r7, #0
 80142ee:	4649      	mov	r1, r9
 80142f0:	2201      	movs	r2, #1
 80142f2:	4658      	mov	r0, fp
 80142f4:	f000 faa4 	bl	8014840 <__lshift>
 80142f8:	4621      	mov	r1, r4
 80142fa:	4681      	mov	r9, r0
 80142fc:	f000 fb0c 	bl	8014918 <__mcmp>
 8014300:	2800      	cmp	r0, #0
 8014302:	dcb0      	bgt.n	8014266 <_dtoa_r+0xa5e>
 8014304:	d102      	bne.n	801430c <_dtoa_r+0xb04>
 8014306:	f018 0f01 	tst.w	r8, #1
 801430a:	d1ac      	bne.n	8014266 <_dtoa_r+0xa5e>
 801430c:	4633      	mov	r3, r6
 801430e:	461e      	mov	r6, r3
 8014310:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014314:	2a30      	cmp	r2, #48	@ 0x30
 8014316:	d0fa      	beq.n	801430e <_dtoa_r+0xb06>
 8014318:	e5c2      	b.n	8013ea0 <_dtoa_r+0x698>
 801431a:	459a      	cmp	sl, r3
 801431c:	d1a4      	bne.n	8014268 <_dtoa_r+0xa60>
 801431e:	9b04      	ldr	r3, [sp, #16]
 8014320:	3301      	adds	r3, #1
 8014322:	9304      	str	r3, [sp, #16]
 8014324:	2331      	movs	r3, #49	@ 0x31
 8014326:	f88a 3000 	strb.w	r3, [sl]
 801432a:	e5b9      	b.n	8013ea0 <_dtoa_r+0x698>
 801432c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801432e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801438c <_dtoa_r+0xb84>
 8014332:	b11b      	cbz	r3, 801433c <_dtoa_r+0xb34>
 8014334:	f10a 0308 	add.w	r3, sl, #8
 8014338:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801433a:	6013      	str	r3, [r2, #0]
 801433c:	4650      	mov	r0, sl
 801433e:	b019      	add	sp, #100	@ 0x64
 8014340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014344:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014346:	2b01      	cmp	r3, #1
 8014348:	f77f ae37 	ble.w	8013fba <_dtoa_r+0x7b2>
 801434c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801434e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014350:	2001      	movs	r0, #1
 8014352:	e655      	b.n	8014000 <_dtoa_r+0x7f8>
 8014354:	9b00      	ldr	r3, [sp, #0]
 8014356:	2b00      	cmp	r3, #0
 8014358:	f77f aed6 	ble.w	8014108 <_dtoa_r+0x900>
 801435c:	4656      	mov	r6, sl
 801435e:	4621      	mov	r1, r4
 8014360:	4648      	mov	r0, r9
 8014362:	f7ff f9c6 	bl	80136f2 <quorem>
 8014366:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801436a:	f806 8b01 	strb.w	r8, [r6], #1
 801436e:	9b00      	ldr	r3, [sp, #0]
 8014370:	eba6 020a 	sub.w	r2, r6, sl
 8014374:	4293      	cmp	r3, r2
 8014376:	ddb3      	ble.n	80142e0 <_dtoa_r+0xad8>
 8014378:	4649      	mov	r1, r9
 801437a:	2300      	movs	r3, #0
 801437c:	220a      	movs	r2, #10
 801437e:	4658      	mov	r0, fp
 8014380:	f000 f8b2 	bl	80144e8 <__multadd>
 8014384:	4681      	mov	r9, r0
 8014386:	e7ea      	b.n	801435e <_dtoa_r+0xb56>
 8014388:	08016950 	.word	0x08016950
 801438c:	080168d4 	.word	0x080168d4

08014390 <_free_r>:
 8014390:	b538      	push	{r3, r4, r5, lr}
 8014392:	4605      	mov	r5, r0
 8014394:	2900      	cmp	r1, #0
 8014396:	d041      	beq.n	801441c <_free_r+0x8c>
 8014398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801439c:	1f0c      	subs	r4, r1, #4
 801439e:	2b00      	cmp	r3, #0
 80143a0:	bfb8      	it	lt
 80143a2:	18e4      	addlt	r4, r4, r3
 80143a4:	f7fe fb4c 	bl	8012a40 <__malloc_lock>
 80143a8:	4a1d      	ldr	r2, [pc, #116]	@ (8014420 <_free_r+0x90>)
 80143aa:	6813      	ldr	r3, [r2, #0]
 80143ac:	b933      	cbnz	r3, 80143bc <_free_r+0x2c>
 80143ae:	6063      	str	r3, [r4, #4]
 80143b0:	6014      	str	r4, [r2, #0]
 80143b2:	4628      	mov	r0, r5
 80143b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80143b8:	f7fe bb48 	b.w	8012a4c <__malloc_unlock>
 80143bc:	42a3      	cmp	r3, r4
 80143be:	d908      	bls.n	80143d2 <_free_r+0x42>
 80143c0:	6820      	ldr	r0, [r4, #0]
 80143c2:	1821      	adds	r1, r4, r0
 80143c4:	428b      	cmp	r3, r1
 80143c6:	bf01      	itttt	eq
 80143c8:	6819      	ldreq	r1, [r3, #0]
 80143ca:	685b      	ldreq	r3, [r3, #4]
 80143cc:	1809      	addeq	r1, r1, r0
 80143ce:	6021      	streq	r1, [r4, #0]
 80143d0:	e7ed      	b.n	80143ae <_free_r+0x1e>
 80143d2:	461a      	mov	r2, r3
 80143d4:	685b      	ldr	r3, [r3, #4]
 80143d6:	b10b      	cbz	r3, 80143dc <_free_r+0x4c>
 80143d8:	42a3      	cmp	r3, r4
 80143da:	d9fa      	bls.n	80143d2 <_free_r+0x42>
 80143dc:	6811      	ldr	r1, [r2, #0]
 80143de:	1850      	adds	r0, r2, r1
 80143e0:	42a0      	cmp	r0, r4
 80143e2:	d10b      	bne.n	80143fc <_free_r+0x6c>
 80143e4:	6820      	ldr	r0, [r4, #0]
 80143e6:	4401      	add	r1, r0
 80143e8:	1850      	adds	r0, r2, r1
 80143ea:	4283      	cmp	r3, r0
 80143ec:	6011      	str	r1, [r2, #0]
 80143ee:	d1e0      	bne.n	80143b2 <_free_r+0x22>
 80143f0:	6818      	ldr	r0, [r3, #0]
 80143f2:	685b      	ldr	r3, [r3, #4]
 80143f4:	6053      	str	r3, [r2, #4]
 80143f6:	4408      	add	r0, r1
 80143f8:	6010      	str	r0, [r2, #0]
 80143fa:	e7da      	b.n	80143b2 <_free_r+0x22>
 80143fc:	d902      	bls.n	8014404 <_free_r+0x74>
 80143fe:	230c      	movs	r3, #12
 8014400:	602b      	str	r3, [r5, #0]
 8014402:	e7d6      	b.n	80143b2 <_free_r+0x22>
 8014404:	6820      	ldr	r0, [r4, #0]
 8014406:	1821      	adds	r1, r4, r0
 8014408:	428b      	cmp	r3, r1
 801440a:	bf04      	itt	eq
 801440c:	6819      	ldreq	r1, [r3, #0]
 801440e:	685b      	ldreq	r3, [r3, #4]
 8014410:	6063      	str	r3, [r4, #4]
 8014412:	bf04      	itt	eq
 8014414:	1809      	addeq	r1, r1, r0
 8014416:	6021      	streq	r1, [r4, #0]
 8014418:	6054      	str	r4, [r2, #4]
 801441a:	e7ca      	b.n	80143b2 <_free_r+0x22>
 801441c:	bd38      	pop	{r3, r4, r5, pc}
 801441e:	bf00      	nop
 8014420:	20000444 	.word	0x20000444

08014424 <_Balloc>:
 8014424:	b570      	push	{r4, r5, r6, lr}
 8014426:	69c6      	ldr	r6, [r0, #28]
 8014428:	4604      	mov	r4, r0
 801442a:	460d      	mov	r5, r1
 801442c:	b976      	cbnz	r6, 801444c <_Balloc+0x28>
 801442e:	2010      	movs	r0, #16
 8014430:	f7fe fa54 	bl	80128dc <malloc>
 8014434:	4602      	mov	r2, r0
 8014436:	61e0      	str	r0, [r4, #28]
 8014438:	b920      	cbnz	r0, 8014444 <_Balloc+0x20>
 801443a:	4b18      	ldr	r3, [pc, #96]	@ (801449c <_Balloc+0x78>)
 801443c:	4818      	ldr	r0, [pc, #96]	@ (80144a0 <_Balloc+0x7c>)
 801443e:	216b      	movs	r1, #107	@ 0x6b
 8014440:	f000 fc1e 	bl	8014c80 <__assert_func>
 8014444:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014448:	6006      	str	r6, [r0, #0]
 801444a:	60c6      	str	r6, [r0, #12]
 801444c:	69e6      	ldr	r6, [r4, #28]
 801444e:	68f3      	ldr	r3, [r6, #12]
 8014450:	b183      	cbz	r3, 8014474 <_Balloc+0x50>
 8014452:	69e3      	ldr	r3, [r4, #28]
 8014454:	68db      	ldr	r3, [r3, #12]
 8014456:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801445a:	b9b8      	cbnz	r0, 801448c <_Balloc+0x68>
 801445c:	2101      	movs	r1, #1
 801445e:	fa01 f605 	lsl.w	r6, r1, r5
 8014462:	1d72      	adds	r2, r6, #5
 8014464:	0092      	lsls	r2, r2, #2
 8014466:	4620      	mov	r0, r4
 8014468:	f000 fc28 	bl	8014cbc <_calloc_r>
 801446c:	b160      	cbz	r0, 8014488 <_Balloc+0x64>
 801446e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014472:	e00e      	b.n	8014492 <_Balloc+0x6e>
 8014474:	2221      	movs	r2, #33	@ 0x21
 8014476:	2104      	movs	r1, #4
 8014478:	4620      	mov	r0, r4
 801447a:	f000 fc1f 	bl	8014cbc <_calloc_r>
 801447e:	69e3      	ldr	r3, [r4, #28]
 8014480:	60f0      	str	r0, [r6, #12]
 8014482:	68db      	ldr	r3, [r3, #12]
 8014484:	2b00      	cmp	r3, #0
 8014486:	d1e4      	bne.n	8014452 <_Balloc+0x2e>
 8014488:	2000      	movs	r0, #0
 801448a:	bd70      	pop	{r4, r5, r6, pc}
 801448c:	6802      	ldr	r2, [r0, #0]
 801448e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014492:	2300      	movs	r3, #0
 8014494:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014498:	e7f7      	b.n	801448a <_Balloc+0x66>
 801449a:	bf00      	nop
 801449c:	080168e1 	.word	0x080168e1
 80144a0:	08016961 	.word	0x08016961

080144a4 <_Bfree>:
 80144a4:	b570      	push	{r4, r5, r6, lr}
 80144a6:	69c6      	ldr	r6, [r0, #28]
 80144a8:	4605      	mov	r5, r0
 80144aa:	460c      	mov	r4, r1
 80144ac:	b976      	cbnz	r6, 80144cc <_Bfree+0x28>
 80144ae:	2010      	movs	r0, #16
 80144b0:	f7fe fa14 	bl	80128dc <malloc>
 80144b4:	4602      	mov	r2, r0
 80144b6:	61e8      	str	r0, [r5, #28]
 80144b8:	b920      	cbnz	r0, 80144c4 <_Bfree+0x20>
 80144ba:	4b09      	ldr	r3, [pc, #36]	@ (80144e0 <_Bfree+0x3c>)
 80144bc:	4809      	ldr	r0, [pc, #36]	@ (80144e4 <_Bfree+0x40>)
 80144be:	218f      	movs	r1, #143	@ 0x8f
 80144c0:	f000 fbde 	bl	8014c80 <__assert_func>
 80144c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80144c8:	6006      	str	r6, [r0, #0]
 80144ca:	60c6      	str	r6, [r0, #12]
 80144cc:	b13c      	cbz	r4, 80144de <_Bfree+0x3a>
 80144ce:	69eb      	ldr	r3, [r5, #28]
 80144d0:	6862      	ldr	r2, [r4, #4]
 80144d2:	68db      	ldr	r3, [r3, #12]
 80144d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80144d8:	6021      	str	r1, [r4, #0]
 80144da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80144de:	bd70      	pop	{r4, r5, r6, pc}
 80144e0:	080168e1 	.word	0x080168e1
 80144e4:	08016961 	.word	0x08016961

080144e8 <__multadd>:
 80144e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144ec:	690d      	ldr	r5, [r1, #16]
 80144ee:	4607      	mov	r7, r0
 80144f0:	460c      	mov	r4, r1
 80144f2:	461e      	mov	r6, r3
 80144f4:	f101 0c14 	add.w	ip, r1, #20
 80144f8:	2000      	movs	r0, #0
 80144fa:	f8dc 3000 	ldr.w	r3, [ip]
 80144fe:	b299      	uxth	r1, r3
 8014500:	fb02 6101 	mla	r1, r2, r1, r6
 8014504:	0c1e      	lsrs	r6, r3, #16
 8014506:	0c0b      	lsrs	r3, r1, #16
 8014508:	fb02 3306 	mla	r3, r2, r6, r3
 801450c:	b289      	uxth	r1, r1
 801450e:	3001      	adds	r0, #1
 8014510:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014514:	4285      	cmp	r5, r0
 8014516:	f84c 1b04 	str.w	r1, [ip], #4
 801451a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801451e:	dcec      	bgt.n	80144fa <__multadd+0x12>
 8014520:	b30e      	cbz	r6, 8014566 <__multadd+0x7e>
 8014522:	68a3      	ldr	r3, [r4, #8]
 8014524:	42ab      	cmp	r3, r5
 8014526:	dc19      	bgt.n	801455c <__multadd+0x74>
 8014528:	6861      	ldr	r1, [r4, #4]
 801452a:	4638      	mov	r0, r7
 801452c:	3101      	adds	r1, #1
 801452e:	f7ff ff79 	bl	8014424 <_Balloc>
 8014532:	4680      	mov	r8, r0
 8014534:	b928      	cbnz	r0, 8014542 <__multadd+0x5a>
 8014536:	4602      	mov	r2, r0
 8014538:	4b0c      	ldr	r3, [pc, #48]	@ (801456c <__multadd+0x84>)
 801453a:	480d      	ldr	r0, [pc, #52]	@ (8014570 <__multadd+0x88>)
 801453c:	21ba      	movs	r1, #186	@ 0xba
 801453e:	f000 fb9f 	bl	8014c80 <__assert_func>
 8014542:	6922      	ldr	r2, [r4, #16]
 8014544:	3202      	adds	r2, #2
 8014546:	f104 010c 	add.w	r1, r4, #12
 801454a:	0092      	lsls	r2, r2, #2
 801454c:	300c      	adds	r0, #12
 801454e:	f7ff f8c2 	bl	80136d6 <memcpy>
 8014552:	4621      	mov	r1, r4
 8014554:	4638      	mov	r0, r7
 8014556:	f7ff ffa5 	bl	80144a4 <_Bfree>
 801455a:	4644      	mov	r4, r8
 801455c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014560:	3501      	adds	r5, #1
 8014562:	615e      	str	r6, [r3, #20]
 8014564:	6125      	str	r5, [r4, #16]
 8014566:	4620      	mov	r0, r4
 8014568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801456c:	08016950 	.word	0x08016950
 8014570:	08016961 	.word	0x08016961

08014574 <__hi0bits>:
 8014574:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8014578:	4603      	mov	r3, r0
 801457a:	bf36      	itet	cc
 801457c:	0403      	lslcc	r3, r0, #16
 801457e:	2000      	movcs	r0, #0
 8014580:	2010      	movcc	r0, #16
 8014582:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014586:	bf3c      	itt	cc
 8014588:	021b      	lslcc	r3, r3, #8
 801458a:	3008      	addcc	r0, #8
 801458c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014590:	bf3c      	itt	cc
 8014592:	011b      	lslcc	r3, r3, #4
 8014594:	3004      	addcc	r0, #4
 8014596:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801459a:	bf3c      	itt	cc
 801459c:	009b      	lslcc	r3, r3, #2
 801459e:	3002      	addcc	r0, #2
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	db05      	blt.n	80145b0 <__hi0bits+0x3c>
 80145a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80145a8:	f100 0001 	add.w	r0, r0, #1
 80145ac:	bf08      	it	eq
 80145ae:	2020      	moveq	r0, #32
 80145b0:	4770      	bx	lr

080145b2 <__lo0bits>:
 80145b2:	6803      	ldr	r3, [r0, #0]
 80145b4:	4602      	mov	r2, r0
 80145b6:	f013 0007 	ands.w	r0, r3, #7
 80145ba:	d00b      	beq.n	80145d4 <__lo0bits+0x22>
 80145bc:	07d9      	lsls	r1, r3, #31
 80145be:	d421      	bmi.n	8014604 <__lo0bits+0x52>
 80145c0:	0798      	lsls	r0, r3, #30
 80145c2:	bf49      	itett	mi
 80145c4:	085b      	lsrmi	r3, r3, #1
 80145c6:	089b      	lsrpl	r3, r3, #2
 80145c8:	2001      	movmi	r0, #1
 80145ca:	6013      	strmi	r3, [r2, #0]
 80145cc:	bf5c      	itt	pl
 80145ce:	6013      	strpl	r3, [r2, #0]
 80145d0:	2002      	movpl	r0, #2
 80145d2:	4770      	bx	lr
 80145d4:	b299      	uxth	r1, r3
 80145d6:	b909      	cbnz	r1, 80145dc <__lo0bits+0x2a>
 80145d8:	0c1b      	lsrs	r3, r3, #16
 80145da:	2010      	movs	r0, #16
 80145dc:	b2d9      	uxtb	r1, r3
 80145de:	b909      	cbnz	r1, 80145e4 <__lo0bits+0x32>
 80145e0:	3008      	adds	r0, #8
 80145e2:	0a1b      	lsrs	r3, r3, #8
 80145e4:	0719      	lsls	r1, r3, #28
 80145e6:	bf04      	itt	eq
 80145e8:	091b      	lsreq	r3, r3, #4
 80145ea:	3004      	addeq	r0, #4
 80145ec:	0799      	lsls	r1, r3, #30
 80145ee:	bf04      	itt	eq
 80145f0:	089b      	lsreq	r3, r3, #2
 80145f2:	3002      	addeq	r0, #2
 80145f4:	07d9      	lsls	r1, r3, #31
 80145f6:	d403      	bmi.n	8014600 <__lo0bits+0x4e>
 80145f8:	085b      	lsrs	r3, r3, #1
 80145fa:	f100 0001 	add.w	r0, r0, #1
 80145fe:	d003      	beq.n	8014608 <__lo0bits+0x56>
 8014600:	6013      	str	r3, [r2, #0]
 8014602:	4770      	bx	lr
 8014604:	2000      	movs	r0, #0
 8014606:	4770      	bx	lr
 8014608:	2020      	movs	r0, #32
 801460a:	4770      	bx	lr

0801460c <__i2b>:
 801460c:	b510      	push	{r4, lr}
 801460e:	460c      	mov	r4, r1
 8014610:	2101      	movs	r1, #1
 8014612:	f7ff ff07 	bl	8014424 <_Balloc>
 8014616:	4602      	mov	r2, r0
 8014618:	b928      	cbnz	r0, 8014626 <__i2b+0x1a>
 801461a:	4b05      	ldr	r3, [pc, #20]	@ (8014630 <__i2b+0x24>)
 801461c:	4805      	ldr	r0, [pc, #20]	@ (8014634 <__i2b+0x28>)
 801461e:	f240 1145 	movw	r1, #325	@ 0x145
 8014622:	f000 fb2d 	bl	8014c80 <__assert_func>
 8014626:	2301      	movs	r3, #1
 8014628:	6144      	str	r4, [r0, #20]
 801462a:	6103      	str	r3, [r0, #16]
 801462c:	bd10      	pop	{r4, pc}
 801462e:	bf00      	nop
 8014630:	08016950 	.word	0x08016950
 8014634:	08016961 	.word	0x08016961

08014638 <__multiply>:
 8014638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801463c:	4614      	mov	r4, r2
 801463e:	690a      	ldr	r2, [r1, #16]
 8014640:	6923      	ldr	r3, [r4, #16]
 8014642:	429a      	cmp	r2, r3
 8014644:	bfa8      	it	ge
 8014646:	4623      	movge	r3, r4
 8014648:	460f      	mov	r7, r1
 801464a:	bfa4      	itt	ge
 801464c:	460c      	movge	r4, r1
 801464e:	461f      	movge	r7, r3
 8014650:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8014654:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8014658:	68a3      	ldr	r3, [r4, #8]
 801465a:	6861      	ldr	r1, [r4, #4]
 801465c:	eb0a 0609 	add.w	r6, sl, r9
 8014660:	42b3      	cmp	r3, r6
 8014662:	b085      	sub	sp, #20
 8014664:	bfb8      	it	lt
 8014666:	3101      	addlt	r1, #1
 8014668:	f7ff fedc 	bl	8014424 <_Balloc>
 801466c:	b930      	cbnz	r0, 801467c <__multiply+0x44>
 801466e:	4602      	mov	r2, r0
 8014670:	4b44      	ldr	r3, [pc, #272]	@ (8014784 <__multiply+0x14c>)
 8014672:	4845      	ldr	r0, [pc, #276]	@ (8014788 <__multiply+0x150>)
 8014674:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8014678:	f000 fb02 	bl	8014c80 <__assert_func>
 801467c:	f100 0514 	add.w	r5, r0, #20
 8014680:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014684:	462b      	mov	r3, r5
 8014686:	2200      	movs	r2, #0
 8014688:	4543      	cmp	r3, r8
 801468a:	d321      	bcc.n	80146d0 <__multiply+0x98>
 801468c:	f107 0114 	add.w	r1, r7, #20
 8014690:	f104 0214 	add.w	r2, r4, #20
 8014694:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8014698:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801469c:	9302      	str	r3, [sp, #8]
 801469e:	1b13      	subs	r3, r2, r4
 80146a0:	3b15      	subs	r3, #21
 80146a2:	f023 0303 	bic.w	r3, r3, #3
 80146a6:	3304      	adds	r3, #4
 80146a8:	f104 0715 	add.w	r7, r4, #21
 80146ac:	42ba      	cmp	r2, r7
 80146ae:	bf38      	it	cc
 80146b0:	2304      	movcc	r3, #4
 80146b2:	9301      	str	r3, [sp, #4]
 80146b4:	9b02      	ldr	r3, [sp, #8]
 80146b6:	9103      	str	r1, [sp, #12]
 80146b8:	428b      	cmp	r3, r1
 80146ba:	d80c      	bhi.n	80146d6 <__multiply+0x9e>
 80146bc:	2e00      	cmp	r6, #0
 80146be:	dd03      	ble.n	80146c8 <__multiply+0x90>
 80146c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d05b      	beq.n	8014780 <__multiply+0x148>
 80146c8:	6106      	str	r6, [r0, #16]
 80146ca:	b005      	add	sp, #20
 80146cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146d0:	f843 2b04 	str.w	r2, [r3], #4
 80146d4:	e7d8      	b.n	8014688 <__multiply+0x50>
 80146d6:	f8b1 a000 	ldrh.w	sl, [r1]
 80146da:	f1ba 0f00 	cmp.w	sl, #0
 80146de:	d024      	beq.n	801472a <__multiply+0xf2>
 80146e0:	f104 0e14 	add.w	lr, r4, #20
 80146e4:	46a9      	mov	r9, r5
 80146e6:	f04f 0c00 	mov.w	ip, #0
 80146ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 80146ee:	f8d9 3000 	ldr.w	r3, [r9]
 80146f2:	fa1f fb87 	uxth.w	fp, r7
 80146f6:	b29b      	uxth	r3, r3
 80146f8:	fb0a 330b 	mla	r3, sl, fp, r3
 80146fc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8014700:	f8d9 7000 	ldr.w	r7, [r9]
 8014704:	4463      	add	r3, ip
 8014706:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801470a:	fb0a c70b 	mla	r7, sl, fp, ip
 801470e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8014712:	b29b      	uxth	r3, r3
 8014714:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014718:	4572      	cmp	r2, lr
 801471a:	f849 3b04 	str.w	r3, [r9], #4
 801471e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014722:	d8e2      	bhi.n	80146ea <__multiply+0xb2>
 8014724:	9b01      	ldr	r3, [sp, #4]
 8014726:	f845 c003 	str.w	ip, [r5, r3]
 801472a:	9b03      	ldr	r3, [sp, #12]
 801472c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014730:	3104      	adds	r1, #4
 8014732:	f1b9 0f00 	cmp.w	r9, #0
 8014736:	d021      	beq.n	801477c <__multiply+0x144>
 8014738:	682b      	ldr	r3, [r5, #0]
 801473a:	f104 0c14 	add.w	ip, r4, #20
 801473e:	46ae      	mov	lr, r5
 8014740:	f04f 0a00 	mov.w	sl, #0
 8014744:	f8bc b000 	ldrh.w	fp, [ip]
 8014748:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801474c:	fb09 770b 	mla	r7, r9, fp, r7
 8014750:	4457      	add	r7, sl
 8014752:	b29b      	uxth	r3, r3
 8014754:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014758:	f84e 3b04 	str.w	r3, [lr], #4
 801475c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014760:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014764:	f8be 3000 	ldrh.w	r3, [lr]
 8014768:	fb09 330a 	mla	r3, r9, sl, r3
 801476c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8014770:	4562      	cmp	r2, ip
 8014772:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014776:	d8e5      	bhi.n	8014744 <__multiply+0x10c>
 8014778:	9f01      	ldr	r7, [sp, #4]
 801477a:	51eb      	str	r3, [r5, r7]
 801477c:	3504      	adds	r5, #4
 801477e:	e799      	b.n	80146b4 <__multiply+0x7c>
 8014780:	3e01      	subs	r6, #1
 8014782:	e79b      	b.n	80146bc <__multiply+0x84>
 8014784:	08016950 	.word	0x08016950
 8014788:	08016961 	.word	0x08016961

0801478c <__pow5mult>:
 801478c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014790:	4615      	mov	r5, r2
 8014792:	f012 0203 	ands.w	r2, r2, #3
 8014796:	4607      	mov	r7, r0
 8014798:	460e      	mov	r6, r1
 801479a:	d007      	beq.n	80147ac <__pow5mult+0x20>
 801479c:	4c25      	ldr	r4, [pc, #148]	@ (8014834 <__pow5mult+0xa8>)
 801479e:	3a01      	subs	r2, #1
 80147a0:	2300      	movs	r3, #0
 80147a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80147a6:	f7ff fe9f 	bl	80144e8 <__multadd>
 80147aa:	4606      	mov	r6, r0
 80147ac:	10ad      	asrs	r5, r5, #2
 80147ae:	d03d      	beq.n	801482c <__pow5mult+0xa0>
 80147b0:	69fc      	ldr	r4, [r7, #28]
 80147b2:	b97c      	cbnz	r4, 80147d4 <__pow5mult+0x48>
 80147b4:	2010      	movs	r0, #16
 80147b6:	f7fe f891 	bl	80128dc <malloc>
 80147ba:	4602      	mov	r2, r0
 80147bc:	61f8      	str	r0, [r7, #28]
 80147be:	b928      	cbnz	r0, 80147cc <__pow5mult+0x40>
 80147c0:	4b1d      	ldr	r3, [pc, #116]	@ (8014838 <__pow5mult+0xac>)
 80147c2:	481e      	ldr	r0, [pc, #120]	@ (801483c <__pow5mult+0xb0>)
 80147c4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80147c8:	f000 fa5a 	bl	8014c80 <__assert_func>
 80147cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80147d0:	6004      	str	r4, [r0, #0]
 80147d2:	60c4      	str	r4, [r0, #12]
 80147d4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80147d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80147dc:	b94c      	cbnz	r4, 80147f2 <__pow5mult+0x66>
 80147de:	f240 2171 	movw	r1, #625	@ 0x271
 80147e2:	4638      	mov	r0, r7
 80147e4:	f7ff ff12 	bl	801460c <__i2b>
 80147e8:	2300      	movs	r3, #0
 80147ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80147ee:	4604      	mov	r4, r0
 80147f0:	6003      	str	r3, [r0, #0]
 80147f2:	f04f 0900 	mov.w	r9, #0
 80147f6:	07eb      	lsls	r3, r5, #31
 80147f8:	d50a      	bpl.n	8014810 <__pow5mult+0x84>
 80147fa:	4631      	mov	r1, r6
 80147fc:	4622      	mov	r2, r4
 80147fe:	4638      	mov	r0, r7
 8014800:	f7ff ff1a 	bl	8014638 <__multiply>
 8014804:	4631      	mov	r1, r6
 8014806:	4680      	mov	r8, r0
 8014808:	4638      	mov	r0, r7
 801480a:	f7ff fe4b 	bl	80144a4 <_Bfree>
 801480e:	4646      	mov	r6, r8
 8014810:	106d      	asrs	r5, r5, #1
 8014812:	d00b      	beq.n	801482c <__pow5mult+0xa0>
 8014814:	6820      	ldr	r0, [r4, #0]
 8014816:	b938      	cbnz	r0, 8014828 <__pow5mult+0x9c>
 8014818:	4622      	mov	r2, r4
 801481a:	4621      	mov	r1, r4
 801481c:	4638      	mov	r0, r7
 801481e:	f7ff ff0b 	bl	8014638 <__multiply>
 8014822:	6020      	str	r0, [r4, #0]
 8014824:	f8c0 9000 	str.w	r9, [r0]
 8014828:	4604      	mov	r4, r0
 801482a:	e7e4      	b.n	80147f6 <__pow5mult+0x6a>
 801482c:	4630      	mov	r0, r6
 801482e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014832:	bf00      	nop
 8014834:	080169bc 	.word	0x080169bc
 8014838:	080168e1 	.word	0x080168e1
 801483c:	08016961 	.word	0x08016961

08014840 <__lshift>:
 8014840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014844:	460c      	mov	r4, r1
 8014846:	6849      	ldr	r1, [r1, #4]
 8014848:	6923      	ldr	r3, [r4, #16]
 801484a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801484e:	68a3      	ldr	r3, [r4, #8]
 8014850:	4607      	mov	r7, r0
 8014852:	4691      	mov	r9, r2
 8014854:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014858:	f108 0601 	add.w	r6, r8, #1
 801485c:	42b3      	cmp	r3, r6
 801485e:	db0b      	blt.n	8014878 <__lshift+0x38>
 8014860:	4638      	mov	r0, r7
 8014862:	f7ff fddf 	bl	8014424 <_Balloc>
 8014866:	4605      	mov	r5, r0
 8014868:	b948      	cbnz	r0, 801487e <__lshift+0x3e>
 801486a:	4602      	mov	r2, r0
 801486c:	4b28      	ldr	r3, [pc, #160]	@ (8014910 <__lshift+0xd0>)
 801486e:	4829      	ldr	r0, [pc, #164]	@ (8014914 <__lshift+0xd4>)
 8014870:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014874:	f000 fa04 	bl	8014c80 <__assert_func>
 8014878:	3101      	adds	r1, #1
 801487a:	005b      	lsls	r3, r3, #1
 801487c:	e7ee      	b.n	801485c <__lshift+0x1c>
 801487e:	2300      	movs	r3, #0
 8014880:	f100 0114 	add.w	r1, r0, #20
 8014884:	f100 0210 	add.w	r2, r0, #16
 8014888:	4618      	mov	r0, r3
 801488a:	4553      	cmp	r3, sl
 801488c:	db33      	blt.n	80148f6 <__lshift+0xb6>
 801488e:	6920      	ldr	r0, [r4, #16]
 8014890:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014894:	f104 0314 	add.w	r3, r4, #20
 8014898:	f019 091f 	ands.w	r9, r9, #31
 801489c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80148a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80148a4:	d02b      	beq.n	80148fe <__lshift+0xbe>
 80148a6:	f1c9 0e20 	rsb	lr, r9, #32
 80148aa:	468a      	mov	sl, r1
 80148ac:	2200      	movs	r2, #0
 80148ae:	6818      	ldr	r0, [r3, #0]
 80148b0:	fa00 f009 	lsl.w	r0, r0, r9
 80148b4:	4310      	orrs	r0, r2
 80148b6:	f84a 0b04 	str.w	r0, [sl], #4
 80148ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80148be:	459c      	cmp	ip, r3
 80148c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80148c4:	d8f3      	bhi.n	80148ae <__lshift+0x6e>
 80148c6:	ebac 0304 	sub.w	r3, ip, r4
 80148ca:	3b15      	subs	r3, #21
 80148cc:	f023 0303 	bic.w	r3, r3, #3
 80148d0:	3304      	adds	r3, #4
 80148d2:	f104 0015 	add.w	r0, r4, #21
 80148d6:	4584      	cmp	ip, r0
 80148d8:	bf38      	it	cc
 80148da:	2304      	movcc	r3, #4
 80148dc:	50ca      	str	r2, [r1, r3]
 80148de:	b10a      	cbz	r2, 80148e4 <__lshift+0xa4>
 80148e0:	f108 0602 	add.w	r6, r8, #2
 80148e4:	3e01      	subs	r6, #1
 80148e6:	4638      	mov	r0, r7
 80148e8:	612e      	str	r6, [r5, #16]
 80148ea:	4621      	mov	r1, r4
 80148ec:	f7ff fdda 	bl	80144a4 <_Bfree>
 80148f0:	4628      	mov	r0, r5
 80148f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80148fa:	3301      	adds	r3, #1
 80148fc:	e7c5      	b.n	801488a <__lshift+0x4a>
 80148fe:	3904      	subs	r1, #4
 8014900:	f853 2b04 	ldr.w	r2, [r3], #4
 8014904:	f841 2f04 	str.w	r2, [r1, #4]!
 8014908:	459c      	cmp	ip, r3
 801490a:	d8f9      	bhi.n	8014900 <__lshift+0xc0>
 801490c:	e7ea      	b.n	80148e4 <__lshift+0xa4>
 801490e:	bf00      	nop
 8014910:	08016950 	.word	0x08016950
 8014914:	08016961 	.word	0x08016961

08014918 <__mcmp>:
 8014918:	690a      	ldr	r2, [r1, #16]
 801491a:	4603      	mov	r3, r0
 801491c:	6900      	ldr	r0, [r0, #16]
 801491e:	1a80      	subs	r0, r0, r2
 8014920:	b530      	push	{r4, r5, lr}
 8014922:	d10e      	bne.n	8014942 <__mcmp+0x2a>
 8014924:	3314      	adds	r3, #20
 8014926:	3114      	adds	r1, #20
 8014928:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801492c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014930:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014934:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014938:	4295      	cmp	r5, r2
 801493a:	d003      	beq.n	8014944 <__mcmp+0x2c>
 801493c:	d205      	bcs.n	801494a <__mcmp+0x32>
 801493e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014942:	bd30      	pop	{r4, r5, pc}
 8014944:	42a3      	cmp	r3, r4
 8014946:	d3f3      	bcc.n	8014930 <__mcmp+0x18>
 8014948:	e7fb      	b.n	8014942 <__mcmp+0x2a>
 801494a:	2001      	movs	r0, #1
 801494c:	e7f9      	b.n	8014942 <__mcmp+0x2a>
	...

08014950 <__mdiff>:
 8014950:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014954:	4689      	mov	r9, r1
 8014956:	4606      	mov	r6, r0
 8014958:	4611      	mov	r1, r2
 801495a:	4648      	mov	r0, r9
 801495c:	4614      	mov	r4, r2
 801495e:	f7ff ffdb 	bl	8014918 <__mcmp>
 8014962:	1e05      	subs	r5, r0, #0
 8014964:	d112      	bne.n	801498c <__mdiff+0x3c>
 8014966:	4629      	mov	r1, r5
 8014968:	4630      	mov	r0, r6
 801496a:	f7ff fd5b 	bl	8014424 <_Balloc>
 801496e:	4602      	mov	r2, r0
 8014970:	b928      	cbnz	r0, 801497e <__mdiff+0x2e>
 8014972:	4b3f      	ldr	r3, [pc, #252]	@ (8014a70 <__mdiff+0x120>)
 8014974:	f240 2137 	movw	r1, #567	@ 0x237
 8014978:	483e      	ldr	r0, [pc, #248]	@ (8014a74 <__mdiff+0x124>)
 801497a:	f000 f981 	bl	8014c80 <__assert_func>
 801497e:	2301      	movs	r3, #1
 8014980:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014984:	4610      	mov	r0, r2
 8014986:	b003      	add	sp, #12
 8014988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801498c:	bfbc      	itt	lt
 801498e:	464b      	movlt	r3, r9
 8014990:	46a1      	movlt	r9, r4
 8014992:	4630      	mov	r0, r6
 8014994:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014998:	bfba      	itte	lt
 801499a:	461c      	movlt	r4, r3
 801499c:	2501      	movlt	r5, #1
 801499e:	2500      	movge	r5, #0
 80149a0:	f7ff fd40 	bl	8014424 <_Balloc>
 80149a4:	4602      	mov	r2, r0
 80149a6:	b918      	cbnz	r0, 80149b0 <__mdiff+0x60>
 80149a8:	4b31      	ldr	r3, [pc, #196]	@ (8014a70 <__mdiff+0x120>)
 80149aa:	f240 2145 	movw	r1, #581	@ 0x245
 80149ae:	e7e3      	b.n	8014978 <__mdiff+0x28>
 80149b0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80149b4:	6926      	ldr	r6, [r4, #16]
 80149b6:	60c5      	str	r5, [r0, #12]
 80149b8:	f109 0310 	add.w	r3, r9, #16
 80149bc:	f109 0514 	add.w	r5, r9, #20
 80149c0:	f104 0e14 	add.w	lr, r4, #20
 80149c4:	f100 0b14 	add.w	fp, r0, #20
 80149c8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80149cc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80149d0:	9301      	str	r3, [sp, #4]
 80149d2:	46d9      	mov	r9, fp
 80149d4:	f04f 0c00 	mov.w	ip, #0
 80149d8:	9b01      	ldr	r3, [sp, #4]
 80149da:	f85e 0b04 	ldr.w	r0, [lr], #4
 80149de:	f853 af04 	ldr.w	sl, [r3, #4]!
 80149e2:	9301      	str	r3, [sp, #4]
 80149e4:	fa1f f38a 	uxth.w	r3, sl
 80149e8:	4619      	mov	r1, r3
 80149ea:	b283      	uxth	r3, r0
 80149ec:	1acb      	subs	r3, r1, r3
 80149ee:	0c00      	lsrs	r0, r0, #16
 80149f0:	4463      	add	r3, ip
 80149f2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80149f6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80149fa:	b29b      	uxth	r3, r3
 80149fc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014a00:	4576      	cmp	r6, lr
 8014a02:	f849 3b04 	str.w	r3, [r9], #4
 8014a06:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014a0a:	d8e5      	bhi.n	80149d8 <__mdiff+0x88>
 8014a0c:	1b33      	subs	r3, r6, r4
 8014a0e:	3b15      	subs	r3, #21
 8014a10:	f023 0303 	bic.w	r3, r3, #3
 8014a14:	3415      	adds	r4, #21
 8014a16:	3304      	adds	r3, #4
 8014a18:	42a6      	cmp	r6, r4
 8014a1a:	bf38      	it	cc
 8014a1c:	2304      	movcc	r3, #4
 8014a1e:	441d      	add	r5, r3
 8014a20:	445b      	add	r3, fp
 8014a22:	461e      	mov	r6, r3
 8014a24:	462c      	mov	r4, r5
 8014a26:	4544      	cmp	r4, r8
 8014a28:	d30e      	bcc.n	8014a48 <__mdiff+0xf8>
 8014a2a:	f108 0103 	add.w	r1, r8, #3
 8014a2e:	1b49      	subs	r1, r1, r5
 8014a30:	f021 0103 	bic.w	r1, r1, #3
 8014a34:	3d03      	subs	r5, #3
 8014a36:	45a8      	cmp	r8, r5
 8014a38:	bf38      	it	cc
 8014a3a:	2100      	movcc	r1, #0
 8014a3c:	440b      	add	r3, r1
 8014a3e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014a42:	b191      	cbz	r1, 8014a6a <__mdiff+0x11a>
 8014a44:	6117      	str	r7, [r2, #16]
 8014a46:	e79d      	b.n	8014984 <__mdiff+0x34>
 8014a48:	f854 1b04 	ldr.w	r1, [r4], #4
 8014a4c:	46e6      	mov	lr, ip
 8014a4e:	0c08      	lsrs	r0, r1, #16
 8014a50:	fa1c fc81 	uxtah	ip, ip, r1
 8014a54:	4471      	add	r1, lr
 8014a56:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014a5a:	b289      	uxth	r1, r1
 8014a5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014a60:	f846 1b04 	str.w	r1, [r6], #4
 8014a64:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014a68:	e7dd      	b.n	8014a26 <__mdiff+0xd6>
 8014a6a:	3f01      	subs	r7, #1
 8014a6c:	e7e7      	b.n	8014a3e <__mdiff+0xee>
 8014a6e:	bf00      	nop
 8014a70:	08016950 	.word	0x08016950
 8014a74:	08016961 	.word	0x08016961

08014a78 <__d2b>:
 8014a78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014a7c:	460f      	mov	r7, r1
 8014a7e:	2101      	movs	r1, #1
 8014a80:	ec59 8b10 	vmov	r8, r9, d0
 8014a84:	4616      	mov	r6, r2
 8014a86:	f7ff fccd 	bl	8014424 <_Balloc>
 8014a8a:	4604      	mov	r4, r0
 8014a8c:	b930      	cbnz	r0, 8014a9c <__d2b+0x24>
 8014a8e:	4602      	mov	r2, r0
 8014a90:	4b23      	ldr	r3, [pc, #140]	@ (8014b20 <__d2b+0xa8>)
 8014a92:	4824      	ldr	r0, [pc, #144]	@ (8014b24 <__d2b+0xac>)
 8014a94:	f240 310f 	movw	r1, #783	@ 0x30f
 8014a98:	f000 f8f2 	bl	8014c80 <__assert_func>
 8014a9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014aa0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014aa4:	b10d      	cbz	r5, 8014aaa <__d2b+0x32>
 8014aa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014aaa:	9301      	str	r3, [sp, #4]
 8014aac:	f1b8 0300 	subs.w	r3, r8, #0
 8014ab0:	d023      	beq.n	8014afa <__d2b+0x82>
 8014ab2:	4668      	mov	r0, sp
 8014ab4:	9300      	str	r3, [sp, #0]
 8014ab6:	f7ff fd7c 	bl	80145b2 <__lo0bits>
 8014aba:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014abe:	b1d0      	cbz	r0, 8014af6 <__d2b+0x7e>
 8014ac0:	f1c0 0320 	rsb	r3, r0, #32
 8014ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8014ac8:	430b      	orrs	r3, r1
 8014aca:	40c2      	lsrs	r2, r0
 8014acc:	6163      	str	r3, [r4, #20]
 8014ace:	9201      	str	r2, [sp, #4]
 8014ad0:	9b01      	ldr	r3, [sp, #4]
 8014ad2:	61a3      	str	r3, [r4, #24]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	bf0c      	ite	eq
 8014ad8:	2201      	moveq	r2, #1
 8014ada:	2202      	movne	r2, #2
 8014adc:	6122      	str	r2, [r4, #16]
 8014ade:	b1a5      	cbz	r5, 8014b0a <__d2b+0x92>
 8014ae0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014ae4:	4405      	add	r5, r0
 8014ae6:	603d      	str	r5, [r7, #0]
 8014ae8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014aec:	6030      	str	r0, [r6, #0]
 8014aee:	4620      	mov	r0, r4
 8014af0:	b003      	add	sp, #12
 8014af2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014af6:	6161      	str	r1, [r4, #20]
 8014af8:	e7ea      	b.n	8014ad0 <__d2b+0x58>
 8014afa:	a801      	add	r0, sp, #4
 8014afc:	f7ff fd59 	bl	80145b2 <__lo0bits>
 8014b00:	9b01      	ldr	r3, [sp, #4]
 8014b02:	6163      	str	r3, [r4, #20]
 8014b04:	3020      	adds	r0, #32
 8014b06:	2201      	movs	r2, #1
 8014b08:	e7e8      	b.n	8014adc <__d2b+0x64>
 8014b0a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014b0e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8014b12:	6038      	str	r0, [r7, #0]
 8014b14:	6918      	ldr	r0, [r3, #16]
 8014b16:	f7ff fd2d 	bl	8014574 <__hi0bits>
 8014b1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014b1e:	e7e5      	b.n	8014aec <__d2b+0x74>
 8014b20:	08016950 	.word	0x08016950
 8014b24:	08016961 	.word	0x08016961

08014b28 <__sflush_r>:
 8014b28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b30:	0716      	lsls	r6, r2, #28
 8014b32:	4605      	mov	r5, r0
 8014b34:	460c      	mov	r4, r1
 8014b36:	d454      	bmi.n	8014be2 <__sflush_r+0xba>
 8014b38:	684b      	ldr	r3, [r1, #4]
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	dc02      	bgt.n	8014b44 <__sflush_r+0x1c>
 8014b3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	dd48      	ble.n	8014bd6 <__sflush_r+0xae>
 8014b44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014b46:	2e00      	cmp	r6, #0
 8014b48:	d045      	beq.n	8014bd6 <__sflush_r+0xae>
 8014b4a:	2300      	movs	r3, #0
 8014b4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014b50:	682f      	ldr	r7, [r5, #0]
 8014b52:	6a21      	ldr	r1, [r4, #32]
 8014b54:	602b      	str	r3, [r5, #0]
 8014b56:	d030      	beq.n	8014bba <__sflush_r+0x92>
 8014b58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014b5a:	89a3      	ldrh	r3, [r4, #12]
 8014b5c:	0759      	lsls	r1, r3, #29
 8014b5e:	d505      	bpl.n	8014b6c <__sflush_r+0x44>
 8014b60:	6863      	ldr	r3, [r4, #4]
 8014b62:	1ad2      	subs	r2, r2, r3
 8014b64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014b66:	b10b      	cbz	r3, 8014b6c <__sflush_r+0x44>
 8014b68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014b6a:	1ad2      	subs	r2, r2, r3
 8014b6c:	2300      	movs	r3, #0
 8014b6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014b70:	6a21      	ldr	r1, [r4, #32]
 8014b72:	4628      	mov	r0, r5
 8014b74:	47b0      	blx	r6
 8014b76:	1c43      	adds	r3, r0, #1
 8014b78:	89a3      	ldrh	r3, [r4, #12]
 8014b7a:	d106      	bne.n	8014b8a <__sflush_r+0x62>
 8014b7c:	6829      	ldr	r1, [r5, #0]
 8014b7e:	291d      	cmp	r1, #29
 8014b80:	d82b      	bhi.n	8014bda <__sflush_r+0xb2>
 8014b82:	4a2a      	ldr	r2, [pc, #168]	@ (8014c2c <__sflush_r+0x104>)
 8014b84:	410a      	asrs	r2, r1
 8014b86:	07d6      	lsls	r6, r2, #31
 8014b88:	d427      	bmi.n	8014bda <__sflush_r+0xb2>
 8014b8a:	2200      	movs	r2, #0
 8014b8c:	6062      	str	r2, [r4, #4]
 8014b8e:	04d9      	lsls	r1, r3, #19
 8014b90:	6922      	ldr	r2, [r4, #16]
 8014b92:	6022      	str	r2, [r4, #0]
 8014b94:	d504      	bpl.n	8014ba0 <__sflush_r+0x78>
 8014b96:	1c42      	adds	r2, r0, #1
 8014b98:	d101      	bne.n	8014b9e <__sflush_r+0x76>
 8014b9a:	682b      	ldr	r3, [r5, #0]
 8014b9c:	b903      	cbnz	r3, 8014ba0 <__sflush_r+0x78>
 8014b9e:	6560      	str	r0, [r4, #84]	@ 0x54
 8014ba0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014ba2:	602f      	str	r7, [r5, #0]
 8014ba4:	b1b9      	cbz	r1, 8014bd6 <__sflush_r+0xae>
 8014ba6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014baa:	4299      	cmp	r1, r3
 8014bac:	d002      	beq.n	8014bb4 <__sflush_r+0x8c>
 8014bae:	4628      	mov	r0, r5
 8014bb0:	f7ff fbee 	bl	8014390 <_free_r>
 8014bb4:	2300      	movs	r3, #0
 8014bb6:	6363      	str	r3, [r4, #52]	@ 0x34
 8014bb8:	e00d      	b.n	8014bd6 <__sflush_r+0xae>
 8014bba:	2301      	movs	r3, #1
 8014bbc:	4628      	mov	r0, r5
 8014bbe:	47b0      	blx	r6
 8014bc0:	4602      	mov	r2, r0
 8014bc2:	1c50      	adds	r0, r2, #1
 8014bc4:	d1c9      	bne.n	8014b5a <__sflush_r+0x32>
 8014bc6:	682b      	ldr	r3, [r5, #0]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d0c6      	beq.n	8014b5a <__sflush_r+0x32>
 8014bcc:	2b1d      	cmp	r3, #29
 8014bce:	d001      	beq.n	8014bd4 <__sflush_r+0xac>
 8014bd0:	2b16      	cmp	r3, #22
 8014bd2:	d11e      	bne.n	8014c12 <__sflush_r+0xea>
 8014bd4:	602f      	str	r7, [r5, #0]
 8014bd6:	2000      	movs	r0, #0
 8014bd8:	e022      	b.n	8014c20 <__sflush_r+0xf8>
 8014bda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014bde:	b21b      	sxth	r3, r3
 8014be0:	e01b      	b.n	8014c1a <__sflush_r+0xf2>
 8014be2:	690f      	ldr	r7, [r1, #16]
 8014be4:	2f00      	cmp	r7, #0
 8014be6:	d0f6      	beq.n	8014bd6 <__sflush_r+0xae>
 8014be8:	0793      	lsls	r3, r2, #30
 8014bea:	680e      	ldr	r6, [r1, #0]
 8014bec:	bf08      	it	eq
 8014bee:	694b      	ldreq	r3, [r1, #20]
 8014bf0:	600f      	str	r7, [r1, #0]
 8014bf2:	bf18      	it	ne
 8014bf4:	2300      	movne	r3, #0
 8014bf6:	eba6 0807 	sub.w	r8, r6, r7
 8014bfa:	608b      	str	r3, [r1, #8]
 8014bfc:	f1b8 0f00 	cmp.w	r8, #0
 8014c00:	dde9      	ble.n	8014bd6 <__sflush_r+0xae>
 8014c02:	6a21      	ldr	r1, [r4, #32]
 8014c04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014c06:	4643      	mov	r3, r8
 8014c08:	463a      	mov	r2, r7
 8014c0a:	4628      	mov	r0, r5
 8014c0c:	47b0      	blx	r6
 8014c0e:	2800      	cmp	r0, #0
 8014c10:	dc08      	bgt.n	8014c24 <__sflush_r+0xfc>
 8014c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014c1a:	81a3      	strh	r3, [r4, #12]
 8014c1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c24:	4407      	add	r7, r0
 8014c26:	eba8 0800 	sub.w	r8, r8, r0
 8014c2a:	e7e7      	b.n	8014bfc <__sflush_r+0xd4>
 8014c2c:	dfbffffe 	.word	0xdfbffffe

08014c30 <_fflush_r>:
 8014c30:	b538      	push	{r3, r4, r5, lr}
 8014c32:	690b      	ldr	r3, [r1, #16]
 8014c34:	4605      	mov	r5, r0
 8014c36:	460c      	mov	r4, r1
 8014c38:	b913      	cbnz	r3, 8014c40 <_fflush_r+0x10>
 8014c3a:	2500      	movs	r5, #0
 8014c3c:	4628      	mov	r0, r5
 8014c3e:	bd38      	pop	{r3, r4, r5, pc}
 8014c40:	b118      	cbz	r0, 8014c4a <_fflush_r+0x1a>
 8014c42:	6a03      	ldr	r3, [r0, #32]
 8014c44:	b90b      	cbnz	r3, 8014c4a <_fflush_r+0x1a>
 8014c46:	f7fe fbf9 	bl	801343c <__sinit>
 8014c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d0f3      	beq.n	8014c3a <_fflush_r+0xa>
 8014c52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014c54:	07d0      	lsls	r0, r2, #31
 8014c56:	d404      	bmi.n	8014c62 <_fflush_r+0x32>
 8014c58:	0599      	lsls	r1, r3, #22
 8014c5a:	d402      	bmi.n	8014c62 <_fflush_r+0x32>
 8014c5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014c5e:	f7fe fd38 	bl	80136d2 <__retarget_lock_acquire_recursive>
 8014c62:	4628      	mov	r0, r5
 8014c64:	4621      	mov	r1, r4
 8014c66:	f7ff ff5f 	bl	8014b28 <__sflush_r>
 8014c6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014c6c:	07da      	lsls	r2, r3, #31
 8014c6e:	4605      	mov	r5, r0
 8014c70:	d4e4      	bmi.n	8014c3c <_fflush_r+0xc>
 8014c72:	89a3      	ldrh	r3, [r4, #12]
 8014c74:	059b      	lsls	r3, r3, #22
 8014c76:	d4e1      	bmi.n	8014c3c <_fflush_r+0xc>
 8014c78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014c7a:	f7fe fd2b 	bl	80136d4 <__retarget_lock_release_recursive>
 8014c7e:	e7dd      	b.n	8014c3c <_fflush_r+0xc>

08014c80 <__assert_func>:
 8014c80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014c82:	4614      	mov	r4, r2
 8014c84:	461a      	mov	r2, r3
 8014c86:	4b09      	ldr	r3, [pc, #36]	@ (8014cac <__assert_func+0x2c>)
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	4605      	mov	r5, r0
 8014c8c:	68d8      	ldr	r0, [r3, #12]
 8014c8e:	b954      	cbnz	r4, 8014ca6 <__assert_func+0x26>
 8014c90:	4b07      	ldr	r3, [pc, #28]	@ (8014cb0 <__assert_func+0x30>)
 8014c92:	461c      	mov	r4, r3
 8014c94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014c98:	9100      	str	r1, [sp, #0]
 8014c9a:	462b      	mov	r3, r5
 8014c9c:	4905      	ldr	r1, [pc, #20]	@ (8014cb4 <__assert_func+0x34>)
 8014c9e:	f000 f841 	bl	8014d24 <fiprintf>
 8014ca2:	f7fd fe13 	bl	80128cc <abort>
 8014ca6:	4b04      	ldr	r3, [pc, #16]	@ (8014cb8 <__assert_func+0x38>)
 8014ca8:	e7f4      	b.n	8014c94 <__assert_func+0x14>
 8014caa:	bf00      	nop
 8014cac:	20000034 	.word	0x20000034
 8014cb0:	08016afd 	.word	0x08016afd
 8014cb4:	08016acf 	.word	0x08016acf
 8014cb8:	08016ac2 	.word	0x08016ac2

08014cbc <_calloc_r>:
 8014cbc:	b570      	push	{r4, r5, r6, lr}
 8014cbe:	fba1 5402 	umull	r5, r4, r1, r2
 8014cc2:	b93c      	cbnz	r4, 8014cd4 <_calloc_r+0x18>
 8014cc4:	4629      	mov	r1, r5
 8014cc6:	f7fd fe3b 	bl	8012940 <_malloc_r>
 8014cca:	4606      	mov	r6, r0
 8014ccc:	b928      	cbnz	r0, 8014cda <_calloc_r+0x1e>
 8014cce:	2600      	movs	r6, #0
 8014cd0:	4630      	mov	r0, r6
 8014cd2:	bd70      	pop	{r4, r5, r6, pc}
 8014cd4:	220c      	movs	r2, #12
 8014cd6:	6002      	str	r2, [r0, #0]
 8014cd8:	e7f9      	b.n	8014cce <_calloc_r+0x12>
 8014cda:	462a      	mov	r2, r5
 8014cdc:	4621      	mov	r1, r4
 8014cde:	f7fe fc26 	bl	801352e <memset>
 8014ce2:	e7f5      	b.n	8014cd0 <_calloc_r+0x14>

08014ce4 <__ascii_mbtowc>:
 8014ce4:	b082      	sub	sp, #8
 8014ce6:	b901      	cbnz	r1, 8014cea <__ascii_mbtowc+0x6>
 8014ce8:	a901      	add	r1, sp, #4
 8014cea:	b142      	cbz	r2, 8014cfe <__ascii_mbtowc+0x1a>
 8014cec:	b14b      	cbz	r3, 8014d02 <__ascii_mbtowc+0x1e>
 8014cee:	7813      	ldrb	r3, [r2, #0]
 8014cf0:	600b      	str	r3, [r1, #0]
 8014cf2:	7812      	ldrb	r2, [r2, #0]
 8014cf4:	1e10      	subs	r0, r2, #0
 8014cf6:	bf18      	it	ne
 8014cf8:	2001      	movne	r0, #1
 8014cfa:	b002      	add	sp, #8
 8014cfc:	4770      	bx	lr
 8014cfe:	4610      	mov	r0, r2
 8014d00:	e7fb      	b.n	8014cfa <__ascii_mbtowc+0x16>
 8014d02:	f06f 0001 	mvn.w	r0, #1
 8014d06:	e7f8      	b.n	8014cfa <__ascii_mbtowc+0x16>

08014d08 <__ascii_wctomb>:
 8014d08:	4603      	mov	r3, r0
 8014d0a:	4608      	mov	r0, r1
 8014d0c:	b141      	cbz	r1, 8014d20 <__ascii_wctomb+0x18>
 8014d0e:	2aff      	cmp	r2, #255	@ 0xff
 8014d10:	d904      	bls.n	8014d1c <__ascii_wctomb+0x14>
 8014d12:	228a      	movs	r2, #138	@ 0x8a
 8014d14:	601a      	str	r2, [r3, #0]
 8014d16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014d1a:	4770      	bx	lr
 8014d1c:	700a      	strb	r2, [r1, #0]
 8014d1e:	2001      	movs	r0, #1
 8014d20:	4770      	bx	lr
	...

08014d24 <fiprintf>:
 8014d24:	b40e      	push	{r1, r2, r3}
 8014d26:	b503      	push	{r0, r1, lr}
 8014d28:	4601      	mov	r1, r0
 8014d2a:	ab03      	add	r3, sp, #12
 8014d2c:	4805      	ldr	r0, [pc, #20]	@ (8014d44 <fiprintf+0x20>)
 8014d2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d32:	6800      	ldr	r0, [r0, #0]
 8014d34:	9301      	str	r3, [sp, #4]
 8014d36:	f000 f831 	bl	8014d9c <_vfiprintf_r>
 8014d3a:	b002      	add	sp, #8
 8014d3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014d40:	b003      	add	sp, #12
 8014d42:	4770      	bx	lr
 8014d44:	20000034 	.word	0x20000034

08014d48 <__sfputc_r>:
 8014d48:	6893      	ldr	r3, [r2, #8]
 8014d4a:	3b01      	subs	r3, #1
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	b410      	push	{r4}
 8014d50:	6093      	str	r3, [r2, #8]
 8014d52:	da08      	bge.n	8014d66 <__sfputc_r+0x1e>
 8014d54:	6994      	ldr	r4, [r2, #24]
 8014d56:	42a3      	cmp	r3, r4
 8014d58:	db01      	blt.n	8014d5e <__sfputc_r+0x16>
 8014d5a:	290a      	cmp	r1, #10
 8014d5c:	d103      	bne.n	8014d66 <__sfputc_r+0x1e>
 8014d5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d62:	f000 b933 	b.w	8014fcc <__swbuf_r>
 8014d66:	6813      	ldr	r3, [r2, #0]
 8014d68:	1c58      	adds	r0, r3, #1
 8014d6a:	6010      	str	r0, [r2, #0]
 8014d6c:	7019      	strb	r1, [r3, #0]
 8014d6e:	4608      	mov	r0, r1
 8014d70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d74:	4770      	bx	lr

08014d76 <__sfputs_r>:
 8014d76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d78:	4606      	mov	r6, r0
 8014d7a:	460f      	mov	r7, r1
 8014d7c:	4614      	mov	r4, r2
 8014d7e:	18d5      	adds	r5, r2, r3
 8014d80:	42ac      	cmp	r4, r5
 8014d82:	d101      	bne.n	8014d88 <__sfputs_r+0x12>
 8014d84:	2000      	movs	r0, #0
 8014d86:	e007      	b.n	8014d98 <__sfputs_r+0x22>
 8014d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d8c:	463a      	mov	r2, r7
 8014d8e:	4630      	mov	r0, r6
 8014d90:	f7ff ffda 	bl	8014d48 <__sfputc_r>
 8014d94:	1c43      	adds	r3, r0, #1
 8014d96:	d1f3      	bne.n	8014d80 <__sfputs_r+0xa>
 8014d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014d9c <_vfiprintf_r>:
 8014d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014da0:	460d      	mov	r5, r1
 8014da2:	b09d      	sub	sp, #116	@ 0x74
 8014da4:	4614      	mov	r4, r2
 8014da6:	4698      	mov	r8, r3
 8014da8:	4606      	mov	r6, r0
 8014daa:	b118      	cbz	r0, 8014db4 <_vfiprintf_r+0x18>
 8014dac:	6a03      	ldr	r3, [r0, #32]
 8014dae:	b90b      	cbnz	r3, 8014db4 <_vfiprintf_r+0x18>
 8014db0:	f7fe fb44 	bl	801343c <__sinit>
 8014db4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014db6:	07d9      	lsls	r1, r3, #31
 8014db8:	d405      	bmi.n	8014dc6 <_vfiprintf_r+0x2a>
 8014dba:	89ab      	ldrh	r3, [r5, #12]
 8014dbc:	059a      	lsls	r2, r3, #22
 8014dbe:	d402      	bmi.n	8014dc6 <_vfiprintf_r+0x2a>
 8014dc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014dc2:	f7fe fc86 	bl	80136d2 <__retarget_lock_acquire_recursive>
 8014dc6:	89ab      	ldrh	r3, [r5, #12]
 8014dc8:	071b      	lsls	r3, r3, #28
 8014dca:	d501      	bpl.n	8014dd0 <_vfiprintf_r+0x34>
 8014dcc:	692b      	ldr	r3, [r5, #16]
 8014dce:	b99b      	cbnz	r3, 8014df8 <_vfiprintf_r+0x5c>
 8014dd0:	4629      	mov	r1, r5
 8014dd2:	4630      	mov	r0, r6
 8014dd4:	f000 f938 	bl	8015048 <__swsetup_r>
 8014dd8:	b170      	cbz	r0, 8014df8 <_vfiprintf_r+0x5c>
 8014dda:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014ddc:	07dc      	lsls	r4, r3, #31
 8014dde:	d504      	bpl.n	8014dea <_vfiprintf_r+0x4e>
 8014de0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014de4:	b01d      	add	sp, #116	@ 0x74
 8014de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dea:	89ab      	ldrh	r3, [r5, #12]
 8014dec:	0598      	lsls	r0, r3, #22
 8014dee:	d4f7      	bmi.n	8014de0 <_vfiprintf_r+0x44>
 8014df0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014df2:	f7fe fc6f 	bl	80136d4 <__retarget_lock_release_recursive>
 8014df6:	e7f3      	b.n	8014de0 <_vfiprintf_r+0x44>
 8014df8:	2300      	movs	r3, #0
 8014dfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8014dfc:	2320      	movs	r3, #32
 8014dfe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014e02:	f8cd 800c 	str.w	r8, [sp, #12]
 8014e06:	2330      	movs	r3, #48	@ 0x30
 8014e08:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014fb8 <_vfiprintf_r+0x21c>
 8014e0c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014e10:	f04f 0901 	mov.w	r9, #1
 8014e14:	4623      	mov	r3, r4
 8014e16:	469a      	mov	sl, r3
 8014e18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014e1c:	b10a      	cbz	r2, 8014e22 <_vfiprintf_r+0x86>
 8014e1e:	2a25      	cmp	r2, #37	@ 0x25
 8014e20:	d1f9      	bne.n	8014e16 <_vfiprintf_r+0x7a>
 8014e22:	ebba 0b04 	subs.w	fp, sl, r4
 8014e26:	d00b      	beq.n	8014e40 <_vfiprintf_r+0xa4>
 8014e28:	465b      	mov	r3, fp
 8014e2a:	4622      	mov	r2, r4
 8014e2c:	4629      	mov	r1, r5
 8014e2e:	4630      	mov	r0, r6
 8014e30:	f7ff ffa1 	bl	8014d76 <__sfputs_r>
 8014e34:	3001      	adds	r0, #1
 8014e36:	f000 80a7 	beq.w	8014f88 <_vfiprintf_r+0x1ec>
 8014e3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014e3c:	445a      	add	r2, fp
 8014e3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8014e40:	f89a 3000 	ldrb.w	r3, [sl]
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	f000 809f 	beq.w	8014f88 <_vfiprintf_r+0x1ec>
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014e50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014e54:	f10a 0a01 	add.w	sl, sl, #1
 8014e58:	9304      	str	r3, [sp, #16]
 8014e5a:	9307      	str	r3, [sp, #28]
 8014e5c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014e60:	931a      	str	r3, [sp, #104]	@ 0x68
 8014e62:	4654      	mov	r4, sl
 8014e64:	2205      	movs	r2, #5
 8014e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e6a:	4853      	ldr	r0, [pc, #332]	@ (8014fb8 <_vfiprintf_r+0x21c>)
 8014e6c:	f7eb f9e0 	bl	8000230 <memchr>
 8014e70:	9a04      	ldr	r2, [sp, #16]
 8014e72:	b9d8      	cbnz	r0, 8014eac <_vfiprintf_r+0x110>
 8014e74:	06d1      	lsls	r1, r2, #27
 8014e76:	bf44      	itt	mi
 8014e78:	2320      	movmi	r3, #32
 8014e7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014e7e:	0713      	lsls	r3, r2, #28
 8014e80:	bf44      	itt	mi
 8014e82:	232b      	movmi	r3, #43	@ 0x2b
 8014e84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014e88:	f89a 3000 	ldrb.w	r3, [sl]
 8014e8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8014e8e:	d015      	beq.n	8014ebc <_vfiprintf_r+0x120>
 8014e90:	9a07      	ldr	r2, [sp, #28]
 8014e92:	4654      	mov	r4, sl
 8014e94:	2000      	movs	r0, #0
 8014e96:	f04f 0c0a 	mov.w	ip, #10
 8014e9a:	4621      	mov	r1, r4
 8014e9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014ea0:	3b30      	subs	r3, #48	@ 0x30
 8014ea2:	2b09      	cmp	r3, #9
 8014ea4:	d94b      	bls.n	8014f3e <_vfiprintf_r+0x1a2>
 8014ea6:	b1b0      	cbz	r0, 8014ed6 <_vfiprintf_r+0x13a>
 8014ea8:	9207      	str	r2, [sp, #28]
 8014eaa:	e014      	b.n	8014ed6 <_vfiprintf_r+0x13a>
 8014eac:	eba0 0308 	sub.w	r3, r0, r8
 8014eb0:	fa09 f303 	lsl.w	r3, r9, r3
 8014eb4:	4313      	orrs	r3, r2
 8014eb6:	9304      	str	r3, [sp, #16]
 8014eb8:	46a2      	mov	sl, r4
 8014eba:	e7d2      	b.n	8014e62 <_vfiprintf_r+0xc6>
 8014ebc:	9b03      	ldr	r3, [sp, #12]
 8014ebe:	1d19      	adds	r1, r3, #4
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	9103      	str	r1, [sp, #12]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	bfbb      	ittet	lt
 8014ec8:	425b      	neglt	r3, r3
 8014eca:	f042 0202 	orrlt.w	r2, r2, #2
 8014ece:	9307      	strge	r3, [sp, #28]
 8014ed0:	9307      	strlt	r3, [sp, #28]
 8014ed2:	bfb8      	it	lt
 8014ed4:	9204      	strlt	r2, [sp, #16]
 8014ed6:	7823      	ldrb	r3, [r4, #0]
 8014ed8:	2b2e      	cmp	r3, #46	@ 0x2e
 8014eda:	d10a      	bne.n	8014ef2 <_vfiprintf_r+0x156>
 8014edc:	7863      	ldrb	r3, [r4, #1]
 8014ede:	2b2a      	cmp	r3, #42	@ 0x2a
 8014ee0:	d132      	bne.n	8014f48 <_vfiprintf_r+0x1ac>
 8014ee2:	9b03      	ldr	r3, [sp, #12]
 8014ee4:	1d1a      	adds	r2, r3, #4
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	9203      	str	r2, [sp, #12]
 8014eea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014eee:	3402      	adds	r4, #2
 8014ef0:	9305      	str	r3, [sp, #20]
 8014ef2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014fc8 <_vfiprintf_r+0x22c>
 8014ef6:	7821      	ldrb	r1, [r4, #0]
 8014ef8:	2203      	movs	r2, #3
 8014efa:	4650      	mov	r0, sl
 8014efc:	f7eb f998 	bl	8000230 <memchr>
 8014f00:	b138      	cbz	r0, 8014f12 <_vfiprintf_r+0x176>
 8014f02:	9b04      	ldr	r3, [sp, #16]
 8014f04:	eba0 000a 	sub.w	r0, r0, sl
 8014f08:	2240      	movs	r2, #64	@ 0x40
 8014f0a:	4082      	lsls	r2, r0
 8014f0c:	4313      	orrs	r3, r2
 8014f0e:	3401      	adds	r4, #1
 8014f10:	9304      	str	r3, [sp, #16]
 8014f12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f16:	4829      	ldr	r0, [pc, #164]	@ (8014fbc <_vfiprintf_r+0x220>)
 8014f18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014f1c:	2206      	movs	r2, #6
 8014f1e:	f7eb f987 	bl	8000230 <memchr>
 8014f22:	2800      	cmp	r0, #0
 8014f24:	d03f      	beq.n	8014fa6 <_vfiprintf_r+0x20a>
 8014f26:	4b26      	ldr	r3, [pc, #152]	@ (8014fc0 <_vfiprintf_r+0x224>)
 8014f28:	bb1b      	cbnz	r3, 8014f72 <_vfiprintf_r+0x1d6>
 8014f2a:	9b03      	ldr	r3, [sp, #12]
 8014f2c:	3307      	adds	r3, #7
 8014f2e:	f023 0307 	bic.w	r3, r3, #7
 8014f32:	3308      	adds	r3, #8
 8014f34:	9303      	str	r3, [sp, #12]
 8014f36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014f38:	443b      	add	r3, r7
 8014f3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8014f3c:	e76a      	b.n	8014e14 <_vfiprintf_r+0x78>
 8014f3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014f42:	460c      	mov	r4, r1
 8014f44:	2001      	movs	r0, #1
 8014f46:	e7a8      	b.n	8014e9a <_vfiprintf_r+0xfe>
 8014f48:	2300      	movs	r3, #0
 8014f4a:	3401      	adds	r4, #1
 8014f4c:	9305      	str	r3, [sp, #20]
 8014f4e:	4619      	mov	r1, r3
 8014f50:	f04f 0c0a 	mov.w	ip, #10
 8014f54:	4620      	mov	r0, r4
 8014f56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014f5a:	3a30      	subs	r2, #48	@ 0x30
 8014f5c:	2a09      	cmp	r2, #9
 8014f5e:	d903      	bls.n	8014f68 <_vfiprintf_r+0x1cc>
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d0c6      	beq.n	8014ef2 <_vfiprintf_r+0x156>
 8014f64:	9105      	str	r1, [sp, #20]
 8014f66:	e7c4      	b.n	8014ef2 <_vfiprintf_r+0x156>
 8014f68:	fb0c 2101 	mla	r1, ip, r1, r2
 8014f6c:	4604      	mov	r4, r0
 8014f6e:	2301      	movs	r3, #1
 8014f70:	e7f0      	b.n	8014f54 <_vfiprintf_r+0x1b8>
 8014f72:	ab03      	add	r3, sp, #12
 8014f74:	9300      	str	r3, [sp, #0]
 8014f76:	462a      	mov	r2, r5
 8014f78:	4b12      	ldr	r3, [pc, #72]	@ (8014fc4 <_vfiprintf_r+0x228>)
 8014f7a:	a904      	add	r1, sp, #16
 8014f7c:	4630      	mov	r0, r6
 8014f7e:	f7fd fe19 	bl	8012bb4 <_printf_float>
 8014f82:	4607      	mov	r7, r0
 8014f84:	1c78      	adds	r0, r7, #1
 8014f86:	d1d6      	bne.n	8014f36 <_vfiprintf_r+0x19a>
 8014f88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014f8a:	07d9      	lsls	r1, r3, #31
 8014f8c:	d405      	bmi.n	8014f9a <_vfiprintf_r+0x1fe>
 8014f8e:	89ab      	ldrh	r3, [r5, #12]
 8014f90:	059a      	lsls	r2, r3, #22
 8014f92:	d402      	bmi.n	8014f9a <_vfiprintf_r+0x1fe>
 8014f94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014f96:	f7fe fb9d 	bl	80136d4 <__retarget_lock_release_recursive>
 8014f9a:	89ab      	ldrh	r3, [r5, #12]
 8014f9c:	065b      	lsls	r3, r3, #25
 8014f9e:	f53f af1f 	bmi.w	8014de0 <_vfiprintf_r+0x44>
 8014fa2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014fa4:	e71e      	b.n	8014de4 <_vfiprintf_r+0x48>
 8014fa6:	ab03      	add	r3, sp, #12
 8014fa8:	9300      	str	r3, [sp, #0]
 8014faa:	462a      	mov	r2, r5
 8014fac:	4b05      	ldr	r3, [pc, #20]	@ (8014fc4 <_vfiprintf_r+0x228>)
 8014fae:	a904      	add	r1, sp, #16
 8014fb0:	4630      	mov	r0, r6
 8014fb2:	f7fe f897 	bl	80130e4 <_printf_i>
 8014fb6:	e7e4      	b.n	8014f82 <_vfiprintf_r+0x1e6>
 8014fb8:	08016bff 	.word	0x08016bff
 8014fbc:	08016c09 	.word	0x08016c09
 8014fc0:	08012bb5 	.word	0x08012bb5
 8014fc4:	08014d77 	.word	0x08014d77
 8014fc8:	08016c05 	.word	0x08016c05

08014fcc <__swbuf_r>:
 8014fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fce:	460e      	mov	r6, r1
 8014fd0:	4614      	mov	r4, r2
 8014fd2:	4605      	mov	r5, r0
 8014fd4:	b118      	cbz	r0, 8014fde <__swbuf_r+0x12>
 8014fd6:	6a03      	ldr	r3, [r0, #32]
 8014fd8:	b90b      	cbnz	r3, 8014fde <__swbuf_r+0x12>
 8014fda:	f7fe fa2f 	bl	801343c <__sinit>
 8014fde:	69a3      	ldr	r3, [r4, #24]
 8014fe0:	60a3      	str	r3, [r4, #8]
 8014fe2:	89a3      	ldrh	r3, [r4, #12]
 8014fe4:	071a      	lsls	r2, r3, #28
 8014fe6:	d501      	bpl.n	8014fec <__swbuf_r+0x20>
 8014fe8:	6923      	ldr	r3, [r4, #16]
 8014fea:	b943      	cbnz	r3, 8014ffe <__swbuf_r+0x32>
 8014fec:	4621      	mov	r1, r4
 8014fee:	4628      	mov	r0, r5
 8014ff0:	f000 f82a 	bl	8015048 <__swsetup_r>
 8014ff4:	b118      	cbz	r0, 8014ffe <__swbuf_r+0x32>
 8014ff6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8014ffa:	4638      	mov	r0, r7
 8014ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ffe:	6823      	ldr	r3, [r4, #0]
 8015000:	6922      	ldr	r2, [r4, #16]
 8015002:	1a98      	subs	r0, r3, r2
 8015004:	6963      	ldr	r3, [r4, #20]
 8015006:	b2f6      	uxtb	r6, r6
 8015008:	4283      	cmp	r3, r0
 801500a:	4637      	mov	r7, r6
 801500c:	dc05      	bgt.n	801501a <__swbuf_r+0x4e>
 801500e:	4621      	mov	r1, r4
 8015010:	4628      	mov	r0, r5
 8015012:	f7ff fe0d 	bl	8014c30 <_fflush_r>
 8015016:	2800      	cmp	r0, #0
 8015018:	d1ed      	bne.n	8014ff6 <__swbuf_r+0x2a>
 801501a:	68a3      	ldr	r3, [r4, #8]
 801501c:	3b01      	subs	r3, #1
 801501e:	60a3      	str	r3, [r4, #8]
 8015020:	6823      	ldr	r3, [r4, #0]
 8015022:	1c5a      	adds	r2, r3, #1
 8015024:	6022      	str	r2, [r4, #0]
 8015026:	701e      	strb	r6, [r3, #0]
 8015028:	6962      	ldr	r2, [r4, #20]
 801502a:	1c43      	adds	r3, r0, #1
 801502c:	429a      	cmp	r2, r3
 801502e:	d004      	beq.n	801503a <__swbuf_r+0x6e>
 8015030:	89a3      	ldrh	r3, [r4, #12]
 8015032:	07db      	lsls	r3, r3, #31
 8015034:	d5e1      	bpl.n	8014ffa <__swbuf_r+0x2e>
 8015036:	2e0a      	cmp	r6, #10
 8015038:	d1df      	bne.n	8014ffa <__swbuf_r+0x2e>
 801503a:	4621      	mov	r1, r4
 801503c:	4628      	mov	r0, r5
 801503e:	f7ff fdf7 	bl	8014c30 <_fflush_r>
 8015042:	2800      	cmp	r0, #0
 8015044:	d0d9      	beq.n	8014ffa <__swbuf_r+0x2e>
 8015046:	e7d6      	b.n	8014ff6 <__swbuf_r+0x2a>

08015048 <__swsetup_r>:
 8015048:	b538      	push	{r3, r4, r5, lr}
 801504a:	4b29      	ldr	r3, [pc, #164]	@ (80150f0 <__swsetup_r+0xa8>)
 801504c:	4605      	mov	r5, r0
 801504e:	6818      	ldr	r0, [r3, #0]
 8015050:	460c      	mov	r4, r1
 8015052:	b118      	cbz	r0, 801505c <__swsetup_r+0x14>
 8015054:	6a03      	ldr	r3, [r0, #32]
 8015056:	b90b      	cbnz	r3, 801505c <__swsetup_r+0x14>
 8015058:	f7fe f9f0 	bl	801343c <__sinit>
 801505c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015060:	0719      	lsls	r1, r3, #28
 8015062:	d422      	bmi.n	80150aa <__swsetup_r+0x62>
 8015064:	06da      	lsls	r2, r3, #27
 8015066:	d407      	bmi.n	8015078 <__swsetup_r+0x30>
 8015068:	2209      	movs	r2, #9
 801506a:	602a      	str	r2, [r5, #0]
 801506c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015070:	81a3      	strh	r3, [r4, #12]
 8015072:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015076:	e033      	b.n	80150e0 <__swsetup_r+0x98>
 8015078:	0758      	lsls	r0, r3, #29
 801507a:	d512      	bpl.n	80150a2 <__swsetup_r+0x5a>
 801507c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801507e:	b141      	cbz	r1, 8015092 <__swsetup_r+0x4a>
 8015080:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015084:	4299      	cmp	r1, r3
 8015086:	d002      	beq.n	801508e <__swsetup_r+0x46>
 8015088:	4628      	mov	r0, r5
 801508a:	f7ff f981 	bl	8014390 <_free_r>
 801508e:	2300      	movs	r3, #0
 8015090:	6363      	str	r3, [r4, #52]	@ 0x34
 8015092:	89a3      	ldrh	r3, [r4, #12]
 8015094:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015098:	81a3      	strh	r3, [r4, #12]
 801509a:	2300      	movs	r3, #0
 801509c:	6063      	str	r3, [r4, #4]
 801509e:	6923      	ldr	r3, [r4, #16]
 80150a0:	6023      	str	r3, [r4, #0]
 80150a2:	89a3      	ldrh	r3, [r4, #12]
 80150a4:	f043 0308 	orr.w	r3, r3, #8
 80150a8:	81a3      	strh	r3, [r4, #12]
 80150aa:	6923      	ldr	r3, [r4, #16]
 80150ac:	b94b      	cbnz	r3, 80150c2 <__swsetup_r+0x7a>
 80150ae:	89a3      	ldrh	r3, [r4, #12]
 80150b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80150b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80150b8:	d003      	beq.n	80150c2 <__swsetup_r+0x7a>
 80150ba:	4621      	mov	r1, r4
 80150bc:	4628      	mov	r0, r5
 80150be:	f000 f83f 	bl	8015140 <__smakebuf_r>
 80150c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80150c6:	f013 0201 	ands.w	r2, r3, #1
 80150ca:	d00a      	beq.n	80150e2 <__swsetup_r+0x9a>
 80150cc:	2200      	movs	r2, #0
 80150ce:	60a2      	str	r2, [r4, #8]
 80150d0:	6962      	ldr	r2, [r4, #20]
 80150d2:	4252      	negs	r2, r2
 80150d4:	61a2      	str	r2, [r4, #24]
 80150d6:	6922      	ldr	r2, [r4, #16]
 80150d8:	b942      	cbnz	r2, 80150ec <__swsetup_r+0xa4>
 80150da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80150de:	d1c5      	bne.n	801506c <__swsetup_r+0x24>
 80150e0:	bd38      	pop	{r3, r4, r5, pc}
 80150e2:	0799      	lsls	r1, r3, #30
 80150e4:	bf58      	it	pl
 80150e6:	6962      	ldrpl	r2, [r4, #20]
 80150e8:	60a2      	str	r2, [r4, #8]
 80150ea:	e7f4      	b.n	80150d6 <__swsetup_r+0x8e>
 80150ec:	2000      	movs	r0, #0
 80150ee:	e7f7      	b.n	80150e0 <__swsetup_r+0x98>
 80150f0:	20000034 	.word	0x20000034

080150f4 <__swhatbuf_r>:
 80150f4:	b570      	push	{r4, r5, r6, lr}
 80150f6:	460c      	mov	r4, r1
 80150f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150fc:	2900      	cmp	r1, #0
 80150fe:	b096      	sub	sp, #88	@ 0x58
 8015100:	4615      	mov	r5, r2
 8015102:	461e      	mov	r6, r3
 8015104:	da0d      	bge.n	8015122 <__swhatbuf_r+0x2e>
 8015106:	89a3      	ldrh	r3, [r4, #12]
 8015108:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801510c:	f04f 0100 	mov.w	r1, #0
 8015110:	bf14      	ite	ne
 8015112:	2340      	movne	r3, #64	@ 0x40
 8015114:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015118:	2000      	movs	r0, #0
 801511a:	6031      	str	r1, [r6, #0]
 801511c:	602b      	str	r3, [r5, #0]
 801511e:	b016      	add	sp, #88	@ 0x58
 8015120:	bd70      	pop	{r4, r5, r6, pc}
 8015122:	466a      	mov	r2, sp
 8015124:	f000 f848 	bl	80151b8 <_fstat_r>
 8015128:	2800      	cmp	r0, #0
 801512a:	dbec      	blt.n	8015106 <__swhatbuf_r+0x12>
 801512c:	9901      	ldr	r1, [sp, #4]
 801512e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015132:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015136:	4259      	negs	r1, r3
 8015138:	4159      	adcs	r1, r3
 801513a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801513e:	e7eb      	b.n	8015118 <__swhatbuf_r+0x24>

08015140 <__smakebuf_r>:
 8015140:	898b      	ldrh	r3, [r1, #12]
 8015142:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015144:	079d      	lsls	r5, r3, #30
 8015146:	4606      	mov	r6, r0
 8015148:	460c      	mov	r4, r1
 801514a:	d507      	bpl.n	801515c <__smakebuf_r+0x1c>
 801514c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015150:	6023      	str	r3, [r4, #0]
 8015152:	6123      	str	r3, [r4, #16]
 8015154:	2301      	movs	r3, #1
 8015156:	6163      	str	r3, [r4, #20]
 8015158:	b003      	add	sp, #12
 801515a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801515c:	ab01      	add	r3, sp, #4
 801515e:	466a      	mov	r2, sp
 8015160:	f7ff ffc8 	bl	80150f4 <__swhatbuf_r>
 8015164:	9f00      	ldr	r7, [sp, #0]
 8015166:	4605      	mov	r5, r0
 8015168:	4639      	mov	r1, r7
 801516a:	4630      	mov	r0, r6
 801516c:	f7fd fbe8 	bl	8012940 <_malloc_r>
 8015170:	b948      	cbnz	r0, 8015186 <__smakebuf_r+0x46>
 8015172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015176:	059a      	lsls	r2, r3, #22
 8015178:	d4ee      	bmi.n	8015158 <__smakebuf_r+0x18>
 801517a:	f023 0303 	bic.w	r3, r3, #3
 801517e:	f043 0302 	orr.w	r3, r3, #2
 8015182:	81a3      	strh	r3, [r4, #12]
 8015184:	e7e2      	b.n	801514c <__smakebuf_r+0xc>
 8015186:	89a3      	ldrh	r3, [r4, #12]
 8015188:	6020      	str	r0, [r4, #0]
 801518a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801518e:	81a3      	strh	r3, [r4, #12]
 8015190:	9b01      	ldr	r3, [sp, #4]
 8015192:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015196:	b15b      	cbz	r3, 80151b0 <__smakebuf_r+0x70>
 8015198:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801519c:	4630      	mov	r0, r6
 801519e:	f000 f81d 	bl	80151dc <_isatty_r>
 80151a2:	b128      	cbz	r0, 80151b0 <__smakebuf_r+0x70>
 80151a4:	89a3      	ldrh	r3, [r4, #12]
 80151a6:	f023 0303 	bic.w	r3, r3, #3
 80151aa:	f043 0301 	orr.w	r3, r3, #1
 80151ae:	81a3      	strh	r3, [r4, #12]
 80151b0:	89a3      	ldrh	r3, [r4, #12]
 80151b2:	431d      	orrs	r5, r3
 80151b4:	81a5      	strh	r5, [r4, #12]
 80151b6:	e7cf      	b.n	8015158 <__smakebuf_r+0x18>

080151b8 <_fstat_r>:
 80151b8:	b538      	push	{r3, r4, r5, lr}
 80151ba:	4d07      	ldr	r5, [pc, #28]	@ (80151d8 <_fstat_r+0x20>)
 80151bc:	2300      	movs	r3, #0
 80151be:	4604      	mov	r4, r0
 80151c0:	4608      	mov	r0, r1
 80151c2:	4611      	mov	r1, r2
 80151c4:	602b      	str	r3, [r5, #0]
 80151c6:	f7f8 f9d3 	bl	800d570 <_fstat>
 80151ca:	1c43      	adds	r3, r0, #1
 80151cc:	d102      	bne.n	80151d4 <_fstat_r+0x1c>
 80151ce:	682b      	ldr	r3, [r5, #0]
 80151d0:	b103      	cbz	r3, 80151d4 <_fstat_r+0x1c>
 80151d2:	6023      	str	r3, [r4, #0]
 80151d4:	bd38      	pop	{r3, r4, r5, pc}
 80151d6:	bf00      	nop
 80151d8:	20000584 	.word	0x20000584

080151dc <_isatty_r>:
 80151dc:	b538      	push	{r3, r4, r5, lr}
 80151de:	4d06      	ldr	r5, [pc, #24]	@ (80151f8 <_isatty_r+0x1c>)
 80151e0:	2300      	movs	r3, #0
 80151e2:	4604      	mov	r4, r0
 80151e4:	4608      	mov	r0, r1
 80151e6:	602b      	str	r3, [r5, #0]
 80151e8:	f7f8 f9d2 	bl	800d590 <_isatty>
 80151ec:	1c43      	adds	r3, r0, #1
 80151ee:	d102      	bne.n	80151f6 <_isatty_r+0x1a>
 80151f0:	682b      	ldr	r3, [r5, #0]
 80151f2:	b103      	cbz	r3, 80151f6 <_isatty_r+0x1a>
 80151f4:	6023      	str	r3, [r4, #0]
 80151f6:	bd38      	pop	{r3, r4, r5, pc}
 80151f8:	20000584 	.word	0x20000584

080151fc <_Unwind_GetDataRelBase>:
 80151fc:	b508      	push	{r3, lr}
 80151fe:	f7fd fb65 	bl	80128cc <abort>

08015202 <_Unwind_GetTextRelBase>:
 8015202:	b508      	push	{r3, lr}
 8015204:	f7ff fffa 	bl	80151fc <_Unwind_GetDataRelBase>

08015208 <_init>:
 8015208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801520a:	bf00      	nop
 801520c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801520e:	bc08      	pop	{r3}
 8015210:	469e      	mov	lr, r3
 8015212:	4770      	bx	lr

08015214 <_fini>:
 8015214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015216:	bf00      	nop
 8015218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801521a:	bc08      	pop	{r3}
 801521c:	469e      	mov	lr, r3
 801521e:	4770      	bx	lr
