
stm32_to_ros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b718  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000714  0800b8e8  0800b8e8  0001b8e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bffc  0800bffc  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bffc  0800bffc  0001bffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c004  0800c004  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c004  0800c004  0001c004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800c00c  0800c00c  0001c00c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800c014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  200001d4  0800c1e8  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  0800c1e8  000204d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   000258c9  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a38  00000000  00000000  00045b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a58  00000000  00000000  00049548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000143f  00000000  00000000  0004afa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026d18  00000000  00000000  0004c3df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015c5f  00000000  00000000  000730f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9537  00000000  00000000  00088d56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008ad8  00000000  00000000  00172290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0017ad68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b8d0 	.word	0x0800b8d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	0800b8d0 	.word	0x0800b8d0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b970 	b.w	8000f00 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9e08      	ldr	r6, [sp, #32]
 8000c3e:	460d      	mov	r5, r1
 8000c40:	4604      	mov	r4, r0
 8000c42:	460f      	mov	r7, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14a      	bne.n	8000cde <__udivmoddi4+0xa6>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4694      	mov	ip, r2
 8000c4c:	d965      	bls.n	8000d1a <__udivmoddi4+0xe2>
 8000c4e:	fab2 f382 	clz	r3, r2
 8000c52:	b143      	cbz	r3, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c58:	f1c3 0220 	rsb	r2, r3, #32
 8000c5c:	409f      	lsls	r7, r3
 8000c5e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c62:	4317      	orrs	r7, r2
 8000c64:	409c      	lsls	r4, r3
 8000c66:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c6a:	fa1f f58c 	uxth.w	r5, ip
 8000c6e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c72:	0c22      	lsrs	r2, r4, #16
 8000c74:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c78:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c7c:	fb01 f005 	mul.w	r0, r1, r5
 8000c80:	4290      	cmp	r0, r2
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x62>
 8000c84:	eb1c 0202 	adds.w	r2, ip, r2
 8000c88:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c8c:	f080 811c 	bcs.w	8000ec8 <__udivmoddi4+0x290>
 8000c90:	4290      	cmp	r0, r2
 8000c92:	f240 8119 	bls.w	8000ec8 <__udivmoddi4+0x290>
 8000c96:	3902      	subs	r1, #2
 8000c98:	4462      	add	r2, ip
 8000c9a:	1a12      	subs	r2, r2, r0
 8000c9c:	b2a4      	uxth	r4, r4
 8000c9e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ca2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ca6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000caa:	fb00 f505 	mul.w	r5, r0, r5
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	d90a      	bls.n	8000cc8 <__udivmoddi4+0x90>
 8000cb2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cba:	f080 8107 	bcs.w	8000ecc <__udivmoddi4+0x294>
 8000cbe:	42a5      	cmp	r5, r4
 8000cc0:	f240 8104 	bls.w	8000ecc <__udivmoddi4+0x294>
 8000cc4:	4464      	add	r4, ip
 8000cc6:	3802      	subs	r0, #2
 8000cc8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ccc:	1b64      	subs	r4, r4, r5
 8000cce:	2100      	movs	r1, #0
 8000cd0:	b11e      	cbz	r6, 8000cda <__udivmoddi4+0xa2>
 8000cd2:	40dc      	lsrs	r4, r3
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0xbc>
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	f000 80ed 	beq.w	8000ec2 <__udivmoddi4+0x28a>
 8000ce8:	2100      	movs	r1, #0
 8000cea:	e9c6 0500 	strd	r0, r5, [r6]
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf4:	fab3 f183 	clz	r1, r3
 8000cf8:	2900      	cmp	r1, #0
 8000cfa:	d149      	bne.n	8000d90 <__udivmoddi4+0x158>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	d302      	bcc.n	8000d06 <__udivmoddi4+0xce>
 8000d00:	4282      	cmp	r2, r0
 8000d02:	f200 80f8 	bhi.w	8000ef6 <__udivmoddi4+0x2be>
 8000d06:	1a84      	subs	r4, r0, r2
 8000d08:	eb65 0203 	sbc.w	r2, r5, r3
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	4617      	mov	r7, r2
 8000d10:	2e00      	cmp	r6, #0
 8000d12:	d0e2      	beq.n	8000cda <__udivmoddi4+0xa2>
 8000d14:	e9c6 4700 	strd	r4, r7, [r6]
 8000d18:	e7df      	b.n	8000cda <__udivmoddi4+0xa2>
 8000d1a:	b902      	cbnz	r2, 8000d1e <__udivmoddi4+0xe6>
 8000d1c:	deff      	udf	#255	; 0xff
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f040 8090 	bne.w	8000e48 <__udivmoddi4+0x210>
 8000d28:	1a8a      	subs	r2, r1, r2
 8000d2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2e:	fa1f fe8c 	uxth.w	lr, ip
 8000d32:	2101      	movs	r1, #1
 8000d34:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d38:	fb07 2015 	mls	r0, r7, r5, r2
 8000d3c:	0c22      	lsrs	r2, r4, #16
 8000d3e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d42:	fb0e f005 	mul.w	r0, lr, r5
 8000d46:	4290      	cmp	r0, r2
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x124>
 8000d4a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d4e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x122>
 8000d54:	4290      	cmp	r0, r2
 8000d56:	f200 80cb 	bhi.w	8000ef0 <__udivmoddi4+0x2b8>
 8000d5a:	4645      	mov	r5, r8
 8000d5c:	1a12      	subs	r2, r2, r0
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d64:	fb07 2210 	mls	r2, r7, r0, r2
 8000d68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d6c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d70:	45a6      	cmp	lr, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x14e>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7c:	d202      	bcs.n	8000d84 <__udivmoddi4+0x14c>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f200 80bb 	bhi.w	8000efa <__udivmoddi4+0x2c2>
 8000d84:	4610      	mov	r0, r2
 8000d86:	eba4 040e 	sub.w	r4, r4, lr
 8000d8a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d8e:	e79f      	b.n	8000cd0 <__udivmoddi4+0x98>
 8000d90:	f1c1 0720 	rsb	r7, r1, #32
 8000d94:	408b      	lsls	r3, r1
 8000d96:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d9a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d9e:	fa05 f401 	lsl.w	r4, r5, r1
 8000da2:	fa20 f307 	lsr.w	r3, r0, r7
 8000da6:	40fd      	lsrs	r5, r7
 8000da8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dac:	4323      	orrs	r3, r4
 8000dae:	fbb5 f8f9 	udiv	r8, r5, r9
 8000db2:	fa1f fe8c 	uxth.w	lr, ip
 8000db6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dba:	0c1c      	lsrs	r4, r3, #16
 8000dbc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dc0:	fb08 f50e 	mul.w	r5, r8, lr
 8000dc4:	42a5      	cmp	r5, r4
 8000dc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dca:	fa00 f001 	lsl.w	r0, r0, r1
 8000dce:	d90b      	bls.n	8000de8 <__udivmoddi4+0x1b0>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd8:	f080 8088 	bcs.w	8000eec <__udivmoddi4+0x2b4>
 8000ddc:	42a5      	cmp	r5, r4
 8000dde:	f240 8085 	bls.w	8000eec <__udivmoddi4+0x2b4>
 8000de2:	f1a8 0802 	sub.w	r8, r8, #2
 8000de6:	4464      	add	r4, ip
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	b29d      	uxth	r5, r3
 8000dec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000df0:	fb09 4413 	mls	r4, r9, r3, r4
 8000df4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000df8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x1da>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e08:	d26c      	bcs.n	8000ee4 <__udivmoddi4+0x2ac>
 8000e0a:	45a6      	cmp	lr, r4
 8000e0c:	d96a      	bls.n	8000ee4 <__udivmoddi4+0x2ac>
 8000e0e:	3b02      	subs	r3, #2
 8000e10:	4464      	add	r4, ip
 8000e12:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e16:	fba3 9502 	umull	r9, r5, r3, r2
 8000e1a:	eba4 040e 	sub.w	r4, r4, lr
 8000e1e:	42ac      	cmp	r4, r5
 8000e20:	46c8      	mov	r8, r9
 8000e22:	46ae      	mov	lr, r5
 8000e24:	d356      	bcc.n	8000ed4 <__udivmoddi4+0x29c>
 8000e26:	d053      	beq.n	8000ed0 <__udivmoddi4+0x298>
 8000e28:	b156      	cbz	r6, 8000e40 <__udivmoddi4+0x208>
 8000e2a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e2e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e32:	fa04 f707 	lsl.w	r7, r4, r7
 8000e36:	40ca      	lsrs	r2, r1
 8000e38:	40cc      	lsrs	r4, r1
 8000e3a:	4317      	orrs	r7, r2
 8000e3c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e40:	4618      	mov	r0, r3
 8000e42:	2100      	movs	r1, #0
 8000e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e48:	f1c3 0120 	rsb	r1, r3, #32
 8000e4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e50:	fa20 f201 	lsr.w	r2, r0, r1
 8000e54:	fa25 f101 	lsr.w	r1, r5, r1
 8000e58:	409d      	lsls	r5, r3
 8000e5a:	432a      	orrs	r2, r5
 8000e5c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e60:	fa1f fe8c 	uxth.w	lr, ip
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1510 	mls	r5, r7, r0, r1
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e72:	fb00 f50e 	mul.w	r5, r0, lr
 8000e76:	428d      	cmp	r5, r1
 8000e78:	fa04 f403 	lsl.w	r4, r4, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x258>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e86:	d22f      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000e88:	428d      	cmp	r5, r1
 8000e8a:	d92d      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	1b49      	subs	r1, r1, r5
 8000e92:	b292      	uxth	r2, r2
 8000e94:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e98:	fb07 1115 	mls	r1, r7, r5, r1
 8000e9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ea4:	4291      	cmp	r1, r2
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x282>
 8000ea8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eac:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eb0:	d216      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000eb2:	4291      	cmp	r1, r2
 8000eb4:	d914      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000eb6:	3d02      	subs	r5, #2
 8000eb8:	4462      	add	r2, ip
 8000eba:	1a52      	subs	r2, r2, r1
 8000ebc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ec0:	e738      	b.n	8000d34 <__udivmoddi4+0xfc>
 8000ec2:	4631      	mov	r1, r6
 8000ec4:	4630      	mov	r0, r6
 8000ec6:	e708      	b.n	8000cda <__udivmoddi4+0xa2>
 8000ec8:	4639      	mov	r1, r7
 8000eca:	e6e6      	b.n	8000c9a <__udivmoddi4+0x62>
 8000ecc:	4610      	mov	r0, r2
 8000ece:	e6fb      	b.n	8000cc8 <__udivmoddi4+0x90>
 8000ed0:	4548      	cmp	r0, r9
 8000ed2:	d2a9      	bcs.n	8000e28 <__udivmoddi4+0x1f0>
 8000ed4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000edc:	3b01      	subs	r3, #1
 8000ede:	e7a3      	b.n	8000e28 <__udivmoddi4+0x1f0>
 8000ee0:	4645      	mov	r5, r8
 8000ee2:	e7ea      	b.n	8000eba <__udivmoddi4+0x282>
 8000ee4:	462b      	mov	r3, r5
 8000ee6:	e794      	b.n	8000e12 <__udivmoddi4+0x1da>
 8000ee8:	4640      	mov	r0, r8
 8000eea:	e7d1      	b.n	8000e90 <__udivmoddi4+0x258>
 8000eec:	46d0      	mov	r8, sl
 8000eee:	e77b      	b.n	8000de8 <__udivmoddi4+0x1b0>
 8000ef0:	3d02      	subs	r5, #2
 8000ef2:	4462      	add	r2, ip
 8000ef4:	e732      	b.n	8000d5c <__udivmoddi4+0x124>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e70a      	b.n	8000d10 <__udivmoddi4+0xd8>
 8000efa:	4464      	add	r4, ip
 8000efc:	3802      	subs	r0, #2
 8000efe:	e742      	b.n	8000d86 <__udivmoddi4+0x14e>

08000f00 <__aeabi_idiv0>:
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <_ZNSt8__detail17_List_node_headerC1Ev>:
    {
#if _GLIBCXX_USE_CXX11_ABI
      std::size_t _M_size;
#endif

      _List_node_header() _GLIBCXX_NOEXCEPT
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
      { _M_init(); }
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f000 f805 	bl	8000f1c <_ZNSt8__detail17_List_node_header7_M_initEv>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <_ZNSt8__detail17_List_node_header7_M_initEv>:
	  }
      }
#endif

      void
      _M_init() _GLIBCXX_NOEXCEPT
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
      {
	this->_M_next = this->_M_prev = this;
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	685a      	ldr	r2, [r3, #4]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	601a      	str	r2, [r3, #0]
#if _GLIBCXX_USE_CXX11_ABI
	this->_M_size = 0;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
#endif
      }
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	1e5a      	subs	r2, r3, #1
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	bf0c      	ite	eq
 8000f5e:	2301      	moveq	r3, #1
 8000f60:	2300      	movne	r3, #0
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d019      	beq.n	8000f9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	3308      	adds	r3, #8
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	1e5a      	subs	r2, r3, #1
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	bf0c      	ite	eq
 8000f86:	2301      	moveq	r3, #1
 8000f88:	2300      	movne	r3, #0
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d005      	beq.n	8000f9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	330c      	adds	r3, #12
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	4798      	blx	r3
        }
    }
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <_ZN11AbstractMsgD1Ev>:

class AbstractMsg
{
	public:
		AbstractMsg() = default;
		virtual ~AbstractMsg() {};
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <_ZN11AbstractMsgD1Ev+0x1c>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	0800b958 	.word	0x0800b958

08000fc4 <_ZN11AbstractMsgD0Ev>:
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff ffe9 	bl	8000fa4 <_ZN11AbstractMsgD1Ev>
 8000fd2:	2104      	movs	r1, #4
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f007 fd21 	bl	8008a1c <_ZdlPvj>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <_ZN11AbstractMsgC1Ev>:
		AbstractMsg() = default;
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <_ZN11AbstractMsgC1Ev+0x1c>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	0800b958 	.word	0x0800b958

08001004 <_ZN11HeaderClassC1Ehh>:
{
	static const msg_type header_msg_type = header;
	static const uint8_t header_size = 3;
	public:
		HeaderClass() = delete;
		HeaderClass(uint8_t msg_id, uint8_t msg_len): _data(new uint8_t[HeaderClass::header_msg_type])
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	70fb      	strb	r3, [r7, #3]
 8001010:	4613      	mov	r3, r2
 8001012:	70bb      	strb	r3, [r7, #2]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff ffe4 	bl	8000fe4 <_ZN11AbstractMsgC1Ev>
 800101c:	4a16      	ldr	r2, [pc, #88]	; (8001078 <_ZN11HeaderClassC1Ehh+0x74>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	1d1c      	adds	r4, r3, #4
 8001026:	2000      	movs	r0, #0
 8001028:	f007 fd0d 	bl	8008a46 <_Znaj>
 800102c:	4603      	mov	r3, r0
 800102e:	4619      	mov	r1, r3
 8001030:	4620      	mov	r0, r4
 8001032:	f000 fb62 	bl	80016fa <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
		{
			_data[0] = SerialID::MSG_START;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3304      	adds	r3, #4
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f000 fb8a 	bl	8001756 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 8001042:	4603      	mov	r3, r0
 8001044:	22fe      	movs	r2, #254	; 0xfe
 8001046:	701a      	strb	r2, [r3, #0]
			_data[1] = msg_id;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3304      	adds	r3, #4
 800104c:	2101      	movs	r1, #1
 800104e:	4618      	mov	r0, r3
 8001050:	f000 fb81 	bl	8001756 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 8001054:	4602      	mov	r2, r0
 8001056:	78fb      	ldrb	r3, [r7, #3]
 8001058:	7013      	strb	r3, [r2, #0]
			_data[2] = msg_len;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3304      	adds	r3, #4
 800105e:	2102      	movs	r1, #2
 8001060:	4618      	mov	r0, r3
 8001062:	f000 fb78 	bl	8001756 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 8001066:	4602      	mov	r2, r0
 8001068:	78bb      	ldrb	r3, [r7, #2]
 800106a:	7013      	strb	r3, [r2, #0]
		};
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	bd90      	pop	{r4, r7, pc}
 8001076:	bf00      	nop
 8001078:	0800b93c 	.word	0x0800b93c

0800107c <_ZNK11HeaderClass8get_dataEv>:
		~HeaderClass() = default;
		uint8_t* get_data() const noexcept override {return _data.get();};
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3304      	adds	r3, #4
 8001088:	4618      	mov	r0, r3
 800108a:	f000 fb75 	bl	8001778 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 800108e:	4603      	mov	r3, r0
 8001090:	4618      	mov	r0, r3
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <_ZNK11HeaderClass8get_typeEv>:
		msg_type get_type() const noexcept override {return HeaderClass::header_msg_type;}
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	2300      	movs	r3, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <_ZNK11HeaderClass13get_data_sizeEv>:
		uint8_t get_data_size() const noexcept override {return HeaderClass::header_size;}
 80010ae:	b480      	push	{r7}
 80010b0:	b083      	sub	sp, #12
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
 80010b6:	2303      	movs	r3, #3
 80010b8:	4618      	mov	r0, r3
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <_ZN6AckMsgC1Ev>:
class AckMsg : public AbstractMsg
{
	static const msg_type incoming_msg_type = acknowledge;
	static const uint8_t incoming_msg_size = 3;
	public:
		AckMsg(): _data(new uint8_t[AckMsg::incoming_msg_size])
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ff88 	bl	8000fe4 <_ZN11AbstractMsgC1Ev>
 80010d4:	4a16      	ldr	r2, [pc, #88]	; (8001130 <_ZN6AckMsgC1Ev+0x6c>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	1d1c      	adds	r4, r3, #4
 80010de:	2003      	movs	r0, #3
 80010e0:	f007 fcb1 	bl	8008a46 <_Znaj>
 80010e4:	4603      	mov	r3, r0
 80010e6:	4619      	mov	r1, r3
 80010e8:	4620      	mov	r0, r4
 80010ea:	f000 fb06 	bl	80016fa <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
		{
			_data[0] = SerialID::MSG_NO_ACK;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3304      	adds	r3, #4
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f000 fb2e 	bl	8001756 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 80010fa:	4603      	mov	r3, r0
 80010fc:	22fc      	movs	r2, #252	; 0xfc
 80010fe:	701a      	strb	r2, [r3, #0]
			_data[1] = SerialID::MSG_NO_ID;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3304      	adds	r3, #4
 8001104:	2101      	movs	r1, #1
 8001106:	4618      	mov	r0, r3
 8001108:	f000 fb25 	bl	8001756 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800110c:	4603      	mov	r3, r0
 800110e:	22fb      	movs	r2, #251	; 0xfb
 8001110:	701a      	strb	r2, [r3, #0]
			_data[2] = SerialID::MSG_NO_SIZE;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3304      	adds	r3, #4
 8001116:	2102      	movs	r1, #2
 8001118:	4618      	mov	r0, r3
 800111a:	f000 fb1c 	bl	8001756 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800111e:	4603      	mov	r3, r0
 8001120:	22fa      	movs	r2, #250	; 0xfa
 8001122:	701a      	strb	r2, [r3, #0]
		};
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4618      	mov	r0, r3
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	bd90      	pop	{r4, r7, pc}
 800112e:	bf00      	nop
 8001130:	0800b920 	.word	0x0800b920

08001134 <_ZNK6AckMsg8get_dataEv>:

			}
			return *this;

		}
		uint8_t* get_data() const noexcept override {return _data.get();}
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3304      	adds	r3, #4
 8001140:	4618      	mov	r0, r3
 8001142:	f000 fb19 	bl	8001778 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 8001146:	4603      	mov	r3, r0
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <_ZNK6AckMsg8get_typeEv>:
		msg_type get_type() const noexcept override {return AckMsg::incoming_msg_type;}
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	2302      	movs	r3, #2
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <_ZNK6AckMsg13get_data_sizeEv>:
		uint8_t get_data_size() const noexcept override {return AckMsg::incoming_msg_size;}
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	2303      	movs	r3, #3
 8001170:	4618      	mov	r0, r3
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE10_List_implD1Ev>:
	  }
	return __n;
      }
#endif

      struct _List_impl
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 fb6d 	bl	8001864 <_ZNSaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEED1Ev>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EEC1Ev>:
      const _Node_alloc_type&
      _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT
      { return _M_impl; }

#if __cplusplus >= 201103L
      _List_base() = default;
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 fb50 	bl	8001844 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE10_List_implC1Ev>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EEC1Ev>:

      /**
       *  @brief  Creates a %list with no elements.
       */
#if __cplusplus >= 201103L
      list() = default;
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ffeb 	bl	8001194 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EEC1Ev>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4618      	mov	r0, r3
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EED1Ev>:
       *  things.  The _Base dtor only erases the elements, and note
       *  that if the elements themselves are pointers, the pointed-to
       *  memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      ~list() = default;
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 fb52 	bl	800187c <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EED1Ev>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3304      	adds	r3, #4
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 fb61 	bl	80018b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <_ZNSt10shared_ptrI11AbstractMsgED1Ev>:
   * the stored pointer returned by `get()`, not the owned pointer.
   * To test whether two `shared_ptr` objects share ownership of the same
   * pointer see `std::shared_ptr::owner_before` and `std::owner_less`.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ffea 	bl	80011e2 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <_ZN10MsgHandlerC1EP20__UART_HandleTypeDef>:


class MsgHandler
{
	public:
		MsgHandler(UART_HandleTypeDef *huart2) : huart(huart2), ongoing_fetch(false),register_ongoing_fetch(false), rxHeader(SerialID::MSG_NO_ID,3) {};
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	711a      	strb	r2, [r3, #4]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	715a      	strb	r2, [r3, #5]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3308      	adds	r3, #8
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff43 	bl	80010c4 <_ZN6AckMsgC1Ev>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3310      	adds	r3, #16
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ff3e 	bl	80010c4 <_ZN6AckMsgC1Ev>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3318      	adds	r3, #24
 800124c:	2203      	movs	r2, #3
 800124e:	21fb      	movs	r1, #251	; 0xfb
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fed7 	bl	8001004 <_ZN11HeaderClassC1Ehh>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3320      	adds	r3, #32
 800125a:	4618      	mov	r0, r3
 800125c:	f000 fac0 	bl	80017e0 <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EEC1IS2_vEEv>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3324      	adds	r3, #36	; 0x24
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ffa2 	bl	80011ae <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EEC1Ev>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3330      	adds	r3, #48	; 0x30
 800126e:	4618      	mov	r0, r3
 8001270:	f000 fb14 	bl	800189c <_ZNSt10shared_ptrI11AbstractMsgEC1Ev>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b08f      	sub	sp, #60	; 0x3c
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001286:	f003 feab 	bl	8004fe0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800128a:	f000 f83f 	bl	800130c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800128e:	f000 f971 	bl	8001574 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001292:	f000 f947 	bl	8001524 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 8001296:	f000 f917 	bl	80014c8 <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 800129a:	f000 f8b9 	bl	8001410 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */
  char print_msg[50] = "Hello World\n";
 800129e:	4a16      	ldr	r2, [pc, #88]	; (80012f8 <main+0x78>)
 80012a0:	463b      	mov	r3, r7
 80012a2:	4614      	mov	r4, r2
 80012a4:	6820      	ldr	r0, [r4, #0]
 80012a6:	6861      	ldr	r1, [r4, #4]
 80012a8:	68a2      	ldr	r2, [r4, #8]
 80012aa:	c307      	stmia	r3!, {r0, r1, r2}
 80012ac:	7b22      	ldrb	r2, [r4, #12]
 80012ae:	701a      	strb	r2, [r3, #0]
 80012b0:	f107 030d 	add.w	r3, r7, #13
 80012b4:	2225      	movs	r2, #37	; 0x25
 80012b6:	2100      	movs	r1, #0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f008 faca 	bl	8009852 <memset>
  float tosend1 = 0.1;
 80012be:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <main+0x7c>)
 80012c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_TIM_Base_Start_IT(&htim2);
 80012c2:	480f      	ldr	r0, [pc, #60]	; (8001300 <main+0x80>)
 80012c4:	f005 fc92 	bl	8006bec <HAL_TIM_Base_Start_IT>
  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80012c8:	2120      	movs	r1, #32
 80012ca:	480e      	ldr	r0, [pc, #56]	; (8001304 <main+0x84>)
 80012cc:	f004 fdeb 	bl	8005ea6 <HAL_GPIO_TogglePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 HAL_Delay(1000);
 80012d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012d4:	f003 fef6 	bl	80050c4 <HAL_Delay>
	 msg_handler.send_print(print_msg);
 80012d8:	463b      	mov	r3, r7
 80012da:	4619      	mov	r1, r3
 80012dc:	480a      	ldr	r0, [pc, #40]	; (8001308 <main+0x88>)
 80012de:	f001 f8f3 	bl	80024c8 <_ZN10MsgHandler10send_printEPKc>
	 msg_handler.send_float(tosend1);
 80012e2:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 80012e6:	4808      	ldr	r0, [pc, #32]	; (8001308 <main+0x88>)
 80012e8:	f001 f962 	bl	80025b0 <_ZN10MsgHandler10send_floatEf>
	 HAL_Delay(1000);
 80012ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012f0:	f003 fee8 	bl	80050c4 <HAL_Delay>
	 HAL_Delay(1000);
 80012f4:	e7ec      	b.n	80012d0 <main+0x50>
 80012f6:	bf00      	nop
 80012f8:	0800b8e8 	.word	0x0800b8e8
 80012fc:	3dcccccd 	.word	0x3dcccccd
 8001300:	200001f0 	.word	0x200001f0
 8001304:	40020000 	.word	0x40020000
 8001308:	20000340 	.word	0x20000340

0800130c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b094      	sub	sp, #80	; 0x50
 8001310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	2234      	movs	r2, #52	; 0x34
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f008 fa99 	bl	8009852 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001320:	f107 0308 	add.w	r3, r7, #8
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001330:	2300      	movs	r3, #0
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	4b34      	ldr	r3, [pc, #208]	; (8001408 <_Z18SystemClock_Configv+0xfc>)
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	4a33      	ldr	r2, [pc, #204]	; (8001408 <_Z18SystemClock_Configv+0xfc>)
 800133a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800133e:	6413      	str	r3, [r2, #64]	; 0x40
 8001340:	4b31      	ldr	r3, [pc, #196]	; (8001408 <_Z18SystemClock_Configv+0xfc>)
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800134c:	2300      	movs	r3, #0
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	4b2e      	ldr	r3, [pc, #184]	; (800140c <_Z18SystemClock_Configv+0x100>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a2d      	ldr	r2, [pc, #180]	; (800140c <_Z18SystemClock_Configv+0x100>)
 8001356:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	4b2b      	ldr	r3, [pc, #172]	; (800140c <_Z18SystemClock_Configv+0x100>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001364:	603b      	str	r3, [r7, #0]
 8001366:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001368:	2302      	movs	r3, #2
 800136a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800136c:	2301      	movs	r3, #1
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001370:	2310      	movs	r3, #16
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001374:	2302      	movs	r3, #2
 8001376:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001378:	2300      	movs	r3, #0
 800137a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800137c:	2310      	movs	r3, #16
 800137e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001380:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001384:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001386:	2302      	movs	r3, #2
 8001388:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800138a:	2302      	movs	r3, #2
 800138c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800138e:	2302      	movs	r3, #2
 8001390:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001392:	f107 031c 	add.w	r3, r7, #28
 8001396:	4618      	mov	r0, r3
 8001398:	f005 f93a 	bl	8006610 <HAL_RCC_OscConfig>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	bf14      	ite	ne
 80013a2:	2301      	movne	r3, #1
 80013a4:	2300      	moveq	r3, #0
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 80013ac:	f000 f990 	bl	80016d0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80013b0:	f004 fd94 	bl	8005edc <HAL_PWREx_EnableOverDrive>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	bf14      	ite	ne
 80013ba:	2301      	movne	r3, #1
 80013bc:	2300      	moveq	r3, #0
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 80013c4:	f000 f984 	bl	80016d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c8:	230f      	movs	r3, #15
 80013ca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013cc:	2302      	movs	r3, #2
 80013ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80013da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013de:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013e0:	f107 0308 	add.w	r3, r7, #8
 80013e4:	2105      	movs	r1, #5
 80013e6:	4618      	mov	r0, r3
 80013e8:	f004 fdc8 	bl	8005f7c <HAL_RCC_ClockConfig>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	bf14      	ite	ne
 80013f2:	2301      	movne	r3, #1
 80013f4:	2300      	moveq	r3, #0
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <_Z18SystemClock_Configv+0xf4>
  {
    Error_Handler();
 80013fc:	f000 f968 	bl	80016d0 <Error_Handler>
  }
}
 8001400:	bf00      	nop
 8001402:	3750      	adds	r7, #80	; 0x50
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40023800 	.word	0x40023800
 800140c:	40007000 	.word	0x40007000

08001410 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001416:	f107 0308 	add.w	r3, r7, #8
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001424:	463b      	mov	r3, r7
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800142c:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <_ZL12MX_TIM2_Initv+0xb0>)
 800142e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001432:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001434:	4b22      	ldr	r3, [pc, #136]	; (80014c0 <_ZL12MX_TIM2_Initv+0xb0>)
 8001436:	2200      	movs	r2, #0
 8001438:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143a:	4b21      	ldr	r3, [pc, #132]	; (80014c0 <_ZL12MX_TIM2_Initv+0xb0>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1800000;
 8001440:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <_ZL12MX_TIM2_Initv+0xb0>)
 8001442:	4a20      	ldr	r2, [pc, #128]	; (80014c4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001444:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001446:	4b1e      	ldr	r3, [pc, #120]	; (80014c0 <_ZL12MX_TIM2_Initv+0xb0>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800144c:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <_ZL12MX_TIM2_Initv+0xb0>)
 800144e:	2280      	movs	r2, #128	; 0x80
 8001450:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001452:	481b      	ldr	r0, [pc, #108]	; (80014c0 <_ZL12MX_TIM2_Initv+0xb0>)
 8001454:	f005 fb7a 	bl	8006b4c <HAL_TIM_Base_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	bf14      	ite	ne
 800145e:	2301      	movne	r3, #1
 8001460:	2300      	moveq	r3, #0
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <_ZL12MX_TIM2_Initv+0x5c>
  {
    Error_Handler();
 8001468:	f000 f932 	bl	80016d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001470:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001472:	f107 0308 	add.w	r3, r7, #8
 8001476:	4619      	mov	r1, r3
 8001478:	4811      	ldr	r0, [pc, #68]	; (80014c0 <_ZL12MX_TIM2_Initv+0xb0>)
 800147a:	f005 fd2f 	bl	8006edc <HAL_TIM_ConfigClockSource>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	bf14      	ite	ne
 8001484:	2301      	movne	r3, #1
 8001486:	2300      	moveq	r3, #0
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <_ZL12MX_TIM2_Initv+0x82>
  {
    Error_Handler();
 800148e:	f000 f91f 	bl	80016d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800149a:	463b      	mov	r3, r7
 800149c:	4619      	mov	r1, r3
 800149e:	4808      	ldr	r0, [pc, #32]	; (80014c0 <_ZL12MX_TIM2_Initv+0xb0>)
 80014a0:	f005 ff46 	bl	8007330 <HAL_TIMEx_MasterConfigSynchronization>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	bf14      	ite	ne
 80014aa:	2301      	movne	r3, #1
 80014ac:	2300      	moveq	r3, #0
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <_ZL12MX_TIM2_Initv+0xa8>
  {
    Error_Handler();
 80014b4:	f000 f90c 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	200001f0 	.word	0x200001f0
 80014c4:	001b7740 	.word	0x001b7740

080014c8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014cc:	4b13      	ldr	r3, [pc, #76]	; (800151c <_ZL19MX_USART2_UART_Initv+0x54>)
 80014ce:	4a14      	ldr	r2, [pc, #80]	; (8001520 <_ZL19MX_USART2_UART_Initv+0x58>)
 80014d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014d2:	4b12      	ldr	r3, [pc, #72]	; (800151c <_ZL19MX_USART2_UART_Initv+0x54>)
 80014d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <_ZL19MX_USART2_UART_Initv+0x54>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014e0:	4b0e      	ldr	r3, [pc, #56]	; (800151c <_ZL19MX_USART2_UART_Initv+0x54>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014e6:	4b0d      	ldr	r3, [pc, #52]	; (800151c <_ZL19MX_USART2_UART_Initv+0x54>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014ec:	4b0b      	ldr	r3, [pc, #44]	; (800151c <_ZL19MX_USART2_UART_Initv+0x54>)
 80014ee:	220c      	movs	r2, #12
 80014f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014f2:	4b0a      	ldr	r3, [pc, #40]	; (800151c <_ZL19MX_USART2_UART_Initv+0x54>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f8:	4b08      	ldr	r3, [pc, #32]	; (800151c <_ZL19MX_USART2_UART_Initv+0x54>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014fe:	4807      	ldr	r0, [pc, #28]	; (800151c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001500:	f005 ffa6 	bl	8007450 <HAL_UART_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	bf14      	ite	ne
 800150a:	2301      	movne	r3, #1
 800150c:	2300      	moveq	r3, #0
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001514:	f000 f8dc 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000238 	.word	0x20000238
 8001520:	40004400 	.word	0x40004400

08001524 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <_ZL11MX_DMA_Initv+0x4c>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a0f      	ldr	r2, [pc, #60]	; (8001570 <_ZL11MX_DMA_Initv+0x4c>)
 8001534:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <_ZL11MX_DMA_Initv+0x4c>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	2100      	movs	r1, #0
 800154a:	2010      	movs	r0, #16
 800154c:	f003 feb9 	bl	80052c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001550:	2010      	movs	r0, #16
 8001552:	f003 fed2 	bl	80052fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2100      	movs	r1, #0
 800155a:	2011      	movs	r0, #17
 800155c:	f003 feb1 	bl	80052c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001560:	2011      	movs	r0, #17
 8001562:	f003 feca 	bl	80052fa <HAL_NVIC_EnableIRQ>

}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800

08001574 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
 8001588:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	4b2d      	ldr	r3, [pc, #180]	; (8001644 <_ZL12MX_GPIO_Initv+0xd0>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a2c      	ldr	r2, [pc, #176]	; (8001644 <_ZL12MX_GPIO_Initv+0xd0>)
 8001594:	f043 0304 	orr.w	r3, r3, #4
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b2a      	ldr	r3, [pc, #168]	; (8001644 <_ZL12MX_GPIO_Initv+0xd0>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	4b26      	ldr	r3, [pc, #152]	; (8001644 <_ZL12MX_GPIO_Initv+0xd0>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a25      	ldr	r2, [pc, #148]	; (8001644 <_ZL12MX_GPIO_Initv+0xd0>)
 80015b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b23      	ldr	r3, [pc, #140]	; (8001644 <_ZL12MX_GPIO_Initv+0xd0>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <_ZL12MX_GPIO_Initv+0xd0>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a1e      	ldr	r2, [pc, #120]	; (8001644 <_ZL12MX_GPIO_Initv+0xd0>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <_ZL12MX_GPIO_Initv+0xd0>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	4b18      	ldr	r3, [pc, #96]	; (8001644 <_ZL12MX_GPIO_Initv+0xd0>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a17      	ldr	r2, [pc, #92]	; (8001644 <_ZL12MX_GPIO_Initv+0xd0>)
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b15      	ldr	r3, [pc, #84]	; (8001644 <_ZL12MX_GPIO_Initv+0xd0>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2120      	movs	r1, #32
 80015fe:	4812      	ldr	r0, [pc, #72]	; (8001648 <_ZL12MX_GPIO_Initv+0xd4>)
 8001600:	f004 fc38 	bl	8005e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001604:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800160a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800160e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	4619      	mov	r1, r3
 800161a:	480c      	ldr	r0, [pc, #48]	; (800164c <_ZL12MX_GPIO_Initv+0xd8>)
 800161c:	f004 fa96 	bl	8005b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001620:	2320      	movs	r3, #32
 8001622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001624:	2301      	movs	r3, #1
 8001626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2300      	movs	r3, #0
 800162e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	4619      	mov	r1, r3
 8001636:	4804      	ldr	r0, [pc, #16]	; (8001648 <_ZL12MX_GPIO_Initv+0xd4>)
 8001638:	f004 fa88 	bl	8005b4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800163c:	bf00      	nop
 800163e:	3728      	adds	r7, #40	; 0x28
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40023800 	.word	0x40023800
 8001648:	40020000 	.word	0x40020000
 800164c:	40020800 	.word	0x40020800

08001650 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a05      	ldr	r2, [pc, #20]	; (8001670 <HAL_UART_TxCpltCallback+0x20>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d102      	bne.n	8001666 <HAL_UART_TxCpltCallback+0x16>
	{
		msg_handler.process_txclpt_callback();
 8001660:	4804      	ldr	r0, [pc, #16]	; (8001674 <HAL_UART_TxCpltCallback+0x24>)
 8001662:	f000 fd4a 	bl	80020fa <_ZN10MsgHandler23process_txclpt_callbackEv>
	}


}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000238 	.word	0x20000238
 8001674:	20000340 	.word	0x20000340

08001678 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	if( huart == &huart2)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a05      	ldr	r2, [pc, #20]	; (8001698 <HAL_UART_RxCpltCallback+0x20>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d102      	bne.n	800168e <HAL_UART_RxCpltCallback+0x16>
	{
		msg_handler.process_rxclpt_callback();
 8001688:	4804      	ldr	r0, [pc, #16]	; (800169c <HAL_UART_RxCpltCallback+0x24>)
 800168a:	f000 fdba 	bl	8002202 <_ZN10MsgHandler23process_rxclpt_callbackEv>
	}

}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000238 	.word	0x20000238
 800169c:	20000340 	.word	0x20000340

080016a0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim2 )
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a06      	ldr	r2, [pc, #24]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d105      	bne.n	80016bc <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
	  timer_20_ms = true;
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	701a      	strb	r2, [r3, #0]
	  msg_handler.process_timeout();
 80016b6:	4805      	ldr	r0, [pc, #20]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80016b8:	f001 fa28 	bl	8002b0c <_ZN10MsgHandler15process_timeoutEv>
  }
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	200001f0 	.word	0x200001f0
 80016c8:	20000378 	.word	0x20000378
 80016cc:	20000340 	.word	0x20000340

080016d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d4:	b672      	cpsid	i
}
 80016d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <Error_Handler+0x8>

080016da <_ZNSt15__uniq_ptr_dataIhSt14default_deleteIA_hELb1ELb1EECI1St15__uniq_ptr_implIhS2_EEPh>:
  template <typename _Tp, typename _Dp,
	    bool = is_move_constructible<_Dp>::value,
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	6039      	str	r1, [r7, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	4611      	mov	r1, r2
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 f8f5 	bl	80018da <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>:
	       typename _Vp = _Dp,
	       typename = _DeleterConstraint<_Vp>,
	       typename = typename enable_if<
                 __safe_conversion_raw<_Up>::value, bool>::type>
	explicit
	unique_ptr(_Up __p) noexcept
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6839      	ldr	r1, [r7, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ffe6 	bl	80016da <_ZNSt15__uniq_ptr_dataIhSt14default_deleteIA_hELb1ELb1EECI1St15__uniq_ptr_implIhS2_EEPh>
        { }
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED1Ev>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
	{ }

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
      {
	auto& __ptr = _M_t._M_ptr();
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4618      	mov	r0, r3
 8001724:	f000 f8ed 	bl	8001902 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 8001728:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d009      	beq.n	8001746 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED1Ev+0x2e>
	  get_deleter()(__ptr);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 f8f2 	bl	800191c <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EE11get_deleterEv>
 8001738:	4602      	mov	r2, r0
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4619      	mov	r1, r3
 8001740:	4610      	mov	r0, r2
 8001742:	f000 f8f8 	bl	8001936 <_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS0_E5valueEvE4typeEPS5_>
	__ptr = pointer();
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
      }
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>:

      // Observers.

      /// Access an element of owned array.
      typename std::add_lvalue_reference<element_type>::type
      operator[](size_t __i) const
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
 800175e:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_assert(get() != pointer());
 8001760:	2300      	movs	r3, #0
 8001762:	2b00      	cmp	r3, #0
	return get()[__i];
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 f807 	bl	8001778 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 800176a:	4602      	mov	r2, r0
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	4413      	add	r3, r2
      }
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>:

      /// Return the stored pointer.
      pointer
      get() const noexcept
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4618      	mov	r0, r3
 8001784:	f000 f8e6 	bl	8001954 <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 8001788:	4603      	mov	r3, r0
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <_ZNSt5tupleIJP12PayloadClassSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4618      	mov	r0, r3
 800179e:	f000 f8e7 	bl	8001970 <_ZNSt11_Tuple_implILj0EJP12PayloadClassSt14default_deleteIS0_EEEC1Ev>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4618      	mov	r0, r3
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff ffeb 	bl	8001792 <_ZNSt5tupleIJP12PayloadClassSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <_ZNSt15__uniq_ptr_dataI12PayloadClassSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ffeb 	bl	80017ac <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EEC1Ev>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	: _M_t()
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ffe8 	bl	80017c6 <_ZNSt15__uniq_ptr_dataI12PayloadClassSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4618      	mov	r0, r3
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4618      	mov	r0, r3
 800180c:	f000 f8c0 	bl	8001990 <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE6_M_ptrEv>
 8001810:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00c      	beq.n	8001834 <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 f8c5 	bl	80019aa <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EE11get_deleterEv>
 8001820:	4604      	mov	r4, r0
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 f8ce 	bl	80019c4 <_ZSt4moveIRP12PayloadClassEONSt16remove_referenceIT_E4typeEOS4_>
 8001828:	4603      	mov	r3, r0
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	4620      	mov	r0, r4
 8001830:	f000 f8d3 	bl	80019da <_ZNKSt14default_deleteI12PayloadClassEclEPS0_>
	__ptr = pointer();
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
      }
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4618      	mov	r0, r3
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	bd90      	pop	{r4, r7, pc}

08001844 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT_IF(
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type()
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f000 f8d5 	bl	80019fc <_ZNSaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEC1Ev>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fb55 	bl	8000f04 <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <_ZNSaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f000 f8d1 	bl	8001a14 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEED1Ev>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4618      	mov	r0, r3
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 f8d0 	bl	8001a2a <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE8_M_clearEv>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fc75 	bl	800117c <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE10_List_implD1Ev>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <_ZNSt10shared_ptrI11AbstractMsgEC1Ev>:
#endif
      /**
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 f8e5 	bl	8001a76 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d004      	beq.n	80018d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff fb3a 	bl	8000f44 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	6039      	str	r1, [r7, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 f8d6 	bl	8001a98 <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1ILb1ELb1EEEv>
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 f808 	bl	8001902 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 80018f2:	4602      	mov	r2, r0
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4618      	mov	r0, r3
 800190e:	f000 f8d0 	bl	8001ab2 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001912:	4603      	mov	r3, r0
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EE11get_deleterEv>:

      /// Return a reference to the stored deleter.
      deleter_type&
      get_deleter() noexcept
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4618      	mov	r0, r3
 8001928:	f000 f8d0 	bl	8001acc <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE10_M_deleterEv>
 800192c:	4603      	mov	r3, r0
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS0_E5valueEvE4typeEPS5_>:
	operator()(_Up* __ptr) const
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	6039      	str	r1, [r7, #0]
	  delete [] __ptr;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d002      	beq.n	800194c <_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS0_E5valueEvE4typeEPS5_+0x16>
 8001946:	6838      	ldr	r0, [r7, #0]
 8001948:	f007 f86a 	bl	8008a20 <_ZdaPv>
	}
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4618      	mov	r0, r3
 8001960:	f000 f8c1 	bl	8001ae6 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8001964:	4603      	mov	r3, r0
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <_ZNSt11_Tuple_implILj0EJP12PayloadClassSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 f8c1 	bl	8001b00 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12PayloadClassEEEC1Ev>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4618      	mov	r0, r3
 8001982:	f000 f8c9 	bl	8001b18 <_ZNSt10_Head_baseILj0EP12PayloadClassLb0EEC1Ev>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4618      	mov	r0, r3
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4618      	mov	r0, r3
 800199c:	f000 f8ca 	bl	8001b34 <_ZSt3getILj0EJP12PayloadClassSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80019a0:	4603      	mov	r3, r0
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f000 f8ca 	bl	8001b4e <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE10_M_deleterEv>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <_ZSt4moveIRP12PayloadClassEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4618      	mov	r0, r3
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <_ZNKSt14default_deleteI12PayloadClassEclEPS0_>:
      operator()(_Tp* __ptr) const
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d004      	beq.n	80019f4 <_ZNKSt14default_deleteI12PayloadClassEclEPS0_+0x1a>
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	3204      	adds	r2, #4
 80019ee:	6812      	ldr	r2, [r2, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	4790      	blx	r2
      }
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <_ZNSaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 f8af 	bl	8001b68 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEC1Ev>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE8_M_clearEv>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER

  template<typename _Tp, typename _Alloc>
    void
    _List_base<_Tp, _Alloc>::
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b086      	sub	sp, #24
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
    _M_clear() _GLIBCXX_NOEXCEPT
    {
      typedef _List_node<_Tp>  _Node;
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 8001a38:	e014      	b.n	8001a64 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE8_M_clearEv+0x3a>
	{
	  _Node* __tmp = static_cast<_Node*>(__cur);
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 8001a44:	6938      	ldr	r0, [r7, #16]
 8001a46:	f000 f89a 	bl	8001b7e <_ZNSt10_List_nodeISt10shared_ptrI11AbstractMsgEE9_M_valptrEv>
 8001a4a:	60f8      	str	r0, [r7, #12]
#if __cplusplus >= 201103L
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 f8a4 	bl	8001b9a <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE21_M_get_Node_allocatorEv>
 8001a52:	4603      	mov	r3, r0
 8001a54:	68f9      	ldr	r1, [r7, #12]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 f8aa 	bl	8001bb0 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE7destroyIS3_EEvRS5_PT_>
#else
	  _Tp_alloc_type(_M_get_Node_allocator()).destroy(__val);
#endif
	  _M_put_node(__tmp);
 8001a5c:	6939      	ldr	r1, [r7, #16]
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f8b3 	bl	8001bca <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_put_nodeEPSt10_List_nodeIS3_E>
      while (__cur != &_M_impl._M_node)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d1e6      	bne.n	8001a3a <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE8_M_clearEv+0x10>
	}
    }
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3304      	adds	r3, #4
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f000 f8ad 	bl	8001be8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1ILb1ELb1EEEv>:
	tuple()
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 f8ae 	bl	8001c04 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f000 f8b1 	bl	8001c24 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 f8b0 	bl	8001c3c <_ZSt3getILj1EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001adc:	4603      	mov	r3, r0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f000 f8af 	bl	8001c54 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001af6:	4603      	mov	r3, r0
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12PayloadClassEEEC1Ev>:
      _Tuple_impl()
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f8af 	bl	8001c6c <_ZNSt10_Head_baseILj1ESt14default_deleteI12PayloadClassELb1EEC1Ev>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4618      	mov	r0, r3
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <_ZNSt10_Head_baseILj0EP12PayloadClassLb0EEC1Ev>:
      constexpr _Head_base()
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <_ZSt3getILj0EJP12PayloadClassSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 f89f 	bl	8001c82 <_ZSt12__get_helperILj0EP12PayloadClassJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001b44:	4603      	mov	r3, r0
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE10_M_deleterEv>:
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f000 f89e 	bl	8001c9a <_ZSt3getILj1EJP12PayloadClassSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	4618      	mov	r0, r3
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <_ZNSt10_List_nodeISt10shared_ptrI11AbstractMsgEE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3308      	adds	r3, #8
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 f891 	bl	8001cb2 <_ZN9__gnu_cxx16__aligned_membufISt10shared_ptrI11AbstractMsgEE6_M_ptrEv>
 8001b90:	4603      	mov	r3, r0
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE7destroyIS3_EEvRS5_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8001bba:	6839      	ldr	r1, [r7, #0]
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f884 	bl	8001cca <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE7destroyIS4_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_put_nodeEPSt10_List_nodeIS3_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	6839      	ldr	r1, [r7, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 f881 	bl	8001ce2 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE10deallocateERS5_PS4_j>
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
      { }
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f877 	bl	8001d00 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 f87f 	bl	8001d18 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f000 f881 	bl	8001d34 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>
 8001c32:	4603      	mov	r3, r0
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <_ZSt3getILj1EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f882 	bl	8001d4e <_ZSt12__get_helperILj1ESt14default_deleteIA_hEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 f882 	bl	8001d66 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>
 8001c62:	4603      	mov	r3, r0
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_ZNSt10_Head_baseILj1ESt14default_deleteI12PayloadClassELb1EEC1Ev>:
      constexpr _Head_base()
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <_ZSt12__get_helperILj0EP12PayloadClassJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f878 	bl	8001d80 <_ZNSt11_Tuple_implILj0EJP12PayloadClassSt14default_deleteIS0_EEE7_M_headERS4_>
 8001c90:	4603      	mov	r3, r0
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <_ZSt3getILj1EJP12PayloadClassSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 f879 	bl	8001d9a <_ZSt12__get_helperILj1ESt14default_deleteI12PayloadClassEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <_ZN9__gnu_cxx16__aligned_membufISt10shared_ptrI11AbstractMsgEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f879 	bl	8001db2 <_ZN9__gnu_cxx16__aligned_membufISt10shared_ptrI11AbstractMsgEE7_M_addrEv>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE7destroyIS4_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8001cd4:	6838      	ldr	r0, [r7, #0]
 8001cd6:	f7ff fa92 	bl	80011fe <_ZNSt10shared_ptrI11AbstractMsgED1Ev>
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE10deallocateERS5_PS4_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b084      	sub	sp, #16
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	68b9      	ldr	r1, [r7, #8]
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f000 f868 	bl	8001dc8 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE10deallocateEPS5_j>
 8001cf8:	bf00      	nop
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>:
      _Tuple_impl()
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f86d 	bl	8001de8 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4618      	mov	r0, r3
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>:
      constexpr _Head_base()
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 f85d 	bl	8001dfe <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>
 8001d44:	4603      	mov	r3, r0
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <_ZSt12__get_helperILj1ESt14default_deleteIA_hEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f85c 	bl	8001e14 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEE7_M_headERS3_>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f000 f85b 	bl	8001e2c <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>
 8001d76:	4603      	mov	r3, r0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <_ZNSt11_Tuple_implILj0EJP12PayloadClassSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 f859 	bl	8001e42 <_ZNSt10_Head_baseILj0EP12PayloadClassLb0EE7_M_headERS2_>
 8001d90:	4603      	mov	r3, r0
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <_ZSt12__get_helperILj1ESt14default_deleteI12PayloadClassEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f858 	bl	8001e58 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12PayloadClassEEE7_M_headERS3_>
 8001da8:	4603      	mov	r3, r0
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <_ZN9__gnu_cxx16__aligned_membufISt10shared_ptrI11AbstractMsgEE7_M_addrEv>:
      _M_addr() noexcept
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	011b      	lsls	r3, r3, #4
 8001dd8:	4619      	mov	r1, r3
 8001dda:	68b8      	ldr	r0, [r7, #8]
 8001ddc:	f006 fe1e 	bl	8008a1c <_ZdlPvj>
      }
 8001de0:	bf00      	nop
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>:
      constexpr _Head_base()
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4618      	mov	r0, r3
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 f827 	bl	8001e70 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EE7_M_headERS3_>
 8001e22:	4603      	mov	r3, r0
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4618      	mov	r0, r3
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <_ZNSt10_Head_baseILj0EP12PayloadClassLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12PayloadClassEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f810 	bl	8001e86 <_ZNSt10_Head_baseILj1ESt14default_deleteI12PayloadClassELb1EE7_M_headERS3_>
 8001e66:	4603      	mov	r3, r0
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <_ZNSt10_Head_baseILj1ESt14default_deleteI12PayloadClassELb1EE7_M_headERS3_>:
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4618      	mov	r0, r3
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <_ZN6AckMsgD1Ev>:
		~AckMsg() = default;
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	4a08      	ldr	r2, [pc, #32]	; (8001ec8 <_ZN6AckMsgD1Ev+0x2c>)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3304      	adds	r3, #4
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff fc32 	bl	8001718 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED1Ev>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff f874 	bl	8000fa4 <_ZN11AbstractMsgD1Ev>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	0800b920 	.word	0x0800b920

08001ecc <_ZN6AckMsgD0Ev>:
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff ffe1 	bl	8001e9c <_ZN6AckMsgD1Ev>
 8001eda:	2108      	movs	r1, #8
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f006 fd9d 	bl	8008a1c <_ZdlPvj>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <_ZN11HeaderClassD1Ev>:
		~HeaderClass() = default;
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	4a08      	ldr	r2, [pc, #32]	; (8001f18 <_ZN11HeaderClassD1Ev+0x2c>)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3304      	adds	r3, #4
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff fc0a 	bl	8001718 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED1Ev>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff f84c 	bl	8000fa4 <_ZN11AbstractMsgD1Ev>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	0800b93c 	.word	0x0800b93c

08001f1c <_ZN11HeaderClassD0Ev>:
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff ffe1 	bl	8001eec <_ZN11HeaderClassD1Ev>
 8001f2a:	2108      	movs	r1, #8
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f006 fd75 	bl	8008a1c <_ZdlPvj>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4618      	mov	r0, r3
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <_ZN10MsgHandlerD1Ev>:
		~MsgHandler() = default;
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3330      	adds	r3, #48	; 0x30
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff f958 	bl	80011fe <_ZNSt10shared_ptrI11AbstractMsgED1Ev>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3324      	adds	r3, #36	; 0x24
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff f938 	bl	80011c8 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EED1Ev>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3320      	adds	r3, #32
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff fc4f 	bl	8001800 <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EED1Ev>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3318      	adds	r3, #24
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff ffc0 	bl	8001eec <_ZN11HeaderClassD1Ev>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3310      	adds	r3, #16
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff ff93 	bl	8001e9c <_ZN6AckMsgD1Ev>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3308      	adds	r3, #8
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff ff8e 	bl	8001e9c <_ZN6AckMsgD1Ev>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d108      	bne.n	8001fae <_Z41__static_initialization_and_destruction_0ii+0x22>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d103      	bne.n	8001fae <_Z41__static_initialization_and_destruction_0ii+0x22>
MsgHandler msg_handler(&huart2);
 8001fa6:	4909      	ldr	r1, [pc, #36]	; (8001fcc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001fa8:	4809      	ldr	r0, [pc, #36]	; (8001fd0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001faa:	f7ff f935 	bl	8001218 <_ZN10MsgHandlerC1EP20__UART_HandleTypeDef>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d107      	bne.n	8001fc4 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d102      	bne.n	8001fc4 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8001fbe:	4804      	ldr	r0, [pc, #16]	; (8001fd0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001fc0:	f7ff ffbc 	bl	8001f3c <_ZN10MsgHandlerD1Ev>
}
 8001fc4:	bf00      	nop
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20000238 	.word	0x20000238
 8001fd0:	20000340 	.word	0x20000340

08001fd4 <_GLOBAL__sub_I_htim2>:
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001fdc:	2001      	movs	r0, #1
 8001fde:	f7ff ffd5 	bl	8001f8c <_Z41__static_initialization_and_destruction_0ii>
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <_GLOBAL__sub_D_htim2>:
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001fec:	2000      	movs	r0, #0
 8001fee:	f7ff ffcd 	bl	8001f8c <_Z41__static_initialization_and_destruction_0ii>
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    { ++_M_use_count; }
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	1c5a      	adds	r2, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <_ZNSt19_Sp_make_shared_tag5_S_tiEv>:
    _S_ti() noexcept _GLIBCXX_VISIBILITY(default)
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
      return reinterpret_cast<const type_info&>(__tag);
 8002030:	4b02      	ldr	r3, [pc, #8]	; (800203c <_ZNSt19_Sp_make_shared_tag5_S_tiEv+0x10>)
    }
 8002032:	4618      	mov	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	0800b9b4 	.word	0x0800b9b4

08002040 <_ZNK12PayloadClass8get_dataEv>:
		uint8_t* get_data() const noexcept override {return _data.get();}
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3308      	adds	r3, #8
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fb93 	bl	8001778 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 8002052:	4603      	mov	r3, r0
 8002054:	4618      	mov	r0, r3
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <_ZNK12PayloadClass8get_typeEv>:
		msg_type get_type() const noexcept override {return PayloadClass::payload_msg_type;}
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	2301      	movs	r3, #1
 8002066:	4618      	mov	r0, r3
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <_ZNK12PayloadClass13get_data_sizeEv>:
		uint8_t get_data_size() const noexcept override {return _data_size;}
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	791b      	ldrb	r3, [r3, #4]
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <_ZN6AckMsgaSERKS_>:
		AckMsg& operator=(const AckMsg& to_copy)
 800208a:	b590      	push	{r4, r7, lr}
 800208c:	b085      	sub	sp, #20
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	6039      	str	r1, [r7, #0]
			if (this != &to_copy)
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	429a      	cmp	r2, r3
 800209a:	d029      	beq.n	80020f0 <_ZN6AckMsgaSERKS_+0x66>
				if(to_copy._data)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	3304      	adds	r3, #4
 80020a0:	4618      	mov	r0, r3
 80020a2:	f000 fdc1 	bl	8002c28 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEcvbEv>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d01b      	beq.n	80020e4 <_ZN6AckMsgaSERKS_+0x5a>
					for(int i = 0; i< AckMsg::incoming_msg_size; i ++)
 80020ac:	2300      	movs	r3, #0
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	e014      	b.n	80020dc <_ZN6AckMsgaSERKS_+0x52>
						_data[i] = to_copy._data[i];
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	3304      	adds	r3, #4
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	4611      	mov	r1, r2
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff fb4b 	bl	8001756 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 80020c0:	4604      	mov	r4, r0
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3304      	adds	r3, #4
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	4611      	mov	r1, r2
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff fb43 	bl	8001756 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 80020d0:	4603      	mov	r3, r0
 80020d2:	7822      	ldrb	r2, [r4, #0]
 80020d4:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i< AckMsg::incoming_msg_size; i ++)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	3301      	adds	r3, #1
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	dde7      	ble.n	80020b2 <_ZN6AckMsgaSERKS_+0x28>
 80020e2:	e005      	b.n	80020f0 <_ZN6AckMsgaSERKS_+0x66>
					_data.reset();
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3304      	adds	r3, #4
 80020e8:	2100      	movs	r1, #0
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 fdad 	bl	8002c4a <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EE5resetEDn>
			return *this;
 80020f0:	687b      	ldr	r3, [r7, #4]
		}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd90      	pop	{r4, r7, pc}

080020fa <_ZN10MsgHandler23process_txclpt_callbackEv>:
#include "msg_handler.hpp"

void MsgHandler::process_txclpt_callback()
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]

	if ( !tx_msg_list.empty() && ongoing_fetch == false)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3324      	adds	r3, #36	; 0x24
 8002106:	4618      	mov	r0, r3
 8002108:	f000 fdac 	bl	8002c64 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5emptyEv>
 800210c:	4603      	mov	r3, r0
 800210e:	f083 0301 	eor.w	r3, r3, #1
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d005      	beq.n	8002124 <_ZN10MsgHandler23process_txclpt_callbackEv+0x2a>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	791b      	ldrb	r3, [r3, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <_ZN10MsgHandler23process_txclpt_callbackEv+0x2a>
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <_ZN10MsgHandler23process_txclpt_callbackEv+0x2c>
 8002124:	2300      	movs	r3, #0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d060      	beq.n	80021ec <_ZN10MsgHandler23process_txclpt_callbackEv+0xf2>
	{
		if( tx_msg_list.front()->get_type() == msg_type::payload)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3324      	adds	r3, #36	; 0x24
 800212e:	4618      	mov	r0, r3
 8002130:	f000 fdaa 	bl	8002c88 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 8002134:	4603      	mov	r3, r0
 8002136:	4618      	mov	r0, r3
 8002138:	f000 fdb9 	bl	8002cae <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800213c:	4603      	mov	r3, r0
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	320c      	adds	r2, #12
 8002142:	6812      	ldr	r2, [r2, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	4790      	blx	r2
 8002148:	4603      	mov	r3, r0
 800214a:	2b01      	cmp	r3, #1
 800214c:	bf0c      	ite	eq
 800214e:	2301      	moveq	r3, #1
 8002150:	2300      	movne	r3, #0
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d02e      	beq.n	80021b6 <_ZN10MsgHandler23process_txclpt_callbackEv+0xbc>
		{
			tx_msg_list.pop_front();
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3324      	adds	r3, #36	; 0x24
 800215c:	4618      	mov	r0, r3
 800215e:	f000 fdb2 	bl	8002cc6 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE9pop_frontEv>
			if ( !tx_msg_list.empty())
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3324      	adds	r3, #36	; 0x24
 8002166:	4618      	mov	r0, r3
 8002168:	f000 fd7c 	bl	8002c64 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5emptyEv>
 800216c:	4603      	mov	r3, r0
 800216e:	f083 0301 	eor.w	r3, r3, #1
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	d01a      	beq.n	80021ae <_ZN10MsgHandler23process_txclpt_callbackEv+0xb4>
			{
				if(tx_msg_list.front()->get_type() == msg_type::header)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3324      	adds	r3, #36	; 0x24
 800217c:	4618      	mov	r0, r3
 800217e:	f000 fd83 	bl	8002c88 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 8002182:	4603      	mov	r3, r0
 8002184:	4618      	mov	r0, r3
 8002186:	f000 fd92 	bl	8002cae <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800218a:	4603      	mov	r3, r0
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	320c      	adds	r2, #12
 8002190:	6812      	ldr	r2, [r2, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	4790      	blx	r2
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	bf0c      	ite	eq
 800219c:	2301      	moveq	r3, #1
 800219e:	2300      	movne	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d029      	beq.n	80021fa <_ZN10MsgHandler23process_txclpt_callbackEv+0x100>
				{
					transmit_front_msg();
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 fa6c 	bl	8002684 <_ZN10MsgHandler18transmit_front_msgEv>
	else if (ongoing_fetch)
	{
		receive_data();
	}

}
 80021ac:	e025      	b.n	80021fa <_ZN10MsgHandler23process_txclpt_callbackEv+0x100>
				receive_data_header();
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 fabe 	bl	8002730 <_ZN10MsgHandler19receive_data_headerEv>
}
 80021b4:	e021      	b.n	80021fa <_ZN10MsgHandler23process_txclpt_callbackEv+0x100>
		else if ( tx_msg_list.front()->get_type() == msg_type::header)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3324      	adds	r3, #36	; 0x24
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 fd64 	bl	8002c88 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 fd73 	bl	8002cae <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80021c8:	4603      	mov	r3, r0
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	320c      	adds	r2, #12
 80021ce:	6812      	ldr	r2, [r2, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	4790      	blx	r2
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	bf0c      	ite	eq
 80021da:	2301      	moveq	r3, #1
 80021dc:	2300      	movne	r3, #0
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00a      	beq.n	80021fa <_ZN10MsgHandler23process_txclpt_callbackEv+0x100>
			receive_ack();
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 fa86 	bl	80026f6 <_ZN10MsgHandler11receive_ackEv>
}
 80021ea:	e006      	b.n	80021fa <_ZN10MsgHandler23process_txclpt_callbackEv+0x100>
	else if (ongoing_fetch)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	791b      	ldrb	r3, [r3, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d002      	beq.n	80021fa <_ZN10MsgHandler23process_txclpt_callbackEv+0x100>
		receive_data();
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 fbb0 	bl	800295a <_ZN10MsgHandler12receive_dataEv>
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <_ZN10MsgHandler23process_rxclpt_callbackEv>:


void MsgHandler::process_rxclpt_callback()
{
 8002202:	b590      	push	{r4, r7, lr}
 8002204:	b087      	sub	sp, #28
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
	if ( !tx_msg_list.empty() && ongoing_fetch == false)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3324      	adds	r3, #36	; 0x24
 800220e:	4618      	mov	r0, r3
 8002210:	f000 fd28 	bl	8002c64 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5emptyEv>
 8002214:	4603      	mov	r3, r0
 8002216:	f083 0301 	eor.w	r3, r3, #1
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <_ZN10MsgHandler23process_rxclpt_callbackEv+0x2a>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	791b      	ldrb	r3, [r3, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <_ZN10MsgHandler23process_rxclpt_callbackEv+0x2a>
 8002228:	2301      	movs	r3, #1
 800222a:	e000      	b.n	800222e <_ZN10MsgHandler23process_rxclpt_callbackEv+0x2c>
 800222c:	2300      	movs	r3, #0
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 8092 	beq.w	8002358 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x156>
	{
		if(rxSingleack.get_data()[0] == SerialID::MSG_ACK)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3308      	adds	r3, #8
 8002238:	4618      	mov	r0, r3
 800223a:	f7fe ff7b 	bl	8001134 <_ZNK6AckMsg8get_dataEv>
 800223e:	4603      	mov	r3, r0
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2bff      	cmp	r3, #255	; 0xff
 8002244:	bf0c      	ite	eq
 8002246:	2301      	moveq	r3, #1
 8002248:	2300      	movne	r3, #0
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 8083 	beq.w	8002358 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x156>
		{
			if( tx_msg_list.front()->get_type() == msg_type::header
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3324      	adds	r3, #36	; 0x24
 8002256:	4618      	mov	r0, r3
 8002258:	f000 fd16 	bl	8002c88 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 800225c:	4603      	mov	r3, r0
 800225e:	4618      	mov	r0, r3
 8002260:	f000 fd25 	bl	8002cae <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8002264:	4603      	mov	r3, r0
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	320c      	adds	r2, #12
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	4790      	blx	r2
 8002270:	4603      	mov	r3, r0
				&& tx_msg_list.front()->get_data()[1] == rxSingleack.get_data()[1]
				&& tx_msg_list.front()->get_data()[2] == rxSingleack.get_data()[2]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d139      	bne.n	80022ea <_ZN10MsgHandler23process_rxclpt_callbackEv+0xe8>
				&& tx_msg_list.front()->get_data()[1] == rxSingleack.get_data()[1]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3324      	adds	r3, #36	; 0x24
 800227a:	4618      	mov	r0, r3
 800227c:	f000 fd04 	bl	8002c88 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 8002280:	4603      	mov	r3, r0
 8002282:	4618      	mov	r0, r3
 8002284:	f000 fd13 	bl	8002cae <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8002288:	4603      	mov	r3, r0
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	3208      	adds	r2, #8
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	4790      	blx	r2
 8002294:	4603      	mov	r3, r0
 8002296:	3301      	adds	r3, #1
 8002298:	781c      	ldrb	r4, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3308      	adds	r3, #8
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe ff48 	bl	8001134 <_ZNK6AckMsg8get_dataEv>
 80022a4:	4603      	mov	r3, r0
 80022a6:	3301      	adds	r3, #1
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	429c      	cmp	r4, r3
 80022ac:	d11d      	bne.n	80022ea <_ZN10MsgHandler23process_rxclpt_callbackEv+0xe8>
				&& tx_msg_list.front()->get_data()[2] == rxSingleack.get_data()[2]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3324      	adds	r3, #36	; 0x24
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 fce8 	bl	8002c88 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 80022b8:	4603      	mov	r3, r0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 fcf7 	bl	8002cae <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80022c0:	4603      	mov	r3, r0
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	3208      	adds	r2, #8
 80022c6:	6812      	ldr	r2, [r2, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	4790      	blx	r2
 80022cc:	4603      	mov	r3, r0
 80022ce:	3302      	adds	r3, #2
 80022d0:	781c      	ldrb	r4, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3308      	adds	r3, #8
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe ff2c 	bl	8001134 <_ZNK6AckMsg8get_dataEv>
 80022dc:	4603      	mov	r3, r0
 80022de:	3302      	adds	r3, #2
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	429c      	cmp	r4, r3
 80022e4:	d101      	bne.n	80022ea <_ZN10MsgHandler23process_rxclpt_callbackEv+0xe8>
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <_ZN10MsgHandler23process_rxclpt_callbackEv+0xea>
 80022ea:	2300      	movs	r3, #0
			if( tx_msg_list.front()->get_type() == msg_type::header
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 80af 	beq.w	8002450 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x24e>
			)
			{
				tx_msg_list.pop_front();
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	3324      	adds	r3, #36	; 0x24
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 fce5 	bl	8002cc6 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE9pop_frontEv>
				if( tx_msg_list.front()->get_type() == msg_type::payload)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3324      	adds	r3, #36	; 0x24
 8002300:	4618      	mov	r0, r3
 8002302:	f000 fcc1 	bl	8002c88 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 8002306:	4603      	mov	r3, r0
 8002308:	4618      	mov	r0, r3
 800230a:	f000 fcd0 	bl	8002cae <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800230e:	4603      	mov	r3, r0
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	320c      	adds	r2, #12
 8002314:	6812      	ldr	r2, [r2, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	4790      	blx	r2
 800231a:	4603      	mov	r3, r0
 800231c:	2b01      	cmp	r3, #1
 800231e:	bf0c      	ite	eq
 8002320:	2301      	moveq	r3, #1
 8002322:	2300      	movne	r3, #0
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x12e>
				{
					transmit_front_msg();
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f9aa 	bl	8002684 <_ZN10MsgHandler18transmit_front_msgEv>
				}
				rxSingleack = AckMsg();
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f103 0408 	add.w	r4, r3, #8
 8002336:	f107 030c 	add.w	r3, r7, #12
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe fec2 	bl	80010c4 <_ZN6AckMsgC1Ev>
 8002340:	f107 030c 	add.w	r3, r7, #12
 8002344:	4619      	mov	r1, r3
 8002346:	4620      	mov	r0, r4
 8002348:	f7ff fe9f 	bl	800208a <_ZN6AckMsgaSERKS_>
 800234c:	f107 030c 	add.w	r3, r7, #12
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fda3 	bl	8001e9c <_ZN6AckMsgD1Ev>

			}
			return;
 8002356:	e07b      	b.n	8002450 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x24e>
		}
	}
	if(rxHeader.get_data()[0] == SerialID::MSG_START && ongoing_fetch == false)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3318      	adds	r3, #24
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe fe8d 	bl	800107c <_ZNK11HeaderClass8get_dataEv>
 8002362:	4603      	mov	r3, r0
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2bfe      	cmp	r3, #254	; 0xfe
 8002368:	d105      	bne.n	8002376 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x174>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	791b      	ldrb	r3, [r3, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x174>
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x176>
 8002376:	2300      	movs	r3, #0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d028      	beq.n	80023ce <_ZN10MsgHandler23process_rxclpt_callbackEv+0x1cc>
	{
		uint8_t msg_id = rxHeader.get_data()[1];
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3318      	adds	r3, #24
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe fe7b 	bl	800107c <_ZNK11HeaderClass8get_dataEv>
 8002386:	4603      	mov	r3, r0
 8002388:	785b      	ldrb	r3, [r3, #1]
 800238a:	757b      	strb	r3, [r7, #21]
		uint8_t msg_len = rxHeader.get_data()[2];
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3318      	adds	r3, #24
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe fe73 	bl	800107c <_ZNK11HeaderClass8get_dataEv>
 8002396:	4603      	mov	r3, r0
 8002398:	789b      	ldrb	r3, [r3, #2]
 800239a:	753b      	strb	r3, [r7, #20]
		switch (msg_id) {
 800239c:	7d7b      	ldrb	r3, [r7, #21]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d002      	beq.n	80023a8 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x1a6>
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d009      	beq.n	80023ba <_ZN10MsgHandler23process_rxclpt_callbackEv+0x1b8>
					ongoing_fetch = true;
					ack_msg_data_1();
				}
				break;
			default:
				break;
 80023a6:	e056      	b.n	8002456 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x254>
				ongoing_fetch = true;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	711a      	strb	r2, [r3, #4]
				ack_msg_print(msg_len);
 80023ae:	7d3b      	ldrb	r3, [r7, #20]
 80023b0:	4619      	mov	r1, r3
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 fa55 	bl	8002862 <_ZN10MsgHandler13ack_msg_printEh>
				break;
 80023b8:	e04d      	b.n	8002456 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x254>
				if(msg_len == sizeof(float))
 80023ba:	7d3b      	ldrb	r3, [r7, #20]
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d149      	bne.n	8002454 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x252>
					ongoing_fetch = true;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	711a      	strb	r2, [r3, #4]
					ack_msg_data_1();
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f9f6 	bl	80027b8 <_ZN10MsgHandler14ack_msg_data_1Ev>
				break;
 80023cc:	e042      	b.n	8002454 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x252>
		}
	}
	else if ( ongoing_fetch == true)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	791b      	ldrb	r3, [r3, #4]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d13f      	bne.n	8002456 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x254>
	{
		uint8_t msg_id = txSingleack.get_data()[1];
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3310      	adds	r3, #16
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe feaa 	bl	8001134 <_ZNK6AckMsg8get_dataEv>
 80023e0:	4603      	mov	r3, r0
 80023e2:	785b      	ldrb	r3, [r3, #1]
 80023e4:	75fb      	strb	r3, [r7, #23]
		uint8_t msg_len = txSingleack.get_data()[2];
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3310      	adds	r3, #16
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe fea2 	bl	8001134 <_ZNK6AckMsg8get_dataEv>
 80023f0:	4603      	mov	r3, r0
 80023f2:	789b      	ldrb	r3, [r3, #2]
 80023f4:	75bb      	strb	r3, [r7, #22]
		switch (msg_id) {
 80023f6:	7dfb      	ldrb	r3, [r7, #23]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d002      	beq.n	8002402 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x200>
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d012      	beq.n	8002426 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x224>
				break;
			case SerialID::MSG_DATA_1:
				process_received_msg_data_1(incoming_data->get_data());
				break;
			default:
				break;
 8002400:	e022      	b.n	8002448 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x246>
				process_received_msg_print(incoming_data->get_data(),msg_len);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3320      	adds	r3, #32
 8002406:	4618      	mov	r0, r3
 8002408:	f000 fc6d 	bl	8002ce6 <_ZNKSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EEptEv>
 800240c:	4603      	mov	r3, r0
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	3208      	adds	r2, #8
 8002412:	6812      	ldr	r2, [r2, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	4790      	blx	r2
 8002418:	4601      	mov	r1, r0
 800241a:	7dbb      	ldrb	r3, [r7, #22]
 800241c:	461a      	mov	r2, r3
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 faf8 	bl	8002a14 <_ZN10MsgHandler26process_received_msg_printEPhh>
				break;
 8002424:	e010      	b.n	8002448 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x246>
				process_received_msg_data_1(incoming_data->get_data());
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3320      	adds	r3, #32
 800242a:	4618      	mov	r0, r3
 800242c:	f000 fc5b 	bl	8002ce6 <_ZNKSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EEptEv>
 8002430:	4603      	mov	r3, r0
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	3208      	adds	r2, #8
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	4790      	blx	r2
 800243c:	4603      	mov	r3, r0
 800243e:	4619      	mov	r1, r3
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 fab3 	bl	80029ac <_ZN10MsgHandler27process_received_msg_data_1EPh>
				break;
 8002446:	bf00      	nop
		}
		ongoing_fetch = false;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	711a      	strb	r2, [r3, #4]
 800244e:	e002      	b.n	8002456 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x254>
			return;
 8002450:	bf00      	nop
 8002452:	e000      	b.n	8002456 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x254>
				break;
 8002454:	bf00      	nop

	}


}
 8002456:	371c      	adds	r7, #28
 8002458:	46bd      	mov	sp, r7
 800245a:	bd90      	pop	{r4, r7, pc}

0800245c <_ZNSt12__shared_ptrI11HeaderClassLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3304      	adds	r3, #4
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff fa24 	bl	80018b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4618      	mov	r0, r3
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <_ZNSt10shared_ptrI11HeaderClassED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff ffea 	bl	800245c <_ZNSt12__shared_ptrI11HeaderClassLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <_ZNSt12__shared_ptrI12PayloadClassLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3304      	adds	r3, #4
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fa09 	bl	80018b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <_ZNSt10shared_ptrI12PayloadClassED1Ev>:
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ffea 	bl	8002492 <_ZNSt12__shared_ptrI12PayloadClassLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4618      	mov	r0, r3
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <_ZN10MsgHandler10send_printEPKc>:


void MsgHandler::send_print(const char* msg)
{
 80024c8:	b590      	push	{r4, r7, lr}
 80024ca:	b08d      	sub	sp, #52	; 0x34
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
	if( strlen(msg) < UINT8_MAX)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fd fefb 	bl	80002d0 <strlen>
 80024da:	4603      	mov	r3, r0
 80024dc:	2bfe      	cmp	r3, #254	; 0xfe
 80024de:	d861      	bhi.n	80025a4 <_ZN10MsgHandler10send_printEPKc+0xdc>
	{
		tx_msg_list.push_back(std::make_shared<HeaderClass>(SerialID::MSG_PRINT,strlen(msg)));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fd fef1 	bl	80002d0 <strlen>
 80024ee:	4603      	mov	r3, r0
 80024f0:	61bb      	str	r3, [r7, #24]
 80024f2:	f107 0310 	add.w	r3, r7, #16
 80024f6:	f107 0218 	add.w	r2, r7, #24
 80024fa:	492c      	ldr	r1, [pc, #176]	; (80025ac <_ZN10MsgHandler10send_printEPKc+0xe4>)
 80024fc:	4618      	mov	r0, r3
 80024fe:	f000 fbfe 	bl	8002cfe <_ZSt11make_sharedI11HeaderClassJRKhjEESt10shared_ptrIT_EDpOT0_>
 8002502:	f107 0210 	add.w	r2, r7, #16
 8002506:	f107 0308 	add.w	r3, r7, #8
 800250a:	4611      	mov	r1, r2
 800250c:	4618      	mov	r0, r3
 800250e:	f000 fc19 	bl	8002d44 <_ZNSt10shared_ptrI11AbstractMsgEC1I11HeaderClassvEEOS_IT_E>
 8002512:	f107 0308 	add.w	r3, r7, #8
 8002516:	4619      	mov	r1, r3
 8002518:	4620      	mov	r0, r4
 800251a:	f000 fc26 	bl	8002d6a <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE9push_backEOS3_>
 800251e:	f107 0308 	add.w	r3, r7, #8
 8002522:	4618      	mov	r0, r3
 8002524:	f7fe fe6b 	bl	80011fe <_ZNSt10shared_ptrI11AbstractMsgED1Ev>
 8002528:	f107 0310 	add.w	r3, r7, #16
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ffa3 	bl	8002478 <_ZNSt10shared_ptrI11HeaderClassED1Ev>
		tx_msg_list.push_back(std::make_shared<PayloadClass>(msg,strlen(msg)));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7fd fec8 	bl	80002d0 <strlen>
 8002540:	4603      	mov	r3, r0
 8002542:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002548:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800254c:	4639      	mov	r1, r7
 800254e:	4618      	mov	r0, r3
 8002550:	f000 fc21 	bl	8002d96 <_ZSt11make_sharedI12PayloadClassJRPKcjEESt10shared_ptrIT_EDpOT0_>
 8002554:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002558:	f107 031c 	add.w	r3, r7, #28
 800255c:	4611      	mov	r1, r2
 800255e:	4618      	mov	r0, r3
 8002560:	f000 fc3c 	bl	8002ddc <_ZNSt10shared_ptrI11AbstractMsgEC1I12PayloadClassvEEOS_IT_E>
 8002564:	f107 031c 	add.w	r3, r7, #28
 8002568:	4619      	mov	r1, r3
 800256a:	4620      	mov	r0, r4
 800256c:	f000 fbfd 	bl	8002d6a <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE9push_backEOS3_>
 8002570:	f107 031c 	add.w	r3, r7, #28
 8002574:	4618      	mov	r0, r3
 8002576:	f7fe fe42 	bl	80011fe <_ZNSt10shared_ptrI11AbstractMsgED1Ev>
 800257a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff ff95 	bl	80024ae <_ZNSt10shared_ptrI12PayloadClassED1Ev>
		if( tx_msg_list.size() == 2)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3324      	adds	r3, #36	; 0x24
 8002588:	4618      	mov	r0, r3
 800258a:	f000 fc3a 	bl	8002e02 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE4sizeEv>
 800258e:	4603      	mov	r3, r0
 8002590:	2b02      	cmp	r3, #2
 8002592:	bf0c      	ite	eq
 8002594:	2301      	moveq	r3, #1
 8002596:	2300      	movne	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d002      	beq.n	80025a4 <_ZN10MsgHandler10send_printEPKc+0xdc>
		{
			transmit_front_msg();
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f870 	bl	8002684 <_ZN10MsgHandler18transmit_front_msgEv>
		}
	}

}
 80025a4:	bf00      	nop
 80025a6:	3734      	adds	r7, #52	; 0x34
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd90      	pop	{r4, r7, pc}
 80025ac:	0800b9bc 	.word	0x0800b9bc

080025b0 <_ZN10MsgHandler10send_floatEf>:

void MsgHandler::send_float(float float_to_send)
{
 80025b0:	b590      	push	{r4, r7, lr}
 80025b2:	b08f      	sub	sp, #60	; 0x3c
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	ed87 0a00 	vstr	s0, [r7]
	tx_msg_list.push_back(std::make_shared<HeaderClass>(SerialID::MSG_DATA_1,sizeof(float)));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80025c2:	2304      	movs	r3, #4
 80025c4:	61fb      	str	r3, [r7, #28]
 80025c6:	f107 0314 	add.w	r3, r7, #20
 80025ca:	f107 021c 	add.w	r2, r7, #28
 80025ce:	492c      	ldr	r1, [pc, #176]	; (8002680 <_ZN10MsgHandler10send_floatEf+0xd0>)
 80025d0:	4618      	mov	r0, r3
 80025d2:	f000 fb94 	bl	8002cfe <_ZSt11make_sharedI11HeaderClassJRKhjEESt10shared_ptrIT_EDpOT0_>
 80025d6:	f107 0214 	add.w	r2, r7, #20
 80025da:	f107 030c 	add.w	r3, r7, #12
 80025de:	4611      	mov	r1, r2
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 fbaf 	bl	8002d44 <_ZNSt10shared_ptrI11AbstractMsgEC1I11HeaderClassvEEOS_IT_E>
 80025e6:	f107 030c 	add.w	r3, r7, #12
 80025ea:	4619      	mov	r1, r3
 80025ec:	4620      	mov	r0, r4
 80025ee:	f000 fbbc 	bl	8002d6a <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE9push_backEOS3_>
 80025f2:	f107 030c 	add.w	r3, r7, #12
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fe fe01 	bl	80011fe <_ZNSt10shared_ptrI11AbstractMsgED1Ev>
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff ff39 	bl	8002478 <_ZNSt10shared_ptrI11HeaderClassED1Ev>
	tx_msg_list.push_back(std::make_shared<PayloadClass>(&float_to_send,sizeof(float)));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800260c:	463b      	mov	r3, r7
 800260e:	633b      	str	r3, [r7, #48]	; 0x30
 8002610:	2304      	movs	r3, #4
 8002612:	637b      	str	r3, [r7, #52]	; 0x34
 8002614:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002618:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800261c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002620:	4618      	mov	r0, r3
 8002622:	f000 fbfa 	bl	8002e1a <_ZSt11make_sharedI12PayloadClassJPfjEESt10shared_ptrIT_EDpOT0_>
 8002626:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800262a:	f107 0320 	add.w	r3, r7, #32
 800262e:	4611      	mov	r1, r2
 8002630:	4618      	mov	r0, r3
 8002632:	f000 fbd3 	bl	8002ddc <_ZNSt10shared_ptrI11AbstractMsgEC1I12PayloadClassvEEOS_IT_E>
 8002636:	f107 0320 	add.w	r3, r7, #32
 800263a:	4619      	mov	r1, r3
 800263c:	4620      	mov	r0, r4
 800263e:	f000 fb94 	bl	8002d6a <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE9push_backEOS3_>
 8002642:	f107 0320 	add.w	r3, r7, #32
 8002646:	4618      	mov	r0, r3
 8002648:	f7fe fdd9 	bl	80011fe <_ZNSt10shared_ptrI11AbstractMsgED1Ev>
 800264c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff ff2c 	bl	80024ae <_ZNSt10shared_ptrI12PayloadClassED1Ev>
	if( tx_msg_list.size() == 2)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3324      	adds	r3, #36	; 0x24
 800265a:	4618      	mov	r0, r3
 800265c:	f000 fbd1 	bl	8002e02 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE4sizeEv>
 8002660:	4603      	mov	r3, r0
 8002662:	2b02      	cmp	r3, #2
 8002664:	bf0c      	ite	eq
 8002666:	2301      	moveq	r3, #1
 8002668:	2300      	movne	r3, #0
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d002      	beq.n	8002676 <_ZN10MsgHandler10send_floatEf+0xc6>
	{
		transmit_front_msg();
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 f807 	bl	8002684 <_ZN10MsgHandler18transmit_front_msgEv>
	}

}
 8002676:	bf00      	nop
 8002678:	373c      	adds	r7, #60	; 0x3c
 800267a:	46bd      	mov	sp, r7
 800267c:	bd90      	pop	{r4, r7, pc}
 800267e:	bf00      	nop
 8002680:	0800b9bd 	.word	0x0800b9bd

08002684 <_ZN10MsgHandler18transmit_front_msgEv>:

void MsgHandler::transmit_front_msg()
{
 8002684:	b5b0      	push	{r4, r5, r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
	if(ongoing_fetch == false)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	791b      	ldrb	r3, [r3, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d104      	bne.n	800269e <_ZN10MsgHandler18transmit_front_msgEv+0x1a>
	{
		HAL_UART_AbortReceive(huart);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f004 ffbe 	bl	800761a <HAL_UART_AbortReceive>
	}
	HAL_UART_Transmit_DMA(huart, (uint8_t*)tx_msg_list.front()->get_data(), tx_msg_list.front()->get_data_size());
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681c      	ldr	r4, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3324      	adds	r3, #36	; 0x24
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 faee 	bl	8002c88 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 80026ac:	4603      	mov	r3, r0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 fafd 	bl	8002cae <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80026b4:	4603      	mov	r3, r0
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	3208      	adds	r2, #8
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	4790      	blx	r2
 80026c0:	4605      	mov	r5, r0
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	3324      	adds	r3, #36	; 0x24
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 fade 	bl	8002c88 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 80026cc:	4603      	mov	r3, r0
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 faed 	bl	8002cae <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80026d4:	4603      	mov	r3, r0
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	3210      	adds	r2, #16
 80026da:	6812      	ldr	r2, [r2, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	4790      	blx	r2
 80026e0:	4603      	mov	r3, r0
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	461a      	mov	r2, r3
 80026e6:	4629      	mov	r1, r5
 80026e8:	4620      	mov	r0, r4
 80026ea:	f004 ff01 	bl	80074f0 <HAL_UART_Transmit_DMA>
}
 80026ee:	bf00      	nop
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bdb0      	pop	{r4, r5, r7, pc}

080026f6 <_ZN10MsgHandler11receive_ackEv>:

void MsgHandler::receive_ack()
{
 80026f6:	b5b0      	push	{r4, r5, r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(huart, rxSingleack.get_data(), rxSingleack.get_data_size());
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681c      	ldr	r4, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3308      	adds	r3, #8
 8002706:	4618      	mov	r0, r3
 8002708:	f7fe fd14 	bl	8001134 <_ZNK6AckMsg8get_dataEv>
 800270c:	4605      	mov	r5, r0
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3308      	adds	r3, #8
 8002712:	4618      	mov	r0, r3
 8002714:	f7fe fd27 	bl	8001166 <_ZNK6AckMsg13get_data_sizeEv>
 8002718:	4603      	mov	r3, r0
 800271a:	b29b      	uxth	r3, r3
 800271c:	461a      	mov	r2, r3
 800271e:	4629      	mov	r1, r5
 8002720:	4620      	mov	r0, r4
 8002722:	f004 ff55 	bl	80075d0 <HAL_UART_Receive_DMA>
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002730 <_ZN10MsgHandler19receive_data_headerEv>:
void MsgHandler::receive_data_header()
{
 8002730:	b5b0      	push	{r4, r5, r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, GPIO_PinState::GPIO_PIN_RESET);
 8002738:	2200      	movs	r2, #0
 800273a:	2120      	movs	r1, #32
 800273c:	480d      	ldr	r0, [pc, #52]	; (8002774 <_ZN10MsgHandler19receive_data_headerEv+0x44>)
 800273e:	f003 fb99 	bl	8005e74 <HAL_GPIO_WritePin>
	HAL_UART_Receive_DMA(huart, rxHeader.get_data(), rxHeader.get_data_size());
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681c      	ldr	r4, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3318      	adds	r3, #24
 800274a:	4618      	mov	r0, r3
 800274c:	f7fe fc96 	bl	800107c <_ZNK11HeaderClass8get_dataEv>
 8002750:	4605      	mov	r5, r0
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3318      	adds	r3, #24
 8002756:	4618      	mov	r0, r3
 8002758:	f7fe fca9 	bl	80010ae <_ZNK11HeaderClass13get_data_sizeEv>
 800275c:	4603      	mov	r3, r0
 800275e:	b29b      	uxth	r3, r3
 8002760:	461a      	mov	r2, r3
 8002762:	4629      	mov	r1, r5
 8002764:	4620      	mov	r0, r4
 8002766:	f004 ff33 	bl	80075d0 <HAL_UART_Receive_DMA>
}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bdb0      	pop	{r4, r5, r7, pc}
 8002772:	bf00      	nop
 8002774:	40020000 	.word	0x40020000

08002778 <_ZNSt15__uniq_ptr_dataI12PayloadClassSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	4611      	mov	r1, r2
 8002788:	4618      	mov	r0, r3
 800278a:	f000 fb97 	bl	8002ebc <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EEaSEOS3_>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4618      	mov	r0, r3
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EEaSEOS3_>:
      unique_ptr& operator=(unique_ptr&&) = default;
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	4611      	mov	r1, r2
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff ffe5 	bl	8002778 <_ZNSt15__uniq_ptr_dataI12PayloadClassSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <_ZN10MsgHandler14ack_msg_data_1Ev>:
void MsgHandler::ack_msg_data_1()
{
 80027b8:	b5b0      	push	{r4, r5, r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
	float dummy_data_1 = 0.0;
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	60bb      	str	r3, [r7, #8]
	incoming_data = std::make_unique<PayloadClass>(&dummy_data_1,sizeof(float));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f103 0420 	add.w	r4, r3, #32
 80027cc:	f107 0308 	add.w	r3, r7, #8
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	2304      	movs	r3, #4
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	f107 030c 	add.w	r3, r7, #12
 80027da:	f107 0214 	add.w	r2, r7, #20
 80027de:	f107 0110 	add.w	r1, r7, #16
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 fb47 	bl	8002e76 <_ZSt11make_uniqueI12PayloadClassJPfjEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 80027e8:	f107 030c 	add.w	r3, r7, #12
 80027ec:	4619      	mov	r1, r3
 80027ee:	4620      	mov	r0, r4
 80027f0:	f7ff ffd2 	bl	8002798 <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EEaSEOS3_>
 80027f4:	f107 030c 	add.w	r3, r7, #12
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff f801 	bl	8001800 <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EED1Ev>
	txSingleack.get_data()[0] = SerialID::MSG_ACK;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3310      	adds	r3, #16
 8002802:	4618      	mov	r0, r3
 8002804:	f7fe fc96 	bl	8001134 <_ZNK6AckMsg8get_dataEv>
 8002808:	4603      	mov	r3, r0
 800280a:	22ff      	movs	r2, #255	; 0xff
 800280c:	701a      	strb	r2, [r3, #0]
	txSingleack.get_data()[1] = SerialID::MSG_DATA_1;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3310      	adds	r3, #16
 8002812:	4618      	mov	r0, r3
 8002814:	f7fe fc8e 	bl	8001134 <_ZNK6AckMsg8get_dataEv>
 8002818:	4603      	mov	r3, r0
 800281a:	3301      	adds	r3, #1
 800281c:	2201      	movs	r2, #1
 800281e:	701a      	strb	r2, [r3, #0]
	txSingleack.get_data()[2] = sizeof(float);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3310      	adds	r3, #16
 8002824:	4618      	mov	r0, r3
 8002826:	f7fe fc85 	bl	8001134 <_ZNK6AckMsg8get_dataEv>
 800282a:	4603      	mov	r3, r0
 800282c:	3302      	adds	r3, #2
 800282e:	2204      	movs	r2, #4
 8002830:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(huart, txSingleack.get_data(), txSingleack.get_data_size());
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681c      	ldr	r4, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3310      	adds	r3, #16
 800283a:	4618      	mov	r0, r3
 800283c:	f7fe fc7a 	bl	8001134 <_ZNK6AckMsg8get_dataEv>
 8002840:	4605      	mov	r5, r0
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3310      	adds	r3, #16
 8002846:	4618      	mov	r0, r3
 8002848:	f7fe fc8d 	bl	8001166 <_ZNK6AckMsg13get_data_sizeEv>
 800284c:	4603      	mov	r3, r0
 800284e:	b29b      	uxth	r3, r3
 8002850:	461a      	mov	r2, r3
 8002852:	4629      	mov	r1, r5
 8002854:	4620      	mov	r0, r4
 8002856:	f004 fe4b 	bl	80074f0 <HAL_UART_Transmit_DMA>

}
 800285a:	bf00      	nop
 800285c:	3718      	adds	r7, #24
 800285e:	46bd      	mov	sp, r7
 8002860:	bdb0      	pop	{r4, r5, r7, pc}

08002862 <_ZN10MsgHandler13ack_msg_printEh>:
void MsgHandler::ack_msg_print(uint8_t msg_len)
{
 8002862:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	70fb      	strb	r3, [r7, #3]
	txSingleack.get_data()[0] = SerialID::MSG_ACK;
	txSingleack.get_data()[1] = SerialID::MSG_PRINT;
	txSingleack.get_data()[2] = msg_len;
	HAL_UART_Transmit_DMA(huart, txSingleack.get_data(), txSingleack.get_data_size());

}
 8002870:	466b      	mov	r3, sp
 8002872:	461e      	mov	r6, r3
	char dummy_print_msg[msg_len];
 8002874:	78f9      	ldrb	r1, [r7, #3]
 8002876:	460b      	mov	r3, r1
 8002878:	3b01      	subs	r3, #1
 800287a:	617b      	str	r3, [r7, #20]
 800287c:	b2cb      	uxtb	r3, r1
 800287e:	2200      	movs	r2, #0
 8002880:	4698      	mov	r8, r3
 8002882:	4691      	mov	r9, r2
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002890:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002894:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002898:	b2cb      	uxtb	r3, r1
 800289a:	2200      	movs	r2, #0
 800289c:	461c      	mov	r4, r3
 800289e:	4615      	mov	r5, r2
 80028a0:	f04f 0200 	mov.w	r2, #0
 80028a4:	f04f 0300 	mov.w	r3, #0
 80028a8:	00eb      	lsls	r3, r5, #3
 80028aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028ae:	00e2      	lsls	r2, r4, #3
 80028b0:	460b      	mov	r3, r1
 80028b2:	3307      	adds	r3, #7
 80028b4:	08db      	lsrs	r3, r3, #3
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	ebad 0d03 	sub.w	sp, sp, r3
 80028bc:	466b      	mov	r3, sp
 80028be:	3300      	adds	r3, #0
 80028c0:	613b      	str	r3, [r7, #16]
	char *dummy_print_msg_ptr = dummy_print_msg;
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	60bb      	str	r3, [r7, #8]
	incoming_data = std::make_unique<PayloadClass>(dummy_print_msg_ptr,msg_len);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f103 0420 	add.w	r4, r3, #32
 80028cc:	f107 030c 	add.w	r3, r7, #12
 80028d0:	1cfa      	adds	r2, r7, #3
 80028d2:	f107 0108 	add.w	r1, r7, #8
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 fb0c 	bl	8002ef4 <_ZSt11make_uniqueI12PayloadClassJRPcRhEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 80028dc:	f107 030c 	add.w	r3, r7, #12
 80028e0:	4619      	mov	r1, r3
 80028e2:	4620      	mov	r0, r4
 80028e4:	f7ff ff58 	bl	8002798 <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EEaSEOS3_>
 80028e8:	f107 030c 	add.w	r3, r7, #12
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fe ff87 	bl	8001800 <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EED1Ev>
	txSingleack.get_data()[0] = SerialID::MSG_ACK;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3310      	adds	r3, #16
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fe fc1c 	bl	8001134 <_ZNK6AckMsg8get_dataEv>
 80028fc:	4603      	mov	r3, r0
 80028fe:	22ff      	movs	r2, #255	; 0xff
 8002900:	701a      	strb	r2, [r3, #0]
	txSingleack.get_data()[1] = SerialID::MSG_PRINT;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3310      	adds	r3, #16
 8002906:	4618      	mov	r0, r3
 8002908:	f7fe fc14 	bl	8001134 <_ZNK6AckMsg8get_dataEv>
 800290c:	4603      	mov	r3, r0
 800290e:	3301      	adds	r3, #1
 8002910:	2200      	movs	r2, #0
 8002912:	701a      	strb	r2, [r3, #0]
	txSingleack.get_data()[2] = msg_len;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3310      	adds	r3, #16
 8002918:	4618      	mov	r0, r3
 800291a:	f7fe fc0b 	bl	8001134 <_ZNK6AckMsg8get_dataEv>
 800291e:	4603      	mov	r3, r0
 8002920:	3302      	adds	r3, #2
 8002922:	78fa      	ldrb	r2, [r7, #3]
 8002924:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(huart, txSingleack.get_data(), txSingleack.get_data_size());
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681c      	ldr	r4, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3310      	adds	r3, #16
 800292e:	4618      	mov	r0, r3
 8002930:	f7fe fc00 	bl	8001134 <_ZNK6AckMsg8get_dataEv>
 8002934:	4605      	mov	r5, r0
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3310      	adds	r3, #16
 800293a:	4618      	mov	r0, r3
 800293c:	f7fe fc13 	bl	8001166 <_ZNK6AckMsg13get_data_sizeEv>
 8002940:	4603      	mov	r3, r0
 8002942:	b29b      	uxth	r3, r3
 8002944:	461a      	mov	r2, r3
 8002946:	4629      	mov	r1, r5
 8002948:	4620      	mov	r0, r4
 800294a:	f004 fdd1 	bl	80074f0 <HAL_UART_Transmit_DMA>
 800294e:	46b5      	mov	sp, r6
}
 8002950:	bf00      	nop
 8002952:	371c      	adds	r7, #28
 8002954:	46bd      	mov	sp, r7
 8002956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800295a <_ZN10MsgHandler12receive_dataEv>:

void MsgHandler::receive_data()
{
 800295a:	b5b0      	push	{r4, r5, r7, lr}
 800295c:	b082      	sub	sp, #8
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(huart, incoming_data->get_data(), incoming_data->get_data_size());
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681c      	ldr	r4, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3320      	adds	r3, #32
 800296a:	4618      	mov	r0, r3
 800296c:	f000 f9bb 	bl	8002ce6 <_ZNKSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EEptEv>
 8002970:	4603      	mov	r3, r0
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	3208      	adds	r2, #8
 8002976:	6812      	ldr	r2, [r2, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	4790      	blx	r2
 800297c:	4605      	mov	r5, r0
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	3320      	adds	r3, #32
 8002982:	4618      	mov	r0, r3
 8002984:	f000 f9af 	bl	8002ce6 <_ZNKSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EEptEv>
 8002988:	4603      	mov	r3, r0
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	3210      	adds	r2, #16
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	4790      	blx	r2
 8002994:	4603      	mov	r3, r0
 8002996:	b29b      	uxth	r3, r3
 8002998:	461a      	mov	r2, r3
 800299a:	4629      	mov	r1, r5
 800299c:	4620      	mov	r0, r4
 800299e:	f004 fe17 	bl	80075d0 <HAL_UART_Receive_DMA>
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080029ac <_ZN10MsgHandler27process_received_msg_data_1EPh>:

void MsgHandler::process_received_msg_data_1(uint8_t * data)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b090      	sub	sp, #64	; 0x40
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
	float* float_ptr = reinterpret_cast<float*>(data);
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	63fb      	str	r3, [r7, #60]	; 0x3c
	char msg[50];
	sprintf(msg,"received : %f",*float_ptr);
 80029ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fd fdf2 	bl	80005a8 <__aeabi_f2d>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	f107 0008 	add.w	r0, r7, #8
 80029cc:	4906      	ldr	r1, [pc, #24]	; (80029e8 <_ZN10MsgHandler27process_received_msg_data_1EPh+0x3c>)
 80029ce:	f006 fedd 	bl	800978c <siprintf>
	send_print(msg);
 80029d2:	f107 0308 	add.w	r3, r7, #8
 80029d6:	4619      	mov	r1, r3
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff fd75 	bl	80024c8 <_ZN10MsgHandler10send_printEPKc>

}
 80029de:	bf00      	nop
 80029e0:	3740      	adds	r7, #64	; 0x40
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	0800b8f8 	.word	0x0800b8f8

080029ec <_ZSt3minIiERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	da01      	bge.n	8002a06 <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	e000      	b.n	8002a08 <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 8002a06:	687b      	ldr	r3, [r7, #4]
    }
 8002a08:	4618      	mov	r0, r3
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <_ZN10MsgHandler26process_received_msg_printEPhh>:
void MsgHandler::process_received_msg_print(uint8_t * data, uint8_t msg_len)
{
 8002a14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a18:	b08b      	sub	sp, #44	; 0x2c
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	60f8      	str	r0, [r7, #12]
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	4613      	mov	r3, r2
 8002a22:	71fb      	strb	r3, [r7, #7]
 	uint8_t max_len = std::min(UINT8_MAX, 50+msg_len);
	char msg[max_len];
	sprintf(msg,"received : %s",charPtr);
	send_print(msg);

}
 8002a24:	466b      	mov	r3, sp
 8002a26:	461e      	mov	r6, r3
    char* charPtr = reinterpret_cast<char*>(data);
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24
 	uint8_t max_len = std::min(UINT8_MAX, 50+msg_len);
 8002a2c:	23ff      	movs	r3, #255	; 0xff
 8002a2e:	613b      	str	r3, [r7, #16]
 8002a30:	79fb      	ldrb	r3, [r7, #7]
 8002a32:	3332      	adds	r3, #50	; 0x32
 8002a34:	617b      	str	r3, [r7, #20]
 8002a36:	f107 0214 	add.w	r2, r7, #20
 8002a3a:	f107 0310 	add.w	r3, r7, #16
 8002a3e:	4611      	mov	r1, r2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff ffd3 	bl	80029ec <_ZSt3minIiERKT_S2_S2_>
 8002a46:	4603      	mov	r3, r0
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	char msg[max_len];
 8002a4e:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8002a52:	460b      	mov	r3, r1
 8002a54:	3b01      	subs	r3, #1
 8002a56:	61fb      	str	r3, [r7, #28]
 8002a58:	b2cb      	uxtb	r3, r1
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	4698      	mov	r8, r3
 8002a5e:	4691      	mov	r9, r2
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a6c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a70:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a74:	b2cb      	uxtb	r3, r1
 8002a76:	2200      	movs	r2, #0
 8002a78:	461c      	mov	r4, r3
 8002a7a:	4615      	mov	r5, r2
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	00eb      	lsls	r3, r5, #3
 8002a86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a8a:	00e2      	lsls	r2, r4, #3
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	3307      	adds	r3, #7
 8002a90:	08db      	lsrs	r3, r3, #3
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	ebad 0d03 	sub.w	sp, sp, r3
 8002a98:	466b      	mov	r3, sp
 8002a9a:	3300      	adds	r3, #0
 8002a9c:	61bb      	str	r3, [r7, #24]
	sprintf(msg,"received : %s",charPtr);
 8002a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa0:	4906      	ldr	r1, [pc, #24]	; (8002abc <_ZN10MsgHandler26process_received_msg_printEPhh+0xa8>)
 8002aa2:	69b8      	ldr	r0, [r7, #24]
 8002aa4:	f006 fe72 	bl	800978c <siprintf>
	send_print(msg);
 8002aa8:	69b9      	ldr	r1, [r7, #24]
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f7ff fd0c 	bl	80024c8 <_ZN10MsgHandler10send_printEPKc>
 8002ab0:	46b5      	mov	sp, r6
}
 8002ab2:	bf00      	nop
 8002ab4:	372c      	adds	r7, #44	; 0x2c
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002abc:	0800b908 	.word	0x0800b908

08002ac0 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEaSERKS3_>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	1d1a      	adds	r2, r3, #4
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	3304      	adds	r3, #4
 8002ada:	4619      	mov	r1, r3
 8002adc:	4610      	mov	r0, r2
 8002ade:	f000 fa67 	bl	8002fb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <_ZNSt10shared_ptrI11AbstractMsgEaSERKS1_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	4611      	mov	r1, r2
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff ffdf 	bl	8002ac0 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEaSERKS3_>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4618      	mov	r0, r3
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <_ZN10MsgHandler15process_timeoutEv>:

void MsgHandler::process_timeout(void)
{
 8002b0c:	b590      	push	{r4, r7, lr}
 8002b0e:	b087      	sub	sp, #28
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]

	if( ! tx_msg_list.empty())
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3324      	adds	r3, #36	; 0x24
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f000 f8a3 	bl	8002c64 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5emptyEv>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	f083 0301 	eor.w	r3, r3, #1
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d040      	beq.n	8002bac <_ZN10MsgHandler15process_timeoutEv+0xa0>
	{
		if(registered_msg.get() == tx_msg_list.front().get() )
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3330      	adds	r3, #48	; 0x30
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 fa02 	bl	8002f38 <_ZNKSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8002b34:	4604      	mov	r4, r0
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3324      	adds	r3, #36	; 0x24
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 f8a4 	bl	8002c88 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 8002b40:	4603      	mov	r3, r0
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 f9f8 	bl	8002f38 <_ZNKSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	429c      	cmp	r4, r3
 8002b4c:	bf0c      	ite	eq
 8002b4e:	2301      	moveq	r3, #1
 8002b50:	2300      	movne	r3, #0
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d01c      	beq.n	8002b92 <_ZN10MsgHandler15process_timeoutEv+0x86>
		{
			tx_msg_list.clear();
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3324      	adds	r3, #36	; 0x24
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 f9f7 	bl	8002f50 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5clearEv>
			registered_msg = nullptr;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8002b68:	f107 0308 	add.w	r3, r7, #8
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 f9fe 	bl	8002f70 <_ZNSt10shared_ptrI11AbstractMsgEC1EDn>
 8002b74:	f107 0308 	add.w	r3, r7, #8
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4620      	mov	r0, r4
 8002b7c:	f000 fa05 	bl	8002f8a <_ZNSt10shared_ptrI11AbstractMsgEaSEOS1_>
 8002b80:	f107 0308 	add.w	r3, r7, #8
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fe fb3a 	bl	80011fe <_ZNSt10shared_ptrI11AbstractMsgED1Ev>
			receive_data_header();
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7ff fdd0 	bl	8002730 <_ZN10MsgHandler19receive_data_headerEv>
 8002b90:	e00c      	b.n	8002bac <_ZN10MsgHandler15process_timeoutEv+0xa0>
		}
		else
		{
			registered_msg = tx_msg_list.front();
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3324      	adds	r3, #36	; 0x24
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 f873 	bl	8002c88 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	f7ff ffa0 	bl	8002aec <_ZNSt10shared_ptrI11AbstractMsgEaSERKS1_>
		}
	}
	if( ongoing_fetch)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	791b      	ldrb	r3, [r3, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d021      	beq.n	8002bf8 <_ZN10MsgHandler15process_timeoutEv+0xec>
	{
		if(register_ongoing_fetch)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	795b      	ldrb	r3, [r3, #5]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d019      	beq.n	8002bf0 <_ZN10MsgHandler15process_timeoutEv+0xe4>
		{
			ongoing_fetch = false;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	711a      	strb	r2, [r3, #4]
			register_ongoing_fetch = false;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	715a      	strb	r2, [r3, #5]
			txSingleack = AckMsg();
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f103 0410 	add.w	r4, r3, #16
 8002bce:	f107 0310 	add.w	r3, r7, #16
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fe fa76 	bl	80010c4 <_ZN6AckMsgC1Ev>
 8002bd8:	f107 0310 	add.w	r3, r7, #16
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4620      	mov	r0, r4
 8002be0:	f7ff fa53 	bl	800208a <_ZN6AckMsgaSERKS_>
 8002be4:	f107 0310 	add.w	r3, r7, #16
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff f957 	bl	8001e9c <_ZN6AckMsgD1Ev>
	}
	else
	{
		register_ongoing_fetch = false;
	}
}
 8002bee:	e006      	b.n	8002bfe <_ZN10MsgHandler15process_timeoutEv+0xf2>
			register_ongoing_fetch = true;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	715a      	strb	r2, [r3, #5]
}
 8002bf6:	e002      	b.n	8002bfe <_ZN10MsgHandler15process_timeoutEv+0xf2>
		register_ongoing_fetch = false;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	715a      	strb	r2, [r3, #5]
}
 8002bfe:	bf00      	nop
 8002c00:	371c      	adds	r7, #28
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd90      	pop	{r4, r7, pc}

08002c06 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b082      	sub	sp, #8
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
      { delete this; }
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	3304      	adds	r3, #4
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	4798      	blx	r3
 8002c20:	bf00      	nop
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEcvbEv>:
      const deleter_type&
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }

      /// Return @c true if the stored pointer is not null.
      explicit operator bool() const noexcept
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7fe fda1 	bl	8001778 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf14      	ite	ne
 8002c3c:	2301      	movne	r3, #1
 8002c3e:	2300      	moveq	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EE5resetEDn>:
               >>
      void
      reset(_Up __p) noexcept
      { _M_t.reset(std::move(__p)); }

      void reset(nullptr_t = nullptr) noexcept
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	6039      	str	r1, [r7, #0]
      { reset(pointer()); }
 8002c54:	2100      	movs	r1, #0
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f9ee 	bl	8003038 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EE5resetIPhvEEvT_>
 8002c5c:	bf00      	nop
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5emptyEv>:
      /**
       *  Returns true if the %list is empty.  (Thus begin() would equal
       *  end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	bf0c      	ite	eq
 8002c76:	2301      	moveq	r3, #1
 8002c78:	2300      	movne	r3, #0
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %list.
       */
      reference
      front() _GLIBCXX_NOEXCEPT
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
      { return *begin(); }
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 fa0d 	bl	80030b0 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5beginEv>
 8002c96:	4603      	mov	r3, r0
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	f107 030c 	add.w	r3, r7, #12
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 fa17 	bl	80030d2 <_ZNKSt14_List_iteratorISt10shared_ptrI11AbstractMsgEEdeEv>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
	return _M_get();
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fa19 	bl	80030ee <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8002cbc:	4603      	mov	r3, r0
      }
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE9pop_frontEv>:
       *  Note that no data is returned, and if the first element's data
       *  is needed, it should be retrieved before pop_front() is
       *  called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b082      	sub	sp, #8
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
      { this->_M_erase(begin()); }
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f9ee 	bl	80030b0 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5beginEv>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 fa14 	bl	8003106 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE8_M_eraseESt14_List_iteratorIS3_E>
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <_ZNKSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b082      	sub	sp, #8
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
	return get();
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 fa2f 	bl	8003152 <_ZNKSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EE3getEv>
 8002cf4:	4603      	mov	r3, r0
      }
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <_ZSt11make_sharedI11HeaderClassJRKhjEESt10shared_ptrIT_EDpOT0_>:
   *  @throw  std::bad_alloc, or an exception thrown from the
   *          constructor of @a _Tp.
   */
  template<typename _Tp, typename... _Args>
    inline shared_ptr<_Tp>
    make_shared(_Args&&... __args)
 8002cfe:	b590      	push	{r4, r7, lr}
 8002d00:	b087      	sub	sp, #28
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	60f8      	str	r0, [r7, #12]
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	607a      	str	r2, [r7, #4]
    {
      typedef typename std::remove_cv<_Tp>::type _Tp_nc;
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
 8002d0a:	f107 0314 	add.w	r3, r7, #20
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 fa2c 	bl	800316c <_ZNSaI11HeaderClassEC1Ev>
				       std::forward<_Args>(__args)...);
 8002d14:	68b8      	ldr	r0, [r7, #8]
 8002d16:	f000 fa41 	bl	800319c <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8002d1a:	4604      	mov	r4, r0
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 f89f 	bl	8002e60 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8002d22:	4603      	mov	r3, r0
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f107 0114 	add.w	r1, r7, #20
 8002d2a:	4622      	mov	r2, r4
 8002d2c:	f000 fa41 	bl	80031b2 <_ZSt15allocate_sharedI11HeaderClassSaIS0_EJRKhjEESt10shared_ptrIT_ERKT0_DpOT1_>
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
 8002d30:	f107 0314 	add.w	r3, r7, #20
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 fa25 	bl	8003184 <_ZNSaI11HeaderClassED1Ev>
				       std::forward<_Args>(__args)...);
 8002d3a:	bf00      	nop
    }
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	371c      	adds	r7, #28
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd90      	pop	{r4, r7, pc}

08002d44 <_ZNSt10shared_ptrI11AbstractMsgEC1I11HeaderClassvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 8002d44:	b590      	push	{r4, r7, lr}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8002d4e:	687c      	ldr	r4, [r7, #4]
 8002d50:	6838      	ldr	r0, [r7, #0]
 8002d52:	f000 fa47 	bl	80031e4 <_ZSt4moveIRSt10shared_ptrI11HeaderClassEEONSt16remove_referenceIT_E4typeEOS5_>
 8002d56:	4603      	mov	r3, r0
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	f000 fa4d 	bl	80031fa <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEC1I11HeaderClassvEEOS_IT_LS2_0EE>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4618      	mov	r0, r3
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd90      	pop	{r4, r7, pc}

08002d6a <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE9push_backEOS3_>:
      push_back(const value_type& __x)
      { this->_M_insert(end(), __x); }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 8002d6a:	b590      	push	{r4, r7, lr}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	6039      	str	r1, [r7, #0]
      { this->_M_insert(end(), std::move(__x)); }
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 fa5e 	bl	8003236 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE3endEv>
 8002d7a:	4604      	mov	r4, r0
 8002d7c:	6838      	ldr	r0, [r7, #0]
 8002d7e:	f000 fa6a 	bl	8003256 <_ZSt4moveIRSt10shared_ptrI11AbstractMsgEEONSt16remove_referenceIT_E4typeEOS5_>
 8002d82:	4603      	mov	r3, r0
 8002d84:	461a      	mov	r2, r3
 8002d86:	4621      	mov	r1, r4
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 fa6f 	bl	800326c <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE9_M_insertIJS3_EEEvSt14_List_iteratorIS3_EDpOT_>
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd90      	pop	{r4, r7, pc}

08002d96 <_ZSt11make_sharedI12PayloadClassJRPKcjEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8002d96:	b590      	push	{r4, r7, lr}
 8002d98:	b087      	sub	sp, #28
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	60f8      	str	r0, [r7, #12]
 8002d9e:	60b9      	str	r1, [r7, #8]
 8002da0:	607a      	str	r2, [r7, #4]
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
 8002da2:	f107 0314 	add.w	r3, r7, #20
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 fa7e 	bl	80032a8 <_ZNSaI12PayloadClassEC1Ev>
				       std::forward<_Args>(__args)...);
 8002dac:	68b8      	ldr	r0, [r7, #8]
 8002dae:	f000 fa93 	bl	80032d8 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8002db2:	4604      	mov	r4, r0
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f853 	bl	8002e60 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f107 0114 	add.w	r1, r7, #20
 8002dc2:	4622      	mov	r2, r4
 8002dc4:	f000 fa93 	bl	80032ee <_ZSt15allocate_sharedI12PayloadClassSaIS0_EJRPKcjEESt10shared_ptrIT_ERKT0_DpOT1_>
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
 8002dc8:	f107 0314 	add.w	r3, r7, #20
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f000 fa77 	bl	80032c0 <_ZNSaI12PayloadClassED1Ev>
				       std::forward<_Args>(__args)...);
 8002dd2:	bf00      	nop
    }
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	371c      	adds	r7, #28
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd90      	pop	{r4, r7, pc}

08002ddc <_ZNSt10shared_ptrI11AbstractMsgEC1I12PayloadClassvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 8002ddc:	b590      	push	{r4, r7, lr}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8002de6:	687c      	ldr	r4, [r7, #4]
 8002de8:	6838      	ldr	r0, [r7, #0]
 8002dea:	f000 fa99 	bl	8003320 <_ZSt4moveIRSt10shared_ptrI12PayloadClassEEONSt16remove_referenceIT_E4typeEOS5_>
 8002dee:	4603      	mov	r3, r0
 8002df0:	4619      	mov	r1, r3
 8002df2:	4620      	mov	r0, r4
 8002df4:	f000 fa9f 	bl	8003336 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEC1I12PayloadClassvEEOS_IT_LS2_0EE>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd90      	pop	{r4, r7, pc}

08002e02 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
      { return _M_node_count(); }
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 fab1 	bl	8003372 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE13_M_node_countEv>
 8002e10:	4603      	mov	r3, r0
 8002e12:	4618      	mov	r0, r3
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <_ZSt11make_sharedI12PayloadClassJPfjEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8002e1a:	b590      	push	{r4, r7, lr}
 8002e1c:	b087      	sub	sp, #28
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	60f8      	str	r0, [r7, #12]
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	607a      	str	r2, [r7, #4]
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
 8002e26:	f107 0314 	add.w	r3, r7, #20
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 fa3c 	bl	80032a8 <_ZNSaI12PayloadClassEC1Ev>
				       std::forward<_Args>(__args)...);
 8002e30:	68b8      	ldr	r0, [r7, #8]
 8002e32:	f000 faab 	bl	800338c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8002e36:	4604      	mov	r4, r0
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 f811 	bl	8002e60 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f107 0114 	add.w	r1, r7, #20
 8002e46:	4622      	mov	r2, r4
 8002e48:	f000 faab 	bl	80033a2 <_ZSt15allocate_sharedI12PayloadClassSaIS0_EJPfjEESt10shared_ptrIT_ERKT0_DpOT1_>
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
 8002e4c:	f107 0314 	add.w	r3, r7, #20
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 fa35 	bl	80032c0 <_ZNSaI12PayloadClassED1Ev>
				       std::forward<_Args>(__args)...);
 8002e56:	bf00      	nop
    }
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	371c      	adds	r7, #28
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd90      	pop	{r4, r7, pc}

08002e60 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <_ZSt11make_uniqueI12PayloadClassJPfjEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
  /// @endcond

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
 8002e76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e78:	b085      	sub	sp, #20
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	60f8      	str	r0, [r7, #12]
 8002e7e:	60b9      	str	r1, [r7, #8]
 8002e80:	607a      	str	r2, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8002e82:	68b8      	ldr	r0, [r7, #8]
 8002e84:	f000 fa82 	bl	800338c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	681c      	ldr	r4, [r3, #0]
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7ff ffe7 	bl	8002e60 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8002e92:	4603      	mov	r3, r0
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	b2dd      	uxtb	r5, r3
 8002e98:	200c      	movs	r0, #12
 8002e9a:	f005 fdc3 	bl	8008a24 <_Znwj>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	461e      	mov	r6, r3
 8002ea2:	462a      	mov	r2, r5
 8002ea4:	4621      	mov	r1, r4
 8002ea6:	4630      	mov	r0, r6
 8002ea8:	f000 fa94 	bl	80033d4 <_ZN12PayloadClassC1IfEEPT_h>
 8002eac:	4631      	mov	r1, r6
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 fade 	bl	8003470 <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ebc <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 8002ec6:	6838      	ldr	r0, [r7, #0]
 8002ec8:	f000 fb01 	bl	80034ce <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE7releaseEv>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	4619      	mov	r1, r3
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 fadc 	bl	800348e <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 8002ed6:	6838      	ldr	r0, [r7, #0]
 8002ed8:	f7fe fe39 	bl	8001b4e <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE10_M_deleterEv>
 8002edc:	4603      	mov	r3, r0
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 fb0a 	bl	80034f8 <_ZSt7forwardISt14default_deleteI12PayloadClassEEOT_RNSt16remove_referenceIS3_E4typeE>
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7fe fe32 	bl	8001b4e <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 8002eea:	687b      	ldr	r3, [r7, #4]
      }
 8002eec:	4618      	mov	r0, r3
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <_ZSt11make_uniqueI12PayloadClassJRPcRhEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8002ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8002f00:	68b8      	ldr	r0, [r7, #8]
 8002f02:	f000 fb04 	bl	800350e <_ZSt7forwardIRPcEOT_RNSt16remove_referenceIS2_E4typeE>
 8002f06:	4603      	mov	r3, r0
 8002f08:	681c      	ldr	r4, [r3, #0]
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 fb0a 	bl	8003524 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8002f10:	4603      	mov	r3, r0
 8002f12:	781d      	ldrb	r5, [r3, #0]
 8002f14:	200c      	movs	r0, #12
 8002f16:	f005 fd85 	bl	8008a24 <_Znwj>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	461e      	mov	r6, r3
 8002f1e:	462a      	mov	r2, r5
 8002f20:	4621      	mov	r1, r4
 8002f22:	4630      	mov	r0, r6
 8002f24:	f000 fb0a 	bl	800353c <_ZN12PayloadClassC1IcEEPT_h>
 8002f28:	4631      	mov	r1, r6
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 faa0 	bl	8003470 <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	3714      	adds	r7, #20
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f38 <_ZNKSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
	reset(_Yp* __p, _Deleter __d, _Alloc __a)
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4618      	mov	r0, r3
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5clearEv>:
       *  the elements, and that if the elements themselves are
       *  pointers, the pointed-to memory is not touched in any way.
       *  Managing the pointer is the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
      {
	_Base::_M_clear();
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fe fd65 	bl	8001a2a <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE8_M_clearEv>
	_Base::_M_init();
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 fb28 	bl	80035b8 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE7_M_initEv>
      }
 8002f68:	bf00      	nop
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <_ZNSt10shared_ptrI11AbstractMsgEC1EDn>:
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7fe fc8e 	bl	800189c <_ZNSt10shared_ptrI11AbstractMsgEC1Ev>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4618      	mov	r0, r3
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <_ZNSt10shared_ptrI11AbstractMsgEaSEOS1_>:
      operator=(shared_ptr&& __r) noexcept
 8002f8a:	b590      	push	{r4, r7, lr}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	6039      	str	r1, [r7, #0]
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 8002f94:	687c      	ldr	r4, [r7, #4]
 8002f96:	6838      	ldr	r0, [r7, #0]
 8002f98:	f000 f95d 	bl	8003256 <_ZSt4moveIRSt10shared_ptrI11AbstractMsgEEONSt16remove_referenceIT_E4typeEOS5_>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	f000 fb15 	bl	80035d0 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>
	return *this;
 8002fa6:	687b      	ldr	r3, [r7, #4]
      }
 8002fa8:	4618      	mov	r0, r3
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd90      	pop	{r4, r7, pc}

08002fb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
      operator=(const __shared_count& __r) noexcept
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	60fb      	str	r3, [r7, #12]
	if (__tmp != _M_pi)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d011      	beq.n	8002fee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x3e>
	    if (__tmp != nullptr)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d002      	beq.n	8002fd6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	      __tmp->_M_add_ref_copy();
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f7ff f81b 	bl	800200c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
	    if (_M_pi != nullptr)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d004      	beq.n	8002fe8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x38>
	      _M_pi->_M_release();
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fd ffae 	bl	8000f44 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	601a      	str	r2, [r3, #0]
	return *this;
 8002fee:	687b      	ldr	r3, [r7, #4]
      }
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
      { }
 8003000:	4a04      	ldr	r2, [pc, #16]	; (8003014 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4618      	mov	r0, r3
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	0800ba1c 	.word	0x0800ba1c

08003018 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
      { }
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7ff ffe9 	bl	8002ff8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003026:	210c      	movs	r1, #12
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f005 fcf7 	bl	8008a1c <_ZdlPvj>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4618      	mov	r0, r3
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EE5resetIPhvEEvT_>:
      reset(_Up __p) noexcept
 8003038:	b590      	push	{r4, r7, lr}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
      { _M_t.reset(std::move(__p)); }
 8003042:	687c      	ldr	r4, [r7, #4]
 8003044:	463b      	mov	r3, r7
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fae1 	bl	800360e <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 800304c:	4603      	mov	r3, r0
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4619      	mov	r1, r3
 8003052:	4620      	mov	r0, r4
 8003054:	f000 fae6 	bl	8003624 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE5resetEPh>
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	bd90      	pop	{r4, r7, pc}

08003060 <_ZN12PayloadClassD1Ev>:
		~PayloadClass() = default;
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	4a08      	ldr	r2, [pc, #32]	; (800308c <_ZN12PayloadClassD1Ev+0x2c>)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	3308      	adds	r3, #8
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe fb50 	bl	8001718 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED1Ev>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4618      	mov	r0, r3
 800307c:	f7fd ff92 	bl	8000fa4 <_ZN11AbstractMsgD1Ev>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	0800ba00 	.word	0x0800ba00

08003090 <_ZN12PayloadClassD0Ev>:
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7ff ffe1 	bl	8003060 <_ZN12PayloadClassD1Ev>
 800309e:	210c      	movs	r1, #12
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f005 fcbb 	bl	8008a1c <_ZdlPvj>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4618      	mov	r0, r3
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_node._M_next); }
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	f107 030c 	add.w	r3, r7, #12
 80030c0:	4611      	mov	r1, r2
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 face 	bl	8003664 <_ZNSt14_List_iteratorISt10shared_ptrI11AbstractMsgEEC1EPNSt8__detail15_List_node_baseE>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <_ZNKSt14_List_iteratorISt10shared_ptrI11AbstractMsgEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fe fd4d 	bl	8001b7e <_ZNSt10_List_nodeISt10shared_ptrI11AbstractMsgEE9_M_valptrEv>
 80030e4:	4603      	mov	r3, r0
 80030e6:	4618      	mov	r0, r3
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b082      	sub	sp, #8
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7ff ff1e 	bl	8002f38 <_ZNKSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 80030fc:	4603      	mov	r3, r0
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE8_M_eraseESt14_List_iteratorIS3_E>:
       }
#endif

      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
 8003106:	b590      	push	{r4, r7, lr}
 8003108:	b085      	sub	sp, #20
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	6039      	str	r1, [r7, #0]
      {
	this->_M_dec_size(1);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2101      	movs	r1, #1
 8003114:	4618      	mov	r0, r3
 8003116:	f000 fab4 	bl	8003682 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_dec_sizeEj>
	__position._M_node->_M_unhook();
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f005 fd34 	bl	8008b8a <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	_Node* __n = static_cast<_Node*>(__position._M_node);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	60fb      	str	r3, [r7, #12]
#if __cplusplus >= 201103L
	_Node_alloc_traits::destroy(_M_get_Node_allocator(), __n->_M_valptr());
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4618      	mov	r0, r3
 800312a:	f7fe fd36 	bl	8001b9a <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE21_M_get_Node_allocatorEv>
 800312e:	4604      	mov	r4, r0
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f7fe fd24 	bl	8001b7e <_ZNSt10_List_nodeISt10shared_ptrI11AbstractMsgEE9_M_valptrEv>
 8003136:	4603      	mov	r3, r0
 8003138:	4619      	mov	r1, r3
 800313a:	4620      	mov	r0, r4
 800313c:	f7fe fd38 	bl	8001bb0 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE7destroyIS3_EEvRS5_PT_>
#else
	_Tp_alloc_type(_M_get_Node_allocator()).destroy(__n->_M_valptr());
#endif

	_M_put_node(__n);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68f9      	ldr	r1, [r7, #12]
 8003144:	4618      	mov	r0, r3
 8003146:	f7fe fd40 	bl	8001bca <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_put_nodeEPSt10_List_nodeIS3_E>
      }
 800314a:	bf00      	nop
 800314c:	3714      	adds	r7, #20
 800314e:	46bd      	mov	sp, r7
 8003150:	bd90      	pop	{r4, r7, pc}

08003152 <_ZNKSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8003152:	b580      	push	{r7, lr}
 8003154:	b082      	sub	sp, #8
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4618      	mov	r0, r3
 800315e:	f000 faa1 	bl	80036a4 <_ZNKSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE6_M_ptrEv>
 8003162:	4603      	mov	r3, r0
 8003164:	4618      	mov	r0, r3
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <_ZNSaI11HeaderClassEC1Ev>:
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 faa3 	bl	80036c0 <_ZN9__gnu_cxx13new_allocatorI11HeaderClassEC1Ev>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4618      	mov	r0, r3
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <_ZNSaI11HeaderClassED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 faa2 	bl	80036d6 <_ZN9__gnu_cxx13new_allocatorI11HeaderClassED1Ev>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4618      	mov	r0, r3
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4618      	mov	r0, r3
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <_ZSt15allocate_sharedI11HeaderClassSaIS0_EJRKhjEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 80031b2:	b5b0      	push	{r4, r5, r7, lr}
 80031b4:	b084      	sub	sp, #16
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	60f8      	str	r0, [r7, #12]
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	607a      	str	r2, [r7, #4]
 80031be:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 80031c0:	68bc      	ldr	r4, [r7, #8]
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7ff ffea 	bl	800319c <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 80031c8:	4605      	mov	r5, r0
 80031ca:	6838      	ldr	r0, [r7, #0]
 80031cc:	f7ff fe48 	bl	8002e60 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80031d0:	4603      	mov	r3, r0
 80031d2:	462a      	mov	r2, r5
 80031d4:	4621      	mov	r1, r4
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 fa88 	bl	80036ec <_ZNSt10shared_ptrI11HeaderClassEC1ISaIS0_EJRKhjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bdb0      	pop	{r4, r5, r7, pc}

080031e4 <_ZSt4moveIRSt10shared_ptrI11HeaderClassEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4618      	mov	r0, r3
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEC1I11HeaderClassvEEOS_IT_LS2_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
 8003202:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3304      	adds	r3, #4
 8003210:	4618      	mov	r0, r3
 8003212:	f7fe fce9 	bl	8001be8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	1d1a      	adds	r2, r3, #4
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	3304      	adds	r3, #4
 800321e:	4619      	mov	r1, r3
 8003220:	4610      	mov	r0, r2
 8003222:	f000 fa7d 	bl	8003720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = nullptr;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
	}
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003236:	b580      	push	{r7, lr}
 8003238:	b084      	sub	sp, #16
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_node); }
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	f107 030c 	add.w	r3, r7, #12
 8003244:	4611      	mov	r1, r2
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fa0c 	bl	8003664 <_ZNSt14_List_iteratorISt10shared_ptrI11AbstractMsgEEC1EPNSt8__detail15_List_node_baseE>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <_ZSt4moveIRSt10shared_ptrI11AbstractMsgEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE9_M_insertIJS3_EEEvSt14_List_iteratorIS3_EDpOT_>:
       _M_insert(iterator __position, _Args&&... __args)
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 fa66 	bl	800374a <_ZSt7forwardISt10shared_ptrI11AbstractMsgEEOT_RNSt16remove_referenceIS3_E4typeE>
 800327e:	4603      	mov	r3, r0
 8003280:	4619      	mov	r1, r3
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 fa6c 	bl	8003760 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE14_M_create_nodeIJS3_EEEPSt10_List_nodeIS3_EDpOT_>
 8003288:	6178      	str	r0, [r7, #20]
	 __tmp->_M_hook(__position._M_node);
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	4611      	mov	r1, r2
 8003290:	4618      	mov	r0, r3
 8003292:	f005 fc73 	bl	8008b7c <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
	 this->_M_inc_size(1);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2101      	movs	r1, #1
 800329a:	4618      	mov	r0, r3
 800329c:	f000 fa94 	bl	80037c8 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_inc_sizeEj>
       }
 80032a0:	bf00      	nop
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <_ZNSaI12PayloadClassEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 fa9a 	bl	80037ea <_ZN9__gnu_cxx13new_allocatorI12PayloadClassEC1Ev>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4618      	mov	r0, r3
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <_ZNSaI12PayloadClassED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 fa99 	bl	8003800 <_ZN9__gnu_cxx13new_allocatorI12PayloadClassED1Ev>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4618      	mov	r0, r3
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4618      	mov	r0, r3
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <_ZSt15allocate_sharedI12PayloadClassSaIS0_EJRPKcjEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 80032ee:	b5b0      	push	{r4, r5, r7, lr}
 80032f0:	b084      	sub	sp, #16
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	60f8      	str	r0, [r7, #12]
 80032f6:	60b9      	str	r1, [r7, #8]
 80032f8:	607a      	str	r2, [r7, #4]
 80032fa:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 80032fc:	68bc      	ldr	r4, [r7, #8]
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7ff ffea 	bl	80032d8 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8003304:	4605      	mov	r5, r0
 8003306:	6838      	ldr	r0, [r7, #0]
 8003308:	f7ff fdaa 	bl	8002e60 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800330c:	4603      	mov	r3, r0
 800330e:	462a      	mov	r2, r5
 8003310:	4621      	mov	r1, r4
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 fa7f 	bl	8003816 <_ZNSt10shared_ptrI12PayloadClassEC1ISaIS0_EJRPKcjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bdb0      	pop	{r4, r5, r7, pc}

08003320 <_ZSt4moveIRSt10shared_ptrI12PayloadClassEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4618      	mov	r0, r3
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEC1I12PayloadClassvEEOS_IT_LS2_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8003336:	b580      	push	{r7, lr}
 8003338:	b082      	sub	sp, #8
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
 800333e:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3304      	adds	r3, #4
 800334c:	4618      	mov	r0, r3
 800334e:	f7fe fc4b 	bl	8001be8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	1d1a      	adds	r2, r3, #4
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	3304      	adds	r3, #4
 800335a:	4619      	mov	r1, r3
 800335c:	4610      	mov	r0, r2
 800335e:	f000 f9df 	bl	8003720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = nullptr;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
	}
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4618      	mov	r0, r3
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE13_M_node_countEv>:
      _M_node_count() const
 8003372:	b580      	push	{r7, lr}
 8003374:	b082      	sub	sp, #8
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
      { return this->_M_get_size(); }
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4618      	mov	r0, r3
 800337e:	f000 fa64 	bl	800384a <_ZNKSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_get_sizeEv>
 8003382:	4603      	mov	r3, r0
 8003384:	4618      	mov	r0, r3
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4618      	mov	r0, r3
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <_ZSt15allocate_sharedI12PayloadClassSaIS0_EJPfjEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 80033a2:	b5b0      	push	{r4, r5, r7, lr}
 80033a4:	b084      	sub	sp, #16
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	607a      	str	r2, [r7, #4]
 80033ae:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 80033b0:	68bc      	ldr	r4, [r7, #8]
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7ff ffea 	bl	800338c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 80033b8:	4605      	mov	r5, r0
 80033ba:	6838      	ldr	r0, [r7, #0]
 80033bc:	f7ff fd50 	bl	8002e60 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80033c0:	4603      	mov	r3, r0
 80033c2:	462a      	mov	r2, r5
 80033c4:	4621      	mov	r1, r4
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 fa4b 	bl	8003862 <_ZNSt10shared_ptrI12PayloadClassEC1ISaIS0_EJPfjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bdb0      	pop	{r4, r5, r7, pc}

080033d4 <_ZN12PayloadClassC1IfEEPT_h>:
		PayloadClass(T* struct_or_plain_type_data, uint8_t data_size): _data_size(data_size), _data(new uint8_t[data_size])
 80033d4:	b590      	push	{r4, r7, lr}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	4613      	mov	r3, r2
 80033e0:	71fb      	strb	r3, [r7, #7]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7fd fdfd 	bl	8000fe4 <_ZN11AbstractMsgC1Ev>
 80033ea:	4a18      	ldr	r2, [pc, #96]	; (800344c <_ZN12PayloadClassC1IfEEPT_h+0x78>)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	79fa      	ldrb	r2, [r7, #7]
 80033f4:	711a      	strb	r2, [r3, #4]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f103 0408 	add.w	r4, r3, #8
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	4618      	mov	r0, r3
 8003400:	f005 fb21 	bl	8008a46 <_Znaj>
 8003404:	4603      	mov	r3, r0
 8003406:	4619      	mov	r1, r3
 8003408:	4620      	mov	r0, r4
 800340a:	f7fe f976 	bl	80016fa <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
			uint8_t* data_ptr = (uint8_t*) struct_or_plain_type_data;
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	613b      	str	r3, [r7, #16]
			for( uint8_t i = 0; i < _data_size; i ++)
 8003412:	2300      	movs	r3, #0
 8003414:	75fb      	strb	r3, [r7, #23]
 8003416:	e00f      	b.n	8003438 <_ZN12PayloadClassC1IfEEPT_h+0x64>
				_data[i] = data_ptr[i];
 8003418:	7dfb      	ldrb	r3, [r7, #23]
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	18d4      	adds	r4, r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	3308      	adds	r3, #8
 8003422:	7dfa      	ldrb	r2, [r7, #23]
 8003424:	4611      	mov	r1, r2
 8003426:	4618      	mov	r0, r3
 8003428:	f7fe f995 	bl	8001756 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800342c:	4603      	mov	r3, r0
 800342e:	7822      	ldrb	r2, [r4, #0]
 8003430:	701a      	strb	r2, [r3, #0]
			for( uint8_t i = 0; i < _data_size; i ++)
 8003432:	7dfb      	ldrb	r3, [r7, #23]
 8003434:	3301      	adds	r3, #1
 8003436:	75fb      	strb	r3, [r7, #23]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	791b      	ldrb	r3, [r3, #4]
 800343c:	7dfa      	ldrb	r2, [r7, #23]
 800343e:	429a      	cmp	r2, r3
 8003440:	d3ea      	bcc.n	8003418 <_ZN12PayloadClassC1IfEEPT_h+0x44>
		};
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4618      	mov	r0, r3
 8003446:	371c      	adds	r7, #28
 8003448:	46bd      	mov	sp, r7
 800344a:	bd90      	pop	{r4, r7, pc}
 800344c:	0800ba00 	.word	0x0800ba00

08003450 <_ZNSt15__uniq_ptr_dataI12PayloadClassSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	4611      	mov	r1, r2
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fa18 	bl	8003896 <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EEC1EPS0_>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4618      	mov	r0, r3
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6839      	ldr	r1, [r7, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff ffe6 	bl	8003450 <_ZNSt15__uniq_ptr_dataI12PayloadClassSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 800348e:	b580      	push	{r7, lr}
 8003490:	b084      	sub	sp, #16
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7fe fa79 	bl	8001990 <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE6_M_ptrEv>
 800349e:	4603      	mov	r3, r0
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7fe fa73 	bl	8001990 <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE6_M_ptrEv>
 80034aa:	4602      	mov	r2, r0
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	6013      	str	r3, [r2, #0]
	if (__old_p)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d007      	beq.n	80034c6 <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7fe fb49 	bl	8001b4e <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE10_M_deleterEv>
 80034bc:	4603      	mov	r3, r0
 80034be:	68f9      	ldr	r1, [r7, #12]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fe fa8a 	bl	80019da <_ZNKSt14default_deleteI12PayloadClassEclEPS0_>
      }
 80034c6:	bf00      	nop
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b084      	sub	sp, #16
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fe fa5a 	bl	8001990 <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE6_M_ptrEv>
 80034dc:	4603      	mov	r3, r0
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7fe fa54 	bl	8001990 <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE6_M_ptrEv>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2200      	movs	r2, #0
 80034ec:	601a      	str	r2, [r3, #0]
	return __p;
 80034ee:	68fb      	ldr	r3, [r7, #12]
      }
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <_ZSt7forwardISt14default_deleteI12PayloadClassEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4618      	mov	r0, r3
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <_ZSt7forwardIRPcEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4618      	mov	r0, r3
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4618      	mov	r0, r3
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
	...

0800353c <_ZN12PayloadClassC1IcEEPT_h>:
		PayloadClass(T* struct_or_plain_type_data, uint8_t data_size): _data_size(data_size), _data(new uint8_t[data_size])
 800353c:	b590      	push	{r4, r7, lr}
 800353e:	b087      	sub	sp, #28
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	4613      	mov	r3, r2
 8003548:	71fb      	strb	r3, [r7, #7]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4618      	mov	r0, r3
 800354e:	f7fd fd49 	bl	8000fe4 <_ZN11AbstractMsgC1Ev>
 8003552:	4a18      	ldr	r2, [pc, #96]	; (80035b4 <_ZN12PayloadClassC1IcEEPT_h+0x78>)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	79fa      	ldrb	r2, [r7, #7]
 800355c:	711a      	strb	r2, [r3, #4]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f103 0408 	add.w	r4, r3, #8
 8003564:	79fb      	ldrb	r3, [r7, #7]
 8003566:	4618      	mov	r0, r3
 8003568:	f005 fa6d 	bl	8008a46 <_Znaj>
 800356c:	4603      	mov	r3, r0
 800356e:	4619      	mov	r1, r3
 8003570:	4620      	mov	r0, r4
 8003572:	f7fe f8c2 	bl	80016fa <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
			uint8_t* data_ptr = (uint8_t*) struct_or_plain_type_data;
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	613b      	str	r3, [r7, #16]
			for( uint8_t i = 0; i < _data_size; i ++)
 800357a:	2300      	movs	r3, #0
 800357c:	75fb      	strb	r3, [r7, #23]
 800357e:	e00f      	b.n	80035a0 <_ZN12PayloadClassC1IcEEPT_h+0x64>
				_data[i] = data_ptr[i];
 8003580:	7dfb      	ldrb	r3, [r7, #23]
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	18d4      	adds	r4, r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	3308      	adds	r3, #8
 800358a:	7dfa      	ldrb	r2, [r7, #23]
 800358c:	4611      	mov	r1, r2
 800358e:	4618      	mov	r0, r3
 8003590:	f7fe f8e1 	bl	8001756 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 8003594:	4603      	mov	r3, r0
 8003596:	7822      	ldrb	r2, [r4, #0]
 8003598:	701a      	strb	r2, [r3, #0]
			for( uint8_t i = 0; i < _data_size; i ++)
 800359a:	7dfb      	ldrb	r3, [r7, #23]
 800359c:	3301      	adds	r3, #1
 800359e:	75fb      	strb	r3, [r7, #23]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	791b      	ldrb	r3, [r3, #4]
 80035a4:	7dfa      	ldrb	r2, [r7, #23]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d3ea      	bcc.n	8003580 <_ZN12PayloadClassC1IcEEPT_h+0x44>
		};
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4618      	mov	r0, r3
 80035ae:	371c      	adds	r7, #28
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd90      	pop	{r4, r7, pc}
 80035b4:	0800ba00 	.word	0x0800ba00

080035b8 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE7_M_initEv>:
      _M_init() _GLIBCXX_NOEXCEPT
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
      { this->_M_impl._M_node._M_init(); }
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fd fcaa 	bl	8000f1c <_ZNSt8__detail17_List_node_header7_M_initEv>
 80035c8:	bf00      	nop
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>:
      operator=(__shared_ptr&& __r) noexcept
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
	__shared_ptr(std::move(__r)).swap(*this);
 80035da:	6838      	ldr	r0, [r7, #0]
 80035dc:	f000 f96f 	bl	80038be <_ZSt4moveIRSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>
 80035e0:	4602      	mov	r2, r0
 80035e2:	f107 0308 	add.w	r3, r7, #8
 80035e6:	4611      	mov	r1, r2
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 f973 	bl	80038d4 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 80035ee:	f107 0308 	add.w	r3, r7, #8
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 f98b 	bl	8003910 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>
 80035fa:	f107 0308 	add.w	r3, r7, #8
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fd fdef 	bl	80011e2 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 8003604:	687b      	ldr	r3, [r7, #4]
      }
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4618      	mov	r0, r3
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE5resetEPh>:
      void reset(pointer __p) noexcept
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7fe f967 	bl	8001902 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 8003634:	4603      	mov	r3, r0
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7fe f961 	bl	8001902 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 8003640:	4602      	mov	r2, r0
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	6013      	str	r3, [r2, #0]
	if (__old_p)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d007      	beq.n	800365c <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE5resetEPh+0x38>
	  _M_deleter()(__old_p);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7fe fa3d 	bl	8001acc <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE10_M_deleterEv>
 8003652:	4603      	mov	r3, r0
 8003654:	68f9      	ldr	r1, [r7, #12]
 8003656:	4618      	mov	r0, r3
 8003658:	f7fe f96d 	bl	8001936 <_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS0_E5valueEvE4typeEPS5_>
      }
 800365c:	bf00      	nop
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <_ZNSt14_List_iteratorISt10shared_ptrI11AbstractMsgEEC1EPNSt8__detail15_List_node_baseE>:
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4618      	mov	r0, r3
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_dec_sizeEj>:
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	6039      	str	r1, [r7, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	1ad2      	subs	r2, r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	609a      	str	r2, [r3, #8]
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <_ZNKSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 f945 	bl	800393e <_ZSt3getILj0EJP12PayloadClassSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 80036b4:	4603      	mov	r3, r0
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4618      	mov	r0, r3
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <_ZN9__gnu_cxx13new_allocatorI11HeaderClassEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4618      	mov	r0, r3
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <_ZN9__gnu_cxx13new_allocatorI11HeaderClassED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4618      	mov	r0, r3
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <_ZNSt10shared_ptrI11HeaderClassEC1ISaIS0_EJRKhjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 80036ec:	b5b0      	push	{r4, r5, r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
 80036f8:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 80036fa:	68fc      	ldr	r4, [r7, #12]
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f7ff fd4d 	bl	800319c <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8003702:	4605      	mov	r5, r0
 8003704:	6838      	ldr	r0, [r7, #0]
 8003706:	f7ff fbab 	bl	8002e60 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800370a:	4603      	mov	r3, r0
 800370c:	462a      	mov	r2, r5
 800370e:	68b9      	ldr	r1, [r7, #8]
 8003710:	4620      	mov	r0, r4
 8003712:	f000 f921 	bl	8003958 <_ZNSt12__shared_ptrI11HeaderClassLN9__gnu_cxx12_Lock_policyE0EEC1ISaIS0_EJRKhjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bdb0      	pop	{r4, r5, r7, pc}

08003720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	601a      	str	r2, [r3, #0]
      }
 800373e:	bf00      	nop
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <_ZSt7forwardISt10shared_ptrI11AbstractMsgEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4618      	mov	r0, r3
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE14_M_create_nodeIJS3_EEEPSt10_List_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8003760:	b590      	push	{r4, r7, lr}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
	  auto __p = this->_M_get_node();
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4618      	mov	r0, r3
 800376e:	f000 f91a 	bl	80039a6 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_get_nodeEv>
 8003772:	6178      	str	r0, [r7, #20]
	  auto& __alloc = _M_get_Node_allocator();
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4618      	mov	r0, r3
 8003778:	f7fe fa0f 	bl	8001b9a <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE21_M_get_Node_allocatorEv>
 800377c:	6138      	str	r0, [r7, #16]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 800377e:	f107 0308 	add.w	r3, r7, #8
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	6939      	ldr	r1, [r7, #16]
 8003786:	4618      	mov	r0, r3
 8003788:	f000 f91b 	bl	80039c2 <_ZNSt15__allocated_ptrISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEEC1ERS5_PS4_>
	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
 800378c:	6978      	ldr	r0, [r7, #20]
 800378e:	f7fe f9f6 	bl	8001b7e <_ZNSt10_List_nodeISt10shared_ptrI11AbstractMsgEE9_M_valptrEv>
 8003792:	4604      	mov	r4, r0
 8003794:	6838      	ldr	r0, [r7, #0]
 8003796:	f7ff ffd8 	bl	800374a <_ZSt7forwardISt10shared_ptrI11AbstractMsgEEOT_RNSt16remove_referenceIS3_E4typeE>
 800379a:	4603      	mov	r3, r0
 800379c:	461a      	mov	r2, r3
 800379e:	4621      	mov	r1, r4
 80037a0:	6938      	ldr	r0, [r7, #16]
 80037a2:	f000 f937 	bl	8003a14 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE9constructIS3_JS3_EEEvRS5_PT_DpOT0_>
	  __guard = nullptr;
 80037a6:	f107 0308 	add.w	r3, r7, #8
 80037aa:	2100      	movs	r1, #0
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 f944 	bl	8003a3a <_ZNSt15__allocated_ptrISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEEaSEDn>
	  return __p;
 80037b2:	697c      	ldr	r4, [r7, #20]
	}
 80037b4:	f107 0308 	add.w	r3, r7, #8
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 f916 	bl	80039ea <_ZNSt15__allocated_ptrISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEED1Ev>
	  return __p;
 80037be:	4623      	mov	r3, r4
	}
 80037c0:	4618      	mov	r0, r3
 80037c2:	371c      	adds	r7, #28
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd90      	pop	{r4, r7, pc}

080037c8 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_inc_sizeEj>:
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	441a      	add	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	609a      	str	r2, [r3, #8]
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <_ZN9__gnu_cxx13new_allocatorI12PayloadClassEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4618      	mov	r0, r3
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <_ZN9__gnu_cxx13new_allocatorI12PayloadClassED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4618      	mov	r0, r3
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <_ZNSt10shared_ptrI12PayloadClassEC1ISaIS0_EJRPKcjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8003816:	b5b0      	push	{r4, r5, r7, lr}
 8003818:	b084      	sub	sp, #16
 800381a:	af00      	add	r7, sp, #0
 800381c:	60f8      	str	r0, [r7, #12]
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	607a      	str	r2, [r7, #4]
 8003822:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 8003824:	68fc      	ldr	r4, [r7, #12]
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7ff fd56 	bl	80032d8 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800382c:	4605      	mov	r5, r0
 800382e:	6838      	ldr	r0, [r7, #0]
 8003830:	f7ff fb16 	bl	8002e60 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003834:	4603      	mov	r3, r0
 8003836:	462a      	mov	r2, r5
 8003838:	68b9      	ldr	r1, [r7, #8]
 800383a:	4620      	mov	r0, r4
 800383c:	f000 f90c 	bl	8003a58 <_ZNSt12__shared_ptrI12PayloadClassLN9__gnu_cxx12_Lock_policyE0EEC1ISaIS0_EJRPKcjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bdb0      	pop	{r4, r5, r7, pc}

0800384a <_ZNKSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_get_sizeEv>:
      size_t _M_get_size() const { return _M_impl._M_node._M_size; }
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	4618      	mov	r0, r3
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <_ZNSt10shared_ptrI12PayloadClassEC1ISaIS0_EJPfjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8003862:	b5b0      	push	{r4, r5, r7, lr}
 8003864:	b084      	sub	sp, #16
 8003866:	af00      	add	r7, sp, #0
 8003868:	60f8      	str	r0, [r7, #12]
 800386a:	60b9      	str	r1, [r7, #8]
 800386c:	607a      	str	r2, [r7, #4]
 800386e:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 8003870:	68fc      	ldr	r4, [r7, #12]
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff fd8a 	bl	800338c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8003878:	4605      	mov	r5, r0
 800387a:	6838      	ldr	r0, [r7, #0]
 800387c:	f7ff faf0 	bl	8002e60 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003880:	4603      	mov	r3, r0
 8003882:	462a      	mov	r2, r5
 8003884:	68b9      	ldr	r1, [r7, #8]
 8003886:	4620      	mov	r0, r4
 8003888:	f000 f90d 	bl	8003aa6 <_ZNSt12__shared_ptrI12PayloadClassLN9__gnu_cxx12_Lock_policyE0EEC1ISaIS0_EJPfjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bdb0      	pop	{r4, r5, r7, pc}

08003896 <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8003896:	b580      	push	{r7, lr}
 8003898:	b082      	sub	sp, #8
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	6039      	str	r1, [r7, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fd ff75 	bl	8001792 <_ZNSt5tupleIJP12PayloadClassSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f7fe f871 	bl	8001990 <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE6_M_ptrEv>
 80038ae:	4602      	mov	r2, r0
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <_ZSt4moveIRSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4618      	mov	r0, r3
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	3304      	adds	r3, #4
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7fe f97c 	bl	8001be8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	1d1a      	adds	r2, r3, #4
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	3304      	adds	r3, #4
 80038f8:	4619      	mov	r1, r3
 80038fa:	4610      	mov	r0, r2
 80038fc:	f7ff ff10 	bl	8003720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]
      }
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4618      	mov	r0, r3
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>:
      use_count() const noexcept
      { return _M_refcount._M_get_use_count(); }

      /// Exchange both the owned pointer and the stored pointer.
      void
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
      {
	std::swap(_M_ptr, __other._M_ptr);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	4611      	mov	r1, r2
 8003920:	4618      	mov	r0, r3
 8003922:	f000 f8f2 	bl	8003b0a <_ZSt4swapIP11AbstractMsgENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	_M_refcount._M_swap(__other._M_refcount);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	1d1a      	adds	r2, r3, #4
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	3304      	adds	r3, #4
 800392e:	4619      	mov	r1, r3
 8003930:	4610      	mov	r0, r2
 8003932:	f7ff fef5 	bl	8003720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 8003936:	bf00      	nop
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <_ZSt3getILj0EJP12PayloadClassSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800393e:	b580      	push	{r7, lr}
 8003940:	b082      	sub	sp, #8
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4618      	mov	r0, r3
 800394a:	f000 f8fd 	bl	8003b48 <_ZSt12__get_helperILj0EP12PayloadClassJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800394e:	4603      	mov	r3, r0
 8003950:	4618      	mov	r0, r3
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <_ZNSt12__shared_ptrI11HeaderClassLN9__gnu_cxx12_Lock_policyE0EEC1ISaIS0_EJRKhjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
      /// @}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8003958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800395a:	b087      	sub	sp, #28
 800395c:	af02      	add	r7, sp, #8
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	1d1c      	adds	r4, r3, #4
 8003970:	68fd      	ldr	r5, [r7, #12]
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7ff fc12 	bl	800319c <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8003978:	4606      	mov	r6, r0
 800397a:	6838      	ldr	r0, [r7, #0]
 800397c:	f7ff fa70 	bl	8002e60 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003980:	4603      	mov	r3, r0
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	4633      	mov	r3, r6
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	4629      	mov	r1, r5
 800398a:	4620      	mov	r0, r4
 800398c:	f000 f8e8 	bl	8003b60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I11HeaderClassSaIS4_EJRKhjEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4619      	mov	r1, r3
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 f941 	bl	8003c1e <_ZNSt12__shared_ptrI11HeaderClassLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4618      	mov	r0, r3
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039a6 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_get_nodeEv>:
      _M_get_node()
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b082      	sub	sp, #8
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
      { return _Node_alloc_traits::allocate(_M_impl, 1); }
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2101      	movs	r1, #1
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 f93e 	bl	8003c34 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE8allocateERS5_j>
 80039b8:	4603      	mov	r3, r0
 80039ba:	4618      	mov	r0, r3
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <_ZNSt15__allocated_ptrISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEEC1ERS5_PS4_>:
    {
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b084      	sub	sp, #16
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	60f8      	str	r0, [r7, #12]
 80039ca:	60b9      	str	r1, [r7, #8]
 80039cc:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80039ce:	68b8      	ldr	r0, [r7, #8]
 80039d0:	f000 f93f 	bl	8003c52 <_ZSt11__addressofISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEEPT_RS6_>
 80039d4:	4602      	mov	r2, r0
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	605a      	str	r2, [r3, #4]
      { }
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <_ZNSt15__allocated_ptrISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b082      	sub	sp, #8
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
      {
	if (_M_ptr != nullptr)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d007      	beq.n	8003a0a <_ZNSt15__allocated_ptrISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6818      	ldr	r0, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	4619      	mov	r1, r3
 8003a06:	f7fe f96c 	bl	8001ce2 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE10deallocateERS5_PS4_j>
      }
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE9constructIS3_JS3_EEEvRS5_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff fe92 	bl	800374a <_ZSt7forwardISt10shared_ptrI11AbstractMsgEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003a26:	4603      	mov	r3, r0
 8003a28:	461a      	mov	r2, r3
 8003a2a:	68b9      	ldr	r1, [r7, #8]
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f000 f91b 	bl	8003c68 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE9constructIS4_JS4_EEEvPT_DpOT0_>
	}
 8003a32:	bf00      	nop
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <_ZNSt15__allocated_ptrISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEEaSEDn>:

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
 8003a42:	6039      	str	r1, [r7, #0]
      {
	_M_ptr = nullptr;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	605a      	str	r2, [r3, #4]
	return *this;
 8003a4a:	687b      	ldr	r3, [r7, #4]
      }
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <_ZNSt12__shared_ptrI12PayloadClassLN9__gnu_cxx12_Lock_policyE0EEC1ISaIS0_EJRPKcjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8003a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a5a:	b087      	sub	sp, #28
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
 8003a64:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	1d1c      	adds	r4, r3, #4
 8003a70:	68fd      	ldr	r5, [r7, #12]
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7ff fc30 	bl	80032d8 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8003a78:	4606      	mov	r6, r0
 8003a7a:	6838      	ldr	r0, [r7, #0]
 8003a7c:	f7ff f9f0 	bl	8002e60 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003a80:	4603      	mov	r3, r0
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	4633      	mov	r3, r6
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	4629      	mov	r1, r5
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	f000 f904 	bl	8003c98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I12PayloadClassSaIS4_EJRPKcjEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4619      	mov	r1, r3
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 f95d 	bl	8003d56 <_ZNSt12__shared_ptrI12PayloadClassLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003aa6 <_ZNSt12__shared_ptrI12PayloadClassLN9__gnu_cxx12_Lock_policyE0EEC1ISaIS0_EJPfjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8003aa6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aa8:	b087      	sub	sp, #28
 8003aaa:	af02      	add	r7, sp, #8
 8003aac:	60f8      	str	r0, [r7, #12]
 8003aae:	60b9      	str	r1, [r7, #8]
 8003ab0:	607a      	str	r2, [r7, #4]
 8003ab2:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	1d1c      	adds	r4, r3, #4
 8003abe:	68fd      	ldr	r5, [r7, #12]
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f7ff fc63 	bl	800338c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8003ac6:	4606      	mov	r6, r0
 8003ac8:	6838      	ldr	r0, [r7, #0]
 8003aca:	f7ff f9c9 	bl	8002e60 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	4633      	mov	r3, r6
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	4629      	mov	r1, r5
 8003ad8:	4620      	mov	r0, r4
 8003ada:	f000 f947 	bl	8003d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I12PayloadClassSaIS4_EJPfjEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f000 f936 	bl	8003d56 <_ZNSt12__shared_ptrI12PayloadClassLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4618      	mov	r0, r3
 8003aee:	3714      	adds	r7, #20
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003af4 <_ZSt4moveIRP11AbstractMsgEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4618      	mov	r0, r3
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <_ZSt4swapIP11AbstractMsgENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b084      	sub	sp, #16
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7ff ffed 	bl	8003af4 <_ZSt4moveIRP11AbstractMsgEONSt16remove_referenceIT_E4typeEOS4_>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8003b20:	6838      	ldr	r0, [r7, #0]
 8003b22:	f7ff ffe7 	bl	8003af4 <_ZSt4moveIRP11AbstractMsgEONSt16remove_referenceIT_E4typeEOS4_>
 8003b26:	4603      	mov	r3, r0
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8003b2e:	f107 030c 	add.w	r3, r7, #12
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7ff ffde 	bl	8003af4 <_ZSt4moveIRP11AbstractMsgEONSt16remove_referenceIT_E4typeEOS4_>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	601a      	str	r2, [r3, #0]
    }
 8003b40:	bf00      	nop
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <_ZSt12__get_helperILj0EP12PayloadClassJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f96a 	bl	8003e2a <_ZNSt11_Tuple_implILj0EJP12PayloadClassSt14default_deleteIS0_EEE7_M_headERKS4_>
 8003b56:	4603      	mov	r3, r0
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I11HeaderClassSaIS4_EJRKhjEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 8003b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b64:	b08a      	sub	sp, #40	; 0x28
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	60f8      	str	r0, [r7, #12]
 8003b6a:	60b9      	str	r1, [r7, #8]
 8003b6c:	607a      	str	r2, [r7, #4]
 8003b6e:	603b      	str	r3, [r7, #0]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	f107 0318 	add.w	r3, r7, #24
 8003b76:	4611      	mov	r1, r2
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 f963 	bl	8003e44 <_ZNSaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEEC1IS0_EERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 8003b7e:	f107 0310 	add.w	r3, r7, #16
 8003b82:	f107 0218 	add.w	r2, r7, #24
 8003b86:	4611      	mov	r1, r2
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 f974 	bl	8003e76 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 8003b8e:	f107 0310 	add.w	r3, r7, #16
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 f997 	bl	8003ec6 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 8003b98:	6278      	str	r0, [r7, #36]	; 0x24
	  auto __pi = ::new (__mem)
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	f107 031c 	add.w	r3, r7, #28
 8003ba0:	4611      	mov	r1, r2
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 f99d 	bl	8003ee2 <_ZNSaI11HeaderClassEC1ERKS0_>
 8003ba8:	f107 051c 	add.w	r5, r7, #28
	    _Sp_cp_type(__a._M_a, std::forward<_Args>(__args)...);
 8003bac:	6838      	ldr	r0, [r7, #0]
 8003bae:	f7ff faf5 	bl	800319c <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8003bb2:	4606      	mov	r6, r0
 8003bb4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003bb6:	f7ff f953 	bl	8002e60 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003bba:	4680      	mov	r8, r0
	  auto __pi = ::new (__mem)
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	2014      	movs	r0, #20
 8003bc2:	f7fe fa17 	bl	8001ff4 <_ZnwjPv>
 8003bc6:	4604      	mov	r4, r0
 8003bc8:	4643      	mov	r3, r8
 8003bca:	4632      	mov	r2, r6
 8003bcc:	4629      	mov	r1, r5
 8003bce:	4620      	mov	r0, r4
 8003bd0:	f000 f9ae 	bl	8003f30 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJRKhjEEES1_DpOT_>
 8003bd4:	623c      	str	r4, [r7, #32]
 8003bd6:	f107 031c 	add.w	r3, r7, #28
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff fad2 	bl	8003184 <_ZNSaI11HeaderClassED1Ev>
	  __guard = nullptr;
 8003be0:	f107 0310 	add.w	r3, r7, #16
 8003be4:	2100      	movs	r1, #0
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 f9dc 	bl	8003fa4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a3a      	ldr	r2, [r7, #32]
 8003bf0:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 8003bf2:	6a38      	ldr	r0, [r7, #32]
 8003bf4:	f000 f9e5 	bl	8003fc2 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	601a      	str	r2, [r3, #0]
	}
 8003bfe:	f107 0310 	add.w	r3, r7, #16
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 f94a 	bl	8003e9c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8003c08:	f107 0318 	add.w	r3, r7, #24
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 f926 	bl	8003e5e <_ZNSaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4618      	mov	r0, r3
 8003c16:	3728      	adds	r7, #40	; 0x28
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003c1e <_ZNSt12__shared_ptrI11HeaderClassLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	6039      	str	r1, [r7, #0]
	{ }
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE8allocateERS5_j>:
      allocate(allocator_type& __a, size_type __n)
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003c3e:	2200      	movs	r2, #0
 8003c40:	6839      	ldr	r1, [r7, #0]
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f9d7 	bl	8003ff6 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE8allocateEjPKv>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <_ZSt11__addressofISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE9constructIS4_JS4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8003c68:	b590      	push	{r4, r7, lr}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f7ff fd68 	bl	800374a <_ZSt7forwardISt10shared_ptrI11AbstractMsgEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003c7a:	4604      	mov	r4, r0
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	4619      	mov	r1, r3
 8003c80:	2008      	movs	r0, #8
 8003c82:	f7fe f9b7 	bl	8001ff4 <_ZnwjPv>
 8003c86:	4603      	mov	r3, r0
 8003c88:	4621      	mov	r1, r4
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 f9dc 	bl	8004048 <_ZNSt10shared_ptrI11AbstractMsgEC1EOS1_>
 8003c90:	bf00      	nop
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd90      	pop	{r4, r7, pc}

08003c98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I12PayloadClassSaIS4_EJRPKcjEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 8003c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c9c:	b08a      	sub	sp, #40	; 0x28
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	60f8      	str	r0, [r7, #12]
 8003ca2:	60b9      	str	r1, [r7, #8]
 8003ca4:	607a      	str	r2, [r7, #4]
 8003ca6:	603b      	str	r3, [r7, #0]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	f107 0318 	add.w	r3, r7, #24
 8003cae:	4611      	mov	r1, r2
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 f9dc 	bl	800406e <_ZNSaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEEC1IS0_EERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 8003cb6:	f107 0310 	add.w	r3, r7, #16
 8003cba:	f107 0218 	add.w	r2, r7, #24
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 f9ed 	bl	80040a0 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 8003cc6:	f107 0310 	add.w	r3, r7, #16
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 fa10 	bl	80040f0 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 8003cd0:	6278      	str	r0, [r7, #36]	; 0x24
	  auto __pi = ::new (__mem)
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	f107 031c 	add.w	r3, r7, #28
 8003cd8:	4611      	mov	r1, r2
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 fa16 	bl	800410c <_ZNSaI12PayloadClassEC1ERKS0_>
 8003ce0:	f107 051c 	add.w	r5, r7, #28
	    _Sp_cp_type(__a._M_a, std::forward<_Args>(__args)...);
 8003ce4:	6838      	ldr	r0, [r7, #0]
 8003ce6:	f7ff faf7 	bl	80032d8 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8003cea:	4606      	mov	r6, r0
 8003cec:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003cee:	f7ff f8b7 	bl	8002e60 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003cf2:	4680      	mov	r8, r0
	  auto __pi = ::new (__mem)
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	2018      	movs	r0, #24
 8003cfa:	f7fe f97b 	bl	8001ff4 <_ZnwjPv>
 8003cfe:	4604      	mov	r4, r0
 8003d00:	4643      	mov	r3, r8
 8003d02:	4632      	mov	r2, r6
 8003d04:	4629      	mov	r1, r5
 8003d06:	4620      	mov	r0, r4
 8003d08:	f000 fa26 	bl	8004158 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcjEEES1_DpOT_>
 8003d0c:	623c      	str	r4, [r7, #32]
 8003d0e:	f107 031c 	add.w	r3, r7, #28
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff fad4 	bl	80032c0 <_ZNSaI12PayloadClassED1Ev>
	  __guard = nullptr;
 8003d18:	f107 0310 	add.w	r3, r7, #16
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 fa54 	bl	80041cc <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6a3a      	ldr	r2, [r7, #32]
 8003d28:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 8003d2a:	6a38      	ldr	r0, [r7, #32]
 8003d2c:	f000 fa5d 	bl	80041ea <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8003d30:	4602      	mov	r2, r0
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	601a      	str	r2, [r3, #0]
	}
 8003d36:	f107 0310 	add.w	r3, r7, #16
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 f9c3 	bl	80040c6 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8003d40:	f107 0318 	add.w	r3, r7, #24
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 f99f 	bl	8004088 <_ZNSaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3728      	adds	r7, #40	; 0x28
 8003d50:	46bd      	mov	sp, r7
 8003d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003d56 <_ZNSt12__shared_ptrI12PayloadClassLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8003d56:	b480      	push	{r7}
 8003d58:	b083      	sub	sp, #12
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
 8003d5e:	6039      	str	r1, [r7, #0]
	{ }
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I12PayloadClassSaIS4_EJPfjEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 8003d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d70:	b08a      	sub	sp, #40	; 0x28
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	607a      	str	r2, [r7, #4]
 8003d7a:	603b      	str	r3, [r7, #0]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	f107 0318 	add.w	r3, r7, #24
 8003d82:	4611      	mov	r1, r2
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 f972 	bl	800406e <_ZNSaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEEC1IS0_EERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 8003d8a:	f107 0310 	add.w	r3, r7, #16
 8003d8e:	f107 0218 	add.w	r2, r7, #24
 8003d92:	4611      	mov	r1, r2
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 f983 	bl	80040a0 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 8003d9a:	f107 0310 	add.w	r3, r7, #16
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 f9a6 	bl	80040f0 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 8003da4:	6278      	str	r0, [r7, #36]	; 0x24
	  auto __pi = ::new (__mem)
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	f107 031c 	add.w	r3, r7, #28
 8003dac:	4611      	mov	r1, r2
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 f9ac 	bl	800410c <_ZNSaI12PayloadClassEC1ERKS0_>
 8003db4:	f107 051c 	add.w	r5, r7, #28
	    _Sp_cp_type(__a._M_a, std::forward<_Args>(__args)...);
 8003db8:	6838      	ldr	r0, [r7, #0]
 8003dba:	f7ff fae7 	bl	800338c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8003dbe:	4606      	mov	r6, r0
 8003dc0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003dc2:	f7ff f84d 	bl	8002e60 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003dc6:	4680      	mov	r8, r0
	  auto __pi = ::new (__mem)
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	4619      	mov	r1, r3
 8003dcc:	2018      	movs	r0, #24
 8003dce:	f7fe f911 	bl	8001ff4 <_ZnwjPv>
 8003dd2:	4604      	mov	r4, r0
 8003dd4:	4643      	mov	r3, r8
 8003dd6:	4632      	mov	r2, r6
 8003dd8:	4629      	mov	r1, r5
 8003dda:	4620      	mov	r0, r4
 8003ddc:	f000 fa14 	bl	8004208 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJPfjEEES1_DpOT_>
 8003de0:	623c      	str	r4, [r7, #32]
 8003de2:	f107 031c 	add.w	r3, r7, #28
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff fa6a 	bl	80032c0 <_ZNSaI12PayloadClassED1Ev>
	  __guard = nullptr;
 8003dec:	f107 0310 	add.w	r3, r7, #16
 8003df0:	2100      	movs	r1, #0
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 f9ea 	bl	80041cc <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6a3a      	ldr	r2, [r7, #32]
 8003dfc:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 8003dfe:	6a38      	ldr	r0, [r7, #32]
 8003e00:	f000 f9f3 	bl	80041ea <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8003e04:	4602      	mov	r2, r0
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	601a      	str	r2, [r3, #0]
	}
 8003e0a:	f107 0310 	add.w	r3, r7, #16
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 f959 	bl	80040c6 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8003e14:	f107 0318 	add.w	r3, r7, #24
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 f935 	bl	8004088 <_ZNSaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	4618      	mov	r0, r3
 8003e22:	3728      	adds	r7, #40	; 0x28
 8003e24:	46bd      	mov	sp, r7
 8003e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003e2a <_ZNSt11_Tuple_implILj0EJP12PayloadClassSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b082      	sub	sp, #8
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 fa21 	bl	800427c <_ZNSt10_Head_baseILj0EP12PayloadClassLb0EE7_M_headERKS2_>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <_ZNSaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEEC1IS0_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 fa1f 	bl	8004292 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEEC1Ev>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4618      	mov	r0, r3
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <_ZNSaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b082      	sub	sp, #8
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 fa1e 	bl	80042a8 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEED1Ev>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    };

  /// Allocate space for a single object using __a
  template<typename _Alloc>
    __allocated_ptr<_Alloc>
    __allocate_guarded(_Alloc& __a)
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b082      	sub	sp, #8
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
 8003e7e:	6039      	str	r1, [r7, #0]
    {
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8003e80:	2101      	movs	r1, #1
 8003e82:	6838      	ldr	r0, [r7, #0]
 8003e84:	f000 fa1b 	bl	80042be <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	6839      	ldr	r1, [r7, #0]
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 fa24 	bl	80042dc <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d007      	beq.n	8003ebc <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6818      	ldr	r0, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	f000 fa24 	bl	8004304 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b082      	sub	sp, #8
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 fa25 	bl	8004322 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	4618      	mov	r0, r3
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <_ZNSaI11HeaderClassEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b082      	sub	sp, #8
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
 8003eea:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8003eec:	6839      	ldr	r1, [r7, #0]
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fa22 	bl	8004338 <_ZN9__gnu_cxx13new_allocatorI11HeaderClassEC1ERKS2_>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <_ZNSt14_Sp_ebo_helperILi0ESaI11HeaderClassELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b082      	sub	sp, #8
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7ff f93c 	bl	8003184 <_ZNSaI11HeaderClassED1Ev>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Alloc>
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b082      	sub	sp, #8
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7ff ffed 	bl	8003efe <_ZNSt14_Sp_ebo_helperILi0ESaI11HeaderClassELb1EED1Ev>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
	...

08003f30 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJRKhjEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 8003f30:	b5b0      	push	{r4, r5, r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
 8003f3c:	603b      	str	r3, [r7, #0]
	: _M_impl(__a)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 fa05 	bl	8004350 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8003f46:	4a16      	ldr	r2, [pc, #88]	; (8003fa0 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJRKhjEEES1_DpOT_+0x70>)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f103 040c 	add.w	r4, r3, #12
 8003f52:	f107 0314 	add.w	r3, r7, #20
 8003f56:	68b9      	ldr	r1, [r7, #8]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff ffc2 	bl	8003ee2 <_ZNSaI11HeaderClassEC1ERKS0_>
 8003f5e:	f107 0314 	add.w	r3, r7, #20
 8003f62:	4619      	mov	r1, r3
 8003f64:	4620      	mov	r0, r4
 8003f66:	f000 fa09 	bl	800437c <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
 8003f6a:	f107 0314 	add.w	r3, r7, #20
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff f908 	bl	8003184 <_ZNSaI11HeaderClassED1Ev>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 f824 	bl	8003fc2 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8003f7a:	4604      	mov	r4, r0
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7ff f90d 	bl	800319c <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8003f82:	4605      	mov	r5, r0
 8003f84:	6838      	ldr	r0, [r7, #0]
 8003f86:	f7fe ff6b 	bl	8002e60 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	462a      	mov	r2, r5
 8003f8e:	4621      	mov	r1, r4
 8003f90:	68b8      	ldr	r0, [r7, #8]
 8003f92:	f000 fa01 	bl	8004398 <_ZNSt16allocator_traitsISaI11HeaderClassEE9constructIS0_JRKhjEEEvRS1_PT_DpOT0_>
	}
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bdb0      	pop	{r4, r5, r7, pc}
 8003fa0:	0800b9e4 	.word	0x0800b9e4

08003fa4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	605a      	str	r2, [r3, #4]
	return *this;
 8003fb4:	687b      	ldr	r3, [r7, #4]
      }
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b082      	sub	sp, #8
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	330c      	adds	r3, #12
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 f9fa 	bl	80043c8 <_ZN9__gnu_cxx16__aligned_bufferI11HeaderClassE6_M_ptrEv>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003fe6:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8003fea:	4618      	mov	r0, r3
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b084      	sub	sp, #16
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	60f8      	str	r0, [r7, #12]
 8003ffe:	60b9      	str	r1, [r7, #8]
 8004000:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f7ff ffeb 	bl	8003fde <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE11_M_max_sizeEv>
 8004008:	4602      	mov	r2, r0
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	4293      	cmp	r3, r2
 800400e:	bf8c      	ite	hi
 8004010:	2301      	movhi	r3, #1
 8004012:	2300      	movls	r3, #0
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	bf14      	ite	ne
 800401a:	2301      	movne	r3, #1
 800401c:	2300      	moveq	r3, #0
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b00      	cmp	r3, #0
 8004022:	d007      	beq.n	8004034 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800402a:	d301      	bcc.n	8004030 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800402c:	f004 fdb5 	bl	8008b9a <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8004030:	f004 fdb0 	bl	8008b94 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	4618      	mov	r0, r3
 800403a:	f004 fcf3 	bl	8008a24 <_Znwj>
 800403e:	4603      	mov	r3, r0
      }
 8004040:	4618      	mov	r0, r3
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <_ZNSt10shared_ptrI11AbstractMsgEC1EOS1_>:
      shared_ptr(shared_ptr&& __r) noexcept
 8004048:	b590      	push	{r4, r7, lr}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
      : __shared_ptr<_Tp>(std::move(__r)) { }
 8004052:	687c      	ldr	r4, [r7, #4]
 8004054:	6838      	ldr	r0, [r7, #0]
 8004056:	f7ff f8fe 	bl	8003256 <_ZSt4moveIRSt10shared_ptrI11AbstractMsgEEONSt16remove_referenceIT_E4typeEOS5_>
 800405a:	4603      	mov	r3, r0
 800405c:	4619      	mov	r1, r3
 800405e:	4620      	mov	r0, r4
 8004060:	f7ff fc38 	bl	80038d4 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4618      	mov	r0, r3
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	bd90      	pop	{r4, r7, pc}

0800406e <_ZNSaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEEC1IS0_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800406e:	b580      	push	{r7, lr}
 8004070:	b082      	sub	sp, #8
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
 8004076:	6039      	str	r1, [r7, #0]
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f9b1 	bl	80043e0 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEEC1Ev>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4618      	mov	r0, r3
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <_ZNSaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f9b0 	bl	80043f6 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEED1Ev>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4618      	mov	r0, r3
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    __allocate_guarded(_Alloc& __a)
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 80040aa:	2101      	movs	r1, #1
 80040ac:	6838      	ldr	r0, [r7, #0]
 80040ae:	f000 f9ad 	bl	800440c <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 80040b2:	4603      	mov	r3, r0
 80040b4:	461a      	mov	r2, r3
 80040b6:	6839      	ldr	r1, [r7, #0]
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f9b6 	bl	800442a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b082      	sub	sp, #8
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d007      	beq.n	80040e6 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6818      	ldr	r0, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	4619      	mov	r1, r3
 80040e2:	f000 f9b6 	bl	8004452 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4618      	mov	r0, r3
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 f9b7 	bl	8004470 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 8004102:	4603      	mov	r3, r0
 8004104:	4618      	mov	r0, r3
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <_ZNSaI12PayloadClassEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8004116:	6839      	ldr	r1, [r7, #0]
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f9b4 	bl	8004486 <_ZN9__gnu_cxx13new_allocatorI12PayloadClassEC1ERKS2_>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4618      	mov	r0, r3
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <_ZNSt14_Sp_ebo_helperILi0ESaI12PayloadClassELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7ff f8c5 	bl	80032c0 <_ZNSaI12PayloadClassED1Ev>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4618      	mov	r0, r3
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Alloc>
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7ff ffed 	bl	8004128 <_ZNSt14_Sp_ebo_helperILi0ESaI12PayloadClassELb1EED1Ev>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4618      	mov	r0, r3
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcjEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 8004158:	b5b0      	push	{r4, r5, r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
 8004164:	603b      	str	r3, [r7, #0]
	: _M_impl(__a)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	4618      	mov	r0, r3
 800416a:	f000 f8f1 	bl	8004350 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800416e:	4a16      	ldr	r2, [pc, #88]	; (80041c8 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcjEEES1_DpOT_+0x70>)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f103 040c 	add.w	r4, r3, #12
 800417a:	f107 0314 	add.w	r3, r7, #20
 800417e:	68b9      	ldr	r1, [r7, #8]
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff ffc3 	bl	800410c <_ZNSaI12PayloadClassEC1ERKS0_>
 8004186:	f107 0314 	add.w	r3, r7, #20
 800418a:	4619      	mov	r1, r3
 800418c:	4620      	mov	r0, r4
 800418e:	f000 f986 	bl	800449e <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
 8004192:	f107 0314 	add.w	r3, r7, #20
 8004196:	4618      	mov	r0, r3
 8004198:	f7ff f892 	bl	80032c0 <_ZNSaI12PayloadClassED1Ev>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f000 f824 	bl	80041ea <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 80041a2:	4604      	mov	r4, r0
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff f897 	bl	80032d8 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80041aa:	4605      	mov	r5, r0
 80041ac:	6838      	ldr	r0, [r7, #0]
 80041ae:	f7fe fe57 	bl	8002e60 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80041b2:	4603      	mov	r3, r0
 80041b4:	462a      	mov	r2, r5
 80041b6:	4621      	mov	r1, r4
 80041b8:	68b8      	ldr	r0, [r7, #8]
 80041ba:	f000 f97e 	bl	80044ba <_ZNSt16allocator_traitsISaI12PayloadClassEE9constructIS0_JRPKcjEEEvRS1_PT_DpOT0_>
	}
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4618      	mov	r0, r3
 80041c2:	3718      	adds	r7, #24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bdb0      	pop	{r4, r5, r7, pc}
 80041c8:	0800b9c8 	.word	0x0800b9c8

080041cc <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	605a      	str	r2, [r3, #4]
	return *this;
 80041dc:	687b      	ldr	r3, [r7, #4]
      }
 80041de:	4618      	mov	r0, r3
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b082      	sub	sp, #8
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	330c      	adds	r3, #12
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 f977 	bl	80044ea <_ZN9__gnu_cxx16__aligned_bufferI12PayloadClassE6_M_ptrEv>
 80041fc:	4603      	mov	r3, r0
 80041fe:	4618      	mov	r0, r3
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
	...

08004208 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJPfjEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 8004208:	b5b0      	push	{r4, r5, r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]
	: _M_impl(__a)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4618      	mov	r0, r3
 800421a:	f000 f899 	bl	8004350 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800421e:	4a16      	ldr	r2, [pc, #88]	; (8004278 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJPfjEEES1_DpOT_+0x70>)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f103 040c 	add.w	r4, r3, #12
 800422a:	f107 0314 	add.w	r3, r7, #20
 800422e:	68b9      	ldr	r1, [r7, #8]
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff ff6b 	bl	800410c <_ZNSaI12PayloadClassEC1ERKS0_>
 8004236:	f107 0314 	add.w	r3, r7, #20
 800423a:	4619      	mov	r1, r3
 800423c:	4620      	mov	r0, r4
 800423e:	f000 f92e 	bl	800449e <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
 8004242:	f107 0314 	add.w	r3, r7, #20
 8004246:	4618      	mov	r0, r3
 8004248:	f7ff f83a 	bl	80032c0 <_ZNSaI12PayloadClassED1Ev>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f7ff ffcc 	bl	80041ea <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8004252:	4604      	mov	r4, r0
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff f899 	bl	800338c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800425a:	4605      	mov	r5, r0
 800425c:	6838      	ldr	r0, [r7, #0]
 800425e:	f7fe fdff 	bl	8002e60 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004262:	4603      	mov	r3, r0
 8004264:	462a      	mov	r2, r5
 8004266:	4621      	mov	r1, r4
 8004268:	68b8      	ldr	r0, [r7, #8]
 800426a:	f000 f94a 	bl	8004502 <_ZNSt16allocator_traitsISaI12PayloadClassEE9constructIS0_JPfjEEEvRS1_PT_DpOT0_>
	}
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	4618      	mov	r0, r3
 8004272:	3718      	adds	r7, #24
 8004274:	46bd      	mov	sp, r7
 8004276:	bdb0      	pop	{r4, r5, r7, pc}
 8004278:	0800b9c8 	.word	0x0800b9c8

0800427c <_ZNSt10_Head_baseILj0EP12PayloadClassLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4618      	mov	r0, r3
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4618      	mov	r0, r3
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4618      	mov	r0, r3
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 80042be:	b580      	push	{r7, lr}
 80042c0:	b082      	sub	sp, #8
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
 80042c6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80042c8:	2200      	movs	r2, #0
 80042ca:	6839      	ldr	r1, [r7, #0]
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f93f 	bl	8004550 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv>
 80042d2:	4603      	mov	r3, r0
 80042d4:	4618      	mov	r0, r3
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80042e8:	68b8      	ldr	r0, [r7, #8]
 80042ea:	f000 f95f 	bl	80045ac <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 80042ee:	4602      	mov	r2, r0
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	605a      	str	r2, [r3, #4]
      { }
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4618      	mov	r0, r3
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	68b9      	ldr	r1, [r7, #8]
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 f954 	bl	80045c2 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE10deallocateEPS5_j>
 800431a:	bf00      	nop
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 800432a:	687b      	ldr	r3, [r7, #4]
    }
 800432c:	4618      	mov	r0, r3
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <_ZN9__gnu_cxx13new_allocatorI11HeaderClassEC1ERKS2_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4618      	mov	r0, r3
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 8004358:	4a07      	ldr	r2, [pc, #28]	; (8004378 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	605a      	str	r2, [r3, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	609a      	str	r2, [r3, #8]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4618      	mov	r0, r3
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	0800ba1c 	.word	0x0800ba1c

0800437c <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
 8004386:	6839      	ldr	r1, [r7, #0]
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f92d 	bl	80045e8 <_ZNSt14_Sp_ebo_helperILi0ESaI11HeaderClassELb1EEC1ERKS1_>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4618      	mov	r0, r3
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <_ZNSt16allocator_traitsISaI11HeaderClassEE9constructIS0_JRKhjEEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8004398:	b590      	push	{r4, r7, lr}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7fe fef8 	bl	800319c <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 80043ac:	4604      	mov	r4, r0
 80043ae:	6838      	ldr	r0, [r7, #0]
 80043b0:	f7fe fd56 	bl	8002e60 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80043b4:	4603      	mov	r3, r0
 80043b6:	4622      	mov	r2, r4
 80043b8:	68b9      	ldr	r1, [r7, #8]
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f922 	bl	8004604 <_ZN9__gnu_cxx13new_allocatorI11HeaderClassE9constructIS1_JRKhjEEEvPT_DpOT0_>
	}
 80043c0:	bf00      	nop
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd90      	pop	{r4, r7, pc}

080043c8 <_ZN9__gnu_cxx16__aligned_bufferI11HeaderClassE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 f938 	bl	8004646 <_ZN9__gnu_cxx16__aligned_bufferI11HeaderClassE7_M_addrEv>
 80043d6:	4603      	mov	r3, r0
 80043d8:	4618      	mov	r0, r3
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4618      	mov	r0, r3
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80043f6:	b480      	push	{r7}
 80043f8:	b083      	sub	sp, #12
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4618      	mov	r0, r3
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004416:	2200      	movs	r2, #0
 8004418:	6839      	ldr	r1, [r7, #0]
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f92c 	bl	8004678 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv>
 8004420:	4603      	mov	r3, r0
 8004422:	4618      	mov	r0, r3
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800442a:	b580      	push	{r7, lr}
 800442c:	b084      	sub	sp, #16
 800442e:	af00      	add	r7, sp, #0
 8004430:	60f8      	str	r0, [r7, #12]
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8004436:	68b8      	ldr	r0, [r7, #8]
 8004438:	f000 f94c 	bl	80046d4 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 800443c:	4602      	mov	r2, r0
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	605a      	str	r2, [r3, #4]
      { }
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004452:	b580      	push	{r7, lr}
 8004454:	b084      	sub	sp, #16
 8004456:	af00      	add	r7, sp, #0
 8004458:	60f8      	str	r0, [r7, #12]
 800445a:	60b9      	str	r1, [r7, #8]
 800445c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	68b9      	ldr	r1, [r7, #8]
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f000 f941 	bl	80046ea <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE10deallocateEPS5_j>
 8004468:	bf00      	nop
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
    __to_address(_Tp* __ptr) noexcept
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
      return __ptr;
 8004478:	687b      	ldr	r3, [r7, #4]
    }
 800447a:	4618      	mov	r0, r3
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <_ZN9__gnu_cxx13new_allocatorI12PayloadClassEC1ERKS2_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8004486:	b480      	push	{r7}
 8004488:	b083      	sub	sp, #12
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
 800448e:	6039      	str	r1, [r7, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4618      	mov	r0, r3
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
 800449e:	b580      	push	{r7, lr}
 80044a0:	b082      	sub	sp, #8
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
 80044a6:	6039      	str	r1, [r7, #0]
 80044a8:	6839      	ldr	r1, [r7, #0]
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f930 	bl	8004710 <_ZNSt14_Sp_ebo_helperILi0ESaI12PayloadClassELb1EEC1ERKS1_>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4618      	mov	r0, r3
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <_ZNSt16allocator_traitsISaI12PayloadClassEE9constructIS0_JRPKcjEEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80044ba:	b590      	push	{r4, r7, lr}
 80044bc:	b085      	sub	sp, #20
 80044be:	af00      	add	r7, sp, #0
 80044c0:	60f8      	str	r0, [r7, #12]
 80044c2:	60b9      	str	r1, [r7, #8]
 80044c4:	607a      	str	r2, [r7, #4]
 80044c6:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f7fe ff05 	bl	80032d8 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80044ce:	4604      	mov	r4, r0
 80044d0:	6838      	ldr	r0, [r7, #0]
 80044d2:	f7fe fcc5 	bl	8002e60 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80044d6:	4603      	mov	r3, r0
 80044d8:	4622      	mov	r2, r4
 80044da:	68b9      	ldr	r1, [r7, #8]
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 f925 	bl	800472c <_ZN9__gnu_cxx13new_allocatorI12PayloadClassE9constructIS1_JRPKcjEEEvPT_DpOT0_>
	}
 80044e2:	bf00      	nop
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd90      	pop	{r4, r7, pc}

080044ea <_ZN9__gnu_cxx16__aligned_bufferI12PayloadClassE6_M_ptrEv>:
      _M_ptr() noexcept
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b082      	sub	sp, #8
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f93b 	bl	800476e <_ZN9__gnu_cxx16__aligned_bufferI12PayloadClassE7_M_addrEv>
 80044f8:	4603      	mov	r3, r0
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <_ZNSt16allocator_traitsISaI12PayloadClassEE9constructIS0_JPfjEEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8004502:	b590      	push	{r4, r7, lr}
 8004504:	b085      	sub	sp, #20
 8004506:	af00      	add	r7, sp, #0
 8004508:	60f8      	str	r0, [r7, #12]
 800450a:	60b9      	str	r1, [r7, #8]
 800450c:	607a      	str	r2, [r7, #4]
 800450e:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7fe ff3b 	bl	800338c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8004516:	4604      	mov	r4, r0
 8004518:	6838      	ldr	r0, [r7, #0]
 800451a:	f7fe fca1 	bl	8002e60 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800451e:	4603      	mov	r3, r0
 8004520:	4622      	mov	r2, r4
 8004522:	68b9      	ldr	r1, [r7, #8]
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 f92d 	bl	8004784 <_ZN9__gnu_cxx13new_allocatorI12PayloadClassE9constructIS1_JPfjEEEvPT_DpOT0_>
	}
 800452a:	bf00      	nop
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	bd90      	pop	{r4, r7, pc}
	...

08004534 <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800453c:	4b03      	ldr	r3, [pc, #12]	; (800454c <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 800453e:	4618      	mov	r0, r3
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	06666666 	.word	0x06666666

08004550 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f7ff ffe9 	bl	8004534 <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE11_M_max_sizeEv>
 8004562:	4602      	mov	r2, r0
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	4293      	cmp	r3, r2
 8004568:	bf8c      	ite	hi
 800456a:	2301      	movhi	r3, #1
 800456c:	2300      	movls	r3, #0
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	bf14      	ite	ne
 8004574:	2301      	movne	r3, #1
 8004576:	2300      	moveq	r3, #0
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d007      	beq.n	800458e <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	4a09      	ldr	r2, [pc, #36]	; (80045a8 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d901      	bls.n	800458a <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8004586:	f004 fb08 	bl	8008b9a <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800458a:	f004 fb03 	bl	8008b94 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4618      	mov	r0, r3
 800459a:	f004 fa43 	bl	8008a24 <_Znwj>
 800459e:	4603      	mov	r3, r0
      }
 80045a0:	4618      	mov	r0, r3
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	0ccccccc 	.word	0x0ccccccc

080045ac <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4618      	mov	r0, r3
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b084      	sub	sp, #16
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	4613      	mov	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4619      	mov	r1, r3
 80045da:	68b8      	ldr	r0, [r7, #8]
 80045dc:	f004 fa1e 	bl	8008a1c <_ZdlPvj>
      }
 80045e0:	bf00      	nop
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <_ZNSt14_Sp_ebo_helperILi0ESaI11HeaderClassELb1EEC1ERKS1_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
 80045f2:	6839      	ldr	r1, [r7, #0]
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f7ff fc74 	bl	8003ee2 <_ZNSaI11HeaderClassEC1ERKS0_>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4618      	mov	r0, r3
 80045fe:	3708      	adds	r7, #8
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <_ZN9__gnu_cxx13new_allocatorI11HeaderClassE9constructIS1_JRKhjEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004604:	b5b0      	push	{r4, r5, r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
 8004610:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7fe fdc2 	bl	800319c <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8004618:	4603      	mov	r3, r0
 800461a:	781c      	ldrb	r4, [r3, #0]
 800461c:	6838      	ldr	r0, [r7, #0]
 800461e:	f7fe fc1f 	bl	8002e60 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004622:	4603      	mov	r3, r0
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	b2dd      	uxtb	r5, r3
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	4619      	mov	r1, r3
 800462c:	2008      	movs	r0, #8
 800462e:	f7fd fce1 	bl	8001ff4 <_ZnwjPv>
 8004632:	4603      	mov	r3, r0
 8004634:	462a      	mov	r2, r5
 8004636:	4621      	mov	r1, r4
 8004638:	4618      	mov	r0, r3
 800463a:	f7fc fce3 	bl	8001004 <_ZN11HeaderClassC1Ehh>
 800463e:	bf00      	nop
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bdb0      	pop	{r4, r5, r7, pc}

08004646 <_ZN9__gnu_cxx16__aligned_bufferI11HeaderClassE7_M_addrEv>:
      _M_addr() noexcept
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 800464e:	687b      	ldr	r3, [r7, #4]
      }
 8004650:	4618      	mov	r0, r3
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004664:	4b03      	ldr	r3, [pc, #12]	; (8004674 <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 8004666:	4618      	mov	r0, r3
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	05555555 	.word	0x05555555

08004678 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f7ff ffe9 	bl	800465c <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE11_M_max_sizeEv>
 800468a:	4602      	mov	r2, r0
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	4293      	cmp	r3, r2
 8004690:	bf8c      	ite	hi
 8004692:	2301      	movhi	r3, #1
 8004694:	2300      	movls	r3, #0
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	bf14      	ite	ne
 800469c:	2301      	movne	r3, #1
 800469e:	2300      	moveq	r3, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d007      	beq.n	80046b6 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	4a09      	ldr	r2, [pc, #36]	; (80046d0 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d901      	bls.n	80046b2 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80046ae:	f004 fa74 	bl	8008b9a <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80046b2:	f004 fa6f 	bl	8008b94 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	4613      	mov	r3, r2
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	4413      	add	r3, r2
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	4618      	mov	r0, r3
 80046c2:	f004 f9af 	bl	8008a24 <_Znwj>
 80046c6:	4603      	mov	r3, r0
      }
 80046c8:	4618      	mov	r0, r3
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	0aaaaaaa 	.word	0x0aaaaaaa

080046d4 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4618      	mov	r0, r3
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b084      	sub	sp, #16
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	60f8      	str	r0, [r7, #12]
 80046f2:	60b9      	str	r1, [r7, #8]
 80046f4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	4613      	mov	r3, r2
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	4413      	add	r3, r2
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	4619      	mov	r1, r3
 8004702:	68b8      	ldr	r0, [r7, #8]
 8004704:	f004 f98a 	bl	8008a1c <_ZdlPvj>
      }
 8004708:	bf00      	nop
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <_ZNSt14_Sp_ebo_helperILi0ESaI12PayloadClassELb1EEC1ERKS1_>:
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
 800471a:	6839      	ldr	r1, [r7, #0]
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f7ff fcf5 	bl	800410c <_ZNSaI12PayloadClassEC1ERKS0_>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4618      	mov	r0, r3
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <_ZN9__gnu_cxx13new_allocatorI12PayloadClassE9constructIS1_JRPKcjEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800472c:	b5b0      	push	{r4, r5, r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
 8004738:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7fe fdcc 	bl	80032d8 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8004740:	4603      	mov	r3, r0
 8004742:	681c      	ldr	r4, [r3, #0]
 8004744:	6838      	ldr	r0, [r7, #0]
 8004746:	f7fe fb8b 	bl	8002e60 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800474a:	4603      	mov	r3, r0
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	b2dd      	uxtb	r5, r3
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	4619      	mov	r1, r3
 8004754:	200c      	movs	r0, #12
 8004756:	f7fd fc4d 	bl	8001ff4 <_ZnwjPv>
 800475a:	4603      	mov	r3, r0
 800475c:	462a      	mov	r2, r5
 800475e:	4621      	mov	r1, r4
 8004760:	4618      	mov	r0, r3
 8004762:	f000 f831 	bl	80047c8 <_ZN12PayloadClassC1IKcEEPT_h>
 8004766:	bf00      	nop
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bdb0      	pop	{r4, r5, r7, pc}

0800476e <_ZN9__gnu_cxx16__aligned_bufferI12PayloadClassE7_M_addrEv>:
      _M_addr() noexcept
 800476e:	b480      	push	{r7}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 8004776:	687b      	ldr	r3, [r7, #4]
      }
 8004778:	4618      	mov	r0, r3
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <_ZN9__gnu_cxx13new_allocatorI12PayloadClassE9constructIS1_JPfjEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004784:	b5b0      	push	{r4, r5, r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
 8004790:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7fe fdfa 	bl	800338c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8004798:	4603      	mov	r3, r0
 800479a:	681c      	ldr	r4, [r3, #0]
 800479c:	6838      	ldr	r0, [r7, #0]
 800479e:	f7fe fb5f 	bl	8002e60 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80047a2:	4603      	mov	r3, r0
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	b2dd      	uxtb	r5, r3
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	4619      	mov	r1, r3
 80047ac:	200c      	movs	r0, #12
 80047ae:	f7fd fc21 	bl	8001ff4 <_ZnwjPv>
 80047b2:	4603      	mov	r3, r0
 80047b4:	462a      	mov	r2, r5
 80047b6:	4621      	mov	r1, r4
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7fe fe0b 	bl	80033d4 <_ZN12PayloadClassC1IfEEPT_h>
 80047be:	bf00      	nop
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080047c8 <_ZN12PayloadClassC1IKcEEPT_h>:
		PayloadClass(T* struct_or_plain_type_data, uint8_t data_size): _data_size(data_size), _data(new uint8_t[data_size])
 80047c8:	b590      	push	{r4, r7, lr}
 80047ca:	b087      	sub	sp, #28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	4613      	mov	r3, r2
 80047d4:	71fb      	strb	r3, [r7, #7]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	4618      	mov	r0, r3
 80047da:	f7fc fc03 	bl	8000fe4 <_ZN11AbstractMsgC1Ev>
 80047de:	4a18      	ldr	r2, [pc, #96]	; (8004840 <_ZN12PayloadClassC1IKcEEPT_h+0x78>)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	79fa      	ldrb	r2, [r7, #7]
 80047e8:	711a      	strb	r2, [r3, #4]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f103 0408 	add.w	r4, r3, #8
 80047f0:	79fb      	ldrb	r3, [r7, #7]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f004 f927 	bl	8008a46 <_Znaj>
 80047f8:	4603      	mov	r3, r0
 80047fa:	4619      	mov	r1, r3
 80047fc:	4620      	mov	r0, r4
 80047fe:	f7fc ff7c 	bl	80016fa <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
			uint8_t* data_ptr = (uint8_t*) struct_or_plain_type_data;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	613b      	str	r3, [r7, #16]
			for( uint8_t i = 0; i < _data_size; i ++)
 8004806:	2300      	movs	r3, #0
 8004808:	75fb      	strb	r3, [r7, #23]
 800480a:	e00f      	b.n	800482c <_ZN12PayloadClassC1IKcEEPT_h+0x64>
				_data[i] = data_ptr[i];
 800480c:	7dfb      	ldrb	r3, [r7, #23]
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	18d4      	adds	r4, r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	3308      	adds	r3, #8
 8004816:	7dfa      	ldrb	r2, [r7, #23]
 8004818:	4611      	mov	r1, r2
 800481a:	4618      	mov	r0, r3
 800481c:	f7fc ff9b 	bl	8001756 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 8004820:	4603      	mov	r3, r0
 8004822:	7822      	ldrb	r2, [r4, #0]
 8004824:	701a      	strb	r2, [r3, #0]
			for( uint8_t i = 0; i < _data_size; i ++)
 8004826:	7dfb      	ldrb	r3, [r7, #23]
 8004828:	3301      	adds	r3, #1
 800482a:	75fb      	strb	r3, [r7, #23]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	791b      	ldrb	r3, [r3, #4]
 8004830:	7dfa      	ldrb	r2, [r7, #23]
 8004832:	429a      	cmp	r2, r3
 8004834:	d3ea      	bcc.n	800480c <_ZN12PayloadClassC1IKcEEPT_h+0x44>
		};
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	4618      	mov	r0, r3
 800483a:	371c      	adds	r7, #28
 800483c:	46bd      	mov	sp, r7
 800483e:	bd90      	pop	{r4, r7, pc}
 8004840:	0800ba00 	.word	0x0800ba00

08004844 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	4a08      	ldr	r2, [pc, #32]	; (8004870 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x2c>)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	330c      	adds	r3, #12
 8004856:	4618      	mov	r0, r3
 8004858:	f7ff fc72 	bl	8004140 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplD1Ev>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4618      	mov	r0, r3
 8004860:	f7fe fbca 	bl	8002ff8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4618      	mov	r0, r3
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	0800b9c8 	.word	0x0800b9c8

08004874 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f7ff ffe1 	bl	8004844 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8004882:	2118      	movs	r1, #24
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f004 f8c9 	bl	8008a1c <_ZdlPvj>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4618      	mov	r0, r3
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8004894:	b590      	push	{r4, r7, lr}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	330c      	adds	r3, #12
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 f8e3 	bl	8004a6c <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 80048a6:	4604      	mov	r4, r0
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7ff fc9e 	bl	80041ea <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 80048ae:	4603      	mov	r3, r0
 80048b0:	4619      	mov	r1, r3
 80048b2:	4620      	mov	r0, r4
 80048b4:	f000 f8e6 	bl	8004a84 <_ZNSt16allocator_traitsISaI12PayloadClassEE7destroyIS0_EEvRS1_PT_>
      }
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd90      	pop	{r4, r7, pc}

080048c0 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	330c      	adds	r3, #12
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 f8cd 	bl	8004a6c <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 80048d2:	4602      	mov	r2, r0
 80048d4:	f107 0314 	add.w	r3, r7, #20
 80048d8:	4611      	mov	r1, r2
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff fbc7 	bl	800406e <_ZNSaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEEC1IS0_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 80048e0:	f107 0114 	add.w	r1, r7, #20
 80048e4:	f107 030c 	add.w	r3, r7, #12
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7ff fd9d 	bl	800442a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7ff ffa7 	bl	8004844 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 80048f6:	f107 030c 	add.w	r3, r7, #12
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7ff fbe3 	bl	80040c6 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8004900:	f107 0314 	add.w	r3, r7, #20
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff fbbf 	bl	8004088 <_ZNSaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800490a:	3718      	adds	r7, #24
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7ff fc65 	bl	80041ea <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8004920:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 8004922:	f7fd fb83 	bl	800202c <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 8004926:	4602      	mov	r2, r0
	    ||
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	4293      	cmp	r3, r2
 800492c:	d006      	beq.n	800493c <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2c>
	    __ti == typeid(_Sp_make_shared_tag)
 800492e:	4909      	ldr	r1, [pc, #36]	; (8004954 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x44>)
 8004930:	6838      	ldr	r0, [r7, #0]
 8004932:	f004 f90d 	bl	8008b50 <_ZNKSt9type_infoeqERKS_>
 8004936:	4603      	mov	r3, r0
	    ||
 8004938:	2b00      	cmp	r3, #0
 800493a:	d001      	beq.n	8004940 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 800493c:	2301      	movs	r3, #1
 800493e:	e000      	b.n	8004942 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x32>
 8004940:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 8004942:	2b00      	cmp	r3, #0
 8004944:	d001      	beq.n	800494a <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	  return __ptr;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	e000      	b.n	800494c <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3c>
	return nullptr;
 800494a:	2300      	movs	r3, #0
      }
 800494c:	4618      	mov	r0, r3
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	0800bb44 	.word	0x0800bb44

08004958 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	4a08      	ldr	r2, [pc, #32]	; (8004984 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x2c>)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	330c      	adds	r3, #12
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff fad3 	bl	8003f16 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplD1Ev>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4618      	mov	r0, r3
 8004974:	f7fe fb40 	bl	8002ff8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4618      	mov	r0, r3
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	0800b9e4 	.word	0x0800b9e4

08004988 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f7ff ffe1 	bl	8004958 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8004996:	2114      	movs	r1, #20
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f004 f83f 	bl	8008a1c <_ZdlPvj>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4618      	mov	r0, r3
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80049a8:	b590      	push	{r4, r7, lr}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	330c      	adds	r3, #12
 80049b4:	4618      	mov	r0, r3
 80049b6:	f000 f872 	bl	8004a9e <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 80049ba:	4604      	mov	r4, r0
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f7ff fb00 	bl	8003fc2 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 80049c2:	4603      	mov	r3, r0
 80049c4:	4619      	mov	r1, r3
 80049c6:	4620      	mov	r0, r4
 80049c8:	f000 f875 	bl	8004ab6 <_ZNSt16allocator_traitsISaI11HeaderClassEE7destroyIS0_EEvRS1_PT_>
      }
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd90      	pop	{r4, r7, pc}

080049d4 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	330c      	adds	r3, #12
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 f85c 	bl	8004a9e <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 80049e6:	4602      	mov	r2, r0
 80049e8:	f107 0314 	add.w	r3, r7, #20
 80049ec:	4611      	mov	r1, r2
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7ff fa28 	bl	8003e44 <_ZNSaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEEC1IS0_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 80049f4:	f107 0114 	add.w	r1, r7, #20
 80049f8:	f107 030c 	add.w	r3, r7, #12
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7ff fc6c 	bl	80042dc <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f7ff ffa7 	bl	8004958 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 8004a0a:	f107 030c 	add.w	r3, r7, #12
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7ff fa44 	bl	8003e9c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8004a14:	f107 0314 	add.w	r3, r7, #20
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7ff fa20 	bl	8003e5e <_ZNSaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8004a1e:	3718      	adds	r7, #24
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7ff fac7 	bl	8003fc2 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8004a34:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 8004a36:	f7fd faf9 	bl	800202c <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 8004a3a:	4602      	mov	r2, r0
	    ||
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d006      	beq.n	8004a50 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2c>
	    __ti == typeid(_Sp_make_shared_tag)
 8004a42:	4909      	ldr	r1, [pc, #36]	; (8004a68 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x44>)
 8004a44:	6838      	ldr	r0, [r7, #0]
 8004a46:	f004 f883 	bl	8008b50 <_ZNKSt9type_infoeqERKS_>
 8004a4a:	4603      	mov	r3, r0
	    ||
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 8004a50:	2301      	movs	r3, #1
 8004a52:	e000      	b.n	8004a56 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x32>
 8004a54:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	  return __ptr;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	e000      	b.n	8004a60 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3c>
	return nullptr;
 8004a5e:	2300      	movs	r3, #0
      }
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	0800bb44 	.word	0x0800bb44

08004a6c <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f82b 	bl	8004ad0 <_ZNSt14_Sp_ebo_helperILi0ESaI12PayloadClassELb1EE6_S_getERS2_>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3708      	adds	r7, #8
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <_ZNSt16allocator_traitsISaI12PayloadClassEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8004a8e:	6839      	ldr	r1, [r7, #0]
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 f828 	bl	8004ae6 <_ZN9__gnu_cxx13new_allocatorI12PayloadClassE7destroyIS1_EEvPT_>
	}
 8004a96:	bf00      	nop
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b082      	sub	sp, #8
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f82b 	bl	8004b02 <_ZNSt14_Sp_ebo_helperILi0ESaI11HeaderClassELb1EE6_S_getERS2_>
 8004aac:	4603      	mov	r3, r0
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <_ZNSt16allocator_traitsISaI11HeaderClassEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b082      	sub	sp, #8
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
 8004abe:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8004ac0:	6839      	ldr	r1, [r7, #0]
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f828 	bl	8004b18 <_ZN9__gnu_cxx13new_allocatorI11HeaderClassE7destroyIS1_EEvPT_>
	}
 8004ac8:	bf00      	nop
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <_ZNSt14_Sp_ebo_helperILi0ESaI12PayloadClassELb1EE6_S_getERS2_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4618      	mov	r0, r3
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <_ZN9__gnu_cxx13new_allocatorI12PayloadClassE7destroyIS1_EEvPT_>:
	destroy(_Up* __p)
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b082      	sub	sp, #8
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
 8004aee:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6838      	ldr	r0, [r7, #0]
 8004af8:	4798      	blx	r3
 8004afa:	bf00      	nop
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <_ZNSt14_Sp_ebo_helperILi0ESaI11HeaderClassELb1EE6_S_getERS2_>:
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <_ZN9__gnu_cxx13new_allocatorI11HeaderClassE7destroyIS1_EEvPT_>:
	destroy(_Up* __p)
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6838      	ldr	r0, [r7, #0]
 8004b2a:	4798      	blx	r3
 8004b2c:	bf00      	nop
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	607b      	str	r3, [r7, #4]
 8004b3e:	4b10      	ldr	r3, [pc, #64]	; (8004b80 <HAL_MspInit+0x4c>)
 8004b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b42:	4a0f      	ldr	r2, [pc, #60]	; (8004b80 <HAL_MspInit+0x4c>)
 8004b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b48:	6453      	str	r3, [r2, #68]	; 0x44
 8004b4a:	4b0d      	ldr	r3, [pc, #52]	; (8004b80 <HAL_MspInit+0x4c>)
 8004b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b52:	607b      	str	r3, [r7, #4]
 8004b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b56:	2300      	movs	r3, #0
 8004b58:	603b      	str	r3, [r7, #0]
 8004b5a:	4b09      	ldr	r3, [pc, #36]	; (8004b80 <HAL_MspInit+0x4c>)
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	4a08      	ldr	r2, [pc, #32]	; (8004b80 <HAL_MspInit+0x4c>)
 8004b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b64:	6413      	str	r3, [r2, #64]	; 0x40
 8004b66:	4b06      	ldr	r3, [pc, #24]	; (8004b80 <HAL_MspInit+0x4c>)
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b6e:	603b      	str	r3, [r7, #0]
 8004b70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004b72:	2007      	movs	r0, #7
 8004b74:	f000 fb9a 	bl	80052ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b78:	bf00      	nop
 8004b7a:	3708      	adds	r7, #8
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40023800 	.word	0x40023800

08004b84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b94:	d115      	bne.n	8004bc2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b96:	2300      	movs	r3, #0
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	4b0c      	ldr	r3, [pc, #48]	; (8004bcc <HAL_TIM_Base_MspInit+0x48>)
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	4a0b      	ldr	r2, [pc, #44]	; (8004bcc <HAL_TIM_Base_MspInit+0x48>)
 8004ba0:	f043 0301 	orr.w	r3, r3, #1
 8004ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ba6:	4b09      	ldr	r3, [pc, #36]	; (8004bcc <HAL_TIM_Base_MspInit+0x48>)
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	201c      	movs	r0, #28
 8004bb8:	f000 fb83 	bl	80052c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004bbc:	201c      	movs	r0, #28
 8004bbe:	f000 fb9c 	bl	80052fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004bc2:	bf00      	nop
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	40023800 	.word	0x40023800

08004bd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b08a      	sub	sp, #40	; 0x28
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bd8:	f107 0314 	add.w	r3, r7, #20
 8004bdc:	2200      	movs	r2, #0
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	605a      	str	r2, [r3, #4]
 8004be2:	609a      	str	r2, [r3, #8]
 8004be4:	60da      	str	r2, [r3, #12]
 8004be6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a4b      	ldr	r2, [pc, #300]	; (8004d1c <HAL_UART_MspInit+0x14c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	f040 8090 	bne.w	8004d14 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	613b      	str	r3, [r7, #16]
 8004bf8:	4b49      	ldr	r3, [pc, #292]	; (8004d20 <HAL_UART_MspInit+0x150>)
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfc:	4a48      	ldr	r2, [pc, #288]	; (8004d20 <HAL_UART_MspInit+0x150>)
 8004bfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c02:	6413      	str	r3, [r2, #64]	; 0x40
 8004c04:	4b46      	ldr	r3, [pc, #280]	; (8004d20 <HAL_UART_MspInit+0x150>)
 8004c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0c:	613b      	str	r3, [r7, #16]
 8004c0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c10:	2300      	movs	r3, #0
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	4b42      	ldr	r3, [pc, #264]	; (8004d20 <HAL_UART_MspInit+0x150>)
 8004c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c18:	4a41      	ldr	r2, [pc, #260]	; (8004d20 <HAL_UART_MspInit+0x150>)
 8004c1a:	f043 0301 	orr.w	r3, r3, #1
 8004c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8004c20:	4b3f      	ldr	r3, [pc, #252]	; (8004d20 <HAL_UART_MspInit+0x150>)
 8004c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	60fb      	str	r3, [r7, #12]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004c2c:	230c      	movs	r3, #12
 8004c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c30:	2302      	movs	r3, #2
 8004c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c34:	2300      	movs	r3, #0
 8004c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004c3c:	2307      	movs	r3, #7
 8004c3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c40:	f107 0314 	add.w	r3, r7, #20
 8004c44:	4619      	mov	r1, r3
 8004c46:	4837      	ldr	r0, [pc, #220]	; (8004d24 <HAL_UART_MspInit+0x154>)
 8004c48:	f000 ff80 	bl	8005b4c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004c4c:	4b36      	ldr	r3, [pc, #216]	; (8004d28 <HAL_UART_MspInit+0x158>)
 8004c4e:	4a37      	ldr	r2, [pc, #220]	; (8004d2c <HAL_UART_MspInit+0x15c>)
 8004c50:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004c52:	4b35      	ldr	r3, [pc, #212]	; (8004d28 <HAL_UART_MspInit+0x158>)
 8004c54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004c58:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c5a:	4b33      	ldr	r3, [pc, #204]	; (8004d28 <HAL_UART_MspInit+0x158>)
 8004c5c:	2240      	movs	r2, #64	; 0x40
 8004c5e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c60:	4b31      	ldr	r3, [pc, #196]	; (8004d28 <HAL_UART_MspInit+0x158>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004c66:	4b30      	ldr	r3, [pc, #192]	; (8004d28 <HAL_UART_MspInit+0x158>)
 8004c68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c6c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c6e:	4b2e      	ldr	r3, [pc, #184]	; (8004d28 <HAL_UART_MspInit+0x158>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c74:	4b2c      	ldr	r3, [pc, #176]	; (8004d28 <HAL_UART_MspInit+0x158>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004c7a:	4b2b      	ldr	r3, [pc, #172]	; (8004d28 <HAL_UART_MspInit+0x158>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004c80:	4b29      	ldr	r3, [pc, #164]	; (8004d28 <HAL_UART_MspInit+0x158>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c86:	4b28      	ldr	r3, [pc, #160]	; (8004d28 <HAL_UART_MspInit+0x158>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004c8c:	4826      	ldr	r0, [pc, #152]	; (8004d28 <HAL_UART_MspInit+0x158>)
 8004c8e:	f000 fb4f 	bl	8005330 <HAL_DMA_Init>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004c98:	f7fc fd1a 	bl	80016d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a22      	ldr	r2, [pc, #136]	; (8004d28 <HAL_UART_MspInit+0x158>)
 8004ca0:	639a      	str	r2, [r3, #56]	; 0x38
 8004ca2:	4a21      	ldr	r2, [pc, #132]	; (8004d28 <HAL_UART_MspInit+0x158>)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004ca8:	4b21      	ldr	r3, [pc, #132]	; (8004d30 <HAL_UART_MspInit+0x160>)
 8004caa:	4a22      	ldr	r2, [pc, #136]	; (8004d34 <HAL_UART_MspInit+0x164>)
 8004cac:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004cae:	4b20      	ldr	r3, [pc, #128]	; (8004d30 <HAL_UART_MspInit+0x160>)
 8004cb0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004cb4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004cb6:	4b1e      	ldr	r3, [pc, #120]	; (8004d30 <HAL_UART_MspInit+0x160>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cbc:	4b1c      	ldr	r3, [pc, #112]	; (8004d30 <HAL_UART_MspInit+0x160>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004cc2:	4b1b      	ldr	r3, [pc, #108]	; (8004d30 <HAL_UART_MspInit+0x160>)
 8004cc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cc8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004cca:	4b19      	ldr	r3, [pc, #100]	; (8004d30 <HAL_UART_MspInit+0x160>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004cd0:	4b17      	ldr	r3, [pc, #92]	; (8004d30 <HAL_UART_MspInit+0x160>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004cd6:	4b16      	ldr	r3, [pc, #88]	; (8004d30 <HAL_UART_MspInit+0x160>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004cdc:	4b14      	ldr	r3, [pc, #80]	; (8004d30 <HAL_UART_MspInit+0x160>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004ce2:	4b13      	ldr	r3, [pc, #76]	; (8004d30 <HAL_UART_MspInit+0x160>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004ce8:	4811      	ldr	r0, [pc, #68]	; (8004d30 <HAL_UART_MspInit+0x160>)
 8004cea:	f000 fb21 	bl	8005330 <HAL_DMA_Init>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8004cf4:	f7fc fcec 	bl	80016d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a0d      	ldr	r2, [pc, #52]	; (8004d30 <HAL_UART_MspInit+0x160>)
 8004cfc:	63da      	str	r2, [r3, #60]	; 0x3c
 8004cfe:	4a0c      	ldr	r2, [pc, #48]	; (8004d30 <HAL_UART_MspInit+0x160>)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004d04:	2200      	movs	r2, #0
 8004d06:	2100      	movs	r1, #0
 8004d08:	2026      	movs	r0, #38	; 0x26
 8004d0a:	f000 fada 	bl	80052c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004d0e:	2026      	movs	r0, #38	; 0x26
 8004d10:	f000 faf3 	bl	80052fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004d14:	bf00      	nop
 8004d16:	3728      	adds	r7, #40	; 0x28
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	40004400 	.word	0x40004400
 8004d20:	40023800 	.word	0x40023800
 8004d24:	40020000 	.word	0x40020000
 8004d28:	20000280 	.word	0x20000280
 8004d2c:	400260a0 	.word	0x400260a0
 8004d30:	200002e0 	.word	0x200002e0
 8004d34:	40026088 	.word	0x40026088

08004d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004d3c:	e7fe      	b.n	8004d3c <NMI_Handler+0x4>

08004d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d42:	e7fe      	b.n	8004d42 <HardFault_Handler+0x4>

08004d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d48:	e7fe      	b.n	8004d48 <MemManage_Handler+0x4>

08004d4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d4e:	e7fe      	b.n	8004d4e <BusFault_Handler+0x4>

08004d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d50:	b480      	push	{r7}
 8004d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d54:	e7fe      	b.n	8004d54 <UsageFault_Handler+0x4>

08004d56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d56:	b480      	push	{r7}
 8004d58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d5a:	bf00      	nop
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d68:	bf00      	nop
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d72:	b480      	push	{r7}
 8004d74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d76:	bf00      	nop
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d84:	f000 f97e 	bl	8005084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d88:	bf00      	nop
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004d90:	4802      	ldr	r0, [pc, #8]	; (8004d9c <DMA1_Stream5_IRQHandler+0x10>)
 8004d92:	f000 fc65 	bl	8005660 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004d96:	bf00      	nop
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	200002e0 	.word	0x200002e0

08004da0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004da4:	4802      	ldr	r0, [pc, #8]	; (8004db0 <DMA1_Stream6_IRQHandler+0x10>)
 8004da6:	f000 fc5b 	bl	8005660 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004daa:	bf00      	nop
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	20000280 	.word	0x20000280

08004db4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004db8:	4802      	ldr	r0, [pc, #8]	; (8004dc4 <TIM2_IRQHandler+0x10>)
 8004dba:	f001 ff87 	bl	8006ccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004dbe:	bf00      	nop
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	200001f0 	.word	0x200001f0

08004dc8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004dcc:	4802      	ldr	r0, [pc, #8]	; (8004dd8 <USART2_IRQHandler+0x10>)
 8004dce:	f002 fcc7 	bl	8007760 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004dd2:	bf00      	nop
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20000238 	.word	0x20000238

08004ddc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
  return 1;
 8004de0:	2301      	movs	r3, #1
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <_kill>:

int _kill(int pid, int sig)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004df6:	f004 fdd3 	bl	80099a0 <__errno>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2216      	movs	r2, #22
 8004dfe:	601a      	str	r2, [r3, #0]
  return -1;
 8004e00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <_exit>:

void _exit (int status)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004e14:	f04f 31ff 	mov.w	r1, #4294967295
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f7ff ffe7 	bl	8004dec <_kill>
  while (1) {}    /* Make sure we hang here */
 8004e1e:	e7fe      	b.n	8004e1e <_exit+0x12>

08004e20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	617b      	str	r3, [r7, #20]
 8004e30:	e00a      	b.n	8004e48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004e32:	f3af 8000 	nop.w
 8004e36:	4601      	mov	r1, r0
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	60ba      	str	r2, [r7, #8]
 8004e3e:	b2ca      	uxtb	r2, r1
 8004e40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	3301      	adds	r3, #1
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	dbf0      	blt.n	8004e32 <_read+0x12>
  }

  return len;
 8004e50:	687b      	ldr	r3, [r7, #4]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3718      	adds	r7, #24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b086      	sub	sp, #24
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	60f8      	str	r0, [r7, #12]
 8004e62:	60b9      	str	r1, [r7, #8]
 8004e64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e66:	2300      	movs	r3, #0
 8004e68:	617b      	str	r3, [r7, #20]
 8004e6a:	e009      	b.n	8004e80 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	1c5a      	adds	r2, r3, #1
 8004e70:	60ba      	str	r2, [r7, #8]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	617b      	str	r3, [r7, #20]
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	dbf1      	blt.n	8004e6c <_write+0x12>
  }
  return len;
 8004e88:	687b      	ldr	r3, [r7, #4]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3718      	adds	r7, #24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <_close>:

int _close(int file)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b083      	sub	sp, #12
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004e9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b083      	sub	sp, #12
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
 8004eb2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004eba:	605a      	str	r2, [r3, #4]
  return 0;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <_isatty>:

int _isatty(int file)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004ed2:	2301      	movs	r3, #1
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
	...

08004efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f04:	4a14      	ldr	r2, [pc, #80]	; (8004f58 <_sbrk+0x5c>)
 8004f06:	4b15      	ldr	r3, [pc, #84]	; (8004f5c <_sbrk+0x60>)
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f10:	4b13      	ldr	r3, [pc, #76]	; (8004f60 <_sbrk+0x64>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d102      	bne.n	8004f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f18:	4b11      	ldr	r3, [pc, #68]	; (8004f60 <_sbrk+0x64>)
 8004f1a:	4a12      	ldr	r2, [pc, #72]	; (8004f64 <_sbrk+0x68>)
 8004f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f1e:	4b10      	ldr	r3, [pc, #64]	; (8004f60 <_sbrk+0x64>)
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4413      	add	r3, r2
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d207      	bcs.n	8004f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f2c:	f004 fd38 	bl	80099a0 <__errno>
 8004f30:	4603      	mov	r3, r0
 8004f32:	220c      	movs	r2, #12
 8004f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004f36:	f04f 33ff 	mov.w	r3, #4294967295
 8004f3a:	e009      	b.n	8004f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004f3c:	4b08      	ldr	r3, [pc, #32]	; (8004f60 <_sbrk+0x64>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004f42:	4b07      	ldr	r3, [pc, #28]	; (8004f60 <_sbrk+0x64>)
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4413      	add	r3, r2
 8004f4a:	4a05      	ldr	r2, [pc, #20]	; (8004f60 <_sbrk+0x64>)
 8004f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3718      	adds	r7, #24
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	20020000 	.word	0x20020000
 8004f5c:	00000400 	.word	0x00000400
 8004f60:	2000037c 	.word	0x2000037c
 8004f64:	200004d8 	.word	0x200004d8

08004f68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f6c:	4b06      	ldr	r3, [pc, #24]	; (8004f88 <SystemInit+0x20>)
 8004f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f72:	4a05      	ldr	r2, [pc, #20]	; (8004f88 <SystemInit+0x20>)
 8004f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f7c:	bf00      	nop
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	e000ed00 	.word	0xe000ed00

08004f8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004fc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004f90:	480d      	ldr	r0, [pc, #52]	; (8004fc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004f92:	490e      	ldr	r1, [pc, #56]	; (8004fcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004f94:	4a0e      	ldr	r2, [pc, #56]	; (8004fd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004f96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f98:	e002      	b.n	8004fa0 <LoopCopyDataInit>

08004f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f9e:	3304      	adds	r3, #4

08004fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004fa4:	d3f9      	bcc.n	8004f9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004fa6:	4a0b      	ldr	r2, [pc, #44]	; (8004fd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004fa8:	4c0b      	ldr	r4, [pc, #44]	; (8004fd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004fac:	e001      	b.n	8004fb2 <LoopFillZerobss>

08004fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004fb0:	3204      	adds	r2, #4

08004fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004fb4:	d3fb      	bcc.n	8004fae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004fb6:	f7ff ffd7 	bl	8004f68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004fba:	f004 fcf7 	bl	80099ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004fbe:	f7fc f95f 	bl	8001280 <main>
  bx  lr    
 8004fc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004fc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004fcc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8004fd0:	0800c014 	.word	0x0800c014
  ldr r2, =_sbss
 8004fd4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8004fd8:	200004d4 	.word	0x200004d4

08004fdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004fdc:	e7fe      	b.n	8004fdc <ADC_IRQHandler>
	...

08004fe0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004fe4:	4b0e      	ldr	r3, [pc, #56]	; (8005020 <HAL_Init+0x40>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a0d      	ldr	r2, [pc, #52]	; (8005020 <HAL_Init+0x40>)
 8004fea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ff0:	4b0b      	ldr	r3, [pc, #44]	; (8005020 <HAL_Init+0x40>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a0a      	ldr	r2, [pc, #40]	; (8005020 <HAL_Init+0x40>)
 8004ff6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ffa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ffc:	4b08      	ldr	r3, [pc, #32]	; (8005020 <HAL_Init+0x40>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a07      	ldr	r2, [pc, #28]	; (8005020 <HAL_Init+0x40>)
 8005002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005006:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005008:	2003      	movs	r0, #3
 800500a:	f000 f94f 	bl	80052ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800500e:	2000      	movs	r0, #0
 8005010:	f000 f808 	bl	8005024 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005014:	f7ff fd8e 	bl	8004b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	40023c00 	.word	0x40023c00

08005024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800502c:	4b12      	ldr	r3, [pc, #72]	; (8005078 <HAL_InitTick+0x54>)
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	4b12      	ldr	r3, [pc, #72]	; (800507c <HAL_InitTick+0x58>)
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	4619      	mov	r1, r3
 8005036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800503a:	fbb3 f3f1 	udiv	r3, r3, r1
 800503e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005042:	4618      	mov	r0, r3
 8005044:	f000 f967 	bl	8005316 <HAL_SYSTICK_Config>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e00e      	b.n	8005070 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b0f      	cmp	r3, #15
 8005056:	d80a      	bhi.n	800506e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005058:	2200      	movs	r2, #0
 800505a:	6879      	ldr	r1, [r7, #4]
 800505c:	f04f 30ff 	mov.w	r0, #4294967295
 8005060:	f000 f92f 	bl	80052c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005064:	4a06      	ldr	r2, [pc, #24]	; (8005080 <HAL_InitTick+0x5c>)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	e000      	b.n	8005070 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
}
 8005070:	4618      	mov	r0, r3
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	20000000 	.word	0x20000000
 800507c:	20000008 	.word	0x20000008
 8005080:	20000004 	.word	0x20000004

08005084 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005084:	b480      	push	{r7}
 8005086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005088:	4b06      	ldr	r3, [pc, #24]	; (80050a4 <HAL_IncTick+0x20>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	461a      	mov	r2, r3
 800508e:	4b06      	ldr	r3, [pc, #24]	; (80050a8 <HAL_IncTick+0x24>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4413      	add	r3, r2
 8005094:	4a04      	ldr	r2, [pc, #16]	; (80050a8 <HAL_IncTick+0x24>)
 8005096:	6013      	str	r3, [r2, #0]
}
 8005098:	bf00      	nop
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	20000008 	.word	0x20000008
 80050a8:	20000380 	.word	0x20000380

080050ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
  return uwTick;
 80050b0:	4b03      	ldr	r3, [pc, #12]	; (80050c0 <HAL_GetTick+0x14>)
 80050b2:	681b      	ldr	r3, [r3, #0]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	20000380 	.word	0x20000380

080050c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80050cc:	f7ff ffee 	bl	80050ac <HAL_GetTick>
 80050d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050dc:	d005      	beq.n	80050ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80050de:	4b0a      	ldr	r3, [pc, #40]	; (8005108 <HAL_Delay+0x44>)
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	461a      	mov	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	4413      	add	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80050ea:	bf00      	nop
 80050ec:	f7ff ffde 	bl	80050ac <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d8f7      	bhi.n	80050ec <HAL_Delay+0x28>
  {
  }
}
 80050fc:	bf00      	nop
 80050fe:	bf00      	nop
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	20000008 	.word	0x20000008

0800510c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f003 0307 	and.w	r3, r3, #7
 800511a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800511c:	4b0c      	ldr	r3, [pc, #48]	; (8005150 <__NVIC_SetPriorityGrouping+0x44>)
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005128:	4013      	ands	r3, r2
 800512a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800513c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800513e:	4a04      	ldr	r2, [pc, #16]	; (8005150 <__NVIC_SetPriorityGrouping+0x44>)
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	60d3      	str	r3, [r2, #12]
}
 8005144:	bf00      	nop
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr
 8005150:	e000ed00 	.word	0xe000ed00

08005154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005154:	b480      	push	{r7}
 8005156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005158:	4b04      	ldr	r3, [pc, #16]	; (800516c <__NVIC_GetPriorityGrouping+0x18>)
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	0a1b      	lsrs	r3, r3, #8
 800515e:	f003 0307 	and.w	r3, r3, #7
}
 8005162:	4618      	mov	r0, r3
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	e000ed00 	.word	0xe000ed00

08005170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	4603      	mov	r3, r0
 8005178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800517a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800517e:	2b00      	cmp	r3, #0
 8005180:	db0b      	blt.n	800519a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005182:	79fb      	ldrb	r3, [r7, #7]
 8005184:	f003 021f 	and.w	r2, r3, #31
 8005188:	4907      	ldr	r1, [pc, #28]	; (80051a8 <__NVIC_EnableIRQ+0x38>)
 800518a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800518e:	095b      	lsrs	r3, r3, #5
 8005190:	2001      	movs	r0, #1
 8005192:	fa00 f202 	lsl.w	r2, r0, r2
 8005196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800519a:	bf00      	nop
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	e000e100 	.word	0xe000e100

080051ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	4603      	mov	r3, r0
 80051b4:	6039      	str	r1, [r7, #0]
 80051b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	db0a      	blt.n	80051d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	490c      	ldr	r1, [pc, #48]	; (80051f8 <__NVIC_SetPriority+0x4c>)
 80051c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ca:	0112      	lsls	r2, r2, #4
 80051cc:	b2d2      	uxtb	r2, r2
 80051ce:	440b      	add	r3, r1
 80051d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051d4:	e00a      	b.n	80051ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	4908      	ldr	r1, [pc, #32]	; (80051fc <__NVIC_SetPriority+0x50>)
 80051dc:	79fb      	ldrb	r3, [r7, #7]
 80051de:	f003 030f 	and.w	r3, r3, #15
 80051e2:	3b04      	subs	r3, #4
 80051e4:	0112      	lsls	r2, r2, #4
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	440b      	add	r3, r1
 80051ea:	761a      	strb	r2, [r3, #24]
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	e000e100 	.word	0xe000e100
 80051fc:	e000ed00 	.word	0xe000ed00

08005200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005200:	b480      	push	{r7}
 8005202:	b089      	sub	sp, #36	; 0x24
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f003 0307 	and.w	r3, r3, #7
 8005212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	f1c3 0307 	rsb	r3, r3, #7
 800521a:	2b04      	cmp	r3, #4
 800521c:	bf28      	it	cs
 800521e:	2304      	movcs	r3, #4
 8005220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	3304      	adds	r3, #4
 8005226:	2b06      	cmp	r3, #6
 8005228:	d902      	bls.n	8005230 <NVIC_EncodePriority+0x30>
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	3b03      	subs	r3, #3
 800522e:	e000      	b.n	8005232 <NVIC_EncodePriority+0x32>
 8005230:	2300      	movs	r3, #0
 8005232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005234:	f04f 32ff 	mov.w	r2, #4294967295
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	fa02 f303 	lsl.w	r3, r2, r3
 800523e:	43da      	mvns	r2, r3
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	401a      	ands	r2, r3
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005248:	f04f 31ff 	mov.w	r1, #4294967295
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	fa01 f303 	lsl.w	r3, r1, r3
 8005252:	43d9      	mvns	r1, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005258:	4313      	orrs	r3, r2
         );
}
 800525a:	4618      	mov	r0, r3
 800525c:	3724      	adds	r7, #36	; 0x24
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
	...

08005268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3b01      	subs	r3, #1
 8005274:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005278:	d301      	bcc.n	800527e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800527a:	2301      	movs	r3, #1
 800527c:	e00f      	b.n	800529e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800527e:	4a0a      	ldr	r2, [pc, #40]	; (80052a8 <SysTick_Config+0x40>)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	3b01      	subs	r3, #1
 8005284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005286:	210f      	movs	r1, #15
 8005288:	f04f 30ff 	mov.w	r0, #4294967295
 800528c:	f7ff ff8e 	bl	80051ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005290:	4b05      	ldr	r3, [pc, #20]	; (80052a8 <SysTick_Config+0x40>)
 8005292:	2200      	movs	r2, #0
 8005294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005296:	4b04      	ldr	r3, [pc, #16]	; (80052a8 <SysTick_Config+0x40>)
 8005298:	2207      	movs	r2, #7
 800529a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3708      	adds	r7, #8
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	e000e010 	.word	0xe000e010

080052ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f7ff ff29 	bl	800510c <__NVIC_SetPriorityGrouping>
}
 80052ba:	bf00      	nop
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b086      	sub	sp, #24
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	4603      	mov	r3, r0
 80052ca:	60b9      	str	r1, [r7, #8]
 80052cc:	607a      	str	r2, [r7, #4]
 80052ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80052d0:	2300      	movs	r3, #0
 80052d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80052d4:	f7ff ff3e 	bl	8005154 <__NVIC_GetPriorityGrouping>
 80052d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	68b9      	ldr	r1, [r7, #8]
 80052de:	6978      	ldr	r0, [r7, #20]
 80052e0:	f7ff ff8e 	bl	8005200 <NVIC_EncodePriority>
 80052e4:	4602      	mov	r2, r0
 80052e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052ea:	4611      	mov	r1, r2
 80052ec:	4618      	mov	r0, r3
 80052ee:	f7ff ff5d 	bl	80051ac <__NVIC_SetPriority>
}
 80052f2:	bf00      	nop
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b082      	sub	sp, #8
 80052fe:	af00      	add	r7, sp, #0
 8005300:	4603      	mov	r3, r0
 8005302:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005308:	4618      	mov	r0, r3
 800530a:	f7ff ff31 	bl	8005170 <__NVIC_EnableIRQ>
}
 800530e:	bf00      	nop
 8005310:	3708      	adds	r7, #8
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b082      	sub	sp, #8
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7ff ffa2 	bl	8005268 <SysTick_Config>
 8005324:	4603      	mov	r3, r0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
	...

08005330 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800533c:	f7ff feb6 	bl	80050ac <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e099      	b.n	8005480 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 0201 	bic.w	r2, r2, #1
 800536a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800536c:	e00f      	b.n	800538e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800536e:	f7ff fe9d 	bl	80050ac <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	2b05      	cmp	r3, #5
 800537a:	d908      	bls.n	800538e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2220      	movs	r2, #32
 8005380:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2203      	movs	r2, #3
 8005386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e078      	b.n	8005480 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1e8      	bne.n	800536e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	4b38      	ldr	r3, [pc, #224]	; (8005488 <HAL_DMA_Init+0x158>)
 80053a8:	4013      	ands	r3, r2
 80053aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a1b      	ldr	r3, [r3, #32]
 80053d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	4313      	orrs	r3, r2
 80053de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e4:	2b04      	cmp	r3, #4
 80053e6:	d107      	bne.n	80053f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f0:	4313      	orrs	r3, r2
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f023 0307 	bic.w	r3, r3, #7
 800540e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	4313      	orrs	r3, r2
 8005418:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541e:	2b04      	cmp	r3, #4
 8005420:	d117      	bne.n	8005452 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	4313      	orrs	r3, r2
 800542a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00e      	beq.n	8005452 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 fb0d 	bl	8005a54 <DMA_CheckFifoParam>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d008      	beq.n	8005452 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2240      	movs	r2, #64	; 0x40
 8005444:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800544e:	2301      	movs	r3, #1
 8005450:	e016      	b.n	8005480 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fac4 	bl	80059e8 <DMA_CalcBaseAndBitshift>
 8005460:	4603      	mov	r3, r0
 8005462:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005468:	223f      	movs	r2, #63	; 0x3f
 800546a:	409a      	lsls	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	f010803f 	.word	0xf010803f

0800548c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
 8005498:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800549a:	2300      	movs	r3, #0
 800549c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d101      	bne.n	80054b2 <HAL_DMA_Start_IT+0x26>
 80054ae:	2302      	movs	r3, #2
 80054b0:	e040      	b.n	8005534 <HAL_DMA_Start_IT+0xa8>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d12f      	bne.n	8005526 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2202      	movs	r2, #2
 80054ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	68b9      	ldr	r1, [r7, #8]
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 fa56 	bl	800598c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e4:	223f      	movs	r2, #63	; 0x3f
 80054e6:	409a      	lsls	r2, r3
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f042 0216 	orr.w	r2, r2, #22
 80054fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005500:	2b00      	cmp	r3, #0
 8005502:	d007      	beq.n	8005514 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f042 0208 	orr.w	r2, r2, #8
 8005512:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f042 0201 	orr.w	r2, r2, #1
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	e005      	b.n	8005532 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800552e:	2302      	movs	r3, #2
 8005530:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005532:	7dfb      	ldrb	r3, [r7, #23]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3718      	adds	r7, #24
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005548:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800554a:	f7ff fdaf 	bl	80050ac <HAL_GetTick>
 800554e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d008      	beq.n	800556e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2280      	movs	r2, #128	; 0x80
 8005560:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e052      	b.n	8005614 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f022 0216 	bic.w	r2, r2, #22
 800557c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	695a      	ldr	r2, [r3, #20]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800558c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	2b00      	cmp	r3, #0
 8005594:	d103      	bne.n	800559e <HAL_DMA_Abort+0x62>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800559a:	2b00      	cmp	r3, #0
 800559c:	d007      	beq.n	80055ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 0208 	bic.w	r2, r2, #8
 80055ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f022 0201 	bic.w	r2, r2, #1
 80055bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055be:	e013      	b.n	80055e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055c0:	f7ff fd74 	bl	80050ac <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b05      	cmp	r3, #5
 80055cc:	d90c      	bls.n	80055e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2220      	movs	r2, #32
 80055d2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2203      	movs	r2, #3
 80055d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e015      	b.n	8005614 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1e4      	bne.n	80055c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055fa:	223f      	movs	r2, #63	; 0x3f
 80055fc:	409a      	lsls	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b02      	cmp	r3, #2
 800562e:	d004      	beq.n	800563a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2280      	movs	r2, #128	; 0x80
 8005634:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e00c      	b.n	8005654 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2205      	movs	r2, #5
 800563e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f022 0201 	bic.w	r2, r2, #1
 8005650:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800566c:	4b8e      	ldr	r3, [pc, #568]	; (80058a8 <HAL_DMA_IRQHandler+0x248>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a8e      	ldr	r2, [pc, #568]	; (80058ac <HAL_DMA_IRQHandler+0x24c>)
 8005672:	fba2 2303 	umull	r2, r3, r2, r3
 8005676:	0a9b      	lsrs	r3, r3, #10
 8005678:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800567e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800568a:	2208      	movs	r2, #8
 800568c:	409a      	lsls	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	4013      	ands	r3, r2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d01a      	beq.n	80056cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0304 	and.w	r3, r3, #4
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d013      	beq.n	80056cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 0204 	bic.w	r2, r2, #4
 80056b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b8:	2208      	movs	r2, #8
 80056ba:	409a      	lsls	r2, r3
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c4:	f043 0201 	orr.w	r2, r3, #1
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056d0:	2201      	movs	r2, #1
 80056d2:	409a      	lsls	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4013      	ands	r3, r2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d012      	beq.n	8005702 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00b      	beq.n	8005702 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ee:	2201      	movs	r2, #1
 80056f0:	409a      	lsls	r2, r3
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fa:	f043 0202 	orr.w	r2, r3, #2
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005706:	2204      	movs	r2, #4
 8005708:	409a      	lsls	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	4013      	ands	r3, r2
 800570e:	2b00      	cmp	r3, #0
 8005710:	d012      	beq.n	8005738 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00b      	beq.n	8005738 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005724:	2204      	movs	r2, #4
 8005726:	409a      	lsls	r2, r3
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005730:	f043 0204 	orr.w	r2, r3, #4
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800573c:	2210      	movs	r2, #16
 800573e:	409a      	lsls	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4013      	ands	r3, r2
 8005744:	2b00      	cmp	r3, #0
 8005746:	d043      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0308 	and.w	r3, r3, #8
 8005752:	2b00      	cmp	r3, #0
 8005754:	d03c      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800575a:	2210      	movs	r2, #16
 800575c:	409a      	lsls	r2, r3
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d018      	beq.n	80057a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d108      	bne.n	8005790 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005782:	2b00      	cmp	r3, #0
 8005784:	d024      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	4798      	blx	r3
 800578e:	e01f      	b.n	80057d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005794:	2b00      	cmp	r3, #0
 8005796:	d01b      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	4798      	blx	r3
 80057a0:	e016      	b.n	80057d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d107      	bne.n	80057c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f022 0208 	bic.w	r2, r2, #8
 80057be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d003      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057d4:	2220      	movs	r2, #32
 80057d6:	409a      	lsls	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4013      	ands	r3, r2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 808f 	beq.w	8005900 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0310 	and.w	r3, r3, #16
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 8087 	beq.w	8005900 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f6:	2220      	movs	r2, #32
 80057f8:	409a      	lsls	r2, r3
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b05      	cmp	r3, #5
 8005808:	d136      	bne.n	8005878 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 0216 	bic.w	r2, r2, #22
 8005818:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	695a      	ldr	r2, [r3, #20]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005828:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582e:	2b00      	cmp	r3, #0
 8005830:	d103      	bne.n	800583a <HAL_DMA_IRQHandler+0x1da>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005836:	2b00      	cmp	r3, #0
 8005838:	d007      	beq.n	800584a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f022 0208 	bic.w	r2, r2, #8
 8005848:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800584e:	223f      	movs	r2, #63	; 0x3f
 8005850:	409a      	lsls	r2, r3
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800586a:	2b00      	cmp	r3, #0
 800586c:	d07e      	beq.n	800596c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	4798      	blx	r3
        }
        return;
 8005876:	e079      	b.n	800596c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d01d      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10d      	bne.n	80058b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005898:	2b00      	cmp	r3, #0
 800589a:	d031      	beq.n	8005900 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	4798      	blx	r3
 80058a4:	e02c      	b.n	8005900 <HAL_DMA_IRQHandler+0x2a0>
 80058a6:	bf00      	nop
 80058a8:	20000000 	.word	0x20000000
 80058ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d023      	beq.n	8005900 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	4798      	blx	r3
 80058c0:	e01e      	b.n	8005900 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10f      	bne.n	80058f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 0210 	bic.w	r2, r2, #16
 80058de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d003      	beq.n	8005900 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005904:	2b00      	cmp	r3, #0
 8005906:	d032      	beq.n	800596e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800590c:	f003 0301 	and.w	r3, r3, #1
 8005910:	2b00      	cmp	r3, #0
 8005912:	d022      	beq.n	800595a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2205      	movs	r2, #5
 8005918:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 0201 	bic.w	r2, r2, #1
 800592a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	3301      	adds	r3, #1
 8005930:	60bb      	str	r3, [r7, #8]
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	429a      	cmp	r2, r3
 8005936:	d307      	bcc.n	8005948 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1f2      	bne.n	800592c <HAL_DMA_IRQHandler+0x2cc>
 8005946:	e000      	b.n	800594a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005948:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800595e:	2b00      	cmp	r3, #0
 8005960:	d005      	beq.n	800596e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	4798      	blx	r3
 800596a:	e000      	b.n	800596e <HAL_DMA_IRQHandler+0x30e>
        return;
 800596c:	bf00      	nop
    }
  }
}
 800596e:	3718      	adds	r7, #24
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005980:	4618      	mov	r0, r3
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
 8005998:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80059a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	2b40      	cmp	r3, #64	; 0x40
 80059b8:	d108      	bne.n	80059cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80059ca:	e007      	b.n	80059dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	60da      	str	r2, [r3, #12]
}
 80059dc:	bf00      	nop
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	3b10      	subs	r3, #16
 80059f8:	4a14      	ldr	r2, [pc, #80]	; (8005a4c <DMA_CalcBaseAndBitshift+0x64>)
 80059fa:	fba2 2303 	umull	r2, r3, r2, r3
 80059fe:	091b      	lsrs	r3, r3, #4
 8005a00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005a02:	4a13      	ldr	r2, [pc, #76]	; (8005a50 <DMA_CalcBaseAndBitshift+0x68>)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4413      	add	r3, r2
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2b03      	cmp	r3, #3
 8005a14:	d909      	bls.n	8005a2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005a1e:	f023 0303 	bic.w	r3, r3, #3
 8005a22:	1d1a      	adds	r2, r3, #4
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	659a      	str	r2, [r3, #88]	; 0x58
 8005a28:	e007      	b.n	8005a3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005a32:	f023 0303 	bic.w	r3, r3, #3
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	aaaaaaab 	.word	0xaaaaaaab
 8005a50:	0800bbb4 	.word	0x0800bbb4

08005a54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d11f      	bne.n	8005aae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	2b03      	cmp	r3, #3
 8005a72:	d856      	bhi.n	8005b22 <DMA_CheckFifoParam+0xce>
 8005a74:	a201      	add	r2, pc, #4	; (adr r2, 8005a7c <DMA_CheckFifoParam+0x28>)
 8005a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a7a:	bf00      	nop
 8005a7c:	08005a8d 	.word	0x08005a8d
 8005a80:	08005a9f 	.word	0x08005a9f
 8005a84:	08005a8d 	.word	0x08005a8d
 8005a88:	08005b23 	.word	0x08005b23
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d046      	beq.n	8005b26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a9c:	e043      	b.n	8005b26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005aa6:	d140      	bne.n	8005b2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005aac:	e03d      	b.n	8005b2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ab6:	d121      	bne.n	8005afc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	2b03      	cmp	r3, #3
 8005abc:	d837      	bhi.n	8005b2e <DMA_CheckFifoParam+0xda>
 8005abe:	a201      	add	r2, pc, #4	; (adr r2, 8005ac4 <DMA_CheckFifoParam+0x70>)
 8005ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac4:	08005ad5 	.word	0x08005ad5
 8005ac8:	08005adb 	.word	0x08005adb
 8005acc:	08005ad5 	.word	0x08005ad5
 8005ad0:	08005aed 	.word	0x08005aed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ad8:	e030      	b.n	8005b3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ade:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d025      	beq.n	8005b32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005aea:	e022      	b.n	8005b32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005af4:	d11f      	bne.n	8005b36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005afa:	e01c      	b.n	8005b36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d903      	bls.n	8005b0a <DMA_CheckFifoParam+0xb6>
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	2b03      	cmp	r3, #3
 8005b06:	d003      	beq.n	8005b10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005b08:	e018      	b.n	8005b3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	73fb      	strb	r3, [r7, #15]
      break;
 8005b0e:	e015      	b.n	8005b3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00e      	beq.n	8005b3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b20:	e00b      	b.n	8005b3a <DMA_CheckFifoParam+0xe6>
      break;
 8005b22:	bf00      	nop
 8005b24:	e00a      	b.n	8005b3c <DMA_CheckFifoParam+0xe8>
      break;
 8005b26:	bf00      	nop
 8005b28:	e008      	b.n	8005b3c <DMA_CheckFifoParam+0xe8>
      break;
 8005b2a:	bf00      	nop
 8005b2c:	e006      	b.n	8005b3c <DMA_CheckFifoParam+0xe8>
      break;
 8005b2e:	bf00      	nop
 8005b30:	e004      	b.n	8005b3c <DMA_CheckFifoParam+0xe8>
      break;
 8005b32:	bf00      	nop
 8005b34:	e002      	b.n	8005b3c <DMA_CheckFifoParam+0xe8>
      break;   
 8005b36:	bf00      	nop
 8005b38:	e000      	b.n	8005b3c <DMA_CheckFifoParam+0xe8>
      break;
 8005b3a:	bf00      	nop
    }
  } 
  
  return status; 
 8005b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop

08005b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b089      	sub	sp, #36	; 0x24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005b56:	2300      	movs	r3, #0
 8005b58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b62:	2300      	movs	r3, #0
 8005b64:	61fb      	str	r3, [r7, #28]
 8005b66:	e165      	b.n	8005e34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005b68:	2201      	movs	r2, #1
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	4013      	ands	r3, r2
 8005b7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	f040 8154 	bne.w	8005e2e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f003 0303 	and.w	r3, r3, #3
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d005      	beq.n	8005b9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d130      	bne.n	8005c00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	005b      	lsls	r3, r3, #1
 8005ba8:	2203      	movs	r2, #3
 8005baa:	fa02 f303 	lsl.w	r3, r2, r3
 8005bae:	43db      	mvns	r3, r3
 8005bb0:	69ba      	ldr	r2, [r7, #24]
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	68da      	ldr	r2, [r3, #12]
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc2:	69ba      	ldr	r2, [r7, #24]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	69ba      	ldr	r2, [r7, #24]
 8005bcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bdc:	43db      	mvns	r3, r3
 8005bde:	69ba      	ldr	r2, [r7, #24]
 8005be0:	4013      	ands	r3, r2
 8005be2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	091b      	lsrs	r3, r3, #4
 8005bea:	f003 0201 	and.w	r2, r3, #1
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf4:	69ba      	ldr	r2, [r7, #24]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f003 0303 	and.w	r3, r3, #3
 8005c08:	2b03      	cmp	r3, #3
 8005c0a:	d017      	beq.n	8005c3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	005b      	lsls	r3, r3, #1
 8005c16:	2203      	movs	r2, #3
 8005c18:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1c:	43db      	mvns	r3, r3
 8005c1e:	69ba      	ldr	r2, [r7, #24]
 8005c20:	4013      	ands	r3, r2
 8005c22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	005b      	lsls	r3, r3, #1
 8005c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c30:	69ba      	ldr	r2, [r7, #24]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	69ba      	ldr	r2, [r7, #24]
 8005c3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f003 0303 	and.w	r3, r3, #3
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d123      	bne.n	8005c90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	08da      	lsrs	r2, r3, #3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	3208      	adds	r2, #8
 8005c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	f003 0307 	and.w	r3, r3, #7
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	220f      	movs	r2, #15
 8005c60:	fa02 f303 	lsl.w	r3, r2, r3
 8005c64:	43db      	mvns	r3, r3
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	4013      	ands	r3, r2
 8005c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	691a      	ldr	r2, [r3, #16]
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	f003 0307 	and.w	r3, r3, #7
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7c:	69ba      	ldr	r2, [r7, #24]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	08da      	lsrs	r2, r3, #3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	3208      	adds	r2, #8
 8005c8a:	69b9      	ldr	r1, [r7, #24]
 8005c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	005b      	lsls	r3, r3, #1
 8005c9a:	2203      	movs	r2, #3
 8005c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca0:	43db      	mvns	r3, r3
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f003 0203 	and.w	r2, r3, #3
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	005b      	lsls	r3, r3, #1
 8005cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	69ba      	ldr	r2, [r7, #24]
 8005cc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 80ae 	beq.w	8005e2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60fb      	str	r3, [r7, #12]
 8005cd6:	4b5d      	ldr	r3, [pc, #372]	; (8005e4c <HAL_GPIO_Init+0x300>)
 8005cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cda:	4a5c      	ldr	r2, [pc, #368]	; (8005e4c <HAL_GPIO_Init+0x300>)
 8005cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8005ce2:	4b5a      	ldr	r3, [pc, #360]	; (8005e4c <HAL_GPIO_Init+0x300>)
 8005ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cea:	60fb      	str	r3, [r7, #12]
 8005cec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005cee:	4a58      	ldr	r2, [pc, #352]	; (8005e50 <HAL_GPIO_Init+0x304>)
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	089b      	lsrs	r3, r3, #2
 8005cf4:	3302      	adds	r3, #2
 8005cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	f003 0303 	and.w	r3, r3, #3
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	220f      	movs	r2, #15
 8005d06:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0a:	43db      	mvns	r3, r3
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	4013      	ands	r3, r2
 8005d10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a4f      	ldr	r2, [pc, #316]	; (8005e54 <HAL_GPIO_Init+0x308>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d025      	beq.n	8005d66 <HAL_GPIO_Init+0x21a>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a4e      	ldr	r2, [pc, #312]	; (8005e58 <HAL_GPIO_Init+0x30c>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d01f      	beq.n	8005d62 <HAL_GPIO_Init+0x216>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a4d      	ldr	r2, [pc, #308]	; (8005e5c <HAL_GPIO_Init+0x310>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d019      	beq.n	8005d5e <HAL_GPIO_Init+0x212>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a4c      	ldr	r2, [pc, #304]	; (8005e60 <HAL_GPIO_Init+0x314>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d013      	beq.n	8005d5a <HAL_GPIO_Init+0x20e>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a4b      	ldr	r2, [pc, #300]	; (8005e64 <HAL_GPIO_Init+0x318>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d00d      	beq.n	8005d56 <HAL_GPIO_Init+0x20a>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a4a      	ldr	r2, [pc, #296]	; (8005e68 <HAL_GPIO_Init+0x31c>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d007      	beq.n	8005d52 <HAL_GPIO_Init+0x206>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a49      	ldr	r2, [pc, #292]	; (8005e6c <HAL_GPIO_Init+0x320>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d101      	bne.n	8005d4e <HAL_GPIO_Init+0x202>
 8005d4a:	2306      	movs	r3, #6
 8005d4c:	e00c      	b.n	8005d68 <HAL_GPIO_Init+0x21c>
 8005d4e:	2307      	movs	r3, #7
 8005d50:	e00a      	b.n	8005d68 <HAL_GPIO_Init+0x21c>
 8005d52:	2305      	movs	r3, #5
 8005d54:	e008      	b.n	8005d68 <HAL_GPIO_Init+0x21c>
 8005d56:	2304      	movs	r3, #4
 8005d58:	e006      	b.n	8005d68 <HAL_GPIO_Init+0x21c>
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e004      	b.n	8005d68 <HAL_GPIO_Init+0x21c>
 8005d5e:	2302      	movs	r3, #2
 8005d60:	e002      	b.n	8005d68 <HAL_GPIO_Init+0x21c>
 8005d62:	2301      	movs	r3, #1
 8005d64:	e000      	b.n	8005d68 <HAL_GPIO_Init+0x21c>
 8005d66:	2300      	movs	r3, #0
 8005d68:	69fa      	ldr	r2, [r7, #28]
 8005d6a:	f002 0203 	and.w	r2, r2, #3
 8005d6e:	0092      	lsls	r2, r2, #2
 8005d70:	4093      	lsls	r3, r2
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d78:	4935      	ldr	r1, [pc, #212]	; (8005e50 <HAL_GPIO_Init+0x304>)
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	089b      	lsrs	r3, r3, #2
 8005d7e:	3302      	adds	r3, #2
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005d86:	4b3a      	ldr	r3, [pc, #232]	; (8005e70 <HAL_GPIO_Init+0x324>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	43db      	mvns	r3, r3
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	4013      	ands	r3, r2
 8005d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d003      	beq.n	8005daa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005da2:	69ba      	ldr	r2, [r7, #24]
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005daa:	4a31      	ldr	r2, [pc, #196]	; (8005e70 <HAL_GPIO_Init+0x324>)
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005db0:	4b2f      	ldr	r3, [pc, #188]	; (8005e70 <HAL_GPIO_Init+0x324>)
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	43db      	mvns	r3, r3
 8005dba:	69ba      	ldr	r2, [r7, #24]
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005dd4:	4a26      	ldr	r2, [pc, #152]	; (8005e70 <HAL_GPIO_Init+0x324>)
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005dda:	4b25      	ldr	r3, [pc, #148]	; (8005e70 <HAL_GPIO_Init+0x324>)
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	43db      	mvns	r3, r3
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	4013      	ands	r3, r2
 8005de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d003      	beq.n	8005dfe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005dfe:	4a1c      	ldr	r2, [pc, #112]	; (8005e70 <HAL_GPIO_Init+0x324>)
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e04:	4b1a      	ldr	r3, [pc, #104]	; (8005e70 <HAL_GPIO_Init+0x324>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	43db      	mvns	r3, r3
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	4013      	ands	r3, r2
 8005e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d003      	beq.n	8005e28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e28:	4a11      	ldr	r2, [pc, #68]	; (8005e70 <HAL_GPIO_Init+0x324>)
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	3301      	adds	r3, #1
 8005e32:	61fb      	str	r3, [r7, #28]
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	2b0f      	cmp	r3, #15
 8005e38:	f67f ae96 	bls.w	8005b68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005e3c:	bf00      	nop
 8005e3e:	bf00      	nop
 8005e40:	3724      	adds	r7, #36	; 0x24
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	40023800 	.word	0x40023800
 8005e50:	40013800 	.word	0x40013800
 8005e54:	40020000 	.word	0x40020000
 8005e58:	40020400 	.word	0x40020400
 8005e5c:	40020800 	.word	0x40020800
 8005e60:	40020c00 	.word	0x40020c00
 8005e64:	40021000 	.word	0x40021000
 8005e68:	40021400 	.word	0x40021400
 8005e6c:	40021800 	.word	0x40021800
 8005e70:	40013c00 	.word	0x40013c00

08005e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	807b      	strh	r3, [r7, #2]
 8005e80:	4613      	mov	r3, r2
 8005e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e84:	787b      	ldrb	r3, [r7, #1]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e8a:	887a      	ldrh	r2, [r7, #2]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005e90:	e003      	b.n	8005e9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005e92:	887b      	ldrh	r3, [r7, #2]
 8005e94:	041a      	lsls	r2, r3, #16
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	619a      	str	r2, [r3, #24]
}
 8005e9a:	bf00      	nop
 8005e9c:	370c      	adds	r7, #12
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr

08005ea6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b085      	sub	sp, #20
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
 8005eae:	460b      	mov	r3, r1
 8005eb0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005eb8:	887a      	ldrh	r2, [r7, #2]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	041a      	lsls	r2, r3, #16
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	43d9      	mvns	r1, r3
 8005ec4:	887b      	ldrh	r3, [r7, #2]
 8005ec6:	400b      	ands	r3, r1
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	619a      	str	r2, [r3, #24]
}
 8005ece:	bf00      	nop
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
	...

08005edc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	603b      	str	r3, [r7, #0]
 8005eea:	4b20      	ldr	r3, [pc, #128]	; (8005f6c <HAL_PWREx_EnableOverDrive+0x90>)
 8005eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eee:	4a1f      	ldr	r2, [pc, #124]	; (8005f6c <HAL_PWREx_EnableOverDrive+0x90>)
 8005ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ef6:	4b1d      	ldr	r3, [pc, #116]	; (8005f6c <HAL_PWREx_EnableOverDrive+0x90>)
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005efe:	603b      	str	r3, [r7, #0]
 8005f00:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005f02:	4b1b      	ldr	r3, [pc, #108]	; (8005f70 <HAL_PWREx_EnableOverDrive+0x94>)
 8005f04:	2201      	movs	r2, #1
 8005f06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f08:	f7ff f8d0 	bl	80050ac <HAL_GetTick>
 8005f0c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005f0e:	e009      	b.n	8005f24 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005f10:	f7ff f8cc 	bl	80050ac <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f1e:	d901      	bls.n	8005f24 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e01f      	b.n	8005f64 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005f24:	4b13      	ldr	r3, [pc, #76]	; (8005f74 <HAL_PWREx_EnableOverDrive+0x98>)
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f30:	d1ee      	bne.n	8005f10 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005f32:	4b11      	ldr	r3, [pc, #68]	; (8005f78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f34:	2201      	movs	r2, #1
 8005f36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f38:	f7ff f8b8 	bl	80050ac <HAL_GetTick>
 8005f3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005f3e:	e009      	b.n	8005f54 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005f40:	f7ff f8b4 	bl	80050ac <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f4e:	d901      	bls.n	8005f54 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e007      	b.n	8005f64 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005f54:	4b07      	ldr	r3, [pc, #28]	; (8005f74 <HAL_PWREx_EnableOverDrive+0x98>)
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f60:	d1ee      	bne.n	8005f40 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3708      	adds	r7, #8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	40023800 	.word	0x40023800
 8005f70:	420e0040 	.word	0x420e0040
 8005f74:	40007000 	.word	0x40007000
 8005f78:	420e0044 	.word	0x420e0044

08005f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d101      	bne.n	8005f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e0cc      	b.n	800612a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f90:	4b68      	ldr	r3, [pc, #416]	; (8006134 <HAL_RCC_ClockConfig+0x1b8>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 030f 	and.w	r3, r3, #15
 8005f98:	683a      	ldr	r2, [r7, #0]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d90c      	bls.n	8005fb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f9e:	4b65      	ldr	r3, [pc, #404]	; (8006134 <HAL_RCC_ClockConfig+0x1b8>)
 8005fa0:	683a      	ldr	r2, [r7, #0]
 8005fa2:	b2d2      	uxtb	r2, r2
 8005fa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fa6:	4b63      	ldr	r3, [pc, #396]	; (8006134 <HAL_RCC_ClockConfig+0x1b8>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 030f 	and.w	r3, r3, #15
 8005fae:	683a      	ldr	r2, [r7, #0]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d001      	beq.n	8005fb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e0b8      	b.n	800612a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d020      	beq.n	8006006 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0304 	and.w	r3, r3, #4
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d005      	beq.n	8005fdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fd0:	4b59      	ldr	r3, [pc, #356]	; (8006138 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	4a58      	ldr	r2, [pc, #352]	; (8006138 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005fda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0308 	and.w	r3, r3, #8
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d005      	beq.n	8005ff4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fe8:	4b53      	ldr	r3, [pc, #332]	; (8006138 <HAL_RCC_ClockConfig+0x1bc>)
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	4a52      	ldr	r2, [pc, #328]	; (8006138 <HAL_RCC_ClockConfig+0x1bc>)
 8005fee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ff2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ff4:	4b50      	ldr	r3, [pc, #320]	; (8006138 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	494d      	ldr	r1, [pc, #308]	; (8006138 <HAL_RCC_ClockConfig+0x1bc>)
 8006002:	4313      	orrs	r3, r2
 8006004:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b00      	cmp	r3, #0
 8006010:	d044      	beq.n	800609c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d107      	bne.n	800602a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800601a:	4b47      	ldr	r3, [pc, #284]	; (8006138 <HAL_RCC_ClockConfig+0x1bc>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d119      	bne.n	800605a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e07f      	b.n	800612a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	2b02      	cmp	r3, #2
 8006030:	d003      	beq.n	800603a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006036:	2b03      	cmp	r3, #3
 8006038:	d107      	bne.n	800604a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800603a:	4b3f      	ldr	r3, [pc, #252]	; (8006138 <HAL_RCC_ClockConfig+0x1bc>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d109      	bne.n	800605a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e06f      	b.n	800612a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800604a:	4b3b      	ldr	r3, [pc, #236]	; (8006138 <HAL_RCC_ClockConfig+0x1bc>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d101      	bne.n	800605a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e067      	b.n	800612a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800605a:	4b37      	ldr	r3, [pc, #220]	; (8006138 <HAL_RCC_ClockConfig+0x1bc>)
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f023 0203 	bic.w	r2, r3, #3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	4934      	ldr	r1, [pc, #208]	; (8006138 <HAL_RCC_ClockConfig+0x1bc>)
 8006068:	4313      	orrs	r3, r2
 800606a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800606c:	f7ff f81e 	bl	80050ac <HAL_GetTick>
 8006070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006072:	e00a      	b.n	800608a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006074:	f7ff f81a 	bl	80050ac <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006082:	4293      	cmp	r3, r2
 8006084:	d901      	bls.n	800608a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e04f      	b.n	800612a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800608a:	4b2b      	ldr	r3, [pc, #172]	; (8006138 <HAL_RCC_ClockConfig+0x1bc>)
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f003 020c 	and.w	r2, r3, #12
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	429a      	cmp	r2, r3
 800609a:	d1eb      	bne.n	8006074 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800609c:	4b25      	ldr	r3, [pc, #148]	; (8006134 <HAL_RCC_ClockConfig+0x1b8>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 030f 	and.w	r3, r3, #15
 80060a4:	683a      	ldr	r2, [r7, #0]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d20c      	bcs.n	80060c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060aa:	4b22      	ldr	r3, [pc, #136]	; (8006134 <HAL_RCC_ClockConfig+0x1b8>)
 80060ac:	683a      	ldr	r2, [r7, #0]
 80060ae:	b2d2      	uxtb	r2, r2
 80060b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060b2:	4b20      	ldr	r3, [pc, #128]	; (8006134 <HAL_RCC_ClockConfig+0x1b8>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 030f 	and.w	r3, r3, #15
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d001      	beq.n	80060c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e032      	b.n	800612a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0304 	and.w	r3, r3, #4
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d008      	beq.n	80060e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060d0:	4b19      	ldr	r3, [pc, #100]	; (8006138 <HAL_RCC_ClockConfig+0x1bc>)
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	4916      	ldr	r1, [pc, #88]	; (8006138 <HAL_RCC_ClockConfig+0x1bc>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0308 	and.w	r3, r3, #8
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d009      	beq.n	8006102 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060ee:	4b12      	ldr	r3, [pc, #72]	; (8006138 <HAL_RCC_ClockConfig+0x1bc>)
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	00db      	lsls	r3, r3, #3
 80060fc:	490e      	ldr	r1, [pc, #56]	; (8006138 <HAL_RCC_ClockConfig+0x1bc>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006102:	f000 f855 	bl	80061b0 <HAL_RCC_GetSysClockFreq>
 8006106:	4602      	mov	r2, r0
 8006108:	4b0b      	ldr	r3, [pc, #44]	; (8006138 <HAL_RCC_ClockConfig+0x1bc>)
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	091b      	lsrs	r3, r3, #4
 800610e:	f003 030f 	and.w	r3, r3, #15
 8006112:	490a      	ldr	r1, [pc, #40]	; (800613c <HAL_RCC_ClockConfig+0x1c0>)
 8006114:	5ccb      	ldrb	r3, [r1, r3]
 8006116:	fa22 f303 	lsr.w	r3, r2, r3
 800611a:	4a09      	ldr	r2, [pc, #36]	; (8006140 <HAL_RCC_ClockConfig+0x1c4>)
 800611c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800611e:	4b09      	ldr	r3, [pc, #36]	; (8006144 <HAL_RCC_ClockConfig+0x1c8>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4618      	mov	r0, r3
 8006124:	f7fe ff7e 	bl	8005024 <HAL_InitTick>

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	40023c00 	.word	0x40023c00
 8006138:	40023800 	.word	0x40023800
 800613c:	0800bb9c 	.word	0x0800bb9c
 8006140:	20000000 	.word	0x20000000
 8006144:	20000004 	.word	0x20000004

08006148 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006148:	b480      	push	{r7}
 800614a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800614c:	4b03      	ldr	r3, [pc, #12]	; (800615c <HAL_RCC_GetHCLKFreq+0x14>)
 800614e:	681b      	ldr	r3, [r3, #0]
}
 8006150:	4618      	mov	r0, r3
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	20000000 	.word	0x20000000

08006160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006164:	f7ff fff0 	bl	8006148 <HAL_RCC_GetHCLKFreq>
 8006168:	4602      	mov	r2, r0
 800616a:	4b05      	ldr	r3, [pc, #20]	; (8006180 <HAL_RCC_GetPCLK1Freq+0x20>)
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	0a9b      	lsrs	r3, r3, #10
 8006170:	f003 0307 	and.w	r3, r3, #7
 8006174:	4903      	ldr	r1, [pc, #12]	; (8006184 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006176:	5ccb      	ldrb	r3, [r1, r3]
 8006178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800617c:	4618      	mov	r0, r3
 800617e:	bd80      	pop	{r7, pc}
 8006180:	40023800 	.word	0x40023800
 8006184:	0800bbac 	.word	0x0800bbac

08006188 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800618c:	f7ff ffdc 	bl	8006148 <HAL_RCC_GetHCLKFreq>
 8006190:	4602      	mov	r2, r0
 8006192:	4b05      	ldr	r3, [pc, #20]	; (80061a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	0b5b      	lsrs	r3, r3, #13
 8006198:	f003 0307 	and.w	r3, r3, #7
 800619c:	4903      	ldr	r1, [pc, #12]	; (80061ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800619e:	5ccb      	ldrb	r3, [r1, r3]
 80061a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	40023800 	.word	0x40023800
 80061ac:	0800bbac 	.word	0x0800bbac

080061b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061b4:	b0ae      	sub	sp, #184	; 0xb8
 80061b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80061b8:	2300      	movs	r3, #0
 80061ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80061be:	2300      	movs	r3, #0
 80061c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80061c4:	2300      	movs	r3, #0
 80061c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80061ca:	2300      	movs	r3, #0
 80061cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061d6:	4bcb      	ldr	r3, [pc, #812]	; (8006504 <HAL_RCC_GetSysClockFreq+0x354>)
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f003 030c 	and.w	r3, r3, #12
 80061de:	2b0c      	cmp	r3, #12
 80061e0:	f200 8206 	bhi.w	80065f0 <HAL_RCC_GetSysClockFreq+0x440>
 80061e4:	a201      	add	r2, pc, #4	; (adr r2, 80061ec <HAL_RCC_GetSysClockFreq+0x3c>)
 80061e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ea:	bf00      	nop
 80061ec:	08006221 	.word	0x08006221
 80061f0:	080065f1 	.word	0x080065f1
 80061f4:	080065f1 	.word	0x080065f1
 80061f8:	080065f1 	.word	0x080065f1
 80061fc:	08006229 	.word	0x08006229
 8006200:	080065f1 	.word	0x080065f1
 8006204:	080065f1 	.word	0x080065f1
 8006208:	080065f1 	.word	0x080065f1
 800620c:	08006231 	.word	0x08006231
 8006210:	080065f1 	.word	0x080065f1
 8006214:	080065f1 	.word	0x080065f1
 8006218:	080065f1 	.word	0x080065f1
 800621c:	08006421 	.word	0x08006421
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006220:	4bb9      	ldr	r3, [pc, #740]	; (8006508 <HAL_RCC_GetSysClockFreq+0x358>)
 8006222:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8006226:	e1e7      	b.n	80065f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006228:	4bb8      	ldr	r3, [pc, #736]	; (800650c <HAL_RCC_GetSysClockFreq+0x35c>)
 800622a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800622e:	e1e3      	b.n	80065f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006230:	4bb4      	ldr	r3, [pc, #720]	; (8006504 <HAL_RCC_GetSysClockFreq+0x354>)
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006238:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800623c:	4bb1      	ldr	r3, [pc, #708]	; (8006504 <HAL_RCC_GetSysClockFreq+0x354>)
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d071      	beq.n	800632c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006248:	4bae      	ldr	r3, [pc, #696]	; (8006504 <HAL_RCC_GetSysClockFreq+0x354>)
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	099b      	lsrs	r3, r3, #6
 800624e:	2200      	movs	r2, #0
 8006250:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006254:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006258:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800625c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006260:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006264:	2300      	movs	r3, #0
 8006266:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800626a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800626e:	4622      	mov	r2, r4
 8006270:	462b      	mov	r3, r5
 8006272:	f04f 0000 	mov.w	r0, #0
 8006276:	f04f 0100 	mov.w	r1, #0
 800627a:	0159      	lsls	r1, r3, #5
 800627c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006280:	0150      	lsls	r0, r2, #5
 8006282:	4602      	mov	r2, r0
 8006284:	460b      	mov	r3, r1
 8006286:	4621      	mov	r1, r4
 8006288:	1a51      	subs	r1, r2, r1
 800628a:	6439      	str	r1, [r7, #64]	; 0x40
 800628c:	4629      	mov	r1, r5
 800628e:	eb63 0301 	sbc.w	r3, r3, r1
 8006292:	647b      	str	r3, [r7, #68]	; 0x44
 8006294:	f04f 0200 	mov.w	r2, #0
 8006298:	f04f 0300 	mov.w	r3, #0
 800629c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80062a0:	4649      	mov	r1, r9
 80062a2:	018b      	lsls	r3, r1, #6
 80062a4:	4641      	mov	r1, r8
 80062a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80062aa:	4641      	mov	r1, r8
 80062ac:	018a      	lsls	r2, r1, #6
 80062ae:	4641      	mov	r1, r8
 80062b0:	1a51      	subs	r1, r2, r1
 80062b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80062b4:	4649      	mov	r1, r9
 80062b6:	eb63 0301 	sbc.w	r3, r3, r1
 80062ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062bc:	f04f 0200 	mov.w	r2, #0
 80062c0:	f04f 0300 	mov.w	r3, #0
 80062c4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80062c8:	4649      	mov	r1, r9
 80062ca:	00cb      	lsls	r3, r1, #3
 80062cc:	4641      	mov	r1, r8
 80062ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062d2:	4641      	mov	r1, r8
 80062d4:	00ca      	lsls	r2, r1, #3
 80062d6:	4610      	mov	r0, r2
 80062d8:	4619      	mov	r1, r3
 80062da:	4603      	mov	r3, r0
 80062dc:	4622      	mov	r2, r4
 80062de:	189b      	adds	r3, r3, r2
 80062e0:	633b      	str	r3, [r7, #48]	; 0x30
 80062e2:	462b      	mov	r3, r5
 80062e4:	460a      	mov	r2, r1
 80062e6:	eb42 0303 	adc.w	r3, r2, r3
 80062ea:	637b      	str	r3, [r7, #52]	; 0x34
 80062ec:	f04f 0200 	mov.w	r2, #0
 80062f0:	f04f 0300 	mov.w	r3, #0
 80062f4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80062f8:	4629      	mov	r1, r5
 80062fa:	024b      	lsls	r3, r1, #9
 80062fc:	4621      	mov	r1, r4
 80062fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006302:	4621      	mov	r1, r4
 8006304:	024a      	lsls	r2, r1, #9
 8006306:	4610      	mov	r0, r2
 8006308:	4619      	mov	r1, r3
 800630a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800630e:	2200      	movs	r2, #0
 8006310:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006314:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006318:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800631c:	f7fa fc74 	bl	8000c08 <__aeabi_uldivmod>
 8006320:	4602      	mov	r2, r0
 8006322:	460b      	mov	r3, r1
 8006324:	4613      	mov	r3, r2
 8006326:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800632a:	e067      	b.n	80063fc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800632c:	4b75      	ldr	r3, [pc, #468]	; (8006504 <HAL_RCC_GetSysClockFreq+0x354>)
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	099b      	lsrs	r3, r3, #6
 8006332:	2200      	movs	r2, #0
 8006334:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006338:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800633c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006344:	67bb      	str	r3, [r7, #120]	; 0x78
 8006346:	2300      	movs	r3, #0
 8006348:	67fb      	str	r3, [r7, #124]	; 0x7c
 800634a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800634e:	4622      	mov	r2, r4
 8006350:	462b      	mov	r3, r5
 8006352:	f04f 0000 	mov.w	r0, #0
 8006356:	f04f 0100 	mov.w	r1, #0
 800635a:	0159      	lsls	r1, r3, #5
 800635c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006360:	0150      	lsls	r0, r2, #5
 8006362:	4602      	mov	r2, r0
 8006364:	460b      	mov	r3, r1
 8006366:	4621      	mov	r1, r4
 8006368:	1a51      	subs	r1, r2, r1
 800636a:	62b9      	str	r1, [r7, #40]	; 0x28
 800636c:	4629      	mov	r1, r5
 800636e:	eb63 0301 	sbc.w	r3, r3, r1
 8006372:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006374:	f04f 0200 	mov.w	r2, #0
 8006378:	f04f 0300 	mov.w	r3, #0
 800637c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006380:	4649      	mov	r1, r9
 8006382:	018b      	lsls	r3, r1, #6
 8006384:	4641      	mov	r1, r8
 8006386:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800638a:	4641      	mov	r1, r8
 800638c:	018a      	lsls	r2, r1, #6
 800638e:	4641      	mov	r1, r8
 8006390:	ebb2 0a01 	subs.w	sl, r2, r1
 8006394:	4649      	mov	r1, r9
 8006396:	eb63 0b01 	sbc.w	fp, r3, r1
 800639a:	f04f 0200 	mov.w	r2, #0
 800639e:	f04f 0300 	mov.w	r3, #0
 80063a2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063a6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063ae:	4692      	mov	sl, r2
 80063b0:	469b      	mov	fp, r3
 80063b2:	4623      	mov	r3, r4
 80063b4:	eb1a 0303 	adds.w	r3, sl, r3
 80063b8:	623b      	str	r3, [r7, #32]
 80063ba:	462b      	mov	r3, r5
 80063bc:	eb4b 0303 	adc.w	r3, fp, r3
 80063c0:	627b      	str	r3, [r7, #36]	; 0x24
 80063c2:	f04f 0200 	mov.w	r2, #0
 80063c6:	f04f 0300 	mov.w	r3, #0
 80063ca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80063ce:	4629      	mov	r1, r5
 80063d0:	028b      	lsls	r3, r1, #10
 80063d2:	4621      	mov	r1, r4
 80063d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80063d8:	4621      	mov	r1, r4
 80063da:	028a      	lsls	r2, r1, #10
 80063dc:	4610      	mov	r0, r2
 80063de:	4619      	mov	r1, r3
 80063e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063e4:	2200      	movs	r2, #0
 80063e6:	673b      	str	r3, [r7, #112]	; 0x70
 80063e8:	677a      	str	r2, [r7, #116]	; 0x74
 80063ea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80063ee:	f7fa fc0b 	bl	8000c08 <__aeabi_uldivmod>
 80063f2:	4602      	mov	r2, r0
 80063f4:	460b      	mov	r3, r1
 80063f6:	4613      	mov	r3, r2
 80063f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80063fc:	4b41      	ldr	r3, [pc, #260]	; (8006504 <HAL_RCC_GetSysClockFreq+0x354>)
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	0c1b      	lsrs	r3, r3, #16
 8006402:	f003 0303 	and.w	r3, r3, #3
 8006406:	3301      	adds	r3, #1
 8006408:	005b      	lsls	r3, r3, #1
 800640a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800640e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006412:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006416:	fbb2 f3f3 	udiv	r3, r2, r3
 800641a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800641e:	e0eb      	b.n	80065f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006420:	4b38      	ldr	r3, [pc, #224]	; (8006504 <HAL_RCC_GetSysClockFreq+0x354>)
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006428:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800642c:	4b35      	ldr	r3, [pc, #212]	; (8006504 <HAL_RCC_GetSysClockFreq+0x354>)
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d06b      	beq.n	8006510 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006438:	4b32      	ldr	r3, [pc, #200]	; (8006504 <HAL_RCC_GetSysClockFreq+0x354>)
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	099b      	lsrs	r3, r3, #6
 800643e:	2200      	movs	r2, #0
 8006440:	66bb      	str	r3, [r7, #104]	; 0x68
 8006442:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006444:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800644a:	663b      	str	r3, [r7, #96]	; 0x60
 800644c:	2300      	movs	r3, #0
 800644e:	667b      	str	r3, [r7, #100]	; 0x64
 8006450:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006454:	4622      	mov	r2, r4
 8006456:	462b      	mov	r3, r5
 8006458:	f04f 0000 	mov.w	r0, #0
 800645c:	f04f 0100 	mov.w	r1, #0
 8006460:	0159      	lsls	r1, r3, #5
 8006462:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006466:	0150      	lsls	r0, r2, #5
 8006468:	4602      	mov	r2, r0
 800646a:	460b      	mov	r3, r1
 800646c:	4621      	mov	r1, r4
 800646e:	1a51      	subs	r1, r2, r1
 8006470:	61b9      	str	r1, [r7, #24]
 8006472:	4629      	mov	r1, r5
 8006474:	eb63 0301 	sbc.w	r3, r3, r1
 8006478:	61fb      	str	r3, [r7, #28]
 800647a:	f04f 0200 	mov.w	r2, #0
 800647e:	f04f 0300 	mov.w	r3, #0
 8006482:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006486:	4659      	mov	r1, fp
 8006488:	018b      	lsls	r3, r1, #6
 800648a:	4651      	mov	r1, sl
 800648c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006490:	4651      	mov	r1, sl
 8006492:	018a      	lsls	r2, r1, #6
 8006494:	4651      	mov	r1, sl
 8006496:	ebb2 0801 	subs.w	r8, r2, r1
 800649a:	4659      	mov	r1, fp
 800649c:	eb63 0901 	sbc.w	r9, r3, r1
 80064a0:	f04f 0200 	mov.w	r2, #0
 80064a4:	f04f 0300 	mov.w	r3, #0
 80064a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064b4:	4690      	mov	r8, r2
 80064b6:	4699      	mov	r9, r3
 80064b8:	4623      	mov	r3, r4
 80064ba:	eb18 0303 	adds.w	r3, r8, r3
 80064be:	613b      	str	r3, [r7, #16]
 80064c0:	462b      	mov	r3, r5
 80064c2:	eb49 0303 	adc.w	r3, r9, r3
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	f04f 0200 	mov.w	r2, #0
 80064cc:	f04f 0300 	mov.w	r3, #0
 80064d0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80064d4:	4629      	mov	r1, r5
 80064d6:	024b      	lsls	r3, r1, #9
 80064d8:	4621      	mov	r1, r4
 80064da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80064de:	4621      	mov	r1, r4
 80064e0:	024a      	lsls	r2, r1, #9
 80064e2:	4610      	mov	r0, r2
 80064e4:	4619      	mov	r1, r3
 80064e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064ea:	2200      	movs	r2, #0
 80064ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80064ee:	65fa      	str	r2, [r7, #92]	; 0x5c
 80064f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80064f4:	f7fa fb88 	bl	8000c08 <__aeabi_uldivmod>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	4613      	mov	r3, r2
 80064fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006502:	e065      	b.n	80065d0 <HAL_RCC_GetSysClockFreq+0x420>
 8006504:	40023800 	.word	0x40023800
 8006508:	00f42400 	.word	0x00f42400
 800650c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006510:	4b3d      	ldr	r3, [pc, #244]	; (8006608 <HAL_RCC_GetSysClockFreq+0x458>)
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	099b      	lsrs	r3, r3, #6
 8006516:	2200      	movs	r2, #0
 8006518:	4618      	mov	r0, r3
 800651a:	4611      	mov	r1, r2
 800651c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006520:	653b      	str	r3, [r7, #80]	; 0x50
 8006522:	2300      	movs	r3, #0
 8006524:	657b      	str	r3, [r7, #84]	; 0x54
 8006526:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800652a:	4642      	mov	r2, r8
 800652c:	464b      	mov	r3, r9
 800652e:	f04f 0000 	mov.w	r0, #0
 8006532:	f04f 0100 	mov.w	r1, #0
 8006536:	0159      	lsls	r1, r3, #5
 8006538:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800653c:	0150      	lsls	r0, r2, #5
 800653e:	4602      	mov	r2, r0
 8006540:	460b      	mov	r3, r1
 8006542:	4641      	mov	r1, r8
 8006544:	1a51      	subs	r1, r2, r1
 8006546:	60b9      	str	r1, [r7, #8]
 8006548:	4649      	mov	r1, r9
 800654a:	eb63 0301 	sbc.w	r3, r3, r1
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	f04f 0200 	mov.w	r2, #0
 8006554:	f04f 0300 	mov.w	r3, #0
 8006558:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800655c:	4659      	mov	r1, fp
 800655e:	018b      	lsls	r3, r1, #6
 8006560:	4651      	mov	r1, sl
 8006562:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006566:	4651      	mov	r1, sl
 8006568:	018a      	lsls	r2, r1, #6
 800656a:	4651      	mov	r1, sl
 800656c:	1a54      	subs	r4, r2, r1
 800656e:	4659      	mov	r1, fp
 8006570:	eb63 0501 	sbc.w	r5, r3, r1
 8006574:	f04f 0200 	mov.w	r2, #0
 8006578:	f04f 0300 	mov.w	r3, #0
 800657c:	00eb      	lsls	r3, r5, #3
 800657e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006582:	00e2      	lsls	r2, r4, #3
 8006584:	4614      	mov	r4, r2
 8006586:	461d      	mov	r5, r3
 8006588:	4643      	mov	r3, r8
 800658a:	18e3      	adds	r3, r4, r3
 800658c:	603b      	str	r3, [r7, #0]
 800658e:	464b      	mov	r3, r9
 8006590:	eb45 0303 	adc.w	r3, r5, r3
 8006594:	607b      	str	r3, [r7, #4]
 8006596:	f04f 0200 	mov.w	r2, #0
 800659a:	f04f 0300 	mov.w	r3, #0
 800659e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80065a2:	4629      	mov	r1, r5
 80065a4:	028b      	lsls	r3, r1, #10
 80065a6:	4621      	mov	r1, r4
 80065a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80065ac:	4621      	mov	r1, r4
 80065ae:	028a      	lsls	r2, r1, #10
 80065b0:	4610      	mov	r0, r2
 80065b2:	4619      	mov	r1, r3
 80065b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065b8:	2200      	movs	r2, #0
 80065ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80065bc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80065be:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80065c2:	f7fa fb21 	bl	8000c08 <__aeabi_uldivmod>
 80065c6:	4602      	mov	r2, r0
 80065c8:	460b      	mov	r3, r1
 80065ca:	4613      	mov	r3, r2
 80065cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80065d0:	4b0d      	ldr	r3, [pc, #52]	; (8006608 <HAL_RCC_GetSysClockFreq+0x458>)
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	0f1b      	lsrs	r3, r3, #28
 80065d6:	f003 0307 	and.w	r3, r3, #7
 80065da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80065de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80065e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80065e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80065ee:	e003      	b.n	80065f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065f0:	4b06      	ldr	r3, [pc, #24]	; (800660c <HAL_RCC_GetSysClockFreq+0x45c>)
 80065f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80065f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	37b8      	adds	r7, #184	; 0xb8
 8006600:	46bd      	mov	sp, r7
 8006602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006606:	bf00      	nop
 8006608:	40023800 	.word	0x40023800
 800660c:	00f42400 	.word	0x00f42400

08006610 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b086      	sub	sp, #24
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d101      	bne.n	8006622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e28d      	b.n	8006b3e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b00      	cmp	r3, #0
 800662c:	f000 8083 	beq.w	8006736 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006630:	4b94      	ldr	r3, [pc, #592]	; (8006884 <HAL_RCC_OscConfig+0x274>)
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f003 030c 	and.w	r3, r3, #12
 8006638:	2b04      	cmp	r3, #4
 800663a:	d019      	beq.n	8006670 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800663c:	4b91      	ldr	r3, [pc, #580]	; (8006884 <HAL_RCC_OscConfig+0x274>)
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006644:	2b08      	cmp	r3, #8
 8006646:	d106      	bne.n	8006656 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006648:	4b8e      	ldr	r3, [pc, #568]	; (8006884 <HAL_RCC_OscConfig+0x274>)
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006650:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006654:	d00c      	beq.n	8006670 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006656:	4b8b      	ldr	r3, [pc, #556]	; (8006884 <HAL_RCC_OscConfig+0x274>)
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800665e:	2b0c      	cmp	r3, #12
 8006660:	d112      	bne.n	8006688 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006662:	4b88      	ldr	r3, [pc, #544]	; (8006884 <HAL_RCC_OscConfig+0x274>)
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800666a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800666e:	d10b      	bne.n	8006688 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006670:	4b84      	ldr	r3, [pc, #528]	; (8006884 <HAL_RCC_OscConfig+0x274>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d05b      	beq.n	8006734 <HAL_RCC_OscConfig+0x124>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d157      	bne.n	8006734 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e25a      	b.n	8006b3e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006690:	d106      	bne.n	80066a0 <HAL_RCC_OscConfig+0x90>
 8006692:	4b7c      	ldr	r3, [pc, #496]	; (8006884 <HAL_RCC_OscConfig+0x274>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a7b      	ldr	r2, [pc, #492]	; (8006884 <HAL_RCC_OscConfig+0x274>)
 8006698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800669c:	6013      	str	r3, [r2, #0]
 800669e:	e01d      	b.n	80066dc <HAL_RCC_OscConfig+0xcc>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066a8:	d10c      	bne.n	80066c4 <HAL_RCC_OscConfig+0xb4>
 80066aa:	4b76      	ldr	r3, [pc, #472]	; (8006884 <HAL_RCC_OscConfig+0x274>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a75      	ldr	r2, [pc, #468]	; (8006884 <HAL_RCC_OscConfig+0x274>)
 80066b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066b4:	6013      	str	r3, [r2, #0]
 80066b6:	4b73      	ldr	r3, [pc, #460]	; (8006884 <HAL_RCC_OscConfig+0x274>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a72      	ldr	r2, [pc, #456]	; (8006884 <HAL_RCC_OscConfig+0x274>)
 80066bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066c0:	6013      	str	r3, [r2, #0]
 80066c2:	e00b      	b.n	80066dc <HAL_RCC_OscConfig+0xcc>
 80066c4:	4b6f      	ldr	r3, [pc, #444]	; (8006884 <HAL_RCC_OscConfig+0x274>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a6e      	ldr	r2, [pc, #440]	; (8006884 <HAL_RCC_OscConfig+0x274>)
 80066ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066ce:	6013      	str	r3, [r2, #0]
 80066d0:	4b6c      	ldr	r3, [pc, #432]	; (8006884 <HAL_RCC_OscConfig+0x274>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a6b      	ldr	r2, [pc, #428]	; (8006884 <HAL_RCC_OscConfig+0x274>)
 80066d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d013      	beq.n	800670c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e4:	f7fe fce2 	bl	80050ac <HAL_GetTick>
 80066e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066ea:	e008      	b.n	80066fe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066ec:	f7fe fcde 	bl	80050ac <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	2b64      	cmp	r3, #100	; 0x64
 80066f8:	d901      	bls.n	80066fe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e21f      	b.n	8006b3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066fe:	4b61      	ldr	r3, [pc, #388]	; (8006884 <HAL_RCC_OscConfig+0x274>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d0f0      	beq.n	80066ec <HAL_RCC_OscConfig+0xdc>
 800670a:	e014      	b.n	8006736 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800670c:	f7fe fcce 	bl	80050ac <HAL_GetTick>
 8006710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006712:	e008      	b.n	8006726 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006714:	f7fe fcca 	bl	80050ac <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	2b64      	cmp	r3, #100	; 0x64
 8006720:	d901      	bls.n	8006726 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e20b      	b.n	8006b3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006726:	4b57      	ldr	r3, [pc, #348]	; (8006884 <HAL_RCC_OscConfig+0x274>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1f0      	bne.n	8006714 <HAL_RCC_OscConfig+0x104>
 8006732:	e000      	b.n	8006736 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0302 	and.w	r3, r3, #2
 800673e:	2b00      	cmp	r3, #0
 8006740:	d06f      	beq.n	8006822 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006742:	4b50      	ldr	r3, [pc, #320]	; (8006884 <HAL_RCC_OscConfig+0x274>)
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f003 030c 	and.w	r3, r3, #12
 800674a:	2b00      	cmp	r3, #0
 800674c:	d017      	beq.n	800677e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800674e:	4b4d      	ldr	r3, [pc, #308]	; (8006884 <HAL_RCC_OscConfig+0x274>)
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006756:	2b08      	cmp	r3, #8
 8006758:	d105      	bne.n	8006766 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800675a:	4b4a      	ldr	r3, [pc, #296]	; (8006884 <HAL_RCC_OscConfig+0x274>)
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00b      	beq.n	800677e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006766:	4b47      	ldr	r3, [pc, #284]	; (8006884 <HAL_RCC_OscConfig+0x274>)
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800676e:	2b0c      	cmp	r3, #12
 8006770:	d11c      	bne.n	80067ac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006772:	4b44      	ldr	r3, [pc, #272]	; (8006884 <HAL_RCC_OscConfig+0x274>)
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d116      	bne.n	80067ac <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800677e:	4b41      	ldr	r3, [pc, #260]	; (8006884 <HAL_RCC_OscConfig+0x274>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0302 	and.w	r3, r3, #2
 8006786:	2b00      	cmp	r3, #0
 8006788:	d005      	beq.n	8006796 <HAL_RCC_OscConfig+0x186>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	2b01      	cmp	r3, #1
 8006790:	d001      	beq.n	8006796 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e1d3      	b.n	8006b3e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006796:	4b3b      	ldr	r3, [pc, #236]	; (8006884 <HAL_RCC_OscConfig+0x274>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	00db      	lsls	r3, r3, #3
 80067a4:	4937      	ldr	r1, [pc, #220]	; (8006884 <HAL_RCC_OscConfig+0x274>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067aa:	e03a      	b.n	8006822 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d020      	beq.n	80067f6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067b4:	4b34      	ldr	r3, [pc, #208]	; (8006888 <HAL_RCC_OscConfig+0x278>)
 80067b6:	2201      	movs	r2, #1
 80067b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ba:	f7fe fc77 	bl	80050ac <HAL_GetTick>
 80067be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067c0:	e008      	b.n	80067d4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067c2:	f7fe fc73 	bl	80050ac <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d901      	bls.n	80067d4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e1b4      	b.n	8006b3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067d4:	4b2b      	ldr	r3, [pc, #172]	; (8006884 <HAL_RCC_OscConfig+0x274>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0302 	and.w	r3, r3, #2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d0f0      	beq.n	80067c2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067e0:	4b28      	ldr	r3, [pc, #160]	; (8006884 <HAL_RCC_OscConfig+0x274>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	00db      	lsls	r3, r3, #3
 80067ee:	4925      	ldr	r1, [pc, #148]	; (8006884 <HAL_RCC_OscConfig+0x274>)
 80067f0:	4313      	orrs	r3, r2
 80067f2:	600b      	str	r3, [r1, #0]
 80067f4:	e015      	b.n	8006822 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067f6:	4b24      	ldr	r3, [pc, #144]	; (8006888 <HAL_RCC_OscConfig+0x278>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067fc:	f7fe fc56 	bl	80050ac <HAL_GetTick>
 8006800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006802:	e008      	b.n	8006816 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006804:	f7fe fc52 	bl	80050ac <HAL_GetTick>
 8006808:	4602      	mov	r2, r0
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	2b02      	cmp	r3, #2
 8006810:	d901      	bls.n	8006816 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e193      	b.n	8006b3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006816:	4b1b      	ldr	r3, [pc, #108]	; (8006884 <HAL_RCC_OscConfig+0x274>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0302 	and.w	r3, r3, #2
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1f0      	bne.n	8006804 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0308 	and.w	r3, r3, #8
 800682a:	2b00      	cmp	r3, #0
 800682c:	d036      	beq.n	800689c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d016      	beq.n	8006864 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006836:	4b15      	ldr	r3, [pc, #84]	; (800688c <HAL_RCC_OscConfig+0x27c>)
 8006838:	2201      	movs	r2, #1
 800683a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800683c:	f7fe fc36 	bl	80050ac <HAL_GetTick>
 8006840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006842:	e008      	b.n	8006856 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006844:	f7fe fc32 	bl	80050ac <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	2b02      	cmp	r3, #2
 8006850:	d901      	bls.n	8006856 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e173      	b.n	8006b3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006856:	4b0b      	ldr	r3, [pc, #44]	; (8006884 <HAL_RCC_OscConfig+0x274>)
 8006858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800685a:	f003 0302 	and.w	r3, r3, #2
 800685e:	2b00      	cmp	r3, #0
 8006860:	d0f0      	beq.n	8006844 <HAL_RCC_OscConfig+0x234>
 8006862:	e01b      	b.n	800689c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006864:	4b09      	ldr	r3, [pc, #36]	; (800688c <HAL_RCC_OscConfig+0x27c>)
 8006866:	2200      	movs	r2, #0
 8006868:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800686a:	f7fe fc1f 	bl	80050ac <HAL_GetTick>
 800686e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006870:	e00e      	b.n	8006890 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006872:	f7fe fc1b 	bl	80050ac <HAL_GetTick>
 8006876:	4602      	mov	r2, r0
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	2b02      	cmp	r3, #2
 800687e:	d907      	bls.n	8006890 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e15c      	b.n	8006b3e <HAL_RCC_OscConfig+0x52e>
 8006884:	40023800 	.word	0x40023800
 8006888:	42470000 	.word	0x42470000
 800688c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006890:	4b8a      	ldr	r3, [pc, #552]	; (8006abc <HAL_RCC_OscConfig+0x4ac>)
 8006892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006894:	f003 0302 	and.w	r3, r3, #2
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1ea      	bne.n	8006872 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0304 	and.w	r3, r3, #4
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 8097 	beq.w	80069d8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068aa:	2300      	movs	r3, #0
 80068ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068ae:	4b83      	ldr	r3, [pc, #524]	; (8006abc <HAL_RCC_OscConfig+0x4ac>)
 80068b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10f      	bne.n	80068da <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068ba:	2300      	movs	r3, #0
 80068bc:	60bb      	str	r3, [r7, #8]
 80068be:	4b7f      	ldr	r3, [pc, #508]	; (8006abc <HAL_RCC_OscConfig+0x4ac>)
 80068c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c2:	4a7e      	ldr	r2, [pc, #504]	; (8006abc <HAL_RCC_OscConfig+0x4ac>)
 80068c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068c8:	6413      	str	r3, [r2, #64]	; 0x40
 80068ca:	4b7c      	ldr	r3, [pc, #496]	; (8006abc <HAL_RCC_OscConfig+0x4ac>)
 80068cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068d2:	60bb      	str	r3, [r7, #8]
 80068d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068d6:	2301      	movs	r3, #1
 80068d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068da:	4b79      	ldr	r3, [pc, #484]	; (8006ac0 <HAL_RCC_OscConfig+0x4b0>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d118      	bne.n	8006918 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068e6:	4b76      	ldr	r3, [pc, #472]	; (8006ac0 <HAL_RCC_OscConfig+0x4b0>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a75      	ldr	r2, [pc, #468]	; (8006ac0 <HAL_RCC_OscConfig+0x4b0>)
 80068ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068f2:	f7fe fbdb 	bl	80050ac <HAL_GetTick>
 80068f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068f8:	e008      	b.n	800690c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068fa:	f7fe fbd7 	bl	80050ac <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	2b02      	cmp	r3, #2
 8006906:	d901      	bls.n	800690c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e118      	b.n	8006b3e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800690c:	4b6c      	ldr	r3, [pc, #432]	; (8006ac0 <HAL_RCC_OscConfig+0x4b0>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006914:	2b00      	cmp	r3, #0
 8006916:	d0f0      	beq.n	80068fa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d106      	bne.n	800692e <HAL_RCC_OscConfig+0x31e>
 8006920:	4b66      	ldr	r3, [pc, #408]	; (8006abc <HAL_RCC_OscConfig+0x4ac>)
 8006922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006924:	4a65      	ldr	r2, [pc, #404]	; (8006abc <HAL_RCC_OscConfig+0x4ac>)
 8006926:	f043 0301 	orr.w	r3, r3, #1
 800692a:	6713      	str	r3, [r2, #112]	; 0x70
 800692c:	e01c      	b.n	8006968 <HAL_RCC_OscConfig+0x358>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	2b05      	cmp	r3, #5
 8006934:	d10c      	bne.n	8006950 <HAL_RCC_OscConfig+0x340>
 8006936:	4b61      	ldr	r3, [pc, #388]	; (8006abc <HAL_RCC_OscConfig+0x4ac>)
 8006938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800693a:	4a60      	ldr	r2, [pc, #384]	; (8006abc <HAL_RCC_OscConfig+0x4ac>)
 800693c:	f043 0304 	orr.w	r3, r3, #4
 8006940:	6713      	str	r3, [r2, #112]	; 0x70
 8006942:	4b5e      	ldr	r3, [pc, #376]	; (8006abc <HAL_RCC_OscConfig+0x4ac>)
 8006944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006946:	4a5d      	ldr	r2, [pc, #372]	; (8006abc <HAL_RCC_OscConfig+0x4ac>)
 8006948:	f043 0301 	orr.w	r3, r3, #1
 800694c:	6713      	str	r3, [r2, #112]	; 0x70
 800694e:	e00b      	b.n	8006968 <HAL_RCC_OscConfig+0x358>
 8006950:	4b5a      	ldr	r3, [pc, #360]	; (8006abc <HAL_RCC_OscConfig+0x4ac>)
 8006952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006954:	4a59      	ldr	r2, [pc, #356]	; (8006abc <HAL_RCC_OscConfig+0x4ac>)
 8006956:	f023 0301 	bic.w	r3, r3, #1
 800695a:	6713      	str	r3, [r2, #112]	; 0x70
 800695c:	4b57      	ldr	r3, [pc, #348]	; (8006abc <HAL_RCC_OscConfig+0x4ac>)
 800695e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006960:	4a56      	ldr	r2, [pc, #344]	; (8006abc <HAL_RCC_OscConfig+0x4ac>)
 8006962:	f023 0304 	bic.w	r3, r3, #4
 8006966:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d015      	beq.n	800699c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006970:	f7fe fb9c 	bl	80050ac <HAL_GetTick>
 8006974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006976:	e00a      	b.n	800698e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006978:	f7fe fb98 	bl	80050ac <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	f241 3288 	movw	r2, #5000	; 0x1388
 8006986:	4293      	cmp	r3, r2
 8006988:	d901      	bls.n	800698e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e0d7      	b.n	8006b3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800698e:	4b4b      	ldr	r3, [pc, #300]	; (8006abc <HAL_RCC_OscConfig+0x4ac>)
 8006990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006992:	f003 0302 	and.w	r3, r3, #2
 8006996:	2b00      	cmp	r3, #0
 8006998:	d0ee      	beq.n	8006978 <HAL_RCC_OscConfig+0x368>
 800699a:	e014      	b.n	80069c6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800699c:	f7fe fb86 	bl	80050ac <HAL_GetTick>
 80069a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069a2:	e00a      	b.n	80069ba <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069a4:	f7fe fb82 	bl	80050ac <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d901      	bls.n	80069ba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e0c1      	b.n	8006b3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069ba:	4b40      	ldr	r3, [pc, #256]	; (8006abc <HAL_RCC_OscConfig+0x4ac>)
 80069bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1ee      	bne.n	80069a4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069c6:	7dfb      	ldrb	r3, [r7, #23]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d105      	bne.n	80069d8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069cc:	4b3b      	ldr	r3, [pc, #236]	; (8006abc <HAL_RCC_OscConfig+0x4ac>)
 80069ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d0:	4a3a      	ldr	r2, [pc, #232]	; (8006abc <HAL_RCC_OscConfig+0x4ac>)
 80069d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f000 80ad 	beq.w	8006b3c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80069e2:	4b36      	ldr	r3, [pc, #216]	; (8006abc <HAL_RCC_OscConfig+0x4ac>)
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f003 030c 	and.w	r3, r3, #12
 80069ea:	2b08      	cmp	r3, #8
 80069ec:	d060      	beq.n	8006ab0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d145      	bne.n	8006a82 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069f6:	4b33      	ldr	r3, [pc, #204]	; (8006ac4 <HAL_RCC_OscConfig+0x4b4>)
 80069f8:	2200      	movs	r2, #0
 80069fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069fc:	f7fe fb56 	bl	80050ac <HAL_GetTick>
 8006a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a02:	e008      	b.n	8006a16 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a04:	f7fe fb52 	bl	80050ac <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d901      	bls.n	8006a16 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e093      	b.n	8006b3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a16:	4b29      	ldr	r3, [pc, #164]	; (8006abc <HAL_RCC_OscConfig+0x4ac>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1f0      	bne.n	8006a04 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	69da      	ldr	r2, [r3, #28]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	431a      	orrs	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a30:	019b      	lsls	r3, r3, #6
 8006a32:	431a      	orrs	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a38:	085b      	lsrs	r3, r3, #1
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	041b      	lsls	r3, r3, #16
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a44:	061b      	lsls	r3, r3, #24
 8006a46:	431a      	orrs	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4c:	071b      	lsls	r3, r3, #28
 8006a4e:	491b      	ldr	r1, [pc, #108]	; (8006abc <HAL_RCC_OscConfig+0x4ac>)
 8006a50:	4313      	orrs	r3, r2
 8006a52:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a54:	4b1b      	ldr	r3, [pc, #108]	; (8006ac4 <HAL_RCC_OscConfig+0x4b4>)
 8006a56:	2201      	movs	r2, #1
 8006a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a5a:	f7fe fb27 	bl	80050ac <HAL_GetTick>
 8006a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a60:	e008      	b.n	8006a74 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a62:	f7fe fb23 	bl	80050ac <HAL_GetTick>
 8006a66:	4602      	mov	r2, r0
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d901      	bls.n	8006a74 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e064      	b.n	8006b3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a74:	4b11      	ldr	r3, [pc, #68]	; (8006abc <HAL_RCC_OscConfig+0x4ac>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d0f0      	beq.n	8006a62 <HAL_RCC_OscConfig+0x452>
 8006a80:	e05c      	b.n	8006b3c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a82:	4b10      	ldr	r3, [pc, #64]	; (8006ac4 <HAL_RCC_OscConfig+0x4b4>)
 8006a84:	2200      	movs	r2, #0
 8006a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a88:	f7fe fb10 	bl	80050ac <HAL_GetTick>
 8006a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a8e:	e008      	b.n	8006aa2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a90:	f7fe fb0c 	bl	80050ac <HAL_GetTick>
 8006a94:	4602      	mov	r2, r0
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d901      	bls.n	8006aa2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e04d      	b.n	8006b3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aa2:	4b06      	ldr	r3, [pc, #24]	; (8006abc <HAL_RCC_OscConfig+0x4ac>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1f0      	bne.n	8006a90 <HAL_RCC_OscConfig+0x480>
 8006aae:	e045      	b.n	8006b3c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d107      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e040      	b.n	8006b3e <HAL_RCC_OscConfig+0x52e>
 8006abc:	40023800 	.word	0x40023800
 8006ac0:	40007000 	.word	0x40007000
 8006ac4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ac8:	4b1f      	ldr	r3, [pc, #124]	; (8006b48 <HAL_RCC_OscConfig+0x538>)
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d030      	beq.n	8006b38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d129      	bne.n	8006b38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d122      	bne.n	8006b38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006af8:	4013      	ands	r3, r2
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006afe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d119      	bne.n	8006b38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0e:	085b      	lsrs	r3, r3, #1
 8006b10:	3b01      	subs	r3, #1
 8006b12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d10f      	bne.n	8006b38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d107      	bne.n	8006b38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b32:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d001      	beq.n	8006b3c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e000      	b.n	8006b3e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3718      	adds	r7, #24
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	40023800 	.word	0x40023800

08006b4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d101      	bne.n	8006b5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e041      	b.n	8006be2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d106      	bne.n	8006b78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f7fe f806 	bl	8004b84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	3304      	adds	r3, #4
 8006b88:	4619      	mov	r1, r3
 8006b8a:	4610      	mov	r0, r2
 8006b8c:	f000 fa96 	bl	80070bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3708      	adds	r7, #8
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
	...

08006bec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d001      	beq.n	8006c04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e04e      	b.n	8006ca2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68da      	ldr	r2, [r3, #12]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f042 0201 	orr.w	r2, r2, #1
 8006c1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a23      	ldr	r2, [pc, #140]	; (8006cb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d022      	beq.n	8006c6c <HAL_TIM_Base_Start_IT+0x80>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c2e:	d01d      	beq.n	8006c6c <HAL_TIM_Base_Start_IT+0x80>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a1f      	ldr	r2, [pc, #124]	; (8006cb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d018      	beq.n	8006c6c <HAL_TIM_Base_Start_IT+0x80>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a1e      	ldr	r2, [pc, #120]	; (8006cb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d013      	beq.n	8006c6c <HAL_TIM_Base_Start_IT+0x80>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a1c      	ldr	r2, [pc, #112]	; (8006cbc <HAL_TIM_Base_Start_IT+0xd0>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d00e      	beq.n	8006c6c <HAL_TIM_Base_Start_IT+0x80>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a1b      	ldr	r2, [pc, #108]	; (8006cc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d009      	beq.n	8006c6c <HAL_TIM_Base_Start_IT+0x80>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a19      	ldr	r2, [pc, #100]	; (8006cc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d004      	beq.n	8006c6c <HAL_TIM_Base_Start_IT+0x80>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a18      	ldr	r2, [pc, #96]	; (8006cc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d111      	bne.n	8006c90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	f003 0307 	and.w	r3, r3, #7
 8006c76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2b06      	cmp	r3, #6
 8006c7c:	d010      	beq.n	8006ca0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f042 0201 	orr.w	r2, r2, #1
 8006c8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c8e:	e007      	b.n	8006ca0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f042 0201 	orr.w	r2, r2, #1
 8006c9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3714      	adds	r7, #20
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	40010000 	.word	0x40010000
 8006cb4:	40000400 	.word	0x40000400
 8006cb8:	40000800 	.word	0x40000800
 8006cbc:	40000c00 	.word	0x40000c00
 8006cc0:	40010400 	.word	0x40010400
 8006cc4:	40014000 	.word	0x40014000
 8006cc8:	40001800 	.word	0x40001800

08006ccc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	f003 0302 	and.w	r3, r3, #2
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d122      	bne.n	8006d28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	f003 0302 	and.w	r3, r3, #2
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d11b      	bne.n	8006d28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f06f 0202 	mvn.w	r2, #2
 8006cf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	f003 0303 	and.w	r3, r3, #3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d003      	beq.n	8006d16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f9b5 	bl	800707e <HAL_TIM_IC_CaptureCallback>
 8006d14:	e005      	b.n	8006d22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 f9a7 	bl	800706a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f9b8 	bl	8007092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	f003 0304 	and.w	r3, r3, #4
 8006d32:	2b04      	cmp	r3, #4
 8006d34:	d122      	bne.n	8006d7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	f003 0304 	and.w	r3, r3, #4
 8006d40:	2b04      	cmp	r3, #4
 8006d42:	d11b      	bne.n	8006d7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f06f 0204 	mvn.w	r2, #4
 8006d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2202      	movs	r2, #2
 8006d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d003      	beq.n	8006d6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f98b 	bl	800707e <HAL_TIM_IC_CaptureCallback>
 8006d68:	e005      	b.n	8006d76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 f97d 	bl	800706a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 f98e 	bl	8007092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	f003 0308 	and.w	r3, r3, #8
 8006d86:	2b08      	cmp	r3, #8
 8006d88:	d122      	bne.n	8006dd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	f003 0308 	and.w	r3, r3, #8
 8006d94:	2b08      	cmp	r3, #8
 8006d96:	d11b      	bne.n	8006dd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f06f 0208 	mvn.w	r2, #8
 8006da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2204      	movs	r2, #4
 8006da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	f003 0303 	and.w	r3, r3, #3
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d003      	beq.n	8006dbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f961 	bl	800707e <HAL_TIM_IC_CaptureCallback>
 8006dbc:	e005      	b.n	8006dca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f953 	bl	800706a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f964 	bl	8007092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	f003 0310 	and.w	r3, r3, #16
 8006dda:	2b10      	cmp	r3, #16
 8006ddc:	d122      	bne.n	8006e24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	f003 0310 	and.w	r3, r3, #16
 8006de8:	2b10      	cmp	r3, #16
 8006dea:	d11b      	bne.n	8006e24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f06f 0210 	mvn.w	r2, #16
 8006df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2208      	movs	r2, #8
 8006dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	69db      	ldr	r3, [r3, #28]
 8006e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d003      	beq.n	8006e12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f937 	bl	800707e <HAL_TIM_IC_CaptureCallback>
 8006e10:	e005      	b.n	8006e1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f929 	bl	800706a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f93a 	bl	8007092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d10e      	bne.n	8006e50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	f003 0301 	and.w	r3, r3, #1
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d107      	bne.n	8006e50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f06f 0201 	mvn.w	r2, #1
 8006e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f7fa fc28 	bl	80016a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e5a:	2b80      	cmp	r3, #128	; 0x80
 8006e5c:	d10e      	bne.n	8006e7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e68:	2b80      	cmp	r3, #128	; 0x80
 8006e6a:	d107      	bne.n	8006e7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fae0 	bl	800743c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e86:	2b40      	cmp	r3, #64	; 0x40
 8006e88:	d10e      	bne.n	8006ea8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e94:	2b40      	cmp	r3, #64	; 0x40
 8006e96:	d107      	bne.n	8006ea8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f8ff 	bl	80070a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	f003 0320 	and.w	r3, r3, #32
 8006eb2:	2b20      	cmp	r3, #32
 8006eb4:	d10e      	bne.n	8006ed4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	f003 0320 	and.w	r3, r3, #32
 8006ec0:	2b20      	cmp	r3, #32
 8006ec2:	d107      	bne.n	8006ed4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f06f 0220 	mvn.w	r2, #32
 8006ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 faaa 	bl	8007428 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ed4:	bf00      	nop
 8006ed6:	3708      	adds	r7, #8
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d101      	bne.n	8006ef8 <HAL_TIM_ConfigClockSource+0x1c>
 8006ef4:	2302      	movs	r3, #2
 8006ef6:	e0b4      	b.n	8007062 <HAL_TIM_ConfigClockSource+0x186>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2202      	movs	r2, #2
 8006f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f30:	d03e      	beq.n	8006fb0 <HAL_TIM_ConfigClockSource+0xd4>
 8006f32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f36:	f200 8087 	bhi.w	8007048 <HAL_TIM_ConfigClockSource+0x16c>
 8006f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f3e:	f000 8086 	beq.w	800704e <HAL_TIM_ConfigClockSource+0x172>
 8006f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f46:	d87f      	bhi.n	8007048 <HAL_TIM_ConfigClockSource+0x16c>
 8006f48:	2b70      	cmp	r3, #112	; 0x70
 8006f4a:	d01a      	beq.n	8006f82 <HAL_TIM_ConfigClockSource+0xa6>
 8006f4c:	2b70      	cmp	r3, #112	; 0x70
 8006f4e:	d87b      	bhi.n	8007048 <HAL_TIM_ConfigClockSource+0x16c>
 8006f50:	2b60      	cmp	r3, #96	; 0x60
 8006f52:	d050      	beq.n	8006ff6 <HAL_TIM_ConfigClockSource+0x11a>
 8006f54:	2b60      	cmp	r3, #96	; 0x60
 8006f56:	d877      	bhi.n	8007048 <HAL_TIM_ConfigClockSource+0x16c>
 8006f58:	2b50      	cmp	r3, #80	; 0x50
 8006f5a:	d03c      	beq.n	8006fd6 <HAL_TIM_ConfigClockSource+0xfa>
 8006f5c:	2b50      	cmp	r3, #80	; 0x50
 8006f5e:	d873      	bhi.n	8007048 <HAL_TIM_ConfigClockSource+0x16c>
 8006f60:	2b40      	cmp	r3, #64	; 0x40
 8006f62:	d058      	beq.n	8007016 <HAL_TIM_ConfigClockSource+0x13a>
 8006f64:	2b40      	cmp	r3, #64	; 0x40
 8006f66:	d86f      	bhi.n	8007048 <HAL_TIM_ConfigClockSource+0x16c>
 8006f68:	2b30      	cmp	r3, #48	; 0x30
 8006f6a:	d064      	beq.n	8007036 <HAL_TIM_ConfigClockSource+0x15a>
 8006f6c:	2b30      	cmp	r3, #48	; 0x30
 8006f6e:	d86b      	bhi.n	8007048 <HAL_TIM_ConfigClockSource+0x16c>
 8006f70:	2b20      	cmp	r3, #32
 8006f72:	d060      	beq.n	8007036 <HAL_TIM_ConfigClockSource+0x15a>
 8006f74:	2b20      	cmp	r3, #32
 8006f76:	d867      	bhi.n	8007048 <HAL_TIM_ConfigClockSource+0x16c>
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d05c      	beq.n	8007036 <HAL_TIM_ConfigClockSource+0x15a>
 8006f7c:	2b10      	cmp	r3, #16
 8006f7e:	d05a      	beq.n	8007036 <HAL_TIM_ConfigClockSource+0x15a>
 8006f80:	e062      	b.n	8007048 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f92:	f000 f9ad 	bl	80072f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006fa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	609a      	str	r2, [r3, #8]
      break;
 8006fae:	e04f      	b.n	8007050 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006fc0:	f000 f996 	bl	80072f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	689a      	ldr	r2, [r3, #8]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fd2:	609a      	str	r2, [r3, #8]
      break;
 8006fd4:	e03c      	b.n	8007050 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	f000 f90a 	bl	80071fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2150      	movs	r1, #80	; 0x50
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f000 f963 	bl	80072ba <TIM_ITRx_SetConfig>
      break;
 8006ff4:	e02c      	b.n	8007050 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007002:	461a      	mov	r2, r3
 8007004:	f000 f929 	bl	800725a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2160      	movs	r1, #96	; 0x60
 800700e:	4618      	mov	r0, r3
 8007010:	f000 f953 	bl	80072ba <TIM_ITRx_SetConfig>
      break;
 8007014:	e01c      	b.n	8007050 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007022:	461a      	mov	r2, r3
 8007024:	f000 f8ea 	bl	80071fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2140      	movs	r1, #64	; 0x40
 800702e:	4618      	mov	r0, r3
 8007030:	f000 f943 	bl	80072ba <TIM_ITRx_SetConfig>
      break;
 8007034:	e00c      	b.n	8007050 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4619      	mov	r1, r3
 8007040:	4610      	mov	r0, r2
 8007042:	f000 f93a 	bl	80072ba <TIM_ITRx_SetConfig>
      break;
 8007046:	e003      	b.n	8007050 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	73fb      	strb	r3, [r7, #15]
      break;
 800704c:	e000      	b.n	8007050 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800704e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007060:	7bfb      	ldrb	r3, [r7, #15]
}
 8007062:	4618      	mov	r0, r3
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800706a:	b480      	push	{r7}
 800706c:	b083      	sub	sp, #12
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007072:	bf00      	nop
 8007074:	370c      	adds	r7, #12
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr

0800707e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800707e:	b480      	push	{r7}
 8007080:	b083      	sub	sp, #12
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007086:	bf00      	nop
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007092:	b480      	push	{r7}
 8007094:	b083      	sub	sp, #12
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800709a:	bf00      	nop
 800709c:	370c      	adds	r7, #12
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr

080070a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070a6:	b480      	push	{r7}
 80070a8:	b083      	sub	sp, #12
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070ae:	bf00      	nop
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
	...

080070bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a40      	ldr	r2, [pc, #256]	; (80071d0 <TIM_Base_SetConfig+0x114>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d013      	beq.n	80070fc <TIM_Base_SetConfig+0x40>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070da:	d00f      	beq.n	80070fc <TIM_Base_SetConfig+0x40>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a3d      	ldr	r2, [pc, #244]	; (80071d4 <TIM_Base_SetConfig+0x118>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d00b      	beq.n	80070fc <TIM_Base_SetConfig+0x40>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a3c      	ldr	r2, [pc, #240]	; (80071d8 <TIM_Base_SetConfig+0x11c>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d007      	beq.n	80070fc <TIM_Base_SetConfig+0x40>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a3b      	ldr	r2, [pc, #236]	; (80071dc <TIM_Base_SetConfig+0x120>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d003      	beq.n	80070fc <TIM_Base_SetConfig+0x40>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a3a      	ldr	r2, [pc, #232]	; (80071e0 <TIM_Base_SetConfig+0x124>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d108      	bne.n	800710e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	4313      	orrs	r3, r2
 800710c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a2f      	ldr	r2, [pc, #188]	; (80071d0 <TIM_Base_SetConfig+0x114>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d02b      	beq.n	800716e <TIM_Base_SetConfig+0xb2>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800711c:	d027      	beq.n	800716e <TIM_Base_SetConfig+0xb2>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a2c      	ldr	r2, [pc, #176]	; (80071d4 <TIM_Base_SetConfig+0x118>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d023      	beq.n	800716e <TIM_Base_SetConfig+0xb2>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a2b      	ldr	r2, [pc, #172]	; (80071d8 <TIM_Base_SetConfig+0x11c>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d01f      	beq.n	800716e <TIM_Base_SetConfig+0xb2>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a2a      	ldr	r2, [pc, #168]	; (80071dc <TIM_Base_SetConfig+0x120>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d01b      	beq.n	800716e <TIM_Base_SetConfig+0xb2>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a29      	ldr	r2, [pc, #164]	; (80071e0 <TIM_Base_SetConfig+0x124>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d017      	beq.n	800716e <TIM_Base_SetConfig+0xb2>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a28      	ldr	r2, [pc, #160]	; (80071e4 <TIM_Base_SetConfig+0x128>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d013      	beq.n	800716e <TIM_Base_SetConfig+0xb2>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a27      	ldr	r2, [pc, #156]	; (80071e8 <TIM_Base_SetConfig+0x12c>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d00f      	beq.n	800716e <TIM_Base_SetConfig+0xb2>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a26      	ldr	r2, [pc, #152]	; (80071ec <TIM_Base_SetConfig+0x130>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d00b      	beq.n	800716e <TIM_Base_SetConfig+0xb2>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a25      	ldr	r2, [pc, #148]	; (80071f0 <TIM_Base_SetConfig+0x134>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d007      	beq.n	800716e <TIM_Base_SetConfig+0xb2>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a24      	ldr	r2, [pc, #144]	; (80071f4 <TIM_Base_SetConfig+0x138>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d003      	beq.n	800716e <TIM_Base_SetConfig+0xb2>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a23      	ldr	r2, [pc, #140]	; (80071f8 <TIM_Base_SetConfig+0x13c>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d108      	bne.n	8007180 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	4313      	orrs	r3, r2
 800717e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	695b      	ldr	r3, [r3, #20]
 800718a:	4313      	orrs	r3, r2
 800718c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	689a      	ldr	r2, [r3, #8]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a0a      	ldr	r2, [pc, #40]	; (80071d0 <TIM_Base_SetConfig+0x114>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d003      	beq.n	80071b4 <TIM_Base_SetConfig+0xf8>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a0c      	ldr	r2, [pc, #48]	; (80071e0 <TIM_Base_SetConfig+0x124>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d103      	bne.n	80071bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	691a      	ldr	r2, [r3, #16]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	615a      	str	r2, [r3, #20]
}
 80071c2:	bf00      	nop
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	40010000 	.word	0x40010000
 80071d4:	40000400 	.word	0x40000400
 80071d8:	40000800 	.word	0x40000800
 80071dc:	40000c00 	.word	0x40000c00
 80071e0:	40010400 	.word	0x40010400
 80071e4:	40014000 	.word	0x40014000
 80071e8:	40014400 	.word	0x40014400
 80071ec:	40014800 	.word	0x40014800
 80071f0:	40001800 	.word	0x40001800
 80071f4:	40001c00 	.word	0x40001c00
 80071f8:	40002000 	.word	0x40002000

080071fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b087      	sub	sp, #28
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6a1b      	ldr	r3, [r3, #32]
 800720c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	f023 0201 	bic.w	r2, r3, #1
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007226:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	011b      	lsls	r3, r3, #4
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	4313      	orrs	r3, r2
 8007230:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	f023 030a 	bic.w	r3, r3, #10
 8007238:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	4313      	orrs	r3, r2
 8007240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	697a      	ldr	r2, [r7, #20]
 800724c:	621a      	str	r2, [r3, #32]
}
 800724e:	bf00      	nop
 8007250:	371c      	adds	r7, #28
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr

0800725a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800725a:	b480      	push	{r7}
 800725c:	b087      	sub	sp, #28
 800725e:	af00      	add	r7, sp, #0
 8007260:	60f8      	str	r0, [r7, #12]
 8007262:	60b9      	str	r1, [r7, #8]
 8007264:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6a1b      	ldr	r3, [r3, #32]
 800726a:	f023 0210 	bic.w	r2, r3, #16
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6a1b      	ldr	r3, [r3, #32]
 800727c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007284:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	031b      	lsls	r3, r3, #12
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	4313      	orrs	r3, r2
 800728e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007296:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	011b      	lsls	r3, r3, #4
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	4313      	orrs	r3, r2
 80072a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	621a      	str	r2, [r3, #32]
}
 80072ae:	bf00      	nop
 80072b0:	371c      	adds	r7, #28
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr

080072ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072ba:	b480      	push	{r7}
 80072bc:	b085      	sub	sp, #20
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
 80072c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072d2:	683a      	ldr	r2, [r7, #0]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	f043 0307 	orr.w	r3, r3, #7
 80072dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	609a      	str	r2, [r3, #8]
}
 80072e4:	bf00      	nop
 80072e6:	3714      	adds	r7, #20
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b087      	sub	sp, #28
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
 80072fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800730a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	021a      	lsls	r2, r3, #8
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	431a      	orrs	r2, r3
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	4313      	orrs	r3, r2
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	4313      	orrs	r3, r2
 800731c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	697a      	ldr	r2, [r7, #20]
 8007322:	609a      	str	r2, [r3, #8]
}
 8007324:	bf00      	nop
 8007326:	371c      	adds	r7, #28
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007340:	2b01      	cmp	r3, #1
 8007342:	d101      	bne.n	8007348 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007344:	2302      	movs	r3, #2
 8007346:	e05a      	b.n	80073fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2202      	movs	r2, #2
 8007354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800736e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	4313      	orrs	r3, r2
 8007378:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a21      	ldr	r2, [pc, #132]	; (800740c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d022      	beq.n	80073d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007394:	d01d      	beq.n	80073d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a1d      	ldr	r2, [pc, #116]	; (8007410 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d018      	beq.n	80073d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a1b      	ldr	r2, [pc, #108]	; (8007414 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d013      	beq.n	80073d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a1a      	ldr	r2, [pc, #104]	; (8007418 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d00e      	beq.n	80073d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a18      	ldr	r2, [pc, #96]	; (800741c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d009      	beq.n	80073d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a17      	ldr	r2, [pc, #92]	; (8007420 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d004      	beq.n	80073d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a15      	ldr	r2, [pc, #84]	; (8007424 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d10c      	bne.n	80073ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3714      	adds	r7, #20
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	40010000 	.word	0x40010000
 8007410:	40000400 	.word	0x40000400
 8007414:	40000800 	.word	0x40000800
 8007418:	40000c00 	.word	0x40000c00
 800741c:	40010400 	.word	0x40010400
 8007420:	40014000 	.word	0x40014000
 8007424:	40001800 	.word	0x40001800

08007428 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007444:	bf00      	nop
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e042      	b.n	80074e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d106      	bne.n	800747c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f7fd fbaa 	bl	8004bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2224      	movs	r2, #36	; 0x24
 8007480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68da      	ldr	r2, [r3, #12]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007492:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 ffd9 	bl	800844c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	691a      	ldr	r2, [r3, #16]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	695a      	ldr	r2, [r3, #20]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68da      	ldr	r2, [r3, #12]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2220      	movs	r2, #32
 80074d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2220      	movs	r2, #32
 80074dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3708      	adds	r7, #8
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b08c      	sub	sp, #48	; 0x30
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	4613      	mov	r3, r2
 80074fc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b20      	cmp	r3, #32
 8007508:	d156      	bne.n	80075b8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d002      	beq.n	8007516 <HAL_UART_Transmit_DMA+0x26>
 8007510:	88fb      	ldrh	r3, [r7, #6]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d101      	bne.n	800751a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e04f      	b.n	80075ba <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	88fa      	ldrh	r2, [r7, #6]
 8007524:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	88fa      	ldrh	r2, [r7, #6]
 800752a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2221      	movs	r2, #33	; 0x21
 8007536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753e:	4a21      	ldr	r2, [pc, #132]	; (80075c4 <HAL_UART_Transmit_DMA+0xd4>)
 8007540:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007546:	4a20      	ldr	r2, [pc, #128]	; (80075c8 <HAL_UART_Transmit_DMA+0xd8>)
 8007548:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754e:	4a1f      	ldr	r2, [pc, #124]	; (80075cc <HAL_UART_Transmit_DMA+0xdc>)
 8007550:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007556:	2200      	movs	r2, #0
 8007558:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800755a:	f107 0308 	add.w	r3, r7, #8
 800755e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007566:	6819      	ldr	r1, [r3, #0]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	3304      	adds	r3, #4
 800756e:	461a      	mov	r2, r3
 8007570:	88fb      	ldrh	r3, [r7, #6]
 8007572:	f7fd ff8b 	bl	800548c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800757e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	3314      	adds	r3, #20
 8007586:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	e853 3f00 	ldrex	r3, [r3]
 800758e:	617b      	str	r3, [r7, #20]
   return(result);
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007596:	62bb      	str	r3, [r7, #40]	; 0x28
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	3314      	adds	r3, #20
 800759e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075a0:	627a      	str	r2, [r7, #36]	; 0x24
 80075a2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a4:	6a39      	ldr	r1, [r7, #32]
 80075a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075a8:	e841 2300 	strex	r3, r2, [r1]
 80075ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1e5      	bne.n	8007580 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80075b4:	2300      	movs	r3, #0
 80075b6:	e000      	b.n	80075ba <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80075b8:	2302      	movs	r3, #2
  }
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3730      	adds	r7, #48	; 0x30
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	08007cd9 	.word	0x08007cd9
 80075c8:	08007d73 	.word	0x08007d73
 80075cc:	08007ef7 	.word	0x08007ef7

080075d0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	4613      	mov	r3, r2
 80075dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	2b20      	cmp	r3, #32
 80075e8:	d112      	bne.n	8007610 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d002      	beq.n	80075f6 <HAL_UART_Receive_DMA+0x26>
 80075f0:	88fb      	ldrh	r3, [r7, #6]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d101      	bne.n	80075fa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e00b      	b.n	8007612 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007600:	88fb      	ldrh	r3, [r7, #6]
 8007602:	461a      	mov	r2, r3
 8007604:	68b9      	ldr	r1, [r7, #8]
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f000 fcc0 	bl	8007f8c <UART_Start_Receive_DMA>
 800760c:	4603      	mov	r3, r0
 800760e:	e000      	b.n	8007612 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007610:	2302      	movs	r3, #2
  }
}
 8007612:	4618      	mov	r0, r3
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b09a      	sub	sp, #104	; 0x68
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	330c      	adds	r3, #12
 8007628:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800762c:	e853 3f00 	ldrex	r3, [r3]
 8007630:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007634:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007638:	667b      	str	r3, [r7, #100]	; 0x64
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	330c      	adds	r3, #12
 8007640:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007642:	657a      	str	r2, [r7, #84]	; 0x54
 8007644:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007646:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007648:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800764a:	e841 2300 	strex	r3, r2, [r1]
 800764e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1e5      	bne.n	8007622 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	3314      	adds	r3, #20
 800765c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007660:	e853 3f00 	ldrex	r3, [r3]
 8007664:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007668:	f023 0301 	bic.w	r3, r3, #1
 800766c:	663b      	str	r3, [r7, #96]	; 0x60
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	3314      	adds	r3, #20
 8007674:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007676:	643a      	str	r2, [r7, #64]	; 0x40
 8007678:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800767c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800767e:	e841 2300 	strex	r3, r2, [r1]
 8007682:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1e5      	bne.n	8007656 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768e:	2b01      	cmp	r3, #1
 8007690:	d119      	bne.n	80076c6 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	330c      	adds	r3, #12
 8007698:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769a:	6a3b      	ldr	r3, [r7, #32]
 800769c:	e853 3f00 	ldrex	r3, [r3]
 80076a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	f023 0310 	bic.w	r3, r3, #16
 80076a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	330c      	adds	r3, #12
 80076b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80076b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80076b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076ba:	e841 2300 	strex	r3, r2, [r1]
 80076be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1e5      	bne.n	8007692 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	695b      	ldr	r3, [r3, #20]
 80076cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d0:	2b40      	cmp	r3, #64	; 0x40
 80076d2:	d136      	bne.n	8007742 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	3314      	adds	r3, #20
 80076da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	e853 3f00 	ldrex	r3, [r3]
 80076e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	3314      	adds	r3, #20
 80076f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076f4:	61ba      	str	r2, [r7, #24]
 80076f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f8:	6979      	ldr	r1, [r7, #20]
 80076fa:	69ba      	ldr	r2, [r7, #24]
 80076fc:	e841 2300 	strex	r3, r2, [r1]
 8007700:	613b      	str	r3, [r7, #16]
   return(result);
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d1e5      	bne.n	80076d4 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800770c:	2b00      	cmp	r3, #0
 800770e:	d018      	beq.n	8007742 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007714:	2200      	movs	r2, #0
 8007716:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800771c:	4618      	mov	r0, r3
 800771e:	f7fd ff0d 	bl	800553c <HAL_DMA_Abort>
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00c      	beq.n	8007742 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800772c:	4618      	mov	r0, r3
 800772e:	f7fe f921 	bl	8005974 <HAL_DMA_GetError>
 8007732:	4603      	mov	r3, r0
 8007734:	2b20      	cmp	r3, #32
 8007736:	d104      	bne.n	8007742 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2210      	movs	r2, #16
 800773c:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e00a      	b.n	8007758 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2220      	movs	r2, #32
 800774c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3768      	adds	r7, #104	; 0x68
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b0ba      	sub	sp, #232	; 0xe8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	695b      	ldr	r3, [r3, #20]
 8007782:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007786:	2300      	movs	r3, #0
 8007788:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800778c:	2300      	movs	r3, #0
 800778e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007796:	f003 030f 	and.w	r3, r3, #15
 800779a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800779e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d10f      	bne.n	80077c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077aa:	f003 0320 	and.w	r3, r3, #32
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d009      	beq.n	80077c6 <HAL_UART_IRQHandler+0x66>
 80077b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077b6:	f003 0320 	and.w	r3, r3, #32
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d003      	beq.n	80077c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fd85 	bl	80082ce <UART_Receive_IT>
      return;
 80077c4:	e25b      	b.n	8007c7e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80077c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f000 80de 	beq.w	800798c <HAL_UART_IRQHandler+0x22c>
 80077d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077d4:	f003 0301 	and.w	r3, r3, #1
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d106      	bne.n	80077ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80077dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f000 80d1 	beq.w	800798c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80077ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00b      	beq.n	800780e <HAL_UART_IRQHandler+0xae>
 80077f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d005      	beq.n	800780e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007806:	f043 0201 	orr.w	r2, r3, #1
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800780e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007812:	f003 0304 	and.w	r3, r3, #4
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00b      	beq.n	8007832 <HAL_UART_IRQHandler+0xd2>
 800781a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800781e:	f003 0301 	and.w	r3, r3, #1
 8007822:	2b00      	cmp	r3, #0
 8007824:	d005      	beq.n	8007832 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800782a:	f043 0202 	orr.w	r2, r3, #2
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007836:	f003 0302 	and.w	r3, r3, #2
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00b      	beq.n	8007856 <HAL_UART_IRQHandler+0xf6>
 800783e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007842:	f003 0301 	and.w	r3, r3, #1
 8007846:	2b00      	cmp	r3, #0
 8007848:	d005      	beq.n	8007856 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800784e:	f043 0204 	orr.w	r2, r3, #4
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800785a:	f003 0308 	and.w	r3, r3, #8
 800785e:	2b00      	cmp	r3, #0
 8007860:	d011      	beq.n	8007886 <HAL_UART_IRQHandler+0x126>
 8007862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007866:	f003 0320 	and.w	r3, r3, #32
 800786a:	2b00      	cmp	r3, #0
 800786c:	d105      	bne.n	800787a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800786e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007872:	f003 0301 	and.w	r3, r3, #1
 8007876:	2b00      	cmp	r3, #0
 8007878:	d005      	beq.n	8007886 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800787e:	f043 0208 	orr.w	r2, r3, #8
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800788a:	2b00      	cmp	r3, #0
 800788c:	f000 81f2 	beq.w	8007c74 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007894:	f003 0320 	and.w	r3, r3, #32
 8007898:	2b00      	cmp	r3, #0
 800789a:	d008      	beq.n	80078ae <HAL_UART_IRQHandler+0x14e>
 800789c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078a0:	f003 0320 	and.w	r3, r3, #32
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d002      	beq.n	80078ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 fd10 	bl	80082ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	695b      	ldr	r3, [r3, #20]
 80078b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b8:	2b40      	cmp	r3, #64	; 0x40
 80078ba:	bf0c      	ite	eq
 80078bc:	2301      	moveq	r3, #1
 80078be:	2300      	movne	r3, #0
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ca:	f003 0308 	and.w	r3, r3, #8
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d103      	bne.n	80078da <HAL_UART_IRQHandler+0x17a>
 80078d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d04f      	beq.n	800797a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fc18 	bl	8008110 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	695b      	ldr	r3, [r3, #20]
 80078e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ea:	2b40      	cmp	r3, #64	; 0x40
 80078ec:	d141      	bne.n	8007972 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	3314      	adds	r3, #20
 80078f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078fc:	e853 3f00 	ldrex	r3, [r3]
 8007900:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007904:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800790c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	3314      	adds	r3, #20
 8007916:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800791a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800791e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007922:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007926:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800792a:	e841 2300 	strex	r3, r2, [r1]
 800792e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007932:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d1d9      	bne.n	80078ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800793e:	2b00      	cmp	r3, #0
 8007940:	d013      	beq.n	800796a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007946:	4a7e      	ldr	r2, [pc, #504]	; (8007b40 <HAL_UART_IRQHandler+0x3e0>)
 8007948:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800794e:	4618      	mov	r0, r3
 8007950:	f7fd fe64 	bl	800561c <HAL_DMA_Abort_IT>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d016      	beq.n	8007988 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800795e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007964:	4610      	mov	r0, r2
 8007966:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007968:	e00e      	b.n	8007988 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f99e 	bl	8007cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007970:	e00a      	b.n	8007988 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f99a 	bl	8007cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007978:	e006      	b.n	8007988 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f996 	bl	8007cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007986:	e175      	b.n	8007c74 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007988:	bf00      	nop
    return;
 800798a:	e173      	b.n	8007c74 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007990:	2b01      	cmp	r3, #1
 8007992:	f040 814f 	bne.w	8007c34 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800799a:	f003 0310 	and.w	r3, r3, #16
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f000 8148 	beq.w	8007c34 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80079a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079a8:	f003 0310 	and.w	r3, r3, #16
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f000 8141 	beq.w	8007c34 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079b2:	2300      	movs	r3, #0
 80079b4:	60bb      	str	r3, [r7, #8]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	60bb      	str	r3, [r7, #8]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	60bb      	str	r3, [r7, #8]
 80079c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d2:	2b40      	cmp	r3, #64	; 0x40
 80079d4:	f040 80b6 	bne.w	8007b44 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80079e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f000 8145 	beq.w	8007c78 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80079f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079f6:	429a      	cmp	r2, r3
 80079f8:	f080 813e 	bcs.w	8007c78 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a02:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a08:	69db      	ldr	r3, [r3, #28]
 8007a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a0e:	f000 8088 	beq.w	8007b22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	330c      	adds	r3, #12
 8007a18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a20:	e853 3f00 	ldrex	r3, [r3]
 8007a24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007a28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	330c      	adds	r3, #12
 8007a3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007a3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007a42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007a4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a4e:	e841 2300 	strex	r3, r2, [r1]
 8007a52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007a56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1d9      	bne.n	8007a12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	3314      	adds	r3, #20
 8007a64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a68:	e853 3f00 	ldrex	r3, [r3]
 8007a6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007a6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a70:	f023 0301 	bic.w	r3, r3, #1
 8007a74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	3314      	adds	r3, #20
 8007a7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a8e:	e841 2300 	strex	r3, r2, [r1]
 8007a92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1e1      	bne.n	8007a5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	3314      	adds	r3, #20
 8007aa0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007aa4:	e853 3f00 	ldrex	r3, [r3]
 8007aa8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007aaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007aac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ab0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	3314      	adds	r3, #20
 8007aba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007abe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007ac0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007ac4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007ac6:	e841 2300 	strex	r3, r2, [r1]
 8007aca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007acc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1e3      	bne.n	8007a9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2220      	movs	r2, #32
 8007ad6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	330c      	adds	r3, #12
 8007ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aea:	e853 3f00 	ldrex	r3, [r3]
 8007aee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007af2:	f023 0310 	bic.w	r3, r3, #16
 8007af6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	330c      	adds	r3, #12
 8007b00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007b04:	65ba      	str	r2, [r7, #88]	; 0x58
 8007b06:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b0c:	e841 2300 	strex	r3, r2, [r1]
 8007b10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1e3      	bne.n	8007ae0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7fd fd0d 	bl	800553c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2202      	movs	r2, #2
 8007b26:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	4619      	mov	r1, r3
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 f8c1 	bl	8007cc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b3e:	e09b      	b.n	8007c78 <HAL_UART_IRQHandler+0x518>
 8007b40:	080081d7 	.word	0x080081d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	1ad3      	subs	r3, r2, r3
 8007b50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f000 808e 	beq.w	8007c7c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007b60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 8089 	beq.w	8007c7c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	330c      	adds	r3, #12
 8007b70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b74:	e853 3f00 	ldrex	r3, [r3]
 8007b78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	330c      	adds	r3, #12
 8007b8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007b8e:	647a      	str	r2, [r7, #68]	; 0x44
 8007b90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b96:	e841 2300 	strex	r3, r2, [r1]
 8007b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1e3      	bne.n	8007b6a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	3314      	adds	r3, #20
 8007ba8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bac:	e853 3f00 	ldrex	r3, [r3]
 8007bb0:	623b      	str	r3, [r7, #32]
   return(result);
 8007bb2:	6a3b      	ldr	r3, [r7, #32]
 8007bb4:	f023 0301 	bic.w	r3, r3, #1
 8007bb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	3314      	adds	r3, #20
 8007bc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007bc6:	633a      	str	r2, [r7, #48]	; 0x30
 8007bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bce:	e841 2300 	strex	r3, r2, [r1]
 8007bd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1e3      	bne.n	8007ba2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2220      	movs	r2, #32
 8007bde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	330c      	adds	r3, #12
 8007bee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	e853 3f00 	ldrex	r3, [r3]
 8007bf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f023 0310 	bic.w	r3, r3, #16
 8007bfe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	330c      	adds	r3, #12
 8007c08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007c0c:	61fa      	str	r2, [r7, #28]
 8007c0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c10:	69b9      	ldr	r1, [r7, #24]
 8007c12:	69fa      	ldr	r2, [r7, #28]
 8007c14:	e841 2300 	strex	r3, r2, [r1]
 8007c18:	617b      	str	r3, [r7, #20]
   return(result);
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d1e3      	bne.n	8007be8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2202      	movs	r2, #2
 8007c24:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 f847 	bl	8007cc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c32:	e023      	b.n	8007c7c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d009      	beq.n	8007c54 <HAL_UART_IRQHandler+0x4f4>
 8007c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d003      	beq.n	8007c54 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 fad6 	bl	80081fe <UART_Transmit_IT>
    return;
 8007c52:	e014      	b.n	8007c7e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00e      	beq.n	8007c7e <HAL_UART_IRQHandler+0x51e>
 8007c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d008      	beq.n	8007c7e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fb16 	bl	800829e <UART_EndTransmit_IT>
    return;
 8007c72:	e004      	b.n	8007c7e <HAL_UART_IRQHandler+0x51e>
    return;
 8007c74:	bf00      	nop
 8007c76:	e002      	b.n	8007c7e <HAL_UART_IRQHandler+0x51e>
      return;
 8007c78:	bf00      	nop
 8007c7a:	e000      	b.n	8007c7e <HAL_UART_IRQHandler+0x51e>
      return;
 8007c7c:	bf00      	nop
  }
}
 8007c7e:	37e8      	adds	r7, #232	; 0xe8
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007ca0:	bf00      	nop
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007cb4:	bf00      	nop
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ccc:	bf00      	nop
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b090      	sub	sp, #64	; 0x40
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d137      	bne.n	8007d64 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	3314      	adds	r3, #20
 8007d00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d04:	e853 3f00 	ldrex	r3, [r3]
 8007d08:	623b      	str	r3, [r7, #32]
   return(result);
 8007d0a:	6a3b      	ldr	r3, [r7, #32]
 8007d0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d10:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	3314      	adds	r3, #20
 8007d18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d1a:	633a      	str	r2, [r7, #48]	; 0x30
 8007d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d22:	e841 2300 	strex	r3, r2, [r1]
 8007d26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d1e5      	bne.n	8007cfa <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	330c      	adds	r3, #12
 8007d34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	e853 3f00 	ldrex	r3, [r3]
 8007d3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d44:	637b      	str	r3, [r7, #52]	; 0x34
 8007d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	330c      	adds	r3, #12
 8007d4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d4e:	61fa      	str	r2, [r7, #28]
 8007d50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d52:	69b9      	ldr	r1, [r7, #24]
 8007d54:	69fa      	ldr	r2, [r7, #28]
 8007d56:	e841 2300 	strex	r3, r2, [r1]
 8007d5a:	617b      	str	r3, [r7, #20]
   return(result);
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1e5      	bne.n	8007d2e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d62:	e002      	b.n	8007d6a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007d64:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007d66:	f7f9 fc73 	bl	8001650 <HAL_UART_TxCpltCallback>
}
 8007d6a:	bf00      	nop
 8007d6c:	3740      	adds	r7, #64	; 0x40
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b084      	sub	sp, #16
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f7ff ff7f 	bl	8007c84 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d86:	bf00      	nop
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b09c      	sub	sp, #112	; 0x70
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d172      	bne.n	8007e90 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dac:	2200      	movs	r2, #0
 8007dae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	330c      	adds	r3, #12
 8007db6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dba:	e853 3f00 	ldrex	r3, [r3]
 8007dbe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	330c      	adds	r3, #12
 8007dce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007dd0:	65ba      	str	r2, [r7, #88]	; 0x58
 8007dd2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007dd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007dd8:	e841 2300 	strex	r3, r2, [r1]
 8007ddc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1e5      	bne.n	8007db0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	3314      	adds	r3, #20
 8007dea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dee:	e853 3f00 	ldrex	r3, [r3]
 8007df2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df6:	f023 0301 	bic.w	r3, r3, #1
 8007dfa:	667b      	str	r3, [r7, #100]	; 0x64
 8007dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	3314      	adds	r3, #20
 8007e02:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007e04:	647a      	str	r2, [r7, #68]	; 0x44
 8007e06:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e0c:	e841 2300 	strex	r3, r2, [r1]
 8007e10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1e5      	bne.n	8007de4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	3314      	adds	r3, #20
 8007e1e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e22:	e853 3f00 	ldrex	r3, [r3]
 8007e26:	623b      	str	r3, [r7, #32]
   return(result);
 8007e28:	6a3b      	ldr	r3, [r7, #32]
 8007e2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e2e:	663b      	str	r3, [r7, #96]	; 0x60
 8007e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	3314      	adds	r3, #20
 8007e36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007e38:	633a      	str	r2, [r7, #48]	; 0x30
 8007e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e40:	e841 2300 	strex	r3, r2, [r1]
 8007e44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1e5      	bne.n	8007e18 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e4e:	2220      	movs	r2, #32
 8007e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d119      	bne.n	8007e90 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	330c      	adds	r3, #12
 8007e62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	e853 3f00 	ldrex	r3, [r3]
 8007e6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f023 0310 	bic.w	r3, r3, #16
 8007e72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	330c      	adds	r3, #12
 8007e7a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007e7c:	61fa      	str	r2, [r7, #28]
 8007e7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e80:	69b9      	ldr	r1, [r7, #24]
 8007e82:	69fa      	ldr	r2, [r7, #28]
 8007e84:	e841 2300 	strex	r3, r2, [r1]
 8007e88:	617b      	str	r3, [r7, #20]
   return(result);
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d1e5      	bne.n	8007e5c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e92:	2200      	movs	r2, #0
 8007e94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d106      	bne.n	8007eac <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ea0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007ea6:	f7ff ff0b 	bl	8007cc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007eaa:	e002      	b.n	8007eb2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007eac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007eae:	f7f9 fbe3 	bl	8001678 <HAL_UART_RxCpltCallback>
}
 8007eb2:	bf00      	nop
 8007eb4:	3770      	adds	r7, #112	; 0x70
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b084      	sub	sp, #16
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d108      	bne.n	8007ee8 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007eda:	085b      	lsrs	r3, r3, #1
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	4619      	mov	r1, r3
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f7ff feed 	bl	8007cc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007ee6:	e002      	b.n	8007eee <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f7ff fed5 	bl	8007c98 <HAL_UART_RxHalfCpltCallback>
}
 8007eee:	bf00      	nop
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b084      	sub	sp, #16
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007efe:	2300      	movs	r3, #0
 8007f00:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f06:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	695b      	ldr	r3, [r3, #20]
 8007f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f12:	2b80      	cmp	r3, #128	; 0x80
 8007f14:	bf0c      	ite	eq
 8007f16:	2301      	moveq	r3, #1
 8007f18:	2300      	movne	r3, #0
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	2b21      	cmp	r3, #33	; 0x21
 8007f28:	d108      	bne.n	8007f3c <UART_DMAError+0x46>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d005      	beq.n	8007f3c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	2200      	movs	r2, #0
 8007f34:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007f36:	68b8      	ldr	r0, [r7, #8]
 8007f38:	f000 f8c2 	bl	80080c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	695b      	ldr	r3, [r3, #20]
 8007f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f46:	2b40      	cmp	r3, #64	; 0x40
 8007f48:	bf0c      	ite	eq
 8007f4a:	2301      	moveq	r3, #1
 8007f4c:	2300      	movne	r3, #0
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	2b22      	cmp	r3, #34	; 0x22
 8007f5c:	d108      	bne.n	8007f70 <UART_DMAError+0x7a>
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d005      	beq.n	8007f70 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	2200      	movs	r2, #0
 8007f68:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007f6a:	68b8      	ldr	r0, [r7, #8]
 8007f6c:	f000 f8d0 	bl	8008110 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f74:	f043 0210 	orr.w	r2, r3, #16
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f7c:	68b8      	ldr	r0, [r7, #8]
 8007f7e:	f7ff fe95 	bl	8007cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f82:	bf00      	nop
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
	...

08007f8c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b098      	sub	sp, #96	; 0x60
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	4613      	mov	r3, r2
 8007f98:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	88fa      	ldrh	r2, [r7, #6]
 8007fa4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2222      	movs	r2, #34	; 0x22
 8007fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fb8:	4a3e      	ldr	r2, [pc, #248]	; (80080b4 <UART_Start_Receive_DMA+0x128>)
 8007fba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc0:	4a3d      	ldr	r2, [pc, #244]	; (80080b8 <UART_Start_Receive_DMA+0x12c>)
 8007fc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc8:	4a3c      	ldr	r2, [pc, #240]	; (80080bc <UART_Start_Receive_DMA+0x130>)
 8007fca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007fd4:	f107 0308 	add.w	r3, r7, #8
 8007fd8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	3304      	adds	r3, #4
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	88fb      	ldrh	r3, [r7, #6]
 8007fec:	f7fd fa4e 	bl	800548c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	613b      	str	r3, [r7, #16]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	613b      	str	r3, [r7, #16]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	613b      	str	r3, [r7, #16]
 8008004:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d019      	beq.n	8008042 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	330c      	adds	r3, #12
 8008014:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008018:	e853 3f00 	ldrex	r3, [r3]
 800801c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800801e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008024:	65bb      	str	r3, [r7, #88]	; 0x58
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	330c      	adds	r3, #12
 800802c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800802e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008030:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008032:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008034:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008036:	e841 2300 	strex	r3, r2, [r1]
 800803a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800803c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800803e:	2b00      	cmp	r3, #0
 8008040:	d1e5      	bne.n	800800e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	3314      	adds	r3, #20
 8008048:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800804c:	e853 3f00 	ldrex	r3, [r3]
 8008050:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008054:	f043 0301 	orr.w	r3, r3, #1
 8008058:	657b      	str	r3, [r7, #84]	; 0x54
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	3314      	adds	r3, #20
 8008060:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008062:	63ba      	str	r2, [r7, #56]	; 0x38
 8008064:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008066:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008068:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800806a:	e841 2300 	strex	r3, r2, [r1]
 800806e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1e5      	bne.n	8008042 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	3314      	adds	r3, #20
 800807c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	e853 3f00 	ldrex	r3, [r3]
 8008084:	617b      	str	r3, [r7, #20]
   return(result);
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800808c:	653b      	str	r3, [r7, #80]	; 0x50
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	3314      	adds	r3, #20
 8008094:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008096:	627a      	str	r2, [r7, #36]	; 0x24
 8008098:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809a:	6a39      	ldr	r1, [r7, #32]
 800809c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800809e:	e841 2300 	strex	r3, r2, [r1]
 80080a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1e5      	bne.n	8008076 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3760      	adds	r7, #96	; 0x60
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	08007d8f 	.word	0x08007d8f
 80080b8:	08007ebb 	.word	0x08007ebb
 80080bc:	08007ef7 	.word	0x08007ef7

080080c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b089      	sub	sp, #36	; 0x24
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	330c      	adds	r3, #12
 80080ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	e853 3f00 	ldrex	r3, [r3]
 80080d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80080de:	61fb      	str	r3, [r7, #28]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	330c      	adds	r3, #12
 80080e6:	69fa      	ldr	r2, [r7, #28]
 80080e8:	61ba      	str	r2, [r7, #24]
 80080ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ec:	6979      	ldr	r1, [r7, #20]
 80080ee:	69ba      	ldr	r2, [r7, #24]
 80080f0:	e841 2300 	strex	r3, r2, [r1]
 80080f4:	613b      	str	r3, [r7, #16]
   return(result);
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d1e5      	bne.n	80080c8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2220      	movs	r2, #32
 8008100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8008104:	bf00      	nop
 8008106:	3724      	adds	r7, #36	; 0x24
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008110:	b480      	push	{r7}
 8008112:	b095      	sub	sp, #84	; 0x54
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	330c      	adds	r3, #12
 800811e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008122:	e853 3f00 	ldrex	r3, [r3]
 8008126:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800812e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	330c      	adds	r3, #12
 8008136:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008138:	643a      	str	r2, [r7, #64]	; 0x40
 800813a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800813e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008140:	e841 2300 	strex	r3, r2, [r1]
 8008144:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008148:	2b00      	cmp	r3, #0
 800814a:	d1e5      	bne.n	8008118 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	3314      	adds	r3, #20
 8008152:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008154:	6a3b      	ldr	r3, [r7, #32]
 8008156:	e853 3f00 	ldrex	r3, [r3]
 800815a:	61fb      	str	r3, [r7, #28]
   return(result);
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	f023 0301 	bic.w	r3, r3, #1
 8008162:	64bb      	str	r3, [r7, #72]	; 0x48
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	3314      	adds	r3, #20
 800816a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800816c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800816e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008170:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008172:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008174:	e841 2300 	strex	r3, r2, [r1]
 8008178:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800817a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817c:	2b00      	cmp	r3, #0
 800817e:	d1e5      	bne.n	800814c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008184:	2b01      	cmp	r3, #1
 8008186:	d119      	bne.n	80081bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	330c      	adds	r3, #12
 800818e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	e853 3f00 	ldrex	r3, [r3]
 8008196:	60bb      	str	r3, [r7, #8]
   return(result);
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	f023 0310 	bic.w	r3, r3, #16
 800819e:	647b      	str	r3, [r7, #68]	; 0x44
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	330c      	adds	r3, #12
 80081a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081a8:	61ba      	str	r2, [r7, #24]
 80081aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ac:	6979      	ldr	r1, [r7, #20]
 80081ae:	69ba      	ldr	r2, [r7, #24]
 80081b0:	e841 2300 	strex	r3, r2, [r1]
 80081b4:	613b      	str	r3, [r7, #16]
   return(result);
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d1e5      	bne.n	8008188 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2220      	movs	r2, #32
 80081c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80081ca:	bf00      	nop
 80081cc:	3754      	adds	r7, #84	; 0x54
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr

080081d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b084      	sub	sp, #16
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2200      	movs	r2, #0
 80081e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80081f0:	68f8      	ldr	r0, [r7, #12]
 80081f2:	f7ff fd5b 	bl	8007cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081f6:	bf00      	nop
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80081fe:	b480      	push	{r7}
 8008200:	b085      	sub	sp, #20
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800820c:	b2db      	uxtb	r3, r3
 800820e:	2b21      	cmp	r3, #33	; 0x21
 8008210:	d13e      	bne.n	8008290 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800821a:	d114      	bne.n	8008246 <UART_Transmit_IT+0x48>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d110      	bne.n	8008246 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6a1b      	ldr	r3, [r3, #32]
 8008228:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	881b      	ldrh	r3, [r3, #0]
 800822e:	461a      	mov	r2, r3
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008238:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a1b      	ldr	r3, [r3, #32]
 800823e:	1c9a      	adds	r2, r3, #2
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	621a      	str	r2, [r3, #32]
 8008244:	e008      	b.n	8008258 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6a1b      	ldr	r3, [r3, #32]
 800824a:	1c59      	adds	r1, r3, #1
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	6211      	str	r1, [r2, #32]
 8008250:	781a      	ldrb	r2, [r3, #0]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800825c:	b29b      	uxth	r3, r3
 800825e:	3b01      	subs	r3, #1
 8008260:	b29b      	uxth	r3, r3
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	4619      	mov	r1, r3
 8008266:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008268:	2b00      	cmp	r3, #0
 800826a:	d10f      	bne.n	800828c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68da      	ldr	r2, [r3, #12]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800827a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68da      	ldr	r2, [r3, #12]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800828a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800828c:	2300      	movs	r3, #0
 800828e:	e000      	b.n	8008292 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008290:	2302      	movs	r3, #2
  }
}
 8008292:	4618      	mov	r0, r3
 8008294:	3714      	adds	r7, #20
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr

0800829e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b082      	sub	sp, #8
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68da      	ldr	r2, [r3, #12]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2220      	movs	r2, #32
 80082ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f7f9 f9c6 	bl	8001650 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b08c      	sub	sp, #48	; 0x30
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	2b22      	cmp	r3, #34	; 0x22
 80082e0:	f040 80ae 	bne.w	8008440 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082ec:	d117      	bne.n	800831e <UART_Receive_IT+0x50>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	691b      	ldr	r3, [r3, #16]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d113      	bne.n	800831e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80082f6:	2300      	movs	r3, #0
 80082f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	b29b      	uxth	r3, r3
 8008308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800830c:	b29a      	uxth	r2, r3
 800830e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008310:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008316:	1c9a      	adds	r2, r3, #2
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	629a      	str	r2, [r3, #40]	; 0x28
 800831c:	e026      	b.n	800836c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008322:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008324:	2300      	movs	r3, #0
 8008326:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008330:	d007      	beq.n	8008342 <UART_Receive_IT+0x74>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d10a      	bne.n	8008350 <UART_Receive_IT+0x82>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d106      	bne.n	8008350 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	b2da      	uxtb	r2, r3
 800834a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834c:	701a      	strb	r2, [r3, #0]
 800834e:	e008      	b.n	8008362 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	b2db      	uxtb	r3, r3
 8008358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800835c:	b2da      	uxtb	r2, r3
 800835e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008360:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008366:	1c5a      	adds	r2, r3, #1
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008370:	b29b      	uxth	r3, r3
 8008372:	3b01      	subs	r3, #1
 8008374:	b29b      	uxth	r3, r3
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	4619      	mov	r1, r3
 800837a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800837c:	2b00      	cmp	r3, #0
 800837e:	d15d      	bne.n	800843c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68da      	ldr	r2, [r3, #12]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f022 0220 	bic.w	r2, r2, #32
 800838e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68da      	ldr	r2, [r3, #12]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800839e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	695a      	ldr	r2, [r3, #20]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f022 0201 	bic.w	r2, r2, #1
 80083ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2220      	movs	r2, #32
 80083b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d135      	bne.n	8008432 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	330c      	adds	r3, #12
 80083d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	e853 3f00 	ldrex	r3, [r3]
 80083da:	613b      	str	r3, [r7, #16]
   return(result);
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	f023 0310 	bic.w	r3, r3, #16
 80083e2:	627b      	str	r3, [r7, #36]	; 0x24
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	330c      	adds	r3, #12
 80083ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083ec:	623a      	str	r2, [r7, #32]
 80083ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f0:	69f9      	ldr	r1, [r7, #28]
 80083f2:	6a3a      	ldr	r2, [r7, #32]
 80083f4:	e841 2300 	strex	r3, r2, [r1]
 80083f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d1e5      	bne.n	80083cc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f003 0310 	and.w	r3, r3, #16
 800840a:	2b10      	cmp	r3, #16
 800840c:	d10a      	bne.n	8008424 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800840e:	2300      	movs	r3, #0
 8008410:	60fb      	str	r3, [r7, #12]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	60fb      	str	r3, [r7, #12]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	60fb      	str	r3, [r7, #12]
 8008422:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008428:	4619      	mov	r1, r3
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f7ff fc48 	bl	8007cc0 <HAL_UARTEx_RxEventCallback>
 8008430:	e002      	b.n	8008438 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f7f9 f920 	bl	8001678 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008438:	2300      	movs	r3, #0
 800843a:	e002      	b.n	8008442 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800843c:	2300      	movs	r3, #0
 800843e:	e000      	b.n	8008442 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008440:	2302      	movs	r3, #2
  }
}
 8008442:	4618      	mov	r0, r3
 8008444:	3730      	adds	r7, #48	; 0x30
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
	...

0800844c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800844c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008450:	b0c0      	sub	sp, #256	; 0x100
 8008452:	af00      	add	r7, sp, #0
 8008454:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008468:	68d9      	ldr	r1, [r3, #12]
 800846a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	ea40 0301 	orr.w	r3, r0, r1
 8008474:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800847a:	689a      	ldr	r2, [r3, #8]
 800847c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	431a      	orrs	r2, r3
 8008484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008488:	695b      	ldr	r3, [r3, #20]
 800848a:	431a      	orrs	r2, r3
 800848c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008490:	69db      	ldr	r3, [r3, #28]
 8008492:	4313      	orrs	r3, r2
 8008494:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80084a4:	f021 010c 	bic.w	r1, r1, #12
 80084a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80084b2:	430b      	orrs	r3, r1
 80084b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	695b      	ldr	r3, [r3, #20]
 80084be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80084c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084c6:	6999      	ldr	r1, [r3, #24]
 80084c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	ea40 0301 	orr.w	r3, r0, r1
 80084d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80084d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	4b8f      	ldr	r3, [pc, #572]	; (8008718 <UART_SetConfig+0x2cc>)
 80084dc:	429a      	cmp	r2, r3
 80084de:	d005      	beq.n	80084ec <UART_SetConfig+0xa0>
 80084e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	4b8d      	ldr	r3, [pc, #564]	; (800871c <UART_SetConfig+0x2d0>)
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d104      	bne.n	80084f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80084ec:	f7fd fe4c 	bl	8006188 <HAL_RCC_GetPCLK2Freq>
 80084f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80084f4:	e003      	b.n	80084fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80084f6:	f7fd fe33 	bl	8006160 <HAL_RCC_GetPCLK1Freq>
 80084fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008502:	69db      	ldr	r3, [r3, #28]
 8008504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008508:	f040 810c 	bne.w	8008724 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800850c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008510:	2200      	movs	r2, #0
 8008512:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008516:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800851a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800851e:	4622      	mov	r2, r4
 8008520:	462b      	mov	r3, r5
 8008522:	1891      	adds	r1, r2, r2
 8008524:	65b9      	str	r1, [r7, #88]	; 0x58
 8008526:	415b      	adcs	r3, r3
 8008528:	65fb      	str	r3, [r7, #92]	; 0x5c
 800852a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800852e:	4621      	mov	r1, r4
 8008530:	eb12 0801 	adds.w	r8, r2, r1
 8008534:	4629      	mov	r1, r5
 8008536:	eb43 0901 	adc.w	r9, r3, r1
 800853a:	f04f 0200 	mov.w	r2, #0
 800853e:	f04f 0300 	mov.w	r3, #0
 8008542:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008546:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800854a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800854e:	4690      	mov	r8, r2
 8008550:	4699      	mov	r9, r3
 8008552:	4623      	mov	r3, r4
 8008554:	eb18 0303 	adds.w	r3, r8, r3
 8008558:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800855c:	462b      	mov	r3, r5
 800855e:	eb49 0303 	adc.w	r3, r9, r3
 8008562:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008572:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008576:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800857a:	460b      	mov	r3, r1
 800857c:	18db      	adds	r3, r3, r3
 800857e:	653b      	str	r3, [r7, #80]	; 0x50
 8008580:	4613      	mov	r3, r2
 8008582:	eb42 0303 	adc.w	r3, r2, r3
 8008586:	657b      	str	r3, [r7, #84]	; 0x54
 8008588:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800858c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008590:	f7f8 fb3a 	bl	8000c08 <__aeabi_uldivmod>
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	4b61      	ldr	r3, [pc, #388]	; (8008720 <UART_SetConfig+0x2d4>)
 800859a:	fba3 2302 	umull	r2, r3, r3, r2
 800859e:	095b      	lsrs	r3, r3, #5
 80085a0:	011c      	lsls	r4, r3, #4
 80085a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085a6:	2200      	movs	r2, #0
 80085a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80085ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80085b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80085b4:	4642      	mov	r2, r8
 80085b6:	464b      	mov	r3, r9
 80085b8:	1891      	adds	r1, r2, r2
 80085ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80085bc:	415b      	adcs	r3, r3
 80085be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80085c4:	4641      	mov	r1, r8
 80085c6:	eb12 0a01 	adds.w	sl, r2, r1
 80085ca:	4649      	mov	r1, r9
 80085cc:	eb43 0b01 	adc.w	fp, r3, r1
 80085d0:	f04f 0200 	mov.w	r2, #0
 80085d4:	f04f 0300 	mov.w	r3, #0
 80085d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80085dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80085e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80085e4:	4692      	mov	sl, r2
 80085e6:	469b      	mov	fp, r3
 80085e8:	4643      	mov	r3, r8
 80085ea:	eb1a 0303 	adds.w	r3, sl, r3
 80085ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80085f2:	464b      	mov	r3, r9
 80085f4:	eb4b 0303 	adc.w	r3, fp, r3
 80085f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80085fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008608:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800860c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008610:	460b      	mov	r3, r1
 8008612:	18db      	adds	r3, r3, r3
 8008614:	643b      	str	r3, [r7, #64]	; 0x40
 8008616:	4613      	mov	r3, r2
 8008618:	eb42 0303 	adc.w	r3, r2, r3
 800861c:	647b      	str	r3, [r7, #68]	; 0x44
 800861e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008622:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008626:	f7f8 faef 	bl	8000c08 <__aeabi_uldivmod>
 800862a:	4602      	mov	r2, r0
 800862c:	460b      	mov	r3, r1
 800862e:	4611      	mov	r1, r2
 8008630:	4b3b      	ldr	r3, [pc, #236]	; (8008720 <UART_SetConfig+0x2d4>)
 8008632:	fba3 2301 	umull	r2, r3, r3, r1
 8008636:	095b      	lsrs	r3, r3, #5
 8008638:	2264      	movs	r2, #100	; 0x64
 800863a:	fb02 f303 	mul.w	r3, r2, r3
 800863e:	1acb      	subs	r3, r1, r3
 8008640:	00db      	lsls	r3, r3, #3
 8008642:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008646:	4b36      	ldr	r3, [pc, #216]	; (8008720 <UART_SetConfig+0x2d4>)
 8008648:	fba3 2302 	umull	r2, r3, r3, r2
 800864c:	095b      	lsrs	r3, r3, #5
 800864e:	005b      	lsls	r3, r3, #1
 8008650:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008654:	441c      	add	r4, r3
 8008656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800865a:	2200      	movs	r2, #0
 800865c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008660:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008664:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008668:	4642      	mov	r2, r8
 800866a:	464b      	mov	r3, r9
 800866c:	1891      	adds	r1, r2, r2
 800866e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008670:	415b      	adcs	r3, r3
 8008672:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008674:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008678:	4641      	mov	r1, r8
 800867a:	1851      	adds	r1, r2, r1
 800867c:	6339      	str	r1, [r7, #48]	; 0x30
 800867e:	4649      	mov	r1, r9
 8008680:	414b      	adcs	r3, r1
 8008682:	637b      	str	r3, [r7, #52]	; 0x34
 8008684:	f04f 0200 	mov.w	r2, #0
 8008688:	f04f 0300 	mov.w	r3, #0
 800868c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008690:	4659      	mov	r1, fp
 8008692:	00cb      	lsls	r3, r1, #3
 8008694:	4651      	mov	r1, sl
 8008696:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800869a:	4651      	mov	r1, sl
 800869c:	00ca      	lsls	r2, r1, #3
 800869e:	4610      	mov	r0, r2
 80086a0:	4619      	mov	r1, r3
 80086a2:	4603      	mov	r3, r0
 80086a4:	4642      	mov	r2, r8
 80086a6:	189b      	adds	r3, r3, r2
 80086a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80086ac:	464b      	mov	r3, r9
 80086ae:	460a      	mov	r2, r1
 80086b0:	eb42 0303 	adc.w	r3, r2, r3
 80086b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80086b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80086c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80086c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80086cc:	460b      	mov	r3, r1
 80086ce:	18db      	adds	r3, r3, r3
 80086d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80086d2:	4613      	mov	r3, r2
 80086d4:	eb42 0303 	adc.w	r3, r2, r3
 80086d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80086de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80086e2:	f7f8 fa91 	bl	8000c08 <__aeabi_uldivmod>
 80086e6:	4602      	mov	r2, r0
 80086e8:	460b      	mov	r3, r1
 80086ea:	4b0d      	ldr	r3, [pc, #52]	; (8008720 <UART_SetConfig+0x2d4>)
 80086ec:	fba3 1302 	umull	r1, r3, r3, r2
 80086f0:	095b      	lsrs	r3, r3, #5
 80086f2:	2164      	movs	r1, #100	; 0x64
 80086f4:	fb01 f303 	mul.w	r3, r1, r3
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	00db      	lsls	r3, r3, #3
 80086fc:	3332      	adds	r3, #50	; 0x32
 80086fe:	4a08      	ldr	r2, [pc, #32]	; (8008720 <UART_SetConfig+0x2d4>)
 8008700:	fba2 2303 	umull	r2, r3, r2, r3
 8008704:	095b      	lsrs	r3, r3, #5
 8008706:	f003 0207 	and.w	r2, r3, #7
 800870a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4422      	add	r2, r4
 8008712:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008714:	e106      	b.n	8008924 <UART_SetConfig+0x4d8>
 8008716:	bf00      	nop
 8008718:	40011000 	.word	0x40011000
 800871c:	40011400 	.word	0x40011400
 8008720:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008724:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008728:	2200      	movs	r2, #0
 800872a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800872e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008732:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008736:	4642      	mov	r2, r8
 8008738:	464b      	mov	r3, r9
 800873a:	1891      	adds	r1, r2, r2
 800873c:	6239      	str	r1, [r7, #32]
 800873e:	415b      	adcs	r3, r3
 8008740:	627b      	str	r3, [r7, #36]	; 0x24
 8008742:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008746:	4641      	mov	r1, r8
 8008748:	1854      	adds	r4, r2, r1
 800874a:	4649      	mov	r1, r9
 800874c:	eb43 0501 	adc.w	r5, r3, r1
 8008750:	f04f 0200 	mov.w	r2, #0
 8008754:	f04f 0300 	mov.w	r3, #0
 8008758:	00eb      	lsls	r3, r5, #3
 800875a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800875e:	00e2      	lsls	r2, r4, #3
 8008760:	4614      	mov	r4, r2
 8008762:	461d      	mov	r5, r3
 8008764:	4643      	mov	r3, r8
 8008766:	18e3      	adds	r3, r4, r3
 8008768:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800876c:	464b      	mov	r3, r9
 800876e:	eb45 0303 	adc.w	r3, r5, r3
 8008772:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008782:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008786:	f04f 0200 	mov.w	r2, #0
 800878a:	f04f 0300 	mov.w	r3, #0
 800878e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008792:	4629      	mov	r1, r5
 8008794:	008b      	lsls	r3, r1, #2
 8008796:	4621      	mov	r1, r4
 8008798:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800879c:	4621      	mov	r1, r4
 800879e:	008a      	lsls	r2, r1, #2
 80087a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80087a4:	f7f8 fa30 	bl	8000c08 <__aeabi_uldivmod>
 80087a8:	4602      	mov	r2, r0
 80087aa:	460b      	mov	r3, r1
 80087ac:	4b60      	ldr	r3, [pc, #384]	; (8008930 <UART_SetConfig+0x4e4>)
 80087ae:	fba3 2302 	umull	r2, r3, r3, r2
 80087b2:	095b      	lsrs	r3, r3, #5
 80087b4:	011c      	lsls	r4, r3, #4
 80087b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087ba:	2200      	movs	r2, #0
 80087bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80087c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80087c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80087c8:	4642      	mov	r2, r8
 80087ca:	464b      	mov	r3, r9
 80087cc:	1891      	adds	r1, r2, r2
 80087ce:	61b9      	str	r1, [r7, #24]
 80087d0:	415b      	adcs	r3, r3
 80087d2:	61fb      	str	r3, [r7, #28]
 80087d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087d8:	4641      	mov	r1, r8
 80087da:	1851      	adds	r1, r2, r1
 80087dc:	6139      	str	r1, [r7, #16]
 80087de:	4649      	mov	r1, r9
 80087e0:	414b      	adcs	r3, r1
 80087e2:	617b      	str	r3, [r7, #20]
 80087e4:	f04f 0200 	mov.w	r2, #0
 80087e8:	f04f 0300 	mov.w	r3, #0
 80087ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80087f0:	4659      	mov	r1, fp
 80087f2:	00cb      	lsls	r3, r1, #3
 80087f4:	4651      	mov	r1, sl
 80087f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80087fa:	4651      	mov	r1, sl
 80087fc:	00ca      	lsls	r2, r1, #3
 80087fe:	4610      	mov	r0, r2
 8008800:	4619      	mov	r1, r3
 8008802:	4603      	mov	r3, r0
 8008804:	4642      	mov	r2, r8
 8008806:	189b      	adds	r3, r3, r2
 8008808:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800880c:	464b      	mov	r3, r9
 800880e:	460a      	mov	r2, r1
 8008810:	eb42 0303 	adc.w	r3, r2, r3
 8008814:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	67bb      	str	r3, [r7, #120]	; 0x78
 8008822:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008824:	f04f 0200 	mov.w	r2, #0
 8008828:	f04f 0300 	mov.w	r3, #0
 800882c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008830:	4649      	mov	r1, r9
 8008832:	008b      	lsls	r3, r1, #2
 8008834:	4641      	mov	r1, r8
 8008836:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800883a:	4641      	mov	r1, r8
 800883c:	008a      	lsls	r2, r1, #2
 800883e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008842:	f7f8 f9e1 	bl	8000c08 <__aeabi_uldivmod>
 8008846:	4602      	mov	r2, r0
 8008848:	460b      	mov	r3, r1
 800884a:	4611      	mov	r1, r2
 800884c:	4b38      	ldr	r3, [pc, #224]	; (8008930 <UART_SetConfig+0x4e4>)
 800884e:	fba3 2301 	umull	r2, r3, r3, r1
 8008852:	095b      	lsrs	r3, r3, #5
 8008854:	2264      	movs	r2, #100	; 0x64
 8008856:	fb02 f303 	mul.w	r3, r2, r3
 800885a:	1acb      	subs	r3, r1, r3
 800885c:	011b      	lsls	r3, r3, #4
 800885e:	3332      	adds	r3, #50	; 0x32
 8008860:	4a33      	ldr	r2, [pc, #204]	; (8008930 <UART_SetConfig+0x4e4>)
 8008862:	fba2 2303 	umull	r2, r3, r2, r3
 8008866:	095b      	lsrs	r3, r3, #5
 8008868:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800886c:	441c      	add	r4, r3
 800886e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008872:	2200      	movs	r2, #0
 8008874:	673b      	str	r3, [r7, #112]	; 0x70
 8008876:	677a      	str	r2, [r7, #116]	; 0x74
 8008878:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800887c:	4642      	mov	r2, r8
 800887e:	464b      	mov	r3, r9
 8008880:	1891      	adds	r1, r2, r2
 8008882:	60b9      	str	r1, [r7, #8]
 8008884:	415b      	adcs	r3, r3
 8008886:	60fb      	str	r3, [r7, #12]
 8008888:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800888c:	4641      	mov	r1, r8
 800888e:	1851      	adds	r1, r2, r1
 8008890:	6039      	str	r1, [r7, #0]
 8008892:	4649      	mov	r1, r9
 8008894:	414b      	adcs	r3, r1
 8008896:	607b      	str	r3, [r7, #4]
 8008898:	f04f 0200 	mov.w	r2, #0
 800889c:	f04f 0300 	mov.w	r3, #0
 80088a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80088a4:	4659      	mov	r1, fp
 80088a6:	00cb      	lsls	r3, r1, #3
 80088a8:	4651      	mov	r1, sl
 80088aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088ae:	4651      	mov	r1, sl
 80088b0:	00ca      	lsls	r2, r1, #3
 80088b2:	4610      	mov	r0, r2
 80088b4:	4619      	mov	r1, r3
 80088b6:	4603      	mov	r3, r0
 80088b8:	4642      	mov	r2, r8
 80088ba:	189b      	adds	r3, r3, r2
 80088bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80088be:	464b      	mov	r3, r9
 80088c0:	460a      	mov	r2, r1
 80088c2:	eb42 0303 	adc.w	r3, r2, r3
 80088c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80088c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	663b      	str	r3, [r7, #96]	; 0x60
 80088d2:	667a      	str	r2, [r7, #100]	; 0x64
 80088d4:	f04f 0200 	mov.w	r2, #0
 80088d8:	f04f 0300 	mov.w	r3, #0
 80088dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80088e0:	4649      	mov	r1, r9
 80088e2:	008b      	lsls	r3, r1, #2
 80088e4:	4641      	mov	r1, r8
 80088e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80088ea:	4641      	mov	r1, r8
 80088ec:	008a      	lsls	r2, r1, #2
 80088ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80088f2:	f7f8 f989 	bl	8000c08 <__aeabi_uldivmod>
 80088f6:	4602      	mov	r2, r0
 80088f8:	460b      	mov	r3, r1
 80088fa:	4b0d      	ldr	r3, [pc, #52]	; (8008930 <UART_SetConfig+0x4e4>)
 80088fc:	fba3 1302 	umull	r1, r3, r3, r2
 8008900:	095b      	lsrs	r3, r3, #5
 8008902:	2164      	movs	r1, #100	; 0x64
 8008904:	fb01 f303 	mul.w	r3, r1, r3
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	011b      	lsls	r3, r3, #4
 800890c:	3332      	adds	r3, #50	; 0x32
 800890e:	4a08      	ldr	r2, [pc, #32]	; (8008930 <UART_SetConfig+0x4e4>)
 8008910:	fba2 2303 	umull	r2, r3, r2, r3
 8008914:	095b      	lsrs	r3, r3, #5
 8008916:	f003 020f 	and.w	r2, r3, #15
 800891a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4422      	add	r2, r4
 8008922:	609a      	str	r2, [r3, #8]
}
 8008924:	bf00      	nop
 8008926:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800892a:	46bd      	mov	sp, r7
 800892c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008930:	51eb851f 	.word	0x51eb851f

08008934 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8008934:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008936:	2400      	movs	r4, #0
 8008938:	2310      	movs	r3, #16
 800893a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800893e:	6803      	ldr	r3, [r0, #0]
 8008940:	4615      	mov	r5, r2
 8008942:	699e      	ldr	r6, [r3, #24]
 8008944:	6812      	ldr	r2, [r2, #0]
 8008946:	466b      	mov	r3, sp
 8008948:	e9cd 4400 	strd	r4, r4, [sp]
 800894c:	47b0      	blx	r6
 800894e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008952:	f003 0306 	and.w	r3, r3, #6
 8008956:	2b06      	cmp	r3, #6
 8008958:	bf03      	ittte	eq
 800895a:	9b00      	ldreq	r3, [sp, #0]
 800895c:	602b      	streq	r3, [r5, #0]
 800895e:	2001      	moveq	r0, #1
 8008960:	4620      	movne	r0, r4
 8008962:	b004      	add	sp, #16
 8008964:	bd70      	pop	{r4, r5, r6, pc}

08008966 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8008966:	9800      	ldr	r0, [sp, #0]
 8008968:	4290      	cmp	r0, r2
 800896a:	bf14      	ite	ne
 800896c:	2001      	movne	r0, #1
 800896e:	2006      	moveq	r0, #6
 8008970:	4770      	bx	lr
	...

08008974 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8008974:	b510      	push	{r4, lr}
 8008976:	4b03      	ldr	r3, [pc, #12]	; (8008984 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8008978:	6003      	str	r3, [r0, #0]
 800897a:	4604      	mov	r4, r0
 800897c:	f000 f8e5 	bl	8008b4a <_ZNSt9type_infoD1Ev>
 8008980:	4620      	mov	r0, r4
 8008982:	bd10      	pop	{r4, pc}
 8008984:	0800bbf4 	.word	0x0800bbf4

08008988 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8008988:	b510      	push	{r4, lr}
 800898a:	4604      	mov	r4, r0
 800898c:	f7ff fff2 	bl	8008974 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8008990:	4620      	mov	r0, r4
 8008992:	2108      	movs	r1, #8
 8008994:	f000 f842 	bl	8008a1c <_ZdlPvj>
 8008998:	4620      	mov	r0, r4
 800899a:	bd10      	pop	{r4, pc}

0800899c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 800899c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089a0:	461f      	mov	r7, r3
 80089a2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80089a6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80089aa:	4598      	cmp	r8, r3
 80089ac:	4606      	mov	r6, r0
 80089ae:	4615      	mov	r5, r2
 80089b0:	d107      	bne.n	80089c2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80089b2:	9907      	ldr	r1, [sp, #28]
 80089b4:	f000 f8cc 	bl	8008b50 <_ZNKSt9type_infoeqERKS_>
 80089b8:	b118      	cbz	r0, 80089c2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80089ba:	7165      	strb	r5, [r4, #5]
 80089bc:	2000      	movs	r0, #0
 80089be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089c2:	4639      	mov	r1, r7
 80089c4:	4630      	mov	r0, r6
 80089c6:	f000 f8c3 	bl	8008b50 <_ZNKSt9type_infoeqERKS_>
 80089ca:	2800      	cmp	r0, #0
 80089cc:	d0f6      	beq.n	80089bc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 80089ce:	2301      	movs	r3, #1
 80089d0:	f8c4 8000 	str.w	r8, [r4]
 80089d4:	7125      	strb	r5, [r4, #4]
 80089d6:	71a3      	strb	r3, [r4, #6]
 80089d8:	e7f0      	b.n	80089bc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080089da <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80089da:	b538      	push	{r3, r4, r5, lr}
 80089dc:	4615      	mov	r5, r2
 80089de:	461c      	mov	r4, r3
 80089e0:	f000 f8b6 	bl	8008b50 <_ZNKSt9type_infoeqERKS_>
 80089e4:	b120      	cbz	r0, 80089f0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80089e6:	2308      	movs	r3, #8
 80089e8:	60e3      	str	r3, [r4, #12]
 80089ea:	2306      	movs	r3, #6
 80089ec:	6025      	str	r5, [r4, #0]
 80089ee:	7123      	strb	r3, [r4, #4]
 80089f0:	bd38      	pop	{r3, r4, r5, pc}

080089f2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80089f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089f4:	4605      	mov	r5, r0
 80089f6:	460c      	mov	r4, r1
 80089f8:	9201      	str	r2, [sp, #4]
 80089fa:	461e      	mov	r6, r3
 80089fc:	f000 f8a8 	bl	8008b50 <_ZNKSt9type_infoeqERKS_>
 8008a00:	b950      	cbnz	r0, 8008a18 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8008a02:	2e03      	cmp	r6, #3
 8008a04:	d808      	bhi.n	8008a18 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8008a06:	6823      	ldr	r3, [r4, #0]
 8008a08:	9a01      	ldr	r2, [sp, #4]
 8008a0a:	695b      	ldr	r3, [r3, #20]
 8008a0c:	4629      	mov	r1, r5
 8008a0e:	4620      	mov	r0, r4
 8008a10:	b002      	add	sp, #8
 8008a12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008a16:	4718      	bx	r3
 8008a18:	b002      	add	sp, #8
 8008a1a:	bd70      	pop	{r4, r5, r6, pc}

08008a1c <_ZdlPvj>:
 8008a1c:	f000 b8c0 	b.w	8008ba0 <_ZdlPv>

08008a20 <_ZdaPv>:
 8008a20:	f000 b8be 	b.w	8008ba0 <_ZdlPv>

08008a24 <_Znwj>:
 8008a24:	2801      	cmp	r0, #1
 8008a26:	bf38      	it	cc
 8008a28:	2001      	movcc	r0, #1
 8008a2a:	b510      	push	{r4, lr}
 8008a2c:	4604      	mov	r4, r0
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f000 f8c8 	bl	8008bc4 <malloc>
 8008a34:	b100      	cbz	r0, 8008a38 <_Znwj+0x14>
 8008a36:	bd10      	pop	{r4, pc}
 8008a38:	f000 f8b4 	bl	8008ba4 <_ZSt15get_new_handlerv>
 8008a3c:	b908      	cbnz	r0, 8008a42 <_Znwj+0x1e>
 8008a3e:	f000 f8b9 	bl	8008bb4 <abort>
 8008a42:	4780      	blx	r0
 8008a44:	e7f3      	b.n	8008a2e <_Znwj+0xa>

08008a46 <_Znaj>:
 8008a46:	f7ff bfed 	b.w	8008a24 <_Znwj>
	...

08008a4c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8008a4c:	b510      	push	{r4, lr}
 8008a4e:	4b03      	ldr	r3, [pc, #12]	; (8008a5c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8008a50:	6003      	str	r3, [r0, #0]
 8008a52:	4604      	mov	r4, r0
 8008a54:	f7ff ff8e 	bl	8008974 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8008a58:	4620      	mov	r0, r4
 8008a5a:	bd10      	pop	{r4, pc}
 8008a5c:	0800bc54 	.word	0x0800bc54

08008a60 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8008a60:	b510      	push	{r4, lr}
 8008a62:	4604      	mov	r4, r0
 8008a64:	f7ff fff2 	bl	8008a4c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8008a68:	4620      	mov	r0, r4
 8008a6a:	210c      	movs	r1, #12
 8008a6c:	f7ff ffd6 	bl	8008a1c <_ZdlPvj>
 8008a70:	4620      	mov	r0, r4
 8008a72:	bd10      	pop	{r4, pc}

08008a74 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8008a74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a76:	9f08      	ldr	r7, [sp, #32]
 8008a78:	4297      	cmp	r7, r2
 8008a7a:	4605      	mov	r5, r0
 8008a7c:	460e      	mov	r6, r1
 8008a7e:	4614      	mov	r4, r2
 8008a80:	d00a      	beq.n	8008a98 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 8008a82:	68a8      	ldr	r0, [r5, #8]
 8008a84:	6802      	ldr	r2, [r0, #0]
 8008a86:	9708      	str	r7, [sp, #32]
 8008a88:	6a15      	ldr	r5, [r2, #32]
 8008a8a:	4631      	mov	r1, r6
 8008a8c:	4622      	mov	r2, r4
 8008a8e:	46ac      	mov	ip, r5
 8008a90:	b003      	add	sp, #12
 8008a92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8008a96:	4760      	bx	ip
 8008a98:	4619      	mov	r1, r3
 8008a9a:	9301      	str	r3, [sp, #4]
 8008a9c:	f000 f858 	bl	8008b50 <_ZNKSt9type_infoeqERKS_>
 8008aa0:	9b01      	ldr	r3, [sp, #4]
 8008aa2:	2800      	cmp	r0, #0
 8008aa4:	d0ed      	beq.n	8008a82 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 8008aa6:	2006      	movs	r0, #6
 8008aa8:	b003      	add	sp, #12
 8008aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008aac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8008aac:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab0:	460d      	mov	r5, r1
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 8008ab8:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 8008abc:	4681      	mov	r9, r0
 8008abe:	4617      	mov	r7, r2
 8008ac0:	4698      	mov	r8, r3
 8008ac2:	f000 f845 	bl	8008b50 <_ZNKSt9type_infoeqERKS_>
 8008ac6:	b190      	cbz	r0, 8008aee <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8008ac8:	2d00      	cmp	r5, #0
 8008aca:	6034      	str	r4, [r6, #0]
 8008acc:	7137      	strb	r7, [r6, #4]
 8008ace:	db09      	blt.n	8008ae4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8008ad0:	1961      	adds	r1, r4, r5
 8008ad2:	458a      	cmp	sl, r1
 8008ad4:	bf0c      	ite	eq
 8008ad6:	2106      	moveq	r1, #6
 8008ad8:	2101      	movne	r1, #1
 8008ada:	71b1      	strb	r1, [r6, #6]
 8008adc:	2000      	movs	r0, #0
 8008ade:	b001      	add	sp, #4
 8008ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ae4:	3502      	adds	r5, #2
 8008ae6:	d1f9      	bne.n	8008adc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8008ae8:	2301      	movs	r3, #1
 8008aea:	71b3      	strb	r3, [r6, #6]
 8008aec:	e7f6      	b.n	8008adc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8008aee:	4554      	cmp	r4, sl
 8008af0:	d106      	bne.n	8008b00 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8008af2:	4659      	mov	r1, fp
 8008af4:	4648      	mov	r0, r9
 8008af6:	f000 f82b 	bl	8008b50 <_ZNKSt9type_infoeqERKS_>
 8008afa:	b108      	cbz	r0, 8008b00 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8008afc:	7177      	strb	r7, [r6, #5]
 8008afe:	e7ed      	b.n	8008adc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8008b00:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8008b04:	6803      	ldr	r3, [r0, #0]
 8008b06:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 8008b0a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 8008b0e:	69dc      	ldr	r4, [r3, #28]
 8008b10:	463a      	mov	r2, r7
 8008b12:	4643      	mov	r3, r8
 8008b14:	4629      	mov	r1, r5
 8008b16:	46a4      	mov	ip, r4
 8008b18:	b001      	add	sp, #4
 8008b1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b1e:	4760      	bx	ip

08008b20 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8008b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b24:	4607      	mov	r7, r0
 8008b26:	460c      	mov	r4, r1
 8008b28:	4615      	mov	r5, r2
 8008b2a:	461e      	mov	r6, r3
 8008b2c:	f7ff ff55 	bl	80089da <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8008b30:	b948      	cbnz	r0, 8008b46 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8008b32:	68b8      	ldr	r0, [r7, #8]
 8008b34:	6803      	ldr	r3, [r0, #0]
 8008b36:	699f      	ldr	r7, [r3, #24]
 8008b38:	462a      	mov	r2, r5
 8008b3a:	4633      	mov	r3, r6
 8008b3c:	4621      	mov	r1, r4
 8008b3e:	46bc      	mov	ip, r7
 8008b40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b44:	4760      	bx	ip
 8008b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008b4a <_ZNSt9type_infoD1Ev>:
 8008b4a:	4770      	bx	lr

08008b4c <_ZNKSt9type_info14__is_pointer_pEv>:
 8008b4c:	2000      	movs	r0, #0
 8008b4e:	4770      	bx	lr

08008b50 <_ZNKSt9type_infoeqERKS_>:
 8008b50:	4281      	cmp	r1, r0
 8008b52:	b508      	push	{r3, lr}
 8008b54:	d00e      	beq.n	8008b74 <_ZNKSt9type_infoeqERKS_+0x24>
 8008b56:	6840      	ldr	r0, [r0, #4]
 8008b58:	7803      	ldrb	r3, [r0, #0]
 8008b5a:	2b2a      	cmp	r3, #42	; 0x2a
 8008b5c:	d00c      	beq.n	8008b78 <_ZNKSt9type_infoeqERKS_+0x28>
 8008b5e:	6849      	ldr	r1, [r1, #4]
 8008b60:	780b      	ldrb	r3, [r1, #0]
 8008b62:	2b2a      	cmp	r3, #42	; 0x2a
 8008b64:	bf08      	it	eq
 8008b66:	3101      	addeq	r1, #1
 8008b68:	f7f7 fb52 	bl	8000210 <strcmp>
 8008b6c:	fab0 f080 	clz	r0, r0
 8008b70:	0940      	lsrs	r0, r0, #5
 8008b72:	bd08      	pop	{r3, pc}
 8008b74:	2001      	movs	r0, #1
 8008b76:	e7fc      	b.n	8008b72 <_ZNKSt9type_infoeqERKS_+0x22>
 8008b78:	2000      	movs	r0, #0
 8008b7a:	e7fa      	b.n	8008b72 <_ZNKSt9type_infoeqERKS_+0x22>

08008b7c <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 8008b7c:	684b      	ldr	r3, [r1, #4]
 8008b7e:	6043      	str	r3, [r0, #4]
 8008b80:	684b      	ldr	r3, [r1, #4]
 8008b82:	6001      	str	r1, [r0, #0]
 8008b84:	6018      	str	r0, [r3, #0]
 8008b86:	6048      	str	r0, [r1, #4]
 8008b88:	4770      	bx	lr

08008b8a <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 8008b8a:	e9d0 3200 	ldrd	r3, r2, [r0]
 8008b8e:	6013      	str	r3, [r2, #0]
 8008b90:	605a      	str	r2, [r3, #4]
 8008b92:	4770      	bx	lr

08008b94 <_ZSt17__throw_bad_allocv>:
 8008b94:	b508      	push	{r3, lr}
 8008b96:	f000 f80d 	bl	8008bb4 <abort>

08008b9a <_ZSt28__throw_bad_array_new_lengthv>:
 8008b9a:	b508      	push	{r3, lr}
 8008b9c:	f000 f80a 	bl	8008bb4 <abort>

08008ba0 <_ZdlPv>:
 8008ba0:	f000 b818 	b.w	8008bd4 <free>

08008ba4 <_ZSt15get_new_handlerv>:
 8008ba4:	4b02      	ldr	r3, [pc, #8]	; (8008bb0 <_ZSt15get_new_handlerv+0xc>)
 8008ba6:	6818      	ldr	r0, [r3, #0]
 8008ba8:	f3bf 8f5b 	dmb	ish
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	20000384 	.word	0x20000384

08008bb4 <abort>:
 8008bb4:	b508      	push	{r3, lr}
 8008bb6:	2006      	movs	r0, #6
 8008bb8:	f000 fe7c 	bl	80098b4 <raise>
 8008bbc:	2001      	movs	r0, #1
 8008bbe:	f7fc f925 	bl	8004e0c <_exit>
	...

08008bc4 <malloc>:
 8008bc4:	4b02      	ldr	r3, [pc, #8]	; (8008bd0 <malloc+0xc>)
 8008bc6:	4601      	mov	r1, r0
 8008bc8:	6818      	ldr	r0, [r3, #0]
 8008bca:	f000 b82b 	b.w	8008c24 <_malloc_r>
 8008bce:	bf00      	nop
 8008bd0:	20000064 	.word	0x20000064

08008bd4 <free>:
 8008bd4:	4b02      	ldr	r3, [pc, #8]	; (8008be0 <free+0xc>)
 8008bd6:	4601      	mov	r1, r0
 8008bd8:	6818      	ldr	r0, [r3, #0]
 8008bda:	f001 bd97 	b.w	800a70c <_free_r>
 8008bde:	bf00      	nop
 8008be0:	20000064 	.word	0x20000064

08008be4 <sbrk_aligned>:
 8008be4:	b570      	push	{r4, r5, r6, lr}
 8008be6:	4e0e      	ldr	r6, [pc, #56]	; (8008c20 <sbrk_aligned+0x3c>)
 8008be8:	460c      	mov	r4, r1
 8008bea:	6831      	ldr	r1, [r6, #0]
 8008bec:	4605      	mov	r5, r0
 8008bee:	b911      	cbnz	r1, 8008bf6 <sbrk_aligned+0x12>
 8008bf0:	f000 feb4 	bl	800995c <_sbrk_r>
 8008bf4:	6030      	str	r0, [r6, #0]
 8008bf6:	4621      	mov	r1, r4
 8008bf8:	4628      	mov	r0, r5
 8008bfa:	f000 feaf 	bl	800995c <_sbrk_r>
 8008bfe:	1c43      	adds	r3, r0, #1
 8008c00:	d00a      	beq.n	8008c18 <sbrk_aligned+0x34>
 8008c02:	1cc4      	adds	r4, r0, #3
 8008c04:	f024 0403 	bic.w	r4, r4, #3
 8008c08:	42a0      	cmp	r0, r4
 8008c0a:	d007      	beq.n	8008c1c <sbrk_aligned+0x38>
 8008c0c:	1a21      	subs	r1, r4, r0
 8008c0e:	4628      	mov	r0, r5
 8008c10:	f000 fea4 	bl	800995c <_sbrk_r>
 8008c14:	3001      	adds	r0, #1
 8008c16:	d101      	bne.n	8008c1c <sbrk_aligned+0x38>
 8008c18:	f04f 34ff 	mov.w	r4, #4294967295
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	bd70      	pop	{r4, r5, r6, pc}
 8008c20:	2000038c 	.word	0x2000038c

08008c24 <_malloc_r>:
 8008c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c28:	1ccd      	adds	r5, r1, #3
 8008c2a:	f025 0503 	bic.w	r5, r5, #3
 8008c2e:	3508      	adds	r5, #8
 8008c30:	2d0c      	cmp	r5, #12
 8008c32:	bf38      	it	cc
 8008c34:	250c      	movcc	r5, #12
 8008c36:	2d00      	cmp	r5, #0
 8008c38:	4607      	mov	r7, r0
 8008c3a:	db01      	blt.n	8008c40 <_malloc_r+0x1c>
 8008c3c:	42a9      	cmp	r1, r5
 8008c3e:	d905      	bls.n	8008c4c <_malloc_r+0x28>
 8008c40:	230c      	movs	r3, #12
 8008c42:	603b      	str	r3, [r7, #0]
 8008c44:	2600      	movs	r6, #0
 8008c46:	4630      	mov	r0, r6
 8008c48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008d20 <_malloc_r+0xfc>
 8008c50:	f000 f868 	bl	8008d24 <__malloc_lock>
 8008c54:	f8d8 3000 	ldr.w	r3, [r8]
 8008c58:	461c      	mov	r4, r3
 8008c5a:	bb5c      	cbnz	r4, 8008cb4 <_malloc_r+0x90>
 8008c5c:	4629      	mov	r1, r5
 8008c5e:	4638      	mov	r0, r7
 8008c60:	f7ff ffc0 	bl	8008be4 <sbrk_aligned>
 8008c64:	1c43      	adds	r3, r0, #1
 8008c66:	4604      	mov	r4, r0
 8008c68:	d155      	bne.n	8008d16 <_malloc_r+0xf2>
 8008c6a:	f8d8 4000 	ldr.w	r4, [r8]
 8008c6e:	4626      	mov	r6, r4
 8008c70:	2e00      	cmp	r6, #0
 8008c72:	d145      	bne.n	8008d00 <_malloc_r+0xdc>
 8008c74:	2c00      	cmp	r4, #0
 8008c76:	d048      	beq.n	8008d0a <_malloc_r+0xe6>
 8008c78:	6823      	ldr	r3, [r4, #0]
 8008c7a:	4631      	mov	r1, r6
 8008c7c:	4638      	mov	r0, r7
 8008c7e:	eb04 0903 	add.w	r9, r4, r3
 8008c82:	f000 fe6b 	bl	800995c <_sbrk_r>
 8008c86:	4581      	cmp	r9, r0
 8008c88:	d13f      	bne.n	8008d0a <_malloc_r+0xe6>
 8008c8a:	6821      	ldr	r1, [r4, #0]
 8008c8c:	1a6d      	subs	r5, r5, r1
 8008c8e:	4629      	mov	r1, r5
 8008c90:	4638      	mov	r0, r7
 8008c92:	f7ff ffa7 	bl	8008be4 <sbrk_aligned>
 8008c96:	3001      	adds	r0, #1
 8008c98:	d037      	beq.n	8008d0a <_malloc_r+0xe6>
 8008c9a:	6823      	ldr	r3, [r4, #0]
 8008c9c:	442b      	add	r3, r5
 8008c9e:	6023      	str	r3, [r4, #0]
 8008ca0:	f8d8 3000 	ldr.w	r3, [r8]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d038      	beq.n	8008d1a <_malloc_r+0xf6>
 8008ca8:	685a      	ldr	r2, [r3, #4]
 8008caa:	42a2      	cmp	r2, r4
 8008cac:	d12b      	bne.n	8008d06 <_malloc_r+0xe2>
 8008cae:	2200      	movs	r2, #0
 8008cb0:	605a      	str	r2, [r3, #4]
 8008cb2:	e00f      	b.n	8008cd4 <_malloc_r+0xb0>
 8008cb4:	6822      	ldr	r2, [r4, #0]
 8008cb6:	1b52      	subs	r2, r2, r5
 8008cb8:	d41f      	bmi.n	8008cfa <_malloc_r+0xd6>
 8008cba:	2a0b      	cmp	r2, #11
 8008cbc:	d917      	bls.n	8008cee <_malloc_r+0xca>
 8008cbe:	1961      	adds	r1, r4, r5
 8008cc0:	42a3      	cmp	r3, r4
 8008cc2:	6025      	str	r5, [r4, #0]
 8008cc4:	bf18      	it	ne
 8008cc6:	6059      	strne	r1, [r3, #4]
 8008cc8:	6863      	ldr	r3, [r4, #4]
 8008cca:	bf08      	it	eq
 8008ccc:	f8c8 1000 	streq.w	r1, [r8]
 8008cd0:	5162      	str	r2, [r4, r5]
 8008cd2:	604b      	str	r3, [r1, #4]
 8008cd4:	4638      	mov	r0, r7
 8008cd6:	f104 060b 	add.w	r6, r4, #11
 8008cda:	f000 f829 	bl	8008d30 <__malloc_unlock>
 8008cde:	f026 0607 	bic.w	r6, r6, #7
 8008ce2:	1d23      	adds	r3, r4, #4
 8008ce4:	1af2      	subs	r2, r6, r3
 8008ce6:	d0ae      	beq.n	8008c46 <_malloc_r+0x22>
 8008ce8:	1b9b      	subs	r3, r3, r6
 8008cea:	50a3      	str	r3, [r4, r2]
 8008cec:	e7ab      	b.n	8008c46 <_malloc_r+0x22>
 8008cee:	42a3      	cmp	r3, r4
 8008cf0:	6862      	ldr	r2, [r4, #4]
 8008cf2:	d1dd      	bne.n	8008cb0 <_malloc_r+0x8c>
 8008cf4:	f8c8 2000 	str.w	r2, [r8]
 8008cf8:	e7ec      	b.n	8008cd4 <_malloc_r+0xb0>
 8008cfa:	4623      	mov	r3, r4
 8008cfc:	6864      	ldr	r4, [r4, #4]
 8008cfe:	e7ac      	b.n	8008c5a <_malloc_r+0x36>
 8008d00:	4634      	mov	r4, r6
 8008d02:	6876      	ldr	r6, [r6, #4]
 8008d04:	e7b4      	b.n	8008c70 <_malloc_r+0x4c>
 8008d06:	4613      	mov	r3, r2
 8008d08:	e7cc      	b.n	8008ca4 <_malloc_r+0x80>
 8008d0a:	230c      	movs	r3, #12
 8008d0c:	603b      	str	r3, [r7, #0]
 8008d0e:	4638      	mov	r0, r7
 8008d10:	f000 f80e 	bl	8008d30 <__malloc_unlock>
 8008d14:	e797      	b.n	8008c46 <_malloc_r+0x22>
 8008d16:	6025      	str	r5, [r4, #0]
 8008d18:	e7dc      	b.n	8008cd4 <_malloc_r+0xb0>
 8008d1a:	605b      	str	r3, [r3, #4]
 8008d1c:	deff      	udf	#255	; 0xff
 8008d1e:	bf00      	nop
 8008d20:	20000388 	.word	0x20000388

08008d24 <__malloc_lock>:
 8008d24:	4801      	ldr	r0, [pc, #4]	; (8008d2c <__malloc_lock+0x8>)
 8008d26:	f000 be66 	b.w	80099f6 <__retarget_lock_acquire_recursive>
 8008d2a:	bf00      	nop
 8008d2c:	200004d0 	.word	0x200004d0

08008d30 <__malloc_unlock>:
 8008d30:	4801      	ldr	r0, [pc, #4]	; (8008d38 <__malloc_unlock+0x8>)
 8008d32:	f000 be61 	b.w	80099f8 <__retarget_lock_release_recursive>
 8008d36:	bf00      	nop
 8008d38:	200004d0 	.word	0x200004d0

08008d3c <__cvt>:
 8008d3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d40:	ec55 4b10 	vmov	r4, r5, d0
 8008d44:	2d00      	cmp	r5, #0
 8008d46:	460e      	mov	r6, r1
 8008d48:	4619      	mov	r1, r3
 8008d4a:	462b      	mov	r3, r5
 8008d4c:	bfbb      	ittet	lt
 8008d4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008d52:	461d      	movlt	r5, r3
 8008d54:	2300      	movge	r3, #0
 8008d56:	232d      	movlt	r3, #45	; 0x2d
 8008d58:	700b      	strb	r3, [r1, #0]
 8008d5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008d60:	4691      	mov	r9, r2
 8008d62:	f023 0820 	bic.w	r8, r3, #32
 8008d66:	bfbc      	itt	lt
 8008d68:	4622      	movlt	r2, r4
 8008d6a:	4614      	movlt	r4, r2
 8008d6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d70:	d005      	beq.n	8008d7e <__cvt+0x42>
 8008d72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008d76:	d100      	bne.n	8008d7a <__cvt+0x3e>
 8008d78:	3601      	adds	r6, #1
 8008d7a:	2102      	movs	r1, #2
 8008d7c:	e000      	b.n	8008d80 <__cvt+0x44>
 8008d7e:	2103      	movs	r1, #3
 8008d80:	ab03      	add	r3, sp, #12
 8008d82:	9301      	str	r3, [sp, #4]
 8008d84:	ab02      	add	r3, sp, #8
 8008d86:	9300      	str	r3, [sp, #0]
 8008d88:	ec45 4b10 	vmov	d0, r4, r5
 8008d8c:	4653      	mov	r3, sl
 8008d8e:	4632      	mov	r2, r6
 8008d90:	f000 feca 	bl	8009b28 <_dtoa_r>
 8008d94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008d98:	4607      	mov	r7, r0
 8008d9a:	d102      	bne.n	8008da2 <__cvt+0x66>
 8008d9c:	f019 0f01 	tst.w	r9, #1
 8008da0:	d022      	beq.n	8008de8 <__cvt+0xac>
 8008da2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008da6:	eb07 0906 	add.w	r9, r7, r6
 8008daa:	d110      	bne.n	8008dce <__cvt+0x92>
 8008dac:	783b      	ldrb	r3, [r7, #0]
 8008dae:	2b30      	cmp	r3, #48	; 0x30
 8008db0:	d10a      	bne.n	8008dc8 <__cvt+0x8c>
 8008db2:	2200      	movs	r2, #0
 8008db4:	2300      	movs	r3, #0
 8008db6:	4620      	mov	r0, r4
 8008db8:	4629      	mov	r1, r5
 8008dba:	f7f7 feb5 	bl	8000b28 <__aeabi_dcmpeq>
 8008dbe:	b918      	cbnz	r0, 8008dc8 <__cvt+0x8c>
 8008dc0:	f1c6 0601 	rsb	r6, r6, #1
 8008dc4:	f8ca 6000 	str.w	r6, [sl]
 8008dc8:	f8da 3000 	ldr.w	r3, [sl]
 8008dcc:	4499      	add	r9, r3
 8008dce:	2200      	movs	r2, #0
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	4629      	mov	r1, r5
 8008dd6:	f7f7 fea7 	bl	8000b28 <__aeabi_dcmpeq>
 8008dda:	b108      	cbz	r0, 8008de0 <__cvt+0xa4>
 8008ddc:	f8cd 900c 	str.w	r9, [sp, #12]
 8008de0:	2230      	movs	r2, #48	; 0x30
 8008de2:	9b03      	ldr	r3, [sp, #12]
 8008de4:	454b      	cmp	r3, r9
 8008de6:	d307      	bcc.n	8008df8 <__cvt+0xbc>
 8008de8:	9b03      	ldr	r3, [sp, #12]
 8008dea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008dec:	1bdb      	subs	r3, r3, r7
 8008dee:	4638      	mov	r0, r7
 8008df0:	6013      	str	r3, [r2, #0]
 8008df2:	b004      	add	sp, #16
 8008df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008df8:	1c59      	adds	r1, r3, #1
 8008dfa:	9103      	str	r1, [sp, #12]
 8008dfc:	701a      	strb	r2, [r3, #0]
 8008dfe:	e7f0      	b.n	8008de2 <__cvt+0xa6>

08008e00 <__exponent>:
 8008e00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e02:	4603      	mov	r3, r0
 8008e04:	2900      	cmp	r1, #0
 8008e06:	bfb8      	it	lt
 8008e08:	4249      	neglt	r1, r1
 8008e0a:	f803 2b02 	strb.w	r2, [r3], #2
 8008e0e:	bfb4      	ite	lt
 8008e10:	222d      	movlt	r2, #45	; 0x2d
 8008e12:	222b      	movge	r2, #43	; 0x2b
 8008e14:	2909      	cmp	r1, #9
 8008e16:	7042      	strb	r2, [r0, #1]
 8008e18:	dd2a      	ble.n	8008e70 <__exponent+0x70>
 8008e1a:	f10d 0207 	add.w	r2, sp, #7
 8008e1e:	4617      	mov	r7, r2
 8008e20:	260a      	movs	r6, #10
 8008e22:	4694      	mov	ip, r2
 8008e24:	fb91 f5f6 	sdiv	r5, r1, r6
 8008e28:	fb06 1415 	mls	r4, r6, r5, r1
 8008e2c:	3430      	adds	r4, #48	; 0x30
 8008e2e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008e32:	460c      	mov	r4, r1
 8008e34:	2c63      	cmp	r4, #99	; 0x63
 8008e36:	f102 32ff 	add.w	r2, r2, #4294967295
 8008e3a:	4629      	mov	r1, r5
 8008e3c:	dcf1      	bgt.n	8008e22 <__exponent+0x22>
 8008e3e:	3130      	adds	r1, #48	; 0x30
 8008e40:	f1ac 0402 	sub.w	r4, ip, #2
 8008e44:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008e48:	1c41      	adds	r1, r0, #1
 8008e4a:	4622      	mov	r2, r4
 8008e4c:	42ba      	cmp	r2, r7
 8008e4e:	d30a      	bcc.n	8008e66 <__exponent+0x66>
 8008e50:	f10d 0209 	add.w	r2, sp, #9
 8008e54:	eba2 020c 	sub.w	r2, r2, ip
 8008e58:	42bc      	cmp	r4, r7
 8008e5a:	bf88      	it	hi
 8008e5c:	2200      	movhi	r2, #0
 8008e5e:	4413      	add	r3, r2
 8008e60:	1a18      	subs	r0, r3, r0
 8008e62:	b003      	add	sp, #12
 8008e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e66:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008e6a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008e6e:	e7ed      	b.n	8008e4c <__exponent+0x4c>
 8008e70:	2330      	movs	r3, #48	; 0x30
 8008e72:	3130      	adds	r1, #48	; 0x30
 8008e74:	7083      	strb	r3, [r0, #2]
 8008e76:	70c1      	strb	r1, [r0, #3]
 8008e78:	1d03      	adds	r3, r0, #4
 8008e7a:	e7f1      	b.n	8008e60 <__exponent+0x60>

08008e7c <_printf_float>:
 8008e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e80:	ed2d 8b02 	vpush	{d8}
 8008e84:	b08d      	sub	sp, #52	; 0x34
 8008e86:	460c      	mov	r4, r1
 8008e88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008e8c:	4616      	mov	r6, r2
 8008e8e:	461f      	mov	r7, r3
 8008e90:	4605      	mov	r5, r0
 8008e92:	f000 fd17 	bl	80098c4 <_localeconv_r>
 8008e96:	f8d0 a000 	ldr.w	sl, [r0]
 8008e9a:	4650      	mov	r0, sl
 8008e9c:	f7f7 fa18 	bl	80002d0 <strlen>
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	930a      	str	r3, [sp, #40]	; 0x28
 8008ea4:	6823      	ldr	r3, [r4, #0]
 8008ea6:	9305      	str	r3, [sp, #20]
 8008ea8:	f8d8 3000 	ldr.w	r3, [r8]
 8008eac:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008eb0:	3307      	adds	r3, #7
 8008eb2:	f023 0307 	bic.w	r3, r3, #7
 8008eb6:	f103 0208 	add.w	r2, r3, #8
 8008eba:	f8c8 2000 	str.w	r2, [r8]
 8008ebe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008ec2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008ec6:	9307      	str	r3, [sp, #28]
 8008ec8:	f8cd 8018 	str.w	r8, [sp, #24]
 8008ecc:	ee08 0a10 	vmov	s16, r0
 8008ed0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008ed4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ed8:	4b9e      	ldr	r3, [pc, #632]	; (8009154 <_printf_float+0x2d8>)
 8008eda:	f04f 32ff 	mov.w	r2, #4294967295
 8008ede:	f7f7 fe55 	bl	8000b8c <__aeabi_dcmpun>
 8008ee2:	bb88      	cbnz	r0, 8008f48 <_printf_float+0xcc>
 8008ee4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ee8:	4b9a      	ldr	r3, [pc, #616]	; (8009154 <_printf_float+0x2d8>)
 8008eea:	f04f 32ff 	mov.w	r2, #4294967295
 8008eee:	f7f7 fe2f 	bl	8000b50 <__aeabi_dcmple>
 8008ef2:	bb48      	cbnz	r0, 8008f48 <_printf_float+0xcc>
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	4640      	mov	r0, r8
 8008efa:	4649      	mov	r1, r9
 8008efc:	f7f7 fe1e 	bl	8000b3c <__aeabi_dcmplt>
 8008f00:	b110      	cbz	r0, 8008f08 <_printf_float+0x8c>
 8008f02:	232d      	movs	r3, #45	; 0x2d
 8008f04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f08:	4a93      	ldr	r2, [pc, #588]	; (8009158 <_printf_float+0x2dc>)
 8008f0a:	4b94      	ldr	r3, [pc, #592]	; (800915c <_printf_float+0x2e0>)
 8008f0c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008f10:	bf94      	ite	ls
 8008f12:	4690      	movls	r8, r2
 8008f14:	4698      	movhi	r8, r3
 8008f16:	2303      	movs	r3, #3
 8008f18:	6123      	str	r3, [r4, #16]
 8008f1a:	9b05      	ldr	r3, [sp, #20]
 8008f1c:	f023 0304 	bic.w	r3, r3, #4
 8008f20:	6023      	str	r3, [r4, #0]
 8008f22:	f04f 0900 	mov.w	r9, #0
 8008f26:	9700      	str	r7, [sp, #0]
 8008f28:	4633      	mov	r3, r6
 8008f2a:	aa0b      	add	r2, sp, #44	; 0x2c
 8008f2c:	4621      	mov	r1, r4
 8008f2e:	4628      	mov	r0, r5
 8008f30:	f000 f9da 	bl	80092e8 <_printf_common>
 8008f34:	3001      	adds	r0, #1
 8008f36:	f040 8090 	bne.w	800905a <_printf_float+0x1de>
 8008f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f3e:	b00d      	add	sp, #52	; 0x34
 8008f40:	ecbd 8b02 	vpop	{d8}
 8008f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f48:	4642      	mov	r2, r8
 8008f4a:	464b      	mov	r3, r9
 8008f4c:	4640      	mov	r0, r8
 8008f4e:	4649      	mov	r1, r9
 8008f50:	f7f7 fe1c 	bl	8000b8c <__aeabi_dcmpun>
 8008f54:	b140      	cbz	r0, 8008f68 <_printf_float+0xec>
 8008f56:	464b      	mov	r3, r9
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	bfbc      	itt	lt
 8008f5c:	232d      	movlt	r3, #45	; 0x2d
 8008f5e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008f62:	4a7f      	ldr	r2, [pc, #508]	; (8009160 <_printf_float+0x2e4>)
 8008f64:	4b7f      	ldr	r3, [pc, #508]	; (8009164 <_printf_float+0x2e8>)
 8008f66:	e7d1      	b.n	8008f0c <_printf_float+0x90>
 8008f68:	6863      	ldr	r3, [r4, #4]
 8008f6a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008f6e:	9206      	str	r2, [sp, #24]
 8008f70:	1c5a      	adds	r2, r3, #1
 8008f72:	d13f      	bne.n	8008ff4 <_printf_float+0x178>
 8008f74:	2306      	movs	r3, #6
 8008f76:	6063      	str	r3, [r4, #4]
 8008f78:	9b05      	ldr	r3, [sp, #20]
 8008f7a:	6861      	ldr	r1, [r4, #4]
 8008f7c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008f80:	2300      	movs	r3, #0
 8008f82:	9303      	str	r3, [sp, #12]
 8008f84:	ab0a      	add	r3, sp, #40	; 0x28
 8008f86:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008f8a:	ab09      	add	r3, sp, #36	; 0x24
 8008f8c:	ec49 8b10 	vmov	d0, r8, r9
 8008f90:	9300      	str	r3, [sp, #0]
 8008f92:	6022      	str	r2, [r4, #0]
 8008f94:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008f98:	4628      	mov	r0, r5
 8008f9a:	f7ff fecf 	bl	8008d3c <__cvt>
 8008f9e:	9b06      	ldr	r3, [sp, #24]
 8008fa0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fa2:	2b47      	cmp	r3, #71	; 0x47
 8008fa4:	4680      	mov	r8, r0
 8008fa6:	d108      	bne.n	8008fba <_printf_float+0x13e>
 8008fa8:	1cc8      	adds	r0, r1, #3
 8008faa:	db02      	blt.n	8008fb2 <_printf_float+0x136>
 8008fac:	6863      	ldr	r3, [r4, #4]
 8008fae:	4299      	cmp	r1, r3
 8008fb0:	dd41      	ble.n	8009036 <_printf_float+0x1ba>
 8008fb2:	f1ab 0302 	sub.w	r3, fp, #2
 8008fb6:	fa5f fb83 	uxtb.w	fp, r3
 8008fba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008fbe:	d820      	bhi.n	8009002 <_printf_float+0x186>
 8008fc0:	3901      	subs	r1, #1
 8008fc2:	465a      	mov	r2, fp
 8008fc4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008fc8:	9109      	str	r1, [sp, #36]	; 0x24
 8008fca:	f7ff ff19 	bl	8008e00 <__exponent>
 8008fce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fd0:	1813      	adds	r3, r2, r0
 8008fd2:	2a01      	cmp	r2, #1
 8008fd4:	4681      	mov	r9, r0
 8008fd6:	6123      	str	r3, [r4, #16]
 8008fd8:	dc02      	bgt.n	8008fe0 <_printf_float+0x164>
 8008fda:	6822      	ldr	r2, [r4, #0]
 8008fdc:	07d2      	lsls	r2, r2, #31
 8008fde:	d501      	bpl.n	8008fe4 <_printf_float+0x168>
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	6123      	str	r3, [r4, #16]
 8008fe4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d09c      	beq.n	8008f26 <_printf_float+0xaa>
 8008fec:	232d      	movs	r3, #45	; 0x2d
 8008fee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ff2:	e798      	b.n	8008f26 <_printf_float+0xaa>
 8008ff4:	9a06      	ldr	r2, [sp, #24]
 8008ff6:	2a47      	cmp	r2, #71	; 0x47
 8008ff8:	d1be      	bne.n	8008f78 <_printf_float+0xfc>
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d1bc      	bne.n	8008f78 <_printf_float+0xfc>
 8008ffe:	2301      	movs	r3, #1
 8009000:	e7b9      	b.n	8008f76 <_printf_float+0xfa>
 8009002:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009006:	d118      	bne.n	800903a <_printf_float+0x1be>
 8009008:	2900      	cmp	r1, #0
 800900a:	6863      	ldr	r3, [r4, #4]
 800900c:	dd0b      	ble.n	8009026 <_printf_float+0x1aa>
 800900e:	6121      	str	r1, [r4, #16]
 8009010:	b913      	cbnz	r3, 8009018 <_printf_float+0x19c>
 8009012:	6822      	ldr	r2, [r4, #0]
 8009014:	07d0      	lsls	r0, r2, #31
 8009016:	d502      	bpl.n	800901e <_printf_float+0x1a2>
 8009018:	3301      	adds	r3, #1
 800901a:	440b      	add	r3, r1
 800901c:	6123      	str	r3, [r4, #16]
 800901e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009020:	f04f 0900 	mov.w	r9, #0
 8009024:	e7de      	b.n	8008fe4 <_printf_float+0x168>
 8009026:	b913      	cbnz	r3, 800902e <_printf_float+0x1b2>
 8009028:	6822      	ldr	r2, [r4, #0]
 800902a:	07d2      	lsls	r2, r2, #31
 800902c:	d501      	bpl.n	8009032 <_printf_float+0x1b6>
 800902e:	3302      	adds	r3, #2
 8009030:	e7f4      	b.n	800901c <_printf_float+0x1a0>
 8009032:	2301      	movs	r3, #1
 8009034:	e7f2      	b.n	800901c <_printf_float+0x1a0>
 8009036:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800903a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800903c:	4299      	cmp	r1, r3
 800903e:	db05      	blt.n	800904c <_printf_float+0x1d0>
 8009040:	6823      	ldr	r3, [r4, #0]
 8009042:	6121      	str	r1, [r4, #16]
 8009044:	07d8      	lsls	r0, r3, #31
 8009046:	d5ea      	bpl.n	800901e <_printf_float+0x1a2>
 8009048:	1c4b      	adds	r3, r1, #1
 800904a:	e7e7      	b.n	800901c <_printf_float+0x1a0>
 800904c:	2900      	cmp	r1, #0
 800904e:	bfd4      	ite	le
 8009050:	f1c1 0202 	rsble	r2, r1, #2
 8009054:	2201      	movgt	r2, #1
 8009056:	4413      	add	r3, r2
 8009058:	e7e0      	b.n	800901c <_printf_float+0x1a0>
 800905a:	6823      	ldr	r3, [r4, #0]
 800905c:	055a      	lsls	r2, r3, #21
 800905e:	d407      	bmi.n	8009070 <_printf_float+0x1f4>
 8009060:	6923      	ldr	r3, [r4, #16]
 8009062:	4642      	mov	r2, r8
 8009064:	4631      	mov	r1, r6
 8009066:	4628      	mov	r0, r5
 8009068:	47b8      	blx	r7
 800906a:	3001      	adds	r0, #1
 800906c:	d12c      	bne.n	80090c8 <_printf_float+0x24c>
 800906e:	e764      	b.n	8008f3a <_printf_float+0xbe>
 8009070:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009074:	f240 80e0 	bls.w	8009238 <_printf_float+0x3bc>
 8009078:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800907c:	2200      	movs	r2, #0
 800907e:	2300      	movs	r3, #0
 8009080:	f7f7 fd52 	bl	8000b28 <__aeabi_dcmpeq>
 8009084:	2800      	cmp	r0, #0
 8009086:	d034      	beq.n	80090f2 <_printf_float+0x276>
 8009088:	4a37      	ldr	r2, [pc, #220]	; (8009168 <_printf_float+0x2ec>)
 800908a:	2301      	movs	r3, #1
 800908c:	4631      	mov	r1, r6
 800908e:	4628      	mov	r0, r5
 8009090:	47b8      	blx	r7
 8009092:	3001      	adds	r0, #1
 8009094:	f43f af51 	beq.w	8008f3a <_printf_float+0xbe>
 8009098:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800909c:	429a      	cmp	r2, r3
 800909e:	db02      	blt.n	80090a6 <_printf_float+0x22a>
 80090a0:	6823      	ldr	r3, [r4, #0]
 80090a2:	07d8      	lsls	r0, r3, #31
 80090a4:	d510      	bpl.n	80090c8 <_printf_float+0x24c>
 80090a6:	ee18 3a10 	vmov	r3, s16
 80090aa:	4652      	mov	r2, sl
 80090ac:	4631      	mov	r1, r6
 80090ae:	4628      	mov	r0, r5
 80090b0:	47b8      	blx	r7
 80090b2:	3001      	adds	r0, #1
 80090b4:	f43f af41 	beq.w	8008f3a <_printf_float+0xbe>
 80090b8:	f04f 0800 	mov.w	r8, #0
 80090bc:	f104 091a 	add.w	r9, r4, #26
 80090c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090c2:	3b01      	subs	r3, #1
 80090c4:	4543      	cmp	r3, r8
 80090c6:	dc09      	bgt.n	80090dc <_printf_float+0x260>
 80090c8:	6823      	ldr	r3, [r4, #0]
 80090ca:	079b      	lsls	r3, r3, #30
 80090cc:	f100 8107 	bmi.w	80092de <_printf_float+0x462>
 80090d0:	68e0      	ldr	r0, [r4, #12]
 80090d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090d4:	4298      	cmp	r0, r3
 80090d6:	bfb8      	it	lt
 80090d8:	4618      	movlt	r0, r3
 80090da:	e730      	b.n	8008f3e <_printf_float+0xc2>
 80090dc:	2301      	movs	r3, #1
 80090de:	464a      	mov	r2, r9
 80090e0:	4631      	mov	r1, r6
 80090e2:	4628      	mov	r0, r5
 80090e4:	47b8      	blx	r7
 80090e6:	3001      	adds	r0, #1
 80090e8:	f43f af27 	beq.w	8008f3a <_printf_float+0xbe>
 80090ec:	f108 0801 	add.w	r8, r8, #1
 80090f0:	e7e6      	b.n	80090c0 <_printf_float+0x244>
 80090f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	dc39      	bgt.n	800916c <_printf_float+0x2f0>
 80090f8:	4a1b      	ldr	r2, [pc, #108]	; (8009168 <_printf_float+0x2ec>)
 80090fa:	2301      	movs	r3, #1
 80090fc:	4631      	mov	r1, r6
 80090fe:	4628      	mov	r0, r5
 8009100:	47b8      	blx	r7
 8009102:	3001      	adds	r0, #1
 8009104:	f43f af19 	beq.w	8008f3a <_printf_float+0xbe>
 8009108:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800910c:	4313      	orrs	r3, r2
 800910e:	d102      	bne.n	8009116 <_printf_float+0x29a>
 8009110:	6823      	ldr	r3, [r4, #0]
 8009112:	07d9      	lsls	r1, r3, #31
 8009114:	d5d8      	bpl.n	80090c8 <_printf_float+0x24c>
 8009116:	ee18 3a10 	vmov	r3, s16
 800911a:	4652      	mov	r2, sl
 800911c:	4631      	mov	r1, r6
 800911e:	4628      	mov	r0, r5
 8009120:	47b8      	blx	r7
 8009122:	3001      	adds	r0, #1
 8009124:	f43f af09 	beq.w	8008f3a <_printf_float+0xbe>
 8009128:	f04f 0900 	mov.w	r9, #0
 800912c:	f104 0a1a 	add.w	sl, r4, #26
 8009130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009132:	425b      	negs	r3, r3
 8009134:	454b      	cmp	r3, r9
 8009136:	dc01      	bgt.n	800913c <_printf_float+0x2c0>
 8009138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800913a:	e792      	b.n	8009062 <_printf_float+0x1e6>
 800913c:	2301      	movs	r3, #1
 800913e:	4652      	mov	r2, sl
 8009140:	4631      	mov	r1, r6
 8009142:	4628      	mov	r0, r5
 8009144:	47b8      	blx	r7
 8009146:	3001      	adds	r0, #1
 8009148:	f43f aef7 	beq.w	8008f3a <_printf_float+0xbe>
 800914c:	f109 0901 	add.w	r9, r9, #1
 8009150:	e7ee      	b.n	8009130 <_printf_float+0x2b4>
 8009152:	bf00      	nop
 8009154:	7fefffff 	.word	0x7fefffff
 8009158:	0800bc8d 	.word	0x0800bc8d
 800915c:	0800bc91 	.word	0x0800bc91
 8009160:	0800bc95 	.word	0x0800bc95
 8009164:	0800bc99 	.word	0x0800bc99
 8009168:	0800bc9d 	.word	0x0800bc9d
 800916c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800916e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009170:	429a      	cmp	r2, r3
 8009172:	bfa8      	it	ge
 8009174:	461a      	movge	r2, r3
 8009176:	2a00      	cmp	r2, #0
 8009178:	4691      	mov	r9, r2
 800917a:	dc37      	bgt.n	80091ec <_printf_float+0x370>
 800917c:	f04f 0b00 	mov.w	fp, #0
 8009180:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009184:	f104 021a 	add.w	r2, r4, #26
 8009188:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800918a:	9305      	str	r3, [sp, #20]
 800918c:	eba3 0309 	sub.w	r3, r3, r9
 8009190:	455b      	cmp	r3, fp
 8009192:	dc33      	bgt.n	80091fc <_printf_float+0x380>
 8009194:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009198:	429a      	cmp	r2, r3
 800919a:	db3b      	blt.n	8009214 <_printf_float+0x398>
 800919c:	6823      	ldr	r3, [r4, #0]
 800919e:	07da      	lsls	r2, r3, #31
 80091a0:	d438      	bmi.n	8009214 <_printf_float+0x398>
 80091a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80091a6:	eba2 0903 	sub.w	r9, r2, r3
 80091aa:	9b05      	ldr	r3, [sp, #20]
 80091ac:	1ad2      	subs	r2, r2, r3
 80091ae:	4591      	cmp	r9, r2
 80091b0:	bfa8      	it	ge
 80091b2:	4691      	movge	r9, r2
 80091b4:	f1b9 0f00 	cmp.w	r9, #0
 80091b8:	dc35      	bgt.n	8009226 <_printf_float+0x3aa>
 80091ba:	f04f 0800 	mov.w	r8, #0
 80091be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091c2:	f104 0a1a 	add.w	sl, r4, #26
 80091c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80091ca:	1a9b      	subs	r3, r3, r2
 80091cc:	eba3 0309 	sub.w	r3, r3, r9
 80091d0:	4543      	cmp	r3, r8
 80091d2:	f77f af79 	ble.w	80090c8 <_printf_float+0x24c>
 80091d6:	2301      	movs	r3, #1
 80091d8:	4652      	mov	r2, sl
 80091da:	4631      	mov	r1, r6
 80091dc:	4628      	mov	r0, r5
 80091de:	47b8      	blx	r7
 80091e0:	3001      	adds	r0, #1
 80091e2:	f43f aeaa 	beq.w	8008f3a <_printf_float+0xbe>
 80091e6:	f108 0801 	add.w	r8, r8, #1
 80091ea:	e7ec      	b.n	80091c6 <_printf_float+0x34a>
 80091ec:	4613      	mov	r3, r2
 80091ee:	4631      	mov	r1, r6
 80091f0:	4642      	mov	r2, r8
 80091f2:	4628      	mov	r0, r5
 80091f4:	47b8      	blx	r7
 80091f6:	3001      	adds	r0, #1
 80091f8:	d1c0      	bne.n	800917c <_printf_float+0x300>
 80091fa:	e69e      	b.n	8008f3a <_printf_float+0xbe>
 80091fc:	2301      	movs	r3, #1
 80091fe:	4631      	mov	r1, r6
 8009200:	4628      	mov	r0, r5
 8009202:	9205      	str	r2, [sp, #20]
 8009204:	47b8      	blx	r7
 8009206:	3001      	adds	r0, #1
 8009208:	f43f ae97 	beq.w	8008f3a <_printf_float+0xbe>
 800920c:	9a05      	ldr	r2, [sp, #20]
 800920e:	f10b 0b01 	add.w	fp, fp, #1
 8009212:	e7b9      	b.n	8009188 <_printf_float+0x30c>
 8009214:	ee18 3a10 	vmov	r3, s16
 8009218:	4652      	mov	r2, sl
 800921a:	4631      	mov	r1, r6
 800921c:	4628      	mov	r0, r5
 800921e:	47b8      	blx	r7
 8009220:	3001      	adds	r0, #1
 8009222:	d1be      	bne.n	80091a2 <_printf_float+0x326>
 8009224:	e689      	b.n	8008f3a <_printf_float+0xbe>
 8009226:	9a05      	ldr	r2, [sp, #20]
 8009228:	464b      	mov	r3, r9
 800922a:	4442      	add	r2, r8
 800922c:	4631      	mov	r1, r6
 800922e:	4628      	mov	r0, r5
 8009230:	47b8      	blx	r7
 8009232:	3001      	adds	r0, #1
 8009234:	d1c1      	bne.n	80091ba <_printf_float+0x33e>
 8009236:	e680      	b.n	8008f3a <_printf_float+0xbe>
 8009238:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800923a:	2a01      	cmp	r2, #1
 800923c:	dc01      	bgt.n	8009242 <_printf_float+0x3c6>
 800923e:	07db      	lsls	r3, r3, #31
 8009240:	d53a      	bpl.n	80092b8 <_printf_float+0x43c>
 8009242:	2301      	movs	r3, #1
 8009244:	4642      	mov	r2, r8
 8009246:	4631      	mov	r1, r6
 8009248:	4628      	mov	r0, r5
 800924a:	47b8      	blx	r7
 800924c:	3001      	adds	r0, #1
 800924e:	f43f ae74 	beq.w	8008f3a <_printf_float+0xbe>
 8009252:	ee18 3a10 	vmov	r3, s16
 8009256:	4652      	mov	r2, sl
 8009258:	4631      	mov	r1, r6
 800925a:	4628      	mov	r0, r5
 800925c:	47b8      	blx	r7
 800925e:	3001      	adds	r0, #1
 8009260:	f43f ae6b 	beq.w	8008f3a <_printf_float+0xbe>
 8009264:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009268:	2200      	movs	r2, #0
 800926a:	2300      	movs	r3, #0
 800926c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009270:	f7f7 fc5a 	bl	8000b28 <__aeabi_dcmpeq>
 8009274:	b9d8      	cbnz	r0, 80092ae <_printf_float+0x432>
 8009276:	f10a 33ff 	add.w	r3, sl, #4294967295
 800927a:	f108 0201 	add.w	r2, r8, #1
 800927e:	4631      	mov	r1, r6
 8009280:	4628      	mov	r0, r5
 8009282:	47b8      	blx	r7
 8009284:	3001      	adds	r0, #1
 8009286:	d10e      	bne.n	80092a6 <_printf_float+0x42a>
 8009288:	e657      	b.n	8008f3a <_printf_float+0xbe>
 800928a:	2301      	movs	r3, #1
 800928c:	4652      	mov	r2, sl
 800928e:	4631      	mov	r1, r6
 8009290:	4628      	mov	r0, r5
 8009292:	47b8      	blx	r7
 8009294:	3001      	adds	r0, #1
 8009296:	f43f ae50 	beq.w	8008f3a <_printf_float+0xbe>
 800929a:	f108 0801 	add.w	r8, r8, #1
 800929e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092a0:	3b01      	subs	r3, #1
 80092a2:	4543      	cmp	r3, r8
 80092a4:	dcf1      	bgt.n	800928a <_printf_float+0x40e>
 80092a6:	464b      	mov	r3, r9
 80092a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80092ac:	e6da      	b.n	8009064 <_printf_float+0x1e8>
 80092ae:	f04f 0800 	mov.w	r8, #0
 80092b2:	f104 0a1a 	add.w	sl, r4, #26
 80092b6:	e7f2      	b.n	800929e <_printf_float+0x422>
 80092b8:	2301      	movs	r3, #1
 80092ba:	4642      	mov	r2, r8
 80092bc:	e7df      	b.n	800927e <_printf_float+0x402>
 80092be:	2301      	movs	r3, #1
 80092c0:	464a      	mov	r2, r9
 80092c2:	4631      	mov	r1, r6
 80092c4:	4628      	mov	r0, r5
 80092c6:	47b8      	blx	r7
 80092c8:	3001      	adds	r0, #1
 80092ca:	f43f ae36 	beq.w	8008f3a <_printf_float+0xbe>
 80092ce:	f108 0801 	add.w	r8, r8, #1
 80092d2:	68e3      	ldr	r3, [r4, #12]
 80092d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80092d6:	1a5b      	subs	r3, r3, r1
 80092d8:	4543      	cmp	r3, r8
 80092da:	dcf0      	bgt.n	80092be <_printf_float+0x442>
 80092dc:	e6f8      	b.n	80090d0 <_printf_float+0x254>
 80092de:	f04f 0800 	mov.w	r8, #0
 80092e2:	f104 0919 	add.w	r9, r4, #25
 80092e6:	e7f4      	b.n	80092d2 <_printf_float+0x456>

080092e8 <_printf_common>:
 80092e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092ec:	4616      	mov	r6, r2
 80092ee:	4699      	mov	r9, r3
 80092f0:	688a      	ldr	r2, [r1, #8]
 80092f2:	690b      	ldr	r3, [r1, #16]
 80092f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092f8:	4293      	cmp	r3, r2
 80092fa:	bfb8      	it	lt
 80092fc:	4613      	movlt	r3, r2
 80092fe:	6033      	str	r3, [r6, #0]
 8009300:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009304:	4607      	mov	r7, r0
 8009306:	460c      	mov	r4, r1
 8009308:	b10a      	cbz	r2, 800930e <_printf_common+0x26>
 800930a:	3301      	adds	r3, #1
 800930c:	6033      	str	r3, [r6, #0]
 800930e:	6823      	ldr	r3, [r4, #0]
 8009310:	0699      	lsls	r1, r3, #26
 8009312:	bf42      	ittt	mi
 8009314:	6833      	ldrmi	r3, [r6, #0]
 8009316:	3302      	addmi	r3, #2
 8009318:	6033      	strmi	r3, [r6, #0]
 800931a:	6825      	ldr	r5, [r4, #0]
 800931c:	f015 0506 	ands.w	r5, r5, #6
 8009320:	d106      	bne.n	8009330 <_printf_common+0x48>
 8009322:	f104 0a19 	add.w	sl, r4, #25
 8009326:	68e3      	ldr	r3, [r4, #12]
 8009328:	6832      	ldr	r2, [r6, #0]
 800932a:	1a9b      	subs	r3, r3, r2
 800932c:	42ab      	cmp	r3, r5
 800932e:	dc26      	bgt.n	800937e <_printf_common+0x96>
 8009330:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009334:	1e13      	subs	r3, r2, #0
 8009336:	6822      	ldr	r2, [r4, #0]
 8009338:	bf18      	it	ne
 800933a:	2301      	movne	r3, #1
 800933c:	0692      	lsls	r2, r2, #26
 800933e:	d42b      	bmi.n	8009398 <_printf_common+0xb0>
 8009340:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009344:	4649      	mov	r1, r9
 8009346:	4638      	mov	r0, r7
 8009348:	47c0      	blx	r8
 800934a:	3001      	adds	r0, #1
 800934c:	d01e      	beq.n	800938c <_printf_common+0xa4>
 800934e:	6823      	ldr	r3, [r4, #0]
 8009350:	6922      	ldr	r2, [r4, #16]
 8009352:	f003 0306 	and.w	r3, r3, #6
 8009356:	2b04      	cmp	r3, #4
 8009358:	bf02      	ittt	eq
 800935a:	68e5      	ldreq	r5, [r4, #12]
 800935c:	6833      	ldreq	r3, [r6, #0]
 800935e:	1aed      	subeq	r5, r5, r3
 8009360:	68a3      	ldr	r3, [r4, #8]
 8009362:	bf0c      	ite	eq
 8009364:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009368:	2500      	movne	r5, #0
 800936a:	4293      	cmp	r3, r2
 800936c:	bfc4      	itt	gt
 800936e:	1a9b      	subgt	r3, r3, r2
 8009370:	18ed      	addgt	r5, r5, r3
 8009372:	2600      	movs	r6, #0
 8009374:	341a      	adds	r4, #26
 8009376:	42b5      	cmp	r5, r6
 8009378:	d11a      	bne.n	80093b0 <_printf_common+0xc8>
 800937a:	2000      	movs	r0, #0
 800937c:	e008      	b.n	8009390 <_printf_common+0xa8>
 800937e:	2301      	movs	r3, #1
 8009380:	4652      	mov	r2, sl
 8009382:	4649      	mov	r1, r9
 8009384:	4638      	mov	r0, r7
 8009386:	47c0      	blx	r8
 8009388:	3001      	adds	r0, #1
 800938a:	d103      	bne.n	8009394 <_printf_common+0xac>
 800938c:	f04f 30ff 	mov.w	r0, #4294967295
 8009390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009394:	3501      	adds	r5, #1
 8009396:	e7c6      	b.n	8009326 <_printf_common+0x3e>
 8009398:	18e1      	adds	r1, r4, r3
 800939a:	1c5a      	adds	r2, r3, #1
 800939c:	2030      	movs	r0, #48	; 0x30
 800939e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093a2:	4422      	add	r2, r4
 80093a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80093a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80093ac:	3302      	adds	r3, #2
 80093ae:	e7c7      	b.n	8009340 <_printf_common+0x58>
 80093b0:	2301      	movs	r3, #1
 80093b2:	4622      	mov	r2, r4
 80093b4:	4649      	mov	r1, r9
 80093b6:	4638      	mov	r0, r7
 80093b8:	47c0      	blx	r8
 80093ba:	3001      	adds	r0, #1
 80093bc:	d0e6      	beq.n	800938c <_printf_common+0xa4>
 80093be:	3601      	adds	r6, #1
 80093c0:	e7d9      	b.n	8009376 <_printf_common+0x8e>
	...

080093c4 <_printf_i>:
 80093c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093c8:	7e0f      	ldrb	r7, [r1, #24]
 80093ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80093cc:	2f78      	cmp	r7, #120	; 0x78
 80093ce:	4691      	mov	r9, r2
 80093d0:	4680      	mov	r8, r0
 80093d2:	460c      	mov	r4, r1
 80093d4:	469a      	mov	sl, r3
 80093d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80093da:	d807      	bhi.n	80093ec <_printf_i+0x28>
 80093dc:	2f62      	cmp	r7, #98	; 0x62
 80093de:	d80a      	bhi.n	80093f6 <_printf_i+0x32>
 80093e0:	2f00      	cmp	r7, #0
 80093e2:	f000 80d4 	beq.w	800958e <_printf_i+0x1ca>
 80093e6:	2f58      	cmp	r7, #88	; 0x58
 80093e8:	f000 80c0 	beq.w	800956c <_printf_i+0x1a8>
 80093ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093f4:	e03a      	b.n	800946c <_printf_i+0xa8>
 80093f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093fa:	2b15      	cmp	r3, #21
 80093fc:	d8f6      	bhi.n	80093ec <_printf_i+0x28>
 80093fe:	a101      	add	r1, pc, #4	; (adr r1, 8009404 <_printf_i+0x40>)
 8009400:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009404:	0800945d 	.word	0x0800945d
 8009408:	08009471 	.word	0x08009471
 800940c:	080093ed 	.word	0x080093ed
 8009410:	080093ed 	.word	0x080093ed
 8009414:	080093ed 	.word	0x080093ed
 8009418:	080093ed 	.word	0x080093ed
 800941c:	08009471 	.word	0x08009471
 8009420:	080093ed 	.word	0x080093ed
 8009424:	080093ed 	.word	0x080093ed
 8009428:	080093ed 	.word	0x080093ed
 800942c:	080093ed 	.word	0x080093ed
 8009430:	08009575 	.word	0x08009575
 8009434:	0800949d 	.word	0x0800949d
 8009438:	0800952f 	.word	0x0800952f
 800943c:	080093ed 	.word	0x080093ed
 8009440:	080093ed 	.word	0x080093ed
 8009444:	08009597 	.word	0x08009597
 8009448:	080093ed 	.word	0x080093ed
 800944c:	0800949d 	.word	0x0800949d
 8009450:	080093ed 	.word	0x080093ed
 8009454:	080093ed 	.word	0x080093ed
 8009458:	08009537 	.word	0x08009537
 800945c:	682b      	ldr	r3, [r5, #0]
 800945e:	1d1a      	adds	r2, r3, #4
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	602a      	str	r2, [r5, #0]
 8009464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009468:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800946c:	2301      	movs	r3, #1
 800946e:	e09f      	b.n	80095b0 <_printf_i+0x1ec>
 8009470:	6820      	ldr	r0, [r4, #0]
 8009472:	682b      	ldr	r3, [r5, #0]
 8009474:	0607      	lsls	r7, r0, #24
 8009476:	f103 0104 	add.w	r1, r3, #4
 800947a:	6029      	str	r1, [r5, #0]
 800947c:	d501      	bpl.n	8009482 <_printf_i+0xbe>
 800947e:	681e      	ldr	r6, [r3, #0]
 8009480:	e003      	b.n	800948a <_printf_i+0xc6>
 8009482:	0646      	lsls	r6, r0, #25
 8009484:	d5fb      	bpl.n	800947e <_printf_i+0xba>
 8009486:	f9b3 6000 	ldrsh.w	r6, [r3]
 800948a:	2e00      	cmp	r6, #0
 800948c:	da03      	bge.n	8009496 <_printf_i+0xd2>
 800948e:	232d      	movs	r3, #45	; 0x2d
 8009490:	4276      	negs	r6, r6
 8009492:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009496:	485a      	ldr	r0, [pc, #360]	; (8009600 <_printf_i+0x23c>)
 8009498:	230a      	movs	r3, #10
 800949a:	e012      	b.n	80094c2 <_printf_i+0xfe>
 800949c:	682b      	ldr	r3, [r5, #0]
 800949e:	6820      	ldr	r0, [r4, #0]
 80094a0:	1d19      	adds	r1, r3, #4
 80094a2:	6029      	str	r1, [r5, #0]
 80094a4:	0605      	lsls	r5, r0, #24
 80094a6:	d501      	bpl.n	80094ac <_printf_i+0xe8>
 80094a8:	681e      	ldr	r6, [r3, #0]
 80094aa:	e002      	b.n	80094b2 <_printf_i+0xee>
 80094ac:	0641      	lsls	r1, r0, #25
 80094ae:	d5fb      	bpl.n	80094a8 <_printf_i+0xe4>
 80094b0:	881e      	ldrh	r6, [r3, #0]
 80094b2:	4853      	ldr	r0, [pc, #332]	; (8009600 <_printf_i+0x23c>)
 80094b4:	2f6f      	cmp	r7, #111	; 0x6f
 80094b6:	bf0c      	ite	eq
 80094b8:	2308      	moveq	r3, #8
 80094ba:	230a      	movne	r3, #10
 80094bc:	2100      	movs	r1, #0
 80094be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094c2:	6865      	ldr	r5, [r4, #4]
 80094c4:	60a5      	str	r5, [r4, #8]
 80094c6:	2d00      	cmp	r5, #0
 80094c8:	bfa2      	ittt	ge
 80094ca:	6821      	ldrge	r1, [r4, #0]
 80094cc:	f021 0104 	bicge.w	r1, r1, #4
 80094d0:	6021      	strge	r1, [r4, #0]
 80094d2:	b90e      	cbnz	r6, 80094d8 <_printf_i+0x114>
 80094d4:	2d00      	cmp	r5, #0
 80094d6:	d04b      	beq.n	8009570 <_printf_i+0x1ac>
 80094d8:	4615      	mov	r5, r2
 80094da:	fbb6 f1f3 	udiv	r1, r6, r3
 80094de:	fb03 6711 	mls	r7, r3, r1, r6
 80094e2:	5dc7      	ldrb	r7, [r0, r7]
 80094e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80094e8:	4637      	mov	r7, r6
 80094ea:	42bb      	cmp	r3, r7
 80094ec:	460e      	mov	r6, r1
 80094ee:	d9f4      	bls.n	80094da <_printf_i+0x116>
 80094f0:	2b08      	cmp	r3, #8
 80094f2:	d10b      	bne.n	800950c <_printf_i+0x148>
 80094f4:	6823      	ldr	r3, [r4, #0]
 80094f6:	07de      	lsls	r6, r3, #31
 80094f8:	d508      	bpl.n	800950c <_printf_i+0x148>
 80094fa:	6923      	ldr	r3, [r4, #16]
 80094fc:	6861      	ldr	r1, [r4, #4]
 80094fe:	4299      	cmp	r1, r3
 8009500:	bfde      	ittt	le
 8009502:	2330      	movle	r3, #48	; 0x30
 8009504:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009508:	f105 35ff 	addle.w	r5, r5, #4294967295
 800950c:	1b52      	subs	r2, r2, r5
 800950e:	6122      	str	r2, [r4, #16]
 8009510:	f8cd a000 	str.w	sl, [sp]
 8009514:	464b      	mov	r3, r9
 8009516:	aa03      	add	r2, sp, #12
 8009518:	4621      	mov	r1, r4
 800951a:	4640      	mov	r0, r8
 800951c:	f7ff fee4 	bl	80092e8 <_printf_common>
 8009520:	3001      	adds	r0, #1
 8009522:	d14a      	bne.n	80095ba <_printf_i+0x1f6>
 8009524:	f04f 30ff 	mov.w	r0, #4294967295
 8009528:	b004      	add	sp, #16
 800952a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800952e:	6823      	ldr	r3, [r4, #0]
 8009530:	f043 0320 	orr.w	r3, r3, #32
 8009534:	6023      	str	r3, [r4, #0]
 8009536:	4833      	ldr	r0, [pc, #204]	; (8009604 <_printf_i+0x240>)
 8009538:	2778      	movs	r7, #120	; 0x78
 800953a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800953e:	6823      	ldr	r3, [r4, #0]
 8009540:	6829      	ldr	r1, [r5, #0]
 8009542:	061f      	lsls	r7, r3, #24
 8009544:	f851 6b04 	ldr.w	r6, [r1], #4
 8009548:	d402      	bmi.n	8009550 <_printf_i+0x18c>
 800954a:	065f      	lsls	r7, r3, #25
 800954c:	bf48      	it	mi
 800954e:	b2b6      	uxthmi	r6, r6
 8009550:	07df      	lsls	r7, r3, #31
 8009552:	bf48      	it	mi
 8009554:	f043 0320 	orrmi.w	r3, r3, #32
 8009558:	6029      	str	r1, [r5, #0]
 800955a:	bf48      	it	mi
 800955c:	6023      	strmi	r3, [r4, #0]
 800955e:	b91e      	cbnz	r6, 8009568 <_printf_i+0x1a4>
 8009560:	6823      	ldr	r3, [r4, #0]
 8009562:	f023 0320 	bic.w	r3, r3, #32
 8009566:	6023      	str	r3, [r4, #0]
 8009568:	2310      	movs	r3, #16
 800956a:	e7a7      	b.n	80094bc <_printf_i+0xf8>
 800956c:	4824      	ldr	r0, [pc, #144]	; (8009600 <_printf_i+0x23c>)
 800956e:	e7e4      	b.n	800953a <_printf_i+0x176>
 8009570:	4615      	mov	r5, r2
 8009572:	e7bd      	b.n	80094f0 <_printf_i+0x12c>
 8009574:	682b      	ldr	r3, [r5, #0]
 8009576:	6826      	ldr	r6, [r4, #0]
 8009578:	6961      	ldr	r1, [r4, #20]
 800957a:	1d18      	adds	r0, r3, #4
 800957c:	6028      	str	r0, [r5, #0]
 800957e:	0635      	lsls	r5, r6, #24
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	d501      	bpl.n	8009588 <_printf_i+0x1c4>
 8009584:	6019      	str	r1, [r3, #0]
 8009586:	e002      	b.n	800958e <_printf_i+0x1ca>
 8009588:	0670      	lsls	r0, r6, #25
 800958a:	d5fb      	bpl.n	8009584 <_printf_i+0x1c0>
 800958c:	8019      	strh	r1, [r3, #0]
 800958e:	2300      	movs	r3, #0
 8009590:	6123      	str	r3, [r4, #16]
 8009592:	4615      	mov	r5, r2
 8009594:	e7bc      	b.n	8009510 <_printf_i+0x14c>
 8009596:	682b      	ldr	r3, [r5, #0]
 8009598:	1d1a      	adds	r2, r3, #4
 800959a:	602a      	str	r2, [r5, #0]
 800959c:	681d      	ldr	r5, [r3, #0]
 800959e:	6862      	ldr	r2, [r4, #4]
 80095a0:	2100      	movs	r1, #0
 80095a2:	4628      	mov	r0, r5
 80095a4:	f7f6 fe44 	bl	8000230 <memchr>
 80095a8:	b108      	cbz	r0, 80095ae <_printf_i+0x1ea>
 80095aa:	1b40      	subs	r0, r0, r5
 80095ac:	6060      	str	r0, [r4, #4]
 80095ae:	6863      	ldr	r3, [r4, #4]
 80095b0:	6123      	str	r3, [r4, #16]
 80095b2:	2300      	movs	r3, #0
 80095b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095b8:	e7aa      	b.n	8009510 <_printf_i+0x14c>
 80095ba:	6923      	ldr	r3, [r4, #16]
 80095bc:	462a      	mov	r2, r5
 80095be:	4649      	mov	r1, r9
 80095c0:	4640      	mov	r0, r8
 80095c2:	47d0      	blx	sl
 80095c4:	3001      	adds	r0, #1
 80095c6:	d0ad      	beq.n	8009524 <_printf_i+0x160>
 80095c8:	6823      	ldr	r3, [r4, #0]
 80095ca:	079b      	lsls	r3, r3, #30
 80095cc:	d413      	bmi.n	80095f6 <_printf_i+0x232>
 80095ce:	68e0      	ldr	r0, [r4, #12]
 80095d0:	9b03      	ldr	r3, [sp, #12]
 80095d2:	4298      	cmp	r0, r3
 80095d4:	bfb8      	it	lt
 80095d6:	4618      	movlt	r0, r3
 80095d8:	e7a6      	b.n	8009528 <_printf_i+0x164>
 80095da:	2301      	movs	r3, #1
 80095dc:	4632      	mov	r2, r6
 80095de:	4649      	mov	r1, r9
 80095e0:	4640      	mov	r0, r8
 80095e2:	47d0      	blx	sl
 80095e4:	3001      	adds	r0, #1
 80095e6:	d09d      	beq.n	8009524 <_printf_i+0x160>
 80095e8:	3501      	adds	r5, #1
 80095ea:	68e3      	ldr	r3, [r4, #12]
 80095ec:	9903      	ldr	r1, [sp, #12]
 80095ee:	1a5b      	subs	r3, r3, r1
 80095f0:	42ab      	cmp	r3, r5
 80095f2:	dcf2      	bgt.n	80095da <_printf_i+0x216>
 80095f4:	e7eb      	b.n	80095ce <_printf_i+0x20a>
 80095f6:	2500      	movs	r5, #0
 80095f8:	f104 0619 	add.w	r6, r4, #25
 80095fc:	e7f5      	b.n	80095ea <_printf_i+0x226>
 80095fe:	bf00      	nop
 8009600:	0800bc9f 	.word	0x0800bc9f
 8009604:	0800bcb0 	.word	0x0800bcb0

08009608 <std>:
 8009608:	2300      	movs	r3, #0
 800960a:	b510      	push	{r4, lr}
 800960c:	4604      	mov	r4, r0
 800960e:	e9c0 3300 	strd	r3, r3, [r0]
 8009612:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009616:	6083      	str	r3, [r0, #8]
 8009618:	8181      	strh	r1, [r0, #12]
 800961a:	6643      	str	r3, [r0, #100]	; 0x64
 800961c:	81c2      	strh	r2, [r0, #14]
 800961e:	6183      	str	r3, [r0, #24]
 8009620:	4619      	mov	r1, r3
 8009622:	2208      	movs	r2, #8
 8009624:	305c      	adds	r0, #92	; 0x5c
 8009626:	f000 f914 	bl	8009852 <memset>
 800962a:	4b0d      	ldr	r3, [pc, #52]	; (8009660 <std+0x58>)
 800962c:	6263      	str	r3, [r4, #36]	; 0x24
 800962e:	4b0d      	ldr	r3, [pc, #52]	; (8009664 <std+0x5c>)
 8009630:	62a3      	str	r3, [r4, #40]	; 0x28
 8009632:	4b0d      	ldr	r3, [pc, #52]	; (8009668 <std+0x60>)
 8009634:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009636:	4b0d      	ldr	r3, [pc, #52]	; (800966c <std+0x64>)
 8009638:	6323      	str	r3, [r4, #48]	; 0x30
 800963a:	4b0d      	ldr	r3, [pc, #52]	; (8009670 <std+0x68>)
 800963c:	6224      	str	r4, [r4, #32]
 800963e:	429c      	cmp	r4, r3
 8009640:	d006      	beq.n	8009650 <std+0x48>
 8009642:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009646:	4294      	cmp	r4, r2
 8009648:	d002      	beq.n	8009650 <std+0x48>
 800964a:	33d0      	adds	r3, #208	; 0xd0
 800964c:	429c      	cmp	r4, r3
 800964e:	d105      	bne.n	800965c <std+0x54>
 8009650:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009658:	f000 b9cc 	b.w	80099f4 <__retarget_lock_init_recursive>
 800965c:	bd10      	pop	{r4, pc}
 800965e:	bf00      	nop
 8009660:	080097cd 	.word	0x080097cd
 8009664:	080097ef 	.word	0x080097ef
 8009668:	08009827 	.word	0x08009827
 800966c:	0800984b 	.word	0x0800984b
 8009670:	20000390 	.word	0x20000390

08009674 <stdio_exit_handler>:
 8009674:	4a02      	ldr	r2, [pc, #8]	; (8009680 <stdio_exit_handler+0xc>)
 8009676:	4903      	ldr	r1, [pc, #12]	; (8009684 <stdio_exit_handler+0x10>)
 8009678:	4803      	ldr	r0, [pc, #12]	; (8009688 <stdio_exit_handler+0x14>)
 800967a:	f000 b869 	b.w	8009750 <_fwalk_sglue>
 800967e:	bf00      	nop
 8009680:	2000000c 	.word	0x2000000c
 8009684:	0800b259 	.word	0x0800b259
 8009688:	20000018 	.word	0x20000018

0800968c <cleanup_stdio>:
 800968c:	6841      	ldr	r1, [r0, #4]
 800968e:	4b0c      	ldr	r3, [pc, #48]	; (80096c0 <cleanup_stdio+0x34>)
 8009690:	4299      	cmp	r1, r3
 8009692:	b510      	push	{r4, lr}
 8009694:	4604      	mov	r4, r0
 8009696:	d001      	beq.n	800969c <cleanup_stdio+0x10>
 8009698:	f001 fdde 	bl	800b258 <_fflush_r>
 800969c:	68a1      	ldr	r1, [r4, #8]
 800969e:	4b09      	ldr	r3, [pc, #36]	; (80096c4 <cleanup_stdio+0x38>)
 80096a0:	4299      	cmp	r1, r3
 80096a2:	d002      	beq.n	80096aa <cleanup_stdio+0x1e>
 80096a4:	4620      	mov	r0, r4
 80096a6:	f001 fdd7 	bl	800b258 <_fflush_r>
 80096aa:	68e1      	ldr	r1, [r4, #12]
 80096ac:	4b06      	ldr	r3, [pc, #24]	; (80096c8 <cleanup_stdio+0x3c>)
 80096ae:	4299      	cmp	r1, r3
 80096b0:	d004      	beq.n	80096bc <cleanup_stdio+0x30>
 80096b2:	4620      	mov	r0, r4
 80096b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096b8:	f001 bdce 	b.w	800b258 <_fflush_r>
 80096bc:	bd10      	pop	{r4, pc}
 80096be:	bf00      	nop
 80096c0:	20000390 	.word	0x20000390
 80096c4:	200003f8 	.word	0x200003f8
 80096c8:	20000460 	.word	0x20000460

080096cc <global_stdio_init.part.0>:
 80096cc:	b510      	push	{r4, lr}
 80096ce:	4b0b      	ldr	r3, [pc, #44]	; (80096fc <global_stdio_init.part.0+0x30>)
 80096d0:	4c0b      	ldr	r4, [pc, #44]	; (8009700 <global_stdio_init.part.0+0x34>)
 80096d2:	4a0c      	ldr	r2, [pc, #48]	; (8009704 <global_stdio_init.part.0+0x38>)
 80096d4:	601a      	str	r2, [r3, #0]
 80096d6:	4620      	mov	r0, r4
 80096d8:	2200      	movs	r2, #0
 80096da:	2104      	movs	r1, #4
 80096dc:	f7ff ff94 	bl	8009608 <std>
 80096e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80096e4:	2201      	movs	r2, #1
 80096e6:	2109      	movs	r1, #9
 80096e8:	f7ff ff8e 	bl	8009608 <std>
 80096ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80096f0:	2202      	movs	r2, #2
 80096f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096f6:	2112      	movs	r1, #18
 80096f8:	f7ff bf86 	b.w	8009608 <std>
 80096fc:	200004c8 	.word	0x200004c8
 8009700:	20000390 	.word	0x20000390
 8009704:	08009675 	.word	0x08009675

08009708 <__sfp_lock_acquire>:
 8009708:	4801      	ldr	r0, [pc, #4]	; (8009710 <__sfp_lock_acquire+0x8>)
 800970a:	f000 b974 	b.w	80099f6 <__retarget_lock_acquire_recursive>
 800970e:	bf00      	nop
 8009710:	200004d1 	.word	0x200004d1

08009714 <__sfp_lock_release>:
 8009714:	4801      	ldr	r0, [pc, #4]	; (800971c <__sfp_lock_release+0x8>)
 8009716:	f000 b96f 	b.w	80099f8 <__retarget_lock_release_recursive>
 800971a:	bf00      	nop
 800971c:	200004d1 	.word	0x200004d1

08009720 <__sinit>:
 8009720:	b510      	push	{r4, lr}
 8009722:	4604      	mov	r4, r0
 8009724:	f7ff fff0 	bl	8009708 <__sfp_lock_acquire>
 8009728:	6a23      	ldr	r3, [r4, #32]
 800972a:	b11b      	cbz	r3, 8009734 <__sinit+0x14>
 800972c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009730:	f7ff bff0 	b.w	8009714 <__sfp_lock_release>
 8009734:	4b04      	ldr	r3, [pc, #16]	; (8009748 <__sinit+0x28>)
 8009736:	6223      	str	r3, [r4, #32]
 8009738:	4b04      	ldr	r3, [pc, #16]	; (800974c <__sinit+0x2c>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d1f5      	bne.n	800972c <__sinit+0xc>
 8009740:	f7ff ffc4 	bl	80096cc <global_stdio_init.part.0>
 8009744:	e7f2      	b.n	800972c <__sinit+0xc>
 8009746:	bf00      	nop
 8009748:	0800968d 	.word	0x0800968d
 800974c:	200004c8 	.word	0x200004c8

08009750 <_fwalk_sglue>:
 8009750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009754:	4607      	mov	r7, r0
 8009756:	4688      	mov	r8, r1
 8009758:	4614      	mov	r4, r2
 800975a:	2600      	movs	r6, #0
 800975c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009760:	f1b9 0901 	subs.w	r9, r9, #1
 8009764:	d505      	bpl.n	8009772 <_fwalk_sglue+0x22>
 8009766:	6824      	ldr	r4, [r4, #0]
 8009768:	2c00      	cmp	r4, #0
 800976a:	d1f7      	bne.n	800975c <_fwalk_sglue+0xc>
 800976c:	4630      	mov	r0, r6
 800976e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009772:	89ab      	ldrh	r3, [r5, #12]
 8009774:	2b01      	cmp	r3, #1
 8009776:	d907      	bls.n	8009788 <_fwalk_sglue+0x38>
 8009778:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800977c:	3301      	adds	r3, #1
 800977e:	d003      	beq.n	8009788 <_fwalk_sglue+0x38>
 8009780:	4629      	mov	r1, r5
 8009782:	4638      	mov	r0, r7
 8009784:	47c0      	blx	r8
 8009786:	4306      	orrs	r6, r0
 8009788:	3568      	adds	r5, #104	; 0x68
 800978a:	e7e9      	b.n	8009760 <_fwalk_sglue+0x10>

0800978c <siprintf>:
 800978c:	b40e      	push	{r1, r2, r3}
 800978e:	b500      	push	{lr}
 8009790:	b09c      	sub	sp, #112	; 0x70
 8009792:	ab1d      	add	r3, sp, #116	; 0x74
 8009794:	9002      	str	r0, [sp, #8]
 8009796:	9006      	str	r0, [sp, #24]
 8009798:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800979c:	4809      	ldr	r0, [pc, #36]	; (80097c4 <siprintf+0x38>)
 800979e:	9107      	str	r1, [sp, #28]
 80097a0:	9104      	str	r1, [sp, #16]
 80097a2:	4909      	ldr	r1, [pc, #36]	; (80097c8 <siprintf+0x3c>)
 80097a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80097a8:	9105      	str	r1, [sp, #20]
 80097aa:	6800      	ldr	r0, [r0, #0]
 80097ac:	9301      	str	r3, [sp, #4]
 80097ae:	a902      	add	r1, sp, #8
 80097b0:	f001 fbce 	bl	800af50 <_svfiprintf_r>
 80097b4:	9b02      	ldr	r3, [sp, #8]
 80097b6:	2200      	movs	r2, #0
 80097b8:	701a      	strb	r2, [r3, #0]
 80097ba:	b01c      	add	sp, #112	; 0x70
 80097bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80097c0:	b003      	add	sp, #12
 80097c2:	4770      	bx	lr
 80097c4:	20000064 	.word	0x20000064
 80097c8:	ffff0208 	.word	0xffff0208

080097cc <__sread>:
 80097cc:	b510      	push	{r4, lr}
 80097ce:	460c      	mov	r4, r1
 80097d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097d4:	f000 f89c 	bl	8009910 <_read_r>
 80097d8:	2800      	cmp	r0, #0
 80097da:	bfab      	itete	ge
 80097dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80097de:	89a3      	ldrhlt	r3, [r4, #12]
 80097e0:	181b      	addge	r3, r3, r0
 80097e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80097e6:	bfac      	ite	ge
 80097e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80097ea:	81a3      	strhlt	r3, [r4, #12]
 80097ec:	bd10      	pop	{r4, pc}

080097ee <__swrite>:
 80097ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097f2:	461f      	mov	r7, r3
 80097f4:	898b      	ldrh	r3, [r1, #12]
 80097f6:	05db      	lsls	r3, r3, #23
 80097f8:	4605      	mov	r5, r0
 80097fa:	460c      	mov	r4, r1
 80097fc:	4616      	mov	r6, r2
 80097fe:	d505      	bpl.n	800980c <__swrite+0x1e>
 8009800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009804:	2302      	movs	r3, #2
 8009806:	2200      	movs	r2, #0
 8009808:	f000 f870 	bl	80098ec <_lseek_r>
 800980c:	89a3      	ldrh	r3, [r4, #12]
 800980e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009812:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009816:	81a3      	strh	r3, [r4, #12]
 8009818:	4632      	mov	r2, r6
 800981a:	463b      	mov	r3, r7
 800981c:	4628      	mov	r0, r5
 800981e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009822:	f000 b8ab 	b.w	800997c <_write_r>

08009826 <__sseek>:
 8009826:	b510      	push	{r4, lr}
 8009828:	460c      	mov	r4, r1
 800982a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800982e:	f000 f85d 	bl	80098ec <_lseek_r>
 8009832:	1c43      	adds	r3, r0, #1
 8009834:	89a3      	ldrh	r3, [r4, #12]
 8009836:	bf15      	itete	ne
 8009838:	6560      	strne	r0, [r4, #84]	; 0x54
 800983a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800983e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009842:	81a3      	strheq	r3, [r4, #12]
 8009844:	bf18      	it	ne
 8009846:	81a3      	strhne	r3, [r4, #12]
 8009848:	bd10      	pop	{r4, pc}

0800984a <__sclose>:
 800984a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800984e:	f000 b83d 	b.w	80098cc <_close_r>

08009852 <memset>:
 8009852:	4402      	add	r2, r0
 8009854:	4603      	mov	r3, r0
 8009856:	4293      	cmp	r3, r2
 8009858:	d100      	bne.n	800985c <memset+0xa>
 800985a:	4770      	bx	lr
 800985c:	f803 1b01 	strb.w	r1, [r3], #1
 8009860:	e7f9      	b.n	8009856 <memset+0x4>

08009862 <_raise_r>:
 8009862:	291f      	cmp	r1, #31
 8009864:	b538      	push	{r3, r4, r5, lr}
 8009866:	4604      	mov	r4, r0
 8009868:	460d      	mov	r5, r1
 800986a:	d904      	bls.n	8009876 <_raise_r+0x14>
 800986c:	2316      	movs	r3, #22
 800986e:	6003      	str	r3, [r0, #0]
 8009870:	f04f 30ff 	mov.w	r0, #4294967295
 8009874:	bd38      	pop	{r3, r4, r5, pc}
 8009876:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009878:	b112      	cbz	r2, 8009880 <_raise_r+0x1e>
 800987a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800987e:	b94b      	cbnz	r3, 8009894 <_raise_r+0x32>
 8009880:	4620      	mov	r0, r4
 8009882:	f000 f869 	bl	8009958 <_getpid_r>
 8009886:	462a      	mov	r2, r5
 8009888:	4601      	mov	r1, r0
 800988a:	4620      	mov	r0, r4
 800988c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009890:	f000 b850 	b.w	8009934 <_kill_r>
 8009894:	2b01      	cmp	r3, #1
 8009896:	d00a      	beq.n	80098ae <_raise_r+0x4c>
 8009898:	1c59      	adds	r1, r3, #1
 800989a:	d103      	bne.n	80098a4 <_raise_r+0x42>
 800989c:	2316      	movs	r3, #22
 800989e:	6003      	str	r3, [r0, #0]
 80098a0:	2001      	movs	r0, #1
 80098a2:	e7e7      	b.n	8009874 <_raise_r+0x12>
 80098a4:	2400      	movs	r4, #0
 80098a6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80098aa:	4628      	mov	r0, r5
 80098ac:	4798      	blx	r3
 80098ae:	2000      	movs	r0, #0
 80098b0:	e7e0      	b.n	8009874 <_raise_r+0x12>
	...

080098b4 <raise>:
 80098b4:	4b02      	ldr	r3, [pc, #8]	; (80098c0 <raise+0xc>)
 80098b6:	4601      	mov	r1, r0
 80098b8:	6818      	ldr	r0, [r3, #0]
 80098ba:	f7ff bfd2 	b.w	8009862 <_raise_r>
 80098be:	bf00      	nop
 80098c0:	20000064 	.word	0x20000064

080098c4 <_localeconv_r>:
 80098c4:	4800      	ldr	r0, [pc, #0]	; (80098c8 <_localeconv_r+0x4>)
 80098c6:	4770      	bx	lr
 80098c8:	20000158 	.word	0x20000158

080098cc <_close_r>:
 80098cc:	b538      	push	{r3, r4, r5, lr}
 80098ce:	4d06      	ldr	r5, [pc, #24]	; (80098e8 <_close_r+0x1c>)
 80098d0:	2300      	movs	r3, #0
 80098d2:	4604      	mov	r4, r0
 80098d4:	4608      	mov	r0, r1
 80098d6:	602b      	str	r3, [r5, #0]
 80098d8:	f7fb fadb 	bl	8004e92 <_close>
 80098dc:	1c43      	adds	r3, r0, #1
 80098de:	d102      	bne.n	80098e6 <_close_r+0x1a>
 80098e0:	682b      	ldr	r3, [r5, #0]
 80098e2:	b103      	cbz	r3, 80098e6 <_close_r+0x1a>
 80098e4:	6023      	str	r3, [r4, #0]
 80098e6:	bd38      	pop	{r3, r4, r5, pc}
 80098e8:	200004cc 	.word	0x200004cc

080098ec <_lseek_r>:
 80098ec:	b538      	push	{r3, r4, r5, lr}
 80098ee:	4d07      	ldr	r5, [pc, #28]	; (800990c <_lseek_r+0x20>)
 80098f0:	4604      	mov	r4, r0
 80098f2:	4608      	mov	r0, r1
 80098f4:	4611      	mov	r1, r2
 80098f6:	2200      	movs	r2, #0
 80098f8:	602a      	str	r2, [r5, #0]
 80098fa:	461a      	mov	r2, r3
 80098fc:	f7fb faf0 	bl	8004ee0 <_lseek>
 8009900:	1c43      	adds	r3, r0, #1
 8009902:	d102      	bne.n	800990a <_lseek_r+0x1e>
 8009904:	682b      	ldr	r3, [r5, #0]
 8009906:	b103      	cbz	r3, 800990a <_lseek_r+0x1e>
 8009908:	6023      	str	r3, [r4, #0]
 800990a:	bd38      	pop	{r3, r4, r5, pc}
 800990c:	200004cc 	.word	0x200004cc

08009910 <_read_r>:
 8009910:	b538      	push	{r3, r4, r5, lr}
 8009912:	4d07      	ldr	r5, [pc, #28]	; (8009930 <_read_r+0x20>)
 8009914:	4604      	mov	r4, r0
 8009916:	4608      	mov	r0, r1
 8009918:	4611      	mov	r1, r2
 800991a:	2200      	movs	r2, #0
 800991c:	602a      	str	r2, [r5, #0]
 800991e:	461a      	mov	r2, r3
 8009920:	f7fb fa7e 	bl	8004e20 <_read>
 8009924:	1c43      	adds	r3, r0, #1
 8009926:	d102      	bne.n	800992e <_read_r+0x1e>
 8009928:	682b      	ldr	r3, [r5, #0]
 800992a:	b103      	cbz	r3, 800992e <_read_r+0x1e>
 800992c:	6023      	str	r3, [r4, #0]
 800992e:	bd38      	pop	{r3, r4, r5, pc}
 8009930:	200004cc 	.word	0x200004cc

08009934 <_kill_r>:
 8009934:	b538      	push	{r3, r4, r5, lr}
 8009936:	4d07      	ldr	r5, [pc, #28]	; (8009954 <_kill_r+0x20>)
 8009938:	2300      	movs	r3, #0
 800993a:	4604      	mov	r4, r0
 800993c:	4608      	mov	r0, r1
 800993e:	4611      	mov	r1, r2
 8009940:	602b      	str	r3, [r5, #0]
 8009942:	f7fb fa53 	bl	8004dec <_kill>
 8009946:	1c43      	adds	r3, r0, #1
 8009948:	d102      	bne.n	8009950 <_kill_r+0x1c>
 800994a:	682b      	ldr	r3, [r5, #0]
 800994c:	b103      	cbz	r3, 8009950 <_kill_r+0x1c>
 800994e:	6023      	str	r3, [r4, #0]
 8009950:	bd38      	pop	{r3, r4, r5, pc}
 8009952:	bf00      	nop
 8009954:	200004cc 	.word	0x200004cc

08009958 <_getpid_r>:
 8009958:	f7fb ba40 	b.w	8004ddc <_getpid>

0800995c <_sbrk_r>:
 800995c:	b538      	push	{r3, r4, r5, lr}
 800995e:	4d06      	ldr	r5, [pc, #24]	; (8009978 <_sbrk_r+0x1c>)
 8009960:	2300      	movs	r3, #0
 8009962:	4604      	mov	r4, r0
 8009964:	4608      	mov	r0, r1
 8009966:	602b      	str	r3, [r5, #0]
 8009968:	f7fb fac8 	bl	8004efc <_sbrk>
 800996c:	1c43      	adds	r3, r0, #1
 800996e:	d102      	bne.n	8009976 <_sbrk_r+0x1a>
 8009970:	682b      	ldr	r3, [r5, #0]
 8009972:	b103      	cbz	r3, 8009976 <_sbrk_r+0x1a>
 8009974:	6023      	str	r3, [r4, #0]
 8009976:	bd38      	pop	{r3, r4, r5, pc}
 8009978:	200004cc 	.word	0x200004cc

0800997c <_write_r>:
 800997c:	b538      	push	{r3, r4, r5, lr}
 800997e:	4d07      	ldr	r5, [pc, #28]	; (800999c <_write_r+0x20>)
 8009980:	4604      	mov	r4, r0
 8009982:	4608      	mov	r0, r1
 8009984:	4611      	mov	r1, r2
 8009986:	2200      	movs	r2, #0
 8009988:	602a      	str	r2, [r5, #0]
 800998a:	461a      	mov	r2, r3
 800998c:	f7fb fa65 	bl	8004e5a <_write>
 8009990:	1c43      	adds	r3, r0, #1
 8009992:	d102      	bne.n	800999a <_write_r+0x1e>
 8009994:	682b      	ldr	r3, [r5, #0]
 8009996:	b103      	cbz	r3, 800999a <_write_r+0x1e>
 8009998:	6023      	str	r3, [r4, #0]
 800999a:	bd38      	pop	{r3, r4, r5, pc}
 800999c:	200004cc 	.word	0x200004cc

080099a0 <__errno>:
 80099a0:	4b01      	ldr	r3, [pc, #4]	; (80099a8 <__errno+0x8>)
 80099a2:	6818      	ldr	r0, [r3, #0]
 80099a4:	4770      	bx	lr
 80099a6:	bf00      	nop
 80099a8:	20000064 	.word	0x20000064

080099ac <__libc_init_array>:
 80099ac:	b570      	push	{r4, r5, r6, lr}
 80099ae:	4d0d      	ldr	r5, [pc, #52]	; (80099e4 <__libc_init_array+0x38>)
 80099b0:	4c0d      	ldr	r4, [pc, #52]	; (80099e8 <__libc_init_array+0x3c>)
 80099b2:	1b64      	subs	r4, r4, r5
 80099b4:	10a4      	asrs	r4, r4, #2
 80099b6:	2600      	movs	r6, #0
 80099b8:	42a6      	cmp	r6, r4
 80099ba:	d109      	bne.n	80099d0 <__libc_init_array+0x24>
 80099bc:	4d0b      	ldr	r5, [pc, #44]	; (80099ec <__libc_init_array+0x40>)
 80099be:	4c0c      	ldr	r4, [pc, #48]	; (80099f0 <__libc_init_array+0x44>)
 80099c0:	f001 ff86 	bl	800b8d0 <_init>
 80099c4:	1b64      	subs	r4, r4, r5
 80099c6:	10a4      	asrs	r4, r4, #2
 80099c8:	2600      	movs	r6, #0
 80099ca:	42a6      	cmp	r6, r4
 80099cc:	d105      	bne.n	80099da <__libc_init_array+0x2e>
 80099ce:	bd70      	pop	{r4, r5, r6, pc}
 80099d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80099d4:	4798      	blx	r3
 80099d6:	3601      	adds	r6, #1
 80099d8:	e7ee      	b.n	80099b8 <__libc_init_array+0xc>
 80099da:	f855 3b04 	ldr.w	r3, [r5], #4
 80099de:	4798      	blx	r3
 80099e0:	3601      	adds	r6, #1
 80099e2:	e7f2      	b.n	80099ca <__libc_init_array+0x1e>
 80099e4:	0800c004 	.word	0x0800c004
 80099e8:	0800c004 	.word	0x0800c004
 80099ec:	0800c004 	.word	0x0800c004
 80099f0:	0800c00c 	.word	0x0800c00c

080099f4 <__retarget_lock_init_recursive>:
 80099f4:	4770      	bx	lr

080099f6 <__retarget_lock_acquire_recursive>:
 80099f6:	4770      	bx	lr

080099f8 <__retarget_lock_release_recursive>:
 80099f8:	4770      	bx	lr

080099fa <memcpy>:
 80099fa:	440a      	add	r2, r1
 80099fc:	4291      	cmp	r1, r2
 80099fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a02:	d100      	bne.n	8009a06 <memcpy+0xc>
 8009a04:	4770      	bx	lr
 8009a06:	b510      	push	{r4, lr}
 8009a08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a10:	4291      	cmp	r1, r2
 8009a12:	d1f9      	bne.n	8009a08 <memcpy+0xe>
 8009a14:	bd10      	pop	{r4, pc}

08009a16 <quorem>:
 8009a16:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a1a:	6903      	ldr	r3, [r0, #16]
 8009a1c:	690c      	ldr	r4, [r1, #16]
 8009a1e:	42a3      	cmp	r3, r4
 8009a20:	4607      	mov	r7, r0
 8009a22:	db7e      	blt.n	8009b22 <quorem+0x10c>
 8009a24:	3c01      	subs	r4, #1
 8009a26:	f101 0814 	add.w	r8, r1, #20
 8009a2a:	f100 0514 	add.w	r5, r0, #20
 8009a2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a32:	9301      	str	r3, [sp, #4]
 8009a34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009a38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009a44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009a48:	fbb2 f6f3 	udiv	r6, r2, r3
 8009a4c:	d331      	bcc.n	8009ab2 <quorem+0x9c>
 8009a4e:	f04f 0e00 	mov.w	lr, #0
 8009a52:	4640      	mov	r0, r8
 8009a54:	46ac      	mov	ip, r5
 8009a56:	46f2      	mov	sl, lr
 8009a58:	f850 2b04 	ldr.w	r2, [r0], #4
 8009a5c:	b293      	uxth	r3, r2
 8009a5e:	fb06 e303 	mla	r3, r6, r3, lr
 8009a62:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009a66:	0c1a      	lsrs	r2, r3, #16
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	ebaa 0303 	sub.w	r3, sl, r3
 8009a6e:	f8dc a000 	ldr.w	sl, [ip]
 8009a72:	fa13 f38a 	uxtah	r3, r3, sl
 8009a76:	fb06 220e 	mla	r2, r6, lr, r2
 8009a7a:	9300      	str	r3, [sp, #0]
 8009a7c:	9b00      	ldr	r3, [sp, #0]
 8009a7e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009a82:	b292      	uxth	r2, r2
 8009a84:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009a88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a8c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009a90:	4581      	cmp	r9, r0
 8009a92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a96:	f84c 3b04 	str.w	r3, [ip], #4
 8009a9a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009a9e:	d2db      	bcs.n	8009a58 <quorem+0x42>
 8009aa0:	f855 300b 	ldr.w	r3, [r5, fp]
 8009aa4:	b92b      	cbnz	r3, 8009ab2 <quorem+0x9c>
 8009aa6:	9b01      	ldr	r3, [sp, #4]
 8009aa8:	3b04      	subs	r3, #4
 8009aaa:	429d      	cmp	r5, r3
 8009aac:	461a      	mov	r2, r3
 8009aae:	d32c      	bcc.n	8009b0a <quorem+0xf4>
 8009ab0:	613c      	str	r4, [r7, #16]
 8009ab2:	4638      	mov	r0, r7
 8009ab4:	f001 f8f2 	bl	800ac9c <__mcmp>
 8009ab8:	2800      	cmp	r0, #0
 8009aba:	db22      	blt.n	8009b02 <quorem+0xec>
 8009abc:	3601      	adds	r6, #1
 8009abe:	4629      	mov	r1, r5
 8009ac0:	2000      	movs	r0, #0
 8009ac2:	f858 2b04 	ldr.w	r2, [r8], #4
 8009ac6:	f8d1 c000 	ldr.w	ip, [r1]
 8009aca:	b293      	uxth	r3, r2
 8009acc:	1ac3      	subs	r3, r0, r3
 8009ace:	0c12      	lsrs	r2, r2, #16
 8009ad0:	fa13 f38c 	uxtah	r3, r3, ip
 8009ad4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009ad8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ae2:	45c1      	cmp	r9, r8
 8009ae4:	f841 3b04 	str.w	r3, [r1], #4
 8009ae8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009aec:	d2e9      	bcs.n	8009ac2 <quorem+0xac>
 8009aee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009af2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009af6:	b922      	cbnz	r2, 8009b02 <quorem+0xec>
 8009af8:	3b04      	subs	r3, #4
 8009afa:	429d      	cmp	r5, r3
 8009afc:	461a      	mov	r2, r3
 8009afe:	d30a      	bcc.n	8009b16 <quorem+0x100>
 8009b00:	613c      	str	r4, [r7, #16]
 8009b02:	4630      	mov	r0, r6
 8009b04:	b003      	add	sp, #12
 8009b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b0a:	6812      	ldr	r2, [r2, #0]
 8009b0c:	3b04      	subs	r3, #4
 8009b0e:	2a00      	cmp	r2, #0
 8009b10:	d1ce      	bne.n	8009ab0 <quorem+0x9a>
 8009b12:	3c01      	subs	r4, #1
 8009b14:	e7c9      	b.n	8009aaa <quorem+0x94>
 8009b16:	6812      	ldr	r2, [r2, #0]
 8009b18:	3b04      	subs	r3, #4
 8009b1a:	2a00      	cmp	r2, #0
 8009b1c:	d1f0      	bne.n	8009b00 <quorem+0xea>
 8009b1e:	3c01      	subs	r4, #1
 8009b20:	e7eb      	b.n	8009afa <quorem+0xe4>
 8009b22:	2000      	movs	r0, #0
 8009b24:	e7ee      	b.n	8009b04 <quorem+0xee>
	...

08009b28 <_dtoa_r>:
 8009b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b2c:	ed2d 8b04 	vpush	{d8-d9}
 8009b30:	69c5      	ldr	r5, [r0, #28]
 8009b32:	b093      	sub	sp, #76	; 0x4c
 8009b34:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009b38:	ec57 6b10 	vmov	r6, r7, d0
 8009b3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009b40:	9107      	str	r1, [sp, #28]
 8009b42:	4604      	mov	r4, r0
 8009b44:	920a      	str	r2, [sp, #40]	; 0x28
 8009b46:	930d      	str	r3, [sp, #52]	; 0x34
 8009b48:	b975      	cbnz	r5, 8009b68 <_dtoa_r+0x40>
 8009b4a:	2010      	movs	r0, #16
 8009b4c:	f7ff f83a 	bl	8008bc4 <malloc>
 8009b50:	4602      	mov	r2, r0
 8009b52:	61e0      	str	r0, [r4, #28]
 8009b54:	b920      	cbnz	r0, 8009b60 <_dtoa_r+0x38>
 8009b56:	4bae      	ldr	r3, [pc, #696]	; (8009e10 <_dtoa_r+0x2e8>)
 8009b58:	21ef      	movs	r1, #239	; 0xef
 8009b5a:	48ae      	ldr	r0, [pc, #696]	; (8009e14 <_dtoa_r+0x2ec>)
 8009b5c:	f001 fbbe 	bl	800b2dc <__assert_func>
 8009b60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009b64:	6005      	str	r5, [r0, #0]
 8009b66:	60c5      	str	r5, [r0, #12]
 8009b68:	69e3      	ldr	r3, [r4, #28]
 8009b6a:	6819      	ldr	r1, [r3, #0]
 8009b6c:	b151      	cbz	r1, 8009b84 <_dtoa_r+0x5c>
 8009b6e:	685a      	ldr	r2, [r3, #4]
 8009b70:	604a      	str	r2, [r1, #4]
 8009b72:	2301      	movs	r3, #1
 8009b74:	4093      	lsls	r3, r2
 8009b76:	608b      	str	r3, [r1, #8]
 8009b78:	4620      	mov	r0, r4
 8009b7a:	f000 fe53 	bl	800a824 <_Bfree>
 8009b7e:	69e3      	ldr	r3, [r4, #28]
 8009b80:	2200      	movs	r2, #0
 8009b82:	601a      	str	r2, [r3, #0]
 8009b84:	1e3b      	subs	r3, r7, #0
 8009b86:	bfbb      	ittet	lt
 8009b88:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009b8c:	9303      	strlt	r3, [sp, #12]
 8009b8e:	2300      	movge	r3, #0
 8009b90:	2201      	movlt	r2, #1
 8009b92:	bfac      	ite	ge
 8009b94:	f8c8 3000 	strge.w	r3, [r8]
 8009b98:	f8c8 2000 	strlt.w	r2, [r8]
 8009b9c:	4b9e      	ldr	r3, [pc, #632]	; (8009e18 <_dtoa_r+0x2f0>)
 8009b9e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009ba2:	ea33 0308 	bics.w	r3, r3, r8
 8009ba6:	d11b      	bne.n	8009be0 <_dtoa_r+0xb8>
 8009ba8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009baa:	f242 730f 	movw	r3, #9999	; 0x270f
 8009bae:	6013      	str	r3, [r2, #0]
 8009bb0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009bb4:	4333      	orrs	r3, r6
 8009bb6:	f000 8593 	beq.w	800a6e0 <_dtoa_r+0xbb8>
 8009bba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bbc:	b963      	cbnz	r3, 8009bd8 <_dtoa_r+0xb0>
 8009bbe:	4b97      	ldr	r3, [pc, #604]	; (8009e1c <_dtoa_r+0x2f4>)
 8009bc0:	e027      	b.n	8009c12 <_dtoa_r+0xea>
 8009bc2:	4b97      	ldr	r3, [pc, #604]	; (8009e20 <_dtoa_r+0x2f8>)
 8009bc4:	9300      	str	r3, [sp, #0]
 8009bc6:	3308      	adds	r3, #8
 8009bc8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009bca:	6013      	str	r3, [r2, #0]
 8009bcc:	9800      	ldr	r0, [sp, #0]
 8009bce:	b013      	add	sp, #76	; 0x4c
 8009bd0:	ecbd 8b04 	vpop	{d8-d9}
 8009bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bd8:	4b90      	ldr	r3, [pc, #576]	; (8009e1c <_dtoa_r+0x2f4>)
 8009bda:	9300      	str	r3, [sp, #0]
 8009bdc:	3303      	adds	r3, #3
 8009bde:	e7f3      	b.n	8009bc8 <_dtoa_r+0xa0>
 8009be0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009be4:	2200      	movs	r2, #0
 8009be6:	ec51 0b17 	vmov	r0, r1, d7
 8009bea:	eeb0 8a47 	vmov.f32	s16, s14
 8009bee:	eef0 8a67 	vmov.f32	s17, s15
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	f7f6 ff98 	bl	8000b28 <__aeabi_dcmpeq>
 8009bf8:	4681      	mov	r9, r0
 8009bfa:	b160      	cbz	r0, 8009c16 <_dtoa_r+0xee>
 8009bfc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009bfe:	2301      	movs	r3, #1
 8009c00:	6013      	str	r3, [r2, #0]
 8009c02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	f000 8568 	beq.w	800a6da <_dtoa_r+0xbb2>
 8009c0a:	4b86      	ldr	r3, [pc, #536]	; (8009e24 <_dtoa_r+0x2fc>)
 8009c0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009c0e:	6013      	str	r3, [r2, #0]
 8009c10:	3b01      	subs	r3, #1
 8009c12:	9300      	str	r3, [sp, #0]
 8009c14:	e7da      	b.n	8009bcc <_dtoa_r+0xa4>
 8009c16:	aa10      	add	r2, sp, #64	; 0x40
 8009c18:	a911      	add	r1, sp, #68	; 0x44
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	eeb0 0a48 	vmov.f32	s0, s16
 8009c20:	eef0 0a68 	vmov.f32	s1, s17
 8009c24:	f001 f8e0 	bl	800ade8 <__d2b>
 8009c28:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009c2c:	4682      	mov	sl, r0
 8009c2e:	2d00      	cmp	r5, #0
 8009c30:	d07f      	beq.n	8009d32 <_dtoa_r+0x20a>
 8009c32:	ee18 3a90 	vmov	r3, s17
 8009c36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c3a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009c3e:	ec51 0b18 	vmov	r0, r1, d8
 8009c42:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009c46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009c4a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009c4e:	4619      	mov	r1, r3
 8009c50:	2200      	movs	r2, #0
 8009c52:	4b75      	ldr	r3, [pc, #468]	; (8009e28 <_dtoa_r+0x300>)
 8009c54:	f7f6 fb48 	bl	80002e8 <__aeabi_dsub>
 8009c58:	a367      	add	r3, pc, #412	; (adr r3, 8009df8 <_dtoa_r+0x2d0>)
 8009c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5e:	f7f6 fcfb 	bl	8000658 <__aeabi_dmul>
 8009c62:	a367      	add	r3, pc, #412	; (adr r3, 8009e00 <_dtoa_r+0x2d8>)
 8009c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c68:	f7f6 fb40 	bl	80002ec <__adddf3>
 8009c6c:	4606      	mov	r6, r0
 8009c6e:	4628      	mov	r0, r5
 8009c70:	460f      	mov	r7, r1
 8009c72:	f7f6 fc87 	bl	8000584 <__aeabi_i2d>
 8009c76:	a364      	add	r3, pc, #400	; (adr r3, 8009e08 <_dtoa_r+0x2e0>)
 8009c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7c:	f7f6 fcec 	bl	8000658 <__aeabi_dmul>
 8009c80:	4602      	mov	r2, r0
 8009c82:	460b      	mov	r3, r1
 8009c84:	4630      	mov	r0, r6
 8009c86:	4639      	mov	r1, r7
 8009c88:	f7f6 fb30 	bl	80002ec <__adddf3>
 8009c8c:	4606      	mov	r6, r0
 8009c8e:	460f      	mov	r7, r1
 8009c90:	f7f6 ff92 	bl	8000bb8 <__aeabi_d2iz>
 8009c94:	2200      	movs	r2, #0
 8009c96:	4683      	mov	fp, r0
 8009c98:	2300      	movs	r3, #0
 8009c9a:	4630      	mov	r0, r6
 8009c9c:	4639      	mov	r1, r7
 8009c9e:	f7f6 ff4d 	bl	8000b3c <__aeabi_dcmplt>
 8009ca2:	b148      	cbz	r0, 8009cb8 <_dtoa_r+0x190>
 8009ca4:	4658      	mov	r0, fp
 8009ca6:	f7f6 fc6d 	bl	8000584 <__aeabi_i2d>
 8009caa:	4632      	mov	r2, r6
 8009cac:	463b      	mov	r3, r7
 8009cae:	f7f6 ff3b 	bl	8000b28 <__aeabi_dcmpeq>
 8009cb2:	b908      	cbnz	r0, 8009cb8 <_dtoa_r+0x190>
 8009cb4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009cb8:	f1bb 0f16 	cmp.w	fp, #22
 8009cbc:	d857      	bhi.n	8009d6e <_dtoa_r+0x246>
 8009cbe:	4b5b      	ldr	r3, [pc, #364]	; (8009e2c <_dtoa_r+0x304>)
 8009cc0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc8:	ec51 0b18 	vmov	r0, r1, d8
 8009ccc:	f7f6 ff36 	bl	8000b3c <__aeabi_dcmplt>
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	d04e      	beq.n	8009d72 <_dtoa_r+0x24a>
 8009cd4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009cd8:	2300      	movs	r3, #0
 8009cda:	930c      	str	r3, [sp, #48]	; 0x30
 8009cdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009cde:	1b5b      	subs	r3, r3, r5
 8009ce0:	1e5a      	subs	r2, r3, #1
 8009ce2:	bf45      	ittet	mi
 8009ce4:	f1c3 0301 	rsbmi	r3, r3, #1
 8009ce8:	9305      	strmi	r3, [sp, #20]
 8009cea:	2300      	movpl	r3, #0
 8009cec:	2300      	movmi	r3, #0
 8009cee:	9206      	str	r2, [sp, #24]
 8009cf0:	bf54      	ite	pl
 8009cf2:	9305      	strpl	r3, [sp, #20]
 8009cf4:	9306      	strmi	r3, [sp, #24]
 8009cf6:	f1bb 0f00 	cmp.w	fp, #0
 8009cfa:	db3c      	blt.n	8009d76 <_dtoa_r+0x24e>
 8009cfc:	9b06      	ldr	r3, [sp, #24]
 8009cfe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009d02:	445b      	add	r3, fp
 8009d04:	9306      	str	r3, [sp, #24]
 8009d06:	2300      	movs	r3, #0
 8009d08:	9308      	str	r3, [sp, #32]
 8009d0a:	9b07      	ldr	r3, [sp, #28]
 8009d0c:	2b09      	cmp	r3, #9
 8009d0e:	d868      	bhi.n	8009de2 <_dtoa_r+0x2ba>
 8009d10:	2b05      	cmp	r3, #5
 8009d12:	bfc4      	itt	gt
 8009d14:	3b04      	subgt	r3, #4
 8009d16:	9307      	strgt	r3, [sp, #28]
 8009d18:	9b07      	ldr	r3, [sp, #28]
 8009d1a:	f1a3 0302 	sub.w	r3, r3, #2
 8009d1e:	bfcc      	ite	gt
 8009d20:	2500      	movgt	r5, #0
 8009d22:	2501      	movle	r5, #1
 8009d24:	2b03      	cmp	r3, #3
 8009d26:	f200 8085 	bhi.w	8009e34 <_dtoa_r+0x30c>
 8009d2a:	e8df f003 	tbb	[pc, r3]
 8009d2e:	3b2e      	.short	0x3b2e
 8009d30:	5839      	.short	0x5839
 8009d32:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009d36:	441d      	add	r5, r3
 8009d38:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009d3c:	2b20      	cmp	r3, #32
 8009d3e:	bfc1      	itttt	gt
 8009d40:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009d44:	fa08 f803 	lslgt.w	r8, r8, r3
 8009d48:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009d4c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009d50:	bfd6      	itet	le
 8009d52:	f1c3 0320 	rsble	r3, r3, #32
 8009d56:	ea48 0003 	orrgt.w	r0, r8, r3
 8009d5a:	fa06 f003 	lslle.w	r0, r6, r3
 8009d5e:	f7f6 fc01 	bl	8000564 <__aeabi_ui2d>
 8009d62:	2201      	movs	r2, #1
 8009d64:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009d68:	3d01      	subs	r5, #1
 8009d6a:	920e      	str	r2, [sp, #56]	; 0x38
 8009d6c:	e76f      	b.n	8009c4e <_dtoa_r+0x126>
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e7b3      	b.n	8009cda <_dtoa_r+0x1b2>
 8009d72:	900c      	str	r0, [sp, #48]	; 0x30
 8009d74:	e7b2      	b.n	8009cdc <_dtoa_r+0x1b4>
 8009d76:	9b05      	ldr	r3, [sp, #20]
 8009d78:	eba3 030b 	sub.w	r3, r3, fp
 8009d7c:	9305      	str	r3, [sp, #20]
 8009d7e:	f1cb 0300 	rsb	r3, fp, #0
 8009d82:	9308      	str	r3, [sp, #32]
 8009d84:	2300      	movs	r3, #0
 8009d86:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d88:	e7bf      	b.n	8009d0a <_dtoa_r+0x1e2>
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	dc52      	bgt.n	8009e3a <_dtoa_r+0x312>
 8009d94:	2301      	movs	r3, #1
 8009d96:	9301      	str	r3, [sp, #4]
 8009d98:	9304      	str	r3, [sp, #16]
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	920a      	str	r2, [sp, #40]	; 0x28
 8009d9e:	e00b      	b.n	8009db8 <_dtoa_r+0x290>
 8009da0:	2301      	movs	r3, #1
 8009da2:	e7f3      	b.n	8009d8c <_dtoa_r+0x264>
 8009da4:	2300      	movs	r3, #0
 8009da6:	9309      	str	r3, [sp, #36]	; 0x24
 8009da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009daa:	445b      	add	r3, fp
 8009dac:	9301      	str	r3, [sp, #4]
 8009dae:	3301      	adds	r3, #1
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	9304      	str	r3, [sp, #16]
 8009db4:	bfb8      	it	lt
 8009db6:	2301      	movlt	r3, #1
 8009db8:	69e0      	ldr	r0, [r4, #28]
 8009dba:	2100      	movs	r1, #0
 8009dbc:	2204      	movs	r2, #4
 8009dbe:	f102 0614 	add.w	r6, r2, #20
 8009dc2:	429e      	cmp	r6, r3
 8009dc4:	d93d      	bls.n	8009e42 <_dtoa_r+0x31a>
 8009dc6:	6041      	str	r1, [r0, #4]
 8009dc8:	4620      	mov	r0, r4
 8009dca:	f000 fceb 	bl	800a7a4 <_Balloc>
 8009dce:	9000      	str	r0, [sp, #0]
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	d139      	bne.n	8009e48 <_dtoa_r+0x320>
 8009dd4:	4b16      	ldr	r3, [pc, #88]	; (8009e30 <_dtoa_r+0x308>)
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	f240 11af 	movw	r1, #431	; 0x1af
 8009ddc:	e6bd      	b.n	8009b5a <_dtoa_r+0x32>
 8009dde:	2301      	movs	r3, #1
 8009de0:	e7e1      	b.n	8009da6 <_dtoa_r+0x27e>
 8009de2:	2501      	movs	r5, #1
 8009de4:	2300      	movs	r3, #0
 8009de6:	9307      	str	r3, [sp, #28]
 8009de8:	9509      	str	r5, [sp, #36]	; 0x24
 8009dea:	f04f 33ff 	mov.w	r3, #4294967295
 8009dee:	9301      	str	r3, [sp, #4]
 8009df0:	9304      	str	r3, [sp, #16]
 8009df2:	2200      	movs	r2, #0
 8009df4:	2312      	movs	r3, #18
 8009df6:	e7d1      	b.n	8009d9c <_dtoa_r+0x274>
 8009df8:	636f4361 	.word	0x636f4361
 8009dfc:	3fd287a7 	.word	0x3fd287a7
 8009e00:	8b60c8b3 	.word	0x8b60c8b3
 8009e04:	3fc68a28 	.word	0x3fc68a28
 8009e08:	509f79fb 	.word	0x509f79fb
 8009e0c:	3fd34413 	.word	0x3fd34413
 8009e10:	0800bcce 	.word	0x0800bcce
 8009e14:	0800bce5 	.word	0x0800bce5
 8009e18:	7ff00000 	.word	0x7ff00000
 8009e1c:	0800bcca 	.word	0x0800bcca
 8009e20:	0800bcc1 	.word	0x0800bcc1
 8009e24:	0800bc9e 	.word	0x0800bc9e
 8009e28:	3ff80000 	.word	0x3ff80000
 8009e2c:	0800bdd0 	.word	0x0800bdd0
 8009e30:	0800bd3d 	.word	0x0800bd3d
 8009e34:	2301      	movs	r3, #1
 8009e36:	9309      	str	r3, [sp, #36]	; 0x24
 8009e38:	e7d7      	b.n	8009dea <_dtoa_r+0x2c2>
 8009e3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e3c:	9301      	str	r3, [sp, #4]
 8009e3e:	9304      	str	r3, [sp, #16]
 8009e40:	e7ba      	b.n	8009db8 <_dtoa_r+0x290>
 8009e42:	3101      	adds	r1, #1
 8009e44:	0052      	lsls	r2, r2, #1
 8009e46:	e7ba      	b.n	8009dbe <_dtoa_r+0x296>
 8009e48:	69e3      	ldr	r3, [r4, #28]
 8009e4a:	9a00      	ldr	r2, [sp, #0]
 8009e4c:	601a      	str	r2, [r3, #0]
 8009e4e:	9b04      	ldr	r3, [sp, #16]
 8009e50:	2b0e      	cmp	r3, #14
 8009e52:	f200 80a8 	bhi.w	8009fa6 <_dtoa_r+0x47e>
 8009e56:	2d00      	cmp	r5, #0
 8009e58:	f000 80a5 	beq.w	8009fa6 <_dtoa_r+0x47e>
 8009e5c:	f1bb 0f00 	cmp.w	fp, #0
 8009e60:	dd38      	ble.n	8009ed4 <_dtoa_r+0x3ac>
 8009e62:	4bc0      	ldr	r3, [pc, #768]	; (800a164 <_dtoa_r+0x63c>)
 8009e64:	f00b 020f 	and.w	r2, fp, #15
 8009e68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e6c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009e70:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009e74:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009e78:	d019      	beq.n	8009eae <_dtoa_r+0x386>
 8009e7a:	4bbb      	ldr	r3, [pc, #748]	; (800a168 <_dtoa_r+0x640>)
 8009e7c:	ec51 0b18 	vmov	r0, r1, d8
 8009e80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009e84:	f7f6 fd12 	bl	80008ac <__aeabi_ddiv>
 8009e88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e8c:	f008 080f 	and.w	r8, r8, #15
 8009e90:	2503      	movs	r5, #3
 8009e92:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a168 <_dtoa_r+0x640>
 8009e96:	f1b8 0f00 	cmp.w	r8, #0
 8009e9a:	d10a      	bne.n	8009eb2 <_dtoa_r+0x38a>
 8009e9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ea0:	4632      	mov	r2, r6
 8009ea2:	463b      	mov	r3, r7
 8009ea4:	f7f6 fd02 	bl	80008ac <__aeabi_ddiv>
 8009ea8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009eac:	e02b      	b.n	8009f06 <_dtoa_r+0x3de>
 8009eae:	2502      	movs	r5, #2
 8009eb0:	e7ef      	b.n	8009e92 <_dtoa_r+0x36a>
 8009eb2:	f018 0f01 	tst.w	r8, #1
 8009eb6:	d008      	beq.n	8009eca <_dtoa_r+0x3a2>
 8009eb8:	4630      	mov	r0, r6
 8009eba:	4639      	mov	r1, r7
 8009ebc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009ec0:	f7f6 fbca 	bl	8000658 <__aeabi_dmul>
 8009ec4:	3501      	adds	r5, #1
 8009ec6:	4606      	mov	r6, r0
 8009ec8:	460f      	mov	r7, r1
 8009eca:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009ece:	f109 0908 	add.w	r9, r9, #8
 8009ed2:	e7e0      	b.n	8009e96 <_dtoa_r+0x36e>
 8009ed4:	f000 809f 	beq.w	800a016 <_dtoa_r+0x4ee>
 8009ed8:	f1cb 0600 	rsb	r6, fp, #0
 8009edc:	4ba1      	ldr	r3, [pc, #644]	; (800a164 <_dtoa_r+0x63c>)
 8009ede:	4fa2      	ldr	r7, [pc, #648]	; (800a168 <_dtoa_r+0x640>)
 8009ee0:	f006 020f 	and.w	r2, r6, #15
 8009ee4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eec:	ec51 0b18 	vmov	r0, r1, d8
 8009ef0:	f7f6 fbb2 	bl	8000658 <__aeabi_dmul>
 8009ef4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ef8:	1136      	asrs	r6, r6, #4
 8009efa:	2300      	movs	r3, #0
 8009efc:	2502      	movs	r5, #2
 8009efe:	2e00      	cmp	r6, #0
 8009f00:	d17e      	bne.n	800a000 <_dtoa_r+0x4d8>
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d1d0      	bne.n	8009ea8 <_dtoa_r+0x380>
 8009f06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f08:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f000 8084 	beq.w	800a01a <_dtoa_r+0x4f2>
 8009f12:	4b96      	ldr	r3, [pc, #600]	; (800a16c <_dtoa_r+0x644>)
 8009f14:	2200      	movs	r2, #0
 8009f16:	4640      	mov	r0, r8
 8009f18:	4649      	mov	r1, r9
 8009f1a:	f7f6 fe0f 	bl	8000b3c <__aeabi_dcmplt>
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	d07b      	beq.n	800a01a <_dtoa_r+0x4f2>
 8009f22:	9b04      	ldr	r3, [sp, #16]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d078      	beq.n	800a01a <_dtoa_r+0x4f2>
 8009f28:	9b01      	ldr	r3, [sp, #4]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	dd39      	ble.n	8009fa2 <_dtoa_r+0x47a>
 8009f2e:	4b90      	ldr	r3, [pc, #576]	; (800a170 <_dtoa_r+0x648>)
 8009f30:	2200      	movs	r2, #0
 8009f32:	4640      	mov	r0, r8
 8009f34:	4649      	mov	r1, r9
 8009f36:	f7f6 fb8f 	bl	8000658 <__aeabi_dmul>
 8009f3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f3e:	9e01      	ldr	r6, [sp, #4]
 8009f40:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009f44:	3501      	adds	r5, #1
 8009f46:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	f7f6 fb1a 	bl	8000584 <__aeabi_i2d>
 8009f50:	4642      	mov	r2, r8
 8009f52:	464b      	mov	r3, r9
 8009f54:	f7f6 fb80 	bl	8000658 <__aeabi_dmul>
 8009f58:	4b86      	ldr	r3, [pc, #536]	; (800a174 <_dtoa_r+0x64c>)
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	f7f6 f9c6 	bl	80002ec <__adddf3>
 8009f60:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009f64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f68:	9303      	str	r3, [sp, #12]
 8009f6a:	2e00      	cmp	r6, #0
 8009f6c:	d158      	bne.n	800a020 <_dtoa_r+0x4f8>
 8009f6e:	4b82      	ldr	r3, [pc, #520]	; (800a178 <_dtoa_r+0x650>)
 8009f70:	2200      	movs	r2, #0
 8009f72:	4640      	mov	r0, r8
 8009f74:	4649      	mov	r1, r9
 8009f76:	f7f6 f9b7 	bl	80002e8 <__aeabi_dsub>
 8009f7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f7e:	4680      	mov	r8, r0
 8009f80:	4689      	mov	r9, r1
 8009f82:	f7f6 fdf9 	bl	8000b78 <__aeabi_dcmpgt>
 8009f86:	2800      	cmp	r0, #0
 8009f88:	f040 8296 	bne.w	800a4b8 <_dtoa_r+0x990>
 8009f8c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009f90:	4640      	mov	r0, r8
 8009f92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f96:	4649      	mov	r1, r9
 8009f98:	f7f6 fdd0 	bl	8000b3c <__aeabi_dcmplt>
 8009f9c:	2800      	cmp	r0, #0
 8009f9e:	f040 8289 	bne.w	800a4b4 <_dtoa_r+0x98c>
 8009fa2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009fa6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	f2c0 814e 	blt.w	800a24a <_dtoa_r+0x722>
 8009fae:	f1bb 0f0e 	cmp.w	fp, #14
 8009fb2:	f300 814a 	bgt.w	800a24a <_dtoa_r+0x722>
 8009fb6:	4b6b      	ldr	r3, [pc, #428]	; (800a164 <_dtoa_r+0x63c>)
 8009fb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009fbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009fc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	f280 80dc 	bge.w	800a180 <_dtoa_r+0x658>
 8009fc8:	9b04      	ldr	r3, [sp, #16]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	f300 80d8 	bgt.w	800a180 <_dtoa_r+0x658>
 8009fd0:	f040 826f 	bne.w	800a4b2 <_dtoa_r+0x98a>
 8009fd4:	4b68      	ldr	r3, [pc, #416]	; (800a178 <_dtoa_r+0x650>)
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	4640      	mov	r0, r8
 8009fda:	4649      	mov	r1, r9
 8009fdc:	f7f6 fb3c 	bl	8000658 <__aeabi_dmul>
 8009fe0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009fe4:	f7f6 fdbe 	bl	8000b64 <__aeabi_dcmpge>
 8009fe8:	9e04      	ldr	r6, [sp, #16]
 8009fea:	4637      	mov	r7, r6
 8009fec:	2800      	cmp	r0, #0
 8009fee:	f040 8245 	bne.w	800a47c <_dtoa_r+0x954>
 8009ff2:	9d00      	ldr	r5, [sp, #0]
 8009ff4:	2331      	movs	r3, #49	; 0x31
 8009ff6:	f805 3b01 	strb.w	r3, [r5], #1
 8009ffa:	f10b 0b01 	add.w	fp, fp, #1
 8009ffe:	e241      	b.n	800a484 <_dtoa_r+0x95c>
 800a000:	07f2      	lsls	r2, r6, #31
 800a002:	d505      	bpl.n	800a010 <_dtoa_r+0x4e8>
 800a004:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a008:	f7f6 fb26 	bl	8000658 <__aeabi_dmul>
 800a00c:	3501      	adds	r5, #1
 800a00e:	2301      	movs	r3, #1
 800a010:	1076      	asrs	r6, r6, #1
 800a012:	3708      	adds	r7, #8
 800a014:	e773      	b.n	8009efe <_dtoa_r+0x3d6>
 800a016:	2502      	movs	r5, #2
 800a018:	e775      	b.n	8009f06 <_dtoa_r+0x3de>
 800a01a:	9e04      	ldr	r6, [sp, #16]
 800a01c:	465f      	mov	r7, fp
 800a01e:	e792      	b.n	8009f46 <_dtoa_r+0x41e>
 800a020:	9900      	ldr	r1, [sp, #0]
 800a022:	4b50      	ldr	r3, [pc, #320]	; (800a164 <_dtoa_r+0x63c>)
 800a024:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a028:	4431      	add	r1, r6
 800a02a:	9102      	str	r1, [sp, #8]
 800a02c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a02e:	eeb0 9a47 	vmov.f32	s18, s14
 800a032:	eef0 9a67 	vmov.f32	s19, s15
 800a036:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a03a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a03e:	2900      	cmp	r1, #0
 800a040:	d044      	beq.n	800a0cc <_dtoa_r+0x5a4>
 800a042:	494e      	ldr	r1, [pc, #312]	; (800a17c <_dtoa_r+0x654>)
 800a044:	2000      	movs	r0, #0
 800a046:	f7f6 fc31 	bl	80008ac <__aeabi_ddiv>
 800a04a:	ec53 2b19 	vmov	r2, r3, d9
 800a04e:	f7f6 f94b 	bl	80002e8 <__aeabi_dsub>
 800a052:	9d00      	ldr	r5, [sp, #0]
 800a054:	ec41 0b19 	vmov	d9, r0, r1
 800a058:	4649      	mov	r1, r9
 800a05a:	4640      	mov	r0, r8
 800a05c:	f7f6 fdac 	bl	8000bb8 <__aeabi_d2iz>
 800a060:	4606      	mov	r6, r0
 800a062:	f7f6 fa8f 	bl	8000584 <__aeabi_i2d>
 800a066:	4602      	mov	r2, r0
 800a068:	460b      	mov	r3, r1
 800a06a:	4640      	mov	r0, r8
 800a06c:	4649      	mov	r1, r9
 800a06e:	f7f6 f93b 	bl	80002e8 <__aeabi_dsub>
 800a072:	3630      	adds	r6, #48	; 0x30
 800a074:	f805 6b01 	strb.w	r6, [r5], #1
 800a078:	ec53 2b19 	vmov	r2, r3, d9
 800a07c:	4680      	mov	r8, r0
 800a07e:	4689      	mov	r9, r1
 800a080:	f7f6 fd5c 	bl	8000b3c <__aeabi_dcmplt>
 800a084:	2800      	cmp	r0, #0
 800a086:	d164      	bne.n	800a152 <_dtoa_r+0x62a>
 800a088:	4642      	mov	r2, r8
 800a08a:	464b      	mov	r3, r9
 800a08c:	4937      	ldr	r1, [pc, #220]	; (800a16c <_dtoa_r+0x644>)
 800a08e:	2000      	movs	r0, #0
 800a090:	f7f6 f92a 	bl	80002e8 <__aeabi_dsub>
 800a094:	ec53 2b19 	vmov	r2, r3, d9
 800a098:	f7f6 fd50 	bl	8000b3c <__aeabi_dcmplt>
 800a09c:	2800      	cmp	r0, #0
 800a09e:	f040 80b6 	bne.w	800a20e <_dtoa_r+0x6e6>
 800a0a2:	9b02      	ldr	r3, [sp, #8]
 800a0a4:	429d      	cmp	r5, r3
 800a0a6:	f43f af7c 	beq.w	8009fa2 <_dtoa_r+0x47a>
 800a0aa:	4b31      	ldr	r3, [pc, #196]	; (800a170 <_dtoa_r+0x648>)
 800a0ac:	ec51 0b19 	vmov	r0, r1, d9
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f7f6 fad1 	bl	8000658 <__aeabi_dmul>
 800a0b6:	4b2e      	ldr	r3, [pc, #184]	; (800a170 <_dtoa_r+0x648>)
 800a0b8:	ec41 0b19 	vmov	d9, r0, r1
 800a0bc:	2200      	movs	r2, #0
 800a0be:	4640      	mov	r0, r8
 800a0c0:	4649      	mov	r1, r9
 800a0c2:	f7f6 fac9 	bl	8000658 <__aeabi_dmul>
 800a0c6:	4680      	mov	r8, r0
 800a0c8:	4689      	mov	r9, r1
 800a0ca:	e7c5      	b.n	800a058 <_dtoa_r+0x530>
 800a0cc:	ec51 0b17 	vmov	r0, r1, d7
 800a0d0:	f7f6 fac2 	bl	8000658 <__aeabi_dmul>
 800a0d4:	9b02      	ldr	r3, [sp, #8]
 800a0d6:	9d00      	ldr	r5, [sp, #0]
 800a0d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0da:	ec41 0b19 	vmov	d9, r0, r1
 800a0de:	4649      	mov	r1, r9
 800a0e0:	4640      	mov	r0, r8
 800a0e2:	f7f6 fd69 	bl	8000bb8 <__aeabi_d2iz>
 800a0e6:	4606      	mov	r6, r0
 800a0e8:	f7f6 fa4c 	bl	8000584 <__aeabi_i2d>
 800a0ec:	3630      	adds	r6, #48	; 0x30
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	4640      	mov	r0, r8
 800a0f4:	4649      	mov	r1, r9
 800a0f6:	f7f6 f8f7 	bl	80002e8 <__aeabi_dsub>
 800a0fa:	f805 6b01 	strb.w	r6, [r5], #1
 800a0fe:	9b02      	ldr	r3, [sp, #8]
 800a100:	429d      	cmp	r5, r3
 800a102:	4680      	mov	r8, r0
 800a104:	4689      	mov	r9, r1
 800a106:	f04f 0200 	mov.w	r2, #0
 800a10a:	d124      	bne.n	800a156 <_dtoa_r+0x62e>
 800a10c:	4b1b      	ldr	r3, [pc, #108]	; (800a17c <_dtoa_r+0x654>)
 800a10e:	ec51 0b19 	vmov	r0, r1, d9
 800a112:	f7f6 f8eb 	bl	80002ec <__adddf3>
 800a116:	4602      	mov	r2, r0
 800a118:	460b      	mov	r3, r1
 800a11a:	4640      	mov	r0, r8
 800a11c:	4649      	mov	r1, r9
 800a11e:	f7f6 fd2b 	bl	8000b78 <__aeabi_dcmpgt>
 800a122:	2800      	cmp	r0, #0
 800a124:	d173      	bne.n	800a20e <_dtoa_r+0x6e6>
 800a126:	ec53 2b19 	vmov	r2, r3, d9
 800a12a:	4914      	ldr	r1, [pc, #80]	; (800a17c <_dtoa_r+0x654>)
 800a12c:	2000      	movs	r0, #0
 800a12e:	f7f6 f8db 	bl	80002e8 <__aeabi_dsub>
 800a132:	4602      	mov	r2, r0
 800a134:	460b      	mov	r3, r1
 800a136:	4640      	mov	r0, r8
 800a138:	4649      	mov	r1, r9
 800a13a:	f7f6 fcff 	bl	8000b3c <__aeabi_dcmplt>
 800a13e:	2800      	cmp	r0, #0
 800a140:	f43f af2f 	beq.w	8009fa2 <_dtoa_r+0x47a>
 800a144:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a146:	1e6b      	subs	r3, r5, #1
 800a148:	930f      	str	r3, [sp, #60]	; 0x3c
 800a14a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a14e:	2b30      	cmp	r3, #48	; 0x30
 800a150:	d0f8      	beq.n	800a144 <_dtoa_r+0x61c>
 800a152:	46bb      	mov	fp, r7
 800a154:	e04a      	b.n	800a1ec <_dtoa_r+0x6c4>
 800a156:	4b06      	ldr	r3, [pc, #24]	; (800a170 <_dtoa_r+0x648>)
 800a158:	f7f6 fa7e 	bl	8000658 <__aeabi_dmul>
 800a15c:	4680      	mov	r8, r0
 800a15e:	4689      	mov	r9, r1
 800a160:	e7bd      	b.n	800a0de <_dtoa_r+0x5b6>
 800a162:	bf00      	nop
 800a164:	0800bdd0 	.word	0x0800bdd0
 800a168:	0800bda8 	.word	0x0800bda8
 800a16c:	3ff00000 	.word	0x3ff00000
 800a170:	40240000 	.word	0x40240000
 800a174:	401c0000 	.word	0x401c0000
 800a178:	40140000 	.word	0x40140000
 800a17c:	3fe00000 	.word	0x3fe00000
 800a180:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a184:	9d00      	ldr	r5, [sp, #0]
 800a186:	4642      	mov	r2, r8
 800a188:	464b      	mov	r3, r9
 800a18a:	4630      	mov	r0, r6
 800a18c:	4639      	mov	r1, r7
 800a18e:	f7f6 fb8d 	bl	80008ac <__aeabi_ddiv>
 800a192:	f7f6 fd11 	bl	8000bb8 <__aeabi_d2iz>
 800a196:	9001      	str	r0, [sp, #4]
 800a198:	f7f6 f9f4 	bl	8000584 <__aeabi_i2d>
 800a19c:	4642      	mov	r2, r8
 800a19e:	464b      	mov	r3, r9
 800a1a0:	f7f6 fa5a 	bl	8000658 <__aeabi_dmul>
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	4630      	mov	r0, r6
 800a1aa:	4639      	mov	r1, r7
 800a1ac:	f7f6 f89c 	bl	80002e8 <__aeabi_dsub>
 800a1b0:	9e01      	ldr	r6, [sp, #4]
 800a1b2:	9f04      	ldr	r7, [sp, #16]
 800a1b4:	3630      	adds	r6, #48	; 0x30
 800a1b6:	f805 6b01 	strb.w	r6, [r5], #1
 800a1ba:	9e00      	ldr	r6, [sp, #0]
 800a1bc:	1bae      	subs	r6, r5, r6
 800a1be:	42b7      	cmp	r7, r6
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	d134      	bne.n	800a230 <_dtoa_r+0x708>
 800a1c6:	f7f6 f891 	bl	80002ec <__adddf3>
 800a1ca:	4642      	mov	r2, r8
 800a1cc:	464b      	mov	r3, r9
 800a1ce:	4606      	mov	r6, r0
 800a1d0:	460f      	mov	r7, r1
 800a1d2:	f7f6 fcd1 	bl	8000b78 <__aeabi_dcmpgt>
 800a1d6:	b9c8      	cbnz	r0, 800a20c <_dtoa_r+0x6e4>
 800a1d8:	4642      	mov	r2, r8
 800a1da:	464b      	mov	r3, r9
 800a1dc:	4630      	mov	r0, r6
 800a1de:	4639      	mov	r1, r7
 800a1e0:	f7f6 fca2 	bl	8000b28 <__aeabi_dcmpeq>
 800a1e4:	b110      	cbz	r0, 800a1ec <_dtoa_r+0x6c4>
 800a1e6:	9b01      	ldr	r3, [sp, #4]
 800a1e8:	07db      	lsls	r3, r3, #31
 800a1ea:	d40f      	bmi.n	800a20c <_dtoa_r+0x6e4>
 800a1ec:	4651      	mov	r1, sl
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	f000 fb18 	bl	800a824 <_Bfree>
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a1f8:	702b      	strb	r3, [r5, #0]
 800a1fa:	f10b 0301 	add.w	r3, fp, #1
 800a1fe:	6013      	str	r3, [r2, #0]
 800a200:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a202:	2b00      	cmp	r3, #0
 800a204:	f43f ace2 	beq.w	8009bcc <_dtoa_r+0xa4>
 800a208:	601d      	str	r5, [r3, #0]
 800a20a:	e4df      	b.n	8009bcc <_dtoa_r+0xa4>
 800a20c:	465f      	mov	r7, fp
 800a20e:	462b      	mov	r3, r5
 800a210:	461d      	mov	r5, r3
 800a212:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a216:	2a39      	cmp	r2, #57	; 0x39
 800a218:	d106      	bne.n	800a228 <_dtoa_r+0x700>
 800a21a:	9a00      	ldr	r2, [sp, #0]
 800a21c:	429a      	cmp	r2, r3
 800a21e:	d1f7      	bne.n	800a210 <_dtoa_r+0x6e8>
 800a220:	9900      	ldr	r1, [sp, #0]
 800a222:	2230      	movs	r2, #48	; 0x30
 800a224:	3701      	adds	r7, #1
 800a226:	700a      	strb	r2, [r1, #0]
 800a228:	781a      	ldrb	r2, [r3, #0]
 800a22a:	3201      	adds	r2, #1
 800a22c:	701a      	strb	r2, [r3, #0]
 800a22e:	e790      	b.n	800a152 <_dtoa_r+0x62a>
 800a230:	4ba3      	ldr	r3, [pc, #652]	; (800a4c0 <_dtoa_r+0x998>)
 800a232:	2200      	movs	r2, #0
 800a234:	f7f6 fa10 	bl	8000658 <__aeabi_dmul>
 800a238:	2200      	movs	r2, #0
 800a23a:	2300      	movs	r3, #0
 800a23c:	4606      	mov	r6, r0
 800a23e:	460f      	mov	r7, r1
 800a240:	f7f6 fc72 	bl	8000b28 <__aeabi_dcmpeq>
 800a244:	2800      	cmp	r0, #0
 800a246:	d09e      	beq.n	800a186 <_dtoa_r+0x65e>
 800a248:	e7d0      	b.n	800a1ec <_dtoa_r+0x6c4>
 800a24a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a24c:	2a00      	cmp	r2, #0
 800a24e:	f000 80ca 	beq.w	800a3e6 <_dtoa_r+0x8be>
 800a252:	9a07      	ldr	r2, [sp, #28]
 800a254:	2a01      	cmp	r2, #1
 800a256:	f300 80ad 	bgt.w	800a3b4 <_dtoa_r+0x88c>
 800a25a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a25c:	2a00      	cmp	r2, #0
 800a25e:	f000 80a5 	beq.w	800a3ac <_dtoa_r+0x884>
 800a262:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a266:	9e08      	ldr	r6, [sp, #32]
 800a268:	9d05      	ldr	r5, [sp, #20]
 800a26a:	9a05      	ldr	r2, [sp, #20]
 800a26c:	441a      	add	r2, r3
 800a26e:	9205      	str	r2, [sp, #20]
 800a270:	9a06      	ldr	r2, [sp, #24]
 800a272:	2101      	movs	r1, #1
 800a274:	441a      	add	r2, r3
 800a276:	4620      	mov	r0, r4
 800a278:	9206      	str	r2, [sp, #24]
 800a27a:	f000 fb89 	bl	800a990 <__i2b>
 800a27e:	4607      	mov	r7, r0
 800a280:	b165      	cbz	r5, 800a29c <_dtoa_r+0x774>
 800a282:	9b06      	ldr	r3, [sp, #24]
 800a284:	2b00      	cmp	r3, #0
 800a286:	dd09      	ble.n	800a29c <_dtoa_r+0x774>
 800a288:	42ab      	cmp	r3, r5
 800a28a:	9a05      	ldr	r2, [sp, #20]
 800a28c:	bfa8      	it	ge
 800a28e:	462b      	movge	r3, r5
 800a290:	1ad2      	subs	r2, r2, r3
 800a292:	9205      	str	r2, [sp, #20]
 800a294:	9a06      	ldr	r2, [sp, #24]
 800a296:	1aed      	subs	r5, r5, r3
 800a298:	1ad3      	subs	r3, r2, r3
 800a29a:	9306      	str	r3, [sp, #24]
 800a29c:	9b08      	ldr	r3, [sp, #32]
 800a29e:	b1f3      	cbz	r3, 800a2de <_dtoa_r+0x7b6>
 800a2a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	f000 80a3 	beq.w	800a3ee <_dtoa_r+0x8c6>
 800a2a8:	2e00      	cmp	r6, #0
 800a2aa:	dd10      	ble.n	800a2ce <_dtoa_r+0x7a6>
 800a2ac:	4639      	mov	r1, r7
 800a2ae:	4632      	mov	r2, r6
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	f000 fc2d 	bl	800ab10 <__pow5mult>
 800a2b6:	4652      	mov	r2, sl
 800a2b8:	4601      	mov	r1, r0
 800a2ba:	4607      	mov	r7, r0
 800a2bc:	4620      	mov	r0, r4
 800a2be:	f000 fb7d 	bl	800a9bc <__multiply>
 800a2c2:	4651      	mov	r1, sl
 800a2c4:	4680      	mov	r8, r0
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	f000 faac 	bl	800a824 <_Bfree>
 800a2cc:	46c2      	mov	sl, r8
 800a2ce:	9b08      	ldr	r3, [sp, #32]
 800a2d0:	1b9a      	subs	r2, r3, r6
 800a2d2:	d004      	beq.n	800a2de <_dtoa_r+0x7b6>
 800a2d4:	4651      	mov	r1, sl
 800a2d6:	4620      	mov	r0, r4
 800a2d8:	f000 fc1a 	bl	800ab10 <__pow5mult>
 800a2dc:	4682      	mov	sl, r0
 800a2de:	2101      	movs	r1, #1
 800a2e0:	4620      	mov	r0, r4
 800a2e2:	f000 fb55 	bl	800a990 <__i2b>
 800a2e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	4606      	mov	r6, r0
 800a2ec:	f340 8081 	ble.w	800a3f2 <_dtoa_r+0x8ca>
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	4601      	mov	r1, r0
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	f000 fc0b 	bl	800ab10 <__pow5mult>
 800a2fa:	9b07      	ldr	r3, [sp, #28]
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	4606      	mov	r6, r0
 800a300:	dd7a      	ble.n	800a3f8 <_dtoa_r+0x8d0>
 800a302:	f04f 0800 	mov.w	r8, #0
 800a306:	6933      	ldr	r3, [r6, #16]
 800a308:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a30c:	6918      	ldr	r0, [r3, #16]
 800a30e:	f000 faf1 	bl	800a8f4 <__hi0bits>
 800a312:	f1c0 0020 	rsb	r0, r0, #32
 800a316:	9b06      	ldr	r3, [sp, #24]
 800a318:	4418      	add	r0, r3
 800a31a:	f010 001f 	ands.w	r0, r0, #31
 800a31e:	f000 8094 	beq.w	800a44a <_dtoa_r+0x922>
 800a322:	f1c0 0320 	rsb	r3, r0, #32
 800a326:	2b04      	cmp	r3, #4
 800a328:	f340 8085 	ble.w	800a436 <_dtoa_r+0x90e>
 800a32c:	9b05      	ldr	r3, [sp, #20]
 800a32e:	f1c0 001c 	rsb	r0, r0, #28
 800a332:	4403      	add	r3, r0
 800a334:	9305      	str	r3, [sp, #20]
 800a336:	9b06      	ldr	r3, [sp, #24]
 800a338:	4403      	add	r3, r0
 800a33a:	4405      	add	r5, r0
 800a33c:	9306      	str	r3, [sp, #24]
 800a33e:	9b05      	ldr	r3, [sp, #20]
 800a340:	2b00      	cmp	r3, #0
 800a342:	dd05      	ble.n	800a350 <_dtoa_r+0x828>
 800a344:	4651      	mov	r1, sl
 800a346:	461a      	mov	r2, r3
 800a348:	4620      	mov	r0, r4
 800a34a:	f000 fc3b 	bl	800abc4 <__lshift>
 800a34e:	4682      	mov	sl, r0
 800a350:	9b06      	ldr	r3, [sp, #24]
 800a352:	2b00      	cmp	r3, #0
 800a354:	dd05      	ble.n	800a362 <_dtoa_r+0x83a>
 800a356:	4631      	mov	r1, r6
 800a358:	461a      	mov	r2, r3
 800a35a:	4620      	mov	r0, r4
 800a35c:	f000 fc32 	bl	800abc4 <__lshift>
 800a360:	4606      	mov	r6, r0
 800a362:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a364:	2b00      	cmp	r3, #0
 800a366:	d072      	beq.n	800a44e <_dtoa_r+0x926>
 800a368:	4631      	mov	r1, r6
 800a36a:	4650      	mov	r0, sl
 800a36c:	f000 fc96 	bl	800ac9c <__mcmp>
 800a370:	2800      	cmp	r0, #0
 800a372:	da6c      	bge.n	800a44e <_dtoa_r+0x926>
 800a374:	2300      	movs	r3, #0
 800a376:	4651      	mov	r1, sl
 800a378:	220a      	movs	r2, #10
 800a37a:	4620      	mov	r0, r4
 800a37c:	f000 fa74 	bl	800a868 <__multadd>
 800a380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a382:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a386:	4682      	mov	sl, r0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	f000 81b0 	beq.w	800a6ee <_dtoa_r+0xbc6>
 800a38e:	2300      	movs	r3, #0
 800a390:	4639      	mov	r1, r7
 800a392:	220a      	movs	r2, #10
 800a394:	4620      	mov	r0, r4
 800a396:	f000 fa67 	bl	800a868 <__multadd>
 800a39a:	9b01      	ldr	r3, [sp, #4]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	4607      	mov	r7, r0
 800a3a0:	f300 8096 	bgt.w	800a4d0 <_dtoa_r+0x9a8>
 800a3a4:	9b07      	ldr	r3, [sp, #28]
 800a3a6:	2b02      	cmp	r3, #2
 800a3a8:	dc59      	bgt.n	800a45e <_dtoa_r+0x936>
 800a3aa:	e091      	b.n	800a4d0 <_dtoa_r+0x9a8>
 800a3ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a3ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a3b2:	e758      	b.n	800a266 <_dtoa_r+0x73e>
 800a3b4:	9b04      	ldr	r3, [sp, #16]
 800a3b6:	1e5e      	subs	r6, r3, #1
 800a3b8:	9b08      	ldr	r3, [sp, #32]
 800a3ba:	42b3      	cmp	r3, r6
 800a3bc:	bfbf      	itttt	lt
 800a3be:	9b08      	ldrlt	r3, [sp, #32]
 800a3c0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a3c2:	9608      	strlt	r6, [sp, #32]
 800a3c4:	1af3      	sublt	r3, r6, r3
 800a3c6:	bfb4      	ite	lt
 800a3c8:	18d2      	addlt	r2, r2, r3
 800a3ca:	1b9e      	subge	r6, r3, r6
 800a3cc:	9b04      	ldr	r3, [sp, #16]
 800a3ce:	bfbc      	itt	lt
 800a3d0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a3d2:	2600      	movlt	r6, #0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	bfb7      	itett	lt
 800a3d8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a3dc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a3e0:	1a9d      	sublt	r5, r3, r2
 800a3e2:	2300      	movlt	r3, #0
 800a3e4:	e741      	b.n	800a26a <_dtoa_r+0x742>
 800a3e6:	9e08      	ldr	r6, [sp, #32]
 800a3e8:	9d05      	ldr	r5, [sp, #20]
 800a3ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a3ec:	e748      	b.n	800a280 <_dtoa_r+0x758>
 800a3ee:	9a08      	ldr	r2, [sp, #32]
 800a3f0:	e770      	b.n	800a2d4 <_dtoa_r+0x7ac>
 800a3f2:	9b07      	ldr	r3, [sp, #28]
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	dc19      	bgt.n	800a42c <_dtoa_r+0x904>
 800a3f8:	9b02      	ldr	r3, [sp, #8]
 800a3fa:	b9bb      	cbnz	r3, 800a42c <_dtoa_r+0x904>
 800a3fc:	9b03      	ldr	r3, [sp, #12]
 800a3fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a402:	b99b      	cbnz	r3, 800a42c <_dtoa_r+0x904>
 800a404:	9b03      	ldr	r3, [sp, #12]
 800a406:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a40a:	0d1b      	lsrs	r3, r3, #20
 800a40c:	051b      	lsls	r3, r3, #20
 800a40e:	b183      	cbz	r3, 800a432 <_dtoa_r+0x90a>
 800a410:	9b05      	ldr	r3, [sp, #20]
 800a412:	3301      	adds	r3, #1
 800a414:	9305      	str	r3, [sp, #20]
 800a416:	9b06      	ldr	r3, [sp, #24]
 800a418:	3301      	adds	r3, #1
 800a41a:	9306      	str	r3, [sp, #24]
 800a41c:	f04f 0801 	mov.w	r8, #1
 800a420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a422:	2b00      	cmp	r3, #0
 800a424:	f47f af6f 	bne.w	800a306 <_dtoa_r+0x7de>
 800a428:	2001      	movs	r0, #1
 800a42a:	e774      	b.n	800a316 <_dtoa_r+0x7ee>
 800a42c:	f04f 0800 	mov.w	r8, #0
 800a430:	e7f6      	b.n	800a420 <_dtoa_r+0x8f8>
 800a432:	4698      	mov	r8, r3
 800a434:	e7f4      	b.n	800a420 <_dtoa_r+0x8f8>
 800a436:	d082      	beq.n	800a33e <_dtoa_r+0x816>
 800a438:	9a05      	ldr	r2, [sp, #20]
 800a43a:	331c      	adds	r3, #28
 800a43c:	441a      	add	r2, r3
 800a43e:	9205      	str	r2, [sp, #20]
 800a440:	9a06      	ldr	r2, [sp, #24]
 800a442:	441a      	add	r2, r3
 800a444:	441d      	add	r5, r3
 800a446:	9206      	str	r2, [sp, #24]
 800a448:	e779      	b.n	800a33e <_dtoa_r+0x816>
 800a44a:	4603      	mov	r3, r0
 800a44c:	e7f4      	b.n	800a438 <_dtoa_r+0x910>
 800a44e:	9b04      	ldr	r3, [sp, #16]
 800a450:	2b00      	cmp	r3, #0
 800a452:	dc37      	bgt.n	800a4c4 <_dtoa_r+0x99c>
 800a454:	9b07      	ldr	r3, [sp, #28]
 800a456:	2b02      	cmp	r3, #2
 800a458:	dd34      	ble.n	800a4c4 <_dtoa_r+0x99c>
 800a45a:	9b04      	ldr	r3, [sp, #16]
 800a45c:	9301      	str	r3, [sp, #4]
 800a45e:	9b01      	ldr	r3, [sp, #4]
 800a460:	b963      	cbnz	r3, 800a47c <_dtoa_r+0x954>
 800a462:	4631      	mov	r1, r6
 800a464:	2205      	movs	r2, #5
 800a466:	4620      	mov	r0, r4
 800a468:	f000 f9fe 	bl	800a868 <__multadd>
 800a46c:	4601      	mov	r1, r0
 800a46e:	4606      	mov	r6, r0
 800a470:	4650      	mov	r0, sl
 800a472:	f000 fc13 	bl	800ac9c <__mcmp>
 800a476:	2800      	cmp	r0, #0
 800a478:	f73f adbb 	bgt.w	8009ff2 <_dtoa_r+0x4ca>
 800a47c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a47e:	9d00      	ldr	r5, [sp, #0]
 800a480:	ea6f 0b03 	mvn.w	fp, r3
 800a484:	f04f 0800 	mov.w	r8, #0
 800a488:	4631      	mov	r1, r6
 800a48a:	4620      	mov	r0, r4
 800a48c:	f000 f9ca 	bl	800a824 <_Bfree>
 800a490:	2f00      	cmp	r7, #0
 800a492:	f43f aeab 	beq.w	800a1ec <_dtoa_r+0x6c4>
 800a496:	f1b8 0f00 	cmp.w	r8, #0
 800a49a:	d005      	beq.n	800a4a8 <_dtoa_r+0x980>
 800a49c:	45b8      	cmp	r8, r7
 800a49e:	d003      	beq.n	800a4a8 <_dtoa_r+0x980>
 800a4a0:	4641      	mov	r1, r8
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	f000 f9be 	bl	800a824 <_Bfree>
 800a4a8:	4639      	mov	r1, r7
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	f000 f9ba 	bl	800a824 <_Bfree>
 800a4b0:	e69c      	b.n	800a1ec <_dtoa_r+0x6c4>
 800a4b2:	2600      	movs	r6, #0
 800a4b4:	4637      	mov	r7, r6
 800a4b6:	e7e1      	b.n	800a47c <_dtoa_r+0x954>
 800a4b8:	46bb      	mov	fp, r7
 800a4ba:	4637      	mov	r7, r6
 800a4bc:	e599      	b.n	8009ff2 <_dtoa_r+0x4ca>
 800a4be:	bf00      	nop
 800a4c0:	40240000 	.word	0x40240000
 800a4c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	f000 80c8 	beq.w	800a65c <_dtoa_r+0xb34>
 800a4cc:	9b04      	ldr	r3, [sp, #16]
 800a4ce:	9301      	str	r3, [sp, #4]
 800a4d0:	2d00      	cmp	r5, #0
 800a4d2:	dd05      	ble.n	800a4e0 <_dtoa_r+0x9b8>
 800a4d4:	4639      	mov	r1, r7
 800a4d6:	462a      	mov	r2, r5
 800a4d8:	4620      	mov	r0, r4
 800a4da:	f000 fb73 	bl	800abc4 <__lshift>
 800a4de:	4607      	mov	r7, r0
 800a4e0:	f1b8 0f00 	cmp.w	r8, #0
 800a4e4:	d05b      	beq.n	800a59e <_dtoa_r+0xa76>
 800a4e6:	6879      	ldr	r1, [r7, #4]
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	f000 f95b 	bl	800a7a4 <_Balloc>
 800a4ee:	4605      	mov	r5, r0
 800a4f0:	b928      	cbnz	r0, 800a4fe <_dtoa_r+0x9d6>
 800a4f2:	4b83      	ldr	r3, [pc, #524]	; (800a700 <_dtoa_r+0xbd8>)
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a4fa:	f7ff bb2e 	b.w	8009b5a <_dtoa_r+0x32>
 800a4fe:	693a      	ldr	r2, [r7, #16]
 800a500:	3202      	adds	r2, #2
 800a502:	0092      	lsls	r2, r2, #2
 800a504:	f107 010c 	add.w	r1, r7, #12
 800a508:	300c      	adds	r0, #12
 800a50a:	f7ff fa76 	bl	80099fa <memcpy>
 800a50e:	2201      	movs	r2, #1
 800a510:	4629      	mov	r1, r5
 800a512:	4620      	mov	r0, r4
 800a514:	f000 fb56 	bl	800abc4 <__lshift>
 800a518:	9b00      	ldr	r3, [sp, #0]
 800a51a:	3301      	adds	r3, #1
 800a51c:	9304      	str	r3, [sp, #16]
 800a51e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a522:	4413      	add	r3, r2
 800a524:	9308      	str	r3, [sp, #32]
 800a526:	9b02      	ldr	r3, [sp, #8]
 800a528:	f003 0301 	and.w	r3, r3, #1
 800a52c:	46b8      	mov	r8, r7
 800a52e:	9306      	str	r3, [sp, #24]
 800a530:	4607      	mov	r7, r0
 800a532:	9b04      	ldr	r3, [sp, #16]
 800a534:	4631      	mov	r1, r6
 800a536:	3b01      	subs	r3, #1
 800a538:	4650      	mov	r0, sl
 800a53a:	9301      	str	r3, [sp, #4]
 800a53c:	f7ff fa6b 	bl	8009a16 <quorem>
 800a540:	4641      	mov	r1, r8
 800a542:	9002      	str	r0, [sp, #8]
 800a544:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a548:	4650      	mov	r0, sl
 800a54a:	f000 fba7 	bl	800ac9c <__mcmp>
 800a54e:	463a      	mov	r2, r7
 800a550:	9005      	str	r0, [sp, #20]
 800a552:	4631      	mov	r1, r6
 800a554:	4620      	mov	r0, r4
 800a556:	f000 fbbd 	bl	800acd4 <__mdiff>
 800a55a:	68c2      	ldr	r2, [r0, #12]
 800a55c:	4605      	mov	r5, r0
 800a55e:	bb02      	cbnz	r2, 800a5a2 <_dtoa_r+0xa7a>
 800a560:	4601      	mov	r1, r0
 800a562:	4650      	mov	r0, sl
 800a564:	f000 fb9a 	bl	800ac9c <__mcmp>
 800a568:	4602      	mov	r2, r0
 800a56a:	4629      	mov	r1, r5
 800a56c:	4620      	mov	r0, r4
 800a56e:	9209      	str	r2, [sp, #36]	; 0x24
 800a570:	f000 f958 	bl	800a824 <_Bfree>
 800a574:	9b07      	ldr	r3, [sp, #28]
 800a576:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a578:	9d04      	ldr	r5, [sp, #16]
 800a57a:	ea43 0102 	orr.w	r1, r3, r2
 800a57e:	9b06      	ldr	r3, [sp, #24]
 800a580:	4319      	orrs	r1, r3
 800a582:	d110      	bne.n	800a5a6 <_dtoa_r+0xa7e>
 800a584:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a588:	d029      	beq.n	800a5de <_dtoa_r+0xab6>
 800a58a:	9b05      	ldr	r3, [sp, #20]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	dd02      	ble.n	800a596 <_dtoa_r+0xa6e>
 800a590:	9b02      	ldr	r3, [sp, #8]
 800a592:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a596:	9b01      	ldr	r3, [sp, #4]
 800a598:	f883 9000 	strb.w	r9, [r3]
 800a59c:	e774      	b.n	800a488 <_dtoa_r+0x960>
 800a59e:	4638      	mov	r0, r7
 800a5a0:	e7ba      	b.n	800a518 <_dtoa_r+0x9f0>
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	e7e1      	b.n	800a56a <_dtoa_r+0xa42>
 800a5a6:	9b05      	ldr	r3, [sp, #20]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	db04      	blt.n	800a5b6 <_dtoa_r+0xa8e>
 800a5ac:	9907      	ldr	r1, [sp, #28]
 800a5ae:	430b      	orrs	r3, r1
 800a5b0:	9906      	ldr	r1, [sp, #24]
 800a5b2:	430b      	orrs	r3, r1
 800a5b4:	d120      	bne.n	800a5f8 <_dtoa_r+0xad0>
 800a5b6:	2a00      	cmp	r2, #0
 800a5b8:	dded      	ble.n	800a596 <_dtoa_r+0xa6e>
 800a5ba:	4651      	mov	r1, sl
 800a5bc:	2201      	movs	r2, #1
 800a5be:	4620      	mov	r0, r4
 800a5c0:	f000 fb00 	bl	800abc4 <__lshift>
 800a5c4:	4631      	mov	r1, r6
 800a5c6:	4682      	mov	sl, r0
 800a5c8:	f000 fb68 	bl	800ac9c <__mcmp>
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	dc03      	bgt.n	800a5d8 <_dtoa_r+0xab0>
 800a5d0:	d1e1      	bne.n	800a596 <_dtoa_r+0xa6e>
 800a5d2:	f019 0f01 	tst.w	r9, #1
 800a5d6:	d0de      	beq.n	800a596 <_dtoa_r+0xa6e>
 800a5d8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a5dc:	d1d8      	bne.n	800a590 <_dtoa_r+0xa68>
 800a5de:	9a01      	ldr	r2, [sp, #4]
 800a5e0:	2339      	movs	r3, #57	; 0x39
 800a5e2:	7013      	strb	r3, [r2, #0]
 800a5e4:	462b      	mov	r3, r5
 800a5e6:	461d      	mov	r5, r3
 800a5e8:	3b01      	subs	r3, #1
 800a5ea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a5ee:	2a39      	cmp	r2, #57	; 0x39
 800a5f0:	d06c      	beq.n	800a6cc <_dtoa_r+0xba4>
 800a5f2:	3201      	adds	r2, #1
 800a5f4:	701a      	strb	r2, [r3, #0]
 800a5f6:	e747      	b.n	800a488 <_dtoa_r+0x960>
 800a5f8:	2a00      	cmp	r2, #0
 800a5fa:	dd07      	ble.n	800a60c <_dtoa_r+0xae4>
 800a5fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a600:	d0ed      	beq.n	800a5de <_dtoa_r+0xab6>
 800a602:	9a01      	ldr	r2, [sp, #4]
 800a604:	f109 0301 	add.w	r3, r9, #1
 800a608:	7013      	strb	r3, [r2, #0]
 800a60a:	e73d      	b.n	800a488 <_dtoa_r+0x960>
 800a60c:	9b04      	ldr	r3, [sp, #16]
 800a60e:	9a08      	ldr	r2, [sp, #32]
 800a610:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a614:	4293      	cmp	r3, r2
 800a616:	d043      	beq.n	800a6a0 <_dtoa_r+0xb78>
 800a618:	4651      	mov	r1, sl
 800a61a:	2300      	movs	r3, #0
 800a61c:	220a      	movs	r2, #10
 800a61e:	4620      	mov	r0, r4
 800a620:	f000 f922 	bl	800a868 <__multadd>
 800a624:	45b8      	cmp	r8, r7
 800a626:	4682      	mov	sl, r0
 800a628:	f04f 0300 	mov.w	r3, #0
 800a62c:	f04f 020a 	mov.w	r2, #10
 800a630:	4641      	mov	r1, r8
 800a632:	4620      	mov	r0, r4
 800a634:	d107      	bne.n	800a646 <_dtoa_r+0xb1e>
 800a636:	f000 f917 	bl	800a868 <__multadd>
 800a63a:	4680      	mov	r8, r0
 800a63c:	4607      	mov	r7, r0
 800a63e:	9b04      	ldr	r3, [sp, #16]
 800a640:	3301      	adds	r3, #1
 800a642:	9304      	str	r3, [sp, #16]
 800a644:	e775      	b.n	800a532 <_dtoa_r+0xa0a>
 800a646:	f000 f90f 	bl	800a868 <__multadd>
 800a64a:	4639      	mov	r1, r7
 800a64c:	4680      	mov	r8, r0
 800a64e:	2300      	movs	r3, #0
 800a650:	220a      	movs	r2, #10
 800a652:	4620      	mov	r0, r4
 800a654:	f000 f908 	bl	800a868 <__multadd>
 800a658:	4607      	mov	r7, r0
 800a65a:	e7f0      	b.n	800a63e <_dtoa_r+0xb16>
 800a65c:	9b04      	ldr	r3, [sp, #16]
 800a65e:	9301      	str	r3, [sp, #4]
 800a660:	9d00      	ldr	r5, [sp, #0]
 800a662:	4631      	mov	r1, r6
 800a664:	4650      	mov	r0, sl
 800a666:	f7ff f9d6 	bl	8009a16 <quorem>
 800a66a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a66e:	9b00      	ldr	r3, [sp, #0]
 800a670:	f805 9b01 	strb.w	r9, [r5], #1
 800a674:	1aea      	subs	r2, r5, r3
 800a676:	9b01      	ldr	r3, [sp, #4]
 800a678:	4293      	cmp	r3, r2
 800a67a:	dd07      	ble.n	800a68c <_dtoa_r+0xb64>
 800a67c:	4651      	mov	r1, sl
 800a67e:	2300      	movs	r3, #0
 800a680:	220a      	movs	r2, #10
 800a682:	4620      	mov	r0, r4
 800a684:	f000 f8f0 	bl	800a868 <__multadd>
 800a688:	4682      	mov	sl, r0
 800a68a:	e7ea      	b.n	800a662 <_dtoa_r+0xb3a>
 800a68c:	9b01      	ldr	r3, [sp, #4]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	bfc8      	it	gt
 800a692:	461d      	movgt	r5, r3
 800a694:	9b00      	ldr	r3, [sp, #0]
 800a696:	bfd8      	it	le
 800a698:	2501      	movle	r5, #1
 800a69a:	441d      	add	r5, r3
 800a69c:	f04f 0800 	mov.w	r8, #0
 800a6a0:	4651      	mov	r1, sl
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	4620      	mov	r0, r4
 800a6a6:	f000 fa8d 	bl	800abc4 <__lshift>
 800a6aa:	4631      	mov	r1, r6
 800a6ac:	4682      	mov	sl, r0
 800a6ae:	f000 faf5 	bl	800ac9c <__mcmp>
 800a6b2:	2800      	cmp	r0, #0
 800a6b4:	dc96      	bgt.n	800a5e4 <_dtoa_r+0xabc>
 800a6b6:	d102      	bne.n	800a6be <_dtoa_r+0xb96>
 800a6b8:	f019 0f01 	tst.w	r9, #1
 800a6bc:	d192      	bne.n	800a5e4 <_dtoa_r+0xabc>
 800a6be:	462b      	mov	r3, r5
 800a6c0:	461d      	mov	r5, r3
 800a6c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6c6:	2a30      	cmp	r2, #48	; 0x30
 800a6c8:	d0fa      	beq.n	800a6c0 <_dtoa_r+0xb98>
 800a6ca:	e6dd      	b.n	800a488 <_dtoa_r+0x960>
 800a6cc:	9a00      	ldr	r2, [sp, #0]
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d189      	bne.n	800a5e6 <_dtoa_r+0xabe>
 800a6d2:	f10b 0b01 	add.w	fp, fp, #1
 800a6d6:	2331      	movs	r3, #49	; 0x31
 800a6d8:	e796      	b.n	800a608 <_dtoa_r+0xae0>
 800a6da:	4b0a      	ldr	r3, [pc, #40]	; (800a704 <_dtoa_r+0xbdc>)
 800a6dc:	f7ff ba99 	b.w	8009c12 <_dtoa_r+0xea>
 800a6e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	f47f aa6d 	bne.w	8009bc2 <_dtoa_r+0x9a>
 800a6e8:	4b07      	ldr	r3, [pc, #28]	; (800a708 <_dtoa_r+0xbe0>)
 800a6ea:	f7ff ba92 	b.w	8009c12 <_dtoa_r+0xea>
 800a6ee:	9b01      	ldr	r3, [sp, #4]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	dcb5      	bgt.n	800a660 <_dtoa_r+0xb38>
 800a6f4:	9b07      	ldr	r3, [sp, #28]
 800a6f6:	2b02      	cmp	r3, #2
 800a6f8:	f73f aeb1 	bgt.w	800a45e <_dtoa_r+0x936>
 800a6fc:	e7b0      	b.n	800a660 <_dtoa_r+0xb38>
 800a6fe:	bf00      	nop
 800a700:	0800bd3d 	.word	0x0800bd3d
 800a704:	0800bc9d 	.word	0x0800bc9d
 800a708:	0800bcc1 	.word	0x0800bcc1

0800a70c <_free_r>:
 800a70c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a70e:	2900      	cmp	r1, #0
 800a710:	d044      	beq.n	800a79c <_free_r+0x90>
 800a712:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a716:	9001      	str	r0, [sp, #4]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	f1a1 0404 	sub.w	r4, r1, #4
 800a71e:	bfb8      	it	lt
 800a720:	18e4      	addlt	r4, r4, r3
 800a722:	f7fe faff 	bl	8008d24 <__malloc_lock>
 800a726:	4a1e      	ldr	r2, [pc, #120]	; (800a7a0 <_free_r+0x94>)
 800a728:	9801      	ldr	r0, [sp, #4]
 800a72a:	6813      	ldr	r3, [r2, #0]
 800a72c:	b933      	cbnz	r3, 800a73c <_free_r+0x30>
 800a72e:	6063      	str	r3, [r4, #4]
 800a730:	6014      	str	r4, [r2, #0]
 800a732:	b003      	add	sp, #12
 800a734:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a738:	f7fe bafa 	b.w	8008d30 <__malloc_unlock>
 800a73c:	42a3      	cmp	r3, r4
 800a73e:	d908      	bls.n	800a752 <_free_r+0x46>
 800a740:	6825      	ldr	r5, [r4, #0]
 800a742:	1961      	adds	r1, r4, r5
 800a744:	428b      	cmp	r3, r1
 800a746:	bf01      	itttt	eq
 800a748:	6819      	ldreq	r1, [r3, #0]
 800a74a:	685b      	ldreq	r3, [r3, #4]
 800a74c:	1949      	addeq	r1, r1, r5
 800a74e:	6021      	streq	r1, [r4, #0]
 800a750:	e7ed      	b.n	800a72e <_free_r+0x22>
 800a752:	461a      	mov	r2, r3
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	b10b      	cbz	r3, 800a75c <_free_r+0x50>
 800a758:	42a3      	cmp	r3, r4
 800a75a:	d9fa      	bls.n	800a752 <_free_r+0x46>
 800a75c:	6811      	ldr	r1, [r2, #0]
 800a75e:	1855      	adds	r5, r2, r1
 800a760:	42a5      	cmp	r5, r4
 800a762:	d10b      	bne.n	800a77c <_free_r+0x70>
 800a764:	6824      	ldr	r4, [r4, #0]
 800a766:	4421      	add	r1, r4
 800a768:	1854      	adds	r4, r2, r1
 800a76a:	42a3      	cmp	r3, r4
 800a76c:	6011      	str	r1, [r2, #0]
 800a76e:	d1e0      	bne.n	800a732 <_free_r+0x26>
 800a770:	681c      	ldr	r4, [r3, #0]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	6053      	str	r3, [r2, #4]
 800a776:	440c      	add	r4, r1
 800a778:	6014      	str	r4, [r2, #0]
 800a77a:	e7da      	b.n	800a732 <_free_r+0x26>
 800a77c:	d902      	bls.n	800a784 <_free_r+0x78>
 800a77e:	230c      	movs	r3, #12
 800a780:	6003      	str	r3, [r0, #0]
 800a782:	e7d6      	b.n	800a732 <_free_r+0x26>
 800a784:	6825      	ldr	r5, [r4, #0]
 800a786:	1961      	adds	r1, r4, r5
 800a788:	428b      	cmp	r3, r1
 800a78a:	bf04      	itt	eq
 800a78c:	6819      	ldreq	r1, [r3, #0]
 800a78e:	685b      	ldreq	r3, [r3, #4]
 800a790:	6063      	str	r3, [r4, #4]
 800a792:	bf04      	itt	eq
 800a794:	1949      	addeq	r1, r1, r5
 800a796:	6021      	streq	r1, [r4, #0]
 800a798:	6054      	str	r4, [r2, #4]
 800a79a:	e7ca      	b.n	800a732 <_free_r+0x26>
 800a79c:	b003      	add	sp, #12
 800a79e:	bd30      	pop	{r4, r5, pc}
 800a7a0:	20000388 	.word	0x20000388

0800a7a4 <_Balloc>:
 800a7a4:	b570      	push	{r4, r5, r6, lr}
 800a7a6:	69c6      	ldr	r6, [r0, #28]
 800a7a8:	4604      	mov	r4, r0
 800a7aa:	460d      	mov	r5, r1
 800a7ac:	b976      	cbnz	r6, 800a7cc <_Balloc+0x28>
 800a7ae:	2010      	movs	r0, #16
 800a7b0:	f7fe fa08 	bl	8008bc4 <malloc>
 800a7b4:	4602      	mov	r2, r0
 800a7b6:	61e0      	str	r0, [r4, #28]
 800a7b8:	b920      	cbnz	r0, 800a7c4 <_Balloc+0x20>
 800a7ba:	4b18      	ldr	r3, [pc, #96]	; (800a81c <_Balloc+0x78>)
 800a7bc:	4818      	ldr	r0, [pc, #96]	; (800a820 <_Balloc+0x7c>)
 800a7be:	216b      	movs	r1, #107	; 0x6b
 800a7c0:	f000 fd8c 	bl	800b2dc <__assert_func>
 800a7c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7c8:	6006      	str	r6, [r0, #0]
 800a7ca:	60c6      	str	r6, [r0, #12]
 800a7cc:	69e6      	ldr	r6, [r4, #28]
 800a7ce:	68f3      	ldr	r3, [r6, #12]
 800a7d0:	b183      	cbz	r3, 800a7f4 <_Balloc+0x50>
 800a7d2:	69e3      	ldr	r3, [r4, #28]
 800a7d4:	68db      	ldr	r3, [r3, #12]
 800a7d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a7da:	b9b8      	cbnz	r0, 800a80c <_Balloc+0x68>
 800a7dc:	2101      	movs	r1, #1
 800a7de:	fa01 f605 	lsl.w	r6, r1, r5
 800a7e2:	1d72      	adds	r2, r6, #5
 800a7e4:	0092      	lsls	r2, r2, #2
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	f000 fd96 	bl	800b318 <_calloc_r>
 800a7ec:	b160      	cbz	r0, 800a808 <_Balloc+0x64>
 800a7ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a7f2:	e00e      	b.n	800a812 <_Balloc+0x6e>
 800a7f4:	2221      	movs	r2, #33	; 0x21
 800a7f6:	2104      	movs	r1, #4
 800a7f8:	4620      	mov	r0, r4
 800a7fa:	f000 fd8d 	bl	800b318 <_calloc_r>
 800a7fe:	69e3      	ldr	r3, [r4, #28]
 800a800:	60f0      	str	r0, [r6, #12]
 800a802:	68db      	ldr	r3, [r3, #12]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d1e4      	bne.n	800a7d2 <_Balloc+0x2e>
 800a808:	2000      	movs	r0, #0
 800a80a:	bd70      	pop	{r4, r5, r6, pc}
 800a80c:	6802      	ldr	r2, [r0, #0]
 800a80e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a812:	2300      	movs	r3, #0
 800a814:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a818:	e7f7      	b.n	800a80a <_Balloc+0x66>
 800a81a:	bf00      	nop
 800a81c:	0800bcce 	.word	0x0800bcce
 800a820:	0800bd4e 	.word	0x0800bd4e

0800a824 <_Bfree>:
 800a824:	b570      	push	{r4, r5, r6, lr}
 800a826:	69c6      	ldr	r6, [r0, #28]
 800a828:	4605      	mov	r5, r0
 800a82a:	460c      	mov	r4, r1
 800a82c:	b976      	cbnz	r6, 800a84c <_Bfree+0x28>
 800a82e:	2010      	movs	r0, #16
 800a830:	f7fe f9c8 	bl	8008bc4 <malloc>
 800a834:	4602      	mov	r2, r0
 800a836:	61e8      	str	r0, [r5, #28]
 800a838:	b920      	cbnz	r0, 800a844 <_Bfree+0x20>
 800a83a:	4b09      	ldr	r3, [pc, #36]	; (800a860 <_Bfree+0x3c>)
 800a83c:	4809      	ldr	r0, [pc, #36]	; (800a864 <_Bfree+0x40>)
 800a83e:	218f      	movs	r1, #143	; 0x8f
 800a840:	f000 fd4c 	bl	800b2dc <__assert_func>
 800a844:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a848:	6006      	str	r6, [r0, #0]
 800a84a:	60c6      	str	r6, [r0, #12]
 800a84c:	b13c      	cbz	r4, 800a85e <_Bfree+0x3a>
 800a84e:	69eb      	ldr	r3, [r5, #28]
 800a850:	6862      	ldr	r2, [r4, #4]
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a858:	6021      	str	r1, [r4, #0]
 800a85a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a85e:	bd70      	pop	{r4, r5, r6, pc}
 800a860:	0800bcce 	.word	0x0800bcce
 800a864:	0800bd4e 	.word	0x0800bd4e

0800a868 <__multadd>:
 800a868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a86c:	690d      	ldr	r5, [r1, #16]
 800a86e:	4607      	mov	r7, r0
 800a870:	460c      	mov	r4, r1
 800a872:	461e      	mov	r6, r3
 800a874:	f101 0c14 	add.w	ip, r1, #20
 800a878:	2000      	movs	r0, #0
 800a87a:	f8dc 3000 	ldr.w	r3, [ip]
 800a87e:	b299      	uxth	r1, r3
 800a880:	fb02 6101 	mla	r1, r2, r1, r6
 800a884:	0c1e      	lsrs	r6, r3, #16
 800a886:	0c0b      	lsrs	r3, r1, #16
 800a888:	fb02 3306 	mla	r3, r2, r6, r3
 800a88c:	b289      	uxth	r1, r1
 800a88e:	3001      	adds	r0, #1
 800a890:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a894:	4285      	cmp	r5, r0
 800a896:	f84c 1b04 	str.w	r1, [ip], #4
 800a89a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a89e:	dcec      	bgt.n	800a87a <__multadd+0x12>
 800a8a0:	b30e      	cbz	r6, 800a8e6 <__multadd+0x7e>
 800a8a2:	68a3      	ldr	r3, [r4, #8]
 800a8a4:	42ab      	cmp	r3, r5
 800a8a6:	dc19      	bgt.n	800a8dc <__multadd+0x74>
 800a8a8:	6861      	ldr	r1, [r4, #4]
 800a8aa:	4638      	mov	r0, r7
 800a8ac:	3101      	adds	r1, #1
 800a8ae:	f7ff ff79 	bl	800a7a4 <_Balloc>
 800a8b2:	4680      	mov	r8, r0
 800a8b4:	b928      	cbnz	r0, 800a8c2 <__multadd+0x5a>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	4b0c      	ldr	r3, [pc, #48]	; (800a8ec <__multadd+0x84>)
 800a8ba:	480d      	ldr	r0, [pc, #52]	; (800a8f0 <__multadd+0x88>)
 800a8bc:	21ba      	movs	r1, #186	; 0xba
 800a8be:	f000 fd0d 	bl	800b2dc <__assert_func>
 800a8c2:	6922      	ldr	r2, [r4, #16]
 800a8c4:	3202      	adds	r2, #2
 800a8c6:	f104 010c 	add.w	r1, r4, #12
 800a8ca:	0092      	lsls	r2, r2, #2
 800a8cc:	300c      	adds	r0, #12
 800a8ce:	f7ff f894 	bl	80099fa <memcpy>
 800a8d2:	4621      	mov	r1, r4
 800a8d4:	4638      	mov	r0, r7
 800a8d6:	f7ff ffa5 	bl	800a824 <_Bfree>
 800a8da:	4644      	mov	r4, r8
 800a8dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a8e0:	3501      	adds	r5, #1
 800a8e2:	615e      	str	r6, [r3, #20]
 800a8e4:	6125      	str	r5, [r4, #16]
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8ec:	0800bd3d 	.word	0x0800bd3d
 800a8f0:	0800bd4e 	.word	0x0800bd4e

0800a8f4 <__hi0bits>:
 800a8f4:	0c03      	lsrs	r3, r0, #16
 800a8f6:	041b      	lsls	r3, r3, #16
 800a8f8:	b9d3      	cbnz	r3, 800a930 <__hi0bits+0x3c>
 800a8fa:	0400      	lsls	r0, r0, #16
 800a8fc:	2310      	movs	r3, #16
 800a8fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a902:	bf04      	itt	eq
 800a904:	0200      	lsleq	r0, r0, #8
 800a906:	3308      	addeq	r3, #8
 800a908:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a90c:	bf04      	itt	eq
 800a90e:	0100      	lsleq	r0, r0, #4
 800a910:	3304      	addeq	r3, #4
 800a912:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a916:	bf04      	itt	eq
 800a918:	0080      	lsleq	r0, r0, #2
 800a91a:	3302      	addeq	r3, #2
 800a91c:	2800      	cmp	r0, #0
 800a91e:	db05      	blt.n	800a92c <__hi0bits+0x38>
 800a920:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a924:	f103 0301 	add.w	r3, r3, #1
 800a928:	bf08      	it	eq
 800a92a:	2320      	moveq	r3, #32
 800a92c:	4618      	mov	r0, r3
 800a92e:	4770      	bx	lr
 800a930:	2300      	movs	r3, #0
 800a932:	e7e4      	b.n	800a8fe <__hi0bits+0xa>

0800a934 <__lo0bits>:
 800a934:	6803      	ldr	r3, [r0, #0]
 800a936:	f013 0207 	ands.w	r2, r3, #7
 800a93a:	d00c      	beq.n	800a956 <__lo0bits+0x22>
 800a93c:	07d9      	lsls	r1, r3, #31
 800a93e:	d422      	bmi.n	800a986 <__lo0bits+0x52>
 800a940:	079a      	lsls	r2, r3, #30
 800a942:	bf49      	itett	mi
 800a944:	085b      	lsrmi	r3, r3, #1
 800a946:	089b      	lsrpl	r3, r3, #2
 800a948:	6003      	strmi	r3, [r0, #0]
 800a94a:	2201      	movmi	r2, #1
 800a94c:	bf5c      	itt	pl
 800a94e:	6003      	strpl	r3, [r0, #0]
 800a950:	2202      	movpl	r2, #2
 800a952:	4610      	mov	r0, r2
 800a954:	4770      	bx	lr
 800a956:	b299      	uxth	r1, r3
 800a958:	b909      	cbnz	r1, 800a95e <__lo0bits+0x2a>
 800a95a:	0c1b      	lsrs	r3, r3, #16
 800a95c:	2210      	movs	r2, #16
 800a95e:	b2d9      	uxtb	r1, r3
 800a960:	b909      	cbnz	r1, 800a966 <__lo0bits+0x32>
 800a962:	3208      	adds	r2, #8
 800a964:	0a1b      	lsrs	r3, r3, #8
 800a966:	0719      	lsls	r1, r3, #28
 800a968:	bf04      	itt	eq
 800a96a:	091b      	lsreq	r3, r3, #4
 800a96c:	3204      	addeq	r2, #4
 800a96e:	0799      	lsls	r1, r3, #30
 800a970:	bf04      	itt	eq
 800a972:	089b      	lsreq	r3, r3, #2
 800a974:	3202      	addeq	r2, #2
 800a976:	07d9      	lsls	r1, r3, #31
 800a978:	d403      	bmi.n	800a982 <__lo0bits+0x4e>
 800a97a:	085b      	lsrs	r3, r3, #1
 800a97c:	f102 0201 	add.w	r2, r2, #1
 800a980:	d003      	beq.n	800a98a <__lo0bits+0x56>
 800a982:	6003      	str	r3, [r0, #0]
 800a984:	e7e5      	b.n	800a952 <__lo0bits+0x1e>
 800a986:	2200      	movs	r2, #0
 800a988:	e7e3      	b.n	800a952 <__lo0bits+0x1e>
 800a98a:	2220      	movs	r2, #32
 800a98c:	e7e1      	b.n	800a952 <__lo0bits+0x1e>
	...

0800a990 <__i2b>:
 800a990:	b510      	push	{r4, lr}
 800a992:	460c      	mov	r4, r1
 800a994:	2101      	movs	r1, #1
 800a996:	f7ff ff05 	bl	800a7a4 <_Balloc>
 800a99a:	4602      	mov	r2, r0
 800a99c:	b928      	cbnz	r0, 800a9aa <__i2b+0x1a>
 800a99e:	4b05      	ldr	r3, [pc, #20]	; (800a9b4 <__i2b+0x24>)
 800a9a0:	4805      	ldr	r0, [pc, #20]	; (800a9b8 <__i2b+0x28>)
 800a9a2:	f240 1145 	movw	r1, #325	; 0x145
 800a9a6:	f000 fc99 	bl	800b2dc <__assert_func>
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	6144      	str	r4, [r0, #20]
 800a9ae:	6103      	str	r3, [r0, #16]
 800a9b0:	bd10      	pop	{r4, pc}
 800a9b2:	bf00      	nop
 800a9b4:	0800bd3d 	.word	0x0800bd3d
 800a9b8:	0800bd4e 	.word	0x0800bd4e

0800a9bc <__multiply>:
 800a9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9c0:	4691      	mov	r9, r2
 800a9c2:	690a      	ldr	r2, [r1, #16]
 800a9c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	bfb8      	it	lt
 800a9cc:	460b      	movlt	r3, r1
 800a9ce:	460c      	mov	r4, r1
 800a9d0:	bfbc      	itt	lt
 800a9d2:	464c      	movlt	r4, r9
 800a9d4:	4699      	movlt	r9, r3
 800a9d6:	6927      	ldr	r7, [r4, #16]
 800a9d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a9dc:	68a3      	ldr	r3, [r4, #8]
 800a9de:	6861      	ldr	r1, [r4, #4]
 800a9e0:	eb07 060a 	add.w	r6, r7, sl
 800a9e4:	42b3      	cmp	r3, r6
 800a9e6:	b085      	sub	sp, #20
 800a9e8:	bfb8      	it	lt
 800a9ea:	3101      	addlt	r1, #1
 800a9ec:	f7ff feda 	bl	800a7a4 <_Balloc>
 800a9f0:	b930      	cbnz	r0, 800aa00 <__multiply+0x44>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	4b44      	ldr	r3, [pc, #272]	; (800ab08 <__multiply+0x14c>)
 800a9f6:	4845      	ldr	r0, [pc, #276]	; (800ab0c <__multiply+0x150>)
 800a9f8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a9fc:	f000 fc6e 	bl	800b2dc <__assert_func>
 800aa00:	f100 0514 	add.w	r5, r0, #20
 800aa04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aa08:	462b      	mov	r3, r5
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	4543      	cmp	r3, r8
 800aa0e:	d321      	bcc.n	800aa54 <__multiply+0x98>
 800aa10:	f104 0314 	add.w	r3, r4, #20
 800aa14:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aa18:	f109 0314 	add.w	r3, r9, #20
 800aa1c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aa20:	9202      	str	r2, [sp, #8]
 800aa22:	1b3a      	subs	r2, r7, r4
 800aa24:	3a15      	subs	r2, #21
 800aa26:	f022 0203 	bic.w	r2, r2, #3
 800aa2a:	3204      	adds	r2, #4
 800aa2c:	f104 0115 	add.w	r1, r4, #21
 800aa30:	428f      	cmp	r7, r1
 800aa32:	bf38      	it	cc
 800aa34:	2204      	movcc	r2, #4
 800aa36:	9201      	str	r2, [sp, #4]
 800aa38:	9a02      	ldr	r2, [sp, #8]
 800aa3a:	9303      	str	r3, [sp, #12]
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	d80c      	bhi.n	800aa5a <__multiply+0x9e>
 800aa40:	2e00      	cmp	r6, #0
 800aa42:	dd03      	ble.n	800aa4c <__multiply+0x90>
 800aa44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d05b      	beq.n	800ab04 <__multiply+0x148>
 800aa4c:	6106      	str	r6, [r0, #16]
 800aa4e:	b005      	add	sp, #20
 800aa50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa54:	f843 2b04 	str.w	r2, [r3], #4
 800aa58:	e7d8      	b.n	800aa0c <__multiply+0x50>
 800aa5a:	f8b3 a000 	ldrh.w	sl, [r3]
 800aa5e:	f1ba 0f00 	cmp.w	sl, #0
 800aa62:	d024      	beq.n	800aaae <__multiply+0xf2>
 800aa64:	f104 0e14 	add.w	lr, r4, #20
 800aa68:	46a9      	mov	r9, r5
 800aa6a:	f04f 0c00 	mov.w	ip, #0
 800aa6e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aa72:	f8d9 1000 	ldr.w	r1, [r9]
 800aa76:	fa1f fb82 	uxth.w	fp, r2
 800aa7a:	b289      	uxth	r1, r1
 800aa7c:	fb0a 110b 	mla	r1, sl, fp, r1
 800aa80:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800aa84:	f8d9 2000 	ldr.w	r2, [r9]
 800aa88:	4461      	add	r1, ip
 800aa8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aa8e:	fb0a c20b 	mla	r2, sl, fp, ip
 800aa92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aa96:	b289      	uxth	r1, r1
 800aa98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aa9c:	4577      	cmp	r7, lr
 800aa9e:	f849 1b04 	str.w	r1, [r9], #4
 800aaa2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aaa6:	d8e2      	bhi.n	800aa6e <__multiply+0xb2>
 800aaa8:	9a01      	ldr	r2, [sp, #4]
 800aaaa:	f845 c002 	str.w	ip, [r5, r2]
 800aaae:	9a03      	ldr	r2, [sp, #12]
 800aab0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aab4:	3304      	adds	r3, #4
 800aab6:	f1b9 0f00 	cmp.w	r9, #0
 800aaba:	d021      	beq.n	800ab00 <__multiply+0x144>
 800aabc:	6829      	ldr	r1, [r5, #0]
 800aabe:	f104 0c14 	add.w	ip, r4, #20
 800aac2:	46ae      	mov	lr, r5
 800aac4:	f04f 0a00 	mov.w	sl, #0
 800aac8:	f8bc b000 	ldrh.w	fp, [ip]
 800aacc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aad0:	fb09 220b 	mla	r2, r9, fp, r2
 800aad4:	4452      	add	r2, sl
 800aad6:	b289      	uxth	r1, r1
 800aad8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aadc:	f84e 1b04 	str.w	r1, [lr], #4
 800aae0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800aae4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aae8:	f8be 1000 	ldrh.w	r1, [lr]
 800aaec:	fb09 110a 	mla	r1, r9, sl, r1
 800aaf0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800aaf4:	4567      	cmp	r7, ip
 800aaf6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aafa:	d8e5      	bhi.n	800aac8 <__multiply+0x10c>
 800aafc:	9a01      	ldr	r2, [sp, #4]
 800aafe:	50a9      	str	r1, [r5, r2]
 800ab00:	3504      	adds	r5, #4
 800ab02:	e799      	b.n	800aa38 <__multiply+0x7c>
 800ab04:	3e01      	subs	r6, #1
 800ab06:	e79b      	b.n	800aa40 <__multiply+0x84>
 800ab08:	0800bd3d 	.word	0x0800bd3d
 800ab0c:	0800bd4e 	.word	0x0800bd4e

0800ab10 <__pow5mult>:
 800ab10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab14:	4615      	mov	r5, r2
 800ab16:	f012 0203 	ands.w	r2, r2, #3
 800ab1a:	4606      	mov	r6, r0
 800ab1c:	460f      	mov	r7, r1
 800ab1e:	d007      	beq.n	800ab30 <__pow5mult+0x20>
 800ab20:	4c25      	ldr	r4, [pc, #148]	; (800abb8 <__pow5mult+0xa8>)
 800ab22:	3a01      	subs	r2, #1
 800ab24:	2300      	movs	r3, #0
 800ab26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab2a:	f7ff fe9d 	bl	800a868 <__multadd>
 800ab2e:	4607      	mov	r7, r0
 800ab30:	10ad      	asrs	r5, r5, #2
 800ab32:	d03d      	beq.n	800abb0 <__pow5mult+0xa0>
 800ab34:	69f4      	ldr	r4, [r6, #28]
 800ab36:	b97c      	cbnz	r4, 800ab58 <__pow5mult+0x48>
 800ab38:	2010      	movs	r0, #16
 800ab3a:	f7fe f843 	bl	8008bc4 <malloc>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	61f0      	str	r0, [r6, #28]
 800ab42:	b928      	cbnz	r0, 800ab50 <__pow5mult+0x40>
 800ab44:	4b1d      	ldr	r3, [pc, #116]	; (800abbc <__pow5mult+0xac>)
 800ab46:	481e      	ldr	r0, [pc, #120]	; (800abc0 <__pow5mult+0xb0>)
 800ab48:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ab4c:	f000 fbc6 	bl	800b2dc <__assert_func>
 800ab50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab54:	6004      	str	r4, [r0, #0]
 800ab56:	60c4      	str	r4, [r0, #12]
 800ab58:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ab5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab60:	b94c      	cbnz	r4, 800ab76 <__pow5mult+0x66>
 800ab62:	f240 2171 	movw	r1, #625	; 0x271
 800ab66:	4630      	mov	r0, r6
 800ab68:	f7ff ff12 	bl	800a990 <__i2b>
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab72:	4604      	mov	r4, r0
 800ab74:	6003      	str	r3, [r0, #0]
 800ab76:	f04f 0900 	mov.w	r9, #0
 800ab7a:	07eb      	lsls	r3, r5, #31
 800ab7c:	d50a      	bpl.n	800ab94 <__pow5mult+0x84>
 800ab7e:	4639      	mov	r1, r7
 800ab80:	4622      	mov	r2, r4
 800ab82:	4630      	mov	r0, r6
 800ab84:	f7ff ff1a 	bl	800a9bc <__multiply>
 800ab88:	4639      	mov	r1, r7
 800ab8a:	4680      	mov	r8, r0
 800ab8c:	4630      	mov	r0, r6
 800ab8e:	f7ff fe49 	bl	800a824 <_Bfree>
 800ab92:	4647      	mov	r7, r8
 800ab94:	106d      	asrs	r5, r5, #1
 800ab96:	d00b      	beq.n	800abb0 <__pow5mult+0xa0>
 800ab98:	6820      	ldr	r0, [r4, #0]
 800ab9a:	b938      	cbnz	r0, 800abac <__pow5mult+0x9c>
 800ab9c:	4622      	mov	r2, r4
 800ab9e:	4621      	mov	r1, r4
 800aba0:	4630      	mov	r0, r6
 800aba2:	f7ff ff0b 	bl	800a9bc <__multiply>
 800aba6:	6020      	str	r0, [r4, #0]
 800aba8:	f8c0 9000 	str.w	r9, [r0]
 800abac:	4604      	mov	r4, r0
 800abae:	e7e4      	b.n	800ab7a <__pow5mult+0x6a>
 800abb0:	4638      	mov	r0, r7
 800abb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abb6:	bf00      	nop
 800abb8:	0800be98 	.word	0x0800be98
 800abbc:	0800bcce 	.word	0x0800bcce
 800abc0:	0800bd4e 	.word	0x0800bd4e

0800abc4 <__lshift>:
 800abc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abc8:	460c      	mov	r4, r1
 800abca:	6849      	ldr	r1, [r1, #4]
 800abcc:	6923      	ldr	r3, [r4, #16]
 800abce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800abd2:	68a3      	ldr	r3, [r4, #8]
 800abd4:	4607      	mov	r7, r0
 800abd6:	4691      	mov	r9, r2
 800abd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800abdc:	f108 0601 	add.w	r6, r8, #1
 800abe0:	42b3      	cmp	r3, r6
 800abe2:	db0b      	blt.n	800abfc <__lshift+0x38>
 800abe4:	4638      	mov	r0, r7
 800abe6:	f7ff fddd 	bl	800a7a4 <_Balloc>
 800abea:	4605      	mov	r5, r0
 800abec:	b948      	cbnz	r0, 800ac02 <__lshift+0x3e>
 800abee:	4602      	mov	r2, r0
 800abf0:	4b28      	ldr	r3, [pc, #160]	; (800ac94 <__lshift+0xd0>)
 800abf2:	4829      	ldr	r0, [pc, #164]	; (800ac98 <__lshift+0xd4>)
 800abf4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800abf8:	f000 fb70 	bl	800b2dc <__assert_func>
 800abfc:	3101      	adds	r1, #1
 800abfe:	005b      	lsls	r3, r3, #1
 800ac00:	e7ee      	b.n	800abe0 <__lshift+0x1c>
 800ac02:	2300      	movs	r3, #0
 800ac04:	f100 0114 	add.w	r1, r0, #20
 800ac08:	f100 0210 	add.w	r2, r0, #16
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	4553      	cmp	r3, sl
 800ac10:	db33      	blt.n	800ac7a <__lshift+0xb6>
 800ac12:	6920      	ldr	r0, [r4, #16]
 800ac14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac18:	f104 0314 	add.w	r3, r4, #20
 800ac1c:	f019 091f 	ands.w	r9, r9, #31
 800ac20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ac28:	d02b      	beq.n	800ac82 <__lshift+0xbe>
 800ac2a:	f1c9 0e20 	rsb	lr, r9, #32
 800ac2e:	468a      	mov	sl, r1
 800ac30:	2200      	movs	r2, #0
 800ac32:	6818      	ldr	r0, [r3, #0]
 800ac34:	fa00 f009 	lsl.w	r0, r0, r9
 800ac38:	4310      	orrs	r0, r2
 800ac3a:	f84a 0b04 	str.w	r0, [sl], #4
 800ac3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac42:	459c      	cmp	ip, r3
 800ac44:	fa22 f20e 	lsr.w	r2, r2, lr
 800ac48:	d8f3      	bhi.n	800ac32 <__lshift+0x6e>
 800ac4a:	ebac 0304 	sub.w	r3, ip, r4
 800ac4e:	3b15      	subs	r3, #21
 800ac50:	f023 0303 	bic.w	r3, r3, #3
 800ac54:	3304      	adds	r3, #4
 800ac56:	f104 0015 	add.w	r0, r4, #21
 800ac5a:	4584      	cmp	ip, r0
 800ac5c:	bf38      	it	cc
 800ac5e:	2304      	movcc	r3, #4
 800ac60:	50ca      	str	r2, [r1, r3]
 800ac62:	b10a      	cbz	r2, 800ac68 <__lshift+0xa4>
 800ac64:	f108 0602 	add.w	r6, r8, #2
 800ac68:	3e01      	subs	r6, #1
 800ac6a:	4638      	mov	r0, r7
 800ac6c:	612e      	str	r6, [r5, #16]
 800ac6e:	4621      	mov	r1, r4
 800ac70:	f7ff fdd8 	bl	800a824 <_Bfree>
 800ac74:	4628      	mov	r0, r5
 800ac76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac7a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac7e:	3301      	adds	r3, #1
 800ac80:	e7c5      	b.n	800ac0e <__lshift+0x4a>
 800ac82:	3904      	subs	r1, #4
 800ac84:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac88:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac8c:	459c      	cmp	ip, r3
 800ac8e:	d8f9      	bhi.n	800ac84 <__lshift+0xc0>
 800ac90:	e7ea      	b.n	800ac68 <__lshift+0xa4>
 800ac92:	bf00      	nop
 800ac94:	0800bd3d 	.word	0x0800bd3d
 800ac98:	0800bd4e 	.word	0x0800bd4e

0800ac9c <__mcmp>:
 800ac9c:	b530      	push	{r4, r5, lr}
 800ac9e:	6902      	ldr	r2, [r0, #16]
 800aca0:	690c      	ldr	r4, [r1, #16]
 800aca2:	1b12      	subs	r2, r2, r4
 800aca4:	d10e      	bne.n	800acc4 <__mcmp+0x28>
 800aca6:	f100 0314 	add.w	r3, r0, #20
 800acaa:	3114      	adds	r1, #20
 800acac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800acb0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800acb4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800acb8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800acbc:	42a5      	cmp	r5, r4
 800acbe:	d003      	beq.n	800acc8 <__mcmp+0x2c>
 800acc0:	d305      	bcc.n	800acce <__mcmp+0x32>
 800acc2:	2201      	movs	r2, #1
 800acc4:	4610      	mov	r0, r2
 800acc6:	bd30      	pop	{r4, r5, pc}
 800acc8:	4283      	cmp	r3, r0
 800acca:	d3f3      	bcc.n	800acb4 <__mcmp+0x18>
 800accc:	e7fa      	b.n	800acc4 <__mcmp+0x28>
 800acce:	f04f 32ff 	mov.w	r2, #4294967295
 800acd2:	e7f7      	b.n	800acc4 <__mcmp+0x28>

0800acd4 <__mdiff>:
 800acd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acd8:	460c      	mov	r4, r1
 800acda:	4606      	mov	r6, r0
 800acdc:	4611      	mov	r1, r2
 800acde:	4620      	mov	r0, r4
 800ace0:	4690      	mov	r8, r2
 800ace2:	f7ff ffdb 	bl	800ac9c <__mcmp>
 800ace6:	1e05      	subs	r5, r0, #0
 800ace8:	d110      	bne.n	800ad0c <__mdiff+0x38>
 800acea:	4629      	mov	r1, r5
 800acec:	4630      	mov	r0, r6
 800acee:	f7ff fd59 	bl	800a7a4 <_Balloc>
 800acf2:	b930      	cbnz	r0, 800ad02 <__mdiff+0x2e>
 800acf4:	4b3a      	ldr	r3, [pc, #232]	; (800ade0 <__mdiff+0x10c>)
 800acf6:	4602      	mov	r2, r0
 800acf8:	f240 2137 	movw	r1, #567	; 0x237
 800acfc:	4839      	ldr	r0, [pc, #228]	; (800ade4 <__mdiff+0x110>)
 800acfe:	f000 faed 	bl	800b2dc <__assert_func>
 800ad02:	2301      	movs	r3, #1
 800ad04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ad08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad0c:	bfa4      	itt	ge
 800ad0e:	4643      	movge	r3, r8
 800ad10:	46a0      	movge	r8, r4
 800ad12:	4630      	mov	r0, r6
 800ad14:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ad18:	bfa6      	itte	ge
 800ad1a:	461c      	movge	r4, r3
 800ad1c:	2500      	movge	r5, #0
 800ad1e:	2501      	movlt	r5, #1
 800ad20:	f7ff fd40 	bl	800a7a4 <_Balloc>
 800ad24:	b920      	cbnz	r0, 800ad30 <__mdiff+0x5c>
 800ad26:	4b2e      	ldr	r3, [pc, #184]	; (800ade0 <__mdiff+0x10c>)
 800ad28:	4602      	mov	r2, r0
 800ad2a:	f240 2145 	movw	r1, #581	; 0x245
 800ad2e:	e7e5      	b.n	800acfc <__mdiff+0x28>
 800ad30:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ad34:	6926      	ldr	r6, [r4, #16]
 800ad36:	60c5      	str	r5, [r0, #12]
 800ad38:	f104 0914 	add.w	r9, r4, #20
 800ad3c:	f108 0514 	add.w	r5, r8, #20
 800ad40:	f100 0e14 	add.w	lr, r0, #20
 800ad44:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ad48:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ad4c:	f108 0210 	add.w	r2, r8, #16
 800ad50:	46f2      	mov	sl, lr
 800ad52:	2100      	movs	r1, #0
 800ad54:	f859 3b04 	ldr.w	r3, [r9], #4
 800ad58:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ad5c:	fa11 f88b 	uxtah	r8, r1, fp
 800ad60:	b299      	uxth	r1, r3
 800ad62:	0c1b      	lsrs	r3, r3, #16
 800ad64:	eba8 0801 	sub.w	r8, r8, r1
 800ad68:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ad6c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ad70:	fa1f f888 	uxth.w	r8, r8
 800ad74:	1419      	asrs	r1, r3, #16
 800ad76:	454e      	cmp	r6, r9
 800ad78:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ad7c:	f84a 3b04 	str.w	r3, [sl], #4
 800ad80:	d8e8      	bhi.n	800ad54 <__mdiff+0x80>
 800ad82:	1b33      	subs	r3, r6, r4
 800ad84:	3b15      	subs	r3, #21
 800ad86:	f023 0303 	bic.w	r3, r3, #3
 800ad8a:	3304      	adds	r3, #4
 800ad8c:	3415      	adds	r4, #21
 800ad8e:	42a6      	cmp	r6, r4
 800ad90:	bf38      	it	cc
 800ad92:	2304      	movcc	r3, #4
 800ad94:	441d      	add	r5, r3
 800ad96:	4473      	add	r3, lr
 800ad98:	469e      	mov	lr, r3
 800ad9a:	462e      	mov	r6, r5
 800ad9c:	4566      	cmp	r6, ip
 800ad9e:	d30e      	bcc.n	800adbe <__mdiff+0xea>
 800ada0:	f10c 0203 	add.w	r2, ip, #3
 800ada4:	1b52      	subs	r2, r2, r5
 800ada6:	f022 0203 	bic.w	r2, r2, #3
 800adaa:	3d03      	subs	r5, #3
 800adac:	45ac      	cmp	ip, r5
 800adae:	bf38      	it	cc
 800adb0:	2200      	movcc	r2, #0
 800adb2:	4413      	add	r3, r2
 800adb4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800adb8:	b17a      	cbz	r2, 800adda <__mdiff+0x106>
 800adba:	6107      	str	r7, [r0, #16]
 800adbc:	e7a4      	b.n	800ad08 <__mdiff+0x34>
 800adbe:	f856 8b04 	ldr.w	r8, [r6], #4
 800adc2:	fa11 f288 	uxtah	r2, r1, r8
 800adc6:	1414      	asrs	r4, r2, #16
 800adc8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800adcc:	b292      	uxth	r2, r2
 800adce:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800add2:	f84e 2b04 	str.w	r2, [lr], #4
 800add6:	1421      	asrs	r1, r4, #16
 800add8:	e7e0      	b.n	800ad9c <__mdiff+0xc8>
 800adda:	3f01      	subs	r7, #1
 800addc:	e7ea      	b.n	800adb4 <__mdiff+0xe0>
 800adde:	bf00      	nop
 800ade0:	0800bd3d 	.word	0x0800bd3d
 800ade4:	0800bd4e 	.word	0x0800bd4e

0800ade8 <__d2b>:
 800ade8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800adec:	460f      	mov	r7, r1
 800adee:	2101      	movs	r1, #1
 800adf0:	ec59 8b10 	vmov	r8, r9, d0
 800adf4:	4616      	mov	r6, r2
 800adf6:	f7ff fcd5 	bl	800a7a4 <_Balloc>
 800adfa:	4604      	mov	r4, r0
 800adfc:	b930      	cbnz	r0, 800ae0c <__d2b+0x24>
 800adfe:	4602      	mov	r2, r0
 800ae00:	4b24      	ldr	r3, [pc, #144]	; (800ae94 <__d2b+0xac>)
 800ae02:	4825      	ldr	r0, [pc, #148]	; (800ae98 <__d2b+0xb0>)
 800ae04:	f240 310f 	movw	r1, #783	; 0x30f
 800ae08:	f000 fa68 	bl	800b2dc <__assert_func>
 800ae0c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ae10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae14:	bb2d      	cbnz	r5, 800ae62 <__d2b+0x7a>
 800ae16:	9301      	str	r3, [sp, #4]
 800ae18:	f1b8 0300 	subs.w	r3, r8, #0
 800ae1c:	d026      	beq.n	800ae6c <__d2b+0x84>
 800ae1e:	4668      	mov	r0, sp
 800ae20:	9300      	str	r3, [sp, #0]
 800ae22:	f7ff fd87 	bl	800a934 <__lo0bits>
 800ae26:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ae2a:	b1e8      	cbz	r0, 800ae68 <__d2b+0x80>
 800ae2c:	f1c0 0320 	rsb	r3, r0, #32
 800ae30:	fa02 f303 	lsl.w	r3, r2, r3
 800ae34:	430b      	orrs	r3, r1
 800ae36:	40c2      	lsrs	r2, r0
 800ae38:	6163      	str	r3, [r4, #20]
 800ae3a:	9201      	str	r2, [sp, #4]
 800ae3c:	9b01      	ldr	r3, [sp, #4]
 800ae3e:	61a3      	str	r3, [r4, #24]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	bf14      	ite	ne
 800ae44:	2202      	movne	r2, #2
 800ae46:	2201      	moveq	r2, #1
 800ae48:	6122      	str	r2, [r4, #16]
 800ae4a:	b1bd      	cbz	r5, 800ae7c <__d2b+0x94>
 800ae4c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ae50:	4405      	add	r5, r0
 800ae52:	603d      	str	r5, [r7, #0]
 800ae54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ae58:	6030      	str	r0, [r6, #0]
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	b003      	add	sp, #12
 800ae5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae66:	e7d6      	b.n	800ae16 <__d2b+0x2e>
 800ae68:	6161      	str	r1, [r4, #20]
 800ae6a:	e7e7      	b.n	800ae3c <__d2b+0x54>
 800ae6c:	a801      	add	r0, sp, #4
 800ae6e:	f7ff fd61 	bl	800a934 <__lo0bits>
 800ae72:	9b01      	ldr	r3, [sp, #4]
 800ae74:	6163      	str	r3, [r4, #20]
 800ae76:	3020      	adds	r0, #32
 800ae78:	2201      	movs	r2, #1
 800ae7a:	e7e5      	b.n	800ae48 <__d2b+0x60>
 800ae7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ae80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ae84:	6038      	str	r0, [r7, #0]
 800ae86:	6918      	ldr	r0, [r3, #16]
 800ae88:	f7ff fd34 	bl	800a8f4 <__hi0bits>
 800ae8c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ae90:	e7e2      	b.n	800ae58 <__d2b+0x70>
 800ae92:	bf00      	nop
 800ae94:	0800bd3d 	.word	0x0800bd3d
 800ae98:	0800bd4e 	.word	0x0800bd4e

0800ae9c <__ssputs_r>:
 800ae9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aea0:	688e      	ldr	r6, [r1, #8]
 800aea2:	461f      	mov	r7, r3
 800aea4:	42be      	cmp	r6, r7
 800aea6:	680b      	ldr	r3, [r1, #0]
 800aea8:	4682      	mov	sl, r0
 800aeaa:	460c      	mov	r4, r1
 800aeac:	4690      	mov	r8, r2
 800aeae:	d82c      	bhi.n	800af0a <__ssputs_r+0x6e>
 800aeb0:	898a      	ldrh	r2, [r1, #12]
 800aeb2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aeb6:	d026      	beq.n	800af06 <__ssputs_r+0x6a>
 800aeb8:	6965      	ldr	r5, [r4, #20]
 800aeba:	6909      	ldr	r1, [r1, #16]
 800aebc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aec0:	eba3 0901 	sub.w	r9, r3, r1
 800aec4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aec8:	1c7b      	adds	r3, r7, #1
 800aeca:	444b      	add	r3, r9
 800aecc:	106d      	asrs	r5, r5, #1
 800aece:	429d      	cmp	r5, r3
 800aed0:	bf38      	it	cc
 800aed2:	461d      	movcc	r5, r3
 800aed4:	0553      	lsls	r3, r2, #21
 800aed6:	d527      	bpl.n	800af28 <__ssputs_r+0x8c>
 800aed8:	4629      	mov	r1, r5
 800aeda:	f7fd fea3 	bl	8008c24 <_malloc_r>
 800aede:	4606      	mov	r6, r0
 800aee0:	b360      	cbz	r0, 800af3c <__ssputs_r+0xa0>
 800aee2:	6921      	ldr	r1, [r4, #16]
 800aee4:	464a      	mov	r2, r9
 800aee6:	f7fe fd88 	bl	80099fa <memcpy>
 800aeea:	89a3      	ldrh	r3, [r4, #12]
 800aeec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aef4:	81a3      	strh	r3, [r4, #12]
 800aef6:	6126      	str	r6, [r4, #16]
 800aef8:	6165      	str	r5, [r4, #20]
 800aefa:	444e      	add	r6, r9
 800aefc:	eba5 0509 	sub.w	r5, r5, r9
 800af00:	6026      	str	r6, [r4, #0]
 800af02:	60a5      	str	r5, [r4, #8]
 800af04:	463e      	mov	r6, r7
 800af06:	42be      	cmp	r6, r7
 800af08:	d900      	bls.n	800af0c <__ssputs_r+0x70>
 800af0a:	463e      	mov	r6, r7
 800af0c:	6820      	ldr	r0, [r4, #0]
 800af0e:	4632      	mov	r2, r6
 800af10:	4641      	mov	r1, r8
 800af12:	f000 f9c9 	bl	800b2a8 <memmove>
 800af16:	68a3      	ldr	r3, [r4, #8]
 800af18:	1b9b      	subs	r3, r3, r6
 800af1a:	60a3      	str	r3, [r4, #8]
 800af1c:	6823      	ldr	r3, [r4, #0]
 800af1e:	4433      	add	r3, r6
 800af20:	6023      	str	r3, [r4, #0]
 800af22:	2000      	movs	r0, #0
 800af24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af28:	462a      	mov	r2, r5
 800af2a:	f000 fa1d 	bl	800b368 <_realloc_r>
 800af2e:	4606      	mov	r6, r0
 800af30:	2800      	cmp	r0, #0
 800af32:	d1e0      	bne.n	800aef6 <__ssputs_r+0x5a>
 800af34:	6921      	ldr	r1, [r4, #16]
 800af36:	4650      	mov	r0, sl
 800af38:	f7ff fbe8 	bl	800a70c <_free_r>
 800af3c:	230c      	movs	r3, #12
 800af3e:	f8ca 3000 	str.w	r3, [sl]
 800af42:	89a3      	ldrh	r3, [r4, #12]
 800af44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af48:	81a3      	strh	r3, [r4, #12]
 800af4a:	f04f 30ff 	mov.w	r0, #4294967295
 800af4e:	e7e9      	b.n	800af24 <__ssputs_r+0x88>

0800af50 <_svfiprintf_r>:
 800af50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af54:	4698      	mov	r8, r3
 800af56:	898b      	ldrh	r3, [r1, #12]
 800af58:	061b      	lsls	r3, r3, #24
 800af5a:	b09d      	sub	sp, #116	; 0x74
 800af5c:	4607      	mov	r7, r0
 800af5e:	460d      	mov	r5, r1
 800af60:	4614      	mov	r4, r2
 800af62:	d50e      	bpl.n	800af82 <_svfiprintf_r+0x32>
 800af64:	690b      	ldr	r3, [r1, #16]
 800af66:	b963      	cbnz	r3, 800af82 <_svfiprintf_r+0x32>
 800af68:	2140      	movs	r1, #64	; 0x40
 800af6a:	f7fd fe5b 	bl	8008c24 <_malloc_r>
 800af6e:	6028      	str	r0, [r5, #0]
 800af70:	6128      	str	r0, [r5, #16]
 800af72:	b920      	cbnz	r0, 800af7e <_svfiprintf_r+0x2e>
 800af74:	230c      	movs	r3, #12
 800af76:	603b      	str	r3, [r7, #0]
 800af78:	f04f 30ff 	mov.w	r0, #4294967295
 800af7c:	e0d0      	b.n	800b120 <_svfiprintf_r+0x1d0>
 800af7e:	2340      	movs	r3, #64	; 0x40
 800af80:	616b      	str	r3, [r5, #20]
 800af82:	2300      	movs	r3, #0
 800af84:	9309      	str	r3, [sp, #36]	; 0x24
 800af86:	2320      	movs	r3, #32
 800af88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af8c:	f8cd 800c 	str.w	r8, [sp, #12]
 800af90:	2330      	movs	r3, #48	; 0x30
 800af92:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b138 <_svfiprintf_r+0x1e8>
 800af96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af9a:	f04f 0901 	mov.w	r9, #1
 800af9e:	4623      	mov	r3, r4
 800afa0:	469a      	mov	sl, r3
 800afa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afa6:	b10a      	cbz	r2, 800afac <_svfiprintf_r+0x5c>
 800afa8:	2a25      	cmp	r2, #37	; 0x25
 800afaa:	d1f9      	bne.n	800afa0 <_svfiprintf_r+0x50>
 800afac:	ebba 0b04 	subs.w	fp, sl, r4
 800afb0:	d00b      	beq.n	800afca <_svfiprintf_r+0x7a>
 800afb2:	465b      	mov	r3, fp
 800afb4:	4622      	mov	r2, r4
 800afb6:	4629      	mov	r1, r5
 800afb8:	4638      	mov	r0, r7
 800afba:	f7ff ff6f 	bl	800ae9c <__ssputs_r>
 800afbe:	3001      	adds	r0, #1
 800afc0:	f000 80a9 	beq.w	800b116 <_svfiprintf_r+0x1c6>
 800afc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afc6:	445a      	add	r2, fp
 800afc8:	9209      	str	r2, [sp, #36]	; 0x24
 800afca:	f89a 3000 	ldrb.w	r3, [sl]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	f000 80a1 	beq.w	800b116 <_svfiprintf_r+0x1c6>
 800afd4:	2300      	movs	r3, #0
 800afd6:	f04f 32ff 	mov.w	r2, #4294967295
 800afda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afde:	f10a 0a01 	add.w	sl, sl, #1
 800afe2:	9304      	str	r3, [sp, #16]
 800afe4:	9307      	str	r3, [sp, #28]
 800afe6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afea:	931a      	str	r3, [sp, #104]	; 0x68
 800afec:	4654      	mov	r4, sl
 800afee:	2205      	movs	r2, #5
 800aff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aff4:	4850      	ldr	r0, [pc, #320]	; (800b138 <_svfiprintf_r+0x1e8>)
 800aff6:	f7f5 f91b 	bl	8000230 <memchr>
 800affa:	9a04      	ldr	r2, [sp, #16]
 800affc:	b9d8      	cbnz	r0, 800b036 <_svfiprintf_r+0xe6>
 800affe:	06d0      	lsls	r0, r2, #27
 800b000:	bf44      	itt	mi
 800b002:	2320      	movmi	r3, #32
 800b004:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b008:	0711      	lsls	r1, r2, #28
 800b00a:	bf44      	itt	mi
 800b00c:	232b      	movmi	r3, #43	; 0x2b
 800b00e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b012:	f89a 3000 	ldrb.w	r3, [sl]
 800b016:	2b2a      	cmp	r3, #42	; 0x2a
 800b018:	d015      	beq.n	800b046 <_svfiprintf_r+0xf6>
 800b01a:	9a07      	ldr	r2, [sp, #28]
 800b01c:	4654      	mov	r4, sl
 800b01e:	2000      	movs	r0, #0
 800b020:	f04f 0c0a 	mov.w	ip, #10
 800b024:	4621      	mov	r1, r4
 800b026:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b02a:	3b30      	subs	r3, #48	; 0x30
 800b02c:	2b09      	cmp	r3, #9
 800b02e:	d94d      	bls.n	800b0cc <_svfiprintf_r+0x17c>
 800b030:	b1b0      	cbz	r0, 800b060 <_svfiprintf_r+0x110>
 800b032:	9207      	str	r2, [sp, #28]
 800b034:	e014      	b.n	800b060 <_svfiprintf_r+0x110>
 800b036:	eba0 0308 	sub.w	r3, r0, r8
 800b03a:	fa09 f303 	lsl.w	r3, r9, r3
 800b03e:	4313      	orrs	r3, r2
 800b040:	9304      	str	r3, [sp, #16]
 800b042:	46a2      	mov	sl, r4
 800b044:	e7d2      	b.n	800afec <_svfiprintf_r+0x9c>
 800b046:	9b03      	ldr	r3, [sp, #12]
 800b048:	1d19      	adds	r1, r3, #4
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	9103      	str	r1, [sp, #12]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	bfbb      	ittet	lt
 800b052:	425b      	neglt	r3, r3
 800b054:	f042 0202 	orrlt.w	r2, r2, #2
 800b058:	9307      	strge	r3, [sp, #28]
 800b05a:	9307      	strlt	r3, [sp, #28]
 800b05c:	bfb8      	it	lt
 800b05e:	9204      	strlt	r2, [sp, #16]
 800b060:	7823      	ldrb	r3, [r4, #0]
 800b062:	2b2e      	cmp	r3, #46	; 0x2e
 800b064:	d10c      	bne.n	800b080 <_svfiprintf_r+0x130>
 800b066:	7863      	ldrb	r3, [r4, #1]
 800b068:	2b2a      	cmp	r3, #42	; 0x2a
 800b06a:	d134      	bne.n	800b0d6 <_svfiprintf_r+0x186>
 800b06c:	9b03      	ldr	r3, [sp, #12]
 800b06e:	1d1a      	adds	r2, r3, #4
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	9203      	str	r2, [sp, #12]
 800b074:	2b00      	cmp	r3, #0
 800b076:	bfb8      	it	lt
 800b078:	f04f 33ff 	movlt.w	r3, #4294967295
 800b07c:	3402      	adds	r4, #2
 800b07e:	9305      	str	r3, [sp, #20]
 800b080:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b148 <_svfiprintf_r+0x1f8>
 800b084:	7821      	ldrb	r1, [r4, #0]
 800b086:	2203      	movs	r2, #3
 800b088:	4650      	mov	r0, sl
 800b08a:	f7f5 f8d1 	bl	8000230 <memchr>
 800b08e:	b138      	cbz	r0, 800b0a0 <_svfiprintf_r+0x150>
 800b090:	9b04      	ldr	r3, [sp, #16]
 800b092:	eba0 000a 	sub.w	r0, r0, sl
 800b096:	2240      	movs	r2, #64	; 0x40
 800b098:	4082      	lsls	r2, r0
 800b09a:	4313      	orrs	r3, r2
 800b09c:	3401      	adds	r4, #1
 800b09e:	9304      	str	r3, [sp, #16]
 800b0a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0a4:	4825      	ldr	r0, [pc, #148]	; (800b13c <_svfiprintf_r+0x1ec>)
 800b0a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0aa:	2206      	movs	r2, #6
 800b0ac:	f7f5 f8c0 	bl	8000230 <memchr>
 800b0b0:	2800      	cmp	r0, #0
 800b0b2:	d038      	beq.n	800b126 <_svfiprintf_r+0x1d6>
 800b0b4:	4b22      	ldr	r3, [pc, #136]	; (800b140 <_svfiprintf_r+0x1f0>)
 800b0b6:	bb1b      	cbnz	r3, 800b100 <_svfiprintf_r+0x1b0>
 800b0b8:	9b03      	ldr	r3, [sp, #12]
 800b0ba:	3307      	adds	r3, #7
 800b0bc:	f023 0307 	bic.w	r3, r3, #7
 800b0c0:	3308      	adds	r3, #8
 800b0c2:	9303      	str	r3, [sp, #12]
 800b0c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0c6:	4433      	add	r3, r6
 800b0c8:	9309      	str	r3, [sp, #36]	; 0x24
 800b0ca:	e768      	b.n	800af9e <_svfiprintf_r+0x4e>
 800b0cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0d0:	460c      	mov	r4, r1
 800b0d2:	2001      	movs	r0, #1
 800b0d4:	e7a6      	b.n	800b024 <_svfiprintf_r+0xd4>
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	3401      	adds	r4, #1
 800b0da:	9305      	str	r3, [sp, #20]
 800b0dc:	4619      	mov	r1, r3
 800b0de:	f04f 0c0a 	mov.w	ip, #10
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0e8:	3a30      	subs	r2, #48	; 0x30
 800b0ea:	2a09      	cmp	r2, #9
 800b0ec:	d903      	bls.n	800b0f6 <_svfiprintf_r+0x1a6>
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d0c6      	beq.n	800b080 <_svfiprintf_r+0x130>
 800b0f2:	9105      	str	r1, [sp, #20]
 800b0f4:	e7c4      	b.n	800b080 <_svfiprintf_r+0x130>
 800b0f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0fa:	4604      	mov	r4, r0
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	e7f0      	b.n	800b0e2 <_svfiprintf_r+0x192>
 800b100:	ab03      	add	r3, sp, #12
 800b102:	9300      	str	r3, [sp, #0]
 800b104:	462a      	mov	r2, r5
 800b106:	4b0f      	ldr	r3, [pc, #60]	; (800b144 <_svfiprintf_r+0x1f4>)
 800b108:	a904      	add	r1, sp, #16
 800b10a:	4638      	mov	r0, r7
 800b10c:	f7fd feb6 	bl	8008e7c <_printf_float>
 800b110:	1c42      	adds	r2, r0, #1
 800b112:	4606      	mov	r6, r0
 800b114:	d1d6      	bne.n	800b0c4 <_svfiprintf_r+0x174>
 800b116:	89ab      	ldrh	r3, [r5, #12]
 800b118:	065b      	lsls	r3, r3, #25
 800b11a:	f53f af2d 	bmi.w	800af78 <_svfiprintf_r+0x28>
 800b11e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b120:	b01d      	add	sp, #116	; 0x74
 800b122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b126:	ab03      	add	r3, sp, #12
 800b128:	9300      	str	r3, [sp, #0]
 800b12a:	462a      	mov	r2, r5
 800b12c:	4b05      	ldr	r3, [pc, #20]	; (800b144 <_svfiprintf_r+0x1f4>)
 800b12e:	a904      	add	r1, sp, #16
 800b130:	4638      	mov	r0, r7
 800b132:	f7fe f947 	bl	80093c4 <_printf_i>
 800b136:	e7eb      	b.n	800b110 <_svfiprintf_r+0x1c0>
 800b138:	0800bea4 	.word	0x0800bea4
 800b13c:	0800beae 	.word	0x0800beae
 800b140:	08008e7d 	.word	0x08008e7d
 800b144:	0800ae9d 	.word	0x0800ae9d
 800b148:	0800beaa 	.word	0x0800beaa

0800b14c <__sflush_r>:
 800b14c:	898a      	ldrh	r2, [r1, #12]
 800b14e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b152:	4605      	mov	r5, r0
 800b154:	0710      	lsls	r0, r2, #28
 800b156:	460c      	mov	r4, r1
 800b158:	d458      	bmi.n	800b20c <__sflush_r+0xc0>
 800b15a:	684b      	ldr	r3, [r1, #4]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	dc05      	bgt.n	800b16c <__sflush_r+0x20>
 800b160:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b162:	2b00      	cmp	r3, #0
 800b164:	dc02      	bgt.n	800b16c <__sflush_r+0x20>
 800b166:	2000      	movs	r0, #0
 800b168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b16c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b16e:	2e00      	cmp	r6, #0
 800b170:	d0f9      	beq.n	800b166 <__sflush_r+0x1a>
 800b172:	2300      	movs	r3, #0
 800b174:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b178:	682f      	ldr	r7, [r5, #0]
 800b17a:	6a21      	ldr	r1, [r4, #32]
 800b17c:	602b      	str	r3, [r5, #0]
 800b17e:	d032      	beq.n	800b1e6 <__sflush_r+0x9a>
 800b180:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b182:	89a3      	ldrh	r3, [r4, #12]
 800b184:	075a      	lsls	r2, r3, #29
 800b186:	d505      	bpl.n	800b194 <__sflush_r+0x48>
 800b188:	6863      	ldr	r3, [r4, #4]
 800b18a:	1ac0      	subs	r0, r0, r3
 800b18c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b18e:	b10b      	cbz	r3, 800b194 <__sflush_r+0x48>
 800b190:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b192:	1ac0      	subs	r0, r0, r3
 800b194:	2300      	movs	r3, #0
 800b196:	4602      	mov	r2, r0
 800b198:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b19a:	6a21      	ldr	r1, [r4, #32]
 800b19c:	4628      	mov	r0, r5
 800b19e:	47b0      	blx	r6
 800b1a0:	1c43      	adds	r3, r0, #1
 800b1a2:	89a3      	ldrh	r3, [r4, #12]
 800b1a4:	d106      	bne.n	800b1b4 <__sflush_r+0x68>
 800b1a6:	6829      	ldr	r1, [r5, #0]
 800b1a8:	291d      	cmp	r1, #29
 800b1aa:	d82b      	bhi.n	800b204 <__sflush_r+0xb8>
 800b1ac:	4a29      	ldr	r2, [pc, #164]	; (800b254 <__sflush_r+0x108>)
 800b1ae:	410a      	asrs	r2, r1
 800b1b0:	07d6      	lsls	r6, r2, #31
 800b1b2:	d427      	bmi.n	800b204 <__sflush_r+0xb8>
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	6062      	str	r2, [r4, #4]
 800b1b8:	04d9      	lsls	r1, r3, #19
 800b1ba:	6922      	ldr	r2, [r4, #16]
 800b1bc:	6022      	str	r2, [r4, #0]
 800b1be:	d504      	bpl.n	800b1ca <__sflush_r+0x7e>
 800b1c0:	1c42      	adds	r2, r0, #1
 800b1c2:	d101      	bne.n	800b1c8 <__sflush_r+0x7c>
 800b1c4:	682b      	ldr	r3, [r5, #0]
 800b1c6:	b903      	cbnz	r3, 800b1ca <__sflush_r+0x7e>
 800b1c8:	6560      	str	r0, [r4, #84]	; 0x54
 800b1ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1cc:	602f      	str	r7, [r5, #0]
 800b1ce:	2900      	cmp	r1, #0
 800b1d0:	d0c9      	beq.n	800b166 <__sflush_r+0x1a>
 800b1d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1d6:	4299      	cmp	r1, r3
 800b1d8:	d002      	beq.n	800b1e0 <__sflush_r+0x94>
 800b1da:	4628      	mov	r0, r5
 800b1dc:	f7ff fa96 	bl	800a70c <_free_r>
 800b1e0:	2000      	movs	r0, #0
 800b1e2:	6360      	str	r0, [r4, #52]	; 0x34
 800b1e4:	e7c0      	b.n	800b168 <__sflush_r+0x1c>
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	4628      	mov	r0, r5
 800b1ea:	47b0      	blx	r6
 800b1ec:	1c41      	adds	r1, r0, #1
 800b1ee:	d1c8      	bne.n	800b182 <__sflush_r+0x36>
 800b1f0:	682b      	ldr	r3, [r5, #0]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d0c5      	beq.n	800b182 <__sflush_r+0x36>
 800b1f6:	2b1d      	cmp	r3, #29
 800b1f8:	d001      	beq.n	800b1fe <__sflush_r+0xb2>
 800b1fa:	2b16      	cmp	r3, #22
 800b1fc:	d101      	bne.n	800b202 <__sflush_r+0xb6>
 800b1fe:	602f      	str	r7, [r5, #0]
 800b200:	e7b1      	b.n	800b166 <__sflush_r+0x1a>
 800b202:	89a3      	ldrh	r3, [r4, #12]
 800b204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b208:	81a3      	strh	r3, [r4, #12]
 800b20a:	e7ad      	b.n	800b168 <__sflush_r+0x1c>
 800b20c:	690f      	ldr	r7, [r1, #16]
 800b20e:	2f00      	cmp	r7, #0
 800b210:	d0a9      	beq.n	800b166 <__sflush_r+0x1a>
 800b212:	0793      	lsls	r3, r2, #30
 800b214:	680e      	ldr	r6, [r1, #0]
 800b216:	bf08      	it	eq
 800b218:	694b      	ldreq	r3, [r1, #20]
 800b21a:	600f      	str	r7, [r1, #0]
 800b21c:	bf18      	it	ne
 800b21e:	2300      	movne	r3, #0
 800b220:	eba6 0807 	sub.w	r8, r6, r7
 800b224:	608b      	str	r3, [r1, #8]
 800b226:	f1b8 0f00 	cmp.w	r8, #0
 800b22a:	dd9c      	ble.n	800b166 <__sflush_r+0x1a>
 800b22c:	6a21      	ldr	r1, [r4, #32]
 800b22e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b230:	4643      	mov	r3, r8
 800b232:	463a      	mov	r2, r7
 800b234:	4628      	mov	r0, r5
 800b236:	47b0      	blx	r6
 800b238:	2800      	cmp	r0, #0
 800b23a:	dc06      	bgt.n	800b24a <__sflush_r+0xfe>
 800b23c:	89a3      	ldrh	r3, [r4, #12]
 800b23e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b242:	81a3      	strh	r3, [r4, #12]
 800b244:	f04f 30ff 	mov.w	r0, #4294967295
 800b248:	e78e      	b.n	800b168 <__sflush_r+0x1c>
 800b24a:	4407      	add	r7, r0
 800b24c:	eba8 0800 	sub.w	r8, r8, r0
 800b250:	e7e9      	b.n	800b226 <__sflush_r+0xda>
 800b252:	bf00      	nop
 800b254:	dfbffffe 	.word	0xdfbffffe

0800b258 <_fflush_r>:
 800b258:	b538      	push	{r3, r4, r5, lr}
 800b25a:	690b      	ldr	r3, [r1, #16]
 800b25c:	4605      	mov	r5, r0
 800b25e:	460c      	mov	r4, r1
 800b260:	b913      	cbnz	r3, 800b268 <_fflush_r+0x10>
 800b262:	2500      	movs	r5, #0
 800b264:	4628      	mov	r0, r5
 800b266:	bd38      	pop	{r3, r4, r5, pc}
 800b268:	b118      	cbz	r0, 800b272 <_fflush_r+0x1a>
 800b26a:	6a03      	ldr	r3, [r0, #32]
 800b26c:	b90b      	cbnz	r3, 800b272 <_fflush_r+0x1a>
 800b26e:	f7fe fa57 	bl	8009720 <__sinit>
 800b272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d0f3      	beq.n	800b262 <_fflush_r+0xa>
 800b27a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b27c:	07d0      	lsls	r0, r2, #31
 800b27e:	d404      	bmi.n	800b28a <_fflush_r+0x32>
 800b280:	0599      	lsls	r1, r3, #22
 800b282:	d402      	bmi.n	800b28a <_fflush_r+0x32>
 800b284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b286:	f7fe fbb6 	bl	80099f6 <__retarget_lock_acquire_recursive>
 800b28a:	4628      	mov	r0, r5
 800b28c:	4621      	mov	r1, r4
 800b28e:	f7ff ff5d 	bl	800b14c <__sflush_r>
 800b292:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b294:	07da      	lsls	r2, r3, #31
 800b296:	4605      	mov	r5, r0
 800b298:	d4e4      	bmi.n	800b264 <_fflush_r+0xc>
 800b29a:	89a3      	ldrh	r3, [r4, #12]
 800b29c:	059b      	lsls	r3, r3, #22
 800b29e:	d4e1      	bmi.n	800b264 <_fflush_r+0xc>
 800b2a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2a2:	f7fe fba9 	bl	80099f8 <__retarget_lock_release_recursive>
 800b2a6:	e7dd      	b.n	800b264 <_fflush_r+0xc>

0800b2a8 <memmove>:
 800b2a8:	4288      	cmp	r0, r1
 800b2aa:	b510      	push	{r4, lr}
 800b2ac:	eb01 0402 	add.w	r4, r1, r2
 800b2b0:	d902      	bls.n	800b2b8 <memmove+0x10>
 800b2b2:	4284      	cmp	r4, r0
 800b2b4:	4623      	mov	r3, r4
 800b2b6:	d807      	bhi.n	800b2c8 <memmove+0x20>
 800b2b8:	1e43      	subs	r3, r0, #1
 800b2ba:	42a1      	cmp	r1, r4
 800b2bc:	d008      	beq.n	800b2d0 <memmove+0x28>
 800b2be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b2c6:	e7f8      	b.n	800b2ba <memmove+0x12>
 800b2c8:	4402      	add	r2, r0
 800b2ca:	4601      	mov	r1, r0
 800b2cc:	428a      	cmp	r2, r1
 800b2ce:	d100      	bne.n	800b2d2 <memmove+0x2a>
 800b2d0:	bd10      	pop	{r4, pc}
 800b2d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b2d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b2da:	e7f7      	b.n	800b2cc <memmove+0x24>

0800b2dc <__assert_func>:
 800b2dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b2de:	4614      	mov	r4, r2
 800b2e0:	461a      	mov	r2, r3
 800b2e2:	4b09      	ldr	r3, [pc, #36]	; (800b308 <__assert_func+0x2c>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4605      	mov	r5, r0
 800b2e8:	68d8      	ldr	r0, [r3, #12]
 800b2ea:	b14c      	cbz	r4, 800b300 <__assert_func+0x24>
 800b2ec:	4b07      	ldr	r3, [pc, #28]	; (800b30c <__assert_func+0x30>)
 800b2ee:	9100      	str	r1, [sp, #0]
 800b2f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b2f4:	4906      	ldr	r1, [pc, #24]	; (800b310 <__assert_func+0x34>)
 800b2f6:	462b      	mov	r3, r5
 800b2f8:	f000 f872 	bl	800b3e0 <fiprintf>
 800b2fc:	f7fd fc5a 	bl	8008bb4 <abort>
 800b300:	4b04      	ldr	r3, [pc, #16]	; (800b314 <__assert_func+0x38>)
 800b302:	461c      	mov	r4, r3
 800b304:	e7f3      	b.n	800b2ee <__assert_func+0x12>
 800b306:	bf00      	nop
 800b308:	20000064 	.word	0x20000064
 800b30c:	0800bebf 	.word	0x0800bebf
 800b310:	0800becc 	.word	0x0800becc
 800b314:	0800befa 	.word	0x0800befa

0800b318 <_calloc_r>:
 800b318:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b31a:	fba1 2402 	umull	r2, r4, r1, r2
 800b31e:	b94c      	cbnz	r4, 800b334 <_calloc_r+0x1c>
 800b320:	4611      	mov	r1, r2
 800b322:	9201      	str	r2, [sp, #4]
 800b324:	f7fd fc7e 	bl	8008c24 <_malloc_r>
 800b328:	9a01      	ldr	r2, [sp, #4]
 800b32a:	4605      	mov	r5, r0
 800b32c:	b930      	cbnz	r0, 800b33c <_calloc_r+0x24>
 800b32e:	4628      	mov	r0, r5
 800b330:	b003      	add	sp, #12
 800b332:	bd30      	pop	{r4, r5, pc}
 800b334:	220c      	movs	r2, #12
 800b336:	6002      	str	r2, [r0, #0]
 800b338:	2500      	movs	r5, #0
 800b33a:	e7f8      	b.n	800b32e <_calloc_r+0x16>
 800b33c:	4621      	mov	r1, r4
 800b33e:	f7fe fa88 	bl	8009852 <memset>
 800b342:	e7f4      	b.n	800b32e <_calloc_r+0x16>

0800b344 <__ascii_mbtowc>:
 800b344:	b082      	sub	sp, #8
 800b346:	b901      	cbnz	r1, 800b34a <__ascii_mbtowc+0x6>
 800b348:	a901      	add	r1, sp, #4
 800b34a:	b142      	cbz	r2, 800b35e <__ascii_mbtowc+0x1a>
 800b34c:	b14b      	cbz	r3, 800b362 <__ascii_mbtowc+0x1e>
 800b34e:	7813      	ldrb	r3, [r2, #0]
 800b350:	600b      	str	r3, [r1, #0]
 800b352:	7812      	ldrb	r2, [r2, #0]
 800b354:	1e10      	subs	r0, r2, #0
 800b356:	bf18      	it	ne
 800b358:	2001      	movne	r0, #1
 800b35a:	b002      	add	sp, #8
 800b35c:	4770      	bx	lr
 800b35e:	4610      	mov	r0, r2
 800b360:	e7fb      	b.n	800b35a <__ascii_mbtowc+0x16>
 800b362:	f06f 0001 	mvn.w	r0, #1
 800b366:	e7f8      	b.n	800b35a <__ascii_mbtowc+0x16>

0800b368 <_realloc_r>:
 800b368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b36c:	4680      	mov	r8, r0
 800b36e:	4614      	mov	r4, r2
 800b370:	460e      	mov	r6, r1
 800b372:	b921      	cbnz	r1, 800b37e <_realloc_r+0x16>
 800b374:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b378:	4611      	mov	r1, r2
 800b37a:	f7fd bc53 	b.w	8008c24 <_malloc_r>
 800b37e:	b92a      	cbnz	r2, 800b38c <_realloc_r+0x24>
 800b380:	f7ff f9c4 	bl	800a70c <_free_r>
 800b384:	4625      	mov	r5, r4
 800b386:	4628      	mov	r0, r5
 800b388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b38c:	f000 f83a 	bl	800b404 <_malloc_usable_size_r>
 800b390:	4284      	cmp	r4, r0
 800b392:	4607      	mov	r7, r0
 800b394:	d802      	bhi.n	800b39c <_realloc_r+0x34>
 800b396:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b39a:	d812      	bhi.n	800b3c2 <_realloc_r+0x5a>
 800b39c:	4621      	mov	r1, r4
 800b39e:	4640      	mov	r0, r8
 800b3a0:	f7fd fc40 	bl	8008c24 <_malloc_r>
 800b3a4:	4605      	mov	r5, r0
 800b3a6:	2800      	cmp	r0, #0
 800b3a8:	d0ed      	beq.n	800b386 <_realloc_r+0x1e>
 800b3aa:	42bc      	cmp	r4, r7
 800b3ac:	4622      	mov	r2, r4
 800b3ae:	4631      	mov	r1, r6
 800b3b0:	bf28      	it	cs
 800b3b2:	463a      	movcs	r2, r7
 800b3b4:	f7fe fb21 	bl	80099fa <memcpy>
 800b3b8:	4631      	mov	r1, r6
 800b3ba:	4640      	mov	r0, r8
 800b3bc:	f7ff f9a6 	bl	800a70c <_free_r>
 800b3c0:	e7e1      	b.n	800b386 <_realloc_r+0x1e>
 800b3c2:	4635      	mov	r5, r6
 800b3c4:	e7df      	b.n	800b386 <_realloc_r+0x1e>

0800b3c6 <__ascii_wctomb>:
 800b3c6:	b149      	cbz	r1, 800b3dc <__ascii_wctomb+0x16>
 800b3c8:	2aff      	cmp	r2, #255	; 0xff
 800b3ca:	bf85      	ittet	hi
 800b3cc:	238a      	movhi	r3, #138	; 0x8a
 800b3ce:	6003      	strhi	r3, [r0, #0]
 800b3d0:	700a      	strbls	r2, [r1, #0]
 800b3d2:	f04f 30ff 	movhi.w	r0, #4294967295
 800b3d6:	bf98      	it	ls
 800b3d8:	2001      	movls	r0, #1
 800b3da:	4770      	bx	lr
 800b3dc:	4608      	mov	r0, r1
 800b3de:	4770      	bx	lr

0800b3e0 <fiprintf>:
 800b3e0:	b40e      	push	{r1, r2, r3}
 800b3e2:	b503      	push	{r0, r1, lr}
 800b3e4:	4601      	mov	r1, r0
 800b3e6:	ab03      	add	r3, sp, #12
 800b3e8:	4805      	ldr	r0, [pc, #20]	; (800b400 <fiprintf+0x20>)
 800b3ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3ee:	6800      	ldr	r0, [r0, #0]
 800b3f0:	9301      	str	r3, [sp, #4]
 800b3f2:	f000 f839 	bl	800b468 <_vfiprintf_r>
 800b3f6:	b002      	add	sp, #8
 800b3f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3fc:	b003      	add	sp, #12
 800b3fe:	4770      	bx	lr
 800b400:	20000064 	.word	0x20000064

0800b404 <_malloc_usable_size_r>:
 800b404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b408:	1f18      	subs	r0, r3, #4
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	bfbc      	itt	lt
 800b40e:	580b      	ldrlt	r3, [r1, r0]
 800b410:	18c0      	addlt	r0, r0, r3
 800b412:	4770      	bx	lr

0800b414 <__sfputc_r>:
 800b414:	6893      	ldr	r3, [r2, #8]
 800b416:	3b01      	subs	r3, #1
 800b418:	2b00      	cmp	r3, #0
 800b41a:	b410      	push	{r4}
 800b41c:	6093      	str	r3, [r2, #8]
 800b41e:	da08      	bge.n	800b432 <__sfputc_r+0x1e>
 800b420:	6994      	ldr	r4, [r2, #24]
 800b422:	42a3      	cmp	r3, r4
 800b424:	db01      	blt.n	800b42a <__sfputc_r+0x16>
 800b426:	290a      	cmp	r1, #10
 800b428:	d103      	bne.n	800b432 <__sfputc_r+0x1e>
 800b42a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b42e:	f000 b935 	b.w	800b69c <__swbuf_r>
 800b432:	6813      	ldr	r3, [r2, #0]
 800b434:	1c58      	adds	r0, r3, #1
 800b436:	6010      	str	r0, [r2, #0]
 800b438:	7019      	strb	r1, [r3, #0]
 800b43a:	4608      	mov	r0, r1
 800b43c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b440:	4770      	bx	lr

0800b442 <__sfputs_r>:
 800b442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b444:	4606      	mov	r6, r0
 800b446:	460f      	mov	r7, r1
 800b448:	4614      	mov	r4, r2
 800b44a:	18d5      	adds	r5, r2, r3
 800b44c:	42ac      	cmp	r4, r5
 800b44e:	d101      	bne.n	800b454 <__sfputs_r+0x12>
 800b450:	2000      	movs	r0, #0
 800b452:	e007      	b.n	800b464 <__sfputs_r+0x22>
 800b454:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b458:	463a      	mov	r2, r7
 800b45a:	4630      	mov	r0, r6
 800b45c:	f7ff ffda 	bl	800b414 <__sfputc_r>
 800b460:	1c43      	adds	r3, r0, #1
 800b462:	d1f3      	bne.n	800b44c <__sfputs_r+0xa>
 800b464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b468 <_vfiprintf_r>:
 800b468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b46c:	460d      	mov	r5, r1
 800b46e:	b09d      	sub	sp, #116	; 0x74
 800b470:	4614      	mov	r4, r2
 800b472:	4698      	mov	r8, r3
 800b474:	4606      	mov	r6, r0
 800b476:	b118      	cbz	r0, 800b480 <_vfiprintf_r+0x18>
 800b478:	6a03      	ldr	r3, [r0, #32]
 800b47a:	b90b      	cbnz	r3, 800b480 <_vfiprintf_r+0x18>
 800b47c:	f7fe f950 	bl	8009720 <__sinit>
 800b480:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b482:	07d9      	lsls	r1, r3, #31
 800b484:	d405      	bmi.n	800b492 <_vfiprintf_r+0x2a>
 800b486:	89ab      	ldrh	r3, [r5, #12]
 800b488:	059a      	lsls	r2, r3, #22
 800b48a:	d402      	bmi.n	800b492 <_vfiprintf_r+0x2a>
 800b48c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b48e:	f7fe fab2 	bl	80099f6 <__retarget_lock_acquire_recursive>
 800b492:	89ab      	ldrh	r3, [r5, #12]
 800b494:	071b      	lsls	r3, r3, #28
 800b496:	d501      	bpl.n	800b49c <_vfiprintf_r+0x34>
 800b498:	692b      	ldr	r3, [r5, #16]
 800b49a:	b99b      	cbnz	r3, 800b4c4 <_vfiprintf_r+0x5c>
 800b49c:	4629      	mov	r1, r5
 800b49e:	4630      	mov	r0, r6
 800b4a0:	f000 f93a 	bl	800b718 <__swsetup_r>
 800b4a4:	b170      	cbz	r0, 800b4c4 <_vfiprintf_r+0x5c>
 800b4a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4a8:	07dc      	lsls	r4, r3, #31
 800b4aa:	d504      	bpl.n	800b4b6 <_vfiprintf_r+0x4e>
 800b4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b4b0:	b01d      	add	sp, #116	; 0x74
 800b4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4b6:	89ab      	ldrh	r3, [r5, #12]
 800b4b8:	0598      	lsls	r0, r3, #22
 800b4ba:	d4f7      	bmi.n	800b4ac <_vfiprintf_r+0x44>
 800b4bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4be:	f7fe fa9b 	bl	80099f8 <__retarget_lock_release_recursive>
 800b4c2:	e7f3      	b.n	800b4ac <_vfiprintf_r+0x44>
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	9309      	str	r3, [sp, #36]	; 0x24
 800b4c8:	2320      	movs	r3, #32
 800b4ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4d2:	2330      	movs	r3, #48	; 0x30
 800b4d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b688 <_vfiprintf_r+0x220>
 800b4d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b4dc:	f04f 0901 	mov.w	r9, #1
 800b4e0:	4623      	mov	r3, r4
 800b4e2:	469a      	mov	sl, r3
 800b4e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4e8:	b10a      	cbz	r2, 800b4ee <_vfiprintf_r+0x86>
 800b4ea:	2a25      	cmp	r2, #37	; 0x25
 800b4ec:	d1f9      	bne.n	800b4e2 <_vfiprintf_r+0x7a>
 800b4ee:	ebba 0b04 	subs.w	fp, sl, r4
 800b4f2:	d00b      	beq.n	800b50c <_vfiprintf_r+0xa4>
 800b4f4:	465b      	mov	r3, fp
 800b4f6:	4622      	mov	r2, r4
 800b4f8:	4629      	mov	r1, r5
 800b4fa:	4630      	mov	r0, r6
 800b4fc:	f7ff ffa1 	bl	800b442 <__sfputs_r>
 800b500:	3001      	adds	r0, #1
 800b502:	f000 80a9 	beq.w	800b658 <_vfiprintf_r+0x1f0>
 800b506:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b508:	445a      	add	r2, fp
 800b50a:	9209      	str	r2, [sp, #36]	; 0x24
 800b50c:	f89a 3000 	ldrb.w	r3, [sl]
 800b510:	2b00      	cmp	r3, #0
 800b512:	f000 80a1 	beq.w	800b658 <_vfiprintf_r+0x1f0>
 800b516:	2300      	movs	r3, #0
 800b518:	f04f 32ff 	mov.w	r2, #4294967295
 800b51c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b520:	f10a 0a01 	add.w	sl, sl, #1
 800b524:	9304      	str	r3, [sp, #16]
 800b526:	9307      	str	r3, [sp, #28]
 800b528:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b52c:	931a      	str	r3, [sp, #104]	; 0x68
 800b52e:	4654      	mov	r4, sl
 800b530:	2205      	movs	r2, #5
 800b532:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b536:	4854      	ldr	r0, [pc, #336]	; (800b688 <_vfiprintf_r+0x220>)
 800b538:	f7f4 fe7a 	bl	8000230 <memchr>
 800b53c:	9a04      	ldr	r2, [sp, #16]
 800b53e:	b9d8      	cbnz	r0, 800b578 <_vfiprintf_r+0x110>
 800b540:	06d1      	lsls	r1, r2, #27
 800b542:	bf44      	itt	mi
 800b544:	2320      	movmi	r3, #32
 800b546:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b54a:	0713      	lsls	r3, r2, #28
 800b54c:	bf44      	itt	mi
 800b54e:	232b      	movmi	r3, #43	; 0x2b
 800b550:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b554:	f89a 3000 	ldrb.w	r3, [sl]
 800b558:	2b2a      	cmp	r3, #42	; 0x2a
 800b55a:	d015      	beq.n	800b588 <_vfiprintf_r+0x120>
 800b55c:	9a07      	ldr	r2, [sp, #28]
 800b55e:	4654      	mov	r4, sl
 800b560:	2000      	movs	r0, #0
 800b562:	f04f 0c0a 	mov.w	ip, #10
 800b566:	4621      	mov	r1, r4
 800b568:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b56c:	3b30      	subs	r3, #48	; 0x30
 800b56e:	2b09      	cmp	r3, #9
 800b570:	d94d      	bls.n	800b60e <_vfiprintf_r+0x1a6>
 800b572:	b1b0      	cbz	r0, 800b5a2 <_vfiprintf_r+0x13a>
 800b574:	9207      	str	r2, [sp, #28]
 800b576:	e014      	b.n	800b5a2 <_vfiprintf_r+0x13a>
 800b578:	eba0 0308 	sub.w	r3, r0, r8
 800b57c:	fa09 f303 	lsl.w	r3, r9, r3
 800b580:	4313      	orrs	r3, r2
 800b582:	9304      	str	r3, [sp, #16]
 800b584:	46a2      	mov	sl, r4
 800b586:	e7d2      	b.n	800b52e <_vfiprintf_r+0xc6>
 800b588:	9b03      	ldr	r3, [sp, #12]
 800b58a:	1d19      	adds	r1, r3, #4
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	9103      	str	r1, [sp, #12]
 800b590:	2b00      	cmp	r3, #0
 800b592:	bfbb      	ittet	lt
 800b594:	425b      	neglt	r3, r3
 800b596:	f042 0202 	orrlt.w	r2, r2, #2
 800b59a:	9307      	strge	r3, [sp, #28]
 800b59c:	9307      	strlt	r3, [sp, #28]
 800b59e:	bfb8      	it	lt
 800b5a0:	9204      	strlt	r2, [sp, #16]
 800b5a2:	7823      	ldrb	r3, [r4, #0]
 800b5a4:	2b2e      	cmp	r3, #46	; 0x2e
 800b5a6:	d10c      	bne.n	800b5c2 <_vfiprintf_r+0x15a>
 800b5a8:	7863      	ldrb	r3, [r4, #1]
 800b5aa:	2b2a      	cmp	r3, #42	; 0x2a
 800b5ac:	d134      	bne.n	800b618 <_vfiprintf_r+0x1b0>
 800b5ae:	9b03      	ldr	r3, [sp, #12]
 800b5b0:	1d1a      	adds	r2, r3, #4
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	9203      	str	r2, [sp, #12]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	bfb8      	it	lt
 800b5ba:	f04f 33ff 	movlt.w	r3, #4294967295
 800b5be:	3402      	adds	r4, #2
 800b5c0:	9305      	str	r3, [sp, #20]
 800b5c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b698 <_vfiprintf_r+0x230>
 800b5c6:	7821      	ldrb	r1, [r4, #0]
 800b5c8:	2203      	movs	r2, #3
 800b5ca:	4650      	mov	r0, sl
 800b5cc:	f7f4 fe30 	bl	8000230 <memchr>
 800b5d0:	b138      	cbz	r0, 800b5e2 <_vfiprintf_r+0x17a>
 800b5d2:	9b04      	ldr	r3, [sp, #16]
 800b5d4:	eba0 000a 	sub.w	r0, r0, sl
 800b5d8:	2240      	movs	r2, #64	; 0x40
 800b5da:	4082      	lsls	r2, r0
 800b5dc:	4313      	orrs	r3, r2
 800b5de:	3401      	adds	r4, #1
 800b5e0:	9304      	str	r3, [sp, #16]
 800b5e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5e6:	4829      	ldr	r0, [pc, #164]	; (800b68c <_vfiprintf_r+0x224>)
 800b5e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5ec:	2206      	movs	r2, #6
 800b5ee:	f7f4 fe1f 	bl	8000230 <memchr>
 800b5f2:	2800      	cmp	r0, #0
 800b5f4:	d03f      	beq.n	800b676 <_vfiprintf_r+0x20e>
 800b5f6:	4b26      	ldr	r3, [pc, #152]	; (800b690 <_vfiprintf_r+0x228>)
 800b5f8:	bb1b      	cbnz	r3, 800b642 <_vfiprintf_r+0x1da>
 800b5fa:	9b03      	ldr	r3, [sp, #12]
 800b5fc:	3307      	adds	r3, #7
 800b5fe:	f023 0307 	bic.w	r3, r3, #7
 800b602:	3308      	adds	r3, #8
 800b604:	9303      	str	r3, [sp, #12]
 800b606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b608:	443b      	add	r3, r7
 800b60a:	9309      	str	r3, [sp, #36]	; 0x24
 800b60c:	e768      	b.n	800b4e0 <_vfiprintf_r+0x78>
 800b60e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b612:	460c      	mov	r4, r1
 800b614:	2001      	movs	r0, #1
 800b616:	e7a6      	b.n	800b566 <_vfiprintf_r+0xfe>
 800b618:	2300      	movs	r3, #0
 800b61a:	3401      	adds	r4, #1
 800b61c:	9305      	str	r3, [sp, #20]
 800b61e:	4619      	mov	r1, r3
 800b620:	f04f 0c0a 	mov.w	ip, #10
 800b624:	4620      	mov	r0, r4
 800b626:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b62a:	3a30      	subs	r2, #48	; 0x30
 800b62c:	2a09      	cmp	r2, #9
 800b62e:	d903      	bls.n	800b638 <_vfiprintf_r+0x1d0>
 800b630:	2b00      	cmp	r3, #0
 800b632:	d0c6      	beq.n	800b5c2 <_vfiprintf_r+0x15a>
 800b634:	9105      	str	r1, [sp, #20]
 800b636:	e7c4      	b.n	800b5c2 <_vfiprintf_r+0x15a>
 800b638:	fb0c 2101 	mla	r1, ip, r1, r2
 800b63c:	4604      	mov	r4, r0
 800b63e:	2301      	movs	r3, #1
 800b640:	e7f0      	b.n	800b624 <_vfiprintf_r+0x1bc>
 800b642:	ab03      	add	r3, sp, #12
 800b644:	9300      	str	r3, [sp, #0]
 800b646:	462a      	mov	r2, r5
 800b648:	4b12      	ldr	r3, [pc, #72]	; (800b694 <_vfiprintf_r+0x22c>)
 800b64a:	a904      	add	r1, sp, #16
 800b64c:	4630      	mov	r0, r6
 800b64e:	f7fd fc15 	bl	8008e7c <_printf_float>
 800b652:	4607      	mov	r7, r0
 800b654:	1c78      	adds	r0, r7, #1
 800b656:	d1d6      	bne.n	800b606 <_vfiprintf_r+0x19e>
 800b658:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b65a:	07d9      	lsls	r1, r3, #31
 800b65c:	d405      	bmi.n	800b66a <_vfiprintf_r+0x202>
 800b65e:	89ab      	ldrh	r3, [r5, #12]
 800b660:	059a      	lsls	r2, r3, #22
 800b662:	d402      	bmi.n	800b66a <_vfiprintf_r+0x202>
 800b664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b666:	f7fe f9c7 	bl	80099f8 <__retarget_lock_release_recursive>
 800b66a:	89ab      	ldrh	r3, [r5, #12]
 800b66c:	065b      	lsls	r3, r3, #25
 800b66e:	f53f af1d 	bmi.w	800b4ac <_vfiprintf_r+0x44>
 800b672:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b674:	e71c      	b.n	800b4b0 <_vfiprintf_r+0x48>
 800b676:	ab03      	add	r3, sp, #12
 800b678:	9300      	str	r3, [sp, #0]
 800b67a:	462a      	mov	r2, r5
 800b67c:	4b05      	ldr	r3, [pc, #20]	; (800b694 <_vfiprintf_r+0x22c>)
 800b67e:	a904      	add	r1, sp, #16
 800b680:	4630      	mov	r0, r6
 800b682:	f7fd fe9f 	bl	80093c4 <_printf_i>
 800b686:	e7e4      	b.n	800b652 <_vfiprintf_r+0x1ea>
 800b688:	0800bea4 	.word	0x0800bea4
 800b68c:	0800beae 	.word	0x0800beae
 800b690:	08008e7d 	.word	0x08008e7d
 800b694:	0800b443 	.word	0x0800b443
 800b698:	0800beaa 	.word	0x0800beaa

0800b69c <__swbuf_r>:
 800b69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b69e:	460e      	mov	r6, r1
 800b6a0:	4614      	mov	r4, r2
 800b6a2:	4605      	mov	r5, r0
 800b6a4:	b118      	cbz	r0, 800b6ae <__swbuf_r+0x12>
 800b6a6:	6a03      	ldr	r3, [r0, #32]
 800b6a8:	b90b      	cbnz	r3, 800b6ae <__swbuf_r+0x12>
 800b6aa:	f7fe f839 	bl	8009720 <__sinit>
 800b6ae:	69a3      	ldr	r3, [r4, #24]
 800b6b0:	60a3      	str	r3, [r4, #8]
 800b6b2:	89a3      	ldrh	r3, [r4, #12]
 800b6b4:	071a      	lsls	r2, r3, #28
 800b6b6:	d525      	bpl.n	800b704 <__swbuf_r+0x68>
 800b6b8:	6923      	ldr	r3, [r4, #16]
 800b6ba:	b31b      	cbz	r3, 800b704 <__swbuf_r+0x68>
 800b6bc:	6823      	ldr	r3, [r4, #0]
 800b6be:	6922      	ldr	r2, [r4, #16]
 800b6c0:	1a98      	subs	r0, r3, r2
 800b6c2:	6963      	ldr	r3, [r4, #20]
 800b6c4:	b2f6      	uxtb	r6, r6
 800b6c6:	4283      	cmp	r3, r0
 800b6c8:	4637      	mov	r7, r6
 800b6ca:	dc04      	bgt.n	800b6d6 <__swbuf_r+0x3a>
 800b6cc:	4621      	mov	r1, r4
 800b6ce:	4628      	mov	r0, r5
 800b6d0:	f7ff fdc2 	bl	800b258 <_fflush_r>
 800b6d4:	b9e0      	cbnz	r0, 800b710 <__swbuf_r+0x74>
 800b6d6:	68a3      	ldr	r3, [r4, #8]
 800b6d8:	3b01      	subs	r3, #1
 800b6da:	60a3      	str	r3, [r4, #8]
 800b6dc:	6823      	ldr	r3, [r4, #0]
 800b6de:	1c5a      	adds	r2, r3, #1
 800b6e0:	6022      	str	r2, [r4, #0]
 800b6e2:	701e      	strb	r6, [r3, #0]
 800b6e4:	6962      	ldr	r2, [r4, #20]
 800b6e6:	1c43      	adds	r3, r0, #1
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d004      	beq.n	800b6f6 <__swbuf_r+0x5a>
 800b6ec:	89a3      	ldrh	r3, [r4, #12]
 800b6ee:	07db      	lsls	r3, r3, #31
 800b6f0:	d506      	bpl.n	800b700 <__swbuf_r+0x64>
 800b6f2:	2e0a      	cmp	r6, #10
 800b6f4:	d104      	bne.n	800b700 <__swbuf_r+0x64>
 800b6f6:	4621      	mov	r1, r4
 800b6f8:	4628      	mov	r0, r5
 800b6fa:	f7ff fdad 	bl	800b258 <_fflush_r>
 800b6fe:	b938      	cbnz	r0, 800b710 <__swbuf_r+0x74>
 800b700:	4638      	mov	r0, r7
 800b702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b704:	4621      	mov	r1, r4
 800b706:	4628      	mov	r0, r5
 800b708:	f000 f806 	bl	800b718 <__swsetup_r>
 800b70c:	2800      	cmp	r0, #0
 800b70e:	d0d5      	beq.n	800b6bc <__swbuf_r+0x20>
 800b710:	f04f 37ff 	mov.w	r7, #4294967295
 800b714:	e7f4      	b.n	800b700 <__swbuf_r+0x64>
	...

0800b718 <__swsetup_r>:
 800b718:	b538      	push	{r3, r4, r5, lr}
 800b71a:	4b2a      	ldr	r3, [pc, #168]	; (800b7c4 <__swsetup_r+0xac>)
 800b71c:	4605      	mov	r5, r0
 800b71e:	6818      	ldr	r0, [r3, #0]
 800b720:	460c      	mov	r4, r1
 800b722:	b118      	cbz	r0, 800b72c <__swsetup_r+0x14>
 800b724:	6a03      	ldr	r3, [r0, #32]
 800b726:	b90b      	cbnz	r3, 800b72c <__swsetup_r+0x14>
 800b728:	f7fd fffa 	bl	8009720 <__sinit>
 800b72c:	89a3      	ldrh	r3, [r4, #12]
 800b72e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b732:	0718      	lsls	r0, r3, #28
 800b734:	d422      	bmi.n	800b77c <__swsetup_r+0x64>
 800b736:	06d9      	lsls	r1, r3, #27
 800b738:	d407      	bmi.n	800b74a <__swsetup_r+0x32>
 800b73a:	2309      	movs	r3, #9
 800b73c:	602b      	str	r3, [r5, #0]
 800b73e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b742:	81a3      	strh	r3, [r4, #12]
 800b744:	f04f 30ff 	mov.w	r0, #4294967295
 800b748:	e034      	b.n	800b7b4 <__swsetup_r+0x9c>
 800b74a:	0758      	lsls	r0, r3, #29
 800b74c:	d512      	bpl.n	800b774 <__swsetup_r+0x5c>
 800b74e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b750:	b141      	cbz	r1, 800b764 <__swsetup_r+0x4c>
 800b752:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b756:	4299      	cmp	r1, r3
 800b758:	d002      	beq.n	800b760 <__swsetup_r+0x48>
 800b75a:	4628      	mov	r0, r5
 800b75c:	f7fe ffd6 	bl	800a70c <_free_r>
 800b760:	2300      	movs	r3, #0
 800b762:	6363      	str	r3, [r4, #52]	; 0x34
 800b764:	89a3      	ldrh	r3, [r4, #12]
 800b766:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b76a:	81a3      	strh	r3, [r4, #12]
 800b76c:	2300      	movs	r3, #0
 800b76e:	6063      	str	r3, [r4, #4]
 800b770:	6923      	ldr	r3, [r4, #16]
 800b772:	6023      	str	r3, [r4, #0]
 800b774:	89a3      	ldrh	r3, [r4, #12]
 800b776:	f043 0308 	orr.w	r3, r3, #8
 800b77a:	81a3      	strh	r3, [r4, #12]
 800b77c:	6923      	ldr	r3, [r4, #16]
 800b77e:	b94b      	cbnz	r3, 800b794 <__swsetup_r+0x7c>
 800b780:	89a3      	ldrh	r3, [r4, #12]
 800b782:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b786:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b78a:	d003      	beq.n	800b794 <__swsetup_r+0x7c>
 800b78c:	4621      	mov	r1, r4
 800b78e:	4628      	mov	r0, r5
 800b790:	f000 f840 	bl	800b814 <__smakebuf_r>
 800b794:	89a0      	ldrh	r0, [r4, #12]
 800b796:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b79a:	f010 0301 	ands.w	r3, r0, #1
 800b79e:	d00a      	beq.n	800b7b6 <__swsetup_r+0x9e>
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	60a3      	str	r3, [r4, #8]
 800b7a4:	6963      	ldr	r3, [r4, #20]
 800b7a6:	425b      	negs	r3, r3
 800b7a8:	61a3      	str	r3, [r4, #24]
 800b7aa:	6923      	ldr	r3, [r4, #16]
 800b7ac:	b943      	cbnz	r3, 800b7c0 <__swsetup_r+0xa8>
 800b7ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b7b2:	d1c4      	bne.n	800b73e <__swsetup_r+0x26>
 800b7b4:	bd38      	pop	{r3, r4, r5, pc}
 800b7b6:	0781      	lsls	r1, r0, #30
 800b7b8:	bf58      	it	pl
 800b7ba:	6963      	ldrpl	r3, [r4, #20]
 800b7bc:	60a3      	str	r3, [r4, #8]
 800b7be:	e7f4      	b.n	800b7aa <__swsetup_r+0x92>
 800b7c0:	2000      	movs	r0, #0
 800b7c2:	e7f7      	b.n	800b7b4 <__swsetup_r+0x9c>
 800b7c4:	20000064 	.word	0x20000064

0800b7c8 <__swhatbuf_r>:
 800b7c8:	b570      	push	{r4, r5, r6, lr}
 800b7ca:	460c      	mov	r4, r1
 800b7cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7d0:	2900      	cmp	r1, #0
 800b7d2:	b096      	sub	sp, #88	; 0x58
 800b7d4:	4615      	mov	r5, r2
 800b7d6:	461e      	mov	r6, r3
 800b7d8:	da0d      	bge.n	800b7f6 <__swhatbuf_r+0x2e>
 800b7da:	89a3      	ldrh	r3, [r4, #12]
 800b7dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b7e0:	f04f 0100 	mov.w	r1, #0
 800b7e4:	bf0c      	ite	eq
 800b7e6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b7ea:	2340      	movne	r3, #64	; 0x40
 800b7ec:	2000      	movs	r0, #0
 800b7ee:	6031      	str	r1, [r6, #0]
 800b7f0:	602b      	str	r3, [r5, #0]
 800b7f2:	b016      	add	sp, #88	; 0x58
 800b7f4:	bd70      	pop	{r4, r5, r6, pc}
 800b7f6:	466a      	mov	r2, sp
 800b7f8:	f000 f848 	bl	800b88c <_fstat_r>
 800b7fc:	2800      	cmp	r0, #0
 800b7fe:	dbec      	blt.n	800b7da <__swhatbuf_r+0x12>
 800b800:	9901      	ldr	r1, [sp, #4]
 800b802:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b806:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b80a:	4259      	negs	r1, r3
 800b80c:	4159      	adcs	r1, r3
 800b80e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b812:	e7eb      	b.n	800b7ec <__swhatbuf_r+0x24>

0800b814 <__smakebuf_r>:
 800b814:	898b      	ldrh	r3, [r1, #12]
 800b816:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b818:	079d      	lsls	r5, r3, #30
 800b81a:	4606      	mov	r6, r0
 800b81c:	460c      	mov	r4, r1
 800b81e:	d507      	bpl.n	800b830 <__smakebuf_r+0x1c>
 800b820:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b824:	6023      	str	r3, [r4, #0]
 800b826:	6123      	str	r3, [r4, #16]
 800b828:	2301      	movs	r3, #1
 800b82a:	6163      	str	r3, [r4, #20]
 800b82c:	b002      	add	sp, #8
 800b82e:	bd70      	pop	{r4, r5, r6, pc}
 800b830:	ab01      	add	r3, sp, #4
 800b832:	466a      	mov	r2, sp
 800b834:	f7ff ffc8 	bl	800b7c8 <__swhatbuf_r>
 800b838:	9900      	ldr	r1, [sp, #0]
 800b83a:	4605      	mov	r5, r0
 800b83c:	4630      	mov	r0, r6
 800b83e:	f7fd f9f1 	bl	8008c24 <_malloc_r>
 800b842:	b948      	cbnz	r0, 800b858 <__smakebuf_r+0x44>
 800b844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b848:	059a      	lsls	r2, r3, #22
 800b84a:	d4ef      	bmi.n	800b82c <__smakebuf_r+0x18>
 800b84c:	f023 0303 	bic.w	r3, r3, #3
 800b850:	f043 0302 	orr.w	r3, r3, #2
 800b854:	81a3      	strh	r3, [r4, #12]
 800b856:	e7e3      	b.n	800b820 <__smakebuf_r+0xc>
 800b858:	89a3      	ldrh	r3, [r4, #12]
 800b85a:	6020      	str	r0, [r4, #0]
 800b85c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b860:	81a3      	strh	r3, [r4, #12]
 800b862:	9b00      	ldr	r3, [sp, #0]
 800b864:	6163      	str	r3, [r4, #20]
 800b866:	9b01      	ldr	r3, [sp, #4]
 800b868:	6120      	str	r0, [r4, #16]
 800b86a:	b15b      	cbz	r3, 800b884 <__smakebuf_r+0x70>
 800b86c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b870:	4630      	mov	r0, r6
 800b872:	f000 f81d 	bl	800b8b0 <_isatty_r>
 800b876:	b128      	cbz	r0, 800b884 <__smakebuf_r+0x70>
 800b878:	89a3      	ldrh	r3, [r4, #12]
 800b87a:	f023 0303 	bic.w	r3, r3, #3
 800b87e:	f043 0301 	orr.w	r3, r3, #1
 800b882:	81a3      	strh	r3, [r4, #12]
 800b884:	89a3      	ldrh	r3, [r4, #12]
 800b886:	431d      	orrs	r5, r3
 800b888:	81a5      	strh	r5, [r4, #12]
 800b88a:	e7cf      	b.n	800b82c <__smakebuf_r+0x18>

0800b88c <_fstat_r>:
 800b88c:	b538      	push	{r3, r4, r5, lr}
 800b88e:	4d07      	ldr	r5, [pc, #28]	; (800b8ac <_fstat_r+0x20>)
 800b890:	2300      	movs	r3, #0
 800b892:	4604      	mov	r4, r0
 800b894:	4608      	mov	r0, r1
 800b896:	4611      	mov	r1, r2
 800b898:	602b      	str	r3, [r5, #0]
 800b89a:	f7f9 fb06 	bl	8004eaa <_fstat>
 800b89e:	1c43      	adds	r3, r0, #1
 800b8a0:	d102      	bne.n	800b8a8 <_fstat_r+0x1c>
 800b8a2:	682b      	ldr	r3, [r5, #0]
 800b8a4:	b103      	cbz	r3, 800b8a8 <_fstat_r+0x1c>
 800b8a6:	6023      	str	r3, [r4, #0]
 800b8a8:	bd38      	pop	{r3, r4, r5, pc}
 800b8aa:	bf00      	nop
 800b8ac:	200004cc 	.word	0x200004cc

0800b8b0 <_isatty_r>:
 800b8b0:	b538      	push	{r3, r4, r5, lr}
 800b8b2:	4d06      	ldr	r5, [pc, #24]	; (800b8cc <_isatty_r+0x1c>)
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	4604      	mov	r4, r0
 800b8b8:	4608      	mov	r0, r1
 800b8ba:	602b      	str	r3, [r5, #0]
 800b8bc:	f7f9 fb05 	bl	8004eca <_isatty>
 800b8c0:	1c43      	adds	r3, r0, #1
 800b8c2:	d102      	bne.n	800b8ca <_isatty_r+0x1a>
 800b8c4:	682b      	ldr	r3, [r5, #0]
 800b8c6:	b103      	cbz	r3, 800b8ca <_isatty_r+0x1a>
 800b8c8:	6023      	str	r3, [r4, #0]
 800b8ca:	bd38      	pop	{r3, r4, r5, pc}
 800b8cc:	200004cc 	.word	0x200004cc

0800b8d0 <_init>:
 800b8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8d2:	bf00      	nop
 800b8d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8d6:	bc08      	pop	{r3}
 800b8d8:	469e      	mov	lr, r3
 800b8da:	4770      	bx	lr

0800b8dc <_fini>:
 800b8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8de:	bf00      	nop
 800b8e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8e2:	bc08      	pop	{r3}
 800b8e4:	469e      	mov	lr, r3
 800b8e6:	4770      	bx	lr
