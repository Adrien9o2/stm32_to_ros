
stm32_to_ros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016a18  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c3c  08016be8  08016be8  00026be8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00001550  08018824  08018824  00028824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000fd0  08019d74  08019d74  00029d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ad44  0801ad44  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0801ad44  0801ad44  0002ad44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0801ad50  0801ad50  0002ad50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801ad58  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  200001dc  0801af34  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000055c  0801af34  0003055c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00039a93  00000000  00000000  0003024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c50  00000000  00000000  00069ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002a70  00000000  00000000  0006e938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000020e6  00000000  00000000  000713a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028e8f  00000000  00000000  0007348e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f56e  00000000  00000000  0009c31d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3a96  00000000  00000000  000bb88b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000fd58  00000000  00000000  001af324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001bf07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016bd0 	.word	0x08016bd0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08016bd0 	.word	0x08016bd0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f001 b8de 	b.w	8001e7c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	460d      	mov	r5, r1
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	460f      	mov	r7, r1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d14a      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4694      	mov	ip, r2
 8000cec:	d965      	bls.n	8000dba <__udivmoddi4+0xe2>
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	b143      	cbz	r3, 8000d06 <__udivmoddi4+0x2e>
 8000cf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf8:	f1c3 0220 	rsb	r2, r3, #32
 8000cfc:	409f      	lsls	r7, r3
 8000cfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000d02:	4317      	orrs	r7, r2
 8000d04:	409c      	lsls	r4, r3
 8000d06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d0a:	fa1f f58c 	uxth.w	r5, ip
 8000d0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d12:	0c22      	lsrs	r2, r4, #16
 8000d14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d1c:	fb01 f005 	mul.w	r0, r1, r5
 8000d20:	4290      	cmp	r0, r2
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x62>
 8000d24:	eb1c 0202 	adds.w	r2, ip, r2
 8000d28:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d2c:	f080 811c 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d30:	4290      	cmp	r0, r2
 8000d32:	f240 8119 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d36:	3902      	subs	r1, #2
 8000d38:	4462      	add	r2, ip
 8000d3a:	1a12      	subs	r2, r2, r0
 8000d3c:	b2a4      	uxth	r4, r4
 8000d3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4a:	fb00 f505 	mul.w	r5, r0, r5
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x90>
 8000d52:	eb1c 0404 	adds.w	r4, ip, r4
 8000d56:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d5a:	f080 8107 	bcs.w	8000f6c <__udivmoddi4+0x294>
 8000d5e:	42a5      	cmp	r5, r4
 8000d60:	f240 8104 	bls.w	8000f6c <__udivmoddi4+0x294>
 8000d64:	4464      	add	r4, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d6c:	1b64      	subs	r4, r4, r5
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11e      	cbz	r6, 8000d7a <__udivmoddi4+0xa2>
 8000d72:	40dc      	lsrs	r4, r3
 8000d74:	2300      	movs	r3, #0
 8000d76:	e9c6 4300 	strd	r4, r3, [r6]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0xbc>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80ed 	beq.w	8000f62 <__udivmoddi4+0x28a>
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d94:	fab3 f183 	clz	r1, r3
 8000d98:	2900      	cmp	r1, #0
 8000d9a:	d149      	bne.n	8000e30 <__udivmoddi4+0x158>
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	d302      	bcc.n	8000da6 <__udivmoddi4+0xce>
 8000da0:	4282      	cmp	r2, r0
 8000da2:	f200 80f8 	bhi.w	8000f96 <__udivmoddi4+0x2be>
 8000da6:	1a84      	subs	r4, r0, r2
 8000da8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dac:	2001      	movs	r0, #1
 8000dae:	4617      	mov	r7, r2
 8000db0:	2e00      	cmp	r6, #0
 8000db2:	d0e2      	beq.n	8000d7a <__udivmoddi4+0xa2>
 8000db4:	e9c6 4700 	strd	r4, r7, [r6]
 8000db8:	e7df      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000dba:	b902      	cbnz	r2, 8000dbe <__udivmoddi4+0xe6>
 8000dbc:	deff      	udf	#255	; 0xff
 8000dbe:	fab2 f382 	clz	r3, r2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f040 8090 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dc8:	1a8a      	subs	r2, r1, r2
 8000dca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dce:	fa1f fe8c 	uxth.w	lr, ip
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000ddc:	0c22      	lsrs	r2, r4, #16
 8000dde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000de2:	fb0e f005 	mul.w	r0, lr, r5
 8000de6:	4290      	cmp	r0, r2
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dea:	eb1c 0202 	adds.w	r2, ip, r2
 8000dee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4290      	cmp	r0, r2
 8000df6:	f200 80cb 	bhi.w	8000f90 <__udivmoddi4+0x2b8>
 8000dfa:	4645      	mov	r5, r8
 8000dfc:	1a12      	subs	r2, r2, r0
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e04:	fb07 2210 	mls	r2, r7, r0, r2
 8000e08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x14e>
 8000e14:	eb1c 0404 	adds.w	r4, ip, r4
 8000e18:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e1c:	d202      	bcs.n	8000e24 <__udivmoddi4+0x14c>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f200 80bb 	bhi.w	8000f9a <__udivmoddi4+0x2c2>
 8000e24:	4610      	mov	r0, r2
 8000e26:	eba4 040e 	sub.w	r4, r4, lr
 8000e2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e2e:	e79f      	b.n	8000d70 <__udivmoddi4+0x98>
 8000e30:	f1c1 0720 	rsb	r7, r1, #32
 8000e34:	408b      	lsls	r3, r1
 8000e36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e42:	fa20 f307 	lsr.w	r3, r0, r7
 8000e46:	40fd      	lsrs	r5, r7
 8000e48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e4c:	4323      	orrs	r3, r4
 8000e4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	fb09 5518 	mls	r5, r9, r8, r5
 8000e5a:	0c1c      	lsrs	r4, r3, #16
 8000e5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e60:	fb08 f50e 	mul.w	r5, r8, lr
 8000e64:	42a5      	cmp	r5, r4
 8000e66:	fa02 f201 	lsl.w	r2, r2, r1
 8000e6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e78:	f080 8088 	bcs.w	8000f8c <__udivmoddi4+0x2b4>
 8000e7c:	42a5      	cmp	r5, r4
 8000e7e:	f240 8085 	bls.w	8000f8c <__udivmoddi4+0x2b4>
 8000e82:	f1a8 0802 	sub.w	r8, r8, #2
 8000e86:	4464      	add	r4, ip
 8000e88:	1b64      	subs	r4, r4, r5
 8000e8a:	b29d      	uxth	r5, r3
 8000e8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e90:	fb09 4413 	mls	r4, r9, r3, r4
 8000e94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ea8:	d26c      	bcs.n	8000f84 <__udivmoddi4+0x2ac>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	d96a      	bls.n	8000f84 <__udivmoddi4+0x2ac>
 8000eae:	3b02      	subs	r3, #2
 8000eb0:	4464      	add	r4, ip
 8000eb2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eb6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	42ac      	cmp	r4, r5
 8000ec0:	46c8      	mov	r8, r9
 8000ec2:	46ae      	mov	lr, r5
 8000ec4:	d356      	bcc.n	8000f74 <__udivmoddi4+0x29c>
 8000ec6:	d053      	beq.n	8000f70 <__udivmoddi4+0x298>
 8000ec8:	b156      	cbz	r6, 8000ee0 <__udivmoddi4+0x208>
 8000eca:	ebb0 0208 	subs.w	r2, r0, r8
 8000ece:	eb64 040e 	sbc.w	r4, r4, lr
 8000ed2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ed6:	40ca      	lsrs	r2, r1
 8000ed8:	40cc      	lsrs	r4, r1
 8000eda:	4317      	orrs	r7, r2
 8000edc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee8:	f1c3 0120 	rsb	r1, r3, #32
 8000eec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ef0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ef4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ef8:	409d      	lsls	r5, r3
 8000efa:	432a      	orrs	r2, r5
 8000efc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f00:	fa1f fe8c 	uxth.w	lr, ip
 8000f04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f08:	fb07 1510 	mls	r5, r7, r0, r1
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f12:	fb00 f50e 	mul.w	r5, r0, lr
 8000f16:	428d      	cmp	r5, r1
 8000f18:	fa04 f403 	lsl.w	r4, r4, r3
 8000f1c:	d908      	bls.n	8000f30 <__udivmoddi4+0x258>
 8000f1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f22:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f26:	d22f      	bcs.n	8000f88 <__udivmoddi4+0x2b0>
 8000f28:	428d      	cmp	r5, r1
 8000f2a:	d92d      	bls.n	8000f88 <__udivmoddi4+0x2b0>
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	4461      	add	r1, ip
 8000f30:	1b49      	subs	r1, r1, r5
 8000f32:	b292      	uxth	r2, r2
 8000f34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f38:	fb07 1115 	mls	r1, r7, r5, r1
 8000f3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f40:	fb05 f10e 	mul.w	r1, r5, lr
 8000f44:	4291      	cmp	r1, r2
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x282>
 8000f48:	eb1c 0202 	adds.w	r2, ip, r2
 8000f4c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f50:	d216      	bcs.n	8000f80 <__udivmoddi4+0x2a8>
 8000f52:	4291      	cmp	r1, r2
 8000f54:	d914      	bls.n	8000f80 <__udivmoddi4+0x2a8>
 8000f56:	3d02      	subs	r5, #2
 8000f58:	4462      	add	r2, ip
 8000f5a:	1a52      	subs	r2, r2, r1
 8000f5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f60:	e738      	b.n	8000dd4 <__udivmoddi4+0xfc>
 8000f62:	4631      	mov	r1, r6
 8000f64:	4630      	mov	r0, r6
 8000f66:	e708      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000f68:	4639      	mov	r1, r7
 8000f6a:	e6e6      	b.n	8000d3a <__udivmoddi4+0x62>
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	e6fb      	b.n	8000d68 <__udivmoddi4+0x90>
 8000f70:	4548      	cmp	r0, r9
 8000f72:	d2a9      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f74:	ebb9 0802 	subs.w	r8, r9, r2
 8000f78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	e7a3      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f80:	4645      	mov	r5, r8
 8000f82:	e7ea      	b.n	8000f5a <__udivmoddi4+0x282>
 8000f84:	462b      	mov	r3, r5
 8000f86:	e794      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f88:	4640      	mov	r0, r8
 8000f8a:	e7d1      	b.n	8000f30 <__udivmoddi4+0x258>
 8000f8c:	46d0      	mov	r8, sl
 8000f8e:	e77b      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f90:	3d02      	subs	r5, #2
 8000f92:	4462      	add	r2, ip
 8000f94:	e732      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f96:	4608      	mov	r0, r1
 8000f98:	e70a      	b.n	8000db0 <__udivmoddi4+0xd8>
 8000f9a:	4464      	add	r4, ip
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	e742      	b.n	8000e26 <__udivmoddi4+0x14e>

08000fa0 <selfrel_offset31>:
 8000fa0:	6803      	ldr	r3, [r0, #0]
 8000fa2:	005a      	lsls	r2, r3, #1
 8000fa4:	bf4c      	ite	mi
 8000fa6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000faa:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000fae:	4418      	add	r0, r3
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <search_EIT_table>:
 8000fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fb8:	b329      	cbz	r1, 8001006 <search_EIT_table+0x52>
 8000fba:	1e4f      	subs	r7, r1, #1
 8000fbc:	4604      	mov	r4, r0
 8000fbe:	4615      	mov	r5, r2
 8000fc0:	463e      	mov	r6, r7
 8000fc2:	f04f 0800 	mov.w	r8, #0
 8000fc6:	eb08 0106 	add.w	r1, r8, r6
 8000fca:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000fce:	1049      	asrs	r1, r1, #1
 8000fd0:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000fd4:	4648      	mov	r0, r9
 8000fd6:	f7ff ffe3 	bl	8000fa0 <selfrel_offset31>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	00c8      	lsls	r0, r1, #3
 8000fde:	3008      	adds	r0, #8
 8000fe0:	428f      	cmp	r7, r1
 8000fe2:	4420      	add	r0, r4
 8000fe4:	d009      	beq.n	8000ffa <search_EIT_table+0x46>
 8000fe6:	42ab      	cmp	r3, r5
 8000fe8:	d809      	bhi.n	8000ffe <search_EIT_table+0x4a>
 8000fea:	f7ff ffd9 	bl	8000fa0 <selfrel_offset31>
 8000fee:	3801      	subs	r0, #1
 8000ff0:	42a8      	cmp	r0, r5
 8000ff2:	d20a      	bcs.n	800100a <search_EIT_table+0x56>
 8000ff4:	f101 0801 	add.w	r8, r1, #1
 8000ff8:	e7e5      	b.n	8000fc6 <search_EIT_table+0x12>
 8000ffa:	42ab      	cmp	r3, r5
 8000ffc:	d905      	bls.n	800100a <search_EIT_table+0x56>
 8000ffe:	4588      	cmp	r8, r1
 8001000:	d001      	beq.n	8001006 <search_EIT_table+0x52>
 8001002:	1e4e      	subs	r6, r1, #1
 8001004:	e7df      	b.n	8000fc6 <search_EIT_table+0x12>
 8001006:	f04f 0900 	mov.w	r9, #0
 800100a:	4648      	mov	r0, r9
 800100c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001010 <__gnu_unwind_get_pr_addr>:
 8001010:	2801      	cmp	r0, #1
 8001012:	d007      	beq.n	8001024 <__gnu_unwind_get_pr_addr+0x14>
 8001014:	2802      	cmp	r0, #2
 8001016:	d007      	beq.n	8001028 <__gnu_unwind_get_pr_addr+0x18>
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <__gnu_unwind_get_pr_addr+0x1c>)
 800101a:	2800      	cmp	r0, #0
 800101c:	bf0c      	ite	eq
 800101e:	4618      	moveq	r0, r3
 8001020:	2000      	movne	r0, #0
 8001022:	4770      	bx	lr
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <__gnu_unwind_get_pr_addr+0x20>)
 8001026:	4770      	bx	lr
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <__gnu_unwind_get_pr_addr+0x24>)
 800102a:	4770      	bx	lr
 800102c:	080016e5 	.word	0x080016e5
 8001030:	080016e9 	.word	0x080016e9
 8001034:	080016ed 	.word	0x080016ed

08001038 <get_eit_entry>:
 8001038:	b530      	push	{r4, r5, lr}
 800103a:	4b22      	ldr	r3, [pc, #136]	; (80010c4 <get_eit_entry+0x8c>)
 800103c:	b083      	sub	sp, #12
 800103e:	4604      	mov	r4, r0
 8001040:	1e8d      	subs	r5, r1, #2
 8001042:	b343      	cbz	r3, 8001096 <get_eit_entry+0x5e>
 8001044:	a901      	add	r1, sp, #4
 8001046:	4628      	mov	r0, r5
 8001048:	f3af 8000 	nop.w
 800104c:	b1f0      	cbz	r0, 800108c <get_eit_entry+0x54>
 800104e:	9901      	ldr	r1, [sp, #4]
 8001050:	462a      	mov	r2, r5
 8001052:	f7ff ffaf 	bl	8000fb4 <search_EIT_table>
 8001056:	4601      	mov	r1, r0
 8001058:	b1c0      	cbz	r0, 800108c <get_eit_entry+0x54>
 800105a:	f7ff ffa1 	bl	8000fa0 <selfrel_offset31>
 800105e:	684b      	ldr	r3, [r1, #4]
 8001060:	64a0      	str	r0, [r4, #72]	; 0x48
 8001062:	2b01      	cmp	r3, #1
 8001064:	d02b      	beq.n	80010be <get_eit_entry+0x86>
 8001066:	2b00      	cmp	r3, #0
 8001068:	f101 0004 	add.w	r0, r1, #4
 800106c:	db25      	blt.n	80010ba <get_eit_entry+0x82>
 800106e:	f7ff ff97 	bl	8000fa0 <selfrel_offset31>
 8001072:	2300      	movs	r3, #0
 8001074:	6523      	str	r3, [r4, #80]	; 0x50
 8001076:	6803      	ldr	r3, [r0, #0]
 8001078:	64e0      	str	r0, [r4, #76]	; 0x4c
 800107a:	2b00      	cmp	r3, #0
 800107c:	db12      	blt.n	80010a4 <get_eit_entry+0x6c>
 800107e:	f7ff ff8f 	bl	8000fa0 <selfrel_offset31>
 8001082:	4603      	mov	r3, r0
 8001084:	2000      	movs	r0, #0
 8001086:	6123      	str	r3, [r4, #16]
 8001088:	b003      	add	sp, #12
 800108a:	bd30      	pop	{r4, r5, pc}
 800108c:	2300      	movs	r3, #0
 800108e:	2009      	movs	r0, #9
 8001090:	6123      	str	r3, [r4, #16]
 8001092:	b003      	add	sp, #12
 8001094:	bd30      	pop	{r4, r5, pc}
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <get_eit_entry+0x90>)
 8001098:	490c      	ldr	r1, [pc, #48]	; (80010cc <get_eit_entry+0x94>)
 800109a:	1ac9      	subs	r1, r1, r3
 800109c:	10c9      	asrs	r1, r1, #3
 800109e:	4618      	mov	r0, r3
 80010a0:	9101      	str	r1, [sp, #4]
 80010a2:	e7d5      	b.n	8001050 <get_eit_entry+0x18>
 80010a4:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80010a8:	f7ff ffb2 	bl	8001010 <__gnu_unwind_get_pr_addr>
 80010ac:	1e03      	subs	r3, r0, #0
 80010ae:	bf0c      	ite	eq
 80010b0:	2009      	moveq	r0, #9
 80010b2:	2000      	movne	r0, #0
 80010b4:	6123      	str	r3, [r4, #16]
 80010b6:	b003      	add	sp, #12
 80010b8:	bd30      	pop	{r4, r5, pc}
 80010ba:	2301      	movs	r3, #1
 80010bc:	e7da      	b.n	8001074 <get_eit_entry+0x3c>
 80010be:	2300      	movs	r3, #0
 80010c0:	2005      	movs	r0, #5
 80010c2:	e7e0      	b.n	8001086 <get_eit_entry+0x4e>
 80010c4:	00000000 	.word	0x00000000
 80010c8:	08019d74 	.word	0x08019d74
 80010cc:	0801ad44 	.word	0x0801ad44

080010d0 <restore_non_core_regs>:
 80010d0:	6803      	ldr	r3, [r0, #0]
 80010d2:	07da      	lsls	r2, r3, #31
 80010d4:	b510      	push	{r4, lr}
 80010d6:	4604      	mov	r4, r0
 80010d8:	d406      	bmi.n	80010e8 <restore_non_core_regs+0x18>
 80010da:	079b      	lsls	r3, r3, #30
 80010dc:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80010e0:	d509      	bpl.n	80010f6 <restore_non_core_regs+0x26>
 80010e2:	f000 fc71 	bl	80019c8 <__gnu_Unwind_Restore_VFP_D>
 80010e6:	6823      	ldr	r3, [r4, #0]
 80010e8:	0759      	lsls	r1, r3, #29
 80010ea:	d509      	bpl.n	8001100 <restore_non_core_regs+0x30>
 80010ec:	071a      	lsls	r2, r3, #28
 80010ee:	d50e      	bpl.n	800110e <restore_non_core_regs+0x3e>
 80010f0:	06db      	lsls	r3, r3, #27
 80010f2:	d513      	bpl.n	800111c <restore_non_core_regs+0x4c>
 80010f4:	bd10      	pop	{r4, pc}
 80010f6:	f000 fc5f 	bl	80019b8 <__gnu_Unwind_Restore_VFP>
 80010fa:	6823      	ldr	r3, [r4, #0]
 80010fc:	0759      	lsls	r1, r3, #29
 80010fe:	d4f5      	bmi.n	80010ec <restore_non_core_regs+0x1c>
 8001100:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001104:	f000 fc68 	bl	80019d8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001108:	6823      	ldr	r3, [r4, #0]
 800110a:	071a      	lsls	r2, r3, #28
 800110c:	d4f0      	bmi.n	80010f0 <restore_non_core_regs+0x20>
 800110e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8001112:	f000 fc69 	bl	80019e8 <__gnu_Unwind_Restore_WMMXD>
 8001116:	6823      	ldr	r3, [r4, #0]
 8001118:	06db      	lsls	r3, r3, #27
 800111a:	d4eb      	bmi.n	80010f4 <restore_non_core_regs+0x24>
 800111c:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8001120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001124:	f000 bca4 	b.w	8001a70 <__gnu_Unwind_Restore_WMMXC>

08001128 <__gnu_unwind_24bit.constprop.0>:
 8001128:	2009      	movs	r0, #9
 800112a:	4770      	bx	lr

0800112c <_Unwind_decode_typeinfo_ptr.constprop.0>:
 800112c:	4603      	mov	r3, r0
 800112e:	6800      	ldr	r0, [r0, #0]
 8001130:	b100      	cbz	r0, 8001134 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 8001132:	4418      	add	r0, r3
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop

08001138 <_Unwind_DebugHook>:
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop

0800113c <unwind_phase2>:
 800113c:	b570      	push	{r4, r5, r6, lr}
 800113e:	4604      	mov	r4, r0
 8001140:	460e      	mov	r6, r1
 8001142:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8001144:	4620      	mov	r0, r4
 8001146:	f7ff ff77 	bl	8001038 <get_eit_entry>
 800114a:	4605      	mov	r5, r0
 800114c:	b988      	cbnz	r0, 8001172 <unwind_phase2+0x36>
 800114e:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8001150:	6162      	str	r2, [r4, #20]
 8001152:	6923      	ldr	r3, [r4, #16]
 8001154:	4632      	mov	r2, r6
 8001156:	4621      	mov	r1, r4
 8001158:	2001      	movs	r0, #1
 800115a:	4798      	blx	r3
 800115c:	2808      	cmp	r0, #8
 800115e:	d0f0      	beq.n	8001142 <unwind_phase2+0x6>
 8001160:	2807      	cmp	r0, #7
 8001162:	d106      	bne.n	8001172 <unwind_phase2+0x36>
 8001164:	4628      	mov	r0, r5
 8001166:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8001168:	f7ff ffe6 	bl	8001138 <_Unwind_DebugHook>
 800116c:	1d30      	adds	r0, r6, #4
 800116e:	f000 fc17 	bl	80019a0 <__restore_core_regs>
 8001172:	f012 fe99 	bl	8013ea8 <abort>
 8001176:	bf00      	nop

08001178 <unwind_phase2_forced>:
 8001178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800117c:	1d0d      	adds	r5, r1, #4
 800117e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8001182:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8001186:	4607      	mov	r7, r0
 8001188:	4614      	mov	r4, r2
 800118a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800118c:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8001190:	f10d 0c0c 	add.w	ip, sp, #12
 8001194:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800119a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800119e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80011a4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011a8:	ae02      	add	r6, sp, #8
 80011aa:	f04f 0e00 	mov.w	lr, #0
 80011ae:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80011b2:	f8c6 e000 	str.w	lr, [r6]
 80011b6:	e020      	b.n	80011fa <unwind_phase2_forced+0x82>
 80011b8:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80011c0:	4631      	mov	r1, r6
 80011c2:	a87a      	add	r0, sp, #488	; 0x1e8
 80011c4:	f013 fdad 	bl	8014d22 <memcpy>
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	aa7a      	add	r2, sp, #488	; 0x1e8
 80011cc:	4639      	mov	r1, r7
 80011ce:	4650      	mov	r0, sl
 80011d0:	4798      	blx	r3
 80011d2:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80011d4:	6473      	str	r3, [r6, #68]	; 0x44
 80011d6:	4621      	mov	r1, r4
 80011d8:	e9cd 6900 	strd	r6, r9, [sp]
 80011dc:	4605      	mov	r5, r0
 80011de:	463b      	mov	r3, r7
 80011e0:	463a      	mov	r2, r7
 80011e2:	2001      	movs	r0, #1
 80011e4:	47c0      	blx	r8
 80011e6:	4604      	mov	r4, r0
 80011e8:	b9e0      	cbnz	r0, 8001224 <unwind_phase2_forced+0xac>
 80011ea:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80011ee:	a97a      	add	r1, sp, #488	; 0x1e8
 80011f0:	4630      	mov	r0, r6
 80011f2:	f013 fd96 	bl	8014d22 <memcpy>
 80011f6:	2d08      	cmp	r5, #8
 80011f8:	d11a      	bne.n	8001230 <unwind_phase2_forced+0xb8>
 80011fa:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80011fc:	4638      	mov	r0, r7
 80011fe:	f7ff ff1b 	bl	8001038 <get_eit_entry>
 8001202:	3409      	adds	r4, #9
 8001204:	fa5f fa84 	uxtb.w	sl, r4
 8001208:	4605      	mov	r5, r0
 800120a:	2800      	cmp	r0, #0
 800120c:	d0d4      	beq.n	80011b8 <unwind_phase2_forced+0x40>
 800120e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8001210:	6473      	str	r3, [r6, #68]	; 0x44
 8001212:	463a      	mov	r2, r7
 8001214:	e9cd 6900 	strd	r6, r9, [sp]
 8001218:	463b      	mov	r3, r7
 800121a:	f04a 0110 	orr.w	r1, sl, #16
 800121e:	2001      	movs	r0, #1
 8001220:	47c0      	blx	r8
 8001222:	b100      	cbz	r0, 8001226 <unwind_phase2_forced+0xae>
 8001224:	2509      	movs	r5, #9
 8001226:	4628      	mov	r0, r5
 8001228:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800122c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001230:	2d07      	cmp	r5, #7
 8001232:	d1f7      	bne.n	8001224 <unwind_phase2_forced+0xac>
 8001234:	4620      	mov	r0, r4
 8001236:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8001238:	f7ff ff7e 	bl	8001138 <_Unwind_DebugHook>
 800123c:	a803      	add	r0, sp, #12
 800123e:	f000 fbaf 	bl	80019a0 <__restore_core_regs>
 8001242:	bf00      	nop

08001244 <_Unwind_GetCFA>:
 8001244:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8001246:	4770      	bx	lr

08001248 <__gnu_Unwind_RaiseException>:
 8001248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800124c:	640b      	str	r3, [r1, #64]	; 0x40
 800124e:	f101 0c04 	add.w	ip, r1, #4
 8001252:	460e      	mov	r6, r1
 8001254:	4605      	mov	r5, r0
 8001256:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800125a:	b0f9      	sub	sp, #484	; 0x1e4
 800125c:	ac01      	add	r4, sp, #4
 800125e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001260:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001266:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800126a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800126c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8001270:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001274:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001278:	9700      	str	r7, [sp, #0]
 800127a:	e006      	b.n	800128a <__gnu_Unwind_RaiseException+0x42>
 800127c:	692b      	ldr	r3, [r5, #16]
 800127e:	466a      	mov	r2, sp
 8001280:	4629      	mov	r1, r5
 8001282:	4798      	blx	r3
 8001284:	2808      	cmp	r0, #8
 8001286:	4604      	mov	r4, r0
 8001288:	d108      	bne.n	800129c <__gnu_Unwind_RaiseException+0x54>
 800128a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800128c:	4628      	mov	r0, r5
 800128e:	f7ff fed3 	bl	8001038 <get_eit_entry>
 8001292:	2800      	cmp	r0, #0
 8001294:	d0f2      	beq.n	800127c <__gnu_Unwind_RaiseException+0x34>
 8001296:	2009      	movs	r0, #9
 8001298:	b079      	add	sp, #484	; 0x1e4
 800129a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800129c:	4668      	mov	r0, sp
 800129e:	f7ff ff17 	bl	80010d0 <restore_non_core_regs>
 80012a2:	2c06      	cmp	r4, #6
 80012a4:	d1f7      	bne.n	8001296 <__gnu_Unwind_RaiseException+0x4e>
 80012a6:	4631      	mov	r1, r6
 80012a8:	4628      	mov	r0, r5
 80012aa:	f7ff ff47 	bl	800113c <unwind_phase2>
 80012ae:	bf00      	nop

080012b0 <__gnu_Unwind_ForcedUnwind>:
 80012b0:	60c1      	str	r1, [r0, #12]
 80012b2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80012b4:	6182      	str	r2, [r0, #24]
 80012b6:	6419      	str	r1, [r3, #64]	; 0x40
 80012b8:	2200      	movs	r2, #0
 80012ba:	4619      	mov	r1, r3
 80012bc:	e75c      	b.n	8001178 <unwind_phase2_forced>
 80012be:	bf00      	nop

080012c0 <__gnu_Unwind_Resume>:
 80012c0:	b570      	push	{r4, r5, r6, lr}
 80012c2:	68c6      	ldr	r6, [r0, #12]
 80012c4:	6943      	ldr	r3, [r0, #20]
 80012c6:	640b      	str	r3, [r1, #64]	; 0x40
 80012c8:	b9ae      	cbnz	r6, 80012f6 <__gnu_Unwind_Resume+0x36>
 80012ca:	6903      	ldr	r3, [r0, #16]
 80012cc:	460a      	mov	r2, r1
 80012ce:	4604      	mov	r4, r0
 80012d0:	460d      	mov	r5, r1
 80012d2:	4601      	mov	r1, r0
 80012d4:	2002      	movs	r0, #2
 80012d6:	4798      	blx	r3
 80012d8:	2807      	cmp	r0, #7
 80012da:	d005      	beq.n	80012e8 <__gnu_Unwind_Resume+0x28>
 80012dc:	2808      	cmp	r0, #8
 80012de:	d10f      	bne.n	8001300 <__gnu_Unwind_Resume+0x40>
 80012e0:	4629      	mov	r1, r5
 80012e2:	4620      	mov	r0, r4
 80012e4:	f7ff ff2a 	bl	800113c <unwind_phase2>
 80012e8:	4630      	mov	r0, r6
 80012ea:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80012ec:	f7ff ff24 	bl	8001138 <_Unwind_DebugHook>
 80012f0:	1d28      	adds	r0, r5, #4
 80012f2:	f000 fb55 	bl	80019a0 <__restore_core_regs>
 80012f6:	2201      	movs	r2, #1
 80012f8:	f7ff ff3e 	bl	8001178 <unwind_phase2_forced>
 80012fc:	f012 fdd4 	bl	8013ea8 <abort>
 8001300:	f012 fdd2 	bl	8013ea8 <abort>

08001304 <__gnu_Unwind_Resume_or_Rethrow>:
 8001304:	68c2      	ldr	r2, [r0, #12]
 8001306:	b11a      	cbz	r2, 8001310 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8001308:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800130a:	640a      	str	r2, [r1, #64]	; 0x40
 800130c:	2200      	movs	r2, #0
 800130e:	e733      	b.n	8001178 <unwind_phase2_forced>
 8001310:	e79a      	b.n	8001248 <__gnu_Unwind_RaiseException>
 8001312:	bf00      	nop

08001314 <_Unwind_Complete>:
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop

08001318 <_Unwind_DeleteException>:
 8001318:	6883      	ldr	r3, [r0, #8]
 800131a:	4601      	mov	r1, r0
 800131c:	b10b      	cbz	r3, 8001322 <_Unwind_DeleteException+0xa>
 800131e:	2001      	movs	r0, #1
 8001320:	4718      	bx	r3
 8001322:	4770      	bx	lr

08001324 <_Unwind_VRS_Get>:
 8001324:	2901      	cmp	r1, #1
 8001326:	d012      	beq.n	800134e <_Unwind_VRS_Get+0x2a>
 8001328:	d809      	bhi.n	800133e <_Unwind_VRS_Get+0x1a>
 800132a:	b973      	cbnz	r3, 800134a <_Unwind_VRS_Get+0x26>
 800132c:	2a0f      	cmp	r2, #15
 800132e:	d80c      	bhi.n	800134a <_Unwind_VRS_Get+0x26>
 8001330:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001334:	4618      	mov	r0, r3
 8001336:	6853      	ldr	r3, [r2, #4]
 8001338:	9a00      	ldr	r2, [sp, #0]
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4770      	bx	lr
 800133e:	3903      	subs	r1, #3
 8001340:	2901      	cmp	r1, #1
 8001342:	bf94      	ite	ls
 8001344:	2001      	movls	r0, #1
 8001346:	2002      	movhi	r0, #2
 8001348:	4770      	bx	lr
 800134a:	2002      	movs	r0, #2
 800134c:	4770      	bx	lr
 800134e:	4608      	mov	r0, r1
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop

08001354 <_Unwind_GetGR>:
 8001354:	b500      	push	{lr}
 8001356:	b085      	sub	sp, #20
 8001358:	460a      	mov	r2, r1
 800135a:	2300      	movs	r3, #0
 800135c:	a903      	add	r1, sp, #12
 800135e:	9100      	str	r1, [sp, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	f7ff ffdf 	bl	8001324 <_Unwind_VRS_Get>
 8001366:	9803      	ldr	r0, [sp, #12]
 8001368:	b005      	add	sp, #20
 800136a:	f85d fb04 	ldr.w	pc, [sp], #4
 800136e:	bf00      	nop

08001370 <_Unwind_VRS_Set>:
 8001370:	2901      	cmp	r1, #1
 8001372:	d012      	beq.n	800139a <_Unwind_VRS_Set+0x2a>
 8001374:	d809      	bhi.n	800138a <_Unwind_VRS_Set+0x1a>
 8001376:	b973      	cbnz	r3, 8001396 <_Unwind_VRS_Set+0x26>
 8001378:	2a0f      	cmp	r2, #15
 800137a:	d80c      	bhi.n	8001396 <_Unwind_VRS_Set+0x26>
 800137c:	9900      	ldr	r1, [sp, #0]
 800137e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001382:	6809      	ldr	r1, [r1, #0]
 8001384:	6051      	str	r1, [r2, #4]
 8001386:	4618      	mov	r0, r3
 8001388:	4770      	bx	lr
 800138a:	3903      	subs	r1, #3
 800138c:	2901      	cmp	r1, #1
 800138e:	bf94      	ite	ls
 8001390:	2001      	movls	r0, #1
 8001392:	2002      	movhi	r0, #2
 8001394:	4770      	bx	lr
 8001396:	2002      	movs	r0, #2
 8001398:	4770      	bx	lr
 800139a:	4608      	mov	r0, r1
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop

080013a0 <_Unwind_SetGR>:
 80013a0:	b510      	push	{r4, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	2300      	movs	r3, #0
 80013a6:	ac03      	add	r4, sp, #12
 80013a8:	9203      	str	r2, [sp, #12]
 80013aa:	9400      	str	r4, [sp, #0]
 80013ac:	460a      	mov	r2, r1
 80013ae:	4619      	mov	r1, r3
 80013b0:	f7ff ffde 	bl	8001370 <_Unwind_VRS_Set>
 80013b4:	b004      	add	sp, #16
 80013b6:	bd10      	pop	{r4, pc}

080013b8 <__gnu_Unwind_Backtrace>:
 80013b8:	b570      	push	{r4, r5, r6, lr}
 80013ba:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80013bc:	6413      	str	r3, [r2, #64]	; 0x40
 80013be:	f102 0c04 	add.w	ip, r2, #4
 80013c2:	4605      	mov	r5, r0
 80013c4:	460c      	mov	r4, r1
 80013c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80013ca:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 80013ce:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 80013d2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80013d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80013da:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80013de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80013e2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80013e6:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80013ea:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80013ee:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80013f2:	9616      	str	r6, [sp, #88]	; 0x58
 80013f4:	e010      	b.n	8001418 <__gnu_Unwind_Backtrace+0x60>
 80013f6:	f7ff ffd3 	bl	80013a0 <_Unwind_SetGR>
 80013fa:	4621      	mov	r1, r4
 80013fc:	a816      	add	r0, sp, #88	; 0x58
 80013fe:	47a8      	blx	r5
 8001400:	4603      	mov	r3, r0
 8001402:	aa16      	add	r2, sp, #88	; 0x58
 8001404:	4669      	mov	r1, sp
 8001406:	2008      	movs	r0, #8
 8001408:	b983      	cbnz	r3, 800142c <__gnu_Unwind_Backtrace+0x74>
 800140a:	9b04      	ldr	r3, [sp, #16]
 800140c:	4798      	blx	r3
 800140e:	2805      	cmp	r0, #5
 8001410:	4606      	mov	r6, r0
 8001412:	d00c      	beq.n	800142e <__gnu_Unwind_Backtrace+0x76>
 8001414:	2809      	cmp	r0, #9
 8001416:	d009      	beq.n	800142c <__gnu_Unwind_Backtrace+0x74>
 8001418:	9926      	ldr	r1, [sp, #152]	; 0x98
 800141a:	4668      	mov	r0, sp
 800141c:	f7ff fe0c 	bl	8001038 <get_eit_entry>
 8001420:	4603      	mov	r3, r0
 8001422:	466a      	mov	r2, sp
 8001424:	210c      	movs	r1, #12
 8001426:	a816      	add	r0, sp, #88	; 0x58
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0e4      	beq.n	80013f6 <__gnu_Unwind_Backtrace+0x3e>
 800142c:	2609      	movs	r6, #9
 800142e:	a816      	add	r0, sp, #88	; 0x58
 8001430:	f7ff fe4e 	bl	80010d0 <restore_non_core_regs>
 8001434:	4630      	mov	r0, r6
 8001436:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 800143a:	bd70      	pop	{r4, r5, r6, pc}

0800143c <__gnu_unwind_pr_common>:
 800143c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001440:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8001442:	b089      	sub	sp, #36	; 0x24
 8001444:	461e      	mov	r6, r3
 8001446:	f854 3b04 	ldr.w	r3, [r4], #4
 800144a:	9406      	str	r4, [sp, #24]
 800144c:	460d      	mov	r5, r1
 800144e:	4617      	mov	r7, r2
 8001450:	f000 0803 	and.w	r8, r0, #3
 8001454:	2e00      	cmp	r6, #0
 8001456:	d079      	beq.n	800154c <__gnu_unwind_pr_common+0x110>
 8001458:	0c1a      	lsrs	r2, r3, #16
 800145a:	f88d 201d 	strb.w	r2, [sp, #29]
 800145e:	041b      	lsls	r3, r3, #16
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	9305      	str	r3, [sp, #20]
 8001464:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8001468:	2302      	movs	r3, #2
 800146a:	f88d 301c 	strb.w	r3, [sp, #28]
 800146e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8001470:	f1b8 0f02 	cmp.w	r8, #2
 8001474:	bf08      	it	eq
 8001476:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8001478:	f013 0301 	ands.w	r3, r3, #1
 800147c:	d00c      	beq.n	8001498 <__gnu_unwind_pr_common+0x5c>
 800147e:	a905      	add	r1, sp, #20
 8001480:	4638      	mov	r0, r7
 8001482:	f000 fb8f 	bl	8001ba4 <__gnu_unwind_execute>
 8001486:	b918      	cbnz	r0, 8001490 <__gnu_unwind_pr_common+0x54>
 8001488:	2008      	movs	r0, #8
 800148a:	b009      	add	sp, #36	; 0x24
 800148c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001490:	2009      	movs	r0, #9
 8001492:	b009      	add	sp, #36	; 0x24
 8001494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001498:	f8d4 a000 	ldr.w	sl, [r4]
 800149c:	f1ba 0f00 	cmp.w	sl, #0
 80014a0:	d0ed      	beq.n	800147e <__gnu_unwind_pr_common+0x42>
 80014a2:	9301      	str	r3, [sp, #4]
 80014a4:	f000 0308 	and.w	r3, r0, #8
 80014a8:	9302      	str	r3, [sp, #8]
 80014aa:	2e02      	cmp	r6, #2
 80014ac:	d04a      	beq.n	8001544 <__gnu_unwind_pr_common+0x108>
 80014ae:	f8b4 a000 	ldrh.w	sl, [r4]
 80014b2:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 80014b6:	3404      	adds	r4, #4
 80014b8:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80014ba:	f029 0b01 	bic.w	fp, r9, #1
 80014be:	210f      	movs	r1, #15
 80014c0:	4638      	mov	r0, r7
 80014c2:	449b      	add	fp, r3
 80014c4:	f7ff ff46 	bl	8001354 <_Unwind_GetGR>
 80014c8:	4583      	cmp	fp, r0
 80014ca:	d839      	bhi.n	8001540 <__gnu_unwind_pr_common+0x104>
 80014cc:	f02a 0201 	bic.w	r2, sl, #1
 80014d0:	445a      	add	r2, fp
 80014d2:	4282      	cmp	r2, r0
 80014d4:	bf94      	ite	ls
 80014d6:	2200      	movls	r2, #0
 80014d8:	2201      	movhi	r2, #1
 80014da:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	f00a 0a01 	and.w	sl, sl, #1
 80014e6:	ea43 030a 	orr.w	r3, r3, sl
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d04b      	beq.n	8001586 <__gnu_unwind_pr_common+0x14a>
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d032      	beq.n	8001558 <__gnu_unwind_pr_common+0x11c>
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1cc      	bne.n	8001490 <__gnu_unwind_pr_common+0x54>
 80014f6:	f1b8 0f00 	cmp.w	r8, #0
 80014fa:	d002      	beq.n	8001502 <__gnu_unwind_pr_common+0xc6>
 80014fc:	2a00      	cmp	r2, #0
 80014fe:	f040 80cd 	bne.w	800169c <__gnu_unwind_pr_common+0x260>
 8001502:	3404      	adds	r4, #4
 8001504:	f8d4 a000 	ldr.w	sl, [r4]
 8001508:	f1ba 0f00 	cmp.w	sl, #0
 800150c:	d1cd      	bne.n	80014aa <__gnu_unwind_pr_common+0x6e>
 800150e:	a905      	add	r1, sp, #20
 8001510:	4638      	mov	r0, r7
 8001512:	f000 fb47 	bl	8001ba4 <__gnu_unwind_execute>
 8001516:	2800      	cmp	r0, #0
 8001518:	d1ba      	bne.n	8001490 <__gnu_unwind_pr_common+0x54>
 800151a:	9b01      	ldr	r3, [sp, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0b3      	beq.n	8001488 <__gnu_unwind_pr_common+0x4c>
 8001520:	210f      	movs	r1, #15
 8001522:	4638      	mov	r0, r7
 8001524:	f7ff ff16 	bl	8001354 <_Unwind_GetGR>
 8001528:	210e      	movs	r1, #14
 800152a:	4602      	mov	r2, r0
 800152c:	4638      	mov	r0, r7
 800152e:	f7ff ff37 	bl	80013a0 <_Unwind_SetGR>
 8001532:	4638      	mov	r0, r7
 8001534:	4a6a      	ldr	r2, [pc, #424]	; (80016e0 <__gnu_unwind_pr_common+0x2a4>)
 8001536:	210f      	movs	r1, #15
 8001538:	f7ff ff32 	bl	80013a0 <_Unwind_SetGR>
 800153c:	2007      	movs	r0, #7
 800153e:	e7a8      	b.n	8001492 <__gnu_unwind_pr_common+0x56>
 8001540:	2200      	movs	r2, #0
 8001542:	e7ca      	b.n	80014da <__gnu_unwind_pr_common+0x9e>
 8001544:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8001548:	3408      	adds	r4, #8
 800154a:	e7b5      	b.n	80014b8 <__gnu_unwind_pr_common+0x7c>
 800154c:	021b      	lsls	r3, r3, #8
 800154e:	9305      	str	r3, [sp, #20]
 8001550:	f88d 601d 	strb.w	r6, [sp, #29]
 8001554:	2303      	movs	r3, #3
 8001556:	e788      	b.n	800146a <__gnu_unwind_pr_common+0x2e>
 8001558:	f8d4 9000 	ldr.w	r9, [r4]
 800155c:	f029 4b00 	bic.w	fp, r9, #2147483648	; 0x80000000
 8001560:	f1b8 0f00 	cmp.w	r8, #0
 8001564:	d146      	bne.n	80015f4 <__gnu_unwind_pr_common+0x1b8>
 8001566:	b12a      	cbz	r2, 8001574 <__gnu_unwind_pr_common+0x138>
 8001568:	9b02      	ldr	r3, [sp, #8]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d05b      	beq.n	8001626 <__gnu_unwind_pr_common+0x1ea>
 800156e:	f1bb 0f00 	cmp.w	fp, #0
 8001572:	d073      	beq.n	800165c <__gnu_unwind_pr_common+0x220>
 8001574:	f1b9 0f00 	cmp.w	r9, #0
 8001578:	da00      	bge.n	800157c <__gnu_unwind_pr_common+0x140>
 800157a:	3404      	adds	r4, #4
 800157c:	f10b 0b01 	add.w	fp, fp, #1
 8001580:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8001584:	e7be      	b.n	8001504 <__gnu_unwind_pr_common+0xc8>
 8001586:	f1b8 0f00 	cmp.w	r8, #0
 800158a:	d119      	bne.n	80015c0 <__gnu_unwind_pr_common+0x184>
 800158c:	b1b2      	cbz	r2, 80015bc <__gnu_unwind_pr_common+0x180>
 800158e:	6861      	ldr	r1, [r4, #4]
 8001590:	6822      	ldr	r2, [r4, #0]
 8001592:	1c88      	adds	r0, r1, #2
 8001594:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8001598:	f43f af7a 	beq.w	8001490 <__gnu_unwind_pr_common+0x54>
 800159c:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80015a0:	3101      	adds	r1, #1
 80015a2:	9304      	str	r3, [sp, #16]
 80015a4:	f000 808e 	beq.w	80016c4 <__gnu_unwind_pr_common+0x288>
 80015a8:	1d20      	adds	r0, r4, #4
 80015aa:	f7ff fdbf 	bl	800112c <_Unwind_decode_typeinfo_ptr.constprop.0>
 80015ae:	ab04      	add	r3, sp, #16
 80015b0:	4601      	mov	r1, r0
 80015b2:	4628      	mov	r0, r5
 80015b4:	f011 febe 	bl	8013334 <__cxa_type_match>
 80015b8:	2800      	cmp	r0, #0
 80015ba:	d159      	bne.n	8001670 <__gnu_unwind_pr_common+0x234>
 80015bc:	3408      	adds	r4, #8
 80015be:	e7a1      	b.n	8001504 <__gnu_unwind_pr_common+0xc8>
 80015c0:	210d      	movs	r1, #13
 80015c2:	4638      	mov	r0, r7
 80015c4:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80015c8:	f7ff fec4 	bl	8001354 <_Unwind_GetGR>
 80015cc:	4581      	cmp	r9, r0
 80015ce:	d1f5      	bne.n	80015bc <__gnu_unwind_pr_common+0x180>
 80015d0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80015d2:	429c      	cmp	r4, r3
 80015d4:	d1f2      	bne.n	80015bc <__gnu_unwind_pr_common+0x180>
 80015d6:	4620      	mov	r0, r4
 80015d8:	f7ff fce2 	bl	8000fa0 <selfrel_offset31>
 80015dc:	210f      	movs	r1, #15
 80015de:	4602      	mov	r2, r0
 80015e0:	4638      	mov	r0, r7
 80015e2:	f7ff fedd 	bl	80013a0 <_Unwind_SetGR>
 80015e6:	4638      	mov	r0, r7
 80015e8:	462a      	mov	r2, r5
 80015ea:	2100      	movs	r1, #0
 80015ec:	f7ff fed8 	bl	80013a0 <_Unwind_SetGR>
 80015f0:	2007      	movs	r0, #7
 80015f2:	e74e      	b.n	8001492 <__gnu_unwind_pr_common+0x56>
 80015f4:	210d      	movs	r1, #13
 80015f6:	4638      	mov	r0, r7
 80015f8:	f8d5 a020 	ldr.w	sl, [r5, #32]
 80015fc:	f7ff feaa 	bl	8001354 <_Unwind_GetGR>
 8001600:	4582      	cmp	sl, r0
 8001602:	d1b7      	bne.n	8001574 <__gnu_unwind_pr_common+0x138>
 8001604:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001606:	429c      	cmp	r4, r3
 8001608:	d1b4      	bne.n	8001574 <__gnu_unwind_pr_common+0x138>
 800160a:	2304      	movs	r3, #4
 800160c:	2200      	movs	r2, #0
 800160e:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 8001612:	18e3      	adds	r3, r4, r3
 8001614:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 8001618:	636b      	str	r3, [r5, #52]	; 0x34
 800161a:	6823      	ldr	r3, [r4, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	db59      	blt.n	80016d4 <__gnu_unwind_pr_common+0x298>
 8001620:	2301      	movs	r3, #1
 8001622:	9301      	str	r3, [sp, #4]
 8001624:	e7aa      	b.n	800157c <__gnu_unwind_pr_common+0x140>
 8001626:	4699      	mov	r9, r3
 8001628:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800162c:	f8cd 800c 	str.w	r8, [sp, #12]
 8001630:	f104 0a04 	add.w	sl, r4, #4
 8001634:	46b0      	mov	r8, r6
 8001636:	461e      	mov	r6, r3
 8001638:	e00e      	b.n	8001658 <__gnu_unwind_pr_common+0x21c>
 800163a:	4650      	mov	r0, sl
 800163c:	9604      	str	r6, [sp, #16]
 800163e:	f7ff fd75 	bl	800112c <_Unwind_decode_typeinfo_ptr.constprop.0>
 8001642:	2200      	movs	r2, #0
 8001644:	4601      	mov	r1, r0
 8001646:	ab04      	add	r3, sp, #16
 8001648:	4628      	mov	r0, r5
 800164a:	f109 0901 	add.w	r9, r9, #1
 800164e:	f10a 0a04 	add.w	sl, sl, #4
 8001652:	f011 fe6f 	bl	8013334 <__cxa_type_match>
 8001656:	b9d8      	cbnz	r0, 8001690 <__gnu_unwind_pr_common+0x254>
 8001658:	45d9      	cmp	r9, fp
 800165a:	d1ee      	bne.n	800163a <__gnu_unwind_pr_common+0x1fe>
 800165c:	210d      	movs	r1, #13
 800165e:	4638      	mov	r0, r7
 8001660:	f7ff fe78 	bl	8001354 <_Unwind_GetGR>
 8001664:	9b04      	ldr	r3, [sp, #16]
 8001666:	6228      	str	r0, [r5, #32]
 8001668:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 800166c:	2006      	movs	r0, #6
 800166e:	e710      	b.n	8001492 <__gnu_unwind_pr_common+0x56>
 8001670:	4681      	mov	r9, r0
 8001672:	210d      	movs	r1, #13
 8001674:	4638      	mov	r0, r7
 8001676:	f7ff fe6d 	bl	8001354 <_Unwind_GetGR>
 800167a:	f1b9 0f02 	cmp.w	r9, #2
 800167e:	bf04      	itt	eq
 8001680:	462b      	moveq	r3, r5
 8001682:	9a04      	ldreq	r2, [sp, #16]
 8001684:	6228      	str	r0, [r5, #32]
 8001686:	bf14      	ite	ne
 8001688:	9b04      	ldrne	r3, [sp, #16]
 800168a:	f843 2f2c 	streq.w	r2, [r3, #44]!
 800168e:	e7eb      	b.n	8001668 <__gnu_unwind_pr_common+0x22c>
 8001690:	4646      	mov	r6, r8
 8001692:	f8d4 9000 	ldr.w	r9, [r4]
 8001696:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800169a:	e76b      	b.n	8001574 <__gnu_unwind_pr_common+0x138>
 800169c:	4620      	mov	r0, r4
 800169e:	f7ff fc7f 	bl	8000fa0 <selfrel_offset31>
 80016a2:	3404      	adds	r4, #4
 80016a4:	4602      	mov	r2, r0
 80016a6:	63ac      	str	r4, [r5, #56]	; 0x38
 80016a8:	4628      	mov	r0, r5
 80016aa:	4614      	mov	r4, r2
 80016ac:	f011 fea0 	bl	80133f0 <__cxa_begin_cleanup>
 80016b0:	2800      	cmp	r0, #0
 80016b2:	f43f aeed 	beq.w	8001490 <__gnu_unwind_pr_common+0x54>
 80016b6:	4638      	mov	r0, r7
 80016b8:	4622      	mov	r2, r4
 80016ba:	210f      	movs	r1, #15
 80016bc:	f7ff fe70 	bl	80013a0 <_Unwind_SetGR>
 80016c0:	2007      	movs	r0, #7
 80016c2:	e6e6      	b.n	8001492 <__gnu_unwind_pr_common+0x56>
 80016c4:	210d      	movs	r1, #13
 80016c6:	4638      	mov	r0, r7
 80016c8:	9301      	str	r3, [sp, #4]
 80016ca:	f7ff fe43 	bl	8001354 <_Unwind_GetGR>
 80016ce:	9b01      	ldr	r3, [sp, #4]
 80016d0:	6228      	str	r0, [r5, #32]
 80016d2:	e7c9      	b.n	8001668 <__gnu_unwind_pr_common+0x22c>
 80016d4:	f10b 0001 	add.w	r0, fp, #1
 80016d8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80016dc:	e77c      	b.n	80015d8 <__gnu_unwind_pr_common+0x19c>
 80016de:	bf00      	nop
 80016e0:	08013de5 	.word	0x08013de5

080016e4 <__aeabi_unwind_cpp_pr0>:
 80016e4:	2300      	movs	r3, #0
 80016e6:	e6a9      	b.n	800143c <__gnu_unwind_pr_common>

080016e8 <__aeabi_unwind_cpp_pr1>:
 80016e8:	2301      	movs	r3, #1
 80016ea:	e6a7      	b.n	800143c <__gnu_unwind_pr_common>

080016ec <__aeabi_unwind_cpp_pr2>:
 80016ec:	2302      	movs	r3, #2
 80016ee:	e6a5      	b.n	800143c <__gnu_unwind_pr_common>

080016f0 <_Unwind_VRS_Pop>:
 80016f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016f4:	4606      	mov	r6, r0
 80016f6:	b0c3      	sub	sp, #268	; 0x10c
 80016f8:	4691      	mov	r9, r2
 80016fa:	461c      	mov	r4, r3
 80016fc:	2904      	cmp	r1, #4
 80016fe:	f200 809b 	bhi.w	8001838 <_Unwind_VRS_Pop+0x148>
 8001702:	e8df f001 	tbb	[pc, r1]
 8001706:	567b      	.short	0x567b
 8001708:	2e99      	.short	0x2e99
 800170a:	03          	.byte	0x03
 800170b:	00          	.byte	0x00
 800170c:	2c00      	cmp	r4, #0
 800170e:	f040 8093 	bne.w	8001838 <_Unwind_VRS_Pop+0x148>
 8001712:	2a10      	cmp	r2, #16
 8001714:	f200 8090 	bhi.w	8001838 <_Unwind_VRS_Pop+0x148>
 8001718:	6803      	ldr	r3, [r0, #0]
 800171a:	06dc      	lsls	r4, r3, #27
 800171c:	f100 80f3 	bmi.w	8001906 <_Unwind_VRS_Pop+0x216>
 8001720:	af20      	add	r7, sp, #128	; 0x80
 8001722:	4638      	mov	r0, r7
 8001724:	f000 f9ae 	bl	8001a84 <__gnu_Unwind_Save_WMMXC>
 8001728:	6bb4      	ldr	r4, [r6, #56]	; 0x38
 800172a:	4639      	mov	r1, r7
 800172c:	2300      	movs	r3, #0
 800172e:	f04f 0c01 	mov.w	ip, #1
 8001732:	fa0c f203 	lsl.w	r2, ip, r3
 8001736:	ea12 0f09 	tst.w	r2, r9
 800173a:	4620      	mov	r0, r4
 800173c:	f103 0301 	add.w	r3, r3, #1
 8001740:	d003      	beq.n	800174a <_Unwind_VRS_Pop+0x5a>
 8001742:	f850 2b04 	ldr.w	r2, [r0], #4
 8001746:	600a      	str	r2, [r1, #0]
 8001748:	4604      	mov	r4, r0
 800174a:	2b04      	cmp	r3, #4
 800174c:	f101 0104 	add.w	r1, r1, #4
 8001750:	d1ef      	bne.n	8001732 <_Unwind_VRS_Pop+0x42>
 8001752:	4638      	mov	r0, r7
 8001754:	63b4      	str	r4, [r6, #56]	; 0x38
 8001756:	f000 f98b 	bl	8001a70 <__gnu_Unwind_Restore_WMMXC>
 800175a:	2000      	movs	r0, #0
 800175c:	b043      	add	sp, #268	; 0x10c
 800175e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001762:	2c03      	cmp	r4, #3
 8001764:	d168      	bne.n	8001838 <_Unwind_VRS_Pop+0x148>
 8001766:	b294      	uxth	r4, r2
 8001768:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 800176c:	2b10      	cmp	r3, #16
 800176e:	ea4f 4912 	mov.w	r9, r2, lsr #16
 8001772:	d861      	bhi.n	8001838 <_Unwind_VRS_Pop+0x148>
 8001774:	6803      	ldr	r3, [r0, #0]
 8001776:	071d      	lsls	r5, r3, #28
 8001778:	f100 80cd 	bmi.w	8001916 <_Unwind_VRS_Pop+0x226>
 800177c:	af20      	add	r7, sp, #128	; 0x80
 800177e:	4638      	mov	r0, r7
 8001780:	f000 f954 	bl	8001a2c <__gnu_Unwind_Save_WMMXD>
 8001784:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8001786:	eb07 01c9 	add.w	r1, r7, r9, lsl #3
 800178a:	b154      	cbz	r4, 80017a2 <_Unwind_VRS_Pop+0xb2>
 800178c:	460b      	mov	r3, r1
 800178e:	1ad0      	subs	r0, r2, r3
 8001790:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8001794:	00e4      	lsls	r4, r4, #3
 8001796:	581d      	ldr	r5, [r3, r0]
 8001798:	f843 5b04 	str.w	r5, [r3], #4
 800179c:	428b      	cmp	r3, r1
 800179e:	d1fa      	bne.n	8001796 <_Unwind_VRS_Pop+0xa6>
 80017a0:	4422      	add	r2, r4
 80017a2:	4638      	mov	r0, r7
 80017a4:	63b2      	str	r2, [r6, #56]	; 0x38
 80017a6:	f000 f91f 	bl	80019e8 <__gnu_Unwind_Restore_WMMXD>
 80017aa:	2000      	movs	r0, #0
 80017ac:	b043      	add	sp, #268	; 0x10c
 80017ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017b2:	2c01      	cmp	r4, #1
 80017b4:	ea4f 4812 	mov.w	r8, r2, lsr #16
 80017b8:	fa1f f982 	uxth.w	r9, r2
 80017bc:	d038      	beq.n	8001830 <_Unwind_VRS_Pop+0x140>
 80017be:	2c05      	cmp	r4, #5
 80017c0:	d13a      	bne.n	8001838 <_Unwind_VRS_Pop+0x148>
 80017c2:	eb08 0309 	add.w	r3, r8, r9
 80017c6:	2b20      	cmp	r3, #32
 80017c8:	d836      	bhi.n	8001838 <_Unwind_VRS_Pop+0x148>
 80017ca:	f1b8 0f0f 	cmp.w	r8, #15
 80017ce:	d976      	bls.n	80018be <_Unwind_VRS_Pop+0x1ce>
 80017d0:	f1b9 0f00 	cmp.w	r9, #0
 80017d4:	f040 8083 	bne.w	80018de <_Unwind_VRS_Pop+0x1ee>
 80017d8:	2b0f      	cmp	r3, #15
 80017da:	d80b      	bhi.n	80017f4 <_Unwind_VRS_Pop+0x104>
 80017dc:	6833      	ldr	r3, [r6, #0]
 80017de:	07d8      	lsls	r0, r3, #31
 80017e0:	d508      	bpl.n	80017f4 <_Unwind_VRS_Pop+0x104>
 80017e2:	4630      	mov	r0, r6
 80017e4:	f023 0301 	bic.w	r3, r3, #1
 80017e8:	f043 0302 	orr.w	r3, r3, #2
 80017ec:	f840 3b48 	str.w	r3, [r0], #72
 80017f0:	f000 f8ee 	bl	80019d0 <__gnu_Unwind_Save_VFP_D>
 80017f4:	2000      	movs	r0, #0
 80017f6:	b043      	add	sp, #268	; 0x10c
 80017f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017fc:	b9e4      	cbnz	r4, 8001838 <_Unwind_VRS_Pop+0x148>
 80017fe:	6b87      	ldr	r7, [r0, #56]	; 0x38
 8001800:	4623      	mov	r3, r4
 8001802:	fa1f fc82 	uxth.w	ip, r2
 8001806:	2001      	movs	r0, #1
 8001808:	1d34      	adds	r4, r6, #4
 800180a:	fa00 f203 	lsl.w	r2, r0, r3
 800180e:	ea12 0f0c 	tst.w	r2, ip
 8001812:	4639      	mov	r1, r7
 8001814:	d004      	beq.n	8001820 <_Unwind_VRS_Pop+0x130>
 8001816:	f851 2b04 	ldr.w	r2, [r1], #4
 800181a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 800181e:	460f      	mov	r7, r1
 8001820:	3301      	adds	r3, #1
 8001822:	2b10      	cmp	r3, #16
 8001824:	d1f1      	bne.n	800180a <_Unwind_VRS_Pop+0x11a>
 8001826:	f419 5000 	ands.w	r0, r9, #8192	; 0x2000
 800182a:	d1e3      	bne.n	80017f4 <_Unwind_VRS_Pop+0x104>
 800182c:	63b7      	str	r7, [r6, #56]	; 0x38
 800182e:	e004      	b.n	800183a <_Unwind_VRS_Pop+0x14a>
 8001830:	eb08 0309 	add.w	r3, r8, r9
 8001834:	2b10      	cmp	r3, #16
 8001836:	d903      	bls.n	8001840 <_Unwind_VRS_Pop+0x150>
 8001838:	2002      	movs	r0, #2
 800183a:	b043      	add	sp, #268	; 0x10c
 800183c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001840:	f1b8 0f0f 	cmp.w	r8, #15
 8001844:	d8f8      	bhi.n	8001838 <_Unwind_VRS_Pop+0x148>
 8001846:	6833      	ldr	r3, [r6, #0]
 8001848:	07da      	lsls	r2, r3, #31
 800184a:	d506      	bpl.n	800185a <_Unwind_VRS_Pop+0x16a>
 800184c:	4630      	mov	r0, r6
 800184e:	f023 0303 	bic.w	r3, r3, #3
 8001852:	f840 3b48 	str.w	r3, [r0], #72
 8001856:	f000 f8b3 	bl	80019c0 <__gnu_Unwind_Save_VFP>
 800185a:	af20      	add	r7, sp, #128	; 0x80
 800185c:	4638      	mov	r0, r7
 800185e:	464d      	mov	r5, r9
 8001860:	f000 f8ae 	bl	80019c0 <__gnu_Unwind_Save_VFP>
 8001864:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8001866:	2d00      	cmp	r5, #0
 8001868:	d05e      	beq.n	8001928 <_Unwind_VRS_Pop+0x238>
 800186a:	f04f 0900 	mov.w	r9, #0
 800186e:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8001872:	eb02 03c5 	add.w	r3, r2, r5, lsl #3
 8001876:	3904      	subs	r1, #4
 8001878:	f852 0b04 	ldr.w	r0, [r2], #4
 800187c:	f841 0f04 	str.w	r0, [r1, #4]!
 8001880:	429a      	cmp	r2, r3
 8001882:	d1f9      	bne.n	8001878 <_Unwind_VRS_Pop+0x188>
 8001884:	f1b9 0f00 	cmp.w	r9, #0
 8001888:	d054      	beq.n	8001934 <_Unwind_VRS_Pop+0x244>
 800188a:	466f      	mov	r7, sp
 800188c:	4641      	mov	r1, r8
 800188e:	2910      	cmp	r1, #16
 8001890:	bf38      	it	cc
 8001892:	2110      	movcc	r1, #16
 8001894:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8001898:	3984      	subs	r1, #132	; 0x84
 800189a:	eb03 02c9 	add.w	r2, r3, r9, lsl #3
 800189e:	f853 5b04 	ldr.w	r5, [r3], #4
 80018a2:	f841 5f04 	str.w	r5, [r1, #4]!
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d1f9      	bne.n	800189e <_Unwind_VRS_Pop+0x1ae>
 80018aa:	2c01      	cmp	r4, #1
 80018ac:	d03b      	beq.n	8001926 <_Unwind_VRS_Pop+0x236>
 80018ae:	f1b8 0f0f 	cmp.w	r8, #15
 80018b2:	63b2      	str	r2, [r6, #56]	; 0x38
 80018b4:	d958      	bls.n	8001968 <_Unwind_VRS_Pop+0x278>
 80018b6:	4638      	mov	r0, r7
 80018b8:	f000 f88e 	bl	80019d8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80018bc:	e79a      	b.n	80017f4 <_Unwind_VRS_Pop+0x104>
 80018be:	2b10      	cmp	r3, #16
 80018c0:	d954      	bls.n	800196c <_Unwind_VRS_Pop+0x27c>
 80018c2:	6832      	ldr	r2, [r6, #0]
 80018c4:	07d7      	lsls	r7, r2, #31
 80018c6:	f1a3 0910 	sub.w	r9, r3, #16
 80018ca:	d509      	bpl.n	80018e0 <_Unwind_VRS_Pop+0x1f0>
 80018cc:	f022 0301 	bic.w	r3, r2, #1
 80018d0:	4630      	mov	r0, r6
 80018d2:	f043 0302 	orr.w	r3, r3, #2
 80018d6:	f840 3b48 	str.w	r3, [r0], #72
 80018da:	f000 f879 	bl	80019d0 <__gnu_Unwind_Save_VFP_D>
 80018de:	6832      	ldr	r2, [r6, #0]
 80018e0:	0753      	lsls	r3, r2, #29
 80018e2:	d439      	bmi.n	8001958 <_Unwind_VRS_Pop+0x268>
 80018e4:	f1b8 0f0f 	cmp.w	r8, #15
 80018e8:	d802      	bhi.n	80018f0 <_Unwind_VRS_Pop+0x200>
 80018ea:	a820      	add	r0, sp, #128	; 0x80
 80018ec:	f000 f870 	bl	80019d0 <__gnu_Unwind_Save_VFP_D>
 80018f0:	466f      	mov	r7, sp
 80018f2:	4638      	mov	r0, r7
 80018f4:	f1c8 0510 	rsb	r5, r8, #16
 80018f8:	f000 f872 	bl	80019e0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80018fc:	2d00      	cmp	r5, #0
 80018fe:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8001900:	dd28      	ble.n	8001954 <_Unwind_VRS_Pop+0x264>
 8001902:	af20      	add	r7, sp, #128	; 0x80
 8001904:	e7b3      	b.n	800186e <_Unwind_VRS_Pop+0x17e>
 8001906:	f023 0310 	bic.w	r3, r3, #16
 800190a:	6003      	str	r3, [r0, #0]
 800190c:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
 8001910:	f000 f8b8 	bl	8001a84 <__gnu_Unwind_Save_WMMXC>
 8001914:	e704      	b.n	8001720 <_Unwind_VRS_Pop+0x30>
 8001916:	f023 0308 	bic.w	r3, r3, #8
 800191a:	6003      	str	r3, [r0, #0]
 800191c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8001920:	f000 f884 	bl	8001a2c <__gnu_Unwind_Save_WMMXD>
 8001924:	e72a      	b.n	800177c <_Unwind_VRS_Pop+0x8c>
 8001926:	af20      	add	r7, sp, #128	; 0x80
 8001928:	3204      	adds	r2, #4
 800192a:	63b2      	str	r2, [r6, #56]	; 0x38
 800192c:	4638      	mov	r0, r7
 800192e:	f000 f843 	bl	80019b8 <__gnu_Unwind_Restore_VFP>
 8001932:	e75f      	b.n	80017f4 <_Unwind_VRS_Pop+0x104>
 8001934:	2c01      	cmp	r4, #1
 8001936:	d0f7      	beq.n	8001928 <_Unwind_VRS_Pop+0x238>
 8001938:	f1b8 0f0f 	cmp.w	r8, #15
 800193c:	63b2      	str	r2, [r6, #56]	; 0x38
 800193e:	f63f af59 	bhi.w	80017f4 <_Unwind_VRS_Pop+0x104>
 8001942:	4638      	mov	r0, r7
 8001944:	f000 f840 	bl	80019c8 <__gnu_Unwind_Restore_VFP_D>
 8001948:	f1b9 0f00 	cmp.w	r9, #0
 800194c:	f43f af52 	beq.w	80017f4 <_Unwind_VRS_Pop+0x104>
 8001950:	466f      	mov	r7, sp
 8001952:	e7b0      	b.n	80018b6 <_Unwind_VRS_Pop+0x1c6>
 8001954:	4613      	mov	r3, r2
 8001956:	e799      	b.n	800188c <_Unwind_VRS_Pop+0x19c>
 8001958:	4630      	mov	r0, r6
 800195a:	f022 0204 	bic.w	r2, r2, #4
 800195e:	f840 2bd0 	str.w	r2, [r0], #208
 8001962:	f000 f83d 	bl	80019e0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001966:	e7bd      	b.n	80018e4 <_Unwind_VRS_Pop+0x1f4>
 8001968:	af20      	add	r7, sp, #128	; 0x80
 800196a:	e7ea      	b.n	8001942 <_Unwind_VRS_Pop+0x252>
 800196c:	6833      	ldr	r3, [r6, #0]
 800196e:	07d9      	lsls	r1, r3, #31
 8001970:	d508      	bpl.n	8001984 <_Unwind_VRS_Pop+0x294>
 8001972:	f023 0301 	bic.w	r3, r3, #1
 8001976:	4630      	mov	r0, r6
 8001978:	f043 0302 	orr.w	r3, r3, #2
 800197c:	f840 3b48 	str.w	r3, [r0], #72
 8001980:	f000 f826 	bl	80019d0 <__gnu_Unwind_Save_VFP_D>
 8001984:	af20      	add	r7, sp, #128	; 0x80
 8001986:	4638      	mov	r0, r7
 8001988:	464d      	mov	r5, r9
 800198a:	f000 f821 	bl	80019d0 <__gnu_Unwind_Save_VFP_D>
 800198e:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8001990:	2d00      	cmp	r5, #0
 8001992:	f47f af6a 	bne.w	800186a <_Unwind_VRS_Pop+0x17a>
 8001996:	4638      	mov	r0, r7
 8001998:	f000 f816 	bl	80019c8 <__gnu_Unwind_Restore_VFP_D>
 800199c:	e72a      	b.n	80017f4 <_Unwind_VRS_Pop+0x104>
 800199e:	bf00      	nop

080019a0 <__restore_core_regs>:
 80019a0:	f100 0134 	add.w	r1, r0, #52	; 0x34
 80019a4:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 80019a8:	469c      	mov	ip, r3
 80019aa:	46a6      	mov	lr, r4
 80019ac:	f84c 5d04 	str.w	r5, [ip, #-4]!
 80019b0:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80019b4:	46e5      	mov	sp, ip
 80019b6:	bd00      	pop	{pc}

080019b8 <__gnu_Unwind_Restore_VFP>:
 80019b8:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop

080019c0 <__gnu_Unwind_Save_VFP>:
 80019c0:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop

080019c8 <__gnu_Unwind_Restore_VFP_D>:
 80019c8:	ec90 0b20 	vldmia	r0, {d0-d15}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop

080019d0 <__gnu_Unwind_Save_VFP_D>:
 80019d0:	ec80 0b20 	vstmia	r0, {d0-d15}
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop

080019d8 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80019d8:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop

080019e0 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80019e0:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop

080019e8 <__gnu_Unwind_Restore_WMMXD>:
 80019e8:	ecf0 0102 	ldfe	f0, [r0], #8
 80019ec:	ecf0 1102 	ldfe	f1, [r0], #8
 80019f0:	ecf0 2102 	ldfe	f2, [r0], #8
 80019f4:	ecf0 3102 	ldfe	f3, [r0], #8
 80019f8:	ecf0 4102 	ldfe	f4, [r0], #8
 80019fc:	ecf0 5102 	ldfe	f5, [r0], #8
 8001a00:	ecf0 6102 	ldfe	f6, [r0], #8
 8001a04:	ecf0 7102 	ldfe	f7, [r0], #8
 8001a08:	ecf0 8102 	ldfp	f0, [r0], #8
 8001a0c:	ecf0 9102 	ldfp	f1, [r0], #8
 8001a10:	ecf0 a102 	ldfp	f2, [r0], #8
 8001a14:	ecf0 b102 	ldfp	f3, [r0], #8
 8001a18:	ecf0 c102 	ldfp	f4, [r0], #8
 8001a1c:	ecf0 d102 	ldfp	f5, [r0], #8
 8001a20:	ecf0 e102 	ldfp	f6, [r0], #8
 8001a24:	ecf0 f102 	ldfp	f7, [r0], #8
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop

08001a2c <__gnu_Unwind_Save_WMMXD>:
 8001a2c:	ece0 0102 	stfe	f0, [r0], #8
 8001a30:	ece0 1102 	stfe	f1, [r0], #8
 8001a34:	ece0 2102 	stfe	f2, [r0], #8
 8001a38:	ece0 3102 	stfe	f3, [r0], #8
 8001a3c:	ece0 4102 	stfe	f4, [r0], #8
 8001a40:	ece0 5102 	stfe	f5, [r0], #8
 8001a44:	ece0 6102 	stfe	f6, [r0], #8
 8001a48:	ece0 7102 	stfe	f7, [r0], #8
 8001a4c:	ece0 8102 	stfp	f0, [r0], #8
 8001a50:	ece0 9102 	stfp	f1, [r0], #8
 8001a54:	ece0 a102 	stfp	f2, [r0], #8
 8001a58:	ece0 b102 	stfp	f3, [r0], #8
 8001a5c:	ece0 c102 	stfp	f4, [r0], #8
 8001a60:	ece0 d102 	stfp	f5, [r0], #8
 8001a64:	ece0 e102 	stfp	f6, [r0], #8
 8001a68:	ece0 f102 	stfp	f7, [r0], #8
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop

08001a70 <__gnu_Unwind_Restore_WMMXC>:
 8001a70:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001a74:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001a78:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001a7c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop

08001a84 <__gnu_Unwind_Save_WMMXC>:
 8001a84:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001a88:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001a8c:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001a90:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop

08001a98 <_Unwind_RaiseException>:
 8001a98:	46ec      	mov	ip, sp
 8001a9a:	b500      	push	{lr}
 8001a9c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001aa0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001aac:	a901      	add	r1, sp, #4
 8001aae:	f7ff fbcb 	bl	8001248 <__gnu_Unwind_RaiseException>
 8001ab2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001ab6:	b012      	add	sp, #72	; 0x48
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop

08001abc <_Unwind_Resume>:
 8001abc:	46ec      	mov	ip, sp
 8001abe:	b500      	push	{lr}
 8001ac0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001ac4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001ad0:	a901      	add	r1, sp, #4
 8001ad2:	f7ff fbf5 	bl	80012c0 <__gnu_Unwind_Resume>
 8001ad6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001ada:	b012      	add	sp, #72	; 0x48
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop

08001ae0 <_Unwind_Resume_or_Rethrow>:
 8001ae0:	46ec      	mov	ip, sp
 8001ae2:	b500      	push	{lr}
 8001ae4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001ae8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001aec:	f04f 0300 	mov.w	r3, #0
 8001af0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001af4:	a901      	add	r1, sp, #4
 8001af6:	f7ff fc05 	bl	8001304 <__gnu_Unwind_Resume_or_Rethrow>
 8001afa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001afe:	b012      	add	sp, #72	; 0x48
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop

08001b04 <_Unwind_ForcedUnwind>:
 8001b04:	46ec      	mov	ip, sp
 8001b06:	b500      	push	{lr}
 8001b08:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001b0c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001b10:	f04f 0300 	mov.w	r3, #0
 8001b14:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001b18:	ab01      	add	r3, sp, #4
 8001b1a:	f7ff fbc9 	bl	80012b0 <__gnu_Unwind_ForcedUnwind>
 8001b1e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001b22:	b012      	add	sp, #72	; 0x48
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop

08001b28 <_Unwind_Backtrace>:
 8001b28:	46ec      	mov	ip, sp
 8001b2a:	b500      	push	{lr}
 8001b2c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001b30:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001b34:	f04f 0300 	mov.w	r3, #0
 8001b38:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001b3c:	aa01      	add	r2, sp, #4
 8001b3e:	f7ff fc3b 	bl	80013b8 <__gnu_Unwind_Backtrace>
 8001b42:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001b46:	b012      	add	sp, #72	; 0x48
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop

08001b4c <next_unwind_byte>:
 8001b4c:	7a02      	ldrb	r2, [r0, #8]
 8001b4e:	4603      	mov	r3, r0
 8001b50:	b97a      	cbnz	r2, 8001b72 <next_unwind_byte+0x26>
 8001b52:	7a42      	ldrb	r2, [r0, #9]
 8001b54:	b1a2      	cbz	r2, 8001b80 <next_unwind_byte+0x34>
 8001b56:	6841      	ldr	r1, [r0, #4]
 8001b58:	3a01      	subs	r2, #1
 8001b5a:	b410      	push	{r4}
 8001b5c:	7242      	strb	r2, [r0, #9]
 8001b5e:	6808      	ldr	r0, [r1, #0]
 8001b60:	2203      	movs	r2, #3
 8001b62:	1d0c      	adds	r4, r1, #4
 8001b64:	721a      	strb	r2, [r3, #8]
 8001b66:	0202      	lsls	r2, r0, #8
 8001b68:	605c      	str	r4, [r3, #4]
 8001b6a:	0e00      	lsrs	r0, r0, #24
 8001b6c:	bc10      	pop	{r4}
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	4770      	bx	lr
 8001b72:	6800      	ldr	r0, [r0, #0]
 8001b74:	3a01      	subs	r2, #1
 8001b76:	721a      	strb	r2, [r3, #8]
 8001b78:	0202      	lsls	r2, r0, #8
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	0e00      	lsrs	r0, r0, #24
 8001b7e:	4770      	bx	lr
 8001b80:	20b0      	movs	r0, #176	; 0xb0
 8001b82:	4770      	bx	lr

08001b84 <_Unwind_GetGR.constprop.0>:
 8001b84:	b500      	push	{lr}
 8001b86:	b085      	sub	sp, #20
 8001b88:	2300      	movs	r3, #0
 8001b8a:	aa03      	add	r2, sp, #12
 8001b8c:	9200      	str	r2, [sp, #0]
 8001b8e:	4619      	mov	r1, r3
 8001b90:	220c      	movs	r2, #12
 8001b92:	f7ff fbc7 	bl	8001324 <_Unwind_VRS_Get>
 8001b96:	9803      	ldr	r0, [sp, #12]
 8001b98:	b005      	add	sp, #20
 8001b9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b9e:	bf00      	nop

08001ba0 <unwind_UCB_from_context>:
 8001ba0:	e7f0      	b.n	8001b84 <_Unwind_GetGR.constprop.0>
 8001ba2:	bf00      	nop

08001ba4 <__gnu_unwind_execute>:
 8001ba4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ba8:	b085      	sub	sp, #20
 8001baa:	4607      	mov	r7, r0
 8001bac:	460e      	mov	r6, r1
 8001bae:	f04f 0800 	mov.w	r8, #0
 8001bb2:	ad03      	add	r5, sp, #12
 8001bb4:	4630      	mov	r0, r6
 8001bb6:	f7ff ffc9 	bl	8001b4c <next_unwind_byte>
 8001bba:	28b0      	cmp	r0, #176	; 0xb0
 8001bbc:	4604      	mov	r4, r0
 8001bbe:	f000 80cb 	beq.w	8001d58 <__gnu_unwind_execute+0x1b4>
 8001bc2:	0603      	lsls	r3, r0, #24
 8001bc4:	d540      	bpl.n	8001c48 <__gnu_unwind_execute+0xa4>
 8001bc6:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001bca:	2b80      	cmp	r3, #128	; 0x80
 8001bcc:	d056      	beq.n	8001c7c <__gnu_unwind_execute+0xd8>
 8001bce:	2bb0      	cmp	r3, #176	; 0xb0
 8001bd0:	d07d      	beq.n	8001cce <__gnu_unwind_execute+0x12a>
 8001bd2:	d81c      	bhi.n	8001c0e <__gnu_unwind_execute+0x6a>
 8001bd4:	2b90      	cmp	r3, #144	; 0x90
 8001bd6:	f000 8093 	beq.w	8001d00 <__gnu_unwind_execute+0x15c>
 8001bda:	2ba0      	cmp	r3, #160	; 0xa0
 8001bdc:	d113      	bne.n	8001c06 <__gnu_unwind_execute+0x62>
 8001bde:	43c3      	mvns	r3, r0
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001be8:	411a      	asrs	r2, r3
 8001bea:	0701      	lsls	r1, r0, #28
 8001bec:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001bf0:	f04f 0300 	mov.w	r3, #0
 8001bf4:	bf48      	it	mi
 8001bf6:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4638      	mov	r0, r7
 8001bfe:	f7ff fd77 	bl	80016f0 <_Unwind_VRS_Pop>
 8001c02:	2800      	cmp	r0, #0
 8001c04:	d0d6      	beq.n	8001bb4 <__gnu_unwind_execute+0x10>
 8001c06:	2009      	movs	r0, #9
 8001c08:	b005      	add	sp, #20
 8001c0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c0e:	2bc0      	cmp	r3, #192	; 0xc0
 8001c10:	d14b      	bne.n	8001caa <__gnu_unwind_execute+0x106>
 8001c12:	28c6      	cmp	r0, #198	; 0xc6
 8001c14:	f000 8089 	beq.w	8001d2a <__gnu_unwind_execute+0x186>
 8001c18:	28c7      	cmp	r0, #199	; 0xc7
 8001c1a:	f000 80a2 	beq.w	8001d62 <__gnu_unwind_execute+0x1be>
 8001c1e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001c22:	2bc0      	cmp	r3, #192	; 0xc0
 8001c24:	f000 80bc 	beq.w	8001da0 <__gnu_unwind_execute+0x1fc>
 8001c28:	28c8      	cmp	r0, #200	; 0xc8
 8001c2a:	f000 80bf 	beq.w	8001dac <__gnu_unwind_execute+0x208>
 8001c2e:	28c9      	cmp	r0, #201	; 0xc9
 8001c30:	d1e9      	bne.n	8001c06 <__gnu_unwind_execute+0x62>
 8001c32:	4630      	mov	r0, r6
 8001c34:	f7ff ff8a 	bl	8001b4c <next_unwind_byte>
 8001c38:	0302      	lsls	r2, r0, #12
 8001c3a:	f000 000f 	and.w	r0, r0, #15
 8001c3e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001c42:	3001      	adds	r0, #1
 8001c44:	4302      	orrs	r2, r0
 8001c46:	e039      	b.n	8001cbc <__gnu_unwind_execute+0x118>
 8001c48:	0083      	lsls	r3, r0, #2
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	f103 0904 	add.w	r9, r3, #4
 8001c50:	2300      	movs	r3, #0
 8001c52:	4619      	mov	r1, r3
 8001c54:	9500      	str	r5, [sp, #0]
 8001c56:	220d      	movs	r2, #13
 8001c58:	4638      	mov	r0, r7
 8001c5a:	f7ff fb63 	bl	8001324 <_Unwind_VRS_Get>
 8001c5e:	9b03      	ldr	r3, [sp, #12]
 8001c60:	0660      	lsls	r0, r4, #25
 8001c62:	bf4c      	ite	mi
 8001c64:	eba3 0309 	submi.w	r3, r3, r9
 8001c68:	444b      	addpl	r3, r9
 8001c6a:	9303      	str	r3, [sp, #12]
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	9500      	str	r5, [sp, #0]
 8001c70:	220d      	movs	r2, #13
 8001c72:	4619      	mov	r1, r3
 8001c74:	4638      	mov	r0, r7
 8001c76:	f7ff fb7b 	bl	8001370 <_Unwind_VRS_Set>
 8001c7a:	e79b      	b.n	8001bb4 <__gnu_unwind_execute+0x10>
 8001c7c:	0204      	lsls	r4, r0, #8
 8001c7e:	4630      	mov	r0, r6
 8001c80:	f7ff ff64 	bl	8001b4c <next_unwind_byte>
 8001c84:	4320      	orrs	r0, r4
 8001c86:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001c8a:	d0bc      	beq.n	8001c06 <__gnu_unwind_execute+0x62>
 8001c8c:	0104      	lsls	r4, r0, #4
 8001c8e:	2300      	movs	r3, #0
 8001c90:	b2a2      	uxth	r2, r4
 8001c92:	4619      	mov	r1, r3
 8001c94:	4638      	mov	r0, r7
 8001c96:	f7ff fd2b 	bl	80016f0 <_Unwind_VRS_Pop>
 8001c9a:	2800      	cmp	r0, #0
 8001c9c:	d1b3      	bne.n	8001c06 <__gnu_unwind_execute+0x62>
 8001c9e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001ca2:	bf18      	it	ne
 8001ca4:	f04f 0801 	movne.w	r8, #1
 8001ca8:	e784      	b.n	8001bb4 <__gnu_unwind_execute+0x10>
 8001caa:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001cae:	2bd0      	cmp	r3, #208	; 0xd0
 8001cb0:	d1a9      	bne.n	8001c06 <__gnu_unwind_execute+0x62>
 8001cb2:	f000 0207 	and.w	r2, r0, #7
 8001cb6:	3201      	adds	r2, #1
 8001cb8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001cbc:	2305      	movs	r3, #5
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	4638      	mov	r0, r7
 8001cc2:	f7ff fd15 	bl	80016f0 <_Unwind_VRS_Pop>
 8001cc6:	2800      	cmp	r0, #0
 8001cc8:	f43f af74 	beq.w	8001bb4 <__gnu_unwind_execute+0x10>
 8001ccc:	e79b      	b.n	8001c06 <__gnu_unwind_execute+0x62>
 8001cce:	28b1      	cmp	r0, #177	; 0xb1
 8001cd0:	d037      	beq.n	8001d42 <__gnu_unwind_execute+0x19e>
 8001cd2:	28b2      	cmp	r0, #178	; 0xb2
 8001cd4:	f000 8087 	beq.w	8001de6 <__gnu_unwind_execute+0x242>
 8001cd8:	28b3      	cmp	r0, #179	; 0xb3
 8001cda:	d056      	beq.n	8001d8a <__gnu_unwind_execute+0x1e6>
 8001cdc:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001ce0:	2bb4      	cmp	r3, #180	; 0xb4
 8001ce2:	d090      	beq.n	8001c06 <__gnu_unwind_execute+0x62>
 8001ce4:	f000 0207 	and.w	r2, r0, #7
 8001ce8:	3201      	adds	r2, #1
 8001cea:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001cee:	2301      	movs	r3, #1
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4638      	mov	r0, r7
 8001cf4:	f7ff fcfc 	bl	80016f0 <_Unwind_VRS_Pop>
 8001cf8:	2800      	cmp	r0, #0
 8001cfa:	f43f af5b 	beq.w	8001bb4 <__gnu_unwind_execute+0x10>
 8001cfe:	e782      	b.n	8001c06 <__gnu_unwind_execute+0x62>
 8001d00:	f000 030d 	and.w	r3, r0, #13
 8001d04:	2b0d      	cmp	r3, #13
 8001d06:	f43f af7e 	beq.w	8001c06 <__gnu_unwind_execute+0x62>
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f000 020f 	and.w	r2, r0, #15
 8001d10:	4619      	mov	r1, r3
 8001d12:	9500      	str	r5, [sp, #0]
 8001d14:	4638      	mov	r0, r7
 8001d16:	f7ff fb05 	bl	8001324 <_Unwind_VRS_Get>
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	9500      	str	r5, [sp, #0]
 8001d1e:	220d      	movs	r2, #13
 8001d20:	4619      	mov	r1, r3
 8001d22:	4638      	mov	r0, r7
 8001d24:	f7ff fb24 	bl	8001370 <_Unwind_VRS_Set>
 8001d28:	e744      	b.n	8001bb4 <__gnu_unwind_execute+0x10>
 8001d2a:	4630      	mov	r0, r6
 8001d2c:	f7ff ff0e 	bl	8001b4c <next_unwind_byte>
 8001d30:	0302      	lsls	r2, r0, #12
 8001d32:	f000 000f 	and.w	r0, r0, #15
 8001d36:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001d3a:	3001      	adds	r0, #1
 8001d3c:	4302      	orrs	r2, r0
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e7d6      	b.n	8001cf0 <__gnu_unwind_execute+0x14c>
 8001d42:	4630      	mov	r0, r6
 8001d44:	f7ff ff02 	bl	8001b4c <next_unwind_byte>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	2800      	cmp	r0, #0
 8001d4c:	f43f af5b 	beq.w	8001c06 <__gnu_unwind_execute+0x62>
 8001d50:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001d54:	d0cc      	beq.n	8001cf0 <__gnu_unwind_execute+0x14c>
 8001d56:	e756      	b.n	8001c06 <__gnu_unwind_execute+0x62>
 8001d58:	f1b8 0f00 	cmp.w	r8, #0
 8001d5c:	d032      	beq.n	8001dc4 <__gnu_unwind_execute+0x220>
 8001d5e:	2000      	movs	r0, #0
 8001d60:	e752      	b.n	8001c08 <__gnu_unwind_execute+0x64>
 8001d62:	4630      	mov	r0, r6
 8001d64:	f7ff fef2 	bl	8001b4c <next_unwind_byte>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	2800      	cmp	r0, #0
 8001d6c:	f43f af4b 	beq.w	8001c06 <__gnu_unwind_execute+0x62>
 8001d70:	f010 0ff0 	tst.w	r0, #240	; 0xf0
 8001d74:	f47f af47 	bne.w	8001c06 <__gnu_unwind_execute+0x62>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	2104      	movs	r1, #4
 8001d7c:	4638      	mov	r0, r7
 8001d7e:	f7ff fcb7 	bl	80016f0 <_Unwind_VRS_Pop>
 8001d82:	2800      	cmp	r0, #0
 8001d84:	f43f af16 	beq.w	8001bb4 <__gnu_unwind_execute+0x10>
 8001d88:	e73d      	b.n	8001c06 <__gnu_unwind_execute+0x62>
 8001d8a:	4630      	mov	r0, r6
 8001d8c:	f7ff fede 	bl	8001b4c <next_unwind_byte>
 8001d90:	0302      	lsls	r2, r0, #12
 8001d92:	f000 000f 	and.w	r0, r0, #15
 8001d96:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001d9a:	3001      	adds	r0, #1
 8001d9c:	4302      	orrs	r2, r0
 8001d9e:	e7a6      	b.n	8001cee <__gnu_unwind_execute+0x14a>
 8001da0:	f000 020f 	and.w	r2, r0, #15
 8001da4:	3201      	adds	r2, #1
 8001da6:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001daa:	e7c8      	b.n	8001d3e <__gnu_unwind_execute+0x19a>
 8001dac:	4630      	mov	r0, r6
 8001dae:	f7ff fecd 	bl	8001b4c <next_unwind_byte>
 8001db2:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001db6:	f000 030f 	and.w	r3, r0, #15
 8001dba:	3210      	adds	r2, #16
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001dc2:	e77b      	b.n	8001cbc <__gnu_unwind_execute+0x118>
 8001dc4:	ac03      	add	r4, sp, #12
 8001dc6:	4643      	mov	r3, r8
 8001dc8:	220e      	movs	r2, #14
 8001dca:	4641      	mov	r1, r8
 8001dcc:	9400      	str	r4, [sp, #0]
 8001dce:	4638      	mov	r0, r7
 8001dd0:	f7ff faa8 	bl	8001324 <_Unwind_VRS_Get>
 8001dd4:	9400      	str	r4, [sp, #0]
 8001dd6:	4643      	mov	r3, r8
 8001dd8:	220f      	movs	r2, #15
 8001dda:	4641      	mov	r1, r8
 8001ddc:	4638      	mov	r0, r7
 8001dde:	f7ff fac7 	bl	8001370 <_Unwind_VRS_Set>
 8001de2:	4640      	mov	r0, r8
 8001de4:	e710      	b.n	8001c08 <__gnu_unwind_execute+0x64>
 8001de6:	2300      	movs	r3, #0
 8001de8:	220d      	movs	r2, #13
 8001dea:	4619      	mov	r1, r3
 8001dec:	9500      	str	r5, [sp, #0]
 8001dee:	4638      	mov	r0, r7
 8001df0:	f7ff fa98 	bl	8001324 <_Unwind_VRS_Get>
 8001df4:	4630      	mov	r0, r6
 8001df6:	f7ff fea9 	bl	8001b4c <next_unwind_byte>
 8001dfa:	0602      	lsls	r2, r0, #24
 8001dfc:	9c03      	ldr	r4, [sp, #12]
 8001dfe:	f04f 0902 	mov.w	r9, #2
 8001e02:	d50c      	bpl.n	8001e1e <__gnu_unwind_execute+0x27a>
 8001e04:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001e08:	fa00 f009 	lsl.w	r0, r0, r9
 8001e0c:	4404      	add	r4, r0
 8001e0e:	4630      	mov	r0, r6
 8001e10:	9403      	str	r4, [sp, #12]
 8001e12:	f7ff fe9b 	bl	8001b4c <next_unwind_byte>
 8001e16:	0603      	lsls	r3, r0, #24
 8001e18:	f109 0907 	add.w	r9, r9, #7
 8001e1c:	d4f2      	bmi.n	8001e04 <__gnu_unwind_execute+0x260>
 8001e1e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 8001e22:	fa03 f309 	lsl.w	r3, r3, r9
 8001e26:	f504 7401 	add.w	r4, r4, #516	; 0x204
 8001e2a:	4423      	add	r3, r4
 8001e2c:	e71d      	b.n	8001c6a <__gnu_unwind_execute+0xc6>
 8001e2e:	bf00      	nop

08001e30 <__gnu_unwind_frame>:
 8001e30:	b510      	push	{r4, lr}
 8001e32:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001e34:	6853      	ldr	r3, [r2, #4]
 8001e36:	b084      	sub	sp, #16
 8001e38:	f04f 0c03 	mov.w	ip, #3
 8001e3c:	3208      	adds	r2, #8
 8001e3e:	021c      	lsls	r4, r3, #8
 8001e40:	4608      	mov	r0, r1
 8001e42:	0e1b      	lsrs	r3, r3, #24
 8001e44:	a901      	add	r1, sp, #4
 8001e46:	9401      	str	r4, [sp, #4]
 8001e48:	9202      	str	r2, [sp, #8]
 8001e4a:	f88d c00c 	strb.w	ip, [sp, #12]
 8001e4e:	f88d 300d 	strb.w	r3, [sp, #13]
 8001e52:	f7ff fea7 	bl	8001ba4 <__gnu_unwind_execute>
 8001e56:	b004      	add	sp, #16
 8001e58:	bd10      	pop	{r4, pc}
 8001e5a:	bf00      	nop

08001e5c <_Unwind_GetRegionStart>:
 8001e5c:	b508      	push	{r3, lr}
 8001e5e:	f7ff fe9f 	bl	8001ba0 <unwind_UCB_from_context>
 8001e62:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001e64:	bd08      	pop	{r3, pc}
 8001e66:	bf00      	nop

08001e68 <_Unwind_GetLanguageSpecificData>:
 8001e68:	b508      	push	{r3, lr}
 8001e6a:	f7ff fe99 	bl	8001ba0 <unwind_UCB_from_context>
 8001e6e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001e70:	79c3      	ldrb	r3, [r0, #7]
 8001e72:	3302      	adds	r3, #2
 8001e74:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001e78:	bd08      	pop	{r3, pc}
 8001e7a:	bf00      	nop

08001e7c <__aeabi_idiv0>:
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop

08001e80 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>:
	 * @param standby_reset_port port name of the STBY\RST pin of the xnucleo shield.
	 * @param standby_reset_pin pin of the STBY\RST pin of the xnucleo shield.
	 * @param ssel_port     port name of the SSEL pin used for SPI communication.
	 * @param ssel_pin     pin of the SSEL used for SPI communication.
	 */
	XNucleoIHM02A1(L6470_init_t *init_0, L6470_init_t *init_1, SPI_HandleTypeDef *spi, GPIO_TypeDef* standby_reset_port  ,uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin) :spi(spi), standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin)
 8001e80:	b590      	push	{r4, r7, lr}
 8001e82:	b08b      	sub	sp, #44	; 0x2c
 8001e84:	af02      	add	r7, sp, #8
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	603b      	str	r3, [r7, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e98:	619a      	str	r2, [r3, #24]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001e9e:	839a      	strh	r2, [r3, #28]
	{
	    HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8001ea0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001ea8:	f00d fffa 	bl	800fea0 <HAL_GPIO_WritePin>


	    if( shield_1::count == 0)
 8001eac:	4b65      	ldr	r3, [pc, #404]	; (8002044 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1c4>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d125      	bne.n	8001f00 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x80>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001eb4:	2008      	movs	r0, #8
 8001eb6:	f011 fdf1 	bl	8013a9c <_Znaj>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
 8001ec6:	e017      	b.n	8001ef8 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x78>
	    	{
				motor_drivers[i] = new L6470<shield_1>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001ec8:	206c      	movs	r0, #108	; 0x6c
 8001eca:	f011 fdd6 	bl	8013a7a <_Znwj>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	461c      	mov	r4, r3
 8001ed2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ede:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ee0:	4620      	mov	r0, r4
 8001ee2:	f000 f9ab 	bl	800223c <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	61fb      	str	r3, [r7, #28]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	dde4      	ble.n	8001ec8 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x48>
 8001efe:	e061      	b.n	8001fc4 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x144>
	    	}
	    }
	    else if( shield_2::count == 0)
 8001f00:	4b51      	ldr	r3, [pc, #324]	; (8002048 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1c8>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d125      	bne.n	8001f54 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xd4>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001f08:	2008      	movs	r0, #8
 8001f0a:	f011 fdc7 	bl	8013a9c <_Znaj>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	461a      	mov	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f16:	2300      	movs	r3, #0
 8001f18:	61bb      	str	r3, [r7, #24]
 8001f1a:	e017      	b.n	8001f4c <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xcc>
	    	{
				motor_drivers[i] = new L6470<shield_2>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001f1c:	206c      	movs	r0, #108	; 0x6c
 8001f1e:	f011 fdac 	bl	8013a7a <_Znwj>
 8001f22:	4603      	mov	r3, r0
 8001f24:	461c      	mov	r4, r3
 8001f26:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	9301      	str	r3, [sp, #4]
 8001f2c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f34:	4620      	mov	r0, r4
 8001f36:	f000 f9f3 	bl	8002320 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	61bb      	str	r3, [r7, #24]
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	dde4      	ble.n	8001f1c <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x9c>
 8001f52:	e037      	b.n	8001fc4 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x144>
	    	}
	    }
	    else if( shield_3::count == 0)
 8001f54:	4b3d      	ldr	r3, [pc, #244]	; (800204c <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1cc>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d125      	bne.n	8001fa8 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x128>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001f5c:	2008      	movs	r0, #8
 8001f5e:	f011 fd9d 	bl	8013a9c <_Znaj>
 8001f62:	4603      	mov	r3, r0
 8001f64:	461a      	mov	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	e017      	b.n	8001fa0 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x120>
	    	{
				motor_drivers[i] = new L6470<shield_3>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001f70:	206c      	movs	r0, #108	; 0x6c
 8001f72:	f011 fd82 	bl	8013a7a <_Znwj>
 8001f76:	4603      	mov	r3, r0
 8001f78:	461c      	mov	r4, r3
 8001f7a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	9301      	str	r3, [sp, #4]
 8001f80:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f88:	4620      	mov	r0, r4
 8001f8a:	f000 fa3b 	bl	8002404 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	dde4      	ble.n	8001f70 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xf0>
 8001fa6:	e00d      	b.n	8001fc4 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x144>
	    	}
	    }
	    else
	    {
	    	throw std::runtime_error("Cannot create more than 3 shields");
 8001fa8:	2008      	movs	r0, #8
 8001faa:	f011 f965 	bl	8013278 <__cxa_allocate_exception>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	461c      	mov	r4, r3
 8001fb2:	4927      	ldr	r1, [pc, #156]	; (8002050 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1d0>)
 8001fb4:	4620      	mov	r0, r4
 8001fb6:	f011 fe6f 	bl	8013c98 <_ZNSt13runtime_errorC1EPKc>
 8001fba:	4a26      	ldr	r2, [pc, #152]	; (8002054 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1d4>)
 8001fbc:	4926      	ldr	r1, [pc, #152]	; (8002058 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1d8>)
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	f011 fd40 	bl	8013a44 <__cxa_throw>




	    /* Initializing the motor_drivers. */
	    init_motor_drivers[0] = init_0;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	68ba      	ldr	r2, [r7, #8]
 8001fc8:	609a      	str	r2, [r3, #8]
	    init_motor_drivers[1] = init_1;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	60da      	str	r2, [r3, #12]
	    if (!init()) {
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f000 f845 	bl	8002060 <_ZNK14XNucleoIHM02A14initEv>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	f083 0301 	eor.w	r3, r3, #1
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00d      	beq.n	8001ffe <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x17e>
	        /*Do nothing*/
	    	throw std::runtime_error("init failed");
 8001fe2:	2008      	movs	r0, #8
 8001fe4:	f011 f948 	bl	8013278 <__cxa_allocate_exception>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	461c      	mov	r4, r3
 8001fec:	491b      	ldr	r1, [pc, #108]	; (800205c <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1dc>)
 8001fee:	4620      	mov	r0, r4
 8001ff0:	f011 fe52 	bl	8013c98 <_ZNSt13runtime_errorC1EPKc>
 8001ff4:	4a17      	ldr	r2, [pc, #92]	; (8002054 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1d4>)
 8001ff6:	4918      	ldr	r1, [pc, #96]	; (8002058 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1d8>)
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	f011 fd23 	bl	8013a44 <__cxa_throw>
	    }
	}
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	e01b      	b.n	800203a <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1ba>
				motor_drivers[i] = new L6470<shield_1>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8002002:	216c      	movs	r1, #108	; 0x6c
 8002004:	4620      	mov	r0, r4
 8002006:	f011 f8d9 	bl	80131bc <_ZdlPvj>
 800200a:	f011 f96f 	bl	80132ec <__cxa_end_cleanup>
				motor_drivers[i] = new L6470<shield_2>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 800200e:	216c      	movs	r1, #108	; 0x6c
 8002010:	4620      	mov	r0, r4
 8002012:	f011 f8d3 	bl	80131bc <_ZdlPvj>
 8002016:	f011 f969 	bl	80132ec <__cxa_end_cleanup>
				motor_drivers[i] = new L6470<shield_3>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 800201a:	216c      	movs	r1, #108	; 0x6c
 800201c:	4620      	mov	r0, r4
 800201e:	f011 f8cd 	bl	80131bc <_ZdlPvj>
 8002022:	f011 f963 	bl	80132ec <__cxa_end_cleanup>
	    	throw std::runtime_error("Cannot create more than 3 shields");
 8002026:	4620      	mov	r0, r4
 8002028:	f011 f93c 	bl	80132a4 <__cxa_free_exception>
 800202c:	f011 f95e 	bl	80132ec <__cxa_end_cleanup>
	    	throw std::runtime_error("init failed");
 8002030:	4620      	mov	r0, r4
 8002032:	f011 f937 	bl	80132a4 <__cxa_free_exception>
 8002036:	f011 f959 	bl	80132ec <__cxa_end_cleanup>
	}
 800203a:	4618      	mov	r0, r3
 800203c:	3724      	adds	r7, #36	; 0x24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd90      	pop	{r4, r7, pc}
 8002042:	bf00      	nop
 8002044:	20000294 	.word	0x20000294
 8002048:	20000295 	.word	0x20000295
 800204c:	20000296 	.word	0x20000296
 8002050:	08016be8 	.word	0x08016be8
 8002054:	08013bed 	.word	0x08013bed
 8002058:	0801843c 	.word	0x0801843c
 800205c:	08016c0c 	.word	0x08016c0c

08002060 <_ZNK14XNucleoIHM02A14initEv>:

    /**
     * @brief Initializing the X_NUCLEO_IHM02A1 board.
     * @retval true if initialization is successful, false otherwise.
     */
    bool init(void) const noexcept
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
    {
        /* Disable the L6470. */

    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6998      	ldr	r0, [r3, #24]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	8b9b      	ldrh	r3, [r3, #28]
 8002070:	2200      	movs	r2, #0
 8002072:	4619      	mov	r1, r3
 8002074:	f00d ff14 	bl	800fea0 <HAL_GPIO_WritePin>

    	/* Wait for at least t_STBY,min */
    	HAL_Delay(1);
 8002078:	2001      	movs	r0, #1
 800207a:	f00d fba9 	bl	800f7d0 <HAL_Delay>

    	/* Enable the L6470. */
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_SET);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6998      	ldr	r0, [r3, #24]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	8b9b      	ldrh	r3, [r3, #28]
 8002086:	2201      	movs	r2, #1
 8002088:	4619      	mov	r1, r3
 800208a:	f00d ff09 	bl	800fea0 <HAL_GPIO_WritePin>

    	/* Wait for at least t_logicwu */
    	HAL_Delay(1);
 800208e:	2001      	movs	r0, #1
 8002090:	f00d fb9e 	bl	800f7d0 <HAL_Delay>



        return init_all_motor_drivers();
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f811 	bl	80020bc <_ZNK14XNucleoIHM02A122init_all_motor_driversEv>
 800209a:	4603      	mov	r3, r0
    }
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <_ZNK14XNucleoIHM02A117get_motor_driversEv>:
    /**
     * @brief  Getting the array of motor_drivers.
     * @param  None.
     * @retval The array of motor_drivers.
     */
    abstractL6470 **get_motor_drivers(void) const noexcept
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
    {
        return motor_drivers;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
    }
 80020b0:	4618      	mov	r0, r3
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <_ZNK14XNucleoIHM02A122init_all_motor_driversEv>:

    /**
     * @brief  Initialize the L6470 motor drivers.
     * @retval true if initialization is successful, false otherwise.
     */
    bool init_all_motor_drivers() const noexcept
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
    {
    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 80020c4:	2300      	movs	r3, #0
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	e022      	b.n	8002110 <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x54>
    	{
    		if(motor_drivers[i]->init((void*) init_motor_drivers[i]) != COMPONENT_OK)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	6818      	ldr	r0, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	3308      	adds	r3, #8
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	68f9      	ldr	r1, [r7, #12]
 80020ec:	3102      	adds	r1, #2
 80020ee:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80020f2:	4611      	mov	r1, r2
 80020f4:	4798      	blx	r3
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	bf14      	ite	ne
 80020fc:	2301      	movne	r3, #1
 80020fe:	2300      	moveq	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x4e>
    		{
    			return false;
 8002106:	2300      	movs	r3, #0
 8002108:	e006      	b.n	8002118 <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x5c>
    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	3301      	adds	r3, #1
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2b01      	cmp	r3, #1
 8002114:	ddd9      	ble.n	80020ca <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0xe>
    		}
    	}
    	return true;
 8002116:	2301      	movs	r3, #1

    }
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>:
  * @param standby_reset_port_shield_2 , port du GPIO du signal de reset du shield 2
  * @param standby_reset_pin_shield_2  , pin  du GPIO du signal de reset du shield 2
  * @param ssel_port_shield_2          , port du GPIO de commmunication SPI pour le shield 2
  * @param ssel_port_shield_2          , pin  du GPIO de commmunication SPI pour le shield 2
  */
BlocMoteurs::BlocMoteurs(SPI_HandleTypeDef *spi,
 8002120:	b590      	push	{r4, r7, lr}
 8002122:	b08b      	sub	sp, #44	; 0x2c
 8002124:	af04      	add	r7, sp, #16
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
 800212c:	807b      	strh	r3, [r7, #2]
		GPIO_TypeDef* standby_reset_port_shield_1  ,uint16_t standby_reset_pin_shield_1 ,GPIO_TypeDef* ssel_port_shield_1 , uint16_t ssel_pin_shield_1,
		GPIO_TypeDef* standby_reset_port_shield_2  ,uint16_t standby_reset_pin_shield_2 ,GPIO_TypeDef* ssel_port_shield_2 , uint16_t ssel_pin_shield_2)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	4a41      	ldr	r2, [pc, #260]	; (8002238 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x118>)
 8002132:	3318      	adds	r3, #24
 8002134:	4611      	mov	r1, r2
 8002136:	22b0      	movs	r2, #176	; 0xb0
 8002138:	4618      	mov	r0, r3
 800213a:	f012 fdf2 	bl	8014d22 <memcpy>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4a3d      	ldr	r2, [pc, #244]	; (8002238 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x118>)
 8002142:	33c8      	adds	r3, #200	; 0xc8
 8002144:	4611      	mov	r1, r2
 8002146:	22b0      	movs	r2, #176	; 0xb0
 8002148:	4618      	mov	r0, r3
 800214a:	f012 fdea 	bl	8014d22 <memcpy>
{
	//moteurs à l'arret par défaut
	moteurs_arret = 0;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	701a      	strb	r2, [r3, #0]
	//vitesse par défaut
	max_vitesse = MAX_VITESSE;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f44f 7216 	mov.w	r2, #600	; 0x258
 800215a:	605a      	str	r2, [r3, #4]

    shield_1 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_1, standby_reset_pin_shield_1, ssel_port_shield_1, ssel_pin_shield_1);
 800215c:	2020      	movs	r0, #32
 800215e:	f011 fc8c 	bl	8013a7a <_Znwj>
 8002162:	4603      	mov	r3, r0
 8002164:	461c      	mov	r4, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f103 0118 	add.w	r1, r3, #24
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f503 7290 	add.w	r2, r3, #288	; 0x120
 8002172:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002174:	9303      	str	r3, [sp, #12]
 8002176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002178:	9302      	str	r3, [sp, #8]
 800217a:	887b      	ldrh	r3, [r7, #2]
 800217c:	9301      	str	r3, [sp, #4]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	4620      	mov	r0, r4
 8002186:	f7ff fe7b 	bl	8001e80 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	609c      	str	r4, [r3, #8]
    shield_2 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_2, standby_reset_pin_shield_2, ssel_port_shield_2, ssel_pin_shield_2);
 800218e:	2020      	movs	r0, #32
 8002190:	f011 fc73 	bl	8013a7a <_Znwj>
 8002194:	4603      	mov	r3, r0
 8002196:	461c      	mov	r4, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f103 0118 	add.w	r1, r3, #24
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f503 7290 	add.w	r2, r3, #288	; 0x120
 80021a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80021a6:	9303      	str	r3, [sp, #12]
 80021a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021aa:	9302      	str	r3, [sp, #8]
 80021ac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80021ae:	9301      	str	r3, [sp, #4]
 80021b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	4620      	mov	r0, r4
 80021b8:	f7ff fe62 	bl	8001e80 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	60dc      	str	r4, [r3, #12]
    abstractL6470** moteurs_shield_1 = shield_1->get_motor_drivers();
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff6d 	bl	80020a4 <_ZNK14XNucleoIHM02A117get_motor_driversEv>
 80021ca:	6178      	str	r0, [r7, #20]
    abstractL6470** moteurs_shield_2 = shield_2->get_motor_drivers();
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff67 	bl	80020a4 <_ZNK14XNucleoIHM02A117get_motor_driversEv>
 80021d6:	6138      	str	r0, [r7, #16]
    moteurs = new abstractL6470*[NMOTEURS];
 80021d8:	2010      	movs	r0, #16
 80021da:	f011 fc5f 	bl	8013a9c <_Znaj>
 80021de:	4603      	mov	r3, r0
 80021e0:	461a      	mov	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	611a      	str	r2, [r3, #16]

	#ifdef CANONICAL_DIR // inverse ou non shield du haut/bas
		moteurs[front_left] = moteurs_shield_1[left];
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	6812      	ldr	r2, [r2, #0]
 80021ee:	601a      	str	r2, [r3, #0]
		moteurs[front_right] = moteurs_shield_1[right];
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	3304      	adds	r3, #4
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	6852      	ldr	r2, [r2, #4]
 80021fa:	601a      	str	r2, [r3, #0]
		moteurs[back_left] = moteurs_shield_2[left];
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	3308      	adds	r3, #8
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	6812      	ldr	r2, [r2, #0]
 8002206:	601a      	str	r2, [r3, #0]
		moteurs[back_right] = moteurs_shield_2[right];
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	330c      	adds	r3, #12
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	6852      	ldr	r2, [r2, #4]
 8002212:	601a      	str	r2, [r3, #0]
		moteurs[back_right] = moteurs_shield_1[right];
	#endif



}
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	e00b      	b.n	8002230 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x110>
    shield_1 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_1, standby_reset_pin_shield_1, ssel_port_shield_1, ssel_pin_shield_1);
 8002218:	2120      	movs	r1, #32
 800221a:	4620      	mov	r0, r4
 800221c:	f010 ffce 	bl	80131bc <_ZdlPvj>
 8002220:	f011 f864 	bl	80132ec <__cxa_end_cleanup>
    shield_2 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_2, standby_reset_pin_shield_2, ssel_port_shield_2, ssel_pin_shield_2);
 8002224:	2120      	movs	r1, #32
 8002226:	4620      	mov	r0, r4
 8002228:	f010 ffc8 	bl	80131bc <_ZdlPvj>
 800222c:	f011 f85e 	bl	80132ec <__cxa_end_cleanup>
}
 8002230:	4618      	mov	r0, r3
 8002232:	371c      	adds	r7, #28
 8002234:	46bd      	mov	sp, r7
 8002236:	bd90      	pop	{r4, r7, pc}
 8002238:	08016c18 	.word	0x08016c18

0800223c <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
     * @param standby_reset pin name of the STBY\RST pin of the component.
     * @param ssel_port     port name of the SSEL pin of the SPI device to be used for communication.
     * @param ssel_pin      pin name of the SSEL pin of the SPI device to be used for communication.
     * @param spi           SPI handler to be used for communication.
     */
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	4613      	mov	r3, r2
 800224a:	80fb      	strh	r3, [r7, #6]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4618      	mov	r0, r3
 8002250:	f009 fc22 	bl	800ba98 <_ZN13abstractL6470C1Ev>
 8002254:	4a27      	ldr	r2, [pc, #156]	; (80022f4 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	68ba      	ldr	r2, [r7, #8]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	88fa      	ldrh	r2, [r7, #6]
 8002264:	819a      	strh	r2, [r3, #12]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	611a      	str	r2, [r3, #16]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8b3a      	ldrh	r2, [r7, #24]
 8002270:	829a      	strh	r2, [r3, #20]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	69fa      	ldr	r2, [r7, #28]
 8002276:	619a      	str	r2, [r3, #24]
    {

    	if(std::is_same<shield_x,shield_1>::value)
    	{
    		shield_id = 1;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2201      	movs	r2, #1
 800227c:	711a      	strb	r2, [r3, #4]
    		shield_1::count++;
 800227e:	4b1e      	ldr	r3, [pc, #120]	; (80022f8 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	3301      	adds	r3, #1
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4b1c      	ldr	r3, [pc, #112]	; (80022f8 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002288:	701a      	strb	r2, [r3, #0]
    	}
    	else
    	{
    		throw std::runtime_error("template of L6470 must be shield_1, shield_2 or shield_3");
    	}
        L6470_Register = &_L6470_Register[0];
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4a1b      	ldr	r2, [pc, #108]	; (80022fc <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 800228e:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4a1b      	ldr	r2, [pc, #108]	; (8002300 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 8002294:	625a      	str	r2, [r3, #36]	; 0x24
        L6470_Direction = &_L6470_Direction[0];
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4a1a      	ldr	r2, [pc, #104]	; (8002304 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 800229a:	629a      	str	r2, [r3, #40]	; 0x28
        L6470_ACT = &_L6470_ACT[0];
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4a1a      	ldr	r2, [pc, #104]	; (8002308 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 80022a0:	62da      	str	r2, [r3, #44]	; 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	635a      	str	r2, [r3, #52]	; 0x34
        prepared_action = PREPARED_NO_ACTION;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        L6470_Id = number_of_devices++;
 80022b4:	4b15      	ldr	r3, [pc, #84]	; (800230c <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	1c5a      	adds	r2, r3, #1
 80022ba:	b2d1      	uxtb	r1, r2
 80022bc:	4a13      	ldr	r2, [pc, #76]	; (800230c <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 80022be:	7011      	strb	r1, [r2, #0]
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 80022c4:	4b12      	ldr	r3, [pc, #72]	; (8002310 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 80022ca:	2220      	movs	r2, #32
 80022cc:	2100      	movs	r1, #0
 80022ce:	4811      	ldr	r0, [pc, #68]	; (8002314 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 80022d0:	f012 fc53 	bl	8014b7a <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 80022d4:	2208      	movs	r2, #8
 80022d6:	2100      	movs	r1, #0
 80022d8:	480f      	ldr	r0, [pc, #60]	; (8002318 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 80022da:	f012 fc4e 	bl	8014b7a <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 80022de:	2208      	movs	r2, #8
 80022e0:	2100      	movs	r1, #0
 80022e2:	480e      	ldr	r0, [pc, #56]	; (800231c <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 80022e4:	f012 fc49 	bl	8014b7a <memset>
    }
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	080171b8 	.word	0x080171b8
 80022f8:	20000294 	.word	0x20000294
 80022fc:	0801747c 	.word	0x0801747c
 8002300:	08017670 	.word	0x08017670
 8002304:	0801777c 	.word	0x0801777c
 8002308:	08017790 	.word	0x08017790
 800230c:	200001f8 	.word	0x200001f8
 8002310:	200001f9 	.word	0x200001f9
 8002314:	200001fc 	.word	0x200001fc
 8002318:	2000021c 	.word	0x2000021c
 800231c:	20000224 	.word	0x20000224

08002320 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	603b      	str	r3, [r7, #0]
 800232c:	4613      	mov	r3, r2
 800232e:	80fb      	strh	r3, [r7, #6]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4618      	mov	r0, r3
 8002334:	f009 fbb0 	bl	800ba98 <_ZN13abstractL6470C1Ev>
 8002338:	4a27      	ldr	r2, [pc, #156]	; (80023d8 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	88fa      	ldrh	r2, [r7, #6]
 8002348:	819a      	strh	r2, [r3, #12]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	611a      	str	r2, [r3, #16]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8b3a      	ldrh	r2, [r7, #24]
 8002354:	829a      	strh	r2, [r3, #20]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	69fa      	ldr	r2, [r7, #28]
 800235a:	619a      	str	r2, [r3, #24]
    		shield_id = 2;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2202      	movs	r2, #2
 8002360:	711a      	strb	r2, [r3, #4]
    		shield_2::count++;
 8002362:	4b1e      	ldr	r3, [pc, #120]	; (80023dc <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	3301      	adds	r3, #1
 8002368:	b2da      	uxtb	r2, r3
 800236a:	4b1c      	ldr	r3, [pc, #112]	; (80023dc <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 800236c:	701a      	strb	r2, [r3, #0]
        L6470_Register = &_L6470_Register[0];
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	4a1b      	ldr	r2, [pc, #108]	; (80023e0 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 8002372:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4a1b      	ldr	r2, [pc, #108]	; (80023e4 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 8002378:	625a      	str	r2, [r3, #36]	; 0x24
        L6470_Direction = &_L6470_Direction[0];
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4a1a      	ldr	r2, [pc, #104]	; (80023e8 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 800237e:	629a      	str	r2, [r3, #40]	; 0x28
        L6470_ACT = &_L6470_ACT[0];
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4a1a      	ldr	r2, [pc, #104]	; (80023ec <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 8002384:	62da      	str	r2, [r3, #44]	; 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	635a      	str	r2, [r3, #52]	; 0x34
        prepared_action = PREPARED_NO_ACTION;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        L6470_Id = number_of_devices++;
 8002398:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	b2d1      	uxtb	r1, r2
 80023a0:	4a13      	ldr	r2, [pc, #76]	; (80023f0 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 80023a2:	7011      	strb	r1, [r2, #0]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 80023a8:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 80023ae:	2220      	movs	r2, #32
 80023b0:	2100      	movs	r1, #0
 80023b2:	4811      	ldr	r0, [pc, #68]	; (80023f8 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 80023b4:	f012 fbe1 	bl	8014b7a <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 80023b8:	2208      	movs	r2, #8
 80023ba:	2100      	movs	r1, #0
 80023bc:	480f      	ldr	r0, [pc, #60]	; (80023fc <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 80023be:	f012 fbdc 	bl	8014b7a <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 80023c2:	2208      	movs	r2, #8
 80023c4:	2100      	movs	r1, #0
 80023c6:	480e      	ldr	r0, [pc, #56]	; (8002400 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 80023c8:	f012 fbd7 	bl	8014b7a <memset>
    }
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	08016f4c 	.word	0x08016f4c
 80023dc:	20000295 	.word	0x20000295
 80023e0:	0801779c 	.word	0x0801779c
 80023e4:	08017990 	.word	0x08017990
 80023e8:	08017a9c 	.word	0x08017a9c
 80023ec:	08017ab0 	.word	0x08017ab0
 80023f0:	2000022c 	.word	0x2000022c
 80023f4:	2000022d 	.word	0x2000022d
 80023f8:	20000230 	.word	0x20000230
 80023fc:	20000250 	.word	0x20000250
 8002400:	20000258 	.word	0x20000258

08002404 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	603b      	str	r3, [r7, #0]
 8002410:	4613      	mov	r3, r2
 8002412:	80fb      	strh	r3, [r7, #6]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4618      	mov	r0, r3
 8002418:	f009 fb3e 	bl	800ba98 <_ZN13abstractL6470C1Ev>
 800241c:	4a27      	ldr	r2, [pc, #156]	; (80024bc <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	88fa      	ldrh	r2, [r7, #6]
 800242c:	819a      	strh	r2, [r3, #12]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	611a      	str	r2, [r3, #16]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8b3a      	ldrh	r2, [r7, #24]
 8002438:	829a      	strh	r2, [r3, #20]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	69fa      	ldr	r2, [r7, #28]
 800243e:	619a      	str	r2, [r3, #24]
    		shield_id = 3;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2203      	movs	r2, #3
 8002444:	711a      	strb	r2, [r3, #4]
    		shield_3::count++;
 8002446:	4b1e      	ldr	r3, [pc, #120]	; (80024c0 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	3301      	adds	r3, #1
 800244c:	b2da      	uxtb	r2, r3
 800244e:	4b1c      	ldr	r3, [pc, #112]	; (80024c0 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002450:	701a      	strb	r2, [r3, #0]
        L6470_Register = &_L6470_Register[0];
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4a1b      	ldr	r2, [pc, #108]	; (80024c4 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 8002456:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4a1b      	ldr	r2, [pc, #108]	; (80024c8 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 800245c:	625a      	str	r2, [r3, #36]	; 0x24
        L6470_Direction = &_L6470_Direction[0];
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4a1a      	ldr	r2, [pc, #104]	; (80024cc <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 8002462:	629a      	str	r2, [r3, #40]	; 0x28
        L6470_ACT = &_L6470_ACT[0];
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4a1a      	ldr	r2, [pc, #104]	; (80024d0 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 8002468:	62da      	str	r2, [r3, #44]	; 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	635a      	str	r2, [r3, #52]	; 0x34
        prepared_action = PREPARED_NO_ACTION;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        L6470_Id = number_of_devices++;
 800247c:	4b15      	ldr	r3, [pc, #84]	; (80024d4 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	1c5a      	adds	r2, r3, #1
 8002482:	b2d1      	uxtb	r1, r2
 8002484:	4a13      	ldr	r2, [pc, #76]	; (80024d4 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002486:	7011      	strb	r1, [r2, #0]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 800248c:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 800248e:	2200      	movs	r2, #0
 8002490:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 8002492:	2220      	movs	r2, #32
 8002494:	2100      	movs	r1, #0
 8002496:	4811      	ldr	r0, [pc, #68]	; (80024dc <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 8002498:	f012 fb6f 	bl	8014b7a <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 800249c:	2208      	movs	r2, #8
 800249e:	2100      	movs	r1, #0
 80024a0:	480f      	ldr	r0, [pc, #60]	; (80024e0 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 80024a2:	f012 fb6a 	bl	8014b7a <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 80024a6:	2208      	movs	r2, #8
 80024a8:	2100      	movs	r1, #0
 80024aa:	480e      	ldr	r0, [pc, #56]	; (80024e4 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 80024ac:	f012 fb65 	bl	8014b7a <memset>
    }
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	08016ce0 	.word	0x08016ce0
 80024c0:	20000296 	.word	0x20000296
 80024c4:	08017abc 	.word	0x08017abc
 80024c8:	08017cb0 	.word	0x08017cb0
 80024cc:	08017dbc 	.word	0x08017dbc
 80024d0:	08017dd0 	.word	0x08017dd0
 80024d4:	20000260 	.word	0x20000260
 80024d8:	20000261 	.word	0x20000261
 80024dc:	20000264 	.word	0x20000264
 80024e0:	20000284 	.word	0x20000284
 80024e4:	2000028c 	.word	0x2000028c

080024e8 <_ZN5L6470I8shield_3ED1Ev>:

    /**
     * @brief Destructor.
     */
    ~L6470(void) = default;
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	4a05      	ldr	r2, [pc, #20]	; (8002508 <_ZN5L6470I8shield_3ED1Ev+0x20>)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f009 fadd 	bl	800bab8 <_ZN13abstractL6470D1Ev>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4618      	mov	r0, r3
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	08016ce0 	.word	0x08016ce0

0800250c <_ZN5L6470I8shield_3ED0Ev>:
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff ffe7 	bl	80024e8 <_ZN5L6470I8shield_3ED1Ev>
 800251a:	216c      	movs	r1, #108	; 0x6c
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f010 fe4d 	bl	80131bc <_ZdlPvj>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4618      	mov	r0, r3
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <_ZN5L6470I8shield_2ED1Ev>:
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	4a05      	ldr	r2, [pc, #20]	; (800254c <_ZN5L6470I8shield_2ED1Ev+0x20>)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4618      	mov	r0, r3
 800253e:	f009 fabb 	bl	800bab8 <_ZN13abstractL6470D1Ev>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4618      	mov	r0, r3
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	08016f4c 	.word	0x08016f4c

08002550 <_ZN5L6470I8shield_2ED0Ev>:
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7ff ffe7 	bl	800252c <_ZN5L6470I8shield_2ED1Ev>
 800255e:	216c      	movs	r1, #108	; 0x6c
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f010 fe2b 	bl	80131bc <_ZdlPvj>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <_ZN5L6470I8shield_1ED1Ev>:
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	4a05      	ldr	r2, [pc, #20]	; (8002590 <_ZN5L6470I8shield_1ED1Ev+0x20>)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4618      	mov	r0, r3
 8002582:	f009 fa99 	bl	800bab8 <_ZN13abstractL6470D1Ev>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4618      	mov	r0, r3
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	080171b8 	.word	0x080171b8

08002594 <_ZN5L6470I8shield_1ED0Ev>:
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f7ff ffe7 	bl	8002570 <_ZN5L6470I8shield_1ED1Ev>
 80025a2:	216c      	movs	r1, #108	; 0x6c
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f010 fe09 	bl	80131bc <_ZdlPvj>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4618      	mov	r0, r3
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <_ZN5L6470I8shield_3E4initEPv>:
    /**
     * @brief  Initializing the component.
     * @param  init Pointer to device specific initalization structure.
     * @retval "0" in case of success, an error code otherwise.
     */
    virtual int init(void *init)
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
    {
        return (int) L6470_Config((void *) init);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6839      	ldr	r1, [r7, #0]
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	4798      	blx	r3
 80025ce:	4603      	mov	r3, r0
    }
 80025d0:	4618      	mov	r0, r3
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <_ZN5L6470I8shield_3E10get_statusEv>:
    /**
     * @brief  Getting the status.
     * @param  None.
     * @retval The status.
     */
    virtual unsigned int get_status(void)
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
    {
        return (unsigned int) L6470_GetStatus();
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	4798      	blx	r3
 80025ee:	4603      	mov	r3, r0
    }
 80025f0:	4618      	mov	r0, r3
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <_ZN5L6470I8shield_3E13get_parameterEj>:
     *           + L6470_STEP_MODE_ID
     *           + L6470_ALARM_EN_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual unsigned int get_parameter(unsigned int parameter)
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
    {
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	4611      	mov	r1, r2
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	4798      	blx	r3
 8002616:	4603      	mov	r3, r0
    }
 8002618:	4618      	mov	r0, r3
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <_ZN5L6470I8shield_3E12get_positionEv>:
    /**
     * @brief  Getting the position.
     * @param  None.
     * @retval The position.
     */
    virtual signed int get_position(void)
 8002620:	b590      	push	{r4, r7, lr}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
    {
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8002630:	681c      	ldr	r4, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2100      	movs	r1, #0
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	4798      	blx	r3
 8002642:	4603      	mov	r3, r0
 8002644:	4619      	mov	r1, r3
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	47a0      	blx	r4
 800264a:	4603      	mov	r3, r0
    }
 800264c:	4618      	mov	r0, r3
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	bd90      	pop	{r4, r7, pc}

08002654 <_ZN5L6470I8shield_3E8get_markEv>:
    /**
     * @brief  Getting the marked position.
     * @param  None.
     * @retval The marked position.
     */
    virtual signed int get_mark(void)
 8002654:	b590      	push	{r4, r7, lr}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
    {
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8002664:	681c      	ldr	r4, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2102      	movs	r1, #2
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	4798      	blx	r3
 8002676:	4603      	mov	r3, r0
 8002678:	4619      	mov	r1, r3
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	47a0      	blx	r4
 800267e:	4603      	mov	r3, r0
    }
 8002680:	4618      	mov	r0, r3
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	bd90      	pop	{r4, r7, pc}

08002688 <_ZN5L6470I8shield_3E9get_speedEv>:
    /**
     * @brief  Getting the current speed in pps.
     * @param  None.
     * @retval The current speed in pps.
     */
    virtual unsigned int get_speed(void)
 8002688:	b5b0      	push	{r4, r5, r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002698:	681c      	ldr	r4, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80026a2:	681d      	ldr	r5, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2103      	movs	r1, #3
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	4798      	blx	r3
 80026b4:	4603      	mov	r3, r0
 80026b6:	4619      	mov	r1, r3
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	47a8      	blx	r5
 80026bc:	eef0 7a40 	vmov.f32	s15, s0
 80026c0:	eeb0 0a67 	vmov.f32	s0, s15
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	47a0      	blx	r4
 80026c8:	4603      	mov	r3, r0
    }
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bdb0      	pop	{r4, r5, r7, pc}

080026d2 <_ZN5L6470I8shield_3E13get_max_speedEv>:
    /**
     * @brief  Getting the maximum speed in pps.
     * @param  None.
     * @retval The maximum speed in pps.
     */
    virtual unsigned int get_max_speed(void)
 80026d2:	b5b0      	push	{r4, r5, r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80026e2:	681c      	ldr	r4, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80026ec:	681d      	ldr	r5, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2106      	movs	r1, #6
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	4798      	blx	r3
 80026fe:	4603      	mov	r3, r0
 8002700:	b29b      	uxth	r3, r3
 8002702:	4619      	mov	r1, r3
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	47a8      	blx	r5
 8002708:	eef0 7a40 	vmov.f32	s15, s0
 800270c:	eeb0 0a67 	vmov.f32	s0, s15
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	47a0      	blx	r4
 8002714:	4603      	mov	r3, r0
    }
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bdb0      	pop	{r4, r5, r7, pc}

0800271e <_ZN5L6470I8shield_3E13get_min_speedEv>:
    /**
     * @brief  Getting the minimum speed in pps.
     * @param  None.
     * @retval The minimum speed in pps.
     */
    virtual unsigned int get_min_speed(void)
 800271e:	b5b0      	push	{r4, r5, r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800272e:	681c      	ldr	r4, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8002738:	681d      	ldr	r5, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2107      	movs	r1, #7
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	4798      	blx	r3
 800274a:	4603      	mov	r3, r0
 800274c:	b29b      	uxth	r3, r3
 800274e:	4619      	mov	r1, r3
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	47a8      	blx	r5
 8002754:	eef0 7a40 	vmov.f32	s15, s0
 8002758:	eeb0 0a67 	vmov.f32	s0, s15
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	47a0      	blx	r4
 8002760:	4603      	mov	r3, r0
    }
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bdb0      	pop	{r4, r5, r7, pc}

0800276a <_ZN5L6470I8shield_3E16get_accelerationEv>:
    /**
     * @brief  Getting the acceleration in pps^2.
     * @param  None.
     * @retval The acceleration in pps^2.
     */
    virtual unsigned int get_acceleration(void)
 800276a:	b5b0      	push	{r4, r5, r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800277a:	681c      	ldr	r4, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002784:	681d      	ldr	r5, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2104      	movs	r1, #4
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	4798      	blx	r3
 8002796:	4603      	mov	r3, r0
 8002798:	b29b      	uxth	r3, r3
 800279a:	4619      	mov	r1, r3
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	47a8      	blx	r5
 80027a0:	eef0 7a40 	vmov.f32	s15, s0
 80027a4:	eeb0 0a67 	vmov.f32	s0, s15
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	47a0      	blx	r4
 80027ac:	4603      	mov	r3, r0
    }
 80027ae:	4618      	mov	r0, r3
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bdb0      	pop	{r4, r5, r7, pc}

080027b6 <_ZN5L6470I8shield_3E16get_decelerationEv>:
    /**
     * @brief  Getting the deceleration in pps^2.
     * @param  None.
     * @retval The deceleration in pps^2.
     */
    virtual unsigned int get_deceleration(void)
 80027b6:	b5b0      	push	{r4, r5, r7, lr}
 80027b8:	b082      	sub	sp, #8
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80027c6:	681c      	ldr	r4, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80027d0:	681d      	ldr	r5, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2105      	movs	r1, #5
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	4798      	blx	r3
 80027e2:	4603      	mov	r3, r0
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	4619      	mov	r1, r3
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	47a8      	blx	r5
 80027ec:	eef0 7a40 	vmov.f32	s15, s0
 80027f0:	eeb0 0a67 	vmov.f32	s0, s15
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	47a0      	blx	r4
 80027f8:	4603      	mov	r3, r0
    }
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bdb0      	pop	{r4, r5, r7, pc}

08002802 <_ZN5L6470I8shield_3E13get_directionEv>:
    /**
     * @brief  Getting the direction of rotation.
     * @param  None.
     * @retval The direction of rotation.
     */
    virtual StepperMotor::direction_t get_direction(void)
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
    {
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2104      	movs	r1, #4
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	4798      	blx	r3
 800281a:	4603      	mov	r3, r0
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <_ZN5L6470I8shield_3E13get_directionEv+0x22>
 8002820:	2301      	movs	r3, #1
 8002822:	e000      	b.n	8002826 <_ZN5L6470I8shield_3E13get_directionEv+0x24>
 8002824:	2300      	movs	r3, #0
    }
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <_ZN5L6470I8shield_3E13set_parameterEjj>:
     *           + L6470_ADC_OUT_ID
     *           + L6470_STEP_MODE_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 800282e:	b580      	push	{r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	60f8      	str	r0, [r7, #12]
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	607a      	str	r2, [r7, #4]
    {
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	b2d1      	uxtb	r1, r2
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	4798      	blx	r3
    }
 800284e:	bf00      	nop
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <_ZN5L6470I8shield_3E8set_homeEv>:
    /**
     * @brief  Setting the current position to be the home position.
     * @param  None.
     * @retval None.
     */
    virtual void set_home(void)
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
    {
        L6470_ResetPos();
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	4798      	blx	r3
    }
 800286c:	bf00      	nop
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <_ZN5L6470I8shield_3E8set_markEv>:
    /**
     * @brief  Setting the current position to be the marked position.
     * @param  None.
     * @retval None.
     */
    virtual void set_mark(void)
 8002874:	b590      	push	{r4, r7, lr}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8002884:	681c      	ldr	r4, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2100      	movs	r1, #0
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	4798      	blx	r3
 8002896:	4603      	mov	r3, r0
 8002898:	461a      	mov	r2, r3
 800289a:	2102      	movs	r1, #2
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	47a0      	blx	r4
    }
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd90      	pop	{r4, r7, pc}

080028a8 <_ZN5L6470I8shield_3E8set_markEi>:
    /**
     * @brief  Setting the current position to be the marked position.
     * @param  position The given position.
     * @retval None.
     */
    virtual void set_mark(signed int position)
 80028a8:	b590      	push	{r4, r7, lr}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80028ba:	681c      	ldr	r4, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6839      	ldr	r1, [r7, #0]
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	4798      	blx	r3
 80028cc:	4603      	mov	r3, r0
 80028ce:	461a      	mov	r2, r3
 80028d0:	2102      	movs	r1, #2
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	47a0      	blx	r4
    }
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd90      	pop	{r4, r7, pc}

080028de <_ZN5L6470I8shield_3E13set_max_speedEj>:
    /**
     * @brief  Setting the maximum speed in pps.
     * @param  speed The maximum speed in pps.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_max_speed(unsigned int speed)
 80028de:	b590      	push	{r4, r7, lr}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80028f0:	681c      	ldr	r4, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	ee07 2a90 	vmov	s15, r2
 8002902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002906:	eeb0 0a67 	vmov.f32	s0, s15
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	4798      	blx	r3
 800290e:	4603      	mov	r3, r0
 8002910:	461a      	mov	r2, r3
 8002912:	2106      	movs	r1, #6
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	47a0      	blx	r4
        return true;
 8002918:	2301      	movs	r3, #1
    }
 800291a:	4618      	mov	r0, r3
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	bd90      	pop	{r4, r7, pc}

08002922 <_ZN5L6470I8shield_3E13set_min_speedEj>:
    /**
     * @brief  Setting the minimum speed in pps.
     * @param  speed The minimum speed in pps.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_min_speed(unsigned int speed)
 8002922:	b590      	push	{r4, r7, lr}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8002934:	681c      	ldr	r4, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	ee07 2a90 	vmov	s15, r2
 8002946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800294a:	eeb0 0a67 	vmov.f32	s0, s15
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	4798      	blx	r3
 8002952:	4603      	mov	r3, r0
 8002954:	461a      	mov	r2, r3
 8002956:	2107      	movs	r1, #7
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	47a0      	blx	r4
        return true;
 800295c:	2301      	movs	r3, #1
    }
 800295e:	4618      	mov	r0, r3
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	bd90      	pop	{r4, r7, pc}

08002966 <_ZN5L6470I8shield_3E16set_accelerationEj>:
    /**
     * @brief  Setting the acceleration in pps^2.
     * @param  acceleration The acceleration in pps^2.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_acceleration(unsigned int acceleration)
 8002966:	b590      	push	{r4, r7, lr}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
 800296e:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8002978:	681c      	ldr	r4, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	ee07 2a90 	vmov	s15, r2
 800298a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800298e:	eeb0 0a67 	vmov.f32	s0, s15
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	4798      	blx	r3
 8002996:	4603      	mov	r3, r0
 8002998:	461a      	mov	r2, r3
 800299a:	2104      	movs	r1, #4
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	47a0      	blx	r4
        return true;
 80029a0:	2301      	movs	r3, #1
    }
 80029a2:	4618      	mov	r0, r3
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd90      	pop	{r4, r7, pc}

080029aa <_ZN5L6470I8shield_3E16set_decelerationEj>:
    /**
     * @brief  Setting the deceleration in pps^2.
     * @param  deceleration The deceleration in pps^2.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_deceleration(unsigned int deceleration)
 80029aa:	b590      	push	{r4, r7, lr}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
 80029b2:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80029bc:	681c      	ldr	r4, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	ee07 2a90 	vmov	s15, r2
 80029ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029d2:	eeb0 0a67 	vmov.f32	s0, s15
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	4798      	blx	r3
 80029da:	4603      	mov	r3, r0
 80029dc:	461a      	mov	r2, r3
 80029de:	2105      	movs	r1, #5
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	47a0      	blx	r4
        return true;
 80029e4:	2301      	movs	r3, #1
    }
 80029e6:	4618      	mov	r0, r3
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd90      	pop	{r4, r7, pc}

080029ee <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE>:
     * @warning Setting the step mode implies first disabling the power bridge through
     *          the soft_hiz() method.
     * @warning Every time step mode is changed, the values of the home
     *          and mark positions lose meaning and are reset.
     */
    virtual bool set_step_mode(step_mode_t step_mode)
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
 80029f6:	460b      	mov	r3, r1
 80029f8:	70fb      	strb	r3, [r7, #3]
    {
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 80029fa:	78fb      	ldrb	r3, [r7, #3]
 80029fc:	2b07      	cmp	r3, #7
 80029fe:	d901      	bls.n	8002a04 <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 8002a00:	2300      	movs	r3, #0
 8002a02:	e00f      	b.n	8002a24 <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        }
        soft_hiz();
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	3380      	adds	r3, #128	; 0x80
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	78fa      	ldrb	r2, [r7, #3]
 8002a1c:	2115      	movs	r1, #21
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	4798      	blx	r3
        return true;
 8002a22:	2301      	movs	r3, #1
    }
 8002a24:	4618      	mov	r0, r3
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <_ZN5L6470I8shield_3E5go_toEi>:
    /**
     * @brief  Going to a specified position through the shortest path.
     * @param  position The desired position.
     * @retval None.
     */
    virtual void go_to(signed int position)
 8002a2c:	b590      	push	{r4, r7, lr}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
    {
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8002a3e:	681c      	ldr	r4, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6839      	ldr	r1, [r7, #0]
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	4798      	blx	r3
 8002a50:	4603      	mov	r3, r0
 8002a52:	4619      	mov	r1, r3
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	47a0      	blx	r4
    }
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd90      	pop	{r4, r7, pc}

08002a60 <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE>:
     * @brief  Going to a specified position imposing the desired direction.
     * @param  position The desired position.
     * @param  direction The direction of rotation.
     * @retval None.
     */
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 8002a60:	b5b0      	push	{r4, r5, r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	71fb      	strb	r3, [r7, #7]
    {
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8002a76:	681c      	ldr	r4, [r3, #0]
 8002a78:	79fb      	ldrb	r3, [r7, #7]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d101      	bne.n	8002a82 <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE+0x22>
 8002a7e:	2501      	movs	r5, #1
 8002a80:	e000      	b.n	8002a84 <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE+0x24>
 8002a82:	2500      	movs	r5, #0
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68b9      	ldr	r1, [r7, #8]
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	4798      	blx	r3
 8002a94:	4603      	mov	r3, r0
 8002a96:	461a      	mov	r2, r3
 8002a98:	4629      	mov	r1, r5
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	47a0      	blx	r4
    }
 8002a9e:	bf00      	nop
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bdb0      	pop	{r4, r5, r7, pc}

08002aa6 <_ZN5L6470I8shield_3E7go_homeEv>:
    /**
     * @brief  Going to the home position.
     * @param  None.
     * @retval None.
     */
    virtual void go_home(void)
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
    {
        L6470_GoHome();
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	4798      	blx	r3
    }
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <_ZN5L6470I8shield_3E7go_markEv>:
    /**
     * @brief  Going to the marked position.
     * @param  None.
     * @retval None.
     */
    virtual void go_mark(void)
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
    {
        L6470_GoMark();
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	4798      	blx	r3
    }
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
     * @note   The identifier of the action about the absolute position can be
     *         one of the following:
     *           + L6470_ACT_RST_ID: the absolute position is reset;
     *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
     */
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 8002ae2:	b5b0      	push	{r4, r5, r7, lr}
 8002ae4:	b084      	sub	sp, #16
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	60f8      	str	r0, [r7, #12]
 8002aea:	607b      	str	r3, [r7, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	72fb      	strb	r3, [r7, #11]
 8002af0:	4613      	mov	r3, r2
 8002af2:	72bb      	strb	r3, [r7, #10]
    {
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002afc:	681c      	ldr	r4, [r3, #0]
 8002afe:	7abb      	ldrb	r3, [r7, #10]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8002b04:	2501      	movs	r5, #1
 8002b06:	e000      	b.n	8002b0a <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8002b08:	2500      	movs	r5, #0
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	ee07 2a90 	vmov	s15, r2
 8002b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b1e:	eeb0 0a67 	vmov.f32	s0, s15
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	4798      	blx	r3
 8002b26:	4603      	mov	r3, r0
 8002b28:	7af9      	ldrb	r1, [r7, #11]
 8002b2a:	462a      	mov	r2, r5
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	47a0      	blx	r4
    }
 8002b30:	bf00      	nop
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bdb0      	pop	{r4, r5, r7, pc}

08002b38 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE>:
    /**
     * @brief  Running towards a specified direction.
     * @param  direction The direction of rotation.
     * @retval None.
     */
    virtual void run(StepperMotor::direction_t direction)
 8002b38:	b5b0      	push	{r4, r5, r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	70fb      	strb	r3, [r7, #3]
    {
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8002b4c:	681c      	ldr	r4, [r3, #0]
 8002b4e:	78fb      	ldrb	r3, [r7, #3]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE+0x20>
 8002b54:	2501      	movs	r5, #1
 8002b56:	e000      	b.n	8002b5a <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE+0x22>
 8002b58:	2500      	movs	r5, #0
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2106      	movs	r1, #6
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	4798      	blx	r3
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4629      	mov	r1, r5
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	47a0      	blx	r4
    }
 8002b74:	bf00      	nop
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bdb0      	pop	{r4, r5, r7, pc}

08002b7c <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj>:
     * @brief  Running towards a specified direction at the given speed.
     * @param  direction The direction of rotation.
     * @param  speed The speed value in pps.
     * @retval None.
     */
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 8002b7c:	b5b0      	push	{r4, r5, r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	460b      	mov	r3, r1
 8002b86:	607a      	str	r2, [r7, #4]
 8002b88:	72fb      	strb	r3, [r7, #11]
    {
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8002b92:	681c      	ldr	r4, [r3, #0]
 8002b94:	7afb      	ldrb	r3, [r7, #11]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d101      	bne.n	8002b9e <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj+0x22>
 8002b9a:	2501      	movs	r5, #1
 8002b9c:	e000      	b.n	8002ba0 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj+0x24>
 8002b9e:	2500      	movs	r5, #0
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	ee07 2a90 	vmov	s15, r2
 8002bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bb4:	eeb0 0a67 	vmov.f32	s0, s15
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	4798      	blx	r3
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	4629      	mov	r1, r5
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	47a0      	blx	r4
    }
 8002bc6:	bf00      	nop
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bdb0      	pop	{r4, r5, r7, pc}

08002bce <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj>:
     * @brief  Moving towards a specified direction for a certain number of steps.
     * @param  direction The direction of rotation.
     * @param  steps The desired number of steps.
     * @retval None.
     */
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	60f8      	str	r0, [r7, #12]
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	607a      	str	r2, [r7, #4]
 8002bda:	72fb      	strb	r3, [r7, #11]
    {
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	7afa      	ldrb	r2, [r7, #11]
 8002be8:	2a01      	cmp	r2, #1
 8002bea:	d101      	bne.n	8002bf0 <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj+0x22>
 8002bec:	2101      	movs	r1, #1
 8002bee:	e000      	b.n	8002bf2 <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj+0x24>
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	4798      	blx	r3
    }
 8002bf8:	bf00      	nop
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <_ZN5L6470I8shield_3E9soft_stopEv>:
     * @brief  Stopping the motor through an immediate deceleration up to zero speed.
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     */
    virtual void soft_stop(void)
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
    {
        L6470_SoftStop();
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	4798      	blx	r3
    }
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <_ZN5L6470I8shield_3E9hard_stopEv>:
    /**
     * @brief  Stopping the motor through an immediate infinite deceleration.
     * @param  None.
     * @retval None.
     */
    virtual void hard_stop(void)
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
    {
        L6470_HardStop();
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	4798      	blx	r3
    }
 8002c34:	bf00      	nop
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <_ZN5L6470I8shield_3E8soft_hizEv>:
     * @brief  Disabling the power bridge after performing a deceleration to zero.
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     */
    virtual void soft_hiz(void)
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
    {
        L6470_SoftHiZ();
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	4798      	blx	r3
    }
 8002c52:	bf00      	nop
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <_ZN5L6470I8shield_3E8hard_hizEv>:
    /**
     * @brief  Disabling the power bridge immediately.
     * @param  None.
     * @retval None.
     */
    virtual void hard_hiz(void)
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
    {
        L6470_HardHiZ();
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	4798      	blx	r3
    }
 8002c70:	bf00      	nop
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <_ZN5L6470I8shield_3E17wait_while_activeEv>:
    /**
     * @brief  Waiting while the motor is active.
     * @param  None.
     * @retval None.
     */
    virtual void wait_while_active(void)
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
    {
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 8002c80:	bf00      	nop
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	4798      	blx	r3
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	bf0c      	ite	eq
 8002c98:	2301      	moveq	r3, #1
 8002c9a:	2300      	movne	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1ef      	bne.n	8002c82 <_ZN5L6470I8shield_3E17wait_while_activeEv+0xa>
    }
 8002ca2:	bf00      	nop
 8002ca4:	bf00      	nop
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE>:
     * @param   direction The direction of rotation.
     * @retval  None.
     * @warning Setting the step-clock mode implies first disabling the power bridge through
     *          the soft_hiz() method.
     */
    virtual void step_clock(StepperMotor::direction_t direction)
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	70fb      	strb	r3, [r7, #3]
    {
        soft_hiz();
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	3380      	adds	r3, #128	; 0x80
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	78fa      	ldrb	r2, [r7, #3]
 8002cd0:	2a01      	cmp	r2, #1
 8002cd2:	d101      	bne.n	8002cd8 <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE+0x2c>
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	e000      	b.n	8002cda <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE+0x2e>
 8002cd8:	2200      	movs	r2, #0
 8002cda:	4611      	mov	r1, r2
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	4798      	blx	r3
    }
 8002ce0:	bf00      	nop
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
      * @note   The identifier of the action about the absolute position can be
      *         one of the following:
      *           + L6470_ACT_RST_ID: the absolute position is reset;
      *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
      */
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	70fb      	strb	r3, [r7, #3]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	70bb      	strb	r3, [r7, #2]
    {
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	78ba      	ldrb	r2, [r7, #2]
 8002d04:	2a01      	cmp	r2, #1
 8002d06:	d101      	bne.n	8002d0c <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8002d08:	2201      	movs	r2, #1
 8002d0a:	e000      	b.n	8002d0e <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	78f9      	ldrb	r1, [r7, #3]
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	4798      	blx	r3
    }
 8002d14:	bf00      	nop
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <_ZN5L6470I8shield_3E12reset_deviceEv>:
    /**
      * @brief  Resetting the device to power-up conditions.
      * @param  None.
      * @retval None.
      */
    virtual void reset_device(void)
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
    {
        L6470_ResetDevice();
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	4798      	blx	r3
    }
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <_ZN5L6470I8shield_3E18prepare_get_statusEv>:
     * @brief  Preparing the command to get the status.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_status(void)
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetStatus();
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8002d58:	bf00      	nop
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <_ZN5L6470I8shield_3E21prepare_get_parameterEj>:
     *           + L6470_STEP_MODE_ID
     *           + L6470_ALARM_EN_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void prepare_get_parameter(unsigned int parameter)
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	4611      	mov	r1, r2
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8002d86:	bf00      	nop
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <_ZN5L6470I8shield_3E20prepare_get_positionEv>:
     * @brief  Preparing the command to get the position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_position(void)
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2100      	movs	r1, #0
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <_ZN5L6470I8shield_3E16prepare_get_markEv>:
     * @brief  Preparing the command to get the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_mark(void)
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b082      	sub	sp, #8
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2102      	movs	r1, #2
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8002dd6:	bf00      	nop
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <_ZN5L6470I8shield_3E17prepare_get_speedEv>:
     * @brief  Preparing the command to get the current speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_speed(void)
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b082      	sub	sp, #8
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2103      	movs	r1, #3
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2203      	movs	r2, #3
 8002dfa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8002dfe:	bf00      	nop
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <_ZN5L6470I8shield_3E21prepare_get_max_speedEv>:
     * @brief  Preparing the command to get the maximum speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_max_speed(void)
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2106      	movs	r1, #6
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2204      	movs	r2, #4
 8002e22:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8002e26:	bf00      	nop
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <_ZN5L6470I8shield_3E21prepare_get_min_speedEv>:
     * @brief  Preparing the command to get the minimum speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_min_speed(void)
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2107      	movs	r1, #7
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2205      	movs	r2, #5
 8002e4a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <_ZN5L6470I8shield_3E24prepare_get_accelerationEv>:
     * @brief  Preparing the command to get the acceleration in pps^2.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_acceleration(void)
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2104      	movs	r1, #4
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2206      	movs	r2, #6
 8002e72:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <_ZN5L6470I8shield_3E24prepare_get_decelerationEv>:
     * @brief  Preparing the command to get the deceleration in pps^2.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_deceleration(void)
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2105      	movs	r1, #5
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2207      	movs	r2, #7
 8002e9a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
	...

08002ea8 <_ZN5L6470I8shield_3E21prepare_get_directionEv>:
     * @brief  Preparing the command to get the direction of rotation.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_direction(void)
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
    {
        if (!L6470_DaisyChain_HalfPrepared) {
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x38>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10a      	bne.n	8002ece <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x26>
            /* To avoid deleting the previous entered command. */
            L6470_DaisyChain_HalfPrepared = ONE_F;
 8002eb8:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x38>)
 8002eba:	2201      	movs	r2, #1
 8002ebc:	701a      	strb	r2, [r3, #0]
            /* Resetting commands. */
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4906      	ldr	r1, [pc, #24]	; (8002ee4 <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x3c>)
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	4798      	blx	r3
        }
        prepared_action = PREPARED_GET_DIRECTION;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2208      	movs	r2, #8
 8002ed2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20000261 	.word	0x20000261
 8002ee4:	20000264 	.word	0x20000264

08002ee8 <_ZN5L6470I8shield_3E21prepare_set_parameterEjj>:
     *           + L6470_ADC_OUT_ID
     *           + L6470_STEP_MODE_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	b2d1      	uxtb	r1, r2
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8002f10:	bf00      	nop
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <_ZN5L6470I8shield_3E16prepare_set_homeEv>:
     *         the home position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_home(void)
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareResetPos();
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <_ZN5L6470I8shield_3E16prepare_set_markEv>:
     *         the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_mark(void)
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
        /*
           Set "0" now as marked position. This value will be replaced by the
           actual position read at the time when the prepared actions will be
           performed.
        */
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2200      	movs	r2, #0
 8002f52:	2102      	movs	r1, #2
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2209      	movs	r2, #9
 8002f5c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8002f60:	bf00      	nop
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <_ZN5L6470I8shield_3E16prepare_set_markEi>:
     *         the marked position.
     * @param  position The given position.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_mark(signed int position)
 8002f68:	b590      	push	{r4, r7, lr}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8002f7a:	681c      	ldr	r4, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6839      	ldr	r1, [r7, #0]
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	4798      	blx	r3
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	461a      	mov	r2, r3
 8002f90:	2102      	movs	r1, #2
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd90      	pop	{r4, r7, pc}

08002fa6 <_ZN5L6470I8shield_3E17prepare_set_speedEj>:
     * @brief  Preparing the command to set the current speed in pps.
     * @param  speed The current speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_speed(unsigned int speed)
 8002fa6:	b590      	push	{r4, r7, lr}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8002fb8:	681c      	ldr	r4, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	ee07 2a90 	vmov	s15, r2
 8002fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fce:	eeb0 0a67 	vmov.f32	s0, s15
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	4798      	blx	r3
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	461a      	mov	r2, r3
 8002fda:	2103      	movs	r1, #3
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd90      	pop	{r4, r7, pc}

08002ff0 <_ZN5L6470I8shield_3E21prepare_set_max_speedEj>:
     * @brief  Preparing the command to set the maximum speed in pps.
     * @param  speed The maximum speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_max_speed(unsigned int speed)
 8002ff0:	b590      	push	{r4, r7, lr}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003002:	681c      	ldr	r4, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	ee07 2a90 	vmov	s15, r2
 8003014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003018:	eeb0 0a67 	vmov.f32	s0, s15
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	4798      	blx	r3
 8003020:	4603      	mov	r3, r0
 8003022:	461a      	mov	r2, r3
 8003024:	2106      	movs	r1, #6
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	bd90      	pop	{r4, r7, pc}

0800303a <_ZN5L6470I8shield_3E21prepare_set_min_speedEj>:
     * @brief  Preparing the command to set the minimum speed in pps.
     * @param  speed The minimum speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_min_speed(unsigned int speed)
 800303a:	b590      	push	{r4, r7, lr}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
 8003042:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800304c:	681c      	ldr	r4, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	ee07 2a90 	vmov	s15, r2
 800305e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003062:	eeb0 0a67 	vmov.f32	s0, s15
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	4798      	blx	r3
 800306a:	4603      	mov	r3, r0
 800306c:	461a      	mov	r2, r3
 800306e:	2107      	movs	r1, #7
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	bd90      	pop	{r4, r7, pc}

08003084 <_ZN5L6470I8shield_3E24prepare_set_accelerationEj>:
     * @brief  Preparing the command to set the acceleration in pps^2.
     * @param  acceleration The acceleration in pps^2.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_acceleration(unsigned int acceleration)
 8003084:	b590      	push	{r4, r7, lr}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003096:	681c      	ldr	r4, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	ee07 2a90 	vmov	s15, r2
 80030a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ac:	eeb0 0a67 	vmov.f32	s0, s15
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	4798      	blx	r3
 80030b4:	4603      	mov	r3, r0
 80030b6:	461a      	mov	r2, r3
 80030b8:	2104      	movs	r1, #4
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd90      	pop	{r4, r7, pc}

080030ce <_ZN5L6470I8shield_3E24prepare_set_decelerationEj>:
     * @brief  Preparing the command to set the deceleration in pps^2.
     * @param  deceleration The deceleration in pps^2.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_deceleration(unsigned int deceleration)
 80030ce:	b590      	push	{r4, r7, lr}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
 80030d6:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80030e0:	681c      	ldr	r4, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	ee07 2a90 	vmov	s15, r2
 80030f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030f6:	eeb0 0a67 	vmov.f32	s0, s15
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	4798      	blx	r3
 80030fe:	4603      	mov	r3, r0
 8003100:	461a      	mov	r2, r3
 8003102:	2105      	movs	r1, #5
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	bd90      	pop	{r4, r7, pc}

08003118 <_ZN5L6470I8shield_3E13prepare_go_toEi>:
     * @brief  Preparing the command to go to a specified position.
     * @param  position The desired position.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_to(signed int position)
 8003118:	b590      	push	{r4, r7, lr}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800312a:	681c      	ldr	r4, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6839      	ldr	r1, [r7, #0]
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	4798      	blx	r3
 800313c:	4603      	mov	r3, r0
 800313e:	4619      	mov	r1, r3
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	bd90      	pop	{r4, r7, pc}

08003154 <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE>:
     * @param  position The desired position.
     * @param  direction The direction of rotation.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 8003154:	b5b0      	push	{r4, r5, r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	4613      	mov	r3, r2
 8003160:	71fb      	strb	r3, [r7, #7]
    {
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800316a:	681c      	ldr	r4, [r3, #0]
 800316c:	79fb      	ldrb	r3, [r7, #7]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 8003172:	2501      	movs	r5, #1
 8003174:	e000      	b.n	8003178 <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 8003176:	2500      	movs	r5, #0
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68b9      	ldr	r1, [r7, #8]
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	4798      	blx	r3
 8003188:	4603      	mov	r3, r0
 800318a:	461a      	mov	r2, r3
 800318c:	4629      	mov	r1, r5
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800319a:	bf00      	nop
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bdb0      	pop	{r4, r5, r7, pc}

080031a2 <_ZN5L6470I8shield_3E15prepare_go_homeEv>:
     * @brief  Preparing the command to go to the home position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_home(void)
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGoHome();
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80031c0:	bf00      	nop
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <_ZN5L6470I8shield_3E15prepare_go_markEv>:
     * @brief  Preparing the command to go to the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_mark(void)
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGoMark();
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
     *         The identifier of the action about the absolute position can be
     *         one of the following:
     *           + L6470_ACT_RST_ID: the absolute position is reset;
     *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
     */
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 80031ee:	b5b0      	push	{r4, r5, r7, lr}
 80031f0:	b084      	sub	sp, #16
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	60f8      	str	r0, [r7, #12]
 80031f6:	607b      	str	r3, [r7, #4]
 80031f8:	460b      	mov	r3, r1
 80031fa:	72fb      	strb	r3, [r7, #11]
 80031fc:	4613      	mov	r3, r2
 80031fe:	72bb      	strb	r3, [r7, #10]
    {
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003208:	681c      	ldr	r4, [r3, #0]
 800320a:	7abb      	ldrb	r3, [r7, #10]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d101      	bne.n	8003214 <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8003210:	2501      	movs	r5, #1
 8003212:	e000      	b.n	8003216 <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8003214:	2500      	movs	r5, #0
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	ee07 2a90 	vmov	s15, r2
 8003226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800322a:	eeb0 0a67 	vmov.f32	s0, s15
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	4798      	blx	r3
 8003232:	4603      	mov	r3, r0
 8003234:	7af9      	ldrb	r1, [r7, #11]
 8003236:	462a      	mov	r2, r5
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003244:	bf00      	nop
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bdb0      	pop	{r4, r5, r7, pc}

0800324c <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE>:
     *         at the maximum speed.
     * @param  direction The direction of rotation.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_run(StepperMotor::direction_t direction)
 800324c:	b5b0      	push	{r4, r5, r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	70fb      	strb	r3, [r7, #3]
    {
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8003260:	681c      	ldr	r4, [r3, #0]
 8003262:	78fb      	ldrb	r3, [r7, #3]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE+0x20>
 8003268:	2501      	movs	r5, #1
 800326a:	e000      	b.n	800326e <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE+0x22>
 800326c:	2500      	movs	r5, #0
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2106      	movs	r1, #6
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	4798      	blx	r3
 800327e:	4603      	mov	r3, r0
 8003280:	461a      	mov	r2, r3
 8003282:	4629      	mov	r1, r5
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003290:	bf00      	nop
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bdb0      	pop	{r4, r5, r7, pc}

08003298 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj>:
     * @param  direction The direction of rotation.
     * @param  speed The speed value in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 8003298:	b5b0      	push	{r4, r5, r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	460b      	mov	r3, r1
 80032a2:	607a      	str	r2, [r7, #4]
 80032a4:	72fb      	strb	r3, [r7, #11]
    {
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80032ae:	681c      	ldr	r4, [r3, #0]
 80032b0:	7afb      	ldrb	r3, [r7, #11]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d101      	bne.n	80032ba <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 80032b6:	2501      	movs	r5, #1
 80032b8:	e000      	b.n	80032bc <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 80032ba:	2500      	movs	r5, #0
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	ee07 2a90 	vmov	s15, r2
 80032cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032d0:	eeb0 0a67 	vmov.f32	s0, s15
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	4798      	blx	r3
 80032d8:	4603      	mov	r3, r0
 80032da:	461a      	mov	r2, r3
 80032dc:	4629      	mov	r1, r5
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80032ea:	bf00      	nop
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bdb0      	pop	{r4, r5, r7, pc}

080032f2 <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj>:
     * @param  direction The direction of rotation.
     * @param  steps The desired number of steps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b084      	sub	sp, #16
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	60f8      	str	r0, [r7, #12]
 80032fa:	460b      	mov	r3, r1
 80032fc:	607a      	str	r2, [r7, #4]
 80032fe:	72fb      	strb	r3, [r7, #11]
    {
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	7afa      	ldrb	r2, [r7, #11]
 800330c:	2a01      	cmp	r2, #1
 800330e:	d101      	bne.n	8003314 <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 8003310:	2101      	movs	r1, #1
 8003312:	e000      	b.n	8003316 <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 8003314:	2100      	movs	r1, #0
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003324:	bf00      	nop
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <_ZN5L6470I8shield_3E17prepare_soft_stopEv>:
     * @brief  Preparing the command to stop the motor.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_soft_stop(void)
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareSoftStop();
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800334a:	bf00      	nop
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <_ZN5L6470I8shield_3E17prepare_hard_stopEv>:
     * @brief  Preparing the command to stop the motor and disabling the power bridge.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_hard_stop(void)
 8003352:	b580      	push	{r7, lr}
 8003354:	b082      	sub	sp, #8
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareHardStop();
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003370:	bf00      	nop
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <_ZN5L6470I8shield_3E16prepare_soft_hizEv>:
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_soft_hiz(void)
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareSoftHiZ();
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003396:	bf00      	nop
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <_ZN5L6470I8shield_3E16prepare_hard_hizEv>:
     * @brief  Preparing the command to disable the power bridge immediately.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_hard_hiz(void)
 800339e:	b580      	push	{r7, lr}
 80033a0:	b082      	sub	sp, #8
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareHardHiZ();
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80033bc:	bf00      	nop
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE>:
     * @retval  None.
     * @warning Setting the step-clock mode requires an explicit action by the user to first
     *          disable the power bridge through the soft_hiz() method.
     * @note    The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	460b      	mov	r3, r1
 80033ce:	70fb      	strb	r3, [r7, #3]
    {
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	78fa      	ldrb	r2, [r7, #3]
 80033dc:	2a01      	cmp	r2, #1
 80033de:	d101      	bne.n	80033e4 <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 80033e0:	2201      	movs	r2, #1
 80033e2:	e000      	b.n	80033e6 <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 80033e4:	2200      	movs	r2, #0
 80033e6:	4611      	mov	r1, r2
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80033f4:	bf00      	nop
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
      *         The identifier of the action about the absolute position can be
      *         one of the following:
      *           + L6470_ACT_RST_ID: the absolute position is reset;
      *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
      */
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	70fb      	strb	r3, [r7, #3]
 8003408:	4613      	mov	r3, r2
 800340a:	70bb      	strb	r3, [r7, #2]
    {
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	78ba      	ldrb	r2, [r7, #2]
 8003418:	2a01      	cmp	r2, #1
 800341a:	d101      	bne.n	8003420 <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 800341c:	2201      	movs	r2, #1
 800341e:	e000      	b.n	8003422 <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8003420:	2200      	movs	r2, #0
 8003422:	78f9      	ldrb	r1, [r7, #3]
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003430:	bf00      	nop
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <_ZN5L6470I8shield_3E20prepare_reset_deviceEv>:
      * @brief  Preparing the command to reset the device to power-up conditions.
      * @param  None.
      * @retval None.
      * @note   The command will be sent by issuing "perform_action()".
      */
    virtual void prepare_reset_device(void)
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareResetDevice();
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003456:	bf00      	nop
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <_ZN5L6470I8shield_3E24perform_prepared_actionsEv>:
      * @brief    Performing all the actions prepared on the components
      *           of the daisy-chain.
      * @param    None.
      * @retval   The raw data returned by the components.
      */
    uint8_t* perform_prepared_actions(void)
 800345e:	b580      	push	{r7, lr}
 8003460:	b082      	sub	sp, #8
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
    {
        return L6470_PerformPreparedApplicationCommand();
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	4798      	blx	r3
 8003474:	4603      	mov	r3, r0
    }
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <_ZN5L6470I8shield_3E19get_prepared_actionEv>:
    /**
      * @brief    Getting the prepared action.
      * @param    None
      * @retval   The prepared action.
      */
    prepared_action_t get_prepared_action(void)
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
    {
        return prepared_action;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    }
 800348c:	4618      	mov	r0, r3
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <_ZN5L6470I8shield_3E10get_resultEPh>:
      * @brief    Converting the raw data received by the component according to
      *           the action performed on it.
      * @param    raw_data The received raw data.
      * @retval   The result of the action performed.
      */
    int32_t get_result(uint8_t *raw_data)
 8003498:	b5b0      	push	{r4, r5, r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
    {
        switch (prepared_action) {
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80034a8:	3b01      	subs	r3, #1
 80034aa:	2b07      	cmp	r3, #7
 80034ac:	f200 80fe 	bhi.w	80036ac <_ZN5L6470I8shield_3E10get_resultEPh+0x214>
 80034b0:	a201      	add	r2, pc, #4	; (adr r2, 80034b8 <_ZN5L6470I8shield_3E10get_resultEPh+0x20>)
 80034b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b6:	bf00      	nop
 80034b8:	080034d9 	.word	0x080034d9
 80034bc:	08003505 	.word	0x08003505
 80034c0:	08003533 	.word	0x08003533
 80034c4:	08003577 	.word	0x08003577
 80034c8:	080035bd 	.word	0x080035bd
 80034cc:	08003603 	.word	0x08003603
 80034d0:	08003649 	.word	0x08003649
 80034d4:	0800368f 	.word	0x0800368f
            case PREPARED_GET_POSITION:
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80034e0:	681c      	ldr	r4, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f503 730d 	add.w	r3, r3, #564	; 0x234
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6a12      	ldr	r2, [r2, #32]
 80034f0:	7b92      	ldrb	r2, [r2, #14]
 80034f2:	6839      	ldr	r1, [r7, #0]
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	4798      	blx	r3
 80034f8:	4603      	mov	r3, r0
 80034fa:	4619      	mov	r1, r3
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	47a0      	blx	r4
 8003500:	4603      	mov	r3, r0
 8003502:	e0d4      	b.n	80036ae <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_MARK:
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800350c:	681c      	ldr	r4, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6a12      	ldr	r2, [r2, #32]
 800351c:	3228      	adds	r2, #40	; 0x28
 800351e:	7b92      	ldrb	r2, [r2, #14]
 8003520:	6839      	ldr	r1, [r7, #0]
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	4798      	blx	r3
 8003526:	4603      	mov	r3, r0
 8003528:	4619      	mov	r1, r3
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	47a0      	blx	r4
 800352e:	4603      	mov	r3, r0
 8003530:	e0bd      	b.n	80036ae <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_SPEED:
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800353a:	681c      	ldr	r4, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8003544:	681d      	ldr	r5, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6a12      	ldr	r2, [r2, #32]
 8003554:	323c      	adds	r2, #60	; 0x3c
 8003556:	7b92      	ldrb	r2, [r2, #14]
 8003558:	6839      	ldr	r1, [r7, #0]
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	4798      	blx	r3
 800355e:	4603      	mov	r3, r0
 8003560:	4619      	mov	r1, r3
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	47a8      	blx	r5
 8003566:	eef0 7a40 	vmov.f32	s15, s0
 800356a:	eeb0 0a67 	vmov.f32	s0, s15
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	47a0      	blx	r4
 8003572:	4603      	mov	r3, r0
 8003574:	e09b      	b.n	80036ae <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_MAX_SPEED:
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800357e:	681c      	ldr	r4, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003588:	681d      	ldr	r5, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6a12      	ldr	r2, [r2, #32]
 8003598:	3278      	adds	r2, #120	; 0x78
 800359a:	7b92      	ldrb	r2, [r2, #14]
 800359c:	6839      	ldr	r1, [r7, #0]
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	4798      	blx	r3
 80035a2:	4603      	mov	r3, r0
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	4619      	mov	r1, r3
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	47a8      	blx	r5
 80035ac:	eef0 7a40 	vmov.f32	s15, s0
 80035b0:	eeb0 0a67 	vmov.f32	s0, s15
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	47a0      	blx	r4
 80035b8:	4603      	mov	r3, r0
 80035ba:	e078      	b.n	80036ae <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_MIN_SPEED:
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80035c4:	681c      	ldr	r4, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80035ce:	681d      	ldr	r5, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f503 730d 	add.w	r3, r3, #564	; 0x234
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6a12      	ldr	r2, [r2, #32]
 80035de:	328c      	adds	r2, #140	; 0x8c
 80035e0:	7b92      	ldrb	r2, [r2, #14]
 80035e2:	6839      	ldr	r1, [r7, #0]
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	4798      	blx	r3
 80035e8:	4603      	mov	r3, r0
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	4619      	mov	r1, r3
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	47a8      	blx	r5
 80035f2:	eef0 7a40 	vmov.f32	s15, s0
 80035f6:	eeb0 0a67 	vmov.f32	s0, s15
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	47a0      	blx	r4
 80035fe:	4603      	mov	r3, r0
 8003600:	e055      	b.n	80036ae <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_ACCELERATION:
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800360a:	681c      	ldr	r4, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8003614:	681d      	ldr	r5, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6a12      	ldr	r2, [r2, #32]
 8003624:	3250      	adds	r2, #80	; 0x50
 8003626:	7b92      	ldrb	r2, [r2, #14]
 8003628:	6839      	ldr	r1, [r7, #0]
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	4798      	blx	r3
 800362e:	4603      	mov	r3, r0
 8003630:	b29b      	uxth	r3, r3
 8003632:	4619      	mov	r1, r3
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	47a8      	blx	r5
 8003638:	eef0 7a40 	vmov.f32	s15, s0
 800363c:	eeb0 0a67 	vmov.f32	s0, s15
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	47a0      	blx	r4
 8003644:	4603      	mov	r3, r0
 8003646:	e032      	b.n	80036ae <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_DECELERATION:
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003650:	681c      	ldr	r4, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800365a:	681d      	ldr	r5, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6a12      	ldr	r2, [r2, #32]
 800366a:	3264      	adds	r2, #100	; 0x64
 800366c:	7b92      	ldrb	r2, [r2, #14]
 800366e:	6839      	ldr	r1, [r7, #0]
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	4798      	blx	r3
 8003674:	4603      	mov	r3, r0
 8003676:	b29b      	uxth	r3, r3
 8003678:	4619      	mov	r1, r3
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	47a8      	blx	r5
 800367e:	eef0 7a40 	vmov.f32	s15, s0
 8003682:	eeb0 0a67 	vmov.f32	s0, s15
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	47a0      	blx	r4
 800368a:	4603      	mov	r3, r0
 800368c:	e00f      	b.n	80036ae <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_DIRECTION:
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2104      	movs	r1, #4
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	4798      	blx	r3
 800369e:	4603      	mov	r3, r0
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d101      	bne.n	80036a8 <_ZN5L6470I8shield_3E10get_resultEPh+0x210>
 80036a4:	2301      	movs	r3, #1
 80036a6:	e002      	b.n	80036ae <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
 80036a8:	2300      	movs	r3, #0
 80036aa:	e000      	b.n	80036ae <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            default:
            case PREPARED_NO_ACTION:
                return 0;
 80036ac:	2300      	movs	r3, #0
        }
    }
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bdb0      	pop	{r4, r5, r7, pc}
 80036b6:	bf00      	nop

080036b8 <_ZN5L6470I8shield_3E13L6470_DISABLEEv>:
    }

    /*
     * Puts the device in reset mode.
     */
    void L6470_DISABLE(void)
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
    {
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6898      	ldr	r0, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	899b      	ldrh	r3, [r3, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	4619      	mov	r1, r3
 80036cc:	f00c fbe8 	bl	800fea0 <HAL_GPIO_WritePin>
    }
 80036d0:	bf00      	nop
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm>:
  * 
  * @param  AbsPos      The absolute position in the range from [-(2^21)] to [+(2^21)-1].
  * @retval Position    The position as signed number.
  */
template <class shield_x>
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
{
  if (AbsPos > L6470_MAX_POSITION)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036e8:	d303      	bcc.n	80036f2 <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	f5a3 0380 	sub.w	r3, r3, #4194304	; 0x400000
 80036f0:	e000      	b.n	80036f4 <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm+0x1c>
  else
    return AbsPos;
 80036f2:	683b      	ldr	r3, [r7, #0]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl>:
  * 
  * @param  Position    The position as signed number.
  * @retval AbsPos      The absolute position in the range from [-(2^21)] to [+(2^21)-1].
  */
template <class shield_x>
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
{
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	db05      	blt.n	800371c <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x1c>
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003716:	da01      	bge.n	800371c <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	e00c      	b.n	8003736 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x36>
  else
  {
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
 8003722:	db06      	blt.n	8003732 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x32>
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	da03      	bge.n	8003732 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
 8003730:	e001      	b.n	8003736 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x36>
    else
      return (L6470_POSITION_RANGE + 1);        // OVF
 8003732:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  }
}
 8003736:	4618      	mov	r0, r3
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
	...

08003744 <_ZN5L6470I8shield_3E20L6470_Speed_2_Step_sEm>:
  * 
  * @param  Speed       The SPEED register value.
  * @retval step/s      The speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
{
  return (Speed * ((float)14.9012e-3));
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	ee07 3a90 	vmov	s15, r3
 8003754:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003758:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003770 <_ZN5L6470I8shield_3E20L6470_Speed_2_Step_sEm+0x2c>
 800375c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003760:	eeb0 0a67 	vmov.f32	s0, s15
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	3c74242a 	.word	0x3c74242a

08003774 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf>:
  * 
  * @param  step/s      The speed as step/s.
  * @retval Speed       The SPEED register value.
  */
template <class shield_x>
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 8003780:	edd7 7a00 	vldr	s15, [r7]
 8003784:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80037b8 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x44>
 8003788:	eef4 7ac7 	vcmpe.f32	s15, s14
 800378c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003790:	d80a      	bhi.n	80037a8 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 8003792:	ed97 7a00 	vldr	s14, [r7]
 8003796:	eddf 6a09 	vldr	s13, [pc, #36]	; 80037bc <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x48>
 800379a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800379e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037a2:	ee17 3a90 	vmov	r3, s15
 80037a6:	e000      	b.n	80037aa <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x36>
  else
    return 0;   // Warning
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	4674241b 	.word	0x4674241b
 80037bc:	3c74242a 	.word	0x3c74242a

080037c0 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et>:
  * 
  * @param  Acc         The ACCEL register value.
  * @retval step/(s^2)  The acceleration as step/(s^2).
  */
template <class shield_x>
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	460b      	mov	r3, r1
 80037ca:	807b      	strh	r3, [r7, #2]
{
  if (Acc <= L6470_MAX_ACC)
 80037cc:	887b      	ldrh	r3, [r7, #2]
 80037ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d2:	d209      	bcs.n	80037e8 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 80037d4:	887b      	ldrh	r3, [r7, #2]
 80037d6:	ee07 3a90 	vmov	s15, r3
 80037da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037de:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80037fc <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x3c>
 80037e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037e6:	e001      	b.n	80037ec <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x2c>
  else
    return 0;   // Warning
 80037e8:	eddf 7a05 	vldr	s15, [pc, #20]	; 8003800 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x40>
}
 80037ec:	eeb0 0a67 	vmov.f32	s0, s15
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	4168d4fe 	.word	0x4168d4fe
 8003800:	00000000 	.word	0x00000000

08003804 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf>:
  * 
  * @param  step/(s^2)  The acceleration as step/(s^2).
  * @retval Acc         The ACCEL register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 8003810:	edd7 7a00 	vldr	s15, [r7]
 8003814:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003848 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x44>
 8003818:	eef4 7ac7 	vcmpe.f32	s15, s14
 800381c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003820:	d80b      	bhi.n	800383a <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8003822:	ed97 7a00 	vldr	s14, [r7]
 8003826:	eddf 6a09 	vldr	s13, [pc, #36]	; 800384c <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x48>
 800382a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800382e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003832:	ee17 3a90 	vmov	r3, s15
 8003836:	b29b      	uxth	r3, r3
 8003838:	e000      	b.n	800383c <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x38>
  else
    return 0;   // Warning
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	4768c671 	.word	0x4768c671
 800384c:	4168d4fe 	.word	0x4168d4fe

08003850 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et>:
  * 
  * @param  Dec         The DECEL register value.
  * @retval step/(s^2)  The deceleration as step/(s^2).
  */
template <class shield_x>
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	807b      	strh	r3, [r7, #2]
{
  if (Dec <= L6470_MAX_DEC)
 800385c:	887b      	ldrh	r3, [r7, #2]
 800385e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003862:	d209      	bcs.n	8003878 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 8003864:	887b      	ldrh	r3, [r7, #2]
 8003866:	ee07 3a90 	vmov	s15, r3
 800386a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800386e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800388c <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x3c>
 8003872:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003876:	e001      	b.n	800387c <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x2c>
  else
    return 0;   // Warning
 8003878:	eddf 7a05 	vldr	s15, [pc, #20]	; 8003890 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x40>
}
 800387c:	eeb0 0a67 	vmov.f32	s0, s15
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	4168d4fe 	.word	0x4168d4fe
 8003890:	00000000 	.word	0x00000000

08003894 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf>:
  * 
  * @param  step/(s^2)  The deceleration as step/(s^2).
  * @retval Dec         The DECEL register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 80038a0:	edd7 7a00 	vldr	s15, [r7]
 80038a4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80038d8 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x44>
 80038a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b0:	d80b      	bhi.n	80038ca <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 80038b2:	ed97 7a00 	vldr	s14, [r7]
 80038b6:	eddf 6a09 	vldr	s13, [pc, #36]	; 80038dc <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x48>
 80038ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038c2:	ee17 3a90 	vmov	r3, s15
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	e000      	b.n	80038cc <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x38>
  else
    return 0;   // Warning
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	4768c671 	.word	0x4768c671
 80038dc:	4168d4fe 	.word	0x4168d4fe

080038e0 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt>:
  * 
  * @param  MaxSpeed    The MAX_SPEED register value.
  * @retval step/s      The max speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	807b      	strh	r3, [r7, #2]
{
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 80038ec:	887b      	ldrh	r3, [r7, #2]
 80038ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038f2:	d209      	bcs.n	8003908 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 80038f4:	887b      	ldrh	r3, [r7, #2]
 80038f6:	ee07 3a90 	vmov	s15, r3
 80038fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038fe:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800391c <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 8003902:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003906:	e001      	b.n	800390c <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 8003908:	eddf 7a05 	vldr	s15, [pc, #20]	; 8003920 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 800390c:	eeb0 0a67 	vmov.f32	s0, s15
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	4174240b 	.word	0x4174240b
 8003920:	00000000 	.word	0x00000000

08003924 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf>:
  * 
  * @param  step/s      The max speed as step/s.
  * @retval MaxSpeed    The MAX_SPEED register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 8003930:	edd7 7a00 	vldr	s15, [r7]
 8003934:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003968 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x44>
 8003938:	eef4 7ac7 	vcmpe.f32	s15, s14
 800393c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003940:	d80b      	bhi.n	800395a <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 8003942:	ed97 7a00 	vldr	s14, [r7]
 8003946:	eddf 6a09 	vldr	s13, [pc, #36]	; 800396c <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x48>
 800394a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800394e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003952:	ee17 3a90 	vmov	r3, s15
 8003956:	b29b      	uxth	r3, r3
 8003958:	e000      	b.n	800395c <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x38>
  else
    return 0;   // Warning
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	4673e702 	.word	0x4673e702
 800396c:	4174240b 	.word	0x4174240b

08003970 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt>:
  * 
  * @param  MinSpeed    The MIN_SPEED register value.
  * @retval step/s      The min speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	460b      	mov	r3, r1
 800397a:	807b      	strh	r3, [r7, #2]
{
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 800397c:	887b      	ldrh	r3, [r7, #2]
 800397e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003982:	d209      	bcs.n	8003998 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 8003984:	887b      	ldrh	r3, [r7, #2]
 8003986:	ee07 3a90 	vmov	s15, r3
 800398a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800398e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80039ac <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x3c>
 8003992:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003996:	e001      	b.n	800399c <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 8003998:	eddf 7a05 	vldr	s15, [pc, #20]	; 80039b0 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 800399c:	eeb0 0a67 	vmov.f32	s0, s15
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	3e742401 	.word	0x3e742401
 80039b0:	00000000 	.word	0x00000000

080039b4 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf>:
  * 
  * @param  step/s      The min speed as step/s.
  * @retval MinSpeed    The MIN_SPEED register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 80039c0:	edd7 7a00 	vldr	s15, [r7]
 80039c4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80039f8 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x44>
 80039c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d0:	d80b      	bhi.n	80039ea <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 80039d2:	ed97 7a00 	vldr	s14, [r7]
 80039d6:	eddf 6a09 	vldr	s13, [pc, #36]	; 80039fc <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x48>
 80039da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039e2:	ee17 3a90 	vmov	r3, s15
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	e000      	b.n	80039ec <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x38>
  else
    return 0;   // Warning
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	447414bf 	.word	0x447414bf
 80039fc:	3e742401 	.word	0x3e742401

08003a00 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt>:
  * 
  * @param  FsSpd       The FS_SPD register value.
  * @retval step/s      The full-step speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	807b      	strh	r3, [r7, #2]
{
  if (FsSpd <= L6470_MAX_FS_SPD)
 8003a0c:	887b      	ldrh	r3, [r7, #2]
 8003a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a12:	d219      	bcs.n	8003a48 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 8003a14:	887b      	ldrh	r3, [r7, #2]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fc fdb4 	bl	8000584 <__aeabi_i2d>
 8003a1c:	f04f 0200 	mov.w	r2, #0
 8003a20:	4b0e      	ldr	r3, [pc, #56]	; (8003a5c <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x5c>)
 8003a22:	f7fc fc63 	bl	80002ec <__adddf3>
 8003a26:	4602      	mov	r2, r0
 8003a28:	460b      	mov	r3, r1
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	f04f 0200 	mov.w	r2, #0
 8003a32:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x60>)
 8003a34:	f7fc fe10 	bl	8000658 <__aeabi_dmul>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4610      	mov	r0, r2
 8003a3e:	4619      	mov	r1, r3
 8003a40:	f7fd f8e2 	bl	8000c08 <__aeabi_d2f>
 8003a44:	4603      	mov	r3, r0
 8003a46:	e001      	b.n	8003a4c <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x4c>
  else
    return 0;   // Warning
 8003a48:	f04f 0300 	mov.w	r3, #0
}
 8003a4c:	ee07 3a90 	vmov	s15, r3
 8003a50:	eeb0 0a67 	vmov.f32	s0, s15
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	3fe00000 	.word	0x3fe00000
 8003a60:	402e8000 	.word	0x402e8000

08003a64 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 8003a70:	edd7 7a00 	vldr	s15, [r7]
 8003a74:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003ab0 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x4c>
 8003a78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a80:	d80f      	bhi.n	8003aa2 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 8003a82:	ed97 7a00 	vldr	s14, [r7]
 8003a86:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8003ab4 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x50>
 8003a8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a8e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003a92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a9a:	ee17 3a90 	vmov	r3, s15
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	e000      	b.n	8003aa4 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x40>
  else
    return 0;   // Warning
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	4673e180 	.word	0x4673e180
 8003ab4:	41740000 	.word	0x41740000

08003ab8 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	807b      	strh	r3, [r7, #2]
{
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 8003ac4:	887b      	ldrh	r3, [r7, #2]
 8003ac6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003aca:	d209      	bcs.n	8003ae0 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 8003acc:	887b      	ldrh	r3, [r7, #2]
 8003ace:	ee07 3a90 	vmov	s15, r3
 8003ad2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ad6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003af4 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x3c>
 8003ada:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ade:	e001      	b.n	8003ae4 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 8003ae0:	eddf 7a05 	vldr	s15, [pc, #20]	; 8003af8 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 8003ae4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	3d7423f4 	.word	0x3d7423f4
 8003af8:	00000000 	.word	0x00000000

08003afc <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 8003b08:	edd7 7a00 	vldr	s15, [r7]
 8003b0c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003b40 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x44>
 8003b10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b18:	d80b      	bhi.n	8003b32 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 8003b1a:	ed97 7a00 	vldr	s14, [r7]
 8003b1e:	eddf 6a09 	vldr	s13, [pc, #36]	; 8003b44 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x48>
 8003b22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b2a:	ee17 3a90 	vmov	r3, s15
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	e000      	b.n	8003b34 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x38>
  else
    return 0;   // Warning
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	44742023 	.word	0x44742023
 8003b44:	3d7423f4 	.word	0x3d7423f4

08003b48 <_ZN5L6470I8shield_3E20L6470_StSlp_2_s_StepEh>:
  * 
  * @param  StartSlope  The ST_SLP register value.
  * @retval s/step      The start slope as s/step.
  */
template <class shield_x>
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	460b      	mov	r3, r1
 8003b52:	70fb      	strb	r3, [r7, #3]
{
//  if (StSlp <= L6470_MAX_ST_SLP)
    return (StSlp * ((float)1.5686e-5));
 8003b54:	78fb      	ldrb	r3, [r7, #3]
 8003b56:	ee07 3a90 	vmov	s15, r3
 8003b5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b5e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003b74 <_ZN5L6470I8shield_3E20L6470_StSlp_2_s_StepEh+0x2c>
 8003b62:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 8003b66:	eeb0 0a67 	vmov.f32	s0, s15
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	3783956e 	.word	0x3783956e

08003b78 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 8003b84:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b88:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003bc0 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x48>
 8003b8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b94:	d80c      	bhi.n	8003bb0 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8003b96:	ed97 7a02 	vldr	s14, [r7, #8]
 8003b9a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8003bc4 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x4c>
 8003b9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ba2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ba6:	edc7 7a01 	vstr	s15, [r7, #4]
 8003baa:	793b      	ldrb	r3, [r7, #4]
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	e000      	b.n	8003bb2 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x3a>
  else
    return 0;   // Warning
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	3b8311d9 	.word	0x3b8311d9
 8003bc4:	3783956e 	.word	0x3783956e

08003bc8 <_ZN5L6470I8shield_3E23L6470_FnSlpAcc_2_s_StepEh>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	70fb      	strb	r3, [r7, #3]
{
//  if (FnSlpAcc <= L6470_MAX_FN_SLP_ACC)
    return (FnSlpAcc * ((float)1.5686e-5));
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	ee07 3a90 	vmov	s15, r3
 8003bda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bde:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003bf4 <_ZN5L6470I8shield_3E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 8003be2:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 8003be6:	eeb0 0a67 	vmov.f32	s0, s15
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	3783956e 	.word	0x3783956e

08003bf8 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 8003c04:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c08:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003c40 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x48>
 8003c0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c14:	d80c      	bhi.n	8003c30 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8003c16:	ed97 7a02 	vldr	s14, [r7, #8]
 8003c1a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8003c44 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 8003c1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c26:	edc7 7a01 	vstr	s15, [r7, #4]
 8003c2a:	793b      	ldrb	r3, [r7, #4]
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	e000      	b.n	8003c32 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x3a>
  else
    return 0;   // Warning
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	3b8311d9 	.word	0x3b8311d9
 8003c44:	3783956e 	.word	0x3783956e

08003c48 <_ZN5L6470I8shield_3E23L6470_FnSlpDec_2_s_StepEh>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	460b      	mov	r3, r1
 8003c52:	70fb      	strb	r3, [r7, #3]
{
//  if (FnSlpDec <= L6470_MAX_FN_SLP_DEC)
    return (FnSlpDec * ((float)1.5686e-5));
 8003c54:	78fb      	ldrb	r3, [r7, #3]
 8003c56:	ee07 3a90 	vmov	s15, r3
 8003c5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c5e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003c74 <_ZN5L6470I8shield_3E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 8003c62:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 8003c66:	eeb0 0a67 	vmov.f32	s0, s15
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	3783956e 	.word	0x3783956e

08003c78 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 8003c84:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c88:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003cc0 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x48>
 8003c8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c94:	d80c      	bhi.n	8003cb0 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8003c96:	ed97 7a02 	vldr	s14, [r7, #8]
 8003c9a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8003cc4 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 8003c9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ca2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ca6:	edc7 7a01 	vstr	s15, [r7, #4]
 8003caa:	793b      	ldrb	r3, [r7, #4]
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	e000      	b.n	8003cb2 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x3a>
  else
    return 0;   // Warning
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	3b8311d9 	.word	0x3b8311d9
 8003cc4:	3783956e 	.word	0x3783956e

08003cc8 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh>:
  * 
  * @param  OcdTh       The OCD_TH register value.
  * @retval mA          The overcurrent threshold as mA.
  */
template <class shield_x>
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	70fb      	strb	r3, [r7, #3]
{
  if (OcdTh <= L6470_MAX_OCD_TH)
 8003cd4:	78fb      	ldrb	r3, [r7, #3]
 8003cd6:	2b0f      	cmp	r3, #15
 8003cd8:	d80a      	bhi.n	8003cf0 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 8003cda:	78fb      	ldrb	r3, [r7, #3]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	ee07 3a90 	vmov	s15, r3
 8003ce2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ce6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003d04 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x3c>
 8003cea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cee:	e001      	b.n	8003cf4 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x2c>
  else
    return 0;   // Warning
 8003cf0:	eddf 7a05 	vldr	s15, [pc, #20]	; 8003d08 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x40>
}
 8003cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	43bb8000 	.word	0x43bb8000
 8003d08:	00000000 	.word	0x00000000

08003d0c <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf>:
  * 
  * @param  mA          The overcurrent threshold as mA.
  * @retval OcdTh       The OCD_TH register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	ed87 0a02 	vstr	s0, [r7, #8]
{
  float result, decimal;
  
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 8003d18:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d1c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003da8 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x9c>
 8003d20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d28:	d836      	bhi.n	8003d98 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8c>
  {
    result = (mA / ((float)375));
 8003d2a:	ed97 7a02 	vldr	s14, [r7, #8]
 8003d2e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8003dac <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0xa0>
 8003d32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d36:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 8003d3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d42:	edc7 7a01 	vstr	s15, [r7, #4]
 8003d46:	793b      	ldrb	r3, [r7, #4]
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	ee07 3a90 	vmov	s15, r3
 8003d4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d52:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d5a:	edc7 7a04 	vstr	s15, [r7, #16]
    
    if (decimal < (float)0.5)
 8003d5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d62:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003d66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d6e:	d50a      	bpl.n	8003d86 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 8003d70:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d78:	edc7 7a01 	vstr	s15, [r7, #4]
 8003d7c:	793b      	ldrb	r3, [r7, #4]
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	3b01      	subs	r3, #1
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	e009      	b.n	8003d9a <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8e>
    else
      return ((uint8_t)result);    
 8003d86:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d8e:	edc7 7a01 	vstr	s15, [r7, #4]
 8003d92:	793b      	ldrb	r3, [r7, #4]
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	e000      	b.n	8003d9a <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8e>
  }
  else
    return 0;   // Warning
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	371c      	adds	r7, #28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	45bb8000 	.word	0x45bb8000
 8003dac:	43bb8000 	.word	0x43bb8000

08003db0 <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh>:
  * 
  * @param  StallTh     The STALL_TH register value.
  * @retval mA          The stall detection threshold as mA.
  */
template <class shield_x>
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	70fb      	strb	r3, [r7, #3]
{
  if (StallTh <= L6470_MAX_STALL_TH)
 8003dbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	db0a      	blt.n	8003dda <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 8003dc4:	78fb      	ldrb	r3, [r7, #3]
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	ee07 3a90 	vmov	s15, r3
 8003dcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dd0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003dec <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x3c>
 8003dd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dd8:	e001      	b.n	8003dde <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x2e>
  else
    return 0;   // Warning
 8003dda:	eddf 7a05 	vldr	s15, [pc, #20]	; 8003df0 <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x40>
}
 8003dde:	eeb0 0a67 	vmov.f32	s0, s15
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	41fa0000 	.word	0x41fa0000
 8003df0:	00000000 	.word	0x00000000

08003df4 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf>:
  * 
  * @param  mA          The stall detection threshold as mA.
  * @retval StallTh     The STALL_TH register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	ed87 0a02 	vstr	s0, [r7, #8]
{
  float result, decimal;
  
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 8003e00:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e04:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003e90 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x9c>
 8003e08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e10:	d836      	bhi.n	8003e80 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8c>
  {
    result = (mA / ((float)31.25));
 8003e12:	ed97 7a02 	vldr	s14, [r7, #8]
 8003e16:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8003e94 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0xa0>
 8003e1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e1e:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 8003e22:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e2a:	edc7 7a01 	vstr	s15, [r7, #4]
 8003e2e:	793b      	ldrb	r3, [r7, #4]
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	ee07 3a90 	vmov	s15, r3
 8003e36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e3a:	ed97 7a05 	vldr	s14, [r7, #20]
 8003e3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e42:	edc7 7a04 	vstr	s15, [r7, #16]
    
    if (decimal < (float)0.5)
 8003e46:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e4a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003e4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e56:	d50a      	bpl.n	8003e6e <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 8003e58:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e60:	edc7 7a01 	vstr	s15, [r7, #4]
 8003e64:	793b      	ldrb	r3, [r7, #4]
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	e009      	b.n	8003e82 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8e>
    else
      return ((uint8_t)result);    
 8003e6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e76:	edc7 7a01 	vstr	s15, [r7, #4]
 8003e7a:	793b      	ldrb	r3, [r7, #4]
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	e000      	b.n	8003e82 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8e>
  }
  else
    return 0;   // Warning
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	371c      	adds	r7, #28
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	457a0000 	.word	0x457a0000
 8003e94:	41fa0000 	.word	0x41fa0000

08003e98 <_ZN5L6470I8shield_3E12L6470_ConfigEPv>:
/**
  * @brief  Configures the L6470 registers.
  * @param  init The pointer to the initialization structure.
  */
template <class shield_x>
status_t L6470<shield_x>::L6470_Config(void *init)
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
{
  /* Reset devices. */
  reset_device();
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	3394      	adds	r3, #148	; 0x94
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	4798      	blx	r3

  /* Reset Status Register flags. */
  get_status();
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	330c      	adds	r3, #12
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	4798      	blx	r3

  /* Prepare the 'Register' field of StepperMotorDriverHandle */
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	edd2 7a05 	vldr	s15, [r2, #20]
 8003ece:	eeb0 0a67 	vmov.f32	s0, s15
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	4798      	blx	r3
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	461a      	mov	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	edd2 7a06 	vldr	s15, [r2, #24]
 8003ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	4798      	blx	r3
 8003ef8:	4603      	mov	r3, r0
 8003efa:	461a      	mov	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	edd2 7a07 	vldr	s15, [r2, #28]
 8003f12:	eeb0 0a67 	vmov.f32	s0, s15
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	4798      	blx	r3
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	edd2 7a08 	vldr	s15, [r2, #32]
 8003f34:	eeb0 0a67 	vmov.f32	s0, s15
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	4798      	blx	r3
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	461a      	mov	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8003f56:	eeb0 0a67 	vmov.f32	s0, s15
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	4798      	blx	r3
 8003f5e:	4603      	mov	r3, r0
 8003f60:	461a      	mov	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003f6e:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8004240 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 8003f72:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	ed93 7a00 	vldr	s14, [r3]
 8003f7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f84:	edc7 7a01 	vstr	s15, [r7, #4]
 8003f88:	793b      	ldrb	r3, [r7, #4]
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003f98:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8004240 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 8003f9c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	ed93 7a00 	vldr	s14, [r3]
 8003fa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003faa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fae:	edc7 7a01 	vstr	s15, [r7, #4]
 8003fb2:	793b      	ldrb	r3, [r7, #4]
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003fc2:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8004240 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 8003fc6:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	ed93 7a00 	vldr	s14, [r3]
 8003fd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fd8:	edc7 7a01 	vstr	s15, [r7, #4]
 8003fdc:	793b      	ldrb	r3, [r7, #4]
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003fec:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8004240 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 8003ff0:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	ed93 7a00 	vldr	s14, [r3]
 8003ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004002:	edc7 7a01 	vstr	s15, [r7, #4]
 8004006:	793b      	ldrb	r3, [r7, #4]
 8004008:	b2da      	uxtb	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8004020:	eeb0 0a67 	vmov.f32	s0, s15
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	4798      	blx	r3
 8004028:	4603      	mov	r3, r0
 800402a:	461a      	mov	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	edd2 7a0f 	vldr	s15, [r2, #60]	; 0x3c
 8004042:	eeb0 0a67 	vmov.f32	s0, s15
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	4798      	blx	r3
 800404a:	4603      	mov	r3, r0
 800404c:	461a      	mov	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	edd2 7a10 	vldr	s15, [r2, #64]	; 0x40
 8004064:	eeb0 0a67 	vmov.f32	s0, s15
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	4798      	blx	r3
 800406c:	4603      	mov	r3, r0
 800406e:	461a      	mov	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 8004086:	eeb0 0a67 	vmov.f32	s0, s15
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	4798      	blx	r3
 800408e:	4603      	mov	r3, r0
 8004090:	461a      	mov	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	edd2 7a13 	vldr	s15, [r2, #76]	; 0x4c
 80040b4:	eeb0 0a67 	vmov.f32	s0, s15
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	4798      	blx	r3
 80040bc:	4603      	mov	r3, r0
 80040be:	461a      	mov	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	edd2 7a14 	vldr	s15, [r2, #80]	; 0x50
 80040d6:	eeb0 0a67 	vmov.f32	s0, s15
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	4798      	blx	r3
 80040de:	4603      	mov	r3, r0
 80040e0:	461a      	mov	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f

  /* Write the L6470 registers with the prepared data */
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 800411c:	2104      	movs	r1, #4
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
 8004132:	2105      	movs	r1, #5
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 8004148:	2106      	movs	r1, #6
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	f8b2 204e 	ldrh.w	r2, [r2, #78]	; 0x4e
 800415e:	2107      	movs	r1, #7
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8004174:	2108      	movs	r1, #8
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800418a:	2109      	movs	r1, #9
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	f892 2053 	ldrb.w	r2, [r2, #83]	; 0x53
 80041a0:	210a      	movs	r1, #10
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80041b6:	210b      	movs	r1, #11
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80041cc:	210c      	movs	r1, #12
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	f8b2 2056 	ldrh.w	r2, [r2, #86]	; 0x56
 80041e2:	210d      	movs	r1, #13
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	f892 2058 	ldrb.w	r2, [r2, #88]	; 0x58
 80041f8:	210e      	movs	r1, #14
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	f892 2059 	ldrb.w	r2, [r2, #89]	; 0x59
 800420e:	210f      	movs	r1, #15
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	f892 205a 	ldrb.w	r2, [r2, #90]	; 0x5a
 8004224:	2110      	movs	r1, #16
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	f892 205b 	ldrb.w	r2, [r2, #91]	; 0x5b
 800423a:	2111      	movs	r1, #17
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	e001      	b.n	8004244 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3ac>
 8004240:	43800000 	.word	0x43800000
 8004244:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	f892 205d 	ldrb.w	r2, [r2, #93]	; 0x5d
 8004256:	2113      	movs	r1, #19
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	f892 205e 	ldrb.w	r2, [r2, #94]	; 0x5e
 800426c:	2114      	movs	r1, #20
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004282:	2116      	movs	r1, #22
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	f8b2 2062 	ldrh.w	r2, [r2, #98]	; 0x62
 8004298:	2117      	movs	r1, #23
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3354      	adds	r3, #84	; 0x54
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	f892 205f 	ldrb.w	r2, [r2, #95]	; 0x5f
 80042ac:	4611      	mov	r1, r2
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	4798      	blx	r3
 80042b2:	4603      	mov	r3, r0
 80042b4:	f083 0301 	eor.w	r3, r3, #1
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e000      	b.n	80042c4 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x42c>
  
  return COMPONENT_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3718      	adds	r7, #24
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 80042cc:	b590      	push	{r4, r7, lr}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af02      	add	r7, sp, #8
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	460b      	mov	r3, r1
 80042d6:	607a      	str	r2, [r7, #4]
 80042d8:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80042e2:	681c      	ldr	r4, [r3, #0]
 80042e4:	7afa      	ldrb	r2, [r7, #11]
 80042e6:	2300      	movs	r3, #0
 80042e8:	9301      	str	r3, [sp, #4]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	4613      	mov	r3, r2
 80042f0:	2201      	movs	r2, #1
 80042f2:	490c      	ldr	r1, [pc, #48]	; (8004324 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a09      	ldr	r2, [pc, #36]	; (8004328 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8004304:	4907      	ldr	r1, [pc, #28]	; (8004324 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a05      	ldr	r2, [pc, #20]	; (800432c <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 8004316:	4904      	ldr	r1, [pc, #16]	; (8004328 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	4798      	blx	r3
}
 800431c:	bf00      	nop
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	bd90      	pop	{r4, r7, pc}
 8004324:	20000264 	.word	0x20000264
 8004328:	20000284 	.word	0x20000284
 800432c:	2000028c 	.word	0x2000028c

08004330 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 8004330:	b590      	push	{r4, r7, lr}
 8004332:	b087      	sub	sp, #28
 8004334:	af02      	add	r7, sp, #8
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004344:	681c      	ldr	r4, [r3, #0]
 8004346:	78fb      	ldrb	r3, [r7, #3]
 8004348:	2200      	movs	r2, #0
 800434a:	9201      	str	r2, [sp, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	9200      	str	r2, [sp, #0]
 8004350:	2202      	movs	r2, #2
 8004352:	4917      	ldr	r1, [pc, #92]	; (80043b0 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a14      	ldr	r2, [pc, #80]	; (80043b4 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8004364:	4912      	ldr	r1, [pc, #72]	; (80043b0 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a10      	ldr	r2, [pc, #64]	; (80043b8 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8004376:	490f      	ldr	r1, [pc, #60]	; (80043b4 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a19      	ldr	r1, [r3, #32]
 8004380:	78fa      	ldrb	r2, [r7, #3]
 8004382:	4613      	mov	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4413      	add	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	440b      	add	r3, r1
 800438c:	7b9b      	ldrb	r3, [r3, #14]
 800438e:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	7bfa      	ldrb	r2, [r7, #15]
 800439c:	4906      	ldr	r1, [pc, #24]	; (80043b8 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	4798      	blx	r3
 80043a2:	4603      	mov	r3, r0
 80043a4:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 80043a6:	68bb      	ldr	r3, [r7, #8]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd90      	pop	{r4, r7, pc}
 80043b0:	20000264 	.word	0x20000264
 80043b4:	20000284 	.word	0x20000284
 80043b8:	2000028c 	.word	0x2000028c

080043bc <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 80043bc:	b590      	push	{r4, r7, lr}
 80043be:	b087      	sub	sp, #28
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	460b      	mov	r3, r1
 80043c6:	607a      	str	r2, [r7, #4]
 80043c8:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80043d2:	681c      	ldr	r4, [r3, #0]
 80043d4:	7afa      	ldrb	r2, [r7, #11]
 80043d6:	2300      	movs	r3, #0
 80043d8:	9301      	str	r3, [sp, #4]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	4613      	mov	r3, r2
 80043e0:	2203      	movs	r2, #3
 80043e2:	490c      	ldr	r1, [pc, #48]	; (8004414 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x58>)
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a09      	ldr	r2, [pc, #36]	; (8004418 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 80043f4:	4907      	ldr	r1, [pc, #28]	; (8004414 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x58>)
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a05      	ldr	r2, [pc, #20]	; (800441c <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x60>)
 8004406:	4904      	ldr	r1, [pc, #16]	; (8004418 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	4798      	blx	r3
}
 800440c:	bf00      	nop
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	bd90      	pop	{r4, r7, pc}
 8004414:	20000264 	.word	0x20000264
 8004418:	20000284 	.word	0x20000284
 800441c:	2000028c 	.word	0x2000028c

08004420 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 8004420:	b590      	push	{r4, r7, lr}
 8004422:	b085      	sub	sp, #20
 8004424:	af02      	add	r7, sp, #8
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	460b      	mov	r3, r1
 800442a:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004434:	681c      	ldr	r4, [r3, #0]
 8004436:	78fb      	ldrb	r3, [r7, #3]
 8004438:	2200      	movs	r2, #0
 800443a:	9201      	str	r2, [sp, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	9200      	str	r2, [sp, #0]
 8004440:	2204      	movs	r2, #4
 8004442:	490c      	ldr	r1, [pc, #48]	; (8004474 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a09      	ldr	r2, [pc, #36]	; (8004478 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8004454:	4907      	ldr	r1, [pc, #28]	; (8004474 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a05      	ldr	r2, [pc, #20]	; (800447c <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 8004466:	4904      	ldr	r1, [pc, #16]	; (8004478 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	4798      	blx	r3
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	bd90      	pop	{r4, r7, pc}
 8004474:	20000264 	.word	0x20000264
 8004478:	20000284 	.word	0x20000284
 800447c:	2000028c 	.word	0x2000028c

08004480 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8004480:	b590      	push	{r4, r7, lr}
 8004482:	b087      	sub	sp, #28
 8004484:	af02      	add	r7, sp, #8
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	460b      	mov	r3, r1
 800448a:	607a      	str	r2, [r7, #4]
 800448c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004496:	681c      	ldr	r4, [r3, #0]
 8004498:	7afa      	ldrb	r2, [r7, #11]
 800449a:	2300      	movs	r3, #0
 800449c:	9301      	str	r3, [sp, #4]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	4613      	mov	r3, r2
 80044a4:	2205      	movs	r2, #5
 80044a6:	490c      	ldr	r1, [pc, #48]	; (80044d8 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a09      	ldr	r2, [pc, #36]	; (80044dc <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 80044b8:	4907      	ldr	r1, [pc, #28]	; (80044d8 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a05      	ldr	r2, [pc, #20]	; (80044e0 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 80044ca:	4904      	ldr	r1, [pc, #16]	; (80044dc <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	4798      	blx	r3
}
 80044d0:	bf00      	nop
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd90      	pop	{r4, r7, pc}
 80044d8:	20000264 	.word	0x20000264
 80044dc:	20000284 	.word	0x20000284
 80044e0:	2000028c 	.word	0x2000028c

080044e4 <_ZN5L6470I8shield_3E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 80044e4:	b590      	push	{r4, r7, lr}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af02      	add	r7, sp, #8
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044f4:	d21f      	bcs.n	8004536 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80044fe:	681c      	ldr	r4, [r3, #0]
 8004500:	2300      	movs	r3, #0
 8004502:	9301      	str	r3, [sp, #4]
 8004504:	2300      	movs	r3, #0
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	2206      	movs	r2, #6
 800450c:	490c      	ldr	r1, [pc, #48]	; (8004540 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x5c>)
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a09      	ldr	r2, [pc, #36]	; (8004544 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x60>)
 800451e:	4908      	ldr	r1, [pc, #32]	; (8004540 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x5c>)
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a06      	ldr	r2, [pc, #24]	; (8004548 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x64>)
 8004530:	4904      	ldr	r1, [pc, #16]	; (8004544 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x60>)
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	4798      	blx	r3
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	bd90      	pop	{r4, r7, pc}
 800453e:	bf00      	nop
 8004540:	20000264 	.word	0x20000264
 8004544:	20000284 	.word	0x20000284
 8004548:	2000028c 	.word	0x2000028c

0800454c <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 800454c:	b590      	push	{r4, r7, lr}
 800454e:	b087      	sub	sp, #28
 8004550:	af02      	add	r7, sp, #8
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	460b      	mov	r3, r1
 8004556:	607a      	str	r2, [r7, #4]
 8004558:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004560:	d220      	bcs.n	80045a4 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800456a:	681c      	ldr	r4, [r3, #0]
 800456c:	7afa      	ldrb	r2, [r7, #11]
 800456e:	2300      	movs	r3, #0
 8004570:	9301      	str	r3, [sp, #4]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	4613      	mov	r3, r2
 8004578:	2207      	movs	r2, #7
 800457a:	490c      	ldr	r1, [pc, #48]	; (80045ac <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a09      	ldr	r2, [pc, #36]	; (80045b0 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 800458c:	4907      	ldr	r1, [pc, #28]	; (80045ac <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a05      	ldr	r2, [pc, #20]	; (80045b4 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 800459e:	4904      	ldr	r1, [pc, #16]	; (80045b0 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	4798      	blx	r3
}
 80045a4:	bf00      	nop
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd90      	pop	{r4, r7, pc}
 80045ac:	20000264 	.word	0x20000264
 80045b0:	20000284 	.word	0x20000284
 80045b4:	2000028c 	.word	0x2000028c

080045b8 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 80045b8:	b590      	push	{r4, r7, lr}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af02      	add	r7, sp, #8
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	607b      	str	r3, [r7, #4]
 80045c2:	460b      	mov	r3, r1
 80045c4:	72fb      	strb	r3, [r7, #11]
 80045c6:	4613      	mov	r3, r2
 80045c8:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80045d2:	681c      	ldr	r4, [r3, #0]
 80045d4:	7af9      	ldrb	r1, [r7, #11]
 80045d6:	7abb      	ldrb	r3, [r7, #10]
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	9201      	str	r2, [sp, #4]
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	460b      	mov	r3, r1
 80045e0:	2208      	movs	r2, #8
 80045e2:	490c      	ldr	r1, [pc, #48]	; (8004614 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a09      	ldr	r2, [pc, #36]	; (8004618 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 80045f4:	4907      	ldr	r1, [pc, #28]	; (8004614 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a05      	ldr	r2, [pc, #20]	; (800461c <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 8004606:	4904      	ldr	r1, [pc, #16]	; (8004618 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	4798      	blx	r3
}
 800460c:	bf00      	nop
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	bd90      	pop	{r4, r7, pc}
 8004614:	20000264 	.word	0x20000264
 8004618:	20000284 	.word	0x20000284
 800461c:	2000028c 	.word	0x2000028c

08004620 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8004620:	b590      	push	{r4, r7, lr}
 8004622:	b085      	sub	sp, #20
 8004624:	af02      	add	r7, sp, #8
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	460b      	mov	r3, r1
 800462a:	70fb      	strb	r3, [r7, #3]
 800462c:	4613      	mov	r3, r2
 800462e:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004638:	681c      	ldr	r4, [r3, #0]
 800463a:	78fa      	ldrb	r2, [r7, #3]
 800463c:	78bb      	ldrb	r3, [r7, #2]
 800463e:	2100      	movs	r1, #0
 8004640:	9101      	str	r1, [sp, #4]
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	4613      	mov	r3, r2
 8004646:	2209      	movs	r2, #9
 8004648:	490c      	ldr	r1, [pc, #48]	; (800467c <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a09      	ldr	r2, [pc, #36]	; (8004680 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 800465a:	4908      	ldr	r1, [pc, #32]	; (800467c <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a06      	ldr	r2, [pc, #24]	; (8004684 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 800466c:	4904      	ldr	r1, [pc, #16]	; (8004680 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	4798      	blx	r3
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	bd90      	pop	{r4, r7, pc}
 800467a:	bf00      	nop
 800467c:	20000264 	.word	0x20000264
 8004680:	20000284 	.word	0x20000284
 8004684:	2000028c 	.word	0x2000028c

08004688 <_ZN5L6470I8shield_3E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 8004688:	b590      	push	{r4, r7, lr}
 800468a:	b085      	sub	sp, #20
 800468c:	af02      	add	r7, sp, #8
 800468e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004698:	681c      	ldr	r4, [r3, #0]
 800469a:	2300      	movs	r3, #0
 800469c:	9301      	str	r3, [sp, #4]
 800469e:	2300      	movs	r3, #0
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	2300      	movs	r3, #0
 80046a4:	220a      	movs	r2, #10
 80046a6:	490c      	ldr	r1, [pc, #48]	; (80046d8 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x50>)
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a09      	ldr	r2, [pc, #36]	; (80046dc <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x54>)
 80046b8:	4907      	ldr	r1, [pc, #28]	; (80046d8 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x50>)
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a05      	ldr	r2, [pc, #20]	; (80046e0 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x58>)
 80046ca:	4904      	ldr	r1, [pc, #16]	; (80046dc <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x54>)
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	4798      	blx	r3
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd90      	pop	{r4, r7, pc}
 80046d8:	20000264 	.word	0x20000264
 80046dc:	20000284 	.word	0x20000284
 80046e0:	2000028c 	.word	0x2000028c

080046e4 <_ZN5L6470I8shield_3E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 80046e4:	b590      	push	{r4, r7, lr}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80046f4:	681c      	ldr	r4, [r3, #0]
 80046f6:	2300      	movs	r3, #0
 80046f8:	9301      	str	r3, [sp, #4]
 80046fa:	2300      	movs	r3, #0
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	2300      	movs	r3, #0
 8004700:	220b      	movs	r2, #11
 8004702:	490c      	ldr	r1, [pc, #48]	; (8004734 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x50>)
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a09      	ldr	r2, [pc, #36]	; (8004738 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x54>)
 8004714:	4907      	ldr	r1, [pc, #28]	; (8004734 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x50>)
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a05      	ldr	r2, [pc, #20]	; (800473c <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x58>)
 8004726:	4904      	ldr	r1, [pc, #16]	; (8004738 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x54>)
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	4798      	blx	r3
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	bd90      	pop	{r4, r7, pc}
 8004734:	20000264 	.word	0x20000264
 8004738:	20000284 	.word	0x20000284
 800473c:	2000028c 	.word	0x2000028c

08004740 <_ZN5L6470I8shield_3E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 8004740:	b590      	push	{r4, r7, lr}
 8004742:	b085      	sub	sp, #20
 8004744:	af02      	add	r7, sp, #8
 8004746:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004750:	681c      	ldr	r4, [r3, #0]
 8004752:	2300      	movs	r3, #0
 8004754:	9301      	str	r3, [sp, #4]
 8004756:	2300      	movs	r3, #0
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	2300      	movs	r3, #0
 800475c:	220c      	movs	r2, #12
 800475e:	490c      	ldr	r1, [pc, #48]	; (8004790 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x50>)
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a09      	ldr	r2, [pc, #36]	; (8004794 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x54>)
 8004770:	4907      	ldr	r1, [pc, #28]	; (8004790 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x50>)
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a05      	ldr	r2, [pc, #20]	; (8004798 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x58>)
 8004782:	4904      	ldr	r1, [pc, #16]	; (8004794 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x54>)
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	4798      	blx	r3
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	bd90      	pop	{r4, r7, pc}
 8004790:	20000264 	.word	0x20000264
 8004794:	20000284 	.word	0x20000284
 8004798:	2000028c 	.word	0x2000028c

0800479c <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 800479c:	b590      	push	{r4, r7, lr}
 800479e:	b085      	sub	sp, #20
 80047a0:	af02      	add	r7, sp, #8
 80047a2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80047ac:	681c      	ldr	r4, [r3, #0]
 80047ae:	2300      	movs	r3, #0
 80047b0:	9301      	str	r3, [sp, #4]
 80047b2:	2300      	movs	r3, #0
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	2300      	movs	r3, #0
 80047b8:	220d      	movs	r2, #13
 80047ba:	490c      	ldr	r1, [pc, #48]	; (80047ec <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x50>)
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a09      	ldr	r2, [pc, #36]	; (80047f0 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x54>)
 80047cc:	4907      	ldr	r1, [pc, #28]	; (80047ec <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x50>)
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a05      	ldr	r2, [pc, #20]	; (80047f4 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x58>)
 80047de:	4904      	ldr	r1, [pc, #16]	; (80047f0 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x54>)
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	4798      	blx	r3
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd90      	pop	{r4, r7, pc}
 80047ec:	20000264 	.word	0x20000264
 80047f0:	20000284 	.word	0x20000284
 80047f4:	2000028c 	.word	0x2000028c

080047f8 <_ZN5L6470I8shield_3E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 80047f8:	b590      	push	{r4, r7, lr}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af02      	add	r7, sp, #8
 80047fe:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004808:	681c      	ldr	r4, [r3, #0]
 800480a:	2300      	movs	r3, #0
 800480c:	9301      	str	r3, [sp, #4]
 800480e:	2300      	movs	r3, #0
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	2300      	movs	r3, #0
 8004814:	220e      	movs	r2, #14
 8004816:	490c      	ldr	r1, [pc, #48]	; (8004848 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x50>)
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a09      	ldr	r2, [pc, #36]	; (800484c <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x54>)
 8004828:	4907      	ldr	r1, [pc, #28]	; (8004848 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x50>)
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a05      	ldr	r2, [pc, #20]	; (8004850 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x58>)
 800483a:	4904      	ldr	r1, [pc, #16]	; (800484c <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x54>)
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	4798      	blx	r3
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	bd90      	pop	{r4, r7, pc}
 8004848:	20000264 	.word	0x20000264
 800484c:	20000284 	.word	0x20000284
 8004850:	2000028c 	.word	0x2000028c

08004854 <_ZN5L6470I8shield_3E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 8004854:	b590      	push	{r4, r7, lr}
 8004856:	b085      	sub	sp, #20
 8004858:	af02      	add	r7, sp, #8
 800485a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004864:	681c      	ldr	r4, [r3, #0]
 8004866:	2300      	movs	r3, #0
 8004868:	9301      	str	r3, [sp, #4]
 800486a:	2300      	movs	r3, #0
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	2300      	movs	r3, #0
 8004870:	220f      	movs	r2, #15
 8004872:	490c      	ldr	r1, [pc, #48]	; (80048a4 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x50>)
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a09      	ldr	r2, [pc, #36]	; (80048a8 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x54>)
 8004884:	4907      	ldr	r1, [pc, #28]	; (80048a4 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x50>)
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a05      	ldr	r2, [pc, #20]	; (80048ac <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x58>)
 8004896:	4904      	ldr	r1, [pc, #16]	; (80048a8 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x54>)
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	4798      	blx	r3
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd90      	pop	{r4, r7, pc}
 80048a4:	20000264 	.word	0x20000264
 80048a8:	20000284 	.word	0x20000284
 80048ac:	2000028c 	.word	0x2000028c

080048b0 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 80048b0:	b590      	push	{r4, r7, lr}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af02      	add	r7, sp, #8
 80048b6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80048c0:	681c      	ldr	r4, [r3, #0]
 80048c2:	2300      	movs	r3, #0
 80048c4:	9301      	str	r3, [sp, #4]
 80048c6:	2300      	movs	r3, #0
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	2300      	movs	r3, #0
 80048cc:	2210      	movs	r2, #16
 80048ce:	490c      	ldr	r1, [pc, #48]	; (8004900 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x50>)
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a09      	ldr	r2, [pc, #36]	; (8004904 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x54>)
 80048e0:	4907      	ldr	r1, [pc, #28]	; (8004900 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x50>)
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a05      	ldr	r2, [pc, #20]	; (8004908 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x58>)
 80048f2:	4904      	ldr	r1, [pc, #16]	; (8004904 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x54>)
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	4798      	blx	r3
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd90      	pop	{r4, r7, pc}
 8004900:	20000264 	.word	0x20000264
 8004904:	20000284 	.word	0x20000284
 8004908:	2000028c 	.word	0x2000028c

0800490c <_ZN5L6470I8shield_3E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 800490c:	b590      	push	{r4, r7, lr}
 800490e:	b085      	sub	sp, #20
 8004910:	af02      	add	r7, sp, #8
 8004912:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800491c:	681c      	ldr	r4, [r3, #0]
 800491e:	2300      	movs	r3, #0
 8004920:	9301      	str	r3, [sp, #4]
 8004922:	2300      	movs	r3, #0
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	2300      	movs	r3, #0
 8004928:	2211      	movs	r2, #17
 800492a:	490c      	ldr	r1, [pc, #48]	; (800495c <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x50>)
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a09      	ldr	r2, [pc, #36]	; (8004960 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x54>)
 800493c:	4907      	ldr	r1, [pc, #28]	; (800495c <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x50>)
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a05      	ldr	r2, [pc, #20]	; (8004964 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x58>)
 800494e:	4904      	ldr	r1, [pc, #16]	; (8004960 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x54>)
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	4798      	blx	r3
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	bd90      	pop	{r4, r7, pc}
 800495c:	20000264 	.word	0x20000264
 8004960:	20000284 	.word	0x20000284
 8004964:	2000028c 	.word	0x2000028c

08004968 <_ZN5L6470I8shield_3E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 8004968:	b590      	push	{r4, r7, lr}
 800496a:	b087      	sub	sp, #28
 800496c:	af02      	add	r7, sp, #8
 800496e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004978:	681c      	ldr	r4, [r3, #0]
 800497a:	2300      	movs	r3, #0
 800497c:	9301      	str	r3, [sp, #4]
 800497e:	2300      	movs	r3, #0
 8004980:	9300      	str	r3, [sp, #0]
 8004982:	2300      	movs	r3, #0
 8004984:	2212      	movs	r2, #18
 8004986:	4912      	ldr	r1, [pc, #72]	; (80049d0 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x68>)
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a0f      	ldr	r2, [pc, #60]	; (80049d4 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x6c>)
 8004998:	490d      	ldr	r1, [pc, #52]	; (80049d0 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x68>)
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a0b      	ldr	r2, [pc, #44]	; (80049d8 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x70>)
 80049aa:	490a      	ldr	r1, [pc, #40]	; (80049d4 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x6c>)
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f503 730d 	add.w	r3, r3, #564	; 0x234
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2202      	movs	r2, #2
 80049bc:	4906      	ldr	r1, [pc, #24]	; (80049d8 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x70>)
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	4798      	blx	r3
 80049c2:	4603      	mov	r3, r0
 80049c4:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 80049c6:	89fb      	ldrh	r3, [r7, #14]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3714      	adds	r7, #20
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd90      	pop	{r4, r7, pc}
 80049d0:	20000264 	.word	0x20000264
 80049d4:	20000284 	.word	0x20000284
 80049d8:	2000028c 	.word	0x2000028c

080049dc <_ZN5L6470I8shield_3E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 80049dc:	b590      	push	{r4, r7, lr}
 80049de:	b087      	sub	sp, #28
 80049e0:	af02      	add	r7, sp, #8
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	460b      	mov	r3, r1
 80049e6:	607a      	str	r2, [r7, #4]
 80049e8:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80049f2:	681c      	ldr	r4, [r3, #0]
 80049f4:	7afa      	ldrb	r2, [r7, #11]
 80049f6:	2300      	movs	r3, #0
 80049f8:	9301      	str	r3, [sp, #4]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	4613      	mov	r3, r2
 8004a00:	2201      	movs	r2, #1
 8004a02:	4903      	ldr	r1, [pc, #12]	; (8004a10 <_ZN5L6470I8shield_3E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	47a0      	blx	r4
}
 8004a08:	bf00      	nop
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd90      	pop	{r4, r7, pc}
 8004a10:	20000264 	.word	0x20000264

08004a14 <_ZN5L6470I8shield_3E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 8004a14:	b590      	push	{r4, r7, lr}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af02      	add	r7, sp, #8
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004a28:	681c      	ldr	r4, [r3, #0]
 8004a2a:	78fb      	ldrb	r3, [r7, #3]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	9201      	str	r2, [sp, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	9200      	str	r2, [sp, #0]
 8004a34:	2202      	movs	r2, #2
 8004a36:	4903      	ldr	r1, [pc, #12]	; (8004a44 <_ZN5L6470I8shield_3E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	47a0      	blx	r4
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd90      	pop	{r4, r7, pc}
 8004a44:	20000264 	.word	0x20000264

08004a48 <_ZN5L6470I8shield_3E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8004a48:	b590      	push	{r4, r7, lr}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af02      	add	r7, sp, #8
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	460b      	mov	r3, r1
 8004a52:	607a      	str	r2, [r7, #4]
 8004a54:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004a5e:	681c      	ldr	r4, [r3, #0]
 8004a60:	7afa      	ldrb	r2, [r7, #11]
 8004a62:	2300      	movs	r3, #0
 8004a64:	9301      	str	r3, [sp, #4]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	2203      	movs	r2, #3
 8004a6e:	4903      	ldr	r1, [pc, #12]	; (8004a7c <_ZN5L6470I8shield_3E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	47a0      	blx	r4
}
 8004a74:	bf00      	nop
 8004a76:	3714      	adds	r7, #20
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd90      	pop	{r4, r7, pc}
 8004a7c:	20000264 	.word	0x20000264

08004a80 <_ZN5L6470I8shield_3E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 8004a80:	b590      	push	{r4, r7, lr}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af02      	add	r7, sp, #8
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004a94:	681c      	ldr	r4, [r3, #0]
 8004a96:	78fb      	ldrb	r3, [r7, #3]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	9201      	str	r2, [sp, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	9200      	str	r2, [sp, #0]
 8004aa0:	2204      	movs	r2, #4
 8004aa2:	4903      	ldr	r1, [pc, #12]	; (8004ab0 <_ZN5L6470I8shield_3E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	47a0      	blx	r4
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd90      	pop	{r4, r7, pc}
 8004ab0:	20000264 	.word	0x20000264

08004ab4 <_ZN5L6470I8shield_3E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8004ab4:	b590      	push	{r4, r7, lr}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af02      	add	r7, sp, #8
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	460b      	mov	r3, r1
 8004abe:	607a      	str	r2, [r7, #4]
 8004ac0:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004aca:	681c      	ldr	r4, [r3, #0]
 8004acc:	7afa      	ldrb	r2, [r7, #11]
 8004ace:	2300      	movs	r3, #0
 8004ad0:	9301      	str	r3, [sp, #4]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	2205      	movs	r2, #5
 8004ada:	4903      	ldr	r1, [pc, #12]	; (8004ae8 <_ZN5L6470I8shield_3E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	47a0      	blx	r4
}
 8004ae0:	bf00      	nop
 8004ae2:	3714      	adds	r7, #20
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd90      	pop	{r4, r7, pc}
 8004ae8:	20000264 	.word	0x20000264

08004aec <_ZN5L6470I8shield_3E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 8004aec:	b590      	push	{r4, r7, lr}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af02      	add	r7, sp, #8
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004afe:	681c      	ldr	r4, [r3, #0]
 8004b00:	2300      	movs	r3, #0
 8004b02:	9301      	str	r3, [sp, #4]
 8004b04:	2300      	movs	r3, #0
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	2206      	movs	r2, #6
 8004b0c:	4903      	ldr	r1, [pc, #12]	; (8004b1c <_ZN5L6470I8shield_3E17L6470_PrepareGoToEm+0x30>)
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	47a0      	blx	r4
}
 8004b12:	bf00      	nop
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd90      	pop	{r4, r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	20000264 	.word	0x20000264

08004b20 <_ZN5L6470I8shield_3E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 8004b20:	b590      	push	{r4, r7, lr}
 8004b22:	b087      	sub	sp, #28
 8004b24:	af02      	add	r7, sp, #8
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	460b      	mov	r3, r1
 8004b2a:	607a      	str	r2, [r7, #4]
 8004b2c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004b36:	681c      	ldr	r4, [r3, #0]
 8004b38:	7afa      	ldrb	r2, [r7, #11]
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	9301      	str	r3, [sp, #4]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	4613      	mov	r3, r2
 8004b44:	2207      	movs	r2, #7
 8004b46:	4903      	ldr	r1, [pc, #12]	; (8004b54 <_ZN5L6470I8shield_3E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	47a0      	blx	r4
}
 8004b4c:	bf00      	nop
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd90      	pop	{r4, r7, pc}
 8004b54:	20000264 	.word	0x20000264

08004b58 <_ZN5L6470I8shield_3E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8004b58:	b590      	push	{r4, r7, lr}
 8004b5a:	b087      	sub	sp, #28
 8004b5c:	af02      	add	r7, sp, #8
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	607b      	str	r3, [r7, #4]
 8004b62:	460b      	mov	r3, r1
 8004b64:	72fb      	strb	r3, [r7, #11]
 8004b66:	4613      	mov	r3, r2
 8004b68:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004b72:	681c      	ldr	r4, [r3, #0]
 8004b74:	7af9      	ldrb	r1, [r7, #11]
 8004b76:	7abb      	ldrb	r3, [r7, #10]
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	9201      	str	r2, [sp, #4]
 8004b7c:	9300      	str	r3, [sp, #0]
 8004b7e:	460b      	mov	r3, r1
 8004b80:	2208      	movs	r2, #8
 8004b82:	4903      	ldr	r1, [pc, #12]	; (8004b90 <_ZN5L6470I8shield_3E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	47a0      	blx	r4
}
 8004b88:	bf00      	nop
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd90      	pop	{r4, r7, pc}
 8004b90:	20000264 	.word	0x20000264

08004b94 <_ZN5L6470I8shield_3E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8004b94:	b590      	push	{r4, r7, lr}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af02      	add	r7, sp, #8
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	70fb      	strb	r3, [r7, #3]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004bac:	681c      	ldr	r4, [r3, #0]
 8004bae:	78fa      	ldrb	r2, [r7, #3]
 8004bb0:	78bb      	ldrb	r3, [r7, #2]
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	9101      	str	r1, [sp, #4]
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	2209      	movs	r2, #9
 8004bbc:	4903      	ldr	r1, [pc, #12]	; (8004bcc <_ZN5L6470I8shield_3E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	47a0      	blx	r4
}
 8004bc2:	bf00      	nop
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd90      	pop	{r4, r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	20000264 	.word	0x20000264

08004bd0 <_ZN5L6470I8shield_3E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 8004bd0:	b590      	push	{r4, r7, lr}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af02      	add	r7, sp, #8
 8004bd6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004be0:	681c      	ldr	r4, [r3, #0]
 8004be2:	2300      	movs	r3, #0
 8004be4:	9301      	str	r3, [sp, #4]
 8004be6:	2300      	movs	r3, #0
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	2300      	movs	r3, #0
 8004bec:	220a      	movs	r2, #10
 8004bee:	4903      	ldr	r1, [pc, #12]	; (8004bfc <_ZN5L6470I8shield_3E19L6470_PrepareGoHomeEv+0x2c>)
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	47a0      	blx	r4
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd90      	pop	{r4, r7, pc}
 8004bfc:	20000264 	.word	0x20000264

08004c00 <_ZN5L6470I8shield_3E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 8004c00:	b590      	push	{r4, r7, lr}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af02      	add	r7, sp, #8
 8004c06:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004c10:	681c      	ldr	r4, [r3, #0]
 8004c12:	2300      	movs	r3, #0
 8004c14:	9301      	str	r3, [sp, #4]
 8004c16:	2300      	movs	r3, #0
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	220b      	movs	r2, #11
 8004c1e:	4903      	ldr	r1, [pc, #12]	; (8004c2c <_ZN5L6470I8shield_3E19L6470_PrepareGoMarkEv+0x2c>)
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	47a0      	blx	r4
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd90      	pop	{r4, r7, pc}
 8004c2c:	20000264 	.word	0x20000264

08004c30 <_ZN5L6470I8shield_3E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 8004c30:	b590      	push	{r4, r7, lr}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af02      	add	r7, sp, #8
 8004c36:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004c40:	681c      	ldr	r4, [r3, #0]
 8004c42:	2300      	movs	r3, #0
 8004c44:	9301      	str	r3, [sp, #4]
 8004c46:	2300      	movs	r3, #0
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	220c      	movs	r2, #12
 8004c4e:	4903      	ldr	r1, [pc, #12]	; (8004c5c <_ZN5L6470I8shield_3E21L6470_PrepareResetPosEv+0x2c>)
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	47a0      	blx	r4
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd90      	pop	{r4, r7, pc}
 8004c5c:	20000264 	.word	0x20000264

08004c60 <_ZN5L6470I8shield_3E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 8004c60:	b590      	push	{r4, r7, lr}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af02      	add	r7, sp, #8
 8004c66:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004c70:	681c      	ldr	r4, [r3, #0]
 8004c72:	2300      	movs	r3, #0
 8004c74:	9301      	str	r3, [sp, #4]
 8004c76:	2300      	movs	r3, #0
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	220d      	movs	r2, #13
 8004c7e:	4903      	ldr	r1, [pc, #12]	; (8004c8c <_ZN5L6470I8shield_3E24L6470_PrepareResetDeviceEv+0x2c>)
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	47a0      	blx	r4
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd90      	pop	{r4, r7, pc}
 8004c8c:	20000264 	.word	0x20000264

08004c90 <_ZN5L6470I8shield_3E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 8004c90:	b590      	push	{r4, r7, lr}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af02      	add	r7, sp, #8
 8004c96:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004ca0:	681c      	ldr	r4, [r3, #0]
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	9301      	str	r3, [sp, #4]
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	2300      	movs	r3, #0
 8004cac:	220e      	movs	r2, #14
 8004cae:	4903      	ldr	r1, [pc, #12]	; (8004cbc <_ZN5L6470I8shield_3E21L6470_PrepareSoftStopEv+0x2c>)
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	47a0      	blx	r4
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd90      	pop	{r4, r7, pc}
 8004cbc:	20000264 	.word	0x20000264

08004cc0 <_ZN5L6470I8shield_3E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 8004cc0:	b590      	push	{r4, r7, lr}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af02      	add	r7, sp, #8
 8004cc6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004cd0:	681c      	ldr	r4, [r3, #0]
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	9301      	str	r3, [sp, #4]
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	2300      	movs	r3, #0
 8004cdc:	220f      	movs	r2, #15
 8004cde:	4903      	ldr	r1, [pc, #12]	; (8004cec <_ZN5L6470I8shield_3E21L6470_PrepareHardStopEv+0x2c>)
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	47a0      	blx	r4
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd90      	pop	{r4, r7, pc}
 8004cec:	20000264 	.word	0x20000264

08004cf0 <_ZN5L6470I8shield_3E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 8004cf0:	b590      	push	{r4, r7, lr}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af02      	add	r7, sp, #8
 8004cf6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004d00:	681c      	ldr	r4, [r3, #0]
 8004d02:	2300      	movs	r3, #0
 8004d04:	9301      	str	r3, [sp, #4]
 8004d06:	2300      	movs	r3, #0
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	2210      	movs	r2, #16
 8004d0e:	4903      	ldr	r1, [pc, #12]	; (8004d1c <_ZN5L6470I8shield_3E20L6470_PrepareSoftHiZEv+0x2c>)
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	47a0      	blx	r4
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd90      	pop	{r4, r7, pc}
 8004d1c:	20000264 	.word	0x20000264

08004d20 <_ZN5L6470I8shield_3E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 8004d20:	b590      	push	{r4, r7, lr}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af02      	add	r7, sp, #8
 8004d26:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004d30:	681c      	ldr	r4, [r3, #0]
 8004d32:	2300      	movs	r3, #0
 8004d34:	9301      	str	r3, [sp, #4]
 8004d36:	2300      	movs	r3, #0
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	2211      	movs	r2, #17
 8004d3e:	4903      	ldr	r1, [pc, #12]	; (8004d4c <_ZN5L6470I8shield_3E20L6470_PrepareHardHiZEv+0x2c>)
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	47a0      	blx	r4
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd90      	pop	{r4, r7, pc}
 8004d4c:	20000264 	.word	0x20000264

08004d50 <_ZN5L6470I8shield_3E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 8004d50:	b590      	push	{r4, r7, lr}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af02      	add	r7, sp, #8
 8004d56:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004d60:	681c      	ldr	r4, [r3, #0]
 8004d62:	2300      	movs	r3, #0
 8004d64:	9301      	str	r3, [sp, #4]
 8004d66:	2300      	movs	r3, #0
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	2212      	movs	r2, #18
 8004d6e:	4903      	ldr	r1, [pc, #12]	; (8004d7c <_ZN5L6470I8shield_3E22L6470_PrepareGetStatusEv+0x2c>)
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	47a0      	blx	r4
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd90      	pop	{r4, r7, pc}
 8004d7c:	20000264 	.word	0x20000264

08004d80 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a09      	ldr	r2, [pc, #36]	; (8004db8 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 8004d94:	4909      	ldr	r1, [pc, #36]	; (8004dbc <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a06      	ldr	r2, [pc, #24]	; (8004dc0 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 8004da6:	4904      	ldr	r1, [pc, #16]	; (8004db8 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 8004dac:	4b04      	ldr	r3, [pc, #16]	; (8004dc0 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	20000284 	.word	0x20000284
 8004dbc:	20000264 	.word	0x20000264
 8004dc0:	2000028c 	.word	0x2000028c

08004dc4 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 8004dc4:	b590      	push	{r4, r7, lr}
 8004dc6:	b089      	sub	sp, #36	; 0x24
 8004dc8:	af02      	add	r7, sp, #8
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 8004dd0:	4b17      	ldr	r3, [pc, #92]	; (8004e30 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	75fb      	strb	r3, [r7, #23]
 8004dda:	e020      	b.n	8004e1e <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8004de4:	681c      	ldr	r4, [r3, #0]
 8004de6:	7dfb      	ldrb	r3, [r7, #23]
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	461a      	mov	r2, r3
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	1899      	adds	r1, r3, r2
 8004df0:	7dfb      	ldrb	r3, [r7, #23]
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	461a      	mov	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	441a      	add	r2, r3
 8004dfa:	230a      	movs	r3, #10
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	2302      	movs	r3, #2
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 8004e04:	2300      	movs	r3, #0
 8004e06:	75bb      	strb	r3, [r7, #22]
 8004e08:	e003      	b.n	8004e12 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x4e>
 8004e0a:	bf00      	nop
 8004e0c:	7dbb      	ldrb	r3, [r7, #22]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	75bb      	strb	r3, [r7, #22]
 8004e12:	7dbb      	ldrb	r3, [r7, #22]
 8004e14:	2b7c      	cmp	r3, #124	; 0x7c
 8004e16:	d9f8      	bls.n	8004e0a <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8004e18:	7dfb      	ldrb	r3, [r7, #23]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	75fb      	strb	r3, [r7, #23]
 8004e1e:	7dfb      	ldrb	r3, [r7, #23]
 8004e20:	2b03      	cmp	r3, #3
 8004e22:	d9db      	bls.n	8004ddc <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 8004e24:	bf00      	nop
}
 8004e26:	bf00      	nop
 8004e28:	371c      	adds	r7, #28
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd90      	pop	{r4, r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20000261 	.word	0x20000261

08004e34 <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 8004e34:	b480      	push	{r7}
 8004e36:	b087      	sub	sp, #28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 8004e42:	2300      	movs	r3, #0
 8004e44:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8004e46:	2301      	movs	r3, #1
 8004e48:	74fb      	strb	r3, [r7, #19]
 8004e4a:	e016      	b.n	8004e7a <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 8004e4c:	7cfb      	ldrb	r3, [r7, #19]
 8004e4e:	005b      	lsls	r3, r3, #1
 8004e50:	461a      	mov	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	7f1b      	ldrb	r3, [r3, #28]
 8004e56:	4413      	add	r3, r2
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	4619      	mov	r1, r3
 8004e60:	79fa      	ldrb	r2, [r7, #7]
 8004e62:	7cfb      	ldrb	r3, [r7, #19]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	fa01 f303 	lsl.w	r3, r1, r3
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8004e74:	7cfb      	ldrb	r3, [r7, #19]
 8004e76:	3301      	adds	r3, #1
 8004e78:	74fb      	strb	r3, [r7, #19]
 8004e7a:	7cfb      	ldrb	r3, [r7, #19]
 8004e7c:	2b03      	cmp	r3, #3
 8004e7e:	d9e5      	bls.n	8004e4c <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 8004e80:	697b      	ldr	r3, [r7, #20]
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	371c      	adds	r7, #28
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
	...

08004e90 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	460b      	mov	r3, r1
 8004e9a:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2118      	movs	r1, #24
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	4798      	blx	r3
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb6:	b292      	uxth	r2, r2
 8004eb8:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 8004eba:	78fb      	ldrb	r3, [r7, #3]
 8004ebc:	2b0e      	cmp	r3, #14
 8004ebe:	f200 8099 	bhi.w	8004ff4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
 8004ec2:	a201      	add	r2, pc, #4	; (adr r2, 8004ec8 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x38>)
 8004ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec8:	08004f05 	.word	0x08004f05
 8004ecc:	08004f15 	.word	0x08004f15
 8004ed0:	08004f25 	.word	0x08004f25
 8004ed4:	08004f35 	.word	0x08004f35
 8004ed8:	08004f45 	.word	0x08004f45
 8004edc:	08004f55 	.word	0x08004f55
 8004ee0:	08004f65 	.word	0x08004f65
 8004ee4:	08004f75 	.word	0x08004f75
 8004ee8:	08004f85 	.word	0x08004f85
 8004eec:	08004f95 	.word	0x08004f95
 8004ef0:	08004fa5 	.word	0x08004fa5
 8004ef4:	08004fb5 	.word	0x08004fb5
 8004ef8:	08004fc5 	.word	0x08004fc5
 8004efc:	08004fd5 	.word	0x08004fd5
 8004f00:	08004fe5 	.word	0x08004fe5
      state = pL6470_StatusRegister->HiZ;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	73fb      	strb	r3, [r7, #15]
      break;
 8004f12:	e06f      	b.n	8004ff4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	73fb      	strb	r3, [r7, #15]
      break;
 8004f22:	e067      	b.n	8004ff4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	73fb      	strb	r3, [r7, #15]
      break;
 8004f32:	e05f      	b.n	8004ff4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	73fb      	strb	r3, [r7, #15]
      break;
 8004f42:	e057      	b.n	8004ff4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	73fb      	strb	r3, [r7, #15]
      break;
 8004f52:	e04f      	b.n	8004ff4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	73fb      	strb	r3, [r7, #15]
      break;
 8004f62:	e047      	b.n	8004ff4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	73fb      	strb	r3, [r7, #15]
      break;
 8004f72:	e03f      	b.n	8004ff4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f78:	785b      	ldrb	r3, [r3, #1]
 8004f7a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	73fb      	strb	r3, [r7, #15]
      break;
 8004f82:	e037      	b.n	8004ff4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f88:	785b      	ldrb	r3, [r3, #1]
 8004f8a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	73fb      	strb	r3, [r7, #15]
      break;
 8004f92:	e02f      	b.n	8004ff4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f98:	785b      	ldrb	r3, [r3, #1]
 8004f9a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	73fb      	strb	r3, [r7, #15]
      break;
 8004fa2:	e027      	b.n	8004ff4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa8:	785b      	ldrb	r3, [r3, #1]
 8004faa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	73fb      	strb	r3, [r7, #15]
      break;
 8004fb2:	e01f      	b.n	8004ff4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb8:	785b      	ldrb	r3, [r3, #1]
 8004fba:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	73fb      	strb	r3, [r7, #15]
      break;
 8004fc2:	e017      	b.n	8004ff4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc8:	785b      	ldrb	r3, [r3, #1]
 8004fca:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	73fb      	strb	r3, [r7, #15]
      break;
 8004fd2:	e00f      	b.n	8004ff4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd8:	785b      	ldrb	r3, [r3, #1]
 8004fda:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	73fb      	strb	r3, [r7, #15]
      break;
 8004fe2:	e007      	b.n	8004ff4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe8:	785b      	ldrb	r3, [r3, #1]
 8004fea:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	73fb      	strb	r3, [r7, #15]
      break;
 8004ff2:	bf00      	nop
  return state;
 8004ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop

08005000 <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	460b      	mov	r3, r1
 800500a:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 800500c:	78fb      	ldrb	r3, [r7, #3]
 800500e:	2b18      	cmp	r3, #24
 8005010:	d809      	bhi.n	8005026 <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a19      	ldr	r1, [r3, #32]
 8005016:	78fa      	ldrb	r2, [r7, #3]
 8005018:	4613      	mov	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	440b      	add	r3, r1
 8005022:	3301      	adds	r3, #1
 8005024:	e000      	b.n	8005028 <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 800503e:	2300      	movs	r3, #0
 8005040:	73fb      	strb	r3, [r7, #15]
 8005042:	e01a      	b.n	800507a <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8005044:	7bfb      	ldrb	r3, [r7, #15]
 8005046:	011b      	lsls	r3, r3, #4
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	4413      	add	r3, r2
 800504c:	2200      	movs	r2, #0
 800504e:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 8005050:	7bfb      	ldrb	r3, [r7, #15]
 8005052:	011b      	lsls	r3, r3, #4
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	4413      	add	r3, r2
 8005058:	2200      	movs	r2, #0
 800505a:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 800505c:	7bfb      	ldrb	r3, [r7, #15]
 800505e:	011b      	lsls	r3, r3, #4
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	4413      	add	r3, r2
 8005064:	2200      	movs	r2, #0
 8005066:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 8005068:	7bfb      	ldrb	r3, [r7, #15]
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	4413      	add	r3, r2
 8005070:	2200      	movs	r2, #0
 8005072:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 8005074:	7bfb      	ldrb	r3, [r7, #15]
 8005076:	3301      	adds	r3, #1
 8005078:	73fb      	strb	r3, [r7, #15]
 800507a:	7bfb      	ldrb	r3, [r7, #15]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d9e1      	bls.n	8005044 <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 8005080:	bf00      	nop
 8005082:	bf00      	nop
 8005084:	3714      	adds	r7, #20
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <_ZN5L6470I8shield_3E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 800508e:	b480      	push	{r7}
 8005090:	b085      	sub	sp, #20
 8005092:	af00      	add	r7, sp, #0
 8005094:	60f8      	str	r0, [r7, #12]
 8005096:	60b9      	str	r1, [r7, #8]
 8005098:	603b      	str	r3, [r7, #0]
 800509a:	4613      	mov	r3, r2
 800509c:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	7f1b      	ldrb	r3, [r3, #28]
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	4413      	add	r3, r2
 80050a8:	79fa      	ldrb	r2, [r7, #7]
 80050aa:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	7f1b      	ldrb	r3, [r3, #28]
 80050b0:	011b      	lsls	r3, r3, #4
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	4413      	add	r3, r2
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	7f1b      	ldrb	r3, [r3, #28]
 80050be:	011b      	lsls	r3, r3, #4
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	4413      	add	r3, r2
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	7f1b      	ldrb	r3, [r3, #28]
 80050cc:	011b      	lsls	r3, r3, #4
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	4413      	add	r3, r2
 80050d2:	69fa      	ldr	r2, [r7, #28]
 80050d4:	60da      	str	r2, [r3, #12]
}
 80050d6:	bf00      	nop
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
	...

080050e4 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 80050e4:	b590      	push	{r4, r7, lr}
 80050e6:	b087      	sub	sp, #28
 80050e8:	af02      	add	r7, sp, #8
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	603b      	str	r3, [r7, #0]
 80050f0:	4613      	mov	r3, r2
 80050f2:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 80050f4:	4b10      	ldr	r3, [pc, #64]	; (8005138 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10a      	bne.n	8005112 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 80050fc:	4b0e      	ldr	r3, [pc, #56]	; (8005138 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 80050fe:	2201      	movs	r2, #1
 8005100:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68b9      	ldr	r1, [r7, #8]
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f503 7311 	add.w	r3, r3, #580	; 0x244
 800511a:	681c      	ldr	r4, [r3, #0]
 800511c:	79fa      	ldrb	r2, [r7, #7]
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	9301      	str	r3, [sp, #4]
 8005122:	6a3b      	ldr	r3, [r7, #32]
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	68b9      	ldr	r1, [r7, #8]
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	47a0      	blx	r4
}
 800512e:	bf00      	nop
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	bd90      	pop	{r4, r7, pc}
 8005136:	bf00      	nop
 8005138:	20000261 	.word	0x20000261

0800513c <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 8005148:	2300      	movs	r3, #0
 800514a:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800514c:	2300      	movs	r3, #0
 800514e:	75bb      	strb	r3, [r7, #22]
 8005150:	e013      	b.n	800517a <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8005152:	2300      	movs	r3, #0
 8005154:	75fb      	strb	r3, [r7, #23]
 8005156:	e00a      	b.n	800516e <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 8005158:	7d7b      	ldrb	r3, [r7, #21]
 800515a:	1c5a      	adds	r2, r3, #1
 800515c:	757a      	strb	r2, [r7, #21]
 800515e:	461a      	mov	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4413      	add	r3, r2
 8005164:	2200      	movs	r2, #0
 8005166:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8005168:	7dfb      	ldrb	r3, [r7, #23]
 800516a:	3301      	adds	r3, #1
 800516c:	75fb      	strb	r3, [r7, #23]
 800516e:	7dfb      	ldrb	r3, [r7, #23]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d9f1      	bls.n	8005158 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8005174:	7dbb      	ldrb	r3, [r7, #22]
 8005176:	3301      	adds	r3, #1
 8005178:	75bb      	strb	r3, [r7, #22]
 800517a:	7dbb      	ldrb	r3, [r7, #22]
 800517c:	2b03      	cmp	r3, #3
 800517e:	d9e8      	bls.n	8005152 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8005180:	2300      	movs	r3, #0
 8005182:	75fb      	strb	r3, [r7, #23]
 8005184:	e1f1      	b.n	800556a <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800518a:	7dfb      	ldrb	r3, [r7, #23]
 800518c:	011b      	lsls	r3, r3, #4
 800518e:	68b9      	ldr	r1, [r7, #8]
 8005190:	440b      	add	r3, r1
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	4619      	mov	r1, r3
 8005196:	460b      	mov	r3, r1
 8005198:	00db      	lsls	r3, r3, #3
 800519a:	1a5b      	subs	r3, r3, r1
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	441a      	add	r2, r3
 80051a0:	7dfb      	ldrb	r3, [r7, #23]
 80051a2:	6879      	ldr	r1, [r7, #4]
 80051a4:	440b      	add	r3, r1
 80051a6:	7b12      	ldrb	r2, [r2, #12]
 80051a8:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 80051aa:	7dfb      	ldrb	r3, [r7, #23]
 80051ac:	011b      	lsls	r3, r3, #4
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	4413      	add	r3, r2
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	2b12      	cmp	r3, #18
 80051b6:	f200 81d5 	bhi.w	8005564 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 80051ba:	a201      	add	r2, pc, #4	; (adr r2, 80051c0 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 80051bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c0:	08005565 	.word	0x08005565
 80051c4:	0800520d 	.word	0x0800520d
 80051c8:	08005295 	.word	0x08005295
 80051cc:	080052c5 	.word	0x080052c5
 80051d0:	0800532d 	.word	0x0800532d
 80051d4:	0800535b 	.word	0x0800535b
 80051d8:	080053c3 	.word	0x080053c3
 80051dc:	080053ff 	.word	0x080053ff
 80051e0:	08005467 	.word	0x08005467
 80051e4:	08005503 	.word	0x08005503
 80051e8:	08005565 	.word	0x08005565
 80051ec:	08005565 	.word	0x08005565
 80051f0:	08005565 	.word	0x08005565
 80051f4:	08005565 	.word	0x08005565
 80051f8:	08005565 	.word	0x08005565
 80051fc:	08005565 	.word	0x08005565
 8005200:	08005565 	.word	0x08005565
 8005204:	08005565 	.word	0x08005565
 8005208:	08005565 	.word	0x08005565
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 800520c:	7dfb      	ldrb	r3, [r7, #23]
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	4413      	add	r3, r2
 8005212:	7819      	ldrb	r1, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6a18      	ldr	r0, [r3, #32]
 8005218:	7dfb      	ldrb	r3, [r7, #23]
 800521a:	011b      	lsls	r3, r3, #4
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	4413      	add	r3, r2
 8005220:	685a      	ldr	r2, [r3, #4]
 8005222:	4613      	mov	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4413      	add	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4403      	add	r3, r0
 800522c:	781a      	ldrb	r2, [r3, #0]
 800522e:	7dfb      	ldrb	r3, [r7, #23]
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	4403      	add	r3, r0
 8005234:	430a      	orrs	r2, r1
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6a19      	ldr	r1, [r3, #32]
 800523e:	7dfb      	ldrb	r3, [r7, #23]
 8005240:	011b      	lsls	r3, r3, #4
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	4413      	add	r3, r2
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	4613      	mov	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	440b      	add	r3, r1
 8005252:	7b9b      	ldrb	r3, [r3, #14]
 8005254:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8005256:	2301      	movs	r3, #1
 8005258:	75bb      	strb	r3, [r7, #22]
 800525a:	e016      	b.n	800528a <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 800525c:	7dfb      	ldrb	r3, [r7, #23]
 800525e:	011b      	lsls	r3, r3, #4
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	4413      	add	r3, r2
 8005264:	689a      	ldr	r2, [r3, #8]
 8005266:	7d39      	ldrb	r1, [r7, #20]
 8005268:	7dbb      	ldrb	r3, [r7, #22]
 800526a:	1acb      	subs	r3, r1, r3
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	fa22 f103 	lsr.w	r1, r2, r3
 8005272:	7dbb      	ldrb	r3, [r7, #22]
 8005274:	005a      	lsls	r2, r3, #1
 8005276:	7dfb      	ldrb	r3, [r7, #23]
 8005278:	4413      	add	r3, r2
 800527a:	461a      	mov	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4413      	add	r3, r2
 8005280:	b2ca      	uxtb	r2, r1
 8005282:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8005284:	7dbb      	ldrb	r3, [r7, #22]
 8005286:	3301      	adds	r3, #1
 8005288:	75bb      	strb	r3, [r7, #22]
 800528a:	7d3a      	ldrb	r2, [r7, #20]
 800528c:	7dbb      	ldrb	r3, [r7, #22]
 800528e:	429a      	cmp	r2, r3
 8005290:	d2e4      	bcs.n	800525c <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 8005292:	e167      	b.n	8005564 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8005294:	7dfb      	ldrb	r3, [r7, #23]
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	4413      	add	r3, r2
 800529a:	7819      	ldrb	r1, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6a18      	ldr	r0, [r3, #32]
 80052a0:	7dfb      	ldrb	r3, [r7, #23]
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	4413      	add	r3, r2
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	4613      	mov	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4413      	add	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4403      	add	r3, r0
 80052b4:	781a      	ldrb	r2, [r3, #0]
 80052b6:	7dfb      	ldrb	r3, [r7, #23]
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	4403      	add	r3, r0
 80052bc:	430a      	orrs	r2, r1
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	701a      	strb	r2, [r3, #0]
      break;
 80052c2:	e14f      	b.n	8005564 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 80052c4:	7dfb      	ldrb	r3, [r7, #23]
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	4413      	add	r3, r2
 80052ca:	7819      	ldrb	r1, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80052d0:	7dfb      	ldrb	r3, [r7, #23]
 80052d2:	011b      	lsls	r3, r3, #4
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	4413      	add	r3, r2
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	4613      	mov	r3, r2
 80052dc:	00db      	lsls	r3, r3, #3
 80052de:	4413      	add	r3, r2
 80052e0:	4403      	add	r3, r0
 80052e2:	7a1a      	ldrb	r2, [r3, #8]
 80052e4:	7dfb      	ldrb	r3, [r7, #23]
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	4403      	add	r3, r0
 80052ea:	430a      	orrs	r2, r1
 80052ec:	b2d2      	uxtb	r2, r2
 80052ee:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80052f0:	2301      	movs	r3, #1
 80052f2:	75bb      	strb	r3, [r7, #22]
 80052f4:	e016      	b.n	8005324 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 80052f6:	7dfb      	ldrb	r3, [r7, #23]
 80052f8:	011b      	lsls	r3, r3, #4
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	4413      	add	r3, r2
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	7dbb      	ldrb	r3, [r7, #22]
 8005302:	f1c3 0303 	rsb	r3, r3, #3
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	fa22 f103 	lsr.w	r1, r2, r3
 800530c:	7dbb      	ldrb	r3, [r7, #22]
 800530e:	005a      	lsls	r2, r3, #1
 8005310:	7dfb      	ldrb	r3, [r7, #23]
 8005312:	4413      	add	r3, r2
 8005314:	461a      	mov	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4413      	add	r3, r2
 800531a:	b2ca      	uxtb	r2, r1
 800531c:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800531e:	7dbb      	ldrb	r3, [r7, #22]
 8005320:	3301      	adds	r3, #1
 8005322:	75bb      	strb	r3, [r7, #22]
 8005324:	7dbb      	ldrb	r3, [r7, #22]
 8005326:	2b03      	cmp	r3, #3
 8005328:	d9e5      	bls.n	80052f6 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 800532a:	e11b      	b.n	8005564 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800532c:	7dfb      	ldrb	r3, [r7, #23]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	4413      	add	r3, r2
 8005332:	7819      	ldrb	r1, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005338:	7dfb      	ldrb	r3, [r7, #23]
 800533a:	011b      	lsls	r3, r3, #4
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	4413      	add	r3, r2
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	4613      	mov	r3, r2
 8005344:	00db      	lsls	r3, r3, #3
 8005346:	4413      	add	r3, r2
 8005348:	4403      	add	r3, r0
 800534a:	7a1a      	ldrb	r2, [r3, #8]
 800534c:	7dfb      	ldrb	r3, [r7, #23]
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	4403      	add	r3, r0
 8005352:	430a      	orrs	r2, r1
 8005354:	b2d2      	uxtb	r2, r2
 8005356:	701a      	strb	r2, [r3, #0]
      break;
 8005358:	e104      	b.n	8005564 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800535a:	7dfb      	ldrb	r3, [r7, #23]
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	4413      	add	r3, r2
 8005360:	7819      	ldrb	r1, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005366:	7dfb      	ldrb	r3, [r7, #23]
 8005368:	011b      	lsls	r3, r3, #4
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	4413      	add	r3, r2
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	4613      	mov	r3, r2
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	4413      	add	r3, r2
 8005376:	4403      	add	r3, r0
 8005378:	7a1a      	ldrb	r2, [r3, #8]
 800537a:	7dfb      	ldrb	r3, [r7, #23]
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	4403      	add	r3, r0
 8005380:	430a      	orrs	r2, r1
 8005382:	b2d2      	uxtb	r2, r2
 8005384:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005386:	2301      	movs	r3, #1
 8005388:	75bb      	strb	r3, [r7, #22]
 800538a:	e016      	b.n	80053ba <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800538c:	7dfb      	ldrb	r3, [r7, #23]
 800538e:	011b      	lsls	r3, r3, #4
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	4413      	add	r3, r2
 8005394:	689a      	ldr	r2, [r3, #8]
 8005396:	7dbb      	ldrb	r3, [r7, #22]
 8005398:	f1c3 0303 	rsb	r3, r3, #3
 800539c:	00db      	lsls	r3, r3, #3
 800539e:	fa22 f103 	lsr.w	r1, r2, r3
 80053a2:	7dbb      	ldrb	r3, [r7, #22]
 80053a4:	005a      	lsls	r2, r3, #1
 80053a6:	7dfb      	ldrb	r3, [r7, #23]
 80053a8:	4413      	add	r3, r2
 80053aa:	461a      	mov	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4413      	add	r3, r2
 80053b0:	b2ca      	uxtb	r2, r1
 80053b2:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80053b4:	7dbb      	ldrb	r3, [r7, #22]
 80053b6:	3301      	adds	r3, #1
 80053b8:	75bb      	strb	r3, [r7, #22]
 80053ba:	7dbb      	ldrb	r3, [r7, #22]
 80053bc:	2b03      	cmp	r3, #3
 80053be:	d9e5      	bls.n	800538c <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 80053c0:	e0d0      	b.n	8005564 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80053c2:	2301      	movs	r3, #1
 80053c4:	75bb      	strb	r3, [r7, #22]
 80053c6:	e016      	b.n	80053f6 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 80053c8:	7dfb      	ldrb	r3, [r7, #23]
 80053ca:	011b      	lsls	r3, r3, #4
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	4413      	add	r3, r2
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	7dbb      	ldrb	r3, [r7, #22]
 80053d4:	f1c3 0303 	rsb	r3, r3, #3
 80053d8:	00db      	lsls	r3, r3, #3
 80053da:	fa22 f103 	lsr.w	r1, r2, r3
 80053de:	7dbb      	ldrb	r3, [r7, #22]
 80053e0:	005a      	lsls	r2, r3, #1
 80053e2:	7dfb      	ldrb	r3, [r7, #23]
 80053e4:	4413      	add	r3, r2
 80053e6:	461a      	mov	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4413      	add	r3, r2
 80053ec:	b2ca      	uxtb	r2, r1
 80053ee:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80053f0:	7dbb      	ldrb	r3, [r7, #22]
 80053f2:	3301      	adds	r3, #1
 80053f4:	75bb      	strb	r3, [r7, #22]
 80053f6:	7dbb      	ldrb	r3, [r7, #22]
 80053f8:	2b03      	cmp	r3, #3
 80053fa:	d9e5      	bls.n	80053c8 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 80053fc:	e0b2      	b.n	8005564 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 80053fe:	7dfb      	ldrb	r3, [r7, #23]
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	4413      	add	r3, r2
 8005404:	7819      	ldrb	r1, [r3, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800540a:	7dfb      	ldrb	r3, [r7, #23]
 800540c:	011b      	lsls	r3, r3, #4
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	4413      	add	r3, r2
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	4613      	mov	r3, r2
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	4413      	add	r3, r2
 800541a:	4403      	add	r3, r0
 800541c:	7a1a      	ldrb	r2, [r3, #8]
 800541e:	7dfb      	ldrb	r3, [r7, #23]
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	4403      	add	r3, r0
 8005424:	430a      	orrs	r2, r1
 8005426:	b2d2      	uxtb	r2, r2
 8005428:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800542a:	2301      	movs	r3, #1
 800542c:	75bb      	strb	r3, [r7, #22]
 800542e:	e016      	b.n	800545e <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8005430:	7dfb      	ldrb	r3, [r7, #23]
 8005432:	011b      	lsls	r3, r3, #4
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	4413      	add	r3, r2
 8005438:	689a      	ldr	r2, [r3, #8]
 800543a:	7dbb      	ldrb	r3, [r7, #22]
 800543c:	f1c3 0303 	rsb	r3, r3, #3
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	fa22 f103 	lsr.w	r1, r2, r3
 8005446:	7dbb      	ldrb	r3, [r7, #22]
 8005448:	005a      	lsls	r2, r3, #1
 800544a:	7dfb      	ldrb	r3, [r7, #23]
 800544c:	4413      	add	r3, r2
 800544e:	461a      	mov	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4413      	add	r3, r2
 8005454:	b2ca      	uxtb	r2, r1
 8005456:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005458:	7dbb      	ldrb	r3, [r7, #22]
 800545a:	3301      	adds	r3, #1
 800545c:	75bb      	strb	r3, [r7, #22]
 800545e:	7dbb      	ldrb	r3, [r7, #22]
 8005460:	2b03      	cmp	r3, #3
 8005462:	d9e5      	bls.n	8005430 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 8005464:	e07e      	b.n	8005564 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8005466:	7dfb      	ldrb	r3, [r7, #23]
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	4413      	add	r3, r2
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	b259      	sxtb	r1, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005474:	7dfb      	ldrb	r3, [r7, #23]
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	4413      	add	r3, r2
 800547c:	685a      	ldr	r2, [r3, #4]
 800547e:	4613      	mov	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4413      	add	r3, r2
 8005484:	4403      	add	r3, r0
 8005486:	791b      	ldrb	r3, [r3, #4]
 8005488:	00db      	lsls	r3, r3, #3
 800548a:	b25b      	sxtb	r3, r3
 800548c:	430b      	orrs	r3, r1
 800548e:	b259      	sxtb	r1, r3
 8005490:	7dfb      	ldrb	r3, [r7, #23]
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	4413      	add	r3, r2
 8005496:	b2ca      	uxtb	r2, r1
 8005498:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 800549a:	7dfb      	ldrb	r3, [r7, #23]
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	4413      	add	r3, r2
 80054a0:	7819      	ldrb	r1, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80054a6:	7dfb      	ldrb	r3, [r7, #23]
 80054a8:	011b      	lsls	r3, r3, #4
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	4413      	add	r3, r2
 80054ae:	689a      	ldr	r2, [r3, #8]
 80054b0:	4613      	mov	r3, r2
 80054b2:	00db      	lsls	r3, r3, #3
 80054b4:	4413      	add	r3, r2
 80054b6:	4403      	add	r3, r0
 80054b8:	7a1a      	ldrb	r2, [r3, #8]
 80054ba:	7dfb      	ldrb	r3, [r7, #23]
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	4403      	add	r3, r0
 80054c0:	430a      	orrs	r2, r1
 80054c2:	b2d2      	uxtb	r2, r2
 80054c4:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80054c6:	2301      	movs	r3, #1
 80054c8:	75bb      	strb	r3, [r7, #22]
 80054ca:	e016      	b.n	80054fa <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 80054cc:	7dfb      	ldrb	r3, [r7, #23]
 80054ce:	011b      	lsls	r3, r3, #4
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	4413      	add	r3, r2
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	7dbb      	ldrb	r3, [r7, #22]
 80054d8:	f1c3 0303 	rsb	r3, r3, #3
 80054dc:	00db      	lsls	r3, r3, #3
 80054de:	fa22 f103 	lsr.w	r1, r2, r3
 80054e2:	7dbb      	ldrb	r3, [r7, #22]
 80054e4:	005a      	lsls	r2, r3, #1
 80054e6:	7dfb      	ldrb	r3, [r7, #23]
 80054e8:	4413      	add	r3, r2
 80054ea:	461a      	mov	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4413      	add	r3, r2
 80054f0:	b2ca      	uxtb	r2, r1
 80054f2:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80054f4:	7dbb      	ldrb	r3, [r7, #22]
 80054f6:	3301      	adds	r3, #1
 80054f8:	75bb      	strb	r3, [r7, #22]
 80054fa:	7dbb      	ldrb	r3, [r7, #22]
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d9e5      	bls.n	80054cc <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 8005500:	e030      	b.n	8005564 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8005502:	7dfb      	ldrb	r3, [r7, #23]
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	4413      	add	r3, r2
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	b259      	sxtb	r1, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005510:	7dfb      	ldrb	r3, [r7, #23]
 8005512:	011b      	lsls	r3, r3, #4
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	4413      	add	r3, r2
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	4613      	mov	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4413      	add	r3, r2
 8005520:	4403      	add	r3, r0
 8005522:	791b      	ldrb	r3, [r3, #4]
 8005524:	00db      	lsls	r3, r3, #3
 8005526:	b25b      	sxtb	r3, r3
 8005528:	430b      	orrs	r3, r1
 800552a:	b259      	sxtb	r1, r3
 800552c:	7dfb      	ldrb	r3, [r7, #23]
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	4413      	add	r3, r2
 8005532:	b2ca      	uxtb	r2, r1
 8005534:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8005536:	7dfb      	ldrb	r3, [r7, #23]
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	4413      	add	r3, r2
 800553c:	7819      	ldrb	r1, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005542:	7dfb      	ldrb	r3, [r7, #23]
 8005544:	011b      	lsls	r3, r3, #4
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	4413      	add	r3, r2
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	4613      	mov	r3, r2
 800554e:	00db      	lsls	r3, r3, #3
 8005550:	4413      	add	r3, r2
 8005552:	4403      	add	r3, r0
 8005554:	7a1a      	ldrb	r2, [r3, #8]
 8005556:	7dfb      	ldrb	r3, [r7, #23]
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	4403      	add	r3, r0
 800555c:	430a      	orrs	r2, r1
 800555e:	b2d2      	uxtb	r2, r2
 8005560:	701a      	strb	r2, [r3, #0]
      break;
 8005562:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8005564:	7dfb      	ldrb	r3, [r7, #23]
 8005566:	3301      	adds	r3, #1
 8005568:	75fb      	strb	r3, [r7, #23]
 800556a:	7dfb      	ldrb	r3, [r7, #23]
 800556c:	2b01      	cmp	r3, #1
 800556e:	f67f ae0a 	bls.w	8005186 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 8005572:	bf00      	nop
 8005574:	bf00      	nop
 8005576:	371c      	adds	r7, #28
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <_ZN5L6470I8shield_3E11L6470_roundEf>:
    /**
     * @brief  Rounding a floating point number to the nearest unsigned integer number.
     * @param  f The floating point number.
     * @retval The nearest unsigned integer number.
     */
    int L6470_round(float f)
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	ed87 0a00 	vstr	s0, [r7]
    {
        if (f >= 0) {
 800558c:	edd7 7a00 	vldr	s15, [r7]
 8005590:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005598:	db1e      	blt.n	80055d8 <_ZN5L6470I8shield_3E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 800559a:	edd7 7a00 	vldr	s15, [r7]
 800559e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055a2:	ee17 2a90 	vmov	r2, s15
 80055a6:	edd7 7a00 	vldr	s15, [r7]
 80055aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055b2:	ed97 7a00 	vldr	s14, [r7]
 80055b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055ba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80055be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055c6:	bf4c      	ite	mi
 80055c8:	2301      	movmi	r3, #1
 80055ca:	2300      	movpl	r3, #0
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	f083 0301 	eor.w	r3, r3, #1
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	4413      	add	r3, r2
 80055d6:	e01a      	b.n	800560e <_ZN5L6470I8shield_3E11L6470_roundEf+0x8e>
        } else {
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 80055d8:	edd7 7a00 	vldr	s15, [r7]
 80055dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055e0:	ee17 2a90 	vmov	r2, s15
 80055e4:	edd7 7a00 	vldr	s15, [r7]
 80055e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055f0:	ed97 7a00 	vldr	s14, [r7]
 80055f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055f8:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80055fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005604:	d501      	bpl.n	800560a <_ZN5L6470I8shield_3E11L6470_roundEf+0x8a>
 8005606:	2301      	movs	r3, #1
 8005608:	e000      	b.n	800560c <_ZN5L6470I8shield_3E11L6470_roundEf+0x8c>
 800560a:	2300      	movs	r3, #0
 800560c:	1ad3      	subs	r3, r2, r3
        }
    }
 800560e:	4618      	mov	r0, r3
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <_ZN5L6470I8shield_3E4ReadEPht>:
     * @brief      Utility function to read data from L6470.
     * @param[out] pBuffer pointer to the buffer to read data into.
     * @param[in]  NumBytesToRead number of bytes to read.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 800561a:	b580      	push	{r7, lr}
 800561c:	b086      	sub	sp, #24
 800561e:	af00      	add	r7, sp, #0
 8005620:	60f8      	str	r0, [r7, #12]
 8005622:	60b9      	str	r1, [r7, #8]
 8005624:	4613      	mov	r3, r2
 8005626:	80fb      	strh	r3, [r7, #6]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6918      	ldr	r0, [r3, #16]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8a9b      	ldrh	r3, [r3, #20]
 8005630:	2200      	movs	r2, #0
 8005632:	4619      	mov	r1, r3
 8005634:	f00a fc34 	bl	800fea0 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6998      	ldr	r0, [r3, #24]
 800563c:	88fa      	ldrh	r2, [r7, #6]
 800563e:	2364      	movs	r3, #100	; 0x64
 8005640:	68b9      	ldr	r1, [r7, #8]
 8005642:	f00b fc44 	bl	8010ece <HAL_SPI_Receive>
 8005646:	4603      	mov	r3, r0
 8005648:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6918      	ldr	r0, [r3, #16]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	8a9b      	ldrh	r3, [r3, #20]
 8005652:	2201      	movs	r2, #1
 8005654:	4619      	mov	r1, r3
 8005656:	f00a fc23 	bl	800fea0 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 800565a:	7dfb      	ldrb	r3, [r7, #23]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d001      	beq.n	8005664 <_ZN5L6470I8shield_3E4ReadEPht+0x4a>
        {
        	return COMPONENT_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e000      	b.n	8005666 <_ZN5L6470I8shield_3E4ReadEPht+0x4c>
        }
        return COMPONENT_OK;
 8005664:	2300      	movs	r3, #0
    }
 8005666:	4618      	mov	r0, r3
 8005668:	3718      	adds	r7, #24
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <_ZN5L6470I8shield_3E5WriteEPht>:
     * @brief      Utility function to write data to L6470.
     * @param[in]  pBuffer pointer to the buffer of data to send.
     * @param[in]  NumBytesToWrite number of bytes to write.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 800566e:	b580      	push	{r7, lr}
 8005670:	b086      	sub	sp, #24
 8005672:	af00      	add	r7, sp, #0
 8005674:	60f8      	str	r0, [r7, #12]
 8005676:	60b9      	str	r1, [r7, #8]
 8005678:	4613      	mov	r3, r2
 800567a:	80fb      	strh	r3, [r7, #6]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6918      	ldr	r0, [r3, #16]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8a9b      	ldrh	r3, [r3, #20]
 8005684:	2200      	movs	r2, #0
 8005686:	4619      	mov	r1, r3
 8005688:	f00a fc0a 	bl	800fea0 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6998      	ldr	r0, [r3, #24]
 8005690:	88fa      	ldrh	r2, [r7, #6]
 8005692:	2364      	movs	r3, #100	; 0x64
 8005694:	68b9      	ldr	r1, [r7, #8]
 8005696:	f00b fade 	bl	8010c56 <HAL_SPI_Transmit>
 800569a:	4603      	mov	r3, r0
 800569c:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6918      	ldr	r0, [r3, #16]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	8a9b      	ldrh	r3, [r3, #20]
 80056a6:	2201      	movs	r2, #1
 80056a8:	4619      	mov	r1, r3
 80056aa:	f00a fbf9 	bl	800fea0 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 80056ae:	7dfb      	ldrb	r3, [r7, #23]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d001      	beq.n	80056b8 <_ZN5L6470I8shield_3E5WriteEPht+0x4a>
        {
        	return COMPONENT_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e000      	b.n	80056ba <_ZN5L6470I8shield_3E5WriteEPht+0x4c>
        }
        return COMPONENT_OK;
 80056b8:	2300      	movs	r3, #0
    }
 80056ba:	4618      	mov	r0, r3
 80056bc:	3718      	adds	r7, #24
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t>:
     * @param[out] pBufferToRead pointer to the buffer to read data into.
     * @param[in]  pBufferToWrite pointer to the buffer of data to send.
     * @param[in]  NumBytes number of bytes to read and write.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b088      	sub	sp, #32
 80056c6:	af02      	add	r7, sp, #8
 80056c8:	60f8      	str	r0, [r7, #12]
 80056ca:	60b9      	str	r1, [r7, #8]
 80056cc:	607a      	str	r2, [r7, #4]
 80056ce:	807b      	strh	r3, [r7, #2]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6918      	ldr	r0, [r3, #16]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	8a9b      	ldrh	r3, [r3, #20]
 80056d8:	2200      	movs	r2, #0
 80056da:	4619      	mov	r1, r3
 80056dc:	f00a fbe0 	bl	800fea0 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6998      	ldr	r0, [r3, #24]
 80056e4:	887b      	ldrh	r3, [r7, #2]
 80056e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056ea:	9200      	str	r2, [sp, #0]
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	6879      	ldr	r1, [r7, #4]
 80056f0:	f00b fcfe 	bl	80110f0 <HAL_SPI_TransmitReceive>
 80056f4:	4603      	mov	r3, r0
 80056f6:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 80056f8:	7dfb      	ldrb	r3, [r7, #23]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d009      	beq.n	8005712 <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t+0x50>
        {
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6918      	ldr	r0, [r3, #16]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	8a9b      	ldrh	r3, [r3, #20]
 8005706:	2201      	movs	r2, #1
 8005708:	4619      	mov	r1, r3
 800570a:	f00a fbc9 	bl	800fea0 <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e008      	b.n	8005724 <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t+0x62>
        }
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6918      	ldr	r0, [r3, #16]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8a9b      	ldrh	r3, [r3, #20]
 800571a:	2201      	movs	r2, #1
 800571c:	4619      	mov	r1, r3
 800571e:	f00a fbbf 	bl	800fea0 <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 8005722:	2300      	movs	r3, #0
    }
 8005724:	4618      	mov	r0, r3
 8005726:	3718      	adds	r7, #24
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <_ZN5L6470I8shield_3E23L6470_SPI_CommunicationEPhS2_tm>:


    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 800572c:	b590      	push	{r4, r7, lr}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
 8005738:	807b      	strh	r3, [r7, #2]
    {
        ReadWrite(pRxData, pTxData, Size);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8005742:	681c      	ldr	r4, [r3, #0]
 8005744:	887b      	ldrh	r3, [r7, #2]
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	6879      	ldr	r1, [r7, #4]
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	47a0      	blx	r4
    }
 800574e:	bf00      	nop
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	bd90      	pop	{r4, r7, pc}

08005756 <_ZN5L6470I8shield_2E4initEPv>:
    virtual int init(void *init)
 8005756:	b580      	push	{r7, lr}
 8005758:	b082      	sub	sp, #8
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
 800575e:	6039      	str	r1, [r7, #0]
        return (int) L6470_Config((void *) init);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6839      	ldr	r1, [r7, #0]
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	4798      	blx	r3
 8005770:	4603      	mov	r3, r0
    }
 8005772:	4618      	mov	r0, r3
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <_ZN5L6470I8shield_2E10get_statusEv>:
    virtual unsigned int get_status(void)
 800577a:	b580      	push	{r7, lr}
 800577c:	b082      	sub	sp, #8
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
        return (unsigned int) L6470_GetStatus();
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	4798      	blx	r3
 8005790:	4603      	mov	r3, r0
    }
 8005792:	4618      	mov	r0, r3
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <_ZN5L6470I8shield_2E13get_parameterEj>:
    virtual unsigned int get_parameter(unsigned int parameter)
 800579a:	b580      	push	{r7, lr}
 800579c:	b082      	sub	sp, #8
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
 80057a2:	6039      	str	r1, [r7, #0]
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	b2d2      	uxtb	r2, r2
 80057b2:	4611      	mov	r1, r2
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	4798      	blx	r3
 80057b8:	4603      	mov	r3, r0
    }
 80057ba:	4618      	mov	r0, r3
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <_ZN5L6470I8shield_2E12get_positionEv>:
    virtual signed int get_position(void)
 80057c2:	b590      	push	{r4, r7, lr}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80057d2:	681c      	ldr	r4, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2100      	movs	r1, #0
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	4798      	blx	r3
 80057e4:	4603      	mov	r3, r0
 80057e6:	4619      	mov	r1, r3
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	47a0      	blx	r4
 80057ec:	4603      	mov	r3, r0
    }
 80057ee:	4618      	mov	r0, r3
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd90      	pop	{r4, r7, pc}

080057f6 <_ZN5L6470I8shield_2E8get_markEv>:
    virtual signed int get_mark(void)
 80057f6:	b590      	push	{r4, r7, lr}
 80057f8:	b083      	sub	sp, #12
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8005806:	681c      	ldr	r4, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2102      	movs	r1, #2
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	4798      	blx	r3
 8005818:	4603      	mov	r3, r0
 800581a:	4619      	mov	r1, r3
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	47a0      	blx	r4
 8005820:	4603      	mov	r3, r0
    }
 8005822:	4618      	mov	r0, r3
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	bd90      	pop	{r4, r7, pc}

0800582a <_ZN5L6470I8shield_2E9get_speedEv>:
    virtual unsigned int get_speed(void)
 800582a:	b5b0      	push	{r4, r5, r7, lr}
 800582c:	b082      	sub	sp, #8
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800583a:	681c      	ldr	r4, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8005844:	681d      	ldr	r5, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2103      	movs	r1, #3
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	4798      	blx	r3
 8005856:	4603      	mov	r3, r0
 8005858:	4619      	mov	r1, r3
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	47a8      	blx	r5
 800585e:	eef0 7a40 	vmov.f32	s15, s0
 8005862:	eeb0 0a67 	vmov.f32	s0, s15
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	47a0      	blx	r4
 800586a:	4603      	mov	r3, r0
    }
 800586c:	4618      	mov	r0, r3
 800586e:	3708      	adds	r7, #8
 8005870:	46bd      	mov	sp, r7
 8005872:	bdb0      	pop	{r4, r5, r7, pc}

08005874 <_ZN5L6470I8shield_2E13get_max_speedEv>:
    virtual unsigned int get_max_speed(void)
 8005874:	b5b0      	push	{r4, r5, r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005884:	681c      	ldr	r4, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800588e:	681d      	ldr	r5, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2106      	movs	r1, #6
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	4798      	blx	r3
 80058a0:	4603      	mov	r3, r0
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	4619      	mov	r1, r3
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	47a8      	blx	r5
 80058aa:	eef0 7a40 	vmov.f32	s15, s0
 80058ae:	eeb0 0a67 	vmov.f32	s0, s15
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	47a0      	blx	r4
 80058b6:	4603      	mov	r3, r0
    }
 80058b8:	4618      	mov	r0, r3
 80058ba:	3708      	adds	r7, #8
 80058bc:	46bd      	mov	sp, r7
 80058be:	bdb0      	pop	{r4, r5, r7, pc}

080058c0 <_ZN5L6470I8shield_2E13get_min_speedEv>:
    virtual unsigned int get_min_speed(void)
 80058c0:	b5b0      	push	{r4, r5, r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80058d0:	681c      	ldr	r4, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80058da:	681d      	ldr	r5, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2107      	movs	r1, #7
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	4798      	blx	r3
 80058ec:	4603      	mov	r3, r0
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	4619      	mov	r1, r3
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	47a8      	blx	r5
 80058f6:	eef0 7a40 	vmov.f32	s15, s0
 80058fa:	eeb0 0a67 	vmov.f32	s0, s15
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	47a0      	blx	r4
 8005902:	4603      	mov	r3, r0
    }
 8005904:	4618      	mov	r0, r3
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bdb0      	pop	{r4, r5, r7, pc}

0800590c <_ZN5L6470I8shield_2E16get_accelerationEv>:
    virtual unsigned int get_acceleration(void)
 800590c:	b5b0      	push	{r4, r5, r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800591c:	681c      	ldr	r4, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005926:	681d      	ldr	r5, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2104      	movs	r1, #4
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	4798      	blx	r3
 8005938:	4603      	mov	r3, r0
 800593a:	b29b      	uxth	r3, r3
 800593c:	4619      	mov	r1, r3
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	47a8      	blx	r5
 8005942:	eef0 7a40 	vmov.f32	s15, s0
 8005946:	eeb0 0a67 	vmov.f32	s0, s15
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	47a0      	blx	r4
 800594e:	4603      	mov	r3, r0
    }
 8005950:	4618      	mov	r0, r3
 8005952:	3708      	adds	r7, #8
 8005954:	46bd      	mov	sp, r7
 8005956:	bdb0      	pop	{r4, r5, r7, pc}

08005958 <_ZN5L6470I8shield_2E16get_decelerationEv>:
    virtual unsigned int get_deceleration(void)
 8005958:	b5b0      	push	{r4, r5, r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005968:	681c      	ldr	r4, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8005972:	681d      	ldr	r5, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2105      	movs	r1, #5
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	4798      	blx	r3
 8005984:	4603      	mov	r3, r0
 8005986:	b29b      	uxth	r3, r3
 8005988:	4619      	mov	r1, r3
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	47a8      	blx	r5
 800598e:	eef0 7a40 	vmov.f32	s15, s0
 8005992:	eeb0 0a67 	vmov.f32	s0, s15
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	47a0      	blx	r4
 800599a:	4603      	mov	r3, r0
    }
 800599c:	4618      	mov	r0, r3
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bdb0      	pop	{r4, r5, r7, pc}

080059a4 <_ZN5L6470I8shield_2E13get_directionEv>:
    virtual StepperMotor::direction_t get_direction(void)
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2104      	movs	r1, #4
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	4798      	blx	r3
 80059bc:	4603      	mov	r3, r0
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d101      	bne.n	80059c6 <_ZN5L6470I8shield_2E13get_directionEv+0x22>
 80059c2:	2301      	movs	r3, #1
 80059c4:	e000      	b.n	80059c8 <_ZN5L6470I8shield_2E13get_directionEv+0x24>
 80059c6:	2300      	movs	r3, #0
    }
 80059c8:	4618      	mov	r0, r3
 80059ca:	3708      	adds	r7, #8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <_ZN5L6470I8shield_2E13set_parameterEjj>:
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	b2d1      	uxtb	r1, r2
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	4798      	blx	r3
    }
 80059f0:	bf00      	nop
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <_ZN5L6470I8shield_2E8set_homeEv>:
    virtual void set_home(void)
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
        L6470_ResetPos();
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	4798      	blx	r3
    }
 8005a0e:	bf00      	nop
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <_ZN5L6470I8shield_2E8set_markEv>:
    virtual void set_mark(void)
 8005a16:	b590      	push	{r4, r7, lr}
 8005a18:	b083      	sub	sp, #12
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8005a26:	681c      	ldr	r4, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2100      	movs	r1, #0
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	4798      	blx	r3
 8005a38:	4603      	mov	r3, r0
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	2102      	movs	r1, #2
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	47a0      	blx	r4
    }
 8005a42:	bf00      	nop
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd90      	pop	{r4, r7, pc}

08005a4a <_ZN5L6470I8shield_2E8set_markEi>:
    virtual void set_mark(signed int position)
 8005a4a:	b590      	push	{r4, r7, lr}
 8005a4c:	b083      	sub	sp, #12
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
 8005a52:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8005a5c:	681c      	ldr	r4, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6839      	ldr	r1, [r7, #0]
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	4798      	blx	r3
 8005a6e:	4603      	mov	r3, r0
 8005a70:	461a      	mov	r2, r3
 8005a72:	2102      	movs	r1, #2
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	47a0      	blx	r4
    }
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd90      	pop	{r4, r7, pc}

08005a80 <_ZN5L6470I8shield_2E13set_max_speedEj>:
    virtual bool set_max_speed(unsigned int speed)
 8005a80:	b590      	push	{r4, r7, lr}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8005a92:	681c      	ldr	r4, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	ee07 2a90 	vmov	s15, r2
 8005aa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aa8:	eeb0 0a67 	vmov.f32	s0, s15
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	4798      	blx	r3
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	2106      	movs	r1, #6
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	47a0      	blx	r4
        return true;
 8005aba:	2301      	movs	r3, #1
    }
 8005abc:	4618      	mov	r0, r3
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd90      	pop	{r4, r7, pc}

08005ac4 <_ZN5L6470I8shield_2E13set_min_speedEj>:
    virtual bool set_min_speed(unsigned int speed)
 8005ac4:	b590      	push	{r4, r7, lr}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8005ad6:	681c      	ldr	r4, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	ee07 2a90 	vmov	s15, r2
 8005ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aec:	eeb0 0a67 	vmov.f32	s0, s15
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	4798      	blx	r3
 8005af4:	4603      	mov	r3, r0
 8005af6:	461a      	mov	r2, r3
 8005af8:	2107      	movs	r1, #7
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	47a0      	blx	r4
        return true;
 8005afe:	2301      	movs	r3, #1
    }
 8005b00:	4618      	mov	r0, r3
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd90      	pop	{r4, r7, pc}

08005b08 <_ZN5L6470I8shield_2E16set_accelerationEj>:
    virtual bool set_acceleration(unsigned int acceleration)
 8005b08:	b590      	push	{r4, r7, lr}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8005b1a:	681c      	ldr	r4, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	ee07 2a90 	vmov	s15, r2
 8005b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b30:	eeb0 0a67 	vmov.f32	s0, s15
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	4798      	blx	r3
 8005b38:	4603      	mov	r3, r0
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	2104      	movs	r1, #4
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	47a0      	blx	r4
        return true;
 8005b42:	2301      	movs	r3, #1
    }
 8005b44:	4618      	mov	r0, r3
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd90      	pop	{r4, r7, pc}

08005b4c <_ZN5L6470I8shield_2E16set_decelerationEj>:
    virtual bool set_deceleration(unsigned int deceleration)
 8005b4c:	b590      	push	{r4, r7, lr}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8005b5e:	681c      	ldr	r4, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	ee07 2a90 	vmov	s15, r2
 8005b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b74:	eeb0 0a67 	vmov.f32	s0, s15
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	4798      	blx	r3
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	461a      	mov	r2, r3
 8005b80:	2105      	movs	r1, #5
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	47a0      	blx	r4
        return true;
 8005b86:	2301      	movs	r3, #1
    }
 8005b88:	4618      	mov	r0, r3
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd90      	pop	{r4, r7, pc}

08005b90 <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE>:
    virtual bool set_step_mode(step_mode_t step_mode)
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	460b      	mov	r3, r1
 8005b9a:	70fb      	strb	r3, [r7, #3]
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 8005b9c:	78fb      	ldrb	r3, [r7, #3]
 8005b9e:	2b07      	cmp	r3, #7
 8005ba0:	d901      	bls.n	8005ba6 <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	e00f      	b.n	8005bc6 <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        soft_hiz();
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	3380      	adds	r3, #128	; 0x80
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	78fa      	ldrb	r2, [r7, #3]
 8005bbe:	2115      	movs	r1, #21
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	4798      	blx	r3
        return true;
 8005bc4:	2301      	movs	r3, #1
    }
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <_ZN5L6470I8shield_2E5go_toEi>:
    virtual void go_to(signed int position)
 8005bce:	b590      	push	{r4, r7, lr}
 8005bd0:	b083      	sub	sp, #12
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
 8005bd6:	6039      	str	r1, [r7, #0]
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8005be0:	681c      	ldr	r4, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6839      	ldr	r1, [r7, #0]
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	4798      	blx	r3
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	47a0      	blx	r4
    }
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd90      	pop	{r4, r7, pc}

08005c02 <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE>:
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 8005c02:	b5b0      	push	{r4, r5, r7, lr}
 8005c04:	b084      	sub	sp, #16
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	60f8      	str	r0, [r7, #12]
 8005c0a:	60b9      	str	r1, [r7, #8]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	71fb      	strb	r3, [r7, #7]
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8005c18:	681c      	ldr	r4, [r3, #0]
 8005c1a:	79fb      	ldrb	r3, [r7, #7]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d101      	bne.n	8005c24 <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE+0x22>
 8005c20:	2501      	movs	r5, #1
 8005c22:	e000      	b.n	8005c26 <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE+0x24>
 8005c24:	2500      	movs	r5, #0
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68b9      	ldr	r1, [r7, #8]
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	4798      	blx	r3
 8005c36:	4603      	mov	r3, r0
 8005c38:	461a      	mov	r2, r3
 8005c3a:	4629      	mov	r1, r5
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	47a0      	blx	r4
    }
 8005c40:	bf00      	nop
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bdb0      	pop	{r4, r5, r7, pc}

08005c48 <_ZN5L6470I8shield_2E7go_homeEv>:
    virtual void go_home(void)
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
        L6470_GoHome();
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	4798      	blx	r3
    }
 8005c5e:	bf00      	nop
 8005c60:	3708      	adds	r7, #8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <_ZN5L6470I8shield_2E7go_markEv>:
    virtual void go_mark(void)
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b082      	sub	sp, #8
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
        L6470_GoMark();
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	4798      	blx	r3
    }
 8005c7c:	bf00      	nop
 8005c7e:	3708      	adds	r7, #8
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 8005c84:	b5b0      	push	{r4, r5, r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	607b      	str	r3, [r7, #4]
 8005c8e:	460b      	mov	r3, r1
 8005c90:	72fb      	strb	r3, [r7, #11]
 8005c92:	4613      	mov	r3, r2
 8005c94:	72bb      	strb	r3, [r7, #10]
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005c9e:	681c      	ldr	r4, [r3, #0]
 8005ca0:	7abb      	ldrb	r3, [r7, #10]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d101      	bne.n	8005caa <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8005ca6:	2501      	movs	r5, #1
 8005ca8:	e000      	b.n	8005cac <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8005caa:	2500      	movs	r5, #0
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	ee07 2a90 	vmov	s15, r2
 8005cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cc0:	eeb0 0a67 	vmov.f32	s0, s15
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	4798      	blx	r3
 8005cc8:	4603      	mov	r3, r0
 8005cca:	7af9      	ldrb	r1, [r7, #11]
 8005ccc:	462a      	mov	r2, r5
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	47a0      	blx	r4
    }
 8005cd2:	bf00      	nop
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bdb0      	pop	{r4, r5, r7, pc}

08005cda <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE>:
    virtual void run(StepperMotor::direction_t direction)
 8005cda:	b5b0      	push	{r4, r5, r7, lr}
 8005cdc:	b082      	sub	sp, #8
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	70fb      	strb	r3, [r7, #3]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8005cee:	681c      	ldr	r4, [r3, #0]
 8005cf0:	78fb      	ldrb	r3, [r7, #3]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d101      	bne.n	8005cfa <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE+0x20>
 8005cf6:	2501      	movs	r5, #1
 8005cf8:	e000      	b.n	8005cfc <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE+0x22>
 8005cfa:	2500      	movs	r5, #0
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2106      	movs	r1, #6
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	4798      	blx	r3
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	461a      	mov	r2, r3
 8005d10:	4629      	mov	r1, r5
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	47a0      	blx	r4
    }
 8005d16:	bf00      	nop
 8005d18:	3708      	adds	r7, #8
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bdb0      	pop	{r4, r5, r7, pc}

08005d1e <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj>:
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 8005d1e:	b5b0      	push	{r4, r5, r7, lr}
 8005d20:	b084      	sub	sp, #16
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	60f8      	str	r0, [r7, #12]
 8005d26:	460b      	mov	r3, r1
 8005d28:	607a      	str	r2, [r7, #4]
 8005d2a:	72fb      	strb	r3, [r7, #11]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8005d34:	681c      	ldr	r4, [r3, #0]
 8005d36:	7afb      	ldrb	r3, [r7, #11]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d101      	bne.n	8005d40 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj+0x22>
 8005d3c:	2501      	movs	r5, #1
 8005d3e:	e000      	b.n	8005d42 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj+0x24>
 8005d40:	2500      	movs	r5, #0
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	ee07 2a90 	vmov	s15, r2
 8005d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d56:	eeb0 0a67 	vmov.f32	s0, s15
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	4798      	blx	r3
 8005d5e:	4603      	mov	r3, r0
 8005d60:	461a      	mov	r2, r3
 8005d62:	4629      	mov	r1, r5
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	47a0      	blx	r4
    }
 8005d68:	bf00      	nop
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bdb0      	pop	{r4, r5, r7, pc}

08005d70 <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj>:
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	460b      	mov	r3, r1
 8005d7a:	607a      	str	r2, [r7, #4]
 8005d7c:	72fb      	strb	r3, [r7, #11]
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	7afa      	ldrb	r2, [r7, #11]
 8005d8a:	2a01      	cmp	r2, #1
 8005d8c:	d101      	bne.n	8005d92 <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj+0x22>
 8005d8e:	2101      	movs	r1, #1
 8005d90:	e000      	b.n	8005d94 <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj+0x24>
 8005d92:	2100      	movs	r1, #0
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	4798      	blx	r3
    }
 8005d9a:	bf00      	nop
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <_ZN5L6470I8shield_2E9soft_stopEv>:
    virtual void soft_stop(void)
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b082      	sub	sp, #8
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
        L6470_SoftStop();
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	4798      	blx	r3
    }
 8005db8:	bf00      	nop
 8005dba:	3708      	adds	r7, #8
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <_ZN5L6470I8shield_2E9hard_stopEv>:
    virtual void hard_stop(void)
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
        L6470_HardStop();
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	4798      	blx	r3
    }
 8005dd6:	bf00      	nop
 8005dd8:	3708      	adds	r7, #8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <_ZN5L6470I8shield_2E8soft_hizEv>:
    virtual void soft_hiz(void)
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b082      	sub	sp, #8
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
        L6470_SoftHiZ();
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	4798      	blx	r3
    }
 8005df4:	bf00      	nop
 8005df6:	3708      	adds	r7, #8
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <_ZN5L6470I8shield_2E8hard_hizEv>:
    virtual void hard_hiz(void)
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
        L6470_HardHiZ();
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	4798      	blx	r3
    }
 8005e12:	bf00      	nop
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <_ZN5L6470I8shield_2E17wait_while_activeEv>:
    virtual void wait_while_active(void)
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b082      	sub	sp, #8
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 8005e22:	bf00      	nop
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2101      	movs	r1, #1
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	4798      	blx	r3
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	bf0c      	ite	eq
 8005e3a:	2301      	moveq	r3, #1
 8005e3c:	2300      	movne	r3, #0
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1ef      	bne.n	8005e24 <_ZN5L6470I8shield_2E17wait_while_activeEv+0xa>
    }
 8005e44:	bf00      	nop
 8005e46:	bf00      	nop
 8005e48:	3708      	adds	r7, #8
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE>:
    virtual void step_clock(StepperMotor::direction_t direction)
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b082      	sub	sp, #8
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	460b      	mov	r3, r1
 8005e58:	70fb      	strb	r3, [r7, #3]
        soft_hiz();
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	3380      	adds	r3, #128	; 0x80
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	78fa      	ldrb	r2, [r7, #3]
 8005e72:	2a01      	cmp	r2, #1
 8005e74:	d101      	bne.n	8005e7a <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE+0x2c>
 8005e76:	2201      	movs	r2, #1
 8005e78:	e000      	b.n	8005e7c <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE+0x2e>
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	4611      	mov	r1, r2
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	4798      	blx	r3
    }
 8005e82:	bf00      	nop
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b082      	sub	sp, #8
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
 8005e92:	460b      	mov	r3, r1
 8005e94:	70fb      	strb	r3, [r7, #3]
 8005e96:	4613      	mov	r3, r2
 8005e98:	70bb      	strb	r3, [r7, #2]
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	78ba      	ldrb	r2, [r7, #2]
 8005ea6:	2a01      	cmp	r2, #1
 8005ea8:	d101      	bne.n	8005eae <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8005eaa:	2201      	movs	r2, #1
 8005eac:	e000      	b.n	8005eb0 <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8005eae:	2200      	movs	r2, #0
 8005eb0:	78f9      	ldrb	r1, [r7, #3]
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	4798      	blx	r3
    }
 8005eb6:	bf00      	nop
 8005eb8:	3708      	adds	r7, #8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <_ZN5L6470I8shield_2E12reset_deviceEv>:
    virtual void reset_device(void)
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b082      	sub	sp, #8
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
        L6470_ResetDevice();
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	4798      	blx	r3
    }
 8005ed4:	bf00      	nop
 8005ed6:	3708      	adds	r7, #8
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <_ZN5L6470I8shield_2E18prepare_get_statusEv>:
    virtual void prepare_get_status(void)
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetStatus();
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8005efa:	bf00      	nop
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <_ZN5L6470I8shield_2E21prepare_get_parameterEj>:
    virtual void prepare_get_parameter(unsigned int parameter)
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b082      	sub	sp, #8
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	6039      	str	r1, [r7, #0]
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	b2d2      	uxtb	r2, r2
 8005f1a:	4611      	mov	r1, r2
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8005f28:	bf00      	nop
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <_ZN5L6470I8shield_2E20prepare_get_positionEv>:
    virtual void prepare_get_position(void)
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2100      	movs	r1, #0
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8005f50:	bf00      	nop
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <_ZN5L6470I8shield_2E16prepare_get_markEv>:
    virtual void prepare_get_mark(void)
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2102      	movs	r1, #2
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2202      	movs	r2, #2
 8005f74:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8005f78:	bf00      	nop
 8005f7a:	3708      	adds	r7, #8
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <_ZN5L6470I8shield_2E17prepare_get_speedEv>:
    virtual void prepare_get_speed(void)
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2103      	movs	r1, #3
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2203      	movs	r2, #3
 8005f9c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8005fa0:	bf00      	nop
 8005fa2:	3708      	adds	r7, #8
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <_ZN5L6470I8shield_2E21prepare_get_max_speedEv>:
    virtual void prepare_get_max_speed(void)
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2106      	movs	r1, #6
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2204      	movs	r2, #4
 8005fc4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8005fc8:	bf00      	nop
 8005fca:	3708      	adds	r7, #8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <_ZN5L6470I8shield_2E21prepare_get_min_speedEv>:
    virtual void prepare_get_min_speed(void)
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2107      	movs	r1, #7
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2205      	movs	r2, #5
 8005fec:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8005ff0:	bf00      	nop
 8005ff2:	3708      	adds	r7, #8
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <_ZN5L6470I8shield_2E24prepare_get_accelerationEv>:
    virtual void prepare_get_acceleration(void)
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2104      	movs	r1, #4
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2206      	movs	r2, #6
 8006014:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006018:	bf00      	nop
 800601a:	3708      	adds	r7, #8
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <_ZN5L6470I8shield_2E24prepare_get_decelerationEv>:
    virtual void prepare_get_deceleration(void)
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2105      	movs	r1, #5
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2207      	movs	r2, #7
 800603c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006040:	bf00      	nop
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <_ZN5L6470I8shield_2E21prepare_get_directionEv>:
    virtual void prepare_get_direction(void)
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
        if (!L6470_DaisyChain_HalfPrepared) {
 8006050:	4b0b      	ldr	r3, [pc, #44]	; (8006080 <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x38>)
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10a      	bne.n	800606e <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x26>
            L6470_DaisyChain_HalfPrepared = ONE_F;
 8006058:	4b09      	ldr	r3, [pc, #36]	; (8006080 <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x38>)
 800605a:	2201      	movs	r2, #1
 800605c:	701a      	strb	r2, [r3, #0]
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4906      	ldr	r1, [pc, #24]	; (8006084 <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x3c>)
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	4798      	blx	r3
        prepared_action = PREPARED_GET_DIRECTION;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2208      	movs	r2, #8
 8006072:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006076:	bf00      	nop
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	2000022d 	.word	0x2000022d
 8006084:	20000230 	.word	0x20000230

08006088 <_ZN5L6470I8shield_2E21prepare_set_parameterEjj>:
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	b2d1      	uxtb	r1, r2
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80060b0:	bf00      	nop
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <_ZN5L6470I8shield_2E16prepare_set_homeEv>:
    virtual void prepare_set_home(void)
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetPos();
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80060d6:	bf00      	nop
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <_ZN5L6470I8shield_2E16prepare_set_markEv>:
    virtual void prepare_set_mark(void)
 80060de:	b580      	push	{r7, lr}
 80060e0:	b082      	sub	sp, #8
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2200      	movs	r2, #0
 80060f2:	2102      	movs	r1, #2
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2209      	movs	r2, #9
 80060fc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006100:	bf00      	nop
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <_ZN5L6470I8shield_2E16prepare_set_markEi>:
    virtual void prepare_set_mark(signed int position)
 8006108:	b590      	push	{r4, r7, lr}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800611a:	681c      	ldr	r4, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	6839      	ldr	r1, [r7, #0]
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	4798      	blx	r3
 800612c:	4603      	mov	r3, r0
 800612e:	461a      	mov	r2, r3
 8006130:	2102      	movs	r1, #2
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800613e:	bf00      	nop
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	bd90      	pop	{r4, r7, pc}

08006146 <_ZN5L6470I8shield_2E17prepare_set_speedEj>:
    virtual void prepare_set_speed(unsigned int speed)
 8006146:	b590      	push	{r4, r7, lr}
 8006148:	b083      	sub	sp, #12
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
 800614e:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006158:	681c      	ldr	r4, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	683a      	ldr	r2, [r7, #0]
 8006166:	ee07 2a90 	vmov	s15, r2
 800616a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800616e:	eeb0 0a67 	vmov.f32	s0, s15
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	4798      	blx	r3
 8006176:	4603      	mov	r3, r0
 8006178:	461a      	mov	r2, r3
 800617a:	2103      	movs	r1, #3
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	bd90      	pop	{r4, r7, pc}

08006190 <_ZN5L6470I8shield_2E21prepare_set_max_speedEj>:
    virtual void prepare_set_max_speed(unsigned int speed)
 8006190:	b590      	push	{r4, r7, lr}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80061a2:	681c      	ldr	r4, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	ee07 2a90 	vmov	s15, r2
 80061b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061b8:	eeb0 0a67 	vmov.f32	s0, s15
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	4798      	blx	r3
 80061c0:	4603      	mov	r3, r0
 80061c2:	461a      	mov	r2, r3
 80061c4:	2106      	movs	r1, #6
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80061d2:	bf00      	nop
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd90      	pop	{r4, r7, pc}

080061da <_ZN5L6470I8shield_2E21prepare_set_min_speedEj>:
    virtual void prepare_set_min_speed(unsigned int speed)
 80061da:	b590      	push	{r4, r7, lr}
 80061dc:	b083      	sub	sp, #12
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80061ec:	681c      	ldr	r4, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	ee07 2a90 	vmov	s15, r2
 80061fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006202:	eeb0 0a67 	vmov.f32	s0, s15
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	4798      	blx	r3
 800620a:	4603      	mov	r3, r0
 800620c:	461a      	mov	r2, r3
 800620e:	2107      	movs	r1, #7
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	bd90      	pop	{r4, r7, pc}

08006224 <_ZN5L6470I8shield_2E24prepare_set_accelerationEj>:
    virtual void prepare_set_acceleration(unsigned int acceleration)
 8006224:	b590      	push	{r4, r7, lr}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006236:	681c      	ldr	r4, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	ee07 2a90 	vmov	s15, r2
 8006248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800624c:	eeb0 0a67 	vmov.f32	s0, s15
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	4798      	blx	r3
 8006254:	4603      	mov	r3, r0
 8006256:	461a      	mov	r2, r3
 8006258:	2104      	movs	r1, #4
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006266:	bf00      	nop
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	bd90      	pop	{r4, r7, pc}

0800626e <_ZN5L6470I8shield_2E24prepare_set_decelerationEj>:
    virtual void prepare_set_deceleration(unsigned int deceleration)
 800626e:	b590      	push	{r4, r7, lr}
 8006270:	b083      	sub	sp, #12
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
 8006276:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006280:	681c      	ldr	r4, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	683a      	ldr	r2, [r7, #0]
 800628e:	ee07 2a90 	vmov	s15, r2
 8006292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006296:	eeb0 0a67 	vmov.f32	s0, s15
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	4798      	blx	r3
 800629e:	4603      	mov	r3, r0
 80062a0:	461a      	mov	r2, r3
 80062a2:	2105      	movs	r1, #5
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd90      	pop	{r4, r7, pc}

080062b8 <_ZN5L6470I8shield_2E13prepare_go_toEi>:
    virtual void prepare_go_to(signed int position)
 80062b8:	b590      	push	{r4, r7, lr}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80062ca:	681c      	ldr	r4, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6839      	ldr	r1, [r7, #0]
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	4798      	blx	r3
 80062dc:	4603      	mov	r3, r0
 80062de:	4619      	mov	r1, r3
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd90      	pop	{r4, r7, pc}

080062f4 <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE>:
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 80062f4:	b5b0      	push	{r4, r5, r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	4613      	mov	r3, r2
 8006300:	71fb      	strb	r3, [r7, #7]
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800630a:	681c      	ldr	r4, [r3, #0]
 800630c:	79fb      	ldrb	r3, [r7, #7]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d101      	bne.n	8006316 <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 8006312:	2501      	movs	r5, #1
 8006314:	e000      	b.n	8006318 <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 8006316:	2500      	movs	r5, #0
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68b9      	ldr	r1, [r7, #8]
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	4798      	blx	r3
 8006328:	4603      	mov	r3, r0
 800632a:	461a      	mov	r2, r3
 800632c:	4629      	mov	r1, r5
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800633a:	bf00      	nop
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bdb0      	pop	{r4, r5, r7, pc}

08006342 <_ZN5L6470I8shield_2E15prepare_go_homeEv>:
    virtual void prepare_go_home(void)
 8006342:	b580      	push	{r7, lr}
 8006344:	b082      	sub	sp, #8
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoHome();
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006360:	bf00      	nop
 8006362:	3708      	adds	r7, #8
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <_ZN5L6470I8shield_2E15prepare_go_markEv>:
    virtual void prepare_go_mark(void)
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoMark();
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006386:	bf00      	nop
 8006388:	3708      	adds	r7, #8
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 800638e:	b5b0      	push	{r4, r5, r7, lr}
 8006390:	b084      	sub	sp, #16
 8006392:	af00      	add	r7, sp, #0
 8006394:	60f8      	str	r0, [r7, #12]
 8006396:	607b      	str	r3, [r7, #4]
 8006398:	460b      	mov	r3, r1
 800639a:	72fb      	strb	r3, [r7, #11]
 800639c:	4613      	mov	r3, r2
 800639e:	72bb      	strb	r3, [r7, #10]
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80063a8:	681c      	ldr	r4, [r3, #0]
 80063aa:	7abb      	ldrb	r3, [r7, #10]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d101      	bne.n	80063b4 <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 80063b0:	2501      	movs	r5, #1
 80063b2:	e000      	b.n	80063b6 <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 80063b4:	2500      	movs	r5, #0
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	ee07 2a90 	vmov	s15, r2
 80063c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ca:	eeb0 0a67 	vmov.f32	s0, s15
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	4798      	blx	r3
 80063d2:	4603      	mov	r3, r0
 80063d4:	7af9      	ldrb	r1, [r7, #11]
 80063d6:	462a      	mov	r2, r5
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80063e4:	bf00      	nop
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bdb0      	pop	{r4, r5, r7, pc}

080063ec <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE>:
    virtual void prepare_run(StepperMotor::direction_t direction)
 80063ec:	b5b0      	push	{r4, r5, r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	460b      	mov	r3, r1
 80063f6:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006400:	681c      	ldr	r4, [r3, #0]
 8006402:	78fb      	ldrb	r3, [r7, #3]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d101      	bne.n	800640c <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE+0x20>
 8006408:	2501      	movs	r5, #1
 800640a:	e000      	b.n	800640e <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE+0x22>
 800640c:	2500      	movs	r5, #0
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2106      	movs	r1, #6
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	4798      	blx	r3
 800641e:	4603      	mov	r3, r0
 8006420:	461a      	mov	r2, r3
 8006422:	4629      	mov	r1, r5
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006430:	bf00      	nop
 8006432:	3708      	adds	r7, #8
 8006434:	46bd      	mov	sp, r7
 8006436:	bdb0      	pop	{r4, r5, r7, pc}

08006438 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj>:
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 8006438:	b5b0      	push	{r4, r5, r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	460b      	mov	r3, r1
 8006442:	607a      	str	r2, [r7, #4]
 8006444:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800644e:	681c      	ldr	r4, [r3, #0]
 8006450:	7afb      	ldrb	r3, [r7, #11]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d101      	bne.n	800645a <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 8006456:	2501      	movs	r5, #1
 8006458:	e000      	b.n	800645c <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 800645a:	2500      	movs	r5, #0
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	ee07 2a90 	vmov	s15, r2
 800646c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006470:	eeb0 0a67 	vmov.f32	s0, s15
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	4798      	blx	r3
 8006478:	4603      	mov	r3, r0
 800647a:	461a      	mov	r2, r3
 800647c:	4629      	mov	r1, r5
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800648a:	bf00      	nop
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bdb0      	pop	{r4, r5, r7, pc}

08006492 <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj>:
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 8006492:	b580      	push	{r7, lr}
 8006494:	b084      	sub	sp, #16
 8006496:	af00      	add	r7, sp, #0
 8006498:	60f8      	str	r0, [r7, #12]
 800649a:	460b      	mov	r3, r1
 800649c:	607a      	str	r2, [r7, #4]
 800649e:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	7afa      	ldrb	r2, [r7, #11]
 80064ac:	2a01      	cmp	r2, #1
 80064ae:	d101      	bne.n	80064b4 <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 80064b0:	2101      	movs	r1, #1
 80064b2:	e000      	b.n	80064b6 <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 80064b4:	2100      	movs	r1, #0
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80064c4:	bf00      	nop
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <_ZN5L6470I8shield_2E17prepare_soft_stopEv>:
    virtual void prepare_soft_stop(void)
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftStop();
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80064ea:	bf00      	nop
 80064ec:	3708      	adds	r7, #8
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <_ZN5L6470I8shield_2E17prepare_hard_stopEv>:
    virtual void prepare_hard_stop(void)
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b082      	sub	sp, #8
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardStop();
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006510:	bf00      	nop
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <_ZN5L6470I8shield_2E16prepare_soft_hizEv>:
    virtual void prepare_soft_hiz(void)
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftHiZ();
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006536:	bf00      	nop
 8006538:	3708      	adds	r7, #8
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <_ZN5L6470I8shield_2E16prepare_hard_hizEv>:
    virtual void prepare_hard_hiz(void)
 800653e:	b580      	push	{r7, lr}
 8006540:	b082      	sub	sp, #8
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardHiZ();
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800655c:	bf00      	nop
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE>:
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	460b      	mov	r3, r1
 800656e:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	78fa      	ldrb	r2, [r7, #3]
 800657c:	2a01      	cmp	r2, #1
 800657e:	d101      	bne.n	8006584 <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 8006580:	2201      	movs	r2, #1
 8006582:	e000      	b.n	8006586 <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 8006584:	2200      	movs	r2, #0
 8006586:	4611      	mov	r1, r2
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006594:	bf00      	nop
 8006596:	3708      	adds	r7, #8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	460b      	mov	r3, r1
 80065a6:	70fb      	strb	r3, [r7, #3]
 80065a8:	4613      	mov	r3, r2
 80065aa:	70bb      	strb	r3, [r7, #2]
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	78ba      	ldrb	r2, [r7, #2]
 80065b8:	2a01      	cmp	r2, #1
 80065ba:	d101      	bne.n	80065c0 <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 80065bc:	2201      	movs	r2, #1
 80065be:	e000      	b.n	80065c2 <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 80065c0:	2200      	movs	r2, #0
 80065c2:	78f9      	ldrb	r1, [r7, #3]
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80065d0:	bf00      	nop
 80065d2:	3708      	adds	r7, #8
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <_ZN5L6470I8shield_2E20prepare_reset_deviceEv>:
    virtual void prepare_reset_device(void)
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetDevice();
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80065f6:	bf00      	nop
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <_ZN5L6470I8shield_2E24perform_prepared_actionsEv>:
    uint8_t* perform_prepared_actions(void)
 80065fe:	b580      	push	{r7, lr}
 8006600:	b082      	sub	sp, #8
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
        return L6470_PerformPreparedApplicationCommand();
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	4798      	blx	r3
 8006614:	4603      	mov	r3, r0
    }
 8006616:	4618      	mov	r0, r3
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <_ZN5L6470I8shield_2E19get_prepared_actionEv>:
    prepared_action_t get_prepared_action(void)
 800661e:	b480      	push	{r7}
 8006620:	b083      	sub	sp, #12
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
        return prepared_action;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    }
 800662c:	4618      	mov	r0, r3
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <_ZN5L6470I8shield_2E10get_resultEPh>:
    int32_t get_result(uint8_t *raw_data)
 8006638:	b5b0      	push	{r4, r5, r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
        switch (prepared_action) {
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8006648:	3b01      	subs	r3, #1
 800664a:	2b07      	cmp	r3, #7
 800664c:	f200 80fe 	bhi.w	800684c <_ZN5L6470I8shield_2E10get_resultEPh+0x214>
 8006650:	a201      	add	r2, pc, #4	; (adr r2, 8006658 <_ZN5L6470I8shield_2E10get_resultEPh+0x20>)
 8006652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006656:	bf00      	nop
 8006658:	08006679 	.word	0x08006679
 800665c:	080066a5 	.word	0x080066a5
 8006660:	080066d3 	.word	0x080066d3
 8006664:	08006717 	.word	0x08006717
 8006668:	0800675d 	.word	0x0800675d
 800666c:	080067a3 	.word	0x080067a3
 8006670:	080067e9 	.word	0x080067e9
 8006674:	0800682f 	.word	0x0800682f
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8006680:	681c      	ldr	r4, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	6a12      	ldr	r2, [r2, #32]
 8006690:	7b92      	ldrb	r2, [r2, #14]
 8006692:	6839      	ldr	r1, [r7, #0]
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	4798      	blx	r3
 8006698:	4603      	mov	r3, r0
 800669a:	4619      	mov	r1, r3
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	47a0      	blx	r4
 80066a0:	4603      	mov	r3, r0
 80066a2:	e0d4      	b.n	800684e <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80066ac:	681c      	ldr	r4, [r3, #0]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f503 730d 	add.w	r3, r3, #564	; 0x234
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	6a12      	ldr	r2, [r2, #32]
 80066bc:	3228      	adds	r2, #40	; 0x28
 80066be:	7b92      	ldrb	r2, [r2, #14]
 80066c0:	6839      	ldr	r1, [r7, #0]
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	4798      	blx	r3
 80066c6:	4603      	mov	r3, r0
 80066c8:	4619      	mov	r1, r3
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	47a0      	blx	r4
 80066ce:	4603      	mov	r3, r0
 80066d0:	e0bd      	b.n	800684e <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80066da:	681c      	ldr	r4, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80066e4:	681d      	ldr	r5, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f503 730d 	add.w	r3, r3, #564	; 0x234
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	6a12      	ldr	r2, [r2, #32]
 80066f4:	323c      	adds	r2, #60	; 0x3c
 80066f6:	7b92      	ldrb	r2, [r2, #14]
 80066f8:	6839      	ldr	r1, [r7, #0]
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	4798      	blx	r3
 80066fe:	4603      	mov	r3, r0
 8006700:	4619      	mov	r1, r3
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	47a8      	blx	r5
 8006706:	eef0 7a40 	vmov.f32	s15, s0
 800670a:	eeb0 0a67 	vmov.f32	s0, s15
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	47a0      	blx	r4
 8006712:	4603      	mov	r3, r0
 8006714:	e09b      	b.n	800684e <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800671e:	681c      	ldr	r4, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006728:	681d      	ldr	r5, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	6a12      	ldr	r2, [r2, #32]
 8006738:	3278      	adds	r2, #120	; 0x78
 800673a:	7b92      	ldrb	r2, [r2, #14]
 800673c:	6839      	ldr	r1, [r7, #0]
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	4798      	blx	r3
 8006742:	4603      	mov	r3, r0
 8006744:	b29b      	uxth	r3, r3
 8006746:	4619      	mov	r1, r3
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	47a8      	blx	r5
 800674c:	eef0 7a40 	vmov.f32	s15, s0
 8006750:	eeb0 0a67 	vmov.f32	s0, s15
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	47a0      	blx	r4
 8006758:	4603      	mov	r3, r0
 800675a:	e078      	b.n	800684e <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006764:	681c      	ldr	r4, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800676e:	681d      	ldr	r5, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	6a12      	ldr	r2, [r2, #32]
 800677e:	328c      	adds	r2, #140	; 0x8c
 8006780:	7b92      	ldrb	r2, [r2, #14]
 8006782:	6839      	ldr	r1, [r7, #0]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	4798      	blx	r3
 8006788:	4603      	mov	r3, r0
 800678a:	b29b      	uxth	r3, r3
 800678c:	4619      	mov	r1, r3
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	47a8      	blx	r5
 8006792:	eef0 7a40 	vmov.f32	s15, s0
 8006796:	eeb0 0a67 	vmov.f32	s0, s15
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	47a0      	blx	r4
 800679e:	4603      	mov	r3, r0
 80067a0:	e055      	b.n	800684e <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80067aa:	681c      	ldr	r4, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80067b4:	681d      	ldr	r5, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f503 730d 	add.w	r3, r3, #564	; 0x234
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	6a12      	ldr	r2, [r2, #32]
 80067c4:	3250      	adds	r2, #80	; 0x50
 80067c6:	7b92      	ldrb	r2, [r2, #14]
 80067c8:	6839      	ldr	r1, [r7, #0]
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	4798      	blx	r3
 80067ce:	4603      	mov	r3, r0
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	4619      	mov	r1, r3
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	47a8      	blx	r5
 80067d8:	eef0 7a40 	vmov.f32	s15, s0
 80067dc:	eeb0 0a67 	vmov.f32	s0, s15
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	47a0      	blx	r4
 80067e4:	4603      	mov	r3, r0
 80067e6:	e032      	b.n	800684e <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80067f0:	681c      	ldr	r4, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80067fa:	681d      	ldr	r5, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	6a12      	ldr	r2, [r2, #32]
 800680a:	3264      	adds	r2, #100	; 0x64
 800680c:	7b92      	ldrb	r2, [r2, #14]
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	4798      	blx	r3
 8006814:	4603      	mov	r3, r0
 8006816:	b29b      	uxth	r3, r3
 8006818:	4619      	mov	r1, r3
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	47a8      	blx	r5
 800681e:	eef0 7a40 	vmov.f32	s15, s0
 8006822:	eeb0 0a67 	vmov.f32	s0, s15
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	47a0      	blx	r4
 800682a:	4603      	mov	r3, r0
 800682c:	e00f      	b.n	800684e <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2104      	movs	r1, #4
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	4798      	blx	r3
 800683e:	4603      	mov	r3, r0
 8006840:	2b01      	cmp	r3, #1
 8006842:	d101      	bne.n	8006848 <_ZN5L6470I8shield_2E10get_resultEPh+0x210>
 8006844:	2301      	movs	r3, #1
 8006846:	e002      	b.n	800684e <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
 8006848:	2300      	movs	r3, #0
 800684a:	e000      	b.n	800684e <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return 0;
 800684c:	2300      	movs	r3, #0
    }
 800684e:	4618      	mov	r0, r3
 8006850:	3708      	adds	r7, #8
 8006852:	46bd      	mov	sp, r7
 8006854:	bdb0      	pop	{r4, r5, r7, pc}
 8006856:	bf00      	nop

08006858 <_ZN5L6470I8shield_2E13L6470_DISABLEEv>:
    void L6470_DISABLE(void)
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6898      	ldr	r0, [r3, #8]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	899b      	ldrh	r3, [r3, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	4619      	mov	r1, r3
 800686c:	f009 fb18 	bl	800fea0 <HAL_GPIO_WritePin>
    }
 8006870:	bf00      	nop
 8006872:	3708      	adds	r7, #8
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm>:
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  if (AbsPos > L6470_MAX_POSITION)
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006888:	d303      	bcc.n	8006892 <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	f5a3 0380 	sub.w	r3, r3, #4194304	; 0x400000
 8006890:	e000      	b.n	8006894 <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm+0x1c>
    return AbsPos;
 8006892:	683b      	ldr	r3, [r7, #0]
}
 8006894:	4618      	mov	r0, r3
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl>:
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	db05      	blt.n	80068bc <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x1c>
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068b6:	da01      	bge.n	80068bc <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	e00c      	b.n	80068d6 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x36>
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
 80068c2:	db06      	blt.n	80068d2 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x32>
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	da03      	bge.n	80068d2 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
 80068d0:	e001      	b.n	80068d6 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x36>
      return (L6470_POSITION_RANGE + 1);        // OVF
 80068d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	370c      	adds	r7, #12
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
	...

080068e4 <_ZN5L6470I8shield_2E20L6470_Speed_2_Step_sEm>:
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  return (Speed * ((float)14.9012e-3));
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	ee07 3a90 	vmov	s15, r3
 80068f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068f8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8006910 <_ZN5L6470I8shield_2E20L6470_Speed_2_Step_sEm+0x2c>
 80068fc:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006900:	eeb0 0a67 	vmov.f32	s0, s15
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	3c74242a 	.word	0x3c74242a

08006914 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf>:
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 8006920:	edd7 7a00 	vldr	s15, [r7]
 8006924:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006958 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x44>
 8006928:	eef4 7ac7 	vcmpe.f32	s15, s14
 800692c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006930:	d80a      	bhi.n	8006948 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 8006932:	ed97 7a00 	vldr	s14, [r7]
 8006936:	eddf 6a09 	vldr	s13, [pc, #36]	; 800695c <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x48>
 800693a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800693e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006942:	ee17 3a90 	vmov	r3, s15
 8006946:	e000      	b.n	800694a <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x36>
    return 0;   // Warning
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	370c      	adds	r7, #12
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	4674241b 	.word	0x4674241b
 800695c:	3c74242a 	.word	0x3c74242a

08006960 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et>:
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	460b      	mov	r3, r1
 800696a:	807b      	strh	r3, [r7, #2]
  if (Acc <= L6470_MAX_ACC)
 800696c:	887b      	ldrh	r3, [r7, #2]
 800696e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006972:	d209      	bcs.n	8006988 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 8006974:	887b      	ldrh	r3, [r7, #2]
 8006976:	ee07 3a90 	vmov	s15, r3
 800697a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800697e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800699c <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x3c>
 8006982:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006986:	e001      	b.n	800698c <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x2c>
    return 0;   // Warning
 8006988:	eddf 7a05 	vldr	s15, [pc, #20]	; 80069a0 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x40>
}
 800698c:	eeb0 0a67 	vmov.f32	s0, s15
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	4168d4fe 	.word	0x4168d4fe
 80069a0:	00000000 	.word	0x00000000

080069a4 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 80069b0:	edd7 7a00 	vldr	s15, [r7]
 80069b4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80069e8 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x44>
 80069b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069c0:	d80b      	bhi.n	80069da <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 80069c2:	ed97 7a00 	vldr	s14, [r7]
 80069c6:	eddf 6a09 	vldr	s13, [pc, #36]	; 80069ec <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x48>
 80069ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80069ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069d2:	ee17 3a90 	vmov	r3, s15
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	e000      	b.n	80069dc <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x38>
    return 0;   // Warning
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	4768c671 	.word	0x4768c671
 80069ec:	4168d4fe 	.word	0x4168d4fe

080069f0 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et>:
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	460b      	mov	r3, r1
 80069fa:	807b      	strh	r3, [r7, #2]
  if (Dec <= L6470_MAX_DEC)
 80069fc:	887b      	ldrh	r3, [r7, #2]
 80069fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a02:	d209      	bcs.n	8006a18 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 8006a04:	887b      	ldrh	r3, [r7, #2]
 8006a06:	ee07 3a90 	vmov	s15, r3
 8006a0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a0e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8006a2c <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x3c>
 8006a12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006a16:	e001      	b.n	8006a1c <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x2c>
    return 0;   // Warning
 8006a18:	eddf 7a05 	vldr	s15, [pc, #20]	; 8006a30 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x40>
}
 8006a1c:	eeb0 0a67 	vmov.f32	s0, s15
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	4168d4fe 	.word	0x4168d4fe
 8006a30:	00000000 	.word	0x00000000

08006a34 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 8006a40:	edd7 7a00 	vldr	s15, [r7]
 8006a44:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006a78 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x44>
 8006a48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a50:	d80b      	bhi.n	8006a6a <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8006a52:	ed97 7a00 	vldr	s14, [r7]
 8006a56:	eddf 6a09 	vldr	s13, [pc, #36]	; 8006a7c <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x48>
 8006a5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a62:	ee17 3a90 	vmov	r3, s15
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	e000      	b.n	8006a6c <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x38>
    return 0;   // Warning
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr
 8006a78:	4768c671 	.word	0x4768c671
 8006a7c:	4168d4fe 	.word	0x4168d4fe

08006a80 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	460b      	mov	r3, r1
 8006a8a:	807b      	strh	r3, [r7, #2]
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 8006a8c:	887b      	ldrh	r3, [r7, #2]
 8006a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a92:	d209      	bcs.n	8006aa8 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 8006a94:	887b      	ldrh	r3, [r7, #2]
 8006a96:	ee07 3a90 	vmov	s15, r3
 8006a9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a9e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8006abc <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 8006aa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006aa6:	e001      	b.n	8006aac <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 8006aa8:	eddf 7a05 	vldr	s15, [pc, #20]	; 8006ac0 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 8006aac:	eeb0 0a67 	vmov.f32	s0, s15
 8006ab0:	370c      	adds	r7, #12
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	4174240b 	.word	0x4174240b
 8006ac0:	00000000 	.word	0x00000000

08006ac4 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 8006ad0:	edd7 7a00 	vldr	s15, [r7]
 8006ad4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006b08 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x44>
 8006ad8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ae0:	d80b      	bhi.n	8006afa <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 8006ae2:	ed97 7a00 	vldr	s14, [r7]
 8006ae6:	eddf 6a09 	vldr	s13, [pc, #36]	; 8006b0c <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x48>
 8006aea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006aee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006af2:	ee17 3a90 	vmov	r3, s15
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	e000      	b.n	8006afc <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x38>
    return 0;   // Warning
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr
 8006b08:	4673e702 	.word	0x4673e702
 8006b0c:	4174240b 	.word	0x4174240b

08006b10 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	460b      	mov	r3, r1
 8006b1a:	807b      	strh	r3, [r7, #2]
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 8006b1c:	887b      	ldrh	r3, [r7, #2]
 8006b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b22:	d209      	bcs.n	8006b38 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 8006b24:	887b      	ldrh	r3, [r7, #2]
 8006b26:	ee07 3a90 	vmov	s15, r3
 8006b2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b2e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8006b4c <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x3c>
 8006b32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006b36:	e001      	b.n	8006b3c <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 8006b38:	eddf 7a05 	vldr	s15, [pc, #20]	; 8006b50 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 8006b3c:	eeb0 0a67 	vmov.f32	s0, s15
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	3e742401 	.word	0x3e742401
 8006b50:	00000000 	.word	0x00000000

08006b54 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 8006b60:	edd7 7a00 	vldr	s15, [r7]
 8006b64:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006b98 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x44>
 8006b68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b70:	d80b      	bhi.n	8006b8a <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 8006b72:	ed97 7a00 	vldr	s14, [r7]
 8006b76:	eddf 6a09 	vldr	s13, [pc, #36]	; 8006b9c <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x48>
 8006b7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b82:	ee17 3a90 	vmov	r3, s15
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	e000      	b.n	8006b8c <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x38>
    return 0;   // Warning
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr
 8006b98:	447414bf 	.word	0x447414bf
 8006b9c:	3e742401 	.word	0x3e742401

08006ba0 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt>:
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	807b      	strh	r3, [r7, #2]
  if (FsSpd <= L6470_MAX_FS_SPD)
 8006bac:	887b      	ldrh	r3, [r7, #2]
 8006bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bb2:	d219      	bcs.n	8006be8 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 8006bb4:	887b      	ldrh	r3, [r7, #2]
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7f9 fce4 	bl	8000584 <__aeabi_i2d>
 8006bbc:	f04f 0200 	mov.w	r2, #0
 8006bc0:	4b0e      	ldr	r3, [pc, #56]	; (8006bfc <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x5c>)
 8006bc2:	f7f9 fb93 	bl	80002ec <__adddf3>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	460b      	mov	r3, r1
 8006bca:	4610      	mov	r0, r2
 8006bcc:	4619      	mov	r1, r3
 8006bce:	f04f 0200 	mov.w	r2, #0
 8006bd2:	4b0b      	ldr	r3, [pc, #44]	; (8006c00 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x60>)
 8006bd4:	f7f9 fd40 	bl	8000658 <__aeabi_dmul>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	460b      	mov	r3, r1
 8006bdc:	4610      	mov	r0, r2
 8006bde:	4619      	mov	r1, r3
 8006be0:	f7fa f812 	bl	8000c08 <__aeabi_d2f>
 8006be4:	4603      	mov	r3, r0
 8006be6:	e001      	b.n	8006bec <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x4c>
    return 0;   // Warning
 8006be8:	f04f 0300 	mov.w	r3, #0
}
 8006bec:	ee07 3a90 	vmov	s15, r3
 8006bf0:	eeb0 0a67 	vmov.f32	s0, s15
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	3fe00000 	.word	0x3fe00000
 8006c00:	402e8000 	.word	0x402e8000

08006c04 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 8006c10:	edd7 7a00 	vldr	s15, [r7]
 8006c14:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8006c50 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x4c>
 8006c18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c20:	d80f      	bhi.n	8006c42 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 8006c22:	ed97 7a00 	vldr	s14, [r7]
 8006c26:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8006c54 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x50>
 8006c2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c2e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006c32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c3a:	ee17 3a90 	vmov	r3, s15
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	e000      	b.n	8006c44 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x40>
    return 0;   // Warning
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr
 8006c50:	4673e180 	.word	0x4673e180
 8006c54:	41740000 	.word	0x41740000

08006c58 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	460b      	mov	r3, r1
 8006c62:	807b      	strh	r3, [r7, #2]
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 8006c64:	887b      	ldrh	r3, [r7, #2]
 8006c66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c6a:	d209      	bcs.n	8006c80 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 8006c6c:	887b      	ldrh	r3, [r7, #2]
 8006c6e:	ee07 3a90 	vmov	s15, r3
 8006c72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c76:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8006c94 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x3c>
 8006c7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c7e:	e001      	b.n	8006c84 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 8006c80:	eddf 7a05 	vldr	s15, [pc, #20]	; 8006c98 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 8006c84:	eeb0 0a67 	vmov.f32	s0, s15
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	3d7423f4 	.word	0x3d7423f4
 8006c98:	00000000 	.word	0x00000000

08006c9c <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 8006ca8:	edd7 7a00 	vldr	s15, [r7]
 8006cac:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006ce0 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x44>
 8006cb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cb8:	d80b      	bhi.n	8006cd2 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 8006cba:	ed97 7a00 	vldr	s14, [r7]
 8006cbe:	eddf 6a09 	vldr	s13, [pc, #36]	; 8006ce4 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x48>
 8006cc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006cc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cca:	ee17 3a90 	vmov	r3, s15
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	e000      	b.n	8006cd4 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x38>
    return 0;   // Warning
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr
 8006ce0:	44742023 	.word	0x44742023
 8006ce4:	3d7423f4 	.word	0x3d7423f4

08006ce8 <_ZN5L6470I8shield_2E20L6470_StSlp_2_s_StepEh>:
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	70fb      	strb	r3, [r7, #3]
    return (StSlp * ((float)1.5686e-5));
 8006cf4:	78fb      	ldrb	r3, [r7, #3]
 8006cf6:	ee07 3a90 	vmov	s15, r3
 8006cfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006cfe:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8006d14 <_ZN5L6470I8shield_2E20L6470_StSlp_2_s_StepEh+0x2c>
 8006d02:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006d06:	eeb0 0a67 	vmov.f32	s0, s15
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr
 8006d14:	3783956e 	.word	0x3783956e

08006d18 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 8006d24:	edd7 7a02 	vldr	s15, [r7, #8]
 8006d28:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8006d60 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x48>
 8006d2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d34:	d80c      	bhi.n	8006d50 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8006d36:	ed97 7a02 	vldr	s14, [r7, #8]
 8006d3a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8006d64 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x4c>
 8006d3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d46:	edc7 7a01 	vstr	s15, [r7, #4]
 8006d4a:	793b      	ldrb	r3, [r7, #4]
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	e000      	b.n	8006d52 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x3a>
    return 0;   // Warning
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	3b8311d9 	.word	0x3b8311d9
 8006d64:	3783956e 	.word	0x3783956e

08006d68 <_ZN5L6470I8shield_2E23L6470_FnSlpAcc_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	460b      	mov	r3, r1
 8006d72:	70fb      	strb	r3, [r7, #3]
    return (FnSlpAcc * ((float)1.5686e-5));
 8006d74:	78fb      	ldrb	r3, [r7, #3]
 8006d76:	ee07 3a90 	vmov	s15, r3
 8006d7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d7e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8006d94 <_ZN5L6470I8shield_2E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 8006d82:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006d86:	eeb0 0a67 	vmov.f32	s0, s15
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr
 8006d94:	3783956e 	.word	0x3783956e

08006d98 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 8006da4:	edd7 7a02 	vldr	s15, [r7, #8]
 8006da8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8006de0 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x48>
 8006dac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006db4:	d80c      	bhi.n	8006dd0 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8006db6:	ed97 7a02 	vldr	s14, [r7, #8]
 8006dba:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8006de4 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 8006dbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006dc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dc6:	edc7 7a01 	vstr	s15, [r7, #4]
 8006dca:	793b      	ldrb	r3, [r7, #4]
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	e000      	b.n	8006dd2 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x3a>
    return 0;   // Warning
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3714      	adds	r7, #20
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	3b8311d9 	.word	0x3b8311d9
 8006de4:	3783956e 	.word	0x3783956e

08006de8 <_ZN5L6470I8shield_2E23L6470_FnSlpDec_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	460b      	mov	r3, r1
 8006df2:	70fb      	strb	r3, [r7, #3]
    return (FnSlpDec * ((float)1.5686e-5));
 8006df4:	78fb      	ldrb	r3, [r7, #3]
 8006df6:	ee07 3a90 	vmov	s15, r3
 8006dfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006dfe:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8006e14 <_ZN5L6470I8shield_2E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 8006e02:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006e06:	eeb0 0a67 	vmov.f32	s0, s15
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr
 8006e14:	3783956e 	.word	0x3783956e

08006e18 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 8006e24:	edd7 7a02 	vldr	s15, [r7, #8]
 8006e28:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8006e60 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x48>
 8006e2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e34:	d80c      	bhi.n	8006e50 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8006e36:	ed97 7a02 	vldr	s14, [r7, #8]
 8006e3a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8006e64 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 8006e3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006e42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e46:	edc7 7a01 	vstr	s15, [r7, #4]
 8006e4a:	793b      	ldrb	r3, [r7, #4]
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	e000      	b.n	8006e52 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x3a>
    return 0;   // Warning
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3714      	adds	r7, #20
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	3b8311d9 	.word	0x3b8311d9
 8006e64:	3783956e 	.word	0x3783956e

08006e68 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh>:
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	460b      	mov	r3, r1
 8006e72:	70fb      	strb	r3, [r7, #3]
  if (OcdTh <= L6470_MAX_OCD_TH)
 8006e74:	78fb      	ldrb	r3, [r7, #3]
 8006e76:	2b0f      	cmp	r3, #15
 8006e78:	d80a      	bhi.n	8006e90 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 8006e7a:	78fb      	ldrb	r3, [r7, #3]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	ee07 3a90 	vmov	s15, r3
 8006e82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e86:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8006ea4 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x3c>
 8006e8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006e8e:	e001      	b.n	8006e94 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x2c>
    return 0;   // Warning
 8006e90:	eddf 7a05 	vldr	s15, [pc, #20]	; 8006ea8 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x40>
}
 8006e94:	eeb0 0a67 	vmov.f32	s0, s15
 8006e98:	370c      	adds	r7, #12
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	43bb8000 	.word	0x43bb8000
 8006ea8:	00000000 	.word	0x00000000

08006eac <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 8006eac:	b480      	push	{r7}
 8006eae:	b087      	sub	sp, #28
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 8006eb8:	edd7 7a02 	vldr	s15, [r7, #8]
 8006ebc:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006f48 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x9c>
 8006ec0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ec8:	d836      	bhi.n	8006f38 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8c>
    result = (mA / ((float)375));
 8006eca:	ed97 7a02 	vldr	s14, [r7, #8]
 8006ece:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8006f4c <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0xa0>
 8006ed2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ed6:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 8006eda:	edd7 7a05 	vldr	s15, [r7, #20]
 8006ede:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ee2:	edc7 7a01 	vstr	s15, [r7, #4]
 8006ee6:	793b      	ldrb	r3, [r7, #4]
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	ee07 3a90 	vmov	s15, r3
 8006eee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ef2:	ed97 7a05 	vldr	s14, [r7, #20]
 8006ef6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006efa:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 8006efe:	edd7 7a04 	vldr	s15, [r7, #16]
 8006f02:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006f06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f0e:	d50a      	bpl.n	8006f26 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 8006f10:	edd7 7a05 	vldr	s15, [r7, #20]
 8006f14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f18:	edc7 7a01 	vstr	s15, [r7, #4]
 8006f1c:	793b      	ldrb	r3, [r7, #4]
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	3b01      	subs	r3, #1
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	e009      	b.n	8006f3a <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8e>
      return ((uint8_t)result);    
 8006f26:	edd7 7a05 	vldr	s15, [r7, #20]
 8006f2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f2e:	edc7 7a01 	vstr	s15, [r7, #4]
 8006f32:	793b      	ldrb	r3, [r7, #4]
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	e000      	b.n	8006f3a <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8e>
    return 0;   // Warning
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	371c      	adds	r7, #28
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	45bb8000 	.word	0x45bb8000
 8006f4c:	43bb8000 	.word	0x43bb8000

08006f50 <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh>:
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	460b      	mov	r3, r1
 8006f5a:	70fb      	strb	r3, [r7, #3]
  if (StallTh <= L6470_MAX_STALL_TH)
 8006f5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	db0a      	blt.n	8006f7a <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 8006f64:	78fb      	ldrb	r3, [r7, #3]
 8006f66:	3301      	adds	r3, #1
 8006f68:	ee07 3a90 	vmov	s15, r3
 8006f6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f70:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006f8c <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x3c>
 8006f74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f78:	e001      	b.n	8006f7e <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x2e>
    return 0;   // Warning
 8006f7a:	eddf 7a05 	vldr	s15, [pc, #20]	; 8006f90 <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x40>
}
 8006f7e:	eeb0 0a67 	vmov.f32	s0, s15
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr
 8006f8c:	41fa0000 	.word	0x41fa0000
 8006f90:	00000000 	.word	0x00000000

08006f94 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 8006f94:	b480      	push	{r7}
 8006f96:	b087      	sub	sp, #28
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 8006fa0:	edd7 7a02 	vldr	s15, [r7, #8]
 8006fa4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8007030 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x9c>
 8006fa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fb0:	d836      	bhi.n	8007020 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8c>
    result = (mA / ((float)31.25));
 8006fb2:	ed97 7a02 	vldr	s14, [r7, #8]
 8006fb6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8007034 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0xa0>
 8006fba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006fbe:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 8006fc2:	edd7 7a05 	vldr	s15, [r7, #20]
 8006fc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fca:	edc7 7a01 	vstr	s15, [r7, #4]
 8006fce:	793b      	ldrb	r3, [r7, #4]
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	ee07 3a90 	vmov	s15, r3
 8006fd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fda:	ed97 7a05 	vldr	s14, [r7, #20]
 8006fde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006fe2:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 8006fe6:	edd7 7a04 	vldr	s15, [r7, #16]
 8006fea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006fee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ff6:	d50a      	bpl.n	800700e <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 8006ff8:	edd7 7a05 	vldr	s15, [r7, #20]
 8006ffc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007000:	edc7 7a01 	vstr	s15, [r7, #4]
 8007004:	793b      	ldrb	r3, [r7, #4]
 8007006:	b2db      	uxtb	r3, r3
 8007008:	3b01      	subs	r3, #1
 800700a:	b2db      	uxtb	r3, r3
 800700c:	e009      	b.n	8007022 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8e>
      return ((uint8_t)result);    
 800700e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007012:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007016:	edc7 7a01 	vstr	s15, [r7, #4]
 800701a:	793b      	ldrb	r3, [r7, #4]
 800701c:	b2db      	uxtb	r3, r3
 800701e:	e000      	b.n	8007022 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8e>
    return 0;   // Warning
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	371c      	adds	r7, #28
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	457a0000 	.word	0x457a0000
 8007034:	41fa0000 	.word	0x41fa0000

08007038 <_ZN5L6470I8shield_2E12L6470_ConfigEPv>:
status_t L6470<shield_x>::L6470_Config(void *init)
 8007038:	b580      	push	{r7, lr}
 800703a:	b086      	sub	sp, #24
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
  reset_device();
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	3394      	adds	r3, #148	; 0x94
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	4798      	blx	r3
  get_status();
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	330c      	adds	r3, #12
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	4798      	blx	r3
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	697a      	ldr	r2, [r7, #20]
 800706a:	edd2 7a05 	vldr	s15, [r2, #20]
 800706e:	eeb0 0a67 	vmov.f32	s0, s15
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	4798      	blx	r3
 8007076:	4603      	mov	r3, r0
 8007078:	461a      	mov	r2, r3
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	697a      	ldr	r2, [r7, #20]
 800708c:	edd2 7a06 	vldr	s15, [r2, #24]
 8007090:	eeb0 0a67 	vmov.f32	s0, s15
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	4798      	blx	r3
 8007098:	4603      	mov	r3, r0
 800709a:	461a      	mov	r2, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	edd2 7a07 	vldr	s15, [r2, #28]
 80070b2:	eeb0 0a67 	vmov.f32	s0, s15
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	4798      	blx	r3
 80070ba:	4603      	mov	r3, r0
 80070bc:	461a      	mov	r2, r3
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	697a      	ldr	r2, [r7, #20]
 80070d0:	edd2 7a08 	vldr	s15, [r2, #32]
 80070d4:	eeb0 0a67 	vmov.f32	s0, s15
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	4798      	blx	r3
 80070dc:	4603      	mov	r3, r0
 80070de:	461a      	mov	r2, r3
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 80070f6:	eeb0 0a67 	vmov.f32	s0, s15
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	4798      	blx	r3
 80070fe:	4603      	mov	r3, r0
 8007100:	461a      	mov	r2, r3
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800710e:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 80073e0 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 8007112:	ee67 6a87 	vmul.f32	s13, s15, s14
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	ed93 7a00 	vldr	s14, [r3]
 800711c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007124:	edc7 7a01 	vstr	s15, [r7, #4]
 8007128:	793b      	ldrb	r3, [r7, #4]
 800712a:	b2da      	uxtb	r2, r3
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8007138:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80073e0 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 800713c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	ed93 7a00 	vldr	s14, [r3]
 8007146:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800714a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800714e:	edc7 7a01 	vstr	s15, [r7, #4]
 8007152:	793b      	ldrb	r3, [r7, #4]
 8007154:	b2da      	uxtb	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8007162:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 80073e0 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 8007166:	ee67 6a87 	vmul.f32	s13, s15, s14
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	ed93 7a00 	vldr	s14, [r3]
 8007170:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007174:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007178:	edc7 7a01 	vstr	s15, [r7, #4]
 800717c:	793b      	ldrb	r3, [r7, #4]
 800717e:	b2da      	uxtb	r2, r3
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800718c:	ed9f 7a94 	vldr	s14, [pc, #592]	; 80073e0 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 8007190:	ee67 6a87 	vmul.f32	s13, s15, s14
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	ed93 7a00 	vldr	s14, [r3]
 800719a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800719e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071a2:	edc7 7a01 	vstr	s15, [r7, #4]
 80071a6:	793b      	ldrb	r3, [r7, #4]
 80071a8:	b2da      	uxtb	r2, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80071c0:	eeb0 0a67 	vmov.f32	s0, s15
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	4798      	blx	r3
 80071c8:	4603      	mov	r3, r0
 80071ca:	461a      	mov	r2, r3
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	697a      	ldr	r2, [r7, #20]
 80071de:	edd2 7a0f 	vldr	s15, [r2, #60]	; 0x3c
 80071e2:	eeb0 0a67 	vmov.f32	s0, s15
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	4798      	blx	r3
 80071ea:	4603      	mov	r3, r0
 80071ec:	461a      	mov	r2, r3
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	edd2 7a10 	vldr	s15, [r2, #64]	; 0x40
 8007204:	eeb0 0a67 	vmov.f32	s0, s15
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	4798      	blx	r3
 800720c:	4603      	mov	r3, r0
 800720e:	461a      	mov	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	697a      	ldr	r2, [r7, #20]
 8007222:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 8007226:	eeb0 0a67 	vmov.f32	s0, s15
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	4798      	blx	r3
 800722e:	4603      	mov	r3, r0
 8007230:	461a      	mov	r2, r3
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	edd2 7a13 	vldr	s15, [r2, #76]	; 0x4c
 8007254:	eeb0 0a67 	vmov.f32	s0, s15
 8007258:	68f8      	ldr	r0, [r7, #12]
 800725a:	4798      	blx	r3
 800725c:	4603      	mov	r3, r0
 800725e:	461a      	mov	r2, r3
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	697a      	ldr	r2, [r7, #20]
 8007272:	edd2 7a14 	vldr	s15, [r2, #80]	; 0x50
 8007276:	eeb0 0a67 	vmov.f32	s0, s15
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	4798      	blx	r3
 800727e:	4603      	mov	r3, r0
 8007280:	461a      	mov	r2, r3
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 80072bc:	2104      	movs	r1, #4
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
 80072d2:	2105      	movs	r1, #5
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 80072e8:	2106      	movs	r1, #6
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	f8b2 204e 	ldrh.w	r2, [r2, #78]	; 0x4e
 80072fe:	2107      	movs	r1, #7
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8007314:	2108      	movs	r1, #8
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800732a:	2109      	movs	r1, #9
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	f892 2053 	ldrb.w	r2, [r2, #83]	; 0x53
 8007340:	210a      	movs	r1, #10
 8007342:	68f8      	ldr	r0, [r7, #12]
 8007344:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8007356:	210b      	movs	r1, #11
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800736c:	210c      	movs	r1, #12
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	f8b2 2056 	ldrh.w	r2, [r2, #86]	; 0x56
 8007382:	210d      	movs	r1, #13
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	f892 2058 	ldrb.w	r2, [r2, #88]	; 0x58
 8007398:	210e      	movs	r1, #14
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	f892 2059 	ldrb.w	r2, [r2, #89]	; 0x59
 80073ae:	210f      	movs	r1, #15
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	f892 205a 	ldrb.w	r2, [r2, #90]	; 0x5a
 80073c4:	2110      	movs	r1, #16
 80073c6:	68f8      	ldr	r0, [r7, #12]
 80073c8:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	f892 205b 	ldrb.w	r2, [r2, #91]	; 0x5b
 80073da:	2111      	movs	r1, #17
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	e001      	b.n	80073e4 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3ac>
 80073e0:	43800000 	.word	0x43800000
 80073e4:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	f892 205d 	ldrb.w	r2, [r2, #93]	; 0x5d
 80073f6:	2113      	movs	r1, #19
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	f892 205e 	ldrb.w	r2, [r2, #94]	; 0x5e
 800740c:	2114      	movs	r1, #20
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8007422:	2116      	movs	r1, #22
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	f8b2 2062 	ldrh.w	r2, [r2, #98]	; 0x62
 8007438:	2117      	movs	r1, #23
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	3354      	adds	r3, #84	; 0x54
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	f892 205f 	ldrb.w	r2, [r2, #95]	; 0x5f
 800744c:	4611      	mov	r1, r2
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	4798      	blx	r3
 8007452:	4603      	mov	r3, r0
 8007454:	f083 0301 	eor.w	r3, r3, #1
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b00      	cmp	r3, #0
 800745c:	d001      	beq.n	8007462 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e000      	b.n	8007464 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x42c>
  return COMPONENT_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3718      	adds	r7, #24
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 800746c:	b590      	push	{r4, r7, lr}
 800746e:	b087      	sub	sp, #28
 8007470:	af02      	add	r7, sp, #8
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	460b      	mov	r3, r1
 8007476:	607a      	str	r2, [r7, #4]
 8007478:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007482:	681c      	ldr	r4, [r3, #0]
 8007484:	7afa      	ldrb	r2, [r7, #11]
 8007486:	2300      	movs	r3, #0
 8007488:	9301      	str	r3, [sp, #4]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	4613      	mov	r3, r2
 8007490:	2201      	movs	r2, #1
 8007492:	490c      	ldr	r1, [pc, #48]	; (80074c4 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a09      	ldr	r2, [pc, #36]	; (80074c8 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 80074a4:	4907      	ldr	r1, [pc, #28]	; (80074c4 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a05      	ldr	r2, [pc, #20]	; (80074cc <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 80074b6:	4904      	ldr	r1, [pc, #16]	; (80074c8 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	4798      	blx	r3
}
 80074bc:	bf00      	nop
 80074be:	3714      	adds	r7, #20
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd90      	pop	{r4, r7, pc}
 80074c4:	20000230 	.word	0x20000230
 80074c8:	20000250 	.word	0x20000250
 80074cc:	20000258 	.word	0x20000258

080074d0 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 80074d0:	b590      	push	{r4, r7, lr}
 80074d2:	b087      	sub	sp, #28
 80074d4:	af02      	add	r7, sp, #8
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	460b      	mov	r3, r1
 80074da:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80074e4:	681c      	ldr	r4, [r3, #0]
 80074e6:	78fb      	ldrb	r3, [r7, #3]
 80074e8:	2200      	movs	r2, #0
 80074ea:	9201      	str	r2, [sp, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	9200      	str	r2, [sp, #0]
 80074f0:	2202      	movs	r2, #2
 80074f2:	4917      	ldr	r1, [pc, #92]	; (8007550 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a14      	ldr	r2, [pc, #80]	; (8007554 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8007504:	4912      	ldr	r1, [pc, #72]	; (8007550 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a10      	ldr	r2, [pc, #64]	; (8007558 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8007516:	490f      	ldr	r1, [pc, #60]	; (8007554 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6a19      	ldr	r1, [r3, #32]
 8007520:	78fa      	ldrb	r2, [r7, #3]
 8007522:	4613      	mov	r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4413      	add	r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	440b      	add	r3, r1
 800752c:	7b9b      	ldrb	r3, [r3, #14]
 800752e:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	7bfa      	ldrb	r2, [r7, #15]
 800753c:	4906      	ldr	r1, [pc, #24]	; (8007558 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	4798      	blx	r3
 8007542:	4603      	mov	r3, r0
 8007544:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 8007546:	68bb      	ldr	r3, [r7, #8]
}
 8007548:	4618      	mov	r0, r3
 800754a:	3714      	adds	r7, #20
 800754c:	46bd      	mov	sp, r7
 800754e:	bd90      	pop	{r4, r7, pc}
 8007550:	20000230 	.word	0x20000230
 8007554:	20000250 	.word	0x20000250
 8007558:	20000258 	.word	0x20000258

0800755c <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800755c:	b590      	push	{r4, r7, lr}
 800755e:	b087      	sub	sp, #28
 8007560:	af02      	add	r7, sp, #8
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	460b      	mov	r3, r1
 8007566:	607a      	str	r2, [r7, #4]
 8007568:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007572:	681c      	ldr	r4, [r3, #0]
 8007574:	7afa      	ldrb	r2, [r7, #11]
 8007576:	2300      	movs	r3, #0
 8007578:	9301      	str	r3, [sp, #4]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	9300      	str	r3, [sp, #0]
 800757e:	4613      	mov	r3, r2
 8007580:	2203      	movs	r2, #3
 8007582:	490c      	ldr	r1, [pc, #48]	; (80075b4 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a09      	ldr	r2, [pc, #36]	; (80075b8 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8007594:	4907      	ldr	r1, [pc, #28]	; (80075b4 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a05      	ldr	r2, [pc, #20]	; (80075bc <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x60>)
 80075a6:	4904      	ldr	r1, [pc, #16]	; (80075b8 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	4798      	blx	r3
}
 80075ac:	bf00      	nop
 80075ae:	3714      	adds	r7, #20
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd90      	pop	{r4, r7, pc}
 80075b4:	20000230 	.word	0x20000230
 80075b8:	20000250 	.word	0x20000250
 80075bc:	20000258 	.word	0x20000258

080075c0 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 80075c0:	b590      	push	{r4, r7, lr}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af02      	add	r7, sp, #8
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	460b      	mov	r3, r1
 80075ca:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80075d4:	681c      	ldr	r4, [r3, #0]
 80075d6:	78fb      	ldrb	r3, [r7, #3]
 80075d8:	2200      	movs	r2, #0
 80075da:	9201      	str	r2, [sp, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	9200      	str	r2, [sp, #0]
 80075e0:	2204      	movs	r2, #4
 80075e2:	490c      	ldr	r1, [pc, #48]	; (8007614 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a09      	ldr	r2, [pc, #36]	; (8007618 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 80075f4:	4907      	ldr	r1, [pc, #28]	; (8007614 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a05      	ldr	r2, [pc, #20]	; (800761c <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 8007606:	4904      	ldr	r1, [pc, #16]	; (8007618 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	4798      	blx	r3
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	bd90      	pop	{r4, r7, pc}
 8007614:	20000230 	.word	0x20000230
 8007618:	20000250 	.word	0x20000250
 800761c:	20000258 	.word	0x20000258

08007620 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8007620:	b590      	push	{r4, r7, lr}
 8007622:	b087      	sub	sp, #28
 8007624:	af02      	add	r7, sp, #8
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	460b      	mov	r3, r1
 800762a:	607a      	str	r2, [r7, #4]
 800762c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007636:	681c      	ldr	r4, [r3, #0]
 8007638:	7afa      	ldrb	r2, [r7, #11]
 800763a:	2300      	movs	r3, #0
 800763c:	9301      	str	r3, [sp, #4]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	4613      	mov	r3, r2
 8007644:	2205      	movs	r2, #5
 8007646:	490c      	ldr	r1, [pc, #48]	; (8007678 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a09      	ldr	r2, [pc, #36]	; (800767c <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8007658:	4907      	ldr	r1, [pc, #28]	; (8007678 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a05      	ldr	r2, [pc, #20]	; (8007680 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 800766a:	4904      	ldr	r1, [pc, #16]	; (800767c <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	4798      	blx	r3
}
 8007670:	bf00      	nop
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	bd90      	pop	{r4, r7, pc}
 8007678:	20000230 	.word	0x20000230
 800767c:	20000250 	.word	0x20000250
 8007680:	20000258 	.word	0x20000258

08007684 <_ZN5L6470I8shield_2E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 8007684:	b590      	push	{r4, r7, lr}
 8007686:	b085      	sub	sp, #20
 8007688:	af02      	add	r7, sp, #8
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007694:	d21f      	bcs.n	80076d6 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800769e:	681c      	ldr	r4, [r3, #0]
 80076a0:	2300      	movs	r3, #0
 80076a2:	9301      	str	r3, [sp, #4]
 80076a4:	2300      	movs	r3, #0
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	2206      	movs	r2, #6
 80076ac:	490c      	ldr	r1, [pc, #48]	; (80076e0 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x5c>)
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a09      	ldr	r2, [pc, #36]	; (80076e4 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x60>)
 80076be:	4908      	ldr	r1, [pc, #32]	; (80076e0 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x5c>)
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a06      	ldr	r2, [pc, #24]	; (80076e8 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x64>)
 80076d0:	4904      	ldr	r1, [pc, #16]	; (80076e4 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x60>)
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	4798      	blx	r3
}
 80076d6:	bf00      	nop
 80076d8:	370c      	adds	r7, #12
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd90      	pop	{r4, r7, pc}
 80076de:	bf00      	nop
 80076e0:	20000230 	.word	0x20000230
 80076e4:	20000250 	.word	0x20000250
 80076e8:	20000258 	.word	0x20000258

080076ec <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 80076ec:	b590      	push	{r4, r7, lr}
 80076ee:	b087      	sub	sp, #28
 80076f0:	af02      	add	r7, sp, #8
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	460b      	mov	r3, r1
 80076f6:	607a      	str	r2, [r7, #4]
 80076f8:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007700:	d220      	bcs.n	8007744 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800770a:	681c      	ldr	r4, [r3, #0]
 800770c:	7afa      	ldrb	r2, [r7, #11]
 800770e:	2300      	movs	r3, #0
 8007710:	9301      	str	r3, [sp, #4]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	9300      	str	r3, [sp, #0]
 8007716:	4613      	mov	r3, r2
 8007718:	2207      	movs	r2, #7
 800771a:	490c      	ldr	r1, [pc, #48]	; (800774c <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a09      	ldr	r2, [pc, #36]	; (8007750 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 800772c:	4907      	ldr	r1, [pc, #28]	; (800774c <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a05      	ldr	r2, [pc, #20]	; (8007754 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 800773e:	4904      	ldr	r1, [pc, #16]	; (8007750 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	4798      	blx	r3
}
 8007744:	bf00      	nop
 8007746:	3714      	adds	r7, #20
 8007748:	46bd      	mov	sp, r7
 800774a:	bd90      	pop	{r4, r7, pc}
 800774c:	20000230 	.word	0x20000230
 8007750:	20000250 	.word	0x20000250
 8007754:	20000258 	.word	0x20000258

08007758 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8007758:	b590      	push	{r4, r7, lr}
 800775a:	b087      	sub	sp, #28
 800775c:	af02      	add	r7, sp, #8
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	607b      	str	r3, [r7, #4]
 8007762:	460b      	mov	r3, r1
 8007764:	72fb      	strb	r3, [r7, #11]
 8007766:	4613      	mov	r3, r2
 8007768:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007772:	681c      	ldr	r4, [r3, #0]
 8007774:	7af9      	ldrb	r1, [r7, #11]
 8007776:	7abb      	ldrb	r3, [r7, #10]
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	9201      	str	r2, [sp, #4]
 800777c:	9300      	str	r3, [sp, #0]
 800777e:	460b      	mov	r3, r1
 8007780:	2208      	movs	r2, #8
 8007782:	490c      	ldr	r1, [pc, #48]	; (80077b4 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a09      	ldr	r2, [pc, #36]	; (80077b8 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8007794:	4907      	ldr	r1, [pc, #28]	; (80077b4 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a05      	ldr	r2, [pc, #20]	; (80077bc <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 80077a6:	4904      	ldr	r1, [pc, #16]	; (80077b8 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	4798      	blx	r3
}
 80077ac:	bf00      	nop
 80077ae:	3714      	adds	r7, #20
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd90      	pop	{r4, r7, pc}
 80077b4:	20000230 	.word	0x20000230
 80077b8:	20000250 	.word	0x20000250
 80077bc:	20000258 	.word	0x20000258

080077c0 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 80077c0:	b590      	push	{r4, r7, lr}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af02      	add	r7, sp, #8
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	460b      	mov	r3, r1
 80077ca:	70fb      	strb	r3, [r7, #3]
 80077cc:	4613      	mov	r3, r2
 80077ce:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80077d8:	681c      	ldr	r4, [r3, #0]
 80077da:	78fa      	ldrb	r2, [r7, #3]
 80077dc:	78bb      	ldrb	r3, [r7, #2]
 80077de:	2100      	movs	r1, #0
 80077e0:	9101      	str	r1, [sp, #4]
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	4613      	mov	r3, r2
 80077e6:	2209      	movs	r2, #9
 80077e8:	490c      	ldr	r1, [pc, #48]	; (800781c <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a09      	ldr	r2, [pc, #36]	; (8007820 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 80077fa:	4908      	ldr	r1, [pc, #32]	; (800781c <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a06      	ldr	r2, [pc, #24]	; (8007824 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 800780c:	4904      	ldr	r1, [pc, #16]	; (8007820 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	4798      	blx	r3
}
 8007812:	bf00      	nop
 8007814:	370c      	adds	r7, #12
 8007816:	46bd      	mov	sp, r7
 8007818:	bd90      	pop	{r4, r7, pc}
 800781a:	bf00      	nop
 800781c:	20000230 	.word	0x20000230
 8007820:	20000250 	.word	0x20000250
 8007824:	20000258 	.word	0x20000258

08007828 <_ZN5L6470I8shield_2E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 8007828:	b590      	push	{r4, r7, lr}
 800782a:	b085      	sub	sp, #20
 800782c:	af02      	add	r7, sp, #8
 800782e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007838:	681c      	ldr	r4, [r3, #0]
 800783a:	2300      	movs	r3, #0
 800783c:	9301      	str	r3, [sp, #4]
 800783e:	2300      	movs	r3, #0
 8007840:	9300      	str	r3, [sp, #0]
 8007842:	2300      	movs	r3, #0
 8007844:	220a      	movs	r2, #10
 8007846:	490c      	ldr	r1, [pc, #48]	; (8007878 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x50>)
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a09      	ldr	r2, [pc, #36]	; (800787c <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x54>)
 8007858:	4907      	ldr	r1, [pc, #28]	; (8007878 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x50>)
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a05      	ldr	r2, [pc, #20]	; (8007880 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x58>)
 800786a:	4904      	ldr	r1, [pc, #16]	; (800787c <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x54>)
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	4798      	blx	r3
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	bd90      	pop	{r4, r7, pc}
 8007878:	20000230 	.word	0x20000230
 800787c:	20000250 	.word	0x20000250
 8007880:	20000258 	.word	0x20000258

08007884 <_ZN5L6470I8shield_2E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 8007884:	b590      	push	{r4, r7, lr}
 8007886:	b085      	sub	sp, #20
 8007888:	af02      	add	r7, sp, #8
 800788a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007894:	681c      	ldr	r4, [r3, #0]
 8007896:	2300      	movs	r3, #0
 8007898:	9301      	str	r3, [sp, #4]
 800789a:	2300      	movs	r3, #0
 800789c:	9300      	str	r3, [sp, #0]
 800789e:	2300      	movs	r3, #0
 80078a0:	220b      	movs	r2, #11
 80078a2:	490c      	ldr	r1, [pc, #48]	; (80078d4 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x50>)
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a09      	ldr	r2, [pc, #36]	; (80078d8 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x54>)
 80078b4:	4907      	ldr	r1, [pc, #28]	; (80078d4 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x50>)
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a05      	ldr	r2, [pc, #20]	; (80078dc <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x58>)
 80078c6:	4904      	ldr	r1, [pc, #16]	; (80078d8 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x54>)
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	4798      	blx	r3
}
 80078cc:	bf00      	nop
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd90      	pop	{r4, r7, pc}
 80078d4:	20000230 	.word	0x20000230
 80078d8:	20000250 	.word	0x20000250
 80078dc:	20000258 	.word	0x20000258

080078e0 <_ZN5L6470I8shield_2E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 80078e0:	b590      	push	{r4, r7, lr}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af02      	add	r7, sp, #8
 80078e6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80078f0:	681c      	ldr	r4, [r3, #0]
 80078f2:	2300      	movs	r3, #0
 80078f4:	9301      	str	r3, [sp, #4]
 80078f6:	2300      	movs	r3, #0
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	2300      	movs	r3, #0
 80078fc:	220c      	movs	r2, #12
 80078fe:	490c      	ldr	r1, [pc, #48]	; (8007930 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x50>)
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a09      	ldr	r2, [pc, #36]	; (8007934 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x54>)
 8007910:	4907      	ldr	r1, [pc, #28]	; (8007930 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x50>)
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a05      	ldr	r2, [pc, #20]	; (8007938 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x58>)
 8007922:	4904      	ldr	r1, [pc, #16]	; (8007934 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x54>)
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	4798      	blx	r3
}
 8007928:	bf00      	nop
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	bd90      	pop	{r4, r7, pc}
 8007930:	20000230 	.word	0x20000230
 8007934:	20000250 	.word	0x20000250
 8007938:	20000258 	.word	0x20000258

0800793c <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 800793c:	b590      	push	{r4, r7, lr}
 800793e:	b085      	sub	sp, #20
 8007940:	af02      	add	r7, sp, #8
 8007942:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800794c:	681c      	ldr	r4, [r3, #0]
 800794e:	2300      	movs	r3, #0
 8007950:	9301      	str	r3, [sp, #4]
 8007952:	2300      	movs	r3, #0
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	2300      	movs	r3, #0
 8007958:	220d      	movs	r2, #13
 800795a:	490c      	ldr	r1, [pc, #48]	; (800798c <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x50>)
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a09      	ldr	r2, [pc, #36]	; (8007990 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x54>)
 800796c:	4907      	ldr	r1, [pc, #28]	; (800798c <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x50>)
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a05      	ldr	r2, [pc, #20]	; (8007994 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x58>)
 800797e:	4904      	ldr	r1, [pc, #16]	; (8007990 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x54>)
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	4798      	blx	r3
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	bd90      	pop	{r4, r7, pc}
 800798c:	20000230 	.word	0x20000230
 8007990:	20000250 	.word	0x20000250
 8007994:	20000258 	.word	0x20000258

08007998 <_ZN5L6470I8shield_2E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 8007998:	b590      	push	{r4, r7, lr}
 800799a:	b085      	sub	sp, #20
 800799c:	af02      	add	r7, sp, #8
 800799e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80079a8:	681c      	ldr	r4, [r3, #0]
 80079aa:	2300      	movs	r3, #0
 80079ac:	9301      	str	r3, [sp, #4]
 80079ae:	2300      	movs	r3, #0
 80079b0:	9300      	str	r3, [sp, #0]
 80079b2:	2300      	movs	r3, #0
 80079b4:	220e      	movs	r2, #14
 80079b6:	490c      	ldr	r1, [pc, #48]	; (80079e8 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x50>)
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a09      	ldr	r2, [pc, #36]	; (80079ec <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x54>)
 80079c8:	4907      	ldr	r1, [pc, #28]	; (80079e8 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x50>)
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a05      	ldr	r2, [pc, #20]	; (80079f0 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x58>)
 80079da:	4904      	ldr	r1, [pc, #16]	; (80079ec <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x54>)
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	4798      	blx	r3
}
 80079e0:	bf00      	nop
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd90      	pop	{r4, r7, pc}
 80079e8:	20000230 	.word	0x20000230
 80079ec:	20000250 	.word	0x20000250
 80079f0:	20000258 	.word	0x20000258

080079f4 <_ZN5L6470I8shield_2E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 80079f4:	b590      	push	{r4, r7, lr}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af02      	add	r7, sp, #8
 80079fa:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007a04:	681c      	ldr	r4, [r3, #0]
 8007a06:	2300      	movs	r3, #0
 8007a08:	9301      	str	r3, [sp, #4]
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	9300      	str	r3, [sp, #0]
 8007a0e:	2300      	movs	r3, #0
 8007a10:	220f      	movs	r2, #15
 8007a12:	490c      	ldr	r1, [pc, #48]	; (8007a44 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x50>)
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a09      	ldr	r2, [pc, #36]	; (8007a48 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x54>)
 8007a24:	4907      	ldr	r1, [pc, #28]	; (8007a44 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x50>)
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a05      	ldr	r2, [pc, #20]	; (8007a4c <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x58>)
 8007a36:	4904      	ldr	r1, [pc, #16]	; (8007a48 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x54>)
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	4798      	blx	r3
}
 8007a3c:	bf00      	nop
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd90      	pop	{r4, r7, pc}
 8007a44:	20000230 	.word	0x20000230
 8007a48:	20000250 	.word	0x20000250
 8007a4c:	20000258 	.word	0x20000258

08007a50 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 8007a50:	b590      	push	{r4, r7, lr}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af02      	add	r7, sp, #8
 8007a56:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007a60:	681c      	ldr	r4, [r3, #0]
 8007a62:	2300      	movs	r3, #0
 8007a64:	9301      	str	r3, [sp, #4]
 8007a66:	2300      	movs	r3, #0
 8007a68:	9300      	str	r3, [sp, #0]
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	2210      	movs	r2, #16
 8007a6e:	490c      	ldr	r1, [pc, #48]	; (8007aa0 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x50>)
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a09      	ldr	r2, [pc, #36]	; (8007aa4 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x54>)
 8007a80:	4907      	ldr	r1, [pc, #28]	; (8007aa0 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x50>)
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a05      	ldr	r2, [pc, #20]	; (8007aa8 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x58>)
 8007a92:	4904      	ldr	r1, [pc, #16]	; (8007aa4 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x54>)
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	4798      	blx	r3
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd90      	pop	{r4, r7, pc}
 8007aa0:	20000230 	.word	0x20000230
 8007aa4:	20000250 	.word	0x20000250
 8007aa8:	20000258 	.word	0x20000258

08007aac <_ZN5L6470I8shield_2E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 8007aac:	b590      	push	{r4, r7, lr}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af02      	add	r7, sp, #8
 8007ab2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007abc:	681c      	ldr	r4, [r3, #0]
 8007abe:	2300      	movs	r3, #0
 8007ac0:	9301      	str	r3, [sp, #4]
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	9300      	str	r3, [sp, #0]
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	2211      	movs	r2, #17
 8007aca:	490c      	ldr	r1, [pc, #48]	; (8007afc <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x50>)
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a09      	ldr	r2, [pc, #36]	; (8007b00 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x54>)
 8007adc:	4907      	ldr	r1, [pc, #28]	; (8007afc <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x50>)
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a05      	ldr	r2, [pc, #20]	; (8007b04 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x58>)
 8007aee:	4904      	ldr	r1, [pc, #16]	; (8007b00 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x54>)
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	4798      	blx	r3
}
 8007af4:	bf00      	nop
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd90      	pop	{r4, r7, pc}
 8007afc:	20000230 	.word	0x20000230
 8007b00:	20000250 	.word	0x20000250
 8007b04:	20000258 	.word	0x20000258

08007b08 <_ZN5L6470I8shield_2E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 8007b08:	b590      	push	{r4, r7, lr}
 8007b0a:	b087      	sub	sp, #28
 8007b0c:	af02      	add	r7, sp, #8
 8007b0e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007b18:	681c      	ldr	r4, [r3, #0]
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	9301      	str	r3, [sp, #4]
 8007b1e:	2300      	movs	r3, #0
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	2300      	movs	r3, #0
 8007b24:	2212      	movs	r2, #18
 8007b26:	4912      	ldr	r1, [pc, #72]	; (8007b70 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x68>)
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a0f      	ldr	r2, [pc, #60]	; (8007b74 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x6c>)
 8007b38:	490d      	ldr	r1, [pc, #52]	; (8007b70 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x68>)
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a0b      	ldr	r2, [pc, #44]	; (8007b78 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x70>)
 8007b4a:	490a      	ldr	r1, [pc, #40]	; (8007b74 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x6c>)
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2202      	movs	r2, #2
 8007b5c:	4906      	ldr	r1, [pc, #24]	; (8007b78 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x70>)
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	4798      	blx	r3
 8007b62:	4603      	mov	r3, r0
 8007b64:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 8007b66:	89fb      	ldrh	r3, [r7, #14]
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3714      	adds	r7, #20
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd90      	pop	{r4, r7, pc}
 8007b70:	20000230 	.word	0x20000230
 8007b74:	20000250 	.word	0x20000250
 8007b78:	20000258 	.word	0x20000258

08007b7c <_ZN5L6470I8shield_2E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 8007b7c:	b590      	push	{r4, r7, lr}
 8007b7e:	b087      	sub	sp, #28
 8007b80:	af02      	add	r7, sp, #8
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	460b      	mov	r3, r1
 8007b86:	607a      	str	r2, [r7, #4]
 8007b88:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007b92:	681c      	ldr	r4, [r3, #0]
 8007b94:	7afa      	ldrb	r2, [r7, #11]
 8007b96:	2300      	movs	r3, #0
 8007b98:	9301      	str	r3, [sp, #4]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	9300      	str	r3, [sp, #0]
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	4903      	ldr	r1, [pc, #12]	; (8007bb0 <_ZN5L6470I8shield_2E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	47a0      	blx	r4
}
 8007ba8:	bf00      	nop
 8007baa:	3714      	adds	r7, #20
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd90      	pop	{r4, r7, pc}
 8007bb0:	20000230 	.word	0x20000230

08007bb4 <_ZN5L6470I8shield_2E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 8007bb4:	b590      	push	{r4, r7, lr}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af02      	add	r7, sp, #8
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007bc8:	681c      	ldr	r4, [r3, #0]
 8007bca:	78fb      	ldrb	r3, [r7, #3]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	9201      	str	r2, [sp, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	9200      	str	r2, [sp, #0]
 8007bd4:	2202      	movs	r2, #2
 8007bd6:	4903      	ldr	r1, [pc, #12]	; (8007be4 <_ZN5L6470I8shield_2E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	47a0      	blx	r4
}
 8007bdc:	bf00      	nop
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd90      	pop	{r4, r7, pc}
 8007be4:	20000230 	.word	0x20000230

08007be8 <_ZN5L6470I8shield_2E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8007be8:	b590      	push	{r4, r7, lr}
 8007bea:	b087      	sub	sp, #28
 8007bec:	af02      	add	r7, sp, #8
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	607a      	str	r2, [r7, #4]
 8007bf4:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007bfe:	681c      	ldr	r4, [r3, #0]
 8007c00:	7afa      	ldrb	r2, [r7, #11]
 8007c02:	2300      	movs	r3, #0
 8007c04:	9301      	str	r3, [sp, #4]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	2203      	movs	r2, #3
 8007c0e:	4903      	ldr	r1, [pc, #12]	; (8007c1c <_ZN5L6470I8shield_2E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	47a0      	blx	r4
}
 8007c14:	bf00      	nop
 8007c16:	3714      	adds	r7, #20
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd90      	pop	{r4, r7, pc}
 8007c1c:	20000230 	.word	0x20000230

08007c20 <_ZN5L6470I8shield_2E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 8007c20:	b590      	push	{r4, r7, lr}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af02      	add	r7, sp, #8
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	460b      	mov	r3, r1
 8007c2a:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007c34:	681c      	ldr	r4, [r3, #0]
 8007c36:	78fb      	ldrb	r3, [r7, #3]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	9201      	str	r2, [sp, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	9200      	str	r2, [sp, #0]
 8007c40:	2204      	movs	r2, #4
 8007c42:	4903      	ldr	r1, [pc, #12]	; (8007c50 <_ZN5L6470I8shield_2E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	47a0      	blx	r4
}
 8007c48:	bf00      	nop
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd90      	pop	{r4, r7, pc}
 8007c50:	20000230 	.word	0x20000230

08007c54 <_ZN5L6470I8shield_2E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8007c54:	b590      	push	{r4, r7, lr}
 8007c56:	b087      	sub	sp, #28
 8007c58:	af02      	add	r7, sp, #8
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	607a      	str	r2, [r7, #4]
 8007c60:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007c6a:	681c      	ldr	r4, [r3, #0]
 8007c6c:	7afa      	ldrb	r2, [r7, #11]
 8007c6e:	2300      	movs	r3, #0
 8007c70:	9301      	str	r3, [sp, #4]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	4613      	mov	r3, r2
 8007c78:	2205      	movs	r2, #5
 8007c7a:	4903      	ldr	r1, [pc, #12]	; (8007c88 <_ZN5L6470I8shield_2E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	47a0      	blx	r4
}
 8007c80:	bf00      	nop
 8007c82:	3714      	adds	r7, #20
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd90      	pop	{r4, r7, pc}
 8007c88:	20000230 	.word	0x20000230

08007c8c <_ZN5L6470I8shield_2E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 8007c8c:	b590      	push	{r4, r7, lr}
 8007c8e:	b085      	sub	sp, #20
 8007c90:	af02      	add	r7, sp, #8
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007c9e:	681c      	ldr	r4, [r3, #0]
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	9301      	str	r3, [sp, #4]
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	9300      	str	r3, [sp, #0]
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	2206      	movs	r2, #6
 8007cac:	4903      	ldr	r1, [pc, #12]	; (8007cbc <_ZN5L6470I8shield_2E17L6470_PrepareGoToEm+0x30>)
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	47a0      	blx	r4
}
 8007cb2:	bf00      	nop
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd90      	pop	{r4, r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	20000230 	.word	0x20000230

08007cc0 <_ZN5L6470I8shield_2E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 8007cc0:	b590      	push	{r4, r7, lr}
 8007cc2:	b087      	sub	sp, #28
 8007cc4:	af02      	add	r7, sp, #8
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	607a      	str	r2, [r7, #4]
 8007ccc:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007cd6:	681c      	ldr	r4, [r3, #0]
 8007cd8:	7afa      	ldrb	r2, [r7, #11]
 8007cda:	2300      	movs	r3, #0
 8007cdc:	9301      	str	r3, [sp, #4]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	9300      	str	r3, [sp, #0]
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	2207      	movs	r2, #7
 8007ce6:	4903      	ldr	r1, [pc, #12]	; (8007cf4 <_ZN5L6470I8shield_2E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	47a0      	blx	r4
}
 8007cec:	bf00      	nop
 8007cee:	3714      	adds	r7, #20
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd90      	pop	{r4, r7, pc}
 8007cf4:	20000230 	.word	0x20000230

08007cf8 <_ZN5L6470I8shield_2E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8007cf8:	b590      	push	{r4, r7, lr}
 8007cfa:	b087      	sub	sp, #28
 8007cfc:	af02      	add	r7, sp, #8
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	607b      	str	r3, [r7, #4]
 8007d02:	460b      	mov	r3, r1
 8007d04:	72fb      	strb	r3, [r7, #11]
 8007d06:	4613      	mov	r3, r2
 8007d08:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007d12:	681c      	ldr	r4, [r3, #0]
 8007d14:	7af9      	ldrb	r1, [r7, #11]
 8007d16:	7abb      	ldrb	r3, [r7, #10]
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	9201      	str	r2, [sp, #4]
 8007d1c:	9300      	str	r3, [sp, #0]
 8007d1e:	460b      	mov	r3, r1
 8007d20:	2208      	movs	r2, #8
 8007d22:	4903      	ldr	r1, [pc, #12]	; (8007d30 <_ZN5L6470I8shield_2E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 8007d24:	68f8      	ldr	r0, [r7, #12]
 8007d26:	47a0      	blx	r4
}
 8007d28:	bf00      	nop
 8007d2a:	3714      	adds	r7, #20
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd90      	pop	{r4, r7, pc}
 8007d30:	20000230 	.word	0x20000230

08007d34 <_ZN5L6470I8shield_2E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8007d34:	b590      	push	{r4, r7, lr}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af02      	add	r7, sp, #8
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	70fb      	strb	r3, [r7, #3]
 8007d40:	4613      	mov	r3, r2
 8007d42:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007d4c:	681c      	ldr	r4, [r3, #0]
 8007d4e:	78fa      	ldrb	r2, [r7, #3]
 8007d50:	78bb      	ldrb	r3, [r7, #2]
 8007d52:	2100      	movs	r1, #0
 8007d54:	9101      	str	r1, [sp, #4]
 8007d56:	9300      	str	r3, [sp, #0]
 8007d58:	4613      	mov	r3, r2
 8007d5a:	2209      	movs	r2, #9
 8007d5c:	4903      	ldr	r1, [pc, #12]	; (8007d6c <_ZN5L6470I8shield_2E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	47a0      	blx	r4
}
 8007d62:	bf00      	nop
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd90      	pop	{r4, r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	20000230 	.word	0x20000230

08007d70 <_ZN5L6470I8shield_2E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 8007d70:	b590      	push	{r4, r7, lr}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af02      	add	r7, sp, #8
 8007d76:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007d80:	681c      	ldr	r4, [r3, #0]
 8007d82:	2300      	movs	r3, #0
 8007d84:	9301      	str	r3, [sp, #4]
 8007d86:	2300      	movs	r3, #0
 8007d88:	9300      	str	r3, [sp, #0]
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	220a      	movs	r2, #10
 8007d8e:	4903      	ldr	r1, [pc, #12]	; (8007d9c <_ZN5L6470I8shield_2E19L6470_PrepareGoHomeEv+0x2c>)
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	47a0      	blx	r4
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd90      	pop	{r4, r7, pc}
 8007d9c:	20000230 	.word	0x20000230

08007da0 <_ZN5L6470I8shield_2E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 8007da0:	b590      	push	{r4, r7, lr}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af02      	add	r7, sp, #8
 8007da6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007db0:	681c      	ldr	r4, [r3, #0]
 8007db2:	2300      	movs	r3, #0
 8007db4:	9301      	str	r3, [sp, #4]
 8007db6:	2300      	movs	r3, #0
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	2300      	movs	r3, #0
 8007dbc:	220b      	movs	r2, #11
 8007dbe:	4903      	ldr	r1, [pc, #12]	; (8007dcc <_ZN5L6470I8shield_2E19L6470_PrepareGoMarkEv+0x2c>)
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	47a0      	blx	r4
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd90      	pop	{r4, r7, pc}
 8007dcc:	20000230 	.word	0x20000230

08007dd0 <_ZN5L6470I8shield_2E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 8007dd0:	b590      	push	{r4, r7, lr}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af02      	add	r7, sp, #8
 8007dd6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007de0:	681c      	ldr	r4, [r3, #0]
 8007de2:	2300      	movs	r3, #0
 8007de4:	9301      	str	r3, [sp, #4]
 8007de6:	2300      	movs	r3, #0
 8007de8:	9300      	str	r3, [sp, #0]
 8007dea:	2300      	movs	r3, #0
 8007dec:	220c      	movs	r2, #12
 8007dee:	4903      	ldr	r1, [pc, #12]	; (8007dfc <_ZN5L6470I8shield_2E21L6470_PrepareResetPosEv+0x2c>)
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	47a0      	blx	r4
}
 8007df4:	bf00      	nop
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd90      	pop	{r4, r7, pc}
 8007dfc:	20000230 	.word	0x20000230

08007e00 <_ZN5L6470I8shield_2E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 8007e00:	b590      	push	{r4, r7, lr}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af02      	add	r7, sp, #8
 8007e06:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007e10:	681c      	ldr	r4, [r3, #0]
 8007e12:	2300      	movs	r3, #0
 8007e14:	9301      	str	r3, [sp, #4]
 8007e16:	2300      	movs	r3, #0
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	220d      	movs	r2, #13
 8007e1e:	4903      	ldr	r1, [pc, #12]	; (8007e2c <_ZN5L6470I8shield_2E24L6470_PrepareResetDeviceEv+0x2c>)
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	47a0      	blx	r4
}
 8007e24:	bf00      	nop
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd90      	pop	{r4, r7, pc}
 8007e2c:	20000230 	.word	0x20000230

08007e30 <_ZN5L6470I8shield_2E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 8007e30:	b590      	push	{r4, r7, lr}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af02      	add	r7, sp, #8
 8007e36:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007e40:	681c      	ldr	r4, [r3, #0]
 8007e42:	2300      	movs	r3, #0
 8007e44:	9301      	str	r3, [sp, #4]
 8007e46:	2300      	movs	r3, #0
 8007e48:	9300      	str	r3, [sp, #0]
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	220e      	movs	r2, #14
 8007e4e:	4903      	ldr	r1, [pc, #12]	; (8007e5c <_ZN5L6470I8shield_2E21L6470_PrepareSoftStopEv+0x2c>)
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	47a0      	blx	r4
}
 8007e54:	bf00      	nop
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd90      	pop	{r4, r7, pc}
 8007e5c:	20000230 	.word	0x20000230

08007e60 <_ZN5L6470I8shield_2E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 8007e60:	b590      	push	{r4, r7, lr}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af02      	add	r7, sp, #8
 8007e66:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007e70:	681c      	ldr	r4, [r3, #0]
 8007e72:	2300      	movs	r3, #0
 8007e74:	9301      	str	r3, [sp, #4]
 8007e76:	2300      	movs	r3, #0
 8007e78:	9300      	str	r3, [sp, #0]
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	220f      	movs	r2, #15
 8007e7e:	4903      	ldr	r1, [pc, #12]	; (8007e8c <_ZN5L6470I8shield_2E21L6470_PrepareHardStopEv+0x2c>)
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	47a0      	blx	r4
}
 8007e84:	bf00      	nop
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd90      	pop	{r4, r7, pc}
 8007e8c:	20000230 	.word	0x20000230

08007e90 <_ZN5L6470I8shield_2E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 8007e90:	b590      	push	{r4, r7, lr}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af02      	add	r7, sp, #8
 8007e96:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007ea0:	681c      	ldr	r4, [r3, #0]
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	9301      	str	r3, [sp, #4]
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	9300      	str	r3, [sp, #0]
 8007eaa:	2300      	movs	r3, #0
 8007eac:	2210      	movs	r2, #16
 8007eae:	4903      	ldr	r1, [pc, #12]	; (8007ebc <_ZN5L6470I8shield_2E20L6470_PrepareSoftHiZEv+0x2c>)
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	47a0      	blx	r4
}
 8007eb4:	bf00      	nop
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd90      	pop	{r4, r7, pc}
 8007ebc:	20000230 	.word	0x20000230

08007ec0 <_ZN5L6470I8shield_2E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 8007ec0:	b590      	push	{r4, r7, lr}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af02      	add	r7, sp, #8
 8007ec6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007ed0:	681c      	ldr	r4, [r3, #0]
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	9301      	str	r3, [sp, #4]
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	2300      	movs	r3, #0
 8007edc:	2211      	movs	r2, #17
 8007ede:	4903      	ldr	r1, [pc, #12]	; (8007eec <_ZN5L6470I8shield_2E20L6470_PrepareHardHiZEv+0x2c>)
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	47a0      	blx	r4
}
 8007ee4:	bf00      	nop
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd90      	pop	{r4, r7, pc}
 8007eec:	20000230 	.word	0x20000230

08007ef0 <_ZN5L6470I8shield_2E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 8007ef0:	b590      	push	{r4, r7, lr}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af02      	add	r7, sp, #8
 8007ef6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007f00:	681c      	ldr	r4, [r3, #0]
 8007f02:	2300      	movs	r3, #0
 8007f04:	9301      	str	r3, [sp, #4]
 8007f06:	2300      	movs	r3, #0
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	2212      	movs	r2, #18
 8007f0e:	4903      	ldr	r1, [pc, #12]	; (8007f1c <_ZN5L6470I8shield_2E22L6470_PrepareGetStatusEv+0x2c>)
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	47a0      	blx	r4
}
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd90      	pop	{r4, r7, pc}
 8007f1c:	20000230 	.word	0x20000230

08007f20 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a09      	ldr	r2, [pc, #36]	; (8007f58 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 8007f34:	4909      	ldr	r1, [pc, #36]	; (8007f5c <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a06      	ldr	r2, [pc, #24]	; (8007f60 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 8007f46:	4904      	ldr	r1, [pc, #16]	; (8007f58 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 8007f4c:	4b04      	ldr	r3, [pc, #16]	; (8007f60 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3708      	adds	r7, #8
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	20000250 	.word	0x20000250
 8007f5c:	20000230 	.word	0x20000230
 8007f60:	20000258 	.word	0x20000258

08007f64 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 8007f64:	b590      	push	{r4, r7, lr}
 8007f66:	b089      	sub	sp, #36	; 0x24
 8007f68:	af02      	add	r7, sp, #8
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 8007f70:	4b17      	ldr	r3, [pc, #92]	; (8007fd0 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 8007f72:	2200      	movs	r2, #0
 8007f74:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8007f76:	2300      	movs	r3, #0
 8007f78:	75fb      	strb	r3, [r7, #23]
 8007f7a:	e020      	b.n	8007fbe <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8007f84:	681c      	ldr	r4, [r3, #0]
 8007f86:	7dfb      	ldrb	r3, [r7, #23]
 8007f88:	005b      	lsls	r3, r3, #1
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	1899      	adds	r1, r3, r2
 8007f90:	7dfb      	ldrb	r3, [r7, #23]
 8007f92:	005b      	lsls	r3, r3, #1
 8007f94:	461a      	mov	r2, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	441a      	add	r2, r3
 8007f9a:	230a      	movs	r3, #10
 8007f9c:	9300      	str	r3, [sp, #0]
 8007f9e:	2302      	movs	r3, #2
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	75bb      	strb	r3, [r7, #22]
 8007fa8:	e003      	b.n	8007fb2 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x4e>
 8007faa:	bf00      	nop
 8007fac:	7dbb      	ldrb	r3, [r7, #22]
 8007fae:	3301      	adds	r3, #1
 8007fb0:	75bb      	strb	r3, [r7, #22]
 8007fb2:	7dbb      	ldrb	r3, [r7, #22]
 8007fb4:	2b7c      	cmp	r3, #124	; 0x7c
 8007fb6:	d9f8      	bls.n	8007faa <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8007fb8:	7dfb      	ldrb	r3, [r7, #23]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	75fb      	strb	r3, [r7, #23]
 8007fbe:	7dfb      	ldrb	r3, [r7, #23]
 8007fc0:	2b03      	cmp	r3, #3
 8007fc2:	d9db      	bls.n	8007f7c <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 8007fc4:	bf00      	nop
}
 8007fc6:	bf00      	nop
 8007fc8:	371c      	adds	r7, #28
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd90      	pop	{r4, r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	2000022d 	.word	0x2000022d

08007fd4 <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 8007fd4:	b480      	push	{r7}
 8007fd6:	b087      	sub	sp, #28
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	4613      	mov	r3, r2
 8007fe0:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	74fb      	strb	r3, [r7, #19]
 8007fea:	e016      	b.n	800801a <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 8007fec:	7cfb      	ldrb	r3, [r7, #19]
 8007fee:	005b      	lsls	r3, r3, #1
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	7f1b      	ldrb	r3, [r3, #28]
 8007ff6:	4413      	add	r3, r2
 8007ff8:	68ba      	ldr	r2, [r7, #8]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	4619      	mov	r1, r3
 8008000:	79fa      	ldrb	r2, [r7, #7]
 8008002:	7cfb      	ldrb	r3, [r7, #19]
 8008004:	1ad3      	subs	r3, r2, r3
 8008006:	00db      	lsls	r3, r3, #3
 8008008:	fa01 f303 	lsl.w	r3, r1, r3
 800800c:	461a      	mov	r2, r3
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	4313      	orrs	r3, r2
 8008012:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8008014:	7cfb      	ldrb	r3, [r7, #19]
 8008016:	3301      	adds	r3, #1
 8008018:	74fb      	strb	r3, [r7, #19]
 800801a:	7cfb      	ldrb	r3, [r7, #19]
 800801c:	2b03      	cmp	r3, #3
 800801e:	d9e5      	bls.n	8007fec <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 8008020:	697b      	ldr	r3, [r7, #20]
}
 8008022:	4618      	mov	r0, r3
 8008024:	371c      	adds	r7, #28
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
	...

08008030 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	460b      	mov	r3, r1
 800803a:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 800803c:	2300      	movs	r3, #0
 800803e:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2118      	movs	r1, #24
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	4798      	blx	r3
 8008050:	4602      	mov	r2, r0
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008056:	b292      	uxth	r2, r2
 8008058:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 800805a:	78fb      	ldrb	r3, [r7, #3]
 800805c:	2b0e      	cmp	r3, #14
 800805e:	f200 8099 	bhi.w	8008194 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
 8008062:	a201      	add	r2, pc, #4	; (adr r2, 8008068 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x38>)
 8008064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008068:	080080a5 	.word	0x080080a5
 800806c:	080080b5 	.word	0x080080b5
 8008070:	080080c5 	.word	0x080080c5
 8008074:	080080d5 	.word	0x080080d5
 8008078:	080080e5 	.word	0x080080e5
 800807c:	080080f5 	.word	0x080080f5
 8008080:	08008105 	.word	0x08008105
 8008084:	08008115 	.word	0x08008115
 8008088:	08008125 	.word	0x08008125
 800808c:	08008135 	.word	0x08008135
 8008090:	08008145 	.word	0x08008145
 8008094:	08008155 	.word	0x08008155
 8008098:	08008165 	.word	0x08008165
 800809c:	08008175 	.word	0x08008175
 80080a0:	08008185 	.word	0x08008185
      state = pL6470_StatusRegister->HiZ;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	73fb      	strb	r3, [r7, #15]
      break;
 80080b2:	e06f      	b.n	8008194 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	73fb      	strb	r3, [r7, #15]
      break;
 80080c2:	e067      	b.n	8008194 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	73fb      	strb	r3, [r7, #15]
      break;
 80080d2:	e05f      	b.n	8008194 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	73fb      	strb	r3, [r7, #15]
      break;
 80080e2:	e057      	b.n	8008194 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	73fb      	strb	r3, [r7, #15]
      break;
 80080f2:	e04f      	b.n	8008194 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	f3c3 1341 	ubfx	r3, r3, #5, #2
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	73fb      	strb	r3, [r7, #15]
      break;
 8008102:	e047      	b.n	8008194 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800810e:	b2db      	uxtb	r3, r3
 8008110:	73fb      	strb	r3, [r7, #15]
      break;
 8008112:	e03f      	b.n	8008194 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008118:	785b      	ldrb	r3, [r3, #1]
 800811a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800811e:	b2db      	uxtb	r3, r3
 8008120:	73fb      	strb	r3, [r7, #15]
      break;
 8008122:	e037      	b.n	8008194 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008128:	785b      	ldrb	r3, [r3, #1]
 800812a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800812e:	b2db      	uxtb	r3, r3
 8008130:	73fb      	strb	r3, [r7, #15]
      break;
 8008132:	e02f      	b.n	8008194 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008138:	785b      	ldrb	r3, [r3, #1]
 800813a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800813e:	b2db      	uxtb	r3, r3
 8008140:	73fb      	strb	r3, [r7, #15]
      break;
 8008142:	e027      	b.n	8008194 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008148:	785b      	ldrb	r3, [r3, #1]
 800814a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800814e:	b2db      	uxtb	r3, r3
 8008150:	73fb      	strb	r3, [r7, #15]
      break;
 8008152:	e01f      	b.n	8008194 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008158:	785b      	ldrb	r3, [r3, #1]
 800815a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800815e:	b2db      	uxtb	r3, r3
 8008160:	73fb      	strb	r3, [r7, #15]
      break;
 8008162:	e017      	b.n	8008194 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008168:	785b      	ldrb	r3, [r3, #1]
 800816a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800816e:	b2db      	uxtb	r3, r3
 8008170:	73fb      	strb	r3, [r7, #15]
      break;
 8008172:	e00f      	b.n	8008194 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008178:	785b      	ldrb	r3, [r3, #1]
 800817a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800817e:	b2db      	uxtb	r3, r3
 8008180:	73fb      	strb	r3, [r7, #15]
      break;
 8008182:	e007      	b.n	8008194 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008188:	785b      	ldrb	r3, [r3, #1]
 800818a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800818e:	b2db      	uxtb	r3, r3
 8008190:	73fb      	strb	r3, [r7, #15]
      break;
 8008192:	bf00      	nop
  return state;
 8008194:	7bfb      	ldrb	r3, [r7, #15]
}
 8008196:	4618      	mov	r0, r3
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop

080081a0 <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	460b      	mov	r3, r1
 80081aa:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 80081ac:	78fb      	ldrb	r3, [r7, #3]
 80081ae:	2b18      	cmp	r3, #24
 80081b0:	d809      	bhi.n	80081c6 <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a19      	ldr	r1, [r3, #32]
 80081b6:	78fa      	ldrb	r2, [r7, #3]
 80081b8:	4613      	mov	r3, r2
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	4413      	add	r3, r2
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	440b      	add	r3, r1
 80081c2:	3301      	adds	r3, #1
 80081c4:	e000      	b.n	80081c8 <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 80081de:	2300      	movs	r3, #0
 80081e0:	73fb      	strb	r3, [r7, #15]
 80081e2:	e01a      	b.n	800821a <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80081e4:	7bfb      	ldrb	r3, [r7, #15]
 80081e6:	011b      	lsls	r3, r3, #4
 80081e8:	683a      	ldr	r2, [r7, #0]
 80081ea:	4413      	add	r3, r2
 80081ec:	2200      	movs	r2, #0
 80081ee:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 80081f0:	7bfb      	ldrb	r3, [r7, #15]
 80081f2:	011b      	lsls	r3, r3, #4
 80081f4:	683a      	ldr	r2, [r7, #0]
 80081f6:	4413      	add	r3, r2
 80081f8:	2200      	movs	r2, #0
 80081fa:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 80081fc:	7bfb      	ldrb	r3, [r7, #15]
 80081fe:	011b      	lsls	r3, r3, #4
 8008200:	683a      	ldr	r2, [r7, #0]
 8008202:	4413      	add	r3, r2
 8008204:	2200      	movs	r2, #0
 8008206:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 8008208:	7bfb      	ldrb	r3, [r7, #15]
 800820a:	011b      	lsls	r3, r3, #4
 800820c:	683a      	ldr	r2, [r7, #0]
 800820e:	4413      	add	r3, r2
 8008210:	2200      	movs	r2, #0
 8008212:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 8008214:	7bfb      	ldrb	r3, [r7, #15]
 8008216:	3301      	adds	r3, #1
 8008218:	73fb      	strb	r3, [r7, #15]
 800821a:	7bfb      	ldrb	r3, [r7, #15]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d9e1      	bls.n	80081e4 <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 8008220:	bf00      	nop
 8008222:	bf00      	nop
 8008224:	3714      	adds	r7, #20
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr

0800822e <_ZN5L6470I8shield_2E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 800822e:	b480      	push	{r7}
 8008230:	b085      	sub	sp, #20
 8008232:	af00      	add	r7, sp, #0
 8008234:	60f8      	str	r0, [r7, #12]
 8008236:	60b9      	str	r1, [r7, #8]
 8008238:	603b      	str	r3, [r7, #0]
 800823a:	4613      	mov	r3, r2
 800823c:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	7f1b      	ldrb	r3, [r3, #28]
 8008242:	011b      	lsls	r3, r3, #4
 8008244:	68ba      	ldr	r2, [r7, #8]
 8008246:	4413      	add	r3, r2
 8008248:	79fa      	ldrb	r2, [r7, #7]
 800824a:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	7f1b      	ldrb	r3, [r3, #28]
 8008250:	011b      	lsls	r3, r3, #4
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	4413      	add	r3, r2
 8008256:	683a      	ldr	r2, [r7, #0]
 8008258:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	7f1b      	ldrb	r3, [r3, #28]
 800825e:	011b      	lsls	r3, r3, #4
 8008260:	68ba      	ldr	r2, [r7, #8]
 8008262:	4413      	add	r3, r2
 8008264:	69ba      	ldr	r2, [r7, #24]
 8008266:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	7f1b      	ldrb	r3, [r3, #28]
 800826c:	011b      	lsls	r3, r3, #4
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	4413      	add	r3, r2
 8008272:	69fa      	ldr	r2, [r7, #28]
 8008274:	60da      	str	r2, [r3, #12]
}
 8008276:	bf00      	nop
 8008278:	3714      	adds	r7, #20
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
	...

08008284 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 8008284:	b590      	push	{r4, r7, lr}
 8008286:	b087      	sub	sp, #28
 8008288:	af02      	add	r7, sp, #8
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	603b      	str	r3, [r7, #0]
 8008290:	4613      	mov	r3, r2
 8008292:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 8008294:	4b10      	ldr	r3, [pc, #64]	; (80082d8 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d10a      	bne.n	80082b2 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800829c:	4b0e      	ldr	r3, [pc, #56]	; (80082d8 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 800829e:	2201      	movs	r2, #1
 80082a0:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	68b9      	ldr	r1, [r7, #8]
 80082ae:	68f8      	ldr	r0, [r7, #12]
 80082b0:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f503 7311 	add.w	r3, r3, #580	; 0x244
 80082ba:	681c      	ldr	r4, [r3, #0]
 80082bc:	79fa      	ldrb	r2, [r7, #7]
 80082be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c0:	9301      	str	r3, [sp, #4]
 80082c2:	6a3b      	ldr	r3, [r7, #32]
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	68b9      	ldr	r1, [r7, #8]
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	47a0      	blx	r4
}
 80082ce:	bf00      	nop
 80082d0:	3714      	adds	r7, #20
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd90      	pop	{r4, r7, pc}
 80082d6:	bf00      	nop
 80082d8:	2000022d 	.word	0x2000022d

080082dc <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 80082dc:	b480      	push	{r7}
 80082de:	b087      	sub	sp, #28
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 80082e8:	2300      	movs	r3, #0
 80082ea:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 80082ec:	2300      	movs	r3, #0
 80082ee:	75bb      	strb	r3, [r7, #22]
 80082f0:	e013      	b.n	800831a <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 80082f2:	2300      	movs	r3, #0
 80082f4:	75fb      	strb	r3, [r7, #23]
 80082f6:	e00a      	b.n	800830e <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 80082f8:	7d7b      	ldrb	r3, [r7, #21]
 80082fa:	1c5a      	adds	r2, r3, #1
 80082fc:	757a      	strb	r2, [r7, #21]
 80082fe:	461a      	mov	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4413      	add	r3, r2
 8008304:	2200      	movs	r2, #0
 8008306:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8008308:	7dfb      	ldrb	r3, [r7, #23]
 800830a:	3301      	adds	r3, #1
 800830c:	75fb      	strb	r3, [r7, #23]
 800830e:	7dfb      	ldrb	r3, [r7, #23]
 8008310:	2b01      	cmp	r3, #1
 8008312:	d9f1      	bls.n	80082f8 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8008314:	7dbb      	ldrb	r3, [r7, #22]
 8008316:	3301      	adds	r3, #1
 8008318:	75bb      	strb	r3, [r7, #22]
 800831a:	7dbb      	ldrb	r3, [r7, #22]
 800831c:	2b03      	cmp	r3, #3
 800831e:	d9e8      	bls.n	80082f2 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8008320:	2300      	movs	r3, #0
 8008322:	75fb      	strb	r3, [r7, #23]
 8008324:	e1f1      	b.n	800870a <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800832a:	7dfb      	ldrb	r3, [r7, #23]
 800832c:	011b      	lsls	r3, r3, #4
 800832e:	68b9      	ldr	r1, [r7, #8]
 8008330:	440b      	add	r3, r1
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	4619      	mov	r1, r3
 8008336:	460b      	mov	r3, r1
 8008338:	00db      	lsls	r3, r3, #3
 800833a:	1a5b      	subs	r3, r3, r1
 800833c:	005b      	lsls	r3, r3, #1
 800833e:	441a      	add	r2, r3
 8008340:	7dfb      	ldrb	r3, [r7, #23]
 8008342:	6879      	ldr	r1, [r7, #4]
 8008344:	440b      	add	r3, r1
 8008346:	7b12      	ldrb	r2, [r2, #12]
 8008348:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 800834a:	7dfb      	ldrb	r3, [r7, #23]
 800834c:	011b      	lsls	r3, r3, #4
 800834e:	68ba      	ldr	r2, [r7, #8]
 8008350:	4413      	add	r3, r2
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	2b12      	cmp	r3, #18
 8008356:	f200 81d5 	bhi.w	8008704 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 800835a:	a201      	add	r2, pc, #4	; (adr r2, 8008360 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 800835c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008360:	08008705 	.word	0x08008705
 8008364:	080083ad 	.word	0x080083ad
 8008368:	08008435 	.word	0x08008435
 800836c:	08008465 	.word	0x08008465
 8008370:	080084cd 	.word	0x080084cd
 8008374:	080084fb 	.word	0x080084fb
 8008378:	08008563 	.word	0x08008563
 800837c:	0800859f 	.word	0x0800859f
 8008380:	08008607 	.word	0x08008607
 8008384:	080086a3 	.word	0x080086a3
 8008388:	08008705 	.word	0x08008705
 800838c:	08008705 	.word	0x08008705
 8008390:	08008705 	.word	0x08008705
 8008394:	08008705 	.word	0x08008705
 8008398:	08008705 	.word	0x08008705
 800839c:	08008705 	.word	0x08008705
 80083a0:	08008705 	.word	0x08008705
 80083a4:	08008705 	.word	0x08008705
 80083a8:	08008705 	.word	0x08008705
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 80083ac:	7dfb      	ldrb	r3, [r7, #23]
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	4413      	add	r3, r2
 80083b2:	7819      	ldrb	r1, [r3, #0]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6a18      	ldr	r0, [r3, #32]
 80083b8:	7dfb      	ldrb	r3, [r7, #23]
 80083ba:	011b      	lsls	r3, r3, #4
 80083bc:	68ba      	ldr	r2, [r7, #8]
 80083be:	4413      	add	r3, r2
 80083c0:	685a      	ldr	r2, [r3, #4]
 80083c2:	4613      	mov	r3, r2
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	4413      	add	r3, r2
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	4403      	add	r3, r0
 80083cc:	781a      	ldrb	r2, [r3, #0]
 80083ce:	7dfb      	ldrb	r3, [r7, #23]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	4403      	add	r3, r0
 80083d4:	430a      	orrs	r2, r1
 80083d6:	b2d2      	uxtb	r2, r2
 80083d8:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6a19      	ldr	r1, [r3, #32]
 80083de:	7dfb      	ldrb	r3, [r7, #23]
 80083e0:	011b      	lsls	r3, r3, #4
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	4413      	add	r3, r2
 80083e6:	685a      	ldr	r2, [r3, #4]
 80083e8:	4613      	mov	r3, r2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	4413      	add	r3, r2
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	440b      	add	r3, r1
 80083f2:	7b9b      	ldrb	r3, [r3, #14]
 80083f4:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 80083f6:	2301      	movs	r3, #1
 80083f8:	75bb      	strb	r3, [r7, #22]
 80083fa:	e016      	b.n	800842a <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 80083fc:	7dfb      	ldrb	r3, [r7, #23]
 80083fe:	011b      	lsls	r3, r3, #4
 8008400:	68ba      	ldr	r2, [r7, #8]
 8008402:	4413      	add	r3, r2
 8008404:	689a      	ldr	r2, [r3, #8]
 8008406:	7d39      	ldrb	r1, [r7, #20]
 8008408:	7dbb      	ldrb	r3, [r7, #22]
 800840a:	1acb      	subs	r3, r1, r3
 800840c:	00db      	lsls	r3, r3, #3
 800840e:	fa22 f103 	lsr.w	r1, r2, r3
 8008412:	7dbb      	ldrb	r3, [r7, #22]
 8008414:	005a      	lsls	r2, r3, #1
 8008416:	7dfb      	ldrb	r3, [r7, #23]
 8008418:	4413      	add	r3, r2
 800841a:	461a      	mov	r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4413      	add	r3, r2
 8008420:	b2ca      	uxtb	r2, r1
 8008422:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8008424:	7dbb      	ldrb	r3, [r7, #22]
 8008426:	3301      	adds	r3, #1
 8008428:	75bb      	strb	r3, [r7, #22]
 800842a:	7d3a      	ldrb	r2, [r7, #20]
 800842c:	7dbb      	ldrb	r3, [r7, #22]
 800842e:	429a      	cmp	r2, r3
 8008430:	d2e4      	bcs.n	80083fc <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 8008432:	e167      	b.n	8008704 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8008434:	7dfb      	ldrb	r3, [r7, #23]
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	4413      	add	r3, r2
 800843a:	7819      	ldrb	r1, [r3, #0]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6a18      	ldr	r0, [r3, #32]
 8008440:	7dfb      	ldrb	r3, [r7, #23]
 8008442:	011b      	lsls	r3, r3, #4
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	4413      	add	r3, r2
 8008448:	685a      	ldr	r2, [r3, #4]
 800844a:	4613      	mov	r3, r2
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	4413      	add	r3, r2
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	4403      	add	r3, r0
 8008454:	781a      	ldrb	r2, [r3, #0]
 8008456:	7dfb      	ldrb	r3, [r7, #23]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	4403      	add	r3, r0
 800845c:	430a      	orrs	r2, r1
 800845e:	b2d2      	uxtb	r2, r2
 8008460:	701a      	strb	r2, [r3, #0]
      break;
 8008462:	e14f      	b.n	8008704 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008464:	7dfb      	ldrb	r3, [r7, #23]
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	4413      	add	r3, r2
 800846a:	7819      	ldrb	r1, [r3, #0]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008470:	7dfb      	ldrb	r3, [r7, #23]
 8008472:	011b      	lsls	r3, r3, #4
 8008474:	68ba      	ldr	r2, [r7, #8]
 8008476:	4413      	add	r3, r2
 8008478:	685a      	ldr	r2, [r3, #4]
 800847a:	4613      	mov	r3, r2
 800847c:	00db      	lsls	r3, r3, #3
 800847e:	4413      	add	r3, r2
 8008480:	4403      	add	r3, r0
 8008482:	7a1a      	ldrb	r2, [r3, #8]
 8008484:	7dfb      	ldrb	r3, [r7, #23]
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	4403      	add	r3, r0
 800848a:	430a      	orrs	r2, r1
 800848c:	b2d2      	uxtb	r2, r2
 800848e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008490:	2301      	movs	r3, #1
 8008492:	75bb      	strb	r3, [r7, #22]
 8008494:	e016      	b.n	80084c4 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8008496:	7dfb      	ldrb	r3, [r7, #23]
 8008498:	011b      	lsls	r3, r3, #4
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	4413      	add	r3, r2
 800849e:	689a      	ldr	r2, [r3, #8]
 80084a0:	7dbb      	ldrb	r3, [r7, #22]
 80084a2:	f1c3 0303 	rsb	r3, r3, #3
 80084a6:	00db      	lsls	r3, r3, #3
 80084a8:	fa22 f103 	lsr.w	r1, r2, r3
 80084ac:	7dbb      	ldrb	r3, [r7, #22]
 80084ae:	005a      	lsls	r2, r3, #1
 80084b0:	7dfb      	ldrb	r3, [r7, #23]
 80084b2:	4413      	add	r3, r2
 80084b4:	461a      	mov	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4413      	add	r3, r2
 80084ba:	b2ca      	uxtb	r2, r1
 80084bc:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80084be:	7dbb      	ldrb	r3, [r7, #22]
 80084c0:	3301      	adds	r3, #1
 80084c2:	75bb      	strb	r3, [r7, #22]
 80084c4:	7dbb      	ldrb	r3, [r7, #22]
 80084c6:	2b03      	cmp	r3, #3
 80084c8:	d9e5      	bls.n	8008496 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 80084ca:	e11b      	b.n	8008704 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 80084cc:	7dfb      	ldrb	r3, [r7, #23]
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	4413      	add	r3, r2
 80084d2:	7819      	ldrb	r1, [r3, #0]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80084d8:	7dfb      	ldrb	r3, [r7, #23]
 80084da:	011b      	lsls	r3, r3, #4
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	4413      	add	r3, r2
 80084e0:	685a      	ldr	r2, [r3, #4]
 80084e2:	4613      	mov	r3, r2
 80084e4:	00db      	lsls	r3, r3, #3
 80084e6:	4413      	add	r3, r2
 80084e8:	4403      	add	r3, r0
 80084ea:	7a1a      	ldrb	r2, [r3, #8]
 80084ec:	7dfb      	ldrb	r3, [r7, #23]
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	4403      	add	r3, r0
 80084f2:	430a      	orrs	r2, r1
 80084f4:	b2d2      	uxtb	r2, r2
 80084f6:	701a      	strb	r2, [r3, #0]
      break;
 80084f8:	e104      	b.n	8008704 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 80084fa:	7dfb      	ldrb	r3, [r7, #23]
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	4413      	add	r3, r2
 8008500:	7819      	ldrb	r1, [r3, #0]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008506:	7dfb      	ldrb	r3, [r7, #23]
 8008508:	011b      	lsls	r3, r3, #4
 800850a:	68ba      	ldr	r2, [r7, #8]
 800850c:	4413      	add	r3, r2
 800850e:	685a      	ldr	r2, [r3, #4]
 8008510:	4613      	mov	r3, r2
 8008512:	00db      	lsls	r3, r3, #3
 8008514:	4413      	add	r3, r2
 8008516:	4403      	add	r3, r0
 8008518:	7a1a      	ldrb	r2, [r3, #8]
 800851a:	7dfb      	ldrb	r3, [r7, #23]
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	4403      	add	r3, r0
 8008520:	430a      	orrs	r2, r1
 8008522:	b2d2      	uxtb	r2, r2
 8008524:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008526:	2301      	movs	r3, #1
 8008528:	75bb      	strb	r3, [r7, #22]
 800852a:	e016      	b.n	800855a <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800852c:	7dfb      	ldrb	r3, [r7, #23]
 800852e:	011b      	lsls	r3, r3, #4
 8008530:	68ba      	ldr	r2, [r7, #8]
 8008532:	4413      	add	r3, r2
 8008534:	689a      	ldr	r2, [r3, #8]
 8008536:	7dbb      	ldrb	r3, [r7, #22]
 8008538:	f1c3 0303 	rsb	r3, r3, #3
 800853c:	00db      	lsls	r3, r3, #3
 800853e:	fa22 f103 	lsr.w	r1, r2, r3
 8008542:	7dbb      	ldrb	r3, [r7, #22]
 8008544:	005a      	lsls	r2, r3, #1
 8008546:	7dfb      	ldrb	r3, [r7, #23]
 8008548:	4413      	add	r3, r2
 800854a:	461a      	mov	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4413      	add	r3, r2
 8008550:	b2ca      	uxtb	r2, r1
 8008552:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008554:	7dbb      	ldrb	r3, [r7, #22]
 8008556:	3301      	adds	r3, #1
 8008558:	75bb      	strb	r3, [r7, #22]
 800855a:	7dbb      	ldrb	r3, [r7, #22]
 800855c:	2b03      	cmp	r3, #3
 800855e:	d9e5      	bls.n	800852c <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 8008560:	e0d0      	b.n	8008704 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008562:	2301      	movs	r3, #1
 8008564:	75bb      	strb	r3, [r7, #22]
 8008566:	e016      	b.n	8008596 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 8008568:	7dfb      	ldrb	r3, [r7, #23]
 800856a:	011b      	lsls	r3, r3, #4
 800856c:	68ba      	ldr	r2, [r7, #8]
 800856e:	4413      	add	r3, r2
 8008570:	685a      	ldr	r2, [r3, #4]
 8008572:	7dbb      	ldrb	r3, [r7, #22]
 8008574:	f1c3 0303 	rsb	r3, r3, #3
 8008578:	00db      	lsls	r3, r3, #3
 800857a:	fa22 f103 	lsr.w	r1, r2, r3
 800857e:	7dbb      	ldrb	r3, [r7, #22]
 8008580:	005a      	lsls	r2, r3, #1
 8008582:	7dfb      	ldrb	r3, [r7, #23]
 8008584:	4413      	add	r3, r2
 8008586:	461a      	mov	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4413      	add	r3, r2
 800858c:	b2ca      	uxtb	r2, r1
 800858e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008590:	7dbb      	ldrb	r3, [r7, #22]
 8008592:	3301      	adds	r3, #1
 8008594:	75bb      	strb	r3, [r7, #22]
 8008596:	7dbb      	ldrb	r3, [r7, #22]
 8008598:	2b03      	cmp	r3, #3
 800859a:	d9e5      	bls.n	8008568 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 800859c:	e0b2      	b.n	8008704 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800859e:	7dfb      	ldrb	r3, [r7, #23]
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	4413      	add	r3, r2
 80085a4:	7819      	ldrb	r1, [r3, #0]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80085aa:	7dfb      	ldrb	r3, [r7, #23]
 80085ac:	011b      	lsls	r3, r3, #4
 80085ae:	68ba      	ldr	r2, [r7, #8]
 80085b0:	4413      	add	r3, r2
 80085b2:	685a      	ldr	r2, [r3, #4]
 80085b4:	4613      	mov	r3, r2
 80085b6:	00db      	lsls	r3, r3, #3
 80085b8:	4413      	add	r3, r2
 80085ba:	4403      	add	r3, r0
 80085bc:	7a1a      	ldrb	r2, [r3, #8]
 80085be:	7dfb      	ldrb	r3, [r7, #23]
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	4403      	add	r3, r0
 80085c4:	430a      	orrs	r2, r1
 80085c6:	b2d2      	uxtb	r2, r2
 80085c8:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80085ca:	2301      	movs	r3, #1
 80085cc:	75bb      	strb	r3, [r7, #22]
 80085ce:	e016      	b.n	80085fe <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 80085d0:	7dfb      	ldrb	r3, [r7, #23]
 80085d2:	011b      	lsls	r3, r3, #4
 80085d4:	68ba      	ldr	r2, [r7, #8]
 80085d6:	4413      	add	r3, r2
 80085d8:	689a      	ldr	r2, [r3, #8]
 80085da:	7dbb      	ldrb	r3, [r7, #22]
 80085dc:	f1c3 0303 	rsb	r3, r3, #3
 80085e0:	00db      	lsls	r3, r3, #3
 80085e2:	fa22 f103 	lsr.w	r1, r2, r3
 80085e6:	7dbb      	ldrb	r3, [r7, #22]
 80085e8:	005a      	lsls	r2, r3, #1
 80085ea:	7dfb      	ldrb	r3, [r7, #23]
 80085ec:	4413      	add	r3, r2
 80085ee:	461a      	mov	r2, r3
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4413      	add	r3, r2
 80085f4:	b2ca      	uxtb	r2, r1
 80085f6:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80085f8:	7dbb      	ldrb	r3, [r7, #22]
 80085fa:	3301      	adds	r3, #1
 80085fc:	75bb      	strb	r3, [r7, #22]
 80085fe:	7dbb      	ldrb	r3, [r7, #22]
 8008600:	2b03      	cmp	r3, #3
 8008602:	d9e5      	bls.n	80085d0 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 8008604:	e07e      	b.n	8008704 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8008606:	7dfb      	ldrb	r3, [r7, #23]
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	4413      	add	r3, r2
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	b259      	sxtb	r1, r3
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008614:	7dfb      	ldrb	r3, [r7, #23]
 8008616:	011b      	lsls	r3, r3, #4
 8008618:	68ba      	ldr	r2, [r7, #8]
 800861a:	4413      	add	r3, r2
 800861c:	685a      	ldr	r2, [r3, #4]
 800861e:	4613      	mov	r3, r2
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	4413      	add	r3, r2
 8008624:	4403      	add	r3, r0
 8008626:	791b      	ldrb	r3, [r3, #4]
 8008628:	00db      	lsls	r3, r3, #3
 800862a:	b25b      	sxtb	r3, r3
 800862c:	430b      	orrs	r3, r1
 800862e:	b259      	sxtb	r1, r3
 8008630:	7dfb      	ldrb	r3, [r7, #23]
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	4413      	add	r3, r2
 8008636:	b2ca      	uxtb	r2, r1
 8008638:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 800863a:	7dfb      	ldrb	r3, [r7, #23]
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	4413      	add	r3, r2
 8008640:	7819      	ldrb	r1, [r3, #0]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008646:	7dfb      	ldrb	r3, [r7, #23]
 8008648:	011b      	lsls	r3, r3, #4
 800864a:	68ba      	ldr	r2, [r7, #8]
 800864c:	4413      	add	r3, r2
 800864e:	689a      	ldr	r2, [r3, #8]
 8008650:	4613      	mov	r3, r2
 8008652:	00db      	lsls	r3, r3, #3
 8008654:	4413      	add	r3, r2
 8008656:	4403      	add	r3, r0
 8008658:	7a1a      	ldrb	r2, [r3, #8]
 800865a:	7dfb      	ldrb	r3, [r7, #23]
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	4403      	add	r3, r0
 8008660:	430a      	orrs	r2, r1
 8008662:	b2d2      	uxtb	r2, r2
 8008664:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008666:	2301      	movs	r3, #1
 8008668:	75bb      	strb	r3, [r7, #22]
 800866a:	e016      	b.n	800869a <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 800866c:	7dfb      	ldrb	r3, [r7, #23]
 800866e:	011b      	lsls	r3, r3, #4
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	4413      	add	r3, r2
 8008674:	68da      	ldr	r2, [r3, #12]
 8008676:	7dbb      	ldrb	r3, [r7, #22]
 8008678:	f1c3 0303 	rsb	r3, r3, #3
 800867c:	00db      	lsls	r3, r3, #3
 800867e:	fa22 f103 	lsr.w	r1, r2, r3
 8008682:	7dbb      	ldrb	r3, [r7, #22]
 8008684:	005a      	lsls	r2, r3, #1
 8008686:	7dfb      	ldrb	r3, [r7, #23]
 8008688:	4413      	add	r3, r2
 800868a:	461a      	mov	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4413      	add	r3, r2
 8008690:	b2ca      	uxtb	r2, r1
 8008692:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008694:	7dbb      	ldrb	r3, [r7, #22]
 8008696:	3301      	adds	r3, #1
 8008698:	75bb      	strb	r3, [r7, #22]
 800869a:	7dbb      	ldrb	r3, [r7, #22]
 800869c:	2b03      	cmp	r3, #3
 800869e:	d9e5      	bls.n	800866c <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 80086a0:	e030      	b.n	8008704 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 80086a2:	7dfb      	ldrb	r3, [r7, #23]
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	4413      	add	r3, r2
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	b259      	sxtb	r1, r3
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80086b0:	7dfb      	ldrb	r3, [r7, #23]
 80086b2:	011b      	lsls	r3, r3, #4
 80086b4:	68ba      	ldr	r2, [r7, #8]
 80086b6:	4413      	add	r3, r2
 80086b8:	685a      	ldr	r2, [r3, #4]
 80086ba:	4613      	mov	r3, r2
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	4413      	add	r3, r2
 80086c0:	4403      	add	r3, r0
 80086c2:	791b      	ldrb	r3, [r3, #4]
 80086c4:	00db      	lsls	r3, r3, #3
 80086c6:	b25b      	sxtb	r3, r3
 80086c8:	430b      	orrs	r3, r1
 80086ca:	b259      	sxtb	r1, r3
 80086cc:	7dfb      	ldrb	r3, [r7, #23]
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	4413      	add	r3, r2
 80086d2:	b2ca      	uxtb	r2, r1
 80086d4:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 80086d6:	7dfb      	ldrb	r3, [r7, #23]
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	4413      	add	r3, r2
 80086dc:	7819      	ldrb	r1, [r3, #0]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80086e2:	7dfb      	ldrb	r3, [r7, #23]
 80086e4:	011b      	lsls	r3, r3, #4
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	4413      	add	r3, r2
 80086ea:	689a      	ldr	r2, [r3, #8]
 80086ec:	4613      	mov	r3, r2
 80086ee:	00db      	lsls	r3, r3, #3
 80086f0:	4413      	add	r3, r2
 80086f2:	4403      	add	r3, r0
 80086f4:	7a1a      	ldrb	r2, [r3, #8]
 80086f6:	7dfb      	ldrb	r3, [r7, #23]
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	4403      	add	r3, r0
 80086fc:	430a      	orrs	r2, r1
 80086fe:	b2d2      	uxtb	r2, r2
 8008700:	701a      	strb	r2, [r3, #0]
      break;
 8008702:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8008704:	7dfb      	ldrb	r3, [r7, #23]
 8008706:	3301      	adds	r3, #1
 8008708:	75fb      	strb	r3, [r7, #23]
 800870a:	7dfb      	ldrb	r3, [r7, #23]
 800870c:	2b01      	cmp	r3, #1
 800870e:	f67f ae0a 	bls.w	8008326 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 8008712:	bf00      	nop
 8008714:	bf00      	nop
 8008716:	371c      	adds	r7, #28
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <_ZN5L6470I8shield_2E11L6470_roundEf>:
    int L6470_round(float f)
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	ed87 0a00 	vstr	s0, [r7]
        if (f >= 0) {
 800872c:	edd7 7a00 	vldr	s15, [r7]
 8008730:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008738:	db1e      	blt.n	8008778 <_ZN5L6470I8shield_2E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 800873a:	edd7 7a00 	vldr	s15, [r7]
 800873e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008742:	ee17 2a90 	vmov	r2, s15
 8008746:	edd7 7a00 	vldr	s15, [r7]
 800874a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800874e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008752:	ed97 7a00 	vldr	s14, [r7]
 8008756:	ee77 7a67 	vsub.f32	s15, s14, s15
 800875a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800875e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008766:	bf4c      	ite	mi
 8008768:	2301      	movmi	r3, #1
 800876a:	2300      	movpl	r3, #0
 800876c:	b2db      	uxtb	r3, r3
 800876e:	f083 0301 	eor.w	r3, r3, #1
 8008772:	b2db      	uxtb	r3, r3
 8008774:	4413      	add	r3, r2
 8008776:	e01a      	b.n	80087ae <_ZN5L6470I8shield_2E11L6470_roundEf+0x8e>
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 8008778:	edd7 7a00 	vldr	s15, [r7]
 800877c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008780:	ee17 2a90 	vmov	r2, s15
 8008784:	edd7 7a00 	vldr	s15, [r7]
 8008788:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800878c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008790:	ed97 7a00 	vldr	s14, [r7]
 8008794:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008798:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800879c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80087a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087a4:	d501      	bpl.n	80087aa <_ZN5L6470I8shield_2E11L6470_roundEf+0x8a>
 80087a6:	2301      	movs	r3, #1
 80087a8:	e000      	b.n	80087ac <_ZN5L6470I8shield_2E11L6470_roundEf+0x8c>
 80087aa:	2300      	movs	r3, #0
 80087ac:	1ad3      	subs	r3, r2, r3
    }
 80087ae:	4618      	mov	r0, r3
 80087b0:	370c      	adds	r7, #12
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr

080087ba <_ZN5L6470I8shield_2E4ReadEPht>:
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b086      	sub	sp, #24
 80087be:	af00      	add	r7, sp, #0
 80087c0:	60f8      	str	r0, [r7, #12]
 80087c2:	60b9      	str	r1, [r7, #8]
 80087c4:	4613      	mov	r3, r2
 80087c6:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6918      	ldr	r0, [r3, #16]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	8a9b      	ldrh	r3, [r3, #20]
 80087d0:	2200      	movs	r2, #0
 80087d2:	4619      	mov	r1, r3
 80087d4:	f007 fb64 	bl	800fea0 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6998      	ldr	r0, [r3, #24]
 80087dc:	88fa      	ldrh	r2, [r7, #6]
 80087de:	2364      	movs	r3, #100	; 0x64
 80087e0:	68b9      	ldr	r1, [r7, #8]
 80087e2:	f008 fb74 	bl	8010ece <HAL_SPI_Receive>
 80087e6:	4603      	mov	r3, r0
 80087e8:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6918      	ldr	r0, [r3, #16]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	8a9b      	ldrh	r3, [r3, #20]
 80087f2:	2201      	movs	r2, #1
 80087f4:	4619      	mov	r1, r3
 80087f6:	f007 fb53 	bl	800fea0 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 80087fa:	7dfb      	ldrb	r3, [r7, #23]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d001      	beq.n	8008804 <_ZN5L6470I8shield_2E4ReadEPht+0x4a>
        	return COMPONENT_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	e000      	b.n	8008806 <_ZN5L6470I8shield_2E4ReadEPht+0x4c>
        return COMPONENT_OK;
 8008804:	2300      	movs	r3, #0
    }
 8008806:	4618      	mov	r0, r3
 8008808:	3718      	adds	r7, #24
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <_ZN5L6470I8shield_2E5WriteEPht>:
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 800880e:	b580      	push	{r7, lr}
 8008810:	b086      	sub	sp, #24
 8008812:	af00      	add	r7, sp, #0
 8008814:	60f8      	str	r0, [r7, #12]
 8008816:	60b9      	str	r1, [r7, #8]
 8008818:	4613      	mov	r3, r2
 800881a:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6918      	ldr	r0, [r3, #16]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	8a9b      	ldrh	r3, [r3, #20]
 8008824:	2200      	movs	r2, #0
 8008826:	4619      	mov	r1, r3
 8008828:	f007 fb3a 	bl	800fea0 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6998      	ldr	r0, [r3, #24]
 8008830:	88fa      	ldrh	r2, [r7, #6]
 8008832:	2364      	movs	r3, #100	; 0x64
 8008834:	68b9      	ldr	r1, [r7, #8]
 8008836:	f008 fa0e 	bl	8010c56 <HAL_SPI_Transmit>
 800883a:	4603      	mov	r3, r0
 800883c:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	6918      	ldr	r0, [r3, #16]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	8a9b      	ldrh	r3, [r3, #20]
 8008846:	2201      	movs	r2, #1
 8008848:	4619      	mov	r1, r3
 800884a:	f007 fb29 	bl	800fea0 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 800884e:	7dfb      	ldrb	r3, [r7, #23]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d001      	beq.n	8008858 <_ZN5L6470I8shield_2E5WriteEPht+0x4a>
        	return COMPONENT_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	e000      	b.n	800885a <_ZN5L6470I8shield_2E5WriteEPht+0x4c>
        return COMPONENT_OK;
 8008858:	2300      	movs	r3, #0
    }
 800885a:	4618      	mov	r0, r3
 800885c:	3718      	adds	r7, #24
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t>:
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 8008862:	b580      	push	{r7, lr}
 8008864:	b088      	sub	sp, #32
 8008866:	af02      	add	r7, sp, #8
 8008868:	60f8      	str	r0, [r7, #12]
 800886a:	60b9      	str	r1, [r7, #8]
 800886c:	607a      	str	r2, [r7, #4]
 800886e:	807b      	strh	r3, [r7, #2]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6918      	ldr	r0, [r3, #16]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	8a9b      	ldrh	r3, [r3, #20]
 8008878:	2200      	movs	r2, #0
 800887a:	4619      	mov	r1, r3
 800887c:	f007 fb10 	bl	800fea0 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6998      	ldr	r0, [r3, #24]
 8008884:	887b      	ldrh	r3, [r7, #2]
 8008886:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800888a:	9200      	str	r2, [sp, #0]
 800888c:	68ba      	ldr	r2, [r7, #8]
 800888e:	6879      	ldr	r1, [r7, #4]
 8008890:	f008 fc2e 	bl	80110f0 <HAL_SPI_TransmitReceive>
 8008894:	4603      	mov	r3, r0
 8008896:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 8008898:	7dfb      	ldrb	r3, [r7, #23]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d009      	beq.n	80088b2 <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t+0x50>
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	6918      	ldr	r0, [r3, #16]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	8a9b      	ldrh	r3, [r3, #20]
 80088a6:	2201      	movs	r2, #1
 80088a8:	4619      	mov	r1, r3
 80088aa:	f007 faf9 	bl	800fea0 <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	e008      	b.n	80088c4 <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t+0x62>
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6918      	ldr	r0, [r3, #16]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	8a9b      	ldrh	r3, [r3, #20]
 80088ba:	2201      	movs	r2, #1
 80088bc:	4619      	mov	r1, r3
 80088be:	f007 faef 	bl	800fea0 <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 80088c2:	2300      	movs	r3, #0
    }
 80088c4:	4618      	mov	r0, r3
 80088c6:	3718      	adds	r7, #24
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <_ZN5L6470I8shield_2E23L6470_SPI_CommunicationEPhS2_tm>:
    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 80088cc:	b590      	push	{r4, r7, lr}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	607a      	str	r2, [r7, #4]
 80088d8:	807b      	strh	r3, [r7, #2]
        ReadWrite(pRxData, pTxData, Size);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80088e2:	681c      	ldr	r4, [r3, #0]
 80088e4:	887b      	ldrh	r3, [r7, #2]
 80088e6:	68ba      	ldr	r2, [r7, #8]
 80088e8:	6879      	ldr	r1, [r7, #4]
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	47a0      	blx	r4
    }
 80088ee:	bf00      	nop
 80088f0:	3714      	adds	r7, #20
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd90      	pop	{r4, r7, pc}

080088f6 <_ZN5L6470I8shield_1E4initEPv>:
    virtual int init(void *init)
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b082      	sub	sp, #8
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
 80088fe:	6039      	str	r1, [r7, #0]
        return (int) L6470_Config((void *) init);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	6839      	ldr	r1, [r7, #0]
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	4798      	blx	r3
 8008910:	4603      	mov	r3, r0
    }
 8008912:	4618      	mov	r0, r3
 8008914:	3708      	adds	r7, #8
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <_ZN5L6470I8shield_1E10get_statusEv>:
    virtual unsigned int get_status(void)
 800891a:	b580      	push	{r7, lr}
 800891c:	b082      	sub	sp, #8
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
        return (unsigned int) L6470_GetStatus();
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	4798      	blx	r3
 8008930:	4603      	mov	r3, r0
    }
 8008932:	4618      	mov	r0, r3
 8008934:	3708      	adds	r7, #8
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <_ZN5L6470I8shield_1E13get_parameterEj>:
    virtual unsigned int get_parameter(unsigned int parameter)
 800893a:	b580      	push	{r7, lr}
 800893c:	b082      	sub	sp, #8
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
 8008942:	6039      	str	r1, [r7, #0]
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	683a      	ldr	r2, [r7, #0]
 8008950:	b2d2      	uxtb	r2, r2
 8008952:	4611      	mov	r1, r2
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	4798      	blx	r3
 8008958:	4603      	mov	r3, r0
    }
 800895a:	4618      	mov	r0, r3
 800895c:	3708      	adds	r7, #8
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <_ZN5L6470I8shield_1E12get_positionEv>:
    virtual signed int get_position(void)
 8008962:	b590      	push	{r4, r7, lr}
 8008964:	b083      	sub	sp, #12
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8008972:	681c      	ldr	r4, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2100      	movs	r1, #0
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	4798      	blx	r3
 8008984:	4603      	mov	r3, r0
 8008986:	4619      	mov	r1, r3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	47a0      	blx	r4
 800898c:	4603      	mov	r3, r0
    }
 800898e:	4618      	mov	r0, r3
 8008990:	370c      	adds	r7, #12
 8008992:	46bd      	mov	sp, r7
 8008994:	bd90      	pop	{r4, r7, pc}

08008996 <_ZN5L6470I8shield_1E8get_markEv>:
    virtual signed int get_mark(void)
 8008996:	b590      	push	{r4, r7, lr}
 8008998:	b083      	sub	sp, #12
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80089a6:	681c      	ldr	r4, [r3, #0]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2102      	movs	r1, #2
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	4798      	blx	r3
 80089b8:	4603      	mov	r3, r0
 80089ba:	4619      	mov	r1, r3
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	47a0      	blx	r4
 80089c0:	4603      	mov	r3, r0
    }
 80089c2:	4618      	mov	r0, r3
 80089c4:	370c      	adds	r7, #12
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd90      	pop	{r4, r7, pc}

080089ca <_ZN5L6470I8shield_1E9get_speedEv>:
    virtual unsigned int get_speed(void)
 80089ca:	b5b0      	push	{r4, r5, r7, lr}
 80089cc:	b082      	sub	sp, #8
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80089da:	681c      	ldr	r4, [r3, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80089e4:	681d      	ldr	r5, [r3, #0]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2103      	movs	r1, #3
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	4798      	blx	r3
 80089f6:	4603      	mov	r3, r0
 80089f8:	4619      	mov	r1, r3
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	47a8      	blx	r5
 80089fe:	eef0 7a40 	vmov.f32	s15, s0
 8008a02:	eeb0 0a67 	vmov.f32	s0, s15
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	47a0      	blx	r4
 8008a0a:	4603      	mov	r3, r0
    }
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3708      	adds	r7, #8
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bdb0      	pop	{r4, r5, r7, pc}

08008a14 <_ZN5L6470I8shield_1E13get_max_speedEv>:
    virtual unsigned int get_max_speed(void)
 8008a14:	b5b0      	push	{r4, r5, r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8008a24:	681c      	ldr	r4, [r3, #0]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a2e:	681d      	ldr	r5, [r3, #0]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2106      	movs	r1, #6
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	4798      	blx	r3
 8008a40:	4603      	mov	r3, r0
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	4619      	mov	r1, r3
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	47a8      	blx	r5
 8008a4a:	eef0 7a40 	vmov.f32	s15, s0
 8008a4e:	eeb0 0a67 	vmov.f32	s0, s15
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	47a0      	blx	r4
 8008a56:	4603      	mov	r3, r0
    }
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3708      	adds	r7, #8
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bdb0      	pop	{r4, r5, r7, pc}

08008a60 <_ZN5L6470I8shield_1E13get_min_speedEv>:
    virtual unsigned int get_min_speed(void)
 8008a60:	b5b0      	push	{r4, r5, r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8008a70:	681c      	ldr	r4, [r3, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008a7a:	681d      	ldr	r5, [r3, #0]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	2107      	movs	r1, #7
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	4798      	blx	r3
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	4619      	mov	r1, r3
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	47a8      	blx	r5
 8008a96:	eef0 7a40 	vmov.f32	s15, s0
 8008a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	47a0      	blx	r4
 8008aa2:	4603      	mov	r3, r0
    }
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3708      	adds	r7, #8
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bdb0      	pop	{r4, r5, r7, pc}

08008aac <_ZN5L6470I8shield_1E16get_accelerationEv>:
    virtual unsigned int get_acceleration(void)
 8008aac:	b5b0      	push	{r4, r5, r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8008abc:	681c      	ldr	r4, [r3, #0]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008ac6:	681d      	ldr	r5, [r3, #0]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2104      	movs	r1, #4
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	4798      	blx	r3
 8008ad8:	4603      	mov	r3, r0
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	4619      	mov	r1, r3
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	47a8      	blx	r5
 8008ae2:	eef0 7a40 	vmov.f32	s15, s0
 8008ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	47a0      	blx	r4
 8008aee:	4603      	mov	r3, r0
    }
 8008af0:	4618      	mov	r0, r3
 8008af2:	3708      	adds	r7, #8
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bdb0      	pop	{r4, r5, r7, pc}

08008af8 <_ZN5L6470I8shield_1E16get_decelerationEv>:
    virtual unsigned int get_deceleration(void)
 8008af8:	b5b0      	push	{r4, r5, r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8008b08:	681c      	ldr	r4, [r3, #0]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8008b12:	681d      	ldr	r5, [r3, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2105      	movs	r1, #5
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	4798      	blx	r3
 8008b24:	4603      	mov	r3, r0
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	4619      	mov	r1, r3
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	47a8      	blx	r5
 8008b2e:	eef0 7a40 	vmov.f32	s15, s0
 8008b32:	eeb0 0a67 	vmov.f32	s0, s15
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	47a0      	blx	r4
 8008b3a:	4603      	mov	r3, r0
    }
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3708      	adds	r7, #8
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bdb0      	pop	{r4, r5, r7, pc}

08008b44 <_ZN5L6470I8shield_1E13get_directionEv>:
    virtual StepperMotor::direction_t get_direction(void)
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	2104      	movs	r1, #4
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	4798      	blx	r3
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d101      	bne.n	8008b66 <_ZN5L6470I8shield_1E13get_directionEv+0x22>
 8008b62:	2301      	movs	r3, #1
 8008b64:	e000      	b.n	8008b68 <_ZN5L6470I8shield_1E13get_directionEv+0x24>
 8008b66:	2300      	movs	r3, #0
    }
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3708      	adds	r7, #8
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <_ZN5L6470I8shield_1E13set_parameterEjj>:
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	607a      	str	r2, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	b2d1      	uxtb	r1, r2
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	68f8      	ldr	r0, [r7, #12]
 8008b8e:	4798      	blx	r3
    }
 8008b90:	bf00      	nop
 8008b92:	3710      	adds	r7, #16
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <_ZN5L6470I8shield_1E8set_homeEv>:
    virtual void set_home(void)
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
        L6470_ResetPos();
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	4798      	blx	r3
    }
 8008bae:	bf00      	nop
 8008bb0:	3708      	adds	r7, #8
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <_ZN5L6470I8shield_1E8set_markEv>:
    virtual void set_mark(void)
 8008bb6:	b590      	push	{r4, r7, lr}
 8008bb8:	b083      	sub	sp, #12
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8008bc6:	681c      	ldr	r4, [r3, #0]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2100      	movs	r1, #0
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	4798      	blx	r3
 8008bd8:	4603      	mov	r3, r0
 8008bda:	461a      	mov	r2, r3
 8008bdc:	2102      	movs	r1, #2
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	47a0      	blx	r4
    }
 8008be2:	bf00      	nop
 8008be4:	370c      	adds	r7, #12
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd90      	pop	{r4, r7, pc}

08008bea <_ZN5L6470I8shield_1E8set_markEi>:
    virtual void set_mark(signed int position)
 8008bea:	b590      	push	{r4, r7, lr}
 8008bec:	b083      	sub	sp, #12
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
 8008bf2:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8008bfc:	681c      	ldr	r4, [r3, #0]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	6839      	ldr	r1, [r7, #0]
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	4798      	blx	r3
 8008c0e:	4603      	mov	r3, r0
 8008c10:	461a      	mov	r2, r3
 8008c12:	2102      	movs	r1, #2
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	47a0      	blx	r4
    }
 8008c18:	bf00      	nop
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd90      	pop	{r4, r7, pc}

08008c20 <_ZN5L6470I8shield_1E13set_max_speedEj>:
    virtual bool set_max_speed(unsigned int speed)
 8008c20:	b590      	push	{r4, r7, lr}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8008c32:	681c      	ldr	r4, [r3, #0]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	683a      	ldr	r2, [r7, #0]
 8008c40:	ee07 2a90 	vmov	s15, r2
 8008c44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c48:	eeb0 0a67 	vmov.f32	s0, s15
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	4798      	blx	r3
 8008c50:	4603      	mov	r3, r0
 8008c52:	461a      	mov	r2, r3
 8008c54:	2106      	movs	r1, #6
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	47a0      	blx	r4
        return true;
 8008c5a:	2301      	movs	r3, #1
    }
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd90      	pop	{r4, r7, pc}

08008c64 <_ZN5L6470I8shield_1E13set_min_speedEj>:
    virtual bool set_min_speed(unsigned int speed)
 8008c64:	b590      	push	{r4, r7, lr}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8008c76:	681c      	ldr	r4, [r3, #0]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	683a      	ldr	r2, [r7, #0]
 8008c84:	ee07 2a90 	vmov	s15, r2
 8008c88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c8c:	eeb0 0a67 	vmov.f32	s0, s15
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	4798      	blx	r3
 8008c94:	4603      	mov	r3, r0
 8008c96:	461a      	mov	r2, r3
 8008c98:	2107      	movs	r1, #7
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	47a0      	blx	r4
        return true;
 8008c9e:	2301      	movs	r3, #1
    }
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd90      	pop	{r4, r7, pc}

08008ca8 <_ZN5L6470I8shield_1E16set_accelerationEj>:
    virtual bool set_acceleration(unsigned int acceleration)
 8008ca8:	b590      	push	{r4, r7, lr}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8008cba:	681c      	ldr	r4, [r3, #0]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	683a      	ldr	r2, [r7, #0]
 8008cc8:	ee07 2a90 	vmov	s15, r2
 8008ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cd0:	eeb0 0a67 	vmov.f32	s0, s15
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	4798      	blx	r3
 8008cd8:	4603      	mov	r3, r0
 8008cda:	461a      	mov	r2, r3
 8008cdc:	2104      	movs	r1, #4
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	47a0      	blx	r4
        return true;
 8008ce2:	2301      	movs	r3, #1
    }
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd90      	pop	{r4, r7, pc}

08008cec <_ZN5L6470I8shield_1E16set_decelerationEj>:
    virtual bool set_deceleration(unsigned int deceleration)
 8008cec:	b590      	push	{r4, r7, lr}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8008cfe:	681c      	ldr	r4, [r3, #0]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	683a      	ldr	r2, [r7, #0]
 8008d0c:	ee07 2a90 	vmov	s15, r2
 8008d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d14:	eeb0 0a67 	vmov.f32	s0, s15
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	4798      	blx	r3
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	461a      	mov	r2, r3
 8008d20:	2105      	movs	r1, #5
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	47a0      	blx	r4
        return true;
 8008d26:	2301      	movs	r3, #1
    }
 8008d28:	4618      	mov	r0, r3
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd90      	pop	{r4, r7, pc}

08008d30 <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE>:
    virtual bool set_step_mode(step_mode_t step_mode)
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	460b      	mov	r3, r1
 8008d3a:	70fb      	strb	r3, [r7, #3]
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 8008d3c:	78fb      	ldrb	r3, [r7, #3]
 8008d3e:	2b07      	cmp	r3, #7
 8008d40:	d901      	bls.n	8008d46 <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 8008d42:	2300      	movs	r3, #0
 8008d44:	e00f      	b.n	8008d66 <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        soft_hiz();
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	3380      	adds	r3, #128	; 0x80
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	78fa      	ldrb	r2, [r7, #3]
 8008d5e:	2115      	movs	r1, #21
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	4798      	blx	r3
        return true;
 8008d64:	2301      	movs	r3, #1
    }
 8008d66:	4618      	mov	r0, r3
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <_ZN5L6470I8shield_1E5go_toEi>:
    virtual void go_to(signed int position)
 8008d6e:	b590      	push	{r4, r7, lr}
 8008d70:	b083      	sub	sp, #12
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	6039      	str	r1, [r7, #0]
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8008d80:	681c      	ldr	r4, [r3, #0]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	6839      	ldr	r1, [r7, #0]
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	4798      	blx	r3
 8008d92:	4603      	mov	r3, r0
 8008d94:	4619      	mov	r1, r3
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	47a0      	blx	r4
    }
 8008d9a:	bf00      	nop
 8008d9c:	370c      	adds	r7, #12
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd90      	pop	{r4, r7, pc}

08008da2 <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE>:
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 8008da2:	b5b0      	push	{r4, r5, r7, lr}
 8008da4:	b084      	sub	sp, #16
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	60f8      	str	r0, [r7, #12]
 8008daa:	60b9      	str	r1, [r7, #8]
 8008dac:	4613      	mov	r3, r2
 8008dae:	71fb      	strb	r3, [r7, #7]
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8008db8:	681c      	ldr	r4, [r3, #0]
 8008dba:	79fb      	ldrb	r3, [r7, #7]
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d101      	bne.n	8008dc4 <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE+0x22>
 8008dc0:	2501      	movs	r5, #1
 8008dc2:	e000      	b.n	8008dc6 <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE+0x24>
 8008dc4:	2500      	movs	r5, #0
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	68b9      	ldr	r1, [r7, #8]
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	4798      	blx	r3
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	461a      	mov	r2, r3
 8008dda:	4629      	mov	r1, r5
 8008ddc:	68f8      	ldr	r0, [r7, #12]
 8008dde:	47a0      	blx	r4
    }
 8008de0:	bf00      	nop
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bdb0      	pop	{r4, r5, r7, pc}

08008de8 <_ZN5L6470I8shield_1E7go_homeEv>:
    virtual void go_home(void)
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
        L6470_GoHome();
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	4798      	blx	r3
    }
 8008dfe:	bf00      	nop
 8008e00:	3708      	adds	r7, #8
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <_ZN5L6470I8shield_1E7go_markEv>:
    virtual void go_mark(void)
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b082      	sub	sp, #8
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
        L6470_GoMark();
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	4798      	blx	r3
    }
 8008e1c:	bf00      	nop
 8008e1e:	3708      	adds	r7, #8
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 8008e24:	b5b0      	push	{r4, r5, r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	607b      	str	r3, [r7, #4]
 8008e2e:	460b      	mov	r3, r1
 8008e30:	72fb      	strb	r3, [r7, #11]
 8008e32:	4613      	mov	r3, r2
 8008e34:	72bb      	strb	r3, [r7, #10]
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008e3e:	681c      	ldr	r4, [r3, #0]
 8008e40:	7abb      	ldrb	r3, [r7, #10]
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d101      	bne.n	8008e4a <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8008e46:	2501      	movs	r5, #1
 8008e48:	e000      	b.n	8008e4c <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8008e4a:	2500      	movs	r5, #0
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	ee07 2a90 	vmov	s15, r2
 8008e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e60:	eeb0 0a67 	vmov.f32	s0, s15
 8008e64:	68f8      	ldr	r0, [r7, #12]
 8008e66:	4798      	blx	r3
 8008e68:	4603      	mov	r3, r0
 8008e6a:	7af9      	ldrb	r1, [r7, #11]
 8008e6c:	462a      	mov	r2, r5
 8008e6e:	68f8      	ldr	r0, [r7, #12]
 8008e70:	47a0      	blx	r4
    }
 8008e72:	bf00      	nop
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bdb0      	pop	{r4, r5, r7, pc}

08008e7a <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE>:
    virtual void run(StepperMotor::direction_t direction)
 8008e7a:	b5b0      	push	{r4, r5, r7, lr}
 8008e7c:	b082      	sub	sp, #8
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
 8008e82:	460b      	mov	r3, r1
 8008e84:	70fb      	strb	r3, [r7, #3]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8008e8e:	681c      	ldr	r4, [r3, #0]
 8008e90:	78fb      	ldrb	r3, [r7, #3]
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d101      	bne.n	8008e9a <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE+0x20>
 8008e96:	2501      	movs	r5, #1
 8008e98:	e000      	b.n	8008e9c <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE+0x22>
 8008e9a:	2500      	movs	r5, #0
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2106      	movs	r1, #6
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	4798      	blx	r3
 8008eac:	4603      	mov	r3, r0
 8008eae:	461a      	mov	r2, r3
 8008eb0:	4629      	mov	r1, r5
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	47a0      	blx	r4
    }
 8008eb6:	bf00      	nop
 8008eb8:	3708      	adds	r7, #8
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bdb0      	pop	{r4, r5, r7, pc}

08008ebe <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj>:
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 8008ebe:	b5b0      	push	{r4, r5, r7, lr}
 8008ec0:	b084      	sub	sp, #16
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	60f8      	str	r0, [r7, #12]
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	607a      	str	r2, [r7, #4]
 8008eca:	72fb      	strb	r3, [r7, #11]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8008ed4:	681c      	ldr	r4, [r3, #0]
 8008ed6:	7afb      	ldrb	r3, [r7, #11]
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d101      	bne.n	8008ee0 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj+0x22>
 8008edc:	2501      	movs	r5, #1
 8008ede:	e000      	b.n	8008ee2 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj+0x24>
 8008ee0:	2500      	movs	r5, #0
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	ee07 2a90 	vmov	s15, r2
 8008ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8008efa:	68f8      	ldr	r0, [r7, #12]
 8008efc:	4798      	blx	r3
 8008efe:	4603      	mov	r3, r0
 8008f00:	461a      	mov	r2, r3
 8008f02:	4629      	mov	r1, r5
 8008f04:	68f8      	ldr	r0, [r7, #12]
 8008f06:	47a0      	blx	r4
    }
 8008f08:	bf00      	nop
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bdb0      	pop	{r4, r5, r7, pc}

08008f10 <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj>:
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	460b      	mov	r3, r1
 8008f1a:	607a      	str	r2, [r7, #4]
 8008f1c:	72fb      	strb	r3, [r7, #11]
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	7afa      	ldrb	r2, [r7, #11]
 8008f2a:	2a01      	cmp	r2, #1
 8008f2c:	d101      	bne.n	8008f32 <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj+0x22>
 8008f2e:	2101      	movs	r1, #1
 8008f30:	e000      	b.n	8008f34 <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj+0x24>
 8008f32:	2100      	movs	r1, #0
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	68f8      	ldr	r0, [r7, #12]
 8008f38:	4798      	blx	r3
    }
 8008f3a:	bf00      	nop
 8008f3c:	3710      	adds	r7, #16
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <_ZN5L6470I8shield_1E9soft_stopEv>:
    virtual void soft_stop(void)
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b082      	sub	sp, #8
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
        L6470_SoftStop();
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	4798      	blx	r3
    }
 8008f58:	bf00      	nop
 8008f5a:	3708      	adds	r7, #8
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <_ZN5L6470I8shield_1E9hard_stopEv>:
    virtual void hard_stop(void)
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
        L6470_HardStop();
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	4798      	blx	r3
    }
 8008f76:	bf00      	nop
 8008f78:	3708      	adds	r7, #8
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <_ZN5L6470I8shield_1E8soft_hizEv>:
    virtual void soft_hiz(void)
 8008f7e:	b580      	push	{r7, lr}
 8008f80:	b082      	sub	sp, #8
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
        L6470_SoftHiZ();
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	4798      	blx	r3
    }
 8008f94:	bf00      	nop
 8008f96:	3708      	adds	r7, #8
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <_ZN5L6470I8shield_1E8hard_hizEv>:
    virtual void hard_hiz(void)
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
        L6470_HardHiZ();
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	4798      	blx	r3
    }
 8008fb2:	bf00      	nop
 8008fb4:	3708      	adds	r7, #8
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <_ZN5L6470I8shield_1E17wait_while_activeEv>:
    virtual void wait_while_active(void)
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b082      	sub	sp, #8
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 8008fc2:	bf00      	nop
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2101      	movs	r1, #1
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	4798      	blx	r3
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	bf0c      	ite	eq
 8008fda:	2301      	moveq	r3, #1
 8008fdc:	2300      	movne	r3, #0
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d1ef      	bne.n	8008fc4 <_ZN5L6470I8shield_1E17wait_while_activeEv+0xa>
    }
 8008fe4:	bf00      	nop
 8008fe6:	bf00      	nop
 8008fe8:	3708      	adds	r7, #8
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE>:
    virtual void step_clock(StepperMotor::direction_t direction)
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b082      	sub	sp, #8
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	70fb      	strb	r3, [r7, #3]
        soft_hiz();
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	3380      	adds	r3, #128	; 0x80
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	78fa      	ldrb	r2, [r7, #3]
 8009012:	2a01      	cmp	r2, #1
 8009014:	d101      	bne.n	800901a <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE+0x2c>
 8009016:	2201      	movs	r2, #1
 8009018:	e000      	b.n	800901c <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE+0x2e>
 800901a:	2200      	movs	r2, #0
 800901c:	4611      	mov	r1, r2
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	4798      	blx	r3
    }
 8009022:	bf00      	nop
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 800902a:	b580      	push	{r7, lr}
 800902c:	b082      	sub	sp, #8
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
 8009032:	460b      	mov	r3, r1
 8009034:	70fb      	strb	r3, [r7, #3]
 8009036:	4613      	mov	r3, r2
 8009038:	70bb      	strb	r3, [r7, #2]
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	78ba      	ldrb	r2, [r7, #2]
 8009046:	2a01      	cmp	r2, #1
 8009048:	d101      	bne.n	800904e <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 800904a:	2201      	movs	r2, #1
 800904c:	e000      	b.n	8009050 <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 800904e:	2200      	movs	r2, #0
 8009050:	78f9      	ldrb	r1, [r7, #3]
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	4798      	blx	r3
    }
 8009056:	bf00      	nop
 8009058:	3708      	adds	r7, #8
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <_ZN5L6470I8shield_1E12reset_deviceEv>:
    virtual void reset_device(void)
 800905e:	b580      	push	{r7, lr}
 8009060:	b082      	sub	sp, #8
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
        L6470_ResetDevice();
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	4798      	blx	r3
    }
 8009074:	bf00      	nop
 8009076:	3708      	adds	r7, #8
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <_ZN5L6470I8shield_1E18prepare_get_statusEv>:
    virtual void prepare_get_status(void)
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetStatus();
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800909a:	bf00      	nop
 800909c:	3708      	adds	r7, #8
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <_ZN5L6470I8shield_1E21prepare_get_parameterEj>:
    virtual void prepare_get_parameter(unsigned int parameter)
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b082      	sub	sp, #8
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
 80090aa:	6039      	str	r1, [r7, #0]
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	683a      	ldr	r2, [r7, #0]
 80090b8:	b2d2      	uxtb	r2, r2
 80090ba:	4611      	mov	r1, r2
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80090c8:	bf00      	nop
 80090ca:	3708      	adds	r7, #8
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <_ZN5L6470I8shield_1E20prepare_get_positionEv>:
    virtual void prepare_get_position(void)
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2100      	movs	r1, #0
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80090f0:	bf00      	nop
 80090f2:	3708      	adds	r7, #8
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <_ZN5L6470I8shield_1E16prepare_get_markEv>:
    virtual void prepare_get_mark(void)
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2102      	movs	r1, #2
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2202      	movs	r2, #2
 8009114:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009118:	bf00      	nop
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <_ZN5L6470I8shield_1E17prepare_get_speedEv>:
    virtual void prepare_get_speed(void)
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2103      	movs	r1, #3
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2203      	movs	r2, #3
 800913c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009140:	bf00      	nop
 8009142:	3708      	adds	r7, #8
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <_ZN5L6470I8shield_1E21prepare_get_max_speedEv>:
    virtual void prepare_get_max_speed(void)
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2106      	movs	r1, #6
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2204      	movs	r2, #4
 8009164:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009168:	bf00      	nop
 800916a:	3708      	adds	r7, #8
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <_ZN5L6470I8shield_1E21prepare_get_min_speedEv>:
    virtual void prepare_get_min_speed(void)
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2107      	movs	r1, #7
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2205      	movs	r2, #5
 800918c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009190:	bf00      	nop
 8009192:	3708      	adds	r7, #8
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <_ZN5L6470I8shield_1E24prepare_get_accelerationEv>:
    virtual void prepare_get_acceleration(void)
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2104      	movs	r1, #4
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2206      	movs	r2, #6
 80091b4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80091b8:	bf00      	nop
 80091ba:	3708      	adds	r7, #8
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <_ZN5L6470I8shield_1E24prepare_get_decelerationEv>:
    virtual void prepare_get_deceleration(void)
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	2105      	movs	r1, #5
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2207      	movs	r2, #7
 80091dc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80091e0:	bf00      	nop
 80091e2:	3708      	adds	r7, #8
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <_ZN5L6470I8shield_1E21prepare_get_directionEv>:
    virtual void prepare_get_direction(void)
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
        if (!L6470_DaisyChain_HalfPrepared) {
 80091f0:	4b0b      	ldr	r3, [pc, #44]	; (8009220 <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x38>)
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d10a      	bne.n	800920e <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x26>
            L6470_DaisyChain_HalfPrepared = ONE_F;
 80091f8:	4b09      	ldr	r3, [pc, #36]	; (8009220 <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x38>)
 80091fa:	2201      	movs	r2, #1
 80091fc:	701a      	strb	r2, [r3, #0]
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4906      	ldr	r1, [pc, #24]	; (8009224 <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x3c>)
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	4798      	blx	r3
        prepared_action = PREPARED_GET_DIRECTION;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2208      	movs	r2, #8
 8009212:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009216:	bf00      	nop
 8009218:	3708      	adds	r7, #8
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	200001f9 	.word	0x200001f9
 8009224:	200001fc 	.word	0x200001fc

08009228 <_ZN5L6470I8shield_1E21prepare_set_parameterEjj>:
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	607a      	str	r2, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	68ba      	ldr	r2, [r7, #8]
 8009240:	b2d1      	uxtb	r1, r2
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2200      	movs	r2, #0
 800924c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009250:	bf00      	nop
 8009252:	3710      	adds	r7, #16
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <_ZN5L6470I8shield_1E16prepare_set_homeEv>:
    virtual void prepare_set_home(void)
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetPos();
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009276:	bf00      	nop
 8009278:	3708      	adds	r7, #8
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <_ZN5L6470I8shield_1E16prepare_set_markEv>:
    virtual void prepare_set_mark(void)
 800927e:	b580      	push	{r7, lr}
 8009280:	b082      	sub	sp, #8
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2200      	movs	r2, #0
 8009292:	2102      	movs	r1, #2
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2209      	movs	r2, #9
 800929c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80092a0:	bf00      	nop
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <_ZN5L6470I8shield_1E16prepare_set_markEi>:
    virtual void prepare_set_mark(signed int position)
 80092a8:	b590      	push	{r4, r7, lr}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80092ba:	681c      	ldr	r4, [r3, #0]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	6839      	ldr	r1, [r7, #0]
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	4798      	blx	r3
 80092cc:	4603      	mov	r3, r0
 80092ce:	461a      	mov	r2, r3
 80092d0:	2102      	movs	r1, #2
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80092de:	bf00      	nop
 80092e0:	370c      	adds	r7, #12
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd90      	pop	{r4, r7, pc}

080092e6 <_ZN5L6470I8shield_1E17prepare_set_speedEj>:
    virtual void prepare_set_speed(unsigned int speed)
 80092e6:	b590      	push	{r4, r7, lr}
 80092e8:	b083      	sub	sp, #12
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
 80092ee:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80092f8:	681c      	ldr	r4, [r3, #0]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	683a      	ldr	r2, [r7, #0]
 8009306:	ee07 2a90 	vmov	s15, r2
 800930a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800930e:	eeb0 0a67 	vmov.f32	s0, s15
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	4798      	blx	r3
 8009316:	4603      	mov	r3, r0
 8009318:	461a      	mov	r2, r3
 800931a:	2103      	movs	r1, #3
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009328:	bf00      	nop
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	bd90      	pop	{r4, r7, pc}

08009330 <_ZN5L6470I8shield_1E21prepare_set_max_speedEj>:
    virtual void prepare_set_max_speed(unsigned int speed)
 8009330:	b590      	push	{r4, r7, lr}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009342:	681c      	ldr	r4, [r3, #0]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	683a      	ldr	r2, [r7, #0]
 8009350:	ee07 2a90 	vmov	s15, r2
 8009354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009358:	eeb0 0a67 	vmov.f32	s0, s15
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	4798      	blx	r3
 8009360:	4603      	mov	r3, r0
 8009362:	461a      	mov	r2, r3
 8009364:	2106      	movs	r1, #6
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009372:	bf00      	nop
 8009374:	370c      	adds	r7, #12
 8009376:	46bd      	mov	sp, r7
 8009378:	bd90      	pop	{r4, r7, pc}

0800937a <_ZN5L6470I8shield_1E21prepare_set_min_speedEj>:
    virtual void prepare_set_min_speed(unsigned int speed)
 800937a:	b590      	push	{r4, r7, lr}
 800937c:	b083      	sub	sp, #12
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
 8009382:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800938c:	681c      	ldr	r4, [r3, #0]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	683a      	ldr	r2, [r7, #0]
 800939a:	ee07 2a90 	vmov	s15, r2
 800939e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093a2:	eeb0 0a67 	vmov.f32	s0, s15
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	4798      	blx	r3
 80093aa:	4603      	mov	r3, r0
 80093ac:	461a      	mov	r2, r3
 80093ae:	2107      	movs	r1, #7
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2200      	movs	r2, #0
 80093b8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80093bc:	bf00      	nop
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd90      	pop	{r4, r7, pc}

080093c4 <_ZN5L6470I8shield_1E24prepare_set_accelerationEj>:
    virtual void prepare_set_acceleration(unsigned int acceleration)
 80093c4:	b590      	push	{r4, r7, lr}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80093d6:	681c      	ldr	r4, [r3, #0]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	683a      	ldr	r2, [r7, #0]
 80093e4:	ee07 2a90 	vmov	s15, r2
 80093e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ec:	eeb0 0a67 	vmov.f32	s0, s15
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	4798      	blx	r3
 80093f4:	4603      	mov	r3, r0
 80093f6:	461a      	mov	r2, r3
 80093f8:	2104      	movs	r1, #4
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009406:	bf00      	nop
 8009408:	370c      	adds	r7, #12
 800940a:	46bd      	mov	sp, r7
 800940c:	bd90      	pop	{r4, r7, pc}

0800940e <_ZN5L6470I8shield_1E24prepare_set_decelerationEj>:
    virtual void prepare_set_deceleration(unsigned int deceleration)
 800940e:	b590      	push	{r4, r7, lr}
 8009410:	b083      	sub	sp, #12
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
 8009416:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009420:	681c      	ldr	r4, [r3, #0]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	683a      	ldr	r2, [r7, #0]
 800942e:	ee07 2a90 	vmov	s15, r2
 8009432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009436:	eeb0 0a67 	vmov.f32	s0, s15
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	4798      	blx	r3
 800943e:	4603      	mov	r3, r0
 8009440:	461a      	mov	r2, r3
 8009442:	2105      	movs	r1, #5
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009450:	bf00      	nop
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	bd90      	pop	{r4, r7, pc}

08009458 <_ZN5L6470I8shield_1E13prepare_go_toEi>:
    virtual void prepare_go_to(signed int position)
 8009458:	b590      	push	{r4, r7, lr}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800946a:	681c      	ldr	r4, [r3, #0]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	6839      	ldr	r1, [r7, #0]
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	4798      	blx	r3
 800947c:	4603      	mov	r3, r0
 800947e:	4619      	mov	r1, r3
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2200      	movs	r2, #0
 8009488:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800948c:	bf00      	nop
 800948e:	370c      	adds	r7, #12
 8009490:	46bd      	mov	sp, r7
 8009492:	bd90      	pop	{r4, r7, pc}

08009494 <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE>:
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 8009494:	b5b0      	push	{r4, r5, r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	4613      	mov	r3, r2
 80094a0:	71fb      	strb	r3, [r7, #7]
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80094aa:	681c      	ldr	r4, [r3, #0]
 80094ac:	79fb      	ldrb	r3, [r7, #7]
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d101      	bne.n	80094b6 <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 80094b2:	2501      	movs	r5, #1
 80094b4:	e000      	b.n	80094b8 <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 80094b6:	2500      	movs	r5, #0
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	68b9      	ldr	r1, [r7, #8]
 80094c4:	68f8      	ldr	r0, [r7, #12]
 80094c6:	4798      	blx	r3
 80094c8:	4603      	mov	r3, r0
 80094ca:	461a      	mov	r2, r3
 80094cc:	4629      	mov	r1, r5
 80094ce:	68f8      	ldr	r0, [r7, #12]
 80094d0:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80094da:	bf00      	nop
 80094dc:	3710      	adds	r7, #16
 80094de:	46bd      	mov	sp, r7
 80094e0:	bdb0      	pop	{r4, r5, r7, pc}

080094e2 <_ZN5L6470I8shield_1E15prepare_go_homeEv>:
    virtual void prepare_go_home(void)
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b082      	sub	sp, #8
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoHome();
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009500:	bf00      	nop
 8009502:	3708      	adds	r7, #8
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <_ZN5L6470I8shield_1E15prepare_go_markEv>:
    virtual void prepare_go_mark(void)
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoMark();
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009526:	bf00      	nop
 8009528:	3708      	adds	r7, #8
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 800952e:	b5b0      	push	{r4, r5, r7, lr}
 8009530:	b084      	sub	sp, #16
 8009532:	af00      	add	r7, sp, #0
 8009534:	60f8      	str	r0, [r7, #12]
 8009536:	607b      	str	r3, [r7, #4]
 8009538:	460b      	mov	r3, r1
 800953a:	72fb      	strb	r3, [r7, #11]
 800953c:	4613      	mov	r3, r2
 800953e:	72bb      	strb	r3, [r7, #10]
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009548:	681c      	ldr	r4, [r3, #0]
 800954a:	7abb      	ldrb	r3, [r7, #10]
 800954c:	2b01      	cmp	r3, #1
 800954e:	d101      	bne.n	8009554 <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8009550:	2501      	movs	r5, #1
 8009552:	e000      	b.n	8009556 <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8009554:	2500      	movs	r5, #0
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	ee07 2a90 	vmov	s15, r2
 8009566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800956a:	eeb0 0a67 	vmov.f32	s0, s15
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	4798      	blx	r3
 8009572:	4603      	mov	r3, r0
 8009574:	7af9      	ldrb	r1, [r7, #11]
 8009576:	462a      	mov	r2, r5
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2200      	movs	r2, #0
 8009580:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009584:	bf00      	nop
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bdb0      	pop	{r4, r5, r7, pc}

0800958c <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE>:
    virtual void prepare_run(StepperMotor::direction_t direction)
 800958c:	b5b0      	push	{r4, r5, r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	460b      	mov	r3, r1
 8009596:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80095a0:	681c      	ldr	r4, [r3, #0]
 80095a2:	78fb      	ldrb	r3, [r7, #3]
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d101      	bne.n	80095ac <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE+0x20>
 80095a8:	2501      	movs	r5, #1
 80095aa:	e000      	b.n	80095ae <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE+0x22>
 80095ac:	2500      	movs	r5, #0
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2106      	movs	r1, #6
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	4798      	blx	r3
 80095be:	4603      	mov	r3, r0
 80095c0:	461a      	mov	r2, r3
 80095c2:	4629      	mov	r1, r5
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80095d0:	bf00      	nop
 80095d2:	3708      	adds	r7, #8
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bdb0      	pop	{r4, r5, r7, pc}

080095d8 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj>:
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 80095d8:	b5b0      	push	{r4, r5, r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	460b      	mov	r3, r1
 80095e2:	607a      	str	r2, [r7, #4]
 80095e4:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80095ee:	681c      	ldr	r4, [r3, #0]
 80095f0:	7afb      	ldrb	r3, [r7, #11]
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d101      	bne.n	80095fa <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 80095f6:	2501      	movs	r5, #1
 80095f8:	e000      	b.n	80095fc <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 80095fa:	2500      	movs	r5, #0
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	ee07 2a90 	vmov	s15, r2
 800960c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009610:	eeb0 0a67 	vmov.f32	s0, s15
 8009614:	68f8      	ldr	r0, [r7, #12]
 8009616:	4798      	blx	r3
 8009618:	4603      	mov	r3, r0
 800961a:	461a      	mov	r2, r3
 800961c:	4629      	mov	r1, r5
 800961e:	68f8      	ldr	r0, [r7, #12]
 8009620:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2200      	movs	r2, #0
 8009626:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800962a:	bf00      	nop
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bdb0      	pop	{r4, r5, r7, pc}

08009632 <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj>:
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 8009632:	b580      	push	{r7, lr}
 8009634:	b084      	sub	sp, #16
 8009636:	af00      	add	r7, sp, #0
 8009638:	60f8      	str	r0, [r7, #12]
 800963a:	460b      	mov	r3, r1
 800963c:	607a      	str	r2, [r7, #4]
 800963e:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	7afa      	ldrb	r2, [r7, #11]
 800964c:	2a01      	cmp	r2, #1
 800964e:	d101      	bne.n	8009654 <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 8009650:	2101      	movs	r1, #1
 8009652:	e000      	b.n	8009656 <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 8009654:	2100      	movs	r1, #0
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	68f8      	ldr	r0, [r7, #12]
 800965a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2200      	movs	r2, #0
 8009660:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009664:	bf00      	nop
 8009666:	3710      	adds	r7, #16
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <_ZN5L6470I8shield_1E17prepare_soft_stopEv>:
    virtual void prepare_soft_stop(void)
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftStop();
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800968a:	bf00      	nop
 800968c:	3708      	adds	r7, #8
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}

08009692 <_ZN5L6470I8shield_1E17prepare_hard_stopEv>:
    virtual void prepare_hard_stop(void)
 8009692:	b580      	push	{r7, lr}
 8009694:	b082      	sub	sp, #8
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardStop();
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80096b0:	bf00      	nop
 80096b2:	3708      	adds	r7, #8
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <_ZN5L6470I8shield_1E16prepare_soft_hizEv>:
    virtual void prepare_soft_hiz(void)
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftHiZ();
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80096d6:	bf00      	nop
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <_ZN5L6470I8shield_1E16prepare_hard_hizEv>:
    virtual void prepare_hard_hiz(void)
 80096de:	b580      	push	{r7, lr}
 80096e0:	b082      	sub	sp, #8
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardHiZ();
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80096fc:	bf00      	nop
 80096fe:	3708      	adds	r7, #8
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE>:
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	460b      	mov	r3, r1
 800970e:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	78fa      	ldrb	r2, [r7, #3]
 800971c:	2a01      	cmp	r2, #1
 800971e:	d101      	bne.n	8009724 <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 8009720:	2201      	movs	r2, #1
 8009722:	e000      	b.n	8009726 <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 8009724:	2200      	movs	r2, #0
 8009726:	4611      	mov	r1, r2
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009734:	bf00      	nop
 8009736:	3708      	adds	r7, #8
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	460b      	mov	r3, r1
 8009746:	70fb      	strb	r3, [r7, #3]
 8009748:	4613      	mov	r3, r2
 800974a:	70bb      	strb	r3, [r7, #2]
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	78ba      	ldrb	r2, [r7, #2]
 8009758:	2a01      	cmp	r2, #1
 800975a:	d101      	bne.n	8009760 <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 800975c:	2201      	movs	r2, #1
 800975e:	e000      	b.n	8009762 <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8009760:	2200      	movs	r2, #0
 8009762:	78f9      	ldrb	r1, [r7, #3]
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009770:	bf00      	nop
 8009772:	3708      	adds	r7, #8
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <_ZN5L6470I8shield_1E20prepare_reset_deviceEv>:
    virtual void prepare_reset_device(void)
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetDevice();
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2200      	movs	r2, #0
 8009792:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009796:	bf00      	nop
 8009798:	3708      	adds	r7, #8
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <_ZN5L6470I8shield_1E24perform_prepared_actionsEv>:
    uint8_t* perform_prepared_actions(void)
 800979e:	b580      	push	{r7, lr}
 80097a0:	b082      	sub	sp, #8
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
        return L6470_PerformPreparedApplicationCommand();
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	4798      	blx	r3
 80097b4:	4603      	mov	r3, r0
    }
 80097b6:	4618      	mov	r0, r3
 80097b8:	3708      	adds	r7, #8
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <_ZN5L6470I8shield_1E19get_prepared_actionEv>:
    prepared_action_t get_prepared_action(void)
 80097be:	b480      	push	{r7}
 80097c0:	b083      	sub	sp, #12
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
        return prepared_action;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    }
 80097cc:	4618      	mov	r0, r3
 80097ce:	370c      	adds	r7, #12
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr

080097d8 <_ZN5L6470I8shield_1E10get_resultEPh>:
    int32_t get_result(uint8_t *raw_data)
 80097d8:	b5b0      	push	{r4, r5, r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
        switch (prepared_action) {
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80097e8:	3b01      	subs	r3, #1
 80097ea:	2b07      	cmp	r3, #7
 80097ec:	f200 80fe 	bhi.w	80099ec <_ZN5L6470I8shield_1E10get_resultEPh+0x214>
 80097f0:	a201      	add	r2, pc, #4	; (adr r2, 80097f8 <_ZN5L6470I8shield_1E10get_resultEPh+0x20>)
 80097f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f6:	bf00      	nop
 80097f8:	08009819 	.word	0x08009819
 80097fc:	08009845 	.word	0x08009845
 8009800:	08009873 	.word	0x08009873
 8009804:	080098b7 	.word	0x080098b7
 8009808:	080098fd 	.word	0x080098fd
 800980c:	08009943 	.word	0x08009943
 8009810:	08009989 	.word	0x08009989
 8009814:	080099cf 	.word	0x080099cf
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8009820:	681c      	ldr	r4, [r3, #0]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	6a12      	ldr	r2, [r2, #32]
 8009830:	7b92      	ldrb	r2, [r2, #14]
 8009832:	6839      	ldr	r1, [r7, #0]
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	4798      	blx	r3
 8009838:	4603      	mov	r3, r0
 800983a:	4619      	mov	r1, r3
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	47a0      	blx	r4
 8009840:	4603      	mov	r3, r0
 8009842:	e0d4      	b.n	80099ee <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800984c:	681c      	ldr	r4, [r3, #0]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	6a12      	ldr	r2, [r2, #32]
 800985c:	3228      	adds	r2, #40	; 0x28
 800985e:	7b92      	ldrb	r2, [r2, #14]
 8009860:	6839      	ldr	r1, [r7, #0]
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	4798      	blx	r3
 8009866:	4603      	mov	r3, r0
 8009868:	4619      	mov	r1, r3
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	47a0      	blx	r4
 800986e:	4603      	mov	r3, r0
 8009870:	e0bd      	b.n	80099ee <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800987a:	681c      	ldr	r4, [r3, #0]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8009884:	681d      	ldr	r5, [r3, #0]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	6a12      	ldr	r2, [r2, #32]
 8009894:	323c      	adds	r2, #60	; 0x3c
 8009896:	7b92      	ldrb	r2, [r2, #14]
 8009898:	6839      	ldr	r1, [r7, #0]
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	4798      	blx	r3
 800989e:	4603      	mov	r3, r0
 80098a0:	4619      	mov	r1, r3
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	47a8      	blx	r5
 80098a6:	eef0 7a40 	vmov.f32	s15, s0
 80098aa:	eeb0 0a67 	vmov.f32	s0, s15
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	47a0      	blx	r4
 80098b2:	4603      	mov	r3, r0
 80098b4:	e09b      	b.n	80099ee <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80098be:	681c      	ldr	r4, [r3, #0]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80098c8:	681d      	ldr	r5, [r3, #0]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f503 730d 	add.w	r3, r3, #564	; 0x234
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	6a12      	ldr	r2, [r2, #32]
 80098d8:	3278      	adds	r2, #120	; 0x78
 80098da:	7b92      	ldrb	r2, [r2, #14]
 80098dc:	6839      	ldr	r1, [r7, #0]
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	4798      	blx	r3
 80098e2:	4603      	mov	r3, r0
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	4619      	mov	r1, r3
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	47a8      	blx	r5
 80098ec:	eef0 7a40 	vmov.f32	s15, s0
 80098f0:	eeb0 0a67 	vmov.f32	s0, s15
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	47a0      	blx	r4
 80098f8:	4603      	mov	r3, r0
 80098fa:	e078      	b.n	80099ee <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8009904:	681c      	ldr	r4, [r3, #0]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800990e:	681d      	ldr	r5, [r3, #0]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	6a12      	ldr	r2, [r2, #32]
 800991e:	328c      	adds	r2, #140	; 0x8c
 8009920:	7b92      	ldrb	r2, [r2, #14]
 8009922:	6839      	ldr	r1, [r7, #0]
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	4798      	blx	r3
 8009928:	4603      	mov	r3, r0
 800992a:	b29b      	uxth	r3, r3
 800992c:	4619      	mov	r1, r3
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	47a8      	blx	r5
 8009932:	eef0 7a40 	vmov.f32	s15, s0
 8009936:	eeb0 0a67 	vmov.f32	s0, s15
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	47a0      	blx	r4
 800993e:	4603      	mov	r3, r0
 8009940:	e055      	b.n	80099ee <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800994a:	681c      	ldr	r4, [r3, #0]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009954:	681d      	ldr	r5, [r3, #0]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	6a12      	ldr	r2, [r2, #32]
 8009964:	3250      	adds	r2, #80	; 0x50
 8009966:	7b92      	ldrb	r2, [r2, #14]
 8009968:	6839      	ldr	r1, [r7, #0]
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	4798      	blx	r3
 800996e:	4603      	mov	r3, r0
 8009970:	b29b      	uxth	r3, r3
 8009972:	4619      	mov	r1, r3
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	47a8      	blx	r5
 8009978:	eef0 7a40 	vmov.f32	s15, s0
 800997c:	eeb0 0a67 	vmov.f32	s0, s15
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	47a0      	blx	r4
 8009984:	4603      	mov	r3, r0
 8009986:	e032      	b.n	80099ee <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8009990:	681c      	ldr	r4, [r3, #0]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800999a:	681d      	ldr	r5, [r3, #0]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f503 730d 	add.w	r3, r3, #564	; 0x234
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	6a12      	ldr	r2, [r2, #32]
 80099aa:	3264      	adds	r2, #100	; 0x64
 80099ac:	7b92      	ldrb	r2, [r2, #14]
 80099ae:	6839      	ldr	r1, [r7, #0]
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	4798      	blx	r3
 80099b4:	4603      	mov	r3, r0
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	4619      	mov	r1, r3
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	47a8      	blx	r5
 80099be:	eef0 7a40 	vmov.f32	s15, s0
 80099c2:	eeb0 0a67 	vmov.f32	s0, s15
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	47a0      	blx	r4
 80099ca:	4603      	mov	r3, r0
 80099cc:	e00f      	b.n	80099ee <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	2104      	movs	r1, #4
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	4798      	blx	r3
 80099de:	4603      	mov	r3, r0
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d101      	bne.n	80099e8 <_ZN5L6470I8shield_1E10get_resultEPh+0x210>
 80099e4:	2301      	movs	r3, #1
 80099e6:	e002      	b.n	80099ee <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
 80099e8:	2300      	movs	r3, #0
 80099ea:	e000      	b.n	80099ee <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return 0;
 80099ec:	2300      	movs	r3, #0
    }
 80099ee:	4618      	mov	r0, r3
 80099f0:	3708      	adds	r7, #8
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bdb0      	pop	{r4, r5, r7, pc}
 80099f6:	bf00      	nop

080099f8 <_ZN5L6470I8shield_1E13L6470_DISABLEEv>:
    void L6470_DISABLE(void)
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6898      	ldr	r0, [r3, #8]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	899b      	ldrh	r3, [r3, #12]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	f006 fa48 	bl	800fea0 <HAL_GPIO_WritePin>
    }
 8009a10:	bf00      	nop
 8009a12:	3708      	adds	r7, #8
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm>:
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]
  if (AbsPos > L6470_MAX_POSITION)
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a28:	d303      	bcc.n	8009a32 <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	f5a3 0380 	sub.w	r3, r3, #4194304	; 0x400000
 8009a30:	e000      	b.n	8009a34 <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm+0x1c>
    return AbsPos;
 8009a32:	683b      	ldr	r3, [r7, #0]
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	370c      	adds	r7, #12
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr

08009a40 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl>:
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 8009a40:	b480      	push	{r7}
 8009a42:	b083      	sub	sp, #12
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	db05      	blt.n	8009a5c <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x1c>
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a56:	da01      	bge.n	8009a5c <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	e00c      	b.n	8009a76 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x36>
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
 8009a62:	db06      	blt.n	8009a72 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x32>
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	da03      	bge.n	8009a72 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
 8009a70:	e001      	b.n	8009a76 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x36>
      return (L6470_POSITION_RANGE + 1);        // OVF
 8009a72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	370c      	adds	r7, #12
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
	...

08009a84 <_ZN5L6470I8shield_1E20L6470_Speed_2_Step_sEm>:
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 8009a84:	b480      	push	{r7}
 8009a86:	b083      	sub	sp, #12
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  return (Speed * ((float)14.9012e-3));
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	ee07 3a90 	vmov	s15, r3
 8009a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a98:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8009ab0 <_ZN5L6470I8shield_1E20L6470_Speed_2_Step_sEm+0x2c>
 8009a9c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8009aa0:	eeb0 0a67 	vmov.f32	s0, s15
 8009aa4:	370c      	adds	r7, #12
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr
 8009aae:	bf00      	nop
 8009ab0:	3c74242a 	.word	0x3c74242a

08009ab4 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf>:
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 8009ab4:	b480      	push	{r7}
 8009ab6:	b083      	sub	sp, #12
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 8009ac0:	edd7 7a00 	vldr	s15, [r7]
 8009ac4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8009af8 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x44>
 8009ac8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ad0:	d80a      	bhi.n	8009ae8 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 8009ad2:	ed97 7a00 	vldr	s14, [r7]
 8009ad6:	eddf 6a09 	vldr	s13, [pc, #36]	; 8009afc <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x48>
 8009ada:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009ade:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ae2:	ee17 3a90 	vmov	r3, s15
 8009ae6:	e000      	b.n	8009aea <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x36>
    return 0;   // Warning
 8009ae8:	2300      	movs	r3, #0
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	370c      	adds	r7, #12
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr
 8009af6:	bf00      	nop
 8009af8:	4674241b 	.word	0x4674241b
 8009afc:	3c74242a 	.word	0x3c74242a

08009b00 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et>:
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	460b      	mov	r3, r1
 8009b0a:	807b      	strh	r3, [r7, #2]
  if (Acc <= L6470_MAX_ACC)
 8009b0c:	887b      	ldrh	r3, [r7, #2]
 8009b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b12:	d209      	bcs.n	8009b28 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 8009b14:	887b      	ldrh	r3, [r7, #2]
 8009b16:	ee07 3a90 	vmov	s15, r3
 8009b1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b1e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8009b3c <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x3c>
 8009b22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009b26:	e001      	b.n	8009b2c <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x2c>
    return 0;   // Warning
 8009b28:	eddf 7a05 	vldr	s15, [pc, #20]	; 8009b40 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x40>
}
 8009b2c:	eeb0 0a67 	vmov.f32	s0, s15
 8009b30:	370c      	adds	r7, #12
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr
 8009b3a:	bf00      	nop
 8009b3c:	4168d4fe 	.word	0x4168d4fe
 8009b40:	00000000 	.word	0x00000000

08009b44 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 8009b50:	edd7 7a00 	vldr	s15, [r7]
 8009b54:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8009b88 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x44>
 8009b58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b60:	d80b      	bhi.n	8009b7a <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8009b62:	ed97 7a00 	vldr	s14, [r7]
 8009b66:	eddf 6a09 	vldr	s13, [pc, #36]	; 8009b8c <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x48>
 8009b6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b72:	ee17 3a90 	vmov	r3, s15
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	e000      	b.n	8009b7c <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x38>
    return 0;   // Warning
 8009b7a:	2300      	movs	r3, #0
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr
 8009b88:	4768c671 	.word	0x4768c671
 8009b8c:	4168d4fe 	.word	0x4168d4fe

08009b90 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et>:
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	460b      	mov	r3, r1
 8009b9a:	807b      	strh	r3, [r7, #2]
  if (Dec <= L6470_MAX_DEC)
 8009b9c:	887b      	ldrh	r3, [r7, #2]
 8009b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ba2:	d209      	bcs.n	8009bb8 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 8009ba4:	887b      	ldrh	r3, [r7, #2]
 8009ba6:	ee07 3a90 	vmov	s15, r3
 8009baa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009bae:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8009bcc <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x3c>
 8009bb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009bb6:	e001      	b.n	8009bbc <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x2c>
    return 0;   // Warning
 8009bb8:	eddf 7a05 	vldr	s15, [pc, #20]	; 8009bd0 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x40>
}
 8009bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8009bc0:	370c      	adds	r7, #12
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr
 8009bca:	bf00      	nop
 8009bcc:	4168d4fe 	.word	0x4168d4fe
 8009bd0:	00000000 	.word	0x00000000

08009bd4 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 8009be0:	edd7 7a00 	vldr	s15, [r7]
 8009be4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8009c18 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x44>
 8009be8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bf0:	d80b      	bhi.n	8009c0a <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8009bf2:	ed97 7a00 	vldr	s14, [r7]
 8009bf6:	eddf 6a09 	vldr	s13, [pc, #36]	; 8009c1c <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x48>
 8009bfa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009bfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c02:	ee17 3a90 	vmov	r3, s15
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	e000      	b.n	8009c0c <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x38>
    return 0;   // Warning
 8009c0a:	2300      	movs	r3, #0
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	370c      	adds	r7, #12
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr
 8009c18:	4768c671 	.word	0x4768c671
 8009c1c:	4168d4fe 	.word	0x4168d4fe

08009c20 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	460b      	mov	r3, r1
 8009c2a:	807b      	strh	r3, [r7, #2]
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 8009c2c:	887b      	ldrh	r3, [r7, #2]
 8009c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c32:	d209      	bcs.n	8009c48 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 8009c34:	887b      	ldrh	r3, [r7, #2]
 8009c36:	ee07 3a90 	vmov	s15, r3
 8009c3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c3e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8009c5c <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 8009c42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c46:	e001      	b.n	8009c4c <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 8009c48:	eddf 7a05 	vldr	s15, [pc, #20]	; 8009c60 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 8009c4c:	eeb0 0a67 	vmov.f32	s0, s15
 8009c50:	370c      	adds	r7, #12
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr
 8009c5a:	bf00      	nop
 8009c5c:	4174240b 	.word	0x4174240b
 8009c60:	00000000 	.word	0x00000000

08009c64 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 8009c70:	edd7 7a00 	vldr	s15, [r7]
 8009c74:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8009ca8 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x44>
 8009c78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c80:	d80b      	bhi.n	8009c9a <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 8009c82:	ed97 7a00 	vldr	s14, [r7]
 8009c86:	eddf 6a09 	vldr	s13, [pc, #36]	; 8009cac <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x48>
 8009c8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009c8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c92:	ee17 3a90 	vmov	r3, s15
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	e000      	b.n	8009c9c <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x38>
    return 0;   // Warning
 8009c9a:	2300      	movs	r3, #0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	370c      	adds	r7, #12
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr
 8009ca8:	4673e702 	.word	0x4673e702
 8009cac:	4174240b 	.word	0x4174240b

08009cb0 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 8009cb0:	b480      	push	{r7}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	460b      	mov	r3, r1
 8009cba:	807b      	strh	r3, [r7, #2]
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 8009cbc:	887b      	ldrh	r3, [r7, #2]
 8009cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cc2:	d209      	bcs.n	8009cd8 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 8009cc4:	887b      	ldrh	r3, [r7, #2]
 8009cc6:	ee07 3a90 	vmov	s15, r3
 8009cca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009cce:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8009cec <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x3c>
 8009cd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009cd6:	e001      	b.n	8009cdc <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 8009cd8:	eddf 7a05 	vldr	s15, [pc, #20]	; 8009cf0 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 8009cdc:	eeb0 0a67 	vmov.f32	s0, s15
 8009ce0:	370c      	adds	r7, #12
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop
 8009cec:	3e742401 	.word	0x3e742401
 8009cf0:	00000000 	.word	0x00000000

08009cf4 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 8009d00:	edd7 7a00 	vldr	s15, [r7]
 8009d04:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8009d38 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x44>
 8009d08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d10:	d80b      	bhi.n	8009d2a <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 8009d12:	ed97 7a00 	vldr	s14, [r7]
 8009d16:	eddf 6a09 	vldr	s13, [pc, #36]	; 8009d3c <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x48>
 8009d1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009d1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d22:	ee17 3a90 	vmov	r3, s15
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	e000      	b.n	8009d2c <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x38>
    return 0;   // Warning
 8009d2a:	2300      	movs	r3, #0
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	370c      	adds	r7, #12
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr
 8009d38:	447414bf 	.word	0x447414bf
 8009d3c:	3e742401 	.word	0x3e742401

08009d40 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt>:
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b082      	sub	sp, #8
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	460b      	mov	r3, r1
 8009d4a:	807b      	strh	r3, [r7, #2]
  if (FsSpd <= L6470_MAX_FS_SPD)
 8009d4c:	887b      	ldrh	r3, [r7, #2]
 8009d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d52:	d219      	bcs.n	8009d88 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 8009d54:	887b      	ldrh	r3, [r7, #2]
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7f6 fc14 	bl	8000584 <__aeabi_i2d>
 8009d5c:	f04f 0200 	mov.w	r2, #0
 8009d60:	4b0e      	ldr	r3, [pc, #56]	; (8009d9c <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x5c>)
 8009d62:	f7f6 fac3 	bl	80002ec <__adddf3>
 8009d66:	4602      	mov	r2, r0
 8009d68:	460b      	mov	r3, r1
 8009d6a:	4610      	mov	r0, r2
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	f04f 0200 	mov.w	r2, #0
 8009d72:	4b0b      	ldr	r3, [pc, #44]	; (8009da0 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x60>)
 8009d74:	f7f6 fc70 	bl	8000658 <__aeabi_dmul>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	4610      	mov	r0, r2
 8009d7e:	4619      	mov	r1, r3
 8009d80:	f7f6 ff42 	bl	8000c08 <__aeabi_d2f>
 8009d84:	4603      	mov	r3, r0
 8009d86:	e001      	b.n	8009d8c <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x4c>
    return 0;   // Warning
 8009d88:	f04f 0300 	mov.w	r3, #0
}
 8009d8c:	ee07 3a90 	vmov	s15, r3
 8009d90:	eeb0 0a67 	vmov.f32	s0, s15
 8009d94:	3708      	adds	r7, #8
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	3fe00000 	.word	0x3fe00000
 8009da0:	402e8000 	.word	0x402e8000

08009da4 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 8009db0:	edd7 7a00 	vldr	s15, [r7]
 8009db4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8009df0 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x4c>
 8009db8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dc0:	d80f      	bhi.n	8009de2 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 8009dc2:	ed97 7a00 	vldr	s14, [r7]
 8009dc6:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8009df4 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x50>
 8009dca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009dce:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009dd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009dd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009dda:	ee17 3a90 	vmov	r3, s15
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	e000      	b.n	8009de4 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x40>
    return 0;   // Warning
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr
 8009df0:	4673e180 	.word	0x4673e180
 8009df4:	41740000 	.word	0x41740000

08009df8 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	460b      	mov	r3, r1
 8009e02:	807b      	strh	r3, [r7, #2]
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 8009e04:	887b      	ldrh	r3, [r7, #2]
 8009e06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e0a:	d209      	bcs.n	8009e20 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 8009e0c:	887b      	ldrh	r3, [r7, #2]
 8009e0e:	ee07 3a90 	vmov	s15, r3
 8009e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e16:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8009e34 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x3c>
 8009e1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009e1e:	e001      	b.n	8009e24 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 8009e20:	eddf 7a05 	vldr	s15, [pc, #20]	; 8009e38 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 8009e24:	eeb0 0a67 	vmov.f32	s0, s15
 8009e28:	370c      	adds	r7, #12
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr
 8009e32:	bf00      	nop
 8009e34:	3d7423f4 	.word	0x3d7423f4
 8009e38:	00000000 	.word	0x00000000

08009e3c <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 8009e48:	edd7 7a00 	vldr	s15, [r7]
 8009e4c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8009e80 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x44>
 8009e50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e58:	d80b      	bhi.n	8009e72 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 8009e5a:	ed97 7a00 	vldr	s14, [r7]
 8009e5e:	eddf 6a09 	vldr	s13, [pc, #36]	; 8009e84 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x48>
 8009e62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009e66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e6a:	ee17 3a90 	vmov	r3, s15
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	e000      	b.n	8009e74 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x38>
    return 0;   // Warning
 8009e72:	2300      	movs	r3, #0
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	370c      	adds	r7, #12
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr
 8009e80:	44742023 	.word	0x44742023
 8009e84:	3d7423f4 	.word	0x3d7423f4

08009e88 <_ZN5L6470I8shield_1E20L6470_StSlp_2_s_StepEh>:
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	460b      	mov	r3, r1
 8009e92:	70fb      	strb	r3, [r7, #3]
    return (StSlp * ((float)1.5686e-5));
 8009e94:	78fb      	ldrb	r3, [r7, #3]
 8009e96:	ee07 3a90 	vmov	s15, r3
 8009e9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e9e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8009eb4 <_ZN5L6470I8shield_1E20L6470_StSlp_2_s_StepEh+0x2c>
 8009ea2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8009ea6:	eeb0 0a67 	vmov.f32	s0, s15
 8009eaa:	370c      	adds	r7, #12
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr
 8009eb4:	3783956e 	.word	0x3783956e

08009eb8 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 8009ec4:	edd7 7a02 	vldr	s15, [r7, #8]
 8009ec8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8009f00 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x48>
 8009ecc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ed4:	d80c      	bhi.n	8009ef0 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8009ed6:	ed97 7a02 	vldr	s14, [r7, #8]
 8009eda:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8009f04 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x4c>
 8009ede:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009ee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ee6:	edc7 7a01 	vstr	s15, [r7, #4]
 8009eea:	793b      	ldrb	r3, [r7, #4]
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	e000      	b.n	8009ef2 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x3a>
    return 0;   // Warning
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3714      	adds	r7, #20
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr
 8009efe:	bf00      	nop
 8009f00:	3b8311d9 	.word	0x3b8311d9
 8009f04:	3783956e 	.word	0x3783956e

08009f08 <_ZN5L6470I8shield_1E23L6470_FnSlpAcc_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	460b      	mov	r3, r1
 8009f12:	70fb      	strb	r3, [r7, #3]
    return (FnSlpAcc * ((float)1.5686e-5));
 8009f14:	78fb      	ldrb	r3, [r7, #3]
 8009f16:	ee07 3a90 	vmov	s15, r3
 8009f1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f1e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8009f34 <_ZN5L6470I8shield_1E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 8009f22:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8009f26:	eeb0 0a67 	vmov.f32	s0, s15
 8009f2a:	370c      	adds	r7, #12
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr
 8009f34:	3783956e 	.word	0x3783956e

08009f38 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 8009f44:	edd7 7a02 	vldr	s15, [r7, #8]
 8009f48:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8009f80 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x48>
 8009f4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f54:	d80c      	bhi.n	8009f70 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8009f56:	ed97 7a02 	vldr	s14, [r7, #8]
 8009f5a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8009f84 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 8009f5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009f62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f66:	edc7 7a01 	vstr	s15, [r7, #4]
 8009f6a:	793b      	ldrb	r3, [r7, #4]
 8009f6c:	b2db      	uxtb	r3, r3
 8009f6e:	e000      	b.n	8009f72 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x3a>
    return 0;   // Warning
 8009f70:	2300      	movs	r3, #0
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3714      	adds	r7, #20
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr
 8009f7e:	bf00      	nop
 8009f80:	3b8311d9 	.word	0x3b8311d9
 8009f84:	3783956e 	.word	0x3783956e

08009f88 <_ZN5L6470I8shield_1E23L6470_FnSlpDec_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 8009f88:	b480      	push	{r7}
 8009f8a:	b083      	sub	sp, #12
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	460b      	mov	r3, r1
 8009f92:	70fb      	strb	r3, [r7, #3]
    return (FnSlpDec * ((float)1.5686e-5));
 8009f94:	78fb      	ldrb	r3, [r7, #3]
 8009f96:	ee07 3a90 	vmov	s15, r3
 8009f9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f9e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8009fb4 <_ZN5L6470I8shield_1E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 8009fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8009fa6:	eeb0 0a67 	vmov.f32	s0, s15
 8009faa:	370c      	adds	r7, #12
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr
 8009fb4:	3783956e 	.word	0x3783956e

08009fb8 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 8009fb8:	b480      	push	{r7}
 8009fba:	b085      	sub	sp, #20
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 8009fc4:	edd7 7a02 	vldr	s15, [r7, #8]
 8009fc8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800a000 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x48>
 8009fcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fd4:	d80c      	bhi.n	8009ff0 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8009fd6:	ed97 7a02 	vldr	s14, [r7, #8]
 8009fda:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800a004 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 8009fde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009fe2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fe6:	edc7 7a01 	vstr	s15, [r7, #4]
 8009fea:	793b      	ldrb	r3, [r7, #4]
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	e000      	b.n	8009ff2 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x3a>
    return 0;   // Warning
 8009ff0:	2300      	movs	r3, #0
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3714      	adds	r7, #20
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop
 800a000:	3b8311d9 	.word	0x3b8311d9
 800a004:	3783956e 	.word	0x3783956e

0800a008 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh>:
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 800a008:	b480      	push	{r7}
 800a00a:	b083      	sub	sp, #12
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	460b      	mov	r3, r1
 800a012:	70fb      	strb	r3, [r7, #3]
  if (OcdTh <= L6470_MAX_OCD_TH)
 800a014:	78fb      	ldrb	r3, [r7, #3]
 800a016:	2b0f      	cmp	r3, #15
 800a018:	d80a      	bhi.n	800a030 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 800a01a:	78fb      	ldrb	r3, [r7, #3]
 800a01c:	3301      	adds	r3, #1
 800a01e:	ee07 3a90 	vmov	s15, r3
 800a022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a026:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800a044 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x3c>
 800a02a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a02e:	e001      	b.n	800a034 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x2c>
    return 0;   // Warning
 800a030:	eddf 7a05 	vldr	s15, [pc, #20]	; 800a048 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x40>
}
 800a034:	eeb0 0a67 	vmov.f32	s0, s15
 800a038:	370c      	adds	r7, #12
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr
 800a042:	bf00      	nop
 800a044:	43bb8000 	.word	0x43bb8000
 800a048:	00000000 	.word	0x00000000

0800a04c <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 800a04c:	b480      	push	{r7}
 800a04e:	b087      	sub	sp, #28
 800a050:	af00      	add	r7, sp, #0
 800a052:	60f8      	str	r0, [r7, #12]
 800a054:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 800a058:	edd7 7a02 	vldr	s15, [r7, #8]
 800a05c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800a0e8 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x9c>
 800a060:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a068:	d836      	bhi.n	800a0d8 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8c>
    result = (mA / ((float)375));
 800a06a:	ed97 7a02 	vldr	s14, [r7, #8]
 800a06e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800a0ec <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0xa0>
 800a072:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a076:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800a07a:	edd7 7a05 	vldr	s15, [r7, #20]
 800a07e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a082:	edc7 7a01 	vstr	s15, [r7, #4]
 800a086:	793b      	ldrb	r3, [r7, #4]
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	ee07 3a90 	vmov	s15, r3
 800a08e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a092:	ed97 7a05 	vldr	s14, [r7, #20]
 800a096:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a09a:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 800a09e:	edd7 7a04 	vldr	s15, [r7, #16]
 800a0a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a0a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a0aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0ae:	d50a      	bpl.n	800a0c6 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 800a0b0:	edd7 7a05 	vldr	s15, [r7, #20]
 800a0b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0b8:	edc7 7a01 	vstr	s15, [r7, #4]
 800a0bc:	793b      	ldrb	r3, [r7, #4]
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	3b01      	subs	r3, #1
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	e009      	b.n	800a0da <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8e>
      return ((uint8_t)result);    
 800a0c6:	edd7 7a05 	vldr	s15, [r7, #20]
 800a0ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0ce:	edc7 7a01 	vstr	s15, [r7, #4]
 800a0d2:	793b      	ldrb	r3, [r7, #4]
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	e000      	b.n	800a0da <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8e>
    return 0;   // Warning
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	371c      	adds	r7, #28
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr
 800a0e6:	bf00      	nop
 800a0e8:	45bb8000 	.word	0x45bb8000
 800a0ec:	43bb8000 	.word	0x43bb8000

0800a0f0 <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh>:
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	70fb      	strb	r3, [r7, #3]
  if (StallTh <= L6470_MAX_STALL_TH)
 800a0fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a100:	2b00      	cmp	r3, #0
 800a102:	db0a      	blt.n	800a11a <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 800a104:	78fb      	ldrb	r3, [r7, #3]
 800a106:	3301      	adds	r3, #1
 800a108:	ee07 3a90 	vmov	s15, r3
 800a10c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a110:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800a12c <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x3c>
 800a114:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a118:	e001      	b.n	800a11e <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x2e>
    return 0;   // Warning
 800a11a:	eddf 7a05 	vldr	s15, [pc, #20]	; 800a130 <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x40>
}
 800a11e:	eeb0 0a67 	vmov.f32	s0, s15
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr
 800a12c:	41fa0000 	.word	0x41fa0000
 800a130:	00000000 	.word	0x00000000

0800a134 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 800a134:	b480      	push	{r7}
 800a136:	b087      	sub	sp, #28
 800a138:	af00      	add	r7, sp, #0
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 800a140:	edd7 7a02 	vldr	s15, [r7, #8]
 800a144:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800a1d0 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x9c>
 800a148:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a14c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a150:	d836      	bhi.n	800a1c0 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8c>
    result = (mA / ((float)31.25));
 800a152:	ed97 7a02 	vldr	s14, [r7, #8]
 800a156:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800a1d4 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0xa0>
 800a15a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a15e:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800a162:	edd7 7a05 	vldr	s15, [r7, #20]
 800a166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a16a:	edc7 7a01 	vstr	s15, [r7, #4]
 800a16e:	793b      	ldrb	r3, [r7, #4]
 800a170:	b2db      	uxtb	r3, r3
 800a172:	ee07 3a90 	vmov	s15, r3
 800a176:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a17a:	ed97 7a05 	vldr	s14, [r7, #20]
 800a17e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a182:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 800a186:	edd7 7a04 	vldr	s15, [r7, #16]
 800a18a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a18e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a196:	d50a      	bpl.n	800a1ae <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 800a198:	edd7 7a05 	vldr	s15, [r7, #20]
 800a19c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1a0:	edc7 7a01 	vstr	s15, [r7, #4]
 800a1a4:	793b      	ldrb	r3, [r7, #4]
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	3b01      	subs	r3, #1
 800a1aa:	b2db      	uxtb	r3, r3
 800a1ac:	e009      	b.n	800a1c2 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8e>
      return ((uint8_t)result);    
 800a1ae:	edd7 7a05 	vldr	s15, [r7, #20]
 800a1b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1b6:	edc7 7a01 	vstr	s15, [r7, #4]
 800a1ba:	793b      	ldrb	r3, [r7, #4]
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	e000      	b.n	800a1c2 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8e>
    return 0;   // Warning
 800a1c0:	2300      	movs	r3, #0
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	371c      	adds	r7, #28
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	457a0000 	.word	0x457a0000
 800a1d4:	41fa0000 	.word	0x41fa0000

0800a1d8 <_ZN5L6470I8shield_1E12L6470_ConfigEPv>:
status_t L6470<shield_x>::L6470_Config(void *init)
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b086      	sub	sp, #24
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
  reset_device();
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	3394      	adds	r3, #148	; 0x94
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	68f8      	ldr	r0, [r7, #12]
 800a1ec:	4798      	blx	r3
  get_status();
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	330c      	adds	r3, #12
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	4798      	blx	r3
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	697a      	ldr	r2, [r7, #20]
 800a20a:	edd2 7a05 	vldr	s15, [r2, #20]
 800a20e:	eeb0 0a67 	vmov.f32	s0, s15
 800a212:	68f8      	ldr	r0, [r7, #12]
 800a214:	4798      	blx	r3
 800a216:	4603      	mov	r3, r0
 800a218:	461a      	mov	r2, r3
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	697a      	ldr	r2, [r7, #20]
 800a22c:	edd2 7a06 	vldr	s15, [r2, #24]
 800a230:	eeb0 0a67 	vmov.f32	s0, s15
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	4798      	blx	r3
 800a238:	4603      	mov	r3, r0
 800a23a:	461a      	mov	r2, r3
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	697a      	ldr	r2, [r7, #20]
 800a24e:	edd2 7a07 	vldr	s15, [r2, #28]
 800a252:	eeb0 0a67 	vmov.f32	s0, s15
 800a256:	68f8      	ldr	r0, [r7, #12]
 800a258:	4798      	blx	r3
 800a25a:	4603      	mov	r3, r0
 800a25c:	461a      	mov	r2, r3
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	697a      	ldr	r2, [r7, #20]
 800a270:	edd2 7a08 	vldr	s15, [r2, #32]
 800a274:	eeb0 0a67 	vmov.f32	s0, s15
 800a278:	68f8      	ldr	r0, [r7, #12]
 800a27a:	4798      	blx	r3
 800a27c:	4603      	mov	r3, r0
 800a27e:	461a      	mov	r2, r3
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	697a      	ldr	r2, [r7, #20]
 800a292:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800a296:	eeb0 0a67 	vmov.f32	s0, s15
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	4798      	blx	r3
 800a29e:	4603      	mov	r3, r0
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800a2ae:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 800a580 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800a2b2:	ee67 6a87 	vmul.f32	s13, s15, s14
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	ed93 7a00 	vldr	s14, [r3]
 800a2bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2c4:	edc7 7a01 	vstr	s15, [r7, #4]
 800a2c8:	793b      	ldrb	r3, [r7, #4]
 800a2ca:	b2da      	uxtb	r2, r3
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800a2d8:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 800a580 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800a2dc:	ee67 6a87 	vmul.f32	s13, s15, s14
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	ed93 7a00 	vldr	s14, [r3]
 800a2e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2ee:	edc7 7a01 	vstr	s15, [r7, #4]
 800a2f2:	793b      	ldrb	r3, [r7, #4]
 800a2f4:	b2da      	uxtb	r2, r3
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800a302:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 800a580 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800a306:	ee67 6a87 	vmul.f32	s13, s15, s14
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	ed93 7a00 	vldr	s14, [r3]
 800a310:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a314:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a318:	edc7 7a01 	vstr	s15, [r7, #4]
 800a31c:	793b      	ldrb	r3, [r7, #4]
 800a31e:	b2da      	uxtb	r2, r3
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800a32c:	ed9f 7a94 	vldr	s14, [pc, #592]	; 800a580 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800a330:	ee67 6a87 	vmul.f32	s13, s15, s14
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	ed93 7a00 	vldr	s14, [r3]
 800a33a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a33e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a342:	edc7 7a01 	vstr	s15, [r7, #4]
 800a346:	793b      	ldrb	r3, [r7, #4]
 800a348:	b2da      	uxtb	r2, r3
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	697a      	ldr	r2, [r7, #20]
 800a35c:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800a360:	eeb0 0a67 	vmov.f32	s0, s15
 800a364:	68f8      	ldr	r0, [r7, #12]
 800a366:	4798      	blx	r3
 800a368:	4603      	mov	r3, r0
 800a36a:	461a      	mov	r2, r3
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	697a      	ldr	r2, [r7, #20]
 800a37e:	edd2 7a0f 	vldr	s15, [r2, #60]	; 0x3c
 800a382:	eeb0 0a67 	vmov.f32	s0, s15
 800a386:	68f8      	ldr	r0, [r7, #12]
 800a388:	4798      	blx	r3
 800a38a:	4603      	mov	r3, r0
 800a38c:	461a      	mov	r2, r3
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	697a      	ldr	r2, [r7, #20]
 800a3a0:	edd2 7a10 	vldr	s15, [r2, #64]	; 0x40
 800a3a4:	eeb0 0a67 	vmov.f32	s0, s15
 800a3a8:	68f8      	ldr	r0, [r7, #12]
 800a3aa:	4798      	blx	r3
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	697a      	ldr	r2, [r7, #20]
 800a3c2:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 800a3c6:	eeb0 0a67 	vmov.f32	s0, s15
 800a3ca:	68f8      	ldr	r0, [r7, #12]
 800a3cc:	4798      	blx	r3
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	697a      	ldr	r2, [r7, #20]
 800a3f0:	edd2 7a13 	vldr	s15, [r2, #76]	; 0x4c
 800a3f4:	eeb0 0a67 	vmov.f32	s0, s15
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	4798      	blx	r3
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	461a      	mov	r2, r3
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	697a      	ldr	r2, [r7, #20]
 800a412:	edd2 7a14 	vldr	s15, [r2, #80]	; 0x50
 800a416:	eeb0 0a67 	vmov.f32	s0, s15
 800a41a:	68f8      	ldr	r0, [r7, #12]
 800a41c:	4798      	blx	r3
 800a41e:	4603      	mov	r3, r0
 800a420:	461a      	mov	r2, r3
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	68fa      	ldr	r2, [r7, #12]
 800a458:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 800a45c:	2104      	movs	r1, #4
 800a45e:	68f8      	ldr	r0, [r7, #12]
 800a460:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	68fa      	ldr	r2, [r7, #12]
 800a46e:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
 800a472:	2105      	movs	r1, #5
 800a474:	68f8      	ldr	r0, [r7, #12]
 800a476:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	68fa      	ldr	r2, [r7, #12]
 800a484:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 800a488:	2106      	movs	r1, #6
 800a48a:	68f8      	ldr	r0, [r7, #12]
 800a48c:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	68fa      	ldr	r2, [r7, #12]
 800a49a:	f8b2 204e 	ldrh.w	r2, [r2, #78]	; 0x4e
 800a49e:	2107      	movs	r1, #7
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 800a4b4:	2108      	movs	r1, #8
 800a4b6:	68f8      	ldr	r0, [r7, #12]
 800a4b8:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	68fa      	ldr	r2, [r7, #12]
 800a4c6:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800a4ca:	2109      	movs	r1, #9
 800a4cc:	68f8      	ldr	r0, [r7, #12]
 800a4ce:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	68fa      	ldr	r2, [r7, #12]
 800a4dc:	f892 2053 	ldrb.w	r2, [r2, #83]	; 0x53
 800a4e0:	210a      	movs	r1, #10
 800a4e2:	68f8      	ldr	r0, [r7, #12]
 800a4e4:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800a4f6:	210b      	movs	r1, #11
 800a4f8:	68f8      	ldr	r0, [r7, #12]
 800a4fa:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	68fa      	ldr	r2, [r7, #12]
 800a508:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800a50c:	210c      	movs	r1, #12
 800a50e:	68f8      	ldr	r0, [r7, #12]
 800a510:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	68fa      	ldr	r2, [r7, #12]
 800a51e:	f8b2 2056 	ldrh.w	r2, [r2, #86]	; 0x56
 800a522:	210d      	movs	r1, #13
 800a524:	68f8      	ldr	r0, [r7, #12]
 800a526:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	68fa      	ldr	r2, [r7, #12]
 800a534:	f892 2058 	ldrb.w	r2, [r2, #88]	; 0x58
 800a538:	210e      	movs	r1, #14
 800a53a:	68f8      	ldr	r0, [r7, #12]
 800a53c:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	68fa      	ldr	r2, [r7, #12]
 800a54a:	f892 2059 	ldrb.w	r2, [r2, #89]	; 0x59
 800a54e:	210f      	movs	r1, #15
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	68fa      	ldr	r2, [r7, #12]
 800a560:	f892 205a 	ldrb.w	r2, [r2, #90]	; 0x5a
 800a564:	2110      	movs	r1, #16
 800a566:	68f8      	ldr	r0, [r7, #12]
 800a568:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	68fa      	ldr	r2, [r7, #12]
 800a576:	f892 205b 	ldrb.w	r2, [r2, #91]	; 0x5b
 800a57a:	2111      	movs	r1, #17
 800a57c:	68f8      	ldr	r0, [r7, #12]
 800a57e:	e001      	b.n	800a584 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3ac>
 800a580:	43800000 	.word	0x43800000
 800a584:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	68fa      	ldr	r2, [r7, #12]
 800a592:	f892 205d 	ldrb.w	r2, [r2, #93]	; 0x5d
 800a596:	2113      	movs	r1, #19
 800a598:	68f8      	ldr	r0, [r7, #12]
 800a59a:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	68fa      	ldr	r2, [r7, #12]
 800a5a8:	f892 205e 	ldrb.w	r2, [r2, #94]	; 0x5e
 800a5ac:	2114      	movs	r1, #20
 800a5ae:	68f8      	ldr	r0, [r7, #12]
 800a5b0:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	68fa      	ldr	r2, [r7, #12]
 800a5be:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800a5c2:	2116      	movs	r1, #22
 800a5c4:	68f8      	ldr	r0, [r7, #12]
 800a5c6:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	68fa      	ldr	r2, [r7, #12]
 800a5d4:	f8b2 2062 	ldrh.w	r2, [r2, #98]	; 0x62
 800a5d8:	2117      	movs	r1, #23
 800a5da:	68f8      	ldr	r0, [r7, #12]
 800a5dc:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	3354      	adds	r3, #84	; 0x54
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	68fa      	ldr	r2, [r7, #12]
 800a5e8:	f892 205f 	ldrb.w	r2, [r2, #95]	; 0x5f
 800a5ec:	4611      	mov	r1, r2
 800a5ee:	68f8      	ldr	r0, [r7, #12]
 800a5f0:	4798      	blx	r3
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	f083 0301 	eor.w	r3, r3, #1
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d001      	beq.n	800a602 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 800a5fe:	2301      	movs	r3, #1
 800a600:	e000      	b.n	800a604 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x42c>
  return COMPONENT_OK;
 800a602:	2300      	movs	r3, #0
}
 800a604:	4618      	mov	r0, r3
 800a606:	3718      	adds	r7, #24
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 800a60c:	b590      	push	{r4, r7, lr}
 800a60e:	b087      	sub	sp, #28
 800a610:	af02      	add	r7, sp, #8
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	460b      	mov	r3, r1
 800a616:	607a      	str	r2, [r7, #4]
 800a618:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800a622:	681c      	ldr	r4, [r3, #0]
 800a624:	7afa      	ldrb	r2, [r7, #11]
 800a626:	2300      	movs	r3, #0
 800a628:	9301      	str	r3, [sp, #4]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	9300      	str	r3, [sp, #0]
 800a62e:	4613      	mov	r3, r2
 800a630:	2201      	movs	r2, #1
 800a632:	490c      	ldr	r1, [pc, #48]	; (800a664 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 800a634:	68f8      	ldr	r0, [r7, #12]
 800a636:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4a09      	ldr	r2, [pc, #36]	; (800a668 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 800a644:	4907      	ldr	r1, [pc, #28]	; (800a664 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 800a646:	68f8      	ldr	r0, [r7, #12]
 800a648:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4a05      	ldr	r2, [pc, #20]	; (800a66c <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 800a656:	4904      	ldr	r1, [pc, #16]	; (800a668 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	4798      	blx	r3
}
 800a65c:	bf00      	nop
 800a65e:	3714      	adds	r7, #20
 800a660:	46bd      	mov	sp, r7
 800a662:	bd90      	pop	{r4, r7, pc}
 800a664:	200001fc 	.word	0x200001fc
 800a668:	2000021c 	.word	0x2000021c
 800a66c:	20000224 	.word	0x20000224

0800a670 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 800a670:	b590      	push	{r4, r7, lr}
 800a672:	b087      	sub	sp, #28
 800a674:	af02      	add	r7, sp, #8
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	460b      	mov	r3, r1
 800a67a:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800a684:	681c      	ldr	r4, [r3, #0]
 800a686:	78fb      	ldrb	r3, [r7, #3]
 800a688:	2200      	movs	r2, #0
 800a68a:	9201      	str	r2, [sp, #4]
 800a68c:	2200      	movs	r2, #0
 800a68e:	9200      	str	r2, [sp, #0]
 800a690:	2202      	movs	r2, #2
 800a692:	4917      	ldr	r1, [pc, #92]	; (800a6f0 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	4a14      	ldr	r2, [pc, #80]	; (800a6f4 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 800a6a4:	4912      	ldr	r1, [pc, #72]	; (800a6f0 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4a10      	ldr	r2, [pc, #64]	; (800a6f8 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 800a6b6:	490f      	ldr	r1, [pc, #60]	; (800a6f4 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6a19      	ldr	r1, [r3, #32]
 800a6c0:	78fa      	ldrb	r2, [r7, #3]
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	4413      	add	r3, r2
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	440b      	add	r3, r1
 800a6cc:	7b9b      	ldrb	r3, [r3, #14]
 800a6ce:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	7bfa      	ldrb	r2, [r7, #15]
 800a6dc:	4906      	ldr	r1, [pc, #24]	; (800a6f8 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	4798      	blx	r3
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 800a6e6:	68bb      	ldr	r3, [r7, #8]
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3714      	adds	r7, #20
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd90      	pop	{r4, r7, pc}
 800a6f0:	200001fc 	.word	0x200001fc
 800a6f4:	2000021c 	.word	0x2000021c
 800a6f8:	20000224 	.word	0x20000224

0800a6fc <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800a6fc:	b590      	push	{r4, r7, lr}
 800a6fe:	b087      	sub	sp, #28
 800a700:	af02      	add	r7, sp, #8
 800a702:	60f8      	str	r0, [r7, #12]
 800a704:	460b      	mov	r3, r1
 800a706:	607a      	str	r2, [r7, #4]
 800a708:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800a712:	681c      	ldr	r4, [r3, #0]
 800a714:	7afa      	ldrb	r2, [r7, #11]
 800a716:	2300      	movs	r3, #0
 800a718:	9301      	str	r3, [sp, #4]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	9300      	str	r3, [sp, #0]
 800a71e:	4613      	mov	r3, r2
 800a720:	2203      	movs	r2, #3
 800a722:	490c      	ldr	r1, [pc, #48]	; (800a754 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x58>)
 800a724:	68f8      	ldr	r0, [r7, #12]
 800a726:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4a09      	ldr	r2, [pc, #36]	; (800a758 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 800a734:	4907      	ldr	r1, [pc, #28]	; (800a754 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x58>)
 800a736:	68f8      	ldr	r0, [r7, #12]
 800a738:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a05      	ldr	r2, [pc, #20]	; (800a75c <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x60>)
 800a746:	4904      	ldr	r1, [pc, #16]	; (800a758 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 800a748:	68f8      	ldr	r0, [r7, #12]
 800a74a:	4798      	blx	r3
}
 800a74c:	bf00      	nop
 800a74e:	3714      	adds	r7, #20
 800a750:	46bd      	mov	sp, r7
 800a752:	bd90      	pop	{r4, r7, pc}
 800a754:	200001fc 	.word	0x200001fc
 800a758:	2000021c 	.word	0x2000021c
 800a75c:	20000224 	.word	0x20000224

0800a760 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 800a760:	b590      	push	{r4, r7, lr}
 800a762:	b085      	sub	sp, #20
 800a764:	af02      	add	r7, sp, #8
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	460b      	mov	r3, r1
 800a76a:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800a774:	681c      	ldr	r4, [r3, #0]
 800a776:	78fb      	ldrb	r3, [r7, #3]
 800a778:	2200      	movs	r2, #0
 800a77a:	9201      	str	r2, [sp, #4]
 800a77c:	2200      	movs	r2, #0
 800a77e:	9200      	str	r2, [sp, #0]
 800a780:	2204      	movs	r2, #4
 800a782:	490c      	ldr	r1, [pc, #48]	; (800a7b4 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4a09      	ldr	r2, [pc, #36]	; (800a7b8 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 800a794:	4907      	ldr	r1, [pc, #28]	; (800a7b4 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a05      	ldr	r2, [pc, #20]	; (800a7bc <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 800a7a6:	4904      	ldr	r1, [pc, #16]	; (800a7b8 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	4798      	blx	r3
}
 800a7ac:	bf00      	nop
 800a7ae:	370c      	adds	r7, #12
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd90      	pop	{r4, r7, pc}
 800a7b4:	200001fc 	.word	0x200001fc
 800a7b8:	2000021c 	.word	0x2000021c
 800a7bc:	20000224 	.word	0x20000224

0800a7c0 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 800a7c0:	b590      	push	{r4, r7, lr}
 800a7c2:	b087      	sub	sp, #28
 800a7c4:	af02      	add	r7, sp, #8
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	460b      	mov	r3, r1
 800a7ca:	607a      	str	r2, [r7, #4]
 800a7cc:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800a7d6:	681c      	ldr	r4, [r3, #0]
 800a7d8:	7afa      	ldrb	r2, [r7, #11]
 800a7da:	2300      	movs	r3, #0
 800a7dc:	9301      	str	r3, [sp, #4]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	9300      	str	r3, [sp, #0]
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	2205      	movs	r2, #5
 800a7e6:	490c      	ldr	r1, [pc, #48]	; (800a818 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 800a7e8:	68f8      	ldr	r0, [r7, #12]
 800a7ea:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4a09      	ldr	r2, [pc, #36]	; (800a81c <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 800a7f8:	4907      	ldr	r1, [pc, #28]	; (800a818 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 800a7fa:	68f8      	ldr	r0, [r7, #12]
 800a7fc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4a05      	ldr	r2, [pc, #20]	; (800a820 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 800a80a:	4904      	ldr	r1, [pc, #16]	; (800a81c <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 800a80c:	68f8      	ldr	r0, [r7, #12]
 800a80e:	4798      	blx	r3
}
 800a810:	bf00      	nop
 800a812:	3714      	adds	r7, #20
 800a814:	46bd      	mov	sp, r7
 800a816:	bd90      	pop	{r4, r7, pc}
 800a818:	200001fc 	.word	0x200001fc
 800a81c:	2000021c 	.word	0x2000021c
 800a820:	20000224 	.word	0x20000224

0800a824 <_ZN5L6470I8shield_1E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 800a824:	b590      	push	{r4, r7, lr}
 800a826:	b085      	sub	sp, #20
 800a828:	af02      	add	r7, sp, #8
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a834:	d21f      	bcs.n	800a876 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800a83e:	681c      	ldr	r4, [r3, #0]
 800a840:	2300      	movs	r3, #0
 800a842:	9301      	str	r3, [sp, #4]
 800a844:	2300      	movs	r3, #0
 800a846:	9300      	str	r3, [sp, #0]
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	2206      	movs	r2, #6
 800a84c:	490c      	ldr	r1, [pc, #48]	; (800a880 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x5c>)
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4a09      	ldr	r2, [pc, #36]	; (800a884 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x60>)
 800a85e:	4908      	ldr	r1, [pc, #32]	; (800a880 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x5c>)
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4a06      	ldr	r2, [pc, #24]	; (800a888 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x64>)
 800a870:	4904      	ldr	r1, [pc, #16]	; (800a884 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x60>)
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	4798      	blx	r3
}
 800a876:	bf00      	nop
 800a878:	370c      	adds	r7, #12
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd90      	pop	{r4, r7, pc}
 800a87e:	bf00      	nop
 800a880:	200001fc 	.word	0x200001fc
 800a884:	2000021c 	.word	0x2000021c
 800a888:	20000224 	.word	0x20000224

0800a88c <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 800a88c:	b590      	push	{r4, r7, lr}
 800a88e:	b087      	sub	sp, #28
 800a890:	af02      	add	r7, sp, #8
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	460b      	mov	r3, r1
 800a896:	607a      	str	r2, [r7, #4]
 800a898:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a8a0:	d220      	bcs.n	800a8e4 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800a8aa:	681c      	ldr	r4, [r3, #0]
 800a8ac:	7afa      	ldrb	r2, [r7, #11]
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	9301      	str	r3, [sp, #4]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	9300      	str	r3, [sp, #0]
 800a8b6:	4613      	mov	r3, r2
 800a8b8:	2207      	movs	r2, #7
 800a8ba:	490c      	ldr	r1, [pc, #48]	; (800a8ec <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 800a8bc:	68f8      	ldr	r0, [r7, #12]
 800a8be:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a09      	ldr	r2, [pc, #36]	; (800a8f0 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 800a8cc:	4907      	ldr	r1, [pc, #28]	; (800a8ec <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 800a8ce:	68f8      	ldr	r0, [r7, #12]
 800a8d0:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a05      	ldr	r2, [pc, #20]	; (800a8f4 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 800a8de:	4904      	ldr	r1, [pc, #16]	; (800a8f0 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 800a8e0:	68f8      	ldr	r0, [r7, #12]
 800a8e2:	4798      	blx	r3
}
 800a8e4:	bf00      	nop
 800a8e6:	3714      	adds	r7, #20
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd90      	pop	{r4, r7, pc}
 800a8ec:	200001fc 	.word	0x200001fc
 800a8f0:	2000021c 	.word	0x2000021c
 800a8f4:	20000224 	.word	0x20000224

0800a8f8 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800a8f8:	b590      	push	{r4, r7, lr}
 800a8fa:	b087      	sub	sp, #28
 800a8fc:	af02      	add	r7, sp, #8
 800a8fe:	60f8      	str	r0, [r7, #12]
 800a900:	607b      	str	r3, [r7, #4]
 800a902:	460b      	mov	r3, r1
 800a904:	72fb      	strb	r3, [r7, #11]
 800a906:	4613      	mov	r3, r2
 800a908:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800a912:	681c      	ldr	r4, [r3, #0]
 800a914:	7af9      	ldrb	r1, [r7, #11]
 800a916:	7abb      	ldrb	r3, [r7, #10]
 800a918:	687a      	ldr	r2, [r7, #4]
 800a91a:	9201      	str	r2, [sp, #4]
 800a91c:	9300      	str	r3, [sp, #0]
 800a91e:	460b      	mov	r3, r1
 800a920:	2208      	movs	r2, #8
 800a922:	490c      	ldr	r1, [pc, #48]	; (800a954 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 800a924:	68f8      	ldr	r0, [r7, #12]
 800a926:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4a09      	ldr	r2, [pc, #36]	; (800a958 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 800a934:	4907      	ldr	r1, [pc, #28]	; (800a954 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 800a936:	68f8      	ldr	r0, [r7, #12]
 800a938:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a05      	ldr	r2, [pc, #20]	; (800a95c <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 800a946:	4904      	ldr	r1, [pc, #16]	; (800a958 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 800a948:	68f8      	ldr	r0, [r7, #12]
 800a94a:	4798      	blx	r3
}
 800a94c:	bf00      	nop
 800a94e:	3714      	adds	r7, #20
 800a950:	46bd      	mov	sp, r7
 800a952:	bd90      	pop	{r4, r7, pc}
 800a954:	200001fc 	.word	0x200001fc
 800a958:	2000021c 	.word	0x2000021c
 800a95c:	20000224 	.word	0x20000224

0800a960 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 800a960:	b590      	push	{r4, r7, lr}
 800a962:	b085      	sub	sp, #20
 800a964:	af02      	add	r7, sp, #8
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	460b      	mov	r3, r1
 800a96a:	70fb      	strb	r3, [r7, #3]
 800a96c:	4613      	mov	r3, r2
 800a96e:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800a978:	681c      	ldr	r4, [r3, #0]
 800a97a:	78fa      	ldrb	r2, [r7, #3]
 800a97c:	78bb      	ldrb	r3, [r7, #2]
 800a97e:	2100      	movs	r1, #0
 800a980:	9101      	str	r1, [sp, #4]
 800a982:	9300      	str	r3, [sp, #0]
 800a984:	4613      	mov	r3, r2
 800a986:	2209      	movs	r2, #9
 800a988:	490c      	ldr	r1, [pc, #48]	; (800a9bc <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4a09      	ldr	r2, [pc, #36]	; (800a9c0 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 800a99a:	4908      	ldr	r1, [pc, #32]	; (800a9bc <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4a06      	ldr	r2, [pc, #24]	; (800a9c4 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 800a9ac:	4904      	ldr	r1, [pc, #16]	; (800a9c0 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	4798      	blx	r3
}
 800a9b2:	bf00      	nop
 800a9b4:	370c      	adds	r7, #12
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd90      	pop	{r4, r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	200001fc 	.word	0x200001fc
 800a9c0:	2000021c 	.word	0x2000021c
 800a9c4:	20000224 	.word	0x20000224

0800a9c8 <_ZN5L6470I8shield_1E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 800a9c8:	b590      	push	{r4, r7, lr}
 800a9ca:	b085      	sub	sp, #20
 800a9cc:	af02      	add	r7, sp, #8
 800a9ce:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800a9d8:	681c      	ldr	r4, [r3, #0]
 800a9da:	2300      	movs	r3, #0
 800a9dc:	9301      	str	r3, [sp, #4]
 800a9de:	2300      	movs	r3, #0
 800a9e0:	9300      	str	r3, [sp, #0]
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	220a      	movs	r2, #10
 800a9e6:	490c      	ldr	r1, [pc, #48]	; (800aa18 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x50>)
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4a09      	ldr	r2, [pc, #36]	; (800aa1c <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x54>)
 800a9f8:	4907      	ldr	r1, [pc, #28]	; (800aa18 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x50>)
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4a05      	ldr	r2, [pc, #20]	; (800aa20 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x58>)
 800aa0a:	4904      	ldr	r1, [pc, #16]	; (800aa1c <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x54>)
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	4798      	blx	r3
}
 800aa10:	bf00      	nop
 800aa12:	370c      	adds	r7, #12
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd90      	pop	{r4, r7, pc}
 800aa18:	200001fc 	.word	0x200001fc
 800aa1c:	2000021c 	.word	0x2000021c
 800aa20:	20000224 	.word	0x20000224

0800aa24 <_ZN5L6470I8shield_1E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 800aa24:	b590      	push	{r4, r7, lr}
 800aa26:	b085      	sub	sp, #20
 800aa28:	af02      	add	r7, sp, #8
 800aa2a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800aa34:	681c      	ldr	r4, [r3, #0]
 800aa36:	2300      	movs	r3, #0
 800aa38:	9301      	str	r3, [sp, #4]
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	9300      	str	r3, [sp, #0]
 800aa3e:	2300      	movs	r3, #0
 800aa40:	220b      	movs	r2, #11
 800aa42:	490c      	ldr	r1, [pc, #48]	; (800aa74 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x50>)
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	4a09      	ldr	r2, [pc, #36]	; (800aa78 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x54>)
 800aa54:	4907      	ldr	r1, [pc, #28]	; (800aa74 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x50>)
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4a05      	ldr	r2, [pc, #20]	; (800aa7c <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x58>)
 800aa66:	4904      	ldr	r1, [pc, #16]	; (800aa78 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x54>)
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	4798      	blx	r3
}
 800aa6c:	bf00      	nop
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd90      	pop	{r4, r7, pc}
 800aa74:	200001fc 	.word	0x200001fc
 800aa78:	2000021c 	.word	0x2000021c
 800aa7c:	20000224 	.word	0x20000224

0800aa80 <_ZN5L6470I8shield_1E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 800aa80:	b590      	push	{r4, r7, lr}
 800aa82:	b085      	sub	sp, #20
 800aa84:	af02      	add	r7, sp, #8
 800aa86:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800aa90:	681c      	ldr	r4, [r3, #0]
 800aa92:	2300      	movs	r3, #0
 800aa94:	9301      	str	r3, [sp, #4]
 800aa96:	2300      	movs	r3, #0
 800aa98:	9300      	str	r3, [sp, #0]
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	220c      	movs	r2, #12
 800aa9e:	490c      	ldr	r1, [pc, #48]	; (800aad0 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x50>)
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a09      	ldr	r2, [pc, #36]	; (800aad4 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x54>)
 800aab0:	4907      	ldr	r1, [pc, #28]	; (800aad0 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x50>)
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a05      	ldr	r2, [pc, #20]	; (800aad8 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x58>)
 800aac2:	4904      	ldr	r1, [pc, #16]	; (800aad4 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x54>)
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	4798      	blx	r3
}
 800aac8:	bf00      	nop
 800aaca:	370c      	adds	r7, #12
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd90      	pop	{r4, r7, pc}
 800aad0:	200001fc 	.word	0x200001fc
 800aad4:	2000021c 	.word	0x2000021c
 800aad8:	20000224 	.word	0x20000224

0800aadc <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 800aadc:	b590      	push	{r4, r7, lr}
 800aade:	b085      	sub	sp, #20
 800aae0:	af02      	add	r7, sp, #8
 800aae2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800aaec:	681c      	ldr	r4, [r3, #0]
 800aaee:	2300      	movs	r3, #0
 800aaf0:	9301      	str	r3, [sp, #4]
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	9300      	str	r3, [sp, #0]
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	220d      	movs	r2, #13
 800aafa:	490c      	ldr	r1, [pc, #48]	; (800ab2c <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x50>)
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4a09      	ldr	r2, [pc, #36]	; (800ab30 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x54>)
 800ab0c:	4907      	ldr	r1, [pc, #28]	; (800ab2c <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x50>)
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	4a05      	ldr	r2, [pc, #20]	; (800ab34 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x58>)
 800ab1e:	4904      	ldr	r1, [pc, #16]	; (800ab30 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x54>)
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	4798      	blx	r3
}
 800ab24:	bf00      	nop
 800ab26:	370c      	adds	r7, #12
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd90      	pop	{r4, r7, pc}
 800ab2c:	200001fc 	.word	0x200001fc
 800ab30:	2000021c 	.word	0x2000021c
 800ab34:	20000224 	.word	0x20000224

0800ab38 <_ZN5L6470I8shield_1E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 800ab38:	b590      	push	{r4, r7, lr}
 800ab3a:	b085      	sub	sp, #20
 800ab3c:	af02      	add	r7, sp, #8
 800ab3e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800ab48:	681c      	ldr	r4, [r3, #0]
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	9301      	str	r3, [sp, #4]
 800ab4e:	2300      	movs	r3, #0
 800ab50:	9300      	str	r3, [sp, #0]
 800ab52:	2300      	movs	r3, #0
 800ab54:	220e      	movs	r2, #14
 800ab56:	490c      	ldr	r1, [pc, #48]	; (800ab88 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x50>)
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4a09      	ldr	r2, [pc, #36]	; (800ab8c <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x54>)
 800ab68:	4907      	ldr	r1, [pc, #28]	; (800ab88 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x50>)
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4a05      	ldr	r2, [pc, #20]	; (800ab90 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x58>)
 800ab7a:	4904      	ldr	r1, [pc, #16]	; (800ab8c <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x54>)
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	4798      	blx	r3
}
 800ab80:	bf00      	nop
 800ab82:	370c      	adds	r7, #12
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd90      	pop	{r4, r7, pc}
 800ab88:	200001fc 	.word	0x200001fc
 800ab8c:	2000021c 	.word	0x2000021c
 800ab90:	20000224 	.word	0x20000224

0800ab94 <_ZN5L6470I8shield_1E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 800ab94:	b590      	push	{r4, r7, lr}
 800ab96:	b085      	sub	sp, #20
 800ab98:	af02      	add	r7, sp, #8
 800ab9a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800aba4:	681c      	ldr	r4, [r3, #0]
 800aba6:	2300      	movs	r3, #0
 800aba8:	9301      	str	r3, [sp, #4]
 800abaa:	2300      	movs	r3, #0
 800abac:	9300      	str	r3, [sp, #0]
 800abae:	2300      	movs	r3, #0
 800abb0:	220f      	movs	r2, #15
 800abb2:	490c      	ldr	r1, [pc, #48]	; (800abe4 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x50>)
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4a09      	ldr	r2, [pc, #36]	; (800abe8 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x54>)
 800abc4:	4907      	ldr	r1, [pc, #28]	; (800abe4 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x50>)
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a05      	ldr	r2, [pc, #20]	; (800abec <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x58>)
 800abd6:	4904      	ldr	r1, [pc, #16]	; (800abe8 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x54>)
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	4798      	blx	r3
}
 800abdc:	bf00      	nop
 800abde:	370c      	adds	r7, #12
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd90      	pop	{r4, r7, pc}
 800abe4:	200001fc 	.word	0x200001fc
 800abe8:	2000021c 	.word	0x2000021c
 800abec:	20000224 	.word	0x20000224

0800abf0 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 800abf0:	b590      	push	{r4, r7, lr}
 800abf2:	b085      	sub	sp, #20
 800abf4:	af02      	add	r7, sp, #8
 800abf6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800ac00:	681c      	ldr	r4, [r3, #0]
 800ac02:	2300      	movs	r3, #0
 800ac04:	9301      	str	r3, [sp, #4]
 800ac06:	2300      	movs	r3, #0
 800ac08:	9300      	str	r3, [sp, #0]
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	2210      	movs	r2, #16
 800ac0e:	490c      	ldr	r1, [pc, #48]	; (800ac40 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x50>)
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4a09      	ldr	r2, [pc, #36]	; (800ac44 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x54>)
 800ac20:	4907      	ldr	r1, [pc, #28]	; (800ac40 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x50>)
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4a05      	ldr	r2, [pc, #20]	; (800ac48 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x58>)
 800ac32:	4904      	ldr	r1, [pc, #16]	; (800ac44 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x54>)
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	4798      	blx	r3
}
 800ac38:	bf00      	nop
 800ac3a:	370c      	adds	r7, #12
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd90      	pop	{r4, r7, pc}
 800ac40:	200001fc 	.word	0x200001fc
 800ac44:	2000021c 	.word	0x2000021c
 800ac48:	20000224 	.word	0x20000224

0800ac4c <_ZN5L6470I8shield_1E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 800ac4c:	b590      	push	{r4, r7, lr}
 800ac4e:	b085      	sub	sp, #20
 800ac50:	af02      	add	r7, sp, #8
 800ac52:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800ac5c:	681c      	ldr	r4, [r3, #0]
 800ac5e:	2300      	movs	r3, #0
 800ac60:	9301      	str	r3, [sp, #4]
 800ac62:	2300      	movs	r3, #0
 800ac64:	9300      	str	r3, [sp, #0]
 800ac66:	2300      	movs	r3, #0
 800ac68:	2211      	movs	r2, #17
 800ac6a:	490c      	ldr	r1, [pc, #48]	; (800ac9c <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x50>)
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4a09      	ldr	r2, [pc, #36]	; (800aca0 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x54>)
 800ac7c:	4907      	ldr	r1, [pc, #28]	; (800ac9c <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x50>)
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a05      	ldr	r2, [pc, #20]	; (800aca4 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x58>)
 800ac8e:	4904      	ldr	r1, [pc, #16]	; (800aca0 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x54>)
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	4798      	blx	r3
}
 800ac94:	bf00      	nop
 800ac96:	370c      	adds	r7, #12
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd90      	pop	{r4, r7, pc}
 800ac9c:	200001fc 	.word	0x200001fc
 800aca0:	2000021c 	.word	0x2000021c
 800aca4:	20000224 	.word	0x20000224

0800aca8 <_ZN5L6470I8shield_1E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 800aca8:	b590      	push	{r4, r7, lr}
 800acaa:	b087      	sub	sp, #28
 800acac:	af02      	add	r7, sp, #8
 800acae:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800acb8:	681c      	ldr	r4, [r3, #0]
 800acba:	2300      	movs	r3, #0
 800acbc:	9301      	str	r3, [sp, #4]
 800acbe:	2300      	movs	r3, #0
 800acc0:	9300      	str	r3, [sp, #0]
 800acc2:	2300      	movs	r3, #0
 800acc4:	2212      	movs	r2, #18
 800acc6:	4912      	ldr	r1, [pc, #72]	; (800ad10 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x68>)
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4a0f      	ldr	r2, [pc, #60]	; (800ad14 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x6c>)
 800acd8:	490d      	ldr	r1, [pc, #52]	; (800ad10 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x68>)
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4a0b      	ldr	r2, [pc, #44]	; (800ad18 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x70>)
 800acea:	490a      	ldr	r1, [pc, #40]	; (800ad14 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x6c>)
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	2202      	movs	r2, #2
 800acfc:	4906      	ldr	r1, [pc, #24]	; (800ad18 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x70>)
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	4798      	blx	r3
 800ad02:	4603      	mov	r3, r0
 800ad04:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 800ad06:	89fb      	ldrh	r3, [r7, #14]
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3714      	adds	r7, #20
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd90      	pop	{r4, r7, pc}
 800ad10:	200001fc 	.word	0x200001fc
 800ad14:	2000021c 	.word	0x2000021c
 800ad18:	20000224 	.word	0x20000224

0800ad1c <_ZN5L6470I8shield_1E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 800ad1c:	b590      	push	{r4, r7, lr}
 800ad1e:	b087      	sub	sp, #28
 800ad20:	af02      	add	r7, sp, #8
 800ad22:	60f8      	str	r0, [r7, #12]
 800ad24:	460b      	mov	r3, r1
 800ad26:	607a      	str	r2, [r7, #4]
 800ad28:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800ad32:	681c      	ldr	r4, [r3, #0]
 800ad34:	7afa      	ldrb	r2, [r7, #11]
 800ad36:	2300      	movs	r3, #0
 800ad38:	9301      	str	r3, [sp, #4]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	9300      	str	r3, [sp, #0]
 800ad3e:	4613      	mov	r3, r2
 800ad40:	2201      	movs	r2, #1
 800ad42:	4903      	ldr	r1, [pc, #12]	; (800ad50 <_ZN5L6470I8shield_1E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 800ad44:	68f8      	ldr	r0, [r7, #12]
 800ad46:	47a0      	blx	r4
}
 800ad48:	bf00      	nop
 800ad4a:	3714      	adds	r7, #20
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd90      	pop	{r4, r7, pc}
 800ad50:	200001fc 	.word	0x200001fc

0800ad54 <_ZN5L6470I8shield_1E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 800ad54:	b590      	push	{r4, r7, lr}
 800ad56:	b085      	sub	sp, #20
 800ad58:	af02      	add	r7, sp, #8
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800ad68:	681c      	ldr	r4, [r3, #0]
 800ad6a:	78fb      	ldrb	r3, [r7, #3]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	9201      	str	r2, [sp, #4]
 800ad70:	2200      	movs	r2, #0
 800ad72:	9200      	str	r2, [sp, #0]
 800ad74:	2202      	movs	r2, #2
 800ad76:	4903      	ldr	r1, [pc, #12]	; (800ad84 <_ZN5L6470I8shield_1E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	47a0      	blx	r4
}
 800ad7c:	bf00      	nop
 800ad7e:	370c      	adds	r7, #12
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd90      	pop	{r4, r7, pc}
 800ad84:	200001fc 	.word	0x200001fc

0800ad88 <_ZN5L6470I8shield_1E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800ad88:	b590      	push	{r4, r7, lr}
 800ad8a:	b087      	sub	sp, #28
 800ad8c:	af02      	add	r7, sp, #8
 800ad8e:	60f8      	str	r0, [r7, #12]
 800ad90:	460b      	mov	r3, r1
 800ad92:	607a      	str	r2, [r7, #4]
 800ad94:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800ad9e:	681c      	ldr	r4, [r3, #0]
 800ada0:	7afa      	ldrb	r2, [r7, #11]
 800ada2:	2300      	movs	r3, #0
 800ada4:	9301      	str	r3, [sp, #4]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	9300      	str	r3, [sp, #0]
 800adaa:	4613      	mov	r3, r2
 800adac:	2203      	movs	r2, #3
 800adae:	4903      	ldr	r1, [pc, #12]	; (800adbc <_ZN5L6470I8shield_1E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 800adb0:	68f8      	ldr	r0, [r7, #12]
 800adb2:	47a0      	blx	r4
}
 800adb4:	bf00      	nop
 800adb6:	3714      	adds	r7, #20
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd90      	pop	{r4, r7, pc}
 800adbc:	200001fc 	.word	0x200001fc

0800adc0 <_ZN5L6470I8shield_1E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 800adc0:	b590      	push	{r4, r7, lr}
 800adc2:	b085      	sub	sp, #20
 800adc4:	af02      	add	r7, sp, #8
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	460b      	mov	r3, r1
 800adca:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800add4:	681c      	ldr	r4, [r3, #0]
 800add6:	78fb      	ldrb	r3, [r7, #3]
 800add8:	2200      	movs	r2, #0
 800adda:	9201      	str	r2, [sp, #4]
 800addc:	2200      	movs	r2, #0
 800adde:	9200      	str	r2, [sp, #0]
 800ade0:	2204      	movs	r2, #4
 800ade2:	4903      	ldr	r1, [pc, #12]	; (800adf0 <_ZN5L6470I8shield_1E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	47a0      	blx	r4
}
 800ade8:	bf00      	nop
 800adea:	370c      	adds	r7, #12
 800adec:	46bd      	mov	sp, r7
 800adee:	bd90      	pop	{r4, r7, pc}
 800adf0:	200001fc 	.word	0x200001fc

0800adf4 <_ZN5L6470I8shield_1E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 800adf4:	b590      	push	{r4, r7, lr}
 800adf6:	b087      	sub	sp, #28
 800adf8:	af02      	add	r7, sp, #8
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	460b      	mov	r3, r1
 800adfe:	607a      	str	r2, [r7, #4]
 800ae00:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800ae0a:	681c      	ldr	r4, [r3, #0]
 800ae0c:	7afa      	ldrb	r2, [r7, #11]
 800ae0e:	2300      	movs	r3, #0
 800ae10:	9301      	str	r3, [sp, #4]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	9300      	str	r3, [sp, #0]
 800ae16:	4613      	mov	r3, r2
 800ae18:	2205      	movs	r2, #5
 800ae1a:	4903      	ldr	r1, [pc, #12]	; (800ae28 <_ZN5L6470I8shield_1E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 800ae1c:	68f8      	ldr	r0, [r7, #12]
 800ae1e:	47a0      	blx	r4
}
 800ae20:	bf00      	nop
 800ae22:	3714      	adds	r7, #20
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd90      	pop	{r4, r7, pc}
 800ae28:	200001fc 	.word	0x200001fc

0800ae2c <_ZN5L6470I8shield_1E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 800ae2c:	b590      	push	{r4, r7, lr}
 800ae2e:	b085      	sub	sp, #20
 800ae30:	af02      	add	r7, sp, #8
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800ae3e:	681c      	ldr	r4, [r3, #0]
 800ae40:	2300      	movs	r3, #0
 800ae42:	9301      	str	r3, [sp, #4]
 800ae44:	2300      	movs	r3, #0
 800ae46:	9300      	str	r3, [sp, #0]
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	2206      	movs	r2, #6
 800ae4c:	4903      	ldr	r1, [pc, #12]	; (800ae5c <_ZN5L6470I8shield_1E17L6470_PrepareGoToEm+0x30>)
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	47a0      	blx	r4
}
 800ae52:	bf00      	nop
 800ae54:	370c      	adds	r7, #12
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd90      	pop	{r4, r7, pc}
 800ae5a:	bf00      	nop
 800ae5c:	200001fc 	.word	0x200001fc

0800ae60 <_ZN5L6470I8shield_1E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 800ae60:	b590      	push	{r4, r7, lr}
 800ae62:	b087      	sub	sp, #28
 800ae64:	af02      	add	r7, sp, #8
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	460b      	mov	r3, r1
 800ae6a:	607a      	str	r2, [r7, #4]
 800ae6c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800ae76:	681c      	ldr	r4, [r3, #0]
 800ae78:	7afa      	ldrb	r2, [r7, #11]
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	9301      	str	r3, [sp, #4]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	9300      	str	r3, [sp, #0]
 800ae82:	4613      	mov	r3, r2
 800ae84:	2207      	movs	r2, #7
 800ae86:	4903      	ldr	r1, [pc, #12]	; (800ae94 <_ZN5L6470I8shield_1E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 800ae88:	68f8      	ldr	r0, [r7, #12]
 800ae8a:	47a0      	blx	r4
}
 800ae8c:	bf00      	nop
 800ae8e:	3714      	adds	r7, #20
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd90      	pop	{r4, r7, pc}
 800ae94:	200001fc 	.word	0x200001fc

0800ae98 <_ZN5L6470I8shield_1E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800ae98:	b590      	push	{r4, r7, lr}
 800ae9a:	b087      	sub	sp, #28
 800ae9c:	af02      	add	r7, sp, #8
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	607b      	str	r3, [r7, #4]
 800aea2:	460b      	mov	r3, r1
 800aea4:	72fb      	strb	r3, [r7, #11]
 800aea6:	4613      	mov	r3, r2
 800aea8:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800aeb2:	681c      	ldr	r4, [r3, #0]
 800aeb4:	7af9      	ldrb	r1, [r7, #11]
 800aeb6:	7abb      	ldrb	r3, [r7, #10]
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	9201      	str	r2, [sp, #4]
 800aebc:	9300      	str	r3, [sp, #0]
 800aebe:	460b      	mov	r3, r1
 800aec0:	2208      	movs	r2, #8
 800aec2:	4903      	ldr	r1, [pc, #12]	; (800aed0 <_ZN5L6470I8shield_1E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 800aec4:	68f8      	ldr	r0, [r7, #12]
 800aec6:	47a0      	blx	r4
}
 800aec8:	bf00      	nop
 800aeca:	3714      	adds	r7, #20
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd90      	pop	{r4, r7, pc}
 800aed0:	200001fc 	.word	0x200001fc

0800aed4 <_ZN5L6470I8shield_1E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 800aed4:	b590      	push	{r4, r7, lr}
 800aed6:	b085      	sub	sp, #20
 800aed8:	af02      	add	r7, sp, #8
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	460b      	mov	r3, r1
 800aede:	70fb      	strb	r3, [r7, #3]
 800aee0:	4613      	mov	r3, r2
 800aee2:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800aeec:	681c      	ldr	r4, [r3, #0]
 800aeee:	78fa      	ldrb	r2, [r7, #3]
 800aef0:	78bb      	ldrb	r3, [r7, #2]
 800aef2:	2100      	movs	r1, #0
 800aef4:	9101      	str	r1, [sp, #4]
 800aef6:	9300      	str	r3, [sp, #0]
 800aef8:	4613      	mov	r3, r2
 800aefa:	2209      	movs	r2, #9
 800aefc:	4903      	ldr	r1, [pc, #12]	; (800af0c <_ZN5L6470I8shield_1E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	47a0      	blx	r4
}
 800af02:	bf00      	nop
 800af04:	370c      	adds	r7, #12
 800af06:	46bd      	mov	sp, r7
 800af08:	bd90      	pop	{r4, r7, pc}
 800af0a:	bf00      	nop
 800af0c:	200001fc 	.word	0x200001fc

0800af10 <_ZN5L6470I8shield_1E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 800af10:	b590      	push	{r4, r7, lr}
 800af12:	b085      	sub	sp, #20
 800af14:	af02      	add	r7, sp, #8
 800af16:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800af20:	681c      	ldr	r4, [r3, #0]
 800af22:	2300      	movs	r3, #0
 800af24:	9301      	str	r3, [sp, #4]
 800af26:	2300      	movs	r3, #0
 800af28:	9300      	str	r3, [sp, #0]
 800af2a:	2300      	movs	r3, #0
 800af2c:	220a      	movs	r2, #10
 800af2e:	4903      	ldr	r1, [pc, #12]	; (800af3c <_ZN5L6470I8shield_1E19L6470_PrepareGoHomeEv+0x2c>)
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	47a0      	blx	r4
}
 800af34:	bf00      	nop
 800af36:	370c      	adds	r7, #12
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd90      	pop	{r4, r7, pc}
 800af3c:	200001fc 	.word	0x200001fc

0800af40 <_ZN5L6470I8shield_1E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 800af40:	b590      	push	{r4, r7, lr}
 800af42:	b085      	sub	sp, #20
 800af44:	af02      	add	r7, sp, #8
 800af46:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800af50:	681c      	ldr	r4, [r3, #0]
 800af52:	2300      	movs	r3, #0
 800af54:	9301      	str	r3, [sp, #4]
 800af56:	2300      	movs	r3, #0
 800af58:	9300      	str	r3, [sp, #0]
 800af5a:	2300      	movs	r3, #0
 800af5c:	220b      	movs	r2, #11
 800af5e:	4903      	ldr	r1, [pc, #12]	; (800af6c <_ZN5L6470I8shield_1E19L6470_PrepareGoMarkEv+0x2c>)
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	47a0      	blx	r4
}
 800af64:	bf00      	nop
 800af66:	370c      	adds	r7, #12
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd90      	pop	{r4, r7, pc}
 800af6c:	200001fc 	.word	0x200001fc

0800af70 <_ZN5L6470I8shield_1E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 800af70:	b590      	push	{r4, r7, lr}
 800af72:	b085      	sub	sp, #20
 800af74:	af02      	add	r7, sp, #8
 800af76:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800af80:	681c      	ldr	r4, [r3, #0]
 800af82:	2300      	movs	r3, #0
 800af84:	9301      	str	r3, [sp, #4]
 800af86:	2300      	movs	r3, #0
 800af88:	9300      	str	r3, [sp, #0]
 800af8a:	2300      	movs	r3, #0
 800af8c:	220c      	movs	r2, #12
 800af8e:	4903      	ldr	r1, [pc, #12]	; (800af9c <_ZN5L6470I8shield_1E21L6470_PrepareResetPosEv+0x2c>)
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	47a0      	blx	r4
}
 800af94:	bf00      	nop
 800af96:	370c      	adds	r7, #12
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd90      	pop	{r4, r7, pc}
 800af9c:	200001fc 	.word	0x200001fc

0800afa0 <_ZN5L6470I8shield_1E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 800afa0:	b590      	push	{r4, r7, lr}
 800afa2:	b085      	sub	sp, #20
 800afa4:	af02      	add	r7, sp, #8
 800afa6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800afb0:	681c      	ldr	r4, [r3, #0]
 800afb2:	2300      	movs	r3, #0
 800afb4:	9301      	str	r3, [sp, #4]
 800afb6:	2300      	movs	r3, #0
 800afb8:	9300      	str	r3, [sp, #0]
 800afba:	2300      	movs	r3, #0
 800afbc:	220d      	movs	r2, #13
 800afbe:	4903      	ldr	r1, [pc, #12]	; (800afcc <_ZN5L6470I8shield_1E24L6470_PrepareResetDeviceEv+0x2c>)
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	47a0      	blx	r4
}
 800afc4:	bf00      	nop
 800afc6:	370c      	adds	r7, #12
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd90      	pop	{r4, r7, pc}
 800afcc:	200001fc 	.word	0x200001fc

0800afd0 <_ZN5L6470I8shield_1E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 800afd0:	b590      	push	{r4, r7, lr}
 800afd2:	b085      	sub	sp, #20
 800afd4:	af02      	add	r7, sp, #8
 800afd6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800afe0:	681c      	ldr	r4, [r3, #0]
 800afe2:	2300      	movs	r3, #0
 800afe4:	9301      	str	r3, [sp, #4]
 800afe6:	2300      	movs	r3, #0
 800afe8:	9300      	str	r3, [sp, #0]
 800afea:	2300      	movs	r3, #0
 800afec:	220e      	movs	r2, #14
 800afee:	4903      	ldr	r1, [pc, #12]	; (800affc <_ZN5L6470I8shield_1E21L6470_PrepareSoftStopEv+0x2c>)
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	47a0      	blx	r4
}
 800aff4:	bf00      	nop
 800aff6:	370c      	adds	r7, #12
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd90      	pop	{r4, r7, pc}
 800affc:	200001fc 	.word	0x200001fc

0800b000 <_ZN5L6470I8shield_1E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 800b000:	b590      	push	{r4, r7, lr}
 800b002:	b085      	sub	sp, #20
 800b004:	af02      	add	r7, sp, #8
 800b006:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b010:	681c      	ldr	r4, [r3, #0]
 800b012:	2300      	movs	r3, #0
 800b014:	9301      	str	r3, [sp, #4]
 800b016:	2300      	movs	r3, #0
 800b018:	9300      	str	r3, [sp, #0]
 800b01a:	2300      	movs	r3, #0
 800b01c:	220f      	movs	r2, #15
 800b01e:	4903      	ldr	r1, [pc, #12]	; (800b02c <_ZN5L6470I8shield_1E21L6470_PrepareHardStopEv+0x2c>)
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	47a0      	blx	r4
}
 800b024:	bf00      	nop
 800b026:	370c      	adds	r7, #12
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd90      	pop	{r4, r7, pc}
 800b02c:	200001fc 	.word	0x200001fc

0800b030 <_ZN5L6470I8shield_1E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 800b030:	b590      	push	{r4, r7, lr}
 800b032:	b085      	sub	sp, #20
 800b034:	af02      	add	r7, sp, #8
 800b036:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b040:	681c      	ldr	r4, [r3, #0]
 800b042:	2300      	movs	r3, #0
 800b044:	9301      	str	r3, [sp, #4]
 800b046:	2300      	movs	r3, #0
 800b048:	9300      	str	r3, [sp, #0]
 800b04a:	2300      	movs	r3, #0
 800b04c:	2210      	movs	r2, #16
 800b04e:	4903      	ldr	r1, [pc, #12]	; (800b05c <_ZN5L6470I8shield_1E20L6470_PrepareSoftHiZEv+0x2c>)
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	47a0      	blx	r4
}
 800b054:	bf00      	nop
 800b056:	370c      	adds	r7, #12
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd90      	pop	{r4, r7, pc}
 800b05c:	200001fc 	.word	0x200001fc

0800b060 <_ZN5L6470I8shield_1E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 800b060:	b590      	push	{r4, r7, lr}
 800b062:	b085      	sub	sp, #20
 800b064:	af02      	add	r7, sp, #8
 800b066:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b070:	681c      	ldr	r4, [r3, #0]
 800b072:	2300      	movs	r3, #0
 800b074:	9301      	str	r3, [sp, #4]
 800b076:	2300      	movs	r3, #0
 800b078:	9300      	str	r3, [sp, #0]
 800b07a:	2300      	movs	r3, #0
 800b07c:	2211      	movs	r2, #17
 800b07e:	4903      	ldr	r1, [pc, #12]	; (800b08c <_ZN5L6470I8shield_1E20L6470_PrepareHardHiZEv+0x2c>)
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	47a0      	blx	r4
}
 800b084:	bf00      	nop
 800b086:	370c      	adds	r7, #12
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd90      	pop	{r4, r7, pc}
 800b08c:	200001fc 	.word	0x200001fc

0800b090 <_ZN5L6470I8shield_1E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 800b090:	b590      	push	{r4, r7, lr}
 800b092:	b085      	sub	sp, #20
 800b094:	af02      	add	r7, sp, #8
 800b096:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b0a0:	681c      	ldr	r4, [r3, #0]
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	9301      	str	r3, [sp, #4]
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	9300      	str	r3, [sp, #0]
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	2212      	movs	r2, #18
 800b0ae:	4903      	ldr	r1, [pc, #12]	; (800b0bc <_ZN5L6470I8shield_1E22L6470_PrepareGetStatusEv+0x2c>)
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	47a0      	blx	r4
}
 800b0b4:	bf00      	nop
 800b0b6:	370c      	adds	r7, #12
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd90      	pop	{r4, r7, pc}
 800b0bc:	200001fc 	.word	0x200001fc

0800b0c0 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b082      	sub	sp, #8
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4a09      	ldr	r2, [pc, #36]	; (800b0f8 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 800b0d4:	4909      	ldr	r1, [pc, #36]	; (800b0fc <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	4a06      	ldr	r2, [pc, #24]	; (800b100 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 800b0e6:	4904      	ldr	r1, [pc, #16]	; (800b0f8 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 800b0ec:	4b04      	ldr	r3, [pc, #16]	; (800b100 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3708      	adds	r7, #8
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}
 800b0f6:	bf00      	nop
 800b0f8:	2000021c 	.word	0x2000021c
 800b0fc:	200001fc 	.word	0x200001fc
 800b100:	20000224 	.word	0x20000224

0800b104 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 800b104:	b590      	push	{r4, r7, lr}
 800b106:	b089      	sub	sp, #36	; 0x24
 800b108:	af02      	add	r7, sp, #8
 800b10a:	60f8      	str	r0, [r7, #12]
 800b10c:	60b9      	str	r1, [r7, #8]
 800b10e:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 800b110:	4b17      	ldr	r3, [pc, #92]	; (800b170 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 800b112:	2200      	movs	r2, #0
 800b114:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 800b116:	2300      	movs	r3, #0
 800b118:	75fb      	strb	r3, [r7, #23]
 800b11a:	e020      	b.n	800b15e <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800b124:	681c      	ldr	r4, [r3, #0]
 800b126:	7dfb      	ldrb	r3, [r7, #23]
 800b128:	005b      	lsls	r3, r3, #1
 800b12a:	461a      	mov	r2, r3
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	1899      	adds	r1, r3, r2
 800b130:	7dfb      	ldrb	r3, [r7, #23]
 800b132:	005b      	lsls	r3, r3, #1
 800b134:	461a      	mov	r2, r3
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	441a      	add	r2, r3
 800b13a:	230a      	movs	r3, #10
 800b13c:	9300      	str	r3, [sp, #0]
 800b13e:	2302      	movs	r3, #2
 800b140:	68f8      	ldr	r0, [r7, #12]
 800b142:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 800b144:	2300      	movs	r3, #0
 800b146:	75bb      	strb	r3, [r7, #22]
 800b148:	e003      	b.n	800b152 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x4e>
 800b14a:	bf00      	nop
 800b14c:	7dbb      	ldrb	r3, [r7, #22]
 800b14e:	3301      	adds	r3, #1
 800b150:	75bb      	strb	r3, [r7, #22]
 800b152:	7dbb      	ldrb	r3, [r7, #22]
 800b154:	2b7c      	cmp	r3, #124	; 0x7c
 800b156:	d9f8      	bls.n	800b14a <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 800b158:	7dfb      	ldrb	r3, [r7, #23]
 800b15a:	3301      	adds	r3, #1
 800b15c:	75fb      	strb	r3, [r7, #23]
 800b15e:	7dfb      	ldrb	r3, [r7, #23]
 800b160:	2b03      	cmp	r3, #3
 800b162:	d9db      	bls.n	800b11c <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 800b164:	bf00      	nop
}
 800b166:	bf00      	nop
 800b168:	371c      	adds	r7, #28
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd90      	pop	{r4, r7, pc}
 800b16e:	bf00      	nop
 800b170:	200001f9 	.word	0x200001f9

0800b174 <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 800b174:	b480      	push	{r7}
 800b176:	b087      	sub	sp, #28
 800b178:	af00      	add	r7, sp, #0
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	60b9      	str	r1, [r7, #8]
 800b17e:	4613      	mov	r3, r2
 800b180:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 800b182:	2300      	movs	r3, #0
 800b184:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 800b186:	2301      	movs	r3, #1
 800b188:	74fb      	strb	r3, [r7, #19]
 800b18a:	e016      	b.n	800b1ba <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 800b18c:	7cfb      	ldrb	r3, [r7, #19]
 800b18e:	005b      	lsls	r3, r3, #1
 800b190:	461a      	mov	r2, r3
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	7f1b      	ldrb	r3, [r3, #28]
 800b196:	4413      	add	r3, r2
 800b198:	68ba      	ldr	r2, [r7, #8]
 800b19a:	4413      	add	r3, r2
 800b19c:	781b      	ldrb	r3, [r3, #0]
 800b19e:	4619      	mov	r1, r3
 800b1a0:	79fa      	ldrb	r2, [r7, #7]
 800b1a2:	7cfb      	ldrb	r3, [r7, #19]
 800b1a4:	1ad3      	subs	r3, r2, r3
 800b1a6:	00db      	lsls	r3, r3, #3
 800b1a8:	fa01 f303 	lsl.w	r3, r1, r3
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 800b1b4:	7cfb      	ldrb	r3, [r7, #19]
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	74fb      	strb	r3, [r7, #19]
 800b1ba:	7cfb      	ldrb	r3, [r7, #19]
 800b1bc:	2b03      	cmp	r3, #3
 800b1be:	d9e5      	bls.n	800b18c <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 800b1c0:	697b      	ldr	r3, [r7, #20]
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	371c      	adds	r7, #28
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1cc:	4770      	bx	lr
	...

0800b1d0 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	460b      	mov	r3, r1
 800b1da:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	2118      	movs	r1, #24
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	4798      	blx	r3
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1f6:	b292      	uxth	r2, r2
 800b1f8:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 800b1fa:	78fb      	ldrb	r3, [r7, #3]
 800b1fc:	2b0e      	cmp	r3, #14
 800b1fe:	f200 8099 	bhi.w	800b334 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
 800b202:	a201      	add	r2, pc, #4	; (adr r2, 800b208 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x38>)
 800b204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b208:	0800b245 	.word	0x0800b245
 800b20c:	0800b255 	.word	0x0800b255
 800b210:	0800b265 	.word	0x0800b265
 800b214:	0800b275 	.word	0x0800b275
 800b218:	0800b285 	.word	0x0800b285
 800b21c:	0800b295 	.word	0x0800b295
 800b220:	0800b2a5 	.word	0x0800b2a5
 800b224:	0800b2b5 	.word	0x0800b2b5
 800b228:	0800b2c5 	.word	0x0800b2c5
 800b22c:	0800b2d5 	.word	0x0800b2d5
 800b230:	0800b2e5 	.word	0x0800b2e5
 800b234:	0800b2f5 	.word	0x0800b2f5
 800b238:	0800b305 	.word	0x0800b305
 800b23c:	0800b315 	.word	0x0800b315
 800b240:	0800b325 	.word	0x0800b325
      state = pL6470_StatusRegister->HiZ;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b24e:	b2db      	uxtb	r3, r3
 800b250:	73fb      	strb	r3, [r7, #15]
      break;
 800b252:	e06f      	b.n	800b334 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b258:	781b      	ldrb	r3, [r3, #0]
 800b25a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b25e:	b2db      	uxtb	r3, r3
 800b260:	73fb      	strb	r3, [r7, #15]
      break;
 800b262:	e067      	b.n	800b334 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b268:	781b      	ldrb	r3, [r3, #0]
 800b26a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	73fb      	strb	r3, [r7, #15]
      break;
 800b272:	e05f      	b.n	800b334 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	73fb      	strb	r3, [r7, #15]
      break;
 800b282:	e057      	b.n	800b334 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b28e:	b2db      	uxtb	r3, r3
 800b290:	73fb      	strb	r3, [r7, #15]
      break;
 800b292:	e04f      	b.n	800b334 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b298:	781b      	ldrb	r3, [r3, #0]
 800b29a:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800b29e:	b2db      	uxtb	r3, r3
 800b2a0:	73fb      	strb	r3, [r7, #15]
      break;
 800b2a2:	e047      	b.n	800b334 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800b2ae:	b2db      	uxtb	r3, r3
 800b2b0:	73fb      	strb	r3, [r7, #15]
      break;
 800b2b2:	e03f      	b.n	800b334 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2b8:	785b      	ldrb	r3, [r3, #1]
 800b2ba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b2be:	b2db      	uxtb	r3, r3
 800b2c0:	73fb      	strb	r3, [r7, #15]
      break;
 800b2c2:	e037      	b.n	800b334 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2c8:	785b      	ldrb	r3, [r3, #1]
 800b2ca:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	73fb      	strb	r3, [r7, #15]
      break;
 800b2d2:	e02f      	b.n	800b334 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2d8:	785b      	ldrb	r3, [r3, #1]
 800b2da:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b2de:	b2db      	uxtb	r3, r3
 800b2e0:	73fb      	strb	r3, [r7, #15]
      break;
 800b2e2:	e027      	b.n	800b334 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2e8:	785b      	ldrb	r3, [r3, #1]
 800b2ea:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b2ee:	b2db      	uxtb	r3, r3
 800b2f0:	73fb      	strb	r3, [r7, #15]
      break;
 800b2f2:	e01f      	b.n	800b334 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2f8:	785b      	ldrb	r3, [r3, #1]
 800b2fa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	73fb      	strb	r3, [r7, #15]
      break;
 800b302:	e017      	b.n	800b334 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b308:	785b      	ldrb	r3, [r3, #1]
 800b30a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	73fb      	strb	r3, [r7, #15]
      break;
 800b312:	e00f      	b.n	800b334 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b318:	785b      	ldrb	r3, [r3, #1]
 800b31a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800b31e:	b2db      	uxtb	r3, r3
 800b320:	73fb      	strb	r3, [r7, #15]
      break;
 800b322:	e007      	b.n	800b334 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b328:	785b      	ldrb	r3, [r3, #1]
 800b32a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800b32e:	b2db      	uxtb	r3, r3
 800b330:	73fb      	strb	r3, [r7, #15]
      break;
 800b332:	bf00      	nop
  return state;
 800b334:	7bfb      	ldrb	r3, [r7, #15]
}
 800b336:	4618      	mov	r0, r3
 800b338:	3710      	adds	r7, #16
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	bf00      	nop

0800b340 <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 800b340:	b480      	push	{r7}
 800b342:	b083      	sub	sp, #12
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	460b      	mov	r3, r1
 800b34a:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 800b34c:	78fb      	ldrb	r3, [r7, #3]
 800b34e:	2b18      	cmp	r3, #24
 800b350:	d809      	bhi.n	800b366 <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6a19      	ldr	r1, [r3, #32]
 800b356:	78fa      	ldrb	r2, [r7, #3]
 800b358:	4613      	mov	r3, r2
 800b35a:	009b      	lsls	r3, r3, #2
 800b35c:	4413      	add	r3, r2
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	440b      	add	r3, r1
 800b362:	3301      	adds	r3, #1
 800b364:	e000      	b.n	800b368 <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 800b366:	2300      	movs	r3, #0
}
 800b368:	4618      	mov	r0, r3
 800b36a:	370c      	adds	r7, #12
 800b36c:	46bd      	mov	sp, r7
 800b36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b372:	4770      	bx	lr

0800b374 <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 800b374:	b480      	push	{r7}
 800b376:	b085      	sub	sp, #20
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 800b37e:	2300      	movs	r3, #0
 800b380:	73fb      	strb	r3, [r7, #15]
 800b382:	e01a      	b.n	800b3ba <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 800b384:	7bfb      	ldrb	r3, [r7, #15]
 800b386:	011b      	lsls	r3, r3, #4
 800b388:	683a      	ldr	r2, [r7, #0]
 800b38a:	4413      	add	r3, r2
 800b38c:	2200      	movs	r2, #0
 800b38e:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 800b390:	7bfb      	ldrb	r3, [r7, #15]
 800b392:	011b      	lsls	r3, r3, #4
 800b394:	683a      	ldr	r2, [r7, #0]
 800b396:	4413      	add	r3, r2
 800b398:	2200      	movs	r2, #0
 800b39a:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 800b39c:	7bfb      	ldrb	r3, [r7, #15]
 800b39e:	011b      	lsls	r3, r3, #4
 800b3a0:	683a      	ldr	r2, [r7, #0]
 800b3a2:	4413      	add	r3, r2
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 800b3a8:	7bfb      	ldrb	r3, [r7, #15]
 800b3aa:	011b      	lsls	r3, r3, #4
 800b3ac:	683a      	ldr	r2, [r7, #0]
 800b3ae:	4413      	add	r3, r2
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 800b3b4:	7bfb      	ldrb	r3, [r7, #15]
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	73fb      	strb	r3, [r7, #15]
 800b3ba:	7bfb      	ldrb	r3, [r7, #15]
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d9e1      	bls.n	800b384 <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 800b3c0:	bf00      	nop
 800b3c2:	bf00      	nop
 800b3c4:	3714      	adds	r7, #20
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr

0800b3ce <_ZN5L6470I8shield_1E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 800b3ce:	b480      	push	{r7}
 800b3d0:	b085      	sub	sp, #20
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	60f8      	str	r0, [r7, #12]
 800b3d6:	60b9      	str	r1, [r7, #8]
 800b3d8:	603b      	str	r3, [r7, #0]
 800b3da:	4613      	mov	r3, r2
 800b3dc:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	7f1b      	ldrb	r3, [r3, #28]
 800b3e2:	011b      	lsls	r3, r3, #4
 800b3e4:	68ba      	ldr	r2, [r7, #8]
 800b3e6:	4413      	add	r3, r2
 800b3e8:	79fa      	ldrb	r2, [r7, #7]
 800b3ea:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	7f1b      	ldrb	r3, [r3, #28]
 800b3f0:	011b      	lsls	r3, r3, #4
 800b3f2:	68ba      	ldr	r2, [r7, #8]
 800b3f4:	4413      	add	r3, r2
 800b3f6:	683a      	ldr	r2, [r7, #0]
 800b3f8:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	7f1b      	ldrb	r3, [r3, #28]
 800b3fe:	011b      	lsls	r3, r3, #4
 800b400:	68ba      	ldr	r2, [r7, #8]
 800b402:	4413      	add	r3, r2
 800b404:	69ba      	ldr	r2, [r7, #24]
 800b406:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	7f1b      	ldrb	r3, [r3, #28]
 800b40c:	011b      	lsls	r3, r3, #4
 800b40e:	68ba      	ldr	r2, [r7, #8]
 800b410:	4413      	add	r3, r2
 800b412:	69fa      	ldr	r2, [r7, #28]
 800b414:	60da      	str	r2, [r3, #12]
}
 800b416:	bf00      	nop
 800b418:	3714      	adds	r7, #20
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr
	...

0800b424 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 800b424:	b590      	push	{r4, r7, lr}
 800b426:	b087      	sub	sp, #28
 800b428:	af02      	add	r7, sp, #8
 800b42a:	60f8      	str	r0, [r7, #12]
 800b42c:	60b9      	str	r1, [r7, #8]
 800b42e:	603b      	str	r3, [r7, #0]
 800b430:	4613      	mov	r3, r2
 800b432:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 800b434:	4b10      	ldr	r3, [pc, #64]	; (800b478 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d10a      	bne.n	800b452 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800b43c:	4b0e      	ldr	r3, [pc, #56]	; (800b478 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 800b43e:	2201      	movs	r2, #1
 800b440:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	68b9      	ldr	r1, [r7, #8]
 800b44e:	68f8      	ldr	r0, [r7, #12]
 800b450:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f503 7311 	add.w	r3, r3, #580	; 0x244
 800b45a:	681c      	ldr	r4, [r3, #0]
 800b45c:	79fa      	ldrb	r2, [r7, #7]
 800b45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b460:	9301      	str	r3, [sp, #4]
 800b462:	6a3b      	ldr	r3, [r7, #32]
 800b464:	9300      	str	r3, [sp, #0]
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	68b9      	ldr	r1, [r7, #8]
 800b46a:	68f8      	ldr	r0, [r7, #12]
 800b46c:	47a0      	blx	r4
}
 800b46e:	bf00      	nop
 800b470:	3714      	adds	r7, #20
 800b472:	46bd      	mov	sp, r7
 800b474:	bd90      	pop	{r4, r7, pc}
 800b476:	bf00      	nop
 800b478:	200001f9 	.word	0x200001f9

0800b47c <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 800b47c:	b480      	push	{r7}
 800b47e:	b087      	sub	sp, #28
 800b480:	af00      	add	r7, sp, #0
 800b482:	60f8      	str	r0, [r7, #12]
 800b484:	60b9      	str	r1, [r7, #8]
 800b486:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 800b488:	2300      	movs	r3, #0
 800b48a:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800b48c:	2300      	movs	r3, #0
 800b48e:	75bb      	strb	r3, [r7, #22]
 800b490:	e013      	b.n	800b4ba <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800b492:	2300      	movs	r3, #0
 800b494:	75fb      	strb	r3, [r7, #23]
 800b496:	e00a      	b.n	800b4ae <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 800b498:	7d7b      	ldrb	r3, [r7, #21]
 800b49a:	1c5a      	adds	r2, r3, #1
 800b49c:	757a      	strb	r2, [r7, #21]
 800b49e:	461a      	mov	r2, r3
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	4413      	add	r3, r2
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800b4a8:	7dfb      	ldrb	r3, [r7, #23]
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	75fb      	strb	r3, [r7, #23]
 800b4ae:	7dfb      	ldrb	r3, [r7, #23]
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d9f1      	bls.n	800b498 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800b4b4:	7dbb      	ldrb	r3, [r7, #22]
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	75bb      	strb	r3, [r7, #22]
 800b4ba:	7dbb      	ldrb	r3, [r7, #22]
 800b4bc:	2b03      	cmp	r3, #3
 800b4be:	d9e8      	bls.n	800b492 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	75fb      	strb	r3, [r7, #23]
 800b4c4:	e1f1      	b.n	800b8aa <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b4ca:	7dfb      	ldrb	r3, [r7, #23]
 800b4cc:	011b      	lsls	r3, r3, #4
 800b4ce:	68b9      	ldr	r1, [r7, #8]
 800b4d0:	440b      	add	r3, r1
 800b4d2:	781b      	ldrb	r3, [r3, #0]
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	460b      	mov	r3, r1
 800b4d8:	00db      	lsls	r3, r3, #3
 800b4da:	1a5b      	subs	r3, r3, r1
 800b4dc:	005b      	lsls	r3, r3, #1
 800b4de:	441a      	add	r2, r3
 800b4e0:	7dfb      	ldrb	r3, [r7, #23]
 800b4e2:	6879      	ldr	r1, [r7, #4]
 800b4e4:	440b      	add	r3, r1
 800b4e6:	7b12      	ldrb	r2, [r2, #12]
 800b4e8:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 800b4ea:	7dfb      	ldrb	r3, [r7, #23]
 800b4ec:	011b      	lsls	r3, r3, #4
 800b4ee:	68ba      	ldr	r2, [r7, #8]
 800b4f0:	4413      	add	r3, r2
 800b4f2:	781b      	ldrb	r3, [r3, #0]
 800b4f4:	2b12      	cmp	r3, #18
 800b4f6:	f200 81d5 	bhi.w	800b8a4 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 800b4fa:	a201      	add	r2, pc, #4	; (adr r2, 800b500 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 800b4fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b500:	0800b8a5 	.word	0x0800b8a5
 800b504:	0800b54d 	.word	0x0800b54d
 800b508:	0800b5d5 	.word	0x0800b5d5
 800b50c:	0800b605 	.word	0x0800b605
 800b510:	0800b66d 	.word	0x0800b66d
 800b514:	0800b69b 	.word	0x0800b69b
 800b518:	0800b703 	.word	0x0800b703
 800b51c:	0800b73f 	.word	0x0800b73f
 800b520:	0800b7a7 	.word	0x0800b7a7
 800b524:	0800b843 	.word	0x0800b843
 800b528:	0800b8a5 	.word	0x0800b8a5
 800b52c:	0800b8a5 	.word	0x0800b8a5
 800b530:	0800b8a5 	.word	0x0800b8a5
 800b534:	0800b8a5 	.word	0x0800b8a5
 800b538:	0800b8a5 	.word	0x0800b8a5
 800b53c:	0800b8a5 	.word	0x0800b8a5
 800b540:	0800b8a5 	.word	0x0800b8a5
 800b544:	0800b8a5 	.word	0x0800b8a5
 800b548:	0800b8a5 	.word	0x0800b8a5
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 800b54c:	7dfb      	ldrb	r3, [r7, #23]
 800b54e:	687a      	ldr	r2, [r7, #4]
 800b550:	4413      	add	r3, r2
 800b552:	7819      	ldrb	r1, [r3, #0]
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	6a18      	ldr	r0, [r3, #32]
 800b558:	7dfb      	ldrb	r3, [r7, #23]
 800b55a:	011b      	lsls	r3, r3, #4
 800b55c:	68ba      	ldr	r2, [r7, #8]
 800b55e:	4413      	add	r3, r2
 800b560:	685a      	ldr	r2, [r3, #4]
 800b562:	4613      	mov	r3, r2
 800b564:	009b      	lsls	r3, r3, #2
 800b566:	4413      	add	r3, r2
 800b568:	009b      	lsls	r3, r3, #2
 800b56a:	4403      	add	r3, r0
 800b56c:	781a      	ldrb	r2, [r3, #0]
 800b56e:	7dfb      	ldrb	r3, [r7, #23]
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	4403      	add	r3, r0
 800b574:	430a      	orrs	r2, r1
 800b576:	b2d2      	uxtb	r2, r2
 800b578:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	6a19      	ldr	r1, [r3, #32]
 800b57e:	7dfb      	ldrb	r3, [r7, #23]
 800b580:	011b      	lsls	r3, r3, #4
 800b582:	68ba      	ldr	r2, [r7, #8]
 800b584:	4413      	add	r3, r2
 800b586:	685a      	ldr	r2, [r3, #4]
 800b588:	4613      	mov	r3, r2
 800b58a:	009b      	lsls	r3, r3, #2
 800b58c:	4413      	add	r3, r2
 800b58e:	009b      	lsls	r3, r3, #2
 800b590:	440b      	add	r3, r1
 800b592:	7b9b      	ldrb	r3, [r3, #14]
 800b594:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 800b596:	2301      	movs	r3, #1
 800b598:	75bb      	strb	r3, [r7, #22]
 800b59a:	e016      	b.n	800b5ca <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 800b59c:	7dfb      	ldrb	r3, [r7, #23]
 800b59e:	011b      	lsls	r3, r3, #4
 800b5a0:	68ba      	ldr	r2, [r7, #8]
 800b5a2:	4413      	add	r3, r2
 800b5a4:	689a      	ldr	r2, [r3, #8]
 800b5a6:	7d39      	ldrb	r1, [r7, #20]
 800b5a8:	7dbb      	ldrb	r3, [r7, #22]
 800b5aa:	1acb      	subs	r3, r1, r3
 800b5ac:	00db      	lsls	r3, r3, #3
 800b5ae:	fa22 f103 	lsr.w	r1, r2, r3
 800b5b2:	7dbb      	ldrb	r3, [r7, #22]
 800b5b4:	005a      	lsls	r2, r3, #1
 800b5b6:	7dfb      	ldrb	r3, [r7, #23]
 800b5b8:	4413      	add	r3, r2
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	4413      	add	r3, r2
 800b5c0:	b2ca      	uxtb	r2, r1
 800b5c2:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 800b5c4:	7dbb      	ldrb	r3, [r7, #22]
 800b5c6:	3301      	adds	r3, #1
 800b5c8:	75bb      	strb	r3, [r7, #22]
 800b5ca:	7d3a      	ldrb	r2, [r7, #20]
 800b5cc:	7dbb      	ldrb	r3, [r7, #22]
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d2e4      	bcs.n	800b59c <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 800b5d2:	e167      	b.n	800b8a4 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 800b5d4:	7dfb      	ldrb	r3, [r7, #23]
 800b5d6:	687a      	ldr	r2, [r7, #4]
 800b5d8:	4413      	add	r3, r2
 800b5da:	7819      	ldrb	r1, [r3, #0]
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	6a18      	ldr	r0, [r3, #32]
 800b5e0:	7dfb      	ldrb	r3, [r7, #23]
 800b5e2:	011b      	lsls	r3, r3, #4
 800b5e4:	68ba      	ldr	r2, [r7, #8]
 800b5e6:	4413      	add	r3, r2
 800b5e8:	685a      	ldr	r2, [r3, #4]
 800b5ea:	4613      	mov	r3, r2
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	4413      	add	r3, r2
 800b5f0:	009b      	lsls	r3, r3, #2
 800b5f2:	4403      	add	r3, r0
 800b5f4:	781a      	ldrb	r2, [r3, #0]
 800b5f6:	7dfb      	ldrb	r3, [r7, #23]
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	4403      	add	r3, r0
 800b5fc:	430a      	orrs	r2, r1
 800b5fe:	b2d2      	uxtb	r2, r2
 800b600:	701a      	strb	r2, [r3, #0]
      break;
 800b602:	e14f      	b.n	800b8a4 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800b604:	7dfb      	ldrb	r3, [r7, #23]
 800b606:	687a      	ldr	r2, [r7, #4]
 800b608:	4413      	add	r3, r2
 800b60a:	7819      	ldrb	r1, [r3, #0]
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800b610:	7dfb      	ldrb	r3, [r7, #23]
 800b612:	011b      	lsls	r3, r3, #4
 800b614:	68ba      	ldr	r2, [r7, #8]
 800b616:	4413      	add	r3, r2
 800b618:	685a      	ldr	r2, [r3, #4]
 800b61a:	4613      	mov	r3, r2
 800b61c:	00db      	lsls	r3, r3, #3
 800b61e:	4413      	add	r3, r2
 800b620:	4403      	add	r3, r0
 800b622:	7a1a      	ldrb	r2, [r3, #8]
 800b624:	7dfb      	ldrb	r3, [r7, #23]
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	4403      	add	r3, r0
 800b62a:	430a      	orrs	r2, r1
 800b62c:	b2d2      	uxtb	r2, r2
 800b62e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800b630:	2301      	movs	r3, #1
 800b632:	75bb      	strb	r3, [r7, #22]
 800b634:	e016      	b.n	800b664 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800b636:	7dfb      	ldrb	r3, [r7, #23]
 800b638:	011b      	lsls	r3, r3, #4
 800b63a:	68ba      	ldr	r2, [r7, #8]
 800b63c:	4413      	add	r3, r2
 800b63e:	689a      	ldr	r2, [r3, #8]
 800b640:	7dbb      	ldrb	r3, [r7, #22]
 800b642:	f1c3 0303 	rsb	r3, r3, #3
 800b646:	00db      	lsls	r3, r3, #3
 800b648:	fa22 f103 	lsr.w	r1, r2, r3
 800b64c:	7dbb      	ldrb	r3, [r7, #22]
 800b64e:	005a      	lsls	r2, r3, #1
 800b650:	7dfb      	ldrb	r3, [r7, #23]
 800b652:	4413      	add	r3, r2
 800b654:	461a      	mov	r2, r3
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	4413      	add	r3, r2
 800b65a:	b2ca      	uxtb	r2, r1
 800b65c:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800b65e:	7dbb      	ldrb	r3, [r7, #22]
 800b660:	3301      	adds	r3, #1
 800b662:	75bb      	strb	r3, [r7, #22]
 800b664:	7dbb      	ldrb	r3, [r7, #22]
 800b666:	2b03      	cmp	r3, #3
 800b668:	d9e5      	bls.n	800b636 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 800b66a:	e11b      	b.n	800b8a4 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800b66c:	7dfb      	ldrb	r3, [r7, #23]
 800b66e:	687a      	ldr	r2, [r7, #4]
 800b670:	4413      	add	r3, r2
 800b672:	7819      	ldrb	r1, [r3, #0]
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800b678:	7dfb      	ldrb	r3, [r7, #23]
 800b67a:	011b      	lsls	r3, r3, #4
 800b67c:	68ba      	ldr	r2, [r7, #8]
 800b67e:	4413      	add	r3, r2
 800b680:	685a      	ldr	r2, [r3, #4]
 800b682:	4613      	mov	r3, r2
 800b684:	00db      	lsls	r3, r3, #3
 800b686:	4413      	add	r3, r2
 800b688:	4403      	add	r3, r0
 800b68a:	7a1a      	ldrb	r2, [r3, #8]
 800b68c:	7dfb      	ldrb	r3, [r7, #23]
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	4403      	add	r3, r0
 800b692:	430a      	orrs	r2, r1
 800b694:	b2d2      	uxtb	r2, r2
 800b696:	701a      	strb	r2, [r3, #0]
      break;
 800b698:	e104      	b.n	800b8a4 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800b69a:	7dfb      	ldrb	r3, [r7, #23]
 800b69c:	687a      	ldr	r2, [r7, #4]
 800b69e:	4413      	add	r3, r2
 800b6a0:	7819      	ldrb	r1, [r3, #0]
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800b6a6:	7dfb      	ldrb	r3, [r7, #23]
 800b6a8:	011b      	lsls	r3, r3, #4
 800b6aa:	68ba      	ldr	r2, [r7, #8]
 800b6ac:	4413      	add	r3, r2
 800b6ae:	685a      	ldr	r2, [r3, #4]
 800b6b0:	4613      	mov	r3, r2
 800b6b2:	00db      	lsls	r3, r3, #3
 800b6b4:	4413      	add	r3, r2
 800b6b6:	4403      	add	r3, r0
 800b6b8:	7a1a      	ldrb	r2, [r3, #8]
 800b6ba:	7dfb      	ldrb	r3, [r7, #23]
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	4403      	add	r3, r0
 800b6c0:	430a      	orrs	r2, r1
 800b6c2:	b2d2      	uxtb	r2, r2
 800b6c4:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	75bb      	strb	r3, [r7, #22]
 800b6ca:	e016      	b.n	800b6fa <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800b6cc:	7dfb      	ldrb	r3, [r7, #23]
 800b6ce:	011b      	lsls	r3, r3, #4
 800b6d0:	68ba      	ldr	r2, [r7, #8]
 800b6d2:	4413      	add	r3, r2
 800b6d4:	689a      	ldr	r2, [r3, #8]
 800b6d6:	7dbb      	ldrb	r3, [r7, #22]
 800b6d8:	f1c3 0303 	rsb	r3, r3, #3
 800b6dc:	00db      	lsls	r3, r3, #3
 800b6de:	fa22 f103 	lsr.w	r1, r2, r3
 800b6e2:	7dbb      	ldrb	r3, [r7, #22]
 800b6e4:	005a      	lsls	r2, r3, #1
 800b6e6:	7dfb      	ldrb	r3, [r7, #23]
 800b6e8:	4413      	add	r3, r2
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	4413      	add	r3, r2
 800b6f0:	b2ca      	uxtb	r2, r1
 800b6f2:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800b6f4:	7dbb      	ldrb	r3, [r7, #22]
 800b6f6:	3301      	adds	r3, #1
 800b6f8:	75bb      	strb	r3, [r7, #22]
 800b6fa:	7dbb      	ldrb	r3, [r7, #22]
 800b6fc:	2b03      	cmp	r3, #3
 800b6fe:	d9e5      	bls.n	800b6cc <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 800b700:	e0d0      	b.n	800b8a4 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800b702:	2301      	movs	r3, #1
 800b704:	75bb      	strb	r3, [r7, #22]
 800b706:	e016      	b.n	800b736 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 800b708:	7dfb      	ldrb	r3, [r7, #23]
 800b70a:	011b      	lsls	r3, r3, #4
 800b70c:	68ba      	ldr	r2, [r7, #8]
 800b70e:	4413      	add	r3, r2
 800b710:	685a      	ldr	r2, [r3, #4]
 800b712:	7dbb      	ldrb	r3, [r7, #22]
 800b714:	f1c3 0303 	rsb	r3, r3, #3
 800b718:	00db      	lsls	r3, r3, #3
 800b71a:	fa22 f103 	lsr.w	r1, r2, r3
 800b71e:	7dbb      	ldrb	r3, [r7, #22]
 800b720:	005a      	lsls	r2, r3, #1
 800b722:	7dfb      	ldrb	r3, [r7, #23]
 800b724:	4413      	add	r3, r2
 800b726:	461a      	mov	r2, r3
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	4413      	add	r3, r2
 800b72c:	b2ca      	uxtb	r2, r1
 800b72e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800b730:	7dbb      	ldrb	r3, [r7, #22]
 800b732:	3301      	adds	r3, #1
 800b734:	75bb      	strb	r3, [r7, #22]
 800b736:	7dbb      	ldrb	r3, [r7, #22]
 800b738:	2b03      	cmp	r3, #3
 800b73a:	d9e5      	bls.n	800b708 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 800b73c:	e0b2      	b.n	800b8a4 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800b73e:	7dfb      	ldrb	r3, [r7, #23]
 800b740:	687a      	ldr	r2, [r7, #4]
 800b742:	4413      	add	r3, r2
 800b744:	7819      	ldrb	r1, [r3, #0]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800b74a:	7dfb      	ldrb	r3, [r7, #23]
 800b74c:	011b      	lsls	r3, r3, #4
 800b74e:	68ba      	ldr	r2, [r7, #8]
 800b750:	4413      	add	r3, r2
 800b752:	685a      	ldr	r2, [r3, #4]
 800b754:	4613      	mov	r3, r2
 800b756:	00db      	lsls	r3, r3, #3
 800b758:	4413      	add	r3, r2
 800b75a:	4403      	add	r3, r0
 800b75c:	7a1a      	ldrb	r2, [r3, #8]
 800b75e:	7dfb      	ldrb	r3, [r7, #23]
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	4403      	add	r3, r0
 800b764:	430a      	orrs	r2, r1
 800b766:	b2d2      	uxtb	r2, r2
 800b768:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800b76a:	2301      	movs	r3, #1
 800b76c:	75bb      	strb	r3, [r7, #22]
 800b76e:	e016      	b.n	800b79e <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800b770:	7dfb      	ldrb	r3, [r7, #23]
 800b772:	011b      	lsls	r3, r3, #4
 800b774:	68ba      	ldr	r2, [r7, #8]
 800b776:	4413      	add	r3, r2
 800b778:	689a      	ldr	r2, [r3, #8]
 800b77a:	7dbb      	ldrb	r3, [r7, #22]
 800b77c:	f1c3 0303 	rsb	r3, r3, #3
 800b780:	00db      	lsls	r3, r3, #3
 800b782:	fa22 f103 	lsr.w	r1, r2, r3
 800b786:	7dbb      	ldrb	r3, [r7, #22]
 800b788:	005a      	lsls	r2, r3, #1
 800b78a:	7dfb      	ldrb	r3, [r7, #23]
 800b78c:	4413      	add	r3, r2
 800b78e:	461a      	mov	r2, r3
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	4413      	add	r3, r2
 800b794:	b2ca      	uxtb	r2, r1
 800b796:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800b798:	7dbb      	ldrb	r3, [r7, #22]
 800b79a:	3301      	adds	r3, #1
 800b79c:	75bb      	strb	r3, [r7, #22]
 800b79e:	7dbb      	ldrb	r3, [r7, #22]
 800b7a0:	2b03      	cmp	r3, #3
 800b7a2:	d9e5      	bls.n	800b770 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 800b7a4:	e07e      	b.n	800b8a4 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 800b7a6:	7dfb      	ldrb	r3, [r7, #23]
 800b7a8:	687a      	ldr	r2, [r7, #4]
 800b7aa:	4413      	add	r3, r2
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	b259      	sxtb	r1, r3
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800b7b4:	7dfb      	ldrb	r3, [r7, #23]
 800b7b6:	011b      	lsls	r3, r3, #4
 800b7b8:	68ba      	ldr	r2, [r7, #8]
 800b7ba:	4413      	add	r3, r2
 800b7bc:	685a      	ldr	r2, [r3, #4]
 800b7be:	4613      	mov	r3, r2
 800b7c0:	009b      	lsls	r3, r3, #2
 800b7c2:	4413      	add	r3, r2
 800b7c4:	4403      	add	r3, r0
 800b7c6:	791b      	ldrb	r3, [r3, #4]
 800b7c8:	00db      	lsls	r3, r3, #3
 800b7ca:	b25b      	sxtb	r3, r3
 800b7cc:	430b      	orrs	r3, r1
 800b7ce:	b259      	sxtb	r1, r3
 800b7d0:	7dfb      	ldrb	r3, [r7, #23]
 800b7d2:	687a      	ldr	r2, [r7, #4]
 800b7d4:	4413      	add	r3, r2
 800b7d6:	b2ca      	uxtb	r2, r1
 800b7d8:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 800b7da:	7dfb      	ldrb	r3, [r7, #23]
 800b7dc:	687a      	ldr	r2, [r7, #4]
 800b7de:	4413      	add	r3, r2
 800b7e0:	7819      	ldrb	r1, [r3, #0]
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800b7e6:	7dfb      	ldrb	r3, [r7, #23]
 800b7e8:	011b      	lsls	r3, r3, #4
 800b7ea:	68ba      	ldr	r2, [r7, #8]
 800b7ec:	4413      	add	r3, r2
 800b7ee:	689a      	ldr	r2, [r3, #8]
 800b7f0:	4613      	mov	r3, r2
 800b7f2:	00db      	lsls	r3, r3, #3
 800b7f4:	4413      	add	r3, r2
 800b7f6:	4403      	add	r3, r0
 800b7f8:	7a1a      	ldrb	r2, [r3, #8]
 800b7fa:	7dfb      	ldrb	r3, [r7, #23]
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	4403      	add	r3, r0
 800b800:	430a      	orrs	r2, r1
 800b802:	b2d2      	uxtb	r2, r2
 800b804:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800b806:	2301      	movs	r3, #1
 800b808:	75bb      	strb	r3, [r7, #22]
 800b80a:	e016      	b.n	800b83a <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 800b80c:	7dfb      	ldrb	r3, [r7, #23]
 800b80e:	011b      	lsls	r3, r3, #4
 800b810:	68ba      	ldr	r2, [r7, #8]
 800b812:	4413      	add	r3, r2
 800b814:	68da      	ldr	r2, [r3, #12]
 800b816:	7dbb      	ldrb	r3, [r7, #22]
 800b818:	f1c3 0303 	rsb	r3, r3, #3
 800b81c:	00db      	lsls	r3, r3, #3
 800b81e:	fa22 f103 	lsr.w	r1, r2, r3
 800b822:	7dbb      	ldrb	r3, [r7, #22]
 800b824:	005a      	lsls	r2, r3, #1
 800b826:	7dfb      	ldrb	r3, [r7, #23]
 800b828:	4413      	add	r3, r2
 800b82a:	461a      	mov	r2, r3
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	4413      	add	r3, r2
 800b830:	b2ca      	uxtb	r2, r1
 800b832:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800b834:	7dbb      	ldrb	r3, [r7, #22]
 800b836:	3301      	adds	r3, #1
 800b838:	75bb      	strb	r3, [r7, #22]
 800b83a:	7dbb      	ldrb	r3, [r7, #22]
 800b83c:	2b03      	cmp	r3, #3
 800b83e:	d9e5      	bls.n	800b80c <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 800b840:	e030      	b.n	800b8a4 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 800b842:	7dfb      	ldrb	r3, [r7, #23]
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	4413      	add	r3, r2
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	b259      	sxtb	r1, r3
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800b850:	7dfb      	ldrb	r3, [r7, #23]
 800b852:	011b      	lsls	r3, r3, #4
 800b854:	68ba      	ldr	r2, [r7, #8]
 800b856:	4413      	add	r3, r2
 800b858:	685a      	ldr	r2, [r3, #4]
 800b85a:	4613      	mov	r3, r2
 800b85c:	009b      	lsls	r3, r3, #2
 800b85e:	4413      	add	r3, r2
 800b860:	4403      	add	r3, r0
 800b862:	791b      	ldrb	r3, [r3, #4]
 800b864:	00db      	lsls	r3, r3, #3
 800b866:	b25b      	sxtb	r3, r3
 800b868:	430b      	orrs	r3, r1
 800b86a:	b259      	sxtb	r1, r3
 800b86c:	7dfb      	ldrb	r3, [r7, #23]
 800b86e:	687a      	ldr	r2, [r7, #4]
 800b870:	4413      	add	r3, r2
 800b872:	b2ca      	uxtb	r2, r1
 800b874:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 800b876:	7dfb      	ldrb	r3, [r7, #23]
 800b878:	687a      	ldr	r2, [r7, #4]
 800b87a:	4413      	add	r3, r2
 800b87c:	7819      	ldrb	r1, [r3, #0]
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800b882:	7dfb      	ldrb	r3, [r7, #23]
 800b884:	011b      	lsls	r3, r3, #4
 800b886:	68ba      	ldr	r2, [r7, #8]
 800b888:	4413      	add	r3, r2
 800b88a:	689a      	ldr	r2, [r3, #8]
 800b88c:	4613      	mov	r3, r2
 800b88e:	00db      	lsls	r3, r3, #3
 800b890:	4413      	add	r3, r2
 800b892:	4403      	add	r3, r0
 800b894:	7a1a      	ldrb	r2, [r3, #8]
 800b896:	7dfb      	ldrb	r3, [r7, #23]
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	4403      	add	r3, r0
 800b89c:	430a      	orrs	r2, r1
 800b89e:	b2d2      	uxtb	r2, r2
 800b8a0:	701a      	strb	r2, [r3, #0]
      break;
 800b8a2:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800b8a4:	7dfb      	ldrb	r3, [r7, #23]
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	75fb      	strb	r3, [r7, #23]
 800b8aa:	7dfb      	ldrb	r3, [r7, #23]
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	f67f ae0a 	bls.w	800b4c6 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 800b8b2:	bf00      	nop
 800b8b4:	bf00      	nop
 800b8b6:	371c      	adds	r7, #28
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr

0800b8c0 <_ZN5L6470I8shield_1E11L6470_roundEf>:
    int L6470_round(float f)
 800b8c0:	b480      	push	{r7}
 800b8c2:	b083      	sub	sp, #12
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	ed87 0a00 	vstr	s0, [r7]
        if (f >= 0) {
 800b8cc:	edd7 7a00 	vldr	s15, [r7]
 800b8d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b8d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8d8:	db1e      	blt.n	800b918 <_ZN5L6470I8shield_1E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 800b8da:	edd7 7a00 	vldr	s15, [r7]
 800b8de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b8e2:	ee17 2a90 	vmov	r2, s15
 800b8e6:	edd7 7a00 	vldr	s15, [r7]
 800b8ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b8ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8f2:	ed97 7a00 	vldr	s14, [r7]
 800b8f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b8fa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b8fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b906:	bf4c      	ite	mi
 800b908:	2301      	movmi	r3, #1
 800b90a:	2300      	movpl	r3, #0
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	f083 0301 	eor.w	r3, r3, #1
 800b912:	b2db      	uxtb	r3, r3
 800b914:	4413      	add	r3, r2
 800b916:	e01a      	b.n	800b94e <_ZN5L6470I8shield_1E11L6470_roundEf+0x8e>
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 800b918:	edd7 7a00 	vldr	s15, [r7]
 800b91c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b920:	ee17 2a90 	vmov	r2, s15
 800b924:	edd7 7a00 	vldr	s15, [r7]
 800b928:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b92c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b930:	ed97 7a00 	vldr	s14, [r7]
 800b934:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b938:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800b93c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b944:	d501      	bpl.n	800b94a <_ZN5L6470I8shield_1E11L6470_roundEf+0x8a>
 800b946:	2301      	movs	r3, #1
 800b948:	e000      	b.n	800b94c <_ZN5L6470I8shield_1E11L6470_roundEf+0x8c>
 800b94a:	2300      	movs	r3, #0
 800b94c:	1ad3      	subs	r3, r2, r3
    }
 800b94e:	4618      	mov	r0, r3
 800b950:	370c      	adds	r7, #12
 800b952:	46bd      	mov	sp, r7
 800b954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b958:	4770      	bx	lr

0800b95a <_ZN5L6470I8shield_1E4ReadEPht>:
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 800b95a:	b580      	push	{r7, lr}
 800b95c:	b086      	sub	sp, #24
 800b95e:	af00      	add	r7, sp, #0
 800b960:	60f8      	str	r0, [r7, #12]
 800b962:	60b9      	str	r1, [r7, #8]
 800b964:	4613      	mov	r3, r2
 800b966:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	6918      	ldr	r0, [r3, #16]
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	8a9b      	ldrh	r3, [r3, #20]
 800b970:	2200      	movs	r2, #0
 800b972:	4619      	mov	r1, r3
 800b974:	f004 fa94 	bl	800fea0 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	6998      	ldr	r0, [r3, #24]
 800b97c:	88fa      	ldrh	r2, [r7, #6]
 800b97e:	2364      	movs	r3, #100	; 0x64
 800b980:	68b9      	ldr	r1, [r7, #8]
 800b982:	f005 faa4 	bl	8010ece <HAL_SPI_Receive>
 800b986:	4603      	mov	r3, r0
 800b988:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	6918      	ldr	r0, [r3, #16]
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	8a9b      	ldrh	r3, [r3, #20]
 800b992:	2201      	movs	r2, #1
 800b994:	4619      	mov	r1, r3
 800b996:	f004 fa83 	bl	800fea0 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 800b99a:	7dfb      	ldrb	r3, [r7, #23]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d001      	beq.n	800b9a4 <_ZN5L6470I8shield_1E4ReadEPht+0x4a>
        	return COMPONENT_ERROR;
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	e000      	b.n	800b9a6 <_ZN5L6470I8shield_1E4ReadEPht+0x4c>
        return COMPONENT_OK;
 800b9a4:	2300      	movs	r3, #0
    }
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3718      	adds	r7, #24
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}

0800b9ae <_ZN5L6470I8shield_1E5WriteEPht>:
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 800b9ae:	b580      	push	{r7, lr}
 800b9b0:	b086      	sub	sp, #24
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	60f8      	str	r0, [r7, #12]
 800b9b6:	60b9      	str	r1, [r7, #8]
 800b9b8:	4613      	mov	r3, r2
 800b9ba:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	6918      	ldr	r0, [r3, #16]
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	8a9b      	ldrh	r3, [r3, #20]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	4619      	mov	r1, r3
 800b9c8:	f004 fa6a 	bl	800fea0 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	6998      	ldr	r0, [r3, #24]
 800b9d0:	88fa      	ldrh	r2, [r7, #6]
 800b9d2:	2364      	movs	r3, #100	; 0x64
 800b9d4:	68b9      	ldr	r1, [r7, #8]
 800b9d6:	f005 f93e 	bl	8010c56 <HAL_SPI_Transmit>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	6918      	ldr	r0, [r3, #16]
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	8a9b      	ldrh	r3, [r3, #20]
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	f004 fa59 	bl	800fea0 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 800b9ee:	7dfb      	ldrb	r3, [r7, #23]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d001      	beq.n	800b9f8 <_ZN5L6470I8shield_1E5WriteEPht+0x4a>
        	return COMPONENT_ERROR;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	e000      	b.n	800b9fa <_ZN5L6470I8shield_1E5WriteEPht+0x4c>
        return COMPONENT_OK;
 800b9f8:	2300      	movs	r3, #0
    }
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3718      	adds	r7, #24
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}

0800ba02 <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t>:
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 800ba02:	b580      	push	{r7, lr}
 800ba04:	b088      	sub	sp, #32
 800ba06:	af02      	add	r7, sp, #8
 800ba08:	60f8      	str	r0, [r7, #12]
 800ba0a:	60b9      	str	r1, [r7, #8]
 800ba0c:	607a      	str	r2, [r7, #4]
 800ba0e:	807b      	strh	r3, [r7, #2]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	6918      	ldr	r0, [r3, #16]
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	8a9b      	ldrh	r3, [r3, #20]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	4619      	mov	r1, r3
 800ba1c:	f004 fa40 	bl	800fea0 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	6998      	ldr	r0, [r3, #24]
 800ba24:	887b      	ldrh	r3, [r7, #2]
 800ba26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ba2a:	9200      	str	r2, [sp, #0]
 800ba2c:	68ba      	ldr	r2, [r7, #8]
 800ba2e:	6879      	ldr	r1, [r7, #4]
 800ba30:	f005 fb5e 	bl	80110f0 <HAL_SPI_TransmitReceive>
 800ba34:	4603      	mov	r3, r0
 800ba36:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 800ba38:	7dfb      	ldrb	r3, [r7, #23]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d009      	beq.n	800ba52 <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t+0x50>
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	6918      	ldr	r0, [r3, #16]
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	8a9b      	ldrh	r3, [r3, #20]
 800ba46:	2201      	movs	r2, #1
 800ba48:	4619      	mov	r1, r3
 800ba4a:	f004 fa29 	bl	800fea0 <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 800ba4e:	2301      	movs	r3, #1
 800ba50:	e008      	b.n	800ba64 <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t+0x62>
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	6918      	ldr	r0, [r3, #16]
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	8a9b      	ldrh	r3, [r3, #20]
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	f004 fa1f 	bl	800fea0 <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 800ba62:	2300      	movs	r3, #0
    }
 800ba64:	4618      	mov	r0, r3
 800ba66:	3718      	adds	r7, #24
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <_ZN5L6470I8shield_1E23L6470_SPI_CommunicationEPhS2_tm>:
    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 800ba6c:	b590      	push	{r4, r7, lr}
 800ba6e:	b085      	sub	sp, #20
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	60f8      	str	r0, [r7, #12]
 800ba74:	60b9      	str	r1, [r7, #8]
 800ba76:	607a      	str	r2, [r7, #4]
 800ba78:	807b      	strh	r3, [r7, #2]
        ReadWrite(pRxData, pTxData, Size);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800ba82:	681c      	ldr	r4, [r3, #0]
 800ba84:	887b      	ldrh	r3, [r7, #2]
 800ba86:	68ba      	ldr	r2, [r7, #8]
 800ba88:	6879      	ldr	r1, [r7, #4]
 800ba8a:	68f8      	ldr	r0, [r7, #12]
 800ba8c:	47a0      	blx	r4
    }
 800ba8e:	bf00      	nop
 800ba90:	3714      	adds	r7, #20
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd90      	pop	{r4, r7, pc}
	...

0800ba98 <_ZN13abstractL6470C1Ev>:

uint8_t shield_1::count = 0;
uint8_t shield_2::count = 0;
uint8_t shield_3::count = 0;

abstractL6470::abstractL6470()
 800ba98:	b480      	push	{r7}
 800ba9a:	b083      	sub	sp, #12
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	4a04      	ldr	r2, [pc, #16]	; (800bab4 <_ZN13abstractL6470C1Ev+0x1c>)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	601a      	str	r2, [r3, #0]
{

}
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	4618      	mov	r0, r3
 800baaa:	370c      	adds	r7, #12
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr
 800bab4:	08017de4 	.word	0x08017de4

0800bab8 <_ZN13abstractL6470D1Ev>:

abstractL6470::~abstractL6470()
 800bab8:	b480      	push	{r7}
 800baba:	b083      	sub	sp, #12
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	4a04      	ldr	r2, [pc, #16]	; (800bad4 <_ZN13abstractL6470D1Ev+0x1c>)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	601a      	str	r2, [r3, #0]
{

}
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	4618      	mov	r0, r3
 800baca:	370c      	adds	r7, #12
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr
 800bad4:	08017de4 	.word	0x08017de4

0800bad8 <_ZNSt8__detail17_List_node_headerC1Ev>:
    {
#if _GLIBCXX_USE_CXX11_ABI
      std::size_t _M_size;
#endif

      _List_node_header() _GLIBCXX_NOEXCEPT
 800bad8:	b580      	push	{r7, lr}
 800bada:	b082      	sub	sp, #8
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
      { _M_init(); }
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f000 f805 	bl	800baf0 <_ZNSt8__detail17_List_node_header7_M_initEv>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	4618      	mov	r0, r3
 800baea:	3708      	adds	r7, #8
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <_ZNSt8__detail17_List_node_header7_M_initEv>:
	  }
      }
#endif

      void
      _M_init() _GLIBCXX_NOEXCEPT
 800baf0:	b480      	push	{r7}
 800baf2:	b083      	sub	sp, #12
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
      {
	this->_M_next = this->_M_prev = this;
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	605a      	str	r2, [r3, #4]
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	685a      	ldr	r2, [r3, #4]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	601a      	str	r2, [r3, #0]
#if _GLIBCXX_USE_CXX11_ABI
	this->_M_size = 0;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	609a      	str	r2, [r3, #8]
#endif
      }
 800bb0c:	bf00      	nop
 800bb0e:	370c      	adds	r7, #12
 800bb10:	46bd      	mov	sp, r7
 800bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb16:	4770      	bx	lr

0800bb18 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b082      	sub	sp, #8
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	1e5a      	subs	r2, r3, #1
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	605a      	str	r2, [r3, #4]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	bf0c      	ite	eq
 800bb32:	2301      	moveq	r3, #1
 800bb34:	2300      	movne	r3, #0
 800bb36:	b2db      	uxtb	r3, r3
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d019      	beq.n	800bb70 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	3308      	adds	r3, #8
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	4798      	blx	r3
          if (--_M_weak_count == 0)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	689b      	ldr	r3, [r3, #8]
 800bb4c:	1e5a      	subs	r2, r3, #1
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	609a      	str	r2, [r3, #8]
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	689b      	ldr	r3, [r3, #8]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	bf0c      	ite	eq
 800bb5a:	2301      	moveq	r3, #1
 800bb5c:	2300      	movne	r3, #0
 800bb5e:	b2db      	uxtb	r3, r3
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d005      	beq.n	800bb70 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	330c      	adds	r3, #12
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	4798      	blx	r3
        }
    }
 800bb70:	bf00      	nop
 800bb72:	3708      	adds	r7, #8
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <_ZN11AbstractMsgD1Ev>:

class AbstractMsg
{
	public:
		AbstractMsg() = default;
		virtual ~AbstractMsg() {};
 800bb78:	b480      	push	{r7}
 800bb7a:	b083      	sub	sp, #12
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	4a04      	ldr	r2, [pc, #16]	; (800bb94 <_ZN11AbstractMsgD1Ev+0x1c>)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	601a      	str	r2, [r3, #0]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	4618      	mov	r0, r3
 800bb8a:	370c      	adds	r7, #12
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr
 800bb94:	080180a0 	.word	0x080180a0

0800bb98 <_ZN11AbstractMsgD0Ev>:
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f7ff ffe9 	bl	800bb78 <_ZN11AbstractMsgD1Ev>
 800bba6:	2104      	movs	r1, #4
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f007 fb07 	bl	80131bc <_ZdlPvj>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3708      	adds	r7, #8
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <_ZN11AbstractMsgC1Ev>:
		AbstractMsg() = default;
 800bbb8:	b480      	push	{r7}
 800bbba:	b083      	sub	sp, #12
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	4a04      	ldr	r2, [pc, #16]	; (800bbd4 <_ZN11AbstractMsgC1Ev+0x1c>)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	601a      	str	r2, [r3, #0]
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	4618      	mov	r0, r3
 800bbca:	370c      	adds	r7, #12
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr
 800bbd4:	080180a0 	.word	0x080180a0

0800bbd8 <_ZN11HeaderClassC1Ehh>:
{
	static const msg_type header_msg_type = header;
	static const uint8_t header_size = 3;
	public:
		HeaderClass() = delete;
		HeaderClass(uint8_t msg_id, uint8_t msg_len): _data(new uint8_t[HeaderClass::header_msg_type])
 800bbd8:	b590      	push	{r4, r7, lr}
 800bbda:	b083      	sub	sp, #12
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	70fb      	strb	r3, [r7, #3]
 800bbe4:	4613      	mov	r3, r2
 800bbe6:	70bb      	strb	r3, [r7, #2]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7ff ffe4 	bl	800bbb8 <_ZN11AbstractMsgC1Ev>
 800bbf0:	4a19      	ldr	r2, [pc, #100]	; (800bc58 <_ZN11HeaderClassC1Ehh+0x80>)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	601a      	str	r2, [r3, #0]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	1d1c      	adds	r4, r3, #4
 800bbfa:	2000      	movs	r0, #0
 800bbfc:	f007 ff4e 	bl	8013a9c <_Znaj>
 800bc00:	4603      	mov	r3, r0
 800bc02:	4619      	mov	r1, r3
 800bc04:	4620      	mov	r0, r4
 800bc06:	f000 fc5a 	bl	800c4be <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
		{
			_data[0] = SerialID::MSG_START;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	3304      	adds	r3, #4
 800bc0e:	2100      	movs	r1, #0
 800bc10:	4618      	mov	r0, r3
 800bc12:	f000 fc82 	bl	800c51a <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800bc16:	4603      	mov	r3, r0
 800bc18:	22fe      	movs	r2, #254	; 0xfe
 800bc1a:	701a      	strb	r2, [r3, #0]
			_data[1] = msg_id;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	3304      	adds	r3, #4
 800bc20:	2101      	movs	r1, #1
 800bc22:	4618      	mov	r0, r3
 800bc24:	f000 fc79 	bl	800c51a <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800bc28:	4602      	mov	r2, r0
 800bc2a:	78fb      	ldrb	r3, [r7, #3]
 800bc2c:	7013      	strb	r3, [r2, #0]
			_data[2] = msg_len;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	3304      	adds	r3, #4
 800bc32:	2102      	movs	r1, #2
 800bc34:	4618      	mov	r0, r3
 800bc36:	f000 fc70 	bl	800c51a <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	78bb      	ldrb	r3, [r7, #2]
 800bc3e:	7013      	strb	r3, [r2, #0]
		};
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	e005      	b.n	800bc50 <_ZN11HeaderClassC1Ehh+0x78>
		HeaderClass(uint8_t msg_id, uint8_t msg_len): _data(new uint8_t[HeaderClass::header_msg_type])
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7ff ff96 	bl	800bb78 <_ZN11AbstractMsgD1Ev>
 800bc4c:	f007 fb4e 	bl	80132ec <__cxa_end_cleanup>
		};
 800bc50:	4618      	mov	r0, r3
 800bc52:	370c      	adds	r7, #12
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd90      	pop	{r4, r7, pc}
 800bc58:	08018084 	.word	0x08018084

0800bc5c <_ZNK11HeaderClass8get_dataEv>:
		~HeaderClass() = default;
		uint8_t* get_data() const noexcept override {return _data.get();};
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b082      	sub	sp, #8
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	3304      	adds	r3, #4
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f000 fc67 	bl	800c53c <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	4618      	mov	r0, r3
 800bc72:	3708      	adds	r7, #8
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <_ZNK11HeaderClass8get_typeEv>:
		msg_type get_type() const noexcept override {return HeaderClass::header_msg_type;}
 800bc78:	b480      	push	{r7}
 800bc7a:	b083      	sub	sp, #12
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	2300      	movs	r3, #0
 800bc82:	4618      	mov	r0, r3
 800bc84:	370c      	adds	r7, #12
 800bc86:	46bd      	mov	sp, r7
 800bc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8c:	4770      	bx	lr

0800bc8e <_ZNK11HeaderClass13get_data_sizeEv>:
		uint8_t get_data_size() const noexcept override {return HeaderClass::header_size;}
 800bc8e:	b480      	push	{r7}
 800bc90:	b083      	sub	sp, #12
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	6078      	str	r0, [r7, #4]
 800bc96:	2303      	movs	r3, #3
 800bc98:	4618      	mov	r0, r3
 800bc9a:	370c      	adds	r7, #12
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr

0800bca4 <_ZN6AckMsgC1Ev>:
class AckMsg : public AbstractMsg
{
	static const msg_type incoming_msg_type = acknowledge;
	static const uint8_t incoming_msg_size = 3;
	public:
		AckMsg(): _data(new uint8_t[AckMsg::incoming_msg_size])
 800bca4:	b590      	push	{r4, r7, lr}
 800bca6:	b083      	sub	sp, #12
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f7ff ff82 	bl	800bbb8 <_ZN11AbstractMsgC1Ev>
 800bcb4:	4a19      	ldr	r2, [pc, #100]	; (800bd1c <_ZN6AckMsgC1Ev+0x78>)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	601a      	str	r2, [r3, #0]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	1d1c      	adds	r4, r3, #4
 800bcbe:	2003      	movs	r0, #3
 800bcc0:	f007 feec 	bl	8013a9c <_Znaj>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	4619      	mov	r1, r3
 800bcc8:	4620      	mov	r0, r4
 800bcca:	f000 fbf8 	bl	800c4be <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
		{
			_data[0] = SerialID::MSG_NO_ACK;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	3304      	adds	r3, #4
 800bcd2:	2100      	movs	r1, #0
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f000 fc20 	bl	800c51a <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	22fc      	movs	r2, #252	; 0xfc
 800bcde:	701a      	strb	r2, [r3, #0]
			_data[1] = SerialID::MSG_NO_ID;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	3304      	adds	r3, #4
 800bce4:	2101      	movs	r1, #1
 800bce6:	4618      	mov	r0, r3
 800bce8:	f000 fc17 	bl	800c51a <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800bcec:	4603      	mov	r3, r0
 800bcee:	22fb      	movs	r2, #251	; 0xfb
 800bcf0:	701a      	strb	r2, [r3, #0]
			_data[2] = SerialID::MSG_NO_SIZE;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	3304      	adds	r3, #4
 800bcf6:	2102      	movs	r1, #2
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f000 fc0e 	bl	800c51a <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	22fa      	movs	r2, #250	; 0xfa
 800bd02:	701a      	strb	r2, [r3, #0]
		};
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	e005      	b.n	800bd14 <_ZN6AckMsgC1Ev+0x70>
		AckMsg(): _data(new uint8_t[AckMsg::incoming_msg_size])
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f7ff ff34 	bl	800bb78 <_ZN11AbstractMsgD1Ev>
 800bd10:	f007 faec 	bl	80132ec <__cxa_end_cleanup>
		};
 800bd14:	4618      	mov	r0, r3
 800bd16:	370c      	adds	r7, #12
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd90      	pop	{r4, r7, pc}
 800bd1c:	08018068 	.word	0x08018068

0800bd20 <_ZNK6AckMsg8get_dataEv>:

			}
			return *this;

		}
		uint8_t* get_data() const noexcept override {return _data.get();}
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b082      	sub	sp, #8
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	3304      	adds	r3, #4
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f000 fc05 	bl	800c53c <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 800bd32:	4603      	mov	r3, r0
 800bd34:	4618      	mov	r0, r3
 800bd36:	3708      	adds	r7, #8
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <_ZNK6AckMsg8get_typeEv>:
		msg_type get_type() const noexcept override {return AckMsg::incoming_msg_type;}
 800bd3c:	b480      	push	{r7}
 800bd3e:	b083      	sub	sp, #12
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	2302      	movs	r3, #2
 800bd46:	4618      	mov	r0, r3
 800bd48:	370c      	adds	r7, #12
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd50:	4770      	bx	lr

0800bd52 <_ZNK6AckMsg13get_data_sizeEv>:
		uint8_t get_data_size() const noexcept override {return AckMsg::incoming_msg_size;}
 800bd52:	b480      	push	{r7}
 800bd54:	b083      	sub	sp, #12
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	6078      	str	r0, [r7, #4]
 800bd5a:	2303      	movs	r3, #3
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	370c      	adds	r7, #12
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr

0800bd68 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE10_List_implD1Ev>:
	  }
	return __n;
      }
#endif

      struct _List_impl
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f000 fc00 	bl	800c576 <_ZNSaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEED1Ev>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3708      	adds	r7, #8
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EEC1Ev>:
      const _Node_alloc_type&
      _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT
      { return _M_impl; }

#if __cplusplus >= 201103L
      _List_base() = default;
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f000 fbe3 	bl	800c556 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE10_List_implC1Ev>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	4618      	mov	r0, r3
 800bd94:	3708      	adds	r7, #8
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}

0800bd9a <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EEC1Ev>:

      /**
       *  @brief  Creates a %list with no elements.
       */
#if __cplusplus >= 201103L
      list() = default;
 800bd9a:	b580      	push	{r7, lr}
 800bd9c:	b082      	sub	sp, #8
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	6078      	str	r0, [r7, #4]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	4618      	mov	r0, r3
 800bda6:	f7ff ffeb 	bl	800bd80 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EEC1Ev>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	4618      	mov	r0, r3
 800bdae:	3708      	adds	r7, #8
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EED1Ev>:
       *  things.  The _Base dtor only erases the elements, and note
       *  that if the elements themselves are pointers, the pointed-to
       *  memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      ~list() = default;
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b082      	sub	sp, #8
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f000 fbe5 	bl	800c58e <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EED1Ev>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3708      	adds	r7, #8
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}

0800bdce <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 800bdce:	b580      	push	{r7, lr}
 800bdd0:	b082      	sub	sp, #8
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	6078      	str	r0, [r7, #4]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	3304      	adds	r3, #4
 800bdda:	4618      	mov	r0, r3
 800bddc:	f000 fbf4 	bl	800c5c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	4618      	mov	r0, r3
 800bde4:	3708      	adds	r7, #8
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}

0800bdea <_ZNSt10shared_ptrI11AbstractMsgED1Ev>:
   * the stored pointer returned by `get()`, not the owned pointer.
   * To test whether two `shared_ptr` objects share ownership of the same
   * pointer see `std::shared_ptr::owner_before` and `std::owner_less`.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 800bdea:	b580      	push	{r7, lr}
 800bdec:	b082      	sub	sp, #8
 800bdee:	af00      	add	r7, sp, #0
 800bdf0:	6078      	str	r0, [r7, #4]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f7ff ffea 	bl	800bdce <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3708      	adds	r7, #8
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <_ZN10MsgHandlerC1EP20__UART_HandleTypeDef>:


class MsgHandler
{
	public:
		MsgHandler(UART_HandleTypeDef *huart2) : huart(huart2),received_motor_speeds(false) ,ongoing_fetch(false),register_ongoing_fetch(false), rxHeader(SerialID::MSG_NO_ID,3)
 800be04:	b580      	push	{r7, lr}
 800be06:	b082      	sub	sp, #8
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	6039      	str	r1, [r7, #0]
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	683a      	ldr	r2, [r7, #0]
 800be12:	601a      	str	r2, [r3, #0]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2200      	movs	r2, #0
 800be18:	711a      	strb	r2, [r3, #4]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2200      	movs	r2, #0
 800be1e:	715a      	strb	r2, [r3, #5]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2200      	movs	r2, #0
 800be24:	719a      	strb	r2, [r3, #6]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	3308      	adds	r3, #8
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7ff ff3a 	bl	800bca4 <_ZN6AckMsgC1Ev>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	3310      	adds	r3, #16
 800be34:	4618      	mov	r0, r3
 800be36:	f7ff ff35 	bl	800bca4 <_ZN6AckMsgC1Ev>
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	3318      	adds	r3, #24
 800be3e:	2203      	movs	r2, #3
 800be40:	21fb      	movs	r1, #251	; 0xfb
 800be42:	4618      	mov	r0, r3
 800be44:	f7ff fec8 	bl	800bbd8 <_ZN11HeaderClassC1Ehh>
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	3324      	adds	r3, #36	; 0x24
 800be4c:	4618      	mov	r0, r3
 800be4e:	f7ff ffa4 	bl	800bd9a <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EEC1Ev>
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	3330      	adds	r3, #48	; 0x30
 800be56:	4618      	mov	r0, r3
 800be58:	f000 fba9 	bl	800c5ae <_ZNSt10shared_ptrI11AbstractMsgEC1Ev>
		{
			motor_speeds = new float[4];
 800be5c:	2010      	movs	r0, #16
 800be5e:	f007 fe1d 	bl	8013a9c <_Znaj>
 800be62:	4603      	mov	r3, r0
 800be64:	461a      	mov	r2, r3
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	639a      	str	r2, [r3, #56]	; 0x38
			launched = false;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2200      	movs	r2, #0
 800be6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		}
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	e01c      	b.n	800beb0 <_ZN10MsgHandlerC1EP20__UART_HandleTypeDef+0xac>
		MsgHandler(UART_HandleTypeDef *huart2) : huart(huart2),received_motor_speeds(false) ,ongoing_fetch(false),register_ongoing_fetch(false), rxHeader(SerialID::MSG_NO_ID,3)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	3330      	adds	r3, #48	; 0x30
 800be7a:	4618      	mov	r0, r3
 800be7c:	f7ff ffb5 	bl	800bdea <_ZNSt10shared_ptrI11AbstractMsgED1Ev>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	3324      	adds	r3, #36	; 0x24
 800be84:	4618      	mov	r0, r3
 800be86:	f7ff ff95 	bl	800bdb4 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EED1Ev>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	3318      	adds	r3, #24
 800be8e:	4618      	mov	r0, r3
 800be90:	f000 fdde 	bl	800ca50 <_ZN11HeaderClassD1Ev>
 800be94:	e7ff      	b.n	800be96 <_ZN10MsgHandlerC1EP20__UART_HandleTypeDef+0x92>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	3310      	adds	r3, #16
 800be9a:	4618      	mov	r0, r3
 800be9c:	f000 fdb0 	bl	800ca00 <_ZN6AckMsgD1Ev>
 800bea0:	e7ff      	b.n	800bea2 <_ZN10MsgHandlerC1EP20__UART_HandleTypeDef+0x9e>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	3308      	adds	r3, #8
 800bea6:	4618      	mov	r0, r3
 800bea8:	f000 fdaa 	bl	800ca00 <_ZN6AckMsgD1Ev>
 800beac:	f007 fa1e 	bl	80132ec <__cxa_end_cleanup>
		}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3708      	adds	r7, #8
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <_ZN10MsgHandlerD1Ev>:
		~MsgHandler() { delete [] motor_speeds;}
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d004      	beq.n	800bed2 <_ZN10MsgHandlerD1Ev+0x1a>
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800becc:	4618      	mov	r0, r3
 800bece:	f007 f977 	bl	80131c0 <_ZdaPv>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	3330      	adds	r3, #48	; 0x30
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7ff ff87 	bl	800bdea <_ZNSt10shared_ptrI11AbstractMsgED1Ev>
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	3324      	adds	r3, #36	; 0x24
 800bee0:	4618      	mov	r0, r3
 800bee2:	f7ff ff67 	bl	800bdb4 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EED1Ev>
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	3318      	adds	r3, #24
 800beea:	4618      	mov	r0, r3
 800beec:	f000 fdb0 	bl	800ca50 <_ZN11HeaderClassD1Ev>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	3310      	adds	r3, #16
 800bef4:	4618      	mov	r0, r3
 800bef6:	f000 fd83 	bl	800ca00 <_ZN6AckMsgD1Ev>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	3308      	adds	r3, #8
 800befe:	4618      	mov	r0, r3
 800bf00:	f000 fd7e 	bl	800ca00 <_ZN6AckMsgD1Ev>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	4618      	mov	r0, r3
 800bf08:	3708      	adds	r7, #8
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}

0800bf0e <_ZN10MsgHandler14launch_handlerEv>:
		void process_txclpt_callback();
		void send_print(const char* msg);
		void send_motor_speeds(float* motor_speeds);
		void process_timeout(void);
		bool get_received_motor_speeds(float* to_fill_motor_speeds);
		void launch_handler() { if( launched == false){launched=true; receive_data_header();}};
 800bf0e:	b580      	push	{r7, lr}
 800bf10:	b082      	sub	sp, #8
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	6078      	str	r0, [r7, #4]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d106      	bne.n	800bf2e <_ZN10MsgHandler14launch_handlerEv+0x20>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2201      	movs	r2, #1
 800bf24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f001 f9dd 	bl	800d2e8 <_ZN10MsgHandler19receive_data_headerEv>
 800bf2e:	bf00      	nop
 800bf30:	3708      	adds	r7, #8
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
	...

0800bf38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800bf38:	b590      	push	{r4, r7, lr}
 800bf3a:	b087      	sub	sp, #28
 800bf3c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800bf3e:	f003 fbd5 	bl	800f6ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800bf42:	f000 f893 	bl	800c06c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800bf46:	f000 f9d9 	bl	800c2fc <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 800bf4a:	f000 f9a9 	bl	800c2a0 <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 800bf4e:	f000 f94b 	bl	800c1e8 <_ZL12MX_TIM2_Initv>
  MX_SPI1_Init();
 800bf52:	f000 f90d 	bl	800c170 <_ZL12MX_SPI1_Initv>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 800bf56:	483c      	ldr	r0, [pc, #240]	; (800c048 <main+0x110>)
 800bf58:	f005 fbec 	bl	8011734 <HAL_TIM_Base_Start_IT>

  moteurs = new BlocMoteurs(&hspi1, reset_shield_1_GPIO_Port, reset_shield_1_Pin, ssel1_GPIO_Port, ssel1_Pin,
		  	  	  	  	  	  	    reset_shield_2_GPIO_Port, reset_shield_2_Pin, ssel2_GPIO_Port, ssel2_Pin);
 800bf5c:	f44f 70bc 	mov.w	r0, #376	; 0x178
 800bf60:	f007 fd8b 	bl	8013a7a <_Znwj>
 800bf64:	4603      	mov	r3, r0
 800bf66:	461c      	mov	r4, r3
 800bf68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf6c:	9305      	str	r3, [sp, #20]
 800bf6e:	4b37      	ldr	r3, [pc, #220]	; (800c04c <main+0x114>)
 800bf70:	9304      	str	r3, [sp, #16]
 800bf72:	2310      	movs	r3, #16
 800bf74:	9303      	str	r3, [sp, #12]
 800bf76:	4b36      	ldr	r3, [pc, #216]	; (800c050 <main+0x118>)
 800bf78:	9302      	str	r3, [sp, #8]
 800bf7a:	2310      	movs	r3, #16
 800bf7c:	9301      	str	r3, [sp, #4]
 800bf7e:	4b33      	ldr	r3, [pc, #204]	; (800c04c <main+0x114>)
 800bf80:	9300      	str	r3, [sp, #0]
 800bf82:	2320      	movs	r3, #32
 800bf84:	4a32      	ldr	r2, [pc, #200]	; (800c050 <main+0x118>)
 800bf86:	4933      	ldr	r1, [pc, #204]	; (800c054 <main+0x11c>)
 800bf88:	4620      	mov	r0, r4
 800bf8a:	f7f6 f8c9 	bl	8002120 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>
  moteurs = new BlocMoteurs(&hspi1, reset_shield_1_GPIO_Port, reset_shield_1_Pin, ssel1_GPIO_Port, ssel1_Pin,
 800bf8e:	4b32      	ldr	r3, [pc, #200]	; (800c058 <main+0x120>)
 800bf90:	601c      	str	r4, [r3, #0]

  msg_handler.launch_handler();
 800bf92:	4832      	ldr	r0, [pc, #200]	; (800c05c <main+0x124>)
 800bf94:	f7ff ffbb 	bl	800bf0e <_ZN10MsgHandler14launch_handlerEv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  timer_timeout_count = 0;
 800bf98:	4b31      	ldr	r3, [pc, #196]	; (800c060 <main+0x128>)
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	601a      	str	r2, [r3, #0]
	  while(1)
	  {

			if( msg_handler.get_received_motor_speeds(input_motor_speeds) != true)
 800bf9e:	4931      	ldr	r1, [pc, #196]	; (800c064 <main+0x12c>)
 800bfa0:	482e      	ldr	r0, [pc, #184]	; (800c05c <main+0x124>)
 800bfa2:	f001 faf8 	bl	800d596 <_ZN10MsgHandler25get_received_motor_speedsEPf>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	bf14      	ite	ne
 800bfac:	2301      	movne	r3, #1
 800bfae:	2300      	moveq	r3, #0
 800bfb0:	b2db      	uxtb	r3, r3
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d007      	beq.n	800bfc6 <main+0x8e>
			{
				if( timer_timeout_count >= MS_500)
 800bfb6:	4b2a      	ldr	r3, [pc, #168]	; (800c060 <main+0x128>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	2b63      	cmp	r3, #99	; 0x63
 800bfbc:	ddef      	ble.n	800bf9e <main+0x66>
				{
					//moteurs->motors_stop_soft_hiz();
					timeout_moteurs = true;
 800bfbe:	4b2a      	ldr	r3, [pc, #168]	; (800c068 <main+0x130>)
 800bfc0:	2201      	movs	r2, #1
 800bfc2:	701a      	strb	r2, [r3, #0]
					//msg_handler.send_print("Motors Timeout");
					break;
 800bfc4:	e002      	b.n	800bfcc <main+0x94>
				//moteurs->motors_on();
				if(timeout_moteurs == true)
				{
					//msg_handler.send_print("Motors exited timeout");
				}
				timeout_moteurs = false;
 800bfc6:	4b28      	ldr	r3, [pc, #160]	; (800c068 <main+0x130>)
 800bfc8:	2200      	movs	r2, #0
 800bfca:	701a      	strb	r2, [r3, #0]
				break;
			}

	  }
	  if(timeout_moteurs == false)
 800bfcc:	4b26      	ldr	r3, [pc, #152]	; (800c068 <main+0x130>)
 800bfce:	781b      	ldrb	r3, [r3, #0]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d1e1      	bne.n	800bf98 <main+0x60>
	  {
		  if( fabs(input_motor_speeds[front_left]) < 0.001 && fabs(input_motor_speeds[front_right]) < 0.001 )
 800bfd4:	4b23      	ldr	r3, [pc, #140]	; (800c064 <main+0x12c>)
 800bfd6:	edd3 7a00 	vldr	s15, [r3]
 800bfda:	eef0 7ae7 	vabs.f32	s15, s15
 800bfde:	ee17 0a90 	vmov	r0, s15
 800bfe2:	f7f4 fae1 	bl	80005a8 <__aeabi_f2d>
 800bfe6:	a316      	add	r3, pc, #88	; (adr r3, 800c040 <main+0x108>)
 800bfe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfec:	f7f4 fda6 	bl	8000b3c <__aeabi_dcmplt>
 800bff0:	4603      	mov	r3, r0
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d016      	beq.n	800c024 <main+0xec>
 800bff6:	4b1b      	ldr	r3, [pc, #108]	; (800c064 <main+0x12c>)
 800bff8:	edd3 7a01 	vldr	s15, [r3, #4]
 800bffc:	eef0 7ae7 	vabs.f32	s15, s15
 800c000:	ee17 0a90 	vmov	r0, s15
 800c004:	f7f4 fad0 	bl	80005a8 <__aeabi_f2d>
 800c008:	a30d      	add	r3, pc, #52	; (adr r3, 800c040 <main+0x108>)
 800c00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00e:	f7f4 fd95 	bl	8000b3c <__aeabi_dcmplt>
 800c012:	4603      	mov	r3, r0
 800c014:	2b00      	cmp	r3, #0
 800c016:	d005      	beq.n	800c024 <main+0xec>
		  {
			  HAL_GPIO_WritePin(LD2_GPIO_Port , LD2_Pin, GPIO_PinState::GPIO_PIN_SET);
 800c018:	2201      	movs	r2, #1
 800c01a:	2120      	movs	r1, #32
 800c01c:	480b      	ldr	r0, [pc, #44]	; (800c04c <main+0x114>)
 800c01e:	f003 ff3f 	bl	800fea0 <HAL_GPIO_WritePin>
 800c022:	e004      	b.n	800c02e <main+0xf6>
		  }
		  else
		  {
			  HAL_GPIO_WritePin(LD2_GPIO_Port , LD2_Pin, GPIO_PinState::GPIO_PIN_RESET);
 800c024:	2200      	movs	r2, #0
 800c026:	2120      	movs	r1, #32
 800c028:	4808      	ldr	r0, [pc, #32]	; (800c04c <main+0x114>)
 800c02a:	f003 ff39 	bl	800fea0 <HAL_GPIO_WritePin>
	  timer_timeout_count = 0;
 800c02e:	e7b3      	b.n	800bf98 <main+0x60>
		  	  	  	  	  	  	    reset_shield_2_GPIO_Port, reset_shield_2_Pin, ssel2_GPIO_Port, ssel2_Pin);
 800c030:	f44f 71bc 	mov.w	r1, #376	; 0x178
 800c034:	4620      	mov	r0, r4
 800c036:	f007 f8c1 	bl	80131bc <_ZdlPvj>
 800c03a:	f007 f957 	bl	80132ec <__cxa_end_cleanup>
 800c03e:	bf00      	nop
 800c040:	d2f1a9fc 	.word	0xd2f1a9fc
 800c044:	3f50624d 	.word	0x3f50624d
 800c048:	200002f0 	.word	0x200002f0
 800c04c:	40020000 	.word	0x40020000
 800c050:	40020400 	.word	0x40020400
 800c054:	20000298 	.word	0x20000298
 800c058:	200003d4 	.word	0x200003d4
 800c05c:	2000037c 	.word	0x2000037c
 800c060:	200003bc 	.word	0x200003bc
 800c064:	200003c0 	.word	0x200003c0
 800c068:	200003d0 	.word	0x200003d0

0800c06c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b094      	sub	sp, #80	; 0x50
 800c070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c072:	f107 031c 	add.w	r3, r7, #28
 800c076:	2234      	movs	r2, #52	; 0x34
 800c078:	2100      	movs	r1, #0
 800c07a:	4618      	mov	r0, r3
 800c07c:	f008 fd7d 	bl	8014b7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c080:	f107 0308 	add.w	r3, r7, #8
 800c084:	2200      	movs	r2, #0
 800c086:	601a      	str	r2, [r3, #0]
 800c088:	605a      	str	r2, [r3, #4]
 800c08a:	609a      	str	r2, [r3, #8]
 800c08c:	60da      	str	r2, [r3, #12]
 800c08e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800c090:	2300      	movs	r3, #0
 800c092:	607b      	str	r3, [r7, #4]
 800c094:	4b34      	ldr	r3, [pc, #208]	; (800c168 <_Z18SystemClock_Configv+0xfc>)
 800c096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c098:	4a33      	ldr	r2, [pc, #204]	; (800c168 <_Z18SystemClock_Configv+0xfc>)
 800c09a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c09e:	6413      	str	r3, [r2, #64]	; 0x40
 800c0a0:	4b31      	ldr	r3, [pc, #196]	; (800c168 <_Z18SystemClock_Configv+0xfc>)
 800c0a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0a8:	607b      	str	r3, [r7, #4]
 800c0aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	603b      	str	r3, [r7, #0]
 800c0b0:	4b2e      	ldr	r3, [pc, #184]	; (800c16c <_Z18SystemClock_Configv+0x100>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	4a2d      	ldr	r2, [pc, #180]	; (800c16c <_Z18SystemClock_Configv+0x100>)
 800c0b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c0ba:	6013      	str	r3, [r2, #0]
 800c0bc:	4b2b      	ldr	r3, [pc, #172]	; (800c16c <_Z18SystemClock_Configv+0x100>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c0c4:	603b      	str	r3, [r7, #0]
 800c0c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800c0c8:	2302      	movs	r3, #2
 800c0ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800c0d0:	2310      	movs	r3, #16
 800c0d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c0d4:	2302      	movs	r3, #2
 800c0d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800c0dc:	2308      	movs	r3, #8
 800c0de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800c0e0:	23b4      	movs	r3, #180	; 0xb4
 800c0e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c0e4:	2302      	movs	r3, #2
 800c0e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800c0e8:	2302      	movs	r3, #2
 800c0ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800c0ec:	2302      	movs	r3, #2
 800c0ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c0f0:	f107 031c 	add.w	r3, r7, #28
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f004 fa87 	bl	8010608 <HAL_RCC_OscConfig>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	bf14      	ite	ne
 800c100:	2301      	movne	r3, #1
 800c102:	2300      	moveq	r3, #0
 800c104:	b2db      	uxtb	r3, r3
 800c106:	2b00      	cmp	r3, #0
 800c108:	d001      	beq.n	800c10e <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800c10a:	f000 f9c3 	bl	800c494 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800c10e:	f003 fee1 	bl	800fed4 <HAL_PWREx_EnableOverDrive>
 800c112:	4603      	mov	r3, r0
 800c114:	2b00      	cmp	r3, #0
 800c116:	bf14      	ite	ne
 800c118:	2301      	movne	r3, #1
 800c11a:	2300      	moveq	r3, #0
 800c11c:	b2db      	uxtb	r3, r3
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d001      	beq.n	800c126 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 800c122:	f000 f9b7 	bl	800c494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c126:	230f      	movs	r3, #15
 800c128:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c12a:	2302      	movs	r3, #2
 800c12c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c12e:	2300      	movs	r3, #0
 800c130:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800c132:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800c136:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800c138:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800c13c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800c13e:	f107 0308 	add.w	r3, r7, #8
 800c142:	2105      	movs	r1, #5
 800c144:	4618      	mov	r0, r3
 800c146:	f003 ff15 	bl	800ff74 <HAL_RCC_ClockConfig>
 800c14a:	4603      	mov	r3, r0
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	bf14      	ite	ne
 800c150:	2301      	movne	r3, #1
 800c152:	2300      	moveq	r3, #0
 800c154:	b2db      	uxtb	r3, r3
 800c156:	2b00      	cmp	r3, #0
 800c158:	d001      	beq.n	800c15e <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 800c15a:	f000 f99b 	bl	800c494 <Error_Handler>
  }
}
 800c15e:	bf00      	nop
 800c160:	3750      	adds	r7, #80	; 0x50
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	40023800 	.word	0x40023800
 800c16c:	40007000 	.word	0x40007000

0800c170 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800c174:	4b1a      	ldr	r3, [pc, #104]	; (800c1e0 <_ZL12MX_SPI1_Initv+0x70>)
 800c176:	4a1b      	ldr	r2, [pc, #108]	; (800c1e4 <_ZL12MX_SPI1_Initv+0x74>)
 800c178:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800c17a:	4b19      	ldr	r3, [pc, #100]	; (800c1e0 <_ZL12MX_SPI1_Initv+0x70>)
 800c17c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800c180:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800c182:	4b17      	ldr	r3, [pc, #92]	; (800c1e0 <_ZL12MX_SPI1_Initv+0x70>)
 800c184:	2200      	movs	r2, #0
 800c186:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800c188:	4b15      	ldr	r3, [pc, #84]	; (800c1e0 <_ZL12MX_SPI1_Initv+0x70>)
 800c18a:	2200      	movs	r2, #0
 800c18c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800c18e:	4b14      	ldr	r3, [pc, #80]	; (800c1e0 <_ZL12MX_SPI1_Initv+0x70>)
 800c190:	2202      	movs	r2, #2
 800c192:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800c194:	4b12      	ldr	r3, [pc, #72]	; (800c1e0 <_ZL12MX_SPI1_Initv+0x70>)
 800c196:	2201      	movs	r2, #1
 800c198:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800c19a:	4b11      	ldr	r3, [pc, #68]	; (800c1e0 <_ZL12MX_SPI1_Initv+0x70>)
 800c19c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c1a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800c1a2:	4b0f      	ldr	r3, [pc, #60]	; (800c1e0 <_ZL12MX_SPI1_Initv+0x70>)
 800c1a4:	2210      	movs	r2, #16
 800c1a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c1a8:	4b0d      	ldr	r3, [pc, #52]	; (800c1e0 <_ZL12MX_SPI1_Initv+0x70>)
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800c1ae:	4b0c      	ldr	r3, [pc, #48]	; (800c1e0 <_ZL12MX_SPI1_Initv+0x70>)
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c1b4:	4b0a      	ldr	r3, [pc, #40]	; (800c1e0 <_ZL12MX_SPI1_Initv+0x70>)
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800c1ba:	4b09      	ldr	r3, [pc, #36]	; (800c1e0 <_ZL12MX_SPI1_Initv+0x70>)
 800c1bc:	220a      	movs	r2, #10
 800c1be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800c1c0:	4807      	ldr	r0, [pc, #28]	; (800c1e0 <_ZL12MX_SPI1_Initv+0x70>)
 800c1c2:	f004 fcbf 	bl	8010b44 <HAL_SPI_Init>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	bf14      	ite	ne
 800c1cc:	2301      	movne	r3, #1
 800c1ce:	2300      	moveq	r3, #0
 800c1d0:	b2db      	uxtb	r3, r3
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d001      	beq.n	800c1da <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800c1d6:	f000 f95d 	bl	800c494 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800c1da:	bf00      	nop
 800c1dc:	bd80      	pop	{r7, pc}
 800c1de:	bf00      	nop
 800c1e0:	20000298 	.word	0x20000298
 800c1e4:	40013000 	.word	0x40013000

0800c1e8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b086      	sub	sp, #24
 800c1ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c1ee:	f107 0308 	add.w	r3, r7, #8
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	601a      	str	r2, [r3, #0]
 800c1f6:	605a      	str	r2, [r3, #4]
 800c1f8:	609a      	str	r2, [r3, #8]
 800c1fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c1fc:	463b      	mov	r3, r7
 800c1fe:	2200      	movs	r2, #0
 800c200:	601a      	str	r2, [r3, #0]
 800c202:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800c204:	4b24      	ldr	r3, [pc, #144]	; (800c298 <_ZL12MX_TIM2_Initv+0xb0>)
 800c206:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c20a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800c20c:	4b22      	ldr	r3, [pc, #136]	; (800c298 <_ZL12MX_TIM2_Initv+0xb0>)
 800c20e:	2200      	movs	r2, #0
 800c210:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c212:	4b21      	ldr	r3, [pc, #132]	; (800c298 <_ZL12MX_TIM2_Initv+0xb0>)
 800c214:	2200      	movs	r2, #0
 800c216:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 390000;
 800c218:	4b1f      	ldr	r3, [pc, #124]	; (800c298 <_ZL12MX_TIM2_Initv+0xb0>)
 800c21a:	4a20      	ldr	r2, [pc, #128]	; (800c29c <_ZL12MX_TIM2_Initv+0xb4>)
 800c21c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c21e:	4b1e      	ldr	r3, [pc, #120]	; (800c298 <_ZL12MX_TIM2_Initv+0xb0>)
 800c220:	2200      	movs	r2, #0
 800c222:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800c224:	4b1c      	ldr	r3, [pc, #112]	; (800c298 <_ZL12MX_TIM2_Initv+0xb0>)
 800c226:	2280      	movs	r2, #128	; 0x80
 800c228:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800c22a:	481b      	ldr	r0, [pc, #108]	; (800c298 <_ZL12MX_TIM2_Initv+0xb0>)
 800c22c:	f005 fa32 	bl	8011694 <HAL_TIM_Base_Init>
 800c230:	4603      	mov	r3, r0
 800c232:	2b00      	cmp	r3, #0
 800c234:	bf14      	ite	ne
 800c236:	2301      	movne	r3, #1
 800c238:	2300      	moveq	r3, #0
 800c23a:	b2db      	uxtb	r3, r3
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d001      	beq.n	800c244 <_ZL12MX_TIM2_Initv+0x5c>
  {
    Error_Handler();
 800c240:	f000 f928 	bl	800c494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c244:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c248:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800c24a:	f107 0308 	add.w	r3, r7, #8
 800c24e:	4619      	mov	r1, r3
 800c250:	4811      	ldr	r0, [pc, #68]	; (800c298 <_ZL12MX_TIM2_Initv+0xb0>)
 800c252:	f005 fbe7 	bl	8011a24 <HAL_TIM_ConfigClockSource>
 800c256:	4603      	mov	r3, r0
 800c258:	2b00      	cmp	r3, #0
 800c25a:	bf14      	ite	ne
 800c25c:	2301      	movne	r3, #1
 800c25e:	2300      	moveq	r3, #0
 800c260:	b2db      	uxtb	r3, r3
 800c262:	2b00      	cmp	r3, #0
 800c264:	d001      	beq.n	800c26a <_ZL12MX_TIM2_Initv+0x82>
  {
    Error_Handler();
 800c266:	f000 f915 	bl	800c494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c26a:	2300      	movs	r3, #0
 800c26c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c26e:	2300      	movs	r3, #0
 800c270:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c272:	463b      	mov	r3, r7
 800c274:	4619      	mov	r1, r3
 800c276:	4808      	ldr	r0, [pc, #32]	; (800c298 <_ZL12MX_TIM2_Initv+0xb0>)
 800c278:	f005 fdfe 	bl	8011e78 <HAL_TIMEx_MasterConfigSynchronization>
 800c27c:	4603      	mov	r3, r0
 800c27e:	2b00      	cmp	r3, #0
 800c280:	bf14      	ite	ne
 800c282:	2301      	movne	r3, #1
 800c284:	2300      	moveq	r3, #0
 800c286:	b2db      	uxtb	r3, r3
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d001      	beq.n	800c290 <_ZL12MX_TIM2_Initv+0xa8>
  {
    Error_Handler();
 800c28c:	f000 f902 	bl	800c494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800c290:	bf00      	nop
 800c292:	3718      	adds	r7, #24
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}
 800c298:	200002f0 	.word	0x200002f0
 800c29c:	0005f370 	.word	0x0005f370

0800c2a0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800c2a4:	4b13      	ldr	r3, [pc, #76]	; (800c2f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c2a6:	4a14      	ldr	r2, [pc, #80]	; (800c2f8 <_ZL19MX_USART2_UART_Initv+0x58>)
 800c2a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800c2aa:	4b12      	ldr	r3, [pc, #72]	; (800c2f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c2ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800c2b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800c2b2:	4b10      	ldr	r3, [pc, #64]	; (800c2f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800c2b8:	4b0e      	ldr	r3, [pc, #56]	; (800c2f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800c2be:	4b0d      	ldr	r3, [pc, #52]	; (800c2f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800c2c4:	4b0b      	ldr	r3, [pc, #44]	; (800c2f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c2c6:	220c      	movs	r2, #12
 800c2c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c2ca:	4b0a      	ldr	r3, [pc, #40]	; (800c2f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800c2d0:	4b08      	ldr	r3, [pc, #32]	; (800c2f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800c2d6:	4807      	ldr	r0, [pc, #28]	; (800c2f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c2d8:	f005 fe5e 	bl	8011f98 <HAL_UART_Init>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	bf14      	ite	ne
 800c2e2:	2301      	movne	r3, #1
 800c2e4:	2300      	moveq	r3, #0
 800c2e6:	b2db      	uxtb	r3, r3
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d001      	beq.n	800c2f0 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 800c2ec:	f000 f8d2 	bl	800c494 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800c2f0:	bf00      	nop
 800c2f2:	bd80      	pop	{r7, pc}
 800c2f4:	20000338 	.word	0x20000338
 800c2f8:	40004400 	.word	0x40004400

0800c2fc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b08a      	sub	sp, #40	; 0x28
 800c300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c302:	f107 0314 	add.w	r3, r7, #20
 800c306:	2200      	movs	r2, #0
 800c308:	601a      	str	r2, [r3, #0]
 800c30a:	605a      	str	r2, [r3, #4]
 800c30c:	609a      	str	r2, [r3, #8]
 800c30e:	60da      	str	r2, [r3, #12]
 800c310:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c312:	2300      	movs	r3, #0
 800c314:	613b      	str	r3, [r7, #16]
 800c316:	4b38      	ldr	r3, [pc, #224]	; (800c3f8 <_ZL12MX_GPIO_Initv+0xfc>)
 800c318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c31a:	4a37      	ldr	r2, [pc, #220]	; (800c3f8 <_ZL12MX_GPIO_Initv+0xfc>)
 800c31c:	f043 0304 	orr.w	r3, r3, #4
 800c320:	6313      	str	r3, [r2, #48]	; 0x30
 800c322:	4b35      	ldr	r3, [pc, #212]	; (800c3f8 <_ZL12MX_GPIO_Initv+0xfc>)
 800c324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c326:	f003 0304 	and.w	r3, r3, #4
 800c32a:	613b      	str	r3, [r7, #16]
 800c32c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c32e:	2300      	movs	r3, #0
 800c330:	60fb      	str	r3, [r7, #12]
 800c332:	4b31      	ldr	r3, [pc, #196]	; (800c3f8 <_ZL12MX_GPIO_Initv+0xfc>)
 800c334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c336:	4a30      	ldr	r2, [pc, #192]	; (800c3f8 <_ZL12MX_GPIO_Initv+0xfc>)
 800c338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c33c:	6313      	str	r3, [r2, #48]	; 0x30
 800c33e:	4b2e      	ldr	r3, [pc, #184]	; (800c3f8 <_ZL12MX_GPIO_Initv+0xfc>)
 800c340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c346:	60fb      	str	r3, [r7, #12]
 800c348:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c34a:	2300      	movs	r3, #0
 800c34c:	60bb      	str	r3, [r7, #8]
 800c34e:	4b2a      	ldr	r3, [pc, #168]	; (800c3f8 <_ZL12MX_GPIO_Initv+0xfc>)
 800c350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c352:	4a29      	ldr	r2, [pc, #164]	; (800c3f8 <_ZL12MX_GPIO_Initv+0xfc>)
 800c354:	f043 0301 	orr.w	r3, r3, #1
 800c358:	6313      	str	r3, [r2, #48]	; 0x30
 800c35a:	4b27      	ldr	r3, [pc, #156]	; (800c3f8 <_ZL12MX_GPIO_Initv+0xfc>)
 800c35c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c35e:	f003 0301 	and.w	r3, r3, #1
 800c362:	60bb      	str	r3, [r7, #8]
 800c364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c366:	2300      	movs	r3, #0
 800c368:	607b      	str	r3, [r7, #4]
 800c36a:	4b23      	ldr	r3, [pc, #140]	; (800c3f8 <_ZL12MX_GPIO_Initv+0xfc>)
 800c36c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c36e:	4a22      	ldr	r2, [pc, #136]	; (800c3f8 <_ZL12MX_GPIO_Initv+0xfc>)
 800c370:	f043 0302 	orr.w	r3, r3, #2
 800c374:	6313      	str	r3, [r2, #48]	; 0x30
 800c376:	4b20      	ldr	r3, [pc, #128]	; (800c3f8 <_ZL12MX_GPIO_Initv+0xfc>)
 800c378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c37a:	f003 0302 	and.w	r3, r3, #2
 800c37e:	607b      	str	r3, [r7, #4]
 800c380:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ssel1_Pin|LD2_Pin|ssel2_Pin, GPIO_PIN_RESET);
 800c382:	2200      	movs	r2, #0
 800c384:	f44f 6186 	mov.w	r1, #1072	; 0x430
 800c388:	481c      	ldr	r0, [pc, #112]	; (800c3fc <_ZL12MX_GPIO_Initv+0x100>)
 800c38a:	f003 fd89 	bl	800fea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, reset_shield_2_Pin|reset_shield_1_Pin, GPIO_PIN_RESET);
 800c38e:	2200      	movs	r2, #0
 800c390:	2130      	movs	r1, #48	; 0x30
 800c392:	481b      	ldr	r0, [pc, #108]	; (800c400 <_ZL12MX_GPIO_Initv+0x104>)
 800c394:	f003 fd84 	bl	800fea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800c398:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c39c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800c39e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800c3a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800c3a8:	f107 0314 	add.w	r3, r7, #20
 800c3ac:	4619      	mov	r1, r3
 800c3ae:	4815      	ldr	r0, [pc, #84]	; (800c404 <_ZL12MX_GPIO_Initv+0x108>)
 800c3b0:	f003 fbe2 	bl	800fb78 <HAL_GPIO_Init>

  /*Configure GPIO pins : ssel1_Pin LD2_Pin ssel2_Pin */
  GPIO_InitStruct.Pin = ssel1_Pin|LD2_Pin|ssel2_Pin;
 800c3b4:	f44f 6386 	mov.w	r3, #1072	; 0x430
 800c3b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c3c6:	f107 0314 	add.w	r3, r7, #20
 800c3ca:	4619      	mov	r1, r3
 800c3cc:	480b      	ldr	r0, [pc, #44]	; (800c3fc <_ZL12MX_GPIO_Initv+0x100>)
 800c3ce:	f003 fbd3 	bl	800fb78 <HAL_GPIO_Init>

  /*Configure GPIO pins : reset_shield_2_Pin reset_shield_1_Pin */
  GPIO_InitStruct.Pin = reset_shield_2_Pin|reset_shield_1_Pin;
 800c3d2:	2330      	movs	r3, #48	; 0x30
 800c3d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c3e2:	f107 0314 	add.w	r3, r7, #20
 800c3e6:	4619      	mov	r1, r3
 800c3e8:	4805      	ldr	r0, [pc, #20]	; (800c400 <_ZL12MX_GPIO_Initv+0x104>)
 800c3ea:	f003 fbc5 	bl	800fb78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800c3ee:	bf00      	nop
 800c3f0:	3728      	adds	r7, #40	; 0x28
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}
 800c3f6:	bf00      	nop
 800c3f8:	40023800 	.word	0x40023800
 800c3fc:	40020000 	.word	0x40020000
 800c400:	40020400 	.word	0x40020400
 800c404:	40020800 	.word	0x40020800

0800c408 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b082      	sub	sp, #8
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	4a05      	ldr	r2, [pc, #20]	; (800c428 <HAL_UART_TxCpltCallback+0x20>)
 800c414:	4293      	cmp	r3, r2
 800c416:	d102      	bne.n	800c41e <HAL_UART_TxCpltCallback+0x16>
	{
		msg_handler.process_txclpt_callback();
 800c418:	4804      	ldr	r0, [pc, #16]	; (800c42c <HAL_UART_TxCpltCallback+0x24>)
 800c41a:	f000 fc2a 	bl	800cc72 <_ZN10MsgHandler23process_txclpt_callbackEv>
	}


}
 800c41e:	bf00      	nop
 800c420:	3708      	adds	r7, #8
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}
 800c426:	bf00      	nop
 800c428:	20000338 	.word	0x20000338
 800c42c:	2000037c 	.word	0x2000037c

0800c430 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b082      	sub	sp, #8
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
	if( huart == &huart2)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	4a05      	ldr	r2, [pc, #20]	; (800c450 <HAL_UART_RxCpltCallback+0x20>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d102      	bne.n	800c446 <HAL_UART_RxCpltCallback+0x16>
	{
		msg_handler.process_rxclpt_callback();
 800c440:	4804      	ldr	r0, [pc, #16]	; (800c454 <HAL_UART_RxCpltCallback+0x24>)
 800c442:	f000 fca5 	bl	800cd90 <_ZN10MsgHandler23process_rxclpt_callbackEv>
	}

}
 800c446:	bf00      	nop
 800c448:	3708      	adds	r7, #8
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
 800c44e:	bf00      	nop
 800c450:	20000338 	.word	0x20000338
 800c454:	2000037c 	.word	0x2000037c

0800c458 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim2 )
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	4a09      	ldr	r2, [pc, #36]	; (800c488 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800c464:	4293      	cmp	r3, r2
 800c466:	d10b      	bne.n	800c480 <HAL_TIM_PeriodElapsedCallback+0x28>
  {
	  if( timer_timeout_count < MS_500)
 800c468:	4b08      	ldr	r3, [pc, #32]	; (800c48c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	2b63      	cmp	r3, #99	; 0x63
 800c46e:	dc07      	bgt.n	800c480 <HAL_TIM_PeriodElapsedCallback+0x28>
	  {
		  timer_timeout_count++;
 800c470:	4b06      	ldr	r3, [pc, #24]	; (800c48c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	3301      	adds	r3, #1
 800c476:	4a05      	ldr	r2, [pc, #20]	; (800c48c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800c478:	6013      	str	r3, [r2, #0]
		  msg_handler.process_timeout();
 800c47a:	4805      	ldr	r0, [pc, #20]	; (800c490 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800c47c:	f001 f93a 	bl	800d6f4 <_ZN10MsgHandler15process_timeoutEv>
	  }

  }
}
 800c480:	bf00      	nop
 800c482:	3708      	adds	r7, #8
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}
 800c488:	200002f0 	.word	0x200002f0
 800c48c:	200003bc 	.word	0x200003bc
 800c490:	2000037c 	.word	0x2000037c

0800c494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c494:	b480      	push	{r7}
 800c496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800c498:	b672      	cpsid	i
}
 800c49a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800c49c:	e7fe      	b.n	800c49c <Error_Handler+0x8>

0800c49e <_ZNSt15__uniq_ptr_dataIhSt14default_deleteIA_hELb1ELb1EECI1St15__uniq_ptr_implIhS2_EEPh>:
  template <typename _Tp, typename _Dp,
	    bool = is_move_constructible<_Dp>::value,
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800c49e:	b580      	push	{r7, lr}
 800c4a0:	b082      	sub	sp, #8
 800c4a2:	af00      	add	r7, sp, #0
 800c4a4:	6078      	str	r0, [r7, #4]
 800c4a6:	6039      	str	r1, [r7, #0]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	683a      	ldr	r2, [r7, #0]
 800c4ac:	4611      	mov	r1, r2
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f000 f89c 	bl	800c5ec <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3708      	adds	r7, #8
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}

0800c4be <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>:
	       typename _Vp = _Dp,
	       typename = _DeleterConstraint<_Vp>,
	       typename = typename enable_if<
                 __safe_conversion_raw<_Up>::value, bool>::type>
	explicit
	unique_ptr(_Up __p) noexcept
 800c4be:	b580      	push	{r7, lr}
 800c4c0:	b082      	sub	sp, #8
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	6078      	str	r0, [r7, #4]
 800c4c6:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	6839      	ldr	r1, [r7, #0]
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f7ff ffe6 	bl	800c49e <_ZNSt15__uniq_ptr_dataIhSt14default_deleteIA_hELb1ELb1EECI1St15__uniq_ptr_implIhS2_EEPh>
        { }
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3708      	adds	r7, #8
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED1Ev>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
	{ }

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b084      	sub	sp, #16
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
      {
	auto& __ptr = _M_t._M_ptr();
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f000 f894 	bl	800c614 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 800c4ec:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d009      	beq.n	800c50a <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED1Ev+0x2e>
	  get_deleter()(__ptr);
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f000 f899 	bl	800c62e <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EE11get_deleterEv>
 800c4fc:	4602      	mov	r2, r0
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	4619      	mov	r1, r3
 800c504:	4610      	mov	r0, r2
 800c506:	f000 f89f 	bl	800c648 <_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS0_E5valueEvE4typeEPS5_>
	__ptr = pointer();
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	2200      	movs	r2, #0
 800c50e:	601a      	str	r2, [r3, #0]
      }
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	4618      	mov	r0, r3
 800c514:	3710      	adds	r7, #16
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}

0800c51a <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>:

      // Observers.

      /// Access an element of owned array.
      typename std::add_lvalue_reference<element_type>::type
      operator[](size_t __i) const
 800c51a:	b580      	push	{r7, lr}
 800c51c:	b082      	sub	sp, #8
 800c51e:	af00      	add	r7, sp, #0
 800c520:	6078      	str	r0, [r7, #4]
 800c522:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_assert(get() != pointer());
 800c524:	2300      	movs	r3, #0
 800c526:	2b00      	cmp	r3, #0
	return get()[__i];
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f000 f807 	bl	800c53c <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 800c52e:	4602      	mov	r2, r0
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	4413      	add	r3, r2
      }
 800c534:	4618      	mov	r0, r3
 800c536:	3708      	adds	r7, #8
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}

0800c53c <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>:

      /// Return the stored pointer.
      pointer
      get() const noexcept
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b082      	sub	sp, #8
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	4618      	mov	r0, r3
 800c548:	f000 f88d 	bl	800c666 <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 800c54c:	4603      	mov	r3, r0
 800c54e:	4618      	mov	r0, r3
 800c550:	3708      	adds	r7, #8
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}

0800c556 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT_IF(
 800c556:	b580      	push	{r7, lr}
 800c558:	b082      	sub	sp, #8
 800c55a:	af00      	add	r7, sp, #0
 800c55c:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type()
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f000 f88f 	bl	800c682 <_ZNSaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEC1Ev>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	4618      	mov	r0, r3
 800c568:	f7ff fab6 	bl	800bad8 <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	4618      	mov	r0, r3
 800c570:	3708      	adds	r7, #8
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}

0800c576 <_ZNSaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800c576:	b580      	push	{r7, lr}
 800c578:	b082      	sub	sp, #8
 800c57a:	af00      	add	r7, sp, #0
 800c57c:	6078      	str	r0, [r7, #4]
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f000 f88b 	bl	800c69a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEED1Ev>
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	4618      	mov	r0, r3
 800c588:	3708      	adds	r7, #8
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}

0800c58e <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 800c58e:	b580      	push	{r7, lr}
 800c590:	b082      	sub	sp, #8
 800c592:	af00      	add	r7, sp, #0
 800c594:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f000 f88a 	bl	800c6b0 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE8_M_clearEv>
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f7ff fbe2 	bl	800bd68 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE10_List_implD1Ev>
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3708      	adds	r7, #8
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}

0800c5ae <_ZNSt10shared_ptrI11AbstractMsgEC1Ev>:
#endif
      /**
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 800c5ae:	b580      	push	{r7, lr}
 800c5b0:	b082      	sub	sp, #8
 800c5b2:	af00      	add	r7, sp, #0
 800c5b4:	6078      	str	r0, [r7, #4]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f000 f89f 	bl	800c6fc <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3708      	adds	r7, #8
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b082      	sub	sp, #8
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d004      	beq.n	800c5e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7ff fa9b 	bl	800bb18 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3708      	adds	r7, #8
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}

0800c5ec <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b082      	sub	sp, #8
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f000 f890 	bl	800c71e <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1ILb1ELb1EEEv>
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f000 f808 	bl	800c614 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 800c604:	4602      	mov	r2, r0
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	6013      	str	r3, [r2, #0]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	4618      	mov	r0, r3
 800c60e:	3708      	adds	r7, #8
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800c614:	b580      	push	{r7, lr}
 800c616:	b082      	sub	sp, #8
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	4618      	mov	r0, r3
 800c620:	f000 f88a 	bl	800c738 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c624:	4603      	mov	r3, r0
 800c626:	4618      	mov	r0, r3
 800c628:	3708      	adds	r7, #8
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}

0800c62e <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EE11get_deleterEv>:

      /// Return a reference to the stored deleter.
      deleter_type&
      get_deleter() noexcept
 800c62e:	b580      	push	{r7, lr}
 800c630:	b082      	sub	sp, #8
 800c632:	af00      	add	r7, sp, #0
 800c634:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	4618      	mov	r0, r3
 800c63a:	f000 f88a 	bl	800c752 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE10_M_deleterEv>
 800c63e:	4603      	mov	r3, r0
 800c640:	4618      	mov	r0, r3
 800c642:	3708      	adds	r7, #8
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS0_E5valueEvE4typeEPS5_>:
	operator()(_Up* __ptr) const
 800c648:	b580      	push	{r7, lr}
 800c64a:	b082      	sub	sp, #8
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
	  delete [] __ptr;
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d002      	beq.n	800c65e <_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS0_E5valueEvE4typeEPS5_+0x16>
 800c658:	6838      	ldr	r0, [r7, #0]
 800c65a:	f006 fdb1 	bl	80131c0 <_ZdaPv>
	}
 800c65e:	bf00      	nop
 800c660:	3708      	adds	r7, #8
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}

0800c666 <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800c666:	b580      	push	{r7, lr}
 800c668:	b082      	sub	sp, #8
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	6078      	str	r0, [r7, #4]
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	4618      	mov	r0, r3
 800c672:	f000 f87b 	bl	800c76c <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800c676:	4603      	mov	r3, r0
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4618      	mov	r0, r3
 800c67c:	3708      	adds	r7, #8
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}

0800c682 <_ZNSaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800c682:	b580      	push	{r7, lr}
 800c684:	b082      	sub	sp, #8
 800c686:	af00      	add	r7, sp, #0
 800c688:	6078      	str	r0, [r7, #4]
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f000 f87b 	bl	800c786 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEC1Ev>
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	4618      	mov	r0, r3
 800c694:	3708      	adds	r7, #8
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}

0800c69a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c69a:	b480      	push	{r7}
 800c69c:	b083      	sub	sp, #12
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	6078      	str	r0, [r7, #4]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	370c      	adds	r7, #12
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ae:	4770      	bx	lr

0800c6b0 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE8_M_clearEv>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER

  template<typename _Tp, typename _Alloc>
    void
    _List_base<_Tp, _Alloc>::
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b086      	sub	sp, #24
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
    _M_clear() _GLIBCXX_NOEXCEPT
    {
      typedef _List_node<_Tp>  _Node;
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 800c6be:	e014      	b.n	800c6ea <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE8_M_clearEv+0x3a>
	{
	  _Node* __tmp = static_cast<_Node*>(__cur);
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 800c6ca:	6938      	ldr	r0, [r7, #16]
 800c6cc:	f000 f866 	bl	800c79c <_ZNSt10_List_nodeISt10shared_ptrI11AbstractMsgEE9_M_valptrEv>
 800c6d0:	60f8      	str	r0, [r7, #12]
#if __cplusplus >= 201103L
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f000 f870 	bl	800c7b8 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE21_M_get_Node_allocatorEv>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	68f9      	ldr	r1, [r7, #12]
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f000 f876 	bl	800c7ce <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE7destroyIS3_EEvRS5_PT_>
#else
	  _Tp_alloc_type(_M_get_Node_allocator()).destroy(__val);
#endif
	  _M_put_node(__tmp);
 800c6e2:	6939      	ldr	r1, [r7, #16]
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f000 f87f 	bl	800c7e8 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_put_nodeEPSt10_List_nodeIS3_E>
      while (__cur != &_M_impl._M_node)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	697a      	ldr	r2, [r7, #20]
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	d1e6      	bne.n	800c6c0 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE8_M_clearEv+0x10>
	}
    }
 800c6f2:	bf00      	nop
 800c6f4:	bf00      	nop
 800c6f6:	3718      	adds	r7, #24
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}

0800c6fc <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b082      	sub	sp, #8
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2200      	movs	r2, #0
 800c708:	601a      	str	r2, [r3, #0]
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	3304      	adds	r3, #4
 800c70e:	4618      	mov	r0, r3
 800c710:	f000 f879 	bl	800c806 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	4618      	mov	r0, r3
 800c718:	3708      	adds	r7, #8
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}

0800c71e <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 800c71e:	b580      	push	{r7, lr}
 800c720:	b082      	sub	sp, #8
 800c722:	af00      	add	r7, sp, #0
 800c724:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	4618      	mov	r0, r3
 800c72a:	f000 f87a 	bl	800c822 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	4618      	mov	r0, r3
 800c732:	3708      	adds	r7, #8
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}

0800c738 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800c738:	b580      	push	{r7, lr}
 800c73a:	b082      	sub	sp, #8
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	4618      	mov	r0, r3
 800c744:	f000 f87d 	bl	800c842 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800c748:	4603      	mov	r3, r0
 800c74a:	4618      	mov	r0, r3
 800c74c:	3708      	adds	r7, #8
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}

0800c752 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800c752:	b580      	push	{r7, lr}
 800c754:	b082      	sub	sp, #8
 800c756:	af00      	add	r7, sp, #0
 800c758:	6078      	str	r0, [r7, #4]
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	4618      	mov	r0, r3
 800c75e:	f000 f87c 	bl	800c85a <_ZSt3getILj1EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c762:	4603      	mov	r3, r0
 800c764:	4618      	mov	r0, r3
 800c766:	3708      	adds	r7, #8
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}

0800c76c <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b082      	sub	sp, #8
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	4618      	mov	r0, r3
 800c778:	f000 f87b 	bl	800c872 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800c77c:	4603      	mov	r3, r0
 800c77e:	4618      	mov	r0, r3
 800c780:	3708      	adds	r7, #8
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}

0800c786 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c786:	b480      	push	{r7}
 800c788:	b083      	sub	sp, #12
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	6078      	str	r0, [r7, #4]
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	4618      	mov	r0, r3
 800c792:	370c      	adds	r7, #12
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr

0800c79c <_ZNSt10_List_nodeISt10shared_ptrI11AbstractMsgEE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b082      	sub	sp, #8
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	3308      	adds	r3, #8
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f000 f86e 	bl	800c88a <_ZN9__gnu_cxx16__aligned_membufISt10shared_ptrI11AbstractMsgEE6_M_ptrEv>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3708      	adds	r7, #8
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}

0800c7b8 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800c7b8:	b480      	push	{r7}
 800c7ba:	b083      	sub	sp, #12
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	370c      	adds	r7, #12
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7cc:	4770      	bx	lr

0800c7ce <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE7destroyIS3_EEvRS5_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800c7ce:	b580      	push	{r7, lr}
 800c7d0:	b082      	sub	sp, #8
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	6078      	str	r0, [r7, #4]
 800c7d6:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 800c7d8:	6839      	ldr	r1, [r7, #0]
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f000 f861 	bl	800c8a2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE7destroyIS4_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 800c7e0:	bf00      	nop
 800c7e2:	3708      	adds	r7, #8
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}

0800c7e8 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_put_nodeEPSt10_List_nodeIS3_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b082      	sub	sp, #8
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2201      	movs	r2, #1
 800c7f6:	6839      	ldr	r1, [r7, #0]
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f000 f85e 	bl	800c8ba <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE10deallocateERS5_PS4_j>
 800c7fe:	bf00      	nop
 800c800:	3708      	adds	r7, #8
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}

0800c806 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 800c806:	b480      	push	{r7}
 800c808:	b083      	sub	sp, #12
 800c80a:	af00      	add	r7, sp, #0
 800c80c:	6078      	str	r0, [r7, #4]
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2200      	movs	r2, #0
 800c812:	601a      	str	r2, [r3, #0]
      { }
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	4618      	mov	r0, r3
 800c818:	370c      	adds	r7, #12
 800c81a:	46bd      	mov	sp, r7
 800c81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c820:	4770      	bx	lr

0800c822 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 800c822:	b580      	push	{r7, lr}
 800c824:	b082      	sub	sp, #8
 800c826:	af00      	add	r7, sp, #0
 800c828:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f000 f854 	bl	800c8d8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	4618      	mov	r0, r3
 800c834:	f000 f85c 	bl	800c8f0 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	4618      	mov	r0, r3
 800c83c:	3708      	adds	r7, #8
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}

0800c842 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800c842:	b580      	push	{r7, lr}
 800c844:	b082      	sub	sp, #8
 800c846:	af00      	add	r7, sp, #0
 800c848:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f000 f85e 	bl	800c90c <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>
 800c850:	4603      	mov	r3, r0
 800c852:	4618      	mov	r0, r3
 800c854:	3708      	adds	r7, #8
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}

0800c85a <_ZSt3getILj1EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800c85a:	b580      	push	{r7, lr}
 800c85c:	b082      	sub	sp, #8
 800c85e:	af00      	add	r7, sp, #0
 800c860:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f000 f85f 	bl	800c926 <_ZSt12__get_helperILj1ESt14default_deleteIA_hEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800c868:	4603      	mov	r3, r0
 800c86a:	4618      	mov	r0, r3
 800c86c:	3708      	adds	r7, #8
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}

0800c872 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800c872:	b580      	push	{r7, lr}
 800c874:	b082      	sub	sp, #8
 800c876:	af00      	add	r7, sp, #0
 800c878:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 f85f 	bl	800c93e <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>
 800c880:	4603      	mov	r3, r0
 800c882:	4618      	mov	r0, r3
 800c884:	3708      	adds	r7, #8
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}

0800c88a <_ZN9__gnu_cxx16__aligned_membufISt10shared_ptrI11AbstractMsgEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 800c88a:	b580      	push	{r7, lr}
 800c88c:	b082      	sub	sp, #8
 800c88e:	af00      	add	r7, sp, #0
 800c890:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f000 f860 	bl	800c958 <_ZN9__gnu_cxx16__aligned_membufISt10shared_ptrI11AbstractMsgEE7_M_addrEv>
 800c898:	4603      	mov	r3, r0
 800c89a:	4618      	mov	r0, r3
 800c89c:	3708      	adds	r7, #8
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}

0800c8a2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE7destroyIS4_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 800c8a2:	b580      	push	{r7, lr}
 800c8a4:	b082      	sub	sp, #8
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	6078      	str	r0, [r7, #4]
 800c8aa:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 800c8ac:	6838      	ldr	r0, [r7, #0]
 800c8ae:	f7ff fa9c 	bl	800bdea <_ZNSt10shared_ptrI11AbstractMsgED1Ev>
 800c8b2:	bf00      	nop
 800c8b4:	3708      	adds	r7, #8
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}

0800c8ba <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE10deallocateERS5_PS4_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c8ba:	b580      	push	{r7, lr}
 800c8bc:	b084      	sub	sp, #16
 800c8be:	af00      	add	r7, sp, #0
 800c8c0:	60f8      	str	r0, [r7, #12]
 800c8c2:	60b9      	str	r1, [r7, #8]
 800c8c4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800c8c6:	687a      	ldr	r2, [r7, #4]
 800c8c8:	68b9      	ldr	r1, [r7, #8]
 800c8ca:	68f8      	ldr	r0, [r7, #12]
 800c8cc:	f000 f84f 	bl	800c96e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE10deallocateEPS5_j>
 800c8d0:	bf00      	nop
 800c8d2:	3710      	adds	r7, #16
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}

0800c8d8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>:
      _Tuple_impl()
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b082      	sub	sp, #8
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f000 f854 	bl	800c98e <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3708      	adds	r7, #8
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}

0800c8f0 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>:
      constexpr _Head_base()
 800c8f0:	b480      	push	{r7}
 800c8f2:	b083      	sub	sp, #12
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	601a      	str	r2, [r3, #0]
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	4618      	mov	r0, r3
 800c902:	370c      	adds	r7, #12
 800c904:	46bd      	mov	sp, r7
 800c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90a:	4770      	bx	lr

0800c90c <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b082      	sub	sp, #8
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	4618      	mov	r0, r3
 800c918:	f000 f844 	bl	800c9a4 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>
 800c91c:	4603      	mov	r3, r0
 800c91e:	4618      	mov	r0, r3
 800c920:	3708      	adds	r7, #8
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}

0800c926 <_ZSt12__get_helperILj1ESt14default_deleteIA_hEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800c926:	b580      	push	{r7, lr}
 800c928:	b082      	sub	sp, #8
 800c92a:	af00      	add	r7, sp, #0
 800c92c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800c92e:	6878      	ldr	r0, [r7, #4]
 800c930:	f000 f843 	bl	800c9ba <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEE7_M_headERS3_>
 800c934:	4603      	mov	r3, r0
 800c936:	4618      	mov	r0, r3
 800c938:	3708      	adds	r7, #8
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}

0800c93e <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800c93e:	b580      	push	{r7, lr}
 800c940:	b082      	sub	sp, #8
 800c942:	af00      	add	r7, sp, #0
 800c944:	6078      	str	r0, [r7, #4]
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	4618      	mov	r0, r3
 800c94a:	f000 f842 	bl	800c9d2 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>
 800c94e:	4603      	mov	r3, r0
 800c950:	4618      	mov	r0, r3
 800c952:	3708      	adds	r7, #8
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}

0800c958 <_ZN9__gnu_cxx16__aligned_membufISt10shared_ptrI11AbstractMsgEE7_M_addrEv>:
      _M_addr() noexcept
 800c958:	b480      	push	{r7}
 800c95a:	b083      	sub	sp, #12
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	4618      	mov	r0, r3
 800c964:	370c      	adds	r7, #12
 800c966:	46bd      	mov	sp, r7
 800c968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96c:	4770      	bx	lr

0800c96e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800c96e:	b580      	push	{r7, lr}
 800c970:	b084      	sub	sp, #16
 800c972:	af00      	add	r7, sp, #0
 800c974:	60f8      	str	r0, [r7, #12]
 800c976:	60b9      	str	r1, [r7, #8]
 800c978:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	011b      	lsls	r3, r3, #4
 800c97e:	4619      	mov	r1, r3
 800c980:	68b8      	ldr	r0, [r7, #8]
 800c982:	f006 fc1b 	bl	80131bc <_ZdlPvj>
      }
 800c986:	bf00      	nop
 800c988:	3710      	adds	r7, #16
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}

0800c98e <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>:
      constexpr _Head_base()
 800c98e:	b480      	push	{r7}
 800c990:	b083      	sub	sp, #12
 800c992:	af00      	add	r7, sp, #0
 800c994:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	4618      	mov	r0, r3
 800c99a:	370c      	adds	r7, #12
 800c99c:	46bd      	mov	sp, r7
 800c99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a2:	4770      	bx	lr

0800c9a4 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800c9a4:	b480      	push	{r7}
 800c9a6:	b083      	sub	sp, #12
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	370c      	adds	r7, #12
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b8:	4770      	bx	lr

0800c9ba <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800c9ba:	b580      	push	{r7, lr}
 800c9bc:	b082      	sub	sp, #8
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	6078      	str	r0, [r7, #4]
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f000 f810 	bl	800c9e8 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EE7_M_headERS3_>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3708      	adds	r7, #8
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}

0800c9d2 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800c9d2:	b480      	push	{r7}
 800c9d4:	b083      	sub	sp, #12
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	6078      	str	r0, [r7, #4]
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	4618      	mov	r0, r3
 800c9de:	370c      	adds	r7, #12
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800c9e8:	b480      	push	{r7}
 800c9ea:	b083      	sub	sp, #12
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	370c      	adds	r7, #12
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fc:	4770      	bx	lr
	...

0800ca00 <_ZN6AckMsgD1Ev>:
		~AckMsg() = default;
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b082      	sub	sp, #8
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	4a08      	ldr	r2, [pc, #32]	; (800ca2c <_ZN6AckMsgD1Ev+0x2c>)
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	601a      	str	r2, [r3, #0]
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	3304      	adds	r3, #4
 800ca12:	4618      	mov	r0, r3
 800ca14:	f7ff fd62 	bl	800c4dc <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED1Ev>
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7ff f8ac 	bl	800bb78 <_ZN11AbstractMsgD1Ev>
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	4618      	mov	r0, r3
 800ca24:	3708      	adds	r7, #8
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
 800ca2a:	bf00      	nop
 800ca2c:	08018068 	.word	0x08018068

0800ca30 <_ZN6AckMsgD0Ev>:
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b082      	sub	sp, #8
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f7ff ffe1 	bl	800ca00 <_ZN6AckMsgD1Ev>
 800ca3e:	2108      	movs	r1, #8
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f006 fbbb 	bl	80131bc <_ZdlPvj>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3708      	adds	r7, #8
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}

0800ca50 <_ZN11HeaderClassD1Ev>:
		~HeaderClass() = default;
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b082      	sub	sp, #8
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
 800ca58:	4a08      	ldr	r2, [pc, #32]	; (800ca7c <_ZN11HeaderClassD1Ev+0x2c>)
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	601a      	str	r2, [r3, #0]
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	3304      	adds	r3, #4
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7ff fd3a 	bl	800c4dc <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED1Ev>
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7ff f884 	bl	800bb78 <_ZN11AbstractMsgD1Ev>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	4618      	mov	r0, r3
 800ca74:	3708      	adds	r7, #8
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}
 800ca7a:	bf00      	nop
 800ca7c:	08018084 	.word	0x08018084

0800ca80 <_ZN11HeaderClassD0Ev>:
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b082      	sub	sp, #8
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f7ff ffe1 	bl	800ca50 <_ZN11HeaderClassD1Ev>
 800ca8e:	2108      	movs	r1, #8
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f006 fb93 	bl	80131bc <_ZdlPvj>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3708      	adds	r7, #8
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b082      	sub	sp, #8
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	6039      	str	r1, [r7, #0]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2b01      	cmp	r3, #1
 800caae:	d108      	bne.n	800cac2 <_Z41__static_initialization_and_destruction_0ii+0x22>
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cab6:	4293      	cmp	r3, r2
 800cab8:	d103      	bne.n	800cac2 <_Z41__static_initialization_and_destruction_0ii+0x22>
MsgHandler msg_handler(&huart2);
 800caba:	4909      	ldr	r1, [pc, #36]	; (800cae0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800cabc:	4809      	ldr	r0, [pc, #36]	; (800cae4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800cabe:	f7ff f9a1 	bl	800be04 <_ZN10MsgHandlerC1EP20__UART_HandleTypeDef>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d107      	bne.n	800cad8 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cace:	4293      	cmp	r3, r2
 800cad0:	d102      	bne.n	800cad8 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800cad2:	4804      	ldr	r0, [pc, #16]	; (800cae4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800cad4:	f7ff f9f0 	bl	800beb8 <_ZN10MsgHandlerD1Ev>
}
 800cad8:	bf00      	nop
 800cada:	3708      	adds	r7, #8
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}
 800cae0:	20000338 	.word	0x20000338
 800cae4:	2000037c 	.word	0x2000037c

0800cae8 <_GLOBAL__sub_I_hspi1>:
 800cae8:	b580      	push	{r7, lr}
 800caea:	af00      	add	r7, sp, #0
 800caec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800caf0:	2001      	movs	r0, #1
 800caf2:	f7ff ffd5 	bl	800caa0 <_Z41__static_initialization_and_destruction_0ii>
 800caf6:	bd80      	pop	{r7, pc}

0800caf8 <_GLOBAL__sub_D_hspi1>:
 800caf8:	b580      	push	{r7, lr}
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cb00:	2000      	movs	r0, #0
 800cb02:	f7ff ffcd 	bl	800caa0 <_Z41__static_initialization_and_destruction_0ii>
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800cb08:	b480      	push	{r7}
 800cb0a:	b083      	sub	sp, #12
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	4618      	mov	r0, r3
 800cb16:	370c      	adds	r7, #12
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1e:	4770      	bx	lr

0800cb20 <_ZdlPvS_>:
_GLIBCXX_NODISCARD inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }

// Default placement versions of operator delete.
inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }
 800cb20:	b480      	push	{r7}
 800cb22:	b083      	sub	sp, #12
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	6039      	str	r1, [r7, #0]
 800cb2a:	bf00      	nop
 800cb2c:	370c      	adds	r7, #12
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb34:	4770      	bx	lr

0800cb36 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    { ++_M_use_count; }
 800cb36:	b480      	push	{r7}
 800cb38:	b083      	sub	sp, #12
 800cb3a:	af00      	add	r7, sp, #0
 800cb3c:	6078      	str	r0, [r7, #4]
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	685b      	ldr	r3, [r3, #4]
 800cb42:	1c5a      	adds	r2, r3, #1
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	605a      	str	r2, [r3, #4]
 800cb48:	bf00      	nop
 800cb4a:	370c      	adds	r7, #12
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb52:	4770      	bx	lr

0800cb54 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>:
    _S_ti() noexcept _GLIBCXX_VISIBILITY(default)
 800cb54:	b480      	push	{r7}
 800cb56:	af00      	add	r7, sp, #0
      return reinterpret_cast<const type_info&>(__tag);
 800cb58:	4b02      	ldr	r3, [pc, #8]	; (800cb64 <_ZNSt19_Sp_make_shared_tag5_S_tiEv+0x10>)
    }
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr
 800cb64:	080180fc 	.word	0x080180fc

0800cb68 <_ZN12PayloadClassD1Ev>:
		~PayloadClass()
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b082      	sub	sp, #8
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
		{
 800cb70:	4a09      	ldr	r2, [pc, #36]	; (800cb98 <_ZN12PayloadClassD1Ev+0x30>)
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	601a      	str	r2, [r3, #0]
			delete _data;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	689b      	ldr	r3, [r3, #8]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d003      	beq.n	800cb86 <_ZN12PayloadClassD1Ev+0x1e>
 800cb7e:	2101      	movs	r1, #1
 800cb80:	4618      	mov	r0, r3
 800cb82:	f006 fb1b 	bl	80131bc <_ZdlPvj>
		{
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f7fe fff5 	bl	800bb78 <_ZN11AbstractMsgD1Ev>
		}
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	4618      	mov	r0, r3
 800cb92:	3708      	adds	r7, #8
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}
 800cb98:	08018148 	.word	0x08018148

0800cb9c <_ZN12PayloadClassD0Ev>:
		~PayloadClass()
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b082      	sub	sp, #8
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
		}
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f7ff ffdf 	bl	800cb68 <_ZN12PayloadClassD1Ev>
 800cbaa:	210c      	movs	r1, #12
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f006 fb05 	bl	80131bc <_ZdlPvj>
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3708      	adds	r7, #8
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <_ZNK12PayloadClass8get_dataEv>:
		uint8_t* get_data() const noexcept override {return _data;}
 800cbbc:	b480      	push	{r7}
 800cbbe:	b083      	sub	sp, #12
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	689b      	ldr	r3, [r3, #8]
 800cbc8:	4618      	mov	r0, r3
 800cbca:	370c      	adds	r7, #12
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd2:	4770      	bx	lr

0800cbd4 <_ZNK12PayloadClass8get_typeEv>:
		msg_type get_type() const noexcept override {return PayloadClass::payload_msg_type;}
 800cbd4:	b480      	push	{r7}
 800cbd6:	b083      	sub	sp, #12
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
 800cbdc:	2301      	movs	r3, #1
 800cbde:	4618      	mov	r0, r3
 800cbe0:	370c      	adds	r7, #12
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe8:	4770      	bx	lr

0800cbea <_ZNK12PayloadClass13get_data_sizeEv>:
		uint8_t get_data_size() const noexcept override {return _data_size;}
 800cbea:	b480      	push	{r7}
 800cbec:	b083      	sub	sp, #12
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	6078      	str	r0, [r7, #4]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	791b      	ldrb	r3, [r3, #4]
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	370c      	adds	r7, #12
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr

0800cc02 <_ZN6AckMsgaSERKS_>:
		AckMsg& operator=(const AckMsg& to_copy)
 800cc02:	b590      	push	{r4, r7, lr}
 800cc04:	b085      	sub	sp, #20
 800cc06:	af00      	add	r7, sp, #0
 800cc08:	6078      	str	r0, [r7, #4]
 800cc0a:	6039      	str	r1, [r7, #0]
			if (this != &to_copy)
 800cc0c:	687a      	ldr	r2, [r7, #4]
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d029      	beq.n	800cc68 <_ZN6AckMsgaSERKS_+0x66>
				if(to_copy._data)
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	3304      	adds	r3, #4
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f000 fdf6 	bl	800d80a <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEcvbEv>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d01b      	beq.n	800cc5c <_ZN6AckMsgaSERKS_+0x5a>
					for(int i = 0; i< AckMsg::incoming_msg_size; i ++)
 800cc24:	2300      	movs	r3, #0
 800cc26:	60fb      	str	r3, [r7, #12]
 800cc28:	e014      	b.n	800cc54 <_ZN6AckMsgaSERKS_+0x52>
						_data[i] = to_copy._data[i];
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	3304      	adds	r3, #4
 800cc2e:	68fa      	ldr	r2, [r7, #12]
 800cc30:	4611      	mov	r1, r2
 800cc32:	4618      	mov	r0, r3
 800cc34:	f7ff fc71 	bl	800c51a <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800cc38:	4604      	mov	r4, r0
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	3304      	adds	r3, #4
 800cc3e:	68fa      	ldr	r2, [r7, #12]
 800cc40:	4611      	mov	r1, r2
 800cc42:	4618      	mov	r0, r3
 800cc44:	f7ff fc69 	bl	800c51a <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	7822      	ldrb	r2, [r4, #0]
 800cc4c:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i< AckMsg::incoming_msg_size; i ++)
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	3301      	adds	r3, #1
 800cc52:	60fb      	str	r3, [r7, #12]
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	2b02      	cmp	r3, #2
 800cc58:	dde7      	ble.n	800cc2a <_ZN6AckMsgaSERKS_+0x28>
 800cc5a:	e005      	b.n	800cc68 <_ZN6AckMsgaSERKS_+0x66>
					_data.reset();
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	3304      	adds	r3, #4
 800cc60:	2100      	movs	r1, #0
 800cc62:	4618      	mov	r0, r3
 800cc64:	f000 fde2 	bl	800d82c <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EE5resetEDn>
			return *this;
 800cc68:	687b      	ldr	r3, [r7, #4]
		}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3714      	adds	r7, #20
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd90      	pop	{r4, r7, pc}

0800cc72 <_ZN10MsgHandler23process_txclpt_callbackEv>:
#include "msg_handler.hpp"

void MsgHandler::process_txclpt_callback()
{
 800cc72:	b580      	push	{r7, lr}
 800cc74:	b082      	sub	sp, #8
 800cc76:	af00      	add	r7, sp, #0
 800cc78:	6078      	str	r0, [r7, #4]

	if ( !tx_msg_list.empty() && ongoing_fetch == false)
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	3324      	adds	r3, #36	; 0x24
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f000 fde1 	bl	800d846 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5emptyEv>
 800cc84:	4603      	mov	r3, r0
 800cc86:	f083 0301 	eor.w	r3, r3, #1
 800cc8a:	b2db      	uxtb	r3, r3
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d005      	beq.n	800cc9c <_ZN10MsgHandler23process_txclpt_callbackEv+0x2a>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	795b      	ldrb	r3, [r3, #5]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d101      	bne.n	800cc9c <_ZN10MsgHandler23process_txclpt_callbackEv+0x2a>
 800cc98:	2301      	movs	r3, #1
 800cc9a:	e000      	b.n	800cc9e <_ZN10MsgHandler23process_txclpt_callbackEv+0x2c>
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d003      	beq.n	800ccaa <_ZN10MsgHandler23process_txclpt_callbackEv+0x38>
	{
		check_tx_list();
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f000 f80c 	bl	800ccc0 <_ZN10MsgHandler13check_tx_listEv>
	else if (ongoing_fetch == true)
	{
		receive_data();
	}

}
 800cca8:	e006      	b.n	800ccb8 <_ZN10MsgHandler23process_txclpt_callbackEv+0x46>
	else if (ongoing_fetch == true)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	795b      	ldrb	r3, [r3, #5]
 800ccae:	2b01      	cmp	r3, #1
 800ccb0:	d102      	bne.n	800ccb8 <_ZN10MsgHandler23process_txclpt_callbackEv+0x46>
		receive_data();
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f000 fc2d 	bl	800d512 <_ZN10MsgHandler12receive_dataEv>
}
 800ccb8:	bf00      	nop
 800ccba:	3708      	adds	r7, #8
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd80      	pop	{r7, pc}

0800ccc0 <_ZN10MsgHandler13check_tx_listEv>:

void MsgHandler::check_tx_list()
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b082      	sub	sp, #8
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
	if( tx_msg_list.front()->get_type() == msg_type::payload)
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	3324      	adds	r3, #36	; 0x24
 800cccc:	4618      	mov	r0, r3
 800ccce:	f000 fdcc 	bl	800d86a <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f000 fddb 	bl	800d890 <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	681a      	ldr	r2, [r3, #0]
 800ccde:	320c      	adds	r2, #12
 800cce0:	6812      	ldr	r2, [r2, #0]
 800cce2:	4618      	mov	r0, r3
 800cce4:	4790      	blx	r2
 800cce6:	4603      	mov	r3, r0
 800cce8:	2b01      	cmp	r3, #1
 800ccea:	bf0c      	ite	eq
 800ccec:	2301      	moveq	r3, #1
 800ccee:	2300      	movne	r3, #0
 800ccf0:	b2db      	uxtb	r3, r3
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d02e      	beq.n	800cd54 <_ZN10MsgHandler13check_tx_listEv+0x94>
	{
		tx_msg_list.pop_front();
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	3324      	adds	r3, #36	; 0x24
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f000 fdd4 	bl	800d8a8 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE9pop_frontEv>
		if ( !tx_msg_list.empty())
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	3324      	adds	r3, #36	; 0x24
 800cd04:	4618      	mov	r0, r3
 800cd06:	f000 fd9e 	bl	800d846 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5emptyEv>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	f083 0301 	eor.w	r3, r3, #1
 800cd10:	b2db      	uxtb	r3, r3
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d01a      	beq.n	800cd4c <_ZN10MsgHandler13check_tx_listEv+0x8c>
		{
			if(tx_msg_list.front()->get_type() == msg_type::header)
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	3324      	adds	r3, #36	; 0x24
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f000 fda5 	bl	800d86a <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 800cd20:	4603      	mov	r3, r0
 800cd22:	4618      	mov	r0, r3
 800cd24:	f000 fdb4 	bl	800d890 <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	681a      	ldr	r2, [r3, #0]
 800cd2c:	320c      	adds	r2, #12
 800cd2e:	6812      	ldr	r2, [r2, #0]
 800cd30:	4618      	mov	r0, r3
 800cd32:	4790      	blx	r2
 800cd34:	4603      	mov	r3, r0
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	bf0c      	ite	eq
 800cd3a:	2301      	moveq	r3, #1
 800cd3c:	2300      	movne	r3, #0
 800cd3e:	b2db      	uxtb	r3, r3
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d021      	beq.n	800cd88 <_ZN10MsgHandler13check_tx_listEv+0xc8>
			{
				transmit_front_msg();
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f000 fa73 	bl	800d230 <_ZN10MsgHandler18transmit_front_msgEv>
	}
	else if ( tx_msg_list.front()->get_type() == msg_type::header)
	{
		receive_ack();
	}
}
 800cd4a:	e01d      	b.n	800cd88 <_ZN10MsgHandler13check_tx_listEv+0xc8>
			receive_data_header();
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f000 facb 	bl	800d2e8 <_ZN10MsgHandler19receive_data_headerEv>
}
 800cd52:	e019      	b.n	800cd88 <_ZN10MsgHandler13check_tx_listEv+0xc8>
	else if ( tx_msg_list.front()->get_type() == msg_type::header)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	3324      	adds	r3, #36	; 0x24
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f000 fd86 	bl	800d86a <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	4618      	mov	r0, r3
 800cd62:	f000 fd95 	bl	800d890 <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800cd66:	4603      	mov	r3, r0
 800cd68:	681a      	ldr	r2, [r3, #0]
 800cd6a:	320c      	adds	r2, #12
 800cd6c:	6812      	ldr	r2, [r2, #0]
 800cd6e:	4618      	mov	r0, r3
 800cd70:	4790      	blx	r2
 800cd72:	4603      	mov	r3, r0
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	bf0c      	ite	eq
 800cd78:	2301      	moveq	r3, #1
 800cd7a:	2300      	movne	r3, #0
 800cd7c:	b2db      	uxtb	r3, r3
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d002      	beq.n	800cd88 <_ZN10MsgHandler13check_tx_listEv+0xc8>
		receive_ack();
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f000 fa89 	bl	800d29a <_ZN10MsgHandler11receive_ackEv>
}
 800cd88:	bf00      	nop
 800cd8a:	3708      	adds	r7, #8
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}

0800cd90 <_ZN10MsgHandler23process_rxclpt_callbackEv>:


void MsgHandler::process_rxclpt_callback()
{
 800cd90:	b590      	push	{r4, r7, lr}
 800cd92:	b089      	sub	sp, #36	; 0x24
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PinState::GPIO_PIN_RESET);
	if ( !tx_msg_list.empty() && ongoing_fetch == false)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	3324      	adds	r3, #36	; 0x24
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f000 fd52 	bl	800d846 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5emptyEv>
 800cda2:	4603      	mov	r3, r0
 800cda4:	f083 0301 	eor.w	r3, r3, #1
 800cda8:	b2db      	uxtb	r3, r3
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d005      	beq.n	800cdba <_ZN10MsgHandler23process_rxclpt_callbackEv+0x2a>
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	795b      	ldrb	r3, [r3, #5]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d101      	bne.n	800cdba <_ZN10MsgHandler23process_rxclpt_callbackEv+0x2a>
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	e000      	b.n	800cdbc <_ZN10MsgHandler23process_rxclpt_callbackEv+0x2c>
 800cdba:	2300      	movs	r3, #0
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	f000 8091 	beq.w	800cee4 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x154>
	{
		if(rxSingleack.get_data()[0] == SerialID::MSG_ACK)
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	3308      	adds	r3, #8
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	f7fe ffaa 	bl	800bd20 <_ZNK6AckMsg8get_dataEv>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	781b      	ldrb	r3, [r3, #0]
 800cdd0:	2bff      	cmp	r3, #255	; 0xff
 800cdd2:	bf0c      	ite	eq
 800cdd4:	2301      	moveq	r3, #1
 800cdd6:	2300      	movne	r3, #0
 800cdd8:	b2db      	uxtb	r3, r3
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	f000 815d 	beq.w	800d09a <_ZN10MsgHandler23process_rxclpt_callbackEv+0x30a>
		{
			if( tx_msg_list.front()->get_type() == msg_type::header
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	3324      	adds	r3, #36	; 0x24
 800cde4:	4618      	mov	r0, r3
 800cde6:	f000 fd40 	bl	800d86a <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 800cdea:	4603      	mov	r3, r0
 800cdec:	4618      	mov	r0, r3
 800cdee:	f000 fd4f 	bl	800d890 <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	681a      	ldr	r2, [r3, #0]
 800cdf6:	320c      	adds	r2, #12
 800cdf8:	6812      	ldr	r2, [r2, #0]
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	4790      	blx	r2
 800cdfe:	4603      	mov	r3, r0
				&& tx_msg_list.front()->get_data()[1] == rxSingleack.get_data()[1]
				&& tx_msg_list.front()->get_data()[2] == rxSingleack.get_data()[2]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d139      	bne.n	800ce78 <_ZN10MsgHandler23process_rxclpt_callbackEv+0xe8>
				&& tx_msg_list.front()->get_data()[1] == rxSingleack.get_data()[1]
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	3324      	adds	r3, #36	; 0x24
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f000 fd2e 	bl	800d86a <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	4618      	mov	r0, r3
 800ce12:	f000 fd3d 	bl	800d890 <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800ce16:	4603      	mov	r3, r0
 800ce18:	681a      	ldr	r2, [r3, #0]
 800ce1a:	3208      	adds	r2, #8
 800ce1c:	6812      	ldr	r2, [r2, #0]
 800ce1e:	4618      	mov	r0, r3
 800ce20:	4790      	blx	r2
 800ce22:	4603      	mov	r3, r0
 800ce24:	3301      	adds	r3, #1
 800ce26:	781c      	ldrb	r4, [r3, #0]
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	3308      	adds	r3, #8
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f7fe ff77 	bl	800bd20 <_ZNK6AckMsg8get_dataEv>
 800ce32:	4603      	mov	r3, r0
 800ce34:	3301      	adds	r3, #1
 800ce36:	781b      	ldrb	r3, [r3, #0]
 800ce38:	429c      	cmp	r4, r3
 800ce3a:	d11d      	bne.n	800ce78 <_ZN10MsgHandler23process_rxclpt_callbackEv+0xe8>
				&& tx_msg_list.front()->get_data()[2] == rxSingleack.get_data()[2]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	3324      	adds	r3, #36	; 0x24
 800ce40:	4618      	mov	r0, r3
 800ce42:	f000 fd12 	bl	800d86a <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 800ce46:	4603      	mov	r3, r0
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f000 fd21 	bl	800d890 <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	681a      	ldr	r2, [r3, #0]
 800ce52:	3208      	adds	r2, #8
 800ce54:	6812      	ldr	r2, [r2, #0]
 800ce56:	4618      	mov	r0, r3
 800ce58:	4790      	blx	r2
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	3302      	adds	r3, #2
 800ce5e:	781c      	ldrb	r4, [r3, #0]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	3308      	adds	r3, #8
 800ce64:	4618      	mov	r0, r3
 800ce66:	f7fe ff5b 	bl	800bd20 <_ZNK6AckMsg8get_dataEv>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	3302      	adds	r3, #2
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	429c      	cmp	r4, r3
 800ce72:	d101      	bne.n	800ce78 <_ZN10MsgHandler23process_rxclpt_callbackEv+0xe8>
 800ce74:	2301      	movs	r3, #1
 800ce76:	e000      	b.n	800ce7a <_ZN10MsgHandler23process_rxclpt_callbackEv+0xea>
 800ce78:	2300      	movs	r3, #0
			if( tx_msg_list.front()->get_type() == msg_type::header
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d01e      	beq.n	800cebc <_ZN10MsgHandler23process_rxclpt_callbackEv+0x12c>
			)
			{
				tx_msg_list.pop_front();
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	3324      	adds	r3, #36	; 0x24
 800ce82:	4618      	mov	r0, r3
 800ce84:	f000 fd10 	bl	800d8a8 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE9pop_frontEv>
				if( tx_msg_list.front()->get_type() == msg_type::payload)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	3324      	adds	r3, #36	; 0x24
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f000 fcec 	bl	800d86a <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 800ce92:	4603      	mov	r3, r0
 800ce94:	4618      	mov	r0, r3
 800ce96:	f000 fcfb 	bl	800d890 <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	681a      	ldr	r2, [r3, #0]
 800ce9e:	320c      	adds	r2, #12
 800cea0:	6812      	ldr	r2, [r2, #0]
 800cea2:	4618      	mov	r0, r3
 800cea4:	4790      	blx	r2
 800cea6:	4603      	mov	r3, r0
 800cea8:	2b01      	cmp	r3, #1
 800ceaa:	bf0c      	ite	eq
 800ceac:	2301      	moveq	r3, #1
 800ceae:	2300      	movne	r3, #0
 800ceb0:	b2db      	uxtb	r3, r3
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d002      	beq.n	800cebc <_ZN10MsgHandler23process_rxclpt_callbackEv+0x12c>
				{
					transmit_front_msg();
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f000 f9ba 	bl	800d230 <_ZN10MsgHandler18transmit_front_msgEv>
				}

			}
			rxSingleack = AckMsg();
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f103 0408 	add.w	r4, r3, #8
 800cec2:	f107 030c 	add.w	r3, r7, #12
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7fe feec 	bl	800bca4 <_ZN6AckMsgC1Ev>
 800cecc:	f107 030c 	add.w	r3, r7, #12
 800ced0:	4619      	mov	r1, r3
 800ced2:	4620      	mov	r0, r4
 800ced4:	f7ff fe95 	bl	800cc02 <_ZN6AckMsgaSERKS_>
 800ced8:	f107 030c 	add.w	r3, r7, #12
 800cedc:	4618      	mov	r0, r3
 800cede:	f7ff fd8f 	bl	800ca00 <_ZN6AckMsgD1Ev>
			return;
 800cee2:	e0da      	b.n	800d09a <_ZN10MsgHandler23process_rxclpt_callbackEv+0x30a>
		}
	}
	else if (rxHeader.get_data()[0] == SerialID::MSG_START && ongoing_fetch == false)
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	3318      	adds	r3, #24
 800cee8:	4618      	mov	r0, r3
 800ceea:	f7fe feb7 	bl	800bc5c <_ZNK11HeaderClass8get_dataEv>
 800ceee:	4603      	mov	r3, r0
 800cef0:	781b      	ldrb	r3, [r3, #0]
 800cef2:	2bfe      	cmp	r3, #254	; 0xfe
 800cef4:	d105      	bne.n	800cf02 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x172>
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	795b      	ldrb	r3, [r3, #5]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d101      	bne.n	800cf02 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x172>
 800cefe:	2301      	movs	r3, #1
 800cf00:	e000      	b.n	800cf04 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x174>
 800cf02:	2300      	movs	r3, #0
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d05a      	beq.n	800cfbe <_ZN10MsgHandler23process_rxclpt_callbackEv+0x22e>
	{
		uint8_t msg_id = rxHeader.get_data()[1];
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	3318      	adds	r3, #24
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f7fe fea5 	bl	800bc5c <_ZNK11HeaderClass8get_dataEv>
 800cf12:	4603      	mov	r3, r0
 800cf14:	785b      	ldrb	r3, [r3, #1]
 800cf16:	777b      	strb	r3, [r7, #29]
		uint8_t msg_len = rxHeader.get_data()[2];
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	3318      	adds	r3, #24
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f7fe fe9d 	bl	800bc5c <_ZNK11HeaderClass8get_dataEv>
 800cf22:	4603      	mov	r3, r0
 800cf24:	789b      	ldrb	r3, [r3, #2]
 800cf26:	773b      	strb	r3, [r7, #28]
		switch (msg_id) {
 800cf28:	7f7b      	ldrb	r3, [r7, #29]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d002      	beq.n	800cf34 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x1a4>
 800cf2e:	2b01      	cmp	r3, #1
 800cf30:	d009      	beq.n	800cf46 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x1b6>
					ongoing_fetch = true;
					ack_msg_motor_speeds();
				}
				break;
			default:
				break;
 800cf32:	e012      	b.n	800cf5a <_ZN10MsgHandler23process_rxclpt_callbackEv+0x1ca>
				ongoing_fetch = true;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2201      	movs	r2, #1
 800cf38:	715a      	strb	r2, [r3, #5]
				ack_msg_print(msg_len);
 800cf3a:	7f3b      	ldrb	r3, [r7, #28]
 800cf3c:	4619      	mov	r1, r3
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f000 fa5c 	bl	800d3fc <_ZN10MsgHandler13ack_msg_printEh>
				break;
 800cf44:	e009      	b.n	800cf5a <_ZN10MsgHandler23process_rxclpt_callbackEv+0x1ca>
				if(msg_len == 4*sizeof(float))
 800cf46:	7f3b      	ldrb	r3, [r7, #28]
 800cf48:	2b10      	cmp	r3, #16
 800cf4a:	d105      	bne.n	800cf58 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x1c8>
					ongoing_fetch = true;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2201      	movs	r2, #1
 800cf50:	715a      	strb	r2, [r3, #5]
					ack_msg_motor_speeds();
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f000 f9ef 	bl	800d336 <_ZN10MsgHandler20ack_msg_motor_speedsEv>
				break;
 800cf58:	bf00      	nop
		}
		rxHeader.get_data()[0] = SerialID::MSG_NO_START;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	3318      	adds	r3, #24
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f7fe fe7c 	bl	800bc5c <_ZNK11HeaderClass8get_dataEv>
 800cf64:	4603      	mov	r3, r0
 800cf66:	22fd      	movs	r2, #253	; 0xfd
 800cf68:	701a      	strb	r2, [r3, #0]
		rxHeader.get_data()[1] = SerialID::MSG_NO_ID;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	3318      	adds	r3, #24
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f7fe fe74 	bl	800bc5c <_ZNK11HeaderClass8get_dataEv>
 800cf74:	4603      	mov	r3, r0
 800cf76:	3301      	adds	r3, #1
 800cf78:	22fb      	movs	r2, #251	; 0xfb
 800cf7a:	701a      	strb	r2, [r3, #0]
		rxHeader.get_data()[2] = SerialID::MSG_NO_SIZE;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	3318      	adds	r3, #24
 800cf80:	4618      	mov	r0, r3
 800cf82:	f7fe fe6b 	bl	800bc5c <_ZNK11HeaderClass8get_dataEv>
 800cf86:	4603      	mov	r3, r0
 800cf88:	3302      	adds	r3, #2
 800cf8a:	22fa      	movs	r2, #250	; 0xfa
 800cf8c:	701a      	strb	r2, [r3, #0]
		if( ongoing_fetch == false)
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	795b      	ldrb	r3, [r3, #5]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	f040 8081 	bne.w	800d09a <_ZN10MsgHandler23process_rxclpt_callbackEv+0x30a>
		{
			if( !tx_msg_list.empty() )
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	3324      	adds	r3, #36	; 0x24
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f000 fc52 	bl	800d846 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5emptyEv>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	f083 0301 	eor.w	r3, r3, #1
 800cfa8:	b2db      	uxtb	r3, r3
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d003      	beq.n	800cfb6 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x226>
			{
				check_tx_list();
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f7ff fe86 	bl	800ccc0 <_ZN10MsgHandler13check_tx_listEv>
 800cfb4:	e071      	b.n	800d09a <_ZN10MsgHandler23process_rxclpt_callbackEv+0x30a>
			}
			else
			{
				receive_data_header();
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f000 f996 	bl	800d2e8 <_ZN10MsgHandler19receive_data_headerEv>
 800cfbc:	e06d      	b.n	800d09a <_ZN10MsgHandler23process_rxclpt_callbackEv+0x30a>
			}
		}
	}
	else if ( ongoing_fetch == true)
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	795b      	ldrb	r3, [r3, #5]
 800cfc2:	2b01      	cmp	r3, #1
 800cfc4:	d15a      	bne.n	800d07c <_ZN10MsgHandler23process_rxclpt_callbackEv+0x2ec>
	{
		uint8_t msg_id = txSingleack.get_data()[1];
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	3310      	adds	r3, #16
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f7fe fea8 	bl	800bd20 <_ZNK6AckMsg8get_dataEv>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	785b      	ldrb	r3, [r3, #1]
 800cfd4:	77fb      	strb	r3, [r7, #31]
		uint8_t msg_len = txSingleack.get_data()[2];
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	3310      	adds	r3, #16
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f7fe fea0 	bl	800bd20 <_ZNK6AckMsg8get_dataEv>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	789b      	ldrb	r3, [r3, #2]
 800cfe4:	77bb      	strb	r3, [r7, #30]
		switch (msg_id) {
 800cfe6:	7ffb      	ldrb	r3, [r7, #31]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d002      	beq.n	800cff2 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x262>
 800cfec:	2b01      	cmp	r3, #1
 800cfee:	d010      	beq.n	800d012 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x282>
				break;
			case SerialID::MSG_MOTOR_SPEEDS:
				process_received_msg_motor_speeds(incoming_data->get_data());
				break;
			default:
				break;
 800cff0:	e01e      	b.n	800d030 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x2a0>
				process_received_msg_print(incoming_data->get_data(),msg_len);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6a1a      	ldr	r2, [r3, #32]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6a1b      	ldr	r3, [r3, #32]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	3308      	adds	r3, #8
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	4610      	mov	r0, r2
 800d002:	4798      	blx	r3
 800d004:	4601      	mov	r1, r0
 800d006:	7fbb      	ldrb	r3, [r7, #30]
 800d008:	461a      	mov	r2, r3
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f000 faf6 	bl	800d5fc <_ZN10MsgHandler26process_received_msg_printEPhh>
				break;
 800d010:	e00e      	b.n	800d030 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x2a0>
				process_received_msg_motor_speeds(incoming_data->get_data());
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6a1a      	ldr	r2, [r3, #32]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6a1b      	ldr	r3, [r3, #32]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	3308      	adds	r3, #8
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4610      	mov	r0, r2
 800d022:	4798      	blx	r3
 800d024:	4603      	mov	r3, r0
 800d026:	4619      	mov	r1, r3
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f000 faa1 	bl	800d570 <_ZN10MsgHandler33process_received_msg_motor_speedsEPh>
				break;
 800d02e:	bf00      	nop
		}
		ongoing_fetch = false;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2200      	movs	r2, #0
 800d034:	715a      	strb	r2, [r3, #5]
		txSingleack = AckMsg();
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f103 0410 	add.w	r4, r3, #16
 800d03c:	f107 0314 	add.w	r3, r7, #20
 800d040:	4618      	mov	r0, r3
 800d042:	f7fe fe2f 	bl	800bca4 <_ZN6AckMsgC1Ev>
 800d046:	f107 0314 	add.w	r3, r7, #20
 800d04a:	4619      	mov	r1, r3
 800d04c:	4620      	mov	r0, r4
 800d04e:	f7ff fdd8 	bl	800cc02 <_ZN6AckMsgaSERKS_>
 800d052:	f107 0314 	add.w	r3, r7, #20
 800d056:	4618      	mov	r0, r3
 800d058:	f7ff fcd2 	bl	800ca00 <_ZN6AckMsgD1Ev>
		if( tx_msg_list.empty())
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	3324      	adds	r3, #36	; 0x24
 800d060:	4618      	mov	r0, r3
 800d062:	f000 fbf0 	bl	800d846 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5emptyEv>
 800d066:	4603      	mov	r3, r0
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d003      	beq.n	800d074 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x2e4>
		{
			receive_data_header();
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f000 f93b 	bl	800d2e8 <_ZN10MsgHandler19receive_data_headerEv>
 800d072:	e012      	b.n	800d09a <_ZN10MsgHandler23process_rxclpt_callbackEv+0x30a>
		}
		else
		{
			check_tx_list();
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f7ff fe23 	bl	800ccc0 <_ZN10MsgHandler13check_tx_listEv>
 800d07a:	e00e      	b.n	800d09a <_ZN10MsgHandler23process_rxclpt_callbackEv+0x30a>
		}

	}
	else
	{
		if( tx_msg_list.empty())
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	3324      	adds	r3, #36	; 0x24
 800d080:	4618      	mov	r0, r3
 800d082:	f000 fbe0 	bl	800d846 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5emptyEv>
 800d086:	4603      	mov	r3, r0
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d003      	beq.n	800d094 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x304>
		{
			receive_data_header();
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f000 f92b 	bl	800d2e8 <_ZN10MsgHandler19receive_data_headerEv>
 800d092:	e002      	b.n	800d09a <_ZN10MsgHandler23process_rxclpt_callbackEv+0x30a>
		}
		else
		{
			check_tx_list();
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f7ff fe13 	bl	800ccc0 <_ZN10MsgHandler13check_tx_listEv>
		}
	}


}
 800d09a:	3724      	adds	r7, #36	; 0x24
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd90      	pop	{r4, r7, pc}

0800d0a0 <_ZNSt12__shared_ptrI11HeaderClassLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b082      	sub	sp, #8
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	3304      	adds	r3, #4
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f7ff fa8b 	bl	800c5c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3708      	adds	r7, #8
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}

0800d0bc <_ZNSt10shared_ptrI11HeaderClassED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b082      	sub	sp, #8
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f7ff ffea 	bl	800d0a0 <_ZNSt12__shared_ptrI11HeaderClassLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3708      	adds	r7, #8
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}

0800d0d6 <_ZNSt12__shared_ptrI12PayloadClassLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 800d0d6:	b580      	push	{r7, lr}
 800d0d8:	b082      	sub	sp, #8
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	6078      	str	r0, [r7, #4]
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	3304      	adds	r3, #4
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7ff fa70 	bl	800c5c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3708      	adds	r7, #8
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}

0800d0f2 <_ZNSt10shared_ptrI12PayloadClassED1Ev>:
 800d0f2:	b580      	push	{r7, lr}
 800d0f4:	b082      	sub	sp, #8
 800d0f6:	af00      	add	r7, sp, #0
 800d0f8:	6078      	str	r0, [r7, #4]
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f7ff ffea 	bl	800d0d6 <_ZNSt12__shared_ptrI12PayloadClassLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	4618      	mov	r0, r3
 800d106:	3708      	adds	r7, #8
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}

0800d10c <_ZN10MsgHandler10send_printEPKc>:


void MsgHandler::send_print(const char* msg)
{
 800d10c:	b590      	push	{r4, r7, lr}
 800d10e:	b08d      	sub	sp, #52	; 0x34
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
 800d114:	6039      	str	r1, [r7, #0]
	if( strlen(msg) < UINT8_MAX)
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	4618      	mov	r0, r3
 800d11a:	f7f3 f8d9 	bl	80002d0 <strlen>
 800d11e:	4603      	mov	r3, r0
 800d120:	2bfe      	cmp	r3, #254	; 0xfe
 800d122:	d87e      	bhi.n	800d222 <_ZN10MsgHandler10send_printEPKc+0x116>
	{
		tx_msg_list.push_back(std::make_shared<HeaderClass>(SerialID::MSG_PRINT,strlen(msg)));
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	4618      	mov	r0, r3
 800d12e:	f7f3 f8cf 	bl	80002d0 <strlen>
 800d132:	4603      	mov	r3, r0
 800d134:	61bb      	str	r3, [r7, #24]
 800d136:	f107 0310 	add.w	r3, r7, #16
 800d13a:	f107 0218 	add.w	r2, r7, #24
 800d13e:	493b      	ldr	r1, [pc, #236]	; (800d22c <_ZN10MsgHandler10send_printEPKc+0x120>)
 800d140:	4618      	mov	r0, r3
 800d142:	f000 fbc1 	bl	800d8c8 <_ZSt11make_sharedI11HeaderClassJRKhjEESt10shared_ptrIT_EDpOT0_>
 800d146:	f107 0210 	add.w	r2, r7, #16
 800d14a:	f107 0308 	add.w	r3, r7, #8
 800d14e:	4611      	mov	r1, r2
 800d150:	4618      	mov	r0, r3
 800d152:	f000 fbe4 	bl	800d91e <_ZNSt10shared_ptrI11AbstractMsgEC1I11HeaderClassvEEOS_IT_E>
 800d156:	f107 0308 	add.w	r3, r7, #8
 800d15a:	4619      	mov	r1, r3
 800d15c:	4620      	mov	r0, r4
 800d15e:	f000 fbf1 	bl	800d944 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE9push_backEOS3_>
 800d162:	f107 0308 	add.w	r3, r7, #8
 800d166:	4618      	mov	r0, r3
 800d168:	f7fe fe3f 	bl	800bdea <_ZNSt10shared_ptrI11AbstractMsgED1Ev>
 800d16c:	f107 0310 	add.w	r3, r7, #16
 800d170:	4618      	mov	r0, r3
 800d172:	f7ff ffa3 	bl	800d0bc <_ZNSt10shared_ptrI11HeaderClassED1Ev>
		tx_msg_list.push_back(std::make_shared<PayloadClass>(msg,strlen(msg)));
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	4618      	mov	r0, r3
 800d180:	f7f3 f8a6 	bl	80002d0 <strlen>
 800d184:	4603      	mov	r3, r0
 800d186:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d18c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800d190:	4639      	mov	r1, r7
 800d192:	4618      	mov	r0, r3
 800d194:	f000 fbec 	bl	800d970 <_ZSt11make_sharedI12PayloadClassJRPKcjEESt10shared_ptrIT_EDpOT0_>
 800d198:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d19c:	f107 031c 	add.w	r3, r7, #28
 800d1a0:	4611      	mov	r1, r2
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f000 fc0f 	bl	800d9c6 <_ZNSt10shared_ptrI11AbstractMsgEC1I12PayloadClassvEEOS_IT_E>
 800d1a8:	f107 031c 	add.w	r3, r7, #28
 800d1ac:	4619      	mov	r1, r3
 800d1ae:	4620      	mov	r0, r4
 800d1b0:	f000 fbc8 	bl	800d944 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE9push_backEOS3_>
 800d1b4:	f107 031c 	add.w	r3, r7, #28
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f7fe fe16 	bl	800bdea <_ZNSt10shared_ptrI11AbstractMsgED1Ev>
 800d1be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7ff ff95 	bl	800d0f2 <_ZNSt10shared_ptrI12PayloadClassED1Ev>
		if( tx_msg_list.size() == 2 && ongoing_fetch == false)
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	3324      	adds	r3, #36	; 0x24
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f000 fc0d 	bl	800d9ec <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE4sizeEv>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	2b02      	cmp	r3, #2
 800d1d6:	d105      	bne.n	800d1e4 <_ZN10MsgHandler10send_printEPKc+0xd8>
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	795b      	ldrb	r3, [r3, #5]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d101      	bne.n	800d1e4 <_ZN10MsgHandler10send_printEPKc+0xd8>
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	e000      	b.n	800d1e6 <_ZN10MsgHandler10send_printEPKc+0xda>
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d01b      	beq.n	800d222 <_ZN10MsgHandler10send_printEPKc+0x116>
		{
			transmit_front_msg();
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f000 f820 	bl	800d230 <_ZN10MsgHandler18transmit_front_msgEv>
		}
	}

}
 800d1f0:	e017      	b.n	800d222 <_ZN10MsgHandler10send_printEPKc+0x116>
		tx_msg_list.push_back(std::make_shared<HeaderClass>(SerialID::MSG_PRINT,strlen(msg)));
 800d1f2:	f107 0308 	add.w	r3, r7, #8
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f7fe fdf7 	bl	800bdea <_ZNSt10shared_ptrI11AbstractMsgED1Ev>
 800d1fc:	f107 0310 	add.w	r3, r7, #16
 800d200:	4618      	mov	r0, r3
 800d202:	f7ff ff5b 	bl	800d0bc <_ZNSt10shared_ptrI11HeaderClassED1Ev>
 800d206:	f006 f871 	bl	80132ec <__cxa_end_cleanup>
		tx_msg_list.push_back(std::make_shared<PayloadClass>(msg,strlen(msg)));
 800d20a:	f107 031c 	add.w	r3, r7, #28
 800d20e:	4618      	mov	r0, r3
 800d210:	f7fe fdeb 	bl	800bdea <_ZNSt10shared_ptrI11AbstractMsgED1Ev>
 800d214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d218:	4618      	mov	r0, r3
 800d21a:	f7ff ff6a 	bl	800d0f2 <_ZNSt10shared_ptrI12PayloadClassED1Ev>
 800d21e:	f006 f865 	bl	80132ec <__cxa_end_cleanup>
}
 800d222:	bf00      	nop
 800d224:	3734      	adds	r7, #52	; 0x34
 800d226:	46bd      	mov	sp, r7
 800d228:	bd90      	pop	{r4, r7, pc}
 800d22a:	bf00      	nop
 800d22c:	08018104 	.word	0x08018104

0800d230 <_ZN10MsgHandler18transmit_front_msgEv>:
	}

}

void MsgHandler::transmit_front_msg()
{
 800d230:	b5b0      	push	{r4, r5, r7, lr}
 800d232:	b082      	sub	sp, #8
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
	HAL_UART_Abort(huart);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	4618      	mov	r0, r3
 800d23e:	f004 ff6d 	bl	801211c <HAL_UART_Abort>
	HAL_UART_Transmit_IT(huart, (uint8_t*)tx_msg_list.front()->get_data(), tx_msg_list.front()->get_data_size());
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681c      	ldr	r4, [r3, #0]
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	3324      	adds	r3, #36	; 0x24
 800d24a:	4618      	mov	r0, r3
 800d24c:	f000 fb0d 	bl	800d86a <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 800d250:	4603      	mov	r3, r0
 800d252:	4618      	mov	r0, r3
 800d254:	f000 fb1c 	bl	800d890 <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800d258:	4603      	mov	r3, r0
 800d25a:	681a      	ldr	r2, [r3, #0]
 800d25c:	3208      	adds	r2, #8
 800d25e:	6812      	ldr	r2, [r2, #0]
 800d260:	4618      	mov	r0, r3
 800d262:	4790      	blx	r2
 800d264:	4605      	mov	r5, r0
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	3324      	adds	r3, #36	; 0x24
 800d26a:	4618      	mov	r0, r3
 800d26c:	f000 fafd 	bl	800d86a <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 800d270:	4603      	mov	r3, r0
 800d272:	4618      	mov	r0, r3
 800d274:	f000 fb0c 	bl	800d890 <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800d278:	4603      	mov	r3, r0
 800d27a:	681a      	ldr	r2, [r3, #0]
 800d27c:	3210      	adds	r2, #16
 800d27e:	6812      	ldr	r2, [r2, #0]
 800d280:	4618      	mov	r0, r3
 800d282:	4790      	blx	r2
 800d284:	4603      	mov	r3, r0
 800d286:	b29b      	uxth	r3, r3
 800d288:	461a      	mov	r2, r3
 800d28a:	4629      	mov	r1, r5
 800d28c:	4620      	mov	r0, r4
 800d28e:	f004 fed0 	bl	8012032 <HAL_UART_Transmit_IT>
}
 800d292:	bf00      	nop
 800d294:	3708      	adds	r7, #8
 800d296:	46bd      	mov	sp, r7
 800d298:	bdb0      	pop	{r4, r5, r7, pc}

0800d29a <_ZN10MsgHandler11receive_ackEv>:

void MsgHandler::receive_ack()
{
 800d29a:	b5b0      	push	{r4, r5, r7, lr}
 800d29c:	b082      	sub	sp, #8
 800d29e:	af00      	add	r7, sp, #0
 800d2a0:	6078      	str	r0, [r7, #4]
	HAL_UART_Abort(huart);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f004 ff38 	bl	801211c <HAL_UART_Abort>
	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_ORE);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	f06f 0208 	mvn.w	r2, #8
 800d2b6:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(huart, rxSingleack.get_data(), rxSingleack.get_data_size());
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681c      	ldr	r4, [r3, #0]
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	3308      	adds	r3, #8
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f7fe fd2d 	bl	800bd20 <_ZNK6AckMsg8get_dataEv>
 800d2c6:	4605      	mov	r5, r0
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	3308      	adds	r3, #8
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f7fe fd40 	bl	800bd52 <_ZNK6AckMsg13get_data_sizeEv>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	b29b      	uxth	r3, r3
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	4629      	mov	r1, r5
 800d2da:	4620      	mov	r0, r4
 800d2dc:	f004 feee 	bl	80120bc <HAL_UART_Receive_IT>
}
 800d2e0:	bf00      	nop
 800d2e2:	3708      	adds	r7, #8
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bdb0      	pop	{r4, r5, r7, pc}

0800d2e8 <_ZN10MsgHandler19receive_data_headerEv>:
void MsgHandler::receive_data_header()
{
 800d2e8:	b5b0      	push	{r4, r5, r7, lr}
 800d2ea:	b082      	sub	sp, #8
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PinState::GPIO_PIN_SET);
	HAL_UART_Abort(huart);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f004 ff11 	bl	801211c <HAL_UART_Abort>
	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_ORE);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	f06f 0208 	mvn.w	r2, #8
 800d304:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(huart, rxHeader.get_data(), rxHeader.get_data_size());
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681c      	ldr	r4, [r3, #0]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	3318      	adds	r3, #24
 800d30e:	4618      	mov	r0, r3
 800d310:	f7fe fca4 	bl	800bc5c <_ZNK11HeaderClass8get_dataEv>
 800d314:	4605      	mov	r5, r0
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	3318      	adds	r3, #24
 800d31a:	4618      	mov	r0, r3
 800d31c:	f7fe fcb7 	bl	800bc8e <_ZNK11HeaderClass13get_data_sizeEv>
 800d320:	4603      	mov	r3, r0
 800d322:	b29b      	uxth	r3, r3
 800d324:	461a      	mov	r2, r3
 800d326:	4629      	mov	r1, r5
 800d328:	4620      	mov	r0, r4
 800d32a:	f004 fec7 	bl	80120bc <HAL_UART_Receive_IT>
}
 800d32e:	bf00      	nop
 800d330:	3708      	adds	r7, #8
 800d332:	46bd      	mov	sp, r7
 800d334:	bdb0      	pop	{r4, r5, r7, pc}

0800d336 <_ZN10MsgHandler20ack_msg_motor_speedsEv>:
void MsgHandler::ack_msg_motor_speeds()
{
 800d336:	b5b0      	push	{r4, r5, r7, lr}
 800d338:	b086      	sub	sp, #24
 800d33a:	af00      	add	r7, sp, #0
 800d33c:	6078      	str	r0, [r7, #4]
	float  dummy_data_1[4] = {0.0,0.0,0.0,0.0};
 800d33e:	f107 0308 	add.w	r3, r7, #8
 800d342:	2200      	movs	r2, #0
 800d344:	601a      	str	r2, [r3, #0]
 800d346:	605a      	str	r2, [r3, #4]
 800d348:	609a      	str	r2, [r3, #8]
 800d34a:	60da      	str	r2, [r3, #12]
	if( incoming_data != NULL)
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6a1b      	ldr	r3, [r3, #32]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d008      	beq.n	800d366 <_ZN10MsgHandler20ack_msg_motor_speedsEv+0x30>
	{
		delete incoming_data;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6a1b      	ldr	r3, [r3, #32]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d004      	beq.n	800d366 <_ZN10MsgHandler20ack_msg_motor_speedsEv+0x30>
 800d35c:	681a      	ldr	r2, [r3, #0]
 800d35e:	3204      	adds	r2, #4
 800d360:	6812      	ldr	r2, [r2, #0]
 800d362:	4618      	mov	r0, r3
 800d364:	4790      	blx	r2
	}
	incoming_data = new PayloadClass(&dummy_data_1,4*sizeof(float));
 800d366:	200c      	movs	r0, #12
 800d368:	f006 fb87 	bl	8013a7a <_Znwj>
 800d36c:	4603      	mov	r3, r0
 800d36e:	461c      	mov	r4, r3
 800d370:	f107 0308 	add.w	r3, r7, #8
 800d374:	2210      	movs	r2, #16
 800d376:	4619      	mov	r1, r3
 800d378:	4620      	mov	r0, r4
 800d37a:	f000 fb43 	bl	800da04 <_ZN12PayloadClassC1IA4_fEEPT_h>
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	621c      	str	r4, [r3, #32]
	txSingleack.get_data()[0] = SerialID::MSG_ACK;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	3310      	adds	r3, #16
 800d386:	4618      	mov	r0, r3
 800d388:	f7fe fcca 	bl	800bd20 <_ZNK6AckMsg8get_dataEv>
 800d38c:	4603      	mov	r3, r0
 800d38e:	22ff      	movs	r2, #255	; 0xff
 800d390:	701a      	strb	r2, [r3, #0]
	txSingleack.get_data()[1] = SerialID::MSG_MOTOR_SPEEDS;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	3310      	adds	r3, #16
 800d396:	4618      	mov	r0, r3
 800d398:	f7fe fcc2 	bl	800bd20 <_ZNK6AckMsg8get_dataEv>
 800d39c:	4603      	mov	r3, r0
 800d39e:	3301      	adds	r3, #1
 800d3a0:	2201      	movs	r2, #1
 800d3a2:	701a      	strb	r2, [r3, #0]
	txSingleack.get_data()[2] = 4*sizeof(float);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	3310      	adds	r3, #16
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f7fe fcb9 	bl	800bd20 <_ZNK6AckMsg8get_dataEv>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	3302      	adds	r3, #2
 800d3b2:	2210      	movs	r2, #16
 800d3b4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Abort(huart);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f004 feae 	bl	801211c <HAL_UART_Abort>
	HAL_UART_Transmit_IT(huart, txSingleack.get_data(), txSingleack.get_data_size());
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681c      	ldr	r4, [r3, #0]
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	3310      	adds	r3, #16
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7fe fca9 	bl	800bd20 <_ZNK6AckMsg8get_dataEv>
 800d3ce:	4605      	mov	r5, r0
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	3310      	adds	r3, #16
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f7fe fcbc 	bl	800bd52 <_ZNK6AckMsg13get_data_sizeEv>
 800d3da:	4603      	mov	r3, r0
 800d3dc:	b29b      	uxth	r3, r3
 800d3de:	461a      	mov	r2, r3
 800d3e0:	4629      	mov	r1, r5
 800d3e2:	4620      	mov	r0, r4
 800d3e4:	f004 fe25 	bl	8012032 <HAL_UART_Transmit_IT>

}
 800d3e8:	e005      	b.n	800d3f6 <_ZN10MsgHandler20ack_msg_motor_speedsEv+0xc0>
	incoming_data = new PayloadClass(&dummy_data_1,4*sizeof(float));
 800d3ea:	210c      	movs	r1, #12
 800d3ec:	4620      	mov	r0, r4
 800d3ee:	f005 fee5 	bl	80131bc <_ZdlPvj>
 800d3f2:	f005 ff7b 	bl	80132ec <__cxa_end_cleanup>
}
 800d3f6:	3718      	adds	r7, #24
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bdb0      	pop	{r4, r5, r7, pc}

0800d3fc <_ZN10MsgHandler13ack_msg_printEh>:
void MsgHandler::ack_msg_print(uint8_t msg_len)
{
 800d3fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d400:	b087      	sub	sp, #28
 800d402:	af00      	add	r7, sp, #0
 800d404:	6078      	str	r0, [r7, #4]
 800d406:	460b      	mov	r3, r1
 800d408:	70fb      	strb	r3, [r7, #3]
	txSingleack.get_data()[1] = SerialID::MSG_PRINT;
	txSingleack.get_data()[2] = msg_len;
	HAL_UART_Abort(huart);
	HAL_UART_Transmit_IT(huart, txSingleack.get_data(), txSingleack.get_data_size());

}
 800d40a:	466b      	mov	r3, sp
 800d40c:	461e      	mov	r6, r3
	char dummy_print_msg[msg_len];
 800d40e:	78f9      	ldrb	r1, [r7, #3]
 800d410:	460b      	mov	r3, r1
 800d412:	3b01      	subs	r3, #1
 800d414:	617b      	str	r3, [r7, #20]
 800d416:	b2cb      	uxtb	r3, r1
 800d418:	2200      	movs	r2, #0
 800d41a:	4698      	mov	r8, r3
 800d41c:	4691      	mov	r9, r2
 800d41e:	f04f 0200 	mov.w	r2, #0
 800d422:	f04f 0300 	mov.w	r3, #0
 800d426:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d42a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d42e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d432:	b2cb      	uxtb	r3, r1
 800d434:	2200      	movs	r2, #0
 800d436:	461c      	mov	r4, r3
 800d438:	4615      	mov	r5, r2
 800d43a:	f04f 0200 	mov.w	r2, #0
 800d43e:	f04f 0300 	mov.w	r3, #0
 800d442:	00eb      	lsls	r3, r5, #3
 800d444:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d448:	00e2      	lsls	r2, r4, #3
 800d44a:	460b      	mov	r3, r1
 800d44c:	3307      	adds	r3, #7
 800d44e:	08db      	lsrs	r3, r3, #3
 800d450:	00db      	lsls	r3, r3, #3
 800d452:	ebad 0d03 	sub.w	sp, sp, r3
 800d456:	466b      	mov	r3, sp
 800d458:	3300      	adds	r3, #0
 800d45a:	613b      	str	r3, [r7, #16]
	char *dummy_print_msg_ptr = dummy_print_msg;
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	60fb      	str	r3, [r7, #12]
	if( incoming_data != NULL)
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6a1b      	ldr	r3, [r3, #32]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d008      	beq.n	800d47a <_ZN10MsgHandler13ack_msg_printEh+0x7e>
		delete incoming_data;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6a1b      	ldr	r3, [r3, #32]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d004      	beq.n	800d47a <_ZN10MsgHandler13ack_msg_printEh+0x7e>
 800d470:	681a      	ldr	r2, [r3, #0]
 800d472:	3204      	adds	r2, #4
 800d474:	6812      	ldr	r2, [r2, #0]
 800d476:	4618      	mov	r0, r3
 800d478:	4790      	blx	r2
	incoming_data = new PayloadClass(dummy_print_msg_ptr,msg_len);
 800d47a:	200c      	movs	r0, #12
 800d47c:	f006 fafd 	bl	8013a7a <_Znwj>
 800d480:	4603      	mov	r3, r0
 800d482:	461c      	mov	r4, r3
 800d484:	78fb      	ldrb	r3, [r7, #3]
 800d486:	461a      	mov	r2, r3
 800d488:	68f9      	ldr	r1, [r7, #12]
 800d48a:	4620      	mov	r0, r4
 800d48c:	f000 faf8 	bl	800da80 <_ZN12PayloadClassC1IcEEPT_h>
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	621c      	str	r4, [r3, #32]
	txSingleack.get_data()[0] = SerialID::MSG_ACK;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	3310      	adds	r3, #16
 800d498:	4618      	mov	r0, r3
 800d49a:	f7fe fc41 	bl	800bd20 <_ZNK6AckMsg8get_dataEv>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	22ff      	movs	r2, #255	; 0xff
 800d4a2:	701a      	strb	r2, [r3, #0]
	txSingleack.get_data()[1] = SerialID::MSG_PRINT;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	3310      	adds	r3, #16
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f7fe fc39 	bl	800bd20 <_ZNK6AckMsg8get_dataEv>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	3301      	adds	r3, #1
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	701a      	strb	r2, [r3, #0]
	txSingleack.get_data()[2] = msg_len;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	3310      	adds	r3, #16
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f7fe fc30 	bl	800bd20 <_ZNK6AckMsg8get_dataEv>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	3302      	adds	r3, #2
 800d4c4:	78fa      	ldrb	r2, [r7, #3]
 800d4c6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Abort(huart);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f004 fe25 	bl	801211c <HAL_UART_Abort>
	HAL_UART_Transmit_IT(huart, txSingleack.get_data(), txSingleack.get_data_size());
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681c      	ldr	r4, [r3, #0]
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	3310      	adds	r3, #16
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f7fe fc20 	bl	800bd20 <_ZNK6AckMsg8get_dataEv>
 800d4e0:	4605      	mov	r5, r0
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	3310      	adds	r3, #16
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f7fe fc33 	bl	800bd52 <_ZNK6AckMsg13get_data_sizeEv>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	b29b      	uxth	r3, r3
 800d4f0:	461a      	mov	r2, r3
 800d4f2:	4629      	mov	r1, r5
 800d4f4:	4620      	mov	r0, r4
 800d4f6:	f004 fd9c 	bl	8012032 <HAL_UART_Transmit_IT>
 800d4fa:	46b5      	mov	sp, r6
}
 800d4fc:	e005      	b.n	800d50a <_ZN10MsgHandler13ack_msg_printEh+0x10e>
	incoming_data = new PayloadClass(dummy_print_msg_ptr,msg_len);
 800d4fe:	210c      	movs	r1, #12
 800d500:	4620      	mov	r0, r4
 800d502:	f005 fe5b 	bl	80131bc <_ZdlPvj>
 800d506:	f005 fef1 	bl	80132ec <__cxa_end_cleanup>
}
 800d50a:	371c      	adds	r7, #28
 800d50c:	46bd      	mov	sp, r7
 800d50e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d512 <_ZN10MsgHandler12receive_dataEv>:

void MsgHandler::receive_data()
{
 800d512:	b5b0      	push	{r4, r5, r7, lr}
 800d514:	b082      	sub	sp, #8
 800d516:	af00      	add	r7, sp, #0
 800d518:	6078      	str	r0, [r7, #4]
	HAL_UART_Abort(huart);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	4618      	mov	r0, r3
 800d520:	f004 fdfc 	bl	801211c <HAL_UART_Abort>
	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_ORE);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	f06f 0208 	mvn.w	r2, #8
 800d52e:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(huart, incoming_data->get_data(), incoming_data->get_data_size());
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681c      	ldr	r4, [r3, #0]
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6a1a      	ldr	r2, [r3, #32]
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6a1b      	ldr	r3, [r3, #32]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	3308      	adds	r3, #8
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	4610      	mov	r0, r2
 800d544:	4798      	blx	r3
 800d546:	4605      	mov	r5, r0
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6a1a      	ldr	r2, [r3, #32]
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6a1b      	ldr	r3, [r3, #32]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	3310      	adds	r3, #16
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	4610      	mov	r0, r2
 800d558:	4798      	blx	r3
 800d55a:	4603      	mov	r3, r0
 800d55c:	b29b      	uxth	r3, r3
 800d55e:	461a      	mov	r2, r3
 800d560:	4629      	mov	r1, r5
 800d562:	4620      	mov	r0, r4
 800d564:	f004 fdaa 	bl	80120bc <HAL_UART_Receive_IT>
}
 800d568:	bf00      	nop
 800d56a:	3708      	adds	r7, #8
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bdb0      	pop	{r4, r5, r7, pc}

0800d570 <_ZN10MsgHandler33process_received_msg_motor_speedsEPh>:

void MsgHandler::process_received_msg_motor_speeds(uint8_t * data)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	6039      	str	r1, [r7, #0]
	memcpy(motor_speeds,data,4*sizeof(float));
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d57e:	2210      	movs	r2, #16
 800d580:	6839      	ldr	r1, [r7, #0]
 800d582:	4618      	mov	r0, r3
 800d584:	f007 fbcd 	bl	8014d22 <memcpy>
	received_motor_speeds = true;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2201      	movs	r2, #1
 800d58c:	711a      	strb	r2, [r3, #4]
}
 800d58e:	bf00      	nop
 800d590:	3708      	adds	r7, #8
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}

0800d596 <_ZN10MsgHandler25get_received_motor_speedsEPf>:

bool MsgHandler::get_received_motor_speeds(float* to_fill_motor_speeds)
{
 800d596:	b580      	push	{r7, lr}
 800d598:	b082      	sub	sp, #8
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	6078      	str	r0, [r7, #4]
 800d59e:	6039      	str	r1, [r7, #0]
	if( received_motor_speeds )
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	791b      	ldrb	r3, [r3, #4]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d00f      	beq.n	800d5c8 <_ZN10MsgHandler25get_received_motor_speedsEPf+0x32>
	{
		if( motor_speeds != NULL)
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d00b      	beq.n	800d5c8 <_ZN10MsgHandler25get_received_motor_speedsEPf+0x32>
		{
			memcpy(to_fill_motor_speeds,motor_speeds,4*sizeof(float));
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5b4:	2210      	movs	r2, #16
 800d5b6:	4619      	mov	r1, r3
 800d5b8:	6838      	ldr	r0, [r7, #0]
 800d5ba:	f007 fbb2 	bl	8014d22 <memcpy>
			received_motor_speeds = false;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	711a      	strb	r2, [r3, #4]
			return true;
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	e000      	b.n	800d5ca <_ZN10MsgHandler25get_received_motor_speedsEPf+0x34>
		}
	}
	return false;
 800d5c8:	2300      	movs	r3, #0
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3708      	adds	r7, #8
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}

0800d5d2 <_ZSt3minIiERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 800d5d2:	b480      	push	{r7}
 800d5d4:	b083      	sub	sp, #12
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	6078      	str	r0, [r7, #4]
 800d5da:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	681a      	ldr	r2, [r3, #0]
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	da01      	bge.n	800d5ec <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	e000      	b.n	800d5ee <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 800d5ec:	687b      	ldr	r3, [r7, #4]
    }
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	370c      	adds	r7, #12
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f8:	4770      	bx	lr
	...

0800d5fc <_ZN10MsgHandler26process_received_msg_printEPhh>:


void MsgHandler::process_received_msg_print(uint8_t * data, uint8_t msg_len)
{
 800d5fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d600:	b08b      	sub	sp, #44	; 0x2c
 800d602:	af00      	add	r7, sp, #0
 800d604:	60f8      	str	r0, [r7, #12]
 800d606:	60b9      	str	r1, [r7, #8]
 800d608:	4613      	mov	r3, r2
 800d60a:	71fb      	strb	r3, [r7, #7]
 	uint8_t max_len = std::min(UINT8_MAX, 50+msg_len);
	char msg[max_len];
	sprintf(msg,"received : %s",charPtr);
	send_print(msg);

}
 800d60c:	466b      	mov	r3, sp
 800d60e:	461e      	mov	r6, r3
    char* charPtr = reinterpret_cast<char*>(data);
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	627b      	str	r3, [r7, #36]	; 0x24
 	uint8_t max_len = std::min(UINT8_MAX, 50+msg_len);
 800d614:	23ff      	movs	r3, #255	; 0xff
 800d616:	613b      	str	r3, [r7, #16]
 800d618:	79fb      	ldrb	r3, [r7, #7]
 800d61a:	3332      	adds	r3, #50	; 0x32
 800d61c:	617b      	str	r3, [r7, #20]
 800d61e:	f107 0214 	add.w	r2, r7, #20
 800d622:	f107 0310 	add.w	r3, r7, #16
 800d626:	4611      	mov	r1, r2
 800d628:	4618      	mov	r0, r3
 800d62a:	f7ff ffd2 	bl	800d5d2 <_ZSt3minIiERKT_S2_S2_>
 800d62e:	4603      	mov	r3, r0
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	char msg[max_len];
 800d636:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 800d63a:	460b      	mov	r3, r1
 800d63c:	3b01      	subs	r3, #1
 800d63e:	61fb      	str	r3, [r7, #28]
 800d640:	b2cb      	uxtb	r3, r1
 800d642:	2200      	movs	r2, #0
 800d644:	4698      	mov	r8, r3
 800d646:	4691      	mov	r9, r2
 800d648:	f04f 0200 	mov.w	r2, #0
 800d64c:	f04f 0300 	mov.w	r3, #0
 800d650:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d654:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d658:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d65c:	b2cb      	uxtb	r3, r1
 800d65e:	2200      	movs	r2, #0
 800d660:	461c      	mov	r4, r3
 800d662:	4615      	mov	r5, r2
 800d664:	f04f 0200 	mov.w	r2, #0
 800d668:	f04f 0300 	mov.w	r3, #0
 800d66c:	00eb      	lsls	r3, r5, #3
 800d66e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d672:	00e2      	lsls	r2, r4, #3
 800d674:	460b      	mov	r3, r1
 800d676:	3307      	adds	r3, #7
 800d678:	08db      	lsrs	r3, r3, #3
 800d67a:	00db      	lsls	r3, r3, #3
 800d67c:	ebad 0d03 	sub.w	sp, sp, r3
 800d680:	466b      	mov	r3, sp
 800d682:	3300      	adds	r3, #0
 800d684:	61bb      	str	r3, [r7, #24]
	sprintf(msg,"received : %s",charPtr);
 800d686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d688:	4906      	ldr	r1, [pc, #24]	; (800d6a4 <_ZN10MsgHandler26process_received_msg_printEPhh+0xa8>)
 800d68a:	69b8      	ldr	r0, [r7, #24]
 800d68c:	f007 f9f8 	bl	8014a80 <siprintf>
	send_print(msg);
 800d690:	69b9      	ldr	r1, [r7, #24]
 800d692:	68f8      	ldr	r0, [r7, #12]
 800d694:	f7ff fd3a 	bl	800d10c <_ZN10MsgHandler10send_printEPKc>
 800d698:	46b5      	mov	sp, r6
}
 800d69a:	bf00      	nop
 800d69c:	372c      	adds	r7, #44	; 0x2c
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6a4:	08016cc8 	.word	0x08016cc8

0800d6a8 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEaSERKS3_>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b082      	sub	sp, #8
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
 800d6b0:	6039      	str	r1, [r7, #0]
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	681a      	ldr	r2, [r3, #0]
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	601a      	str	r2, [r3, #0]
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	1d1a      	adds	r2, r3, #4
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	3304      	adds	r3, #4
 800d6c2:	4619      	mov	r1, r3
 800d6c4:	4610      	mov	r0, r2
 800d6c6:	f000 fa55 	bl	800db74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	3708      	adds	r7, #8
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bd80      	pop	{r7, pc}

0800d6d4 <_ZNSt10shared_ptrI11AbstractMsgEaSERKS1_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b082      	sub	sp, #8
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
 800d6dc:	6039      	str	r1, [r7, #0]
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	683a      	ldr	r2, [r7, #0]
 800d6e2:	4611      	mov	r1, r2
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f7ff ffdf 	bl	800d6a8 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEaSERKS3_>
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3708      	adds	r7, #8
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}

0800d6f4 <_ZN10MsgHandler15process_timeoutEv>:

void MsgHandler::process_timeout(void)
{
 800d6f4:	b590      	push	{r4, r7, lr}
 800d6f6:	b087      	sub	sp, #28
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]

	if( ! tx_msg_list.empty())
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	3324      	adds	r3, #36	; 0x24
 800d700:	4618      	mov	r0, r3
 800d702:	f000 f8a0 	bl	800d846 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5emptyEv>
 800d706:	4603      	mov	r3, r0
 800d708:	f083 0301 	eor.w	r3, r3, #1
 800d70c:	b2db      	uxtb	r3, r3
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d066      	beq.n	800d7e0 <_ZN10MsgHandler15process_timeoutEv+0xec>
	{
		if( ongoing_fetch)
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	795b      	ldrb	r3, [r3, #5]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d021      	beq.n	800d75e <_ZN10MsgHandler15process_timeoutEv+0x6a>
		{
			if(register_ongoing_fetch)
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	799b      	ldrb	r3, [r3, #6]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d019      	beq.n	800d756 <_ZN10MsgHandler15process_timeoutEv+0x62>
			{
				ongoing_fetch = false;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2200      	movs	r2, #0
 800d726:	715a      	strb	r2, [r3, #5]
				register_ongoing_fetch = false;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2200      	movs	r2, #0
 800d72c:	719a      	strb	r2, [r3, #6]
				txSingleack = AckMsg();
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f103 0410 	add.w	r4, r3, #16
 800d734:	f107 0308 	add.w	r3, r7, #8
 800d738:	4618      	mov	r0, r3
 800d73a:	f7fe fab3 	bl	800bca4 <_ZN6AckMsgC1Ev>
 800d73e:	f107 0308 	add.w	r3, r7, #8
 800d742:	4619      	mov	r1, r3
 800d744:	4620      	mov	r0, r4
 800d746:	f7ff fa5c 	bl	800cc02 <_ZN6AckMsgaSERKS_>
 800d74a:	f107 0308 	add.w	r3, r7, #8
 800d74e:	4618      	mov	r0, r3
 800d750:	f7ff f956 	bl	800ca00 <_ZN6AckMsgD1Ev>
				registered_msg = tx_msg_list.front();
			}
		}

	}
}
 800d754:	e044      	b.n	800d7e0 <_ZN10MsgHandler15process_timeoutEv+0xec>
				register_ongoing_fetch = true;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2201      	movs	r2, #1
 800d75a:	719a      	strb	r2, [r3, #6]
}
 800d75c:	e040      	b.n	800d7e0 <_ZN10MsgHandler15process_timeoutEv+0xec>
			if(registered_msg.get() == tx_msg_list.front().get() )
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	3330      	adds	r3, #48	; 0x30
 800d762:	4618      	mov	r0, r3
 800d764:	f000 f9ca 	bl	800dafc <_ZNKSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800d768:	4604      	mov	r4, r0
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	3324      	adds	r3, #36	; 0x24
 800d76e:	4618      	mov	r0, r3
 800d770:	f000 f87b 	bl	800d86a <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 800d774:	4603      	mov	r3, r0
 800d776:	4618      	mov	r0, r3
 800d778:	f000 f9c0 	bl	800dafc <_ZNKSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800d77c:	4603      	mov	r3, r0
 800d77e:	429c      	cmp	r4, r3
 800d780:	bf0c      	ite	eq
 800d782:	2301      	moveq	r3, #1
 800d784:	2300      	movne	r3, #0
 800d786:	b2db      	uxtb	r3, r3
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d01c      	beq.n	800d7c6 <_ZN10MsgHandler15process_timeoutEv+0xd2>
				tx_msg_list.clear();
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	3324      	adds	r3, #36	; 0x24
 800d790:	4618      	mov	r0, r3
 800d792:	f000 f9bf 	bl	800db14 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5clearEv>
				registered_msg = nullptr;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800d79c:	f107 0310 	add.w	r3, r7, #16
 800d7a0:	2100      	movs	r1, #0
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f000 f9c6 	bl	800db34 <_ZNSt10shared_ptrI11AbstractMsgEC1EDn>
 800d7a8:	f107 0310 	add.w	r3, r7, #16
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	4620      	mov	r0, r4
 800d7b0:	f000 f9cd 	bl	800db4e <_ZNSt10shared_ptrI11AbstractMsgEaSEOS1_>
 800d7b4:	f107 0310 	add.w	r3, r7, #16
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f7fe fb16 	bl	800bdea <_ZNSt10shared_ptrI11AbstractMsgED1Ev>
				receive_data_header();
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f7ff fd92 	bl	800d2e8 <_ZN10MsgHandler19receive_data_headerEv>
}
 800d7c4:	e00c      	b.n	800d7e0 <_ZN10MsgHandler15process_timeoutEv+0xec>
				registered_msg = tx_msg_list.front();
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	3324      	adds	r3, #36	; 0x24
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f000 f84a 	bl	800d86a <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	4619      	mov	r1, r3
 800d7da:	4620      	mov	r0, r4
 800d7dc:	f7ff ff7a 	bl	800d6d4 <_ZNSt10shared_ptrI11AbstractMsgEaSERKS1_>
}
 800d7e0:	bf00      	nop
 800d7e2:	371c      	adds	r7, #28
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd90      	pop	{r4, r7, pc}

0800d7e8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b082      	sub	sp, #8
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
      { delete this; }
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d005      	beq.n	800d802 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	3304      	adds	r3, #4
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	4798      	blx	r3
 800d802:	bf00      	nop
 800d804:	3708      	adds	r7, #8
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}

0800d80a <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEcvbEv>:
      const deleter_type&
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }

      /// Return @c true if the stored pointer is not null.
      explicit operator bool() const noexcept
 800d80a:	b580      	push	{r7, lr}
 800d80c:	b082      	sub	sp, #8
 800d80e:	af00      	add	r7, sp, #0
 800d810:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f7fe fe92 	bl	800c53c <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 800d818:	4603      	mov	r3, r0
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	bf14      	ite	ne
 800d81e:	2301      	movne	r3, #1
 800d820:	2300      	moveq	r3, #0
 800d822:	b2db      	uxtb	r3, r3
 800d824:	4618      	mov	r0, r3
 800d826:	3708      	adds	r7, #8
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}

0800d82c <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EE5resetEDn>:
               >>
      void
      reset(_Up __p) noexcept
      { _M_t.reset(std::move(__p)); }

      void reset(nullptr_t = nullptr) noexcept
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b082      	sub	sp, #8
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	6039      	str	r1, [r7, #0]
      { reset(pointer()); }
 800d836:	2100      	movs	r1, #0
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f000 f9df 	bl	800dbfc <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EE5resetIPhvEEvT_>
 800d83e:	bf00      	nop
 800d840:	3708      	adds	r7, #8
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}

0800d846 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5emptyEv>:
      /**
       *  Returns true if the %list is empty.  (Thus begin() would equal
       *  end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
 800d846:	b480      	push	{r7}
 800d848:	b083      	sub	sp, #12
 800d84a:	af00      	add	r7, sp, #0
 800d84c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681a      	ldr	r2, [r3, #0]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	429a      	cmp	r2, r3
 800d856:	bf0c      	ite	eq
 800d858:	2301      	moveq	r3, #1
 800d85a:	2300      	movne	r3, #0
 800d85c:	b2db      	uxtb	r3, r3
 800d85e:	4618      	mov	r0, r3
 800d860:	370c      	adds	r7, #12
 800d862:	46bd      	mov	sp, r7
 800d864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d868:	4770      	bx	lr

0800d86a <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %list.
       */
      reference
      front() _GLIBCXX_NOEXCEPT
 800d86a:	b580      	push	{r7, lr}
 800d86c:	b084      	sub	sp, #16
 800d86e:	af00      	add	r7, sp, #0
 800d870:	6078      	str	r0, [r7, #4]
      { return *begin(); }
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f000 f9d6 	bl	800dc24 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5beginEv>
 800d878:	4603      	mov	r3, r0
 800d87a:	60fb      	str	r3, [r7, #12]
 800d87c:	f107 030c 	add.w	r3, r7, #12
 800d880:	4618      	mov	r0, r3
 800d882:	f000 f9e0 	bl	800dc46 <_ZNKSt14_List_iteratorISt10shared_ptrI11AbstractMsgEEdeEv>
 800d886:	4603      	mov	r3, r0
 800d888:	4618      	mov	r0, r3
 800d88a:	3710      	adds	r7, #16
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}

0800d890 <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 800d890:	b580      	push	{r7, lr}
 800d892:	b082      	sub	sp, #8
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
	return _M_get();
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f000 f9e2 	bl	800dc62 <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 800d89e:	4603      	mov	r3, r0
      }
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	3708      	adds	r7, #8
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}

0800d8a8 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE9pop_frontEv>:
       *  Note that no data is returned, and if the first element's data
       *  is needed, it should be retrieved before pop_front() is
       *  called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b082      	sub	sp, #8
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
      { this->_M_erase(begin()); }
 800d8b0:	6878      	ldr	r0, [r7, #4]
 800d8b2:	f000 f9b7 	bl	800dc24 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5beginEv>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	4619      	mov	r1, r3
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f000 f9dd 	bl	800dc7a <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE8_M_eraseESt14_List_iteratorIS3_E>
 800d8c0:	bf00      	nop
 800d8c2:	3708      	adds	r7, #8
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}

0800d8c8 <_ZSt11make_sharedI11HeaderClassJRKhjEESt10shared_ptrIT_EDpOT0_>:
   *  @throw  std::bad_alloc, or an exception thrown from the
   *          constructor of @a _Tp.
   */
  template<typename _Tp, typename... _Args>
    inline shared_ptr<_Tp>
    make_shared(_Args&&... __args)
 800d8c8:	b590      	push	{r4, r7, lr}
 800d8ca:	b087      	sub	sp, #28
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	60f8      	str	r0, [r7, #12]
 800d8d0:	60b9      	str	r1, [r7, #8]
 800d8d2:	607a      	str	r2, [r7, #4]
    {
      typedef typename std::remove_cv<_Tp>::type _Tp_nc;
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
 800d8d4:	f107 0314 	add.w	r3, r7, #20
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f000 f9f4 	bl	800dcc6 <_ZNSaI11HeaderClassEC1Ev>
				       std::forward<_Args>(__args)...);
 800d8de:	68b8      	ldr	r0, [r7, #8]
 800d8e0:	f000 fa09 	bl	800dcf6 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 800d8e4:	4604      	mov	r4, r0
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f000 fa10 	bl	800dd0c <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	68f8      	ldr	r0, [r7, #12]
 800d8f0:	f107 0114 	add.w	r1, r7, #20
 800d8f4:	4622      	mov	r2, r4
 800d8f6:	f000 fa14 	bl	800dd22 <_ZSt15allocate_sharedI11HeaderClassSaIS0_EJRKhjEESt10shared_ptrIT_ERKT0_DpOT1_>
 800d8fa:	bf00      	nop
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
 800d8fc:	f107 0314 	add.w	r3, r7, #20
 800d900:	4618      	mov	r0, r3
 800d902:	f000 f9ec 	bl	800dcde <_ZNSaI11HeaderClassED1Ev>
				       std::forward<_Args>(__args)...);
 800d906:	e006      	b.n	800d916 <_ZSt11make_sharedI11HeaderClassJRKhjEESt10shared_ptrIT_EDpOT0_+0x4e>
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
 800d908:	f107 0314 	add.w	r3, r7, #20
 800d90c:	4618      	mov	r0, r3
 800d90e:	f000 f9e6 	bl	800dcde <_ZNSaI11HeaderClassED1Ev>
 800d912:	f005 fceb 	bl	80132ec <__cxa_end_cleanup>
    }
 800d916:	68f8      	ldr	r0, [r7, #12]
 800d918:	371c      	adds	r7, #28
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd90      	pop	{r4, r7, pc}

0800d91e <_ZNSt10shared_ptrI11AbstractMsgEC1I11HeaderClassvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 800d91e:	b590      	push	{r4, r7, lr}
 800d920:	b083      	sub	sp, #12
 800d922:	af00      	add	r7, sp, #0
 800d924:	6078      	str	r0, [r7, #4]
 800d926:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 800d928:	687c      	ldr	r4, [r7, #4]
 800d92a:	6838      	ldr	r0, [r7, #0]
 800d92c:	f000 fa12 	bl	800dd54 <_ZSt4moveIRSt10shared_ptrI11HeaderClassEEONSt16remove_referenceIT_E4typeEOS5_>
 800d930:	4603      	mov	r3, r0
 800d932:	4619      	mov	r1, r3
 800d934:	4620      	mov	r0, r4
 800d936:	f000 fa18 	bl	800dd6a <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEC1I11HeaderClassvEEOS_IT_LS2_0EE>
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	4618      	mov	r0, r3
 800d93e:	370c      	adds	r7, #12
 800d940:	46bd      	mov	sp, r7
 800d942:	bd90      	pop	{r4, r7, pc}

0800d944 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE9push_backEOS3_>:
      push_back(const value_type& __x)
      { this->_M_insert(end(), __x); }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 800d944:	b590      	push	{r4, r7, lr}
 800d946:	b083      	sub	sp, #12
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	6039      	str	r1, [r7, #0]
      { this->_M_insert(end(), std::move(__x)); }
 800d94e:	6878      	ldr	r0, [r7, #4]
 800d950:	f000 fa29 	bl	800dda6 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE3endEv>
 800d954:	4604      	mov	r4, r0
 800d956:	6838      	ldr	r0, [r7, #0]
 800d958:	f000 fa35 	bl	800ddc6 <_ZSt4moveIRSt10shared_ptrI11AbstractMsgEEONSt16remove_referenceIT_E4typeEOS5_>
 800d95c:	4603      	mov	r3, r0
 800d95e:	461a      	mov	r2, r3
 800d960:	4621      	mov	r1, r4
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f000 fa3a 	bl	800dddc <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE9_M_insertIJS3_EEEvSt14_List_iteratorIS3_EDpOT_>
 800d968:	bf00      	nop
 800d96a:	370c      	adds	r7, #12
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd90      	pop	{r4, r7, pc}

0800d970 <_ZSt11make_sharedI12PayloadClassJRPKcjEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 800d970:	b590      	push	{r4, r7, lr}
 800d972:	b087      	sub	sp, #28
 800d974:	af00      	add	r7, sp, #0
 800d976:	60f8      	str	r0, [r7, #12]
 800d978:	60b9      	str	r1, [r7, #8]
 800d97a:	607a      	str	r2, [r7, #4]
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
 800d97c:	f107 0314 	add.w	r3, r7, #20
 800d980:	4618      	mov	r0, r3
 800d982:	f000 fa4a 	bl	800de1a <_ZNSaI12PayloadClassEC1Ev>
				       std::forward<_Args>(__args)...);
 800d986:	68b8      	ldr	r0, [r7, #8]
 800d988:	f000 fa5f 	bl	800de4a <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800d98c:	4604      	mov	r4, r0
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	f000 f9bc 	bl	800dd0c <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800d994:	4603      	mov	r3, r0
 800d996:	68f8      	ldr	r0, [r7, #12]
 800d998:	f107 0114 	add.w	r1, r7, #20
 800d99c:	4622      	mov	r2, r4
 800d99e:	f000 fa5f 	bl	800de60 <_ZSt15allocate_sharedI12PayloadClassSaIS0_EJRPKcjEESt10shared_ptrIT_ERKT0_DpOT1_>
 800d9a2:	bf00      	nop
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
 800d9a4:	f107 0314 	add.w	r3, r7, #20
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	f000 fa42 	bl	800de32 <_ZNSaI12PayloadClassED1Ev>
				       std::forward<_Args>(__args)...);
 800d9ae:	e006      	b.n	800d9be <_ZSt11make_sharedI12PayloadClassJRPKcjEESt10shared_ptrIT_EDpOT0_+0x4e>
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
 800d9b0:	f107 0314 	add.w	r3, r7, #20
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f000 fa3c 	bl	800de32 <_ZNSaI12PayloadClassED1Ev>
 800d9ba:	f005 fc97 	bl	80132ec <__cxa_end_cleanup>
    }
 800d9be:	68f8      	ldr	r0, [r7, #12]
 800d9c0:	371c      	adds	r7, #28
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd90      	pop	{r4, r7, pc}

0800d9c6 <_ZNSt10shared_ptrI11AbstractMsgEC1I12PayloadClassvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 800d9c6:	b590      	push	{r4, r7, lr}
 800d9c8:	b083      	sub	sp, #12
 800d9ca:	af00      	add	r7, sp, #0
 800d9cc:	6078      	str	r0, [r7, #4]
 800d9ce:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 800d9d0:	687c      	ldr	r4, [r7, #4]
 800d9d2:	6838      	ldr	r0, [r7, #0]
 800d9d4:	f000 fa5d 	bl	800de92 <_ZSt4moveIRSt10shared_ptrI12PayloadClassEEONSt16remove_referenceIT_E4typeEOS5_>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	4619      	mov	r1, r3
 800d9dc:	4620      	mov	r0, r4
 800d9de:	f000 fa63 	bl	800dea8 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEC1I12PayloadClassvEEOS_IT_LS2_0EE>
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	370c      	adds	r7, #12
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bd90      	pop	{r4, r7, pc}

0800d9ec <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b082      	sub	sp, #8
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
      { return _M_node_count(); }
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f000 fa75 	bl	800dee4 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE13_M_node_countEv>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	3708      	adds	r7, #8
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}

0800da04 <_ZN12PayloadClassC1IA4_fEEPT_h>:
		PayloadClass(T* struct_or_plain_type_data, uint8_t data_size): _data_size(data_size), _data(new uint8_t[data_size])
 800da04:	b580      	push	{r7, lr}
 800da06:	b086      	sub	sp, #24
 800da08:	af00      	add	r7, sp, #0
 800da0a:	60f8      	str	r0, [r7, #12]
 800da0c:	60b9      	str	r1, [r7, #8]
 800da0e:	4613      	mov	r3, r2
 800da10:	71fb      	strb	r3, [r7, #7]
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	4618      	mov	r0, r3
 800da16:	f7fe f8cf 	bl	800bbb8 <_ZN11AbstractMsgC1Ev>
 800da1a:	4a18      	ldr	r2, [pc, #96]	; (800da7c <_ZN12PayloadClassC1IA4_fEEPT_h+0x78>)
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	601a      	str	r2, [r3, #0]
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	79fa      	ldrb	r2, [r7, #7]
 800da24:	711a      	strb	r2, [r3, #4]
 800da26:	79fb      	ldrb	r3, [r7, #7]
 800da28:	4618      	mov	r0, r3
 800da2a:	f006 f837 	bl	8013a9c <_Znaj>
 800da2e:	4603      	mov	r3, r0
 800da30:	461a      	mov	r2, r3
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	609a      	str	r2, [r3, #8]
			uint8_t* data_ptr = (uint8_t*) struct_or_plain_type_data;
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	613b      	str	r3, [r7, #16]
			for( uint8_t i = 0; i < _data_size; i ++)
 800da3a:	2300      	movs	r3, #0
 800da3c:	75fb      	strb	r3, [r7, #23]
 800da3e:	e00b      	b.n	800da58 <_ZN12PayloadClassC1IA4_fEEPT_h+0x54>
				_data[i] = data_ptr[i];
 800da40:	7dfb      	ldrb	r3, [r7, #23]
 800da42:	693a      	ldr	r2, [r7, #16]
 800da44:	441a      	add	r2, r3
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	6899      	ldr	r1, [r3, #8]
 800da4a:	7dfb      	ldrb	r3, [r7, #23]
 800da4c:	440b      	add	r3, r1
 800da4e:	7812      	ldrb	r2, [r2, #0]
 800da50:	701a      	strb	r2, [r3, #0]
			for( uint8_t i = 0; i < _data_size; i ++)
 800da52:	7dfb      	ldrb	r3, [r7, #23]
 800da54:	3301      	adds	r3, #1
 800da56:	75fb      	strb	r3, [r7, #23]
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	791b      	ldrb	r3, [r3, #4]
 800da5c:	7dfa      	ldrb	r2, [r7, #23]
 800da5e:	429a      	cmp	r2, r3
 800da60:	d3ee      	bcc.n	800da40 <_ZN12PayloadClassC1IA4_fEEPT_h+0x3c>
		};
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	e005      	b.n	800da72 <_ZN12PayloadClassC1IA4_fEEPT_h+0x6e>
		PayloadClass(T* struct_or_plain_type_data, uint8_t data_size): _data_size(data_size), _data(new uint8_t[data_size])
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	4618      	mov	r0, r3
 800da6a:	f7fe f885 	bl	800bb78 <_ZN11AbstractMsgD1Ev>
 800da6e:	f005 fc3d 	bl	80132ec <__cxa_end_cleanup>
		};
 800da72:	4618      	mov	r0, r3
 800da74:	3718      	adds	r7, #24
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}
 800da7a:	bf00      	nop
 800da7c:	08018148 	.word	0x08018148

0800da80 <_ZN12PayloadClassC1IcEEPT_h>:
		PayloadClass(T* struct_or_plain_type_data, uint8_t data_size): _data_size(data_size), _data(new uint8_t[data_size])
 800da80:	b580      	push	{r7, lr}
 800da82:	b086      	sub	sp, #24
 800da84:	af00      	add	r7, sp, #0
 800da86:	60f8      	str	r0, [r7, #12]
 800da88:	60b9      	str	r1, [r7, #8]
 800da8a:	4613      	mov	r3, r2
 800da8c:	71fb      	strb	r3, [r7, #7]
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	4618      	mov	r0, r3
 800da92:	f7fe f891 	bl	800bbb8 <_ZN11AbstractMsgC1Ev>
 800da96:	4a18      	ldr	r2, [pc, #96]	; (800daf8 <_ZN12PayloadClassC1IcEEPT_h+0x78>)
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	601a      	str	r2, [r3, #0]
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	79fa      	ldrb	r2, [r7, #7]
 800daa0:	711a      	strb	r2, [r3, #4]
 800daa2:	79fb      	ldrb	r3, [r7, #7]
 800daa4:	4618      	mov	r0, r3
 800daa6:	f005 fff9 	bl	8013a9c <_Znaj>
 800daaa:	4603      	mov	r3, r0
 800daac:	461a      	mov	r2, r3
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	609a      	str	r2, [r3, #8]
			uint8_t* data_ptr = (uint8_t*) struct_or_plain_type_data;
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	613b      	str	r3, [r7, #16]
			for( uint8_t i = 0; i < _data_size; i ++)
 800dab6:	2300      	movs	r3, #0
 800dab8:	75fb      	strb	r3, [r7, #23]
 800daba:	e00b      	b.n	800dad4 <_ZN12PayloadClassC1IcEEPT_h+0x54>
				_data[i] = data_ptr[i];
 800dabc:	7dfb      	ldrb	r3, [r7, #23]
 800dabe:	693a      	ldr	r2, [r7, #16]
 800dac0:	441a      	add	r2, r3
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	6899      	ldr	r1, [r3, #8]
 800dac6:	7dfb      	ldrb	r3, [r7, #23]
 800dac8:	440b      	add	r3, r1
 800daca:	7812      	ldrb	r2, [r2, #0]
 800dacc:	701a      	strb	r2, [r3, #0]
			for( uint8_t i = 0; i < _data_size; i ++)
 800dace:	7dfb      	ldrb	r3, [r7, #23]
 800dad0:	3301      	adds	r3, #1
 800dad2:	75fb      	strb	r3, [r7, #23]
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	791b      	ldrb	r3, [r3, #4]
 800dad8:	7dfa      	ldrb	r2, [r7, #23]
 800dada:	429a      	cmp	r2, r3
 800dadc:	d3ee      	bcc.n	800dabc <_ZN12PayloadClassC1IcEEPT_h+0x3c>
		};
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	e005      	b.n	800daee <_ZN12PayloadClassC1IcEEPT_h+0x6e>
		PayloadClass(T* struct_or_plain_type_data, uint8_t data_size): _data_size(data_size), _data(new uint8_t[data_size])
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	4618      	mov	r0, r3
 800dae6:	f7fe f847 	bl	800bb78 <_ZN11AbstractMsgD1Ev>
 800daea:	f005 fbff 	bl	80132ec <__cxa_end_cleanup>
		};
 800daee:	4618      	mov	r0, r3
 800daf0:	3718      	adds	r7, #24
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}
 800daf6:	bf00      	nop
 800daf8:	08018148 	.word	0x08018148

0800dafc <_ZNKSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
	reset(_Yp* __p, _Deleter __d, _Alloc __a)
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
 800dafc:	b480      	push	{r7}
 800dafe:	b083      	sub	sp, #12
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	4618      	mov	r0, r3
 800db0a:	370c      	adds	r7, #12
 800db0c:	46bd      	mov	sp, r7
 800db0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db12:	4770      	bx	lr

0800db14 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5clearEv>:
       *  the elements, and that if the elements themselves are
       *  pointers, the pointed-to memory is not touched in any way.
       *  Managing the pointer is the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 800db14:	b580      	push	{r7, lr}
 800db16:	b082      	sub	sp, #8
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
      {
	_Base::_M_clear();
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	4618      	mov	r0, r3
 800db20:	f7fe fdc6 	bl	800c6b0 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE8_M_clearEv>
	_Base::_M_init();
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	4618      	mov	r0, r3
 800db28:	f000 f9e9 	bl	800defe <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE7_M_initEv>
      }
 800db2c:	bf00      	nop
 800db2e:	3708      	adds	r7, #8
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}

0800db34 <_ZNSt10shared_ptrI11AbstractMsgEC1EDn>:
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }
 800db34:	b580      	push	{r7, lr}
 800db36:	b082      	sub	sp, #8
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	6039      	str	r1, [r7, #0]
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f7fe fd35 	bl	800c5ae <_ZNSt10shared_ptrI11AbstractMsgEC1Ev>
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	4618      	mov	r0, r3
 800db48:	3708      	adds	r7, #8
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}

0800db4e <_ZNSt10shared_ptrI11AbstractMsgEaSEOS1_>:
      operator=(shared_ptr&& __r) noexcept
 800db4e:	b590      	push	{r4, r7, lr}
 800db50:	b083      	sub	sp, #12
 800db52:	af00      	add	r7, sp, #0
 800db54:	6078      	str	r0, [r7, #4]
 800db56:	6039      	str	r1, [r7, #0]
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 800db58:	687c      	ldr	r4, [r7, #4]
 800db5a:	6838      	ldr	r0, [r7, #0]
 800db5c:	f000 f933 	bl	800ddc6 <_ZSt4moveIRSt10shared_ptrI11AbstractMsgEEONSt16remove_referenceIT_E4typeEOS5_>
 800db60:	4603      	mov	r3, r0
 800db62:	4619      	mov	r1, r3
 800db64:	4620      	mov	r0, r4
 800db66:	f000 f9d6 	bl	800df16 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>
	return *this;
 800db6a:	687b      	ldr	r3, [r7, #4]
      }
 800db6c:	4618      	mov	r0, r3
 800db6e:	370c      	adds	r7, #12
 800db70:	46bd      	mov	sp, r7
 800db72:	bd90      	pop	{r4, r7, pc}

0800db74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
      operator=(const __shared_count& __r) noexcept
 800db74:	b580      	push	{r7, lr}
 800db76:	b084      	sub	sp, #16
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
 800db7c:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	60fb      	str	r3, [r7, #12]
	if (__tmp != _M_pi)
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	68fa      	ldr	r2, [r7, #12]
 800db8a:	429a      	cmp	r2, r3
 800db8c:	d011      	beq.n	800dbb2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x3e>
	    if (__tmp != nullptr)
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d002      	beq.n	800db9a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	      __tmp->_M_add_ref_copy();
 800db94:	68f8      	ldr	r0, [r7, #12]
 800db96:	f7fe ffce 	bl	800cb36 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
	    if (_M_pi != nullptr)
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d004      	beq.n	800dbac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x38>
	      _M_pi->_M_release();
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	4618      	mov	r0, r3
 800dba8:	f7fd ffb6 	bl	800bb18 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	68fa      	ldr	r2, [r7, #12]
 800dbb0:	601a      	str	r2, [r3, #0]
	return *this;
 800dbb2:	687b      	ldr	r3, [r7, #4]
      }
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	3710      	adds	r7, #16
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}

0800dbbc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 800dbbc:	b480      	push	{r7}
 800dbbe:	b083      	sub	sp, #12
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
      { }
 800dbc4:	4a04      	ldr	r2, [pc, #16]	; (800dbd8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	601a      	str	r2, [r3, #0]
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	4618      	mov	r0, r3
 800dbce:	370c      	adds	r7, #12
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd6:	4770      	bx	lr
 800dbd8:	08018164 	.word	0x08018164

0800dbdc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b082      	sub	sp, #8
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
      { }
 800dbe4:	6878      	ldr	r0, [r7, #4]
 800dbe6:	f7ff ffe9 	bl	800dbbc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800dbea:	210c      	movs	r1, #12
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f005 fae5 	bl	80131bc <_ZdlPvj>
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	3708      	adds	r7, #8
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}

0800dbfc <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EE5resetIPhvEEvT_>:
      reset(_Up __p) noexcept
 800dbfc:	b590      	push	{r4, r7, lr}
 800dbfe:	b083      	sub	sp, #12
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	6039      	str	r1, [r7, #0]
      { _M_t.reset(std::move(__p)); }
 800dc06:	687c      	ldr	r4, [r7, #4]
 800dc08:	463b      	mov	r3, r7
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f000 f9a2 	bl	800df54 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 800dc10:	4603      	mov	r3, r0
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	4619      	mov	r1, r3
 800dc16:	4620      	mov	r0, r4
 800dc18:	f000 f9a7 	bl	800df6a <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE5resetEPh>
 800dc1c:	bf00      	nop
 800dc1e:	370c      	adds	r7, #12
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd90      	pop	{r4, r7, pc}

0800dc24 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b084      	sub	sp, #16
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_node._M_next); }
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681a      	ldr	r2, [r3, #0]
 800dc30:	f107 030c 	add.w	r3, r7, #12
 800dc34:	4611      	mov	r1, r2
 800dc36:	4618      	mov	r0, r3
 800dc38:	f000 f9b7 	bl	800dfaa <_ZNSt14_List_iteratorISt10shared_ptrI11AbstractMsgEEC1EPNSt8__detail15_List_node_baseE>
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3710      	adds	r7, #16
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}

0800dc46 <_ZNKSt14_List_iteratorISt10shared_ptrI11AbstractMsgEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800dc46:	b580      	push	{r7, lr}
 800dc48:	b082      	sub	sp, #8
 800dc4a:	af00      	add	r7, sp, #0
 800dc4c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	4618      	mov	r0, r3
 800dc54:	f7fe fda2 	bl	800c79c <_ZNSt10_List_nodeISt10shared_ptrI11AbstractMsgEE9_M_valptrEv>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	3708      	adds	r7, #8
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}

0800dc62 <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 800dc62:	b580      	push	{r7, lr}
 800dc64:	b082      	sub	sp, #8
 800dc66:	af00      	add	r7, sp, #0
 800dc68:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f7ff ff46 	bl	800dafc <_ZNKSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800dc70:	4603      	mov	r3, r0
 800dc72:	4618      	mov	r0, r3
 800dc74:	3708      	adds	r7, #8
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}

0800dc7a <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE8_M_eraseESt14_List_iteratorIS3_E>:
       }
#endif

      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
 800dc7a:	b590      	push	{r4, r7, lr}
 800dc7c:	b085      	sub	sp, #20
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	6078      	str	r0, [r7, #4]
 800dc82:	6039      	str	r1, [r7, #0]
      {
	this->_M_dec_size(1);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2101      	movs	r1, #1
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f000 f99d 	bl	800dfc8 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_dec_sizeEj>
	__position._M_node->_M_unhook();
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	4618      	mov	r0, r3
 800dc92:	f005 ffa4 	bl	8013bde <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	_Node* __n = static_cast<_Node*>(__position._M_node);
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	60fb      	str	r3, [r7, #12]
#if __cplusplus >= 201103L
	_Node_alloc_traits::destroy(_M_get_Node_allocator(), __n->_M_valptr());
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f7fe fd8b 	bl	800c7b8 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE21_M_get_Node_allocatorEv>
 800dca2:	4604      	mov	r4, r0
 800dca4:	68f8      	ldr	r0, [r7, #12]
 800dca6:	f7fe fd79 	bl	800c79c <_ZNSt10_List_nodeISt10shared_ptrI11AbstractMsgEE9_M_valptrEv>
 800dcaa:	4603      	mov	r3, r0
 800dcac:	4619      	mov	r1, r3
 800dcae:	4620      	mov	r0, r4
 800dcb0:	f7fe fd8d 	bl	800c7ce <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE7destroyIS3_EEvRS5_PT_>
#else
	_Tp_alloc_type(_M_get_Node_allocator()).destroy(__n->_M_valptr());
#endif

	_M_put_node(__n);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	68f9      	ldr	r1, [r7, #12]
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f7fe fd95 	bl	800c7e8 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_put_nodeEPSt10_List_nodeIS3_E>
      }
 800dcbe:	bf00      	nop
 800dcc0:	3714      	adds	r7, #20
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd90      	pop	{r4, r7, pc}

0800dcc6 <_ZNSaI11HeaderClassEC1Ev>:
 800dcc6:	b580      	push	{r7, lr}
 800dcc8:	b082      	sub	sp, #8
 800dcca:	af00      	add	r7, sp, #0
 800dccc:	6078      	str	r0, [r7, #4]
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	f000 f98b 	bl	800dfea <_ZN9__gnu_cxx13new_allocatorI11HeaderClassEC1Ev>
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	3708      	adds	r7, #8
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}

0800dcde <_ZNSaI11HeaderClassED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800dcde:	b580      	push	{r7, lr}
 800dce0:	b082      	sub	sp, #8
 800dce2:	af00      	add	r7, sp, #0
 800dce4:	6078      	str	r0, [r7, #4]
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f000 f98a 	bl	800e000 <_ZN9__gnu_cxx13new_allocatorI11HeaderClassED1Ev>
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3708      	adds	r7, #8
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}

0800dcf6 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800dcf6:	b480      	push	{r7}
 800dcf8:	b083      	sub	sp, #12
 800dcfa:	af00      	add	r7, sp, #0
 800dcfc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	4618      	mov	r0, r3
 800dd02:	370c      	adds	r7, #12
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr

0800dd0c <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800dd0c:	b480      	push	{r7}
 800dd0e:	b083      	sub	sp, #12
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	4618      	mov	r0, r3
 800dd18:	370c      	adds	r7, #12
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd20:	4770      	bx	lr

0800dd22 <_ZSt15allocate_sharedI11HeaderClassSaIS0_EJRKhjEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 800dd22:	b5b0      	push	{r4, r5, r7, lr}
 800dd24:	b084      	sub	sp, #16
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	60f8      	str	r0, [r7, #12]
 800dd2a:	60b9      	str	r1, [r7, #8]
 800dd2c:	607a      	str	r2, [r7, #4]
 800dd2e:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 800dd30:	68bc      	ldr	r4, [r7, #8]
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f7ff ffdf 	bl	800dcf6 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 800dd38:	4605      	mov	r5, r0
 800dd3a:	6838      	ldr	r0, [r7, #0]
 800dd3c:	f7ff ffe6 	bl	800dd0c <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800dd40:	4603      	mov	r3, r0
 800dd42:	462a      	mov	r2, r5
 800dd44:	4621      	mov	r1, r4
 800dd46:	68f8      	ldr	r0, [r7, #12]
 800dd48:	f000 f965 	bl	800e016 <_ZNSt10shared_ptrI11HeaderClassEC1ISaIS0_EJRKhjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 800dd4c:	68f8      	ldr	r0, [r7, #12]
 800dd4e:	3710      	adds	r7, #16
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bdb0      	pop	{r4, r5, r7, pc}

0800dd54 <_ZSt4moveIRSt10shared_ptrI11HeaderClassEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800dd54:	b480      	push	{r7}
 800dd56:	b083      	sub	sp, #12
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	4618      	mov	r0, r3
 800dd60:	370c      	adds	r7, #12
 800dd62:	46bd      	mov	sp, r7
 800dd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd68:	4770      	bx	lr

0800dd6a <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEC1I11HeaderClassvEEOS_IT_LS2_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 800dd6a:	b580      	push	{r7, lr}
 800dd6c:	b082      	sub	sp, #8
 800dd6e:	af00      	add	r7, sp, #0
 800dd70:	6078      	str	r0, [r7, #4]
 800dd72:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	681a      	ldr	r2, [r3, #0]
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	601a      	str	r2, [r3, #0]
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	3304      	adds	r3, #4
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7fe fd40 	bl	800c806 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	1d1a      	adds	r2, r3, #4
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	3304      	adds	r3, #4
 800dd8e:	4619      	mov	r1, r3
 800dd90:	4610      	mov	r0, r2
 800dd92:	f000 f95a 	bl	800e04a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = nullptr;
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	2200      	movs	r2, #0
 800dd9a:	601a      	str	r2, [r3, #0]
	}
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3708      	adds	r7, #8
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}

0800dda6 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800dda6:	b580      	push	{r7, lr}
 800dda8:	b084      	sub	sp, #16
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_node); }
 800ddae:	687a      	ldr	r2, [r7, #4]
 800ddb0:	f107 030c 	add.w	r3, r7, #12
 800ddb4:	4611      	mov	r1, r2
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f000 f8f7 	bl	800dfaa <_ZNSt14_List_iteratorISt10shared_ptrI11AbstractMsgEEC1EPNSt8__detail15_List_node_baseE>
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	3710      	adds	r7, #16
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}

0800ddc6 <_ZSt4moveIRSt10shared_ptrI11AbstractMsgEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800ddc6:	b480      	push	{r7}
 800ddc8:	b083      	sub	sp, #12
 800ddca:	af00      	add	r7, sp, #0
 800ddcc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	370c      	adds	r7, #12
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddda:	4770      	bx	lr

0800dddc <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE9_M_insertIJS3_EEEvSt14_List_iteratorIS3_EDpOT_>:
       _M_insert(iterator __position, _Args&&... __args)
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b086      	sub	sp, #24
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	60f8      	str	r0, [r7, #12]
 800dde4:	60b9      	str	r1, [r7, #8]
 800dde6:	607a      	str	r2, [r7, #4]
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 800dde8:	6878      	ldr	r0, [r7, #4]
 800ddea:	f000 f943 	bl	800e074 <_ZSt7forwardISt10shared_ptrI11AbstractMsgEEOT_RNSt16remove_referenceIS3_E4typeE>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	4619      	mov	r1, r3
 800ddf2:	68f8      	ldr	r0, [r7, #12]
 800ddf4:	f000 f949 	bl	800e08a <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE14_M_create_nodeIJS3_EEEPSt10_List_nodeIS3_EDpOT_>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	617b      	str	r3, [r7, #20]
	 __tmp->_M_hook(__position._M_node);
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	68ba      	ldr	r2, [r7, #8]
 800de00:	4611      	mov	r1, r2
 800de02:	4618      	mov	r0, r3
 800de04:	f005 fee4 	bl	8013bd0 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
	 this->_M_inc_size(1);
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	2101      	movs	r1, #1
 800de0c:	4618      	mov	r0, r3
 800de0e:	f000 f971 	bl	800e0f4 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_inc_sizeEj>
       }
 800de12:	bf00      	nop
 800de14:	3718      	adds	r7, #24
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}

0800de1a <_ZNSaI12PayloadClassEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800de1a:	b580      	push	{r7, lr}
 800de1c:	b082      	sub	sp, #8
 800de1e:	af00      	add	r7, sp, #0
 800de20:	6078      	str	r0, [r7, #4]
 800de22:	6878      	ldr	r0, [r7, #4]
 800de24:	f000 f977 	bl	800e116 <_ZN9__gnu_cxx13new_allocatorI12PayloadClassEC1Ev>
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	4618      	mov	r0, r3
 800de2c:	3708      	adds	r7, #8
 800de2e:	46bd      	mov	sp, r7
 800de30:	bd80      	pop	{r7, pc}

0800de32 <_ZNSaI12PayloadClassED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800de32:	b580      	push	{r7, lr}
 800de34:	b082      	sub	sp, #8
 800de36:	af00      	add	r7, sp, #0
 800de38:	6078      	str	r0, [r7, #4]
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f000 f976 	bl	800e12c <_ZN9__gnu_cxx13new_allocatorI12PayloadClassED1Ev>
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	4618      	mov	r0, r3
 800de44:	3708      	adds	r7, #8
 800de46:	46bd      	mov	sp, r7
 800de48:	bd80      	pop	{r7, pc}

0800de4a <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800de4a:	b480      	push	{r7}
 800de4c:	b083      	sub	sp, #12
 800de4e:	af00      	add	r7, sp, #0
 800de50:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	4618      	mov	r0, r3
 800de56:	370c      	adds	r7, #12
 800de58:	46bd      	mov	sp, r7
 800de5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5e:	4770      	bx	lr

0800de60 <_ZSt15allocate_sharedI12PayloadClassSaIS0_EJRPKcjEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 800de60:	b5b0      	push	{r4, r5, r7, lr}
 800de62:	b084      	sub	sp, #16
 800de64:	af00      	add	r7, sp, #0
 800de66:	60f8      	str	r0, [r7, #12]
 800de68:	60b9      	str	r1, [r7, #8]
 800de6a:	607a      	str	r2, [r7, #4]
 800de6c:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 800de6e:	68bc      	ldr	r4, [r7, #8]
 800de70:	6878      	ldr	r0, [r7, #4]
 800de72:	f7ff ffea 	bl	800de4a <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800de76:	4605      	mov	r5, r0
 800de78:	6838      	ldr	r0, [r7, #0]
 800de7a:	f7ff ff47 	bl	800dd0c <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800de7e:	4603      	mov	r3, r0
 800de80:	462a      	mov	r2, r5
 800de82:	4621      	mov	r1, r4
 800de84:	68f8      	ldr	r0, [r7, #12]
 800de86:	f000 f95c 	bl	800e142 <_ZNSt10shared_ptrI12PayloadClassEC1ISaIS0_EJRPKcjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 800de8a:	68f8      	ldr	r0, [r7, #12]
 800de8c:	3710      	adds	r7, #16
 800de8e:	46bd      	mov	sp, r7
 800de90:	bdb0      	pop	{r4, r5, r7, pc}

0800de92 <_ZSt4moveIRSt10shared_ptrI12PayloadClassEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800de92:	b480      	push	{r7}
 800de94:	b083      	sub	sp, #12
 800de96:	af00      	add	r7, sp, #0
 800de98:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	4618      	mov	r0, r3
 800de9e:	370c      	adds	r7, #12
 800dea0:	46bd      	mov	sp, r7
 800dea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea6:	4770      	bx	lr

0800dea8 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEC1I12PayloadClassvEEOS_IT_LS2_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b082      	sub	sp, #8
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
 800deb0:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	681a      	ldr	r2, [r3, #0]
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	601a      	str	r2, [r3, #0]
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	3304      	adds	r3, #4
 800debe:	4618      	mov	r0, r3
 800dec0:	f7fe fca1 	bl	800c806 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	1d1a      	adds	r2, r3, #4
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	3304      	adds	r3, #4
 800decc:	4619      	mov	r1, r3
 800dece:	4610      	mov	r0, r2
 800ded0:	f000 f8bb 	bl	800e04a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = nullptr;
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	2200      	movs	r2, #0
 800ded8:	601a      	str	r2, [r3, #0]
	}
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	4618      	mov	r0, r3
 800dede:	3708      	adds	r7, #8
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}

0800dee4 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE13_M_node_countEv>:
      _M_node_count() const
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b082      	sub	sp, #8
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
      { return this->_M_get_size(); }
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	4618      	mov	r0, r3
 800def0:	f000 f941 	bl	800e176 <_ZNKSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_get_sizeEv>
 800def4:	4603      	mov	r3, r0
 800def6:	4618      	mov	r0, r3
 800def8:	3708      	adds	r7, #8
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}

0800defe <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE7_M_initEv>:
      _M_init() _GLIBCXX_NOEXCEPT
 800defe:	b580      	push	{r7, lr}
 800df00:	b082      	sub	sp, #8
 800df02:	af00      	add	r7, sp, #0
 800df04:	6078      	str	r0, [r7, #4]
      { this->_M_impl._M_node._M_init(); }
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	4618      	mov	r0, r3
 800df0a:	f7fd fdf1 	bl	800baf0 <_ZNSt8__detail17_List_node_header7_M_initEv>
 800df0e:	bf00      	nop
 800df10:	3708      	adds	r7, #8
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}

0800df16 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>:
      operator=(__shared_ptr&& __r) noexcept
 800df16:	b580      	push	{r7, lr}
 800df18:	b084      	sub	sp, #16
 800df1a:	af00      	add	r7, sp, #0
 800df1c:	6078      	str	r0, [r7, #4]
 800df1e:	6039      	str	r1, [r7, #0]
	__shared_ptr(std::move(__r)).swap(*this);
 800df20:	6838      	ldr	r0, [r7, #0]
 800df22:	f000 f934 	bl	800e18e <_ZSt4moveIRSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>
 800df26:	4602      	mov	r2, r0
 800df28:	f107 0308 	add.w	r3, r7, #8
 800df2c:	4611      	mov	r1, r2
 800df2e:	4618      	mov	r0, r3
 800df30:	f000 f938 	bl	800e1a4 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 800df34:	f107 0308 	add.w	r3, r7, #8
 800df38:	6879      	ldr	r1, [r7, #4]
 800df3a:	4618      	mov	r0, r3
 800df3c:	f000 f950 	bl	800e1e0 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>
 800df40:	f107 0308 	add.w	r3, r7, #8
 800df44:	4618      	mov	r0, r3
 800df46:	f7fd ff42 	bl	800bdce <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 800df4a:	687b      	ldr	r3, [r7, #4]
      }
 800df4c:	4618      	mov	r0, r3
 800df4e:	3710      	adds	r7, #16
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}

0800df54 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800df54:	b480      	push	{r7}
 800df56:	b083      	sub	sp, #12
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	4618      	mov	r0, r3
 800df60:	370c      	adds	r7, #12
 800df62:	46bd      	mov	sp, r7
 800df64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df68:	4770      	bx	lr

0800df6a <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE5resetEPh>:
      void reset(pointer __p) noexcept
 800df6a:	b580      	push	{r7, lr}
 800df6c:	b084      	sub	sp, #16
 800df6e:	af00      	add	r7, sp, #0
 800df70:	6078      	str	r0, [r7, #4]
 800df72:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	f7fe fb4d 	bl	800c614 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 800df7a:	4603      	mov	r3, r0
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f7fe fb47 	bl	800c614 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 800df86:	4602      	mov	r2, r0
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	6013      	str	r3, [r2, #0]
	if (__old_p)
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d007      	beq.n	800dfa2 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE5resetEPh+0x38>
	  _M_deleter()(__old_p);
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f7fe fbdd 	bl	800c752 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE10_M_deleterEv>
 800df98:	4603      	mov	r3, r0
 800df9a:	68f9      	ldr	r1, [r7, #12]
 800df9c:	4618      	mov	r0, r3
 800df9e:	f7fe fb53 	bl	800c648 <_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS0_E5valueEvE4typeEPS5_>
      }
 800dfa2:	bf00      	nop
 800dfa4:	3710      	adds	r7, #16
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}

0800dfaa <_ZNSt14_List_iteratorISt10shared_ptrI11AbstractMsgEEC1EPNSt8__detail15_List_node_baseE>:
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 800dfaa:	b480      	push	{r7}
 800dfac:	b083      	sub	sp, #12
 800dfae:	af00      	add	r7, sp, #0
 800dfb0:	6078      	str	r0, [r7, #4]
 800dfb2:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	683a      	ldr	r2, [r7, #0]
 800dfb8:	601a      	str	r2, [r3, #0]
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	370c      	adds	r7, #12
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc6:	4770      	bx	lr

0800dfc8 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_dec_sizeEj>:
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 800dfc8:	b480      	push	{r7}
 800dfca:	b083      	sub	sp, #12
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	6039      	str	r1, [r7, #0]
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	689a      	ldr	r2, [r3, #8]
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	1ad2      	subs	r2, r2, r3
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	609a      	str	r2, [r3, #8]
 800dfde:	bf00      	nop
 800dfe0:	370c      	adds	r7, #12
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe8:	4770      	bx	lr

0800dfea <_ZN9__gnu_cxx13new_allocatorI11HeaderClassEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800dfea:	b480      	push	{r7}
 800dfec:	b083      	sub	sp, #12
 800dfee:	af00      	add	r7, sp, #0
 800dff0:	6078      	str	r0, [r7, #4]
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	4618      	mov	r0, r3
 800dff6:	370c      	adds	r7, #12
 800dff8:	46bd      	mov	sp, r7
 800dffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffe:	4770      	bx	lr

0800e000 <_ZN9__gnu_cxx13new_allocatorI11HeaderClassED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800e000:	b480      	push	{r7}
 800e002:	b083      	sub	sp, #12
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	4618      	mov	r0, r3
 800e00c:	370c      	adds	r7, #12
 800e00e:	46bd      	mov	sp, r7
 800e010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e014:	4770      	bx	lr

0800e016 <_ZNSt10shared_ptrI11HeaderClassEC1ISaIS0_EJRKhjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 800e016:	b5b0      	push	{r4, r5, r7, lr}
 800e018:	b084      	sub	sp, #16
 800e01a:	af00      	add	r7, sp, #0
 800e01c:	60f8      	str	r0, [r7, #12]
 800e01e:	60b9      	str	r1, [r7, #8]
 800e020:	607a      	str	r2, [r7, #4]
 800e022:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 800e024:	68fc      	ldr	r4, [r7, #12]
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f7ff fe65 	bl	800dcf6 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 800e02c:	4605      	mov	r5, r0
 800e02e:	6838      	ldr	r0, [r7, #0]
 800e030:	f7ff fe6c 	bl	800dd0c <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800e034:	4603      	mov	r3, r0
 800e036:	462a      	mov	r2, r5
 800e038:	68b9      	ldr	r1, [r7, #8]
 800e03a:	4620      	mov	r0, r4
 800e03c:	f000 f8e7 	bl	800e20e <_ZNSt12__shared_ptrI11HeaderClassLN9__gnu_cxx12_Lock_policyE0EEC1ISaIS0_EJRKhjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	4618      	mov	r0, r3
 800e044:	3710      	adds	r7, #16
 800e046:	46bd      	mov	sp, r7
 800e048:	bdb0      	pop	{r4, r5, r7, pc}

0800e04a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 800e04a:	b480      	push	{r7}
 800e04c:	b085      	sub	sp, #20
 800e04e:	af00      	add	r7, sp, #0
 800e050:	6078      	str	r0, [r7, #4]
 800e052:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681a      	ldr	r2, [r3, #0]
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	68fa      	ldr	r2, [r7, #12]
 800e066:	601a      	str	r2, [r3, #0]
      }
 800e068:	bf00      	nop
 800e06a:	3714      	adds	r7, #20
 800e06c:	46bd      	mov	sp, r7
 800e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e072:	4770      	bx	lr

0800e074 <_ZSt7forwardISt10shared_ptrI11AbstractMsgEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e074:	b480      	push	{r7}
 800e076:	b083      	sub	sp, #12
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	4618      	mov	r0, r3
 800e080:	370c      	adds	r7, #12
 800e082:	46bd      	mov	sp, r7
 800e084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e088:	4770      	bx	lr

0800e08a <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE14_M_create_nodeIJS3_EEEPSt10_List_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800e08a:	b590      	push	{r4, r7, lr}
 800e08c:	b087      	sub	sp, #28
 800e08e:	af00      	add	r7, sp, #0
 800e090:	6078      	str	r0, [r7, #4]
 800e092:	6039      	str	r1, [r7, #0]
	  auto __p = this->_M_get_node();
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	4618      	mov	r0, r3
 800e098:	f000 f8e0 	bl	800e25c <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_get_nodeEv>
 800e09c:	4603      	mov	r3, r0
 800e09e:	617b      	str	r3, [r7, #20]
	  auto& __alloc = _M_get_Node_allocator();
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7fe fb88 	bl	800c7b8 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE21_M_get_Node_allocatorEv>
 800e0a8:	6138      	str	r0, [r7, #16]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 800e0aa:	f107 0308 	add.w	r3, r7, #8
 800e0ae:	697a      	ldr	r2, [r7, #20]
 800e0b0:	6939      	ldr	r1, [r7, #16]
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f000 f8e0 	bl	800e278 <_ZNSt15__allocated_ptrISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEEC1ERS5_PS4_>
	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
 800e0b8:	6978      	ldr	r0, [r7, #20]
 800e0ba:	f7fe fb6f 	bl	800c79c <_ZNSt10_List_nodeISt10shared_ptrI11AbstractMsgEE9_M_valptrEv>
 800e0be:	4604      	mov	r4, r0
 800e0c0:	6838      	ldr	r0, [r7, #0]
 800e0c2:	f7ff ffd7 	bl	800e074 <_ZSt7forwardISt10shared_ptrI11AbstractMsgEEOT_RNSt16remove_referenceIS3_E4typeE>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	461a      	mov	r2, r3
 800e0ca:	4621      	mov	r1, r4
 800e0cc:	6938      	ldr	r0, [r7, #16]
 800e0ce:	f000 f8fc 	bl	800e2ca <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE9constructIS3_JS3_EEEvRS5_PT_DpOT0_>
	  __guard = nullptr;
 800e0d2:	f107 0308 	add.w	r3, r7, #8
 800e0d6:	2100      	movs	r1, #0
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f000 f909 	bl	800e2f0 <_ZNSt15__allocated_ptrISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEEaSEDn>
	  return __p;
 800e0de:	697c      	ldr	r4, [r7, #20]
	}
 800e0e0:	f107 0308 	add.w	r3, r7, #8
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	f000 f8db 	bl	800e2a0 <_ZNSt15__allocated_ptrISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEED1Ev>
	  return __p;
 800e0ea:	4623      	mov	r3, r4
	}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	371c      	adds	r7, #28
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd90      	pop	{r4, r7, pc}

0800e0f4 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_inc_sizeEj>:
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 800e0f4:	b480      	push	{r7}
 800e0f6:	b083      	sub	sp, #12
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
 800e0fc:	6039      	str	r1, [r7, #0]
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	689a      	ldr	r2, [r3, #8]
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	441a      	add	r2, r3
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	609a      	str	r2, [r3, #8]
 800e10a:	bf00      	nop
 800e10c:	370c      	adds	r7, #12
 800e10e:	46bd      	mov	sp, r7
 800e110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e114:	4770      	bx	lr

0800e116 <_ZN9__gnu_cxx13new_allocatorI12PayloadClassEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800e116:	b480      	push	{r7}
 800e118:	b083      	sub	sp, #12
 800e11a:	af00      	add	r7, sp, #0
 800e11c:	6078      	str	r0, [r7, #4]
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	4618      	mov	r0, r3
 800e122:	370c      	adds	r7, #12
 800e124:	46bd      	mov	sp, r7
 800e126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12a:	4770      	bx	lr

0800e12c <_ZN9__gnu_cxx13new_allocatorI12PayloadClassED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800e12c:	b480      	push	{r7}
 800e12e:	b083      	sub	sp, #12
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	4618      	mov	r0, r3
 800e138:	370c      	adds	r7, #12
 800e13a:	46bd      	mov	sp, r7
 800e13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e140:	4770      	bx	lr

0800e142 <_ZNSt10shared_ptrI12PayloadClassEC1ISaIS0_EJRPKcjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 800e142:	b5b0      	push	{r4, r5, r7, lr}
 800e144:	b084      	sub	sp, #16
 800e146:	af00      	add	r7, sp, #0
 800e148:	60f8      	str	r0, [r7, #12]
 800e14a:	60b9      	str	r1, [r7, #8]
 800e14c:	607a      	str	r2, [r7, #4]
 800e14e:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 800e150:	68fc      	ldr	r4, [r7, #12]
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	f7ff fe79 	bl	800de4a <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800e158:	4605      	mov	r5, r0
 800e15a:	6838      	ldr	r0, [r7, #0]
 800e15c:	f7ff fdd6 	bl	800dd0c <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800e160:	4603      	mov	r3, r0
 800e162:	462a      	mov	r2, r5
 800e164:	68b9      	ldr	r1, [r7, #8]
 800e166:	4620      	mov	r0, r4
 800e168:	f000 f8d1 	bl	800e30e <_ZNSt12__shared_ptrI12PayloadClassLN9__gnu_cxx12_Lock_policyE0EEC1ISaIS0_EJRPKcjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	4618      	mov	r0, r3
 800e170:	3710      	adds	r7, #16
 800e172:	46bd      	mov	sp, r7
 800e174:	bdb0      	pop	{r4, r5, r7, pc}

0800e176 <_ZNKSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_get_sizeEv>:
      size_t _M_get_size() const { return _M_impl._M_node._M_size; }
 800e176:	b480      	push	{r7}
 800e178:	b083      	sub	sp, #12
 800e17a:	af00      	add	r7, sp, #0
 800e17c:	6078      	str	r0, [r7, #4]
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	689b      	ldr	r3, [r3, #8]
 800e182:	4618      	mov	r0, r3
 800e184:	370c      	adds	r7, #12
 800e186:	46bd      	mov	sp, r7
 800e188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18c:	4770      	bx	lr

0800e18e <_ZSt4moveIRSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800e18e:	b480      	push	{r7}
 800e190:	b083      	sub	sp, #12
 800e192:	af00      	add	r7, sp, #0
 800e194:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	4618      	mov	r0, r3
 800e19a:	370c      	adds	r7, #12
 800e19c:	46bd      	mov	sp, r7
 800e19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a2:	4770      	bx	lr

0800e1a4 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b082      	sub	sp, #8
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	681a      	ldr	r2, [r3, #0]
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	601a      	str	r2, [r3, #0]
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	3304      	adds	r3, #4
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f7fe fb23 	bl	800c806 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	1d1a      	adds	r2, r3, #4
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	3304      	adds	r3, #4
 800e1c8:	4619      	mov	r1, r3
 800e1ca:	4610      	mov	r0, r2
 800e1cc:	f7ff ff3d 	bl	800e04a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	601a      	str	r2, [r3, #0]
      }
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	4618      	mov	r0, r3
 800e1da:	3708      	adds	r7, #8
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}

0800e1e0 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>:
      use_count() const noexcept
      { return _M_refcount._M_get_use_count(); }

      /// Exchange both the owned pointer and the stored pointer.
      void
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b082      	sub	sp, #8
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	6039      	str	r1, [r7, #0]
      {
	std::swap(_M_ptr, __other._M_ptr);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	683a      	ldr	r2, [r7, #0]
 800e1ee:	4611      	mov	r1, r2
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f000 f8be 	bl	800e372 <_ZSt4swapIP11AbstractMsgENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	_M_refcount._M_swap(__other._M_refcount);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	1d1a      	adds	r2, r3, #4
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	3304      	adds	r3, #4
 800e1fe:	4619      	mov	r1, r3
 800e200:	4610      	mov	r0, r2
 800e202:	f7ff ff22 	bl	800e04a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 800e206:	bf00      	nop
 800e208:	3708      	adds	r7, #8
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}

0800e20e <_ZNSt12__shared_ptrI11HeaderClassLN9__gnu_cxx12_Lock_policyE0EEC1ISaIS0_EJRKhjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
      /// @}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 800e20e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e210:	b087      	sub	sp, #28
 800e212:	af02      	add	r7, sp, #8
 800e214:	60f8      	str	r0, [r7, #12]
 800e216:	60b9      	str	r1, [r7, #8]
 800e218:	607a      	str	r2, [r7, #4]
 800e21a:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	2200      	movs	r2, #0
 800e220:	601a      	str	r2, [r3, #0]
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	1d1c      	adds	r4, r3, #4
 800e226:	68fd      	ldr	r5, [r7, #12]
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	f7ff fd64 	bl	800dcf6 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 800e22e:	4606      	mov	r6, r0
 800e230:	6838      	ldr	r0, [r7, #0]
 800e232:	f7ff fd6b 	bl	800dd0c <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800e236:	4603      	mov	r3, r0
 800e238:	9300      	str	r3, [sp, #0]
 800e23a:	4633      	mov	r3, r6
 800e23c:	68ba      	ldr	r2, [r7, #8]
 800e23e:	4629      	mov	r1, r5
 800e240:	4620      	mov	r0, r4
 800e242:	f000 f8b5 	bl	800e3b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I11HeaderClassSaIS4_EJRKhjEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	4619      	mov	r1, r3
 800e24c:	68f8      	ldr	r0, [r7, #12]
 800e24e:	f000 f925 	bl	800e49c <_ZNSt12__shared_ptrI11HeaderClassLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	4618      	mov	r0, r3
 800e256:	3714      	adds	r7, #20
 800e258:	46bd      	mov	sp, r7
 800e25a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e25c <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_get_nodeEv>:
      _M_get_node()
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b082      	sub	sp, #8
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
      { return _Node_alloc_traits::allocate(_M_impl, 1); }
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	2101      	movs	r1, #1
 800e268:	4618      	mov	r0, r3
 800e26a:	f000 f922 	bl	800e4b2 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE8allocateERS5_j>
 800e26e:	4603      	mov	r3, r0
 800e270:	4618      	mov	r0, r3
 800e272:	3708      	adds	r7, #8
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}

0800e278 <_ZNSt15__allocated_ptrISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEEC1ERS5_PS4_>:
    {
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800e278:	b580      	push	{r7, lr}
 800e27a:	b084      	sub	sp, #16
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	60f8      	str	r0, [r7, #12]
 800e280:	60b9      	str	r1, [r7, #8]
 800e282:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800e284:	68b8      	ldr	r0, [r7, #8]
 800e286:	f000 f923 	bl	800e4d0 <_ZSt11__addressofISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEEPT_RS6_>
 800e28a:	4602      	mov	r2, r0
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	601a      	str	r2, [r3, #0]
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	687a      	ldr	r2, [r7, #4]
 800e294:	605a      	str	r2, [r3, #4]
      { }
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	4618      	mov	r0, r3
 800e29a:	3710      	adds	r7, #16
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}

0800e2a0 <_ZNSt15__allocated_ptrISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b082      	sub	sp, #8
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
      {
	if (_M_ptr != nullptr)
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	685b      	ldr	r3, [r3, #4]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d007      	beq.n	800e2c0 <_ZNSt15__allocated_ptrISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	6818      	ldr	r0, [r3, #0]
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	685b      	ldr	r3, [r3, #4]
 800e2b8:	2201      	movs	r2, #1
 800e2ba:	4619      	mov	r1, r3
 800e2bc:	f7fe fafd 	bl	800c8ba <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE10deallocateERS5_PS4_j>
      }
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	3708      	adds	r7, #8
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}

0800e2ca <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE9constructIS3_JS3_EEEvRS5_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800e2ca:	b580      	push	{r7, lr}
 800e2cc:	b084      	sub	sp, #16
 800e2ce:	af00      	add	r7, sp, #0
 800e2d0:	60f8      	str	r0, [r7, #12]
 800e2d2:	60b9      	str	r1, [r7, #8]
 800e2d4:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f7ff fecc 	bl	800e074 <_ZSt7forwardISt10shared_ptrI11AbstractMsgEEOT_RNSt16remove_referenceIS3_E4typeE>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	461a      	mov	r2, r3
 800e2e0:	68b9      	ldr	r1, [r7, #8]
 800e2e2:	68f8      	ldr	r0, [r7, #12]
 800e2e4:	f000 f8ff 	bl	800e4e6 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE9constructIS4_JS4_EEEvPT_DpOT0_>
	}
 800e2e8:	bf00      	nop
 800e2ea:	3710      	adds	r7, #16
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}

0800e2f0 <_ZNSt15__allocated_ptrISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEEaSEDn>:

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
 800e2f0:	b480      	push	{r7}
 800e2f2:	b083      	sub	sp, #12
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
 800e2f8:	6039      	str	r1, [r7, #0]
      {
	_M_ptr = nullptr;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	605a      	str	r2, [r3, #4]
	return *this;
 800e300:	687b      	ldr	r3, [r7, #4]
      }
 800e302:	4618      	mov	r0, r3
 800e304:	370c      	adds	r7, #12
 800e306:	46bd      	mov	sp, r7
 800e308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30c:	4770      	bx	lr

0800e30e <_ZNSt12__shared_ptrI12PayloadClassLN9__gnu_cxx12_Lock_policyE0EEC1ISaIS0_EJRPKcjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 800e30e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e310:	b087      	sub	sp, #28
 800e312:	af02      	add	r7, sp, #8
 800e314:	60f8      	str	r0, [r7, #12]
 800e316:	60b9      	str	r1, [r7, #8]
 800e318:	607a      	str	r2, [r7, #4]
 800e31a:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	2200      	movs	r2, #0
 800e320:	601a      	str	r2, [r3, #0]
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	1d1c      	adds	r4, r3, #4
 800e326:	68fd      	ldr	r5, [r7, #12]
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f7ff fd8e 	bl	800de4a <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800e32e:	4606      	mov	r6, r0
 800e330:	6838      	ldr	r0, [r7, #0]
 800e332:	f7ff fceb 	bl	800dd0c <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800e336:	4603      	mov	r3, r0
 800e338:	9300      	str	r3, [sp, #0]
 800e33a:	4633      	mov	r3, r6
 800e33c:	68ba      	ldr	r2, [r7, #8]
 800e33e:	4629      	mov	r1, r5
 800e340:	4620      	mov	r0, r4
 800e342:	f000 f8e8 	bl	800e516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I12PayloadClassSaIS4_EJRPKcjEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	4619      	mov	r1, r3
 800e34c:	68f8      	ldr	r0, [r7, #12]
 800e34e:	f000 f958 	bl	800e602 <_ZNSt12__shared_ptrI12PayloadClassLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	4618      	mov	r0, r3
 800e356:	3714      	adds	r7, #20
 800e358:	46bd      	mov	sp, r7
 800e35a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e35c <_ZSt4moveIRP11AbstractMsgEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800e35c:	b480      	push	{r7}
 800e35e:	b083      	sub	sp, #12
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	4618      	mov	r0, r3
 800e368:	370c      	adds	r7, #12
 800e36a:	46bd      	mov	sp, r7
 800e36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e370:	4770      	bx	lr

0800e372 <_ZSt4swapIP11AbstractMsgENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800e372:	b580      	push	{r7, lr}
 800e374:	b084      	sub	sp, #16
 800e376:	af00      	add	r7, sp, #0
 800e378:	6078      	str	r0, [r7, #4]
 800e37a:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f7ff ffed 	bl	800e35c <_ZSt4moveIRP11AbstractMsgEONSt16remove_referenceIT_E4typeEOS4_>
 800e382:	4603      	mov	r3, r0
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800e388:	6838      	ldr	r0, [r7, #0]
 800e38a:	f7ff ffe7 	bl	800e35c <_ZSt4moveIRP11AbstractMsgEONSt16remove_referenceIT_E4typeEOS4_>
 800e38e:	4603      	mov	r3, r0
 800e390:	681a      	ldr	r2, [r3, #0]
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800e396:	f107 030c 	add.w	r3, r7, #12
 800e39a:	4618      	mov	r0, r3
 800e39c:	f7ff ffde 	bl	800e35c <_ZSt4moveIRP11AbstractMsgEONSt16remove_referenceIT_E4typeEOS4_>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	681a      	ldr	r2, [r3, #0]
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	601a      	str	r2, [r3, #0]
    }
 800e3a8:	bf00      	nop
 800e3aa:	3710      	adds	r7, #16
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}

0800e3b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I11HeaderClassSaIS4_EJRKhjEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 800e3b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e3b4:	b08b      	sub	sp, #44	; 0x2c
 800e3b6:	af00      	add	r7, sp, #0
 800e3b8:	60f8      	str	r0, [r7, #12]
 800e3ba:	60b9      	str	r1, [r7, #8]
 800e3bc:	607a      	str	r2, [r7, #4]
 800e3be:	603b      	str	r3, [r7, #0]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 800e3c0:	687a      	ldr	r2, [r7, #4]
 800e3c2:	f107 0318 	add.w	r3, r7, #24
 800e3c6:	4611      	mov	r1, r2
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	f000 f925 	bl	800e618 <_ZNSaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEEC1IS0_EERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 800e3ce:	f107 0310 	add.w	r3, r7, #16
 800e3d2:	f107 0218 	add.w	r2, r7, #24
 800e3d6:	4611      	mov	r1, r2
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f000 f936 	bl	800e64a <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 800e3de:	f107 0310 	add.w	r3, r7, #16
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f000 f959 	bl	800e69a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 800e3e8:	6278      	str	r0, [r7, #36]	; 0x24
	  auto __pi = ::new (__mem)
 800e3ea:	687a      	ldr	r2, [r7, #4]
 800e3ec:	f107 031c 	add.w	r3, r7, #28
 800e3f0:	4611      	mov	r1, r2
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	f000 f95f 	bl	800e6b6 <_ZNSaI11HeaderClassEC1ERKS0_>
 800e3f8:	f107 061c 	add.w	r6, r7, #28
	    _Sp_cp_type(__a._M_a, std::forward<_Args>(__args)...);
 800e3fc:	6838      	ldr	r0, [r7, #0]
 800e3fe:	f7ff fc7a 	bl	800dcf6 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 800e402:	4680      	mov	r8, r0
 800e404:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e406:	f7ff fc81 	bl	800dd0c <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800e40a:	4681      	mov	r9, r0
	  auto __pi = ::new (__mem)
 800e40c:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800e40e:	4629      	mov	r1, r5
 800e410:	2014      	movs	r0, #20
 800e412:	f7fe fb79 	bl	800cb08 <_ZnwjPv>
 800e416:	4604      	mov	r4, r0
 800e418:	464b      	mov	r3, r9
 800e41a:	4642      	mov	r2, r8
 800e41c:	4631      	mov	r1, r6
 800e41e:	4620      	mov	r0, r4
 800e420:	f000 f970 	bl	800e704 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJRKhjEEES1_DpOT_>
 800e424:	623c      	str	r4, [r7, #32]
 800e426:	f107 031c 	add.w	r3, r7, #28
 800e42a:	4618      	mov	r0, r3
 800e42c:	f7ff fc57 	bl	800dcde <_ZNSaI11HeaderClassED1Ev>
	  __guard = nullptr;
 800e430:	f107 0310 	add.w	r3, r7, #16
 800e434:	2100      	movs	r1, #0
 800e436:	4618      	mov	r0, r3
 800e438:	f000 f9aa 	bl	800e790 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	6a3a      	ldr	r2, [r7, #32]
 800e440:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 800e442:	6a38      	ldr	r0, [r7, #32]
 800e444:	f000 f9b3 	bl	800e7ae <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800e448:	4602      	mov	r2, r0
 800e44a:	68bb      	ldr	r3, [r7, #8]
 800e44c:	601a      	str	r2, [r3, #0]
	}
 800e44e:	f107 0310 	add.w	r3, r7, #16
 800e452:	4618      	mov	r0, r3
 800e454:	f000 f90c 	bl	800e670 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800e458:	f107 0318 	add.w	r3, r7, #24
 800e45c:	4618      	mov	r0, r3
 800e45e:	f000 f8e8 	bl	800e632 <_ZNSaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	e015      	b.n	800e492 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I11HeaderClassSaIS4_EJRKhjEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_+0xe2>
	  auto __pi = ::new (__mem)
 800e466:	4629      	mov	r1, r5
 800e468:	4620      	mov	r0, r4
 800e46a:	f7fe fb59 	bl	800cb20 <_ZdlPvS_>
 800e46e:	f107 031c 	add.w	r3, r7, #28
 800e472:	4618      	mov	r0, r3
 800e474:	f7ff fc33 	bl	800dcde <_ZNSaI11HeaderClassED1Ev>
	}
 800e478:	f107 0310 	add.w	r3, r7, #16
 800e47c:	4618      	mov	r0, r3
 800e47e:	f000 f8f7 	bl	800e670 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800e482:	e7ff      	b.n	800e484 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I11HeaderClassSaIS4_EJRKhjEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_+0xd4>
 800e484:	f107 0318 	add.w	r3, r7, #24
 800e488:	4618      	mov	r0, r3
 800e48a:	f000 f8d2 	bl	800e632 <_ZNSaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800e48e:	f004 ff2d 	bl	80132ec <__cxa_end_cleanup>
 800e492:	4618      	mov	r0, r3
 800e494:	372c      	adds	r7, #44	; 0x2c
 800e496:	46bd      	mov	sp, r7
 800e498:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800e49c <_ZNSt12__shared_ptrI11HeaderClassLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800e49c:	b480      	push	{r7}
 800e49e:	b083      	sub	sp, #12
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
 800e4a4:	6039      	str	r1, [r7, #0]
	{ }
 800e4a6:	bf00      	nop
 800e4a8:	370c      	adds	r7, #12
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b0:	4770      	bx	lr

0800e4b2 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE8allocateERS5_j>:
      allocate(allocator_type& __a, size_type __n)
 800e4b2:	b580      	push	{r7, lr}
 800e4b4:	b082      	sub	sp, #8
 800e4b6:	af00      	add	r7, sp, #0
 800e4b8:	6078      	str	r0, [r7, #4]
 800e4ba:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800e4bc:	2200      	movs	r2, #0
 800e4be:	6839      	ldr	r1, [r7, #0]
 800e4c0:	6878      	ldr	r0, [r7, #4]
 800e4c2:	f000 f98e 	bl	800e7e2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE8allocateEjPKv>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	3708      	adds	r7, #8
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}

0800e4d0 <_ZSt11__addressofISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800e4d0:	b480      	push	{r7}
 800e4d2:	b083      	sub	sp, #12
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	4618      	mov	r0, r3
 800e4dc:	370c      	adds	r7, #12
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e4:	4770      	bx	lr

0800e4e6 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE9constructIS4_JS4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800e4e6:	b590      	push	{r4, r7, lr}
 800e4e8:	b085      	sub	sp, #20
 800e4ea:	af00      	add	r7, sp, #0
 800e4ec:	60f8      	str	r0, [r7, #12]
 800e4ee:	60b9      	str	r1, [r7, #8]
 800e4f0:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f7ff fdbe 	bl	800e074 <_ZSt7forwardISt10shared_ptrI11AbstractMsgEEOT_RNSt16remove_referenceIS3_E4typeE>
 800e4f8:	4604      	mov	r4, r0
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	4619      	mov	r1, r3
 800e4fe:	2008      	movs	r0, #8
 800e500:	f7fe fb02 	bl	800cb08 <_ZnwjPv>
 800e504:	4603      	mov	r3, r0
 800e506:	4621      	mov	r1, r4
 800e508:	4618      	mov	r0, r3
 800e50a:	f000 f993 	bl	800e834 <_ZNSt10shared_ptrI11AbstractMsgEC1EOS1_>
 800e50e:	bf00      	nop
 800e510:	3714      	adds	r7, #20
 800e512:	46bd      	mov	sp, r7
 800e514:	bd90      	pop	{r4, r7, pc}

0800e516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I12PayloadClassSaIS4_EJRPKcjEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 800e516:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e51a:	b08b      	sub	sp, #44	; 0x2c
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	60f8      	str	r0, [r7, #12]
 800e520:	60b9      	str	r1, [r7, #8]
 800e522:	607a      	str	r2, [r7, #4]
 800e524:	603b      	str	r3, [r7, #0]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 800e526:	687a      	ldr	r2, [r7, #4]
 800e528:	f107 0318 	add.w	r3, r7, #24
 800e52c:	4611      	mov	r1, r2
 800e52e:	4618      	mov	r0, r3
 800e530:	f000 f993 	bl	800e85a <_ZNSaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEEC1IS0_EERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 800e534:	f107 0310 	add.w	r3, r7, #16
 800e538:	f107 0218 	add.w	r2, r7, #24
 800e53c:	4611      	mov	r1, r2
 800e53e:	4618      	mov	r0, r3
 800e540:	f000 f9a4 	bl	800e88c <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 800e544:	f107 0310 	add.w	r3, r7, #16
 800e548:	4618      	mov	r0, r3
 800e54a:	f000 f9c7 	bl	800e8dc <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 800e54e:	6278      	str	r0, [r7, #36]	; 0x24
	  auto __pi = ::new (__mem)
 800e550:	687a      	ldr	r2, [r7, #4]
 800e552:	f107 031c 	add.w	r3, r7, #28
 800e556:	4611      	mov	r1, r2
 800e558:	4618      	mov	r0, r3
 800e55a:	f000 f9cd 	bl	800e8f8 <_ZNSaI12PayloadClassEC1ERKS0_>
 800e55e:	f107 061c 	add.w	r6, r7, #28
	    _Sp_cp_type(__a._M_a, std::forward<_Args>(__args)...);
 800e562:	6838      	ldr	r0, [r7, #0]
 800e564:	f7ff fc71 	bl	800de4a <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800e568:	4680      	mov	r8, r0
 800e56a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e56c:	f7ff fbce 	bl	800dd0c <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800e570:	4681      	mov	r9, r0
	  auto __pi = ::new (__mem)
 800e572:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800e574:	4629      	mov	r1, r5
 800e576:	2018      	movs	r0, #24
 800e578:	f7fe fac6 	bl	800cb08 <_ZnwjPv>
 800e57c:	4604      	mov	r4, r0
 800e57e:	464b      	mov	r3, r9
 800e580:	4642      	mov	r2, r8
 800e582:	4631      	mov	r1, r6
 800e584:	4620      	mov	r0, r4
 800e586:	f000 f9dd 	bl	800e944 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcjEEES1_DpOT_>
 800e58a:	623c      	str	r4, [r7, #32]
 800e58c:	f107 031c 	add.w	r3, r7, #28
 800e590:	4618      	mov	r0, r3
 800e592:	f7ff fc4e 	bl	800de32 <_ZNSaI12PayloadClassED1Ev>
	  __guard = nullptr;
 800e596:	f107 0310 	add.w	r3, r7, #16
 800e59a:	2100      	movs	r1, #0
 800e59c:	4618      	mov	r0, r3
 800e59e:	f000 fa17 	bl	800e9d0 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	6a3a      	ldr	r2, [r7, #32]
 800e5a6:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 800e5a8:	6a38      	ldr	r0, [r7, #32]
 800e5aa:	f000 fa20 	bl	800e9ee <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800e5ae:	4602      	mov	r2, r0
 800e5b0:	68bb      	ldr	r3, [r7, #8]
 800e5b2:	601a      	str	r2, [r3, #0]
	}
 800e5b4:	f107 0310 	add.w	r3, r7, #16
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f000 f97a 	bl	800e8b2 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800e5be:	f107 0318 	add.w	r3, r7, #24
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f000 f956 	bl	800e874 <_ZNSaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	e015      	b.n	800e5f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I12PayloadClassSaIS4_EJRPKcjEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_+0xe2>
	  auto __pi = ::new (__mem)
 800e5cc:	4629      	mov	r1, r5
 800e5ce:	4620      	mov	r0, r4
 800e5d0:	f7fe faa6 	bl	800cb20 <_ZdlPvS_>
 800e5d4:	f107 031c 	add.w	r3, r7, #28
 800e5d8:	4618      	mov	r0, r3
 800e5da:	f7ff fc2a 	bl	800de32 <_ZNSaI12PayloadClassED1Ev>
	}
 800e5de:	f107 0310 	add.w	r3, r7, #16
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	f000 f965 	bl	800e8b2 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800e5e8:	e7ff      	b.n	800e5ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I12PayloadClassSaIS4_EJRPKcjEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_+0xd4>
 800e5ea:	f107 0318 	add.w	r3, r7, #24
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f000 f940 	bl	800e874 <_ZNSaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800e5f4:	f004 fe7a 	bl	80132ec <__cxa_end_cleanup>
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	372c      	adds	r7, #44	; 0x2c
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800e602 <_ZNSt12__shared_ptrI12PayloadClassLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800e602:	b480      	push	{r7}
 800e604:	b083      	sub	sp, #12
 800e606:	af00      	add	r7, sp, #0
 800e608:	6078      	str	r0, [r7, #4]
 800e60a:	6039      	str	r1, [r7, #0]
	{ }
 800e60c:	bf00      	nop
 800e60e:	370c      	adds	r7, #12
 800e610:	46bd      	mov	sp, r7
 800e612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e616:	4770      	bx	lr

0800e618 <_ZNSaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEEC1IS0_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800e618:	b580      	push	{r7, lr}
 800e61a:	b082      	sub	sp, #8
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
 800e620:	6039      	str	r1, [r7, #0]
 800e622:	6878      	ldr	r0, [r7, #4]
 800e624:	f000 f9f1 	bl	800ea0a <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEEC1Ev>
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	4618      	mov	r0, r3
 800e62c:	3708      	adds	r7, #8
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}

0800e632 <_ZNSaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800e632:	b580      	push	{r7, lr}
 800e634:	b082      	sub	sp, #8
 800e636:	af00      	add	r7, sp, #0
 800e638:	6078      	str	r0, [r7, #4]
 800e63a:	6878      	ldr	r0, [r7, #4]
 800e63c:	f000 f9f0 	bl	800ea20 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEED1Ev>
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	4618      	mov	r0, r3
 800e644:	3708      	adds	r7, #8
 800e646:	46bd      	mov	sp, r7
 800e648:	bd80      	pop	{r7, pc}

0800e64a <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    };

  /// Allocate space for a single object using __a
  template<typename _Alloc>
    __allocated_ptr<_Alloc>
    __allocate_guarded(_Alloc& __a)
 800e64a:	b580      	push	{r7, lr}
 800e64c:	b082      	sub	sp, #8
 800e64e:	af00      	add	r7, sp, #0
 800e650:	6078      	str	r0, [r7, #4]
 800e652:	6039      	str	r1, [r7, #0]
    {
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800e654:	2101      	movs	r1, #1
 800e656:	6838      	ldr	r0, [r7, #0]
 800e658:	f000 f9ed 	bl	800ea36 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 800e65c:	4603      	mov	r3, r0
 800e65e:	461a      	mov	r2, r3
 800e660:	6839      	ldr	r1, [r7, #0]
 800e662:	6878      	ldr	r0, [r7, #4]
 800e664:	f000 f9f6 	bl	800ea54 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	3708      	adds	r7, #8
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}

0800e670 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 800e670:	b580      	push	{r7, lr}
 800e672:	b082      	sub	sp, #8
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	685b      	ldr	r3, [r3, #4]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d007      	beq.n	800e690 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	6818      	ldr	r0, [r3, #0]
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	685b      	ldr	r3, [r3, #4]
 800e688:	2201      	movs	r2, #1
 800e68a:	4619      	mov	r1, r3
 800e68c:	f000 f9f6 	bl	800ea7c <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	4618      	mov	r0, r3
 800e694:	3708      	adds	r7, #8
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}

0800e69a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 800e69a:	b580      	push	{r7, lr}
 800e69c:	b082      	sub	sp, #8
 800e69e:	af00      	add	r7, sp, #0
 800e6a0:	6078      	str	r0, [r7, #4]
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	685b      	ldr	r3, [r3, #4]
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f000 f9f7 	bl	800ea9a <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3708      	adds	r7, #8
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}

0800e6b6 <_ZNSaI11HeaderClassEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800e6b6:	b580      	push	{r7, lr}
 800e6b8:	b082      	sub	sp, #8
 800e6ba:	af00      	add	r7, sp, #0
 800e6bc:	6078      	str	r0, [r7, #4]
 800e6be:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800e6c0:	6839      	ldr	r1, [r7, #0]
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f000 f9f4 	bl	800eab0 <_ZN9__gnu_cxx13new_allocatorI11HeaderClassEC1ERKS2_>
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	3708      	adds	r7, #8
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd80      	pop	{r7, pc}

0800e6d2 <_ZNSt14_Sp_ebo_helperILi0ESaI11HeaderClassELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 800e6d2:	b580      	push	{r7, lr}
 800e6d4:	b082      	sub	sp, #8
 800e6d6:	af00      	add	r7, sp, #0
 800e6d8:	6078      	str	r0, [r7, #4]
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f7ff faff 	bl	800dcde <_ZNSaI11HeaderClassED1Ev>
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	3708      	adds	r7, #8
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}

0800e6ea <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Alloc>
 800e6ea:	b580      	push	{r7, lr}
 800e6ec:	b082      	sub	sp, #8
 800e6ee:	af00      	add	r7, sp, #0
 800e6f0:	6078      	str	r0, [r7, #4]
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f7ff ffed 	bl	800e6d2 <_ZNSt14_Sp_ebo_helperILi0ESaI11HeaderClassELb1EED1Ev>
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	3708      	adds	r7, #8
 800e6fe:	46bd      	mov	sp, r7
 800e700:	bd80      	pop	{r7, pc}
	...

0800e704 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJRKhjEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 800e704:	b5b0      	push	{r4, r5, r7, lr}
 800e706:	b086      	sub	sp, #24
 800e708:	af00      	add	r7, sp, #0
 800e70a:	60f8      	str	r0, [r7, #12]
 800e70c:	60b9      	str	r1, [r7, #8]
 800e70e:	607a      	str	r2, [r7, #4]
 800e710:	603b      	str	r3, [r7, #0]
	: _M_impl(__a)
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	4618      	mov	r0, r3
 800e716:	f000 f9d7 	bl	800eac8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800e71a:	4a1c      	ldr	r2, [pc, #112]	; (800e78c <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJRKhjEEES1_DpOT_+0x88>)
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	601a      	str	r2, [r3, #0]
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	f103 040c 	add.w	r4, r3, #12
 800e726:	f107 0314 	add.w	r3, r7, #20
 800e72a:	68b9      	ldr	r1, [r7, #8]
 800e72c:	4618      	mov	r0, r3
 800e72e:	f7ff ffc2 	bl	800e6b6 <_ZNSaI11HeaderClassEC1ERKS0_>
 800e732:	f107 0314 	add.w	r3, r7, #20
 800e736:	4619      	mov	r1, r3
 800e738:	4620      	mov	r0, r4
 800e73a:	f000 f9db 	bl	800eaf4 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
 800e73e:	f107 0314 	add.w	r3, r7, #20
 800e742:	4618      	mov	r0, r3
 800e744:	f7ff facb 	bl	800dcde <_ZNSaI11HeaderClassED1Ev>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 800e748:	68f8      	ldr	r0, [r7, #12]
 800e74a:	f000 f830 	bl	800e7ae <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800e74e:	4604      	mov	r4, r0
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	f7ff fad0 	bl	800dcf6 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 800e756:	4605      	mov	r5, r0
 800e758:	6838      	ldr	r0, [r7, #0]
 800e75a:	f7ff fad7 	bl	800dd0c <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800e75e:	4603      	mov	r3, r0
 800e760:	462a      	mov	r2, r5
 800e762:	4621      	mov	r1, r4
 800e764:	68b8      	ldr	r0, [r7, #8]
 800e766:	f000 f9d3 	bl	800eb10 <_ZNSt16allocator_traitsISaI11HeaderClassEE9constructIS0_JRKhjEEEvRS1_PT_DpOT0_>
	}
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	e00a      	b.n	800e784 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJRKhjEEES1_DpOT_+0x80>
	: _M_impl(__a)
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	330c      	adds	r3, #12
 800e772:	4618      	mov	r0, r3
 800e774:	f7ff ffb9 	bl	800e6ea <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplD1Ev>
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	4618      	mov	r0, r3
 800e77c:	f7ff fa1e 	bl	800dbbc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800e780:	f004 fdb4 	bl	80132ec <__cxa_end_cleanup>
	}
 800e784:	4618      	mov	r0, r3
 800e786:	3718      	adds	r7, #24
 800e788:	46bd      	mov	sp, r7
 800e78a:	bdb0      	pop	{r4, r5, r7, pc}
 800e78c:	0801812c 	.word	0x0801812c

0800e790 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800e790:	b480      	push	{r7}
 800e792:	b083      	sub	sp, #12
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
 800e798:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2200      	movs	r2, #0
 800e79e:	605a      	str	r2, [r3, #4]
	return *this;
 800e7a0:	687b      	ldr	r3, [r7, #4]
      }
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	370c      	adds	r7, #12
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ac:	4770      	bx	lr

0800e7ae <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 800e7ae:	b580      	push	{r7, lr}
 800e7b0:	b082      	sub	sp, #8
 800e7b2:	af00      	add	r7, sp, #0
 800e7b4:	6078      	str	r0, [r7, #4]
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	330c      	adds	r3, #12
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f000 f9c0 	bl	800eb40 <_ZN9__gnu_cxx16__aligned_bufferI11HeaderClassE6_M_ptrEv>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	3708      	adds	r7, #8
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}

0800e7ca <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800e7ca:	b480      	push	{r7}
 800e7cc:	b083      	sub	sp, #12
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800e7d2:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	370c      	adds	r7, #12
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e0:	4770      	bx	lr

0800e7e2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800e7e2:	b580      	push	{r7, lr}
 800e7e4:	b084      	sub	sp, #16
 800e7e6:	af00      	add	r7, sp, #0
 800e7e8:	60f8      	str	r0, [r7, #12]
 800e7ea:	60b9      	str	r1, [r7, #8]
 800e7ec:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800e7ee:	68f8      	ldr	r0, [r7, #12]
 800e7f0:	f7ff ffeb 	bl	800e7ca <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE11_M_max_sizeEv>
 800e7f4:	4602      	mov	r2, r0
 800e7f6:	68bb      	ldr	r3, [r7, #8]
 800e7f8:	4293      	cmp	r3, r2
 800e7fa:	bf8c      	ite	hi
 800e7fc:	2301      	movhi	r3, #1
 800e7fe:	2300      	movls	r3, #0
 800e800:	b2db      	uxtb	r3, r3
 800e802:	2b00      	cmp	r3, #0
 800e804:	bf14      	ite	ne
 800e806:	2301      	movne	r3, #1
 800e808:	2300      	moveq	r3, #0
 800e80a:	b2db      	uxtb	r3, r3
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d007      	beq.n	800e820 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e816:	d301      	bcc.n	800e81c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800e818:	f005 faad 	bl	8013d76 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800e81c:	f005 faa8 	bl	8013d70 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	011b      	lsls	r3, r3, #4
 800e824:	4618      	mov	r0, r3
 800e826:	f005 f928 	bl	8013a7a <_Znwj>
 800e82a:	4603      	mov	r3, r0
      }
 800e82c:	4618      	mov	r0, r3
 800e82e:	3710      	adds	r7, #16
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}

0800e834 <_ZNSt10shared_ptrI11AbstractMsgEC1EOS1_>:
      shared_ptr(shared_ptr&& __r) noexcept
 800e834:	b590      	push	{r4, r7, lr}
 800e836:	b083      	sub	sp, #12
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
 800e83c:	6039      	str	r1, [r7, #0]
      : __shared_ptr<_Tp>(std::move(__r)) { }
 800e83e:	687c      	ldr	r4, [r7, #4]
 800e840:	6838      	ldr	r0, [r7, #0]
 800e842:	f7ff fac0 	bl	800ddc6 <_ZSt4moveIRSt10shared_ptrI11AbstractMsgEEONSt16remove_referenceIT_E4typeEOS5_>
 800e846:	4603      	mov	r3, r0
 800e848:	4619      	mov	r1, r3
 800e84a:	4620      	mov	r0, r4
 800e84c:	f7ff fcaa 	bl	800e1a4 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	4618      	mov	r0, r3
 800e854:	370c      	adds	r7, #12
 800e856:	46bd      	mov	sp, r7
 800e858:	bd90      	pop	{r4, r7, pc}

0800e85a <_ZNSaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEEC1IS0_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800e85a:	b580      	push	{r7, lr}
 800e85c:	b082      	sub	sp, #8
 800e85e:	af00      	add	r7, sp, #0
 800e860:	6078      	str	r0, [r7, #4]
 800e862:	6039      	str	r1, [r7, #0]
 800e864:	6878      	ldr	r0, [r7, #4]
 800e866:	f000 f977 	bl	800eb58 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEEC1Ev>
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	4618      	mov	r0, r3
 800e86e:	3708      	adds	r7, #8
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}

0800e874 <_ZNSaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800e874:	b580      	push	{r7, lr}
 800e876:	b082      	sub	sp, #8
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f000 f976 	bl	800eb6e <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEED1Ev>
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	4618      	mov	r0, r3
 800e886:	3708      	adds	r7, #8
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}

0800e88c <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    __allocate_guarded(_Alloc& __a)
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b082      	sub	sp, #8
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
 800e894:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800e896:	2101      	movs	r1, #1
 800e898:	6838      	ldr	r0, [r7, #0]
 800e89a:	f000 f973 	bl	800eb84 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	461a      	mov	r2, r3
 800e8a2:	6839      	ldr	r1, [r7, #0]
 800e8a4:	6878      	ldr	r0, [r7, #4]
 800e8a6:	f000 f97c 	bl	800eba2 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	3708      	adds	r7, #8
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}

0800e8b2 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 800e8b2:	b580      	push	{r7, lr}
 800e8b4:	b082      	sub	sp, #8
 800e8b6:	af00      	add	r7, sp, #0
 800e8b8:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	685b      	ldr	r3, [r3, #4]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d007      	beq.n	800e8d2 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6818      	ldr	r0, [r3, #0]
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	685b      	ldr	r3, [r3, #4]
 800e8ca:	2201      	movs	r2, #1
 800e8cc:	4619      	mov	r1, r3
 800e8ce:	f000 f97c 	bl	800ebca <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	3708      	adds	r7, #8
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	bd80      	pop	{r7, pc}

0800e8dc <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b082      	sub	sp, #8
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	685b      	ldr	r3, [r3, #4]
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f000 f97d 	bl	800ebe8 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	3708      	adds	r7, #8
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}

0800e8f8 <_ZNSaI12PayloadClassEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b082      	sub	sp, #8
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
 800e900:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800e902:	6839      	ldr	r1, [r7, #0]
 800e904:	6878      	ldr	r0, [r7, #4]
 800e906:	f000 f97a 	bl	800ebfe <_ZN9__gnu_cxx13new_allocatorI12PayloadClassEC1ERKS2_>
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	4618      	mov	r0, r3
 800e90e:	3708      	adds	r7, #8
 800e910:	46bd      	mov	sp, r7
 800e912:	bd80      	pop	{r7, pc}

0800e914 <_ZNSt14_Sp_ebo_helperILi0ESaI12PayloadClassELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 800e914:	b580      	push	{r7, lr}
 800e916:	b082      	sub	sp, #8
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
 800e91c:	6878      	ldr	r0, [r7, #4]
 800e91e:	f7ff fa88 	bl	800de32 <_ZNSaI12PayloadClassED1Ev>
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	4618      	mov	r0, r3
 800e926:	3708      	adds	r7, #8
 800e928:	46bd      	mov	sp, r7
 800e92a:	bd80      	pop	{r7, pc}

0800e92c <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Alloc>
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b082      	sub	sp, #8
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
 800e934:	6878      	ldr	r0, [r7, #4]
 800e936:	f7ff ffed 	bl	800e914 <_ZNSt14_Sp_ebo_helperILi0ESaI12PayloadClassELb1EED1Ev>
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	4618      	mov	r0, r3
 800e93e:	3708      	adds	r7, #8
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}

0800e944 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcjEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 800e944:	b5b0      	push	{r4, r5, r7, lr}
 800e946:	b086      	sub	sp, #24
 800e948:	af00      	add	r7, sp, #0
 800e94a:	60f8      	str	r0, [r7, #12]
 800e94c:	60b9      	str	r1, [r7, #8]
 800e94e:	607a      	str	r2, [r7, #4]
 800e950:	603b      	str	r3, [r7, #0]
	: _M_impl(__a)
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	4618      	mov	r0, r3
 800e956:	f000 f8b7 	bl	800eac8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800e95a:	4a1c      	ldr	r2, [pc, #112]	; (800e9cc <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcjEEES1_DpOT_+0x88>)
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	601a      	str	r2, [r3, #0]
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	f103 040c 	add.w	r4, r3, #12
 800e966:	f107 0314 	add.w	r3, r7, #20
 800e96a:	68b9      	ldr	r1, [r7, #8]
 800e96c:	4618      	mov	r0, r3
 800e96e:	f7ff ffc3 	bl	800e8f8 <_ZNSaI12PayloadClassEC1ERKS0_>
 800e972:	f107 0314 	add.w	r3, r7, #20
 800e976:	4619      	mov	r1, r3
 800e978:	4620      	mov	r0, r4
 800e97a:	f000 f94c 	bl	800ec16 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
 800e97e:	f107 0314 	add.w	r3, r7, #20
 800e982:	4618      	mov	r0, r3
 800e984:	f7ff fa55 	bl	800de32 <_ZNSaI12PayloadClassED1Ev>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 800e988:	68f8      	ldr	r0, [r7, #12]
 800e98a:	f000 f830 	bl	800e9ee <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800e98e:	4604      	mov	r4, r0
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	f7ff fa5a 	bl	800de4a <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800e996:	4605      	mov	r5, r0
 800e998:	6838      	ldr	r0, [r7, #0]
 800e99a:	f7ff f9b7 	bl	800dd0c <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	462a      	mov	r2, r5
 800e9a2:	4621      	mov	r1, r4
 800e9a4:	68b8      	ldr	r0, [r7, #8]
 800e9a6:	f000 f944 	bl	800ec32 <_ZNSt16allocator_traitsISaI12PayloadClassEE9constructIS0_JRPKcjEEEvRS1_PT_DpOT0_>
	}
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	e00a      	b.n	800e9c4 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcjEEES1_DpOT_+0x80>
	: _M_impl(__a)
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	330c      	adds	r3, #12
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f7ff ffba 	bl	800e92c <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplD1Ev>
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f7ff f8fe 	bl	800dbbc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800e9c0:	f004 fc94 	bl	80132ec <__cxa_end_cleanup>
	}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	3718      	adds	r7, #24
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bdb0      	pop	{r4, r5, r7, pc}
 800e9cc:	08018110 	.word	0x08018110

0800e9d0 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800e9d0:	b480      	push	{r7}
 800e9d2:	b083      	sub	sp, #12
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
 800e9d8:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	2200      	movs	r2, #0
 800e9de:	605a      	str	r2, [r3, #4]
	return *this;
 800e9e0:	687b      	ldr	r3, [r7, #4]
      }
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	370c      	adds	r7, #12
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ec:	4770      	bx	lr

0800e9ee <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 800e9ee:	b580      	push	{r7, lr}
 800e9f0:	b082      	sub	sp, #8
 800e9f2:	af00      	add	r7, sp, #0
 800e9f4:	6078      	str	r0, [r7, #4]
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	330c      	adds	r3, #12
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f000 f931 	bl	800ec62 <_ZN9__gnu_cxx16__aligned_bufferI12PayloadClassE6_M_ptrEv>
 800ea00:	4603      	mov	r3, r0
 800ea02:	4618      	mov	r0, r3
 800ea04:	3708      	adds	r7, #8
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}

0800ea0a <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ea0a:	b480      	push	{r7}
 800ea0c:	b083      	sub	sp, #12
 800ea0e:	af00      	add	r7, sp, #0
 800ea10:	6078      	str	r0, [r7, #4]
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	4618      	mov	r0, r3
 800ea16:	370c      	adds	r7, #12
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1e:	4770      	bx	lr

0800ea20 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ea20:	b480      	push	{r7}
 800ea22:	b083      	sub	sp, #12
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	370c      	adds	r7, #12
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea34:	4770      	bx	lr

0800ea36 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800ea36:	b580      	push	{r7, lr}
 800ea38:	b082      	sub	sp, #8
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	6078      	str	r0, [r7, #4]
 800ea3e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800ea40:	2200      	movs	r2, #0
 800ea42:	6839      	ldr	r1, [r7, #0]
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f000 f927 	bl	800ec98 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	3708      	adds	r7, #8
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd80      	pop	{r7, pc}

0800ea54 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b084      	sub	sp, #16
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	60f8      	str	r0, [r7, #12]
 800ea5c:	60b9      	str	r1, [r7, #8]
 800ea5e:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800ea60:	68b8      	ldr	r0, [r7, #8]
 800ea62:	f000 f947 	bl	800ecf4 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 800ea66:	4602      	mov	r2, r0
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	601a      	str	r2, [r3, #0]
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	687a      	ldr	r2, [r7, #4]
 800ea70:	605a      	str	r2, [r3, #4]
      { }
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	4618      	mov	r0, r3
 800ea76:	3710      	adds	r7, #16
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd80      	pop	{r7, pc}

0800ea7c <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b084      	sub	sp, #16
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	60f8      	str	r0, [r7, #12]
 800ea84:	60b9      	str	r1, [r7, #8]
 800ea86:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800ea88:	687a      	ldr	r2, [r7, #4]
 800ea8a:	68b9      	ldr	r1, [r7, #8]
 800ea8c:	68f8      	ldr	r0, [r7, #12]
 800ea8e:	f000 f93c 	bl	800ed0a <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE10deallocateEPS5_j>
 800ea92:	bf00      	nop
 800ea94:	3710      	adds	r7, #16
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}

0800ea9a <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 800ea9a:	b480      	push	{r7}
 800ea9c:	b083      	sub	sp, #12
 800ea9e:	af00      	add	r7, sp, #0
 800eaa0:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 800eaa2:	687b      	ldr	r3, [r7, #4]
    }
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	370c      	adds	r7, #12
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaae:	4770      	bx	lr

0800eab0 <_ZN9__gnu_cxx13new_allocatorI11HeaderClassEC1ERKS2_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800eab0:	b480      	push	{r7}
 800eab2:	b083      	sub	sp, #12
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
 800eab8:	6039      	str	r1, [r7, #0]
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	4618      	mov	r0, r3
 800eabe:	370c      	adds	r7, #12
 800eac0:	46bd      	mov	sp, r7
 800eac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac6:	4770      	bx	lr

0800eac8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 800eac8:	b480      	push	{r7}
 800eaca:	b083      	sub	sp, #12
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 800ead0:	4a07      	ldr	r2, [pc, #28]	; (800eaf0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	601a      	str	r2, [r3, #0]
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2201      	movs	r2, #1
 800eada:	605a      	str	r2, [r3, #4]
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2201      	movs	r2, #1
 800eae0:	609a      	str	r2, [r3, #8]
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	4618      	mov	r0, r3
 800eae6:	370c      	adds	r7, #12
 800eae8:	46bd      	mov	sp, r7
 800eaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaee:	4770      	bx	lr
 800eaf0:	08018164 	.word	0x08018164

0800eaf4 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b082      	sub	sp, #8
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
 800eafc:	6039      	str	r1, [r7, #0]
 800eafe:	6839      	ldr	r1, [r7, #0]
 800eb00:	6878      	ldr	r0, [r7, #4]
 800eb02:	f000 f915 	bl	800ed30 <_ZNSt14_Sp_ebo_helperILi0ESaI11HeaderClassELb1EEC1ERKS1_>
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3708      	adds	r7, #8
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}

0800eb10 <_ZNSt16allocator_traitsISaI11HeaderClassEE9constructIS0_JRKhjEEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800eb10:	b590      	push	{r4, r7, lr}
 800eb12:	b085      	sub	sp, #20
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	60f8      	str	r0, [r7, #12]
 800eb18:	60b9      	str	r1, [r7, #8]
 800eb1a:	607a      	str	r2, [r7, #4]
 800eb1c:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f7ff f8e9 	bl	800dcf6 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 800eb24:	4604      	mov	r4, r0
 800eb26:	6838      	ldr	r0, [r7, #0]
 800eb28:	f7ff f8f0 	bl	800dd0c <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	4622      	mov	r2, r4
 800eb30:	68b9      	ldr	r1, [r7, #8]
 800eb32:	68f8      	ldr	r0, [r7, #12]
 800eb34:	f000 f90a 	bl	800ed4c <_ZN9__gnu_cxx13new_allocatorI11HeaderClassE9constructIS1_JRKhjEEEvPT_DpOT0_>
	}
 800eb38:	bf00      	nop
 800eb3a:	3714      	adds	r7, #20
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd90      	pop	{r4, r7, pc}

0800eb40 <_ZN9__gnu_cxx16__aligned_bufferI11HeaderClassE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b082      	sub	sp, #8
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800eb48:	6878      	ldr	r0, [r7, #4]
 800eb4a:	f000 f929 	bl	800eda0 <_ZN9__gnu_cxx16__aligned_bufferI11HeaderClassE7_M_addrEv>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	4618      	mov	r0, r3
 800eb52:	3708      	adds	r7, #8
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}

0800eb58 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800eb58:	b480      	push	{r7}
 800eb5a:	b083      	sub	sp, #12
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	4618      	mov	r0, r3
 800eb64:	370c      	adds	r7, #12
 800eb66:	46bd      	mov	sp, r7
 800eb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6c:	4770      	bx	lr

0800eb6e <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800eb6e:	b480      	push	{r7}
 800eb70:	b083      	sub	sp, #12
 800eb72:	af00      	add	r7, sp, #0
 800eb74:	6078      	str	r0, [r7, #4]
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	4618      	mov	r0, r3
 800eb7a:	370c      	adds	r7, #12
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb82:	4770      	bx	lr

0800eb84 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b082      	sub	sp, #8
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
 800eb8c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800eb8e:	2200      	movs	r2, #0
 800eb90:	6839      	ldr	r1, [r7, #0]
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	f000 f91e 	bl	800edd4 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv>
 800eb98:	4603      	mov	r3, r0
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3708      	adds	r7, #8
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd80      	pop	{r7, pc}

0800eba2 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800eba2:	b580      	push	{r7, lr}
 800eba4:	b084      	sub	sp, #16
 800eba6:	af00      	add	r7, sp, #0
 800eba8:	60f8      	str	r0, [r7, #12]
 800ebaa:	60b9      	str	r1, [r7, #8]
 800ebac:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800ebae:	68b8      	ldr	r0, [r7, #8]
 800ebb0:	f000 f93e 	bl	800ee30 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 800ebb4:	4602      	mov	r2, r0
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	601a      	str	r2, [r3, #0]
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	687a      	ldr	r2, [r7, #4]
 800ebbe:	605a      	str	r2, [r3, #4]
      { }
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	3710      	adds	r7, #16
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	bd80      	pop	{r7, pc}

0800ebca <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800ebca:	b580      	push	{r7, lr}
 800ebcc:	b084      	sub	sp, #16
 800ebce:	af00      	add	r7, sp, #0
 800ebd0:	60f8      	str	r0, [r7, #12]
 800ebd2:	60b9      	str	r1, [r7, #8]
 800ebd4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800ebd6:	687a      	ldr	r2, [r7, #4]
 800ebd8:	68b9      	ldr	r1, [r7, #8]
 800ebda:	68f8      	ldr	r0, [r7, #12]
 800ebdc:	f000 f933 	bl	800ee46 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE10deallocateEPS5_j>
 800ebe0:	bf00      	nop
 800ebe2:	3710      	adds	r7, #16
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd80      	pop	{r7, pc}

0800ebe8 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
    __to_address(_Tp* __ptr) noexcept
 800ebe8:	b480      	push	{r7}
 800ebea:	b083      	sub	sp, #12
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
      return __ptr;
 800ebf0:	687b      	ldr	r3, [r7, #4]
    }
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	370c      	adds	r7, #12
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfc:	4770      	bx	lr

0800ebfe <_ZN9__gnu_cxx13new_allocatorI12PayloadClassEC1ERKS2_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800ebfe:	b480      	push	{r7}
 800ec00:	b083      	sub	sp, #12
 800ec02:	af00      	add	r7, sp, #0
 800ec04:	6078      	str	r0, [r7, #4]
 800ec06:	6039      	str	r1, [r7, #0]
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	370c      	adds	r7, #12
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec14:	4770      	bx	lr

0800ec16 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
 800ec16:	b580      	push	{r7, lr}
 800ec18:	b082      	sub	sp, #8
 800ec1a:	af00      	add	r7, sp, #0
 800ec1c:	6078      	str	r0, [r7, #4]
 800ec1e:	6039      	str	r1, [r7, #0]
 800ec20:	6839      	ldr	r1, [r7, #0]
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	f000 f922 	bl	800ee6c <_ZNSt14_Sp_ebo_helperILi0ESaI12PayloadClassELb1EEC1ERKS1_>
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	3708      	adds	r7, #8
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bd80      	pop	{r7, pc}

0800ec32 <_ZNSt16allocator_traitsISaI12PayloadClassEE9constructIS0_JRPKcjEEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800ec32:	b590      	push	{r4, r7, lr}
 800ec34:	b085      	sub	sp, #20
 800ec36:	af00      	add	r7, sp, #0
 800ec38:	60f8      	str	r0, [r7, #12]
 800ec3a:	60b9      	str	r1, [r7, #8]
 800ec3c:	607a      	str	r2, [r7, #4]
 800ec3e:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800ec40:	6878      	ldr	r0, [r7, #4]
 800ec42:	f7ff f902 	bl	800de4a <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800ec46:	4604      	mov	r4, r0
 800ec48:	6838      	ldr	r0, [r7, #0]
 800ec4a:	f7ff f85f 	bl	800dd0c <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	4622      	mov	r2, r4
 800ec52:	68b9      	ldr	r1, [r7, #8]
 800ec54:	68f8      	ldr	r0, [r7, #12]
 800ec56:	f000 f917 	bl	800ee88 <_ZN9__gnu_cxx13new_allocatorI12PayloadClassE9constructIS1_JRPKcjEEEvPT_DpOT0_>
	}
 800ec5a:	bf00      	nop
 800ec5c:	3714      	adds	r7, #20
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd90      	pop	{r4, r7, pc}

0800ec62 <_ZN9__gnu_cxx16__aligned_bufferI12PayloadClassE6_M_ptrEv>:
      _M_ptr() noexcept
 800ec62:	b580      	push	{r7, lr}
 800ec64:	b082      	sub	sp, #8
 800ec66:	af00      	add	r7, sp, #0
 800ec68:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800ec6a:	6878      	ldr	r0, [r7, #4]
 800ec6c:	f000 f936 	bl	800eedc <_ZN9__gnu_cxx16__aligned_bufferI12PayloadClassE7_M_addrEv>
 800ec70:	4603      	mov	r3, r0
 800ec72:	4618      	mov	r0, r3
 800ec74:	3708      	adds	r7, #8
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bd80      	pop	{r7, pc}
	...

0800ec7c <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800ec7c:	b480      	push	{r7}
 800ec7e:	b083      	sub	sp, #12
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800ec84:	4b03      	ldr	r3, [pc, #12]	; (800ec94 <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 800ec86:	4618      	mov	r0, r3
 800ec88:	370c      	adds	r7, #12
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec90:	4770      	bx	lr
 800ec92:	bf00      	nop
 800ec94:	06666666 	.word	0x06666666

0800ec98 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b084      	sub	sp, #16
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	60f8      	str	r0, [r7, #12]
 800eca0:	60b9      	str	r1, [r7, #8]
 800eca2:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800eca4:	68f8      	ldr	r0, [r7, #12]
 800eca6:	f7ff ffe9 	bl	800ec7c <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE11_M_max_sizeEv>
 800ecaa:	4602      	mov	r2, r0
 800ecac:	68bb      	ldr	r3, [r7, #8]
 800ecae:	4293      	cmp	r3, r2
 800ecb0:	bf8c      	ite	hi
 800ecb2:	2301      	movhi	r3, #1
 800ecb4:	2300      	movls	r3, #0
 800ecb6:	b2db      	uxtb	r3, r3
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	bf14      	ite	ne
 800ecbc:	2301      	movne	r3, #1
 800ecbe:	2300      	moveq	r3, #0
 800ecc0:	b2db      	uxtb	r3, r3
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d007      	beq.n	800ecd6 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	4a09      	ldr	r2, [pc, #36]	; (800ecf0 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 800ecca:	4293      	cmp	r3, r2
 800eccc:	d901      	bls.n	800ecd2 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800ecce:	f005 f852 	bl	8013d76 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800ecd2:	f005 f84d 	bl	8013d70 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ecd6:	68ba      	ldr	r2, [r7, #8]
 800ecd8:	4613      	mov	r3, r2
 800ecda:	009b      	lsls	r3, r3, #2
 800ecdc:	4413      	add	r3, r2
 800ecde:	009b      	lsls	r3, r3, #2
 800ece0:	4618      	mov	r0, r3
 800ece2:	f004 feca 	bl	8013a7a <_Znwj>
 800ece6:	4603      	mov	r3, r0
      }
 800ece8:	4618      	mov	r0, r3
 800ecea:	3710      	adds	r7, #16
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}
 800ecf0:	0ccccccc 	.word	0x0ccccccc

0800ecf4 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800ecf4:	b480      	push	{r7}
 800ecf6:	b083      	sub	sp, #12
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	4618      	mov	r0, r3
 800ed00:	370c      	adds	r7, #12
 800ed02:	46bd      	mov	sp, r7
 800ed04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed08:	4770      	bx	lr

0800ed0a <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800ed0a:	b580      	push	{r7, lr}
 800ed0c:	b084      	sub	sp, #16
 800ed0e:	af00      	add	r7, sp, #0
 800ed10:	60f8      	str	r0, [r7, #12]
 800ed12:	60b9      	str	r1, [r7, #8]
 800ed14:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800ed16:	687a      	ldr	r2, [r7, #4]
 800ed18:	4613      	mov	r3, r2
 800ed1a:	009b      	lsls	r3, r3, #2
 800ed1c:	4413      	add	r3, r2
 800ed1e:	009b      	lsls	r3, r3, #2
 800ed20:	4619      	mov	r1, r3
 800ed22:	68b8      	ldr	r0, [r7, #8]
 800ed24:	f004 fa4a 	bl	80131bc <_ZdlPvj>
      }
 800ed28:	bf00      	nop
 800ed2a:	3710      	adds	r7, #16
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	bd80      	pop	{r7, pc}

0800ed30 <_ZNSt14_Sp_ebo_helperILi0ESaI11HeaderClassELb1EEC1ERKS1_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b082      	sub	sp, #8
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
 800ed38:	6039      	str	r1, [r7, #0]
 800ed3a:	6839      	ldr	r1, [r7, #0]
 800ed3c:	6878      	ldr	r0, [r7, #4]
 800ed3e:	f7ff fcba 	bl	800e6b6 <_ZNSaI11HeaderClassEC1ERKS0_>
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	4618      	mov	r0, r3
 800ed46:	3708      	adds	r7, #8
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	bd80      	pop	{r7, pc}

0800ed4c <_ZN9__gnu_cxx13new_allocatorI11HeaderClassE9constructIS1_JRKhjEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800ed4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed50:	b084      	sub	sp, #16
 800ed52:	af00      	add	r7, sp, #0
 800ed54:	60f8      	str	r0, [r7, #12]
 800ed56:	60b9      	str	r1, [r7, #8]
 800ed58:	607a      	str	r2, [r7, #4]
 800ed5a:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800ed5c:	6878      	ldr	r0, [r7, #4]
 800ed5e:	f7fe ffca 	bl	800dcf6 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 800ed62:	4603      	mov	r3, r0
 800ed64:	781e      	ldrb	r6, [r3, #0]
 800ed66:	6838      	ldr	r0, [r7, #0]
 800ed68:	f7fe ffd0 	bl	800dd0c <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	fa5f f883 	uxtb.w	r8, r3
 800ed74:	68bc      	ldr	r4, [r7, #8]
 800ed76:	4621      	mov	r1, r4
 800ed78:	2008      	movs	r0, #8
 800ed7a:	f7fd fec5 	bl	800cb08 <_ZnwjPv>
 800ed7e:	4605      	mov	r5, r0
 800ed80:	4642      	mov	r2, r8
 800ed82:	4631      	mov	r1, r6
 800ed84:	4628      	mov	r0, r5
 800ed86:	f7fc ff27 	bl	800bbd8 <_ZN11HeaderClassC1Ehh>
 800ed8a:	e005      	b.n	800ed98 <_ZN9__gnu_cxx13new_allocatorI11HeaderClassE9constructIS1_JRKhjEEEvPT_DpOT0_+0x4c>
 800ed8c:	4621      	mov	r1, r4
 800ed8e:	4628      	mov	r0, r5
 800ed90:	f7fd fec6 	bl	800cb20 <_ZdlPvS_>
 800ed94:	f004 faaa 	bl	80132ec <__cxa_end_cleanup>
 800ed98:	3710      	adds	r7, #16
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eda0 <_ZN9__gnu_cxx16__aligned_bufferI11HeaderClassE7_M_addrEv>:
      _M_addr() noexcept
 800eda0:	b480      	push	{r7}
 800eda2:	b083      	sub	sp, #12
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 800eda8:	687b      	ldr	r3, [r7, #4]
      }
 800edaa:	4618      	mov	r0, r3
 800edac:	370c      	adds	r7, #12
 800edae:	46bd      	mov	sp, r7
 800edb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb4:	4770      	bx	lr
	...

0800edb8 <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800edb8:	b480      	push	{r7}
 800edba:	b083      	sub	sp, #12
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800edc0:	4b03      	ldr	r3, [pc, #12]	; (800edd0 <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 800edc2:	4618      	mov	r0, r3
 800edc4:	370c      	adds	r7, #12
 800edc6:	46bd      	mov	sp, r7
 800edc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edcc:	4770      	bx	lr
 800edce:	bf00      	nop
 800edd0:	05555555 	.word	0x05555555

0800edd4 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b084      	sub	sp, #16
 800edd8:	af00      	add	r7, sp, #0
 800edda:	60f8      	str	r0, [r7, #12]
 800eddc:	60b9      	str	r1, [r7, #8]
 800edde:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800ede0:	68f8      	ldr	r0, [r7, #12]
 800ede2:	f7ff ffe9 	bl	800edb8 <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE11_M_max_sizeEv>
 800ede6:	4602      	mov	r2, r0
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	4293      	cmp	r3, r2
 800edec:	bf8c      	ite	hi
 800edee:	2301      	movhi	r3, #1
 800edf0:	2300      	movls	r3, #0
 800edf2:	b2db      	uxtb	r3, r3
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	bf14      	ite	ne
 800edf8:	2301      	movne	r3, #1
 800edfa:	2300      	moveq	r3, #0
 800edfc:	b2db      	uxtb	r3, r3
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d007      	beq.n	800ee12 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800ee02:	68bb      	ldr	r3, [r7, #8]
 800ee04:	4a09      	ldr	r2, [pc, #36]	; (800ee2c <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 800ee06:	4293      	cmp	r3, r2
 800ee08:	d901      	bls.n	800ee0e <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800ee0a:	f004 ffb4 	bl	8013d76 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800ee0e:	f004 ffaf 	bl	8013d70 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ee12:	68ba      	ldr	r2, [r7, #8]
 800ee14:	4613      	mov	r3, r2
 800ee16:	005b      	lsls	r3, r3, #1
 800ee18:	4413      	add	r3, r2
 800ee1a:	00db      	lsls	r3, r3, #3
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	f004 fe2c 	bl	8013a7a <_Znwj>
 800ee22:	4603      	mov	r3, r0
      }
 800ee24:	4618      	mov	r0, r3
 800ee26:	3710      	adds	r7, #16
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}
 800ee2c:	0aaaaaaa 	.word	0x0aaaaaaa

0800ee30 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800ee30:	b480      	push	{r7}
 800ee32:	b083      	sub	sp, #12
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	370c      	adds	r7, #12
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee44:	4770      	bx	lr

0800ee46 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800ee46:	b580      	push	{r7, lr}
 800ee48:	b084      	sub	sp, #16
 800ee4a:	af00      	add	r7, sp, #0
 800ee4c:	60f8      	str	r0, [r7, #12]
 800ee4e:	60b9      	str	r1, [r7, #8]
 800ee50:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800ee52:	687a      	ldr	r2, [r7, #4]
 800ee54:	4613      	mov	r3, r2
 800ee56:	005b      	lsls	r3, r3, #1
 800ee58:	4413      	add	r3, r2
 800ee5a:	00db      	lsls	r3, r3, #3
 800ee5c:	4619      	mov	r1, r3
 800ee5e:	68b8      	ldr	r0, [r7, #8]
 800ee60:	f004 f9ac 	bl	80131bc <_ZdlPvj>
      }
 800ee64:	bf00      	nop
 800ee66:	3710      	adds	r7, #16
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	bd80      	pop	{r7, pc}

0800ee6c <_ZNSt14_Sp_ebo_helperILi0ESaI12PayloadClassELb1EEC1ERKS1_>:
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b082      	sub	sp, #8
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
 800ee74:	6039      	str	r1, [r7, #0]
 800ee76:	6839      	ldr	r1, [r7, #0]
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f7ff fd3d 	bl	800e8f8 <_ZNSaI12PayloadClassEC1ERKS0_>
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	4618      	mov	r0, r3
 800ee82:	3708      	adds	r7, #8
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}

0800ee88 <_ZN9__gnu_cxx13new_allocatorI12PayloadClassE9constructIS1_JRPKcjEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800ee88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee8c:	b084      	sub	sp, #16
 800ee8e:	af00      	add	r7, sp, #0
 800ee90:	60f8      	str	r0, [r7, #12]
 800ee92:	60b9      	str	r1, [r7, #8]
 800ee94:	607a      	str	r2, [r7, #4]
 800ee96:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800ee98:	6878      	ldr	r0, [r7, #4]
 800ee9a:	f7fe ffd6 	bl	800de4a <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	681e      	ldr	r6, [r3, #0]
 800eea2:	6838      	ldr	r0, [r7, #0]
 800eea4:	f7fe ff32 	bl	800dd0c <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800eea8:	4603      	mov	r3, r0
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	fa5f f883 	uxtb.w	r8, r3
 800eeb0:	68bc      	ldr	r4, [r7, #8]
 800eeb2:	4621      	mov	r1, r4
 800eeb4:	200c      	movs	r0, #12
 800eeb6:	f7fd fe27 	bl	800cb08 <_ZnwjPv>
 800eeba:	4605      	mov	r5, r0
 800eebc:	4642      	mov	r2, r8
 800eebe:	4631      	mov	r1, r6
 800eec0:	4628      	mov	r0, r5
 800eec2:	f000 f817 	bl	800eef4 <_ZN12PayloadClassC1IKcEEPT_h>
 800eec6:	e005      	b.n	800eed4 <_ZN9__gnu_cxx13new_allocatorI12PayloadClassE9constructIS1_JRPKcjEEEvPT_DpOT0_+0x4c>
 800eec8:	4621      	mov	r1, r4
 800eeca:	4628      	mov	r0, r5
 800eecc:	f7fd fe28 	bl	800cb20 <_ZdlPvS_>
 800eed0:	f004 fa0c 	bl	80132ec <__cxa_end_cleanup>
 800eed4:	3710      	adds	r7, #16
 800eed6:	46bd      	mov	sp, r7
 800eed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eedc <_ZN9__gnu_cxx16__aligned_bufferI12PayloadClassE7_M_addrEv>:
      _M_addr() noexcept
 800eedc:	b480      	push	{r7}
 800eede:	b083      	sub	sp, #12
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 800eee4:	687b      	ldr	r3, [r7, #4]
      }
 800eee6:	4618      	mov	r0, r3
 800eee8:	370c      	adds	r7, #12
 800eeea:	46bd      	mov	sp, r7
 800eeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef0:	4770      	bx	lr
	...

0800eef4 <_ZN12PayloadClassC1IKcEEPT_h>:
		PayloadClass(T* struct_or_plain_type_data, uint8_t data_size): _data_size(data_size), _data(new uint8_t[data_size])
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b086      	sub	sp, #24
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	60f8      	str	r0, [r7, #12]
 800eefc:	60b9      	str	r1, [r7, #8]
 800eefe:	4613      	mov	r3, r2
 800ef00:	71fb      	strb	r3, [r7, #7]
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	4618      	mov	r0, r3
 800ef06:	f7fc fe57 	bl	800bbb8 <_ZN11AbstractMsgC1Ev>
 800ef0a:	4a18      	ldr	r2, [pc, #96]	; (800ef6c <_ZN12PayloadClassC1IKcEEPT_h+0x78>)
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	601a      	str	r2, [r3, #0]
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	79fa      	ldrb	r2, [r7, #7]
 800ef14:	711a      	strb	r2, [r3, #4]
 800ef16:	79fb      	ldrb	r3, [r7, #7]
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f004 fdbf 	bl	8013a9c <_Znaj>
 800ef1e:	4603      	mov	r3, r0
 800ef20:	461a      	mov	r2, r3
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	609a      	str	r2, [r3, #8]
			uint8_t* data_ptr = (uint8_t*) struct_or_plain_type_data;
 800ef26:	68bb      	ldr	r3, [r7, #8]
 800ef28:	613b      	str	r3, [r7, #16]
			for( uint8_t i = 0; i < _data_size; i ++)
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	75fb      	strb	r3, [r7, #23]
 800ef2e:	e00b      	b.n	800ef48 <_ZN12PayloadClassC1IKcEEPT_h+0x54>
				_data[i] = data_ptr[i];
 800ef30:	7dfb      	ldrb	r3, [r7, #23]
 800ef32:	693a      	ldr	r2, [r7, #16]
 800ef34:	441a      	add	r2, r3
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	6899      	ldr	r1, [r3, #8]
 800ef3a:	7dfb      	ldrb	r3, [r7, #23]
 800ef3c:	440b      	add	r3, r1
 800ef3e:	7812      	ldrb	r2, [r2, #0]
 800ef40:	701a      	strb	r2, [r3, #0]
			for( uint8_t i = 0; i < _data_size; i ++)
 800ef42:	7dfb      	ldrb	r3, [r7, #23]
 800ef44:	3301      	adds	r3, #1
 800ef46:	75fb      	strb	r3, [r7, #23]
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	791b      	ldrb	r3, [r3, #4]
 800ef4c:	7dfa      	ldrb	r2, [r7, #23]
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d3ee      	bcc.n	800ef30 <_ZN12PayloadClassC1IKcEEPT_h+0x3c>
		};
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	e005      	b.n	800ef62 <_ZN12PayloadClassC1IKcEEPT_h+0x6e>
		PayloadClass(T* struct_or_plain_type_data, uint8_t data_size): _data_size(data_size), _data(new uint8_t[data_size])
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f7fc fe0d 	bl	800bb78 <_ZN11AbstractMsgD1Ev>
 800ef5e:	f004 f9c5 	bl	80132ec <__cxa_end_cleanup>
		};
 800ef62:	4618      	mov	r0, r3
 800ef64:	3718      	adds	r7, #24
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}
 800ef6a:	bf00      	nop
 800ef6c:	08018148 	.word	0x08018148

0800ef70 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b082      	sub	sp, #8
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
 800ef78:	4a08      	ldr	r2, [pc, #32]	; (800ef9c <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x2c>)
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	601a      	str	r2, [r3, #0]
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	330c      	adds	r3, #12
 800ef82:	4618      	mov	r0, r3
 800ef84:	f7ff fcd2 	bl	800e92c <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplD1Ev>
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f7fe fe16 	bl	800dbbc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	4618      	mov	r0, r3
 800ef94:	3708      	adds	r7, #8
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}
 800ef9a:	bf00      	nop
 800ef9c:	08018110 	.word	0x08018110

0800efa0 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b082      	sub	sp, #8
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
 800efa8:	6878      	ldr	r0, [r7, #4]
 800efaa:	f7ff ffe1 	bl	800ef70 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800efae:	2118      	movs	r1, #24
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f004 f903 	bl	80131bc <_ZdlPvj>
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	4618      	mov	r0, r3
 800efba:	3708      	adds	r7, #8
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}

0800efc0 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800efc0:	b590      	push	{r4, r7, lr}
 800efc2:	b083      	sub	sp, #12
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	330c      	adds	r3, #12
 800efcc:	4618      	mov	r0, r3
 800efce:	f000 f8e3 	bl	800f198 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800efd2:	4604      	mov	r4, r0
 800efd4:	6878      	ldr	r0, [r7, #4]
 800efd6:	f7ff fd0a 	bl	800e9ee <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800efda:	4603      	mov	r3, r0
 800efdc:	4619      	mov	r1, r3
 800efde:	4620      	mov	r0, r4
 800efe0:	f000 f8e6 	bl	800f1b0 <_ZNSt16allocator_traitsISaI12PayloadClassEE7destroyIS0_EEvRS1_PT_>
      }
 800efe4:	bf00      	nop
 800efe6:	370c      	adds	r7, #12
 800efe8:	46bd      	mov	sp, r7
 800efea:	bd90      	pop	{r4, r7, pc}

0800efec <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800efec:	b580      	push	{r7, lr}
 800efee:	b086      	sub	sp, #24
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	330c      	adds	r3, #12
 800eff8:	4618      	mov	r0, r3
 800effa:	f000 f8cd 	bl	800f198 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800effe:	4602      	mov	r2, r0
 800f000:	f107 0314 	add.w	r3, r7, #20
 800f004:	4611      	mov	r1, r2
 800f006:	4618      	mov	r0, r3
 800f008:	f7ff fc27 	bl	800e85a <_ZNSaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEEC1IS0_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800f00c:	f107 0114 	add.w	r1, r7, #20
 800f010:	f107 030c 	add.w	r3, r7, #12
 800f014:	687a      	ldr	r2, [r7, #4]
 800f016:	4618      	mov	r0, r3
 800f018:	f7ff fdc3 	bl	800eba2 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 800f01c:	6878      	ldr	r0, [r7, #4]
 800f01e:	f7ff ffa7 	bl	800ef70 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 800f022:	f107 030c 	add.w	r3, r7, #12
 800f026:	4618      	mov	r0, r3
 800f028:	f7ff fc43 	bl	800e8b2 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800f02c:	f107 0314 	add.w	r3, r7, #20
 800f030:	4618      	mov	r0, r3
 800f032:	f7ff fc1f 	bl	800e874 <_ZNSaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800f036:	3718      	adds	r7, #24
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}

0800f03c <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b084      	sub	sp, #16
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
 800f044:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 800f046:	6878      	ldr	r0, [r7, #4]
 800f048:	f7ff fcd1 	bl	800e9ee <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800f04c:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 800f04e:	f7fd fd81 	bl	800cb54 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 800f052:	4602      	mov	r2, r0
	    ||
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	4293      	cmp	r3, r2
 800f058:	d006      	beq.n	800f068 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2c>
	    __ti == typeid(_Sp_make_shared_tag)
 800f05a:	4909      	ldr	r1, [pc, #36]	; (800f080 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x44>)
 800f05c:	6838      	ldr	r0, [r7, #0]
 800f05e:	f004 fda1 	bl	8013ba4 <_ZNKSt9type_infoeqERKS_>
 800f062:	4603      	mov	r3, r0
	    ||
 800f064:	2b00      	cmp	r3, #0
 800f066:	d001      	beq.n	800f06c <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 800f068:	2301      	movs	r3, #1
 800f06a:	e000      	b.n	800f06e <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x32>
 800f06c:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d001      	beq.n	800f076 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	  return __ptr;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	e000      	b.n	800f078 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3c>
	return nullptr;
 800f076:	2300      	movs	r3, #0
      }
 800f078:	4618      	mov	r0, r3
 800f07a:	3710      	adds	r7, #16
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}
 800f080:	0801828c 	.word	0x0801828c

0800f084 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 800f084:	b580      	push	{r7, lr}
 800f086:	b082      	sub	sp, #8
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
 800f08c:	4a08      	ldr	r2, [pc, #32]	; (800f0b0 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x2c>)
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	601a      	str	r2, [r3, #0]
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	330c      	adds	r3, #12
 800f096:	4618      	mov	r0, r3
 800f098:	f7ff fb27 	bl	800e6ea <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplD1Ev>
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f7fe fd8c 	bl	800dbbc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	3708      	adds	r7, #8
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	bd80      	pop	{r7, pc}
 800f0ae:	bf00      	nop
 800f0b0:	0801812c 	.word	0x0801812c

0800f0b4 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b082      	sub	sp, #8
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
 800f0bc:	6878      	ldr	r0, [r7, #4]
 800f0be:	f7ff ffe1 	bl	800f084 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800f0c2:	2114      	movs	r1, #20
 800f0c4:	6878      	ldr	r0, [r7, #4]
 800f0c6:	f004 f879 	bl	80131bc <_ZdlPvj>
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	3708      	adds	r7, #8
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd80      	pop	{r7, pc}

0800f0d4 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800f0d4:	b590      	push	{r4, r7, lr}
 800f0d6:	b083      	sub	sp, #12
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	330c      	adds	r3, #12
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	f000 f872 	bl	800f1ca <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800f0e6:	4604      	mov	r4, r0
 800f0e8:	6878      	ldr	r0, [r7, #4]
 800f0ea:	f7ff fb60 	bl	800e7ae <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	4619      	mov	r1, r3
 800f0f2:	4620      	mov	r0, r4
 800f0f4:	f000 f875 	bl	800f1e2 <_ZNSt16allocator_traitsISaI11HeaderClassEE7destroyIS0_EEvRS1_PT_>
      }
 800f0f8:	bf00      	nop
 800f0fa:	370c      	adds	r7, #12
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	bd90      	pop	{r4, r7, pc}

0800f100 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800f100:	b580      	push	{r7, lr}
 800f102:	b086      	sub	sp, #24
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	330c      	adds	r3, #12
 800f10c:	4618      	mov	r0, r3
 800f10e:	f000 f85c 	bl	800f1ca <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800f112:	4602      	mov	r2, r0
 800f114:	f107 0314 	add.w	r3, r7, #20
 800f118:	4611      	mov	r1, r2
 800f11a:	4618      	mov	r0, r3
 800f11c:	f7ff fa7c 	bl	800e618 <_ZNSaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEEC1IS0_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800f120:	f107 0114 	add.w	r1, r7, #20
 800f124:	f107 030c 	add.w	r3, r7, #12
 800f128:	687a      	ldr	r2, [r7, #4]
 800f12a:	4618      	mov	r0, r3
 800f12c:	f7ff fc92 	bl	800ea54 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	f7ff ffa7 	bl	800f084 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 800f136:	f107 030c 	add.w	r3, r7, #12
 800f13a:	4618      	mov	r0, r3
 800f13c:	f7ff fa98 	bl	800e670 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800f140:	f107 0314 	add.w	r3, r7, #20
 800f144:	4618      	mov	r0, r3
 800f146:	f7ff fa74 	bl	800e632 <_ZNSaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800f14a:	3718      	adds	r7, #24
 800f14c:	46bd      	mov	sp, r7
 800f14e:	bd80      	pop	{r7, pc}

0800f150 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 800f150:	b580      	push	{r7, lr}
 800f152:	b084      	sub	sp, #16
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
 800f158:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f7ff fb27 	bl	800e7ae <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800f160:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 800f162:	f7fd fcf7 	bl	800cb54 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 800f166:	4602      	mov	r2, r0
	    ||
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	4293      	cmp	r3, r2
 800f16c:	d006      	beq.n	800f17c <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2c>
	    __ti == typeid(_Sp_make_shared_tag)
 800f16e:	4909      	ldr	r1, [pc, #36]	; (800f194 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x44>)
 800f170:	6838      	ldr	r0, [r7, #0]
 800f172:	f004 fd17 	bl	8013ba4 <_ZNKSt9type_infoeqERKS_>
 800f176:	4603      	mov	r3, r0
	    ||
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d001      	beq.n	800f180 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 800f17c:	2301      	movs	r3, #1
 800f17e:	e000      	b.n	800f182 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x32>
 800f180:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 800f182:	2b00      	cmp	r3, #0
 800f184:	d001      	beq.n	800f18a <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	  return __ptr;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	e000      	b.n	800f18c <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3c>
	return nullptr;
 800f18a:	2300      	movs	r3, #0
      }
 800f18c:	4618      	mov	r0, r3
 800f18e:	3710      	adds	r7, #16
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}
 800f194:	0801828c 	.word	0x0801828c

0800f198 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 800f198:	b580      	push	{r7, lr}
 800f19a:	b082      	sub	sp, #8
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
 800f1a0:	6878      	ldr	r0, [r7, #4]
 800f1a2:	f000 f82b 	bl	800f1fc <_ZNSt14_Sp_ebo_helperILi0ESaI12PayloadClassELb1EE6_S_getERS2_>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	3708      	adds	r7, #8
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	bd80      	pop	{r7, pc}

0800f1b0 <_ZNSt16allocator_traitsISaI12PayloadClassEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b082      	sub	sp, #8
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
 800f1b8:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 800f1ba:	6839      	ldr	r1, [r7, #0]
 800f1bc:	6878      	ldr	r0, [r7, #4]
 800f1be:	f000 f828 	bl	800f212 <_ZN9__gnu_cxx13new_allocatorI12PayloadClassE7destroyIS1_EEvPT_>
	}
 800f1c2:	bf00      	nop
 800f1c4:	3708      	adds	r7, #8
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}

0800f1ca <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
 800f1ca:	b580      	push	{r7, lr}
 800f1cc:	b082      	sub	sp, #8
 800f1ce:	af00      	add	r7, sp, #0
 800f1d0:	6078      	str	r0, [r7, #4]
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	f000 f82b 	bl	800f22e <_ZNSt14_Sp_ebo_helperILi0ESaI11HeaderClassELb1EE6_S_getERS2_>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	4618      	mov	r0, r3
 800f1dc:	3708      	adds	r7, #8
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}

0800f1e2 <_ZNSt16allocator_traitsISaI11HeaderClassEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800f1e2:	b580      	push	{r7, lr}
 800f1e4:	b082      	sub	sp, #8
 800f1e6:	af00      	add	r7, sp, #0
 800f1e8:	6078      	str	r0, [r7, #4]
 800f1ea:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 800f1ec:	6839      	ldr	r1, [r7, #0]
 800f1ee:	6878      	ldr	r0, [r7, #4]
 800f1f0:	f000 f828 	bl	800f244 <_ZN9__gnu_cxx13new_allocatorI11HeaderClassE7destroyIS1_EEvPT_>
	}
 800f1f4:	bf00      	nop
 800f1f6:	3708      	adds	r7, #8
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}

0800f1fc <_ZNSt14_Sp_ebo_helperILi0ESaI12PayloadClassELb1EE6_S_getERS2_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800f1fc:	b480      	push	{r7}
 800f1fe:	b083      	sub	sp, #12
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	4618      	mov	r0, r3
 800f208:	370c      	adds	r7, #12
 800f20a:	46bd      	mov	sp, r7
 800f20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f210:	4770      	bx	lr

0800f212 <_ZN9__gnu_cxx13new_allocatorI12PayloadClassE7destroyIS1_EEvPT_>:
	destroy(_Up* __p)
 800f212:	b580      	push	{r7, lr}
 800f214:	b082      	sub	sp, #8
 800f216:	af00      	add	r7, sp, #0
 800f218:	6078      	str	r0, [r7, #4]
 800f21a:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	6838      	ldr	r0, [r7, #0]
 800f224:	4798      	blx	r3
 800f226:	bf00      	nop
 800f228:	3708      	adds	r7, #8
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}

0800f22e <_ZNSt14_Sp_ebo_helperILi0ESaI11HeaderClassELb1EE6_S_getERS2_>:
 800f22e:	b480      	push	{r7}
 800f230:	b083      	sub	sp, #12
 800f232:	af00      	add	r7, sp, #0
 800f234:	6078      	str	r0, [r7, #4]
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	4618      	mov	r0, r3
 800f23a:	370c      	adds	r7, #12
 800f23c:	46bd      	mov	sp, r7
 800f23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f242:	4770      	bx	lr

0800f244 <_ZN9__gnu_cxx13new_allocatorI11HeaderClassE7destroyIS1_EEvPT_>:
	destroy(_Up* __p)
 800f244:	b580      	push	{r7, lr}
 800f246:	b082      	sub	sp, #8
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
 800f24c:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 800f24e:	683b      	ldr	r3, [r7, #0]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	6838      	ldr	r0, [r7, #0]
 800f256:	4798      	blx	r3
 800f258:	bf00      	nop
 800f25a:	3708      	adds	r7, #8
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bd80      	pop	{r7, pc}

0800f260 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b082      	sub	sp, #8
 800f264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f266:	2300      	movs	r3, #0
 800f268:	607b      	str	r3, [r7, #4]
 800f26a:	4b10      	ldr	r3, [pc, #64]	; (800f2ac <HAL_MspInit+0x4c>)
 800f26c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f26e:	4a0f      	ldr	r2, [pc, #60]	; (800f2ac <HAL_MspInit+0x4c>)
 800f270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f274:	6453      	str	r3, [r2, #68]	; 0x44
 800f276:	4b0d      	ldr	r3, [pc, #52]	; (800f2ac <HAL_MspInit+0x4c>)
 800f278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f27a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f27e:	607b      	str	r3, [r7, #4]
 800f280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800f282:	2300      	movs	r3, #0
 800f284:	603b      	str	r3, [r7, #0]
 800f286:	4b09      	ldr	r3, [pc, #36]	; (800f2ac <HAL_MspInit+0x4c>)
 800f288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f28a:	4a08      	ldr	r2, [pc, #32]	; (800f2ac <HAL_MspInit+0x4c>)
 800f28c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f290:	6413      	str	r3, [r2, #64]	; 0x40
 800f292:	4b06      	ldr	r3, [pc, #24]	; (800f2ac <HAL_MspInit+0x4c>)
 800f294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f29a:	603b      	str	r3, [r7, #0]
 800f29c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800f29e:	2007      	movs	r0, #7
 800f2a0:	f000 fb8a 	bl	800f9b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800f2a4:	bf00      	nop
 800f2a6:	3708      	adds	r7, #8
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bd80      	pop	{r7, pc}
 800f2ac:	40023800 	.word	0x40023800

0800f2b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b08a      	sub	sp, #40	; 0x28
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f2b8:	f107 0314 	add.w	r3, r7, #20
 800f2bc:	2200      	movs	r2, #0
 800f2be:	601a      	str	r2, [r3, #0]
 800f2c0:	605a      	str	r2, [r3, #4]
 800f2c2:	609a      	str	r2, [r3, #8]
 800f2c4:	60da      	str	r2, [r3, #12]
 800f2c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	4a28      	ldr	r2, [pc, #160]	; (800f370 <HAL_SPI_MspInit+0xc0>)
 800f2ce:	4293      	cmp	r3, r2
 800f2d0:	d149      	bne.n	800f366 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	613b      	str	r3, [r7, #16]
 800f2d6:	4b27      	ldr	r3, [pc, #156]	; (800f374 <HAL_SPI_MspInit+0xc4>)
 800f2d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2da:	4a26      	ldr	r2, [pc, #152]	; (800f374 <HAL_SPI_MspInit+0xc4>)
 800f2dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f2e0:	6453      	str	r3, [r2, #68]	; 0x44
 800f2e2:	4b24      	ldr	r3, [pc, #144]	; (800f374 <HAL_SPI_MspInit+0xc4>)
 800f2e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f2ea:	613b      	str	r3, [r7, #16]
 800f2ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	60fb      	str	r3, [r7, #12]
 800f2f2:	4b20      	ldr	r3, [pc, #128]	; (800f374 <HAL_SPI_MspInit+0xc4>)
 800f2f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2f6:	4a1f      	ldr	r2, [pc, #124]	; (800f374 <HAL_SPI_MspInit+0xc4>)
 800f2f8:	f043 0301 	orr.w	r3, r3, #1
 800f2fc:	6313      	str	r3, [r2, #48]	; 0x30
 800f2fe:	4b1d      	ldr	r3, [pc, #116]	; (800f374 <HAL_SPI_MspInit+0xc4>)
 800f300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f302:	f003 0301 	and.w	r3, r3, #1
 800f306:	60fb      	str	r3, [r7, #12]
 800f308:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f30a:	2300      	movs	r3, #0
 800f30c:	60bb      	str	r3, [r7, #8]
 800f30e:	4b19      	ldr	r3, [pc, #100]	; (800f374 <HAL_SPI_MspInit+0xc4>)
 800f310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f312:	4a18      	ldr	r2, [pc, #96]	; (800f374 <HAL_SPI_MspInit+0xc4>)
 800f314:	f043 0302 	orr.w	r3, r3, #2
 800f318:	6313      	str	r3, [r2, #48]	; 0x30
 800f31a:	4b16      	ldr	r3, [pc, #88]	; (800f374 <HAL_SPI_MspInit+0xc4>)
 800f31c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f31e:	f003 0302 	and.w	r3, r3, #2
 800f322:	60bb      	str	r3, [r7, #8]
 800f324:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800f326:	23c0      	movs	r3, #192	; 0xc0
 800f328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f32a:	2302      	movs	r3, #2
 800f32c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f32e:	2300      	movs	r3, #0
 800f330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f332:	2303      	movs	r3, #3
 800f334:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800f336:	2305      	movs	r3, #5
 800f338:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f33a:	f107 0314 	add.w	r3, r7, #20
 800f33e:	4619      	mov	r1, r3
 800f340:	480d      	ldr	r0, [pc, #52]	; (800f378 <HAL_SPI_MspInit+0xc8>)
 800f342:	f000 fc19 	bl	800fb78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800f346:	2308      	movs	r3, #8
 800f348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f34a:	2302      	movs	r3, #2
 800f34c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f34e:	2300      	movs	r3, #0
 800f350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f352:	2303      	movs	r3, #3
 800f354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800f356:	2305      	movs	r3, #5
 800f358:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f35a:	f107 0314 	add.w	r3, r7, #20
 800f35e:	4619      	mov	r1, r3
 800f360:	4806      	ldr	r0, [pc, #24]	; (800f37c <HAL_SPI_MspInit+0xcc>)
 800f362:	f000 fc09 	bl	800fb78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800f366:	bf00      	nop
 800f368:	3728      	adds	r7, #40	; 0x28
 800f36a:	46bd      	mov	sp, r7
 800f36c:	bd80      	pop	{r7, pc}
 800f36e:	bf00      	nop
 800f370:	40013000 	.word	0x40013000
 800f374:	40023800 	.word	0x40023800
 800f378:	40020000 	.word	0x40020000
 800f37c:	40020400 	.word	0x40020400

0800f380 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b084      	sub	sp, #16
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f390:	d115      	bne.n	800f3be <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800f392:	2300      	movs	r3, #0
 800f394:	60fb      	str	r3, [r7, #12]
 800f396:	4b0c      	ldr	r3, [pc, #48]	; (800f3c8 <HAL_TIM_Base_MspInit+0x48>)
 800f398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f39a:	4a0b      	ldr	r2, [pc, #44]	; (800f3c8 <HAL_TIM_Base_MspInit+0x48>)
 800f39c:	f043 0301 	orr.w	r3, r3, #1
 800f3a0:	6413      	str	r3, [r2, #64]	; 0x40
 800f3a2:	4b09      	ldr	r3, [pc, #36]	; (800f3c8 <HAL_TIM_Base_MspInit+0x48>)
 800f3a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3a6:	f003 0301 	and.w	r3, r3, #1
 800f3aa:	60fb      	str	r3, [r7, #12]
 800f3ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 800f3ae:	2202      	movs	r2, #2
 800f3b0:	2100      	movs	r1, #0
 800f3b2:	201c      	movs	r0, #28
 800f3b4:	f000 fb0b 	bl	800f9ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800f3b8:	201c      	movs	r0, #28
 800f3ba:	f000 fb24 	bl	800fa06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800f3be:	bf00      	nop
 800f3c0:	3710      	adds	r7, #16
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd80      	pop	{r7, pc}
 800f3c6:	bf00      	nop
 800f3c8:	40023800 	.word	0x40023800

0800f3cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b08a      	sub	sp, #40	; 0x28
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f3d4:	f107 0314 	add.w	r3, r7, #20
 800f3d8:	2200      	movs	r2, #0
 800f3da:	601a      	str	r2, [r3, #0]
 800f3dc:	605a      	str	r2, [r3, #4]
 800f3de:	609a      	str	r2, [r3, #8]
 800f3e0:	60da      	str	r2, [r3, #12]
 800f3e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	4a1d      	ldr	r2, [pc, #116]	; (800f460 <HAL_UART_MspInit+0x94>)
 800f3ea:	4293      	cmp	r3, r2
 800f3ec:	d133      	bne.n	800f456 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	613b      	str	r3, [r7, #16]
 800f3f2:	4b1c      	ldr	r3, [pc, #112]	; (800f464 <HAL_UART_MspInit+0x98>)
 800f3f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3f6:	4a1b      	ldr	r2, [pc, #108]	; (800f464 <HAL_UART_MspInit+0x98>)
 800f3f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f3fc:	6413      	str	r3, [r2, #64]	; 0x40
 800f3fe:	4b19      	ldr	r3, [pc, #100]	; (800f464 <HAL_UART_MspInit+0x98>)
 800f400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f406:	613b      	str	r3, [r7, #16]
 800f408:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f40a:	2300      	movs	r3, #0
 800f40c:	60fb      	str	r3, [r7, #12]
 800f40e:	4b15      	ldr	r3, [pc, #84]	; (800f464 <HAL_UART_MspInit+0x98>)
 800f410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f412:	4a14      	ldr	r2, [pc, #80]	; (800f464 <HAL_UART_MspInit+0x98>)
 800f414:	f043 0301 	orr.w	r3, r3, #1
 800f418:	6313      	str	r3, [r2, #48]	; 0x30
 800f41a:	4b12      	ldr	r3, [pc, #72]	; (800f464 <HAL_UART_MspInit+0x98>)
 800f41c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f41e:	f003 0301 	and.w	r3, r3, #1
 800f422:	60fb      	str	r3, [r7, #12]
 800f424:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800f426:	230c      	movs	r3, #12
 800f428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f42a:	2302      	movs	r3, #2
 800f42c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f42e:	2300      	movs	r3, #0
 800f430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f432:	2303      	movs	r3, #3
 800f434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800f436:	2307      	movs	r3, #7
 800f438:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f43a:	f107 0314 	add.w	r3, r7, #20
 800f43e:	4619      	mov	r1, r3
 800f440:	4809      	ldr	r0, [pc, #36]	; (800f468 <HAL_UART_MspInit+0x9c>)
 800f442:	f000 fb99 	bl	800fb78 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800f446:	2200      	movs	r2, #0
 800f448:	2100      	movs	r1, #0
 800f44a:	2026      	movs	r0, #38	; 0x26
 800f44c:	f000 fabf 	bl	800f9ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800f450:	2026      	movs	r0, #38	; 0x26
 800f452:	f000 fad8 	bl	800fa06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800f456:	bf00      	nop
 800f458:	3728      	adds	r7, #40	; 0x28
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bd80      	pop	{r7, pc}
 800f45e:	bf00      	nop
 800f460:	40004400 	.word	0x40004400
 800f464:	40023800 	.word	0x40023800
 800f468:	40020000 	.word	0x40020000

0800f46c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800f46c:	b480      	push	{r7}
 800f46e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800f470:	e7fe      	b.n	800f470 <NMI_Handler+0x4>

0800f472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800f472:	b480      	push	{r7}
 800f474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800f476:	e7fe      	b.n	800f476 <HardFault_Handler+0x4>

0800f478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800f478:	b480      	push	{r7}
 800f47a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800f47c:	e7fe      	b.n	800f47c <MemManage_Handler+0x4>

0800f47e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800f47e:	b480      	push	{r7}
 800f480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800f482:	e7fe      	b.n	800f482 <BusFault_Handler+0x4>

0800f484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800f484:	b480      	push	{r7}
 800f486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800f488:	e7fe      	b.n	800f488 <UsageFault_Handler+0x4>

0800f48a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800f48a:	b480      	push	{r7}
 800f48c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800f48e:	bf00      	nop
 800f490:	46bd      	mov	sp, r7
 800f492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f496:	4770      	bx	lr

0800f498 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800f498:	b480      	push	{r7}
 800f49a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800f49c:	bf00      	nop
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a4:	4770      	bx	lr

0800f4a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800f4a6:	b480      	push	{r7}
 800f4a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800f4aa:	bf00      	nop
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b2:	4770      	bx	lr

0800f4b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800f4b8:	f000 f96a 	bl	800f790 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800f4bc:	bf00      	nop
 800f4be:	bd80      	pop	{r7, pc}

0800f4c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800f4c4:	4802      	ldr	r0, [pc, #8]	; (800f4d0 <TIM2_IRQHandler+0x10>)
 800f4c6:	f002 f9a5 	bl	8011814 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800f4ca:	bf00      	nop
 800f4cc:	bd80      	pop	{r7, pc}
 800f4ce:	bf00      	nop
 800f4d0:	200002f0 	.word	0x200002f0

0800f4d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800f4d8:	4802      	ldr	r0, [pc, #8]	; (800f4e4 <USART2_IRQHandler+0x10>)
 800f4da:	f002 ff0b 	bl	80122f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800f4de:	bf00      	nop
 800f4e0:	bd80      	pop	{r7, pc}
 800f4e2:	bf00      	nop
 800f4e4:	20000338 	.word	0x20000338

0800f4e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800f4e8:	b480      	push	{r7}
 800f4ea:	af00      	add	r7, sp, #0
  return 1;
 800f4ec:	2301      	movs	r3, #1
}
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f6:	4770      	bx	lr

0800f4f8 <_kill>:

int _kill(int pid, int sig)
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b082      	sub	sp, #8
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
 800f500:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800f502:	f005 fbe1 	bl	8014cc8 <__errno>
 800f506:	4603      	mov	r3, r0
 800f508:	2216      	movs	r2, #22
 800f50a:	601a      	str	r2, [r3, #0]
  return -1;
 800f50c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800f510:	4618      	mov	r0, r3
 800f512:	3708      	adds	r7, #8
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}

0800f518 <_exit>:

void _exit (int status)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b082      	sub	sp, #8
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800f520:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f524:	6878      	ldr	r0, [r7, #4]
 800f526:	f7ff ffe7 	bl	800f4f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800f52a:	e7fe      	b.n	800f52a <_exit+0x12>

0800f52c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b086      	sub	sp, #24
 800f530:	af00      	add	r7, sp, #0
 800f532:	60f8      	str	r0, [r7, #12]
 800f534:	60b9      	str	r1, [r7, #8]
 800f536:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f538:	2300      	movs	r3, #0
 800f53a:	617b      	str	r3, [r7, #20]
 800f53c:	e00a      	b.n	800f554 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800f53e:	f3af 8000 	nop.w
 800f542:	4601      	mov	r1, r0
 800f544:	68bb      	ldr	r3, [r7, #8]
 800f546:	1c5a      	adds	r2, r3, #1
 800f548:	60ba      	str	r2, [r7, #8]
 800f54a:	b2ca      	uxtb	r2, r1
 800f54c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	3301      	adds	r3, #1
 800f552:	617b      	str	r3, [r7, #20]
 800f554:	697a      	ldr	r2, [r7, #20]
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	429a      	cmp	r2, r3
 800f55a:	dbf0      	blt.n	800f53e <_read+0x12>
  }

  return len;
 800f55c:	687b      	ldr	r3, [r7, #4]
}
 800f55e:	4618      	mov	r0, r3
 800f560:	3718      	adds	r7, #24
 800f562:	46bd      	mov	sp, r7
 800f564:	bd80      	pop	{r7, pc}

0800f566 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800f566:	b580      	push	{r7, lr}
 800f568:	b086      	sub	sp, #24
 800f56a:	af00      	add	r7, sp, #0
 800f56c:	60f8      	str	r0, [r7, #12]
 800f56e:	60b9      	str	r1, [r7, #8]
 800f570:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f572:	2300      	movs	r3, #0
 800f574:	617b      	str	r3, [r7, #20]
 800f576:	e009      	b.n	800f58c <_write+0x26>
  {
    __io_putchar(*ptr++);
 800f578:	68bb      	ldr	r3, [r7, #8]
 800f57a:	1c5a      	adds	r2, r3, #1
 800f57c:	60ba      	str	r2, [r7, #8]
 800f57e:	781b      	ldrb	r3, [r3, #0]
 800f580:	4618      	mov	r0, r3
 800f582:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f586:	697b      	ldr	r3, [r7, #20]
 800f588:	3301      	adds	r3, #1
 800f58a:	617b      	str	r3, [r7, #20]
 800f58c:	697a      	ldr	r2, [r7, #20]
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	429a      	cmp	r2, r3
 800f592:	dbf1      	blt.n	800f578 <_write+0x12>
  }
  return len;
 800f594:	687b      	ldr	r3, [r7, #4]
}
 800f596:	4618      	mov	r0, r3
 800f598:	3718      	adds	r7, #24
 800f59a:	46bd      	mov	sp, r7
 800f59c:	bd80      	pop	{r7, pc}

0800f59e <_close>:

int _close(int file)
{
 800f59e:	b480      	push	{r7}
 800f5a0:	b083      	sub	sp, #12
 800f5a2:	af00      	add	r7, sp, #0
 800f5a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800f5a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	370c      	adds	r7, #12
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b4:	4770      	bx	lr

0800f5b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800f5b6:	b480      	push	{r7}
 800f5b8:	b083      	sub	sp, #12
 800f5ba:	af00      	add	r7, sp, #0
 800f5bc:	6078      	str	r0, [r7, #4]
 800f5be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f5c6:	605a      	str	r2, [r3, #4]
  return 0;
 800f5c8:	2300      	movs	r3, #0
}
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	370c      	adds	r7, #12
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d4:	4770      	bx	lr

0800f5d6 <_isatty>:

int _isatty(int file)
{
 800f5d6:	b480      	push	{r7}
 800f5d8:	b083      	sub	sp, #12
 800f5da:	af00      	add	r7, sp, #0
 800f5dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800f5de:	2301      	movs	r3, #1
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	370c      	adds	r7, #12
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ea:	4770      	bx	lr

0800f5ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800f5ec:	b480      	push	{r7}
 800f5ee:	b085      	sub	sp, #20
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	60f8      	str	r0, [r7, #12]
 800f5f4:	60b9      	str	r1, [r7, #8]
 800f5f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800f5f8:	2300      	movs	r3, #0
}
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	3714      	adds	r7, #20
 800f5fe:	46bd      	mov	sp, r7
 800f600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f604:	4770      	bx	lr
	...

0800f608 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b086      	sub	sp, #24
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800f610:	4a14      	ldr	r2, [pc, #80]	; (800f664 <_sbrk+0x5c>)
 800f612:	4b15      	ldr	r3, [pc, #84]	; (800f668 <_sbrk+0x60>)
 800f614:	1ad3      	subs	r3, r2, r3
 800f616:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800f61c:	4b13      	ldr	r3, [pc, #76]	; (800f66c <_sbrk+0x64>)
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d102      	bne.n	800f62a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800f624:	4b11      	ldr	r3, [pc, #68]	; (800f66c <_sbrk+0x64>)
 800f626:	4a12      	ldr	r2, [pc, #72]	; (800f670 <_sbrk+0x68>)
 800f628:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800f62a:	4b10      	ldr	r3, [pc, #64]	; (800f66c <_sbrk+0x64>)
 800f62c:	681a      	ldr	r2, [r3, #0]
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	4413      	add	r3, r2
 800f632:	693a      	ldr	r2, [r7, #16]
 800f634:	429a      	cmp	r2, r3
 800f636:	d207      	bcs.n	800f648 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800f638:	f005 fb46 	bl	8014cc8 <__errno>
 800f63c:	4603      	mov	r3, r0
 800f63e:	220c      	movs	r2, #12
 800f640:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800f642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f646:	e009      	b.n	800f65c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800f648:	4b08      	ldr	r3, [pc, #32]	; (800f66c <_sbrk+0x64>)
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800f64e:	4b07      	ldr	r3, [pc, #28]	; (800f66c <_sbrk+0x64>)
 800f650:	681a      	ldr	r2, [r3, #0]
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	4413      	add	r3, r2
 800f656:	4a05      	ldr	r2, [pc, #20]	; (800f66c <_sbrk+0x64>)
 800f658:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800f65a:	68fb      	ldr	r3, [r7, #12]
}
 800f65c:	4618      	mov	r0, r3
 800f65e:	3718      	adds	r7, #24
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}
 800f664:	20020000 	.word	0x20020000
 800f668:	00000400 	.word	0x00000400
 800f66c:	200003d8 	.word	0x200003d8
 800f670:	20000560 	.word	0x20000560

0800f674 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800f674:	b480      	push	{r7}
 800f676:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800f678:	4b06      	ldr	r3, [pc, #24]	; (800f694 <SystemInit+0x20>)
 800f67a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f67e:	4a05      	ldr	r2, [pc, #20]	; (800f694 <SystemInit+0x20>)
 800f680:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f684:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800f688:	bf00      	nop
 800f68a:	46bd      	mov	sp, r7
 800f68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f690:	4770      	bx	lr
 800f692:	bf00      	nop
 800f694:	e000ed00 	.word	0xe000ed00

0800f698 <Reset_Handler>:
 800f698:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f6d0 <LoopFillZerobss+0x12>
 800f69c:	480d      	ldr	r0, [pc, #52]	; (800f6d4 <LoopFillZerobss+0x16>)
 800f69e:	490e      	ldr	r1, [pc, #56]	; (800f6d8 <LoopFillZerobss+0x1a>)
 800f6a0:	4a0e      	ldr	r2, [pc, #56]	; (800f6dc <LoopFillZerobss+0x1e>)
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	e002      	b.n	800f6ac <LoopCopyDataInit>

0800f6a6 <CopyDataInit>:
 800f6a6:	58d4      	ldr	r4, [r2, r3]
 800f6a8:	50c4      	str	r4, [r0, r3]
 800f6aa:	3304      	adds	r3, #4

0800f6ac <LoopCopyDataInit>:
 800f6ac:	18c4      	adds	r4, r0, r3
 800f6ae:	428c      	cmp	r4, r1
 800f6b0:	d3f9      	bcc.n	800f6a6 <CopyDataInit>
 800f6b2:	4a0b      	ldr	r2, [pc, #44]	; (800f6e0 <LoopFillZerobss+0x22>)
 800f6b4:	4c0b      	ldr	r4, [pc, #44]	; (800f6e4 <LoopFillZerobss+0x26>)
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	e001      	b.n	800f6be <LoopFillZerobss>

0800f6ba <FillZerobss>:
 800f6ba:	6013      	str	r3, [r2, #0]
 800f6bc:	3204      	adds	r2, #4

0800f6be <LoopFillZerobss>:
 800f6be:	42a2      	cmp	r2, r4
 800f6c0:	d3fb      	bcc.n	800f6ba <FillZerobss>
 800f6c2:	f7ff ffd7 	bl	800f674 <SystemInit>
 800f6c6:	f005 fb05 	bl	8014cd4 <__libc_init_array>
 800f6ca:	f7fc fc35 	bl	800bf38 <main>
 800f6ce:	4770      	bx	lr
 800f6d0:	20020000 	.word	0x20020000
 800f6d4:	20000000 	.word	0x20000000
 800f6d8:	200001dc 	.word	0x200001dc
 800f6dc:	0801ad58 	.word	0x0801ad58
 800f6e0:	200001dc 	.word	0x200001dc
 800f6e4:	2000055c 	.word	0x2000055c

0800f6e8 <ADC_IRQHandler>:
 800f6e8:	e7fe      	b.n	800f6e8 <ADC_IRQHandler>
	...

0800f6ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800f6f0:	4b0e      	ldr	r3, [pc, #56]	; (800f72c <HAL_Init+0x40>)
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	4a0d      	ldr	r2, [pc, #52]	; (800f72c <HAL_Init+0x40>)
 800f6f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f6fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800f6fc:	4b0b      	ldr	r3, [pc, #44]	; (800f72c <HAL_Init+0x40>)
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	4a0a      	ldr	r2, [pc, #40]	; (800f72c <HAL_Init+0x40>)
 800f702:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f706:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f708:	4b08      	ldr	r3, [pc, #32]	; (800f72c <HAL_Init+0x40>)
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	4a07      	ldr	r2, [pc, #28]	; (800f72c <HAL_Init+0x40>)
 800f70e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f712:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800f714:	2003      	movs	r0, #3
 800f716:	f000 f94f 	bl	800f9b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800f71a:	2000      	movs	r0, #0
 800f71c:	f000 f808 	bl	800f730 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800f720:	f7ff fd9e 	bl	800f260 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800f724:	2300      	movs	r3, #0
}
 800f726:	4618      	mov	r0, r3
 800f728:	bd80      	pop	{r7, pc}
 800f72a:	bf00      	nop
 800f72c:	40023c00 	.word	0x40023c00

0800f730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b082      	sub	sp, #8
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800f738:	4b12      	ldr	r3, [pc, #72]	; (800f784 <HAL_InitTick+0x54>)
 800f73a:	681a      	ldr	r2, [r3, #0]
 800f73c:	4b12      	ldr	r3, [pc, #72]	; (800f788 <HAL_InitTick+0x58>)
 800f73e:	781b      	ldrb	r3, [r3, #0]
 800f740:	4619      	mov	r1, r3
 800f742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f746:	fbb3 f3f1 	udiv	r3, r3, r1
 800f74a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f74e:	4618      	mov	r0, r3
 800f750:	f000 f967 	bl	800fa22 <HAL_SYSTICK_Config>
 800f754:	4603      	mov	r3, r0
 800f756:	2b00      	cmp	r3, #0
 800f758:	d001      	beq.n	800f75e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800f75a:	2301      	movs	r3, #1
 800f75c:	e00e      	b.n	800f77c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	2b0f      	cmp	r3, #15
 800f762:	d80a      	bhi.n	800f77a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800f764:	2200      	movs	r2, #0
 800f766:	6879      	ldr	r1, [r7, #4]
 800f768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f76c:	f000 f92f 	bl	800f9ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800f770:	4a06      	ldr	r2, [pc, #24]	; (800f78c <HAL_InitTick+0x5c>)
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800f776:	2300      	movs	r3, #0
 800f778:	e000      	b.n	800f77c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800f77a:	2301      	movs	r3, #1
}
 800f77c:	4618      	mov	r0, r3
 800f77e:	3708      	adds	r7, #8
 800f780:	46bd      	mov	sp, r7
 800f782:	bd80      	pop	{r7, pc}
 800f784:	20000000 	.word	0x20000000
 800f788:	20000008 	.word	0x20000008
 800f78c:	20000004 	.word	0x20000004

0800f790 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800f790:	b480      	push	{r7}
 800f792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800f794:	4b06      	ldr	r3, [pc, #24]	; (800f7b0 <HAL_IncTick+0x20>)
 800f796:	781b      	ldrb	r3, [r3, #0]
 800f798:	461a      	mov	r2, r3
 800f79a:	4b06      	ldr	r3, [pc, #24]	; (800f7b4 <HAL_IncTick+0x24>)
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	4413      	add	r3, r2
 800f7a0:	4a04      	ldr	r2, [pc, #16]	; (800f7b4 <HAL_IncTick+0x24>)
 800f7a2:	6013      	str	r3, [r2, #0]
}
 800f7a4:	bf00      	nop
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ac:	4770      	bx	lr
 800f7ae:	bf00      	nop
 800f7b0:	20000008 	.word	0x20000008
 800f7b4:	200003dc 	.word	0x200003dc

0800f7b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800f7b8:	b480      	push	{r7}
 800f7ba:	af00      	add	r7, sp, #0
  return uwTick;
 800f7bc:	4b03      	ldr	r3, [pc, #12]	; (800f7cc <HAL_GetTick+0x14>)
 800f7be:	681b      	ldr	r3, [r3, #0]
}
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c8:	4770      	bx	lr
 800f7ca:	bf00      	nop
 800f7cc:	200003dc 	.word	0x200003dc

0800f7d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b084      	sub	sp, #16
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800f7d8:	f7ff ffee 	bl	800f7b8 <HAL_GetTick>
 800f7dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f7e8:	d005      	beq.n	800f7f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800f7ea:	4b0a      	ldr	r3, [pc, #40]	; (800f814 <HAL_Delay+0x44>)
 800f7ec:	781b      	ldrb	r3, [r3, #0]
 800f7ee:	461a      	mov	r2, r3
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	4413      	add	r3, r2
 800f7f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800f7f6:	bf00      	nop
 800f7f8:	f7ff ffde 	bl	800f7b8 <HAL_GetTick>
 800f7fc:	4602      	mov	r2, r0
 800f7fe:	68bb      	ldr	r3, [r7, #8]
 800f800:	1ad3      	subs	r3, r2, r3
 800f802:	68fa      	ldr	r2, [r7, #12]
 800f804:	429a      	cmp	r2, r3
 800f806:	d8f7      	bhi.n	800f7f8 <HAL_Delay+0x28>
  {
  }
}
 800f808:	bf00      	nop
 800f80a:	bf00      	nop
 800f80c:	3710      	adds	r7, #16
 800f80e:	46bd      	mov	sp, r7
 800f810:	bd80      	pop	{r7, pc}
 800f812:	bf00      	nop
 800f814:	20000008 	.word	0x20000008

0800f818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f818:	b480      	push	{r7}
 800f81a:	b085      	sub	sp, #20
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	f003 0307 	and.w	r3, r3, #7
 800f826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800f828:	4b0c      	ldr	r3, [pc, #48]	; (800f85c <__NVIC_SetPriorityGrouping+0x44>)
 800f82a:	68db      	ldr	r3, [r3, #12]
 800f82c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800f82e:	68ba      	ldr	r2, [r7, #8]
 800f830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800f834:	4013      	ands	r3, r2
 800f836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f83c:	68bb      	ldr	r3, [r7, #8]
 800f83e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800f840:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800f844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800f84a:	4a04      	ldr	r2, [pc, #16]	; (800f85c <__NVIC_SetPriorityGrouping+0x44>)
 800f84c:	68bb      	ldr	r3, [r7, #8]
 800f84e:	60d3      	str	r3, [r2, #12]
}
 800f850:	bf00      	nop
 800f852:	3714      	adds	r7, #20
 800f854:	46bd      	mov	sp, r7
 800f856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85a:	4770      	bx	lr
 800f85c:	e000ed00 	.word	0xe000ed00

0800f860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800f860:	b480      	push	{r7}
 800f862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800f864:	4b04      	ldr	r3, [pc, #16]	; (800f878 <__NVIC_GetPriorityGrouping+0x18>)
 800f866:	68db      	ldr	r3, [r3, #12]
 800f868:	0a1b      	lsrs	r3, r3, #8
 800f86a:	f003 0307 	and.w	r3, r3, #7
}
 800f86e:	4618      	mov	r0, r3
 800f870:	46bd      	mov	sp, r7
 800f872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f876:	4770      	bx	lr
 800f878:	e000ed00 	.word	0xe000ed00

0800f87c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f87c:	b480      	push	{r7}
 800f87e:	b083      	sub	sp, #12
 800f880:	af00      	add	r7, sp, #0
 800f882:	4603      	mov	r3, r0
 800f884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	db0b      	blt.n	800f8a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f88e:	79fb      	ldrb	r3, [r7, #7]
 800f890:	f003 021f 	and.w	r2, r3, #31
 800f894:	4907      	ldr	r1, [pc, #28]	; (800f8b4 <__NVIC_EnableIRQ+0x38>)
 800f896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f89a:	095b      	lsrs	r3, r3, #5
 800f89c:	2001      	movs	r0, #1
 800f89e:	fa00 f202 	lsl.w	r2, r0, r2
 800f8a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800f8a6:	bf00      	nop
 800f8a8:	370c      	adds	r7, #12
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b0:	4770      	bx	lr
 800f8b2:	bf00      	nop
 800f8b4:	e000e100 	.word	0xe000e100

0800f8b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800f8b8:	b480      	push	{r7}
 800f8ba:	b083      	sub	sp, #12
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	4603      	mov	r3, r0
 800f8c0:	6039      	str	r1, [r7, #0]
 800f8c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f8c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	db0a      	blt.n	800f8e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	b2da      	uxtb	r2, r3
 800f8d0:	490c      	ldr	r1, [pc, #48]	; (800f904 <__NVIC_SetPriority+0x4c>)
 800f8d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f8d6:	0112      	lsls	r2, r2, #4
 800f8d8:	b2d2      	uxtb	r2, r2
 800f8da:	440b      	add	r3, r1
 800f8dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800f8e0:	e00a      	b.n	800f8f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	b2da      	uxtb	r2, r3
 800f8e6:	4908      	ldr	r1, [pc, #32]	; (800f908 <__NVIC_SetPriority+0x50>)
 800f8e8:	79fb      	ldrb	r3, [r7, #7]
 800f8ea:	f003 030f 	and.w	r3, r3, #15
 800f8ee:	3b04      	subs	r3, #4
 800f8f0:	0112      	lsls	r2, r2, #4
 800f8f2:	b2d2      	uxtb	r2, r2
 800f8f4:	440b      	add	r3, r1
 800f8f6:	761a      	strb	r2, [r3, #24]
}
 800f8f8:	bf00      	nop
 800f8fa:	370c      	adds	r7, #12
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f902:	4770      	bx	lr
 800f904:	e000e100 	.word	0xe000e100
 800f908:	e000ed00 	.word	0xe000ed00

0800f90c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800f90c:	b480      	push	{r7}
 800f90e:	b089      	sub	sp, #36	; 0x24
 800f910:	af00      	add	r7, sp, #0
 800f912:	60f8      	str	r0, [r7, #12]
 800f914:	60b9      	str	r1, [r7, #8]
 800f916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	f003 0307 	and.w	r3, r3, #7
 800f91e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f920:	69fb      	ldr	r3, [r7, #28]
 800f922:	f1c3 0307 	rsb	r3, r3, #7
 800f926:	2b04      	cmp	r3, #4
 800f928:	bf28      	it	cs
 800f92a:	2304      	movcs	r3, #4
 800f92c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f92e:	69fb      	ldr	r3, [r7, #28]
 800f930:	3304      	adds	r3, #4
 800f932:	2b06      	cmp	r3, #6
 800f934:	d902      	bls.n	800f93c <NVIC_EncodePriority+0x30>
 800f936:	69fb      	ldr	r3, [r7, #28]
 800f938:	3b03      	subs	r3, #3
 800f93a:	e000      	b.n	800f93e <NVIC_EncodePriority+0x32>
 800f93c:	2300      	movs	r3, #0
 800f93e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f940:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f944:	69bb      	ldr	r3, [r7, #24]
 800f946:	fa02 f303 	lsl.w	r3, r2, r3
 800f94a:	43da      	mvns	r2, r3
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	401a      	ands	r2, r3
 800f950:	697b      	ldr	r3, [r7, #20]
 800f952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800f954:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f958:	697b      	ldr	r3, [r7, #20]
 800f95a:	fa01 f303 	lsl.w	r3, r1, r3
 800f95e:	43d9      	mvns	r1, r3
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f964:	4313      	orrs	r3, r2
         );
}
 800f966:	4618      	mov	r0, r3
 800f968:	3724      	adds	r7, #36	; 0x24
 800f96a:	46bd      	mov	sp, r7
 800f96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f970:	4770      	bx	lr
	...

0800f974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b082      	sub	sp, #8
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	3b01      	subs	r3, #1
 800f980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f984:	d301      	bcc.n	800f98a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800f986:	2301      	movs	r3, #1
 800f988:	e00f      	b.n	800f9aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f98a:	4a0a      	ldr	r2, [pc, #40]	; (800f9b4 <SysTick_Config+0x40>)
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	3b01      	subs	r3, #1
 800f990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800f992:	210f      	movs	r1, #15
 800f994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f998:	f7ff ff8e 	bl	800f8b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f99c:	4b05      	ldr	r3, [pc, #20]	; (800f9b4 <SysTick_Config+0x40>)
 800f99e:	2200      	movs	r2, #0
 800f9a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f9a2:	4b04      	ldr	r3, [pc, #16]	; (800f9b4 <SysTick_Config+0x40>)
 800f9a4:	2207      	movs	r2, #7
 800f9a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f9a8:	2300      	movs	r3, #0
}
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	3708      	adds	r7, #8
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	bd80      	pop	{r7, pc}
 800f9b2:	bf00      	nop
 800f9b4:	e000e010 	.word	0xe000e010

0800f9b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b082      	sub	sp, #8
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800f9c0:	6878      	ldr	r0, [r7, #4]
 800f9c2:	f7ff ff29 	bl	800f818 <__NVIC_SetPriorityGrouping>
}
 800f9c6:	bf00      	nop
 800f9c8:	3708      	adds	r7, #8
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	bd80      	pop	{r7, pc}

0800f9ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f9ce:	b580      	push	{r7, lr}
 800f9d0:	b086      	sub	sp, #24
 800f9d2:	af00      	add	r7, sp, #0
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	60b9      	str	r1, [r7, #8]
 800f9d8:	607a      	str	r2, [r7, #4]
 800f9da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800f9dc:	2300      	movs	r3, #0
 800f9de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800f9e0:	f7ff ff3e 	bl	800f860 <__NVIC_GetPriorityGrouping>
 800f9e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800f9e6:	687a      	ldr	r2, [r7, #4]
 800f9e8:	68b9      	ldr	r1, [r7, #8]
 800f9ea:	6978      	ldr	r0, [r7, #20]
 800f9ec:	f7ff ff8e 	bl	800f90c <NVIC_EncodePriority>
 800f9f0:	4602      	mov	r2, r0
 800f9f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f9f6:	4611      	mov	r1, r2
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	f7ff ff5d 	bl	800f8b8 <__NVIC_SetPriority>
}
 800f9fe:	bf00      	nop
 800fa00:	3718      	adds	r7, #24
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}

0800fa06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800fa06:	b580      	push	{r7, lr}
 800fa08:	b082      	sub	sp, #8
 800fa0a:	af00      	add	r7, sp, #0
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800fa10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fa14:	4618      	mov	r0, r3
 800fa16:	f7ff ff31 	bl	800f87c <__NVIC_EnableIRQ>
}
 800fa1a:	bf00      	nop
 800fa1c:	3708      	adds	r7, #8
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bd80      	pop	{r7, pc}

0800fa22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800fa22:	b580      	push	{r7, lr}
 800fa24:	b082      	sub	sp, #8
 800fa26:	af00      	add	r7, sp, #0
 800fa28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800fa2a:	6878      	ldr	r0, [r7, #4]
 800fa2c:	f7ff ffa2 	bl	800f974 <SysTick_Config>
 800fa30:	4603      	mov	r3, r0
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	3708      	adds	r7, #8
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}

0800fa3a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800fa3a:	b580      	push	{r7, lr}
 800fa3c:	b084      	sub	sp, #16
 800fa3e:	af00      	add	r7, sp, #0
 800fa40:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa46:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800fa48:	f7ff feb6 	bl	800f7b8 <HAL_GetTick>
 800fa4c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800fa54:	b2db      	uxtb	r3, r3
 800fa56:	2b02      	cmp	r3, #2
 800fa58:	d008      	beq.n	800fa6c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	2280      	movs	r2, #128	; 0x80
 800fa5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2200      	movs	r2, #0
 800fa64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800fa68:	2301      	movs	r3, #1
 800fa6a:	e052      	b.n	800fb12 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	681a      	ldr	r2, [r3, #0]
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	f022 0216 	bic.w	r2, r2, #22
 800fa7a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	695a      	ldr	r2, [r3, #20]
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fa8a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d103      	bne.n	800fa9c <HAL_DMA_Abort+0x62>
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d007      	beq.n	800faac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	681a      	ldr	r2, [r3, #0]
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	f022 0208 	bic.w	r2, r2, #8
 800faaa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	681a      	ldr	r2, [r3, #0]
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	f022 0201 	bic.w	r2, r2, #1
 800faba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800fabc:	e013      	b.n	800fae6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800fabe:	f7ff fe7b 	bl	800f7b8 <HAL_GetTick>
 800fac2:	4602      	mov	r2, r0
 800fac4:	68bb      	ldr	r3, [r7, #8]
 800fac6:	1ad3      	subs	r3, r2, r3
 800fac8:	2b05      	cmp	r3, #5
 800faca:	d90c      	bls.n	800fae6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2220      	movs	r2, #32
 800fad0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	2203      	movs	r2, #3
 800fad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2200      	movs	r2, #0
 800fade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800fae2:	2303      	movs	r3, #3
 800fae4:	e015      	b.n	800fb12 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	f003 0301 	and.w	r3, r3, #1
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d1e4      	bne.n	800fabe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800faf8:	223f      	movs	r2, #63	; 0x3f
 800fafa:	409a      	lsls	r2, r3
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	2201      	movs	r2, #1
 800fb04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800fb10:	2300      	movs	r3, #0
}
 800fb12:	4618      	mov	r0, r3
 800fb14:	3710      	adds	r7, #16
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd80      	pop	{r7, pc}

0800fb1a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800fb1a:	b480      	push	{r7}
 800fb1c:	b083      	sub	sp, #12
 800fb1e:	af00      	add	r7, sp, #0
 800fb20:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800fb28:	b2db      	uxtb	r3, r3
 800fb2a:	2b02      	cmp	r3, #2
 800fb2c:	d004      	beq.n	800fb38 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	2280      	movs	r2, #128	; 0x80
 800fb32:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800fb34:	2301      	movs	r3, #1
 800fb36:	e00c      	b.n	800fb52 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	2205      	movs	r2, #5
 800fb3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	681a      	ldr	r2, [r3, #0]
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	f022 0201 	bic.w	r2, r2, #1
 800fb4e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800fb50:	2300      	movs	r3, #0
}
 800fb52:	4618      	mov	r0, r3
 800fb54:	370c      	adds	r7, #12
 800fb56:	46bd      	mov	sp, r7
 800fb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5c:	4770      	bx	lr

0800fb5e <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800fb5e:	b480      	push	{r7}
 800fb60:	b083      	sub	sp, #12
 800fb62:	af00      	add	r7, sp, #0
 800fb64:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	370c      	adds	r7, #12
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb74:	4770      	bx	lr
	...

0800fb78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800fb78:	b480      	push	{r7}
 800fb7a:	b089      	sub	sp, #36	; 0x24
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
 800fb80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800fb82:	2300      	movs	r3, #0
 800fb84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800fb86:	2300      	movs	r3, #0
 800fb88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fb8e:	2300      	movs	r3, #0
 800fb90:	61fb      	str	r3, [r7, #28]
 800fb92:	e165      	b.n	800fe60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800fb94:	2201      	movs	r2, #1
 800fb96:	69fb      	ldr	r3, [r7, #28]
 800fb98:	fa02 f303 	lsl.w	r3, r2, r3
 800fb9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	697a      	ldr	r2, [r7, #20]
 800fba4:	4013      	ands	r3, r2
 800fba6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800fba8:	693a      	ldr	r2, [r7, #16]
 800fbaa:	697b      	ldr	r3, [r7, #20]
 800fbac:	429a      	cmp	r2, r3
 800fbae:	f040 8154 	bne.w	800fe5a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800fbb2:	683b      	ldr	r3, [r7, #0]
 800fbb4:	685b      	ldr	r3, [r3, #4]
 800fbb6:	f003 0303 	and.w	r3, r3, #3
 800fbba:	2b01      	cmp	r3, #1
 800fbbc:	d005      	beq.n	800fbca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800fbbe:	683b      	ldr	r3, [r7, #0]
 800fbc0:	685b      	ldr	r3, [r3, #4]
 800fbc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800fbc6:	2b02      	cmp	r3, #2
 800fbc8:	d130      	bne.n	800fc2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	689b      	ldr	r3, [r3, #8]
 800fbce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800fbd0:	69fb      	ldr	r3, [r7, #28]
 800fbd2:	005b      	lsls	r3, r3, #1
 800fbd4:	2203      	movs	r2, #3
 800fbd6:	fa02 f303 	lsl.w	r3, r2, r3
 800fbda:	43db      	mvns	r3, r3
 800fbdc:	69ba      	ldr	r2, [r7, #24]
 800fbde:	4013      	ands	r3, r2
 800fbe0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800fbe2:	683b      	ldr	r3, [r7, #0]
 800fbe4:	68da      	ldr	r2, [r3, #12]
 800fbe6:	69fb      	ldr	r3, [r7, #28]
 800fbe8:	005b      	lsls	r3, r3, #1
 800fbea:	fa02 f303 	lsl.w	r3, r2, r3
 800fbee:	69ba      	ldr	r2, [r7, #24]
 800fbf0:	4313      	orrs	r3, r2
 800fbf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	69ba      	ldr	r2, [r7, #24]
 800fbf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	685b      	ldr	r3, [r3, #4]
 800fbfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800fc00:	2201      	movs	r2, #1
 800fc02:	69fb      	ldr	r3, [r7, #28]
 800fc04:	fa02 f303 	lsl.w	r3, r2, r3
 800fc08:	43db      	mvns	r3, r3
 800fc0a:	69ba      	ldr	r2, [r7, #24]
 800fc0c:	4013      	ands	r3, r2
 800fc0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800fc10:	683b      	ldr	r3, [r7, #0]
 800fc12:	685b      	ldr	r3, [r3, #4]
 800fc14:	091b      	lsrs	r3, r3, #4
 800fc16:	f003 0201 	and.w	r2, r3, #1
 800fc1a:	69fb      	ldr	r3, [r7, #28]
 800fc1c:	fa02 f303 	lsl.w	r3, r2, r3
 800fc20:	69ba      	ldr	r2, [r7, #24]
 800fc22:	4313      	orrs	r3, r2
 800fc24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	69ba      	ldr	r2, [r7, #24]
 800fc2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800fc2c:	683b      	ldr	r3, [r7, #0]
 800fc2e:	685b      	ldr	r3, [r3, #4]
 800fc30:	f003 0303 	and.w	r3, r3, #3
 800fc34:	2b03      	cmp	r3, #3
 800fc36:	d017      	beq.n	800fc68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	68db      	ldr	r3, [r3, #12]
 800fc3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800fc3e:	69fb      	ldr	r3, [r7, #28]
 800fc40:	005b      	lsls	r3, r3, #1
 800fc42:	2203      	movs	r2, #3
 800fc44:	fa02 f303 	lsl.w	r3, r2, r3
 800fc48:	43db      	mvns	r3, r3
 800fc4a:	69ba      	ldr	r2, [r7, #24]
 800fc4c:	4013      	ands	r3, r2
 800fc4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800fc50:	683b      	ldr	r3, [r7, #0]
 800fc52:	689a      	ldr	r2, [r3, #8]
 800fc54:	69fb      	ldr	r3, [r7, #28]
 800fc56:	005b      	lsls	r3, r3, #1
 800fc58:	fa02 f303 	lsl.w	r3, r2, r3
 800fc5c:	69ba      	ldr	r2, [r7, #24]
 800fc5e:	4313      	orrs	r3, r2
 800fc60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	69ba      	ldr	r2, [r7, #24]
 800fc66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	685b      	ldr	r3, [r3, #4]
 800fc6c:	f003 0303 	and.w	r3, r3, #3
 800fc70:	2b02      	cmp	r3, #2
 800fc72:	d123      	bne.n	800fcbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800fc74:	69fb      	ldr	r3, [r7, #28]
 800fc76:	08da      	lsrs	r2, r3, #3
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	3208      	adds	r2, #8
 800fc7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800fc82:	69fb      	ldr	r3, [r7, #28]
 800fc84:	f003 0307 	and.w	r3, r3, #7
 800fc88:	009b      	lsls	r3, r3, #2
 800fc8a:	220f      	movs	r2, #15
 800fc8c:	fa02 f303 	lsl.w	r3, r2, r3
 800fc90:	43db      	mvns	r3, r3
 800fc92:	69ba      	ldr	r2, [r7, #24]
 800fc94:	4013      	ands	r3, r2
 800fc96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	691a      	ldr	r2, [r3, #16]
 800fc9c:	69fb      	ldr	r3, [r7, #28]
 800fc9e:	f003 0307 	and.w	r3, r3, #7
 800fca2:	009b      	lsls	r3, r3, #2
 800fca4:	fa02 f303 	lsl.w	r3, r2, r3
 800fca8:	69ba      	ldr	r2, [r7, #24]
 800fcaa:	4313      	orrs	r3, r2
 800fcac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800fcae:	69fb      	ldr	r3, [r7, #28]
 800fcb0:	08da      	lsrs	r2, r3, #3
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	3208      	adds	r2, #8
 800fcb6:	69b9      	ldr	r1, [r7, #24]
 800fcb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800fcc2:	69fb      	ldr	r3, [r7, #28]
 800fcc4:	005b      	lsls	r3, r3, #1
 800fcc6:	2203      	movs	r2, #3
 800fcc8:	fa02 f303 	lsl.w	r3, r2, r3
 800fccc:	43db      	mvns	r3, r3
 800fcce:	69ba      	ldr	r2, [r7, #24]
 800fcd0:	4013      	ands	r3, r2
 800fcd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	685b      	ldr	r3, [r3, #4]
 800fcd8:	f003 0203 	and.w	r2, r3, #3
 800fcdc:	69fb      	ldr	r3, [r7, #28]
 800fcde:	005b      	lsls	r3, r3, #1
 800fce0:	fa02 f303 	lsl.w	r3, r2, r3
 800fce4:	69ba      	ldr	r2, [r7, #24]
 800fce6:	4313      	orrs	r3, r2
 800fce8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	69ba      	ldr	r2, [r7, #24]
 800fcee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	685b      	ldr	r3, [r3, #4]
 800fcf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	f000 80ae 	beq.w	800fe5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fcfe:	2300      	movs	r3, #0
 800fd00:	60fb      	str	r3, [r7, #12]
 800fd02:	4b5d      	ldr	r3, [pc, #372]	; (800fe78 <HAL_GPIO_Init+0x300>)
 800fd04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd06:	4a5c      	ldr	r2, [pc, #368]	; (800fe78 <HAL_GPIO_Init+0x300>)
 800fd08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fd0c:	6453      	str	r3, [r2, #68]	; 0x44
 800fd0e:	4b5a      	ldr	r3, [pc, #360]	; (800fe78 <HAL_GPIO_Init+0x300>)
 800fd10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fd16:	60fb      	str	r3, [r7, #12]
 800fd18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800fd1a:	4a58      	ldr	r2, [pc, #352]	; (800fe7c <HAL_GPIO_Init+0x304>)
 800fd1c:	69fb      	ldr	r3, [r7, #28]
 800fd1e:	089b      	lsrs	r3, r3, #2
 800fd20:	3302      	adds	r3, #2
 800fd22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800fd28:	69fb      	ldr	r3, [r7, #28]
 800fd2a:	f003 0303 	and.w	r3, r3, #3
 800fd2e:	009b      	lsls	r3, r3, #2
 800fd30:	220f      	movs	r2, #15
 800fd32:	fa02 f303 	lsl.w	r3, r2, r3
 800fd36:	43db      	mvns	r3, r3
 800fd38:	69ba      	ldr	r2, [r7, #24]
 800fd3a:	4013      	ands	r3, r2
 800fd3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	4a4f      	ldr	r2, [pc, #316]	; (800fe80 <HAL_GPIO_Init+0x308>)
 800fd42:	4293      	cmp	r3, r2
 800fd44:	d025      	beq.n	800fd92 <HAL_GPIO_Init+0x21a>
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	4a4e      	ldr	r2, [pc, #312]	; (800fe84 <HAL_GPIO_Init+0x30c>)
 800fd4a:	4293      	cmp	r3, r2
 800fd4c:	d01f      	beq.n	800fd8e <HAL_GPIO_Init+0x216>
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	4a4d      	ldr	r2, [pc, #308]	; (800fe88 <HAL_GPIO_Init+0x310>)
 800fd52:	4293      	cmp	r3, r2
 800fd54:	d019      	beq.n	800fd8a <HAL_GPIO_Init+0x212>
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	4a4c      	ldr	r2, [pc, #304]	; (800fe8c <HAL_GPIO_Init+0x314>)
 800fd5a:	4293      	cmp	r3, r2
 800fd5c:	d013      	beq.n	800fd86 <HAL_GPIO_Init+0x20e>
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	4a4b      	ldr	r2, [pc, #300]	; (800fe90 <HAL_GPIO_Init+0x318>)
 800fd62:	4293      	cmp	r3, r2
 800fd64:	d00d      	beq.n	800fd82 <HAL_GPIO_Init+0x20a>
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	4a4a      	ldr	r2, [pc, #296]	; (800fe94 <HAL_GPIO_Init+0x31c>)
 800fd6a:	4293      	cmp	r3, r2
 800fd6c:	d007      	beq.n	800fd7e <HAL_GPIO_Init+0x206>
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	4a49      	ldr	r2, [pc, #292]	; (800fe98 <HAL_GPIO_Init+0x320>)
 800fd72:	4293      	cmp	r3, r2
 800fd74:	d101      	bne.n	800fd7a <HAL_GPIO_Init+0x202>
 800fd76:	2306      	movs	r3, #6
 800fd78:	e00c      	b.n	800fd94 <HAL_GPIO_Init+0x21c>
 800fd7a:	2307      	movs	r3, #7
 800fd7c:	e00a      	b.n	800fd94 <HAL_GPIO_Init+0x21c>
 800fd7e:	2305      	movs	r3, #5
 800fd80:	e008      	b.n	800fd94 <HAL_GPIO_Init+0x21c>
 800fd82:	2304      	movs	r3, #4
 800fd84:	e006      	b.n	800fd94 <HAL_GPIO_Init+0x21c>
 800fd86:	2303      	movs	r3, #3
 800fd88:	e004      	b.n	800fd94 <HAL_GPIO_Init+0x21c>
 800fd8a:	2302      	movs	r3, #2
 800fd8c:	e002      	b.n	800fd94 <HAL_GPIO_Init+0x21c>
 800fd8e:	2301      	movs	r3, #1
 800fd90:	e000      	b.n	800fd94 <HAL_GPIO_Init+0x21c>
 800fd92:	2300      	movs	r3, #0
 800fd94:	69fa      	ldr	r2, [r7, #28]
 800fd96:	f002 0203 	and.w	r2, r2, #3
 800fd9a:	0092      	lsls	r2, r2, #2
 800fd9c:	4093      	lsls	r3, r2
 800fd9e:	69ba      	ldr	r2, [r7, #24]
 800fda0:	4313      	orrs	r3, r2
 800fda2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800fda4:	4935      	ldr	r1, [pc, #212]	; (800fe7c <HAL_GPIO_Init+0x304>)
 800fda6:	69fb      	ldr	r3, [r7, #28]
 800fda8:	089b      	lsrs	r3, r3, #2
 800fdaa:	3302      	adds	r3, #2
 800fdac:	69ba      	ldr	r2, [r7, #24]
 800fdae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800fdb2:	4b3a      	ldr	r3, [pc, #232]	; (800fe9c <HAL_GPIO_Init+0x324>)
 800fdb4:	689b      	ldr	r3, [r3, #8]
 800fdb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800fdb8:	693b      	ldr	r3, [r7, #16]
 800fdba:	43db      	mvns	r3, r3
 800fdbc:	69ba      	ldr	r2, [r7, #24]
 800fdbe:	4013      	ands	r3, r2
 800fdc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800fdc2:	683b      	ldr	r3, [r7, #0]
 800fdc4:	685b      	ldr	r3, [r3, #4]
 800fdc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d003      	beq.n	800fdd6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800fdce:	69ba      	ldr	r2, [r7, #24]
 800fdd0:	693b      	ldr	r3, [r7, #16]
 800fdd2:	4313      	orrs	r3, r2
 800fdd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800fdd6:	4a31      	ldr	r2, [pc, #196]	; (800fe9c <HAL_GPIO_Init+0x324>)
 800fdd8:	69bb      	ldr	r3, [r7, #24]
 800fdda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800fddc:	4b2f      	ldr	r3, [pc, #188]	; (800fe9c <HAL_GPIO_Init+0x324>)
 800fdde:	68db      	ldr	r3, [r3, #12]
 800fde0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800fde2:	693b      	ldr	r3, [r7, #16]
 800fde4:	43db      	mvns	r3, r3
 800fde6:	69ba      	ldr	r2, [r7, #24]
 800fde8:	4013      	ands	r3, r2
 800fdea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800fdec:	683b      	ldr	r3, [r7, #0]
 800fdee:	685b      	ldr	r3, [r3, #4]
 800fdf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d003      	beq.n	800fe00 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800fdf8:	69ba      	ldr	r2, [r7, #24]
 800fdfa:	693b      	ldr	r3, [r7, #16]
 800fdfc:	4313      	orrs	r3, r2
 800fdfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800fe00:	4a26      	ldr	r2, [pc, #152]	; (800fe9c <HAL_GPIO_Init+0x324>)
 800fe02:	69bb      	ldr	r3, [r7, #24]
 800fe04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800fe06:	4b25      	ldr	r3, [pc, #148]	; (800fe9c <HAL_GPIO_Init+0x324>)
 800fe08:	685b      	ldr	r3, [r3, #4]
 800fe0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800fe0c:	693b      	ldr	r3, [r7, #16]
 800fe0e:	43db      	mvns	r3, r3
 800fe10:	69ba      	ldr	r2, [r7, #24]
 800fe12:	4013      	ands	r3, r2
 800fe14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	685b      	ldr	r3, [r3, #4]
 800fe1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d003      	beq.n	800fe2a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800fe22:	69ba      	ldr	r2, [r7, #24]
 800fe24:	693b      	ldr	r3, [r7, #16]
 800fe26:	4313      	orrs	r3, r2
 800fe28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800fe2a:	4a1c      	ldr	r2, [pc, #112]	; (800fe9c <HAL_GPIO_Init+0x324>)
 800fe2c:	69bb      	ldr	r3, [r7, #24]
 800fe2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800fe30:	4b1a      	ldr	r3, [pc, #104]	; (800fe9c <HAL_GPIO_Init+0x324>)
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800fe36:	693b      	ldr	r3, [r7, #16]
 800fe38:	43db      	mvns	r3, r3
 800fe3a:	69ba      	ldr	r2, [r7, #24]
 800fe3c:	4013      	ands	r3, r2
 800fe3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	685b      	ldr	r3, [r3, #4]
 800fe44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d003      	beq.n	800fe54 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800fe4c:	69ba      	ldr	r2, [r7, #24]
 800fe4e:	693b      	ldr	r3, [r7, #16]
 800fe50:	4313      	orrs	r3, r2
 800fe52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800fe54:	4a11      	ldr	r2, [pc, #68]	; (800fe9c <HAL_GPIO_Init+0x324>)
 800fe56:	69bb      	ldr	r3, [r7, #24]
 800fe58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fe5a:	69fb      	ldr	r3, [r7, #28]
 800fe5c:	3301      	adds	r3, #1
 800fe5e:	61fb      	str	r3, [r7, #28]
 800fe60:	69fb      	ldr	r3, [r7, #28]
 800fe62:	2b0f      	cmp	r3, #15
 800fe64:	f67f ae96 	bls.w	800fb94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800fe68:	bf00      	nop
 800fe6a:	bf00      	nop
 800fe6c:	3724      	adds	r7, #36	; 0x24
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe74:	4770      	bx	lr
 800fe76:	bf00      	nop
 800fe78:	40023800 	.word	0x40023800
 800fe7c:	40013800 	.word	0x40013800
 800fe80:	40020000 	.word	0x40020000
 800fe84:	40020400 	.word	0x40020400
 800fe88:	40020800 	.word	0x40020800
 800fe8c:	40020c00 	.word	0x40020c00
 800fe90:	40021000 	.word	0x40021000
 800fe94:	40021400 	.word	0x40021400
 800fe98:	40021800 	.word	0x40021800
 800fe9c:	40013c00 	.word	0x40013c00

0800fea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800fea0:	b480      	push	{r7}
 800fea2:	b083      	sub	sp, #12
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
 800fea8:	460b      	mov	r3, r1
 800feaa:	807b      	strh	r3, [r7, #2]
 800feac:	4613      	mov	r3, r2
 800feae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800feb0:	787b      	ldrb	r3, [r7, #1]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d003      	beq.n	800febe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800feb6:	887a      	ldrh	r2, [r7, #2]
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800febc:	e003      	b.n	800fec6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800febe:	887b      	ldrh	r3, [r7, #2]
 800fec0:	041a      	lsls	r2, r3, #16
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	619a      	str	r2, [r3, #24]
}
 800fec6:	bf00      	nop
 800fec8:	370c      	adds	r7, #12
 800feca:	46bd      	mov	sp, r7
 800fecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed0:	4770      	bx	lr
	...

0800fed4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b082      	sub	sp, #8
 800fed8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800feda:	2300      	movs	r3, #0
 800fedc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800fede:	2300      	movs	r3, #0
 800fee0:	603b      	str	r3, [r7, #0]
 800fee2:	4b20      	ldr	r3, [pc, #128]	; (800ff64 <HAL_PWREx_EnableOverDrive+0x90>)
 800fee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fee6:	4a1f      	ldr	r2, [pc, #124]	; (800ff64 <HAL_PWREx_EnableOverDrive+0x90>)
 800fee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800feec:	6413      	str	r3, [r2, #64]	; 0x40
 800feee:	4b1d      	ldr	r3, [pc, #116]	; (800ff64 <HAL_PWREx_EnableOverDrive+0x90>)
 800fef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fef6:	603b      	str	r3, [r7, #0]
 800fef8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800fefa:	4b1b      	ldr	r3, [pc, #108]	; (800ff68 <HAL_PWREx_EnableOverDrive+0x94>)
 800fefc:	2201      	movs	r2, #1
 800fefe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ff00:	f7ff fc5a 	bl	800f7b8 <HAL_GetTick>
 800ff04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ff06:	e009      	b.n	800ff1c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ff08:	f7ff fc56 	bl	800f7b8 <HAL_GetTick>
 800ff0c:	4602      	mov	r2, r0
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	1ad3      	subs	r3, r2, r3
 800ff12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ff16:	d901      	bls.n	800ff1c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800ff18:	2303      	movs	r3, #3
 800ff1a:	e01f      	b.n	800ff5c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ff1c:	4b13      	ldr	r3, [pc, #76]	; (800ff6c <HAL_PWREx_EnableOverDrive+0x98>)
 800ff1e:	685b      	ldr	r3, [r3, #4]
 800ff20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ff24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff28:	d1ee      	bne.n	800ff08 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800ff2a:	4b11      	ldr	r3, [pc, #68]	; (800ff70 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ff2c:	2201      	movs	r2, #1
 800ff2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ff30:	f7ff fc42 	bl	800f7b8 <HAL_GetTick>
 800ff34:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ff36:	e009      	b.n	800ff4c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ff38:	f7ff fc3e 	bl	800f7b8 <HAL_GetTick>
 800ff3c:	4602      	mov	r2, r0
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	1ad3      	subs	r3, r2, r3
 800ff42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ff46:	d901      	bls.n	800ff4c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800ff48:	2303      	movs	r3, #3
 800ff4a:	e007      	b.n	800ff5c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ff4c:	4b07      	ldr	r3, [pc, #28]	; (800ff6c <HAL_PWREx_EnableOverDrive+0x98>)
 800ff4e:	685b      	ldr	r3, [r3, #4]
 800ff50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ff54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ff58:	d1ee      	bne.n	800ff38 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800ff5a:	2300      	movs	r3, #0
}
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	3708      	adds	r7, #8
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd80      	pop	{r7, pc}
 800ff64:	40023800 	.word	0x40023800
 800ff68:	420e0040 	.word	0x420e0040
 800ff6c:	40007000 	.word	0x40007000
 800ff70:	420e0044 	.word	0x420e0044

0800ff74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b084      	sub	sp, #16
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]
 800ff7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d101      	bne.n	800ff88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ff84:	2301      	movs	r3, #1
 800ff86:	e0cc      	b.n	8010122 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ff88:	4b68      	ldr	r3, [pc, #416]	; (801012c <HAL_RCC_ClockConfig+0x1b8>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	f003 030f 	and.w	r3, r3, #15
 800ff90:	683a      	ldr	r2, [r7, #0]
 800ff92:	429a      	cmp	r2, r3
 800ff94:	d90c      	bls.n	800ffb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ff96:	4b65      	ldr	r3, [pc, #404]	; (801012c <HAL_RCC_ClockConfig+0x1b8>)
 800ff98:	683a      	ldr	r2, [r7, #0]
 800ff9a:	b2d2      	uxtb	r2, r2
 800ff9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ff9e:	4b63      	ldr	r3, [pc, #396]	; (801012c <HAL_RCC_ClockConfig+0x1b8>)
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	f003 030f 	and.w	r3, r3, #15
 800ffa6:	683a      	ldr	r2, [r7, #0]
 800ffa8:	429a      	cmp	r2, r3
 800ffaa:	d001      	beq.n	800ffb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ffac:	2301      	movs	r3, #1
 800ffae:	e0b8      	b.n	8010122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	f003 0302 	and.w	r3, r3, #2
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d020      	beq.n	800fffe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	f003 0304 	and.w	r3, r3, #4
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d005      	beq.n	800ffd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ffc8:	4b59      	ldr	r3, [pc, #356]	; (8010130 <HAL_RCC_ClockConfig+0x1bc>)
 800ffca:	689b      	ldr	r3, [r3, #8]
 800ffcc:	4a58      	ldr	r2, [pc, #352]	; (8010130 <HAL_RCC_ClockConfig+0x1bc>)
 800ffce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ffd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	f003 0308 	and.w	r3, r3, #8
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d005      	beq.n	800ffec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ffe0:	4b53      	ldr	r3, [pc, #332]	; (8010130 <HAL_RCC_ClockConfig+0x1bc>)
 800ffe2:	689b      	ldr	r3, [r3, #8]
 800ffe4:	4a52      	ldr	r2, [pc, #328]	; (8010130 <HAL_RCC_ClockConfig+0x1bc>)
 800ffe6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ffea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ffec:	4b50      	ldr	r3, [pc, #320]	; (8010130 <HAL_RCC_ClockConfig+0x1bc>)
 800ffee:	689b      	ldr	r3, [r3, #8]
 800fff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	689b      	ldr	r3, [r3, #8]
 800fff8:	494d      	ldr	r1, [pc, #308]	; (8010130 <HAL_RCC_ClockConfig+0x1bc>)
 800fffa:	4313      	orrs	r3, r2
 800fffc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	f003 0301 	and.w	r3, r3, #1
 8010006:	2b00      	cmp	r3, #0
 8010008:	d044      	beq.n	8010094 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	685b      	ldr	r3, [r3, #4]
 801000e:	2b01      	cmp	r3, #1
 8010010:	d107      	bne.n	8010022 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010012:	4b47      	ldr	r3, [pc, #284]	; (8010130 <HAL_RCC_ClockConfig+0x1bc>)
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801001a:	2b00      	cmp	r3, #0
 801001c:	d119      	bne.n	8010052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801001e:	2301      	movs	r3, #1
 8010020:	e07f      	b.n	8010122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	685b      	ldr	r3, [r3, #4]
 8010026:	2b02      	cmp	r3, #2
 8010028:	d003      	beq.n	8010032 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801002e:	2b03      	cmp	r3, #3
 8010030:	d107      	bne.n	8010042 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010032:	4b3f      	ldr	r3, [pc, #252]	; (8010130 <HAL_RCC_ClockConfig+0x1bc>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801003a:	2b00      	cmp	r3, #0
 801003c:	d109      	bne.n	8010052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801003e:	2301      	movs	r3, #1
 8010040:	e06f      	b.n	8010122 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010042:	4b3b      	ldr	r3, [pc, #236]	; (8010130 <HAL_RCC_ClockConfig+0x1bc>)
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	f003 0302 	and.w	r3, r3, #2
 801004a:	2b00      	cmp	r3, #0
 801004c:	d101      	bne.n	8010052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801004e:	2301      	movs	r3, #1
 8010050:	e067      	b.n	8010122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8010052:	4b37      	ldr	r3, [pc, #220]	; (8010130 <HAL_RCC_ClockConfig+0x1bc>)
 8010054:	689b      	ldr	r3, [r3, #8]
 8010056:	f023 0203 	bic.w	r2, r3, #3
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	685b      	ldr	r3, [r3, #4]
 801005e:	4934      	ldr	r1, [pc, #208]	; (8010130 <HAL_RCC_ClockConfig+0x1bc>)
 8010060:	4313      	orrs	r3, r2
 8010062:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8010064:	f7ff fba8 	bl	800f7b8 <HAL_GetTick>
 8010068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801006a:	e00a      	b.n	8010082 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801006c:	f7ff fba4 	bl	800f7b8 <HAL_GetTick>
 8010070:	4602      	mov	r2, r0
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	1ad3      	subs	r3, r2, r3
 8010076:	f241 3288 	movw	r2, #5000	; 0x1388
 801007a:	4293      	cmp	r3, r2
 801007c:	d901      	bls.n	8010082 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801007e:	2303      	movs	r3, #3
 8010080:	e04f      	b.n	8010122 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010082:	4b2b      	ldr	r3, [pc, #172]	; (8010130 <HAL_RCC_ClockConfig+0x1bc>)
 8010084:	689b      	ldr	r3, [r3, #8]
 8010086:	f003 020c 	and.w	r2, r3, #12
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	685b      	ldr	r3, [r3, #4]
 801008e:	009b      	lsls	r3, r3, #2
 8010090:	429a      	cmp	r2, r3
 8010092:	d1eb      	bne.n	801006c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8010094:	4b25      	ldr	r3, [pc, #148]	; (801012c <HAL_RCC_ClockConfig+0x1b8>)
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	f003 030f 	and.w	r3, r3, #15
 801009c:	683a      	ldr	r2, [r7, #0]
 801009e:	429a      	cmp	r2, r3
 80100a0:	d20c      	bcs.n	80100bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80100a2:	4b22      	ldr	r3, [pc, #136]	; (801012c <HAL_RCC_ClockConfig+0x1b8>)
 80100a4:	683a      	ldr	r2, [r7, #0]
 80100a6:	b2d2      	uxtb	r2, r2
 80100a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80100aa:	4b20      	ldr	r3, [pc, #128]	; (801012c <HAL_RCC_ClockConfig+0x1b8>)
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	f003 030f 	and.w	r3, r3, #15
 80100b2:	683a      	ldr	r2, [r7, #0]
 80100b4:	429a      	cmp	r2, r3
 80100b6:	d001      	beq.n	80100bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80100b8:	2301      	movs	r3, #1
 80100ba:	e032      	b.n	8010122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	f003 0304 	and.w	r3, r3, #4
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d008      	beq.n	80100da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80100c8:	4b19      	ldr	r3, [pc, #100]	; (8010130 <HAL_RCC_ClockConfig+0x1bc>)
 80100ca:	689b      	ldr	r3, [r3, #8]
 80100cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	68db      	ldr	r3, [r3, #12]
 80100d4:	4916      	ldr	r1, [pc, #88]	; (8010130 <HAL_RCC_ClockConfig+0x1bc>)
 80100d6:	4313      	orrs	r3, r2
 80100d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	f003 0308 	and.w	r3, r3, #8
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d009      	beq.n	80100fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80100e6:	4b12      	ldr	r3, [pc, #72]	; (8010130 <HAL_RCC_ClockConfig+0x1bc>)
 80100e8:	689b      	ldr	r3, [r3, #8]
 80100ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	691b      	ldr	r3, [r3, #16]
 80100f2:	00db      	lsls	r3, r3, #3
 80100f4:	490e      	ldr	r1, [pc, #56]	; (8010130 <HAL_RCC_ClockConfig+0x1bc>)
 80100f6:	4313      	orrs	r3, r2
 80100f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80100fa:	f000 f855 	bl	80101a8 <HAL_RCC_GetSysClockFreq>
 80100fe:	4602      	mov	r2, r0
 8010100:	4b0b      	ldr	r3, [pc, #44]	; (8010130 <HAL_RCC_ClockConfig+0x1bc>)
 8010102:	689b      	ldr	r3, [r3, #8]
 8010104:	091b      	lsrs	r3, r3, #4
 8010106:	f003 030f 	and.w	r3, r3, #15
 801010a:	490a      	ldr	r1, [pc, #40]	; (8010134 <HAL_RCC_ClockConfig+0x1c0>)
 801010c:	5ccb      	ldrb	r3, [r1, r3]
 801010e:	fa22 f303 	lsr.w	r3, r2, r3
 8010112:	4a09      	ldr	r2, [pc, #36]	; (8010138 <HAL_RCC_ClockConfig+0x1c4>)
 8010114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8010116:	4b09      	ldr	r3, [pc, #36]	; (801013c <HAL_RCC_ClockConfig+0x1c8>)
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	4618      	mov	r0, r3
 801011c:	f7ff fb08 	bl	800f730 <HAL_InitTick>

  return HAL_OK;
 8010120:	2300      	movs	r3, #0
}
 8010122:	4618      	mov	r0, r3
 8010124:	3710      	adds	r7, #16
 8010126:	46bd      	mov	sp, r7
 8010128:	bd80      	pop	{r7, pc}
 801012a:	bf00      	nop
 801012c:	40023c00 	.word	0x40023c00
 8010130:	40023800 	.word	0x40023800
 8010134:	080182e4 	.word	0x080182e4
 8010138:	20000000 	.word	0x20000000
 801013c:	20000004 	.word	0x20000004

08010140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010140:	b480      	push	{r7}
 8010142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010144:	4b03      	ldr	r3, [pc, #12]	; (8010154 <HAL_RCC_GetHCLKFreq+0x14>)
 8010146:	681b      	ldr	r3, [r3, #0]
}
 8010148:	4618      	mov	r0, r3
 801014a:	46bd      	mov	sp, r7
 801014c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010150:	4770      	bx	lr
 8010152:	bf00      	nop
 8010154:	20000000 	.word	0x20000000

08010158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010158:	b580      	push	{r7, lr}
 801015a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801015c:	f7ff fff0 	bl	8010140 <HAL_RCC_GetHCLKFreq>
 8010160:	4602      	mov	r2, r0
 8010162:	4b05      	ldr	r3, [pc, #20]	; (8010178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8010164:	689b      	ldr	r3, [r3, #8]
 8010166:	0a9b      	lsrs	r3, r3, #10
 8010168:	f003 0307 	and.w	r3, r3, #7
 801016c:	4903      	ldr	r1, [pc, #12]	; (801017c <HAL_RCC_GetPCLK1Freq+0x24>)
 801016e:	5ccb      	ldrb	r3, [r1, r3]
 8010170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010174:	4618      	mov	r0, r3
 8010176:	bd80      	pop	{r7, pc}
 8010178:	40023800 	.word	0x40023800
 801017c:	080182f4 	.word	0x080182f4

08010180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010180:	b580      	push	{r7, lr}
 8010182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8010184:	f7ff ffdc 	bl	8010140 <HAL_RCC_GetHCLKFreq>
 8010188:	4602      	mov	r2, r0
 801018a:	4b05      	ldr	r3, [pc, #20]	; (80101a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 801018c:	689b      	ldr	r3, [r3, #8]
 801018e:	0b5b      	lsrs	r3, r3, #13
 8010190:	f003 0307 	and.w	r3, r3, #7
 8010194:	4903      	ldr	r1, [pc, #12]	; (80101a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8010196:	5ccb      	ldrb	r3, [r1, r3]
 8010198:	fa22 f303 	lsr.w	r3, r2, r3
}
 801019c:	4618      	mov	r0, r3
 801019e:	bd80      	pop	{r7, pc}
 80101a0:	40023800 	.word	0x40023800
 80101a4:	080182f4 	.word	0x080182f4

080101a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80101a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80101ac:	b0ae      	sub	sp, #184	; 0xb8
 80101ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80101b0:	2300      	movs	r3, #0
 80101b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80101b6:	2300      	movs	r3, #0
 80101b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80101bc:	2300      	movs	r3, #0
 80101be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80101c2:	2300      	movs	r3, #0
 80101c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80101c8:	2300      	movs	r3, #0
 80101ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80101ce:	4bcb      	ldr	r3, [pc, #812]	; (80104fc <HAL_RCC_GetSysClockFreq+0x354>)
 80101d0:	689b      	ldr	r3, [r3, #8]
 80101d2:	f003 030c 	and.w	r3, r3, #12
 80101d6:	2b0c      	cmp	r3, #12
 80101d8:	f200 8206 	bhi.w	80105e8 <HAL_RCC_GetSysClockFreq+0x440>
 80101dc:	a201      	add	r2, pc, #4	; (adr r2, 80101e4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80101de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101e2:	bf00      	nop
 80101e4:	08010219 	.word	0x08010219
 80101e8:	080105e9 	.word	0x080105e9
 80101ec:	080105e9 	.word	0x080105e9
 80101f0:	080105e9 	.word	0x080105e9
 80101f4:	08010221 	.word	0x08010221
 80101f8:	080105e9 	.word	0x080105e9
 80101fc:	080105e9 	.word	0x080105e9
 8010200:	080105e9 	.word	0x080105e9
 8010204:	08010229 	.word	0x08010229
 8010208:	080105e9 	.word	0x080105e9
 801020c:	080105e9 	.word	0x080105e9
 8010210:	080105e9 	.word	0x080105e9
 8010214:	08010419 	.word	0x08010419
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8010218:	4bb9      	ldr	r3, [pc, #740]	; (8010500 <HAL_RCC_GetSysClockFreq+0x358>)
 801021a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 801021e:	e1e7      	b.n	80105f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8010220:	4bb8      	ldr	r3, [pc, #736]	; (8010504 <HAL_RCC_GetSysClockFreq+0x35c>)
 8010222:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8010226:	e1e3      	b.n	80105f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010228:	4bb4      	ldr	r3, [pc, #720]	; (80104fc <HAL_RCC_GetSysClockFreq+0x354>)
 801022a:	685b      	ldr	r3, [r3, #4]
 801022c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010230:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010234:	4bb1      	ldr	r3, [pc, #708]	; (80104fc <HAL_RCC_GetSysClockFreq+0x354>)
 8010236:	685b      	ldr	r3, [r3, #4]
 8010238:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801023c:	2b00      	cmp	r3, #0
 801023e:	d071      	beq.n	8010324 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010240:	4bae      	ldr	r3, [pc, #696]	; (80104fc <HAL_RCC_GetSysClockFreq+0x354>)
 8010242:	685b      	ldr	r3, [r3, #4]
 8010244:	099b      	lsrs	r3, r3, #6
 8010246:	2200      	movs	r2, #0
 8010248:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801024c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8010250:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010258:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801025c:	2300      	movs	r3, #0
 801025e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010262:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8010266:	4622      	mov	r2, r4
 8010268:	462b      	mov	r3, r5
 801026a:	f04f 0000 	mov.w	r0, #0
 801026e:	f04f 0100 	mov.w	r1, #0
 8010272:	0159      	lsls	r1, r3, #5
 8010274:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010278:	0150      	lsls	r0, r2, #5
 801027a:	4602      	mov	r2, r0
 801027c:	460b      	mov	r3, r1
 801027e:	4621      	mov	r1, r4
 8010280:	1a51      	subs	r1, r2, r1
 8010282:	6439      	str	r1, [r7, #64]	; 0x40
 8010284:	4629      	mov	r1, r5
 8010286:	eb63 0301 	sbc.w	r3, r3, r1
 801028a:	647b      	str	r3, [r7, #68]	; 0x44
 801028c:	f04f 0200 	mov.w	r2, #0
 8010290:	f04f 0300 	mov.w	r3, #0
 8010294:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8010298:	4649      	mov	r1, r9
 801029a:	018b      	lsls	r3, r1, #6
 801029c:	4641      	mov	r1, r8
 801029e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80102a2:	4641      	mov	r1, r8
 80102a4:	018a      	lsls	r2, r1, #6
 80102a6:	4641      	mov	r1, r8
 80102a8:	1a51      	subs	r1, r2, r1
 80102aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80102ac:	4649      	mov	r1, r9
 80102ae:	eb63 0301 	sbc.w	r3, r3, r1
 80102b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80102b4:	f04f 0200 	mov.w	r2, #0
 80102b8:	f04f 0300 	mov.w	r3, #0
 80102bc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80102c0:	4649      	mov	r1, r9
 80102c2:	00cb      	lsls	r3, r1, #3
 80102c4:	4641      	mov	r1, r8
 80102c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80102ca:	4641      	mov	r1, r8
 80102cc:	00ca      	lsls	r2, r1, #3
 80102ce:	4610      	mov	r0, r2
 80102d0:	4619      	mov	r1, r3
 80102d2:	4603      	mov	r3, r0
 80102d4:	4622      	mov	r2, r4
 80102d6:	189b      	adds	r3, r3, r2
 80102d8:	633b      	str	r3, [r7, #48]	; 0x30
 80102da:	462b      	mov	r3, r5
 80102dc:	460a      	mov	r2, r1
 80102de:	eb42 0303 	adc.w	r3, r2, r3
 80102e2:	637b      	str	r3, [r7, #52]	; 0x34
 80102e4:	f04f 0200 	mov.w	r2, #0
 80102e8:	f04f 0300 	mov.w	r3, #0
 80102ec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80102f0:	4629      	mov	r1, r5
 80102f2:	024b      	lsls	r3, r1, #9
 80102f4:	4621      	mov	r1, r4
 80102f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80102fa:	4621      	mov	r1, r4
 80102fc:	024a      	lsls	r2, r1, #9
 80102fe:	4610      	mov	r0, r2
 8010300:	4619      	mov	r1, r3
 8010302:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010306:	2200      	movs	r2, #0
 8010308:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801030c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010310:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010314:	f7f0 fcc8 	bl	8000ca8 <__aeabi_uldivmod>
 8010318:	4602      	mov	r2, r0
 801031a:	460b      	mov	r3, r1
 801031c:	4613      	mov	r3, r2
 801031e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010322:	e067      	b.n	80103f4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010324:	4b75      	ldr	r3, [pc, #468]	; (80104fc <HAL_RCC_GetSysClockFreq+0x354>)
 8010326:	685b      	ldr	r3, [r3, #4]
 8010328:	099b      	lsrs	r3, r3, #6
 801032a:	2200      	movs	r2, #0
 801032c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010330:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8010334:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801033c:	67bb      	str	r3, [r7, #120]	; 0x78
 801033e:	2300      	movs	r3, #0
 8010340:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010342:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8010346:	4622      	mov	r2, r4
 8010348:	462b      	mov	r3, r5
 801034a:	f04f 0000 	mov.w	r0, #0
 801034e:	f04f 0100 	mov.w	r1, #0
 8010352:	0159      	lsls	r1, r3, #5
 8010354:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010358:	0150      	lsls	r0, r2, #5
 801035a:	4602      	mov	r2, r0
 801035c:	460b      	mov	r3, r1
 801035e:	4621      	mov	r1, r4
 8010360:	1a51      	subs	r1, r2, r1
 8010362:	62b9      	str	r1, [r7, #40]	; 0x28
 8010364:	4629      	mov	r1, r5
 8010366:	eb63 0301 	sbc.w	r3, r3, r1
 801036a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801036c:	f04f 0200 	mov.w	r2, #0
 8010370:	f04f 0300 	mov.w	r3, #0
 8010374:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8010378:	4649      	mov	r1, r9
 801037a:	018b      	lsls	r3, r1, #6
 801037c:	4641      	mov	r1, r8
 801037e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8010382:	4641      	mov	r1, r8
 8010384:	018a      	lsls	r2, r1, #6
 8010386:	4641      	mov	r1, r8
 8010388:	ebb2 0a01 	subs.w	sl, r2, r1
 801038c:	4649      	mov	r1, r9
 801038e:	eb63 0b01 	sbc.w	fp, r3, r1
 8010392:	f04f 0200 	mov.w	r2, #0
 8010396:	f04f 0300 	mov.w	r3, #0
 801039a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801039e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80103a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80103a6:	4692      	mov	sl, r2
 80103a8:	469b      	mov	fp, r3
 80103aa:	4623      	mov	r3, r4
 80103ac:	eb1a 0303 	adds.w	r3, sl, r3
 80103b0:	623b      	str	r3, [r7, #32]
 80103b2:	462b      	mov	r3, r5
 80103b4:	eb4b 0303 	adc.w	r3, fp, r3
 80103b8:	627b      	str	r3, [r7, #36]	; 0x24
 80103ba:	f04f 0200 	mov.w	r2, #0
 80103be:	f04f 0300 	mov.w	r3, #0
 80103c2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80103c6:	4629      	mov	r1, r5
 80103c8:	028b      	lsls	r3, r1, #10
 80103ca:	4621      	mov	r1, r4
 80103cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80103d0:	4621      	mov	r1, r4
 80103d2:	028a      	lsls	r2, r1, #10
 80103d4:	4610      	mov	r0, r2
 80103d6:	4619      	mov	r1, r3
 80103d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80103dc:	2200      	movs	r2, #0
 80103de:	673b      	str	r3, [r7, #112]	; 0x70
 80103e0:	677a      	str	r2, [r7, #116]	; 0x74
 80103e2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80103e6:	f7f0 fc5f 	bl	8000ca8 <__aeabi_uldivmod>
 80103ea:	4602      	mov	r2, r0
 80103ec:	460b      	mov	r3, r1
 80103ee:	4613      	mov	r3, r2
 80103f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80103f4:	4b41      	ldr	r3, [pc, #260]	; (80104fc <HAL_RCC_GetSysClockFreq+0x354>)
 80103f6:	685b      	ldr	r3, [r3, #4]
 80103f8:	0c1b      	lsrs	r3, r3, #16
 80103fa:	f003 0303 	and.w	r3, r3, #3
 80103fe:	3301      	adds	r3, #1
 8010400:	005b      	lsls	r3, r3, #1
 8010402:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8010406:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801040a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801040e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010412:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8010416:	e0eb      	b.n	80105f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010418:	4b38      	ldr	r3, [pc, #224]	; (80104fc <HAL_RCC_GetSysClockFreq+0x354>)
 801041a:	685b      	ldr	r3, [r3, #4]
 801041c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010420:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010424:	4b35      	ldr	r3, [pc, #212]	; (80104fc <HAL_RCC_GetSysClockFreq+0x354>)
 8010426:	685b      	ldr	r3, [r3, #4]
 8010428:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801042c:	2b00      	cmp	r3, #0
 801042e:	d06b      	beq.n	8010508 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010430:	4b32      	ldr	r3, [pc, #200]	; (80104fc <HAL_RCC_GetSysClockFreq+0x354>)
 8010432:	685b      	ldr	r3, [r3, #4]
 8010434:	099b      	lsrs	r3, r3, #6
 8010436:	2200      	movs	r2, #0
 8010438:	66bb      	str	r3, [r7, #104]	; 0x68
 801043a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801043c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801043e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010442:	663b      	str	r3, [r7, #96]	; 0x60
 8010444:	2300      	movs	r3, #0
 8010446:	667b      	str	r3, [r7, #100]	; 0x64
 8010448:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 801044c:	4622      	mov	r2, r4
 801044e:	462b      	mov	r3, r5
 8010450:	f04f 0000 	mov.w	r0, #0
 8010454:	f04f 0100 	mov.w	r1, #0
 8010458:	0159      	lsls	r1, r3, #5
 801045a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801045e:	0150      	lsls	r0, r2, #5
 8010460:	4602      	mov	r2, r0
 8010462:	460b      	mov	r3, r1
 8010464:	4621      	mov	r1, r4
 8010466:	1a51      	subs	r1, r2, r1
 8010468:	61b9      	str	r1, [r7, #24]
 801046a:	4629      	mov	r1, r5
 801046c:	eb63 0301 	sbc.w	r3, r3, r1
 8010470:	61fb      	str	r3, [r7, #28]
 8010472:	f04f 0200 	mov.w	r2, #0
 8010476:	f04f 0300 	mov.w	r3, #0
 801047a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 801047e:	4659      	mov	r1, fp
 8010480:	018b      	lsls	r3, r1, #6
 8010482:	4651      	mov	r1, sl
 8010484:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8010488:	4651      	mov	r1, sl
 801048a:	018a      	lsls	r2, r1, #6
 801048c:	4651      	mov	r1, sl
 801048e:	ebb2 0801 	subs.w	r8, r2, r1
 8010492:	4659      	mov	r1, fp
 8010494:	eb63 0901 	sbc.w	r9, r3, r1
 8010498:	f04f 0200 	mov.w	r2, #0
 801049c:	f04f 0300 	mov.w	r3, #0
 80104a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80104a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80104a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80104ac:	4690      	mov	r8, r2
 80104ae:	4699      	mov	r9, r3
 80104b0:	4623      	mov	r3, r4
 80104b2:	eb18 0303 	adds.w	r3, r8, r3
 80104b6:	613b      	str	r3, [r7, #16]
 80104b8:	462b      	mov	r3, r5
 80104ba:	eb49 0303 	adc.w	r3, r9, r3
 80104be:	617b      	str	r3, [r7, #20]
 80104c0:	f04f 0200 	mov.w	r2, #0
 80104c4:	f04f 0300 	mov.w	r3, #0
 80104c8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80104cc:	4629      	mov	r1, r5
 80104ce:	024b      	lsls	r3, r1, #9
 80104d0:	4621      	mov	r1, r4
 80104d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80104d6:	4621      	mov	r1, r4
 80104d8:	024a      	lsls	r2, r1, #9
 80104da:	4610      	mov	r0, r2
 80104dc:	4619      	mov	r1, r3
 80104de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80104e2:	2200      	movs	r2, #0
 80104e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80104e6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80104e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80104ec:	f7f0 fbdc 	bl	8000ca8 <__aeabi_uldivmod>
 80104f0:	4602      	mov	r2, r0
 80104f2:	460b      	mov	r3, r1
 80104f4:	4613      	mov	r3, r2
 80104f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80104fa:	e065      	b.n	80105c8 <HAL_RCC_GetSysClockFreq+0x420>
 80104fc:	40023800 	.word	0x40023800
 8010500:	00f42400 	.word	0x00f42400
 8010504:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010508:	4b3d      	ldr	r3, [pc, #244]	; (8010600 <HAL_RCC_GetSysClockFreq+0x458>)
 801050a:	685b      	ldr	r3, [r3, #4]
 801050c:	099b      	lsrs	r3, r3, #6
 801050e:	2200      	movs	r2, #0
 8010510:	4618      	mov	r0, r3
 8010512:	4611      	mov	r1, r2
 8010514:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8010518:	653b      	str	r3, [r7, #80]	; 0x50
 801051a:	2300      	movs	r3, #0
 801051c:	657b      	str	r3, [r7, #84]	; 0x54
 801051e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8010522:	4642      	mov	r2, r8
 8010524:	464b      	mov	r3, r9
 8010526:	f04f 0000 	mov.w	r0, #0
 801052a:	f04f 0100 	mov.w	r1, #0
 801052e:	0159      	lsls	r1, r3, #5
 8010530:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010534:	0150      	lsls	r0, r2, #5
 8010536:	4602      	mov	r2, r0
 8010538:	460b      	mov	r3, r1
 801053a:	4641      	mov	r1, r8
 801053c:	1a51      	subs	r1, r2, r1
 801053e:	60b9      	str	r1, [r7, #8]
 8010540:	4649      	mov	r1, r9
 8010542:	eb63 0301 	sbc.w	r3, r3, r1
 8010546:	60fb      	str	r3, [r7, #12]
 8010548:	f04f 0200 	mov.w	r2, #0
 801054c:	f04f 0300 	mov.w	r3, #0
 8010550:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8010554:	4659      	mov	r1, fp
 8010556:	018b      	lsls	r3, r1, #6
 8010558:	4651      	mov	r1, sl
 801055a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801055e:	4651      	mov	r1, sl
 8010560:	018a      	lsls	r2, r1, #6
 8010562:	4651      	mov	r1, sl
 8010564:	1a54      	subs	r4, r2, r1
 8010566:	4659      	mov	r1, fp
 8010568:	eb63 0501 	sbc.w	r5, r3, r1
 801056c:	f04f 0200 	mov.w	r2, #0
 8010570:	f04f 0300 	mov.w	r3, #0
 8010574:	00eb      	lsls	r3, r5, #3
 8010576:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801057a:	00e2      	lsls	r2, r4, #3
 801057c:	4614      	mov	r4, r2
 801057e:	461d      	mov	r5, r3
 8010580:	4643      	mov	r3, r8
 8010582:	18e3      	adds	r3, r4, r3
 8010584:	603b      	str	r3, [r7, #0]
 8010586:	464b      	mov	r3, r9
 8010588:	eb45 0303 	adc.w	r3, r5, r3
 801058c:	607b      	str	r3, [r7, #4]
 801058e:	f04f 0200 	mov.w	r2, #0
 8010592:	f04f 0300 	mov.w	r3, #0
 8010596:	e9d7 4500 	ldrd	r4, r5, [r7]
 801059a:	4629      	mov	r1, r5
 801059c:	028b      	lsls	r3, r1, #10
 801059e:	4621      	mov	r1, r4
 80105a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80105a4:	4621      	mov	r1, r4
 80105a6:	028a      	lsls	r2, r1, #10
 80105a8:	4610      	mov	r0, r2
 80105aa:	4619      	mov	r1, r3
 80105ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80105b0:	2200      	movs	r2, #0
 80105b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80105b4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80105b6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80105ba:	f7f0 fb75 	bl	8000ca8 <__aeabi_uldivmod>
 80105be:	4602      	mov	r2, r0
 80105c0:	460b      	mov	r3, r1
 80105c2:	4613      	mov	r3, r2
 80105c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80105c8:	4b0d      	ldr	r3, [pc, #52]	; (8010600 <HAL_RCC_GetSysClockFreq+0x458>)
 80105ca:	685b      	ldr	r3, [r3, #4]
 80105cc:	0f1b      	lsrs	r3, r3, #28
 80105ce:	f003 0307 	and.w	r3, r3, #7
 80105d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80105d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80105da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80105de:	fbb2 f3f3 	udiv	r3, r2, r3
 80105e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80105e6:	e003      	b.n	80105f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80105e8:	4b06      	ldr	r3, [pc, #24]	; (8010604 <HAL_RCC_GetSysClockFreq+0x45c>)
 80105ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80105ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80105f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80105f4:	4618      	mov	r0, r3
 80105f6:	37b8      	adds	r7, #184	; 0xb8
 80105f8:	46bd      	mov	sp, r7
 80105fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80105fe:	bf00      	nop
 8010600:	40023800 	.word	0x40023800
 8010604:	00f42400 	.word	0x00f42400

08010608 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010608:	b580      	push	{r7, lr}
 801060a:	b086      	sub	sp, #24
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d101      	bne.n	801061a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8010616:	2301      	movs	r3, #1
 8010618:	e28d      	b.n	8010b36 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	f003 0301 	and.w	r3, r3, #1
 8010622:	2b00      	cmp	r3, #0
 8010624:	f000 8083 	beq.w	801072e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8010628:	4b94      	ldr	r3, [pc, #592]	; (801087c <HAL_RCC_OscConfig+0x274>)
 801062a:	689b      	ldr	r3, [r3, #8]
 801062c:	f003 030c 	and.w	r3, r3, #12
 8010630:	2b04      	cmp	r3, #4
 8010632:	d019      	beq.n	8010668 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8010634:	4b91      	ldr	r3, [pc, #580]	; (801087c <HAL_RCC_OscConfig+0x274>)
 8010636:	689b      	ldr	r3, [r3, #8]
 8010638:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 801063c:	2b08      	cmp	r3, #8
 801063e:	d106      	bne.n	801064e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8010640:	4b8e      	ldr	r3, [pc, #568]	; (801087c <HAL_RCC_OscConfig+0x274>)
 8010642:	685b      	ldr	r3, [r3, #4]
 8010644:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010648:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801064c:	d00c      	beq.n	8010668 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801064e:	4b8b      	ldr	r3, [pc, #556]	; (801087c <HAL_RCC_OscConfig+0x274>)
 8010650:	689b      	ldr	r3, [r3, #8]
 8010652:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8010656:	2b0c      	cmp	r3, #12
 8010658:	d112      	bne.n	8010680 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801065a:	4b88      	ldr	r3, [pc, #544]	; (801087c <HAL_RCC_OscConfig+0x274>)
 801065c:	685b      	ldr	r3, [r3, #4]
 801065e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010662:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010666:	d10b      	bne.n	8010680 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010668:	4b84      	ldr	r3, [pc, #528]	; (801087c <HAL_RCC_OscConfig+0x274>)
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010670:	2b00      	cmp	r3, #0
 8010672:	d05b      	beq.n	801072c <HAL_RCC_OscConfig+0x124>
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	685b      	ldr	r3, [r3, #4]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d157      	bne.n	801072c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 801067c:	2301      	movs	r3, #1
 801067e:	e25a      	b.n	8010b36 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	685b      	ldr	r3, [r3, #4]
 8010684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010688:	d106      	bne.n	8010698 <HAL_RCC_OscConfig+0x90>
 801068a:	4b7c      	ldr	r3, [pc, #496]	; (801087c <HAL_RCC_OscConfig+0x274>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	4a7b      	ldr	r2, [pc, #492]	; (801087c <HAL_RCC_OscConfig+0x274>)
 8010690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010694:	6013      	str	r3, [r2, #0]
 8010696:	e01d      	b.n	80106d4 <HAL_RCC_OscConfig+0xcc>
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	685b      	ldr	r3, [r3, #4]
 801069c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80106a0:	d10c      	bne.n	80106bc <HAL_RCC_OscConfig+0xb4>
 80106a2:	4b76      	ldr	r3, [pc, #472]	; (801087c <HAL_RCC_OscConfig+0x274>)
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	4a75      	ldr	r2, [pc, #468]	; (801087c <HAL_RCC_OscConfig+0x274>)
 80106a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80106ac:	6013      	str	r3, [r2, #0]
 80106ae:	4b73      	ldr	r3, [pc, #460]	; (801087c <HAL_RCC_OscConfig+0x274>)
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	4a72      	ldr	r2, [pc, #456]	; (801087c <HAL_RCC_OscConfig+0x274>)
 80106b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80106b8:	6013      	str	r3, [r2, #0]
 80106ba:	e00b      	b.n	80106d4 <HAL_RCC_OscConfig+0xcc>
 80106bc:	4b6f      	ldr	r3, [pc, #444]	; (801087c <HAL_RCC_OscConfig+0x274>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	4a6e      	ldr	r2, [pc, #440]	; (801087c <HAL_RCC_OscConfig+0x274>)
 80106c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80106c6:	6013      	str	r3, [r2, #0]
 80106c8:	4b6c      	ldr	r3, [pc, #432]	; (801087c <HAL_RCC_OscConfig+0x274>)
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	4a6b      	ldr	r2, [pc, #428]	; (801087c <HAL_RCC_OscConfig+0x274>)
 80106ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80106d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	685b      	ldr	r3, [r3, #4]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d013      	beq.n	8010704 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80106dc:	f7ff f86c 	bl	800f7b8 <HAL_GetTick>
 80106e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80106e2:	e008      	b.n	80106f6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80106e4:	f7ff f868 	bl	800f7b8 <HAL_GetTick>
 80106e8:	4602      	mov	r2, r0
 80106ea:	693b      	ldr	r3, [r7, #16]
 80106ec:	1ad3      	subs	r3, r2, r3
 80106ee:	2b64      	cmp	r3, #100	; 0x64
 80106f0:	d901      	bls.n	80106f6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80106f2:	2303      	movs	r3, #3
 80106f4:	e21f      	b.n	8010b36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80106f6:	4b61      	ldr	r3, [pc, #388]	; (801087c <HAL_RCC_OscConfig+0x274>)
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d0f0      	beq.n	80106e4 <HAL_RCC_OscConfig+0xdc>
 8010702:	e014      	b.n	801072e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010704:	f7ff f858 	bl	800f7b8 <HAL_GetTick>
 8010708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801070a:	e008      	b.n	801071e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801070c:	f7ff f854 	bl	800f7b8 <HAL_GetTick>
 8010710:	4602      	mov	r2, r0
 8010712:	693b      	ldr	r3, [r7, #16]
 8010714:	1ad3      	subs	r3, r2, r3
 8010716:	2b64      	cmp	r3, #100	; 0x64
 8010718:	d901      	bls.n	801071e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 801071a:	2303      	movs	r3, #3
 801071c:	e20b      	b.n	8010b36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801071e:	4b57      	ldr	r3, [pc, #348]	; (801087c <HAL_RCC_OscConfig+0x274>)
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010726:	2b00      	cmp	r3, #0
 8010728:	d1f0      	bne.n	801070c <HAL_RCC_OscConfig+0x104>
 801072a:	e000      	b.n	801072e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801072c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	f003 0302 	and.w	r3, r3, #2
 8010736:	2b00      	cmp	r3, #0
 8010738:	d06f      	beq.n	801081a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 801073a:	4b50      	ldr	r3, [pc, #320]	; (801087c <HAL_RCC_OscConfig+0x274>)
 801073c:	689b      	ldr	r3, [r3, #8]
 801073e:	f003 030c 	and.w	r3, r3, #12
 8010742:	2b00      	cmp	r3, #0
 8010744:	d017      	beq.n	8010776 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8010746:	4b4d      	ldr	r3, [pc, #308]	; (801087c <HAL_RCC_OscConfig+0x274>)
 8010748:	689b      	ldr	r3, [r3, #8]
 801074a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 801074e:	2b08      	cmp	r3, #8
 8010750:	d105      	bne.n	801075e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8010752:	4b4a      	ldr	r3, [pc, #296]	; (801087c <HAL_RCC_OscConfig+0x274>)
 8010754:	685b      	ldr	r3, [r3, #4]
 8010756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801075a:	2b00      	cmp	r3, #0
 801075c:	d00b      	beq.n	8010776 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801075e:	4b47      	ldr	r3, [pc, #284]	; (801087c <HAL_RCC_OscConfig+0x274>)
 8010760:	689b      	ldr	r3, [r3, #8]
 8010762:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8010766:	2b0c      	cmp	r3, #12
 8010768:	d11c      	bne.n	80107a4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801076a:	4b44      	ldr	r3, [pc, #272]	; (801087c <HAL_RCC_OscConfig+0x274>)
 801076c:	685b      	ldr	r3, [r3, #4]
 801076e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010772:	2b00      	cmp	r3, #0
 8010774:	d116      	bne.n	80107a4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010776:	4b41      	ldr	r3, [pc, #260]	; (801087c <HAL_RCC_OscConfig+0x274>)
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	f003 0302 	and.w	r3, r3, #2
 801077e:	2b00      	cmp	r3, #0
 8010780:	d005      	beq.n	801078e <HAL_RCC_OscConfig+0x186>
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	68db      	ldr	r3, [r3, #12]
 8010786:	2b01      	cmp	r3, #1
 8010788:	d001      	beq.n	801078e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 801078a:	2301      	movs	r3, #1
 801078c:	e1d3      	b.n	8010b36 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801078e:	4b3b      	ldr	r3, [pc, #236]	; (801087c <HAL_RCC_OscConfig+0x274>)
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	691b      	ldr	r3, [r3, #16]
 801079a:	00db      	lsls	r3, r3, #3
 801079c:	4937      	ldr	r1, [pc, #220]	; (801087c <HAL_RCC_OscConfig+0x274>)
 801079e:	4313      	orrs	r3, r2
 80107a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80107a2:	e03a      	b.n	801081a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	68db      	ldr	r3, [r3, #12]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d020      	beq.n	80107ee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80107ac:	4b34      	ldr	r3, [pc, #208]	; (8010880 <HAL_RCC_OscConfig+0x278>)
 80107ae:	2201      	movs	r2, #1
 80107b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80107b2:	f7ff f801 	bl	800f7b8 <HAL_GetTick>
 80107b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80107b8:	e008      	b.n	80107cc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80107ba:	f7fe fffd 	bl	800f7b8 <HAL_GetTick>
 80107be:	4602      	mov	r2, r0
 80107c0:	693b      	ldr	r3, [r7, #16]
 80107c2:	1ad3      	subs	r3, r2, r3
 80107c4:	2b02      	cmp	r3, #2
 80107c6:	d901      	bls.n	80107cc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80107c8:	2303      	movs	r3, #3
 80107ca:	e1b4      	b.n	8010b36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80107cc:	4b2b      	ldr	r3, [pc, #172]	; (801087c <HAL_RCC_OscConfig+0x274>)
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	f003 0302 	and.w	r3, r3, #2
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d0f0      	beq.n	80107ba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80107d8:	4b28      	ldr	r3, [pc, #160]	; (801087c <HAL_RCC_OscConfig+0x274>)
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	691b      	ldr	r3, [r3, #16]
 80107e4:	00db      	lsls	r3, r3, #3
 80107e6:	4925      	ldr	r1, [pc, #148]	; (801087c <HAL_RCC_OscConfig+0x274>)
 80107e8:	4313      	orrs	r3, r2
 80107ea:	600b      	str	r3, [r1, #0]
 80107ec:	e015      	b.n	801081a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80107ee:	4b24      	ldr	r3, [pc, #144]	; (8010880 <HAL_RCC_OscConfig+0x278>)
 80107f0:	2200      	movs	r2, #0
 80107f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80107f4:	f7fe ffe0 	bl	800f7b8 <HAL_GetTick>
 80107f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80107fa:	e008      	b.n	801080e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80107fc:	f7fe ffdc 	bl	800f7b8 <HAL_GetTick>
 8010800:	4602      	mov	r2, r0
 8010802:	693b      	ldr	r3, [r7, #16]
 8010804:	1ad3      	subs	r3, r2, r3
 8010806:	2b02      	cmp	r3, #2
 8010808:	d901      	bls.n	801080e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 801080a:	2303      	movs	r3, #3
 801080c:	e193      	b.n	8010b36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801080e:	4b1b      	ldr	r3, [pc, #108]	; (801087c <HAL_RCC_OscConfig+0x274>)
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	f003 0302 	and.w	r3, r3, #2
 8010816:	2b00      	cmp	r3, #0
 8010818:	d1f0      	bne.n	80107fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	f003 0308 	and.w	r3, r3, #8
 8010822:	2b00      	cmp	r3, #0
 8010824:	d036      	beq.n	8010894 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	695b      	ldr	r3, [r3, #20]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d016      	beq.n	801085c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801082e:	4b15      	ldr	r3, [pc, #84]	; (8010884 <HAL_RCC_OscConfig+0x27c>)
 8010830:	2201      	movs	r2, #1
 8010832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010834:	f7fe ffc0 	bl	800f7b8 <HAL_GetTick>
 8010838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801083a:	e008      	b.n	801084e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801083c:	f7fe ffbc 	bl	800f7b8 <HAL_GetTick>
 8010840:	4602      	mov	r2, r0
 8010842:	693b      	ldr	r3, [r7, #16]
 8010844:	1ad3      	subs	r3, r2, r3
 8010846:	2b02      	cmp	r3, #2
 8010848:	d901      	bls.n	801084e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 801084a:	2303      	movs	r3, #3
 801084c:	e173      	b.n	8010b36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801084e:	4b0b      	ldr	r3, [pc, #44]	; (801087c <HAL_RCC_OscConfig+0x274>)
 8010850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010852:	f003 0302 	and.w	r3, r3, #2
 8010856:	2b00      	cmp	r3, #0
 8010858:	d0f0      	beq.n	801083c <HAL_RCC_OscConfig+0x234>
 801085a:	e01b      	b.n	8010894 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801085c:	4b09      	ldr	r3, [pc, #36]	; (8010884 <HAL_RCC_OscConfig+0x27c>)
 801085e:	2200      	movs	r2, #0
 8010860:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010862:	f7fe ffa9 	bl	800f7b8 <HAL_GetTick>
 8010866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010868:	e00e      	b.n	8010888 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801086a:	f7fe ffa5 	bl	800f7b8 <HAL_GetTick>
 801086e:	4602      	mov	r2, r0
 8010870:	693b      	ldr	r3, [r7, #16]
 8010872:	1ad3      	subs	r3, r2, r3
 8010874:	2b02      	cmp	r3, #2
 8010876:	d907      	bls.n	8010888 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8010878:	2303      	movs	r3, #3
 801087a:	e15c      	b.n	8010b36 <HAL_RCC_OscConfig+0x52e>
 801087c:	40023800 	.word	0x40023800
 8010880:	42470000 	.word	0x42470000
 8010884:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010888:	4b8a      	ldr	r3, [pc, #552]	; (8010ab4 <HAL_RCC_OscConfig+0x4ac>)
 801088a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801088c:	f003 0302 	and.w	r3, r3, #2
 8010890:	2b00      	cmp	r3, #0
 8010892:	d1ea      	bne.n	801086a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	f003 0304 	and.w	r3, r3, #4
 801089c:	2b00      	cmp	r3, #0
 801089e:	f000 8097 	beq.w	80109d0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80108a2:	2300      	movs	r3, #0
 80108a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80108a6:	4b83      	ldr	r3, [pc, #524]	; (8010ab4 <HAL_RCC_OscConfig+0x4ac>)
 80108a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d10f      	bne.n	80108d2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80108b2:	2300      	movs	r3, #0
 80108b4:	60bb      	str	r3, [r7, #8]
 80108b6:	4b7f      	ldr	r3, [pc, #508]	; (8010ab4 <HAL_RCC_OscConfig+0x4ac>)
 80108b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108ba:	4a7e      	ldr	r2, [pc, #504]	; (8010ab4 <HAL_RCC_OscConfig+0x4ac>)
 80108bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80108c0:	6413      	str	r3, [r2, #64]	; 0x40
 80108c2:	4b7c      	ldr	r3, [pc, #496]	; (8010ab4 <HAL_RCC_OscConfig+0x4ac>)
 80108c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80108ca:	60bb      	str	r3, [r7, #8]
 80108cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80108ce:	2301      	movs	r3, #1
 80108d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80108d2:	4b79      	ldr	r3, [pc, #484]	; (8010ab8 <HAL_RCC_OscConfig+0x4b0>)
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d118      	bne.n	8010910 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80108de:	4b76      	ldr	r3, [pc, #472]	; (8010ab8 <HAL_RCC_OscConfig+0x4b0>)
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	4a75      	ldr	r2, [pc, #468]	; (8010ab8 <HAL_RCC_OscConfig+0x4b0>)
 80108e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80108e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80108ea:	f7fe ff65 	bl	800f7b8 <HAL_GetTick>
 80108ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80108f0:	e008      	b.n	8010904 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80108f2:	f7fe ff61 	bl	800f7b8 <HAL_GetTick>
 80108f6:	4602      	mov	r2, r0
 80108f8:	693b      	ldr	r3, [r7, #16]
 80108fa:	1ad3      	subs	r3, r2, r3
 80108fc:	2b02      	cmp	r3, #2
 80108fe:	d901      	bls.n	8010904 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8010900:	2303      	movs	r3, #3
 8010902:	e118      	b.n	8010b36 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010904:	4b6c      	ldr	r3, [pc, #432]	; (8010ab8 <HAL_RCC_OscConfig+0x4b0>)
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801090c:	2b00      	cmp	r3, #0
 801090e:	d0f0      	beq.n	80108f2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	689b      	ldr	r3, [r3, #8]
 8010914:	2b01      	cmp	r3, #1
 8010916:	d106      	bne.n	8010926 <HAL_RCC_OscConfig+0x31e>
 8010918:	4b66      	ldr	r3, [pc, #408]	; (8010ab4 <HAL_RCC_OscConfig+0x4ac>)
 801091a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801091c:	4a65      	ldr	r2, [pc, #404]	; (8010ab4 <HAL_RCC_OscConfig+0x4ac>)
 801091e:	f043 0301 	orr.w	r3, r3, #1
 8010922:	6713      	str	r3, [r2, #112]	; 0x70
 8010924:	e01c      	b.n	8010960 <HAL_RCC_OscConfig+0x358>
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	689b      	ldr	r3, [r3, #8]
 801092a:	2b05      	cmp	r3, #5
 801092c:	d10c      	bne.n	8010948 <HAL_RCC_OscConfig+0x340>
 801092e:	4b61      	ldr	r3, [pc, #388]	; (8010ab4 <HAL_RCC_OscConfig+0x4ac>)
 8010930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010932:	4a60      	ldr	r2, [pc, #384]	; (8010ab4 <HAL_RCC_OscConfig+0x4ac>)
 8010934:	f043 0304 	orr.w	r3, r3, #4
 8010938:	6713      	str	r3, [r2, #112]	; 0x70
 801093a:	4b5e      	ldr	r3, [pc, #376]	; (8010ab4 <HAL_RCC_OscConfig+0x4ac>)
 801093c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801093e:	4a5d      	ldr	r2, [pc, #372]	; (8010ab4 <HAL_RCC_OscConfig+0x4ac>)
 8010940:	f043 0301 	orr.w	r3, r3, #1
 8010944:	6713      	str	r3, [r2, #112]	; 0x70
 8010946:	e00b      	b.n	8010960 <HAL_RCC_OscConfig+0x358>
 8010948:	4b5a      	ldr	r3, [pc, #360]	; (8010ab4 <HAL_RCC_OscConfig+0x4ac>)
 801094a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801094c:	4a59      	ldr	r2, [pc, #356]	; (8010ab4 <HAL_RCC_OscConfig+0x4ac>)
 801094e:	f023 0301 	bic.w	r3, r3, #1
 8010952:	6713      	str	r3, [r2, #112]	; 0x70
 8010954:	4b57      	ldr	r3, [pc, #348]	; (8010ab4 <HAL_RCC_OscConfig+0x4ac>)
 8010956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010958:	4a56      	ldr	r2, [pc, #344]	; (8010ab4 <HAL_RCC_OscConfig+0x4ac>)
 801095a:	f023 0304 	bic.w	r3, r3, #4
 801095e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	689b      	ldr	r3, [r3, #8]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d015      	beq.n	8010994 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010968:	f7fe ff26 	bl	800f7b8 <HAL_GetTick>
 801096c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801096e:	e00a      	b.n	8010986 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010970:	f7fe ff22 	bl	800f7b8 <HAL_GetTick>
 8010974:	4602      	mov	r2, r0
 8010976:	693b      	ldr	r3, [r7, #16]
 8010978:	1ad3      	subs	r3, r2, r3
 801097a:	f241 3288 	movw	r2, #5000	; 0x1388
 801097e:	4293      	cmp	r3, r2
 8010980:	d901      	bls.n	8010986 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8010982:	2303      	movs	r3, #3
 8010984:	e0d7      	b.n	8010b36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010986:	4b4b      	ldr	r3, [pc, #300]	; (8010ab4 <HAL_RCC_OscConfig+0x4ac>)
 8010988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801098a:	f003 0302 	and.w	r3, r3, #2
 801098e:	2b00      	cmp	r3, #0
 8010990:	d0ee      	beq.n	8010970 <HAL_RCC_OscConfig+0x368>
 8010992:	e014      	b.n	80109be <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010994:	f7fe ff10 	bl	800f7b8 <HAL_GetTick>
 8010998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801099a:	e00a      	b.n	80109b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801099c:	f7fe ff0c 	bl	800f7b8 <HAL_GetTick>
 80109a0:	4602      	mov	r2, r0
 80109a2:	693b      	ldr	r3, [r7, #16]
 80109a4:	1ad3      	subs	r3, r2, r3
 80109a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80109aa:	4293      	cmp	r3, r2
 80109ac:	d901      	bls.n	80109b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80109ae:	2303      	movs	r3, #3
 80109b0:	e0c1      	b.n	8010b36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80109b2:	4b40      	ldr	r3, [pc, #256]	; (8010ab4 <HAL_RCC_OscConfig+0x4ac>)
 80109b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109b6:	f003 0302 	and.w	r3, r3, #2
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d1ee      	bne.n	801099c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80109be:	7dfb      	ldrb	r3, [r7, #23]
 80109c0:	2b01      	cmp	r3, #1
 80109c2:	d105      	bne.n	80109d0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80109c4:	4b3b      	ldr	r3, [pc, #236]	; (8010ab4 <HAL_RCC_OscConfig+0x4ac>)
 80109c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109c8:	4a3a      	ldr	r2, [pc, #232]	; (8010ab4 <HAL_RCC_OscConfig+0x4ac>)
 80109ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80109ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	699b      	ldr	r3, [r3, #24]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	f000 80ad 	beq.w	8010b34 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80109da:	4b36      	ldr	r3, [pc, #216]	; (8010ab4 <HAL_RCC_OscConfig+0x4ac>)
 80109dc:	689b      	ldr	r3, [r3, #8]
 80109de:	f003 030c 	and.w	r3, r3, #12
 80109e2:	2b08      	cmp	r3, #8
 80109e4:	d060      	beq.n	8010aa8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	699b      	ldr	r3, [r3, #24]
 80109ea:	2b02      	cmp	r3, #2
 80109ec:	d145      	bne.n	8010a7a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80109ee:	4b33      	ldr	r3, [pc, #204]	; (8010abc <HAL_RCC_OscConfig+0x4b4>)
 80109f0:	2200      	movs	r2, #0
 80109f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80109f4:	f7fe fee0 	bl	800f7b8 <HAL_GetTick>
 80109f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80109fa:	e008      	b.n	8010a0e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80109fc:	f7fe fedc 	bl	800f7b8 <HAL_GetTick>
 8010a00:	4602      	mov	r2, r0
 8010a02:	693b      	ldr	r3, [r7, #16]
 8010a04:	1ad3      	subs	r3, r2, r3
 8010a06:	2b02      	cmp	r3, #2
 8010a08:	d901      	bls.n	8010a0e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8010a0a:	2303      	movs	r3, #3
 8010a0c:	e093      	b.n	8010b36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010a0e:	4b29      	ldr	r3, [pc, #164]	; (8010ab4 <HAL_RCC_OscConfig+0x4ac>)
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d1f0      	bne.n	80109fc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	69da      	ldr	r2, [r3, #28]
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	6a1b      	ldr	r3, [r3, #32]
 8010a22:	431a      	orrs	r2, r3
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a28:	019b      	lsls	r3, r3, #6
 8010a2a:	431a      	orrs	r2, r3
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a30:	085b      	lsrs	r3, r3, #1
 8010a32:	3b01      	subs	r3, #1
 8010a34:	041b      	lsls	r3, r3, #16
 8010a36:	431a      	orrs	r2, r3
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a3c:	061b      	lsls	r3, r3, #24
 8010a3e:	431a      	orrs	r2, r3
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a44:	071b      	lsls	r3, r3, #28
 8010a46:	491b      	ldr	r1, [pc, #108]	; (8010ab4 <HAL_RCC_OscConfig+0x4ac>)
 8010a48:	4313      	orrs	r3, r2
 8010a4a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010a4c:	4b1b      	ldr	r3, [pc, #108]	; (8010abc <HAL_RCC_OscConfig+0x4b4>)
 8010a4e:	2201      	movs	r2, #1
 8010a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010a52:	f7fe feb1 	bl	800f7b8 <HAL_GetTick>
 8010a56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010a58:	e008      	b.n	8010a6c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010a5a:	f7fe fead 	bl	800f7b8 <HAL_GetTick>
 8010a5e:	4602      	mov	r2, r0
 8010a60:	693b      	ldr	r3, [r7, #16]
 8010a62:	1ad3      	subs	r3, r2, r3
 8010a64:	2b02      	cmp	r3, #2
 8010a66:	d901      	bls.n	8010a6c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8010a68:	2303      	movs	r3, #3
 8010a6a:	e064      	b.n	8010b36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010a6c:	4b11      	ldr	r3, [pc, #68]	; (8010ab4 <HAL_RCC_OscConfig+0x4ac>)
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d0f0      	beq.n	8010a5a <HAL_RCC_OscConfig+0x452>
 8010a78:	e05c      	b.n	8010b34 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010a7a:	4b10      	ldr	r3, [pc, #64]	; (8010abc <HAL_RCC_OscConfig+0x4b4>)
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010a80:	f7fe fe9a 	bl	800f7b8 <HAL_GetTick>
 8010a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010a86:	e008      	b.n	8010a9a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010a88:	f7fe fe96 	bl	800f7b8 <HAL_GetTick>
 8010a8c:	4602      	mov	r2, r0
 8010a8e:	693b      	ldr	r3, [r7, #16]
 8010a90:	1ad3      	subs	r3, r2, r3
 8010a92:	2b02      	cmp	r3, #2
 8010a94:	d901      	bls.n	8010a9a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8010a96:	2303      	movs	r3, #3
 8010a98:	e04d      	b.n	8010b36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010a9a:	4b06      	ldr	r3, [pc, #24]	; (8010ab4 <HAL_RCC_OscConfig+0x4ac>)
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d1f0      	bne.n	8010a88 <HAL_RCC_OscConfig+0x480>
 8010aa6:	e045      	b.n	8010b34 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	699b      	ldr	r3, [r3, #24]
 8010aac:	2b01      	cmp	r3, #1
 8010aae:	d107      	bne.n	8010ac0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8010ab0:	2301      	movs	r3, #1
 8010ab2:	e040      	b.n	8010b36 <HAL_RCC_OscConfig+0x52e>
 8010ab4:	40023800 	.word	0x40023800
 8010ab8:	40007000 	.word	0x40007000
 8010abc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8010ac0:	4b1f      	ldr	r3, [pc, #124]	; (8010b40 <HAL_RCC_OscConfig+0x538>)
 8010ac2:	685b      	ldr	r3, [r3, #4]
 8010ac4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	699b      	ldr	r3, [r3, #24]
 8010aca:	2b01      	cmp	r3, #1
 8010acc:	d030      	beq.n	8010b30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010ad8:	429a      	cmp	r2, r3
 8010ada:	d129      	bne.n	8010b30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010ae6:	429a      	cmp	r2, r3
 8010ae8:	d122      	bne.n	8010b30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8010aea:	68fa      	ldr	r2, [r7, #12]
 8010aec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8010af0:	4013      	ands	r3, r2
 8010af2:	687a      	ldr	r2, [r7, #4]
 8010af4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010af6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8010af8:	4293      	cmp	r3, r2
 8010afa:	d119      	bne.n	8010b30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b06:	085b      	lsrs	r3, r3, #1
 8010b08:	3b01      	subs	r3, #1
 8010b0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8010b0c:	429a      	cmp	r2, r3
 8010b0e:	d10f      	bne.n	8010b30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8010b1c:	429a      	cmp	r2, r3
 8010b1e:	d107      	bne.n	8010b30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b2a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8010b2c:	429a      	cmp	r2, r3
 8010b2e:	d001      	beq.n	8010b34 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8010b30:	2301      	movs	r3, #1
 8010b32:	e000      	b.n	8010b36 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8010b34:	2300      	movs	r3, #0
}
 8010b36:	4618      	mov	r0, r3
 8010b38:	3718      	adds	r7, #24
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bd80      	pop	{r7, pc}
 8010b3e:	bf00      	nop
 8010b40:	40023800 	.word	0x40023800

08010b44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b082      	sub	sp, #8
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d101      	bne.n	8010b56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010b52:	2301      	movs	r3, #1
 8010b54:	e07b      	b.n	8010c4e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d108      	bne.n	8010b70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	685b      	ldr	r3, [r3, #4]
 8010b62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010b66:	d009      	beq.n	8010b7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	61da      	str	r2, [r3, #28]
 8010b6e:	e005      	b.n	8010b7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	2200      	movs	r2, #0
 8010b74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	2200      	movs	r2, #0
 8010b7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	2200      	movs	r2, #0
 8010b80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010b88:	b2db      	uxtb	r3, r3
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d106      	bne.n	8010b9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	2200      	movs	r2, #0
 8010b92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010b96:	6878      	ldr	r0, [r7, #4]
 8010b98:	f7fe fb8a 	bl	800f2b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	2202      	movs	r2, #2
 8010ba0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	681a      	ldr	r2, [r3, #0]
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010bb2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	685b      	ldr	r3, [r3, #4]
 8010bb8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	689b      	ldr	r3, [r3, #8]
 8010bc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8010bc4:	431a      	orrs	r2, r3
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	68db      	ldr	r3, [r3, #12]
 8010bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010bce:	431a      	orrs	r2, r3
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	691b      	ldr	r3, [r3, #16]
 8010bd4:	f003 0302 	and.w	r3, r3, #2
 8010bd8:	431a      	orrs	r2, r3
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	695b      	ldr	r3, [r3, #20]
 8010bde:	f003 0301 	and.w	r3, r3, #1
 8010be2:	431a      	orrs	r2, r3
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	699b      	ldr	r3, [r3, #24]
 8010be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010bec:	431a      	orrs	r2, r3
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	69db      	ldr	r3, [r3, #28]
 8010bf2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010bf6:	431a      	orrs	r2, r3
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	6a1b      	ldr	r3, [r3, #32]
 8010bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c00:	ea42 0103 	orr.w	r1, r2, r3
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	430a      	orrs	r2, r1
 8010c12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	699b      	ldr	r3, [r3, #24]
 8010c18:	0c1b      	lsrs	r3, r3, #16
 8010c1a:	f003 0104 	and.w	r1, r3, #4
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c22:	f003 0210 	and.w	r2, r3, #16
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	430a      	orrs	r2, r1
 8010c2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	69da      	ldr	r2, [r3, #28]
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010c3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	2200      	movs	r2, #0
 8010c42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	2201      	movs	r2, #1
 8010c48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8010c4c:	2300      	movs	r3, #0
}
 8010c4e:	4618      	mov	r0, r3
 8010c50:	3708      	adds	r7, #8
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}

08010c56 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010c56:	b580      	push	{r7, lr}
 8010c58:	b088      	sub	sp, #32
 8010c5a:	af00      	add	r7, sp, #0
 8010c5c:	60f8      	str	r0, [r7, #12]
 8010c5e:	60b9      	str	r1, [r7, #8]
 8010c60:	603b      	str	r3, [r7, #0]
 8010c62:	4613      	mov	r3, r2
 8010c64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010c66:	2300      	movs	r3, #0
 8010c68:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010c70:	2b01      	cmp	r3, #1
 8010c72:	d101      	bne.n	8010c78 <HAL_SPI_Transmit+0x22>
 8010c74:	2302      	movs	r3, #2
 8010c76:	e126      	b.n	8010ec6 <HAL_SPI_Transmit+0x270>
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	2201      	movs	r2, #1
 8010c7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010c80:	f7fe fd9a 	bl	800f7b8 <HAL_GetTick>
 8010c84:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8010c86:	88fb      	ldrh	r3, [r7, #6]
 8010c88:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010c90:	b2db      	uxtb	r3, r3
 8010c92:	2b01      	cmp	r3, #1
 8010c94:	d002      	beq.n	8010c9c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8010c96:	2302      	movs	r3, #2
 8010c98:	77fb      	strb	r3, [r7, #31]
    goto error;
 8010c9a:	e10b      	b.n	8010eb4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8010c9c:	68bb      	ldr	r3, [r7, #8]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d002      	beq.n	8010ca8 <HAL_SPI_Transmit+0x52>
 8010ca2:	88fb      	ldrh	r3, [r7, #6]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d102      	bne.n	8010cae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8010ca8:	2301      	movs	r3, #1
 8010caa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8010cac:	e102      	b.n	8010eb4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	2203      	movs	r2, #3
 8010cb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	2200      	movs	r2, #0
 8010cba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	68ba      	ldr	r2, [r7, #8]
 8010cc0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	88fa      	ldrh	r2, [r7, #6]
 8010cc6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	88fa      	ldrh	r2, [r7, #6]
 8010ccc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	2200      	movs	r2, #0
 8010cd8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	2200      	movs	r2, #0
 8010cde:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	2200      	movs	r2, #0
 8010cea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	689b      	ldr	r3, [r3, #8]
 8010cf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010cf4:	d10f      	bne.n	8010d16 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	681a      	ldr	r2, [r3, #0]
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010d04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	681a      	ldr	r2, [r3, #0]
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010d14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d20:	2b40      	cmp	r3, #64	; 0x40
 8010d22:	d007      	beq.n	8010d34 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	681a      	ldr	r2, [r3, #0]
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010d32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	68db      	ldr	r3, [r3, #12]
 8010d38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010d3c:	d14b      	bne.n	8010dd6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	685b      	ldr	r3, [r3, #4]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d002      	beq.n	8010d4c <HAL_SPI_Transmit+0xf6>
 8010d46:	8afb      	ldrh	r3, [r7, #22]
 8010d48:	2b01      	cmp	r3, #1
 8010d4a:	d13e      	bne.n	8010dca <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d50:	881a      	ldrh	r2, [r3, #0]
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d5c:	1c9a      	adds	r2, r3, #2
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010d66:	b29b      	uxth	r3, r3
 8010d68:	3b01      	subs	r3, #1
 8010d6a:	b29a      	uxth	r2, r3
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8010d70:	e02b      	b.n	8010dca <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	689b      	ldr	r3, [r3, #8]
 8010d78:	f003 0302 	and.w	r3, r3, #2
 8010d7c:	2b02      	cmp	r3, #2
 8010d7e:	d112      	bne.n	8010da6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d84:	881a      	ldrh	r2, [r3, #0]
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d90:	1c9a      	adds	r2, r3, #2
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010d9a:	b29b      	uxth	r3, r3
 8010d9c:	3b01      	subs	r3, #1
 8010d9e:	b29a      	uxth	r2, r3
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	86da      	strh	r2, [r3, #54]	; 0x36
 8010da4:	e011      	b.n	8010dca <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010da6:	f7fe fd07 	bl	800f7b8 <HAL_GetTick>
 8010daa:	4602      	mov	r2, r0
 8010dac:	69bb      	ldr	r3, [r7, #24]
 8010dae:	1ad3      	subs	r3, r2, r3
 8010db0:	683a      	ldr	r2, [r7, #0]
 8010db2:	429a      	cmp	r2, r3
 8010db4:	d803      	bhi.n	8010dbe <HAL_SPI_Transmit+0x168>
 8010db6:	683b      	ldr	r3, [r7, #0]
 8010db8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010dbc:	d102      	bne.n	8010dc4 <HAL_SPI_Transmit+0x16e>
 8010dbe:	683b      	ldr	r3, [r7, #0]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d102      	bne.n	8010dca <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8010dc4:	2303      	movs	r3, #3
 8010dc6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8010dc8:	e074      	b.n	8010eb4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010dce:	b29b      	uxth	r3, r3
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d1ce      	bne.n	8010d72 <HAL_SPI_Transmit+0x11c>
 8010dd4:	e04c      	b.n	8010e70 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	685b      	ldr	r3, [r3, #4]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d002      	beq.n	8010de4 <HAL_SPI_Transmit+0x18e>
 8010dde:	8afb      	ldrh	r3, [r7, #22]
 8010de0:	2b01      	cmp	r3, #1
 8010de2:	d140      	bne.n	8010e66 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	330c      	adds	r3, #12
 8010dee:	7812      	ldrb	r2, [r2, #0]
 8010df0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010df6:	1c5a      	adds	r2, r3, #1
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010e00:	b29b      	uxth	r3, r3
 8010e02:	3b01      	subs	r3, #1
 8010e04:	b29a      	uxth	r2, r3
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8010e0a:	e02c      	b.n	8010e66 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	689b      	ldr	r3, [r3, #8]
 8010e12:	f003 0302 	and.w	r3, r3, #2
 8010e16:	2b02      	cmp	r3, #2
 8010e18:	d113      	bne.n	8010e42 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	330c      	adds	r3, #12
 8010e24:	7812      	ldrb	r2, [r2, #0]
 8010e26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e2c:	1c5a      	adds	r2, r3, #1
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010e36:	b29b      	uxth	r3, r3
 8010e38:	3b01      	subs	r3, #1
 8010e3a:	b29a      	uxth	r2, r3
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	86da      	strh	r2, [r3, #54]	; 0x36
 8010e40:	e011      	b.n	8010e66 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010e42:	f7fe fcb9 	bl	800f7b8 <HAL_GetTick>
 8010e46:	4602      	mov	r2, r0
 8010e48:	69bb      	ldr	r3, [r7, #24]
 8010e4a:	1ad3      	subs	r3, r2, r3
 8010e4c:	683a      	ldr	r2, [r7, #0]
 8010e4e:	429a      	cmp	r2, r3
 8010e50:	d803      	bhi.n	8010e5a <HAL_SPI_Transmit+0x204>
 8010e52:	683b      	ldr	r3, [r7, #0]
 8010e54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010e58:	d102      	bne.n	8010e60 <HAL_SPI_Transmit+0x20a>
 8010e5a:	683b      	ldr	r3, [r7, #0]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d102      	bne.n	8010e66 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8010e60:	2303      	movs	r3, #3
 8010e62:	77fb      	strb	r3, [r7, #31]
          goto error;
 8010e64:	e026      	b.n	8010eb4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010e6a:	b29b      	uxth	r3, r3
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d1cd      	bne.n	8010e0c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010e70:	69ba      	ldr	r2, [r7, #24]
 8010e72:	6839      	ldr	r1, [r7, #0]
 8010e74:	68f8      	ldr	r0, [r7, #12]
 8010e76:	f000 fbcb 	bl	8011610 <SPI_EndRxTxTransaction>
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d002      	beq.n	8010e86 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	2220      	movs	r2, #32
 8010e84:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	689b      	ldr	r3, [r3, #8]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d10a      	bne.n	8010ea4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010e8e:	2300      	movs	r3, #0
 8010e90:	613b      	str	r3, [r7, #16]
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	68db      	ldr	r3, [r3, #12]
 8010e98:	613b      	str	r3, [r7, #16]
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	689b      	ldr	r3, [r3, #8]
 8010ea0:	613b      	str	r3, [r7, #16]
 8010ea2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d002      	beq.n	8010eb2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8010eac:	2301      	movs	r3, #1
 8010eae:	77fb      	strb	r3, [r7, #31]
 8010eb0:	e000      	b.n	8010eb4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8010eb2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	2201      	movs	r2, #1
 8010eb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8010ec4:	7ffb      	ldrb	r3, [r7, #31]
}
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	3720      	adds	r7, #32
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	bd80      	pop	{r7, pc}

08010ece <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010ece:	b580      	push	{r7, lr}
 8010ed0:	b088      	sub	sp, #32
 8010ed2:	af02      	add	r7, sp, #8
 8010ed4:	60f8      	str	r0, [r7, #12]
 8010ed6:	60b9      	str	r1, [r7, #8]
 8010ed8:	603b      	str	r3, [r7, #0]
 8010eda:	4613      	mov	r3, r2
 8010edc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010ede:	2300      	movs	r3, #0
 8010ee0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	685b      	ldr	r3, [r3, #4]
 8010ee6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010eea:	d112      	bne.n	8010f12 <HAL_SPI_Receive+0x44>
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	689b      	ldr	r3, [r3, #8]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d10e      	bne.n	8010f12 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	2204      	movs	r2, #4
 8010ef8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8010efc:	88fa      	ldrh	r2, [r7, #6]
 8010efe:	683b      	ldr	r3, [r7, #0]
 8010f00:	9300      	str	r3, [sp, #0]
 8010f02:	4613      	mov	r3, r2
 8010f04:	68ba      	ldr	r2, [r7, #8]
 8010f06:	68b9      	ldr	r1, [r7, #8]
 8010f08:	68f8      	ldr	r0, [r7, #12]
 8010f0a:	f000 f8f1 	bl	80110f0 <HAL_SPI_TransmitReceive>
 8010f0e:	4603      	mov	r3, r0
 8010f10:	e0ea      	b.n	80110e8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010f18:	2b01      	cmp	r3, #1
 8010f1a:	d101      	bne.n	8010f20 <HAL_SPI_Receive+0x52>
 8010f1c:	2302      	movs	r3, #2
 8010f1e:	e0e3      	b.n	80110e8 <HAL_SPI_Receive+0x21a>
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	2201      	movs	r2, #1
 8010f24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010f28:	f7fe fc46 	bl	800f7b8 <HAL_GetTick>
 8010f2c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010f34:	b2db      	uxtb	r3, r3
 8010f36:	2b01      	cmp	r3, #1
 8010f38:	d002      	beq.n	8010f40 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8010f3a:	2302      	movs	r3, #2
 8010f3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8010f3e:	e0ca      	b.n	80110d6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8010f40:	68bb      	ldr	r3, [r7, #8]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d002      	beq.n	8010f4c <HAL_SPI_Receive+0x7e>
 8010f46:	88fb      	ldrh	r3, [r7, #6]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d102      	bne.n	8010f52 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8010f4c:	2301      	movs	r3, #1
 8010f4e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8010f50:	e0c1      	b.n	80110d6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	2204      	movs	r2, #4
 8010f56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	68ba      	ldr	r2, [r7, #8]
 8010f64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	88fa      	ldrh	r2, [r7, #6]
 8010f6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	88fa      	ldrh	r2, [r7, #6]
 8010f70:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	2200      	movs	r2, #0
 8010f76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	2200      	movs	r2, #0
 8010f82:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	2200      	movs	r2, #0
 8010f88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	689b      	ldr	r3, [r3, #8]
 8010f94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010f98:	d10f      	bne.n	8010fba <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	681a      	ldr	r2, [r3, #0]
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010fa8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	681a      	ldr	r2, [r3, #0]
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8010fb8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fc4:	2b40      	cmp	r3, #64	; 0x40
 8010fc6:	d007      	beq.n	8010fd8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	681a      	ldr	r2, [r3, #0]
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010fd6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	68db      	ldr	r3, [r3, #12]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d162      	bne.n	80110a6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8010fe0:	e02e      	b.n	8011040 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	689b      	ldr	r3, [r3, #8]
 8010fe8:	f003 0301 	and.w	r3, r3, #1
 8010fec:	2b01      	cmp	r3, #1
 8010fee:	d115      	bne.n	801101c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	f103 020c 	add.w	r2, r3, #12
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ffc:	7812      	ldrb	r2, [r2, #0]
 8010ffe:	b2d2      	uxtb	r2, r2
 8011000:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011006:	1c5a      	adds	r2, r3, #1
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011010:	b29b      	uxth	r3, r3
 8011012:	3b01      	subs	r3, #1
 8011014:	b29a      	uxth	r2, r3
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	87da      	strh	r2, [r3, #62]	; 0x3e
 801101a:	e011      	b.n	8011040 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801101c:	f7fe fbcc 	bl	800f7b8 <HAL_GetTick>
 8011020:	4602      	mov	r2, r0
 8011022:	693b      	ldr	r3, [r7, #16]
 8011024:	1ad3      	subs	r3, r2, r3
 8011026:	683a      	ldr	r2, [r7, #0]
 8011028:	429a      	cmp	r2, r3
 801102a:	d803      	bhi.n	8011034 <HAL_SPI_Receive+0x166>
 801102c:	683b      	ldr	r3, [r7, #0]
 801102e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011032:	d102      	bne.n	801103a <HAL_SPI_Receive+0x16c>
 8011034:	683b      	ldr	r3, [r7, #0]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d102      	bne.n	8011040 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 801103a:	2303      	movs	r3, #3
 801103c:	75fb      	strb	r3, [r7, #23]
          goto error;
 801103e:	e04a      	b.n	80110d6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011044:	b29b      	uxth	r3, r3
 8011046:	2b00      	cmp	r3, #0
 8011048:	d1cb      	bne.n	8010fe2 <HAL_SPI_Receive+0x114>
 801104a:	e031      	b.n	80110b0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	689b      	ldr	r3, [r3, #8]
 8011052:	f003 0301 	and.w	r3, r3, #1
 8011056:	2b01      	cmp	r3, #1
 8011058:	d113      	bne.n	8011082 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	68da      	ldr	r2, [r3, #12]
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011064:	b292      	uxth	r2, r2
 8011066:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801106c:	1c9a      	adds	r2, r3, #2
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011076:	b29b      	uxth	r3, r3
 8011078:	3b01      	subs	r3, #1
 801107a:	b29a      	uxth	r2, r3
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011080:	e011      	b.n	80110a6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011082:	f7fe fb99 	bl	800f7b8 <HAL_GetTick>
 8011086:	4602      	mov	r2, r0
 8011088:	693b      	ldr	r3, [r7, #16]
 801108a:	1ad3      	subs	r3, r2, r3
 801108c:	683a      	ldr	r2, [r7, #0]
 801108e:	429a      	cmp	r2, r3
 8011090:	d803      	bhi.n	801109a <HAL_SPI_Receive+0x1cc>
 8011092:	683b      	ldr	r3, [r7, #0]
 8011094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011098:	d102      	bne.n	80110a0 <HAL_SPI_Receive+0x1d2>
 801109a:	683b      	ldr	r3, [r7, #0]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d102      	bne.n	80110a6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80110a0:	2303      	movs	r3, #3
 80110a2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80110a4:	e017      	b.n	80110d6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80110aa:	b29b      	uxth	r3, r3
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d1cd      	bne.n	801104c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80110b0:	693a      	ldr	r2, [r7, #16]
 80110b2:	6839      	ldr	r1, [r7, #0]
 80110b4:	68f8      	ldr	r0, [r7, #12]
 80110b6:	f000 fa45 	bl	8011544 <SPI_EndRxTransaction>
 80110ba:	4603      	mov	r3, r0
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d002      	beq.n	80110c6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	2220      	movs	r2, #32
 80110c4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d002      	beq.n	80110d4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80110ce:	2301      	movs	r3, #1
 80110d0:	75fb      	strb	r3, [r7, #23]
 80110d2:	e000      	b.n	80110d6 <HAL_SPI_Receive+0x208>
  }

error :
 80110d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	2201      	movs	r2, #1
 80110da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	2200      	movs	r2, #0
 80110e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80110e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80110e8:	4618      	mov	r0, r3
 80110ea:	3718      	adds	r7, #24
 80110ec:	46bd      	mov	sp, r7
 80110ee:	bd80      	pop	{r7, pc}

080110f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b08c      	sub	sp, #48	; 0x30
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	60f8      	str	r0, [r7, #12]
 80110f8:	60b9      	str	r1, [r7, #8]
 80110fa:	607a      	str	r2, [r7, #4]
 80110fc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80110fe:	2301      	movs	r3, #1
 8011100:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8011102:	2300      	movs	r3, #0
 8011104:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801110e:	2b01      	cmp	r3, #1
 8011110:	d101      	bne.n	8011116 <HAL_SPI_TransmitReceive+0x26>
 8011112:	2302      	movs	r3, #2
 8011114:	e18a      	b.n	801142c <HAL_SPI_TransmitReceive+0x33c>
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	2201      	movs	r2, #1
 801111a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801111e:	f7fe fb4b 	bl	800f7b8 <HAL_GetTick>
 8011122:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801112a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	685b      	ldr	r3, [r3, #4]
 8011132:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8011134:	887b      	ldrh	r3, [r7, #2]
 8011136:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8011138:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801113c:	2b01      	cmp	r3, #1
 801113e:	d00f      	beq.n	8011160 <HAL_SPI_TransmitReceive+0x70>
 8011140:	69fb      	ldr	r3, [r7, #28]
 8011142:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011146:	d107      	bne.n	8011158 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	689b      	ldr	r3, [r3, #8]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d103      	bne.n	8011158 <HAL_SPI_TransmitReceive+0x68>
 8011150:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011154:	2b04      	cmp	r3, #4
 8011156:	d003      	beq.n	8011160 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8011158:	2302      	movs	r3, #2
 801115a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801115e:	e15b      	b.n	8011418 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8011160:	68bb      	ldr	r3, [r7, #8]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d005      	beq.n	8011172 <HAL_SPI_TransmitReceive+0x82>
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d002      	beq.n	8011172 <HAL_SPI_TransmitReceive+0x82>
 801116c:	887b      	ldrh	r3, [r7, #2]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d103      	bne.n	801117a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8011172:	2301      	movs	r3, #1
 8011174:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8011178:	e14e      	b.n	8011418 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011180:	b2db      	uxtb	r3, r3
 8011182:	2b04      	cmp	r3, #4
 8011184:	d003      	beq.n	801118e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	2205      	movs	r2, #5
 801118a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	2200      	movs	r2, #0
 8011192:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	687a      	ldr	r2, [r7, #4]
 8011198:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	887a      	ldrh	r2, [r7, #2]
 801119e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	887a      	ldrh	r2, [r7, #2]
 80111a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	68ba      	ldr	r2, [r7, #8]
 80111aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	887a      	ldrh	r2, [r7, #2]
 80111b0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	887a      	ldrh	r2, [r7, #2]
 80111b6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	2200      	movs	r2, #0
 80111bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	2200      	movs	r2, #0
 80111c2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80111ce:	2b40      	cmp	r3, #64	; 0x40
 80111d0:	d007      	beq.n	80111e2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	681a      	ldr	r2, [r3, #0]
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80111e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	68db      	ldr	r3, [r3, #12]
 80111e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80111ea:	d178      	bne.n	80112de <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	685b      	ldr	r3, [r3, #4]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d002      	beq.n	80111fa <HAL_SPI_TransmitReceive+0x10a>
 80111f4:	8b7b      	ldrh	r3, [r7, #26]
 80111f6:	2b01      	cmp	r3, #1
 80111f8:	d166      	bne.n	80112c8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111fe:	881a      	ldrh	r2, [r3, #0]
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801120a:	1c9a      	adds	r2, r3, #2
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011214:	b29b      	uxth	r3, r3
 8011216:	3b01      	subs	r3, #1
 8011218:	b29a      	uxth	r2, r3
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801121e:	e053      	b.n	80112c8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	689b      	ldr	r3, [r3, #8]
 8011226:	f003 0302 	and.w	r3, r3, #2
 801122a:	2b02      	cmp	r3, #2
 801122c:	d11b      	bne.n	8011266 <HAL_SPI_TransmitReceive+0x176>
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011232:	b29b      	uxth	r3, r3
 8011234:	2b00      	cmp	r3, #0
 8011236:	d016      	beq.n	8011266 <HAL_SPI_TransmitReceive+0x176>
 8011238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801123a:	2b01      	cmp	r3, #1
 801123c:	d113      	bne.n	8011266 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011242:	881a      	ldrh	r2, [r3, #0]
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801124e:	1c9a      	adds	r2, r3, #2
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011258:	b29b      	uxth	r3, r3
 801125a:	3b01      	subs	r3, #1
 801125c:	b29a      	uxth	r2, r3
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011262:	2300      	movs	r3, #0
 8011264:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	689b      	ldr	r3, [r3, #8]
 801126c:	f003 0301 	and.w	r3, r3, #1
 8011270:	2b01      	cmp	r3, #1
 8011272:	d119      	bne.n	80112a8 <HAL_SPI_TransmitReceive+0x1b8>
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011278:	b29b      	uxth	r3, r3
 801127a:	2b00      	cmp	r3, #0
 801127c:	d014      	beq.n	80112a8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	68da      	ldr	r2, [r3, #12]
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011288:	b292      	uxth	r2, r2
 801128a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011290:	1c9a      	adds	r2, r3, #2
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801129a:	b29b      	uxth	r3, r3
 801129c:	3b01      	subs	r3, #1
 801129e:	b29a      	uxth	r2, r3
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80112a4:	2301      	movs	r3, #1
 80112a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80112a8:	f7fe fa86 	bl	800f7b8 <HAL_GetTick>
 80112ac:	4602      	mov	r2, r0
 80112ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112b0:	1ad3      	subs	r3, r2, r3
 80112b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80112b4:	429a      	cmp	r2, r3
 80112b6:	d807      	bhi.n	80112c8 <HAL_SPI_TransmitReceive+0x1d8>
 80112b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80112be:	d003      	beq.n	80112c8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80112c0:	2303      	movs	r3, #3
 80112c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80112c6:	e0a7      	b.n	8011418 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80112cc:	b29b      	uxth	r3, r3
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d1a6      	bne.n	8011220 <HAL_SPI_TransmitReceive+0x130>
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80112d6:	b29b      	uxth	r3, r3
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d1a1      	bne.n	8011220 <HAL_SPI_TransmitReceive+0x130>
 80112dc:	e07c      	b.n	80113d8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	685b      	ldr	r3, [r3, #4]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d002      	beq.n	80112ec <HAL_SPI_TransmitReceive+0x1fc>
 80112e6:	8b7b      	ldrh	r3, [r7, #26]
 80112e8:	2b01      	cmp	r3, #1
 80112ea:	d16b      	bne.n	80113c4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	330c      	adds	r3, #12
 80112f6:	7812      	ldrb	r2, [r2, #0]
 80112f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112fe:	1c5a      	adds	r2, r3, #1
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011308:	b29b      	uxth	r3, r3
 801130a:	3b01      	subs	r3, #1
 801130c:	b29a      	uxth	r2, r3
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011312:	e057      	b.n	80113c4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	689b      	ldr	r3, [r3, #8]
 801131a:	f003 0302 	and.w	r3, r3, #2
 801131e:	2b02      	cmp	r3, #2
 8011320:	d11c      	bne.n	801135c <HAL_SPI_TransmitReceive+0x26c>
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011326:	b29b      	uxth	r3, r3
 8011328:	2b00      	cmp	r3, #0
 801132a:	d017      	beq.n	801135c <HAL_SPI_TransmitReceive+0x26c>
 801132c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801132e:	2b01      	cmp	r3, #1
 8011330:	d114      	bne.n	801135c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	330c      	adds	r3, #12
 801133c:	7812      	ldrb	r2, [r2, #0]
 801133e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011344:	1c5a      	adds	r2, r3, #1
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801134e:	b29b      	uxth	r3, r3
 8011350:	3b01      	subs	r3, #1
 8011352:	b29a      	uxth	r2, r3
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011358:	2300      	movs	r3, #0
 801135a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	689b      	ldr	r3, [r3, #8]
 8011362:	f003 0301 	and.w	r3, r3, #1
 8011366:	2b01      	cmp	r3, #1
 8011368:	d119      	bne.n	801139e <HAL_SPI_TransmitReceive+0x2ae>
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801136e:	b29b      	uxth	r3, r3
 8011370:	2b00      	cmp	r3, #0
 8011372:	d014      	beq.n	801139e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	68da      	ldr	r2, [r3, #12]
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801137e:	b2d2      	uxtb	r2, r2
 8011380:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011386:	1c5a      	adds	r2, r3, #1
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011390:	b29b      	uxth	r3, r3
 8011392:	3b01      	subs	r3, #1
 8011394:	b29a      	uxth	r2, r3
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801139a:	2301      	movs	r3, #1
 801139c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801139e:	f7fe fa0b 	bl	800f7b8 <HAL_GetTick>
 80113a2:	4602      	mov	r2, r0
 80113a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113a6:	1ad3      	subs	r3, r2, r3
 80113a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80113aa:	429a      	cmp	r2, r3
 80113ac:	d803      	bhi.n	80113b6 <HAL_SPI_TransmitReceive+0x2c6>
 80113ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80113b4:	d102      	bne.n	80113bc <HAL_SPI_TransmitReceive+0x2cc>
 80113b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d103      	bne.n	80113c4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80113bc:	2303      	movs	r3, #3
 80113be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80113c2:	e029      	b.n	8011418 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80113c8:	b29b      	uxth	r3, r3
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d1a2      	bne.n	8011314 <HAL_SPI_TransmitReceive+0x224>
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80113d2:	b29b      	uxth	r3, r3
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d19d      	bne.n	8011314 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80113d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80113dc:	68f8      	ldr	r0, [r7, #12]
 80113de:	f000 f917 	bl	8011610 <SPI_EndRxTxTransaction>
 80113e2:	4603      	mov	r3, r0
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d006      	beq.n	80113f6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80113e8:	2301      	movs	r3, #1
 80113ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	2220      	movs	r2, #32
 80113f2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80113f4:	e010      	b.n	8011418 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	689b      	ldr	r3, [r3, #8]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d10b      	bne.n	8011416 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80113fe:	2300      	movs	r3, #0
 8011400:	617b      	str	r3, [r7, #20]
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	68db      	ldr	r3, [r3, #12]
 8011408:	617b      	str	r3, [r7, #20]
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	689b      	ldr	r3, [r3, #8]
 8011410:	617b      	str	r3, [r7, #20]
 8011412:	697b      	ldr	r3, [r7, #20]
 8011414:	e000      	b.n	8011418 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8011416:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	2201      	movs	r2, #1
 801141c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	2200      	movs	r2, #0
 8011424:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8011428:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 801142c:	4618      	mov	r0, r3
 801142e:	3730      	adds	r7, #48	; 0x30
 8011430:	46bd      	mov	sp, r7
 8011432:	bd80      	pop	{r7, pc}

08011434 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011434:	b580      	push	{r7, lr}
 8011436:	b088      	sub	sp, #32
 8011438:	af00      	add	r7, sp, #0
 801143a:	60f8      	str	r0, [r7, #12]
 801143c:	60b9      	str	r1, [r7, #8]
 801143e:	603b      	str	r3, [r7, #0]
 8011440:	4613      	mov	r3, r2
 8011442:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8011444:	f7fe f9b8 	bl	800f7b8 <HAL_GetTick>
 8011448:	4602      	mov	r2, r0
 801144a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801144c:	1a9b      	subs	r3, r3, r2
 801144e:	683a      	ldr	r2, [r7, #0]
 8011450:	4413      	add	r3, r2
 8011452:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8011454:	f7fe f9b0 	bl	800f7b8 <HAL_GetTick>
 8011458:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801145a:	4b39      	ldr	r3, [pc, #228]	; (8011540 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	015b      	lsls	r3, r3, #5
 8011460:	0d1b      	lsrs	r3, r3, #20
 8011462:	69fa      	ldr	r2, [r7, #28]
 8011464:	fb02 f303 	mul.w	r3, r2, r3
 8011468:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801146a:	e054      	b.n	8011516 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801146c:	683b      	ldr	r3, [r7, #0]
 801146e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011472:	d050      	beq.n	8011516 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8011474:	f7fe f9a0 	bl	800f7b8 <HAL_GetTick>
 8011478:	4602      	mov	r2, r0
 801147a:	69bb      	ldr	r3, [r7, #24]
 801147c:	1ad3      	subs	r3, r2, r3
 801147e:	69fa      	ldr	r2, [r7, #28]
 8011480:	429a      	cmp	r2, r3
 8011482:	d902      	bls.n	801148a <SPI_WaitFlagStateUntilTimeout+0x56>
 8011484:	69fb      	ldr	r3, [r7, #28]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d13d      	bne.n	8011506 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	685a      	ldr	r2, [r3, #4]
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8011498:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	685b      	ldr	r3, [r3, #4]
 801149e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80114a2:	d111      	bne.n	80114c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	689b      	ldr	r3, [r3, #8]
 80114a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80114ac:	d004      	beq.n	80114b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	689b      	ldr	r3, [r3, #8]
 80114b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80114b6:	d107      	bne.n	80114c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	681a      	ldr	r2, [r3, #0]
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80114c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80114d0:	d10f      	bne.n	80114f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	681a      	ldr	r2, [r3, #0]
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80114e0:	601a      	str	r2, [r3, #0]
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	681a      	ldr	r2, [r3, #0]
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80114f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	2201      	movs	r2, #1
 80114f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	2200      	movs	r2, #0
 80114fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8011502:	2303      	movs	r3, #3
 8011504:	e017      	b.n	8011536 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8011506:	697b      	ldr	r3, [r7, #20]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d101      	bne.n	8011510 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801150c:	2300      	movs	r3, #0
 801150e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8011510:	697b      	ldr	r3, [r7, #20]
 8011512:	3b01      	subs	r3, #1
 8011514:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	689a      	ldr	r2, [r3, #8]
 801151c:	68bb      	ldr	r3, [r7, #8]
 801151e:	4013      	ands	r3, r2
 8011520:	68ba      	ldr	r2, [r7, #8]
 8011522:	429a      	cmp	r2, r3
 8011524:	bf0c      	ite	eq
 8011526:	2301      	moveq	r3, #1
 8011528:	2300      	movne	r3, #0
 801152a:	b2db      	uxtb	r3, r3
 801152c:	461a      	mov	r2, r3
 801152e:	79fb      	ldrb	r3, [r7, #7]
 8011530:	429a      	cmp	r2, r3
 8011532:	d19b      	bne.n	801146c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8011534:	2300      	movs	r3, #0
}
 8011536:	4618      	mov	r0, r3
 8011538:	3720      	adds	r7, #32
 801153a:	46bd      	mov	sp, r7
 801153c:	bd80      	pop	{r7, pc}
 801153e:	bf00      	nop
 8011540:	20000000 	.word	0x20000000

08011544 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b086      	sub	sp, #24
 8011548:	af02      	add	r7, sp, #8
 801154a:	60f8      	str	r0, [r7, #12]
 801154c:	60b9      	str	r1, [r7, #8]
 801154e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	685b      	ldr	r3, [r3, #4]
 8011554:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011558:	d111      	bne.n	801157e <SPI_EndRxTransaction+0x3a>
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	689b      	ldr	r3, [r3, #8]
 801155e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011562:	d004      	beq.n	801156e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	689b      	ldr	r3, [r3, #8]
 8011568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801156c:	d107      	bne.n	801157e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	681a      	ldr	r2, [r3, #0]
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801157c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	685b      	ldr	r3, [r3, #4]
 8011582:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011586:	d12a      	bne.n	80115de <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	689b      	ldr	r3, [r3, #8]
 801158c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011590:	d012      	beq.n	80115b8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	9300      	str	r3, [sp, #0]
 8011596:	68bb      	ldr	r3, [r7, #8]
 8011598:	2200      	movs	r2, #0
 801159a:	2180      	movs	r1, #128	; 0x80
 801159c:	68f8      	ldr	r0, [r7, #12]
 801159e:	f7ff ff49 	bl	8011434 <SPI_WaitFlagStateUntilTimeout>
 80115a2:	4603      	mov	r3, r0
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d02d      	beq.n	8011604 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80115ac:	f043 0220 	orr.w	r2, r3, #32
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80115b4:	2303      	movs	r3, #3
 80115b6:	e026      	b.n	8011606 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	9300      	str	r3, [sp, #0]
 80115bc:	68bb      	ldr	r3, [r7, #8]
 80115be:	2200      	movs	r2, #0
 80115c0:	2101      	movs	r1, #1
 80115c2:	68f8      	ldr	r0, [r7, #12]
 80115c4:	f7ff ff36 	bl	8011434 <SPI_WaitFlagStateUntilTimeout>
 80115c8:	4603      	mov	r3, r0
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d01a      	beq.n	8011604 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80115d2:	f043 0220 	orr.w	r2, r3, #32
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80115da:	2303      	movs	r3, #3
 80115dc:	e013      	b.n	8011606 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	9300      	str	r3, [sp, #0]
 80115e2:	68bb      	ldr	r3, [r7, #8]
 80115e4:	2200      	movs	r2, #0
 80115e6:	2101      	movs	r1, #1
 80115e8:	68f8      	ldr	r0, [r7, #12]
 80115ea:	f7ff ff23 	bl	8011434 <SPI_WaitFlagStateUntilTimeout>
 80115ee:	4603      	mov	r3, r0
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d007      	beq.n	8011604 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80115f8:	f043 0220 	orr.w	r2, r3, #32
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8011600:	2303      	movs	r3, #3
 8011602:	e000      	b.n	8011606 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8011604:	2300      	movs	r3, #0
}
 8011606:	4618      	mov	r0, r3
 8011608:	3710      	adds	r7, #16
 801160a:	46bd      	mov	sp, r7
 801160c:	bd80      	pop	{r7, pc}
	...

08011610 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8011610:	b580      	push	{r7, lr}
 8011612:	b088      	sub	sp, #32
 8011614:	af02      	add	r7, sp, #8
 8011616:	60f8      	str	r0, [r7, #12]
 8011618:	60b9      	str	r1, [r7, #8]
 801161a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801161c:	4b1b      	ldr	r3, [pc, #108]	; (801168c <SPI_EndRxTxTransaction+0x7c>)
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	4a1b      	ldr	r2, [pc, #108]	; (8011690 <SPI_EndRxTxTransaction+0x80>)
 8011622:	fba2 2303 	umull	r2, r3, r2, r3
 8011626:	0d5b      	lsrs	r3, r3, #21
 8011628:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801162c:	fb02 f303 	mul.w	r3, r2, r3
 8011630:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	685b      	ldr	r3, [r3, #4]
 8011636:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801163a:	d112      	bne.n	8011662 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	9300      	str	r3, [sp, #0]
 8011640:	68bb      	ldr	r3, [r7, #8]
 8011642:	2200      	movs	r2, #0
 8011644:	2180      	movs	r1, #128	; 0x80
 8011646:	68f8      	ldr	r0, [r7, #12]
 8011648:	f7ff fef4 	bl	8011434 <SPI_WaitFlagStateUntilTimeout>
 801164c:	4603      	mov	r3, r0
 801164e:	2b00      	cmp	r3, #0
 8011650:	d016      	beq.n	8011680 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011656:	f043 0220 	orr.w	r2, r3, #32
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801165e:	2303      	movs	r3, #3
 8011660:	e00f      	b.n	8011682 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8011662:	697b      	ldr	r3, [r7, #20]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d00a      	beq.n	801167e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8011668:	697b      	ldr	r3, [r7, #20]
 801166a:	3b01      	subs	r3, #1
 801166c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	689b      	ldr	r3, [r3, #8]
 8011674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011678:	2b80      	cmp	r3, #128	; 0x80
 801167a:	d0f2      	beq.n	8011662 <SPI_EndRxTxTransaction+0x52>
 801167c:	e000      	b.n	8011680 <SPI_EndRxTxTransaction+0x70>
        break;
 801167e:	bf00      	nop
  }

  return HAL_OK;
 8011680:	2300      	movs	r3, #0
}
 8011682:	4618      	mov	r0, r3
 8011684:	3718      	adds	r7, #24
 8011686:	46bd      	mov	sp, r7
 8011688:	bd80      	pop	{r7, pc}
 801168a:	bf00      	nop
 801168c:	20000000 	.word	0x20000000
 8011690:	165e9f81 	.word	0x165e9f81

08011694 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011694:	b580      	push	{r7, lr}
 8011696:	b082      	sub	sp, #8
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d101      	bne.n	80116a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80116a2:	2301      	movs	r3, #1
 80116a4:	e041      	b.n	801172a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80116ac:	b2db      	uxtb	r3, r3
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d106      	bne.n	80116c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	2200      	movs	r2, #0
 80116b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80116ba:	6878      	ldr	r0, [r7, #4]
 80116bc:	f7fd fe60 	bl	800f380 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	2202      	movs	r2, #2
 80116c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	681a      	ldr	r2, [r3, #0]
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	3304      	adds	r3, #4
 80116d0:	4619      	mov	r1, r3
 80116d2:	4610      	mov	r0, r2
 80116d4:	f000 fa96 	bl	8011c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	2201      	movs	r2, #1
 80116dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	2201      	movs	r2, #1
 80116e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	2201      	movs	r2, #1
 80116ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	2201      	movs	r2, #1
 80116f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	2201      	movs	r2, #1
 80116fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	2201      	movs	r2, #1
 8011704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	2201      	movs	r2, #1
 801170c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	2201      	movs	r2, #1
 8011714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	2201      	movs	r2, #1
 801171c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	2201      	movs	r2, #1
 8011724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011728:	2300      	movs	r3, #0
}
 801172a:	4618      	mov	r0, r3
 801172c:	3708      	adds	r7, #8
 801172e:	46bd      	mov	sp, r7
 8011730:	bd80      	pop	{r7, pc}
	...

08011734 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8011734:	b480      	push	{r7}
 8011736:	b085      	sub	sp, #20
 8011738:	af00      	add	r7, sp, #0
 801173a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011742:	b2db      	uxtb	r3, r3
 8011744:	2b01      	cmp	r3, #1
 8011746:	d001      	beq.n	801174c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8011748:	2301      	movs	r3, #1
 801174a:	e04e      	b.n	80117ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	2202      	movs	r2, #2
 8011750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	68da      	ldr	r2, [r3, #12]
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	f042 0201 	orr.w	r2, r2, #1
 8011762:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	4a23      	ldr	r2, [pc, #140]	; (80117f8 <HAL_TIM_Base_Start_IT+0xc4>)
 801176a:	4293      	cmp	r3, r2
 801176c:	d022      	beq.n	80117b4 <HAL_TIM_Base_Start_IT+0x80>
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011776:	d01d      	beq.n	80117b4 <HAL_TIM_Base_Start_IT+0x80>
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	4a1f      	ldr	r2, [pc, #124]	; (80117fc <HAL_TIM_Base_Start_IT+0xc8>)
 801177e:	4293      	cmp	r3, r2
 8011780:	d018      	beq.n	80117b4 <HAL_TIM_Base_Start_IT+0x80>
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	4a1e      	ldr	r2, [pc, #120]	; (8011800 <HAL_TIM_Base_Start_IT+0xcc>)
 8011788:	4293      	cmp	r3, r2
 801178a:	d013      	beq.n	80117b4 <HAL_TIM_Base_Start_IT+0x80>
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	4a1c      	ldr	r2, [pc, #112]	; (8011804 <HAL_TIM_Base_Start_IT+0xd0>)
 8011792:	4293      	cmp	r3, r2
 8011794:	d00e      	beq.n	80117b4 <HAL_TIM_Base_Start_IT+0x80>
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	4a1b      	ldr	r2, [pc, #108]	; (8011808 <HAL_TIM_Base_Start_IT+0xd4>)
 801179c:	4293      	cmp	r3, r2
 801179e:	d009      	beq.n	80117b4 <HAL_TIM_Base_Start_IT+0x80>
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	4a19      	ldr	r2, [pc, #100]	; (801180c <HAL_TIM_Base_Start_IT+0xd8>)
 80117a6:	4293      	cmp	r3, r2
 80117a8:	d004      	beq.n	80117b4 <HAL_TIM_Base_Start_IT+0x80>
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	4a18      	ldr	r2, [pc, #96]	; (8011810 <HAL_TIM_Base_Start_IT+0xdc>)
 80117b0:	4293      	cmp	r3, r2
 80117b2:	d111      	bne.n	80117d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	689b      	ldr	r3, [r3, #8]
 80117ba:	f003 0307 	and.w	r3, r3, #7
 80117be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	2b06      	cmp	r3, #6
 80117c4:	d010      	beq.n	80117e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	681a      	ldr	r2, [r3, #0]
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	f042 0201 	orr.w	r2, r2, #1
 80117d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80117d6:	e007      	b.n	80117e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	681a      	ldr	r2, [r3, #0]
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	f042 0201 	orr.w	r2, r2, #1
 80117e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80117e8:	2300      	movs	r3, #0
}
 80117ea:	4618      	mov	r0, r3
 80117ec:	3714      	adds	r7, #20
 80117ee:	46bd      	mov	sp, r7
 80117f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f4:	4770      	bx	lr
 80117f6:	bf00      	nop
 80117f8:	40010000 	.word	0x40010000
 80117fc:	40000400 	.word	0x40000400
 8011800:	40000800 	.word	0x40000800
 8011804:	40000c00 	.word	0x40000c00
 8011808:	40010400 	.word	0x40010400
 801180c:	40014000 	.word	0x40014000
 8011810:	40001800 	.word	0x40001800

08011814 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b082      	sub	sp, #8
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	691b      	ldr	r3, [r3, #16]
 8011822:	f003 0302 	and.w	r3, r3, #2
 8011826:	2b02      	cmp	r3, #2
 8011828:	d122      	bne.n	8011870 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	68db      	ldr	r3, [r3, #12]
 8011830:	f003 0302 	and.w	r3, r3, #2
 8011834:	2b02      	cmp	r3, #2
 8011836:	d11b      	bne.n	8011870 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	f06f 0202 	mvn.w	r2, #2
 8011840:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	2201      	movs	r2, #1
 8011846:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	699b      	ldr	r3, [r3, #24]
 801184e:	f003 0303 	and.w	r3, r3, #3
 8011852:	2b00      	cmp	r3, #0
 8011854:	d003      	beq.n	801185e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8011856:	6878      	ldr	r0, [r7, #4]
 8011858:	f000 f9b5 	bl	8011bc6 <HAL_TIM_IC_CaptureCallback>
 801185c:	e005      	b.n	801186a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801185e:	6878      	ldr	r0, [r7, #4]
 8011860:	f000 f9a7 	bl	8011bb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011864:	6878      	ldr	r0, [r7, #4]
 8011866:	f000 f9b8 	bl	8011bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	2200      	movs	r2, #0
 801186e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	691b      	ldr	r3, [r3, #16]
 8011876:	f003 0304 	and.w	r3, r3, #4
 801187a:	2b04      	cmp	r3, #4
 801187c:	d122      	bne.n	80118c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	68db      	ldr	r3, [r3, #12]
 8011884:	f003 0304 	and.w	r3, r3, #4
 8011888:	2b04      	cmp	r3, #4
 801188a:	d11b      	bne.n	80118c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	f06f 0204 	mvn.w	r2, #4
 8011894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	2202      	movs	r2, #2
 801189a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	699b      	ldr	r3, [r3, #24]
 80118a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d003      	beq.n	80118b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80118aa:	6878      	ldr	r0, [r7, #4]
 80118ac:	f000 f98b 	bl	8011bc6 <HAL_TIM_IC_CaptureCallback>
 80118b0:	e005      	b.n	80118be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80118b2:	6878      	ldr	r0, [r7, #4]
 80118b4:	f000 f97d 	bl	8011bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80118b8:	6878      	ldr	r0, [r7, #4]
 80118ba:	f000 f98e 	bl	8011bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	2200      	movs	r2, #0
 80118c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	691b      	ldr	r3, [r3, #16]
 80118ca:	f003 0308 	and.w	r3, r3, #8
 80118ce:	2b08      	cmp	r3, #8
 80118d0:	d122      	bne.n	8011918 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	68db      	ldr	r3, [r3, #12]
 80118d8:	f003 0308 	and.w	r3, r3, #8
 80118dc:	2b08      	cmp	r3, #8
 80118de:	d11b      	bne.n	8011918 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	f06f 0208 	mvn.w	r2, #8
 80118e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	2204      	movs	r2, #4
 80118ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	69db      	ldr	r3, [r3, #28]
 80118f6:	f003 0303 	and.w	r3, r3, #3
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d003      	beq.n	8011906 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80118fe:	6878      	ldr	r0, [r7, #4]
 8011900:	f000 f961 	bl	8011bc6 <HAL_TIM_IC_CaptureCallback>
 8011904:	e005      	b.n	8011912 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011906:	6878      	ldr	r0, [r7, #4]
 8011908:	f000 f953 	bl	8011bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801190c:	6878      	ldr	r0, [r7, #4]
 801190e:	f000 f964 	bl	8011bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	2200      	movs	r2, #0
 8011916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	691b      	ldr	r3, [r3, #16]
 801191e:	f003 0310 	and.w	r3, r3, #16
 8011922:	2b10      	cmp	r3, #16
 8011924:	d122      	bne.n	801196c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	68db      	ldr	r3, [r3, #12]
 801192c:	f003 0310 	and.w	r3, r3, #16
 8011930:	2b10      	cmp	r3, #16
 8011932:	d11b      	bne.n	801196c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	f06f 0210 	mvn.w	r2, #16
 801193c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	2208      	movs	r2, #8
 8011942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	69db      	ldr	r3, [r3, #28]
 801194a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801194e:	2b00      	cmp	r3, #0
 8011950:	d003      	beq.n	801195a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011952:	6878      	ldr	r0, [r7, #4]
 8011954:	f000 f937 	bl	8011bc6 <HAL_TIM_IC_CaptureCallback>
 8011958:	e005      	b.n	8011966 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801195a:	6878      	ldr	r0, [r7, #4]
 801195c:	f000 f929 	bl	8011bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011960:	6878      	ldr	r0, [r7, #4]
 8011962:	f000 f93a 	bl	8011bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	2200      	movs	r2, #0
 801196a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	691b      	ldr	r3, [r3, #16]
 8011972:	f003 0301 	and.w	r3, r3, #1
 8011976:	2b01      	cmp	r3, #1
 8011978:	d10e      	bne.n	8011998 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	68db      	ldr	r3, [r3, #12]
 8011980:	f003 0301 	and.w	r3, r3, #1
 8011984:	2b01      	cmp	r3, #1
 8011986:	d107      	bne.n	8011998 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	f06f 0201 	mvn.w	r2, #1
 8011990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011992:	6878      	ldr	r0, [r7, #4]
 8011994:	f7fa fd60 	bl	800c458 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	691b      	ldr	r3, [r3, #16]
 801199e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80119a2:	2b80      	cmp	r3, #128	; 0x80
 80119a4:	d10e      	bne.n	80119c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	68db      	ldr	r3, [r3, #12]
 80119ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80119b0:	2b80      	cmp	r3, #128	; 0x80
 80119b2:	d107      	bne.n	80119c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80119bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80119be:	6878      	ldr	r0, [r7, #4]
 80119c0:	f000 fae0 	bl	8011f84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	691b      	ldr	r3, [r3, #16]
 80119ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119ce:	2b40      	cmp	r3, #64	; 0x40
 80119d0:	d10e      	bne.n	80119f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	68db      	ldr	r3, [r3, #12]
 80119d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119dc:	2b40      	cmp	r3, #64	; 0x40
 80119de:	d107      	bne.n	80119f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80119e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80119ea:	6878      	ldr	r0, [r7, #4]
 80119ec:	f000 f8ff 	bl	8011bee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	691b      	ldr	r3, [r3, #16]
 80119f6:	f003 0320 	and.w	r3, r3, #32
 80119fa:	2b20      	cmp	r3, #32
 80119fc:	d10e      	bne.n	8011a1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	68db      	ldr	r3, [r3, #12]
 8011a04:	f003 0320 	and.w	r3, r3, #32
 8011a08:	2b20      	cmp	r3, #32
 8011a0a:	d107      	bne.n	8011a1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	f06f 0220 	mvn.w	r2, #32
 8011a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011a16:	6878      	ldr	r0, [r7, #4]
 8011a18:	f000 faaa 	bl	8011f70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011a1c:	bf00      	nop
 8011a1e:	3708      	adds	r7, #8
 8011a20:	46bd      	mov	sp, r7
 8011a22:	bd80      	pop	{r7, pc}

08011a24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011a24:	b580      	push	{r7, lr}
 8011a26:	b084      	sub	sp, #16
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
 8011a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011a2e:	2300      	movs	r3, #0
 8011a30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011a38:	2b01      	cmp	r3, #1
 8011a3a:	d101      	bne.n	8011a40 <HAL_TIM_ConfigClockSource+0x1c>
 8011a3c:	2302      	movs	r3, #2
 8011a3e:	e0b4      	b.n	8011baa <HAL_TIM_ConfigClockSource+0x186>
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	2201      	movs	r2, #1
 8011a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	2202      	movs	r2, #2
 8011a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	689b      	ldr	r3, [r3, #8]
 8011a56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011a58:	68bb      	ldr	r3, [r7, #8]
 8011a5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8011a5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011a60:	68bb      	ldr	r3, [r7, #8]
 8011a62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011a66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	68ba      	ldr	r2, [r7, #8]
 8011a6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8011a70:	683b      	ldr	r3, [r7, #0]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011a78:	d03e      	beq.n	8011af8 <HAL_TIM_ConfigClockSource+0xd4>
 8011a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011a7e:	f200 8087 	bhi.w	8011b90 <HAL_TIM_ConfigClockSource+0x16c>
 8011a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011a86:	f000 8086 	beq.w	8011b96 <HAL_TIM_ConfigClockSource+0x172>
 8011a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011a8e:	d87f      	bhi.n	8011b90 <HAL_TIM_ConfigClockSource+0x16c>
 8011a90:	2b70      	cmp	r3, #112	; 0x70
 8011a92:	d01a      	beq.n	8011aca <HAL_TIM_ConfigClockSource+0xa6>
 8011a94:	2b70      	cmp	r3, #112	; 0x70
 8011a96:	d87b      	bhi.n	8011b90 <HAL_TIM_ConfigClockSource+0x16c>
 8011a98:	2b60      	cmp	r3, #96	; 0x60
 8011a9a:	d050      	beq.n	8011b3e <HAL_TIM_ConfigClockSource+0x11a>
 8011a9c:	2b60      	cmp	r3, #96	; 0x60
 8011a9e:	d877      	bhi.n	8011b90 <HAL_TIM_ConfigClockSource+0x16c>
 8011aa0:	2b50      	cmp	r3, #80	; 0x50
 8011aa2:	d03c      	beq.n	8011b1e <HAL_TIM_ConfigClockSource+0xfa>
 8011aa4:	2b50      	cmp	r3, #80	; 0x50
 8011aa6:	d873      	bhi.n	8011b90 <HAL_TIM_ConfigClockSource+0x16c>
 8011aa8:	2b40      	cmp	r3, #64	; 0x40
 8011aaa:	d058      	beq.n	8011b5e <HAL_TIM_ConfigClockSource+0x13a>
 8011aac:	2b40      	cmp	r3, #64	; 0x40
 8011aae:	d86f      	bhi.n	8011b90 <HAL_TIM_ConfigClockSource+0x16c>
 8011ab0:	2b30      	cmp	r3, #48	; 0x30
 8011ab2:	d064      	beq.n	8011b7e <HAL_TIM_ConfigClockSource+0x15a>
 8011ab4:	2b30      	cmp	r3, #48	; 0x30
 8011ab6:	d86b      	bhi.n	8011b90 <HAL_TIM_ConfigClockSource+0x16c>
 8011ab8:	2b20      	cmp	r3, #32
 8011aba:	d060      	beq.n	8011b7e <HAL_TIM_ConfigClockSource+0x15a>
 8011abc:	2b20      	cmp	r3, #32
 8011abe:	d867      	bhi.n	8011b90 <HAL_TIM_ConfigClockSource+0x16c>
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d05c      	beq.n	8011b7e <HAL_TIM_ConfigClockSource+0x15a>
 8011ac4:	2b10      	cmp	r3, #16
 8011ac6:	d05a      	beq.n	8011b7e <HAL_TIM_ConfigClockSource+0x15a>
 8011ac8:	e062      	b.n	8011b90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	6818      	ldr	r0, [r3, #0]
 8011ace:	683b      	ldr	r3, [r7, #0]
 8011ad0:	6899      	ldr	r1, [r3, #8]
 8011ad2:	683b      	ldr	r3, [r7, #0]
 8011ad4:	685a      	ldr	r2, [r3, #4]
 8011ad6:	683b      	ldr	r3, [r7, #0]
 8011ad8:	68db      	ldr	r3, [r3, #12]
 8011ada:	f000 f9ad 	bl	8011e38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	689b      	ldr	r3, [r3, #8]
 8011ae4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011ae6:	68bb      	ldr	r3, [r7, #8]
 8011ae8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8011aec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	68ba      	ldr	r2, [r7, #8]
 8011af4:	609a      	str	r2, [r3, #8]
      break;
 8011af6:	e04f      	b.n	8011b98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	6818      	ldr	r0, [r3, #0]
 8011afc:	683b      	ldr	r3, [r7, #0]
 8011afe:	6899      	ldr	r1, [r3, #8]
 8011b00:	683b      	ldr	r3, [r7, #0]
 8011b02:	685a      	ldr	r2, [r3, #4]
 8011b04:	683b      	ldr	r3, [r7, #0]
 8011b06:	68db      	ldr	r3, [r3, #12]
 8011b08:	f000 f996 	bl	8011e38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	689a      	ldr	r2, [r3, #8]
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011b1a:	609a      	str	r2, [r3, #8]
      break;
 8011b1c:	e03c      	b.n	8011b98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	6818      	ldr	r0, [r3, #0]
 8011b22:	683b      	ldr	r3, [r7, #0]
 8011b24:	6859      	ldr	r1, [r3, #4]
 8011b26:	683b      	ldr	r3, [r7, #0]
 8011b28:	68db      	ldr	r3, [r3, #12]
 8011b2a:	461a      	mov	r2, r3
 8011b2c:	f000 f90a 	bl	8011d44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	2150      	movs	r1, #80	; 0x50
 8011b36:	4618      	mov	r0, r3
 8011b38:	f000 f963 	bl	8011e02 <TIM_ITRx_SetConfig>
      break;
 8011b3c:	e02c      	b.n	8011b98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	6818      	ldr	r0, [r3, #0]
 8011b42:	683b      	ldr	r3, [r7, #0]
 8011b44:	6859      	ldr	r1, [r3, #4]
 8011b46:	683b      	ldr	r3, [r7, #0]
 8011b48:	68db      	ldr	r3, [r3, #12]
 8011b4a:	461a      	mov	r2, r3
 8011b4c:	f000 f929 	bl	8011da2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	2160      	movs	r1, #96	; 0x60
 8011b56:	4618      	mov	r0, r3
 8011b58:	f000 f953 	bl	8011e02 <TIM_ITRx_SetConfig>
      break;
 8011b5c:	e01c      	b.n	8011b98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	6818      	ldr	r0, [r3, #0]
 8011b62:	683b      	ldr	r3, [r7, #0]
 8011b64:	6859      	ldr	r1, [r3, #4]
 8011b66:	683b      	ldr	r3, [r7, #0]
 8011b68:	68db      	ldr	r3, [r3, #12]
 8011b6a:	461a      	mov	r2, r3
 8011b6c:	f000 f8ea 	bl	8011d44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	2140      	movs	r1, #64	; 0x40
 8011b76:	4618      	mov	r0, r3
 8011b78:	f000 f943 	bl	8011e02 <TIM_ITRx_SetConfig>
      break;
 8011b7c:	e00c      	b.n	8011b98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	681a      	ldr	r2, [r3, #0]
 8011b82:	683b      	ldr	r3, [r7, #0]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	4619      	mov	r1, r3
 8011b88:	4610      	mov	r0, r2
 8011b8a:	f000 f93a 	bl	8011e02 <TIM_ITRx_SetConfig>
      break;
 8011b8e:	e003      	b.n	8011b98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8011b90:	2301      	movs	r3, #1
 8011b92:	73fb      	strb	r3, [r7, #15]
      break;
 8011b94:	e000      	b.n	8011b98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8011b96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	2201      	movs	r2, #1
 8011b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011baa:	4618      	mov	r0, r3
 8011bac:	3710      	adds	r7, #16
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	bd80      	pop	{r7, pc}

08011bb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011bb2:	b480      	push	{r7}
 8011bb4:	b083      	sub	sp, #12
 8011bb6:	af00      	add	r7, sp, #0
 8011bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011bba:	bf00      	nop
 8011bbc:	370c      	adds	r7, #12
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc4:	4770      	bx	lr

08011bc6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011bc6:	b480      	push	{r7}
 8011bc8:	b083      	sub	sp, #12
 8011bca:	af00      	add	r7, sp, #0
 8011bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8011bce:	bf00      	nop
 8011bd0:	370c      	adds	r7, #12
 8011bd2:	46bd      	mov	sp, r7
 8011bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd8:	4770      	bx	lr

08011bda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8011bda:	b480      	push	{r7}
 8011bdc:	b083      	sub	sp, #12
 8011bde:	af00      	add	r7, sp, #0
 8011be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8011be2:	bf00      	nop
 8011be4:	370c      	adds	r7, #12
 8011be6:	46bd      	mov	sp, r7
 8011be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bec:	4770      	bx	lr

08011bee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011bee:	b480      	push	{r7}
 8011bf0:	b083      	sub	sp, #12
 8011bf2:	af00      	add	r7, sp, #0
 8011bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011bf6:	bf00      	nop
 8011bf8:	370c      	adds	r7, #12
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c00:	4770      	bx	lr
	...

08011c04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8011c04:	b480      	push	{r7}
 8011c06:	b085      	sub	sp, #20
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	6078      	str	r0, [r7, #4]
 8011c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	4a40      	ldr	r2, [pc, #256]	; (8011d18 <TIM_Base_SetConfig+0x114>)
 8011c18:	4293      	cmp	r3, r2
 8011c1a:	d013      	beq.n	8011c44 <TIM_Base_SetConfig+0x40>
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011c22:	d00f      	beq.n	8011c44 <TIM_Base_SetConfig+0x40>
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	4a3d      	ldr	r2, [pc, #244]	; (8011d1c <TIM_Base_SetConfig+0x118>)
 8011c28:	4293      	cmp	r3, r2
 8011c2a:	d00b      	beq.n	8011c44 <TIM_Base_SetConfig+0x40>
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	4a3c      	ldr	r2, [pc, #240]	; (8011d20 <TIM_Base_SetConfig+0x11c>)
 8011c30:	4293      	cmp	r3, r2
 8011c32:	d007      	beq.n	8011c44 <TIM_Base_SetConfig+0x40>
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	4a3b      	ldr	r2, [pc, #236]	; (8011d24 <TIM_Base_SetConfig+0x120>)
 8011c38:	4293      	cmp	r3, r2
 8011c3a:	d003      	beq.n	8011c44 <TIM_Base_SetConfig+0x40>
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	4a3a      	ldr	r2, [pc, #232]	; (8011d28 <TIM_Base_SetConfig+0x124>)
 8011c40:	4293      	cmp	r3, r2
 8011c42:	d108      	bne.n	8011c56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011c4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011c4c:	683b      	ldr	r3, [r7, #0]
 8011c4e:	685b      	ldr	r3, [r3, #4]
 8011c50:	68fa      	ldr	r2, [r7, #12]
 8011c52:	4313      	orrs	r3, r2
 8011c54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	4a2f      	ldr	r2, [pc, #188]	; (8011d18 <TIM_Base_SetConfig+0x114>)
 8011c5a:	4293      	cmp	r3, r2
 8011c5c:	d02b      	beq.n	8011cb6 <TIM_Base_SetConfig+0xb2>
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011c64:	d027      	beq.n	8011cb6 <TIM_Base_SetConfig+0xb2>
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	4a2c      	ldr	r2, [pc, #176]	; (8011d1c <TIM_Base_SetConfig+0x118>)
 8011c6a:	4293      	cmp	r3, r2
 8011c6c:	d023      	beq.n	8011cb6 <TIM_Base_SetConfig+0xb2>
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	4a2b      	ldr	r2, [pc, #172]	; (8011d20 <TIM_Base_SetConfig+0x11c>)
 8011c72:	4293      	cmp	r3, r2
 8011c74:	d01f      	beq.n	8011cb6 <TIM_Base_SetConfig+0xb2>
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	4a2a      	ldr	r2, [pc, #168]	; (8011d24 <TIM_Base_SetConfig+0x120>)
 8011c7a:	4293      	cmp	r3, r2
 8011c7c:	d01b      	beq.n	8011cb6 <TIM_Base_SetConfig+0xb2>
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	4a29      	ldr	r2, [pc, #164]	; (8011d28 <TIM_Base_SetConfig+0x124>)
 8011c82:	4293      	cmp	r3, r2
 8011c84:	d017      	beq.n	8011cb6 <TIM_Base_SetConfig+0xb2>
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	4a28      	ldr	r2, [pc, #160]	; (8011d2c <TIM_Base_SetConfig+0x128>)
 8011c8a:	4293      	cmp	r3, r2
 8011c8c:	d013      	beq.n	8011cb6 <TIM_Base_SetConfig+0xb2>
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	4a27      	ldr	r2, [pc, #156]	; (8011d30 <TIM_Base_SetConfig+0x12c>)
 8011c92:	4293      	cmp	r3, r2
 8011c94:	d00f      	beq.n	8011cb6 <TIM_Base_SetConfig+0xb2>
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	4a26      	ldr	r2, [pc, #152]	; (8011d34 <TIM_Base_SetConfig+0x130>)
 8011c9a:	4293      	cmp	r3, r2
 8011c9c:	d00b      	beq.n	8011cb6 <TIM_Base_SetConfig+0xb2>
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	4a25      	ldr	r2, [pc, #148]	; (8011d38 <TIM_Base_SetConfig+0x134>)
 8011ca2:	4293      	cmp	r3, r2
 8011ca4:	d007      	beq.n	8011cb6 <TIM_Base_SetConfig+0xb2>
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	4a24      	ldr	r2, [pc, #144]	; (8011d3c <TIM_Base_SetConfig+0x138>)
 8011caa:	4293      	cmp	r3, r2
 8011cac:	d003      	beq.n	8011cb6 <TIM_Base_SetConfig+0xb2>
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	4a23      	ldr	r2, [pc, #140]	; (8011d40 <TIM_Base_SetConfig+0x13c>)
 8011cb2:	4293      	cmp	r3, r2
 8011cb4:	d108      	bne.n	8011cc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011cbe:	683b      	ldr	r3, [r7, #0]
 8011cc0:	68db      	ldr	r3, [r3, #12]
 8011cc2:	68fa      	ldr	r2, [r7, #12]
 8011cc4:	4313      	orrs	r3, r2
 8011cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011cce:	683b      	ldr	r3, [r7, #0]
 8011cd0:	695b      	ldr	r3, [r3, #20]
 8011cd2:	4313      	orrs	r3, r2
 8011cd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	68fa      	ldr	r2, [r7, #12]
 8011cda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011cdc:	683b      	ldr	r3, [r7, #0]
 8011cde:	689a      	ldr	r2, [r3, #8]
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011ce4:	683b      	ldr	r3, [r7, #0]
 8011ce6:	681a      	ldr	r2, [r3, #0]
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	4a0a      	ldr	r2, [pc, #40]	; (8011d18 <TIM_Base_SetConfig+0x114>)
 8011cf0:	4293      	cmp	r3, r2
 8011cf2:	d003      	beq.n	8011cfc <TIM_Base_SetConfig+0xf8>
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	4a0c      	ldr	r2, [pc, #48]	; (8011d28 <TIM_Base_SetConfig+0x124>)
 8011cf8:	4293      	cmp	r3, r2
 8011cfa:	d103      	bne.n	8011d04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011cfc:	683b      	ldr	r3, [r7, #0]
 8011cfe:	691a      	ldr	r2, [r3, #16]
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	2201      	movs	r2, #1
 8011d08:	615a      	str	r2, [r3, #20]
}
 8011d0a:	bf00      	nop
 8011d0c:	3714      	adds	r7, #20
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d14:	4770      	bx	lr
 8011d16:	bf00      	nop
 8011d18:	40010000 	.word	0x40010000
 8011d1c:	40000400 	.word	0x40000400
 8011d20:	40000800 	.word	0x40000800
 8011d24:	40000c00 	.word	0x40000c00
 8011d28:	40010400 	.word	0x40010400
 8011d2c:	40014000 	.word	0x40014000
 8011d30:	40014400 	.word	0x40014400
 8011d34:	40014800 	.word	0x40014800
 8011d38:	40001800 	.word	0x40001800
 8011d3c:	40001c00 	.word	0x40001c00
 8011d40:	40002000 	.word	0x40002000

08011d44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011d44:	b480      	push	{r7}
 8011d46:	b087      	sub	sp, #28
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	60f8      	str	r0, [r7, #12]
 8011d4c:	60b9      	str	r1, [r7, #8]
 8011d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	6a1b      	ldr	r3, [r3, #32]
 8011d54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	6a1b      	ldr	r3, [r3, #32]
 8011d5a:	f023 0201 	bic.w	r2, r3, #1
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	699b      	ldr	r3, [r3, #24]
 8011d66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011d68:	693b      	ldr	r3, [r7, #16]
 8011d6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	011b      	lsls	r3, r3, #4
 8011d74:	693a      	ldr	r2, [r7, #16]
 8011d76:	4313      	orrs	r3, r2
 8011d78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011d7a:	697b      	ldr	r3, [r7, #20]
 8011d7c:	f023 030a 	bic.w	r3, r3, #10
 8011d80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011d82:	697a      	ldr	r2, [r7, #20]
 8011d84:	68bb      	ldr	r3, [r7, #8]
 8011d86:	4313      	orrs	r3, r2
 8011d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	693a      	ldr	r2, [r7, #16]
 8011d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	697a      	ldr	r2, [r7, #20]
 8011d94:	621a      	str	r2, [r3, #32]
}
 8011d96:	bf00      	nop
 8011d98:	371c      	adds	r7, #28
 8011d9a:	46bd      	mov	sp, r7
 8011d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da0:	4770      	bx	lr

08011da2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011da2:	b480      	push	{r7}
 8011da4:	b087      	sub	sp, #28
 8011da6:	af00      	add	r7, sp, #0
 8011da8:	60f8      	str	r0, [r7, #12]
 8011daa:	60b9      	str	r1, [r7, #8]
 8011dac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	6a1b      	ldr	r3, [r3, #32]
 8011db2:	f023 0210 	bic.w	r2, r3, #16
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	699b      	ldr	r3, [r3, #24]
 8011dbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	6a1b      	ldr	r3, [r3, #32]
 8011dc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011dc6:	697b      	ldr	r3, [r7, #20]
 8011dc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011dcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	031b      	lsls	r3, r3, #12
 8011dd2:	697a      	ldr	r2, [r7, #20]
 8011dd4:	4313      	orrs	r3, r2
 8011dd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011dd8:	693b      	ldr	r3, [r7, #16]
 8011dda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8011dde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011de0:	68bb      	ldr	r3, [r7, #8]
 8011de2:	011b      	lsls	r3, r3, #4
 8011de4:	693a      	ldr	r2, [r7, #16]
 8011de6:	4313      	orrs	r3, r2
 8011de8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	697a      	ldr	r2, [r7, #20]
 8011dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	693a      	ldr	r2, [r7, #16]
 8011df4:	621a      	str	r2, [r3, #32]
}
 8011df6:	bf00      	nop
 8011df8:	371c      	adds	r7, #28
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e00:	4770      	bx	lr

08011e02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011e02:	b480      	push	{r7}
 8011e04:	b085      	sub	sp, #20
 8011e06:	af00      	add	r7, sp, #0
 8011e08:	6078      	str	r0, [r7, #4]
 8011e0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	689b      	ldr	r3, [r3, #8]
 8011e10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011e18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011e1a:	683a      	ldr	r2, [r7, #0]
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	4313      	orrs	r3, r2
 8011e20:	f043 0307 	orr.w	r3, r3, #7
 8011e24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	68fa      	ldr	r2, [r7, #12]
 8011e2a:	609a      	str	r2, [r3, #8]
}
 8011e2c:	bf00      	nop
 8011e2e:	3714      	adds	r7, #20
 8011e30:	46bd      	mov	sp, r7
 8011e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e36:	4770      	bx	lr

08011e38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011e38:	b480      	push	{r7}
 8011e3a:	b087      	sub	sp, #28
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	60f8      	str	r0, [r7, #12]
 8011e40:	60b9      	str	r1, [r7, #8]
 8011e42:	607a      	str	r2, [r7, #4]
 8011e44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	689b      	ldr	r3, [r3, #8]
 8011e4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011e4c:	697b      	ldr	r3, [r7, #20]
 8011e4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011e52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011e54:	683b      	ldr	r3, [r7, #0]
 8011e56:	021a      	lsls	r2, r3, #8
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	431a      	orrs	r2, r3
 8011e5c:	68bb      	ldr	r3, [r7, #8]
 8011e5e:	4313      	orrs	r3, r2
 8011e60:	697a      	ldr	r2, [r7, #20]
 8011e62:	4313      	orrs	r3, r2
 8011e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	697a      	ldr	r2, [r7, #20]
 8011e6a:	609a      	str	r2, [r3, #8]
}
 8011e6c:	bf00      	nop
 8011e6e:	371c      	adds	r7, #28
 8011e70:	46bd      	mov	sp, r7
 8011e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e76:	4770      	bx	lr

08011e78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011e78:	b480      	push	{r7}
 8011e7a:	b085      	sub	sp, #20
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	6078      	str	r0, [r7, #4]
 8011e80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011e88:	2b01      	cmp	r3, #1
 8011e8a:	d101      	bne.n	8011e90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011e8c:	2302      	movs	r3, #2
 8011e8e:	e05a      	b.n	8011f46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	2201      	movs	r2, #1
 8011e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	2202      	movs	r2, #2
 8011e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	685b      	ldr	r3, [r3, #4]
 8011ea6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	689b      	ldr	r3, [r3, #8]
 8011eae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011eb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011eb8:	683b      	ldr	r3, [r7, #0]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	68fa      	ldr	r2, [r7, #12]
 8011ebe:	4313      	orrs	r3, r2
 8011ec0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	68fa      	ldr	r2, [r7, #12]
 8011ec8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	4a21      	ldr	r2, [pc, #132]	; (8011f54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8011ed0:	4293      	cmp	r3, r2
 8011ed2:	d022      	beq.n	8011f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011edc:	d01d      	beq.n	8011f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	4a1d      	ldr	r2, [pc, #116]	; (8011f58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8011ee4:	4293      	cmp	r3, r2
 8011ee6:	d018      	beq.n	8011f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	4a1b      	ldr	r2, [pc, #108]	; (8011f5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8011eee:	4293      	cmp	r3, r2
 8011ef0:	d013      	beq.n	8011f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	4a1a      	ldr	r2, [pc, #104]	; (8011f60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8011ef8:	4293      	cmp	r3, r2
 8011efa:	d00e      	beq.n	8011f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	4a18      	ldr	r2, [pc, #96]	; (8011f64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8011f02:	4293      	cmp	r3, r2
 8011f04:	d009      	beq.n	8011f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	4a17      	ldr	r2, [pc, #92]	; (8011f68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8011f0c:	4293      	cmp	r3, r2
 8011f0e:	d004      	beq.n	8011f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	4a15      	ldr	r2, [pc, #84]	; (8011f6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8011f16:	4293      	cmp	r3, r2
 8011f18:	d10c      	bne.n	8011f34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011f1a:	68bb      	ldr	r3, [r7, #8]
 8011f1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011f20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011f22:	683b      	ldr	r3, [r7, #0]
 8011f24:	685b      	ldr	r3, [r3, #4]
 8011f26:	68ba      	ldr	r2, [r7, #8]
 8011f28:	4313      	orrs	r3, r2
 8011f2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	68ba      	ldr	r2, [r7, #8]
 8011f32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	2201      	movs	r2, #1
 8011f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	2200      	movs	r2, #0
 8011f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011f44:	2300      	movs	r3, #0
}
 8011f46:	4618      	mov	r0, r3
 8011f48:	3714      	adds	r7, #20
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f50:	4770      	bx	lr
 8011f52:	bf00      	nop
 8011f54:	40010000 	.word	0x40010000
 8011f58:	40000400 	.word	0x40000400
 8011f5c:	40000800 	.word	0x40000800
 8011f60:	40000c00 	.word	0x40000c00
 8011f64:	40010400 	.word	0x40010400
 8011f68:	40014000 	.word	0x40014000
 8011f6c:	40001800 	.word	0x40001800

08011f70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011f70:	b480      	push	{r7}
 8011f72:	b083      	sub	sp, #12
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011f78:	bf00      	nop
 8011f7a:	370c      	adds	r7, #12
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f82:	4770      	bx	lr

08011f84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011f84:	b480      	push	{r7}
 8011f86:	b083      	sub	sp, #12
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011f8c:	bf00      	nop
 8011f8e:	370c      	adds	r7, #12
 8011f90:	46bd      	mov	sp, r7
 8011f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f96:	4770      	bx	lr

08011f98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b082      	sub	sp, #8
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d101      	bne.n	8011faa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011fa6:	2301      	movs	r3, #1
 8011fa8:	e03f      	b.n	801202a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011fb0:	b2db      	uxtb	r3, r3
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d106      	bne.n	8011fc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	2200      	movs	r2, #0
 8011fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011fbe:	6878      	ldr	r0, [r7, #4]
 8011fc0:	f7fd fa04 	bl	800f3cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	2224      	movs	r2, #36	; 0x24
 8011fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	68da      	ldr	r2, [r3, #12]
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011fda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8011fdc:	6878      	ldr	r0, [r7, #4]
 8011fde:	f000 fe05 	bl	8012bec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	691a      	ldr	r2, [r3, #16]
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011ff0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	695a      	ldr	r2, [r3, #20]
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012000:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	68da      	ldr	r2, [r3, #12]
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8012010:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	2200      	movs	r2, #0
 8012016:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	2220      	movs	r2, #32
 801201c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	2220      	movs	r2, #32
 8012024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8012028:	2300      	movs	r3, #0
}
 801202a:	4618      	mov	r0, r3
 801202c:	3708      	adds	r7, #8
 801202e:	46bd      	mov	sp, r7
 8012030:	bd80      	pop	{r7, pc}

08012032 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8012032:	b480      	push	{r7}
 8012034:	b085      	sub	sp, #20
 8012036:	af00      	add	r7, sp, #0
 8012038:	60f8      	str	r0, [r7, #12]
 801203a:	60b9      	str	r1, [r7, #8]
 801203c:	4613      	mov	r3, r2
 801203e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012046:	b2db      	uxtb	r3, r3
 8012048:	2b20      	cmp	r3, #32
 801204a:	d130      	bne.n	80120ae <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 801204c:	68bb      	ldr	r3, [r7, #8]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d002      	beq.n	8012058 <HAL_UART_Transmit_IT+0x26>
 8012052:	88fb      	ldrh	r3, [r7, #6]
 8012054:	2b00      	cmp	r3, #0
 8012056:	d101      	bne.n	801205c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8012058:	2301      	movs	r3, #1
 801205a:	e029      	b.n	80120b0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012062:	2b01      	cmp	r3, #1
 8012064:	d101      	bne.n	801206a <HAL_UART_Transmit_IT+0x38>
 8012066:	2302      	movs	r3, #2
 8012068:	e022      	b.n	80120b0 <HAL_UART_Transmit_IT+0x7e>
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	2201      	movs	r2, #1
 801206e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	68ba      	ldr	r2, [r7, #8]
 8012076:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	88fa      	ldrh	r2, [r7, #6]
 801207c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	88fa      	ldrh	r2, [r7, #6]
 8012082:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	2200      	movs	r2, #0
 8012088:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	2221      	movs	r2, #33	; 0x21
 801208e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	2200      	movs	r2, #0
 8012096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	68da      	ldr	r2, [r3, #12]
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80120a8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80120aa:	2300      	movs	r3, #0
 80120ac:	e000      	b.n	80120b0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80120ae:	2302      	movs	r3, #2
  }
}
 80120b0:	4618      	mov	r0, r3
 80120b2:	3714      	adds	r7, #20
 80120b4:	46bd      	mov	sp, r7
 80120b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ba:	4770      	bx	lr

080120bc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80120bc:	b580      	push	{r7, lr}
 80120be:	b084      	sub	sp, #16
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	60f8      	str	r0, [r7, #12]
 80120c4:	60b9      	str	r1, [r7, #8]
 80120c6:	4613      	mov	r3, r2
 80120c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80120d0:	b2db      	uxtb	r3, r3
 80120d2:	2b20      	cmp	r3, #32
 80120d4:	d11d      	bne.n	8012112 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80120d6:	68bb      	ldr	r3, [r7, #8]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d002      	beq.n	80120e2 <HAL_UART_Receive_IT+0x26>
 80120dc:	88fb      	ldrh	r3, [r7, #6]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d101      	bne.n	80120e6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80120e2:	2301      	movs	r3, #1
 80120e4:	e016      	b.n	8012114 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80120ec:	2b01      	cmp	r3, #1
 80120ee:	d101      	bne.n	80120f4 <HAL_UART_Receive_IT+0x38>
 80120f0:	2302      	movs	r3, #2
 80120f2:	e00f      	b.n	8012114 <HAL_UART_Receive_IT+0x58>
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	2201      	movs	r2, #1
 80120f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	2200      	movs	r2, #0
 8012100:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8012102:	88fb      	ldrh	r3, [r7, #6]
 8012104:	461a      	mov	r2, r3
 8012106:	68b9      	ldr	r1, [r7, #8]
 8012108:	68f8      	ldr	r0, [r7, #12]
 801210a:	f000 fb97 	bl	801283c <UART_Start_Receive_IT>
 801210e:	4603      	mov	r3, r0
 8012110:	e000      	b.n	8012114 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8012112:	2302      	movs	r3, #2
  }
}
 8012114:	4618      	mov	r0, r3
 8012116:	3710      	adds	r7, #16
 8012118:	46bd      	mov	sp, r7
 801211a:	bd80      	pop	{r7, pc}

0801211c <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 801211c:	b580      	push	{r7, lr}
 801211e:	b0a0      	sub	sp, #128	; 0x80
 8012120:	af00      	add	r7, sp, #0
 8012122:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	330c      	adds	r3, #12
 801212a:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801212c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801212e:	e853 3f00 	ldrex	r3, [r3]
 8012132:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8012134:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012136:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 801213a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	330c      	adds	r3, #12
 8012142:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012144:	66ba      	str	r2, [r7, #104]	; 0x68
 8012146:	667b      	str	r3, [r7, #100]	; 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012148:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801214a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801214c:	e841 2300 	strex	r3, r2, [r1]
 8012150:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8012152:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012154:	2b00      	cmp	r3, #0
 8012156:	d1e5      	bne.n	8012124 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	3314      	adds	r3, #20
 801215e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012162:	e853 3f00 	ldrex	r3, [r3]
 8012166:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801216a:	f023 0301 	bic.w	r3, r3, #1
 801216e:	67bb      	str	r3, [r7, #120]	; 0x78
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	3314      	adds	r3, #20
 8012176:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012178:	657a      	str	r2, [r7, #84]	; 0x54
 801217a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801217c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801217e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012180:	e841 2300 	strex	r3, r2, [r1]
 8012184:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012188:	2b00      	cmp	r3, #0
 801218a:	d1e5      	bne.n	8012158 <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012190:	2b01      	cmp	r3, #1
 8012192:	d119      	bne.n	80121c8 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	330c      	adds	r3, #12
 801219a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801219c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801219e:	e853 3f00 	ldrex	r3, [r3]
 80121a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80121a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121a6:	f023 0310 	bic.w	r3, r3, #16
 80121aa:	677b      	str	r3, [r7, #116]	; 0x74
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	330c      	adds	r3, #12
 80121b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80121b4:	643a      	str	r2, [r7, #64]	; 0x40
 80121b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80121ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80121bc:	e841 2300 	strex	r3, r2, [r1]
 80121c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80121c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d1e5      	bne.n	8012194 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	695b      	ldr	r3, [r3, #20]
 80121ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80121d2:	2b80      	cmp	r3, #128	; 0x80
 80121d4:	d136      	bne.n	8012244 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	3314      	adds	r3, #20
 80121dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121de:	6a3b      	ldr	r3, [r7, #32]
 80121e0:	e853 3f00 	ldrex	r3, [r3]
 80121e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80121e6:	69fb      	ldr	r3, [r7, #28]
 80121e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80121ec:	673b      	str	r3, [r7, #112]	; 0x70
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	3314      	adds	r3, #20
 80121f4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80121f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80121f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80121fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121fe:	e841 2300 	strex	r3, r2, [r1]
 8012202:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012206:	2b00      	cmp	r3, #0
 8012208:	d1e5      	bne.n	80121d6 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801220e:	2b00      	cmp	r3, #0
 8012210:	d018      	beq.n	8012244 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012216:	2200      	movs	r2, #0
 8012218:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801221e:	4618      	mov	r0, r3
 8012220:	f7fd fc0b 	bl	800fa3a <HAL_DMA_Abort>
 8012224:	4603      	mov	r3, r0
 8012226:	2b00      	cmp	r3, #0
 8012228:	d00c      	beq.n	8012244 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801222e:	4618      	mov	r0, r3
 8012230:	f7fd fc95 	bl	800fb5e <HAL_DMA_GetError>
 8012234:	4603      	mov	r3, r0
 8012236:	2b20      	cmp	r3, #32
 8012238:	d104      	bne.n	8012244 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	2210      	movs	r2, #16
 801223e:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8012240:	2303      	movs	r3, #3
 8012242:	e052      	b.n	80122ea <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	695b      	ldr	r3, [r3, #20]
 801224a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801224e:	2b40      	cmp	r3, #64	; 0x40
 8012250:	d136      	bne.n	80122c0 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	3314      	adds	r3, #20
 8012258:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	e853 3f00 	ldrex	r3, [r3]
 8012260:	60bb      	str	r3, [r7, #8]
   return(result);
 8012262:	68bb      	ldr	r3, [r7, #8]
 8012264:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012268:	66fb      	str	r3, [r7, #108]	; 0x6c
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	3314      	adds	r3, #20
 8012270:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012272:	61ba      	str	r2, [r7, #24]
 8012274:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012276:	6979      	ldr	r1, [r7, #20]
 8012278:	69ba      	ldr	r2, [r7, #24]
 801227a:	e841 2300 	strex	r3, r2, [r1]
 801227e:	613b      	str	r3, [r7, #16]
   return(result);
 8012280:	693b      	ldr	r3, [r7, #16]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d1e5      	bne.n	8012252 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801228a:	2b00      	cmp	r3, #0
 801228c:	d018      	beq.n	80122c0 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012292:	2200      	movs	r2, #0
 8012294:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801229a:	4618      	mov	r0, r3
 801229c:	f7fd fbcd 	bl	800fa3a <HAL_DMA_Abort>
 80122a0:	4603      	mov	r3, r0
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d00c      	beq.n	80122c0 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122aa:	4618      	mov	r0, r3
 80122ac:	f7fd fc57 	bl	800fb5e <HAL_DMA_GetError>
 80122b0:	4603      	mov	r3, r0
 80122b2:	2b20      	cmp	r3, #32
 80122b4:	d104      	bne.n	80122c0 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	2210      	movs	r2, #16
 80122ba:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80122bc:	2303      	movs	r3, #3
 80122be:	e014      	b.n	80122ea <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	2200      	movs	r2, #0
 80122c4:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	2200      	movs	r2, #0
 80122ca:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	2200      	movs	r2, #0
 80122d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	2220      	movs	r2, #32
 80122d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	2220      	movs	r2, #32
 80122de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	2200      	movs	r2, #0
 80122e6:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80122e8:	2300      	movs	r3, #0
}
 80122ea:	4618      	mov	r0, r3
 80122ec:	3780      	adds	r7, #128	; 0x80
 80122ee:	46bd      	mov	sp, r7
 80122f0:	bd80      	pop	{r7, pc}
	...

080122f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b0ba      	sub	sp, #232	; 0xe8
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	68db      	ldr	r3, [r3, #12]
 801230c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	695b      	ldr	r3, [r3, #20]
 8012316:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 801231a:	2300      	movs	r3, #0
 801231c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8012320:	2300      	movs	r3, #0
 8012322:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8012326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801232a:	f003 030f 	and.w	r3, r3, #15
 801232e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8012332:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012336:	2b00      	cmp	r3, #0
 8012338:	d10f      	bne.n	801235a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801233a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801233e:	f003 0320 	and.w	r3, r3, #32
 8012342:	2b00      	cmp	r3, #0
 8012344:	d009      	beq.n	801235a <HAL_UART_IRQHandler+0x66>
 8012346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801234a:	f003 0320 	and.w	r3, r3, #32
 801234e:	2b00      	cmp	r3, #0
 8012350:	d003      	beq.n	801235a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8012352:	6878      	ldr	r0, [r7, #4]
 8012354:	f000 fb8f 	bl	8012a76 <UART_Receive_IT>
      return;
 8012358:	e256      	b.n	8012808 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 801235a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801235e:	2b00      	cmp	r3, #0
 8012360:	f000 80de 	beq.w	8012520 <HAL_UART_IRQHandler+0x22c>
 8012364:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012368:	f003 0301 	and.w	r3, r3, #1
 801236c:	2b00      	cmp	r3, #0
 801236e:	d106      	bne.n	801237e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8012370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012374:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8012378:	2b00      	cmp	r3, #0
 801237a:	f000 80d1 	beq.w	8012520 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801237e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012382:	f003 0301 	and.w	r3, r3, #1
 8012386:	2b00      	cmp	r3, #0
 8012388:	d00b      	beq.n	80123a2 <HAL_UART_IRQHandler+0xae>
 801238a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801238e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012392:	2b00      	cmp	r3, #0
 8012394:	d005      	beq.n	80123a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801239a:	f043 0201 	orr.w	r2, r3, #1
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80123a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80123a6:	f003 0304 	and.w	r3, r3, #4
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d00b      	beq.n	80123c6 <HAL_UART_IRQHandler+0xd2>
 80123ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80123b2:	f003 0301 	and.w	r3, r3, #1
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d005      	beq.n	80123c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123be:	f043 0202 	orr.w	r2, r3, #2
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80123c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80123ca:	f003 0302 	and.w	r3, r3, #2
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d00b      	beq.n	80123ea <HAL_UART_IRQHandler+0xf6>
 80123d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80123d6:	f003 0301 	and.w	r3, r3, #1
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d005      	beq.n	80123ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123e2:	f043 0204 	orr.w	r2, r3, #4
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80123ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80123ee:	f003 0308 	and.w	r3, r3, #8
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d011      	beq.n	801241a <HAL_UART_IRQHandler+0x126>
 80123f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80123fa:	f003 0320 	and.w	r3, r3, #32
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d105      	bne.n	801240e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8012402:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012406:	f003 0301 	and.w	r3, r3, #1
 801240a:	2b00      	cmp	r3, #0
 801240c:	d005      	beq.n	801241a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012412:	f043 0208 	orr.w	r2, r3, #8
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801241e:	2b00      	cmp	r3, #0
 8012420:	f000 81ed 	beq.w	80127fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8012424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012428:	f003 0320 	and.w	r3, r3, #32
 801242c:	2b00      	cmp	r3, #0
 801242e:	d008      	beq.n	8012442 <HAL_UART_IRQHandler+0x14e>
 8012430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012434:	f003 0320 	and.w	r3, r3, #32
 8012438:	2b00      	cmp	r3, #0
 801243a:	d002      	beq.n	8012442 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 801243c:	6878      	ldr	r0, [r7, #4]
 801243e:	f000 fb1a 	bl	8012a76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	695b      	ldr	r3, [r3, #20]
 8012448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801244c:	2b40      	cmp	r3, #64	; 0x40
 801244e:	bf0c      	ite	eq
 8012450:	2301      	moveq	r3, #1
 8012452:	2300      	movne	r3, #0
 8012454:	b2db      	uxtb	r3, r3
 8012456:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801245e:	f003 0308 	and.w	r3, r3, #8
 8012462:	2b00      	cmp	r3, #0
 8012464:	d103      	bne.n	801246e <HAL_UART_IRQHandler+0x17a>
 8012466:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801246a:	2b00      	cmp	r3, #0
 801246c:	d04f      	beq.n	801250e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801246e:	6878      	ldr	r0, [r7, #4]
 8012470:	f000 fa22 	bl	80128b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	695b      	ldr	r3, [r3, #20]
 801247a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801247e:	2b40      	cmp	r3, #64	; 0x40
 8012480:	d141      	bne.n	8012506 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	3314      	adds	r3, #20
 8012488:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801248c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012490:	e853 3f00 	ldrex	r3, [r3]
 8012494:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8012498:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801249c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80124a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	3314      	adds	r3, #20
 80124aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80124ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80124b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80124ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80124be:	e841 2300 	strex	r3, r2, [r1]
 80124c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80124c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d1d9      	bne.n	8012482 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d013      	beq.n	80124fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124da:	4a7d      	ldr	r2, [pc, #500]	; (80126d0 <HAL_UART_IRQHandler+0x3dc>)
 80124dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124e2:	4618      	mov	r0, r3
 80124e4:	f7fd fb19 	bl	800fb1a <HAL_DMA_Abort_IT>
 80124e8:	4603      	mov	r3, r0
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d016      	beq.n	801251c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80124f4:	687a      	ldr	r2, [r7, #4]
 80124f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80124f8:	4610      	mov	r0, r2
 80124fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80124fc:	e00e      	b.n	801251c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80124fe:	6878      	ldr	r0, [r7, #4]
 8012500:	f000 f986 	bl	8012810 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012504:	e00a      	b.n	801251c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012506:	6878      	ldr	r0, [r7, #4]
 8012508:	f000 f982 	bl	8012810 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801250c:	e006      	b.n	801251c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801250e:	6878      	ldr	r0, [r7, #4]
 8012510:	f000 f97e 	bl	8012810 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	2200      	movs	r2, #0
 8012518:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 801251a:	e170      	b.n	80127fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801251c:	bf00      	nop
    return;
 801251e:	e16e      	b.n	80127fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012524:	2b01      	cmp	r3, #1
 8012526:	f040 814a 	bne.w	80127be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 801252a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801252e:	f003 0310 	and.w	r3, r3, #16
 8012532:	2b00      	cmp	r3, #0
 8012534:	f000 8143 	beq.w	80127be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8012538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801253c:	f003 0310 	and.w	r3, r3, #16
 8012540:	2b00      	cmp	r3, #0
 8012542:	f000 813c 	beq.w	80127be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8012546:	2300      	movs	r3, #0
 8012548:	60bb      	str	r3, [r7, #8]
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	60bb      	str	r3, [r7, #8]
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	685b      	ldr	r3, [r3, #4]
 8012558:	60bb      	str	r3, [r7, #8]
 801255a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	695b      	ldr	r3, [r3, #20]
 8012562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012566:	2b40      	cmp	r3, #64	; 0x40
 8012568:	f040 80b4 	bne.w	80126d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	685b      	ldr	r3, [r3, #4]
 8012574:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8012578:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801257c:	2b00      	cmp	r3, #0
 801257e:	f000 8140 	beq.w	8012802 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8012586:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801258a:	429a      	cmp	r2, r3
 801258c:	f080 8139 	bcs.w	8012802 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8012596:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801259c:	69db      	ldr	r3, [r3, #28]
 801259e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80125a2:	f000 8088 	beq.w	80126b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	330c      	adds	r3, #12
 80125ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80125b4:	e853 3f00 	ldrex	r3, [r3]
 80125b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80125bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80125c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80125c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	330c      	adds	r3, #12
 80125ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80125d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80125d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80125de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80125e2:	e841 2300 	strex	r3, r2, [r1]
 80125e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80125ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d1d9      	bne.n	80125a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	3314      	adds	r3, #20
 80125f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80125fc:	e853 3f00 	ldrex	r3, [r3]
 8012600:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012602:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012604:	f023 0301 	bic.w	r3, r3, #1
 8012608:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	3314      	adds	r3, #20
 8012612:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8012616:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801261a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801261c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801261e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012622:	e841 2300 	strex	r3, r2, [r1]
 8012626:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012628:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801262a:	2b00      	cmp	r3, #0
 801262c:	d1e1      	bne.n	80125f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	3314      	adds	r3, #20
 8012634:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012636:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012638:	e853 3f00 	ldrex	r3, [r3]
 801263c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801263e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012644:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	3314      	adds	r3, #20
 801264e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8012652:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012654:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012656:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012658:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801265a:	e841 2300 	strex	r3, r2, [r1]
 801265e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012660:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012662:	2b00      	cmp	r3, #0
 8012664:	d1e3      	bne.n	801262e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	2220      	movs	r2, #32
 801266a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	2200      	movs	r2, #0
 8012672:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	330c      	adds	r3, #12
 801267a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801267c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801267e:	e853 3f00 	ldrex	r3, [r3]
 8012682:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012686:	f023 0310 	bic.w	r3, r3, #16
 801268a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	330c      	adds	r3, #12
 8012694:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8012698:	65ba      	str	r2, [r7, #88]	; 0x58
 801269a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801269c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801269e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80126a0:	e841 2300 	strex	r3, r2, [r1]
 80126a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80126a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d1e3      	bne.n	8012674 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126b0:	4618      	mov	r0, r3
 80126b2:	f7fd f9c2 	bl	800fa3a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80126be:	b29b      	uxth	r3, r3
 80126c0:	1ad3      	subs	r3, r2, r3
 80126c2:	b29b      	uxth	r3, r3
 80126c4:	4619      	mov	r1, r3
 80126c6:	6878      	ldr	r0, [r7, #4]
 80126c8:	f000 f8ac 	bl	8012824 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80126cc:	e099      	b.n	8012802 <HAL_UART_IRQHandler+0x50e>
 80126ce:	bf00      	nop
 80126d0:	0801297f 	.word	0x0801297f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80126dc:	b29b      	uxth	r3, r3
 80126de:	1ad3      	subs	r3, r2, r3
 80126e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80126e8:	b29b      	uxth	r3, r3
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	f000 808b 	beq.w	8012806 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80126f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	f000 8086 	beq.w	8012806 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	330c      	adds	r3, #12
 8012700:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012704:	e853 3f00 	ldrex	r3, [r3]
 8012708:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801270a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801270c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012710:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	330c      	adds	r3, #12
 801271a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801271e:	647a      	str	r2, [r7, #68]	; 0x44
 8012720:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012722:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012724:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012726:	e841 2300 	strex	r3, r2, [r1]
 801272a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801272c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801272e:	2b00      	cmp	r3, #0
 8012730:	d1e3      	bne.n	80126fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	3314      	adds	r3, #20
 8012738:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801273c:	e853 3f00 	ldrex	r3, [r3]
 8012740:	623b      	str	r3, [r7, #32]
   return(result);
 8012742:	6a3b      	ldr	r3, [r7, #32]
 8012744:	f023 0301 	bic.w	r3, r3, #1
 8012748:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	3314      	adds	r3, #20
 8012752:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8012756:	633a      	str	r2, [r7, #48]	; 0x30
 8012758:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801275a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801275c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801275e:	e841 2300 	strex	r3, r2, [r1]
 8012762:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012766:	2b00      	cmp	r3, #0
 8012768:	d1e3      	bne.n	8012732 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	2220      	movs	r2, #32
 801276e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	2200      	movs	r2, #0
 8012776:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	330c      	adds	r3, #12
 801277e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012780:	693b      	ldr	r3, [r7, #16]
 8012782:	e853 3f00 	ldrex	r3, [r3]
 8012786:	60fb      	str	r3, [r7, #12]
   return(result);
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	f023 0310 	bic.w	r3, r3, #16
 801278e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	330c      	adds	r3, #12
 8012798:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801279c:	61fa      	str	r2, [r7, #28]
 801279e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127a0:	69b9      	ldr	r1, [r7, #24]
 80127a2:	69fa      	ldr	r2, [r7, #28]
 80127a4:	e841 2300 	strex	r3, r2, [r1]
 80127a8:	617b      	str	r3, [r7, #20]
   return(result);
 80127aa:	697b      	ldr	r3, [r7, #20]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d1e3      	bne.n	8012778 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80127b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80127b4:	4619      	mov	r1, r3
 80127b6:	6878      	ldr	r0, [r7, #4]
 80127b8:	f000 f834 	bl	8012824 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80127bc:	e023      	b.n	8012806 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80127be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80127c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d009      	beq.n	80127de <HAL_UART_IRQHandler+0x4ea>
 80127ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80127ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d003      	beq.n	80127de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80127d6:	6878      	ldr	r0, [r7, #4]
 80127d8:	f000 f8e5 	bl	80129a6 <UART_Transmit_IT>
    return;
 80127dc:	e014      	b.n	8012808 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80127de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80127e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d00e      	beq.n	8012808 <HAL_UART_IRQHandler+0x514>
 80127ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80127ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d008      	beq.n	8012808 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80127f6:	6878      	ldr	r0, [r7, #4]
 80127f8:	f000 f925 	bl	8012a46 <UART_EndTransmit_IT>
    return;
 80127fc:	e004      	b.n	8012808 <HAL_UART_IRQHandler+0x514>
    return;
 80127fe:	bf00      	nop
 8012800:	e002      	b.n	8012808 <HAL_UART_IRQHandler+0x514>
      return;
 8012802:	bf00      	nop
 8012804:	e000      	b.n	8012808 <HAL_UART_IRQHandler+0x514>
      return;
 8012806:	bf00      	nop
  }
}
 8012808:	37e8      	adds	r7, #232	; 0xe8
 801280a:	46bd      	mov	sp, r7
 801280c:	bd80      	pop	{r7, pc}
 801280e:	bf00      	nop

08012810 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8012810:	b480      	push	{r7}
 8012812:	b083      	sub	sp, #12
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8012818:	bf00      	nop
 801281a:	370c      	adds	r7, #12
 801281c:	46bd      	mov	sp, r7
 801281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012822:	4770      	bx	lr

08012824 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8012824:	b480      	push	{r7}
 8012826:	b083      	sub	sp, #12
 8012828:	af00      	add	r7, sp, #0
 801282a:	6078      	str	r0, [r7, #4]
 801282c:	460b      	mov	r3, r1
 801282e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8012830:	bf00      	nop
 8012832:	370c      	adds	r7, #12
 8012834:	46bd      	mov	sp, r7
 8012836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801283a:	4770      	bx	lr

0801283c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801283c:	b480      	push	{r7}
 801283e:	b085      	sub	sp, #20
 8012840:	af00      	add	r7, sp, #0
 8012842:	60f8      	str	r0, [r7, #12]
 8012844:	60b9      	str	r1, [r7, #8]
 8012846:	4613      	mov	r3, r2
 8012848:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	68ba      	ldr	r2, [r7, #8]
 801284e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	88fa      	ldrh	r2, [r7, #6]
 8012854:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	88fa      	ldrh	r2, [r7, #6]
 801285a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	2200      	movs	r2, #0
 8012860:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	2222      	movs	r2, #34	; 0x22
 8012866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	2200      	movs	r2, #0
 801286e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	691b      	ldr	r3, [r3, #16]
 8012876:	2b00      	cmp	r3, #0
 8012878:	d007      	beq.n	801288a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	68da      	ldr	r2, [r3, #12]
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012888:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	695a      	ldr	r2, [r3, #20]
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	f042 0201 	orr.w	r2, r2, #1
 8012898:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	68da      	ldr	r2, [r3, #12]
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	f042 0220 	orr.w	r2, r2, #32
 80128a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80128aa:	2300      	movs	r3, #0
}
 80128ac:	4618      	mov	r0, r3
 80128ae:	3714      	adds	r7, #20
 80128b0:	46bd      	mov	sp, r7
 80128b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b6:	4770      	bx	lr

080128b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80128b8:	b480      	push	{r7}
 80128ba:	b095      	sub	sp, #84	; 0x54
 80128bc:	af00      	add	r7, sp, #0
 80128be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	330c      	adds	r3, #12
 80128c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128ca:	e853 3f00 	ldrex	r3, [r3]
 80128ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80128d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80128d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	330c      	adds	r3, #12
 80128de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80128e0:	643a      	str	r2, [r7, #64]	; 0x40
 80128e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80128e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80128e8:	e841 2300 	strex	r3, r2, [r1]
 80128ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80128ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d1e5      	bne.n	80128c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	3314      	adds	r3, #20
 80128fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128fc:	6a3b      	ldr	r3, [r7, #32]
 80128fe:	e853 3f00 	ldrex	r3, [r3]
 8012902:	61fb      	str	r3, [r7, #28]
   return(result);
 8012904:	69fb      	ldr	r3, [r7, #28]
 8012906:	f023 0301 	bic.w	r3, r3, #1
 801290a:	64bb      	str	r3, [r7, #72]	; 0x48
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	3314      	adds	r3, #20
 8012912:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012914:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012916:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012918:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801291a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801291c:	e841 2300 	strex	r3, r2, [r1]
 8012920:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012924:	2b00      	cmp	r3, #0
 8012926:	d1e5      	bne.n	80128f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801292c:	2b01      	cmp	r3, #1
 801292e:	d119      	bne.n	8012964 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	330c      	adds	r3, #12
 8012936:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	e853 3f00 	ldrex	r3, [r3]
 801293e:	60bb      	str	r3, [r7, #8]
   return(result);
 8012940:	68bb      	ldr	r3, [r7, #8]
 8012942:	f023 0310 	bic.w	r3, r3, #16
 8012946:	647b      	str	r3, [r7, #68]	; 0x44
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	330c      	adds	r3, #12
 801294e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012950:	61ba      	str	r2, [r7, #24]
 8012952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012954:	6979      	ldr	r1, [r7, #20]
 8012956:	69ba      	ldr	r2, [r7, #24]
 8012958:	e841 2300 	strex	r3, r2, [r1]
 801295c:	613b      	str	r3, [r7, #16]
   return(result);
 801295e:	693b      	ldr	r3, [r7, #16]
 8012960:	2b00      	cmp	r3, #0
 8012962:	d1e5      	bne.n	8012930 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	2220      	movs	r2, #32
 8012968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	2200      	movs	r2, #0
 8012970:	631a      	str	r2, [r3, #48]	; 0x30
}
 8012972:	bf00      	nop
 8012974:	3754      	adds	r7, #84	; 0x54
 8012976:	46bd      	mov	sp, r7
 8012978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297c:	4770      	bx	lr

0801297e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801297e:	b580      	push	{r7, lr}
 8012980:	b084      	sub	sp, #16
 8012982:	af00      	add	r7, sp, #0
 8012984:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801298a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	2200      	movs	r2, #0
 8012990:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	2200      	movs	r2, #0
 8012996:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012998:	68f8      	ldr	r0, [r7, #12]
 801299a:	f7ff ff39 	bl	8012810 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801299e:	bf00      	nop
 80129a0:	3710      	adds	r7, #16
 80129a2:	46bd      	mov	sp, r7
 80129a4:	bd80      	pop	{r7, pc}

080129a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80129a6:	b480      	push	{r7}
 80129a8:	b085      	sub	sp, #20
 80129aa:	af00      	add	r7, sp, #0
 80129ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80129b4:	b2db      	uxtb	r3, r3
 80129b6:	2b21      	cmp	r3, #33	; 0x21
 80129b8:	d13e      	bne.n	8012a38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	689b      	ldr	r3, [r3, #8]
 80129be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80129c2:	d114      	bne.n	80129ee <UART_Transmit_IT+0x48>
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	691b      	ldr	r3, [r3, #16]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d110      	bne.n	80129ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	6a1b      	ldr	r3, [r3, #32]
 80129d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	881b      	ldrh	r3, [r3, #0]
 80129d6:	461a      	mov	r2, r3
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80129e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	6a1b      	ldr	r3, [r3, #32]
 80129e6:	1c9a      	adds	r2, r3, #2
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	621a      	str	r2, [r3, #32]
 80129ec:	e008      	b.n	8012a00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	6a1b      	ldr	r3, [r3, #32]
 80129f2:	1c59      	adds	r1, r3, #1
 80129f4:	687a      	ldr	r2, [r7, #4]
 80129f6:	6211      	str	r1, [r2, #32]
 80129f8:	781a      	ldrb	r2, [r3, #0]
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012a04:	b29b      	uxth	r3, r3
 8012a06:	3b01      	subs	r3, #1
 8012a08:	b29b      	uxth	r3, r3
 8012a0a:	687a      	ldr	r2, [r7, #4]
 8012a0c:	4619      	mov	r1, r3
 8012a0e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d10f      	bne.n	8012a34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	68da      	ldr	r2, [r3, #12]
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012a22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	68da      	ldr	r2, [r3, #12]
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012a32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8012a34:	2300      	movs	r3, #0
 8012a36:	e000      	b.n	8012a3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8012a38:	2302      	movs	r3, #2
  }
}
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	3714      	adds	r7, #20
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a44:	4770      	bx	lr

08012a46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012a46:	b580      	push	{r7, lr}
 8012a48:	b082      	sub	sp, #8
 8012a4a:	af00      	add	r7, sp, #0
 8012a4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	68da      	ldr	r2, [r3, #12]
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012a5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	2220      	movs	r2, #32
 8012a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8012a66:	6878      	ldr	r0, [r7, #4]
 8012a68:	f7f9 fcce 	bl	800c408 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8012a6c:	2300      	movs	r3, #0
}
 8012a6e:	4618      	mov	r0, r3
 8012a70:	3708      	adds	r7, #8
 8012a72:	46bd      	mov	sp, r7
 8012a74:	bd80      	pop	{r7, pc}

08012a76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8012a76:	b580      	push	{r7, lr}
 8012a78:	b08c      	sub	sp, #48	; 0x30
 8012a7a:	af00      	add	r7, sp, #0
 8012a7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012a84:	b2db      	uxtb	r3, r3
 8012a86:	2b22      	cmp	r3, #34	; 0x22
 8012a88:	f040 80ab 	bne.w	8012be2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	689b      	ldr	r3, [r3, #8]
 8012a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012a94:	d117      	bne.n	8012ac6 <UART_Receive_IT+0x50>
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	691b      	ldr	r3, [r3, #16]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d113      	bne.n	8012ac6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8012a9e:	2300      	movs	r3, #0
 8012aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012aa6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	685b      	ldr	r3, [r3, #4]
 8012aae:	b29b      	uxth	r3, r3
 8012ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ab4:	b29a      	uxth	r2, r3
 8012ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ab8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012abe:	1c9a      	adds	r2, r3, #2
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	629a      	str	r2, [r3, #40]	; 0x28
 8012ac4:	e026      	b.n	8012b14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012aca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8012acc:	2300      	movs	r3, #0
 8012ace:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	689b      	ldr	r3, [r3, #8]
 8012ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012ad8:	d007      	beq.n	8012aea <UART_Receive_IT+0x74>
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	689b      	ldr	r3, [r3, #8]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d10a      	bne.n	8012af8 <UART_Receive_IT+0x82>
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	691b      	ldr	r3, [r3, #16]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d106      	bne.n	8012af8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	685b      	ldr	r3, [r3, #4]
 8012af0:	b2da      	uxtb	r2, r3
 8012af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012af4:	701a      	strb	r2, [r3, #0]
 8012af6:	e008      	b.n	8012b0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	685b      	ldr	r3, [r3, #4]
 8012afe:	b2db      	uxtb	r3, r3
 8012b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012b04:	b2da      	uxtb	r2, r3
 8012b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b0e:	1c5a      	adds	r2, r3, #1
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8012b18:	b29b      	uxth	r3, r3
 8012b1a:	3b01      	subs	r3, #1
 8012b1c:	b29b      	uxth	r3, r3
 8012b1e:	687a      	ldr	r2, [r7, #4]
 8012b20:	4619      	mov	r1, r3
 8012b22:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d15a      	bne.n	8012bde <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	68da      	ldr	r2, [r3, #12]
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	f022 0220 	bic.w	r2, r2, #32
 8012b36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	68da      	ldr	r2, [r3, #12]
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8012b46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	695a      	ldr	r2, [r3, #20]
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	f022 0201 	bic.w	r2, r2, #1
 8012b56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	2220      	movs	r2, #32
 8012b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b64:	2b01      	cmp	r3, #1
 8012b66:	d135      	bne.n	8012bd4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	330c      	adds	r3, #12
 8012b74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b76:	697b      	ldr	r3, [r7, #20]
 8012b78:	e853 3f00 	ldrex	r3, [r3]
 8012b7c:	613b      	str	r3, [r7, #16]
   return(result);
 8012b7e:	693b      	ldr	r3, [r7, #16]
 8012b80:	f023 0310 	bic.w	r3, r3, #16
 8012b84:	627b      	str	r3, [r7, #36]	; 0x24
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	330c      	adds	r3, #12
 8012b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b8e:	623a      	str	r2, [r7, #32]
 8012b90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b92:	69f9      	ldr	r1, [r7, #28]
 8012b94:	6a3a      	ldr	r2, [r7, #32]
 8012b96:	e841 2300 	strex	r3, r2, [r1]
 8012b9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8012b9c:	69bb      	ldr	r3, [r7, #24]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d1e5      	bne.n	8012b6e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	f003 0310 	and.w	r3, r3, #16
 8012bac:	2b10      	cmp	r3, #16
 8012bae:	d10a      	bne.n	8012bc6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	60fb      	str	r3, [r7, #12]
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	60fb      	str	r3, [r7, #12]
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	685b      	ldr	r3, [r3, #4]
 8012bc2:	60fb      	str	r3, [r7, #12]
 8012bc4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8012bca:	4619      	mov	r1, r3
 8012bcc:	6878      	ldr	r0, [r7, #4]
 8012bce:	f7ff fe29 	bl	8012824 <HAL_UARTEx_RxEventCallback>
 8012bd2:	e002      	b.n	8012bda <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8012bd4:	6878      	ldr	r0, [r7, #4]
 8012bd6:	f7f9 fc2b 	bl	800c430 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8012bda:	2300      	movs	r3, #0
 8012bdc:	e002      	b.n	8012be4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8012bde:	2300      	movs	r3, #0
 8012be0:	e000      	b.n	8012be4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8012be2:	2302      	movs	r3, #2
  }
}
 8012be4:	4618      	mov	r0, r3
 8012be6:	3730      	adds	r7, #48	; 0x30
 8012be8:	46bd      	mov	sp, r7
 8012bea:	bd80      	pop	{r7, pc}

08012bec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012bf0:	b0c0      	sub	sp, #256	; 0x100
 8012bf2:	af00      	add	r7, sp, #0
 8012bf4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	691b      	ldr	r3, [r3, #16]
 8012c00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8012c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012c08:	68d9      	ldr	r1, [r3, #12]
 8012c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012c0e:	681a      	ldr	r2, [r3, #0]
 8012c10:	ea40 0301 	orr.w	r3, r0, r1
 8012c14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8012c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012c1a:	689a      	ldr	r2, [r3, #8]
 8012c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012c20:	691b      	ldr	r3, [r3, #16]
 8012c22:	431a      	orrs	r2, r3
 8012c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012c28:	695b      	ldr	r3, [r3, #20]
 8012c2a:	431a      	orrs	r2, r3
 8012c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012c30:	69db      	ldr	r3, [r3, #28]
 8012c32:	4313      	orrs	r3, r2
 8012c34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8012c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	68db      	ldr	r3, [r3, #12]
 8012c40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8012c44:	f021 010c 	bic.w	r1, r1, #12
 8012c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012c4c:	681a      	ldr	r2, [r3, #0]
 8012c4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8012c52:	430b      	orrs	r3, r1
 8012c54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8012c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	695b      	ldr	r3, [r3, #20]
 8012c5e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8012c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012c66:	6999      	ldr	r1, [r3, #24]
 8012c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012c6c:	681a      	ldr	r2, [r3, #0]
 8012c6e:	ea40 0301 	orr.w	r3, r0, r1
 8012c72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8012c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012c78:	681a      	ldr	r2, [r3, #0]
 8012c7a:	4b8f      	ldr	r3, [pc, #572]	; (8012eb8 <UART_SetConfig+0x2cc>)
 8012c7c:	429a      	cmp	r2, r3
 8012c7e:	d005      	beq.n	8012c8c <UART_SetConfig+0xa0>
 8012c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012c84:	681a      	ldr	r2, [r3, #0]
 8012c86:	4b8d      	ldr	r3, [pc, #564]	; (8012ebc <UART_SetConfig+0x2d0>)
 8012c88:	429a      	cmp	r2, r3
 8012c8a:	d104      	bne.n	8012c96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8012c8c:	f7fd fa78 	bl	8010180 <HAL_RCC_GetPCLK2Freq>
 8012c90:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8012c94:	e003      	b.n	8012c9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8012c96:	f7fd fa5f 	bl	8010158 <HAL_RCC_GetPCLK1Freq>
 8012c9a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012ca2:	69db      	ldr	r3, [r3, #28]
 8012ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012ca8:	f040 810c 	bne.w	8012ec4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8012cac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012cb0:	2200      	movs	r2, #0
 8012cb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012cb6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8012cba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8012cbe:	4622      	mov	r2, r4
 8012cc0:	462b      	mov	r3, r5
 8012cc2:	1891      	adds	r1, r2, r2
 8012cc4:	65b9      	str	r1, [r7, #88]	; 0x58
 8012cc6:	415b      	adcs	r3, r3
 8012cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012cca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8012cce:	4621      	mov	r1, r4
 8012cd0:	eb12 0801 	adds.w	r8, r2, r1
 8012cd4:	4629      	mov	r1, r5
 8012cd6:	eb43 0901 	adc.w	r9, r3, r1
 8012cda:	f04f 0200 	mov.w	r2, #0
 8012cde:	f04f 0300 	mov.w	r3, #0
 8012ce2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8012ce6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8012cea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8012cee:	4690      	mov	r8, r2
 8012cf0:	4699      	mov	r9, r3
 8012cf2:	4623      	mov	r3, r4
 8012cf4:	eb18 0303 	adds.w	r3, r8, r3
 8012cf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012cfc:	462b      	mov	r3, r5
 8012cfe:	eb49 0303 	adc.w	r3, r9, r3
 8012d02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8012d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012d0a:	685b      	ldr	r3, [r3, #4]
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012d12:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8012d16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8012d1a:	460b      	mov	r3, r1
 8012d1c:	18db      	adds	r3, r3, r3
 8012d1e:	653b      	str	r3, [r7, #80]	; 0x50
 8012d20:	4613      	mov	r3, r2
 8012d22:	eb42 0303 	adc.w	r3, r2, r3
 8012d26:	657b      	str	r3, [r7, #84]	; 0x54
 8012d28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8012d2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8012d30:	f7ed ffba 	bl	8000ca8 <__aeabi_uldivmod>
 8012d34:	4602      	mov	r2, r0
 8012d36:	460b      	mov	r3, r1
 8012d38:	4b61      	ldr	r3, [pc, #388]	; (8012ec0 <UART_SetConfig+0x2d4>)
 8012d3a:	fba3 2302 	umull	r2, r3, r3, r2
 8012d3e:	095b      	lsrs	r3, r3, #5
 8012d40:	011c      	lsls	r4, r3, #4
 8012d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012d46:	2200      	movs	r2, #0
 8012d48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012d4c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8012d50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8012d54:	4642      	mov	r2, r8
 8012d56:	464b      	mov	r3, r9
 8012d58:	1891      	adds	r1, r2, r2
 8012d5a:	64b9      	str	r1, [r7, #72]	; 0x48
 8012d5c:	415b      	adcs	r3, r3
 8012d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012d60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8012d64:	4641      	mov	r1, r8
 8012d66:	eb12 0a01 	adds.w	sl, r2, r1
 8012d6a:	4649      	mov	r1, r9
 8012d6c:	eb43 0b01 	adc.w	fp, r3, r1
 8012d70:	f04f 0200 	mov.w	r2, #0
 8012d74:	f04f 0300 	mov.w	r3, #0
 8012d78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8012d7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8012d80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8012d84:	4692      	mov	sl, r2
 8012d86:	469b      	mov	fp, r3
 8012d88:	4643      	mov	r3, r8
 8012d8a:	eb1a 0303 	adds.w	r3, sl, r3
 8012d8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012d92:	464b      	mov	r3, r9
 8012d94:	eb4b 0303 	adc.w	r3, fp, r3
 8012d98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8012d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012da0:	685b      	ldr	r3, [r3, #4]
 8012da2:	2200      	movs	r2, #0
 8012da4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012da8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8012dac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8012db0:	460b      	mov	r3, r1
 8012db2:	18db      	adds	r3, r3, r3
 8012db4:	643b      	str	r3, [r7, #64]	; 0x40
 8012db6:	4613      	mov	r3, r2
 8012db8:	eb42 0303 	adc.w	r3, r2, r3
 8012dbc:	647b      	str	r3, [r7, #68]	; 0x44
 8012dbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8012dc2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8012dc6:	f7ed ff6f 	bl	8000ca8 <__aeabi_uldivmod>
 8012dca:	4602      	mov	r2, r0
 8012dcc:	460b      	mov	r3, r1
 8012dce:	4611      	mov	r1, r2
 8012dd0:	4b3b      	ldr	r3, [pc, #236]	; (8012ec0 <UART_SetConfig+0x2d4>)
 8012dd2:	fba3 2301 	umull	r2, r3, r3, r1
 8012dd6:	095b      	lsrs	r3, r3, #5
 8012dd8:	2264      	movs	r2, #100	; 0x64
 8012dda:	fb02 f303 	mul.w	r3, r2, r3
 8012dde:	1acb      	subs	r3, r1, r3
 8012de0:	00db      	lsls	r3, r3, #3
 8012de2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8012de6:	4b36      	ldr	r3, [pc, #216]	; (8012ec0 <UART_SetConfig+0x2d4>)
 8012de8:	fba3 2302 	umull	r2, r3, r3, r2
 8012dec:	095b      	lsrs	r3, r3, #5
 8012dee:	005b      	lsls	r3, r3, #1
 8012df0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8012df4:	441c      	add	r4, r3
 8012df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012dfa:	2200      	movs	r2, #0
 8012dfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8012e00:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8012e04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8012e08:	4642      	mov	r2, r8
 8012e0a:	464b      	mov	r3, r9
 8012e0c:	1891      	adds	r1, r2, r2
 8012e0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8012e10:	415b      	adcs	r3, r3
 8012e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012e14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8012e18:	4641      	mov	r1, r8
 8012e1a:	1851      	adds	r1, r2, r1
 8012e1c:	6339      	str	r1, [r7, #48]	; 0x30
 8012e1e:	4649      	mov	r1, r9
 8012e20:	414b      	adcs	r3, r1
 8012e22:	637b      	str	r3, [r7, #52]	; 0x34
 8012e24:	f04f 0200 	mov.w	r2, #0
 8012e28:	f04f 0300 	mov.w	r3, #0
 8012e2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8012e30:	4659      	mov	r1, fp
 8012e32:	00cb      	lsls	r3, r1, #3
 8012e34:	4651      	mov	r1, sl
 8012e36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012e3a:	4651      	mov	r1, sl
 8012e3c:	00ca      	lsls	r2, r1, #3
 8012e3e:	4610      	mov	r0, r2
 8012e40:	4619      	mov	r1, r3
 8012e42:	4603      	mov	r3, r0
 8012e44:	4642      	mov	r2, r8
 8012e46:	189b      	adds	r3, r3, r2
 8012e48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8012e4c:	464b      	mov	r3, r9
 8012e4e:	460a      	mov	r2, r1
 8012e50:	eb42 0303 	adc.w	r3, r2, r3
 8012e54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012e5c:	685b      	ldr	r3, [r3, #4]
 8012e5e:	2200      	movs	r2, #0
 8012e60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8012e64:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8012e68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8012e6c:	460b      	mov	r3, r1
 8012e6e:	18db      	adds	r3, r3, r3
 8012e70:	62bb      	str	r3, [r7, #40]	; 0x28
 8012e72:	4613      	mov	r3, r2
 8012e74:	eb42 0303 	adc.w	r3, r2, r3
 8012e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8012e7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8012e82:	f7ed ff11 	bl	8000ca8 <__aeabi_uldivmod>
 8012e86:	4602      	mov	r2, r0
 8012e88:	460b      	mov	r3, r1
 8012e8a:	4b0d      	ldr	r3, [pc, #52]	; (8012ec0 <UART_SetConfig+0x2d4>)
 8012e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8012e90:	095b      	lsrs	r3, r3, #5
 8012e92:	2164      	movs	r1, #100	; 0x64
 8012e94:	fb01 f303 	mul.w	r3, r1, r3
 8012e98:	1ad3      	subs	r3, r2, r3
 8012e9a:	00db      	lsls	r3, r3, #3
 8012e9c:	3332      	adds	r3, #50	; 0x32
 8012e9e:	4a08      	ldr	r2, [pc, #32]	; (8012ec0 <UART_SetConfig+0x2d4>)
 8012ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8012ea4:	095b      	lsrs	r3, r3, #5
 8012ea6:	f003 0207 	and.w	r2, r3, #7
 8012eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	4422      	add	r2, r4
 8012eb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8012eb4:	e106      	b.n	80130c4 <UART_SetConfig+0x4d8>
 8012eb6:	bf00      	nop
 8012eb8:	40011000 	.word	0x40011000
 8012ebc:	40011400 	.word	0x40011400
 8012ec0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8012ec4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012ec8:	2200      	movs	r2, #0
 8012eca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8012ece:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8012ed2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8012ed6:	4642      	mov	r2, r8
 8012ed8:	464b      	mov	r3, r9
 8012eda:	1891      	adds	r1, r2, r2
 8012edc:	6239      	str	r1, [r7, #32]
 8012ede:	415b      	adcs	r3, r3
 8012ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8012ee2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012ee6:	4641      	mov	r1, r8
 8012ee8:	1854      	adds	r4, r2, r1
 8012eea:	4649      	mov	r1, r9
 8012eec:	eb43 0501 	adc.w	r5, r3, r1
 8012ef0:	f04f 0200 	mov.w	r2, #0
 8012ef4:	f04f 0300 	mov.w	r3, #0
 8012ef8:	00eb      	lsls	r3, r5, #3
 8012efa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8012efe:	00e2      	lsls	r2, r4, #3
 8012f00:	4614      	mov	r4, r2
 8012f02:	461d      	mov	r5, r3
 8012f04:	4643      	mov	r3, r8
 8012f06:	18e3      	adds	r3, r4, r3
 8012f08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012f0c:	464b      	mov	r3, r9
 8012f0e:	eb45 0303 	adc.w	r3, r5, r3
 8012f12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012f1a:	685b      	ldr	r3, [r3, #4]
 8012f1c:	2200      	movs	r2, #0
 8012f1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012f22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8012f26:	f04f 0200 	mov.w	r2, #0
 8012f2a:	f04f 0300 	mov.w	r3, #0
 8012f2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8012f32:	4629      	mov	r1, r5
 8012f34:	008b      	lsls	r3, r1, #2
 8012f36:	4621      	mov	r1, r4
 8012f38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012f3c:	4621      	mov	r1, r4
 8012f3e:	008a      	lsls	r2, r1, #2
 8012f40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8012f44:	f7ed feb0 	bl	8000ca8 <__aeabi_uldivmod>
 8012f48:	4602      	mov	r2, r0
 8012f4a:	460b      	mov	r3, r1
 8012f4c:	4b60      	ldr	r3, [pc, #384]	; (80130d0 <UART_SetConfig+0x4e4>)
 8012f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8012f52:	095b      	lsrs	r3, r3, #5
 8012f54:	011c      	lsls	r4, r3, #4
 8012f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012f5a:	2200      	movs	r2, #0
 8012f5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012f60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8012f64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8012f68:	4642      	mov	r2, r8
 8012f6a:	464b      	mov	r3, r9
 8012f6c:	1891      	adds	r1, r2, r2
 8012f6e:	61b9      	str	r1, [r7, #24]
 8012f70:	415b      	adcs	r3, r3
 8012f72:	61fb      	str	r3, [r7, #28]
 8012f74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8012f78:	4641      	mov	r1, r8
 8012f7a:	1851      	adds	r1, r2, r1
 8012f7c:	6139      	str	r1, [r7, #16]
 8012f7e:	4649      	mov	r1, r9
 8012f80:	414b      	adcs	r3, r1
 8012f82:	617b      	str	r3, [r7, #20]
 8012f84:	f04f 0200 	mov.w	r2, #0
 8012f88:	f04f 0300 	mov.w	r3, #0
 8012f8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8012f90:	4659      	mov	r1, fp
 8012f92:	00cb      	lsls	r3, r1, #3
 8012f94:	4651      	mov	r1, sl
 8012f96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012f9a:	4651      	mov	r1, sl
 8012f9c:	00ca      	lsls	r2, r1, #3
 8012f9e:	4610      	mov	r0, r2
 8012fa0:	4619      	mov	r1, r3
 8012fa2:	4603      	mov	r3, r0
 8012fa4:	4642      	mov	r2, r8
 8012fa6:	189b      	adds	r3, r3, r2
 8012fa8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012fac:	464b      	mov	r3, r9
 8012fae:	460a      	mov	r2, r1
 8012fb0:	eb42 0303 	adc.w	r3, r2, r3
 8012fb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012fbc:	685b      	ldr	r3, [r3, #4]
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	67bb      	str	r3, [r7, #120]	; 0x78
 8012fc2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8012fc4:	f04f 0200 	mov.w	r2, #0
 8012fc8:	f04f 0300 	mov.w	r3, #0
 8012fcc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8012fd0:	4649      	mov	r1, r9
 8012fd2:	008b      	lsls	r3, r1, #2
 8012fd4:	4641      	mov	r1, r8
 8012fd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012fda:	4641      	mov	r1, r8
 8012fdc:	008a      	lsls	r2, r1, #2
 8012fde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8012fe2:	f7ed fe61 	bl	8000ca8 <__aeabi_uldivmod>
 8012fe6:	4602      	mov	r2, r0
 8012fe8:	460b      	mov	r3, r1
 8012fea:	4611      	mov	r1, r2
 8012fec:	4b38      	ldr	r3, [pc, #224]	; (80130d0 <UART_SetConfig+0x4e4>)
 8012fee:	fba3 2301 	umull	r2, r3, r3, r1
 8012ff2:	095b      	lsrs	r3, r3, #5
 8012ff4:	2264      	movs	r2, #100	; 0x64
 8012ff6:	fb02 f303 	mul.w	r3, r2, r3
 8012ffa:	1acb      	subs	r3, r1, r3
 8012ffc:	011b      	lsls	r3, r3, #4
 8012ffe:	3332      	adds	r3, #50	; 0x32
 8013000:	4a33      	ldr	r2, [pc, #204]	; (80130d0 <UART_SetConfig+0x4e4>)
 8013002:	fba2 2303 	umull	r2, r3, r2, r3
 8013006:	095b      	lsrs	r3, r3, #5
 8013008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801300c:	441c      	add	r4, r3
 801300e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013012:	2200      	movs	r2, #0
 8013014:	673b      	str	r3, [r7, #112]	; 0x70
 8013016:	677a      	str	r2, [r7, #116]	; 0x74
 8013018:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 801301c:	4642      	mov	r2, r8
 801301e:	464b      	mov	r3, r9
 8013020:	1891      	adds	r1, r2, r2
 8013022:	60b9      	str	r1, [r7, #8]
 8013024:	415b      	adcs	r3, r3
 8013026:	60fb      	str	r3, [r7, #12]
 8013028:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801302c:	4641      	mov	r1, r8
 801302e:	1851      	adds	r1, r2, r1
 8013030:	6039      	str	r1, [r7, #0]
 8013032:	4649      	mov	r1, r9
 8013034:	414b      	adcs	r3, r1
 8013036:	607b      	str	r3, [r7, #4]
 8013038:	f04f 0200 	mov.w	r2, #0
 801303c:	f04f 0300 	mov.w	r3, #0
 8013040:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8013044:	4659      	mov	r1, fp
 8013046:	00cb      	lsls	r3, r1, #3
 8013048:	4651      	mov	r1, sl
 801304a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801304e:	4651      	mov	r1, sl
 8013050:	00ca      	lsls	r2, r1, #3
 8013052:	4610      	mov	r0, r2
 8013054:	4619      	mov	r1, r3
 8013056:	4603      	mov	r3, r0
 8013058:	4642      	mov	r2, r8
 801305a:	189b      	adds	r3, r3, r2
 801305c:	66bb      	str	r3, [r7, #104]	; 0x68
 801305e:	464b      	mov	r3, r9
 8013060:	460a      	mov	r2, r1
 8013062:	eb42 0303 	adc.w	r3, r2, r3
 8013066:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801306c:	685b      	ldr	r3, [r3, #4]
 801306e:	2200      	movs	r2, #0
 8013070:	663b      	str	r3, [r7, #96]	; 0x60
 8013072:	667a      	str	r2, [r7, #100]	; 0x64
 8013074:	f04f 0200 	mov.w	r2, #0
 8013078:	f04f 0300 	mov.w	r3, #0
 801307c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8013080:	4649      	mov	r1, r9
 8013082:	008b      	lsls	r3, r1, #2
 8013084:	4641      	mov	r1, r8
 8013086:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801308a:	4641      	mov	r1, r8
 801308c:	008a      	lsls	r2, r1, #2
 801308e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8013092:	f7ed fe09 	bl	8000ca8 <__aeabi_uldivmod>
 8013096:	4602      	mov	r2, r0
 8013098:	460b      	mov	r3, r1
 801309a:	4b0d      	ldr	r3, [pc, #52]	; (80130d0 <UART_SetConfig+0x4e4>)
 801309c:	fba3 1302 	umull	r1, r3, r3, r2
 80130a0:	095b      	lsrs	r3, r3, #5
 80130a2:	2164      	movs	r1, #100	; 0x64
 80130a4:	fb01 f303 	mul.w	r3, r1, r3
 80130a8:	1ad3      	subs	r3, r2, r3
 80130aa:	011b      	lsls	r3, r3, #4
 80130ac:	3332      	adds	r3, #50	; 0x32
 80130ae:	4a08      	ldr	r2, [pc, #32]	; (80130d0 <UART_SetConfig+0x4e4>)
 80130b0:	fba2 2303 	umull	r2, r3, r2, r3
 80130b4:	095b      	lsrs	r3, r3, #5
 80130b6:	f003 020f 	and.w	r2, r3, #15
 80130ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	4422      	add	r2, r4
 80130c2:	609a      	str	r2, [r3, #8]
}
 80130c4:	bf00      	nop
 80130c6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80130ca:	46bd      	mov	sp, r7
 80130cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80130d0:	51eb851f 	.word	0x51eb851f

080130d4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80130d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80130d6:	2400      	movs	r4, #0
 80130d8:	2310      	movs	r3, #16
 80130da:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80130de:	6803      	ldr	r3, [r0, #0]
 80130e0:	4615      	mov	r5, r2
 80130e2:	699e      	ldr	r6, [r3, #24]
 80130e4:	6812      	ldr	r2, [r2, #0]
 80130e6:	466b      	mov	r3, sp
 80130e8:	e9cd 4400 	strd	r4, r4, [sp]
 80130ec:	47b0      	blx	r6
 80130ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80130f2:	f003 0306 	and.w	r3, r3, #6
 80130f6:	2b06      	cmp	r3, #6
 80130f8:	bf03      	ittte	eq
 80130fa:	9b00      	ldreq	r3, [sp, #0]
 80130fc:	602b      	streq	r3, [r5, #0]
 80130fe:	2001      	moveq	r0, #1
 8013100:	4620      	movne	r0, r4
 8013102:	b004      	add	sp, #16
 8013104:	bd70      	pop	{r4, r5, r6, pc}

08013106 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8013106:	9800      	ldr	r0, [sp, #0]
 8013108:	4290      	cmp	r0, r2
 801310a:	bf14      	ite	ne
 801310c:	2001      	movne	r0, #1
 801310e:	2006      	moveq	r0, #6
 8013110:	4770      	bx	lr
	...

08013114 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8013114:	b510      	push	{r4, lr}
 8013116:	4b03      	ldr	r3, [pc, #12]	; (8013124 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8013118:	6003      	str	r3, [r0, #0]
 801311a:	4604      	mov	r4, r0
 801311c:	f000 fd3f 	bl	8013b9e <_ZNSt9type_infoD1Ev>
 8013120:	4620      	mov	r0, r4
 8013122:	bd10      	pop	{r4, pc}
 8013124:	08018334 	.word	0x08018334

08013128 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8013128:	b510      	push	{r4, lr}
 801312a:	4604      	mov	r4, r0
 801312c:	f7ff fff2 	bl	8013114 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8013130:	4620      	mov	r0, r4
 8013132:	2108      	movs	r1, #8
 8013134:	f000 f842 	bl	80131bc <_ZdlPvj>
 8013138:	4620      	mov	r0, r4
 801313a:	bd10      	pop	{r4, pc}

0801313c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 801313c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013140:	461f      	mov	r7, r3
 8013142:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8013146:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801314a:	4598      	cmp	r8, r3
 801314c:	4606      	mov	r6, r0
 801314e:	4615      	mov	r5, r2
 8013150:	d107      	bne.n	8013162 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8013152:	9907      	ldr	r1, [sp, #28]
 8013154:	f000 fd26 	bl	8013ba4 <_ZNKSt9type_infoeqERKS_>
 8013158:	b118      	cbz	r0, 8013162 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 801315a:	7165      	strb	r5, [r4, #5]
 801315c:	2000      	movs	r0, #0
 801315e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013162:	4639      	mov	r1, r7
 8013164:	4630      	mov	r0, r6
 8013166:	f000 fd1d 	bl	8013ba4 <_ZNKSt9type_infoeqERKS_>
 801316a:	2800      	cmp	r0, #0
 801316c:	d0f6      	beq.n	801315c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 801316e:	2301      	movs	r3, #1
 8013170:	f8c4 8000 	str.w	r8, [r4]
 8013174:	7125      	strb	r5, [r4, #4]
 8013176:	71a3      	strb	r3, [r4, #6]
 8013178:	e7f0      	b.n	801315c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

0801317a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 801317a:	b538      	push	{r3, r4, r5, lr}
 801317c:	4615      	mov	r5, r2
 801317e:	461c      	mov	r4, r3
 8013180:	f000 fd10 	bl	8013ba4 <_ZNKSt9type_infoeqERKS_>
 8013184:	b120      	cbz	r0, 8013190 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8013186:	2308      	movs	r3, #8
 8013188:	60e3      	str	r3, [r4, #12]
 801318a:	2306      	movs	r3, #6
 801318c:	6025      	str	r5, [r4, #0]
 801318e:	7123      	strb	r3, [r4, #4]
 8013190:	bd38      	pop	{r3, r4, r5, pc}

08013192 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8013192:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013194:	4605      	mov	r5, r0
 8013196:	460c      	mov	r4, r1
 8013198:	9201      	str	r2, [sp, #4]
 801319a:	461e      	mov	r6, r3
 801319c:	f000 fd02 	bl	8013ba4 <_ZNKSt9type_infoeqERKS_>
 80131a0:	b950      	cbnz	r0, 80131b8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80131a2:	2e03      	cmp	r6, #3
 80131a4:	d808      	bhi.n	80131b8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80131a6:	6823      	ldr	r3, [r4, #0]
 80131a8:	9a01      	ldr	r2, [sp, #4]
 80131aa:	695b      	ldr	r3, [r3, #20]
 80131ac:	4629      	mov	r1, r5
 80131ae:	4620      	mov	r0, r4
 80131b0:	b002      	add	sp, #8
 80131b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80131b6:	4718      	bx	r3
 80131b8:	b002      	add	sp, #8
 80131ba:	bd70      	pop	{r4, r5, r6, pc}

080131bc <_ZdlPvj>:
 80131bc:	f000 bde4 	b.w	8013d88 <_ZdlPv>

080131c0 <_ZdaPv>:
 80131c0:	f000 bde2 	b.w	8013d88 <_ZdlPv>

080131c4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>:
 80131c4:	4a19      	ldr	r2, [pc, #100]	; (801322c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x68>)
 80131c6:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80131ca:	6853      	ldr	r3, [r2, #4]
 80131cc:	b570      	push	{r4, r5, r6, lr}
 80131ce:	f1a0 0408 	sub.w	r4, r0, #8
 80131d2:	b113      	cbz	r3, 80131da <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x16>
 80131d4:	1865      	adds	r5, r4, r1
 80131d6:	42ab      	cmp	r3, r5
 80131d8:	d903      	bls.n	80131e2 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1e>
 80131da:	f840 3c04 	str.w	r3, [r0, #-4]
 80131de:	6054      	str	r4, [r2, #4]
 80131e0:	bd70      	pop	{r4, r5, r6, pc}
 80131e2:	685e      	ldr	r6, [r3, #4]
 80131e4:	d11f      	bne.n	8013226 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x62>
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	440b      	add	r3, r1
 80131ea:	e940 3602 	strd	r3, r6, [r0, #-8]
 80131ee:	e7f6      	b.n	80131de <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1a>
 80131f0:	1d1a      	adds	r2, r3, #4
 80131f2:	4633      	mov	r3, r6
 80131f4:	685e      	ldr	r6, [r3, #4]
 80131f6:	b136      	cbz	r6, 8013206 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x42>
 80131f8:	42b5      	cmp	r5, r6
 80131fa:	d3f9      	bcc.n	80131f0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x2c>
 80131fc:	bf01      	itttt	eq
 80131fe:	682e      	ldreq	r6, [r5, #0]
 8013200:	686d      	ldreq	r5, [r5, #4]
 8013202:	605d      	streq	r5, [r3, #4]
 8013204:	1989      	addeq	r1, r1, r6
 8013206:	6813      	ldr	r3, [r2, #0]
 8013208:	681d      	ldr	r5, [r3, #0]
 801320a:	195e      	adds	r6, r3, r5
 801320c:	42b4      	cmp	r4, r6
 801320e:	bf1f      	itttt	ne
 8013210:	685b      	ldrne	r3, [r3, #4]
 8013212:	f840 3c04 	strne.w	r3, [r0, #-4]
 8013216:	6813      	ldrne	r3, [r2, #0]
 8013218:	f840 1c08 	strne.w	r1, [r0, #-8]
 801321c:	bf06      	itte	eq
 801321e:	186d      	addeq	r5, r5, r1
 8013220:	601d      	streq	r5, [r3, #0]
 8013222:	605c      	strne	r4, [r3, #4]
 8013224:	e7dc      	b.n	80131e0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1c>
 8013226:	3204      	adds	r2, #4
 8013228:	e7e4      	b.n	80131f4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x30>
 801322a:	bf00      	nop
 801322c:	200003e0 	.word	0x200003e0

08013230 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>:
 8013230:	3008      	adds	r0, #8
 8013232:	2808      	cmp	r0, #8
 8013234:	b530      	push	{r4, r5, lr}
 8013236:	4a0f      	ldr	r2, [pc, #60]	; (8013274 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x44>)
 8013238:	bf38      	it	cc
 801323a:	2008      	movcc	r0, #8
 801323c:	3007      	adds	r0, #7
 801323e:	f020 0307 	bic.w	r3, r0, #7
 8013242:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8013246:	b198      	cbz	r0, 8013270 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x40>
 8013248:	e9d0 1400 	ldrd	r1, r4, [r0]
 801324c:	428b      	cmp	r3, r1
 801324e:	d805      	bhi.n	801325c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x2c>
 8013250:	1acd      	subs	r5, r1, r3
 8013252:	2d07      	cmp	r5, #7
 8013254:	d805      	bhi.n	8013262 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x32>
 8013256:	6001      	str	r1, [r0, #0]
 8013258:	4621      	mov	r1, r4
 801325a:	e007      	b.n	801326c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x3c>
 801325c:	1d02      	adds	r2, r0, #4
 801325e:	4620      	mov	r0, r4
 8013260:	e7f1      	b.n	8013246 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x16>
 8013262:	18c1      	adds	r1, r0, r3
 8013264:	604c      	str	r4, [r1, #4]
 8013266:	50c5      	str	r5, [r0, r3]
 8013268:	6810      	ldr	r0, [r2, #0]
 801326a:	6003      	str	r3, [r0, #0]
 801326c:	6011      	str	r1, [r2, #0]
 801326e:	3008      	adds	r0, #8
 8013270:	bd30      	pop	{r4, r5, pc}
 8013272:	bf00      	nop
 8013274:	200003e0 	.word	0x200003e0

08013278 <__cxa_allocate_exception>:
 8013278:	b510      	push	{r4, lr}
 801327a:	f100 0480 	add.w	r4, r0, #128	; 0x80
 801327e:	4620      	mov	r0, r4
 8013280:	f000 fe1a 	bl	8013eb8 <malloc>
 8013284:	4603      	mov	r3, r0
 8013286:	b930      	cbnz	r0, 8013296 <__cxa_allocate_exception+0x1e>
 8013288:	4620      	mov	r0, r4
 801328a:	f7ff ffd1 	bl	8013230 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>
 801328e:	4603      	mov	r3, r0
 8013290:	b908      	cbnz	r0, 8013296 <__cxa_allocate_exception+0x1e>
 8013292:	f000 fb6f 	bl	8013974 <_ZSt9terminatev>
 8013296:	2280      	movs	r2, #128	; 0x80
 8013298:	2100      	movs	r1, #0
 801329a:	4618      	mov	r0, r3
 801329c:	f001 fc6d 	bl	8014b7a <memset>
 80132a0:	3080      	adds	r0, #128	; 0x80
 80132a2:	bd10      	pop	{r4, pc}

080132a4 <__cxa_free_exception>:
 80132a4:	4a06      	ldr	r2, [pc, #24]	; (80132c0 <__cxa_free_exception+0x1c>)
 80132a6:	6893      	ldr	r3, [r2, #8]
 80132a8:	3880      	subs	r0, #128	; 0x80
 80132aa:	4298      	cmp	r0, r3
 80132ac:	d905      	bls.n	80132ba <__cxa_free_exception+0x16>
 80132ae:	68d2      	ldr	r2, [r2, #12]
 80132b0:	4413      	add	r3, r2
 80132b2:	4298      	cmp	r0, r3
 80132b4:	d201      	bcs.n	80132ba <__cxa_free_exception+0x16>
 80132b6:	f7ff bf85 	b.w	80131c4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
 80132ba:	f000 be05 	b.w	8013ec8 <free>
 80132be:	bf00      	nop
 80132c0:	200003e0 	.word	0x200003e0

080132c4 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 80132c4:	b538      	push	{r3, r4, r5, lr}
 80132c6:	4c08      	ldr	r4, [pc, #32]	; (80132e8 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 80132c8:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 80132cc:	4628      	mov	r0, r5
 80132ce:	60e5      	str	r5, [r4, #12]
 80132d0:	f000 fdf2 	bl	8013eb8 <malloc>
 80132d4:	60a0      	str	r0, [r4, #8]
 80132d6:	b910      	cbnz	r0, 80132de <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1a>
 80132d8:	60e0      	str	r0, [r4, #12]
 80132da:	6060      	str	r0, [r4, #4]
 80132dc:	bd38      	pop	{r3, r4, r5, pc}
 80132de:	2300      	movs	r3, #0
 80132e0:	6060      	str	r0, [r4, #4]
 80132e2:	6005      	str	r5, [r0, #0]
 80132e4:	6043      	str	r3, [r0, #4]
 80132e6:	e7f9      	b.n	80132dc <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x18>
 80132e8:	200003e0 	.word	0x200003e0

080132ec <__cxa_end_cleanup>:
 80132ec:	b41e      	push	{r1, r2, r3, r4}
 80132ee:	f000 f89c 	bl	801342a <__gnu_end_cleanup>
 80132f2:	bc1e      	pop	{r1, r2, r3, r4}
 80132f4:	f7ee fbe2 	bl	8001abc <_Unwind_Resume>

080132f8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80132f8:	7803      	ldrb	r3, [r0, #0]
 80132fa:	2b47      	cmp	r3, #71	; 0x47
 80132fc:	d117      	bne.n	801332e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80132fe:	7843      	ldrb	r3, [r0, #1]
 8013300:	2b4e      	cmp	r3, #78	; 0x4e
 8013302:	d114      	bne.n	801332e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013304:	7883      	ldrb	r3, [r0, #2]
 8013306:	2b55      	cmp	r3, #85	; 0x55
 8013308:	d111      	bne.n	801332e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801330a:	78c3      	ldrb	r3, [r0, #3]
 801330c:	2b43      	cmp	r3, #67	; 0x43
 801330e:	d10e      	bne.n	801332e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013310:	7903      	ldrb	r3, [r0, #4]
 8013312:	2b43      	cmp	r3, #67	; 0x43
 8013314:	d10b      	bne.n	801332e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013316:	7943      	ldrb	r3, [r0, #5]
 8013318:	2b2b      	cmp	r3, #43	; 0x2b
 801331a:	d108      	bne.n	801332e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801331c:	7983      	ldrb	r3, [r0, #6]
 801331e:	2b2b      	cmp	r3, #43	; 0x2b
 8013320:	d105      	bne.n	801332e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013322:	79c0      	ldrb	r0, [r0, #7]
 8013324:	2801      	cmp	r0, #1
 8013326:	bf8c      	ite	hi
 8013328:	2000      	movhi	r0, #0
 801332a:	2001      	movls	r0, #1
 801332c:	4770      	bx	lr
 801332e:	2000      	movs	r0, #0
 8013330:	4770      	bx	lr
	...

08013334 <__cxa_type_match>:
 8013334:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8013338:	461d      	mov	r5, r3
 801333a:	7803      	ldrb	r3, [r0, #0]
 801333c:	2b47      	cmp	r3, #71	; 0x47
 801333e:	460e      	mov	r6, r1
 8013340:	4602      	mov	r2, r0
 8013342:	79c1      	ldrb	r1, [r0, #7]
 8013344:	d113      	bne.n	801336e <__cxa_type_match+0x3a>
 8013346:	7843      	ldrb	r3, [r0, #1]
 8013348:	2b4e      	cmp	r3, #78	; 0x4e
 801334a:	d110      	bne.n	801336e <__cxa_type_match+0x3a>
 801334c:	7883      	ldrb	r3, [r0, #2]
 801334e:	2b55      	cmp	r3, #85	; 0x55
 8013350:	d10d      	bne.n	801336e <__cxa_type_match+0x3a>
 8013352:	78c3      	ldrb	r3, [r0, #3]
 8013354:	2b43      	cmp	r3, #67	; 0x43
 8013356:	d10a      	bne.n	801336e <__cxa_type_match+0x3a>
 8013358:	7903      	ldrb	r3, [r0, #4]
 801335a:	2b46      	cmp	r3, #70	; 0x46
 801335c:	d107      	bne.n	801336e <__cxa_type_match+0x3a>
 801335e:	7943      	ldrb	r3, [r0, #5]
 8013360:	2b4f      	cmp	r3, #79	; 0x4f
 8013362:	d104      	bne.n	801336e <__cxa_type_match+0x3a>
 8013364:	7983      	ldrb	r3, [r0, #6]
 8013366:	2b52      	cmp	r3, #82	; 0x52
 8013368:	d101      	bne.n	801336e <__cxa_type_match+0x3a>
 801336a:	2900      	cmp	r1, #0
 801336c:	d031      	beq.n	80133d2 <__cxa_type_match+0x9e>
 801336e:	4610      	mov	r0, r2
 8013370:	f7ff ffc2 	bl	80132f8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8013374:	f080 0001 	eor.w	r0, r0, #1
 8013378:	b2c4      	uxtb	r4, r0
 801337a:	2300      	movs	r3, #0
 801337c:	2000      	movs	r0, #0
 801337e:	9001      	str	r0, [sp, #4]
 8013380:	bb53      	cbnz	r3, 80133d8 <__cxa_type_match+0xa4>
 8013382:	bb5c      	cbnz	r4, 80133dc <__cxa_type_match+0xa8>
 8013384:	2901      	cmp	r1, #1
 8013386:	bf0a      	itet	eq
 8013388:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 801338c:	f1a2 0320 	subne.w	r3, r2, #32
 8013390:	3b78      	subeq	r3, #120	; 0x78
 8013392:	2901      	cmp	r1, #1
 8013394:	bf08      	it	eq
 8013396:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 801339a:	681c      	ldr	r4, [r3, #0]
 801339c:	bf18      	it	ne
 801339e:	3258      	addne	r2, #88	; 0x58
 80133a0:	9201      	str	r2, [sp, #4]
 80133a2:	6823      	ldr	r3, [r4, #0]
 80133a4:	4620      	mov	r0, r4
 80133a6:	689b      	ldr	r3, [r3, #8]
 80133a8:	4798      	blx	r3
 80133aa:	b1c8      	cbz	r0, 80133e0 <__cxa_type_match+0xac>
 80133ac:	9b01      	ldr	r3, [sp, #4]
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	9301      	str	r3, [sp, #4]
 80133b2:	2702      	movs	r7, #2
 80133b4:	6833      	ldr	r3, [r6, #0]
 80133b6:	aa01      	add	r2, sp, #4
 80133b8:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80133bc:	4621      	mov	r1, r4
 80133be:	2301      	movs	r3, #1
 80133c0:	4630      	mov	r0, r6
 80133c2:	47c0      	blx	r8
 80133c4:	b170      	cbz	r0, 80133e4 <__cxa_type_match+0xb0>
 80133c6:	9b01      	ldr	r3, [sp, #4]
 80133c8:	602b      	str	r3, [r5, #0]
 80133ca:	4638      	mov	r0, r7
 80133cc:	b002      	add	sp, #8
 80133ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133d2:	2301      	movs	r3, #1
 80133d4:	460c      	mov	r4, r1
 80133d6:	e7d1      	b.n	801337c <__cxa_type_match+0x48>
 80133d8:	4c03      	ldr	r4, [pc, #12]	; (80133e8 <__cxa_type_match+0xb4>)
 80133da:	e7e2      	b.n	80133a2 <__cxa_type_match+0x6e>
 80133dc:	4c03      	ldr	r4, [pc, #12]	; (80133ec <__cxa_type_match+0xb8>)
 80133de:	e7e0      	b.n	80133a2 <__cxa_type_match+0x6e>
 80133e0:	2701      	movs	r7, #1
 80133e2:	e7e7      	b.n	80133b4 <__cxa_type_match+0x80>
 80133e4:	4607      	mov	r7, r0
 80133e6:	e7f0      	b.n	80133ca <__cxa_type_match+0x96>
 80133e8:	08018358 	.word	0x08018358
 80133ec:	08018360 	.word	0x08018360

080133f0 <__cxa_begin_cleanup>:
 80133f0:	b510      	push	{r4, lr}
 80133f2:	4604      	mov	r4, r0
 80133f4:	f000 f834 	bl	8013460 <__cxa_get_globals>
 80133f8:	4602      	mov	r2, r0
 80133fa:	4620      	mov	r0, r4
 80133fc:	f1a4 0120 	sub.w	r1, r4, #32
 8013400:	f7ff ff7a 	bl	80132f8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8013404:	b160      	cbz	r0, 8013420 <__cxa_begin_cleanup+0x30>
 8013406:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801340a:	3301      	adds	r3, #1
 801340c:	2b01      	cmp	r3, #1
 801340e:	f844 3c04 	str.w	r3, [r4, #-4]
 8013412:	d103      	bne.n	801341c <__cxa_begin_cleanup+0x2c>
 8013414:	6893      	ldr	r3, [r2, #8]
 8013416:	f844 3c08 	str.w	r3, [r4, #-8]
 801341a:	6091      	str	r1, [r2, #8]
 801341c:	2001      	movs	r0, #1
 801341e:	bd10      	pop	{r4, pc}
 8013420:	6893      	ldr	r3, [r2, #8]
 8013422:	2b00      	cmp	r3, #0
 8013424:	d0f9      	beq.n	801341a <__cxa_begin_cleanup+0x2a>
 8013426:	f000 faa5 	bl	8013974 <_ZSt9terminatev>

0801342a <__gnu_end_cleanup>:
 801342a:	b510      	push	{r4, lr}
 801342c:	f000 f818 	bl	8013460 <__cxa_get_globals>
 8013430:	6882      	ldr	r2, [r0, #8]
 8013432:	4601      	mov	r1, r0
 8013434:	b90a      	cbnz	r2, 801343a <__gnu_end_cleanup+0x10>
 8013436:	f000 fa9d 	bl	8013974 <_ZSt9terminatev>
 801343a:	f102 0420 	add.w	r4, r2, #32
 801343e:	4620      	mov	r0, r4
 8013440:	f7ff ff5a 	bl	80132f8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8013444:	b140      	cbz	r0, 8013458 <__gnu_end_cleanup+0x2e>
 8013446:	69d3      	ldr	r3, [r2, #28]
 8013448:	3b01      	subs	r3, #1
 801344a:	61d3      	str	r3, [r2, #28]
 801344c:	b913      	cbnz	r3, 8013454 <__gnu_end_cleanup+0x2a>
 801344e:	6990      	ldr	r0, [r2, #24]
 8013450:	6088      	str	r0, [r1, #8]
 8013452:	6193      	str	r3, [r2, #24]
 8013454:	4620      	mov	r0, r4
 8013456:	bd10      	pop	{r4, pc}
 8013458:	6088      	str	r0, [r1, #8]
 801345a:	e7fb      	b.n	8013454 <__gnu_end_cleanup+0x2a>

0801345c <_ZNSt9exceptionD1Ev>:
 801345c:	4770      	bx	lr
	...

08013460 <__cxa_get_globals>:
 8013460:	4800      	ldr	r0, [pc, #0]	; (8013464 <__cxa_get_globals+0x4>)
 8013462:	4770      	bx	lr
 8013464:	200003f0 	.word	0x200003f0

08013468 <_ZL12read_uleb128PKhPm>:
 8013468:	b530      	push	{r4, r5, lr}
 801346a:	2300      	movs	r3, #0
 801346c:	461a      	mov	r2, r3
 801346e:	f810 5b01 	ldrb.w	r5, [r0], #1
 8013472:	f005 047f 	and.w	r4, r5, #127	; 0x7f
 8013476:	4094      	lsls	r4, r2
 8013478:	4323      	orrs	r3, r4
 801347a:	062c      	lsls	r4, r5, #24
 801347c:	f102 0207 	add.w	r2, r2, #7
 8013480:	d4f5      	bmi.n	801346e <_ZL12read_uleb128PKhPm+0x6>
 8013482:	600b      	str	r3, [r1, #0]
 8013484:	bd30      	pop	{r4, r5, pc}

08013486 <_ZL12read_sleb128PKhPl>:
 8013486:	b530      	push	{r4, r5, lr}
 8013488:	2300      	movs	r3, #0
 801348a:	461a      	mov	r2, r3
 801348c:	f810 4b01 	ldrb.w	r4, [r0], #1
 8013490:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 8013494:	4095      	lsls	r5, r2
 8013496:	432b      	orrs	r3, r5
 8013498:	0625      	lsls	r5, r4, #24
 801349a:	f102 0207 	add.w	r2, r2, #7
 801349e:	d4f5      	bmi.n	801348c <_ZL12read_sleb128PKhPl+0x6>
 80134a0:	2a1f      	cmp	r2, #31
 80134a2:	d806      	bhi.n	80134b2 <_ZL12read_sleb128PKhPl+0x2c>
 80134a4:	0664      	lsls	r4, r4, #25
 80134a6:	bf42      	ittt	mi
 80134a8:	f04f 34ff 	movmi.w	r4, #4294967295	; 0xffffffff
 80134ac:	fa04 f202 	lslmi.w	r2, r4, r2
 80134b0:	4313      	orrmi	r3, r2
 80134b2:	600b      	str	r3, [r1, #0]
 80134b4:	bd30      	pop	{r4, r5, pc}

080134b6 <_ZL28read_encoded_value_with_basehjPKhPj>:
 80134b6:	2850      	cmp	r0, #80	; 0x50
 80134b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80134bc:	4606      	mov	r6, r0
 80134be:	4688      	mov	r8, r1
 80134c0:	4615      	mov	r5, r2
 80134c2:	461f      	mov	r7, r3
 80134c4:	d108      	bne.n	80134d8 <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
 80134c6:	3203      	adds	r2, #3
 80134c8:	f022 0003 	bic.w	r0, r2, #3
 80134cc:	f850 4b04 	ldr.w	r4, [r0], #4
 80134d0:	603c      	str	r4, [r7, #0]
 80134d2:	b002      	add	sp, #8
 80134d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134d8:	f000 030f 	and.w	r3, r0, #15
 80134dc:	2b0c      	cmp	r3, #12
 80134de:	d82e      	bhi.n	801353e <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
 80134e0:	e8df f003 	tbb	[pc, r3]
 80134e4:	251d0725 	.word	0x251d0725
 80134e8:	2d2d2d29 	.word	0x2d2d2d29
 80134ec:	2521182d 	.word	0x2521182d
 80134f0:	29          	.byte	0x29
 80134f1:	00          	.byte	0x00
 80134f2:	a901      	add	r1, sp, #4
 80134f4:	4628      	mov	r0, r5
 80134f6:	f7ff ffb7 	bl	8013468 <_ZL12read_uleb128PKhPm>
 80134fa:	9c01      	ldr	r4, [sp, #4]
 80134fc:	2c00      	cmp	r4, #0
 80134fe:	d0e7      	beq.n	80134d0 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8013500:	f006 0370 	and.w	r3, r6, #112	; 0x70
 8013504:	2b10      	cmp	r3, #16
 8013506:	bf08      	it	eq
 8013508:	46a8      	moveq	r8, r5
 801350a:	4444      	add	r4, r8
 801350c:	0633      	lsls	r3, r6, #24
 801350e:	bf48      	it	mi
 8013510:	6824      	ldrmi	r4, [r4, #0]
 8013512:	e7dd      	b.n	80134d0 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8013514:	a901      	add	r1, sp, #4
 8013516:	4628      	mov	r0, r5
 8013518:	f7ff ffb5 	bl	8013486 <_ZL12read_sleb128PKhPl>
 801351c:	e7ed      	b.n	80134fa <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
 801351e:	4628      	mov	r0, r5
 8013520:	f830 4b02 	ldrh.w	r4, [r0], #2
 8013524:	e7ea      	b.n	80134fc <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8013526:	4628      	mov	r0, r5
 8013528:	f930 4b02 	ldrsh.w	r4, [r0], #2
 801352c:	e7e6      	b.n	80134fc <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 801352e:	4628      	mov	r0, r5
 8013530:	f850 4b04 	ldr.w	r4, [r0], #4
 8013534:	e7e2      	b.n	80134fc <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8013536:	4628      	mov	r0, r5
 8013538:	f850 4b08 	ldr.w	r4, [r0], #8
 801353c:	e7de      	b.n	80134fc <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 801353e:	f000 fcb3 	bl	8013ea8 <abort>

08013542 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 8013542:	b508      	push	{r3, lr}
 8013544:	4603      	mov	r3, r0
 8013546:	2bff      	cmp	r3, #255	; 0xff
 8013548:	4608      	mov	r0, r1
 801354a:	d010      	beq.n	801356e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 801354c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8013550:	2a30      	cmp	r2, #48	; 0x30
 8013552:	d012      	beq.n	801357a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 8013554:	d807      	bhi.n	8013566 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
 8013556:	2a20      	cmp	r2, #32
 8013558:	d00b      	beq.n	8013572 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x30>
 801355a:	d802      	bhi.n	8013562 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 801355c:	f013 0f60 	tst.w	r3, #96	; 0x60
 8013560:	d005      	beq.n	801356e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 8013562:	f000 fca1 	bl	8013ea8 <abort>
 8013566:	2a40      	cmp	r2, #64	; 0x40
 8013568:	d00b      	beq.n	8013582 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
 801356a:	2a50      	cmp	r2, #80	; 0x50
 801356c:	d1f9      	bne.n	8013562 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 801356e:	2000      	movs	r0, #0
 8013570:	bd08      	pop	{r3, pc}
 8013572:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013576:	f003 bb28 	b.w	8016bca <_Unwind_GetTextRelBase>
 801357a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801357e:	f003 bb21 	b.w	8016bc4 <_Unwind_GetDataRelBase>
 8013582:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013586:	f7ee bc69 	b.w	8001e5c <_Unwind_GetRegionStart>

0801358a <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 801358a:	b513      	push	{r0, r1, r4, lr}
 801358c:	460c      	mov	r4, r1
 801358e:	4601      	mov	r1, r0
 8013590:	4620      	mov	r0, r4
 8013592:	e9cd 3200 	strd	r3, r2, [sp]
 8013596:	f7ff ffd4 	bl	8013542 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 801359a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801359e:	4601      	mov	r1, r0
 80135a0:	4620      	mov	r0, r4
 80135a2:	b002      	add	sp, #8
 80135a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80135a8:	f7ff bf85 	b.w	80134b6 <_ZL28read_encoded_value_with_basehjPKhPj>

080135ac <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 80135ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80135ae:	460c      	mov	r4, r1
 80135b0:	4615      	mov	r5, r2
 80135b2:	4606      	mov	r6, r0
 80135b4:	b320      	cbz	r0, 8013600 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
 80135b6:	f7ee fc51 	bl	8001e5c <_Unwind_GetRegionStart>
 80135ba:	4603      	mov	r3, r0
 80135bc:	4620      	mov	r0, r4
 80135be:	602b      	str	r3, [r5, #0]
 80135c0:	f810 1b01 	ldrb.w	r1, [r0], #1
 80135c4:	29ff      	cmp	r1, #255	; 0xff
 80135c6:	d01d      	beq.n	8013604 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x58>
 80135c8:	4602      	mov	r2, r0
 80135ca:	1d2b      	adds	r3, r5, #4
 80135cc:	4630      	mov	r0, r6
 80135ce:	f7ff ffdc 	bl	801358a <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80135d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80135d6:	2bff      	cmp	r3, #255	; 0xff
 80135d8:	d016      	beq.n	8013608 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5c>
 80135da:	2310      	movs	r3, #16
 80135dc:	752b      	strb	r3, [r5, #20]
 80135de:	a901      	add	r1, sp, #4
 80135e0:	f7ff ff42 	bl	8013468 <_ZL12read_uleb128PKhPm>
 80135e4:	9b01      	ldr	r3, [sp, #4]
 80135e6:	4403      	add	r3, r0
 80135e8:	60eb      	str	r3, [r5, #12]
 80135ea:	f810 3b01 	ldrb.w	r3, [r0], #1
 80135ee:	756b      	strb	r3, [r5, #21]
 80135f0:	a901      	add	r1, sp, #4
 80135f2:	f7ff ff39 	bl	8013468 <_ZL12read_uleb128PKhPm>
 80135f6:	9b01      	ldr	r3, [sp, #4]
 80135f8:	4403      	add	r3, r0
 80135fa:	612b      	str	r3, [r5, #16]
 80135fc:	b002      	add	sp, #8
 80135fe:	bd70      	pop	{r4, r5, r6, pc}
 8013600:	4603      	mov	r3, r0
 8013602:	e7db      	b.n	80135bc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>
 8013604:	606b      	str	r3, [r5, #4]
 8013606:	e7e4      	b.n	80135d2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x26>
 8013608:	752b      	strb	r3, [r5, #20]
 801360a:	2300      	movs	r3, #0
 801360c:	e7ec      	b.n	80135e8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>

0801360e <_Unwind_GetGR>:
 801360e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013610:	ab03      	add	r3, sp, #12
 8013612:	9300      	str	r3, [sp, #0]
 8013614:	2300      	movs	r3, #0
 8013616:	460a      	mov	r2, r1
 8013618:	4619      	mov	r1, r3
 801361a:	f7ed fe83 	bl	8001324 <_Unwind_VRS_Get>
 801361e:	9803      	ldr	r0, [sp, #12]
 8013620:	b005      	add	sp, #20
 8013622:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08013628 <__gxx_personality_v0>:
 8013628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801362c:	b091      	sub	sp, #68	; 0x44
 801362e:	2300      	movs	r3, #0
 8013630:	9305      	str	r3, [sp, #20]
 8013632:	f000 0303 	and.w	r3, r0, #3
 8013636:	2b01      	cmp	r3, #1
 8013638:	4606      	mov	r6, r0
 801363a:	460c      	mov	r4, r1
 801363c:	4617      	mov	r7, r2
 801363e:	d00e      	beq.n	801365e <__gxx_personality_v0+0x36>
 8013640:	2b02      	cmp	r3, #2
 8013642:	d003      	beq.n	801364c <__gxx_personality_v0+0x24>
 8013644:	2b00      	cmp	r3, #0
 8013646:	d13b      	bne.n	80136c0 <__gxx_personality_v0+0x98>
 8013648:	0701      	lsls	r1, r0, #28
 801364a:	d53b      	bpl.n	80136c4 <__gxx_personality_v0+0x9c>
 801364c:	4639      	mov	r1, r7
 801364e:	4620      	mov	r0, r4
 8013650:	f7ee fbee 	bl	8001e30 <__gnu_unwind_frame>
 8013654:	b390      	cbz	r0, 80136bc <__gxx_personality_v0+0x94>
 8013656:	2009      	movs	r0, #9
 8013658:	b011      	add	sp, #68	; 0x44
 801365a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801365e:	0702      	lsls	r2, r0, #28
 8013660:	d406      	bmi.n	8013670 <__gxx_personality_v0+0x48>
 8013662:	6a0d      	ldr	r5, [r1, #32]
 8013664:	4638      	mov	r0, r7
 8013666:	210d      	movs	r1, #13
 8013668:	f7ff ffd1 	bl	801360e <_Unwind_GetGR>
 801366c:	4285      	cmp	r5, r0
 801366e:	d02b      	beq.n	80136c8 <__gxx_personality_v0+0xa0>
 8013670:	2302      	movs	r3, #2
 8013672:	f006 0608 	and.w	r6, r6, #8
 8013676:	431e      	orrs	r6, r3
 8013678:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 801367c:	2300      	movs	r3, #0
 801367e:	f8cd b000 	str.w	fp, [sp]
 8013682:	220c      	movs	r2, #12
 8013684:	4619      	mov	r1, r3
 8013686:	4638      	mov	r0, r7
 8013688:	940a      	str	r4, [sp, #40]	; 0x28
 801368a:	f7ed fe71 	bl	8001370 <_Unwind_VRS_Set>
 801368e:	2e06      	cmp	r6, #6
 8013690:	d11c      	bne.n	80136cc <__gxx_personality_v0+0xa4>
 8013692:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8013696:	e9d4 5a0a 	ldrd	r5, sl, [r4, #40]	; 0x28
 801369a:	f1b8 0f00 	cmp.w	r8, #0
 801369e:	bf0c      	ite	eq
 80136a0:	f04f 0901 	moveq.w	r9, #1
 80136a4:	f04f 0903 	movne.w	r9, #3
 80136a8:	f016 0608 	ands.w	r6, r6, #8
 80136ac:	f000 8104 	beq.w	80138b8 <__gxx_personality_v0+0x290>
 80136b0:	f1b9 0f01 	cmp.w	r9, #1
 80136b4:	f040 80fc 	bne.w	80138b0 <__gxx_personality_v0+0x288>
 80136b8:	f000 f95c 	bl	8013974 <_ZSt9terminatev>
 80136bc:	2008      	movs	r0, #8
 80136be:	e7cb      	b.n	8013658 <__gxx_personality_v0+0x30>
 80136c0:	f000 fbf2 	bl	8013ea8 <abort>
 80136c4:	2301      	movs	r3, #1
 80136c6:	e7d4      	b.n	8013672 <__gxx_personality_v0+0x4a>
 80136c8:	2306      	movs	r3, #6
 80136ca:	e7d2      	b.n	8013672 <__gxx_personality_v0+0x4a>
 80136cc:	4638      	mov	r0, r7
 80136ce:	f7ee fbcb 	bl	8001e68 <_Unwind_GetLanguageSpecificData>
 80136d2:	4682      	mov	sl, r0
 80136d4:	2800      	cmp	r0, #0
 80136d6:	d0b9      	beq.n	801364c <__gxx_personality_v0+0x24>
 80136d8:	465a      	mov	r2, fp
 80136da:	4601      	mov	r1, r0
 80136dc:	4638      	mov	r0, r7
 80136de:	f7ff ff65 	bl	80135ac <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 80136e2:	4639      	mov	r1, r7
 80136e4:	4605      	mov	r5, r0
 80136e6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80136ea:	f7ff ff2a 	bl	8013542 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80136ee:	210f      	movs	r1, #15
 80136f0:	900c      	str	r0, [sp, #48]	; 0x30
 80136f2:	4638      	mov	r0, r7
 80136f4:	f7ff ff8b 	bl	801360e <_Unwind_GetGR>
 80136f8:	f020 0801 	bic.w	r8, r0, #1
 80136fc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8013700:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013702:	42ab      	cmp	r3, r5
 8013704:	d815      	bhi.n	8013732 <__gxx_personality_v0+0x10a>
 8013706:	2500      	movs	r5, #0
 8013708:	46a8      	mov	r8, r5
 801370a:	f04f 0901 	mov.w	r9, #1
 801370e:	07f3      	lsls	r3, r6, #31
 8013710:	d5ca      	bpl.n	80136a8 <__gxx_personality_v0+0x80>
 8013712:	f1b9 0f02 	cmp.w	r9, #2
 8013716:	d099      	beq.n	801364c <__gxx_personality_v0+0x24>
 8013718:	210d      	movs	r1, #13
 801371a:	4638      	mov	r0, r7
 801371c:	9e05      	ldr	r6, [sp, #20]
 801371e:	f7ff ff76 	bl	801360e <_Unwind_GetGR>
 8013722:	e9c4 5a0a 	strd	r5, sl, [r4, #40]	; 0x28
 8013726:	e9c4 0608 	strd	r0, r6, [r4, #32]
 801372a:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 801372e:	2006      	movs	r0, #6
 8013730:	e792      	b.n	8013658 <__gxx_personality_v0+0x30>
 8013732:	462a      	mov	r2, r5
 8013734:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8013738:	ab06      	add	r3, sp, #24
 801373a:	2000      	movs	r0, #0
 801373c:	f7ff ff25 	bl	801358a <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8013740:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8013744:	4602      	mov	r2, r0
 8013746:	ab07      	add	r3, sp, #28
 8013748:	2000      	movs	r0, #0
 801374a:	f7ff ff1e 	bl	801358a <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 801374e:	ab08      	add	r3, sp, #32
 8013750:	4602      	mov	r2, r0
 8013752:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8013756:	2000      	movs	r0, #0
 8013758:	f7ff ff17 	bl	801358a <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 801375c:	a909      	add	r1, sp, #36	; 0x24
 801375e:	f7ff fe83 	bl	8013468 <_ZL12read_uleb128PKhPm>
 8013762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013764:	9a06      	ldr	r2, [sp, #24]
 8013766:	4413      	add	r3, r2
 8013768:	4543      	cmp	r3, r8
 801376a:	4605      	mov	r5, r0
 801376c:	d901      	bls.n	8013772 <__gxx_personality_v0+0x14a>
 801376e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8013770:	e7c6      	b.n	8013700 <__gxx_personality_v0+0xd8>
 8013772:	9a07      	ldr	r2, [sp, #28]
 8013774:	4413      	add	r3, r2
 8013776:	4543      	cmp	r3, r8
 8013778:	d9c2      	bls.n	8013700 <__gxx_personality_v0+0xd8>
 801377a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801377e:	f1b8 0f00 	cmp.w	r8, #0
 8013782:	d001      	beq.n	8013788 <__gxx_personality_v0+0x160>
 8013784:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013786:	4498      	add	r8, r3
 8013788:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801378a:	b115      	cbz	r5, 8013792 <__gxx_personality_v0+0x16a>
 801378c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801378e:	3d01      	subs	r5, #1
 8013790:	441d      	add	r5, r3
 8013792:	f1b8 0f00 	cmp.w	r8, #0
 8013796:	f43f af59 	beq.w	801364c <__gxx_personality_v0+0x24>
 801379a:	2d00      	cmp	r5, #0
 801379c:	f000 8085 	beq.w	80138aa <__gxx_personality_v0+0x282>
 80137a0:	f016 0308 	ands.w	r3, r6, #8
 80137a4:	9303      	str	r3, [sp, #12]
 80137a6:	d033      	beq.n	8013810 <__gxx_personality_v0+0x1e8>
 80137a8:	2347      	movs	r3, #71	; 0x47
 80137aa:	7023      	strb	r3, [r4, #0]
 80137ac:	234e      	movs	r3, #78	; 0x4e
 80137ae:	7063      	strb	r3, [r4, #1]
 80137b0:	2355      	movs	r3, #85	; 0x55
 80137b2:	70a3      	strb	r3, [r4, #2]
 80137b4:	2343      	movs	r3, #67	; 0x43
 80137b6:	70e3      	strb	r3, [r4, #3]
 80137b8:	2346      	movs	r3, #70	; 0x46
 80137ba:	7123      	strb	r3, [r4, #4]
 80137bc:	234f      	movs	r3, #79	; 0x4f
 80137be:	7163      	strb	r3, [r4, #5]
 80137c0:	2352      	movs	r3, #82	; 0x52
 80137c2:	71a3      	strb	r3, [r4, #6]
 80137c4:	2300      	movs	r3, #0
 80137c6:	71e3      	strb	r3, [r4, #7]
 80137c8:	2300      	movs	r3, #0
 80137ca:	9302      	str	r3, [sp, #8]
 80137cc:	a907      	add	r1, sp, #28
 80137ce:	4628      	mov	r0, r5
 80137d0:	f7ff fe59 	bl	8013486 <_ZL12read_sleb128PKhPl>
 80137d4:	a908      	add	r1, sp, #32
 80137d6:	4681      	mov	r9, r0
 80137d8:	f7ff fe55 	bl	8013486 <_ZL12read_sleb128PKhPl>
 80137dc:	9907      	ldr	r1, [sp, #28]
 80137de:	2900      	cmp	r1, #0
 80137e0:	d060      	beq.n	80138a4 <__gxx_personality_v0+0x27c>
 80137e2:	dd39      	ble.n	8013858 <__gxx_personality_v0+0x230>
 80137e4:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80137e8:	28ff      	cmp	r0, #255	; 0xff
 80137ea:	d031      	beq.n	8013850 <__gxx_personality_v0+0x228>
 80137ec:	f000 0307 	and.w	r3, r0, #7
 80137f0:	2b04      	cmp	r3, #4
 80137f2:	f63f af65 	bhi.w	80136c0 <__gxx_personality_v0+0x98>
 80137f6:	a201      	add	r2, pc, #4	; (adr r2, 80137fc <__gxx_personality_v0+0x1d4>)
 80137f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137fc:	08013855 	.word	0x08013855
 8013800:	080136c1 	.word	0x080136c1
 8013804:	08013823 	.word	0x08013823
 8013808:	08013855 	.word	0x08013855
 801380c:	0801384d 	.word	0x0801384d
 8013810:	79e3      	ldrb	r3, [r4, #7]
 8013812:	2b01      	cmp	r3, #1
 8013814:	bf0c      	ite	eq
 8013816:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 801381a:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 801381e:	9305      	str	r3, [sp, #20]
 8013820:	e7d2      	b.n	80137c8 <__gxx_personality_v0+0x1a0>
 8013822:	2502      	movs	r5, #2
 8013824:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013826:	ab09      	add	r3, sp, #36	; 0x24
 8013828:	fb05 2211 	mls	r2, r5, r1, r2
 801382c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801382e:	f7ff fe42 	bl	80134b6 <_ZL28read_encoded_value_with_basehjPKhPj>
 8013832:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013834:	b131      	cbz	r1, 8013844 <__gxx_personality_v0+0x21c>
 8013836:	b35c      	cbz	r4, 8013890 <__gxx_personality_v0+0x268>
 8013838:	ab05      	add	r3, sp, #20
 801383a:	2200      	movs	r2, #0
 801383c:	4620      	mov	r0, r4
 801383e:	f7ff fd79 	bl	8013334 <__cxa_type_match>
 8013842:	b328      	cbz	r0, 8013890 <__gxx_personality_v0+0x268>
 8013844:	9d07      	ldr	r5, [sp, #28]
 8013846:	f04f 0903 	mov.w	r9, #3
 801384a:	e760      	b.n	801370e <__gxx_personality_v0+0xe6>
 801384c:	2508      	movs	r5, #8
 801384e:	e7e9      	b.n	8013824 <__gxx_personality_v0+0x1fc>
 8013850:	2500      	movs	r5, #0
 8013852:	e7e7      	b.n	8013824 <__gxx_personality_v0+0x1fc>
 8013854:	2504      	movs	r5, #4
 8013856:	e7e5      	b.n	8013824 <__gxx_personality_v0+0x1fc>
 8013858:	f1c1 517f 	rsb	r1, r1, #1069547520	; 0x3fc00000
 801385c:	f501 117f 	add.w	r1, r1, #4177920	; 0x3fc000
 8013860:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013862:	f501 517f 	add.w	r1, r1, #16320	; 0x3fc0
 8013866:	313f      	adds	r1, #63	; 0x3f
 8013868:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 801386c:	b1ac      	cbz	r4, 801389a <__gxx_personality_v0+0x272>
 801386e:	9a03      	ldr	r2, [sp, #12]
 8013870:	b99a      	cbnz	r2, 801389a <__gxx_personality_v0+0x272>
 8013872:	9b05      	ldr	r3, [sp, #20]
 8013874:	9309      	str	r3, [sp, #36]	; 0x24
 8013876:	3d04      	subs	r5, #4
 8013878:	f855 1f04 	ldr.w	r1, [r5, #4]!
 801387c:	2900      	cmp	r1, #0
 801387e:	d0e1      	beq.n	8013844 <__gxx_personality_v0+0x21c>
 8013880:	ab09      	add	r3, sp, #36	; 0x24
 8013882:	2200      	movs	r2, #0
 8013884:	4429      	add	r1, r5
 8013886:	4620      	mov	r0, r4
 8013888:	f7ff fd54 	bl	8013334 <__cxa_type_match>
 801388c:	2800      	cmp	r0, #0
 801388e:	d0f3      	beq.n	8013878 <__gxx_personality_v0+0x250>
 8013890:	9d08      	ldr	r5, [sp, #32]
 8013892:	2d00      	cmp	r5, #0
 8013894:	d05a      	beq.n	801394c <__gxx_personality_v0+0x324>
 8013896:	444d      	add	r5, r9
 8013898:	e798      	b.n	80137cc <__gxx_personality_v0+0x1a4>
 801389a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d1f6      	bne.n	8013890 <__gxx_personality_v0+0x268>
 80138a2:	e7cf      	b.n	8013844 <__gxx_personality_v0+0x21c>
 80138a4:	2301      	movs	r3, #1
 80138a6:	9302      	str	r3, [sp, #8]
 80138a8:	e7f2      	b.n	8013890 <__gxx_personality_v0+0x268>
 80138aa:	f04f 0902 	mov.w	r9, #2
 80138ae:	e72e      	b.n	801370e <__gxx_personality_v0+0xe6>
 80138b0:	2d00      	cmp	r5, #0
 80138b2:	da20      	bge.n	80138f6 <__gxx_personality_v0+0x2ce>
 80138b4:	f000 f870 	bl	8013998 <_ZSt10unexpectedv>
 80138b8:	f1b9 0f01 	cmp.w	r9, #1
 80138bc:	d102      	bne.n	80138c4 <__gxx_personality_v0+0x29c>
 80138be:	4620      	mov	r0, r4
 80138c0:	f000 fa81 	bl	8013dc6 <__cxa_call_terminate>
 80138c4:	2d00      	cmp	r5, #0
 80138c6:	da16      	bge.n	80138f6 <__gxx_personality_v0+0x2ce>
 80138c8:	465a      	mov	r2, fp
 80138ca:	4651      	mov	r1, sl
 80138cc:	4638      	mov	r0, r7
 80138ce:	f7ff fe6d 	bl	80135ac <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 80138d2:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80138d6:	4639      	mov	r1, r7
 80138d8:	f7ff fe33 	bl	8013542 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80138dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80138de:	900c      	str	r0, [sp, #48]	; 0x30
 80138e0:	43ea      	mvns	r2, r5
 80138e2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80138e6:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 80138ea:	bb6a      	cbnz	r2, 8013948 <__gxx_personality_v0+0x320>
 80138ec:	2204      	movs	r2, #4
 80138ee:	e9c4 600a 	strd	r6, r0, [r4, #40]	; 0x28
 80138f2:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 80138f6:	2300      	movs	r3, #0
 80138f8:	ae09      	add	r6, sp, #36	; 0x24
 80138fa:	461a      	mov	r2, r3
 80138fc:	4619      	mov	r1, r3
 80138fe:	9600      	str	r6, [sp, #0]
 8013900:	4638      	mov	r0, r7
 8013902:	9409      	str	r4, [sp, #36]	; 0x24
 8013904:	f7ed fd34 	bl	8001370 <_Unwind_VRS_Set>
 8013908:	2300      	movs	r3, #0
 801390a:	4619      	mov	r1, r3
 801390c:	2201      	movs	r2, #1
 801390e:	9600      	str	r6, [sp, #0]
 8013910:	4638      	mov	r0, r7
 8013912:	9509      	str	r5, [sp, #36]	; 0x24
 8013914:	f7ed fd2c 	bl	8001370 <_Unwind_VRS_Set>
 8013918:	210f      	movs	r1, #15
 801391a:	4638      	mov	r0, r7
 801391c:	f7ff fe77 	bl	801360e <_Unwind_GetGR>
 8013920:	f000 0001 	and.w	r0, r0, #1
 8013924:	ea40 0008 	orr.w	r0, r0, r8
 8013928:	2300      	movs	r3, #0
 801392a:	9009      	str	r0, [sp, #36]	; 0x24
 801392c:	9600      	str	r6, [sp, #0]
 801392e:	220f      	movs	r2, #15
 8013930:	4619      	mov	r1, r3
 8013932:	4638      	mov	r0, r7
 8013934:	f7ed fd1c 	bl	8001370 <_Unwind_VRS_Set>
 8013938:	f1b9 0f02 	cmp.w	r9, #2
 801393c:	d102      	bne.n	8013944 <__gxx_personality_v0+0x31c>
 801393e:	4620      	mov	r0, r4
 8013940:	f7ff fd56 	bl	80133f0 <__cxa_begin_cleanup>
 8013944:	2007      	movs	r0, #7
 8013946:	e687      	b.n	8013658 <__gxx_personality_v0+0x30>
 8013948:	3601      	adds	r6, #1
 801394a:	e7cc      	b.n	80138e6 <__gxx_personality_v0+0x2be>
 801394c:	9b02      	ldr	r3, [sp, #8]
 801394e:	ea4f 0943 	mov.w	r9, r3, lsl #1
 8013952:	2b00      	cmp	r3, #0
 8013954:	f43f ae7a 	beq.w	801364c <__gxx_personality_v0+0x24>
 8013958:	e6d9      	b.n	801370e <__gxx_personality_v0+0xe6>
 801395a:	bf00      	nop

0801395c <_ZN10__cxxabiv111__terminateEPFvvE>:
 801395c:	b508      	push	{r3, lr}
 801395e:	4780      	blx	r0
 8013960:	f000 faa2 	bl	8013ea8 <abort>

08013964 <_ZSt13get_terminatev>:
 8013964:	4b02      	ldr	r3, [pc, #8]	; (8013970 <_ZSt13get_terminatev+0xc>)
 8013966:	6818      	ldr	r0, [r3, #0]
 8013968:	f3bf 8f5b 	dmb	ish
 801396c:	4770      	bx	lr
 801396e:	bf00      	nop
 8013970:	20000010 	.word	0x20000010

08013974 <_ZSt9terminatev>:
 8013974:	b508      	push	{r3, lr}
 8013976:	f7ff fff5 	bl	8013964 <_ZSt13get_terminatev>
 801397a:	f7ff ffef 	bl	801395c <_ZN10__cxxabiv111__terminateEPFvvE>

0801397e <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 801397e:	b508      	push	{r3, lr}
 8013980:	4780      	blx	r0
 8013982:	f7ff fff7 	bl	8013974 <_ZSt9terminatev>
	...

08013988 <_ZSt14get_unexpectedv>:
 8013988:	4b02      	ldr	r3, [pc, #8]	; (8013994 <_ZSt14get_unexpectedv+0xc>)
 801398a:	6818      	ldr	r0, [r3, #0]
 801398c:	f3bf 8f5b 	dmb	ish
 8013990:	4770      	bx	lr
 8013992:	bf00      	nop
 8013994:	2000000c 	.word	0x2000000c

08013998 <_ZSt10unexpectedv>:
 8013998:	b508      	push	{r3, lr}
 801399a:	f7ff fff5 	bl	8013988 <_ZSt14get_unexpectedv>
 801399e:	f7ff ffee 	bl	801397e <_ZN10__cxxabiv112__unexpectedEPFvvE>

080139a2 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 80139a2:	2801      	cmp	r0, #1
 80139a4:	b507      	push	{r0, r1, r2, lr}
 80139a6:	d903      	bls.n	80139b0 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
 80139a8:	f851 0c14 	ldr.w	r0, [r1, #-20]
 80139ac:	f7ff ffd6 	bl	801395c <_ZN10__cxxabiv111__terminateEPFvvE>
 80139b0:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 80139b4:	f3bf 8f5b 	dmb	ish
 80139b8:	e853 2f00 	ldrex	r2, [r3]
 80139bc:	3a01      	subs	r2, #1
 80139be:	e843 2000 	strex	r0, r2, [r3]
 80139c2:	2800      	cmp	r0, #0
 80139c4:	d1f8      	bne.n	80139b8 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x16>
 80139c6:	f3bf 8f5b 	dmb	ish
 80139ca:	b962      	cbnz	r2, 80139e6 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x44>
 80139cc:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 80139d0:	f101 0058 	add.w	r0, r1, #88	; 0x58
 80139d4:	b113      	cbz	r3, 80139dc <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
 80139d6:	9001      	str	r0, [sp, #4]
 80139d8:	4798      	blx	r3
 80139da:	9801      	ldr	r0, [sp, #4]
 80139dc:	b003      	add	sp, #12
 80139de:	f85d eb04 	ldr.w	lr, [sp], #4
 80139e2:	f7ff bc5f 	b.w	80132a4 <__cxa_free_exception>
 80139e6:	b003      	add	sp, #12
 80139e8:	f85d fb04 	ldr.w	pc, [sp], #4

080139ec <__cxa_init_primary_exception>:
 80139ec:	b538      	push	{r3, r4, r5, lr}
 80139ee:	2500      	movs	r5, #0
 80139f0:	e940 121e 	strd	r1, r2, [r0, #-120]	; 0x78
 80139f4:	f840 5c80 	str.w	r5, [r0, #-128]
 80139f8:	4604      	mov	r4, r0
 80139fa:	f7ff ffc5 	bl	8013988 <_ZSt14get_unexpectedv>
 80139fe:	f844 0c70 	str.w	r0, [r4, #-112]
 8013a02:	f7ff ffaf 	bl	8013964 <_ZSt13get_terminatev>
 8013a06:	2347      	movs	r3, #71	; 0x47
 8013a08:	f804 3c58 	strb.w	r3, [r4, #-88]
 8013a0c:	234e      	movs	r3, #78	; 0x4e
 8013a0e:	f804 3c57 	strb.w	r3, [r4, #-87]
 8013a12:	2355      	movs	r3, #85	; 0x55
 8013a14:	f804 3c56 	strb.w	r3, [r4, #-86]
 8013a18:	2343      	movs	r3, #67	; 0x43
 8013a1a:	f804 3c55 	strb.w	r3, [r4, #-85]
 8013a1e:	f804 3c54 	strb.w	r3, [r4, #-84]
 8013a22:	232b      	movs	r3, #43	; 0x2b
 8013a24:	f804 3c53 	strb.w	r3, [r4, #-83]
 8013a28:	f804 3c52 	strb.w	r3, [r4, #-82]
 8013a2c:	4b04      	ldr	r3, [pc, #16]	; (8013a40 <__cxa_init_primary_exception+0x54>)
 8013a2e:	f844 0c6c 	str.w	r0, [r4, #-108]
 8013a32:	f804 5c51 	strb.w	r5, [r4, #-81]
 8013a36:	f844 3c50 	str.w	r3, [r4, #-80]
 8013a3a:	f1a4 0080 	sub.w	r0, r4, #128	; 0x80
 8013a3e:	bd38      	pop	{r3, r4, r5, pc}
 8013a40:	080139a3 	.word	0x080139a3

08013a44 <__cxa_throw>:
 8013a44:	b507      	push	{r0, r1, r2, lr}
 8013a46:	4604      	mov	r4, r0
 8013a48:	e9cd 2100 	strd	r2, r1, [sp]
 8013a4c:	f7ff fd08 	bl	8013460 <__cxa_get_globals>
 8013a50:	4603      	mov	r3, r0
 8013a52:	6840      	ldr	r0, [r0, #4]
 8013a54:	3001      	adds	r0, #1
 8013a56:	e9dd 2100 	ldrd	r2, r1, [sp]
 8013a5a:	6058      	str	r0, [r3, #4]
 8013a5c:	4620      	mov	r0, r4
 8013a5e:	f7ff ffc5 	bl	80139ec <__cxa_init_primary_exception>
 8013a62:	4604      	mov	r4, r0
 8013a64:	2301      	movs	r3, #1
 8013a66:	f844 3b28 	str.w	r3, [r4], #40
 8013a6a:	4620      	mov	r0, r4
 8013a6c:	f7ee f814 	bl	8001a98 <_Unwind_RaiseException>
 8013a70:	4620      	mov	r0, r4
 8013a72:	f000 f9e8 	bl	8013e46 <__cxa_begin_catch>
 8013a76:	f7ff ff7d 	bl	8013974 <_ZSt9terminatev>

08013a7a <_Znwj>:
 8013a7a:	2801      	cmp	r0, #1
 8013a7c:	bf38      	it	cc
 8013a7e:	2001      	movcc	r0, #1
 8013a80:	b510      	push	{r4, lr}
 8013a82:	4604      	mov	r4, r0
 8013a84:	4620      	mov	r0, r4
 8013a86:	f000 fa17 	bl	8013eb8 <malloc>
 8013a8a:	b100      	cbz	r0, 8013a8e <_Znwj+0x14>
 8013a8c:	bd10      	pop	{r4, pc}
 8013a8e:	f000 fa03 	bl	8013e98 <_ZSt15get_new_handlerv>
 8013a92:	b908      	cbnz	r0, 8013a98 <_Znwj+0x1e>
 8013a94:	f000 fa08 	bl	8013ea8 <abort>
 8013a98:	4780      	blx	r0
 8013a9a:	e7f3      	b.n	8013a84 <_Znwj+0xa>

08013a9c <_Znaj>:
 8013a9c:	f7ff bfed 	b.w	8013a7a <_Znwj>

08013aa0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8013aa0:	b510      	push	{r4, lr}
 8013aa2:	4b03      	ldr	r3, [pc, #12]	; (8013ab0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8013aa4:	6003      	str	r3, [r0, #0]
 8013aa6:	4604      	mov	r4, r0
 8013aa8:	f7ff fb34 	bl	8013114 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8013aac:	4620      	mov	r0, r4
 8013aae:	bd10      	pop	{r4, pc}
 8013ab0:	08018400 	.word	0x08018400

08013ab4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8013ab4:	b510      	push	{r4, lr}
 8013ab6:	4604      	mov	r4, r0
 8013ab8:	f7ff fff2 	bl	8013aa0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8013abc:	4620      	mov	r0, r4
 8013abe:	210c      	movs	r1, #12
 8013ac0:	f7ff fb7c 	bl	80131bc <_ZdlPvj>
 8013ac4:	4620      	mov	r0, r4
 8013ac6:	bd10      	pop	{r4, pc}

08013ac8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8013ac8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013aca:	9f08      	ldr	r7, [sp, #32]
 8013acc:	4297      	cmp	r7, r2
 8013ace:	4605      	mov	r5, r0
 8013ad0:	460e      	mov	r6, r1
 8013ad2:	4614      	mov	r4, r2
 8013ad4:	d00a      	beq.n	8013aec <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 8013ad6:	68a8      	ldr	r0, [r5, #8]
 8013ad8:	6802      	ldr	r2, [r0, #0]
 8013ada:	9708      	str	r7, [sp, #32]
 8013adc:	6a15      	ldr	r5, [r2, #32]
 8013ade:	4631      	mov	r1, r6
 8013ae0:	4622      	mov	r2, r4
 8013ae2:	46ac      	mov	ip, r5
 8013ae4:	b003      	add	sp, #12
 8013ae6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013aea:	4760      	bx	ip
 8013aec:	4619      	mov	r1, r3
 8013aee:	9301      	str	r3, [sp, #4]
 8013af0:	f000 f858 	bl	8013ba4 <_ZNKSt9type_infoeqERKS_>
 8013af4:	9b01      	ldr	r3, [sp, #4]
 8013af6:	2800      	cmp	r0, #0
 8013af8:	d0ed      	beq.n	8013ad6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 8013afa:	2006      	movs	r0, #6
 8013afc:	b003      	add	sp, #12
 8013afe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013b00 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8013b00:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b04:	460d      	mov	r5, r1
 8013b06:	4619      	mov	r1, r3
 8013b08:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 8013b0c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 8013b10:	4681      	mov	r9, r0
 8013b12:	4617      	mov	r7, r2
 8013b14:	4698      	mov	r8, r3
 8013b16:	f000 f845 	bl	8013ba4 <_ZNKSt9type_infoeqERKS_>
 8013b1a:	b190      	cbz	r0, 8013b42 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8013b1c:	2d00      	cmp	r5, #0
 8013b1e:	6034      	str	r4, [r6, #0]
 8013b20:	7137      	strb	r7, [r6, #4]
 8013b22:	db09      	blt.n	8013b38 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8013b24:	1961      	adds	r1, r4, r5
 8013b26:	458a      	cmp	sl, r1
 8013b28:	bf0c      	ite	eq
 8013b2a:	2106      	moveq	r1, #6
 8013b2c:	2101      	movne	r1, #1
 8013b2e:	71b1      	strb	r1, [r6, #6]
 8013b30:	2000      	movs	r0, #0
 8013b32:	b001      	add	sp, #4
 8013b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b38:	3502      	adds	r5, #2
 8013b3a:	d1f9      	bne.n	8013b30 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8013b3c:	2301      	movs	r3, #1
 8013b3e:	71b3      	strb	r3, [r6, #6]
 8013b40:	e7f6      	b.n	8013b30 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8013b42:	4554      	cmp	r4, sl
 8013b44:	d106      	bne.n	8013b54 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8013b46:	4659      	mov	r1, fp
 8013b48:	4648      	mov	r0, r9
 8013b4a:	f000 f82b 	bl	8013ba4 <_ZNKSt9type_infoeqERKS_>
 8013b4e:	b108      	cbz	r0, 8013b54 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8013b50:	7177      	strb	r7, [r6, #5]
 8013b52:	e7ed      	b.n	8013b30 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8013b54:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8013b58:	6803      	ldr	r3, [r0, #0]
 8013b5a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 8013b5e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 8013b62:	69dc      	ldr	r4, [r3, #28]
 8013b64:	463a      	mov	r2, r7
 8013b66:	4643      	mov	r3, r8
 8013b68:	4629      	mov	r1, r5
 8013b6a:	46a4      	mov	ip, r4
 8013b6c:	b001      	add	sp, #4
 8013b6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b72:	4760      	bx	ip

08013b74 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8013b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b78:	4607      	mov	r7, r0
 8013b7a:	460c      	mov	r4, r1
 8013b7c:	4615      	mov	r5, r2
 8013b7e:	461e      	mov	r6, r3
 8013b80:	f7ff fafb 	bl	801317a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8013b84:	b948      	cbnz	r0, 8013b9a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8013b86:	68b8      	ldr	r0, [r7, #8]
 8013b88:	6803      	ldr	r3, [r0, #0]
 8013b8a:	699f      	ldr	r7, [r3, #24]
 8013b8c:	462a      	mov	r2, r5
 8013b8e:	4633      	mov	r3, r6
 8013b90:	4621      	mov	r1, r4
 8013b92:	46bc      	mov	ip, r7
 8013b94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013b98:	4760      	bx	ip
 8013b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013b9e <_ZNSt9type_infoD1Ev>:
 8013b9e:	4770      	bx	lr

08013ba0 <_ZNKSt9type_info14__is_pointer_pEv>:
 8013ba0:	2000      	movs	r0, #0
 8013ba2:	4770      	bx	lr

08013ba4 <_ZNKSt9type_infoeqERKS_>:
 8013ba4:	4281      	cmp	r1, r0
 8013ba6:	b508      	push	{r3, lr}
 8013ba8:	d00e      	beq.n	8013bc8 <_ZNKSt9type_infoeqERKS_+0x24>
 8013baa:	6840      	ldr	r0, [r0, #4]
 8013bac:	7803      	ldrb	r3, [r0, #0]
 8013bae:	2b2a      	cmp	r3, #42	; 0x2a
 8013bb0:	d00c      	beq.n	8013bcc <_ZNKSt9type_infoeqERKS_+0x28>
 8013bb2:	6849      	ldr	r1, [r1, #4]
 8013bb4:	780b      	ldrb	r3, [r1, #0]
 8013bb6:	2b2a      	cmp	r3, #42	; 0x2a
 8013bb8:	bf08      	it	eq
 8013bba:	3101      	addeq	r1, #1
 8013bbc:	f7ec fb28 	bl	8000210 <strcmp>
 8013bc0:	fab0 f080 	clz	r0, r0
 8013bc4:	0940      	lsrs	r0, r0, #5
 8013bc6:	bd08      	pop	{r3, pc}
 8013bc8:	2001      	movs	r0, #1
 8013bca:	e7fc      	b.n	8013bc6 <_ZNKSt9type_infoeqERKS_+0x22>
 8013bcc:	2000      	movs	r0, #0
 8013bce:	e7fa      	b.n	8013bc6 <_ZNKSt9type_infoeqERKS_+0x22>

08013bd0 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 8013bd0:	684b      	ldr	r3, [r1, #4]
 8013bd2:	6043      	str	r3, [r0, #4]
 8013bd4:	684b      	ldr	r3, [r1, #4]
 8013bd6:	6001      	str	r1, [r0, #0]
 8013bd8:	6018      	str	r0, [r3, #0]
 8013bda:	6048      	str	r0, [r1, #4]
 8013bdc:	4770      	bx	lr

08013bde <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 8013bde:	e9d0 3200 	ldrd	r3, r2, [r0]
 8013be2:	6013      	str	r3, [r2, #0]
 8013be4:	605a      	str	r2, [r3, #4]
 8013be6:	4770      	bx	lr

08013be8 <_ZNKSt11logic_error4whatEv>:
 8013be8:	6840      	ldr	r0, [r0, #4]
 8013bea:	4770      	bx	lr

08013bec <_ZNSt13runtime_errorD1Ev>:
 8013bec:	b513      	push	{r0, r1, r4, lr}
 8013bee:	4b07      	ldr	r3, [pc, #28]	; (8013c0c <_ZNSt13runtime_errorD1Ev+0x20>)
 8013bf0:	6003      	str	r3, [r0, #0]
 8013bf2:	4604      	mov	r4, r0
 8013bf4:	6840      	ldr	r0, [r0, #4]
 8013bf6:	a901      	add	r1, sp, #4
 8013bf8:	380c      	subs	r0, #12
 8013bfa:	f000 f8ab 	bl	8013d54 <_ZNSs4_Rep10_M_disposeERKSaIcE>
 8013bfe:	4620      	mov	r0, r4
 8013c00:	f7ff fc2c 	bl	801345c <_ZNSt9exceptionD1Ev>
 8013c04:	4620      	mov	r0, r4
 8013c06:	b002      	add	sp, #8
 8013c08:	bd10      	pop	{r4, pc}
 8013c0a:	bf00      	nop
 8013c0c:	08018464 	.word	0x08018464

08013c10 <_ZNSt13runtime_errorD0Ev>:
 8013c10:	b510      	push	{r4, lr}
 8013c12:	4604      	mov	r4, r0
 8013c14:	f7ff ffea 	bl	8013bec <_ZNSt13runtime_errorD1Ev>
 8013c18:	4620      	mov	r0, r4
 8013c1a:	f000 f8b5 	bl	8013d88 <_ZdlPv>
 8013c1e:	4620      	mov	r0, r4
 8013c20:	bd10      	pop	{r4, pc}
	...

08013c24 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0>:
 8013c24:	4288      	cmp	r0, r1
 8013c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c2a:	4604      	mov	r4, r0
 8013c2c:	460d      	mov	r5, r1
 8013c2e:	d018      	beq.n	8013c62 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x3e>
 8013c30:	b1a0      	cbz	r0, 8013c5c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x38>
 8013c32:	eba1 0800 	sub.w	r8, r1, r0
 8013c36:	4640      	mov	r0, r8
 8013c38:	2100      	movs	r1, #0
 8013c3a:	f000 f859 	bl	8013cf0 <_ZNSs4_Rep9_S_createEjjRKSaIcE>
 8013c3e:	f100 070c 	add.w	r7, r0, #12
 8013c42:	4606      	mov	r6, r0
 8013c44:	4621      	mov	r1, r4
 8013c46:	4638      	mov	r0, r7
 8013c48:	462a      	mov	r2, r5
 8013c4a:	f000 f83f 	bl	8013ccc <_ZNSs13_S_copy_charsEPcPKcS1_>
 8013c4e:	4641      	mov	r1, r8
 8013c50:	4630      	mov	r0, r6
 8013c52:	f000 f841 	bl	8013cd8 <_ZNSs4_Rep26_M_set_length_and_sharableEj>
 8013c56:	4638      	mov	r0, r7
 8013c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c5c:	4802      	ldr	r0, [pc, #8]	; (8013c68 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x44>)
 8013c5e:	f000 f88d 	bl	8013d7c <_ZSt19__throw_logic_errorPKc>
 8013c62:	4f02      	ldr	r7, [pc, #8]	; (8013c6c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x48>)
 8013c64:	e7f7      	b.n	8013c56 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x32>
 8013c66:	bf00      	nop
 8013c68:	08018470 	.word	0x08018470
 8013c6c:	20000408 	.word	0x20000408

08013c70 <_ZNSsC2EPKcRKSaIcE.isra.0>:
 8013c70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013c72:	4605      	mov	r5, r0
 8013c74:	460c      	mov	r4, r1
 8013c76:	b159      	cbz	r1, 8013c90 <_ZNSsC2EPKcRKSaIcE.isra.0+0x20>
 8013c78:	4608      	mov	r0, r1
 8013c7a:	9201      	str	r2, [sp, #4]
 8013c7c:	f7ec fb28 	bl	80002d0 <strlen>
 8013c80:	9a01      	ldr	r2, [sp, #4]
 8013c82:	1821      	adds	r1, r4, r0
 8013c84:	4620      	mov	r0, r4
 8013c86:	f7ff ffcd 	bl	8013c24 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0>
 8013c8a:	6028      	str	r0, [r5, #0]
 8013c8c:	b003      	add	sp, #12
 8013c8e:	bd30      	pop	{r4, r5, pc}
 8013c90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013c94:	e7f6      	b.n	8013c84 <_ZNSsC2EPKcRKSaIcE.isra.0+0x14>
	...

08013c98 <_ZNSt13runtime_errorC1EPKc>:
 8013c98:	b513      	push	{r0, r1, r4, lr}
 8013c9a:	4b05      	ldr	r3, [pc, #20]	; (8013cb0 <_ZNSt13runtime_errorC1EPKc+0x18>)
 8013c9c:	4604      	mov	r4, r0
 8013c9e:	aa01      	add	r2, sp, #4
 8013ca0:	f840 3b04 	str.w	r3, [r0], #4
 8013ca4:	f7ff ffe4 	bl	8013c70 <_ZNSsC2EPKcRKSaIcE.isra.0>
 8013ca8:	4620      	mov	r0, r4
 8013caa:	b002      	add	sp, #8
 8013cac:	bd10      	pop	{r4, pc}
 8013cae:	bf00      	nop
 8013cb0:	08018464 	.word	0x08018464

08013cb4 <_ZNSs7_M_copyEPcPKcj>:
 8013cb4:	2a01      	cmp	r2, #1
 8013cb6:	b430      	push	{r4, r5}
 8013cb8:	d103      	bne.n	8013cc2 <_ZNSs7_M_copyEPcPKcj+0xe>
 8013cba:	780b      	ldrb	r3, [r1, #0]
 8013cbc:	7003      	strb	r3, [r0, #0]
 8013cbe:	bc30      	pop	{r4, r5}
 8013cc0:	4770      	bx	lr
 8013cc2:	2a00      	cmp	r2, #0
 8013cc4:	d0fb      	beq.n	8013cbe <_ZNSs7_M_copyEPcPKcj+0xa>
 8013cc6:	bc30      	pop	{r4, r5}
 8013cc8:	f001 b82b 	b.w	8014d22 <memcpy>

08013ccc <_ZNSs13_S_copy_charsEPcPKcS1_>:
 8013ccc:	b508      	push	{r3, lr}
 8013cce:	1a52      	subs	r2, r2, r1
 8013cd0:	f7ff fff0 	bl	8013cb4 <_ZNSs7_M_copyEPcPKcj>
 8013cd4:	bd08      	pop	{r3, pc}
	...

08013cd8 <_ZNSs4_Rep26_M_set_length_and_sharableEj>:
 8013cd8:	4b04      	ldr	r3, [pc, #16]	; (8013cec <_ZNSs4_Rep26_M_set_length_and_sharableEj+0x14>)
 8013cda:	4298      	cmp	r0, r3
 8013cdc:	d004      	beq.n	8013ce8 <_ZNSs4_Rep26_M_set_length_and_sharableEj+0x10>
 8013cde:	6001      	str	r1, [r0, #0]
 8013ce0:	4401      	add	r1, r0
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	6083      	str	r3, [r0, #8]
 8013ce6:	730b      	strb	r3, [r1, #12]
 8013ce8:	4770      	bx	lr
 8013cea:	bf00      	nop
 8013cec:	200003fc 	.word	0x200003fc

08013cf0 <_ZNSs4_Rep9_S_createEjjRKSaIcE>:
 8013cf0:	4b15      	ldr	r3, [pc, #84]	; (8013d48 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x58>)
 8013cf2:	4298      	cmp	r0, r3
 8013cf4:	b510      	push	{r4, lr}
 8013cf6:	4604      	mov	r4, r0
 8013cf8:	d902      	bls.n	8013d00 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x10>
 8013cfa:	4814      	ldr	r0, [pc, #80]	; (8013d4c <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x5c>)
 8013cfc:	f000 f841 	bl	8013d82 <_ZSt20__throw_length_errorPKc>
 8013d00:	4288      	cmp	r0, r1
 8013d02:	d903      	bls.n	8013d0c <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x1c>
 8013d04:	004b      	lsls	r3, r1, #1
 8013d06:	4298      	cmp	r0, r3
 8013d08:	bf38      	it	cc
 8013d0a:	461c      	movcc	r4, r3
 8013d0c:	f104 031d 	add.w	r3, r4, #29
 8013d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013d14:	f104 000d 	add.w	r0, r4, #13
 8013d18:	d90c      	bls.n	8013d34 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 8013d1a:	428c      	cmp	r4, r1
 8013d1c:	d90a      	bls.n	8013d34 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 8013d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013d22:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8013d26:	1ae4      	subs	r4, r4, r3
 8013d28:	4b07      	ldr	r3, [pc, #28]	; (8013d48 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x58>)
 8013d2a:	429c      	cmp	r4, r3
 8013d2c:	bf28      	it	cs
 8013d2e:	461c      	movcs	r4, r3
 8013d30:	f104 000d 	add.w	r0, r4, #13
 8013d34:	2800      	cmp	r0, #0
 8013d36:	da01      	bge.n	8013d3c <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x4c>
 8013d38:	f000 f81a 	bl	8013d70 <_ZSt17__throw_bad_allocv>
 8013d3c:	f7ff fe9d 	bl	8013a7a <_Znwj>
 8013d40:	2200      	movs	r2, #0
 8013d42:	6044      	str	r4, [r0, #4]
 8013d44:	6082      	str	r2, [r0, #8]
 8013d46:	bd10      	pop	{r4, pc}
 8013d48:	3ffffffc 	.word	0x3ffffffc
 8013d4c:	0801849a 	.word	0x0801849a

08013d50 <_ZNSs4_Rep10_M_destroyERKSaIcE>:
 8013d50:	f000 b81a 	b.w	8013d88 <_ZdlPv>

08013d54 <_ZNSs4_Rep10_M_disposeERKSaIcE>:
 8013d54:	4a05      	ldr	r2, [pc, #20]	; (8013d6c <_ZNSs4_Rep10_M_disposeERKSaIcE+0x18>)
 8013d56:	4290      	cmp	r0, r2
 8013d58:	b510      	push	{r4, lr}
 8013d5a:	d006      	beq.n	8013d6a <_ZNSs4_Rep10_M_disposeERKSaIcE+0x16>
 8013d5c:	6882      	ldr	r2, [r0, #8]
 8013d5e:	1e54      	subs	r4, r2, #1
 8013d60:	2a00      	cmp	r2, #0
 8013d62:	6084      	str	r4, [r0, #8]
 8013d64:	dc01      	bgt.n	8013d6a <_ZNSs4_Rep10_M_disposeERKSaIcE+0x16>
 8013d66:	f7ff fff3 	bl	8013d50 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 8013d6a:	bd10      	pop	{r4, pc}
 8013d6c:	200003fc 	.word	0x200003fc

08013d70 <_ZSt17__throw_bad_allocv>:
 8013d70:	b508      	push	{r3, lr}
 8013d72:	f000 f899 	bl	8013ea8 <abort>

08013d76 <_ZSt28__throw_bad_array_new_lengthv>:
 8013d76:	b508      	push	{r3, lr}
 8013d78:	f000 f896 	bl	8013ea8 <abort>

08013d7c <_ZSt19__throw_logic_errorPKc>:
 8013d7c:	b508      	push	{r3, lr}
 8013d7e:	f000 f893 	bl	8013ea8 <abort>

08013d82 <_ZSt20__throw_length_errorPKc>:
 8013d82:	b508      	push	{r3, lr}
 8013d84:	f000 f890 	bl	8013ea8 <abort>

08013d88 <_ZdlPv>:
 8013d88:	f000 b89e 	b.w	8013ec8 <free>

08013d8c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8013d8c:	7803      	ldrb	r3, [r0, #0]
 8013d8e:	2b47      	cmp	r3, #71	; 0x47
 8013d90:	d117      	bne.n	8013dc2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013d92:	7843      	ldrb	r3, [r0, #1]
 8013d94:	2b4e      	cmp	r3, #78	; 0x4e
 8013d96:	d114      	bne.n	8013dc2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013d98:	7883      	ldrb	r3, [r0, #2]
 8013d9a:	2b55      	cmp	r3, #85	; 0x55
 8013d9c:	d111      	bne.n	8013dc2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013d9e:	78c3      	ldrb	r3, [r0, #3]
 8013da0:	2b43      	cmp	r3, #67	; 0x43
 8013da2:	d10e      	bne.n	8013dc2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013da4:	7903      	ldrb	r3, [r0, #4]
 8013da6:	2b43      	cmp	r3, #67	; 0x43
 8013da8:	d10b      	bne.n	8013dc2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013daa:	7943      	ldrb	r3, [r0, #5]
 8013dac:	2b2b      	cmp	r3, #43	; 0x2b
 8013dae:	d108      	bne.n	8013dc2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013db0:	7983      	ldrb	r3, [r0, #6]
 8013db2:	2b2b      	cmp	r3, #43	; 0x2b
 8013db4:	d105      	bne.n	8013dc2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013db6:	79c0      	ldrb	r0, [r0, #7]
 8013db8:	2801      	cmp	r0, #1
 8013dba:	bf8c      	ite	hi
 8013dbc:	2000      	movhi	r0, #0
 8013dbe:	2001      	movls	r0, #1
 8013dc0:	4770      	bx	lr
 8013dc2:	2000      	movs	r0, #0
 8013dc4:	4770      	bx	lr

08013dc6 <__cxa_call_terminate>:
 8013dc6:	b510      	push	{r4, lr}
 8013dc8:	4604      	mov	r4, r0
 8013dca:	b148      	cbz	r0, 8013de0 <__cxa_call_terminate+0x1a>
 8013dcc:	f000 f83b 	bl	8013e46 <__cxa_begin_catch>
 8013dd0:	4620      	mov	r0, r4
 8013dd2:	f7ff ffdb 	bl	8013d8c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8013dd6:	b118      	cbz	r0, 8013de0 <__cxa_call_terminate+0x1a>
 8013dd8:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8013ddc:	f7ff fdbe 	bl	801395c <_ZN10__cxxabiv111__terminateEPFvvE>
 8013de0:	f7ff fdc8 	bl	8013974 <_ZSt9terminatev>

08013de4 <__cxa_call_unexpected>:
 8013de4:	b538      	push	{r3, r4, r5, lr}
 8013de6:	4602      	mov	r2, r0
 8013de8:	f7ff ffd0 	bl	8013d8c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8013dec:	4604      	mov	r4, r0
 8013dee:	b140      	cbz	r0, 8013e02 <__cxa_call_unexpected+0x1e>
 8013df0:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8013df4:	2500      	movs	r5, #0
 8013df6:	4610      	mov	r0, r2
 8013df8:	f000 f825 	bl	8013e46 <__cxa_begin_catch>
 8013dfc:	b11d      	cbz	r5, 8013e06 <__cxa_call_unexpected+0x22>
 8013dfe:	f7ff fdcb 	bl	8013998 <_ZSt10unexpectedv>
 8013e02:	2501      	movs	r5, #1
 8013e04:	e7f7      	b.n	8013df6 <__cxa_call_unexpected+0x12>
 8013e06:	4620      	mov	r0, r4
 8013e08:	f7ff fdb9 	bl	801397e <_ZN10__cxxabiv112__unexpectedEPFvvE>

08013e0c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8013e0c:	7803      	ldrb	r3, [r0, #0]
 8013e0e:	2b47      	cmp	r3, #71	; 0x47
 8013e10:	d117      	bne.n	8013e42 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013e12:	7843      	ldrb	r3, [r0, #1]
 8013e14:	2b4e      	cmp	r3, #78	; 0x4e
 8013e16:	d114      	bne.n	8013e42 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013e18:	7883      	ldrb	r3, [r0, #2]
 8013e1a:	2b55      	cmp	r3, #85	; 0x55
 8013e1c:	d111      	bne.n	8013e42 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013e1e:	78c3      	ldrb	r3, [r0, #3]
 8013e20:	2b43      	cmp	r3, #67	; 0x43
 8013e22:	d10e      	bne.n	8013e42 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013e24:	7903      	ldrb	r3, [r0, #4]
 8013e26:	2b43      	cmp	r3, #67	; 0x43
 8013e28:	d10b      	bne.n	8013e42 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013e2a:	7943      	ldrb	r3, [r0, #5]
 8013e2c:	2b2b      	cmp	r3, #43	; 0x2b
 8013e2e:	d108      	bne.n	8013e42 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013e30:	7983      	ldrb	r3, [r0, #6]
 8013e32:	2b2b      	cmp	r3, #43	; 0x2b
 8013e34:	d105      	bne.n	8013e42 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013e36:	79c0      	ldrb	r0, [r0, #7]
 8013e38:	2801      	cmp	r0, #1
 8013e3a:	bf8c      	ite	hi
 8013e3c:	2000      	movhi	r0, #0
 8013e3e:	2001      	movls	r0, #1
 8013e40:	4770      	bx	lr
 8013e42:	2000      	movs	r0, #0
 8013e44:	4770      	bx	lr

08013e46 <__cxa_begin_catch>:
 8013e46:	b538      	push	{r3, r4, r5, lr}
 8013e48:	4604      	mov	r4, r0
 8013e4a:	f7ff fb09 	bl	8013460 <__cxa_get_globals>
 8013e4e:	6805      	ldr	r5, [r0, #0]
 8013e50:	4602      	mov	r2, r0
 8013e52:	4620      	mov	r0, r4
 8013e54:	f1a4 0120 	sub.w	r1, r4, #32
 8013e58:	f7ff ffd8 	bl	8013e0c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8013e5c:	b928      	cbnz	r0, 8013e6a <__cxa_begin_catch+0x24>
 8013e5e:	b10d      	cbz	r5, 8013e64 <__cxa_begin_catch+0x1e>
 8013e60:	f7ff fd88 	bl	8013974 <_ZSt9terminatev>
 8013e64:	6011      	str	r1, [r2, #0]
 8013e66:	4628      	mov	r0, r5
 8013e68:	bd38      	pop	{r3, r4, r5, pc}
 8013e6a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	bfb4      	ite	lt
 8013e72:	f1c3 0301 	rsblt	r3, r3, #1
 8013e76:	3301      	addge	r3, #1
 8013e78:	f844 3c0c 	str.w	r3, [r4, #-12]
 8013e7c:	6853      	ldr	r3, [r2, #4]
 8013e7e:	428d      	cmp	r5, r1
 8013e80:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8013e84:	6053      	str	r3, [r2, #4]
 8013e86:	4620      	mov	r0, r4
 8013e88:	bf1c      	itt	ne
 8013e8a:	f844 5c10 	strne.w	r5, [r4, #-16]
 8013e8e:	6011      	strne	r1, [r2, #0]
 8013e90:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013e92:	f7ed fa3f 	bl	8001314 <_Unwind_Complete>
 8013e96:	e7e6      	b.n	8013e66 <__cxa_begin_catch+0x20>

08013e98 <_ZSt15get_new_handlerv>:
 8013e98:	4b02      	ldr	r3, [pc, #8]	; (8013ea4 <_ZSt15get_new_handlerv+0xc>)
 8013e9a:	6818      	ldr	r0, [r3, #0]
 8013e9c:	f3bf 8f5b 	dmb	ish
 8013ea0:	4770      	bx	lr
 8013ea2:	bf00      	nop
 8013ea4:	2000040c 	.word	0x2000040c

08013ea8 <abort>:
 8013ea8:	b508      	push	{r3, lr}
 8013eaa:	2006      	movs	r0, #6
 8013eac:	f000 fe96 	bl	8014bdc <raise>
 8013eb0:	2001      	movs	r0, #1
 8013eb2:	f7fb fb31 	bl	800f518 <_exit>
	...

08013eb8 <malloc>:
 8013eb8:	4b02      	ldr	r3, [pc, #8]	; (8013ec4 <malloc+0xc>)
 8013eba:	4601      	mov	r1, r0
 8013ebc:	6818      	ldr	r0, [r3, #0]
 8013ebe:	f000 b82b 	b.w	8013f18 <_malloc_r>
 8013ec2:	bf00      	nop
 8013ec4:	2000006c 	.word	0x2000006c

08013ec8 <free>:
 8013ec8:	4b02      	ldr	r3, [pc, #8]	; (8013ed4 <free+0xc>)
 8013eca:	4601      	mov	r1, r0
 8013ecc:	6818      	ldr	r0, [r3, #0]
 8013ece:	f001 bdb1 	b.w	8015a34 <_free_r>
 8013ed2:	bf00      	nop
 8013ed4:	2000006c 	.word	0x2000006c

08013ed8 <sbrk_aligned>:
 8013ed8:	b570      	push	{r4, r5, r6, lr}
 8013eda:	4e0e      	ldr	r6, [pc, #56]	; (8013f14 <sbrk_aligned+0x3c>)
 8013edc:	460c      	mov	r4, r1
 8013ede:	6831      	ldr	r1, [r6, #0]
 8013ee0:	4605      	mov	r5, r0
 8013ee2:	b911      	cbnz	r1, 8013eea <sbrk_aligned+0x12>
 8013ee4:	f000 fece 	bl	8014c84 <_sbrk_r>
 8013ee8:	6030      	str	r0, [r6, #0]
 8013eea:	4621      	mov	r1, r4
 8013eec:	4628      	mov	r0, r5
 8013eee:	f000 fec9 	bl	8014c84 <_sbrk_r>
 8013ef2:	1c43      	adds	r3, r0, #1
 8013ef4:	d00a      	beq.n	8013f0c <sbrk_aligned+0x34>
 8013ef6:	1cc4      	adds	r4, r0, #3
 8013ef8:	f024 0403 	bic.w	r4, r4, #3
 8013efc:	42a0      	cmp	r0, r4
 8013efe:	d007      	beq.n	8013f10 <sbrk_aligned+0x38>
 8013f00:	1a21      	subs	r1, r4, r0
 8013f02:	4628      	mov	r0, r5
 8013f04:	f000 febe 	bl	8014c84 <_sbrk_r>
 8013f08:	3001      	adds	r0, #1
 8013f0a:	d101      	bne.n	8013f10 <sbrk_aligned+0x38>
 8013f0c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8013f10:	4620      	mov	r0, r4
 8013f12:	bd70      	pop	{r4, r5, r6, pc}
 8013f14:	20000414 	.word	0x20000414

08013f18 <_malloc_r>:
 8013f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f1c:	1ccd      	adds	r5, r1, #3
 8013f1e:	f025 0503 	bic.w	r5, r5, #3
 8013f22:	3508      	adds	r5, #8
 8013f24:	2d0c      	cmp	r5, #12
 8013f26:	bf38      	it	cc
 8013f28:	250c      	movcc	r5, #12
 8013f2a:	2d00      	cmp	r5, #0
 8013f2c:	4607      	mov	r7, r0
 8013f2e:	db01      	blt.n	8013f34 <_malloc_r+0x1c>
 8013f30:	42a9      	cmp	r1, r5
 8013f32:	d905      	bls.n	8013f40 <_malloc_r+0x28>
 8013f34:	230c      	movs	r3, #12
 8013f36:	603b      	str	r3, [r7, #0]
 8013f38:	2600      	movs	r6, #0
 8013f3a:	4630      	mov	r0, r6
 8013f3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f40:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8014014 <_malloc_r+0xfc>
 8013f44:	f000 f868 	bl	8014018 <__malloc_lock>
 8013f48:	f8d8 3000 	ldr.w	r3, [r8]
 8013f4c:	461c      	mov	r4, r3
 8013f4e:	bb5c      	cbnz	r4, 8013fa8 <_malloc_r+0x90>
 8013f50:	4629      	mov	r1, r5
 8013f52:	4638      	mov	r0, r7
 8013f54:	f7ff ffc0 	bl	8013ed8 <sbrk_aligned>
 8013f58:	1c43      	adds	r3, r0, #1
 8013f5a:	4604      	mov	r4, r0
 8013f5c:	d155      	bne.n	801400a <_malloc_r+0xf2>
 8013f5e:	f8d8 4000 	ldr.w	r4, [r8]
 8013f62:	4626      	mov	r6, r4
 8013f64:	2e00      	cmp	r6, #0
 8013f66:	d145      	bne.n	8013ff4 <_malloc_r+0xdc>
 8013f68:	2c00      	cmp	r4, #0
 8013f6a:	d048      	beq.n	8013ffe <_malloc_r+0xe6>
 8013f6c:	6823      	ldr	r3, [r4, #0]
 8013f6e:	4631      	mov	r1, r6
 8013f70:	4638      	mov	r0, r7
 8013f72:	eb04 0903 	add.w	r9, r4, r3
 8013f76:	f000 fe85 	bl	8014c84 <_sbrk_r>
 8013f7a:	4581      	cmp	r9, r0
 8013f7c:	d13f      	bne.n	8013ffe <_malloc_r+0xe6>
 8013f7e:	6821      	ldr	r1, [r4, #0]
 8013f80:	1a6d      	subs	r5, r5, r1
 8013f82:	4629      	mov	r1, r5
 8013f84:	4638      	mov	r0, r7
 8013f86:	f7ff ffa7 	bl	8013ed8 <sbrk_aligned>
 8013f8a:	3001      	adds	r0, #1
 8013f8c:	d037      	beq.n	8013ffe <_malloc_r+0xe6>
 8013f8e:	6823      	ldr	r3, [r4, #0]
 8013f90:	442b      	add	r3, r5
 8013f92:	6023      	str	r3, [r4, #0]
 8013f94:	f8d8 3000 	ldr.w	r3, [r8]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d038      	beq.n	801400e <_malloc_r+0xf6>
 8013f9c:	685a      	ldr	r2, [r3, #4]
 8013f9e:	42a2      	cmp	r2, r4
 8013fa0:	d12b      	bne.n	8013ffa <_malloc_r+0xe2>
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	605a      	str	r2, [r3, #4]
 8013fa6:	e00f      	b.n	8013fc8 <_malloc_r+0xb0>
 8013fa8:	6822      	ldr	r2, [r4, #0]
 8013faa:	1b52      	subs	r2, r2, r5
 8013fac:	d41f      	bmi.n	8013fee <_malloc_r+0xd6>
 8013fae:	2a0b      	cmp	r2, #11
 8013fb0:	d917      	bls.n	8013fe2 <_malloc_r+0xca>
 8013fb2:	1961      	adds	r1, r4, r5
 8013fb4:	42a3      	cmp	r3, r4
 8013fb6:	6025      	str	r5, [r4, #0]
 8013fb8:	bf18      	it	ne
 8013fba:	6059      	strne	r1, [r3, #4]
 8013fbc:	6863      	ldr	r3, [r4, #4]
 8013fbe:	bf08      	it	eq
 8013fc0:	f8c8 1000 	streq.w	r1, [r8]
 8013fc4:	5162      	str	r2, [r4, r5]
 8013fc6:	604b      	str	r3, [r1, #4]
 8013fc8:	4638      	mov	r0, r7
 8013fca:	f104 060b 	add.w	r6, r4, #11
 8013fce:	f000 f829 	bl	8014024 <__malloc_unlock>
 8013fd2:	f026 0607 	bic.w	r6, r6, #7
 8013fd6:	1d23      	adds	r3, r4, #4
 8013fd8:	1af2      	subs	r2, r6, r3
 8013fda:	d0ae      	beq.n	8013f3a <_malloc_r+0x22>
 8013fdc:	1b9b      	subs	r3, r3, r6
 8013fde:	50a3      	str	r3, [r4, r2]
 8013fe0:	e7ab      	b.n	8013f3a <_malloc_r+0x22>
 8013fe2:	42a3      	cmp	r3, r4
 8013fe4:	6862      	ldr	r2, [r4, #4]
 8013fe6:	d1dd      	bne.n	8013fa4 <_malloc_r+0x8c>
 8013fe8:	f8c8 2000 	str.w	r2, [r8]
 8013fec:	e7ec      	b.n	8013fc8 <_malloc_r+0xb0>
 8013fee:	4623      	mov	r3, r4
 8013ff0:	6864      	ldr	r4, [r4, #4]
 8013ff2:	e7ac      	b.n	8013f4e <_malloc_r+0x36>
 8013ff4:	4634      	mov	r4, r6
 8013ff6:	6876      	ldr	r6, [r6, #4]
 8013ff8:	e7b4      	b.n	8013f64 <_malloc_r+0x4c>
 8013ffa:	4613      	mov	r3, r2
 8013ffc:	e7cc      	b.n	8013f98 <_malloc_r+0x80>
 8013ffe:	230c      	movs	r3, #12
 8014000:	603b      	str	r3, [r7, #0]
 8014002:	4638      	mov	r0, r7
 8014004:	f000 f80e 	bl	8014024 <__malloc_unlock>
 8014008:	e797      	b.n	8013f3a <_malloc_r+0x22>
 801400a:	6025      	str	r5, [r4, #0]
 801400c:	e7dc      	b.n	8013fc8 <_malloc_r+0xb0>
 801400e:	605b      	str	r3, [r3, #4]
 8014010:	deff      	udf	#255	; 0xff
 8014012:	bf00      	nop
 8014014:	20000410 	.word	0x20000410

08014018 <__malloc_lock>:
 8014018:	4801      	ldr	r0, [pc, #4]	; (8014020 <__malloc_lock+0x8>)
 801401a:	f000 be80 	b.w	8014d1e <__retarget_lock_acquire_recursive>
 801401e:	bf00      	nop
 8014020:	20000558 	.word	0x20000558

08014024 <__malloc_unlock>:
 8014024:	4801      	ldr	r0, [pc, #4]	; (801402c <__malloc_unlock+0x8>)
 8014026:	f000 be7b 	b.w	8014d20 <__retarget_lock_release_recursive>
 801402a:	bf00      	nop
 801402c:	20000558 	.word	0x20000558

08014030 <__cvt>:
 8014030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014034:	ec55 4b10 	vmov	r4, r5, d0
 8014038:	2d00      	cmp	r5, #0
 801403a:	460e      	mov	r6, r1
 801403c:	4619      	mov	r1, r3
 801403e:	462b      	mov	r3, r5
 8014040:	bfbb      	ittet	lt
 8014042:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8014046:	461d      	movlt	r5, r3
 8014048:	2300      	movge	r3, #0
 801404a:	232d      	movlt	r3, #45	; 0x2d
 801404c:	700b      	strb	r3, [r1, #0]
 801404e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014050:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014054:	4691      	mov	r9, r2
 8014056:	f023 0820 	bic.w	r8, r3, #32
 801405a:	bfbc      	itt	lt
 801405c:	4622      	movlt	r2, r4
 801405e:	4614      	movlt	r4, r2
 8014060:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014064:	d005      	beq.n	8014072 <__cvt+0x42>
 8014066:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801406a:	d100      	bne.n	801406e <__cvt+0x3e>
 801406c:	3601      	adds	r6, #1
 801406e:	2102      	movs	r1, #2
 8014070:	e000      	b.n	8014074 <__cvt+0x44>
 8014072:	2103      	movs	r1, #3
 8014074:	ab03      	add	r3, sp, #12
 8014076:	9301      	str	r3, [sp, #4]
 8014078:	ab02      	add	r3, sp, #8
 801407a:	9300      	str	r3, [sp, #0]
 801407c:	ec45 4b10 	vmov	d0, r4, r5
 8014080:	4653      	mov	r3, sl
 8014082:	4632      	mov	r2, r6
 8014084:	f000 fee4 	bl	8014e50 <_dtoa_r>
 8014088:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801408c:	4607      	mov	r7, r0
 801408e:	d102      	bne.n	8014096 <__cvt+0x66>
 8014090:	f019 0f01 	tst.w	r9, #1
 8014094:	d022      	beq.n	80140dc <__cvt+0xac>
 8014096:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801409a:	eb07 0906 	add.w	r9, r7, r6
 801409e:	d110      	bne.n	80140c2 <__cvt+0x92>
 80140a0:	783b      	ldrb	r3, [r7, #0]
 80140a2:	2b30      	cmp	r3, #48	; 0x30
 80140a4:	d10a      	bne.n	80140bc <__cvt+0x8c>
 80140a6:	2200      	movs	r2, #0
 80140a8:	2300      	movs	r3, #0
 80140aa:	4620      	mov	r0, r4
 80140ac:	4629      	mov	r1, r5
 80140ae:	f7ec fd3b 	bl	8000b28 <__aeabi_dcmpeq>
 80140b2:	b918      	cbnz	r0, 80140bc <__cvt+0x8c>
 80140b4:	f1c6 0601 	rsb	r6, r6, #1
 80140b8:	f8ca 6000 	str.w	r6, [sl]
 80140bc:	f8da 3000 	ldr.w	r3, [sl]
 80140c0:	4499      	add	r9, r3
 80140c2:	2200      	movs	r2, #0
 80140c4:	2300      	movs	r3, #0
 80140c6:	4620      	mov	r0, r4
 80140c8:	4629      	mov	r1, r5
 80140ca:	f7ec fd2d 	bl	8000b28 <__aeabi_dcmpeq>
 80140ce:	b108      	cbz	r0, 80140d4 <__cvt+0xa4>
 80140d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80140d4:	2230      	movs	r2, #48	; 0x30
 80140d6:	9b03      	ldr	r3, [sp, #12]
 80140d8:	454b      	cmp	r3, r9
 80140da:	d307      	bcc.n	80140ec <__cvt+0xbc>
 80140dc:	9b03      	ldr	r3, [sp, #12]
 80140de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80140e0:	1bdb      	subs	r3, r3, r7
 80140e2:	4638      	mov	r0, r7
 80140e4:	6013      	str	r3, [r2, #0]
 80140e6:	b004      	add	sp, #16
 80140e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140ec:	1c59      	adds	r1, r3, #1
 80140ee:	9103      	str	r1, [sp, #12]
 80140f0:	701a      	strb	r2, [r3, #0]
 80140f2:	e7f0      	b.n	80140d6 <__cvt+0xa6>

080140f4 <__exponent>:
 80140f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80140f6:	4603      	mov	r3, r0
 80140f8:	2900      	cmp	r1, #0
 80140fa:	bfb8      	it	lt
 80140fc:	4249      	neglt	r1, r1
 80140fe:	f803 2b02 	strb.w	r2, [r3], #2
 8014102:	bfb4      	ite	lt
 8014104:	222d      	movlt	r2, #45	; 0x2d
 8014106:	222b      	movge	r2, #43	; 0x2b
 8014108:	2909      	cmp	r1, #9
 801410a:	7042      	strb	r2, [r0, #1]
 801410c:	dd2a      	ble.n	8014164 <__exponent+0x70>
 801410e:	f10d 0207 	add.w	r2, sp, #7
 8014112:	4617      	mov	r7, r2
 8014114:	260a      	movs	r6, #10
 8014116:	4694      	mov	ip, r2
 8014118:	fb91 f5f6 	sdiv	r5, r1, r6
 801411c:	fb06 1415 	mls	r4, r6, r5, r1
 8014120:	3430      	adds	r4, #48	; 0x30
 8014122:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8014126:	460c      	mov	r4, r1
 8014128:	2c63      	cmp	r4, #99	; 0x63
 801412a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 801412e:	4629      	mov	r1, r5
 8014130:	dcf1      	bgt.n	8014116 <__exponent+0x22>
 8014132:	3130      	adds	r1, #48	; 0x30
 8014134:	f1ac 0402 	sub.w	r4, ip, #2
 8014138:	f802 1c01 	strb.w	r1, [r2, #-1]
 801413c:	1c41      	adds	r1, r0, #1
 801413e:	4622      	mov	r2, r4
 8014140:	42ba      	cmp	r2, r7
 8014142:	d30a      	bcc.n	801415a <__exponent+0x66>
 8014144:	f10d 0209 	add.w	r2, sp, #9
 8014148:	eba2 020c 	sub.w	r2, r2, ip
 801414c:	42bc      	cmp	r4, r7
 801414e:	bf88      	it	hi
 8014150:	2200      	movhi	r2, #0
 8014152:	4413      	add	r3, r2
 8014154:	1a18      	subs	r0, r3, r0
 8014156:	b003      	add	sp, #12
 8014158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801415a:	f812 5b01 	ldrb.w	r5, [r2], #1
 801415e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8014162:	e7ed      	b.n	8014140 <__exponent+0x4c>
 8014164:	2330      	movs	r3, #48	; 0x30
 8014166:	3130      	adds	r1, #48	; 0x30
 8014168:	7083      	strb	r3, [r0, #2]
 801416a:	70c1      	strb	r1, [r0, #3]
 801416c:	1d03      	adds	r3, r0, #4
 801416e:	e7f1      	b.n	8014154 <__exponent+0x60>

08014170 <_printf_float>:
 8014170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014174:	ed2d 8b02 	vpush	{d8}
 8014178:	b08d      	sub	sp, #52	; 0x34
 801417a:	460c      	mov	r4, r1
 801417c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014180:	4616      	mov	r6, r2
 8014182:	461f      	mov	r7, r3
 8014184:	4605      	mov	r5, r0
 8014186:	f000 fd31 	bl	8014bec <_localeconv_r>
 801418a:	f8d0 a000 	ldr.w	sl, [r0]
 801418e:	4650      	mov	r0, sl
 8014190:	f7ec f89e 	bl	80002d0 <strlen>
 8014194:	2300      	movs	r3, #0
 8014196:	930a      	str	r3, [sp, #40]	; 0x28
 8014198:	6823      	ldr	r3, [r4, #0]
 801419a:	9305      	str	r3, [sp, #20]
 801419c:	f8d8 3000 	ldr.w	r3, [r8]
 80141a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80141a4:	3307      	adds	r3, #7
 80141a6:	f023 0307 	bic.w	r3, r3, #7
 80141aa:	f103 0208 	add.w	r2, r3, #8
 80141ae:	f8c8 2000 	str.w	r2, [r8]
 80141b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80141b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80141ba:	9307      	str	r3, [sp, #28]
 80141bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80141c0:	ee08 0a10 	vmov	s16, r0
 80141c4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80141c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80141cc:	4b9e      	ldr	r3, [pc, #632]	; (8014448 <_printf_float+0x2d8>)
 80141ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80141d2:	f7ec fcdb 	bl	8000b8c <__aeabi_dcmpun>
 80141d6:	bb88      	cbnz	r0, 801423c <_printf_float+0xcc>
 80141d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80141dc:	4b9a      	ldr	r3, [pc, #616]	; (8014448 <_printf_float+0x2d8>)
 80141de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80141e2:	f7ec fcb5 	bl	8000b50 <__aeabi_dcmple>
 80141e6:	bb48      	cbnz	r0, 801423c <_printf_float+0xcc>
 80141e8:	2200      	movs	r2, #0
 80141ea:	2300      	movs	r3, #0
 80141ec:	4640      	mov	r0, r8
 80141ee:	4649      	mov	r1, r9
 80141f0:	f7ec fca4 	bl	8000b3c <__aeabi_dcmplt>
 80141f4:	b110      	cbz	r0, 80141fc <_printf_float+0x8c>
 80141f6:	232d      	movs	r3, #45	; 0x2d
 80141f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80141fc:	4a93      	ldr	r2, [pc, #588]	; (801444c <_printf_float+0x2dc>)
 80141fe:	4b94      	ldr	r3, [pc, #592]	; (8014450 <_printf_float+0x2e0>)
 8014200:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8014204:	bf94      	ite	ls
 8014206:	4690      	movls	r8, r2
 8014208:	4698      	movhi	r8, r3
 801420a:	2303      	movs	r3, #3
 801420c:	6123      	str	r3, [r4, #16]
 801420e:	9b05      	ldr	r3, [sp, #20]
 8014210:	f023 0304 	bic.w	r3, r3, #4
 8014214:	6023      	str	r3, [r4, #0]
 8014216:	f04f 0900 	mov.w	r9, #0
 801421a:	9700      	str	r7, [sp, #0]
 801421c:	4633      	mov	r3, r6
 801421e:	aa0b      	add	r2, sp, #44	; 0x2c
 8014220:	4621      	mov	r1, r4
 8014222:	4628      	mov	r0, r5
 8014224:	f000 f9da 	bl	80145dc <_printf_common>
 8014228:	3001      	adds	r0, #1
 801422a:	f040 8090 	bne.w	801434e <_printf_float+0x1de>
 801422e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014232:	b00d      	add	sp, #52	; 0x34
 8014234:	ecbd 8b02 	vpop	{d8}
 8014238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801423c:	4642      	mov	r2, r8
 801423e:	464b      	mov	r3, r9
 8014240:	4640      	mov	r0, r8
 8014242:	4649      	mov	r1, r9
 8014244:	f7ec fca2 	bl	8000b8c <__aeabi_dcmpun>
 8014248:	b140      	cbz	r0, 801425c <_printf_float+0xec>
 801424a:	464b      	mov	r3, r9
 801424c:	2b00      	cmp	r3, #0
 801424e:	bfbc      	itt	lt
 8014250:	232d      	movlt	r3, #45	; 0x2d
 8014252:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014256:	4a7f      	ldr	r2, [pc, #508]	; (8014454 <_printf_float+0x2e4>)
 8014258:	4b7f      	ldr	r3, [pc, #508]	; (8014458 <_printf_float+0x2e8>)
 801425a:	e7d1      	b.n	8014200 <_printf_float+0x90>
 801425c:	6863      	ldr	r3, [r4, #4]
 801425e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8014262:	9206      	str	r2, [sp, #24]
 8014264:	1c5a      	adds	r2, r3, #1
 8014266:	d13f      	bne.n	80142e8 <_printf_float+0x178>
 8014268:	2306      	movs	r3, #6
 801426a:	6063      	str	r3, [r4, #4]
 801426c:	9b05      	ldr	r3, [sp, #20]
 801426e:	6861      	ldr	r1, [r4, #4]
 8014270:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8014274:	2300      	movs	r3, #0
 8014276:	9303      	str	r3, [sp, #12]
 8014278:	ab0a      	add	r3, sp, #40	; 0x28
 801427a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801427e:	ab09      	add	r3, sp, #36	; 0x24
 8014280:	ec49 8b10 	vmov	d0, r8, r9
 8014284:	9300      	str	r3, [sp, #0]
 8014286:	6022      	str	r2, [r4, #0]
 8014288:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801428c:	4628      	mov	r0, r5
 801428e:	f7ff fecf 	bl	8014030 <__cvt>
 8014292:	9b06      	ldr	r3, [sp, #24]
 8014294:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014296:	2b47      	cmp	r3, #71	; 0x47
 8014298:	4680      	mov	r8, r0
 801429a:	d108      	bne.n	80142ae <_printf_float+0x13e>
 801429c:	1cc8      	adds	r0, r1, #3
 801429e:	db02      	blt.n	80142a6 <_printf_float+0x136>
 80142a0:	6863      	ldr	r3, [r4, #4]
 80142a2:	4299      	cmp	r1, r3
 80142a4:	dd41      	ble.n	801432a <_printf_float+0x1ba>
 80142a6:	f1ab 0302 	sub.w	r3, fp, #2
 80142aa:	fa5f fb83 	uxtb.w	fp, r3
 80142ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80142b2:	d820      	bhi.n	80142f6 <_printf_float+0x186>
 80142b4:	3901      	subs	r1, #1
 80142b6:	465a      	mov	r2, fp
 80142b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80142bc:	9109      	str	r1, [sp, #36]	; 0x24
 80142be:	f7ff ff19 	bl	80140f4 <__exponent>
 80142c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80142c4:	1813      	adds	r3, r2, r0
 80142c6:	2a01      	cmp	r2, #1
 80142c8:	4681      	mov	r9, r0
 80142ca:	6123      	str	r3, [r4, #16]
 80142cc:	dc02      	bgt.n	80142d4 <_printf_float+0x164>
 80142ce:	6822      	ldr	r2, [r4, #0]
 80142d0:	07d2      	lsls	r2, r2, #31
 80142d2:	d501      	bpl.n	80142d8 <_printf_float+0x168>
 80142d4:	3301      	adds	r3, #1
 80142d6:	6123      	str	r3, [r4, #16]
 80142d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d09c      	beq.n	801421a <_printf_float+0xaa>
 80142e0:	232d      	movs	r3, #45	; 0x2d
 80142e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80142e6:	e798      	b.n	801421a <_printf_float+0xaa>
 80142e8:	9a06      	ldr	r2, [sp, #24]
 80142ea:	2a47      	cmp	r2, #71	; 0x47
 80142ec:	d1be      	bne.n	801426c <_printf_float+0xfc>
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d1bc      	bne.n	801426c <_printf_float+0xfc>
 80142f2:	2301      	movs	r3, #1
 80142f4:	e7b9      	b.n	801426a <_printf_float+0xfa>
 80142f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80142fa:	d118      	bne.n	801432e <_printf_float+0x1be>
 80142fc:	2900      	cmp	r1, #0
 80142fe:	6863      	ldr	r3, [r4, #4]
 8014300:	dd0b      	ble.n	801431a <_printf_float+0x1aa>
 8014302:	6121      	str	r1, [r4, #16]
 8014304:	b913      	cbnz	r3, 801430c <_printf_float+0x19c>
 8014306:	6822      	ldr	r2, [r4, #0]
 8014308:	07d0      	lsls	r0, r2, #31
 801430a:	d502      	bpl.n	8014312 <_printf_float+0x1a2>
 801430c:	3301      	adds	r3, #1
 801430e:	440b      	add	r3, r1
 8014310:	6123      	str	r3, [r4, #16]
 8014312:	65a1      	str	r1, [r4, #88]	; 0x58
 8014314:	f04f 0900 	mov.w	r9, #0
 8014318:	e7de      	b.n	80142d8 <_printf_float+0x168>
 801431a:	b913      	cbnz	r3, 8014322 <_printf_float+0x1b2>
 801431c:	6822      	ldr	r2, [r4, #0]
 801431e:	07d2      	lsls	r2, r2, #31
 8014320:	d501      	bpl.n	8014326 <_printf_float+0x1b6>
 8014322:	3302      	adds	r3, #2
 8014324:	e7f4      	b.n	8014310 <_printf_float+0x1a0>
 8014326:	2301      	movs	r3, #1
 8014328:	e7f2      	b.n	8014310 <_printf_float+0x1a0>
 801432a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801432e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014330:	4299      	cmp	r1, r3
 8014332:	db05      	blt.n	8014340 <_printf_float+0x1d0>
 8014334:	6823      	ldr	r3, [r4, #0]
 8014336:	6121      	str	r1, [r4, #16]
 8014338:	07d8      	lsls	r0, r3, #31
 801433a:	d5ea      	bpl.n	8014312 <_printf_float+0x1a2>
 801433c:	1c4b      	adds	r3, r1, #1
 801433e:	e7e7      	b.n	8014310 <_printf_float+0x1a0>
 8014340:	2900      	cmp	r1, #0
 8014342:	bfd4      	ite	le
 8014344:	f1c1 0202 	rsble	r2, r1, #2
 8014348:	2201      	movgt	r2, #1
 801434a:	4413      	add	r3, r2
 801434c:	e7e0      	b.n	8014310 <_printf_float+0x1a0>
 801434e:	6823      	ldr	r3, [r4, #0]
 8014350:	055a      	lsls	r2, r3, #21
 8014352:	d407      	bmi.n	8014364 <_printf_float+0x1f4>
 8014354:	6923      	ldr	r3, [r4, #16]
 8014356:	4642      	mov	r2, r8
 8014358:	4631      	mov	r1, r6
 801435a:	4628      	mov	r0, r5
 801435c:	47b8      	blx	r7
 801435e:	3001      	adds	r0, #1
 8014360:	d12c      	bne.n	80143bc <_printf_float+0x24c>
 8014362:	e764      	b.n	801422e <_printf_float+0xbe>
 8014364:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014368:	f240 80e0 	bls.w	801452c <_printf_float+0x3bc>
 801436c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014370:	2200      	movs	r2, #0
 8014372:	2300      	movs	r3, #0
 8014374:	f7ec fbd8 	bl	8000b28 <__aeabi_dcmpeq>
 8014378:	2800      	cmp	r0, #0
 801437a:	d034      	beq.n	80143e6 <_printf_float+0x276>
 801437c:	4a37      	ldr	r2, [pc, #220]	; (801445c <_printf_float+0x2ec>)
 801437e:	2301      	movs	r3, #1
 8014380:	4631      	mov	r1, r6
 8014382:	4628      	mov	r0, r5
 8014384:	47b8      	blx	r7
 8014386:	3001      	adds	r0, #1
 8014388:	f43f af51 	beq.w	801422e <_printf_float+0xbe>
 801438c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014390:	429a      	cmp	r2, r3
 8014392:	db02      	blt.n	801439a <_printf_float+0x22a>
 8014394:	6823      	ldr	r3, [r4, #0]
 8014396:	07d8      	lsls	r0, r3, #31
 8014398:	d510      	bpl.n	80143bc <_printf_float+0x24c>
 801439a:	ee18 3a10 	vmov	r3, s16
 801439e:	4652      	mov	r2, sl
 80143a0:	4631      	mov	r1, r6
 80143a2:	4628      	mov	r0, r5
 80143a4:	47b8      	blx	r7
 80143a6:	3001      	adds	r0, #1
 80143a8:	f43f af41 	beq.w	801422e <_printf_float+0xbe>
 80143ac:	f04f 0800 	mov.w	r8, #0
 80143b0:	f104 091a 	add.w	r9, r4, #26
 80143b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80143b6:	3b01      	subs	r3, #1
 80143b8:	4543      	cmp	r3, r8
 80143ba:	dc09      	bgt.n	80143d0 <_printf_float+0x260>
 80143bc:	6823      	ldr	r3, [r4, #0]
 80143be:	079b      	lsls	r3, r3, #30
 80143c0:	f100 8107 	bmi.w	80145d2 <_printf_float+0x462>
 80143c4:	68e0      	ldr	r0, [r4, #12]
 80143c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80143c8:	4298      	cmp	r0, r3
 80143ca:	bfb8      	it	lt
 80143cc:	4618      	movlt	r0, r3
 80143ce:	e730      	b.n	8014232 <_printf_float+0xc2>
 80143d0:	2301      	movs	r3, #1
 80143d2:	464a      	mov	r2, r9
 80143d4:	4631      	mov	r1, r6
 80143d6:	4628      	mov	r0, r5
 80143d8:	47b8      	blx	r7
 80143da:	3001      	adds	r0, #1
 80143dc:	f43f af27 	beq.w	801422e <_printf_float+0xbe>
 80143e0:	f108 0801 	add.w	r8, r8, #1
 80143e4:	e7e6      	b.n	80143b4 <_printf_float+0x244>
 80143e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	dc39      	bgt.n	8014460 <_printf_float+0x2f0>
 80143ec:	4a1b      	ldr	r2, [pc, #108]	; (801445c <_printf_float+0x2ec>)
 80143ee:	2301      	movs	r3, #1
 80143f0:	4631      	mov	r1, r6
 80143f2:	4628      	mov	r0, r5
 80143f4:	47b8      	blx	r7
 80143f6:	3001      	adds	r0, #1
 80143f8:	f43f af19 	beq.w	801422e <_printf_float+0xbe>
 80143fc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014400:	4313      	orrs	r3, r2
 8014402:	d102      	bne.n	801440a <_printf_float+0x29a>
 8014404:	6823      	ldr	r3, [r4, #0]
 8014406:	07d9      	lsls	r1, r3, #31
 8014408:	d5d8      	bpl.n	80143bc <_printf_float+0x24c>
 801440a:	ee18 3a10 	vmov	r3, s16
 801440e:	4652      	mov	r2, sl
 8014410:	4631      	mov	r1, r6
 8014412:	4628      	mov	r0, r5
 8014414:	47b8      	blx	r7
 8014416:	3001      	adds	r0, #1
 8014418:	f43f af09 	beq.w	801422e <_printf_float+0xbe>
 801441c:	f04f 0900 	mov.w	r9, #0
 8014420:	f104 0a1a 	add.w	sl, r4, #26
 8014424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014426:	425b      	negs	r3, r3
 8014428:	454b      	cmp	r3, r9
 801442a:	dc01      	bgt.n	8014430 <_printf_float+0x2c0>
 801442c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801442e:	e792      	b.n	8014356 <_printf_float+0x1e6>
 8014430:	2301      	movs	r3, #1
 8014432:	4652      	mov	r2, sl
 8014434:	4631      	mov	r1, r6
 8014436:	4628      	mov	r0, r5
 8014438:	47b8      	blx	r7
 801443a:	3001      	adds	r0, #1
 801443c:	f43f aef7 	beq.w	801422e <_printf_float+0xbe>
 8014440:	f109 0901 	add.w	r9, r9, #1
 8014444:	e7ee      	b.n	8014424 <_printf_float+0x2b4>
 8014446:	bf00      	nop
 8014448:	7fefffff 	.word	0x7fefffff
 801444c:	080185b3 	.word	0x080185b3
 8014450:	080185b7 	.word	0x080185b7
 8014454:	080185bb 	.word	0x080185bb
 8014458:	080185bf 	.word	0x080185bf
 801445c:	080185c3 	.word	0x080185c3
 8014460:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014462:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014464:	429a      	cmp	r2, r3
 8014466:	bfa8      	it	ge
 8014468:	461a      	movge	r2, r3
 801446a:	2a00      	cmp	r2, #0
 801446c:	4691      	mov	r9, r2
 801446e:	dc37      	bgt.n	80144e0 <_printf_float+0x370>
 8014470:	f04f 0b00 	mov.w	fp, #0
 8014474:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014478:	f104 021a 	add.w	r2, r4, #26
 801447c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801447e:	9305      	str	r3, [sp, #20]
 8014480:	eba3 0309 	sub.w	r3, r3, r9
 8014484:	455b      	cmp	r3, fp
 8014486:	dc33      	bgt.n	80144f0 <_printf_float+0x380>
 8014488:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801448c:	429a      	cmp	r2, r3
 801448e:	db3b      	blt.n	8014508 <_printf_float+0x398>
 8014490:	6823      	ldr	r3, [r4, #0]
 8014492:	07da      	lsls	r2, r3, #31
 8014494:	d438      	bmi.n	8014508 <_printf_float+0x398>
 8014496:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801449a:	eba2 0903 	sub.w	r9, r2, r3
 801449e:	9b05      	ldr	r3, [sp, #20]
 80144a0:	1ad2      	subs	r2, r2, r3
 80144a2:	4591      	cmp	r9, r2
 80144a4:	bfa8      	it	ge
 80144a6:	4691      	movge	r9, r2
 80144a8:	f1b9 0f00 	cmp.w	r9, #0
 80144ac:	dc35      	bgt.n	801451a <_printf_float+0x3aa>
 80144ae:	f04f 0800 	mov.w	r8, #0
 80144b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80144b6:	f104 0a1a 	add.w	sl, r4, #26
 80144ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80144be:	1a9b      	subs	r3, r3, r2
 80144c0:	eba3 0309 	sub.w	r3, r3, r9
 80144c4:	4543      	cmp	r3, r8
 80144c6:	f77f af79 	ble.w	80143bc <_printf_float+0x24c>
 80144ca:	2301      	movs	r3, #1
 80144cc:	4652      	mov	r2, sl
 80144ce:	4631      	mov	r1, r6
 80144d0:	4628      	mov	r0, r5
 80144d2:	47b8      	blx	r7
 80144d4:	3001      	adds	r0, #1
 80144d6:	f43f aeaa 	beq.w	801422e <_printf_float+0xbe>
 80144da:	f108 0801 	add.w	r8, r8, #1
 80144de:	e7ec      	b.n	80144ba <_printf_float+0x34a>
 80144e0:	4613      	mov	r3, r2
 80144e2:	4631      	mov	r1, r6
 80144e4:	4642      	mov	r2, r8
 80144e6:	4628      	mov	r0, r5
 80144e8:	47b8      	blx	r7
 80144ea:	3001      	adds	r0, #1
 80144ec:	d1c0      	bne.n	8014470 <_printf_float+0x300>
 80144ee:	e69e      	b.n	801422e <_printf_float+0xbe>
 80144f0:	2301      	movs	r3, #1
 80144f2:	4631      	mov	r1, r6
 80144f4:	4628      	mov	r0, r5
 80144f6:	9205      	str	r2, [sp, #20]
 80144f8:	47b8      	blx	r7
 80144fa:	3001      	adds	r0, #1
 80144fc:	f43f ae97 	beq.w	801422e <_printf_float+0xbe>
 8014500:	9a05      	ldr	r2, [sp, #20]
 8014502:	f10b 0b01 	add.w	fp, fp, #1
 8014506:	e7b9      	b.n	801447c <_printf_float+0x30c>
 8014508:	ee18 3a10 	vmov	r3, s16
 801450c:	4652      	mov	r2, sl
 801450e:	4631      	mov	r1, r6
 8014510:	4628      	mov	r0, r5
 8014512:	47b8      	blx	r7
 8014514:	3001      	adds	r0, #1
 8014516:	d1be      	bne.n	8014496 <_printf_float+0x326>
 8014518:	e689      	b.n	801422e <_printf_float+0xbe>
 801451a:	9a05      	ldr	r2, [sp, #20]
 801451c:	464b      	mov	r3, r9
 801451e:	4442      	add	r2, r8
 8014520:	4631      	mov	r1, r6
 8014522:	4628      	mov	r0, r5
 8014524:	47b8      	blx	r7
 8014526:	3001      	adds	r0, #1
 8014528:	d1c1      	bne.n	80144ae <_printf_float+0x33e>
 801452a:	e680      	b.n	801422e <_printf_float+0xbe>
 801452c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801452e:	2a01      	cmp	r2, #1
 8014530:	dc01      	bgt.n	8014536 <_printf_float+0x3c6>
 8014532:	07db      	lsls	r3, r3, #31
 8014534:	d53a      	bpl.n	80145ac <_printf_float+0x43c>
 8014536:	2301      	movs	r3, #1
 8014538:	4642      	mov	r2, r8
 801453a:	4631      	mov	r1, r6
 801453c:	4628      	mov	r0, r5
 801453e:	47b8      	blx	r7
 8014540:	3001      	adds	r0, #1
 8014542:	f43f ae74 	beq.w	801422e <_printf_float+0xbe>
 8014546:	ee18 3a10 	vmov	r3, s16
 801454a:	4652      	mov	r2, sl
 801454c:	4631      	mov	r1, r6
 801454e:	4628      	mov	r0, r5
 8014550:	47b8      	blx	r7
 8014552:	3001      	adds	r0, #1
 8014554:	f43f ae6b 	beq.w	801422e <_printf_float+0xbe>
 8014558:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801455c:	2200      	movs	r2, #0
 801455e:	2300      	movs	r3, #0
 8014560:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8014564:	f7ec fae0 	bl	8000b28 <__aeabi_dcmpeq>
 8014568:	b9d8      	cbnz	r0, 80145a2 <_printf_float+0x432>
 801456a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801456e:	f108 0201 	add.w	r2, r8, #1
 8014572:	4631      	mov	r1, r6
 8014574:	4628      	mov	r0, r5
 8014576:	47b8      	blx	r7
 8014578:	3001      	adds	r0, #1
 801457a:	d10e      	bne.n	801459a <_printf_float+0x42a>
 801457c:	e657      	b.n	801422e <_printf_float+0xbe>
 801457e:	2301      	movs	r3, #1
 8014580:	4652      	mov	r2, sl
 8014582:	4631      	mov	r1, r6
 8014584:	4628      	mov	r0, r5
 8014586:	47b8      	blx	r7
 8014588:	3001      	adds	r0, #1
 801458a:	f43f ae50 	beq.w	801422e <_printf_float+0xbe>
 801458e:	f108 0801 	add.w	r8, r8, #1
 8014592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014594:	3b01      	subs	r3, #1
 8014596:	4543      	cmp	r3, r8
 8014598:	dcf1      	bgt.n	801457e <_printf_float+0x40e>
 801459a:	464b      	mov	r3, r9
 801459c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80145a0:	e6da      	b.n	8014358 <_printf_float+0x1e8>
 80145a2:	f04f 0800 	mov.w	r8, #0
 80145a6:	f104 0a1a 	add.w	sl, r4, #26
 80145aa:	e7f2      	b.n	8014592 <_printf_float+0x422>
 80145ac:	2301      	movs	r3, #1
 80145ae:	4642      	mov	r2, r8
 80145b0:	e7df      	b.n	8014572 <_printf_float+0x402>
 80145b2:	2301      	movs	r3, #1
 80145b4:	464a      	mov	r2, r9
 80145b6:	4631      	mov	r1, r6
 80145b8:	4628      	mov	r0, r5
 80145ba:	47b8      	blx	r7
 80145bc:	3001      	adds	r0, #1
 80145be:	f43f ae36 	beq.w	801422e <_printf_float+0xbe>
 80145c2:	f108 0801 	add.w	r8, r8, #1
 80145c6:	68e3      	ldr	r3, [r4, #12]
 80145c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80145ca:	1a5b      	subs	r3, r3, r1
 80145cc:	4543      	cmp	r3, r8
 80145ce:	dcf0      	bgt.n	80145b2 <_printf_float+0x442>
 80145d0:	e6f8      	b.n	80143c4 <_printf_float+0x254>
 80145d2:	f04f 0800 	mov.w	r8, #0
 80145d6:	f104 0919 	add.w	r9, r4, #25
 80145da:	e7f4      	b.n	80145c6 <_printf_float+0x456>

080145dc <_printf_common>:
 80145dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80145e0:	4616      	mov	r6, r2
 80145e2:	4699      	mov	r9, r3
 80145e4:	688a      	ldr	r2, [r1, #8]
 80145e6:	690b      	ldr	r3, [r1, #16]
 80145e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80145ec:	4293      	cmp	r3, r2
 80145ee:	bfb8      	it	lt
 80145f0:	4613      	movlt	r3, r2
 80145f2:	6033      	str	r3, [r6, #0]
 80145f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80145f8:	4607      	mov	r7, r0
 80145fa:	460c      	mov	r4, r1
 80145fc:	b10a      	cbz	r2, 8014602 <_printf_common+0x26>
 80145fe:	3301      	adds	r3, #1
 8014600:	6033      	str	r3, [r6, #0]
 8014602:	6823      	ldr	r3, [r4, #0]
 8014604:	0699      	lsls	r1, r3, #26
 8014606:	bf42      	ittt	mi
 8014608:	6833      	ldrmi	r3, [r6, #0]
 801460a:	3302      	addmi	r3, #2
 801460c:	6033      	strmi	r3, [r6, #0]
 801460e:	6825      	ldr	r5, [r4, #0]
 8014610:	f015 0506 	ands.w	r5, r5, #6
 8014614:	d106      	bne.n	8014624 <_printf_common+0x48>
 8014616:	f104 0a19 	add.w	sl, r4, #25
 801461a:	68e3      	ldr	r3, [r4, #12]
 801461c:	6832      	ldr	r2, [r6, #0]
 801461e:	1a9b      	subs	r3, r3, r2
 8014620:	42ab      	cmp	r3, r5
 8014622:	dc26      	bgt.n	8014672 <_printf_common+0x96>
 8014624:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014628:	1e13      	subs	r3, r2, #0
 801462a:	6822      	ldr	r2, [r4, #0]
 801462c:	bf18      	it	ne
 801462e:	2301      	movne	r3, #1
 8014630:	0692      	lsls	r2, r2, #26
 8014632:	d42b      	bmi.n	801468c <_printf_common+0xb0>
 8014634:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014638:	4649      	mov	r1, r9
 801463a:	4638      	mov	r0, r7
 801463c:	47c0      	blx	r8
 801463e:	3001      	adds	r0, #1
 8014640:	d01e      	beq.n	8014680 <_printf_common+0xa4>
 8014642:	6823      	ldr	r3, [r4, #0]
 8014644:	6922      	ldr	r2, [r4, #16]
 8014646:	f003 0306 	and.w	r3, r3, #6
 801464a:	2b04      	cmp	r3, #4
 801464c:	bf02      	ittt	eq
 801464e:	68e5      	ldreq	r5, [r4, #12]
 8014650:	6833      	ldreq	r3, [r6, #0]
 8014652:	1aed      	subeq	r5, r5, r3
 8014654:	68a3      	ldr	r3, [r4, #8]
 8014656:	bf0c      	ite	eq
 8014658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801465c:	2500      	movne	r5, #0
 801465e:	4293      	cmp	r3, r2
 8014660:	bfc4      	itt	gt
 8014662:	1a9b      	subgt	r3, r3, r2
 8014664:	18ed      	addgt	r5, r5, r3
 8014666:	2600      	movs	r6, #0
 8014668:	341a      	adds	r4, #26
 801466a:	42b5      	cmp	r5, r6
 801466c:	d11a      	bne.n	80146a4 <_printf_common+0xc8>
 801466e:	2000      	movs	r0, #0
 8014670:	e008      	b.n	8014684 <_printf_common+0xa8>
 8014672:	2301      	movs	r3, #1
 8014674:	4652      	mov	r2, sl
 8014676:	4649      	mov	r1, r9
 8014678:	4638      	mov	r0, r7
 801467a:	47c0      	blx	r8
 801467c:	3001      	adds	r0, #1
 801467e:	d103      	bne.n	8014688 <_printf_common+0xac>
 8014680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014688:	3501      	adds	r5, #1
 801468a:	e7c6      	b.n	801461a <_printf_common+0x3e>
 801468c:	18e1      	adds	r1, r4, r3
 801468e:	1c5a      	adds	r2, r3, #1
 8014690:	2030      	movs	r0, #48	; 0x30
 8014692:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014696:	4422      	add	r2, r4
 8014698:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801469c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80146a0:	3302      	adds	r3, #2
 80146a2:	e7c7      	b.n	8014634 <_printf_common+0x58>
 80146a4:	2301      	movs	r3, #1
 80146a6:	4622      	mov	r2, r4
 80146a8:	4649      	mov	r1, r9
 80146aa:	4638      	mov	r0, r7
 80146ac:	47c0      	blx	r8
 80146ae:	3001      	adds	r0, #1
 80146b0:	d0e6      	beq.n	8014680 <_printf_common+0xa4>
 80146b2:	3601      	adds	r6, #1
 80146b4:	e7d9      	b.n	801466a <_printf_common+0x8e>
	...

080146b8 <_printf_i>:
 80146b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80146bc:	7e0f      	ldrb	r7, [r1, #24]
 80146be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80146c0:	2f78      	cmp	r7, #120	; 0x78
 80146c2:	4691      	mov	r9, r2
 80146c4:	4680      	mov	r8, r0
 80146c6:	460c      	mov	r4, r1
 80146c8:	469a      	mov	sl, r3
 80146ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80146ce:	d807      	bhi.n	80146e0 <_printf_i+0x28>
 80146d0:	2f62      	cmp	r7, #98	; 0x62
 80146d2:	d80a      	bhi.n	80146ea <_printf_i+0x32>
 80146d4:	2f00      	cmp	r7, #0
 80146d6:	f000 80d4 	beq.w	8014882 <_printf_i+0x1ca>
 80146da:	2f58      	cmp	r7, #88	; 0x58
 80146dc:	f000 80c0 	beq.w	8014860 <_printf_i+0x1a8>
 80146e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80146e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80146e8:	e03a      	b.n	8014760 <_printf_i+0xa8>
 80146ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80146ee:	2b15      	cmp	r3, #21
 80146f0:	d8f6      	bhi.n	80146e0 <_printf_i+0x28>
 80146f2:	a101      	add	r1, pc, #4	; (adr r1, 80146f8 <_printf_i+0x40>)
 80146f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80146f8:	08014751 	.word	0x08014751
 80146fc:	08014765 	.word	0x08014765
 8014700:	080146e1 	.word	0x080146e1
 8014704:	080146e1 	.word	0x080146e1
 8014708:	080146e1 	.word	0x080146e1
 801470c:	080146e1 	.word	0x080146e1
 8014710:	08014765 	.word	0x08014765
 8014714:	080146e1 	.word	0x080146e1
 8014718:	080146e1 	.word	0x080146e1
 801471c:	080146e1 	.word	0x080146e1
 8014720:	080146e1 	.word	0x080146e1
 8014724:	08014869 	.word	0x08014869
 8014728:	08014791 	.word	0x08014791
 801472c:	08014823 	.word	0x08014823
 8014730:	080146e1 	.word	0x080146e1
 8014734:	080146e1 	.word	0x080146e1
 8014738:	0801488b 	.word	0x0801488b
 801473c:	080146e1 	.word	0x080146e1
 8014740:	08014791 	.word	0x08014791
 8014744:	080146e1 	.word	0x080146e1
 8014748:	080146e1 	.word	0x080146e1
 801474c:	0801482b 	.word	0x0801482b
 8014750:	682b      	ldr	r3, [r5, #0]
 8014752:	1d1a      	adds	r2, r3, #4
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	602a      	str	r2, [r5, #0]
 8014758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801475c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014760:	2301      	movs	r3, #1
 8014762:	e09f      	b.n	80148a4 <_printf_i+0x1ec>
 8014764:	6820      	ldr	r0, [r4, #0]
 8014766:	682b      	ldr	r3, [r5, #0]
 8014768:	0607      	lsls	r7, r0, #24
 801476a:	f103 0104 	add.w	r1, r3, #4
 801476e:	6029      	str	r1, [r5, #0]
 8014770:	d501      	bpl.n	8014776 <_printf_i+0xbe>
 8014772:	681e      	ldr	r6, [r3, #0]
 8014774:	e003      	b.n	801477e <_printf_i+0xc6>
 8014776:	0646      	lsls	r6, r0, #25
 8014778:	d5fb      	bpl.n	8014772 <_printf_i+0xba>
 801477a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801477e:	2e00      	cmp	r6, #0
 8014780:	da03      	bge.n	801478a <_printf_i+0xd2>
 8014782:	232d      	movs	r3, #45	; 0x2d
 8014784:	4276      	negs	r6, r6
 8014786:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801478a:	485a      	ldr	r0, [pc, #360]	; (80148f4 <_printf_i+0x23c>)
 801478c:	230a      	movs	r3, #10
 801478e:	e012      	b.n	80147b6 <_printf_i+0xfe>
 8014790:	682b      	ldr	r3, [r5, #0]
 8014792:	6820      	ldr	r0, [r4, #0]
 8014794:	1d19      	adds	r1, r3, #4
 8014796:	6029      	str	r1, [r5, #0]
 8014798:	0605      	lsls	r5, r0, #24
 801479a:	d501      	bpl.n	80147a0 <_printf_i+0xe8>
 801479c:	681e      	ldr	r6, [r3, #0]
 801479e:	e002      	b.n	80147a6 <_printf_i+0xee>
 80147a0:	0641      	lsls	r1, r0, #25
 80147a2:	d5fb      	bpl.n	801479c <_printf_i+0xe4>
 80147a4:	881e      	ldrh	r6, [r3, #0]
 80147a6:	4853      	ldr	r0, [pc, #332]	; (80148f4 <_printf_i+0x23c>)
 80147a8:	2f6f      	cmp	r7, #111	; 0x6f
 80147aa:	bf0c      	ite	eq
 80147ac:	2308      	moveq	r3, #8
 80147ae:	230a      	movne	r3, #10
 80147b0:	2100      	movs	r1, #0
 80147b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80147b6:	6865      	ldr	r5, [r4, #4]
 80147b8:	60a5      	str	r5, [r4, #8]
 80147ba:	2d00      	cmp	r5, #0
 80147bc:	bfa2      	ittt	ge
 80147be:	6821      	ldrge	r1, [r4, #0]
 80147c0:	f021 0104 	bicge.w	r1, r1, #4
 80147c4:	6021      	strge	r1, [r4, #0]
 80147c6:	b90e      	cbnz	r6, 80147cc <_printf_i+0x114>
 80147c8:	2d00      	cmp	r5, #0
 80147ca:	d04b      	beq.n	8014864 <_printf_i+0x1ac>
 80147cc:	4615      	mov	r5, r2
 80147ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80147d2:	fb03 6711 	mls	r7, r3, r1, r6
 80147d6:	5dc7      	ldrb	r7, [r0, r7]
 80147d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80147dc:	4637      	mov	r7, r6
 80147de:	42bb      	cmp	r3, r7
 80147e0:	460e      	mov	r6, r1
 80147e2:	d9f4      	bls.n	80147ce <_printf_i+0x116>
 80147e4:	2b08      	cmp	r3, #8
 80147e6:	d10b      	bne.n	8014800 <_printf_i+0x148>
 80147e8:	6823      	ldr	r3, [r4, #0]
 80147ea:	07de      	lsls	r6, r3, #31
 80147ec:	d508      	bpl.n	8014800 <_printf_i+0x148>
 80147ee:	6923      	ldr	r3, [r4, #16]
 80147f0:	6861      	ldr	r1, [r4, #4]
 80147f2:	4299      	cmp	r1, r3
 80147f4:	bfde      	ittt	le
 80147f6:	2330      	movle	r3, #48	; 0x30
 80147f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80147fc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8014800:	1b52      	subs	r2, r2, r5
 8014802:	6122      	str	r2, [r4, #16]
 8014804:	f8cd a000 	str.w	sl, [sp]
 8014808:	464b      	mov	r3, r9
 801480a:	aa03      	add	r2, sp, #12
 801480c:	4621      	mov	r1, r4
 801480e:	4640      	mov	r0, r8
 8014810:	f7ff fee4 	bl	80145dc <_printf_common>
 8014814:	3001      	adds	r0, #1
 8014816:	d14a      	bne.n	80148ae <_printf_i+0x1f6>
 8014818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801481c:	b004      	add	sp, #16
 801481e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014822:	6823      	ldr	r3, [r4, #0]
 8014824:	f043 0320 	orr.w	r3, r3, #32
 8014828:	6023      	str	r3, [r4, #0]
 801482a:	4833      	ldr	r0, [pc, #204]	; (80148f8 <_printf_i+0x240>)
 801482c:	2778      	movs	r7, #120	; 0x78
 801482e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014832:	6823      	ldr	r3, [r4, #0]
 8014834:	6829      	ldr	r1, [r5, #0]
 8014836:	061f      	lsls	r7, r3, #24
 8014838:	f851 6b04 	ldr.w	r6, [r1], #4
 801483c:	d402      	bmi.n	8014844 <_printf_i+0x18c>
 801483e:	065f      	lsls	r7, r3, #25
 8014840:	bf48      	it	mi
 8014842:	b2b6      	uxthmi	r6, r6
 8014844:	07df      	lsls	r7, r3, #31
 8014846:	bf48      	it	mi
 8014848:	f043 0320 	orrmi.w	r3, r3, #32
 801484c:	6029      	str	r1, [r5, #0]
 801484e:	bf48      	it	mi
 8014850:	6023      	strmi	r3, [r4, #0]
 8014852:	b91e      	cbnz	r6, 801485c <_printf_i+0x1a4>
 8014854:	6823      	ldr	r3, [r4, #0]
 8014856:	f023 0320 	bic.w	r3, r3, #32
 801485a:	6023      	str	r3, [r4, #0]
 801485c:	2310      	movs	r3, #16
 801485e:	e7a7      	b.n	80147b0 <_printf_i+0xf8>
 8014860:	4824      	ldr	r0, [pc, #144]	; (80148f4 <_printf_i+0x23c>)
 8014862:	e7e4      	b.n	801482e <_printf_i+0x176>
 8014864:	4615      	mov	r5, r2
 8014866:	e7bd      	b.n	80147e4 <_printf_i+0x12c>
 8014868:	682b      	ldr	r3, [r5, #0]
 801486a:	6826      	ldr	r6, [r4, #0]
 801486c:	6961      	ldr	r1, [r4, #20]
 801486e:	1d18      	adds	r0, r3, #4
 8014870:	6028      	str	r0, [r5, #0]
 8014872:	0635      	lsls	r5, r6, #24
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	d501      	bpl.n	801487c <_printf_i+0x1c4>
 8014878:	6019      	str	r1, [r3, #0]
 801487a:	e002      	b.n	8014882 <_printf_i+0x1ca>
 801487c:	0670      	lsls	r0, r6, #25
 801487e:	d5fb      	bpl.n	8014878 <_printf_i+0x1c0>
 8014880:	8019      	strh	r1, [r3, #0]
 8014882:	2300      	movs	r3, #0
 8014884:	6123      	str	r3, [r4, #16]
 8014886:	4615      	mov	r5, r2
 8014888:	e7bc      	b.n	8014804 <_printf_i+0x14c>
 801488a:	682b      	ldr	r3, [r5, #0]
 801488c:	1d1a      	adds	r2, r3, #4
 801488e:	602a      	str	r2, [r5, #0]
 8014890:	681d      	ldr	r5, [r3, #0]
 8014892:	6862      	ldr	r2, [r4, #4]
 8014894:	2100      	movs	r1, #0
 8014896:	4628      	mov	r0, r5
 8014898:	f7eb fcca 	bl	8000230 <memchr>
 801489c:	b108      	cbz	r0, 80148a2 <_printf_i+0x1ea>
 801489e:	1b40      	subs	r0, r0, r5
 80148a0:	6060      	str	r0, [r4, #4]
 80148a2:	6863      	ldr	r3, [r4, #4]
 80148a4:	6123      	str	r3, [r4, #16]
 80148a6:	2300      	movs	r3, #0
 80148a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80148ac:	e7aa      	b.n	8014804 <_printf_i+0x14c>
 80148ae:	6923      	ldr	r3, [r4, #16]
 80148b0:	462a      	mov	r2, r5
 80148b2:	4649      	mov	r1, r9
 80148b4:	4640      	mov	r0, r8
 80148b6:	47d0      	blx	sl
 80148b8:	3001      	adds	r0, #1
 80148ba:	d0ad      	beq.n	8014818 <_printf_i+0x160>
 80148bc:	6823      	ldr	r3, [r4, #0]
 80148be:	079b      	lsls	r3, r3, #30
 80148c0:	d413      	bmi.n	80148ea <_printf_i+0x232>
 80148c2:	68e0      	ldr	r0, [r4, #12]
 80148c4:	9b03      	ldr	r3, [sp, #12]
 80148c6:	4298      	cmp	r0, r3
 80148c8:	bfb8      	it	lt
 80148ca:	4618      	movlt	r0, r3
 80148cc:	e7a6      	b.n	801481c <_printf_i+0x164>
 80148ce:	2301      	movs	r3, #1
 80148d0:	4632      	mov	r2, r6
 80148d2:	4649      	mov	r1, r9
 80148d4:	4640      	mov	r0, r8
 80148d6:	47d0      	blx	sl
 80148d8:	3001      	adds	r0, #1
 80148da:	d09d      	beq.n	8014818 <_printf_i+0x160>
 80148dc:	3501      	adds	r5, #1
 80148de:	68e3      	ldr	r3, [r4, #12]
 80148e0:	9903      	ldr	r1, [sp, #12]
 80148e2:	1a5b      	subs	r3, r3, r1
 80148e4:	42ab      	cmp	r3, r5
 80148e6:	dcf2      	bgt.n	80148ce <_printf_i+0x216>
 80148e8:	e7eb      	b.n	80148c2 <_printf_i+0x20a>
 80148ea:	2500      	movs	r5, #0
 80148ec:	f104 0619 	add.w	r6, r4, #25
 80148f0:	e7f5      	b.n	80148de <_printf_i+0x226>
 80148f2:	bf00      	nop
 80148f4:	080185c5 	.word	0x080185c5
 80148f8:	080185d6 	.word	0x080185d6

080148fc <std>:
 80148fc:	2300      	movs	r3, #0
 80148fe:	b510      	push	{r4, lr}
 8014900:	4604      	mov	r4, r0
 8014902:	e9c0 3300 	strd	r3, r3, [r0]
 8014906:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801490a:	6083      	str	r3, [r0, #8]
 801490c:	8181      	strh	r1, [r0, #12]
 801490e:	6643      	str	r3, [r0, #100]	; 0x64
 8014910:	81c2      	strh	r2, [r0, #14]
 8014912:	6183      	str	r3, [r0, #24]
 8014914:	4619      	mov	r1, r3
 8014916:	2208      	movs	r2, #8
 8014918:	305c      	adds	r0, #92	; 0x5c
 801491a:	f000 f92e 	bl	8014b7a <memset>
 801491e:	4b0d      	ldr	r3, [pc, #52]	; (8014954 <std+0x58>)
 8014920:	6263      	str	r3, [r4, #36]	; 0x24
 8014922:	4b0d      	ldr	r3, [pc, #52]	; (8014958 <std+0x5c>)
 8014924:	62a3      	str	r3, [r4, #40]	; 0x28
 8014926:	4b0d      	ldr	r3, [pc, #52]	; (801495c <std+0x60>)
 8014928:	62e3      	str	r3, [r4, #44]	; 0x2c
 801492a:	4b0d      	ldr	r3, [pc, #52]	; (8014960 <std+0x64>)
 801492c:	6323      	str	r3, [r4, #48]	; 0x30
 801492e:	4b0d      	ldr	r3, [pc, #52]	; (8014964 <std+0x68>)
 8014930:	6224      	str	r4, [r4, #32]
 8014932:	429c      	cmp	r4, r3
 8014934:	d006      	beq.n	8014944 <std+0x48>
 8014936:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801493a:	4294      	cmp	r4, r2
 801493c:	d002      	beq.n	8014944 <std+0x48>
 801493e:	33d0      	adds	r3, #208	; 0xd0
 8014940:	429c      	cmp	r4, r3
 8014942:	d105      	bne.n	8014950 <std+0x54>
 8014944:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801494c:	f000 b9e6 	b.w	8014d1c <__retarget_lock_init_recursive>
 8014950:	bd10      	pop	{r4, pc}
 8014952:	bf00      	nop
 8014954:	08014ac1 	.word	0x08014ac1
 8014958:	08014ae3 	.word	0x08014ae3
 801495c:	08014b1b 	.word	0x08014b1b
 8014960:	08014b3f 	.word	0x08014b3f
 8014964:	20000418 	.word	0x20000418

08014968 <stdio_exit_handler>:
 8014968:	4a02      	ldr	r2, [pc, #8]	; (8014974 <stdio_exit_handler+0xc>)
 801496a:	4903      	ldr	r1, [pc, #12]	; (8014978 <stdio_exit_handler+0x10>)
 801496c:	4803      	ldr	r0, [pc, #12]	; (801497c <stdio_exit_handler+0x14>)
 801496e:	f000 b869 	b.w	8014a44 <_fwalk_sglue>
 8014972:	bf00      	nop
 8014974:	20000014 	.word	0x20000014
 8014978:	08016581 	.word	0x08016581
 801497c:	20000020 	.word	0x20000020

08014980 <cleanup_stdio>:
 8014980:	6841      	ldr	r1, [r0, #4]
 8014982:	4b0c      	ldr	r3, [pc, #48]	; (80149b4 <cleanup_stdio+0x34>)
 8014984:	4299      	cmp	r1, r3
 8014986:	b510      	push	{r4, lr}
 8014988:	4604      	mov	r4, r0
 801498a:	d001      	beq.n	8014990 <cleanup_stdio+0x10>
 801498c:	f001 fdf8 	bl	8016580 <_fflush_r>
 8014990:	68a1      	ldr	r1, [r4, #8]
 8014992:	4b09      	ldr	r3, [pc, #36]	; (80149b8 <cleanup_stdio+0x38>)
 8014994:	4299      	cmp	r1, r3
 8014996:	d002      	beq.n	801499e <cleanup_stdio+0x1e>
 8014998:	4620      	mov	r0, r4
 801499a:	f001 fdf1 	bl	8016580 <_fflush_r>
 801499e:	68e1      	ldr	r1, [r4, #12]
 80149a0:	4b06      	ldr	r3, [pc, #24]	; (80149bc <cleanup_stdio+0x3c>)
 80149a2:	4299      	cmp	r1, r3
 80149a4:	d004      	beq.n	80149b0 <cleanup_stdio+0x30>
 80149a6:	4620      	mov	r0, r4
 80149a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80149ac:	f001 bde8 	b.w	8016580 <_fflush_r>
 80149b0:	bd10      	pop	{r4, pc}
 80149b2:	bf00      	nop
 80149b4:	20000418 	.word	0x20000418
 80149b8:	20000480 	.word	0x20000480
 80149bc:	200004e8 	.word	0x200004e8

080149c0 <global_stdio_init.part.0>:
 80149c0:	b510      	push	{r4, lr}
 80149c2:	4b0b      	ldr	r3, [pc, #44]	; (80149f0 <global_stdio_init.part.0+0x30>)
 80149c4:	4c0b      	ldr	r4, [pc, #44]	; (80149f4 <global_stdio_init.part.0+0x34>)
 80149c6:	4a0c      	ldr	r2, [pc, #48]	; (80149f8 <global_stdio_init.part.0+0x38>)
 80149c8:	601a      	str	r2, [r3, #0]
 80149ca:	4620      	mov	r0, r4
 80149cc:	2200      	movs	r2, #0
 80149ce:	2104      	movs	r1, #4
 80149d0:	f7ff ff94 	bl	80148fc <std>
 80149d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80149d8:	2201      	movs	r2, #1
 80149da:	2109      	movs	r1, #9
 80149dc:	f7ff ff8e 	bl	80148fc <std>
 80149e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80149e4:	2202      	movs	r2, #2
 80149e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80149ea:	2112      	movs	r1, #18
 80149ec:	f7ff bf86 	b.w	80148fc <std>
 80149f0:	20000550 	.word	0x20000550
 80149f4:	20000418 	.word	0x20000418
 80149f8:	08014969 	.word	0x08014969

080149fc <__sfp_lock_acquire>:
 80149fc:	4801      	ldr	r0, [pc, #4]	; (8014a04 <__sfp_lock_acquire+0x8>)
 80149fe:	f000 b98e 	b.w	8014d1e <__retarget_lock_acquire_recursive>
 8014a02:	bf00      	nop
 8014a04:	20000559 	.word	0x20000559

08014a08 <__sfp_lock_release>:
 8014a08:	4801      	ldr	r0, [pc, #4]	; (8014a10 <__sfp_lock_release+0x8>)
 8014a0a:	f000 b989 	b.w	8014d20 <__retarget_lock_release_recursive>
 8014a0e:	bf00      	nop
 8014a10:	20000559 	.word	0x20000559

08014a14 <__sinit>:
 8014a14:	b510      	push	{r4, lr}
 8014a16:	4604      	mov	r4, r0
 8014a18:	f7ff fff0 	bl	80149fc <__sfp_lock_acquire>
 8014a1c:	6a23      	ldr	r3, [r4, #32]
 8014a1e:	b11b      	cbz	r3, 8014a28 <__sinit+0x14>
 8014a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a24:	f7ff bff0 	b.w	8014a08 <__sfp_lock_release>
 8014a28:	4b04      	ldr	r3, [pc, #16]	; (8014a3c <__sinit+0x28>)
 8014a2a:	6223      	str	r3, [r4, #32]
 8014a2c:	4b04      	ldr	r3, [pc, #16]	; (8014a40 <__sinit+0x2c>)
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d1f5      	bne.n	8014a20 <__sinit+0xc>
 8014a34:	f7ff ffc4 	bl	80149c0 <global_stdio_init.part.0>
 8014a38:	e7f2      	b.n	8014a20 <__sinit+0xc>
 8014a3a:	bf00      	nop
 8014a3c:	08014981 	.word	0x08014981
 8014a40:	20000550 	.word	0x20000550

08014a44 <_fwalk_sglue>:
 8014a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a48:	4607      	mov	r7, r0
 8014a4a:	4688      	mov	r8, r1
 8014a4c:	4614      	mov	r4, r2
 8014a4e:	2600      	movs	r6, #0
 8014a50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014a54:	f1b9 0901 	subs.w	r9, r9, #1
 8014a58:	d505      	bpl.n	8014a66 <_fwalk_sglue+0x22>
 8014a5a:	6824      	ldr	r4, [r4, #0]
 8014a5c:	2c00      	cmp	r4, #0
 8014a5e:	d1f7      	bne.n	8014a50 <_fwalk_sglue+0xc>
 8014a60:	4630      	mov	r0, r6
 8014a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a66:	89ab      	ldrh	r3, [r5, #12]
 8014a68:	2b01      	cmp	r3, #1
 8014a6a:	d907      	bls.n	8014a7c <_fwalk_sglue+0x38>
 8014a6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014a70:	3301      	adds	r3, #1
 8014a72:	d003      	beq.n	8014a7c <_fwalk_sglue+0x38>
 8014a74:	4629      	mov	r1, r5
 8014a76:	4638      	mov	r0, r7
 8014a78:	47c0      	blx	r8
 8014a7a:	4306      	orrs	r6, r0
 8014a7c:	3568      	adds	r5, #104	; 0x68
 8014a7e:	e7e9      	b.n	8014a54 <_fwalk_sglue+0x10>

08014a80 <siprintf>:
 8014a80:	b40e      	push	{r1, r2, r3}
 8014a82:	b500      	push	{lr}
 8014a84:	b09c      	sub	sp, #112	; 0x70
 8014a86:	ab1d      	add	r3, sp, #116	; 0x74
 8014a88:	9002      	str	r0, [sp, #8]
 8014a8a:	9006      	str	r0, [sp, #24]
 8014a8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014a90:	4809      	ldr	r0, [pc, #36]	; (8014ab8 <siprintf+0x38>)
 8014a92:	9107      	str	r1, [sp, #28]
 8014a94:	9104      	str	r1, [sp, #16]
 8014a96:	4909      	ldr	r1, [pc, #36]	; (8014abc <siprintf+0x3c>)
 8014a98:	f853 2b04 	ldr.w	r2, [r3], #4
 8014a9c:	9105      	str	r1, [sp, #20]
 8014a9e:	6800      	ldr	r0, [r0, #0]
 8014aa0:	9301      	str	r3, [sp, #4]
 8014aa2:	a902      	add	r1, sp, #8
 8014aa4:	f001 fbe8 	bl	8016278 <_svfiprintf_r>
 8014aa8:	9b02      	ldr	r3, [sp, #8]
 8014aaa:	2200      	movs	r2, #0
 8014aac:	701a      	strb	r2, [r3, #0]
 8014aae:	b01c      	add	sp, #112	; 0x70
 8014ab0:	f85d eb04 	ldr.w	lr, [sp], #4
 8014ab4:	b003      	add	sp, #12
 8014ab6:	4770      	bx	lr
 8014ab8:	2000006c 	.word	0x2000006c
 8014abc:	ffff0208 	.word	0xffff0208

08014ac0 <__sread>:
 8014ac0:	b510      	push	{r4, lr}
 8014ac2:	460c      	mov	r4, r1
 8014ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ac8:	f000 f8b6 	bl	8014c38 <_read_r>
 8014acc:	2800      	cmp	r0, #0
 8014ace:	bfab      	itete	ge
 8014ad0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014ad2:	89a3      	ldrhlt	r3, [r4, #12]
 8014ad4:	181b      	addge	r3, r3, r0
 8014ad6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014ada:	bfac      	ite	ge
 8014adc:	6563      	strge	r3, [r4, #84]	; 0x54
 8014ade:	81a3      	strhlt	r3, [r4, #12]
 8014ae0:	bd10      	pop	{r4, pc}

08014ae2 <__swrite>:
 8014ae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ae6:	461f      	mov	r7, r3
 8014ae8:	898b      	ldrh	r3, [r1, #12]
 8014aea:	05db      	lsls	r3, r3, #23
 8014aec:	4605      	mov	r5, r0
 8014aee:	460c      	mov	r4, r1
 8014af0:	4616      	mov	r6, r2
 8014af2:	d505      	bpl.n	8014b00 <__swrite+0x1e>
 8014af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014af8:	2302      	movs	r3, #2
 8014afa:	2200      	movs	r2, #0
 8014afc:	f000 f88a 	bl	8014c14 <_lseek_r>
 8014b00:	89a3      	ldrh	r3, [r4, #12]
 8014b02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014b06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014b0a:	81a3      	strh	r3, [r4, #12]
 8014b0c:	4632      	mov	r2, r6
 8014b0e:	463b      	mov	r3, r7
 8014b10:	4628      	mov	r0, r5
 8014b12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014b16:	f000 b8c5 	b.w	8014ca4 <_write_r>

08014b1a <__sseek>:
 8014b1a:	b510      	push	{r4, lr}
 8014b1c:	460c      	mov	r4, r1
 8014b1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b22:	f000 f877 	bl	8014c14 <_lseek_r>
 8014b26:	1c43      	adds	r3, r0, #1
 8014b28:	89a3      	ldrh	r3, [r4, #12]
 8014b2a:	bf15      	itete	ne
 8014b2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8014b2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014b32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014b36:	81a3      	strheq	r3, [r4, #12]
 8014b38:	bf18      	it	ne
 8014b3a:	81a3      	strhne	r3, [r4, #12]
 8014b3c:	bd10      	pop	{r4, pc}

08014b3e <__sclose>:
 8014b3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b42:	f000 b857 	b.w	8014bf4 <_close_r>

08014b46 <memmove>:
 8014b46:	4288      	cmp	r0, r1
 8014b48:	b510      	push	{r4, lr}
 8014b4a:	eb01 0402 	add.w	r4, r1, r2
 8014b4e:	d902      	bls.n	8014b56 <memmove+0x10>
 8014b50:	4284      	cmp	r4, r0
 8014b52:	4623      	mov	r3, r4
 8014b54:	d807      	bhi.n	8014b66 <memmove+0x20>
 8014b56:	1e43      	subs	r3, r0, #1
 8014b58:	42a1      	cmp	r1, r4
 8014b5a:	d008      	beq.n	8014b6e <memmove+0x28>
 8014b5c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014b60:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014b64:	e7f8      	b.n	8014b58 <memmove+0x12>
 8014b66:	4402      	add	r2, r0
 8014b68:	4601      	mov	r1, r0
 8014b6a:	428a      	cmp	r2, r1
 8014b6c:	d100      	bne.n	8014b70 <memmove+0x2a>
 8014b6e:	bd10      	pop	{r4, pc}
 8014b70:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014b74:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014b78:	e7f7      	b.n	8014b6a <memmove+0x24>

08014b7a <memset>:
 8014b7a:	4402      	add	r2, r0
 8014b7c:	4603      	mov	r3, r0
 8014b7e:	4293      	cmp	r3, r2
 8014b80:	d100      	bne.n	8014b84 <memset+0xa>
 8014b82:	4770      	bx	lr
 8014b84:	f803 1b01 	strb.w	r1, [r3], #1
 8014b88:	e7f9      	b.n	8014b7e <memset+0x4>

08014b8a <_raise_r>:
 8014b8a:	291f      	cmp	r1, #31
 8014b8c:	b538      	push	{r3, r4, r5, lr}
 8014b8e:	4604      	mov	r4, r0
 8014b90:	460d      	mov	r5, r1
 8014b92:	d904      	bls.n	8014b9e <_raise_r+0x14>
 8014b94:	2316      	movs	r3, #22
 8014b96:	6003      	str	r3, [r0, #0]
 8014b98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014b9c:	bd38      	pop	{r3, r4, r5, pc}
 8014b9e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8014ba0:	b112      	cbz	r2, 8014ba8 <_raise_r+0x1e>
 8014ba2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014ba6:	b94b      	cbnz	r3, 8014bbc <_raise_r+0x32>
 8014ba8:	4620      	mov	r0, r4
 8014baa:	f000 f869 	bl	8014c80 <_getpid_r>
 8014bae:	462a      	mov	r2, r5
 8014bb0:	4601      	mov	r1, r0
 8014bb2:	4620      	mov	r0, r4
 8014bb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014bb8:	f000 b850 	b.w	8014c5c <_kill_r>
 8014bbc:	2b01      	cmp	r3, #1
 8014bbe:	d00a      	beq.n	8014bd6 <_raise_r+0x4c>
 8014bc0:	1c59      	adds	r1, r3, #1
 8014bc2:	d103      	bne.n	8014bcc <_raise_r+0x42>
 8014bc4:	2316      	movs	r3, #22
 8014bc6:	6003      	str	r3, [r0, #0]
 8014bc8:	2001      	movs	r0, #1
 8014bca:	e7e7      	b.n	8014b9c <_raise_r+0x12>
 8014bcc:	2400      	movs	r4, #0
 8014bce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014bd2:	4628      	mov	r0, r5
 8014bd4:	4798      	blx	r3
 8014bd6:	2000      	movs	r0, #0
 8014bd8:	e7e0      	b.n	8014b9c <_raise_r+0x12>
	...

08014bdc <raise>:
 8014bdc:	4b02      	ldr	r3, [pc, #8]	; (8014be8 <raise+0xc>)
 8014bde:	4601      	mov	r1, r0
 8014be0:	6818      	ldr	r0, [r3, #0]
 8014be2:	f7ff bfd2 	b.w	8014b8a <_raise_r>
 8014be6:	bf00      	nop
 8014be8:	2000006c 	.word	0x2000006c

08014bec <_localeconv_r>:
 8014bec:	4800      	ldr	r0, [pc, #0]	; (8014bf0 <_localeconv_r+0x4>)
 8014bee:	4770      	bx	lr
 8014bf0:	20000160 	.word	0x20000160

08014bf4 <_close_r>:
 8014bf4:	b538      	push	{r3, r4, r5, lr}
 8014bf6:	4d06      	ldr	r5, [pc, #24]	; (8014c10 <_close_r+0x1c>)
 8014bf8:	2300      	movs	r3, #0
 8014bfa:	4604      	mov	r4, r0
 8014bfc:	4608      	mov	r0, r1
 8014bfe:	602b      	str	r3, [r5, #0]
 8014c00:	f7fa fccd 	bl	800f59e <_close>
 8014c04:	1c43      	adds	r3, r0, #1
 8014c06:	d102      	bne.n	8014c0e <_close_r+0x1a>
 8014c08:	682b      	ldr	r3, [r5, #0]
 8014c0a:	b103      	cbz	r3, 8014c0e <_close_r+0x1a>
 8014c0c:	6023      	str	r3, [r4, #0]
 8014c0e:	bd38      	pop	{r3, r4, r5, pc}
 8014c10:	20000554 	.word	0x20000554

08014c14 <_lseek_r>:
 8014c14:	b538      	push	{r3, r4, r5, lr}
 8014c16:	4d07      	ldr	r5, [pc, #28]	; (8014c34 <_lseek_r+0x20>)
 8014c18:	4604      	mov	r4, r0
 8014c1a:	4608      	mov	r0, r1
 8014c1c:	4611      	mov	r1, r2
 8014c1e:	2200      	movs	r2, #0
 8014c20:	602a      	str	r2, [r5, #0]
 8014c22:	461a      	mov	r2, r3
 8014c24:	f7fa fce2 	bl	800f5ec <_lseek>
 8014c28:	1c43      	adds	r3, r0, #1
 8014c2a:	d102      	bne.n	8014c32 <_lseek_r+0x1e>
 8014c2c:	682b      	ldr	r3, [r5, #0]
 8014c2e:	b103      	cbz	r3, 8014c32 <_lseek_r+0x1e>
 8014c30:	6023      	str	r3, [r4, #0]
 8014c32:	bd38      	pop	{r3, r4, r5, pc}
 8014c34:	20000554 	.word	0x20000554

08014c38 <_read_r>:
 8014c38:	b538      	push	{r3, r4, r5, lr}
 8014c3a:	4d07      	ldr	r5, [pc, #28]	; (8014c58 <_read_r+0x20>)
 8014c3c:	4604      	mov	r4, r0
 8014c3e:	4608      	mov	r0, r1
 8014c40:	4611      	mov	r1, r2
 8014c42:	2200      	movs	r2, #0
 8014c44:	602a      	str	r2, [r5, #0]
 8014c46:	461a      	mov	r2, r3
 8014c48:	f7fa fc70 	bl	800f52c <_read>
 8014c4c:	1c43      	adds	r3, r0, #1
 8014c4e:	d102      	bne.n	8014c56 <_read_r+0x1e>
 8014c50:	682b      	ldr	r3, [r5, #0]
 8014c52:	b103      	cbz	r3, 8014c56 <_read_r+0x1e>
 8014c54:	6023      	str	r3, [r4, #0]
 8014c56:	bd38      	pop	{r3, r4, r5, pc}
 8014c58:	20000554 	.word	0x20000554

08014c5c <_kill_r>:
 8014c5c:	b538      	push	{r3, r4, r5, lr}
 8014c5e:	4d07      	ldr	r5, [pc, #28]	; (8014c7c <_kill_r+0x20>)
 8014c60:	2300      	movs	r3, #0
 8014c62:	4604      	mov	r4, r0
 8014c64:	4608      	mov	r0, r1
 8014c66:	4611      	mov	r1, r2
 8014c68:	602b      	str	r3, [r5, #0]
 8014c6a:	f7fa fc45 	bl	800f4f8 <_kill>
 8014c6e:	1c43      	adds	r3, r0, #1
 8014c70:	d102      	bne.n	8014c78 <_kill_r+0x1c>
 8014c72:	682b      	ldr	r3, [r5, #0]
 8014c74:	b103      	cbz	r3, 8014c78 <_kill_r+0x1c>
 8014c76:	6023      	str	r3, [r4, #0]
 8014c78:	bd38      	pop	{r3, r4, r5, pc}
 8014c7a:	bf00      	nop
 8014c7c:	20000554 	.word	0x20000554

08014c80 <_getpid_r>:
 8014c80:	f7fa bc32 	b.w	800f4e8 <_getpid>

08014c84 <_sbrk_r>:
 8014c84:	b538      	push	{r3, r4, r5, lr}
 8014c86:	4d06      	ldr	r5, [pc, #24]	; (8014ca0 <_sbrk_r+0x1c>)
 8014c88:	2300      	movs	r3, #0
 8014c8a:	4604      	mov	r4, r0
 8014c8c:	4608      	mov	r0, r1
 8014c8e:	602b      	str	r3, [r5, #0]
 8014c90:	f7fa fcba 	bl	800f608 <_sbrk>
 8014c94:	1c43      	adds	r3, r0, #1
 8014c96:	d102      	bne.n	8014c9e <_sbrk_r+0x1a>
 8014c98:	682b      	ldr	r3, [r5, #0]
 8014c9a:	b103      	cbz	r3, 8014c9e <_sbrk_r+0x1a>
 8014c9c:	6023      	str	r3, [r4, #0]
 8014c9e:	bd38      	pop	{r3, r4, r5, pc}
 8014ca0:	20000554 	.word	0x20000554

08014ca4 <_write_r>:
 8014ca4:	b538      	push	{r3, r4, r5, lr}
 8014ca6:	4d07      	ldr	r5, [pc, #28]	; (8014cc4 <_write_r+0x20>)
 8014ca8:	4604      	mov	r4, r0
 8014caa:	4608      	mov	r0, r1
 8014cac:	4611      	mov	r1, r2
 8014cae:	2200      	movs	r2, #0
 8014cb0:	602a      	str	r2, [r5, #0]
 8014cb2:	461a      	mov	r2, r3
 8014cb4:	f7fa fc57 	bl	800f566 <_write>
 8014cb8:	1c43      	adds	r3, r0, #1
 8014cba:	d102      	bne.n	8014cc2 <_write_r+0x1e>
 8014cbc:	682b      	ldr	r3, [r5, #0]
 8014cbe:	b103      	cbz	r3, 8014cc2 <_write_r+0x1e>
 8014cc0:	6023      	str	r3, [r4, #0]
 8014cc2:	bd38      	pop	{r3, r4, r5, pc}
 8014cc4:	20000554 	.word	0x20000554

08014cc8 <__errno>:
 8014cc8:	4b01      	ldr	r3, [pc, #4]	; (8014cd0 <__errno+0x8>)
 8014cca:	6818      	ldr	r0, [r3, #0]
 8014ccc:	4770      	bx	lr
 8014cce:	bf00      	nop
 8014cd0:	2000006c 	.word	0x2000006c

08014cd4 <__libc_init_array>:
 8014cd4:	b570      	push	{r4, r5, r6, lr}
 8014cd6:	4d0d      	ldr	r5, [pc, #52]	; (8014d0c <__libc_init_array+0x38>)
 8014cd8:	4c0d      	ldr	r4, [pc, #52]	; (8014d10 <__libc_init_array+0x3c>)
 8014cda:	1b64      	subs	r4, r4, r5
 8014cdc:	10a4      	asrs	r4, r4, #2
 8014cde:	2600      	movs	r6, #0
 8014ce0:	42a6      	cmp	r6, r4
 8014ce2:	d109      	bne.n	8014cf8 <__libc_init_array+0x24>
 8014ce4:	4d0b      	ldr	r5, [pc, #44]	; (8014d14 <__libc_init_array+0x40>)
 8014ce6:	4c0c      	ldr	r4, [pc, #48]	; (8014d18 <__libc_init_array+0x44>)
 8014ce8:	f001 ff72 	bl	8016bd0 <_init>
 8014cec:	1b64      	subs	r4, r4, r5
 8014cee:	10a4      	asrs	r4, r4, #2
 8014cf0:	2600      	movs	r6, #0
 8014cf2:	42a6      	cmp	r6, r4
 8014cf4:	d105      	bne.n	8014d02 <__libc_init_array+0x2e>
 8014cf6:	bd70      	pop	{r4, r5, r6, pc}
 8014cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8014cfc:	4798      	blx	r3
 8014cfe:	3601      	adds	r6, #1
 8014d00:	e7ee      	b.n	8014ce0 <__libc_init_array+0xc>
 8014d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8014d06:	4798      	blx	r3
 8014d08:	3601      	adds	r6, #1
 8014d0a:	e7f2      	b.n	8014cf2 <__libc_init_array+0x1e>
 8014d0c:	0801ad44 	.word	0x0801ad44
 8014d10:	0801ad44 	.word	0x0801ad44
 8014d14:	0801ad44 	.word	0x0801ad44
 8014d18:	0801ad50 	.word	0x0801ad50

08014d1c <__retarget_lock_init_recursive>:
 8014d1c:	4770      	bx	lr

08014d1e <__retarget_lock_acquire_recursive>:
 8014d1e:	4770      	bx	lr

08014d20 <__retarget_lock_release_recursive>:
 8014d20:	4770      	bx	lr

08014d22 <memcpy>:
 8014d22:	440a      	add	r2, r1
 8014d24:	4291      	cmp	r1, r2
 8014d26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8014d2a:	d100      	bne.n	8014d2e <memcpy+0xc>
 8014d2c:	4770      	bx	lr
 8014d2e:	b510      	push	{r4, lr}
 8014d30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014d34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014d38:	4291      	cmp	r1, r2
 8014d3a:	d1f9      	bne.n	8014d30 <memcpy+0xe>
 8014d3c:	bd10      	pop	{r4, pc}

08014d3e <quorem>:
 8014d3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d42:	6903      	ldr	r3, [r0, #16]
 8014d44:	690c      	ldr	r4, [r1, #16]
 8014d46:	42a3      	cmp	r3, r4
 8014d48:	4607      	mov	r7, r0
 8014d4a:	db7e      	blt.n	8014e4a <quorem+0x10c>
 8014d4c:	3c01      	subs	r4, #1
 8014d4e:	f101 0814 	add.w	r8, r1, #20
 8014d52:	f100 0514 	add.w	r5, r0, #20
 8014d56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014d5a:	9301      	str	r3, [sp, #4]
 8014d5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014d60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014d64:	3301      	adds	r3, #1
 8014d66:	429a      	cmp	r2, r3
 8014d68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014d6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014d70:	fbb2 f6f3 	udiv	r6, r2, r3
 8014d74:	d331      	bcc.n	8014dda <quorem+0x9c>
 8014d76:	f04f 0e00 	mov.w	lr, #0
 8014d7a:	4640      	mov	r0, r8
 8014d7c:	46ac      	mov	ip, r5
 8014d7e:	46f2      	mov	sl, lr
 8014d80:	f850 2b04 	ldr.w	r2, [r0], #4
 8014d84:	b293      	uxth	r3, r2
 8014d86:	fb06 e303 	mla	r3, r6, r3, lr
 8014d8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014d8e:	0c1a      	lsrs	r2, r3, #16
 8014d90:	b29b      	uxth	r3, r3
 8014d92:	ebaa 0303 	sub.w	r3, sl, r3
 8014d96:	f8dc a000 	ldr.w	sl, [ip]
 8014d9a:	fa13 f38a 	uxtah	r3, r3, sl
 8014d9e:	fb06 220e 	mla	r2, r6, lr, r2
 8014da2:	9300      	str	r3, [sp, #0]
 8014da4:	9b00      	ldr	r3, [sp, #0]
 8014da6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014daa:	b292      	uxth	r2, r2
 8014dac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014db0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014db4:	f8bd 3000 	ldrh.w	r3, [sp]
 8014db8:	4581      	cmp	r9, r0
 8014dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014dbe:	f84c 3b04 	str.w	r3, [ip], #4
 8014dc2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014dc6:	d2db      	bcs.n	8014d80 <quorem+0x42>
 8014dc8:	f855 300b 	ldr.w	r3, [r5, fp]
 8014dcc:	b92b      	cbnz	r3, 8014dda <quorem+0x9c>
 8014dce:	9b01      	ldr	r3, [sp, #4]
 8014dd0:	3b04      	subs	r3, #4
 8014dd2:	429d      	cmp	r5, r3
 8014dd4:	461a      	mov	r2, r3
 8014dd6:	d32c      	bcc.n	8014e32 <quorem+0xf4>
 8014dd8:	613c      	str	r4, [r7, #16]
 8014dda:	4638      	mov	r0, r7
 8014ddc:	f001 f8f2 	bl	8015fc4 <__mcmp>
 8014de0:	2800      	cmp	r0, #0
 8014de2:	db22      	blt.n	8014e2a <quorem+0xec>
 8014de4:	3601      	adds	r6, #1
 8014de6:	4629      	mov	r1, r5
 8014de8:	2000      	movs	r0, #0
 8014dea:	f858 2b04 	ldr.w	r2, [r8], #4
 8014dee:	f8d1 c000 	ldr.w	ip, [r1]
 8014df2:	b293      	uxth	r3, r2
 8014df4:	1ac3      	subs	r3, r0, r3
 8014df6:	0c12      	lsrs	r2, r2, #16
 8014df8:	fa13 f38c 	uxtah	r3, r3, ip
 8014dfc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8014e00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014e04:	b29b      	uxth	r3, r3
 8014e06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014e0a:	45c1      	cmp	r9, r8
 8014e0c:	f841 3b04 	str.w	r3, [r1], #4
 8014e10:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014e14:	d2e9      	bcs.n	8014dea <quorem+0xac>
 8014e16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014e1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014e1e:	b922      	cbnz	r2, 8014e2a <quorem+0xec>
 8014e20:	3b04      	subs	r3, #4
 8014e22:	429d      	cmp	r5, r3
 8014e24:	461a      	mov	r2, r3
 8014e26:	d30a      	bcc.n	8014e3e <quorem+0x100>
 8014e28:	613c      	str	r4, [r7, #16]
 8014e2a:	4630      	mov	r0, r6
 8014e2c:	b003      	add	sp, #12
 8014e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e32:	6812      	ldr	r2, [r2, #0]
 8014e34:	3b04      	subs	r3, #4
 8014e36:	2a00      	cmp	r2, #0
 8014e38:	d1ce      	bne.n	8014dd8 <quorem+0x9a>
 8014e3a:	3c01      	subs	r4, #1
 8014e3c:	e7c9      	b.n	8014dd2 <quorem+0x94>
 8014e3e:	6812      	ldr	r2, [r2, #0]
 8014e40:	3b04      	subs	r3, #4
 8014e42:	2a00      	cmp	r2, #0
 8014e44:	d1f0      	bne.n	8014e28 <quorem+0xea>
 8014e46:	3c01      	subs	r4, #1
 8014e48:	e7eb      	b.n	8014e22 <quorem+0xe4>
 8014e4a:	2000      	movs	r0, #0
 8014e4c:	e7ee      	b.n	8014e2c <quorem+0xee>
	...

08014e50 <_dtoa_r>:
 8014e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e54:	ed2d 8b04 	vpush	{d8-d9}
 8014e58:	69c5      	ldr	r5, [r0, #28]
 8014e5a:	b093      	sub	sp, #76	; 0x4c
 8014e5c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014e60:	ec57 6b10 	vmov	r6, r7, d0
 8014e64:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014e68:	9107      	str	r1, [sp, #28]
 8014e6a:	4604      	mov	r4, r0
 8014e6c:	920a      	str	r2, [sp, #40]	; 0x28
 8014e6e:	930d      	str	r3, [sp, #52]	; 0x34
 8014e70:	b975      	cbnz	r5, 8014e90 <_dtoa_r+0x40>
 8014e72:	2010      	movs	r0, #16
 8014e74:	f7ff f820 	bl	8013eb8 <malloc>
 8014e78:	4602      	mov	r2, r0
 8014e7a:	61e0      	str	r0, [r4, #28]
 8014e7c:	b920      	cbnz	r0, 8014e88 <_dtoa_r+0x38>
 8014e7e:	4bae      	ldr	r3, [pc, #696]	; (8015138 <_dtoa_r+0x2e8>)
 8014e80:	21ef      	movs	r1, #239	; 0xef
 8014e82:	48ae      	ldr	r0, [pc, #696]	; (801513c <_dtoa_r+0x2ec>)
 8014e84:	f001 fba4 	bl	80165d0 <__assert_func>
 8014e88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014e8c:	6005      	str	r5, [r0, #0]
 8014e8e:	60c5      	str	r5, [r0, #12]
 8014e90:	69e3      	ldr	r3, [r4, #28]
 8014e92:	6819      	ldr	r1, [r3, #0]
 8014e94:	b151      	cbz	r1, 8014eac <_dtoa_r+0x5c>
 8014e96:	685a      	ldr	r2, [r3, #4]
 8014e98:	604a      	str	r2, [r1, #4]
 8014e9a:	2301      	movs	r3, #1
 8014e9c:	4093      	lsls	r3, r2
 8014e9e:	608b      	str	r3, [r1, #8]
 8014ea0:	4620      	mov	r0, r4
 8014ea2:	f000 fe53 	bl	8015b4c <_Bfree>
 8014ea6:	69e3      	ldr	r3, [r4, #28]
 8014ea8:	2200      	movs	r2, #0
 8014eaa:	601a      	str	r2, [r3, #0]
 8014eac:	1e3b      	subs	r3, r7, #0
 8014eae:	bfbb      	ittet	lt
 8014eb0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014eb4:	9303      	strlt	r3, [sp, #12]
 8014eb6:	2300      	movge	r3, #0
 8014eb8:	2201      	movlt	r2, #1
 8014eba:	bfac      	ite	ge
 8014ebc:	f8c8 3000 	strge.w	r3, [r8]
 8014ec0:	f8c8 2000 	strlt.w	r2, [r8]
 8014ec4:	4b9e      	ldr	r3, [pc, #632]	; (8015140 <_dtoa_r+0x2f0>)
 8014ec6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8014eca:	ea33 0308 	bics.w	r3, r3, r8
 8014ece:	d11b      	bne.n	8014f08 <_dtoa_r+0xb8>
 8014ed0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014ed2:	f242 730f 	movw	r3, #9999	; 0x270f
 8014ed6:	6013      	str	r3, [r2, #0]
 8014ed8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8014edc:	4333      	orrs	r3, r6
 8014ede:	f000 8593 	beq.w	8015a08 <_dtoa_r+0xbb8>
 8014ee2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014ee4:	b963      	cbnz	r3, 8014f00 <_dtoa_r+0xb0>
 8014ee6:	4b97      	ldr	r3, [pc, #604]	; (8015144 <_dtoa_r+0x2f4>)
 8014ee8:	e027      	b.n	8014f3a <_dtoa_r+0xea>
 8014eea:	4b97      	ldr	r3, [pc, #604]	; (8015148 <_dtoa_r+0x2f8>)
 8014eec:	9300      	str	r3, [sp, #0]
 8014eee:	3308      	adds	r3, #8
 8014ef0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014ef2:	6013      	str	r3, [r2, #0]
 8014ef4:	9800      	ldr	r0, [sp, #0]
 8014ef6:	b013      	add	sp, #76	; 0x4c
 8014ef8:	ecbd 8b04 	vpop	{d8-d9}
 8014efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f00:	4b90      	ldr	r3, [pc, #576]	; (8015144 <_dtoa_r+0x2f4>)
 8014f02:	9300      	str	r3, [sp, #0]
 8014f04:	3303      	adds	r3, #3
 8014f06:	e7f3      	b.n	8014ef0 <_dtoa_r+0xa0>
 8014f08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014f0c:	2200      	movs	r2, #0
 8014f0e:	ec51 0b17 	vmov	r0, r1, d7
 8014f12:	eeb0 8a47 	vmov.f32	s16, s14
 8014f16:	eef0 8a67 	vmov.f32	s17, s15
 8014f1a:	2300      	movs	r3, #0
 8014f1c:	f7eb fe04 	bl	8000b28 <__aeabi_dcmpeq>
 8014f20:	4681      	mov	r9, r0
 8014f22:	b160      	cbz	r0, 8014f3e <_dtoa_r+0xee>
 8014f24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014f26:	2301      	movs	r3, #1
 8014f28:	6013      	str	r3, [r2, #0]
 8014f2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	f000 8568 	beq.w	8015a02 <_dtoa_r+0xbb2>
 8014f32:	4b86      	ldr	r3, [pc, #536]	; (801514c <_dtoa_r+0x2fc>)
 8014f34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014f36:	6013      	str	r3, [r2, #0]
 8014f38:	3b01      	subs	r3, #1
 8014f3a:	9300      	str	r3, [sp, #0]
 8014f3c:	e7da      	b.n	8014ef4 <_dtoa_r+0xa4>
 8014f3e:	aa10      	add	r2, sp, #64	; 0x40
 8014f40:	a911      	add	r1, sp, #68	; 0x44
 8014f42:	4620      	mov	r0, r4
 8014f44:	eeb0 0a48 	vmov.f32	s0, s16
 8014f48:	eef0 0a68 	vmov.f32	s1, s17
 8014f4c:	f001 f8e0 	bl	8016110 <__d2b>
 8014f50:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014f54:	4682      	mov	sl, r0
 8014f56:	2d00      	cmp	r5, #0
 8014f58:	d07f      	beq.n	801505a <_dtoa_r+0x20a>
 8014f5a:	ee18 3a90 	vmov	r3, s17
 8014f5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014f62:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8014f66:	ec51 0b18 	vmov	r0, r1, d8
 8014f6a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014f6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014f72:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8014f76:	4619      	mov	r1, r3
 8014f78:	2200      	movs	r2, #0
 8014f7a:	4b75      	ldr	r3, [pc, #468]	; (8015150 <_dtoa_r+0x300>)
 8014f7c:	f7eb f9b4 	bl	80002e8 <__aeabi_dsub>
 8014f80:	a367      	add	r3, pc, #412	; (adr r3, 8015120 <_dtoa_r+0x2d0>)
 8014f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f86:	f7eb fb67 	bl	8000658 <__aeabi_dmul>
 8014f8a:	a367      	add	r3, pc, #412	; (adr r3, 8015128 <_dtoa_r+0x2d8>)
 8014f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f90:	f7eb f9ac 	bl	80002ec <__adddf3>
 8014f94:	4606      	mov	r6, r0
 8014f96:	4628      	mov	r0, r5
 8014f98:	460f      	mov	r7, r1
 8014f9a:	f7eb faf3 	bl	8000584 <__aeabi_i2d>
 8014f9e:	a364      	add	r3, pc, #400	; (adr r3, 8015130 <_dtoa_r+0x2e0>)
 8014fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fa4:	f7eb fb58 	bl	8000658 <__aeabi_dmul>
 8014fa8:	4602      	mov	r2, r0
 8014faa:	460b      	mov	r3, r1
 8014fac:	4630      	mov	r0, r6
 8014fae:	4639      	mov	r1, r7
 8014fb0:	f7eb f99c 	bl	80002ec <__adddf3>
 8014fb4:	4606      	mov	r6, r0
 8014fb6:	460f      	mov	r7, r1
 8014fb8:	f7eb fdfe 	bl	8000bb8 <__aeabi_d2iz>
 8014fbc:	2200      	movs	r2, #0
 8014fbe:	4683      	mov	fp, r0
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	4630      	mov	r0, r6
 8014fc4:	4639      	mov	r1, r7
 8014fc6:	f7eb fdb9 	bl	8000b3c <__aeabi_dcmplt>
 8014fca:	b148      	cbz	r0, 8014fe0 <_dtoa_r+0x190>
 8014fcc:	4658      	mov	r0, fp
 8014fce:	f7eb fad9 	bl	8000584 <__aeabi_i2d>
 8014fd2:	4632      	mov	r2, r6
 8014fd4:	463b      	mov	r3, r7
 8014fd6:	f7eb fda7 	bl	8000b28 <__aeabi_dcmpeq>
 8014fda:	b908      	cbnz	r0, 8014fe0 <_dtoa_r+0x190>
 8014fdc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8014fe0:	f1bb 0f16 	cmp.w	fp, #22
 8014fe4:	d857      	bhi.n	8015096 <_dtoa_r+0x246>
 8014fe6:	4b5b      	ldr	r3, [pc, #364]	; (8015154 <_dtoa_r+0x304>)
 8014fe8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ff0:	ec51 0b18 	vmov	r0, r1, d8
 8014ff4:	f7eb fda2 	bl	8000b3c <__aeabi_dcmplt>
 8014ff8:	2800      	cmp	r0, #0
 8014ffa:	d04e      	beq.n	801509a <_dtoa_r+0x24a>
 8014ffc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8015000:	2300      	movs	r3, #0
 8015002:	930c      	str	r3, [sp, #48]	; 0x30
 8015004:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015006:	1b5b      	subs	r3, r3, r5
 8015008:	1e5a      	subs	r2, r3, #1
 801500a:	bf45      	ittet	mi
 801500c:	f1c3 0301 	rsbmi	r3, r3, #1
 8015010:	9305      	strmi	r3, [sp, #20]
 8015012:	2300      	movpl	r3, #0
 8015014:	2300      	movmi	r3, #0
 8015016:	9206      	str	r2, [sp, #24]
 8015018:	bf54      	ite	pl
 801501a:	9305      	strpl	r3, [sp, #20]
 801501c:	9306      	strmi	r3, [sp, #24]
 801501e:	f1bb 0f00 	cmp.w	fp, #0
 8015022:	db3c      	blt.n	801509e <_dtoa_r+0x24e>
 8015024:	9b06      	ldr	r3, [sp, #24]
 8015026:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801502a:	445b      	add	r3, fp
 801502c:	9306      	str	r3, [sp, #24]
 801502e:	2300      	movs	r3, #0
 8015030:	9308      	str	r3, [sp, #32]
 8015032:	9b07      	ldr	r3, [sp, #28]
 8015034:	2b09      	cmp	r3, #9
 8015036:	d868      	bhi.n	801510a <_dtoa_r+0x2ba>
 8015038:	2b05      	cmp	r3, #5
 801503a:	bfc4      	itt	gt
 801503c:	3b04      	subgt	r3, #4
 801503e:	9307      	strgt	r3, [sp, #28]
 8015040:	9b07      	ldr	r3, [sp, #28]
 8015042:	f1a3 0302 	sub.w	r3, r3, #2
 8015046:	bfcc      	ite	gt
 8015048:	2500      	movgt	r5, #0
 801504a:	2501      	movle	r5, #1
 801504c:	2b03      	cmp	r3, #3
 801504e:	f200 8085 	bhi.w	801515c <_dtoa_r+0x30c>
 8015052:	e8df f003 	tbb	[pc, r3]
 8015056:	3b2e      	.short	0x3b2e
 8015058:	5839      	.short	0x5839
 801505a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801505e:	441d      	add	r5, r3
 8015060:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8015064:	2b20      	cmp	r3, #32
 8015066:	bfc1      	itttt	gt
 8015068:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801506c:	fa08 f803 	lslgt.w	r8, r8, r3
 8015070:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8015074:	fa26 f303 	lsrgt.w	r3, r6, r3
 8015078:	bfd6      	itet	le
 801507a:	f1c3 0320 	rsble	r3, r3, #32
 801507e:	ea48 0003 	orrgt.w	r0, r8, r3
 8015082:	fa06 f003 	lslle.w	r0, r6, r3
 8015086:	f7eb fa6d 	bl	8000564 <__aeabi_ui2d>
 801508a:	2201      	movs	r2, #1
 801508c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8015090:	3d01      	subs	r5, #1
 8015092:	920e      	str	r2, [sp, #56]	; 0x38
 8015094:	e76f      	b.n	8014f76 <_dtoa_r+0x126>
 8015096:	2301      	movs	r3, #1
 8015098:	e7b3      	b.n	8015002 <_dtoa_r+0x1b2>
 801509a:	900c      	str	r0, [sp, #48]	; 0x30
 801509c:	e7b2      	b.n	8015004 <_dtoa_r+0x1b4>
 801509e:	9b05      	ldr	r3, [sp, #20]
 80150a0:	eba3 030b 	sub.w	r3, r3, fp
 80150a4:	9305      	str	r3, [sp, #20]
 80150a6:	f1cb 0300 	rsb	r3, fp, #0
 80150aa:	9308      	str	r3, [sp, #32]
 80150ac:	2300      	movs	r3, #0
 80150ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80150b0:	e7bf      	b.n	8015032 <_dtoa_r+0x1e2>
 80150b2:	2300      	movs	r3, #0
 80150b4:	9309      	str	r3, [sp, #36]	; 0x24
 80150b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	dc52      	bgt.n	8015162 <_dtoa_r+0x312>
 80150bc:	2301      	movs	r3, #1
 80150be:	9301      	str	r3, [sp, #4]
 80150c0:	9304      	str	r3, [sp, #16]
 80150c2:	461a      	mov	r2, r3
 80150c4:	920a      	str	r2, [sp, #40]	; 0x28
 80150c6:	e00b      	b.n	80150e0 <_dtoa_r+0x290>
 80150c8:	2301      	movs	r3, #1
 80150ca:	e7f3      	b.n	80150b4 <_dtoa_r+0x264>
 80150cc:	2300      	movs	r3, #0
 80150ce:	9309      	str	r3, [sp, #36]	; 0x24
 80150d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150d2:	445b      	add	r3, fp
 80150d4:	9301      	str	r3, [sp, #4]
 80150d6:	3301      	adds	r3, #1
 80150d8:	2b01      	cmp	r3, #1
 80150da:	9304      	str	r3, [sp, #16]
 80150dc:	bfb8      	it	lt
 80150de:	2301      	movlt	r3, #1
 80150e0:	69e0      	ldr	r0, [r4, #28]
 80150e2:	2100      	movs	r1, #0
 80150e4:	2204      	movs	r2, #4
 80150e6:	f102 0614 	add.w	r6, r2, #20
 80150ea:	429e      	cmp	r6, r3
 80150ec:	d93d      	bls.n	801516a <_dtoa_r+0x31a>
 80150ee:	6041      	str	r1, [r0, #4]
 80150f0:	4620      	mov	r0, r4
 80150f2:	f000 fceb 	bl	8015acc <_Balloc>
 80150f6:	9000      	str	r0, [sp, #0]
 80150f8:	2800      	cmp	r0, #0
 80150fa:	d139      	bne.n	8015170 <_dtoa_r+0x320>
 80150fc:	4b16      	ldr	r3, [pc, #88]	; (8015158 <_dtoa_r+0x308>)
 80150fe:	4602      	mov	r2, r0
 8015100:	f240 11af 	movw	r1, #431	; 0x1af
 8015104:	e6bd      	b.n	8014e82 <_dtoa_r+0x32>
 8015106:	2301      	movs	r3, #1
 8015108:	e7e1      	b.n	80150ce <_dtoa_r+0x27e>
 801510a:	2501      	movs	r5, #1
 801510c:	2300      	movs	r3, #0
 801510e:	9307      	str	r3, [sp, #28]
 8015110:	9509      	str	r5, [sp, #36]	; 0x24
 8015112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015116:	9301      	str	r3, [sp, #4]
 8015118:	9304      	str	r3, [sp, #16]
 801511a:	2200      	movs	r2, #0
 801511c:	2312      	movs	r3, #18
 801511e:	e7d1      	b.n	80150c4 <_dtoa_r+0x274>
 8015120:	636f4361 	.word	0x636f4361
 8015124:	3fd287a7 	.word	0x3fd287a7
 8015128:	8b60c8b3 	.word	0x8b60c8b3
 801512c:	3fc68a28 	.word	0x3fc68a28
 8015130:	509f79fb 	.word	0x509f79fb
 8015134:	3fd34413 	.word	0x3fd34413
 8015138:	080185f4 	.word	0x080185f4
 801513c:	0801860b 	.word	0x0801860b
 8015140:	7ff00000 	.word	0x7ff00000
 8015144:	080185f0 	.word	0x080185f0
 8015148:	080185e7 	.word	0x080185e7
 801514c:	080185c4 	.word	0x080185c4
 8015150:	3ff80000 	.word	0x3ff80000
 8015154:	080186f8 	.word	0x080186f8
 8015158:	08018663 	.word	0x08018663
 801515c:	2301      	movs	r3, #1
 801515e:	9309      	str	r3, [sp, #36]	; 0x24
 8015160:	e7d7      	b.n	8015112 <_dtoa_r+0x2c2>
 8015162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015164:	9301      	str	r3, [sp, #4]
 8015166:	9304      	str	r3, [sp, #16]
 8015168:	e7ba      	b.n	80150e0 <_dtoa_r+0x290>
 801516a:	3101      	adds	r1, #1
 801516c:	0052      	lsls	r2, r2, #1
 801516e:	e7ba      	b.n	80150e6 <_dtoa_r+0x296>
 8015170:	69e3      	ldr	r3, [r4, #28]
 8015172:	9a00      	ldr	r2, [sp, #0]
 8015174:	601a      	str	r2, [r3, #0]
 8015176:	9b04      	ldr	r3, [sp, #16]
 8015178:	2b0e      	cmp	r3, #14
 801517a:	f200 80a8 	bhi.w	80152ce <_dtoa_r+0x47e>
 801517e:	2d00      	cmp	r5, #0
 8015180:	f000 80a5 	beq.w	80152ce <_dtoa_r+0x47e>
 8015184:	f1bb 0f00 	cmp.w	fp, #0
 8015188:	dd38      	ble.n	80151fc <_dtoa_r+0x3ac>
 801518a:	4bc0      	ldr	r3, [pc, #768]	; (801548c <_dtoa_r+0x63c>)
 801518c:	f00b 020f 	and.w	r2, fp, #15
 8015190:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015194:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8015198:	e9d3 6700 	ldrd	r6, r7, [r3]
 801519c:	ea4f 182b 	mov.w	r8, fp, asr #4
 80151a0:	d019      	beq.n	80151d6 <_dtoa_r+0x386>
 80151a2:	4bbb      	ldr	r3, [pc, #748]	; (8015490 <_dtoa_r+0x640>)
 80151a4:	ec51 0b18 	vmov	r0, r1, d8
 80151a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80151ac:	f7eb fb7e 	bl	80008ac <__aeabi_ddiv>
 80151b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80151b4:	f008 080f 	and.w	r8, r8, #15
 80151b8:	2503      	movs	r5, #3
 80151ba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8015490 <_dtoa_r+0x640>
 80151be:	f1b8 0f00 	cmp.w	r8, #0
 80151c2:	d10a      	bne.n	80151da <_dtoa_r+0x38a>
 80151c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80151c8:	4632      	mov	r2, r6
 80151ca:	463b      	mov	r3, r7
 80151cc:	f7eb fb6e 	bl	80008ac <__aeabi_ddiv>
 80151d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80151d4:	e02b      	b.n	801522e <_dtoa_r+0x3de>
 80151d6:	2502      	movs	r5, #2
 80151d8:	e7ef      	b.n	80151ba <_dtoa_r+0x36a>
 80151da:	f018 0f01 	tst.w	r8, #1
 80151de:	d008      	beq.n	80151f2 <_dtoa_r+0x3a2>
 80151e0:	4630      	mov	r0, r6
 80151e2:	4639      	mov	r1, r7
 80151e4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80151e8:	f7eb fa36 	bl	8000658 <__aeabi_dmul>
 80151ec:	3501      	adds	r5, #1
 80151ee:	4606      	mov	r6, r0
 80151f0:	460f      	mov	r7, r1
 80151f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80151f6:	f109 0908 	add.w	r9, r9, #8
 80151fa:	e7e0      	b.n	80151be <_dtoa_r+0x36e>
 80151fc:	f000 809f 	beq.w	801533e <_dtoa_r+0x4ee>
 8015200:	f1cb 0600 	rsb	r6, fp, #0
 8015204:	4ba1      	ldr	r3, [pc, #644]	; (801548c <_dtoa_r+0x63c>)
 8015206:	4fa2      	ldr	r7, [pc, #648]	; (8015490 <_dtoa_r+0x640>)
 8015208:	f006 020f 	and.w	r2, r6, #15
 801520c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015214:	ec51 0b18 	vmov	r0, r1, d8
 8015218:	f7eb fa1e 	bl	8000658 <__aeabi_dmul>
 801521c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015220:	1136      	asrs	r6, r6, #4
 8015222:	2300      	movs	r3, #0
 8015224:	2502      	movs	r5, #2
 8015226:	2e00      	cmp	r6, #0
 8015228:	d17e      	bne.n	8015328 <_dtoa_r+0x4d8>
 801522a:	2b00      	cmp	r3, #0
 801522c:	d1d0      	bne.n	80151d0 <_dtoa_r+0x380>
 801522e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015230:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015234:	2b00      	cmp	r3, #0
 8015236:	f000 8084 	beq.w	8015342 <_dtoa_r+0x4f2>
 801523a:	4b96      	ldr	r3, [pc, #600]	; (8015494 <_dtoa_r+0x644>)
 801523c:	2200      	movs	r2, #0
 801523e:	4640      	mov	r0, r8
 8015240:	4649      	mov	r1, r9
 8015242:	f7eb fc7b 	bl	8000b3c <__aeabi_dcmplt>
 8015246:	2800      	cmp	r0, #0
 8015248:	d07b      	beq.n	8015342 <_dtoa_r+0x4f2>
 801524a:	9b04      	ldr	r3, [sp, #16]
 801524c:	2b00      	cmp	r3, #0
 801524e:	d078      	beq.n	8015342 <_dtoa_r+0x4f2>
 8015250:	9b01      	ldr	r3, [sp, #4]
 8015252:	2b00      	cmp	r3, #0
 8015254:	dd39      	ble.n	80152ca <_dtoa_r+0x47a>
 8015256:	4b90      	ldr	r3, [pc, #576]	; (8015498 <_dtoa_r+0x648>)
 8015258:	2200      	movs	r2, #0
 801525a:	4640      	mov	r0, r8
 801525c:	4649      	mov	r1, r9
 801525e:	f7eb f9fb 	bl	8000658 <__aeabi_dmul>
 8015262:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015266:	9e01      	ldr	r6, [sp, #4]
 8015268:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 801526c:	3501      	adds	r5, #1
 801526e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015272:	4628      	mov	r0, r5
 8015274:	f7eb f986 	bl	8000584 <__aeabi_i2d>
 8015278:	4642      	mov	r2, r8
 801527a:	464b      	mov	r3, r9
 801527c:	f7eb f9ec 	bl	8000658 <__aeabi_dmul>
 8015280:	4b86      	ldr	r3, [pc, #536]	; (801549c <_dtoa_r+0x64c>)
 8015282:	2200      	movs	r2, #0
 8015284:	f7eb f832 	bl	80002ec <__adddf3>
 8015288:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801528c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015290:	9303      	str	r3, [sp, #12]
 8015292:	2e00      	cmp	r6, #0
 8015294:	d158      	bne.n	8015348 <_dtoa_r+0x4f8>
 8015296:	4b82      	ldr	r3, [pc, #520]	; (80154a0 <_dtoa_r+0x650>)
 8015298:	2200      	movs	r2, #0
 801529a:	4640      	mov	r0, r8
 801529c:	4649      	mov	r1, r9
 801529e:	f7eb f823 	bl	80002e8 <__aeabi_dsub>
 80152a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80152a6:	4680      	mov	r8, r0
 80152a8:	4689      	mov	r9, r1
 80152aa:	f7eb fc65 	bl	8000b78 <__aeabi_dcmpgt>
 80152ae:	2800      	cmp	r0, #0
 80152b0:	f040 8296 	bne.w	80157e0 <_dtoa_r+0x990>
 80152b4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80152b8:	4640      	mov	r0, r8
 80152ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80152be:	4649      	mov	r1, r9
 80152c0:	f7eb fc3c 	bl	8000b3c <__aeabi_dcmplt>
 80152c4:	2800      	cmp	r0, #0
 80152c6:	f040 8289 	bne.w	80157dc <_dtoa_r+0x98c>
 80152ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80152ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	f2c0 814e 	blt.w	8015572 <_dtoa_r+0x722>
 80152d6:	f1bb 0f0e 	cmp.w	fp, #14
 80152da:	f300 814a 	bgt.w	8015572 <_dtoa_r+0x722>
 80152de:	4b6b      	ldr	r3, [pc, #428]	; (801548c <_dtoa_r+0x63c>)
 80152e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80152e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80152e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	f280 80dc 	bge.w	80154a8 <_dtoa_r+0x658>
 80152f0:	9b04      	ldr	r3, [sp, #16]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	f300 80d8 	bgt.w	80154a8 <_dtoa_r+0x658>
 80152f8:	f040 826f 	bne.w	80157da <_dtoa_r+0x98a>
 80152fc:	4b68      	ldr	r3, [pc, #416]	; (80154a0 <_dtoa_r+0x650>)
 80152fe:	2200      	movs	r2, #0
 8015300:	4640      	mov	r0, r8
 8015302:	4649      	mov	r1, r9
 8015304:	f7eb f9a8 	bl	8000658 <__aeabi_dmul>
 8015308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801530c:	f7eb fc2a 	bl	8000b64 <__aeabi_dcmpge>
 8015310:	9e04      	ldr	r6, [sp, #16]
 8015312:	4637      	mov	r7, r6
 8015314:	2800      	cmp	r0, #0
 8015316:	f040 8245 	bne.w	80157a4 <_dtoa_r+0x954>
 801531a:	9d00      	ldr	r5, [sp, #0]
 801531c:	2331      	movs	r3, #49	; 0x31
 801531e:	f805 3b01 	strb.w	r3, [r5], #1
 8015322:	f10b 0b01 	add.w	fp, fp, #1
 8015326:	e241      	b.n	80157ac <_dtoa_r+0x95c>
 8015328:	07f2      	lsls	r2, r6, #31
 801532a:	d505      	bpl.n	8015338 <_dtoa_r+0x4e8>
 801532c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015330:	f7eb f992 	bl	8000658 <__aeabi_dmul>
 8015334:	3501      	adds	r5, #1
 8015336:	2301      	movs	r3, #1
 8015338:	1076      	asrs	r6, r6, #1
 801533a:	3708      	adds	r7, #8
 801533c:	e773      	b.n	8015226 <_dtoa_r+0x3d6>
 801533e:	2502      	movs	r5, #2
 8015340:	e775      	b.n	801522e <_dtoa_r+0x3de>
 8015342:	9e04      	ldr	r6, [sp, #16]
 8015344:	465f      	mov	r7, fp
 8015346:	e792      	b.n	801526e <_dtoa_r+0x41e>
 8015348:	9900      	ldr	r1, [sp, #0]
 801534a:	4b50      	ldr	r3, [pc, #320]	; (801548c <_dtoa_r+0x63c>)
 801534c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015350:	4431      	add	r1, r6
 8015352:	9102      	str	r1, [sp, #8]
 8015354:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015356:	eeb0 9a47 	vmov.f32	s18, s14
 801535a:	eef0 9a67 	vmov.f32	s19, s15
 801535e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8015362:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015366:	2900      	cmp	r1, #0
 8015368:	d044      	beq.n	80153f4 <_dtoa_r+0x5a4>
 801536a:	494e      	ldr	r1, [pc, #312]	; (80154a4 <_dtoa_r+0x654>)
 801536c:	2000      	movs	r0, #0
 801536e:	f7eb fa9d 	bl	80008ac <__aeabi_ddiv>
 8015372:	ec53 2b19 	vmov	r2, r3, d9
 8015376:	f7ea ffb7 	bl	80002e8 <__aeabi_dsub>
 801537a:	9d00      	ldr	r5, [sp, #0]
 801537c:	ec41 0b19 	vmov	d9, r0, r1
 8015380:	4649      	mov	r1, r9
 8015382:	4640      	mov	r0, r8
 8015384:	f7eb fc18 	bl	8000bb8 <__aeabi_d2iz>
 8015388:	4606      	mov	r6, r0
 801538a:	f7eb f8fb 	bl	8000584 <__aeabi_i2d>
 801538e:	4602      	mov	r2, r0
 8015390:	460b      	mov	r3, r1
 8015392:	4640      	mov	r0, r8
 8015394:	4649      	mov	r1, r9
 8015396:	f7ea ffa7 	bl	80002e8 <__aeabi_dsub>
 801539a:	3630      	adds	r6, #48	; 0x30
 801539c:	f805 6b01 	strb.w	r6, [r5], #1
 80153a0:	ec53 2b19 	vmov	r2, r3, d9
 80153a4:	4680      	mov	r8, r0
 80153a6:	4689      	mov	r9, r1
 80153a8:	f7eb fbc8 	bl	8000b3c <__aeabi_dcmplt>
 80153ac:	2800      	cmp	r0, #0
 80153ae:	d164      	bne.n	801547a <_dtoa_r+0x62a>
 80153b0:	4642      	mov	r2, r8
 80153b2:	464b      	mov	r3, r9
 80153b4:	4937      	ldr	r1, [pc, #220]	; (8015494 <_dtoa_r+0x644>)
 80153b6:	2000      	movs	r0, #0
 80153b8:	f7ea ff96 	bl	80002e8 <__aeabi_dsub>
 80153bc:	ec53 2b19 	vmov	r2, r3, d9
 80153c0:	f7eb fbbc 	bl	8000b3c <__aeabi_dcmplt>
 80153c4:	2800      	cmp	r0, #0
 80153c6:	f040 80b6 	bne.w	8015536 <_dtoa_r+0x6e6>
 80153ca:	9b02      	ldr	r3, [sp, #8]
 80153cc:	429d      	cmp	r5, r3
 80153ce:	f43f af7c 	beq.w	80152ca <_dtoa_r+0x47a>
 80153d2:	4b31      	ldr	r3, [pc, #196]	; (8015498 <_dtoa_r+0x648>)
 80153d4:	ec51 0b19 	vmov	r0, r1, d9
 80153d8:	2200      	movs	r2, #0
 80153da:	f7eb f93d 	bl	8000658 <__aeabi_dmul>
 80153de:	4b2e      	ldr	r3, [pc, #184]	; (8015498 <_dtoa_r+0x648>)
 80153e0:	ec41 0b19 	vmov	d9, r0, r1
 80153e4:	2200      	movs	r2, #0
 80153e6:	4640      	mov	r0, r8
 80153e8:	4649      	mov	r1, r9
 80153ea:	f7eb f935 	bl	8000658 <__aeabi_dmul>
 80153ee:	4680      	mov	r8, r0
 80153f0:	4689      	mov	r9, r1
 80153f2:	e7c5      	b.n	8015380 <_dtoa_r+0x530>
 80153f4:	ec51 0b17 	vmov	r0, r1, d7
 80153f8:	f7eb f92e 	bl	8000658 <__aeabi_dmul>
 80153fc:	9b02      	ldr	r3, [sp, #8]
 80153fe:	9d00      	ldr	r5, [sp, #0]
 8015400:	930f      	str	r3, [sp, #60]	; 0x3c
 8015402:	ec41 0b19 	vmov	d9, r0, r1
 8015406:	4649      	mov	r1, r9
 8015408:	4640      	mov	r0, r8
 801540a:	f7eb fbd5 	bl	8000bb8 <__aeabi_d2iz>
 801540e:	4606      	mov	r6, r0
 8015410:	f7eb f8b8 	bl	8000584 <__aeabi_i2d>
 8015414:	3630      	adds	r6, #48	; 0x30
 8015416:	4602      	mov	r2, r0
 8015418:	460b      	mov	r3, r1
 801541a:	4640      	mov	r0, r8
 801541c:	4649      	mov	r1, r9
 801541e:	f7ea ff63 	bl	80002e8 <__aeabi_dsub>
 8015422:	f805 6b01 	strb.w	r6, [r5], #1
 8015426:	9b02      	ldr	r3, [sp, #8]
 8015428:	429d      	cmp	r5, r3
 801542a:	4680      	mov	r8, r0
 801542c:	4689      	mov	r9, r1
 801542e:	f04f 0200 	mov.w	r2, #0
 8015432:	d124      	bne.n	801547e <_dtoa_r+0x62e>
 8015434:	4b1b      	ldr	r3, [pc, #108]	; (80154a4 <_dtoa_r+0x654>)
 8015436:	ec51 0b19 	vmov	r0, r1, d9
 801543a:	f7ea ff57 	bl	80002ec <__adddf3>
 801543e:	4602      	mov	r2, r0
 8015440:	460b      	mov	r3, r1
 8015442:	4640      	mov	r0, r8
 8015444:	4649      	mov	r1, r9
 8015446:	f7eb fb97 	bl	8000b78 <__aeabi_dcmpgt>
 801544a:	2800      	cmp	r0, #0
 801544c:	d173      	bne.n	8015536 <_dtoa_r+0x6e6>
 801544e:	ec53 2b19 	vmov	r2, r3, d9
 8015452:	4914      	ldr	r1, [pc, #80]	; (80154a4 <_dtoa_r+0x654>)
 8015454:	2000      	movs	r0, #0
 8015456:	f7ea ff47 	bl	80002e8 <__aeabi_dsub>
 801545a:	4602      	mov	r2, r0
 801545c:	460b      	mov	r3, r1
 801545e:	4640      	mov	r0, r8
 8015460:	4649      	mov	r1, r9
 8015462:	f7eb fb6b 	bl	8000b3c <__aeabi_dcmplt>
 8015466:	2800      	cmp	r0, #0
 8015468:	f43f af2f 	beq.w	80152ca <_dtoa_r+0x47a>
 801546c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801546e:	1e6b      	subs	r3, r5, #1
 8015470:	930f      	str	r3, [sp, #60]	; 0x3c
 8015472:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015476:	2b30      	cmp	r3, #48	; 0x30
 8015478:	d0f8      	beq.n	801546c <_dtoa_r+0x61c>
 801547a:	46bb      	mov	fp, r7
 801547c:	e04a      	b.n	8015514 <_dtoa_r+0x6c4>
 801547e:	4b06      	ldr	r3, [pc, #24]	; (8015498 <_dtoa_r+0x648>)
 8015480:	f7eb f8ea 	bl	8000658 <__aeabi_dmul>
 8015484:	4680      	mov	r8, r0
 8015486:	4689      	mov	r9, r1
 8015488:	e7bd      	b.n	8015406 <_dtoa_r+0x5b6>
 801548a:	bf00      	nop
 801548c:	080186f8 	.word	0x080186f8
 8015490:	080186d0 	.word	0x080186d0
 8015494:	3ff00000 	.word	0x3ff00000
 8015498:	40240000 	.word	0x40240000
 801549c:	401c0000 	.word	0x401c0000
 80154a0:	40140000 	.word	0x40140000
 80154a4:	3fe00000 	.word	0x3fe00000
 80154a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80154ac:	9d00      	ldr	r5, [sp, #0]
 80154ae:	4642      	mov	r2, r8
 80154b0:	464b      	mov	r3, r9
 80154b2:	4630      	mov	r0, r6
 80154b4:	4639      	mov	r1, r7
 80154b6:	f7eb f9f9 	bl	80008ac <__aeabi_ddiv>
 80154ba:	f7eb fb7d 	bl	8000bb8 <__aeabi_d2iz>
 80154be:	9001      	str	r0, [sp, #4]
 80154c0:	f7eb f860 	bl	8000584 <__aeabi_i2d>
 80154c4:	4642      	mov	r2, r8
 80154c6:	464b      	mov	r3, r9
 80154c8:	f7eb f8c6 	bl	8000658 <__aeabi_dmul>
 80154cc:	4602      	mov	r2, r0
 80154ce:	460b      	mov	r3, r1
 80154d0:	4630      	mov	r0, r6
 80154d2:	4639      	mov	r1, r7
 80154d4:	f7ea ff08 	bl	80002e8 <__aeabi_dsub>
 80154d8:	9e01      	ldr	r6, [sp, #4]
 80154da:	9f04      	ldr	r7, [sp, #16]
 80154dc:	3630      	adds	r6, #48	; 0x30
 80154de:	f805 6b01 	strb.w	r6, [r5], #1
 80154e2:	9e00      	ldr	r6, [sp, #0]
 80154e4:	1bae      	subs	r6, r5, r6
 80154e6:	42b7      	cmp	r7, r6
 80154e8:	4602      	mov	r2, r0
 80154ea:	460b      	mov	r3, r1
 80154ec:	d134      	bne.n	8015558 <_dtoa_r+0x708>
 80154ee:	f7ea fefd 	bl	80002ec <__adddf3>
 80154f2:	4642      	mov	r2, r8
 80154f4:	464b      	mov	r3, r9
 80154f6:	4606      	mov	r6, r0
 80154f8:	460f      	mov	r7, r1
 80154fa:	f7eb fb3d 	bl	8000b78 <__aeabi_dcmpgt>
 80154fe:	b9c8      	cbnz	r0, 8015534 <_dtoa_r+0x6e4>
 8015500:	4642      	mov	r2, r8
 8015502:	464b      	mov	r3, r9
 8015504:	4630      	mov	r0, r6
 8015506:	4639      	mov	r1, r7
 8015508:	f7eb fb0e 	bl	8000b28 <__aeabi_dcmpeq>
 801550c:	b110      	cbz	r0, 8015514 <_dtoa_r+0x6c4>
 801550e:	9b01      	ldr	r3, [sp, #4]
 8015510:	07db      	lsls	r3, r3, #31
 8015512:	d40f      	bmi.n	8015534 <_dtoa_r+0x6e4>
 8015514:	4651      	mov	r1, sl
 8015516:	4620      	mov	r0, r4
 8015518:	f000 fb18 	bl	8015b4c <_Bfree>
 801551c:	2300      	movs	r3, #0
 801551e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015520:	702b      	strb	r3, [r5, #0]
 8015522:	f10b 0301 	add.w	r3, fp, #1
 8015526:	6013      	str	r3, [r2, #0]
 8015528:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801552a:	2b00      	cmp	r3, #0
 801552c:	f43f ace2 	beq.w	8014ef4 <_dtoa_r+0xa4>
 8015530:	601d      	str	r5, [r3, #0]
 8015532:	e4df      	b.n	8014ef4 <_dtoa_r+0xa4>
 8015534:	465f      	mov	r7, fp
 8015536:	462b      	mov	r3, r5
 8015538:	461d      	mov	r5, r3
 801553a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801553e:	2a39      	cmp	r2, #57	; 0x39
 8015540:	d106      	bne.n	8015550 <_dtoa_r+0x700>
 8015542:	9a00      	ldr	r2, [sp, #0]
 8015544:	429a      	cmp	r2, r3
 8015546:	d1f7      	bne.n	8015538 <_dtoa_r+0x6e8>
 8015548:	9900      	ldr	r1, [sp, #0]
 801554a:	2230      	movs	r2, #48	; 0x30
 801554c:	3701      	adds	r7, #1
 801554e:	700a      	strb	r2, [r1, #0]
 8015550:	781a      	ldrb	r2, [r3, #0]
 8015552:	3201      	adds	r2, #1
 8015554:	701a      	strb	r2, [r3, #0]
 8015556:	e790      	b.n	801547a <_dtoa_r+0x62a>
 8015558:	4ba3      	ldr	r3, [pc, #652]	; (80157e8 <_dtoa_r+0x998>)
 801555a:	2200      	movs	r2, #0
 801555c:	f7eb f87c 	bl	8000658 <__aeabi_dmul>
 8015560:	2200      	movs	r2, #0
 8015562:	2300      	movs	r3, #0
 8015564:	4606      	mov	r6, r0
 8015566:	460f      	mov	r7, r1
 8015568:	f7eb fade 	bl	8000b28 <__aeabi_dcmpeq>
 801556c:	2800      	cmp	r0, #0
 801556e:	d09e      	beq.n	80154ae <_dtoa_r+0x65e>
 8015570:	e7d0      	b.n	8015514 <_dtoa_r+0x6c4>
 8015572:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015574:	2a00      	cmp	r2, #0
 8015576:	f000 80ca 	beq.w	801570e <_dtoa_r+0x8be>
 801557a:	9a07      	ldr	r2, [sp, #28]
 801557c:	2a01      	cmp	r2, #1
 801557e:	f300 80ad 	bgt.w	80156dc <_dtoa_r+0x88c>
 8015582:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015584:	2a00      	cmp	r2, #0
 8015586:	f000 80a5 	beq.w	80156d4 <_dtoa_r+0x884>
 801558a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801558e:	9e08      	ldr	r6, [sp, #32]
 8015590:	9d05      	ldr	r5, [sp, #20]
 8015592:	9a05      	ldr	r2, [sp, #20]
 8015594:	441a      	add	r2, r3
 8015596:	9205      	str	r2, [sp, #20]
 8015598:	9a06      	ldr	r2, [sp, #24]
 801559a:	2101      	movs	r1, #1
 801559c:	441a      	add	r2, r3
 801559e:	4620      	mov	r0, r4
 80155a0:	9206      	str	r2, [sp, #24]
 80155a2:	f000 fb89 	bl	8015cb8 <__i2b>
 80155a6:	4607      	mov	r7, r0
 80155a8:	b165      	cbz	r5, 80155c4 <_dtoa_r+0x774>
 80155aa:	9b06      	ldr	r3, [sp, #24]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	dd09      	ble.n	80155c4 <_dtoa_r+0x774>
 80155b0:	42ab      	cmp	r3, r5
 80155b2:	9a05      	ldr	r2, [sp, #20]
 80155b4:	bfa8      	it	ge
 80155b6:	462b      	movge	r3, r5
 80155b8:	1ad2      	subs	r2, r2, r3
 80155ba:	9205      	str	r2, [sp, #20]
 80155bc:	9a06      	ldr	r2, [sp, #24]
 80155be:	1aed      	subs	r5, r5, r3
 80155c0:	1ad3      	subs	r3, r2, r3
 80155c2:	9306      	str	r3, [sp, #24]
 80155c4:	9b08      	ldr	r3, [sp, #32]
 80155c6:	b1f3      	cbz	r3, 8015606 <_dtoa_r+0x7b6>
 80155c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	f000 80a3 	beq.w	8015716 <_dtoa_r+0x8c6>
 80155d0:	2e00      	cmp	r6, #0
 80155d2:	dd10      	ble.n	80155f6 <_dtoa_r+0x7a6>
 80155d4:	4639      	mov	r1, r7
 80155d6:	4632      	mov	r2, r6
 80155d8:	4620      	mov	r0, r4
 80155da:	f000 fc2d 	bl	8015e38 <__pow5mult>
 80155de:	4652      	mov	r2, sl
 80155e0:	4601      	mov	r1, r0
 80155e2:	4607      	mov	r7, r0
 80155e4:	4620      	mov	r0, r4
 80155e6:	f000 fb7d 	bl	8015ce4 <__multiply>
 80155ea:	4651      	mov	r1, sl
 80155ec:	4680      	mov	r8, r0
 80155ee:	4620      	mov	r0, r4
 80155f0:	f000 faac 	bl	8015b4c <_Bfree>
 80155f4:	46c2      	mov	sl, r8
 80155f6:	9b08      	ldr	r3, [sp, #32]
 80155f8:	1b9a      	subs	r2, r3, r6
 80155fa:	d004      	beq.n	8015606 <_dtoa_r+0x7b6>
 80155fc:	4651      	mov	r1, sl
 80155fe:	4620      	mov	r0, r4
 8015600:	f000 fc1a 	bl	8015e38 <__pow5mult>
 8015604:	4682      	mov	sl, r0
 8015606:	2101      	movs	r1, #1
 8015608:	4620      	mov	r0, r4
 801560a:	f000 fb55 	bl	8015cb8 <__i2b>
 801560e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015610:	2b00      	cmp	r3, #0
 8015612:	4606      	mov	r6, r0
 8015614:	f340 8081 	ble.w	801571a <_dtoa_r+0x8ca>
 8015618:	461a      	mov	r2, r3
 801561a:	4601      	mov	r1, r0
 801561c:	4620      	mov	r0, r4
 801561e:	f000 fc0b 	bl	8015e38 <__pow5mult>
 8015622:	9b07      	ldr	r3, [sp, #28]
 8015624:	2b01      	cmp	r3, #1
 8015626:	4606      	mov	r6, r0
 8015628:	dd7a      	ble.n	8015720 <_dtoa_r+0x8d0>
 801562a:	f04f 0800 	mov.w	r8, #0
 801562e:	6933      	ldr	r3, [r6, #16]
 8015630:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015634:	6918      	ldr	r0, [r3, #16]
 8015636:	f000 faf1 	bl	8015c1c <__hi0bits>
 801563a:	f1c0 0020 	rsb	r0, r0, #32
 801563e:	9b06      	ldr	r3, [sp, #24]
 8015640:	4418      	add	r0, r3
 8015642:	f010 001f 	ands.w	r0, r0, #31
 8015646:	f000 8094 	beq.w	8015772 <_dtoa_r+0x922>
 801564a:	f1c0 0320 	rsb	r3, r0, #32
 801564e:	2b04      	cmp	r3, #4
 8015650:	f340 8085 	ble.w	801575e <_dtoa_r+0x90e>
 8015654:	9b05      	ldr	r3, [sp, #20]
 8015656:	f1c0 001c 	rsb	r0, r0, #28
 801565a:	4403      	add	r3, r0
 801565c:	9305      	str	r3, [sp, #20]
 801565e:	9b06      	ldr	r3, [sp, #24]
 8015660:	4403      	add	r3, r0
 8015662:	4405      	add	r5, r0
 8015664:	9306      	str	r3, [sp, #24]
 8015666:	9b05      	ldr	r3, [sp, #20]
 8015668:	2b00      	cmp	r3, #0
 801566a:	dd05      	ble.n	8015678 <_dtoa_r+0x828>
 801566c:	4651      	mov	r1, sl
 801566e:	461a      	mov	r2, r3
 8015670:	4620      	mov	r0, r4
 8015672:	f000 fc3b 	bl	8015eec <__lshift>
 8015676:	4682      	mov	sl, r0
 8015678:	9b06      	ldr	r3, [sp, #24]
 801567a:	2b00      	cmp	r3, #0
 801567c:	dd05      	ble.n	801568a <_dtoa_r+0x83a>
 801567e:	4631      	mov	r1, r6
 8015680:	461a      	mov	r2, r3
 8015682:	4620      	mov	r0, r4
 8015684:	f000 fc32 	bl	8015eec <__lshift>
 8015688:	4606      	mov	r6, r0
 801568a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801568c:	2b00      	cmp	r3, #0
 801568e:	d072      	beq.n	8015776 <_dtoa_r+0x926>
 8015690:	4631      	mov	r1, r6
 8015692:	4650      	mov	r0, sl
 8015694:	f000 fc96 	bl	8015fc4 <__mcmp>
 8015698:	2800      	cmp	r0, #0
 801569a:	da6c      	bge.n	8015776 <_dtoa_r+0x926>
 801569c:	2300      	movs	r3, #0
 801569e:	4651      	mov	r1, sl
 80156a0:	220a      	movs	r2, #10
 80156a2:	4620      	mov	r0, r4
 80156a4:	f000 fa74 	bl	8015b90 <__multadd>
 80156a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156aa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80156ae:	4682      	mov	sl, r0
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	f000 81b0 	beq.w	8015a16 <_dtoa_r+0xbc6>
 80156b6:	2300      	movs	r3, #0
 80156b8:	4639      	mov	r1, r7
 80156ba:	220a      	movs	r2, #10
 80156bc:	4620      	mov	r0, r4
 80156be:	f000 fa67 	bl	8015b90 <__multadd>
 80156c2:	9b01      	ldr	r3, [sp, #4]
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	4607      	mov	r7, r0
 80156c8:	f300 8096 	bgt.w	80157f8 <_dtoa_r+0x9a8>
 80156cc:	9b07      	ldr	r3, [sp, #28]
 80156ce:	2b02      	cmp	r3, #2
 80156d0:	dc59      	bgt.n	8015786 <_dtoa_r+0x936>
 80156d2:	e091      	b.n	80157f8 <_dtoa_r+0x9a8>
 80156d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80156d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80156da:	e758      	b.n	801558e <_dtoa_r+0x73e>
 80156dc:	9b04      	ldr	r3, [sp, #16]
 80156de:	1e5e      	subs	r6, r3, #1
 80156e0:	9b08      	ldr	r3, [sp, #32]
 80156e2:	42b3      	cmp	r3, r6
 80156e4:	bfbf      	itttt	lt
 80156e6:	9b08      	ldrlt	r3, [sp, #32]
 80156e8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80156ea:	9608      	strlt	r6, [sp, #32]
 80156ec:	1af3      	sublt	r3, r6, r3
 80156ee:	bfb4      	ite	lt
 80156f0:	18d2      	addlt	r2, r2, r3
 80156f2:	1b9e      	subge	r6, r3, r6
 80156f4:	9b04      	ldr	r3, [sp, #16]
 80156f6:	bfbc      	itt	lt
 80156f8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80156fa:	2600      	movlt	r6, #0
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	bfb7      	itett	lt
 8015700:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8015704:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8015708:	1a9d      	sublt	r5, r3, r2
 801570a:	2300      	movlt	r3, #0
 801570c:	e741      	b.n	8015592 <_dtoa_r+0x742>
 801570e:	9e08      	ldr	r6, [sp, #32]
 8015710:	9d05      	ldr	r5, [sp, #20]
 8015712:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015714:	e748      	b.n	80155a8 <_dtoa_r+0x758>
 8015716:	9a08      	ldr	r2, [sp, #32]
 8015718:	e770      	b.n	80155fc <_dtoa_r+0x7ac>
 801571a:	9b07      	ldr	r3, [sp, #28]
 801571c:	2b01      	cmp	r3, #1
 801571e:	dc19      	bgt.n	8015754 <_dtoa_r+0x904>
 8015720:	9b02      	ldr	r3, [sp, #8]
 8015722:	b9bb      	cbnz	r3, 8015754 <_dtoa_r+0x904>
 8015724:	9b03      	ldr	r3, [sp, #12]
 8015726:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801572a:	b99b      	cbnz	r3, 8015754 <_dtoa_r+0x904>
 801572c:	9b03      	ldr	r3, [sp, #12]
 801572e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015732:	0d1b      	lsrs	r3, r3, #20
 8015734:	051b      	lsls	r3, r3, #20
 8015736:	b183      	cbz	r3, 801575a <_dtoa_r+0x90a>
 8015738:	9b05      	ldr	r3, [sp, #20]
 801573a:	3301      	adds	r3, #1
 801573c:	9305      	str	r3, [sp, #20]
 801573e:	9b06      	ldr	r3, [sp, #24]
 8015740:	3301      	adds	r3, #1
 8015742:	9306      	str	r3, [sp, #24]
 8015744:	f04f 0801 	mov.w	r8, #1
 8015748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801574a:	2b00      	cmp	r3, #0
 801574c:	f47f af6f 	bne.w	801562e <_dtoa_r+0x7de>
 8015750:	2001      	movs	r0, #1
 8015752:	e774      	b.n	801563e <_dtoa_r+0x7ee>
 8015754:	f04f 0800 	mov.w	r8, #0
 8015758:	e7f6      	b.n	8015748 <_dtoa_r+0x8f8>
 801575a:	4698      	mov	r8, r3
 801575c:	e7f4      	b.n	8015748 <_dtoa_r+0x8f8>
 801575e:	d082      	beq.n	8015666 <_dtoa_r+0x816>
 8015760:	9a05      	ldr	r2, [sp, #20]
 8015762:	331c      	adds	r3, #28
 8015764:	441a      	add	r2, r3
 8015766:	9205      	str	r2, [sp, #20]
 8015768:	9a06      	ldr	r2, [sp, #24]
 801576a:	441a      	add	r2, r3
 801576c:	441d      	add	r5, r3
 801576e:	9206      	str	r2, [sp, #24]
 8015770:	e779      	b.n	8015666 <_dtoa_r+0x816>
 8015772:	4603      	mov	r3, r0
 8015774:	e7f4      	b.n	8015760 <_dtoa_r+0x910>
 8015776:	9b04      	ldr	r3, [sp, #16]
 8015778:	2b00      	cmp	r3, #0
 801577a:	dc37      	bgt.n	80157ec <_dtoa_r+0x99c>
 801577c:	9b07      	ldr	r3, [sp, #28]
 801577e:	2b02      	cmp	r3, #2
 8015780:	dd34      	ble.n	80157ec <_dtoa_r+0x99c>
 8015782:	9b04      	ldr	r3, [sp, #16]
 8015784:	9301      	str	r3, [sp, #4]
 8015786:	9b01      	ldr	r3, [sp, #4]
 8015788:	b963      	cbnz	r3, 80157a4 <_dtoa_r+0x954>
 801578a:	4631      	mov	r1, r6
 801578c:	2205      	movs	r2, #5
 801578e:	4620      	mov	r0, r4
 8015790:	f000 f9fe 	bl	8015b90 <__multadd>
 8015794:	4601      	mov	r1, r0
 8015796:	4606      	mov	r6, r0
 8015798:	4650      	mov	r0, sl
 801579a:	f000 fc13 	bl	8015fc4 <__mcmp>
 801579e:	2800      	cmp	r0, #0
 80157a0:	f73f adbb 	bgt.w	801531a <_dtoa_r+0x4ca>
 80157a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80157a6:	9d00      	ldr	r5, [sp, #0]
 80157a8:	ea6f 0b03 	mvn.w	fp, r3
 80157ac:	f04f 0800 	mov.w	r8, #0
 80157b0:	4631      	mov	r1, r6
 80157b2:	4620      	mov	r0, r4
 80157b4:	f000 f9ca 	bl	8015b4c <_Bfree>
 80157b8:	2f00      	cmp	r7, #0
 80157ba:	f43f aeab 	beq.w	8015514 <_dtoa_r+0x6c4>
 80157be:	f1b8 0f00 	cmp.w	r8, #0
 80157c2:	d005      	beq.n	80157d0 <_dtoa_r+0x980>
 80157c4:	45b8      	cmp	r8, r7
 80157c6:	d003      	beq.n	80157d0 <_dtoa_r+0x980>
 80157c8:	4641      	mov	r1, r8
 80157ca:	4620      	mov	r0, r4
 80157cc:	f000 f9be 	bl	8015b4c <_Bfree>
 80157d0:	4639      	mov	r1, r7
 80157d2:	4620      	mov	r0, r4
 80157d4:	f000 f9ba 	bl	8015b4c <_Bfree>
 80157d8:	e69c      	b.n	8015514 <_dtoa_r+0x6c4>
 80157da:	2600      	movs	r6, #0
 80157dc:	4637      	mov	r7, r6
 80157de:	e7e1      	b.n	80157a4 <_dtoa_r+0x954>
 80157e0:	46bb      	mov	fp, r7
 80157e2:	4637      	mov	r7, r6
 80157e4:	e599      	b.n	801531a <_dtoa_r+0x4ca>
 80157e6:	bf00      	nop
 80157e8:	40240000 	.word	0x40240000
 80157ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	f000 80c8 	beq.w	8015984 <_dtoa_r+0xb34>
 80157f4:	9b04      	ldr	r3, [sp, #16]
 80157f6:	9301      	str	r3, [sp, #4]
 80157f8:	2d00      	cmp	r5, #0
 80157fa:	dd05      	ble.n	8015808 <_dtoa_r+0x9b8>
 80157fc:	4639      	mov	r1, r7
 80157fe:	462a      	mov	r2, r5
 8015800:	4620      	mov	r0, r4
 8015802:	f000 fb73 	bl	8015eec <__lshift>
 8015806:	4607      	mov	r7, r0
 8015808:	f1b8 0f00 	cmp.w	r8, #0
 801580c:	d05b      	beq.n	80158c6 <_dtoa_r+0xa76>
 801580e:	6879      	ldr	r1, [r7, #4]
 8015810:	4620      	mov	r0, r4
 8015812:	f000 f95b 	bl	8015acc <_Balloc>
 8015816:	4605      	mov	r5, r0
 8015818:	b928      	cbnz	r0, 8015826 <_dtoa_r+0x9d6>
 801581a:	4b83      	ldr	r3, [pc, #524]	; (8015a28 <_dtoa_r+0xbd8>)
 801581c:	4602      	mov	r2, r0
 801581e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8015822:	f7ff bb2e 	b.w	8014e82 <_dtoa_r+0x32>
 8015826:	693a      	ldr	r2, [r7, #16]
 8015828:	3202      	adds	r2, #2
 801582a:	0092      	lsls	r2, r2, #2
 801582c:	f107 010c 	add.w	r1, r7, #12
 8015830:	300c      	adds	r0, #12
 8015832:	f7ff fa76 	bl	8014d22 <memcpy>
 8015836:	2201      	movs	r2, #1
 8015838:	4629      	mov	r1, r5
 801583a:	4620      	mov	r0, r4
 801583c:	f000 fb56 	bl	8015eec <__lshift>
 8015840:	9b00      	ldr	r3, [sp, #0]
 8015842:	3301      	adds	r3, #1
 8015844:	9304      	str	r3, [sp, #16]
 8015846:	e9dd 2300 	ldrd	r2, r3, [sp]
 801584a:	4413      	add	r3, r2
 801584c:	9308      	str	r3, [sp, #32]
 801584e:	9b02      	ldr	r3, [sp, #8]
 8015850:	f003 0301 	and.w	r3, r3, #1
 8015854:	46b8      	mov	r8, r7
 8015856:	9306      	str	r3, [sp, #24]
 8015858:	4607      	mov	r7, r0
 801585a:	9b04      	ldr	r3, [sp, #16]
 801585c:	4631      	mov	r1, r6
 801585e:	3b01      	subs	r3, #1
 8015860:	4650      	mov	r0, sl
 8015862:	9301      	str	r3, [sp, #4]
 8015864:	f7ff fa6b 	bl	8014d3e <quorem>
 8015868:	4641      	mov	r1, r8
 801586a:	9002      	str	r0, [sp, #8]
 801586c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8015870:	4650      	mov	r0, sl
 8015872:	f000 fba7 	bl	8015fc4 <__mcmp>
 8015876:	463a      	mov	r2, r7
 8015878:	9005      	str	r0, [sp, #20]
 801587a:	4631      	mov	r1, r6
 801587c:	4620      	mov	r0, r4
 801587e:	f000 fbbd 	bl	8015ffc <__mdiff>
 8015882:	68c2      	ldr	r2, [r0, #12]
 8015884:	4605      	mov	r5, r0
 8015886:	bb02      	cbnz	r2, 80158ca <_dtoa_r+0xa7a>
 8015888:	4601      	mov	r1, r0
 801588a:	4650      	mov	r0, sl
 801588c:	f000 fb9a 	bl	8015fc4 <__mcmp>
 8015890:	4602      	mov	r2, r0
 8015892:	4629      	mov	r1, r5
 8015894:	4620      	mov	r0, r4
 8015896:	9209      	str	r2, [sp, #36]	; 0x24
 8015898:	f000 f958 	bl	8015b4c <_Bfree>
 801589c:	9b07      	ldr	r3, [sp, #28]
 801589e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80158a0:	9d04      	ldr	r5, [sp, #16]
 80158a2:	ea43 0102 	orr.w	r1, r3, r2
 80158a6:	9b06      	ldr	r3, [sp, #24]
 80158a8:	4319      	orrs	r1, r3
 80158aa:	d110      	bne.n	80158ce <_dtoa_r+0xa7e>
 80158ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80158b0:	d029      	beq.n	8015906 <_dtoa_r+0xab6>
 80158b2:	9b05      	ldr	r3, [sp, #20]
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	dd02      	ble.n	80158be <_dtoa_r+0xa6e>
 80158b8:	9b02      	ldr	r3, [sp, #8]
 80158ba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80158be:	9b01      	ldr	r3, [sp, #4]
 80158c0:	f883 9000 	strb.w	r9, [r3]
 80158c4:	e774      	b.n	80157b0 <_dtoa_r+0x960>
 80158c6:	4638      	mov	r0, r7
 80158c8:	e7ba      	b.n	8015840 <_dtoa_r+0x9f0>
 80158ca:	2201      	movs	r2, #1
 80158cc:	e7e1      	b.n	8015892 <_dtoa_r+0xa42>
 80158ce:	9b05      	ldr	r3, [sp, #20]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	db04      	blt.n	80158de <_dtoa_r+0xa8e>
 80158d4:	9907      	ldr	r1, [sp, #28]
 80158d6:	430b      	orrs	r3, r1
 80158d8:	9906      	ldr	r1, [sp, #24]
 80158da:	430b      	orrs	r3, r1
 80158dc:	d120      	bne.n	8015920 <_dtoa_r+0xad0>
 80158de:	2a00      	cmp	r2, #0
 80158e0:	dded      	ble.n	80158be <_dtoa_r+0xa6e>
 80158e2:	4651      	mov	r1, sl
 80158e4:	2201      	movs	r2, #1
 80158e6:	4620      	mov	r0, r4
 80158e8:	f000 fb00 	bl	8015eec <__lshift>
 80158ec:	4631      	mov	r1, r6
 80158ee:	4682      	mov	sl, r0
 80158f0:	f000 fb68 	bl	8015fc4 <__mcmp>
 80158f4:	2800      	cmp	r0, #0
 80158f6:	dc03      	bgt.n	8015900 <_dtoa_r+0xab0>
 80158f8:	d1e1      	bne.n	80158be <_dtoa_r+0xa6e>
 80158fa:	f019 0f01 	tst.w	r9, #1
 80158fe:	d0de      	beq.n	80158be <_dtoa_r+0xa6e>
 8015900:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015904:	d1d8      	bne.n	80158b8 <_dtoa_r+0xa68>
 8015906:	9a01      	ldr	r2, [sp, #4]
 8015908:	2339      	movs	r3, #57	; 0x39
 801590a:	7013      	strb	r3, [r2, #0]
 801590c:	462b      	mov	r3, r5
 801590e:	461d      	mov	r5, r3
 8015910:	3b01      	subs	r3, #1
 8015912:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015916:	2a39      	cmp	r2, #57	; 0x39
 8015918:	d06c      	beq.n	80159f4 <_dtoa_r+0xba4>
 801591a:	3201      	adds	r2, #1
 801591c:	701a      	strb	r2, [r3, #0]
 801591e:	e747      	b.n	80157b0 <_dtoa_r+0x960>
 8015920:	2a00      	cmp	r2, #0
 8015922:	dd07      	ble.n	8015934 <_dtoa_r+0xae4>
 8015924:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015928:	d0ed      	beq.n	8015906 <_dtoa_r+0xab6>
 801592a:	9a01      	ldr	r2, [sp, #4]
 801592c:	f109 0301 	add.w	r3, r9, #1
 8015930:	7013      	strb	r3, [r2, #0]
 8015932:	e73d      	b.n	80157b0 <_dtoa_r+0x960>
 8015934:	9b04      	ldr	r3, [sp, #16]
 8015936:	9a08      	ldr	r2, [sp, #32]
 8015938:	f803 9c01 	strb.w	r9, [r3, #-1]
 801593c:	4293      	cmp	r3, r2
 801593e:	d043      	beq.n	80159c8 <_dtoa_r+0xb78>
 8015940:	4651      	mov	r1, sl
 8015942:	2300      	movs	r3, #0
 8015944:	220a      	movs	r2, #10
 8015946:	4620      	mov	r0, r4
 8015948:	f000 f922 	bl	8015b90 <__multadd>
 801594c:	45b8      	cmp	r8, r7
 801594e:	4682      	mov	sl, r0
 8015950:	f04f 0300 	mov.w	r3, #0
 8015954:	f04f 020a 	mov.w	r2, #10
 8015958:	4641      	mov	r1, r8
 801595a:	4620      	mov	r0, r4
 801595c:	d107      	bne.n	801596e <_dtoa_r+0xb1e>
 801595e:	f000 f917 	bl	8015b90 <__multadd>
 8015962:	4680      	mov	r8, r0
 8015964:	4607      	mov	r7, r0
 8015966:	9b04      	ldr	r3, [sp, #16]
 8015968:	3301      	adds	r3, #1
 801596a:	9304      	str	r3, [sp, #16]
 801596c:	e775      	b.n	801585a <_dtoa_r+0xa0a>
 801596e:	f000 f90f 	bl	8015b90 <__multadd>
 8015972:	4639      	mov	r1, r7
 8015974:	4680      	mov	r8, r0
 8015976:	2300      	movs	r3, #0
 8015978:	220a      	movs	r2, #10
 801597a:	4620      	mov	r0, r4
 801597c:	f000 f908 	bl	8015b90 <__multadd>
 8015980:	4607      	mov	r7, r0
 8015982:	e7f0      	b.n	8015966 <_dtoa_r+0xb16>
 8015984:	9b04      	ldr	r3, [sp, #16]
 8015986:	9301      	str	r3, [sp, #4]
 8015988:	9d00      	ldr	r5, [sp, #0]
 801598a:	4631      	mov	r1, r6
 801598c:	4650      	mov	r0, sl
 801598e:	f7ff f9d6 	bl	8014d3e <quorem>
 8015992:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8015996:	9b00      	ldr	r3, [sp, #0]
 8015998:	f805 9b01 	strb.w	r9, [r5], #1
 801599c:	1aea      	subs	r2, r5, r3
 801599e:	9b01      	ldr	r3, [sp, #4]
 80159a0:	4293      	cmp	r3, r2
 80159a2:	dd07      	ble.n	80159b4 <_dtoa_r+0xb64>
 80159a4:	4651      	mov	r1, sl
 80159a6:	2300      	movs	r3, #0
 80159a8:	220a      	movs	r2, #10
 80159aa:	4620      	mov	r0, r4
 80159ac:	f000 f8f0 	bl	8015b90 <__multadd>
 80159b0:	4682      	mov	sl, r0
 80159b2:	e7ea      	b.n	801598a <_dtoa_r+0xb3a>
 80159b4:	9b01      	ldr	r3, [sp, #4]
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	bfc8      	it	gt
 80159ba:	461d      	movgt	r5, r3
 80159bc:	9b00      	ldr	r3, [sp, #0]
 80159be:	bfd8      	it	le
 80159c0:	2501      	movle	r5, #1
 80159c2:	441d      	add	r5, r3
 80159c4:	f04f 0800 	mov.w	r8, #0
 80159c8:	4651      	mov	r1, sl
 80159ca:	2201      	movs	r2, #1
 80159cc:	4620      	mov	r0, r4
 80159ce:	f000 fa8d 	bl	8015eec <__lshift>
 80159d2:	4631      	mov	r1, r6
 80159d4:	4682      	mov	sl, r0
 80159d6:	f000 faf5 	bl	8015fc4 <__mcmp>
 80159da:	2800      	cmp	r0, #0
 80159dc:	dc96      	bgt.n	801590c <_dtoa_r+0xabc>
 80159de:	d102      	bne.n	80159e6 <_dtoa_r+0xb96>
 80159e0:	f019 0f01 	tst.w	r9, #1
 80159e4:	d192      	bne.n	801590c <_dtoa_r+0xabc>
 80159e6:	462b      	mov	r3, r5
 80159e8:	461d      	mov	r5, r3
 80159ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80159ee:	2a30      	cmp	r2, #48	; 0x30
 80159f0:	d0fa      	beq.n	80159e8 <_dtoa_r+0xb98>
 80159f2:	e6dd      	b.n	80157b0 <_dtoa_r+0x960>
 80159f4:	9a00      	ldr	r2, [sp, #0]
 80159f6:	429a      	cmp	r2, r3
 80159f8:	d189      	bne.n	801590e <_dtoa_r+0xabe>
 80159fa:	f10b 0b01 	add.w	fp, fp, #1
 80159fe:	2331      	movs	r3, #49	; 0x31
 8015a00:	e796      	b.n	8015930 <_dtoa_r+0xae0>
 8015a02:	4b0a      	ldr	r3, [pc, #40]	; (8015a2c <_dtoa_r+0xbdc>)
 8015a04:	f7ff ba99 	b.w	8014f3a <_dtoa_r+0xea>
 8015a08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	f47f aa6d 	bne.w	8014eea <_dtoa_r+0x9a>
 8015a10:	4b07      	ldr	r3, [pc, #28]	; (8015a30 <_dtoa_r+0xbe0>)
 8015a12:	f7ff ba92 	b.w	8014f3a <_dtoa_r+0xea>
 8015a16:	9b01      	ldr	r3, [sp, #4]
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	dcb5      	bgt.n	8015988 <_dtoa_r+0xb38>
 8015a1c:	9b07      	ldr	r3, [sp, #28]
 8015a1e:	2b02      	cmp	r3, #2
 8015a20:	f73f aeb1 	bgt.w	8015786 <_dtoa_r+0x936>
 8015a24:	e7b0      	b.n	8015988 <_dtoa_r+0xb38>
 8015a26:	bf00      	nop
 8015a28:	08018663 	.word	0x08018663
 8015a2c:	080185c3 	.word	0x080185c3
 8015a30:	080185e7 	.word	0x080185e7

08015a34 <_free_r>:
 8015a34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015a36:	2900      	cmp	r1, #0
 8015a38:	d044      	beq.n	8015ac4 <_free_r+0x90>
 8015a3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015a3e:	9001      	str	r0, [sp, #4]
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	f1a1 0404 	sub.w	r4, r1, #4
 8015a46:	bfb8      	it	lt
 8015a48:	18e4      	addlt	r4, r4, r3
 8015a4a:	f7fe fae5 	bl	8014018 <__malloc_lock>
 8015a4e:	4a1e      	ldr	r2, [pc, #120]	; (8015ac8 <_free_r+0x94>)
 8015a50:	9801      	ldr	r0, [sp, #4]
 8015a52:	6813      	ldr	r3, [r2, #0]
 8015a54:	b933      	cbnz	r3, 8015a64 <_free_r+0x30>
 8015a56:	6063      	str	r3, [r4, #4]
 8015a58:	6014      	str	r4, [r2, #0]
 8015a5a:	b003      	add	sp, #12
 8015a5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015a60:	f7fe bae0 	b.w	8014024 <__malloc_unlock>
 8015a64:	42a3      	cmp	r3, r4
 8015a66:	d908      	bls.n	8015a7a <_free_r+0x46>
 8015a68:	6825      	ldr	r5, [r4, #0]
 8015a6a:	1961      	adds	r1, r4, r5
 8015a6c:	428b      	cmp	r3, r1
 8015a6e:	bf01      	itttt	eq
 8015a70:	6819      	ldreq	r1, [r3, #0]
 8015a72:	685b      	ldreq	r3, [r3, #4]
 8015a74:	1949      	addeq	r1, r1, r5
 8015a76:	6021      	streq	r1, [r4, #0]
 8015a78:	e7ed      	b.n	8015a56 <_free_r+0x22>
 8015a7a:	461a      	mov	r2, r3
 8015a7c:	685b      	ldr	r3, [r3, #4]
 8015a7e:	b10b      	cbz	r3, 8015a84 <_free_r+0x50>
 8015a80:	42a3      	cmp	r3, r4
 8015a82:	d9fa      	bls.n	8015a7a <_free_r+0x46>
 8015a84:	6811      	ldr	r1, [r2, #0]
 8015a86:	1855      	adds	r5, r2, r1
 8015a88:	42a5      	cmp	r5, r4
 8015a8a:	d10b      	bne.n	8015aa4 <_free_r+0x70>
 8015a8c:	6824      	ldr	r4, [r4, #0]
 8015a8e:	4421      	add	r1, r4
 8015a90:	1854      	adds	r4, r2, r1
 8015a92:	42a3      	cmp	r3, r4
 8015a94:	6011      	str	r1, [r2, #0]
 8015a96:	d1e0      	bne.n	8015a5a <_free_r+0x26>
 8015a98:	681c      	ldr	r4, [r3, #0]
 8015a9a:	685b      	ldr	r3, [r3, #4]
 8015a9c:	6053      	str	r3, [r2, #4]
 8015a9e:	440c      	add	r4, r1
 8015aa0:	6014      	str	r4, [r2, #0]
 8015aa2:	e7da      	b.n	8015a5a <_free_r+0x26>
 8015aa4:	d902      	bls.n	8015aac <_free_r+0x78>
 8015aa6:	230c      	movs	r3, #12
 8015aa8:	6003      	str	r3, [r0, #0]
 8015aaa:	e7d6      	b.n	8015a5a <_free_r+0x26>
 8015aac:	6825      	ldr	r5, [r4, #0]
 8015aae:	1961      	adds	r1, r4, r5
 8015ab0:	428b      	cmp	r3, r1
 8015ab2:	bf04      	itt	eq
 8015ab4:	6819      	ldreq	r1, [r3, #0]
 8015ab6:	685b      	ldreq	r3, [r3, #4]
 8015ab8:	6063      	str	r3, [r4, #4]
 8015aba:	bf04      	itt	eq
 8015abc:	1949      	addeq	r1, r1, r5
 8015abe:	6021      	streq	r1, [r4, #0]
 8015ac0:	6054      	str	r4, [r2, #4]
 8015ac2:	e7ca      	b.n	8015a5a <_free_r+0x26>
 8015ac4:	b003      	add	sp, #12
 8015ac6:	bd30      	pop	{r4, r5, pc}
 8015ac8:	20000410 	.word	0x20000410

08015acc <_Balloc>:
 8015acc:	b570      	push	{r4, r5, r6, lr}
 8015ace:	69c6      	ldr	r6, [r0, #28]
 8015ad0:	4604      	mov	r4, r0
 8015ad2:	460d      	mov	r5, r1
 8015ad4:	b976      	cbnz	r6, 8015af4 <_Balloc+0x28>
 8015ad6:	2010      	movs	r0, #16
 8015ad8:	f7fe f9ee 	bl	8013eb8 <malloc>
 8015adc:	4602      	mov	r2, r0
 8015ade:	61e0      	str	r0, [r4, #28]
 8015ae0:	b920      	cbnz	r0, 8015aec <_Balloc+0x20>
 8015ae2:	4b18      	ldr	r3, [pc, #96]	; (8015b44 <_Balloc+0x78>)
 8015ae4:	4818      	ldr	r0, [pc, #96]	; (8015b48 <_Balloc+0x7c>)
 8015ae6:	216b      	movs	r1, #107	; 0x6b
 8015ae8:	f000 fd72 	bl	80165d0 <__assert_func>
 8015aec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015af0:	6006      	str	r6, [r0, #0]
 8015af2:	60c6      	str	r6, [r0, #12]
 8015af4:	69e6      	ldr	r6, [r4, #28]
 8015af6:	68f3      	ldr	r3, [r6, #12]
 8015af8:	b183      	cbz	r3, 8015b1c <_Balloc+0x50>
 8015afa:	69e3      	ldr	r3, [r4, #28]
 8015afc:	68db      	ldr	r3, [r3, #12]
 8015afe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015b02:	b9b8      	cbnz	r0, 8015b34 <_Balloc+0x68>
 8015b04:	2101      	movs	r1, #1
 8015b06:	fa01 f605 	lsl.w	r6, r1, r5
 8015b0a:	1d72      	adds	r2, r6, #5
 8015b0c:	0092      	lsls	r2, r2, #2
 8015b0e:	4620      	mov	r0, r4
 8015b10:	f000 fd7c 	bl	801660c <_calloc_r>
 8015b14:	b160      	cbz	r0, 8015b30 <_Balloc+0x64>
 8015b16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015b1a:	e00e      	b.n	8015b3a <_Balloc+0x6e>
 8015b1c:	2221      	movs	r2, #33	; 0x21
 8015b1e:	2104      	movs	r1, #4
 8015b20:	4620      	mov	r0, r4
 8015b22:	f000 fd73 	bl	801660c <_calloc_r>
 8015b26:	69e3      	ldr	r3, [r4, #28]
 8015b28:	60f0      	str	r0, [r6, #12]
 8015b2a:	68db      	ldr	r3, [r3, #12]
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d1e4      	bne.n	8015afa <_Balloc+0x2e>
 8015b30:	2000      	movs	r0, #0
 8015b32:	bd70      	pop	{r4, r5, r6, pc}
 8015b34:	6802      	ldr	r2, [r0, #0]
 8015b36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015b3a:	2300      	movs	r3, #0
 8015b3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015b40:	e7f7      	b.n	8015b32 <_Balloc+0x66>
 8015b42:	bf00      	nop
 8015b44:	080185f4 	.word	0x080185f4
 8015b48:	08018674 	.word	0x08018674

08015b4c <_Bfree>:
 8015b4c:	b570      	push	{r4, r5, r6, lr}
 8015b4e:	69c6      	ldr	r6, [r0, #28]
 8015b50:	4605      	mov	r5, r0
 8015b52:	460c      	mov	r4, r1
 8015b54:	b976      	cbnz	r6, 8015b74 <_Bfree+0x28>
 8015b56:	2010      	movs	r0, #16
 8015b58:	f7fe f9ae 	bl	8013eb8 <malloc>
 8015b5c:	4602      	mov	r2, r0
 8015b5e:	61e8      	str	r0, [r5, #28]
 8015b60:	b920      	cbnz	r0, 8015b6c <_Bfree+0x20>
 8015b62:	4b09      	ldr	r3, [pc, #36]	; (8015b88 <_Bfree+0x3c>)
 8015b64:	4809      	ldr	r0, [pc, #36]	; (8015b8c <_Bfree+0x40>)
 8015b66:	218f      	movs	r1, #143	; 0x8f
 8015b68:	f000 fd32 	bl	80165d0 <__assert_func>
 8015b6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015b70:	6006      	str	r6, [r0, #0]
 8015b72:	60c6      	str	r6, [r0, #12]
 8015b74:	b13c      	cbz	r4, 8015b86 <_Bfree+0x3a>
 8015b76:	69eb      	ldr	r3, [r5, #28]
 8015b78:	6862      	ldr	r2, [r4, #4]
 8015b7a:	68db      	ldr	r3, [r3, #12]
 8015b7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015b80:	6021      	str	r1, [r4, #0]
 8015b82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015b86:	bd70      	pop	{r4, r5, r6, pc}
 8015b88:	080185f4 	.word	0x080185f4
 8015b8c:	08018674 	.word	0x08018674

08015b90 <__multadd>:
 8015b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b94:	690d      	ldr	r5, [r1, #16]
 8015b96:	4607      	mov	r7, r0
 8015b98:	460c      	mov	r4, r1
 8015b9a:	461e      	mov	r6, r3
 8015b9c:	f101 0c14 	add.w	ip, r1, #20
 8015ba0:	2000      	movs	r0, #0
 8015ba2:	f8dc 3000 	ldr.w	r3, [ip]
 8015ba6:	b299      	uxth	r1, r3
 8015ba8:	fb02 6101 	mla	r1, r2, r1, r6
 8015bac:	0c1e      	lsrs	r6, r3, #16
 8015bae:	0c0b      	lsrs	r3, r1, #16
 8015bb0:	fb02 3306 	mla	r3, r2, r6, r3
 8015bb4:	b289      	uxth	r1, r1
 8015bb6:	3001      	adds	r0, #1
 8015bb8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015bbc:	4285      	cmp	r5, r0
 8015bbe:	f84c 1b04 	str.w	r1, [ip], #4
 8015bc2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015bc6:	dcec      	bgt.n	8015ba2 <__multadd+0x12>
 8015bc8:	b30e      	cbz	r6, 8015c0e <__multadd+0x7e>
 8015bca:	68a3      	ldr	r3, [r4, #8]
 8015bcc:	42ab      	cmp	r3, r5
 8015bce:	dc19      	bgt.n	8015c04 <__multadd+0x74>
 8015bd0:	6861      	ldr	r1, [r4, #4]
 8015bd2:	4638      	mov	r0, r7
 8015bd4:	3101      	adds	r1, #1
 8015bd6:	f7ff ff79 	bl	8015acc <_Balloc>
 8015bda:	4680      	mov	r8, r0
 8015bdc:	b928      	cbnz	r0, 8015bea <__multadd+0x5a>
 8015bde:	4602      	mov	r2, r0
 8015be0:	4b0c      	ldr	r3, [pc, #48]	; (8015c14 <__multadd+0x84>)
 8015be2:	480d      	ldr	r0, [pc, #52]	; (8015c18 <__multadd+0x88>)
 8015be4:	21ba      	movs	r1, #186	; 0xba
 8015be6:	f000 fcf3 	bl	80165d0 <__assert_func>
 8015bea:	6922      	ldr	r2, [r4, #16]
 8015bec:	3202      	adds	r2, #2
 8015bee:	f104 010c 	add.w	r1, r4, #12
 8015bf2:	0092      	lsls	r2, r2, #2
 8015bf4:	300c      	adds	r0, #12
 8015bf6:	f7ff f894 	bl	8014d22 <memcpy>
 8015bfa:	4621      	mov	r1, r4
 8015bfc:	4638      	mov	r0, r7
 8015bfe:	f7ff ffa5 	bl	8015b4c <_Bfree>
 8015c02:	4644      	mov	r4, r8
 8015c04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015c08:	3501      	adds	r5, #1
 8015c0a:	615e      	str	r6, [r3, #20]
 8015c0c:	6125      	str	r5, [r4, #16]
 8015c0e:	4620      	mov	r0, r4
 8015c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c14:	08018663 	.word	0x08018663
 8015c18:	08018674 	.word	0x08018674

08015c1c <__hi0bits>:
 8015c1c:	0c03      	lsrs	r3, r0, #16
 8015c1e:	041b      	lsls	r3, r3, #16
 8015c20:	b9d3      	cbnz	r3, 8015c58 <__hi0bits+0x3c>
 8015c22:	0400      	lsls	r0, r0, #16
 8015c24:	2310      	movs	r3, #16
 8015c26:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015c2a:	bf04      	itt	eq
 8015c2c:	0200      	lsleq	r0, r0, #8
 8015c2e:	3308      	addeq	r3, #8
 8015c30:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015c34:	bf04      	itt	eq
 8015c36:	0100      	lsleq	r0, r0, #4
 8015c38:	3304      	addeq	r3, #4
 8015c3a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015c3e:	bf04      	itt	eq
 8015c40:	0080      	lsleq	r0, r0, #2
 8015c42:	3302      	addeq	r3, #2
 8015c44:	2800      	cmp	r0, #0
 8015c46:	db05      	blt.n	8015c54 <__hi0bits+0x38>
 8015c48:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015c4c:	f103 0301 	add.w	r3, r3, #1
 8015c50:	bf08      	it	eq
 8015c52:	2320      	moveq	r3, #32
 8015c54:	4618      	mov	r0, r3
 8015c56:	4770      	bx	lr
 8015c58:	2300      	movs	r3, #0
 8015c5a:	e7e4      	b.n	8015c26 <__hi0bits+0xa>

08015c5c <__lo0bits>:
 8015c5c:	6803      	ldr	r3, [r0, #0]
 8015c5e:	f013 0207 	ands.w	r2, r3, #7
 8015c62:	d00c      	beq.n	8015c7e <__lo0bits+0x22>
 8015c64:	07d9      	lsls	r1, r3, #31
 8015c66:	d422      	bmi.n	8015cae <__lo0bits+0x52>
 8015c68:	079a      	lsls	r2, r3, #30
 8015c6a:	bf49      	itett	mi
 8015c6c:	085b      	lsrmi	r3, r3, #1
 8015c6e:	089b      	lsrpl	r3, r3, #2
 8015c70:	6003      	strmi	r3, [r0, #0]
 8015c72:	2201      	movmi	r2, #1
 8015c74:	bf5c      	itt	pl
 8015c76:	6003      	strpl	r3, [r0, #0]
 8015c78:	2202      	movpl	r2, #2
 8015c7a:	4610      	mov	r0, r2
 8015c7c:	4770      	bx	lr
 8015c7e:	b299      	uxth	r1, r3
 8015c80:	b909      	cbnz	r1, 8015c86 <__lo0bits+0x2a>
 8015c82:	0c1b      	lsrs	r3, r3, #16
 8015c84:	2210      	movs	r2, #16
 8015c86:	b2d9      	uxtb	r1, r3
 8015c88:	b909      	cbnz	r1, 8015c8e <__lo0bits+0x32>
 8015c8a:	3208      	adds	r2, #8
 8015c8c:	0a1b      	lsrs	r3, r3, #8
 8015c8e:	0719      	lsls	r1, r3, #28
 8015c90:	bf04      	itt	eq
 8015c92:	091b      	lsreq	r3, r3, #4
 8015c94:	3204      	addeq	r2, #4
 8015c96:	0799      	lsls	r1, r3, #30
 8015c98:	bf04      	itt	eq
 8015c9a:	089b      	lsreq	r3, r3, #2
 8015c9c:	3202      	addeq	r2, #2
 8015c9e:	07d9      	lsls	r1, r3, #31
 8015ca0:	d403      	bmi.n	8015caa <__lo0bits+0x4e>
 8015ca2:	085b      	lsrs	r3, r3, #1
 8015ca4:	f102 0201 	add.w	r2, r2, #1
 8015ca8:	d003      	beq.n	8015cb2 <__lo0bits+0x56>
 8015caa:	6003      	str	r3, [r0, #0]
 8015cac:	e7e5      	b.n	8015c7a <__lo0bits+0x1e>
 8015cae:	2200      	movs	r2, #0
 8015cb0:	e7e3      	b.n	8015c7a <__lo0bits+0x1e>
 8015cb2:	2220      	movs	r2, #32
 8015cb4:	e7e1      	b.n	8015c7a <__lo0bits+0x1e>
	...

08015cb8 <__i2b>:
 8015cb8:	b510      	push	{r4, lr}
 8015cba:	460c      	mov	r4, r1
 8015cbc:	2101      	movs	r1, #1
 8015cbe:	f7ff ff05 	bl	8015acc <_Balloc>
 8015cc2:	4602      	mov	r2, r0
 8015cc4:	b928      	cbnz	r0, 8015cd2 <__i2b+0x1a>
 8015cc6:	4b05      	ldr	r3, [pc, #20]	; (8015cdc <__i2b+0x24>)
 8015cc8:	4805      	ldr	r0, [pc, #20]	; (8015ce0 <__i2b+0x28>)
 8015cca:	f240 1145 	movw	r1, #325	; 0x145
 8015cce:	f000 fc7f 	bl	80165d0 <__assert_func>
 8015cd2:	2301      	movs	r3, #1
 8015cd4:	6144      	str	r4, [r0, #20]
 8015cd6:	6103      	str	r3, [r0, #16]
 8015cd8:	bd10      	pop	{r4, pc}
 8015cda:	bf00      	nop
 8015cdc:	08018663 	.word	0x08018663
 8015ce0:	08018674 	.word	0x08018674

08015ce4 <__multiply>:
 8015ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ce8:	4691      	mov	r9, r2
 8015cea:	690a      	ldr	r2, [r1, #16]
 8015cec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015cf0:	429a      	cmp	r2, r3
 8015cf2:	bfb8      	it	lt
 8015cf4:	460b      	movlt	r3, r1
 8015cf6:	460c      	mov	r4, r1
 8015cf8:	bfbc      	itt	lt
 8015cfa:	464c      	movlt	r4, r9
 8015cfc:	4699      	movlt	r9, r3
 8015cfe:	6927      	ldr	r7, [r4, #16]
 8015d00:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015d04:	68a3      	ldr	r3, [r4, #8]
 8015d06:	6861      	ldr	r1, [r4, #4]
 8015d08:	eb07 060a 	add.w	r6, r7, sl
 8015d0c:	42b3      	cmp	r3, r6
 8015d0e:	b085      	sub	sp, #20
 8015d10:	bfb8      	it	lt
 8015d12:	3101      	addlt	r1, #1
 8015d14:	f7ff feda 	bl	8015acc <_Balloc>
 8015d18:	b930      	cbnz	r0, 8015d28 <__multiply+0x44>
 8015d1a:	4602      	mov	r2, r0
 8015d1c:	4b44      	ldr	r3, [pc, #272]	; (8015e30 <__multiply+0x14c>)
 8015d1e:	4845      	ldr	r0, [pc, #276]	; (8015e34 <__multiply+0x150>)
 8015d20:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8015d24:	f000 fc54 	bl	80165d0 <__assert_func>
 8015d28:	f100 0514 	add.w	r5, r0, #20
 8015d2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015d30:	462b      	mov	r3, r5
 8015d32:	2200      	movs	r2, #0
 8015d34:	4543      	cmp	r3, r8
 8015d36:	d321      	bcc.n	8015d7c <__multiply+0x98>
 8015d38:	f104 0314 	add.w	r3, r4, #20
 8015d3c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015d40:	f109 0314 	add.w	r3, r9, #20
 8015d44:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015d48:	9202      	str	r2, [sp, #8]
 8015d4a:	1b3a      	subs	r2, r7, r4
 8015d4c:	3a15      	subs	r2, #21
 8015d4e:	f022 0203 	bic.w	r2, r2, #3
 8015d52:	3204      	adds	r2, #4
 8015d54:	f104 0115 	add.w	r1, r4, #21
 8015d58:	428f      	cmp	r7, r1
 8015d5a:	bf38      	it	cc
 8015d5c:	2204      	movcc	r2, #4
 8015d5e:	9201      	str	r2, [sp, #4]
 8015d60:	9a02      	ldr	r2, [sp, #8]
 8015d62:	9303      	str	r3, [sp, #12]
 8015d64:	429a      	cmp	r2, r3
 8015d66:	d80c      	bhi.n	8015d82 <__multiply+0x9e>
 8015d68:	2e00      	cmp	r6, #0
 8015d6a:	dd03      	ble.n	8015d74 <__multiply+0x90>
 8015d6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d05b      	beq.n	8015e2c <__multiply+0x148>
 8015d74:	6106      	str	r6, [r0, #16]
 8015d76:	b005      	add	sp, #20
 8015d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d7c:	f843 2b04 	str.w	r2, [r3], #4
 8015d80:	e7d8      	b.n	8015d34 <__multiply+0x50>
 8015d82:	f8b3 a000 	ldrh.w	sl, [r3]
 8015d86:	f1ba 0f00 	cmp.w	sl, #0
 8015d8a:	d024      	beq.n	8015dd6 <__multiply+0xf2>
 8015d8c:	f104 0e14 	add.w	lr, r4, #20
 8015d90:	46a9      	mov	r9, r5
 8015d92:	f04f 0c00 	mov.w	ip, #0
 8015d96:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015d9a:	f8d9 1000 	ldr.w	r1, [r9]
 8015d9e:	fa1f fb82 	uxth.w	fp, r2
 8015da2:	b289      	uxth	r1, r1
 8015da4:	fb0a 110b 	mla	r1, sl, fp, r1
 8015da8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015dac:	f8d9 2000 	ldr.w	r2, [r9]
 8015db0:	4461      	add	r1, ip
 8015db2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015db6:	fb0a c20b 	mla	r2, sl, fp, ip
 8015dba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015dbe:	b289      	uxth	r1, r1
 8015dc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015dc4:	4577      	cmp	r7, lr
 8015dc6:	f849 1b04 	str.w	r1, [r9], #4
 8015dca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015dce:	d8e2      	bhi.n	8015d96 <__multiply+0xb2>
 8015dd0:	9a01      	ldr	r2, [sp, #4]
 8015dd2:	f845 c002 	str.w	ip, [r5, r2]
 8015dd6:	9a03      	ldr	r2, [sp, #12]
 8015dd8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015ddc:	3304      	adds	r3, #4
 8015dde:	f1b9 0f00 	cmp.w	r9, #0
 8015de2:	d021      	beq.n	8015e28 <__multiply+0x144>
 8015de4:	6829      	ldr	r1, [r5, #0]
 8015de6:	f104 0c14 	add.w	ip, r4, #20
 8015dea:	46ae      	mov	lr, r5
 8015dec:	f04f 0a00 	mov.w	sl, #0
 8015df0:	f8bc b000 	ldrh.w	fp, [ip]
 8015df4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015df8:	fb09 220b 	mla	r2, r9, fp, r2
 8015dfc:	4452      	add	r2, sl
 8015dfe:	b289      	uxth	r1, r1
 8015e00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015e04:	f84e 1b04 	str.w	r1, [lr], #4
 8015e08:	f85c 1b04 	ldr.w	r1, [ip], #4
 8015e0c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015e10:	f8be 1000 	ldrh.w	r1, [lr]
 8015e14:	fb09 110a 	mla	r1, r9, sl, r1
 8015e18:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8015e1c:	4567      	cmp	r7, ip
 8015e1e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015e22:	d8e5      	bhi.n	8015df0 <__multiply+0x10c>
 8015e24:	9a01      	ldr	r2, [sp, #4]
 8015e26:	50a9      	str	r1, [r5, r2]
 8015e28:	3504      	adds	r5, #4
 8015e2a:	e799      	b.n	8015d60 <__multiply+0x7c>
 8015e2c:	3e01      	subs	r6, #1
 8015e2e:	e79b      	b.n	8015d68 <__multiply+0x84>
 8015e30:	08018663 	.word	0x08018663
 8015e34:	08018674 	.word	0x08018674

08015e38 <__pow5mult>:
 8015e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015e3c:	4615      	mov	r5, r2
 8015e3e:	f012 0203 	ands.w	r2, r2, #3
 8015e42:	4606      	mov	r6, r0
 8015e44:	460f      	mov	r7, r1
 8015e46:	d007      	beq.n	8015e58 <__pow5mult+0x20>
 8015e48:	4c25      	ldr	r4, [pc, #148]	; (8015ee0 <__pow5mult+0xa8>)
 8015e4a:	3a01      	subs	r2, #1
 8015e4c:	2300      	movs	r3, #0
 8015e4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015e52:	f7ff fe9d 	bl	8015b90 <__multadd>
 8015e56:	4607      	mov	r7, r0
 8015e58:	10ad      	asrs	r5, r5, #2
 8015e5a:	d03d      	beq.n	8015ed8 <__pow5mult+0xa0>
 8015e5c:	69f4      	ldr	r4, [r6, #28]
 8015e5e:	b97c      	cbnz	r4, 8015e80 <__pow5mult+0x48>
 8015e60:	2010      	movs	r0, #16
 8015e62:	f7fe f829 	bl	8013eb8 <malloc>
 8015e66:	4602      	mov	r2, r0
 8015e68:	61f0      	str	r0, [r6, #28]
 8015e6a:	b928      	cbnz	r0, 8015e78 <__pow5mult+0x40>
 8015e6c:	4b1d      	ldr	r3, [pc, #116]	; (8015ee4 <__pow5mult+0xac>)
 8015e6e:	481e      	ldr	r0, [pc, #120]	; (8015ee8 <__pow5mult+0xb0>)
 8015e70:	f240 11b3 	movw	r1, #435	; 0x1b3
 8015e74:	f000 fbac 	bl	80165d0 <__assert_func>
 8015e78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015e7c:	6004      	str	r4, [r0, #0]
 8015e7e:	60c4      	str	r4, [r0, #12]
 8015e80:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8015e84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015e88:	b94c      	cbnz	r4, 8015e9e <__pow5mult+0x66>
 8015e8a:	f240 2171 	movw	r1, #625	; 0x271
 8015e8e:	4630      	mov	r0, r6
 8015e90:	f7ff ff12 	bl	8015cb8 <__i2b>
 8015e94:	2300      	movs	r3, #0
 8015e96:	f8c8 0008 	str.w	r0, [r8, #8]
 8015e9a:	4604      	mov	r4, r0
 8015e9c:	6003      	str	r3, [r0, #0]
 8015e9e:	f04f 0900 	mov.w	r9, #0
 8015ea2:	07eb      	lsls	r3, r5, #31
 8015ea4:	d50a      	bpl.n	8015ebc <__pow5mult+0x84>
 8015ea6:	4639      	mov	r1, r7
 8015ea8:	4622      	mov	r2, r4
 8015eaa:	4630      	mov	r0, r6
 8015eac:	f7ff ff1a 	bl	8015ce4 <__multiply>
 8015eb0:	4639      	mov	r1, r7
 8015eb2:	4680      	mov	r8, r0
 8015eb4:	4630      	mov	r0, r6
 8015eb6:	f7ff fe49 	bl	8015b4c <_Bfree>
 8015eba:	4647      	mov	r7, r8
 8015ebc:	106d      	asrs	r5, r5, #1
 8015ebe:	d00b      	beq.n	8015ed8 <__pow5mult+0xa0>
 8015ec0:	6820      	ldr	r0, [r4, #0]
 8015ec2:	b938      	cbnz	r0, 8015ed4 <__pow5mult+0x9c>
 8015ec4:	4622      	mov	r2, r4
 8015ec6:	4621      	mov	r1, r4
 8015ec8:	4630      	mov	r0, r6
 8015eca:	f7ff ff0b 	bl	8015ce4 <__multiply>
 8015ece:	6020      	str	r0, [r4, #0]
 8015ed0:	f8c0 9000 	str.w	r9, [r0]
 8015ed4:	4604      	mov	r4, r0
 8015ed6:	e7e4      	b.n	8015ea2 <__pow5mult+0x6a>
 8015ed8:	4638      	mov	r0, r7
 8015eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ede:	bf00      	nop
 8015ee0:	080187c0 	.word	0x080187c0
 8015ee4:	080185f4 	.word	0x080185f4
 8015ee8:	08018674 	.word	0x08018674

08015eec <__lshift>:
 8015eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ef0:	460c      	mov	r4, r1
 8015ef2:	6849      	ldr	r1, [r1, #4]
 8015ef4:	6923      	ldr	r3, [r4, #16]
 8015ef6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015efa:	68a3      	ldr	r3, [r4, #8]
 8015efc:	4607      	mov	r7, r0
 8015efe:	4691      	mov	r9, r2
 8015f00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015f04:	f108 0601 	add.w	r6, r8, #1
 8015f08:	42b3      	cmp	r3, r6
 8015f0a:	db0b      	blt.n	8015f24 <__lshift+0x38>
 8015f0c:	4638      	mov	r0, r7
 8015f0e:	f7ff fddd 	bl	8015acc <_Balloc>
 8015f12:	4605      	mov	r5, r0
 8015f14:	b948      	cbnz	r0, 8015f2a <__lshift+0x3e>
 8015f16:	4602      	mov	r2, r0
 8015f18:	4b28      	ldr	r3, [pc, #160]	; (8015fbc <__lshift+0xd0>)
 8015f1a:	4829      	ldr	r0, [pc, #164]	; (8015fc0 <__lshift+0xd4>)
 8015f1c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8015f20:	f000 fb56 	bl	80165d0 <__assert_func>
 8015f24:	3101      	adds	r1, #1
 8015f26:	005b      	lsls	r3, r3, #1
 8015f28:	e7ee      	b.n	8015f08 <__lshift+0x1c>
 8015f2a:	2300      	movs	r3, #0
 8015f2c:	f100 0114 	add.w	r1, r0, #20
 8015f30:	f100 0210 	add.w	r2, r0, #16
 8015f34:	4618      	mov	r0, r3
 8015f36:	4553      	cmp	r3, sl
 8015f38:	db33      	blt.n	8015fa2 <__lshift+0xb6>
 8015f3a:	6920      	ldr	r0, [r4, #16]
 8015f3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015f40:	f104 0314 	add.w	r3, r4, #20
 8015f44:	f019 091f 	ands.w	r9, r9, #31
 8015f48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015f4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015f50:	d02b      	beq.n	8015faa <__lshift+0xbe>
 8015f52:	f1c9 0e20 	rsb	lr, r9, #32
 8015f56:	468a      	mov	sl, r1
 8015f58:	2200      	movs	r2, #0
 8015f5a:	6818      	ldr	r0, [r3, #0]
 8015f5c:	fa00 f009 	lsl.w	r0, r0, r9
 8015f60:	4310      	orrs	r0, r2
 8015f62:	f84a 0b04 	str.w	r0, [sl], #4
 8015f66:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f6a:	459c      	cmp	ip, r3
 8015f6c:	fa22 f20e 	lsr.w	r2, r2, lr
 8015f70:	d8f3      	bhi.n	8015f5a <__lshift+0x6e>
 8015f72:	ebac 0304 	sub.w	r3, ip, r4
 8015f76:	3b15      	subs	r3, #21
 8015f78:	f023 0303 	bic.w	r3, r3, #3
 8015f7c:	3304      	adds	r3, #4
 8015f7e:	f104 0015 	add.w	r0, r4, #21
 8015f82:	4584      	cmp	ip, r0
 8015f84:	bf38      	it	cc
 8015f86:	2304      	movcc	r3, #4
 8015f88:	50ca      	str	r2, [r1, r3]
 8015f8a:	b10a      	cbz	r2, 8015f90 <__lshift+0xa4>
 8015f8c:	f108 0602 	add.w	r6, r8, #2
 8015f90:	3e01      	subs	r6, #1
 8015f92:	4638      	mov	r0, r7
 8015f94:	612e      	str	r6, [r5, #16]
 8015f96:	4621      	mov	r1, r4
 8015f98:	f7ff fdd8 	bl	8015b4c <_Bfree>
 8015f9c:	4628      	mov	r0, r5
 8015f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015fa2:	f842 0f04 	str.w	r0, [r2, #4]!
 8015fa6:	3301      	adds	r3, #1
 8015fa8:	e7c5      	b.n	8015f36 <__lshift+0x4a>
 8015faa:	3904      	subs	r1, #4
 8015fac:	f853 2b04 	ldr.w	r2, [r3], #4
 8015fb0:	f841 2f04 	str.w	r2, [r1, #4]!
 8015fb4:	459c      	cmp	ip, r3
 8015fb6:	d8f9      	bhi.n	8015fac <__lshift+0xc0>
 8015fb8:	e7ea      	b.n	8015f90 <__lshift+0xa4>
 8015fba:	bf00      	nop
 8015fbc:	08018663 	.word	0x08018663
 8015fc0:	08018674 	.word	0x08018674

08015fc4 <__mcmp>:
 8015fc4:	b530      	push	{r4, r5, lr}
 8015fc6:	6902      	ldr	r2, [r0, #16]
 8015fc8:	690c      	ldr	r4, [r1, #16]
 8015fca:	1b12      	subs	r2, r2, r4
 8015fcc:	d10e      	bne.n	8015fec <__mcmp+0x28>
 8015fce:	f100 0314 	add.w	r3, r0, #20
 8015fd2:	3114      	adds	r1, #20
 8015fd4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015fd8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015fdc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015fe0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015fe4:	42a5      	cmp	r5, r4
 8015fe6:	d003      	beq.n	8015ff0 <__mcmp+0x2c>
 8015fe8:	d305      	bcc.n	8015ff6 <__mcmp+0x32>
 8015fea:	2201      	movs	r2, #1
 8015fec:	4610      	mov	r0, r2
 8015fee:	bd30      	pop	{r4, r5, pc}
 8015ff0:	4283      	cmp	r3, r0
 8015ff2:	d3f3      	bcc.n	8015fdc <__mcmp+0x18>
 8015ff4:	e7fa      	b.n	8015fec <__mcmp+0x28>
 8015ff6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015ffa:	e7f7      	b.n	8015fec <__mcmp+0x28>

08015ffc <__mdiff>:
 8015ffc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016000:	460c      	mov	r4, r1
 8016002:	4606      	mov	r6, r0
 8016004:	4611      	mov	r1, r2
 8016006:	4620      	mov	r0, r4
 8016008:	4690      	mov	r8, r2
 801600a:	f7ff ffdb 	bl	8015fc4 <__mcmp>
 801600e:	1e05      	subs	r5, r0, #0
 8016010:	d110      	bne.n	8016034 <__mdiff+0x38>
 8016012:	4629      	mov	r1, r5
 8016014:	4630      	mov	r0, r6
 8016016:	f7ff fd59 	bl	8015acc <_Balloc>
 801601a:	b930      	cbnz	r0, 801602a <__mdiff+0x2e>
 801601c:	4b3a      	ldr	r3, [pc, #232]	; (8016108 <__mdiff+0x10c>)
 801601e:	4602      	mov	r2, r0
 8016020:	f240 2137 	movw	r1, #567	; 0x237
 8016024:	4839      	ldr	r0, [pc, #228]	; (801610c <__mdiff+0x110>)
 8016026:	f000 fad3 	bl	80165d0 <__assert_func>
 801602a:	2301      	movs	r3, #1
 801602c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016030:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016034:	bfa4      	itt	ge
 8016036:	4643      	movge	r3, r8
 8016038:	46a0      	movge	r8, r4
 801603a:	4630      	mov	r0, r6
 801603c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016040:	bfa6      	itte	ge
 8016042:	461c      	movge	r4, r3
 8016044:	2500      	movge	r5, #0
 8016046:	2501      	movlt	r5, #1
 8016048:	f7ff fd40 	bl	8015acc <_Balloc>
 801604c:	b920      	cbnz	r0, 8016058 <__mdiff+0x5c>
 801604e:	4b2e      	ldr	r3, [pc, #184]	; (8016108 <__mdiff+0x10c>)
 8016050:	4602      	mov	r2, r0
 8016052:	f240 2145 	movw	r1, #581	; 0x245
 8016056:	e7e5      	b.n	8016024 <__mdiff+0x28>
 8016058:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801605c:	6926      	ldr	r6, [r4, #16]
 801605e:	60c5      	str	r5, [r0, #12]
 8016060:	f104 0914 	add.w	r9, r4, #20
 8016064:	f108 0514 	add.w	r5, r8, #20
 8016068:	f100 0e14 	add.w	lr, r0, #20
 801606c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8016070:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016074:	f108 0210 	add.w	r2, r8, #16
 8016078:	46f2      	mov	sl, lr
 801607a:	2100      	movs	r1, #0
 801607c:	f859 3b04 	ldr.w	r3, [r9], #4
 8016080:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016084:	fa11 f88b 	uxtah	r8, r1, fp
 8016088:	b299      	uxth	r1, r3
 801608a:	0c1b      	lsrs	r3, r3, #16
 801608c:	eba8 0801 	sub.w	r8, r8, r1
 8016090:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016094:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016098:	fa1f f888 	uxth.w	r8, r8
 801609c:	1419      	asrs	r1, r3, #16
 801609e:	454e      	cmp	r6, r9
 80160a0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80160a4:	f84a 3b04 	str.w	r3, [sl], #4
 80160a8:	d8e8      	bhi.n	801607c <__mdiff+0x80>
 80160aa:	1b33      	subs	r3, r6, r4
 80160ac:	3b15      	subs	r3, #21
 80160ae:	f023 0303 	bic.w	r3, r3, #3
 80160b2:	3304      	adds	r3, #4
 80160b4:	3415      	adds	r4, #21
 80160b6:	42a6      	cmp	r6, r4
 80160b8:	bf38      	it	cc
 80160ba:	2304      	movcc	r3, #4
 80160bc:	441d      	add	r5, r3
 80160be:	4473      	add	r3, lr
 80160c0:	469e      	mov	lr, r3
 80160c2:	462e      	mov	r6, r5
 80160c4:	4566      	cmp	r6, ip
 80160c6:	d30e      	bcc.n	80160e6 <__mdiff+0xea>
 80160c8:	f10c 0203 	add.w	r2, ip, #3
 80160cc:	1b52      	subs	r2, r2, r5
 80160ce:	f022 0203 	bic.w	r2, r2, #3
 80160d2:	3d03      	subs	r5, #3
 80160d4:	45ac      	cmp	ip, r5
 80160d6:	bf38      	it	cc
 80160d8:	2200      	movcc	r2, #0
 80160da:	4413      	add	r3, r2
 80160dc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80160e0:	b17a      	cbz	r2, 8016102 <__mdiff+0x106>
 80160e2:	6107      	str	r7, [r0, #16]
 80160e4:	e7a4      	b.n	8016030 <__mdiff+0x34>
 80160e6:	f856 8b04 	ldr.w	r8, [r6], #4
 80160ea:	fa11 f288 	uxtah	r2, r1, r8
 80160ee:	1414      	asrs	r4, r2, #16
 80160f0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80160f4:	b292      	uxth	r2, r2
 80160f6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80160fa:	f84e 2b04 	str.w	r2, [lr], #4
 80160fe:	1421      	asrs	r1, r4, #16
 8016100:	e7e0      	b.n	80160c4 <__mdiff+0xc8>
 8016102:	3f01      	subs	r7, #1
 8016104:	e7ea      	b.n	80160dc <__mdiff+0xe0>
 8016106:	bf00      	nop
 8016108:	08018663 	.word	0x08018663
 801610c:	08018674 	.word	0x08018674

08016110 <__d2b>:
 8016110:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016114:	460f      	mov	r7, r1
 8016116:	2101      	movs	r1, #1
 8016118:	ec59 8b10 	vmov	r8, r9, d0
 801611c:	4616      	mov	r6, r2
 801611e:	f7ff fcd5 	bl	8015acc <_Balloc>
 8016122:	4604      	mov	r4, r0
 8016124:	b930      	cbnz	r0, 8016134 <__d2b+0x24>
 8016126:	4602      	mov	r2, r0
 8016128:	4b24      	ldr	r3, [pc, #144]	; (80161bc <__d2b+0xac>)
 801612a:	4825      	ldr	r0, [pc, #148]	; (80161c0 <__d2b+0xb0>)
 801612c:	f240 310f 	movw	r1, #783	; 0x30f
 8016130:	f000 fa4e 	bl	80165d0 <__assert_func>
 8016134:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016138:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801613c:	bb2d      	cbnz	r5, 801618a <__d2b+0x7a>
 801613e:	9301      	str	r3, [sp, #4]
 8016140:	f1b8 0300 	subs.w	r3, r8, #0
 8016144:	d026      	beq.n	8016194 <__d2b+0x84>
 8016146:	4668      	mov	r0, sp
 8016148:	9300      	str	r3, [sp, #0]
 801614a:	f7ff fd87 	bl	8015c5c <__lo0bits>
 801614e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016152:	b1e8      	cbz	r0, 8016190 <__d2b+0x80>
 8016154:	f1c0 0320 	rsb	r3, r0, #32
 8016158:	fa02 f303 	lsl.w	r3, r2, r3
 801615c:	430b      	orrs	r3, r1
 801615e:	40c2      	lsrs	r2, r0
 8016160:	6163      	str	r3, [r4, #20]
 8016162:	9201      	str	r2, [sp, #4]
 8016164:	9b01      	ldr	r3, [sp, #4]
 8016166:	61a3      	str	r3, [r4, #24]
 8016168:	2b00      	cmp	r3, #0
 801616a:	bf14      	ite	ne
 801616c:	2202      	movne	r2, #2
 801616e:	2201      	moveq	r2, #1
 8016170:	6122      	str	r2, [r4, #16]
 8016172:	b1bd      	cbz	r5, 80161a4 <__d2b+0x94>
 8016174:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016178:	4405      	add	r5, r0
 801617a:	603d      	str	r5, [r7, #0]
 801617c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016180:	6030      	str	r0, [r6, #0]
 8016182:	4620      	mov	r0, r4
 8016184:	b003      	add	sp, #12
 8016186:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801618a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801618e:	e7d6      	b.n	801613e <__d2b+0x2e>
 8016190:	6161      	str	r1, [r4, #20]
 8016192:	e7e7      	b.n	8016164 <__d2b+0x54>
 8016194:	a801      	add	r0, sp, #4
 8016196:	f7ff fd61 	bl	8015c5c <__lo0bits>
 801619a:	9b01      	ldr	r3, [sp, #4]
 801619c:	6163      	str	r3, [r4, #20]
 801619e:	3020      	adds	r0, #32
 80161a0:	2201      	movs	r2, #1
 80161a2:	e7e5      	b.n	8016170 <__d2b+0x60>
 80161a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80161a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80161ac:	6038      	str	r0, [r7, #0]
 80161ae:	6918      	ldr	r0, [r3, #16]
 80161b0:	f7ff fd34 	bl	8015c1c <__hi0bits>
 80161b4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80161b8:	e7e2      	b.n	8016180 <__d2b+0x70>
 80161ba:	bf00      	nop
 80161bc:	08018663 	.word	0x08018663
 80161c0:	08018674 	.word	0x08018674

080161c4 <__ssputs_r>:
 80161c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80161c8:	688e      	ldr	r6, [r1, #8]
 80161ca:	461f      	mov	r7, r3
 80161cc:	42be      	cmp	r6, r7
 80161ce:	680b      	ldr	r3, [r1, #0]
 80161d0:	4682      	mov	sl, r0
 80161d2:	460c      	mov	r4, r1
 80161d4:	4690      	mov	r8, r2
 80161d6:	d82c      	bhi.n	8016232 <__ssputs_r+0x6e>
 80161d8:	898a      	ldrh	r2, [r1, #12]
 80161da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80161de:	d026      	beq.n	801622e <__ssputs_r+0x6a>
 80161e0:	6965      	ldr	r5, [r4, #20]
 80161e2:	6909      	ldr	r1, [r1, #16]
 80161e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80161e8:	eba3 0901 	sub.w	r9, r3, r1
 80161ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80161f0:	1c7b      	adds	r3, r7, #1
 80161f2:	444b      	add	r3, r9
 80161f4:	106d      	asrs	r5, r5, #1
 80161f6:	429d      	cmp	r5, r3
 80161f8:	bf38      	it	cc
 80161fa:	461d      	movcc	r5, r3
 80161fc:	0553      	lsls	r3, r2, #21
 80161fe:	d527      	bpl.n	8016250 <__ssputs_r+0x8c>
 8016200:	4629      	mov	r1, r5
 8016202:	f7fd fe89 	bl	8013f18 <_malloc_r>
 8016206:	4606      	mov	r6, r0
 8016208:	b360      	cbz	r0, 8016264 <__ssputs_r+0xa0>
 801620a:	6921      	ldr	r1, [r4, #16]
 801620c:	464a      	mov	r2, r9
 801620e:	f7fe fd88 	bl	8014d22 <memcpy>
 8016212:	89a3      	ldrh	r3, [r4, #12]
 8016214:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801621c:	81a3      	strh	r3, [r4, #12]
 801621e:	6126      	str	r6, [r4, #16]
 8016220:	6165      	str	r5, [r4, #20]
 8016222:	444e      	add	r6, r9
 8016224:	eba5 0509 	sub.w	r5, r5, r9
 8016228:	6026      	str	r6, [r4, #0]
 801622a:	60a5      	str	r5, [r4, #8]
 801622c:	463e      	mov	r6, r7
 801622e:	42be      	cmp	r6, r7
 8016230:	d900      	bls.n	8016234 <__ssputs_r+0x70>
 8016232:	463e      	mov	r6, r7
 8016234:	6820      	ldr	r0, [r4, #0]
 8016236:	4632      	mov	r2, r6
 8016238:	4641      	mov	r1, r8
 801623a:	f7fe fc84 	bl	8014b46 <memmove>
 801623e:	68a3      	ldr	r3, [r4, #8]
 8016240:	1b9b      	subs	r3, r3, r6
 8016242:	60a3      	str	r3, [r4, #8]
 8016244:	6823      	ldr	r3, [r4, #0]
 8016246:	4433      	add	r3, r6
 8016248:	6023      	str	r3, [r4, #0]
 801624a:	2000      	movs	r0, #0
 801624c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016250:	462a      	mov	r2, r5
 8016252:	f000 fa03 	bl	801665c <_realloc_r>
 8016256:	4606      	mov	r6, r0
 8016258:	2800      	cmp	r0, #0
 801625a:	d1e0      	bne.n	801621e <__ssputs_r+0x5a>
 801625c:	6921      	ldr	r1, [r4, #16]
 801625e:	4650      	mov	r0, sl
 8016260:	f7ff fbe8 	bl	8015a34 <_free_r>
 8016264:	230c      	movs	r3, #12
 8016266:	f8ca 3000 	str.w	r3, [sl]
 801626a:	89a3      	ldrh	r3, [r4, #12]
 801626c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016270:	81a3      	strh	r3, [r4, #12]
 8016272:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016276:	e7e9      	b.n	801624c <__ssputs_r+0x88>

08016278 <_svfiprintf_r>:
 8016278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801627c:	4698      	mov	r8, r3
 801627e:	898b      	ldrh	r3, [r1, #12]
 8016280:	061b      	lsls	r3, r3, #24
 8016282:	b09d      	sub	sp, #116	; 0x74
 8016284:	4607      	mov	r7, r0
 8016286:	460d      	mov	r5, r1
 8016288:	4614      	mov	r4, r2
 801628a:	d50e      	bpl.n	80162aa <_svfiprintf_r+0x32>
 801628c:	690b      	ldr	r3, [r1, #16]
 801628e:	b963      	cbnz	r3, 80162aa <_svfiprintf_r+0x32>
 8016290:	2140      	movs	r1, #64	; 0x40
 8016292:	f7fd fe41 	bl	8013f18 <_malloc_r>
 8016296:	6028      	str	r0, [r5, #0]
 8016298:	6128      	str	r0, [r5, #16]
 801629a:	b920      	cbnz	r0, 80162a6 <_svfiprintf_r+0x2e>
 801629c:	230c      	movs	r3, #12
 801629e:	603b      	str	r3, [r7, #0]
 80162a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80162a4:	e0d0      	b.n	8016448 <_svfiprintf_r+0x1d0>
 80162a6:	2340      	movs	r3, #64	; 0x40
 80162a8:	616b      	str	r3, [r5, #20]
 80162aa:	2300      	movs	r3, #0
 80162ac:	9309      	str	r3, [sp, #36]	; 0x24
 80162ae:	2320      	movs	r3, #32
 80162b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80162b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80162b8:	2330      	movs	r3, #48	; 0x30
 80162ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8016460 <_svfiprintf_r+0x1e8>
 80162be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80162c2:	f04f 0901 	mov.w	r9, #1
 80162c6:	4623      	mov	r3, r4
 80162c8:	469a      	mov	sl, r3
 80162ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80162ce:	b10a      	cbz	r2, 80162d4 <_svfiprintf_r+0x5c>
 80162d0:	2a25      	cmp	r2, #37	; 0x25
 80162d2:	d1f9      	bne.n	80162c8 <_svfiprintf_r+0x50>
 80162d4:	ebba 0b04 	subs.w	fp, sl, r4
 80162d8:	d00b      	beq.n	80162f2 <_svfiprintf_r+0x7a>
 80162da:	465b      	mov	r3, fp
 80162dc:	4622      	mov	r2, r4
 80162de:	4629      	mov	r1, r5
 80162e0:	4638      	mov	r0, r7
 80162e2:	f7ff ff6f 	bl	80161c4 <__ssputs_r>
 80162e6:	3001      	adds	r0, #1
 80162e8:	f000 80a9 	beq.w	801643e <_svfiprintf_r+0x1c6>
 80162ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80162ee:	445a      	add	r2, fp
 80162f0:	9209      	str	r2, [sp, #36]	; 0x24
 80162f2:	f89a 3000 	ldrb.w	r3, [sl]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	f000 80a1 	beq.w	801643e <_svfiprintf_r+0x1c6>
 80162fc:	2300      	movs	r3, #0
 80162fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016302:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016306:	f10a 0a01 	add.w	sl, sl, #1
 801630a:	9304      	str	r3, [sp, #16]
 801630c:	9307      	str	r3, [sp, #28]
 801630e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016312:	931a      	str	r3, [sp, #104]	; 0x68
 8016314:	4654      	mov	r4, sl
 8016316:	2205      	movs	r2, #5
 8016318:	f814 1b01 	ldrb.w	r1, [r4], #1
 801631c:	4850      	ldr	r0, [pc, #320]	; (8016460 <_svfiprintf_r+0x1e8>)
 801631e:	f7e9 ff87 	bl	8000230 <memchr>
 8016322:	9a04      	ldr	r2, [sp, #16]
 8016324:	b9d8      	cbnz	r0, 801635e <_svfiprintf_r+0xe6>
 8016326:	06d0      	lsls	r0, r2, #27
 8016328:	bf44      	itt	mi
 801632a:	2320      	movmi	r3, #32
 801632c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016330:	0711      	lsls	r1, r2, #28
 8016332:	bf44      	itt	mi
 8016334:	232b      	movmi	r3, #43	; 0x2b
 8016336:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801633a:	f89a 3000 	ldrb.w	r3, [sl]
 801633e:	2b2a      	cmp	r3, #42	; 0x2a
 8016340:	d015      	beq.n	801636e <_svfiprintf_r+0xf6>
 8016342:	9a07      	ldr	r2, [sp, #28]
 8016344:	4654      	mov	r4, sl
 8016346:	2000      	movs	r0, #0
 8016348:	f04f 0c0a 	mov.w	ip, #10
 801634c:	4621      	mov	r1, r4
 801634e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016352:	3b30      	subs	r3, #48	; 0x30
 8016354:	2b09      	cmp	r3, #9
 8016356:	d94d      	bls.n	80163f4 <_svfiprintf_r+0x17c>
 8016358:	b1b0      	cbz	r0, 8016388 <_svfiprintf_r+0x110>
 801635a:	9207      	str	r2, [sp, #28]
 801635c:	e014      	b.n	8016388 <_svfiprintf_r+0x110>
 801635e:	eba0 0308 	sub.w	r3, r0, r8
 8016362:	fa09 f303 	lsl.w	r3, r9, r3
 8016366:	4313      	orrs	r3, r2
 8016368:	9304      	str	r3, [sp, #16]
 801636a:	46a2      	mov	sl, r4
 801636c:	e7d2      	b.n	8016314 <_svfiprintf_r+0x9c>
 801636e:	9b03      	ldr	r3, [sp, #12]
 8016370:	1d19      	adds	r1, r3, #4
 8016372:	681b      	ldr	r3, [r3, #0]
 8016374:	9103      	str	r1, [sp, #12]
 8016376:	2b00      	cmp	r3, #0
 8016378:	bfbb      	ittet	lt
 801637a:	425b      	neglt	r3, r3
 801637c:	f042 0202 	orrlt.w	r2, r2, #2
 8016380:	9307      	strge	r3, [sp, #28]
 8016382:	9307      	strlt	r3, [sp, #28]
 8016384:	bfb8      	it	lt
 8016386:	9204      	strlt	r2, [sp, #16]
 8016388:	7823      	ldrb	r3, [r4, #0]
 801638a:	2b2e      	cmp	r3, #46	; 0x2e
 801638c:	d10c      	bne.n	80163a8 <_svfiprintf_r+0x130>
 801638e:	7863      	ldrb	r3, [r4, #1]
 8016390:	2b2a      	cmp	r3, #42	; 0x2a
 8016392:	d134      	bne.n	80163fe <_svfiprintf_r+0x186>
 8016394:	9b03      	ldr	r3, [sp, #12]
 8016396:	1d1a      	adds	r2, r3, #4
 8016398:	681b      	ldr	r3, [r3, #0]
 801639a:	9203      	str	r2, [sp, #12]
 801639c:	2b00      	cmp	r3, #0
 801639e:	bfb8      	it	lt
 80163a0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80163a4:	3402      	adds	r4, #2
 80163a6:	9305      	str	r3, [sp, #20]
 80163a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8016470 <_svfiprintf_r+0x1f8>
 80163ac:	7821      	ldrb	r1, [r4, #0]
 80163ae:	2203      	movs	r2, #3
 80163b0:	4650      	mov	r0, sl
 80163b2:	f7e9 ff3d 	bl	8000230 <memchr>
 80163b6:	b138      	cbz	r0, 80163c8 <_svfiprintf_r+0x150>
 80163b8:	9b04      	ldr	r3, [sp, #16]
 80163ba:	eba0 000a 	sub.w	r0, r0, sl
 80163be:	2240      	movs	r2, #64	; 0x40
 80163c0:	4082      	lsls	r2, r0
 80163c2:	4313      	orrs	r3, r2
 80163c4:	3401      	adds	r4, #1
 80163c6:	9304      	str	r3, [sp, #16]
 80163c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80163cc:	4825      	ldr	r0, [pc, #148]	; (8016464 <_svfiprintf_r+0x1ec>)
 80163ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80163d2:	2206      	movs	r2, #6
 80163d4:	f7e9 ff2c 	bl	8000230 <memchr>
 80163d8:	2800      	cmp	r0, #0
 80163da:	d038      	beq.n	801644e <_svfiprintf_r+0x1d6>
 80163dc:	4b22      	ldr	r3, [pc, #136]	; (8016468 <_svfiprintf_r+0x1f0>)
 80163de:	bb1b      	cbnz	r3, 8016428 <_svfiprintf_r+0x1b0>
 80163e0:	9b03      	ldr	r3, [sp, #12]
 80163e2:	3307      	adds	r3, #7
 80163e4:	f023 0307 	bic.w	r3, r3, #7
 80163e8:	3308      	adds	r3, #8
 80163ea:	9303      	str	r3, [sp, #12]
 80163ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163ee:	4433      	add	r3, r6
 80163f0:	9309      	str	r3, [sp, #36]	; 0x24
 80163f2:	e768      	b.n	80162c6 <_svfiprintf_r+0x4e>
 80163f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80163f8:	460c      	mov	r4, r1
 80163fa:	2001      	movs	r0, #1
 80163fc:	e7a6      	b.n	801634c <_svfiprintf_r+0xd4>
 80163fe:	2300      	movs	r3, #0
 8016400:	3401      	adds	r4, #1
 8016402:	9305      	str	r3, [sp, #20]
 8016404:	4619      	mov	r1, r3
 8016406:	f04f 0c0a 	mov.w	ip, #10
 801640a:	4620      	mov	r0, r4
 801640c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016410:	3a30      	subs	r2, #48	; 0x30
 8016412:	2a09      	cmp	r2, #9
 8016414:	d903      	bls.n	801641e <_svfiprintf_r+0x1a6>
 8016416:	2b00      	cmp	r3, #0
 8016418:	d0c6      	beq.n	80163a8 <_svfiprintf_r+0x130>
 801641a:	9105      	str	r1, [sp, #20]
 801641c:	e7c4      	b.n	80163a8 <_svfiprintf_r+0x130>
 801641e:	fb0c 2101 	mla	r1, ip, r1, r2
 8016422:	4604      	mov	r4, r0
 8016424:	2301      	movs	r3, #1
 8016426:	e7f0      	b.n	801640a <_svfiprintf_r+0x192>
 8016428:	ab03      	add	r3, sp, #12
 801642a:	9300      	str	r3, [sp, #0]
 801642c:	462a      	mov	r2, r5
 801642e:	4b0f      	ldr	r3, [pc, #60]	; (801646c <_svfiprintf_r+0x1f4>)
 8016430:	a904      	add	r1, sp, #16
 8016432:	4638      	mov	r0, r7
 8016434:	f7fd fe9c 	bl	8014170 <_printf_float>
 8016438:	1c42      	adds	r2, r0, #1
 801643a:	4606      	mov	r6, r0
 801643c:	d1d6      	bne.n	80163ec <_svfiprintf_r+0x174>
 801643e:	89ab      	ldrh	r3, [r5, #12]
 8016440:	065b      	lsls	r3, r3, #25
 8016442:	f53f af2d 	bmi.w	80162a0 <_svfiprintf_r+0x28>
 8016446:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016448:	b01d      	add	sp, #116	; 0x74
 801644a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801644e:	ab03      	add	r3, sp, #12
 8016450:	9300      	str	r3, [sp, #0]
 8016452:	462a      	mov	r2, r5
 8016454:	4b05      	ldr	r3, [pc, #20]	; (801646c <_svfiprintf_r+0x1f4>)
 8016456:	a904      	add	r1, sp, #16
 8016458:	4638      	mov	r0, r7
 801645a:	f7fe f92d 	bl	80146b8 <_printf_i>
 801645e:	e7eb      	b.n	8016438 <_svfiprintf_r+0x1c0>
 8016460:	080187cc 	.word	0x080187cc
 8016464:	080187d6 	.word	0x080187d6
 8016468:	08014171 	.word	0x08014171
 801646c:	080161c5 	.word	0x080161c5
 8016470:	080187d2 	.word	0x080187d2

08016474 <__sflush_r>:
 8016474:	898a      	ldrh	r2, [r1, #12]
 8016476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801647a:	4605      	mov	r5, r0
 801647c:	0710      	lsls	r0, r2, #28
 801647e:	460c      	mov	r4, r1
 8016480:	d458      	bmi.n	8016534 <__sflush_r+0xc0>
 8016482:	684b      	ldr	r3, [r1, #4]
 8016484:	2b00      	cmp	r3, #0
 8016486:	dc05      	bgt.n	8016494 <__sflush_r+0x20>
 8016488:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801648a:	2b00      	cmp	r3, #0
 801648c:	dc02      	bgt.n	8016494 <__sflush_r+0x20>
 801648e:	2000      	movs	r0, #0
 8016490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016494:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016496:	2e00      	cmp	r6, #0
 8016498:	d0f9      	beq.n	801648e <__sflush_r+0x1a>
 801649a:	2300      	movs	r3, #0
 801649c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80164a0:	682f      	ldr	r7, [r5, #0]
 80164a2:	6a21      	ldr	r1, [r4, #32]
 80164a4:	602b      	str	r3, [r5, #0]
 80164a6:	d032      	beq.n	801650e <__sflush_r+0x9a>
 80164a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80164aa:	89a3      	ldrh	r3, [r4, #12]
 80164ac:	075a      	lsls	r2, r3, #29
 80164ae:	d505      	bpl.n	80164bc <__sflush_r+0x48>
 80164b0:	6863      	ldr	r3, [r4, #4]
 80164b2:	1ac0      	subs	r0, r0, r3
 80164b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80164b6:	b10b      	cbz	r3, 80164bc <__sflush_r+0x48>
 80164b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80164ba:	1ac0      	subs	r0, r0, r3
 80164bc:	2300      	movs	r3, #0
 80164be:	4602      	mov	r2, r0
 80164c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80164c2:	6a21      	ldr	r1, [r4, #32]
 80164c4:	4628      	mov	r0, r5
 80164c6:	47b0      	blx	r6
 80164c8:	1c43      	adds	r3, r0, #1
 80164ca:	89a3      	ldrh	r3, [r4, #12]
 80164cc:	d106      	bne.n	80164dc <__sflush_r+0x68>
 80164ce:	6829      	ldr	r1, [r5, #0]
 80164d0:	291d      	cmp	r1, #29
 80164d2:	d82b      	bhi.n	801652c <__sflush_r+0xb8>
 80164d4:	4a29      	ldr	r2, [pc, #164]	; (801657c <__sflush_r+0x108>)
 80164d6:	410a      	asrs	r2, r1
 80164d8:	07d6      	lsls	r6, r2, #31
 80164da:	d427      	bmi.n	801652c <__sflush_r+0xb8>
 80164dc:	2200      	movs	r2, #0
 80164de:	6062      	str	r2, [r4, #4]
 80164e0:	04d9      	lsls	r1, r3, #19
 80164e2:	6922      	ldr	r2, [r4, #16]
 80164e4:	6022      	str	r2, [r4, #0]
 80164e6:	d504      	bpl.n	80164f2 <__sflush_r+0x7e>
 80164e8:	1c42      	adds	r2, r0, #1
 80164ea:	d101      	bne.n	80164f0 <__sflush_r+0x7c>
 80164ec:	682b      	ldr	r3, [r5, #0]
 80164ee:	b903      	cbnz	r3, 80164f2 <__sflush_r+0x7e>
 80164f0:	6560      	str	r0, [r4, #84]	; 0x54
 80164f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80164f4:	602f      	str	r7, [r5, #0]
 80164f6:	2900      	cmp	r1, #0
 80164f8:	d0c9      	beq.n	801648e <__sflush_r+0x1a>
 80164fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80164fe:	4299      	cmp	r1, r3
 8016500:	d002      	beq.n	8016508 <__sflush_r+0x94>
 8016502:	4628      	mov	r0, r5
 8016504:	f7ff fa96 	bl	8015a34 <_free_r>
 8016508:	2000      	movs	r0, #0
 801650a:	6360      	str	r0, [r4, #52]	; 0x34
 801650c:	e7c0      	b.n	8016490 <__sflush_r+0x1c>
 801650e:	2301      	movs	r3, #1
 8016510:	4628      	mov	r0, r5
 8016512:	47b0      	blx	r6
 8016514:	1c41      	adds	r1, r0, #1
 8016516:	d1c8      	bne.n	80164aa <__sflush_r+0x36>
 8016518:	682b      	ldr	r3, [r5, #0]
 801651a:	2b00      	cmp	r3, #0
 801651c:	d0c5      	beq.n	80164aa <__sflush_r+0x36>
 801651e:	2b1d      	cmp	r3, #29
 8016520:	d001      	beq.n	8016526 <__sflush_r+0xb2>
 8016522:	2b16      	cmp	r3, #22
 8016524:	d101      	bne.n	801652a <__sflush_r+0xb6>
 8016526:	602f      	str	r7, [r5, #0]
 8016528:	e7b1      	b.n	801648e <__sflush_r+0x1a>
 801652a:	89a3      	ldrh	r3, [r4, #12]
 801652c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016530:	81a3      	strh	r3, [r4, #12]
 8016532:	e7ad      	b.n	8016490 <__sflush_r+0x1c>
 8016534:	690f      	ldr	r7, [r1, #16]
 8016536:	2f00      	cmp	r7, #0
 8016538:	d0a9      	beq.n	801648e <__sflush_r+0x1a>
 801653a:	0793      	lsls	r3, r2, #30
 801653c:	680e      	ldr	r6, [r1, #0]
 801653e:	bf08      	it	eq
 8016540:	694b      	ldreq	r3, [r1, #20]
 8016542:	600f      	str	r7, [r1, #0]
 8016544:	bf18      	it	ne
 8016546:	2300      	movne	r3, #0
 8016548:	eba6 0807 	sub.w	r8, r6, r7
 801654c:	608b      	str	r3, [r1, #8]
 801654e:	f1b8 0f00 	cmp.w	r8, #0
 8016552:	dd9c      	ble.n	801648e <__sflush_r+0x1a>
 8016554:	6a21      	ldr	r1, [r4, #32]
 8016556:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016558:	4643      	mov	r3, r8
 801655a:	463a      	mov	r2, r7
 801655c:	4628      	mov	r0, r5
 801655e:	47b0      	blx	r6
 8016560:	2800      	cmp	r0, #0
 8016562:	dc06      	bgt.n	8016572 <__sflush_r+0xfe>
 8016564:	89a3      	ldrh	r3, [r4, #12]
 8016566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801656a:	81a3      	strh	r3, [r4, #12]
 801656c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016570:	e78e      	b.n	8016490 <__sflush_r+0x1c>
 8016572:	4407      	add	r7, r0
 8016574:	eba8 0800 	sub.w	r8, r8, r0
 8016578:	e7e9      	b.n	801654e <__sflush_r+0xda>
 801657a:	bf00      	nop
 801657c:	dfbffffe 	.word	0xdfbffffe

08016580 <_fflush_r>:
 8016580:	b538      	push	{r3, r4, r5, lr}
 8016582:	690b      	ldr	r3, [r1, #16]
 8016584:	4605      	mov	r5, r0
 8016586:	460c      	mov	r4, r1
 8016588:	b913      	cbnz	r3, 8016590 <_fflush_r+0x10>
 801658a:	2500      	movs	r5, #0
 801658c:	4628      	mov	r0, r5
 801658e:	bd38      	pop	{r3, r4, r5, pc}
 8016590:	b118      	cbz	r0, 801659a <_fflush_r+0x1a>
 8016592:	6a03      	ldr	r3, [r0, #32]
 8016594:	b90b      	cbnz	r3, 801659a <_fflush_r+0x1a>
 8016596:	f7fe fa3d 	bl	8014a14 <__sinit>
 801659a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d0f3      	beq.n	801658a <_fflush_r+0xa>
 80165a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80165a4:	07d0      	lsls	r0, r2, #31
 80165a6:	d404      	bmi.n	80165b2 <_fflush_r+0x32>
 80165a8:	0599      	lsls	r1, r3, #22
 80165aa:	d402      	bmi.n	80165b2 <_fflush_r+0x32>
 80165ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80165ae:	f7fe fbb6 	bl	8014d1e <__retarget_lock_acquire_recursive>
 80165b2:	4628      	mov	r0, r5
 80165b4:	4621      	mov	r1, r4
 80165b6:	f7ff ff5d 	bl	8016474 <__sflush_r>
 80165ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80165bc:	07da      	lsls	r2, r3, #31
 80165be:	4605      	mov	r5, r0
 80165c0:	d4e4      	bmi.n	801658c <_fflush_r+0xc>
 80165c2:	89a3      	ldrh	r3, [r4, #12]
 80165c4:	059b      	lsls	r3, r3, #22
 80165c6:	d4e1      	bmi.n	801658c <_fflush_r+0xc>
 80165c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80165ca:	f7fe fba9 	bl	8014d20 <__retarget_lock_release_recursive>
 80165ce:	e7dd      	b.n	801658c <_fflush_r+0xc>

080165d0 <__assert_func>:
 80165d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80165d2:	4614      	mov	r4, r2
 80165d4:	461a      	mov	r2, r3
 80165d6:	4b09      	ldr	r3, [pc, #36]	; (80165fc <__assert_func+0x2c>)
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	4605      	mov	r5, r0
 80165dc:	68d8      	ldr	r0, [r3, #12]
 80165de:	b14c      	cbz	r4, 80165f4 <__assert_func+0x24>
 80165e0:	4b07      	ldr	r3, [pc, #28]	; (8016600 <__assert_func+0x30>)
 80165e2:	9100      	str	r1, [sp, #0]
 80165e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80165e8:	4906      	ldr	r1, [pc, #24]	; (8016604 <__assert_func+0x34>)
 80165ea:	462b      	mov	r3, r5
 80165ec:	f000 f872 	bl	80166d4 <fiprintf>
 80165f0:	f7fd fc5a 	bl	8013ea8 <abort>
 80165f4:	4b04      	ldr	r3, [pc, #16]	; (8016608 <__assert_func+0x38>)
 80165f6:	461c      	mov	r4, r3
 80165f8:	e7f3      	b.n	80165e2 <__assert_func+0x12>
 80165fa:	bf00      	nop
 80165fc:	2000006c 	.word	0x2000006c
 8016600:	080187e7 	.word	0x080187e7
 8016604:	080187f4 	.word	0x080187f4
 8016608:	08018822 	.word	0x08018822

0801660c <_calloc_r>:
 801660c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801660e:	fba1 2402 	umull	r2, r4, r1, r2
 8016612:	b94c      	cbnz	r4, 8016628 <_calloc_r+0x1c>
 8016614:	4611      	mov	r1, r2
 8016616:	9201      	str	r2, [sp, #4]
 8016618:	f7fd fc7e 	bl	8013f18 <_malloc_r>
 801661c:	9a01      	ldr	r2, [sp, #4]
 801661e:	4605      	mov	r5, r0
 8016620:	b930      	cbnz	r0, 8016630 <_calloc_r+0x24>
 8016622:	4628      	mov	r0, r5
 8016624:	b003      	add	sp, #12
 8016626:	bd30      	pop	{r4, r5, pc}
 8016628:	220c      	movs	r2, #12
 801662a:	6002      	str	r2, [r0, #0]
 801662c:	2500      	movs	r5, #0
 801662e:	e7f8      	b.n	8016622 <_calloc_r+0x16>
 8016630:	4621      	mov	r1, r4
 8016632:	f7fe faa2 	bl	8014b7a <memset>
 8016636:	e7f4      	b.n	8016622 <_calloc_r+0x16>

08016638 <__ascii_mbtowc>:
 8016638:	b082      	sub	sp, #8
 801663a:	b901      	cbnz	r1, 801663e <__ascii_mbtowc+0x6>
 801663c:	a901      	add	r1, sp, #4
 801663e:	b142      	cbz	r2, 8016652 <__ascii_mbtowc+0x1a>
 8016640:	b14b      	cbz	r3, 8016656 <__ascii_mbtowc+0x1e>
 8016642:	7813      	ldrb	r3, [r2, #0]
 8016644:	600b      	str	r3, [r1, #0]
 8016646:	7812      	ldrb	r2, [r2, #0]
 8016648:	1e10      	subs	r0, r2, #0
 801664a:	bf18      	it	ne
 801664c:	2001      	movne	r0, #1
 801664e:	b002      	add	sp, #8
 8016650:	4770      	bx	lr
 8016652:	4610      	mov	r0, r2
 8016654:	e7fb      	b.n	801664e <__ascii_mbtowc+0x16>
 8016656:	f06f 0001 	mvn.w	r0, #1
 801665a:	e7f8      	b.n	801664e <__ascii_mbtowc+0x16>

0801665c <_realloc_r>:
 801665c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016660:	4680      	mov	r8, r0
 8016662:	4614      	mov	r4, r2
 8016664:	460e      	mov	r6, r1
 8016666:	b921      	cbnz	r1, 8016672 <_realloc_r+0x16>
 8016668:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801666c:	4611      	mov	r1, r2
 801666e:	f7fd bc53 	b.w	8013f18 <_malloc_r>
 8016672:	b92a      	cbnz	r2, 8016680 <_realloc_r+0x24>
 8016674:	f7ff f9de 	bl	8015a34 <_free_r>
 8016678:	4625      	mov	r5, r4
 801667a:	4628      	mov	r0, r5
 801667c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016680:	f000 f83a 	bl	80166f8 <_malloc_usable_size_r>
 8016684:	4284      	cmp	r4, r0
 8016686:	4607      	mov	r7, r0
 8016688:	d802      	bhi.n	8016690 <_realloc_r+0x34>
 801668a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801668e:	d812      	bhi.n	80166b6 <_realloc_r+0x5a>
 8016690:	4621      	mov	r1, r4
 8016692:	4640      	mov	r0, r8
 8016694:	f7fd fc40 	bl	8013f18 <_malloc_r>
 8016698:	4605      	mov	r5, r0
 801669a:	2800      	cmp	r0, #0
 801669c:	d0ed      	beq.n	801667a <_realloc_r+0x1e>
 801669e:	42bc      	cmp	r4, r7
 80166a0:	4622      	mov	r2, r4
 80166a2:	4631      	mov	r1, r6
 80166a4:	bf28      	it	cs
 80166a6:	463a      	movcs	r2, r7
 80166a8:	f7fe fb3b 	bl	8014d22 <memcpy>
 80166ac:	4631      	mov	r1, r6
 80166ae:	4640      	mov	r0, r8
 80166b0:	f7ff f9c0 	bl	8015a34 <_free_r>
 80166b4:	e7e1      	b.n	801667a <_realloc_r+0x1e>
 80166b6:	4635      	mov	r5, r6
 80166b8:	e7df      	b.n	801667a <_realloc_r+0x1e>

080166ba <__ascii_wctomb>:
 80166ba:	b149      	cbz	r1, 80166d0 <__ascii_wctomb+0x16>
 80166bc:	2aff      	cmp	r2, #255	; 0xff
 80166be:	bf85      	ittet	hi
 80166c0:	238a      	movhi	r3, #138	; 0x8a
 80166c2:	6003      	strhi	r3, [r0, #0]
 80166c4:	700a      	strbls	r2, [r1, #0]
 80166c6:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80166ca:	bf98      	it	ls
 80166cc:	2001      	movls	r0, #1
 80166ce:	4770      	bx	lr
 80166d0:	4608      	mov	r0, r1
 80166d2:	4770      	bx	lr

080166d4 <fiprintf>:
 80166d4:	b40e      	push	{r1, r2, r3}
 80166d6:	b503      	push	{r0, r1, lr}
 80166d8:	4601      	mov	r1, r0
 80166da:	ab03      	add	r3, sp, #12
 80166dc:	4805      	ldr	r0, [pc, #20]	; (80166f4 <fiprintf+0x20>)
 80166de:	f853 2b04 	ldr.w	r2, [r3], #4
 80166e2:	6800      	ldr	r0, [r0, #0]
 80166e4:	9301      	str	r3, [sp, #4]
 80166e6:	f000 f839 	bl	801675c <_vfiprintf_r>
 80166ea:	b002      	add	sp, #8
 80166ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80166f0:	b003      	add	sp, #12
 80166f2:	4770      	bx	lr
 80166f4:	2000006c 	.word	0x2000006c

080166f8 <_malloc_usable_size_r>:
 80166f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80166fc:	1f18      	subs	r0, r3, #4
 80166fe:	2b00      	cmp	r3, #0
 8016700:	bfbc      	itt	lt
 8016702:	580b      	ldrlt	r3, [r1, r0]
 8016704:	18c0      	addlt	r0, r0, r3
 8016706:	4770      	bx	lr

08016708 <__sfputc_r>:
 8016708:	6893      	ldr	r3, [r2, #8]
 801670a:	3b01      	subs	r3, #1
 801670c:	2b00      	cmp	r3, #0
 801670e:	b410      	push	{r4}
 8016710:	6093      	str	r3, [r2, #8]
 8016712:	da08      	bge.n	8016726 <__sfputc_r+0x1e>
 8016714:	6994      	ldr	r4, [r2, #24]
 8016716:	42a3      	cmp	r3, r4
 8016718:	db01      	blt.n	801671e <__sfputc_r+0x16>
 801671a:	290a      	cmp	r1, #10
 801671c:	d103      	bne.n	8016726 <__sfputc_r+0x1e>
 801671e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016722:	f000 b935 	b.w	8016990 <__swbuf_r>
 8016726:	6813      	ldr	r3, [r2, #0]
 8016728:	1c58      	adds	r0, r3, #1
 801672a:	6010      	str	r0, [r2, #0]
 801672c:	7019      	strb	r1, [r3, #0]
 801672e:	4608      	mov	r0, r1
 8016730:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016734:	4770      	bx	lr

08016736 <__sfputs_r>:
 8016736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016738:	4606      	mov	r6, r0
 801673a:	460f      	mov	r7, r1
 801673c:	4614      	mov	r4, r2
 801673e:	18d5      	adds	r5, r2, r3
 8016740:	42ac      	cmp	r4, r5
 8016742:	d101      	bne.n	8016748 <__sfputs_r+0x12>
 8016744:	2000      	movs	r0, #0
 8016746:	e007      	b.n	8016758 <__sfputs_r+0x22>
 8016748:	f814 1b01 	ldrb.w	r1, [r4], #1
 801674c:	463a      	mov	r2, r7
 801674e:	4630      	mov	r0, r6
 8016750:	f7ff ffda 	bl	8016708 <__sfputc_r>
 8016754:	1c43      	adds	r3, r0, #1
 8016756:	d1f3      	bne.n	8016740 <__sfputs_r+0xa>
 8016758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801675c <_vfiprintf_r>:
 801675c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016760:	460d      	mov	r5, r1
 8016762:	b09d      	sub	sp, #116	; 0x74
 8016764:	4614      	mov	r4, r2
 8016766:	4698      	mov	r8, r3
 8016768:	4606      	mov	r6, r0
 801676a:	b118      	cbz	r0, 8016774 <_vfiprintf_r+0x18>
 801676c:	6a03      	ldr	r3, [r0, #32]
 801676e:	b90b      	cbnz	r3, 8016774 <_vfiprintf_r+0x18>
 8016770:	f7fe f950 	bl	8014a14 <__sinit>
 8016774:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016776:	07d9      	lsls	r1, r3, #31
 8016778:	d405      	bmi.n	8016786 <_vfiprintf_r+0x2a>
 801677a:	89ab      	ldrh	r3, [r5, #12]
 801677c:	059a      	lsls	r2, r3, #22
 801677e:	d402      	bmi.n	8016786 <_vfiprintf_r+0x2a>
 8016780:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016782:	f7fe facc 	bl	8014d1e <__retarget_lock_acquire_recursive>
 8016786:	89ab      	ldrh	r3, [r5, #12]
 8016788:	071b      	lsls	r3, r3, #28
 801678a:	d501      	bpl.n	8016790 <_vfiprintf_r+0x34>
 801678c:	692b      	ldr	r3, [r5, #16]
 801678e:	b99b      	cbnz	r3, 80167b8 <_vfiprintf_r+0x5c>
 8016790:	4629      	mov	r1, r5
 8016792:	4630      	mov	r0, r6
 8016794:	f000 f93a 	bl	8016a0c <__swsetup_r>
 8016798:	b170      	cbz	r0, 80167b8 <_vfiprintf_r+0x5c>
 801679a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801679c:	07dc      	lsls	r4, r3, #31
 801679e:	d504      	bpl.n	80167aa <_vfiprintf_r+0x4e>
 80167a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80167a4:	b01d      	add	sp, #116	; 0x74
 80167a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167aa:	89ab      	ldrh	r3, [r5, #12]
 80167ac:	0598      	lsls	r0, r3, #22
 80167ae:	d4f7      	bmi.n	80167a0 <_vfiprintf_r+0x44>
 80167b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80167b2:	f7fe fab5 	bl	8014d20 <__retarget_lock_release_recursive>
 80167b6:	e7f3      	b.n	80167a0 <_vfiprintf_r+0x44>
 80167b8:	2300      	movs	r3, #0
 80167ba:	9309      	str	r3, [sp, #36]	; 0x24
 80167bc:	2320      	movs	r3, #32
 80167be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80167c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80167c6:	2330      	movs	r3, #48	; 0x30
 80167c8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801697c <_vfiprintf_r+0x220>
 80167cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80167d0:	f04f 0901 	mov.w	r9, #1
 80167d4:	4623      	mov	r3, r4
 80167d6:	469a      	mov	sl, r3
 80167d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80167dc:	b10a      	cbz	r2, 80167e2 <_vfiprintf_r+0x86>
 80167de:	2a25      	cmp	r2, #37	; 0x25
 80167e0:	d1f9      	bne.n	80167d6 <_vfiprintf_r+0x7a>
 80167e2:	ebba 0b04 	subs.w	fp, sl, r4
 80167e6:	d00b      	beq.n	8016800 <_vfiprintf_r+0xa4>
 80167e8:	465b      	mov	r3, fp
 80167ea:	4622      	mov	r2, r4
 80167ec:	4629      	mov	r1, r5
 80167ee:	4630      	mov	r0, r6
 80167f0:	f7ff ffa1 	bl	8016736 <__sfputs_r>
 80167f4:	3001      	adds	r0, #1
 80167f6:	f000 80a9 	beq.w	801694c <_vfiprintf_r+0x1f0>
 80167fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80167fc:	445a      	add	r2, fp
 80167fe:	9209      	str	r2, [sp, #36]	; 0x24
 8016800:	f89a 3000 	ldrb.w	r3, [sl]
 8016804:	2b00      	cmp	r3, #0
 8016806:	f000 80a1 	beq.w	801694c <_vfiprintf_r+0x1f0>
 801680a:	2300      	movs	r3, #0
 801680c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016810:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016814:	f10a 0a01 	add.w	sl, sl, #1
 8016818:	9304      	str	r3, [sp, #16]
 801681a:	9307      	str	r3, [sp, #28]
 801681c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016820:	931a      	str	r3, [sp, #104]	; 0x68
 8016822:	4654      	mov	r4, sl
 8016824:	2205      	movs	r2, #5
 8016826:	f814 1b01 	ldrb.w	r1, [r4], #1
 801682a:	4854      	ldr	r0, [pc, #336]	; (801697c <_vfiprintf_r+0x220>)
 801682c:	f7e9 fd00 	bl	8000230 <memchr>
 8016830:	9a04      	ldr	r2, [sp, #16]
 8016832:	b9d8      	cbnz	r0, 801686c <_vfiprintf_r+0x110>
 8016834:	06d1      	lsls	r1, r2, #27
 8016836:	bf44      	itt	mi
 8016838:	2320      	movmi	r3, #32
 801683a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801683e:	0713      	lsls	r3, r2, #28
 8016840:	bf44      	itt	mi
 8016842:	232b      	movmi	r3, #43	; 0x2b
 8016844:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016848:	f89a 3000 	ldrb.w	r3, [sl]
 801684c:	2b2a      	cmp	r3, #42	; 0x2a
 801684e:	d015      	beq.n	801687c <_vfiprintf_r+0x120>
 8016850:	9a07      	ldr	r2, [sp, #28]
 8016852:	4654      	mov	r4, sl
 8016854:	2000      	movs	r0, #0
 8016856:	f04f 0c0a 	mov.w	ip, #10
 801685a:	4621      	mov	r1, r4
 801685c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016860:	3b30      	subs	r3, #48	; 0x30
 8016862:	2b09      	cmp	r3, #9
 8016864:	d94d      	bls.n	8016902 <_vfiprintf_r+0x1a6>
 8016866:	b1b0      	cbz	r0, 8016896 <_vfiprintf_r+0x13a>
 8016868:	9207      	str	r2, [sp, #28]
 801686a:	e014      	b.n	8016896 <_vfiprintf_r+0x13a>
 801686c:	eba0 0308 	sub.w	r3, r0, r8
 8016870:	fa09 f303 	lsl.w	r3, r9, r3
 8016874:	4313      	orrs	r3, r2
 8016876:	9304      	str	r3, [sp, #16]
 8016878:	46a2      	mov	sl, r4
 801687a:	e7d2      	b.n	8016822 <_vfiprintf_r+0xc6>
 801687c:	9b03      	ldr	r3, [sp, #12]
 801687e:	1d19      	adds	r1, r3, #4
 8016880:	681b      	ldr	r3, [r3, #0]
 8016882:	9103      	str	r1, [sp, #12]
 8016884:	2b00      	cmp	r3, #0
 8016886:	bfbb      	ittet	lt
 8016888:	425b      	neglt	r3, r3
 801688a:	f042 0202 	orrlt.w	r2, r2, #2
 801688e:	9307      	strge	r3, [sp, #28]
 8016890:	9307      	strlt	r3, [sp, #28]
 8016892:	bfb8      	it	lt
 8016894:	9204      	strlt	r2, [sp, #16]
 8016896:	7823      	ldrb	r3, [r4, #0]
 8016898:	2b2e      	cmp	r3, #46	; 0x2e
 801689a:	d10c      	bne.n	80168b6 <_vfiprintf_r+0x15a>
 801689c:	7863      	ldrb	r3, [r4, #1]
 801689e:	2b2a      	cmp	r3, #42	; 0x2a
 80168a0:	d134      	bne.n	801690c <_vfiprintf_r+0x1b0>
 80168a2:	9b03      	ldr	r3, [sp, #12]
 80168a4:	1d1a      	adds	r2, r3, #4
 80168a6:	681b      	ldr	r3, [r3, #0]
 80168a8:	9203      	str	r2, [sp, #12]
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	bfb8      	it	lt
 80168ae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80168b2:	3402      	adds	r4, #2
 80168b4:	9305      	str	r3, [sp, #20]
 80168b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801698c <_vfiprintf_r+0x230>
 80168ba:	7821      	ldrb	r1, [r4, #0]
 80168bc:	2203      	movs	r2, #3
 80168be:	4650      	mov	r0, sl
 80168c0:	f7e9 fcb6 	bl	8000230 <memchr>
 80168c4:	b138      	cbz	r0, 80168d6 <_vfiprintf_r+0x17a>
 80168c6:	9b04      	ldr	r3, [sp, #16]
 80168c8:	eba0 000a 	sub.w	r0, r0, sl
 80168cc:	2240      	movs	r2, #64	; 0x40
 80168ce:	4082      	lsls	r2, r0
 80168d0:	4313      	orrs	r3, r2
 80168d2:	3401      	adds	r4, #1
 80168d4:	9304      	str	r3, [sp, #16]
 80168d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80168da:	4829      	ldr	r0, [pc, #164]	; (8016980 <_vfiprintf_r+0x224>)
 80168dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80168e0:	2206      	movs	r2, #6
 80168e2:	f7e9 fca5 	bl	8000230 <memchr>
 80168e6:	2800      	cmp	r0, #0
 80168e8:	d03f      	beq.n	801696a <_vfiprintf_r+0x20e>
 80168ea:	4b26      	ldr	r3, [pc, #152]	; (8016984 <_vfiprintf_r+0x228>)
 80168ec:	bb1b      	cbnz	r3, 8016936 <_vfiprintf_r+0x1da>
 80168ee:	9b03      	ldr	r3, [sp, #12]
 80168f0:	3307      	adds	r3, #7
 80168f2:	f023 0307 	bic.w	r3, r3, #7
 80168f6:	3308      	adds	r3, #8
 80168f8:	9303      	str	r3, [sp, #12]
 80168fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168fc:	443b      	add	r3, r7
 80168fe:	9309      	str	r3, [sp, #36]	; 0x24
 8016900:	e768      	b.n	80167d4 <_vfiprintf_r+0x78>
 8016902:	fb0c 3202 	mla	r2, ip, r2, r3
 8016906:	460c      	mov	r4, r1
 8016908:	2001      	movs	r0, #1
 801690a:	e7a6      	b.n	801685a <_vfiprintf_r+0xfe>
 801690c:	2300      	movs	r3, #0
 801690e:	3401      	adds	r4, #1
 8016910:	9305      	str	r3, [sp, #20]
 8016912:	4619      	mov	r1, r3
 8016914:	f04f 0c0a 	mov.w	ip, #10
 8016918:	4620      	mov	r0, r4
 801691a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801691e:	3a30      	subs	r2, #48	; 0x30
 8016920:	2a09      	cmp	r2, #9
 8016922:	d903      	bls.n	801692c <_vfiprintf_r+0x1d0>
 8016924:	2b00      	cmp	r3, #0
 8016926:	d0c6      	beq.n	80168b6 <_vfiprintf_r+0x15a>
 8016928:	9105      	str	r1, [sp, #20]
 801692a:	e7c4      	b.n	80168b6 <_vfiprintf_r+0x15a>
 801692c:	fb0c 2101 	mla	r1, ip, r1, r2
 8016930:	4604      	mov	r4, r0
 8016932:	2301      	movs	r3, #1
 8016934:	e7f0      	b.n	8016918 <_vfiprintf_r+0x1bc>
 8016936:	ab03      	add	r3, sp, #12
 8016938:	9300      	str	r3, [sp, #0]
 801693a:	462a      	mov	r2, r5
 801693c:	4b12      	ldr	r3, [pc, #72]	; (8016988 <_vfiprintf_r+0x22c>)
 801693e:	a904      	add	r1, sp, #16
 8016940:	4630      	mov	r0, r6
 8016942:	f7fd fc15 	bl	8014170 <_printf_float>
 8016946:	4607      	mov	r7, r0
 8016948:	1c78      	adds	r0, r7, #1
 801694a:	d1d6      	bne.n	80168fa <_vfiprintf_r+0x19e>
 801694c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801694e:	07d9      	lsls	r1, r3, #31
 8016950:	d405      	bmi.n	801695e <_vfiprintf_r+0x202>
 8016952:	89ab      	ldrh	r3, [r5, #12]
 8016954:	059a      	lsls	r2, r3, #22
 8016956:	d402      	bmi.n	801695e <_vfiprintf_r+0x202>
 8016958:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801695a:	f7fe f9e1 	bl	8014d20 <__retarget_lock_release_recursive>
 801695e:	89ab      	ldrh	r3, [r5, #12]
 8016960:	065b      	lsls	r3, r3, #25
 8016962:	f53f af1d 	bmi.w	80167a0 <_vfiprintf_r+0x44>
 8016966:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016968:	e71c      	b.n	80167a4 <_vfiprintf_r+0x48>
 801696a:	ab03      	add	r3, sp, #12
 801696c:	9300      	str	r3, [sp, #0]
 801696e:	462a      	mov	r2, r5
 8016970:	4b05      	ldr	r3, [pc, #20]	; (8016988 <_vfiprintf_r+0x22c>)
 8016972:	a904      	add	r1, sp, #16
 8016974:	4630      	mov	r0, r6
 8016976:	f7fd fe9f 	bl	80146b8 <_printf_i>
 801697a:	e7e4      	b.n	8016946 <_vfiprintf_r+0x1ea>
 801697c:	080187cc 	.word	0x080187cc
 8016980:	080187d6 	.word	0x080187d6
 8016984:	08014171 	.word	0x08014171
 8016988:	08016737 	.word	0x08016737
 801698c:	080187d2 	.word	0x080187d2

08016990 <__swbuf_r>:
 8016990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016992:	460e      	mov	r6, r1
 8016994:	4614      	mov	r4, r2
 8016996:	4605      	mov	r5, r0
 8016998:	b118      	cbz	r0, 80169a2 <__swbuf_r+0x12>
 801699a:	6a03      	ldr	r3, [r0, #32]
 801699c:	b90b      	cbnz	r3, 80169a2 <__swbuf_r+0x12>
 801699e:	f7fe f839 	bl	8014a14 <__sinit>
 80169a2:	69a3      	ldr	r3, [r4, #24]
 80169a4:	60a3      	str	r3, [r4, #8]
 80169a6:	89a3      	ldrh	r3, [r4, #12]
 80169a8:	071a      	lsls	r2, r3, #28
 80169aa:	d525      	bpl.n	80169f8 <__swbuf_r+0x68>
 80169ac:	6923      	ldr	r3, [r4, #16]
 80169ae:	b31b      	cbz	r3, 80169f8 <__swbuf_r+0x68>
 80169b0:	6823      	ldr	r3, [r4, #0]
 80169b2:	6922      	ldr	r2, [r4, #16]
 80169b4:	1a98      	subs	r0, r3, r2
 80169b6:	6963      	ldr	r3, [r4, #20]
 80169b8:	b2f6      	uxtb	r6, r6
 80169ba:	4283      	cmp	r3, r0
 80169bc:	4637      	mov	r7, r6
 80169be:	dc04      	bgt.n	80169ca <__swbuf_r+0x3a>
 80169c0:	4621      	mov	r1, r4
 80169c2:	4628      	mov	r0, r5
 80169c4:	f7ff fddc 	bl	8016580 <_fflush_r>
 80169c8:	b9e0      	cbnz	r0, 8016a04 <__swbuf_r+0x74>
 80169ca:	68a3      	ldr	r3, [r4, #8]
 80169cc:	3b01      	subs	r3, #1
 80169ce:	60a3      	str	r3, [r4, #8]
 80169d0:	6823      	ldr	r3, [r4, #0]
 80169d2:	1c5a      	adds	r2, r3, #1
 80169d4:	6022      	str	r2, [r4, #0]
 80169d6:	701e      	strb	r6, [r3, #0]
 80169d8:	6962      	ldr	r2, [r4, #20]
 80169da:	1c43      	adds	r3, r0, #1
 80169dc:	429a      	cmp	r2, r3
 80169de:	d004      	beq.n	80169ea <__swbuf_r+0x5a>
 80169e0:	89a3      	ldrh	r3, [r4, #12]
 80169e2:	07db      	lsls	r3, r3, #31
 80169e4:	d506      	bpl.n	80169f4 <__swbuf_r+0x64>
 80169e6:	2e0a      	cmp	r6, #10
 80169e8:	d104      	bne.n	80169f4 <__swbuf_r+0x64>
 80169ea:	4621      	mov	r1, r4
 80169ec:	4628      	mov	r0, r5
 80169ee:	f7ff fdc7 	bl	8016580 <_fflush_r>
 80169f2:	b938      	cbnz	r0, 8016a04 <__swbuf_r+0x74>
 80169f4:	4638      	mov	r0, r7
 80169f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169f8:	4621      	mov	r1, r4
 80169fa:	4628      	mov	r0, r5
 80169fc:	f000 f806 	bl	8016a0c <__swsetup_r>
 8016a00:	2800      	cmp	r0, #0
 8016a02:	d0d5      	beq.n	80169b0 <__swbuf_r+0x20>
 8016a04:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016a08:	e7f4      	b.n	80169f4 <__swbuf_r+0x64>
	...

08016a0c <__swsetup_r>:
 8016a0c:	b538      	push	{r3, r4, r5, lr}
 8016a0e:	4b2a      	ldr	r3, [pc, #168]	; (8016ab8 <__swsetup_r+0xac>)
 8016a10:	4605      	mov	r5, r0
 8016a12:	6818      	ldr	r0, [r3, #0]
 8016a14:	460c      	mov	r4, r1
 8016a16:	b118      	cbz	r0, 8016a20 <__swsetup_r+0x14>
 8016a18:	6a03      	ldr	r3, [r0, #32]
 8016a1a:	b90b      	cbnz	r3, 8016a20 <__swsetup_r+0x14>
 8016a1c:	f7fd fffa 	bl	8014a14 <__sinit>
 8016a20:	89a3      	ldrh	r3, [r4, #12]
 8016a22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016a26:	0718      	lsls	r0, r3, #28
 8016a28:	d422      	bmi.n	8016a70 <__swsetup_r+0x64>
 8016a2a:	06d9      	lsls	r1, r3, #27
 8016a2c:	d407      	bmi.n	8016a3e <__swsetup_r+0x32>
 8016a2e:	2309      	movs	r3, #9
 8016a30:	602b      	str	r3, [r5, #0]
 8016a32:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016a36:	81a3      	strh	r3, [r4, #12]
 8016a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016a3c:	e034      	b.n	8016aa8 <__swsetup_r+0x9c>
 8016a3e:	0758      	lsls	r0, r3, #29
 8016a40:	d512      	bpl.n	8016a68 <__swsetup_r+0x5c>
 8016a42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016a44:	b141      	cbz	r1, 8016a58 <__swsetup_r+0x4c>
 8016a46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016a4a:	4299      	cmp	r1, r3
 8016a4c:	d002      	beq.n	8016a54 <__swsetup_r+0x48>
 8016a4e:	4628      	mov	r0, r5
 8016a50:	f7fe fff0 	bl	8015a34 <_free_r>
 8016a54:	2300      	movs	r3, #0
 8016a56:	6363      	str	r3, [r4, #52]	; 0x34
 8016a58:	89a3      	ldrh	r3, [r4, #12]
 8016a5a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016a5e:	81a3      	strh	r3, [r4, #12]
 8016a60:	2300      	movs	r3, #0
 8016a62:	6063      	str	r3, [r4, #4]
 8016a64:	6923      	ldr	r3, [r4, #16]
 8016a66:	6023      	str	r3, [r4, #0]
 8016a68:	89a3      	ldrh	r3, [r4, #12]
 8016a6a:	f043 0308 	orr.w	r3, r3, #8
 8016a6e:	81a3      	strh	r3, [r4, #12]
 8016a70:	6923      	ldr	r3, [r4, #16]
 8016a72:	b94b      	cbnz	r3, 8016a88 <__swsetup_r+0x7c>
 8016a74:	89a3      	ldrh	r3, [r4, #12]
 8016a76:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016a7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016a7e:	d003      	beq.n	8016a88 <__swsetup_r+0x7c>
 8016a80:	4621      	mov	r1, r4
 8016a82:	4628      	mov	r0, r5
 8016a84:	f000 f840 	bl	8016b08 <__smakebuf_r>
 8016a88:	89a0      	ldrh	r0, [r4, #12]
 8016a8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016a8e:	f010 0301 	ands.w	r3, r0, #1
 8016a92:	d00a      	beq.n	8016aaa <__swsetup_r+0x9e>
 8016a94:	2300      	movs	r3, #0
 8016a96:	60a3      	str	r3, [r4, #8]
 8016a98:	6963      	ldr	r3, [r4, #20]
 8016a9a:	425b      	negs	r3, r3
 8016a9c:	61a3      	str	r3, [r4, #24]
 8016a9e:	6923      	ldr	r3, [r4, #16]
 8016aa0:	b943      	cbnz	r3, 8016ab4 <__swsetup_r+0xa8>
 8016aa2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016aa6:	d1c4      	bne.n	8016a32 <__swsetup_r+0x26>
 8016aa8:	bd38      	pop	{r3, r4, r5, pc}
 8016aaa:	0781      	lsls	r1, r0, #30
 8016aac:	bf58      	it	pl
 8016aae:	6963      	ldrpl	r3, [r4, #20]
 8016ab0:	60a3      	str	r3, [r4, #8]
 8016ab2:	e7f4      	b.n	8016a9e <__swsetup_r+0x92>
 8016ab4:	2000      	movs	r0, #0
 8016ab6:	e7f7      	b.n	8016aa8 <__swsetup_r+0x9c>
 8016ab8:	2000006c 	.word	0x2000006c

08016abc <__swhatbuf_r>:
 8016abc:	b570      	push	{r4, r5, r6, lr}
 8016abe:	460c      	mov	r4, r1
 8016ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ac4:	2900      	cmp	r1, #0
 8016ac6:	b096      	sub	sp, #88	; 0x58
 8016ac8:	4615      	mov	r5, r2
 8016aca:	461e      	mov	r6, r3
 8016acc:	da0d      	bge.n	8016aea <__swhatbuf_r+0x2e>
 8016ace:	89a3      	ldrh	r3, [r4, #12]
 8016ad0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8016ad4:	f04f 0100 	mov.w	r1, #0
 8016ad8:	bf0c      	ite	eq
 8016ada:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8016ade:	2340      	movne	r3, #64	; 0x40
 8016ae0:	2000      	movs	r0, #0
 8016ae2:	6031      	str	r1, [r6, #0]
 8016ae4:	602b      	str	r3, [r5, #0]
 8016ae6:	b016      	add	sp, #88	; 0x58
 8016ae8:	bd70      	pop	{r4, r5, r6, pc}
 8016aea:	466a      	mov	r2, sp
 8016aec:	f000 f848 	bl	8016b80 <_fstat_r>
 8016af0:	2800      	cmp	r0, #0
 8016af2:	dbec      	blt.n	8016ace <__swhatbuf_r+0x12>
 8016af4:	9901      	ldr	r1, [sp, #4]
 8016af6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8016afa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8016afe:	4259      	negs	r1, r3
 8016b00:	4159      	adcs	r1, r3
 8016b02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016b06:	e7eb      	b.n	8016ae0 <__swhatbuf_r+0x24>

08016b08 <__smakebuf_r>:
 8016b08:	898b      	ldrh	r3, [r1, #12]
 8016b0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016b0c:	079d      	lsls	r5, r3, #30
 8016b0e:	4606      	mov	r6, r0
 8016b10:	460c      	mov	r4, r1
 8016b12:	d507      	bpl.n	8016b24 <__smakebuf_r+0x1c>
 8016b14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016b18:	6023      	str	r3, [r4, #0]
 8016b1a:	6123      	str	r3, [r4, #16]
 8016b1c:	2301      	movs	r3, #1
 8016b1e:	6163      	str	r3, [r4, #20]
 8016b20:	b002      	add	sp, #8
 8016b22:	bd70      	pop	{r4, r5, r6, pc}
 8016b24:	ab01      	add	r3, sp, #4
 8016b26:	466a      	mov	r2, sp
 8016b28:	f7ff ffc8 	bl	8016abc <__swhatbuf_r>
 8016b2c:	9900      	ldr	r1, [sp, #0]
 8016b2e:	4605      	mov	r5, r0
 8016b30:	4630      	mov	r0, r6
 8016b32:	f7fd f9f1 	bl	8013f18 <_malloc_r>
 8016b36:	b948      	cbnz	r0, 8016b4c <__smakebuf_r+0x44>
 8016b38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b3c:	059a      	lsls	r2, r3, #22
 8016b3e:	d4ef      	bmi.n	8016b20 <__smakebuf_r+0x18>
 8016b40:	f023 0303 	bic.w	r3, r3, #3
 8016b44:	f043 0302 	orr.w	r3, r3, #2
 8016b48:	81a3      	strh	r3, [r4, #12]
 8016b4a:	e7e3      	b.n	8016b14 <__smakebuf_r+0xc>
 8016b4c:	89a3      	ldrh	r3, [r4, #12]
 8016b4e:	6020      	str	r0, [r4, #0]
 8016b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016b54:	81a3      	strh	r3, [r4, #12]
 8016b56:	9b00      	ldr	r3, [sp, #0]
 8016b58:	6163      	str	r3, [r4, #20]
 8016b5a:	9b01      	ldr	r3, [sp, #4]
 8016b5c:	6120      	str	r0, [r4, #16]
 8016b5e:	b15b      	cbz	r3, 8016b78 <__smakebuf_r+0x70>
 8016b60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016b64:	4630      	mov	r0, r6
 8016b66:	f000 f81d 	bl	8016ba4 <_isatty_r>
 8016b6a:	b128      	cbz	r0, 8016b78 <__smakebuf_r+0x70>
 8016b6c:	89a3      	ldrh	r3, [r4, #12]
 8016b6e:	f023 0303 	bic.w	r3, r3, #3
 8016b72:	f043 0301 	orr.w	r3, r3, #1
 8016b76:	81a3      	strh	r3, [r4, #12]
 8016b78:	89a3      	ldrh	r3, [r4, #12]
 8016b7a:	431d      	orrs	r5, r3
 8016b7c:	81a5      	strh	r5, [r4, #12]
 8016b7e:	e7cf      	b.n	8016b20 <__smakebuf_r+0x18>

08016b80 <_fstat_r>:
 8016b80:	b538      	push	{r3, r4, r5, lr}
 8016b82:	4d07      	ldr	r5, [pc, #28]	; (8016ba0 <_fstat_r+0x20>)
 8016b84:	2300      	movs	r3, #0
 8016b86:	4604      	mov	r4, r0
 8016b88:	4608      	mov	r0, r1
 8016b8a:	4611      	mov	r1, r2
 8016b8c:	602b      	str	r3, [r5, #0]
 8016b8e:	f7f8 fd12 	bl	800f5b6 <_fstat>
 8016b92:	1c43      	adds	r3, r0, #1
 8016b94:	d102      	bne.n	8016b9c <_fstat_r+0x1c>
 8016b96:	682b      	ldr	r3, [r5, #0]
 8016b98:	b103      	cbz	r3, 8016b9c <_fstat_r+0x1c>
 8016b9a:	6023      	str	r3, [r4, #0]
 8016b9c:	bd38      	pop	{r3, r4, r5, pc}
 8016b9e:	bf00      	nop
 8016ba0:	20000554 	.word	0x20000554

08016ba4 <_isatty_r>:
 8016ba4:	b538      	push	{r3, r4, r5, lr}
 8016ba6:	4d06      	ldr	r5, [pc, #24]	; (8016bc0 <_isatty_r+0x1c>)
 8016ba8:	2300      	movs	r3, #0
 8016baa:	4604      	mov	r4, r0
 8016bac:	4608      	mov	r0, r1
 8016bae:	602b      	str	r3, [r5, #0]
 8016bb0:	f7f8 fd11 	bl	800f5d6 <_isatty>
 8016bb4:	1c43      	adds	r3, r0, #1
 8016bb6:	d102      	bne.n	8016bbe <_isatty_r+0x1a>
 8016bb8:	682b      	ldr	r3, [r5, #0]
 8016bba:	b103      	cbz	r3, 8016bbe <_isatty_r+0x1a>
 8016bbc:	6023      	str	r3, [r4, #0]
 8016bbe:	bd38      	pop	{r3, r4, r5, pc}
 8016bc0:	20000554 	.word	0x20000554

08016bc4 <_Unwind_GetDataRelBase>:
 8016bc4:	b508      	push	{r3, lr}
 8016bc6:	f7fd f96f 	bl	8013ea8 <abort>

08016bca <_Unwind_GetTextRelBase>:
 8016bca:	b508      	push	{r3, lr}
 8016bcc:	f7ff fffa 	bl	8016bc4 <_Unwind_GetDataRelBase>

08016bd0 <_init>:
 8016bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bd2:	bf00      	nop
 8016bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016bd6:	bc08      	pop	{r3}
 8016bd8:	469e      	mov	lr, r3
 8016bda:	4770      	bx	lr

08016bdc <_fini>:
 8016bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bde:	bf00      	nop
 8016be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016be2:	bc08      	pop	{r3}
 8016be4:	469e      	mov	lr, r3
 8016be6:	4770      	bx	lr
