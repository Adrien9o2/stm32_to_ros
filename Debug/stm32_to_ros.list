
stm32_to_ros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013c7c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019ac  08013e50  08013e50  00023e50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00001248  080157fc  080157fc  000257fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000d50  08016a44  08016a44  00026a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017794  08017794  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08017794  08017794  00027794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080177a0  080177a0  000277a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080177a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  200001dc  08017984  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000538  08017984  00030538  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000282a3  00000000  00000000  0003024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003adc  00000000  00000000  000584f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002020  00000000  00000000  0005bfd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000018ec  00000000  00000000  0005dff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028afb  00000000  00000000  0005f8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c482  00000000  00000000  000883d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3e7a  00000000  00000000  000a4859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000cab0  00000000  00000000  001886d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00195184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013e34 	.word	0x08013e34

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08013e34 	.word	0x08013e34

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f001 b8de 	b.w	8001e7c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	460d      	mov	r5, r1
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	460f      	mov	r7, r1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d14a      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4694      	mov	ip, r2
 8000cec:	d965      	bls.n	8000dba <__udivmoddi4+0xe2>
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	b143      	cbz	r3, 8000d06 <__udivmoddi4+0x2e>
 8000cf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf8:	f1c3 0220 	rsb	r2, r3, #32
 8000cfc:	409f      	lsls	r7, r3
 8000cfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000d02:	4317      	orrs	r7, r2
 8000d04:	409c      	lsls	r4, r3
 8000d06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d0a:	fa1f f58c 	uxth.w	r5, ip
 8000d0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d12:	0c22      	lsrs	r2, r4, #16
 8000d14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d1c:	fb01 f005 	mul.w	r0, r1, r5
 8000d20:	4290      	cmp	r0, r2
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x62>
 8000d24:	eb1c 0202 	adds.w	r2, ip, r2
 8000d28:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d2c:	f080 811c 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d30:	4290      	cmp	r0, r2
 8000d32:	f240 8119 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d36:	3902      	subs	r1, #2
 8000d38:	4462      	add	r2, ip
 8000d3a:	1a12      	subs	r2, r2, r0
 8000d3c:	b2a4      	uxth	r4, r4
 8000d3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4a:	fb00 f505 	mul.w	r5, r0, r5
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x90>
 8000d52:	eb1c 0404 	adds.w	r4, ip, r4
 8000d56:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d5a:	f080 8107 	bcs.w	8000f6c <__udivmoddi4+0x294>
 8000d5e:	42a5      	cmp	r5, r4
 8000d60:	f240 8104 	bls.w	8000f6c <__udivmoddi4+0x294>
 8000d64:	4464      	add	r4, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d6c:	1b64      	subs	r4, r4, r5
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11e      	cbz	r6, 8000d7a <__udivmoddi4+0xa2>
 8000d72:	40dc      	lsrs	r4, r3
 8000d74:	2300      	movs	r3, #0
 8000d76:	e9c6 4300 	strd	r4, r3, [r6]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0xbc>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80ed 	beq.w	8000f62 <__udivmoddi4+0x28a>
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d94:	fab3 f183 	clz	r1, r3
 8000d98:	2900      	cmp	r1, #0
 8000d9a:	d149      	bne.n	8000e30 <__udivmoddi4+0x158>
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	d302      	bcc.n	8000da6 <__udivmoddi4+0xce>
 8000da0:	4282      	cmp	r2, r0
 8000da2:	f200 80f8 	bhi.w	8000f96 <__udivmoddi4+0x2be>
 8000da6:	1a84      	subs	r4, r0, r2
 8000da8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dac:	2001      	movs	r0, #1
 8000dae:	4617      	mov	r7, r2
 8000db0:	2e00      	cmp	r6, #0
 8000db2:	d0e2      	beq.n	8000d7a <__udivmoddi4+0xa2>
 8000db4:	e9c6 4700 	strd	r4, r7, [r6]
 8000db8:	e7df      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000dba:	b902      	cbnz	r2, 8000dbe <__udivmoddi4+0xe6>
 8000dbc:	deff      	udf	#255	; 0xff
 8000dbe:	fab2 f382 	clz	r3, r2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f040 8090 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dc8:	1a8a      	subs	r2, r1, r2
 8000dca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dce:	fa1f fe8c 	uxth.w	lr, ip
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000ddc:	0c22      	lsrs	r2, r4, #16
 8000dde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000de2:	fb0e f005 	mul.w	r0, lr, r5
 8000de6:	4290      	cmp	r0, r2
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dea:	eb1c 0202 	adds.w	r2, ip, r2
 8000dee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4290      	cmp	r0, r2
 8000df6:	f200 80cb 	bhi.w	8000f90 <__udivmoddi4+0x2b8>
 8000dfa:	4645      	mov	r5, r8
 8000dfc:	1a12      	subs	r2, r2, r0
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e04:	fb07 2210 	mls	r2, r7, r0, r2
 8000e08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x14e>
 8000e14:	eb1c 0404 	adds.w	r4, ip, r4
 8000e18:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e1c:	d202      	bcs.n	8000e24 <__udivmoddi4+0x14c>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f200 80bb 	bhi.w	8000f9a <__udivmoddi4+0x2c2>
 8000e24:	4610      	mov	r0, r2
 8000e26:	eba4 040e 	sub.w	r4, r4, lr
 8000e2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e2e:	e79f      	b.n	8000d70 <__udivmoddi4+0x98>
 8000e30:	f1c1 0720 	rsb	r7, r1, #32
 8000e34:	408b      	lsls	r3, r1
 8000e36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e42:	fa20 f307 	lsr.w	r3, r0, r7
 8000e46:	40fd      	lsrs	r5, r7
 8000e48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e4c:	4323      	orrs	r3, r4
 8000e4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	fb09 5518 	mls	r5, r9, r8, r5
 8000e5a:	0c1c      	lsrs	r4, r3, #16
 8000e5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e60:	fb08 f50e 	mul.w	r5, r8, lr
 8000e64:	42a5      	cmp	r5, r4
 8000e66:	fa02 f201 	lsl.w	r2, r2, r1
 8000e6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e78:	f080 8088 	bcs.w	8000f8c <__udivmoddi4+0x2b4>
 8000e7c:	42a5      	cmp	r5, r4
 8000e7e:	f240 8085 	bls.w	8000f8c <__udivmoddi4+0x2b4>
 8000e82:	f1a8 0802 	sub.w	r8, r8, #2
 8000e86:	4464      	add	r4, ip
 8000e88:	1b64      	subs	r4, r4, r5
 8000e8a:	b29d      	uxth	r5, r3
 8000e8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e90:	fb09 4413 	mls	r4, r9, r3, r4
 8000e94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ea8:	d26c      	bcs.n	8000f84 <__udivmoddi4+0x2ac>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	d96a      	bls.n	8000f84 <__udivmoddi4+0x2ac>
 8000eae:	3b02      	subs	r3, #2
 8000eb0:	4464      	add	r4, ip
 8000eb2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eb6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	42ac      	cmp	r4, r5
 8000ec0:	46c8      	mov	r8, r9
 8000ec2:	46ae      	mov	lr, r5
 8000ec4:	d356      	bcc.n	8000f74 <__udivmoddi4+0x29c>
 8000ec6:	d053      	beq.n	8000f70 <__udivmoddi4+0x298>
 8000ec8:	b156      	cbz	r6, 8000ee0 <__udivmoddi4+0x208>
 8000eca:	ebb0 0208 	subs.w	r2, r0, r8
 8000ece:	eb64 040e 	sbc.w	r4, r4, lr
 8000ed2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ed6:	40ca      	lsrs	r2, r1
 8000ed8:	40cc      	lsrs	r4, r1
 8000eda:	4317      	orrs	r7, r2
 8000edc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee8:	f1c3 0120 	rsb	r1, r3, #32
 8000eec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ef0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ef4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ef8:	409d      	lsls	r5, r3
 8000efa:	432a      	orrs	r2, r5
 8000efc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f00:	fa1f fe8c 	uxth.w	lr, ip
 8000f04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f08:	fb07 1510 	mls	r5, r7, r0, r1
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f12:	fb00 f50e 	mul.w	r5, r0, lr
 8000f16:	428d      	cmp	r5, r1
 8000f18:	fa04 f403 	lsl.w	r4, r4, r3
 8000f1c:	d908      	bls.n	8000f30 <__udivmoddi4+0x258>
 8000f1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f22:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f26:	d22f      	bcs.n	8000f88 <__udivmoddi4+0x2b0>
 8000f28:	428d      	cmp	r5, r1
 8000f2a:	d92d      	bls.n	8000f88 <__udivmoddi4+0x2b0>
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	4461      	add	r1, ip
 8000f30:	1b49      	subs	r1, r1, r5
 8000f32:	b292      	uxth	r2, r2
 8000f34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f38:	fb07 1115 	mls	r1, r7, r5, r1
 8000f3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f40:	fb05 f10e 	mul.w	r1, r5, lr
 8000f44:	4291      	cmp	r1, r2
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x282>
 8000f48:	eb1c 0202 	adds.w	r2, ip, r2
 8000f4c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f50:	d216      	bcs.n	8000f80 <__udivmoddi4+0x2a8>
 8000f52:	4291      	cmp	r1, r2
 8000f54:	d914      	bls.n	8000f80 <__udivmoddi4+0x2a8>
 8000f56:	3d02      	subs	r5, #2
 8000f58:	4462      	add	r2, ip
 8000f5a:	1a52      	subs	r2, r2, r1
 8000f5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f60:	e738      	b.n	8000dd4 <__udivmoddi4+0xfc>
 8000f62:	4631      	mov	r1, r6
 8000f64:	4630      	mov	r0, r6
 8000f66:	e708      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000f68:	4639      	mov	r1, r7
 8000f6a:	e6e6      	b.n	8000d3a <__udivmoddi4+0x62>
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	e6fb      	b.n	8000d68 <__udivmoddi4+0x90>
 8000f70:	4548      	cmp	r0, r9
 8000f72:	d2a9      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f74:	ebb9 0802 	subs.w	r8, r9, r2
 8000f78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	e7a3      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f80:	4645      	mov	r5, r8
 8000f82:	e7ea      	b.n	8000f5a <__udivmoddi4+0x282>
 8000f84:	462b      	mov	r3, r5
 8000f86:	e794      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f88:	4640      	mov	r0, r8
 8000f8a:	e7d1      	b.n	8000f30 <__udivmoddi4+0x258>
 8000f8c:	46d0      	mov	r8, sl
 8000f8e:	e77b      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f90:	3d02      	subs	r5, #2
 8000f92:	4462      	add	r2, ip
 8000f94:	e732      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f96:	4608      	mov	r0, r1
 8000f98:	e70a      	b.n	8000db0 <__udivmoddi4+0xd8>
 8000f9a:	4464      	add	r4, ip
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	e742      	b.n	8000e26 <__udivmoddi4+0x14e>

08000fa0 <selfrel_offset31>:
 8000fa0:	6803      	ldr	r3, [r0, #0]
 8000fa2:	005a      	lsls	r2, r3, #1
 8000fa4:	bf4c      	ite	mi
 8000fa6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000faa:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000fae:	4418      	add	r0, r3
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <search_EIT_table>:
 8000fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fb8:	b329      	cbz	r1, 8001006 <search_EIT_table+0x52>
 8000fba:	1e4f      	subs	r7, r1, #1
 8000fbc:	4604      	mov	r4, r0
 8000fbe:	4615      	mov	r5, r2
 8000fc0:	463e      	mov	r6, r7
 8000fc2:	f04f 0800 	mov.w	r8, #0
 8000fc6:	eb08 0106 	add.w	r1, r8, r6
 8000fca:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000fce:	1049      	asrs	r1, r1, #1
 8000fd0:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000fd4:	4648      	mov	r0, r9
 8000fd6:	f7ff ffe3 	bl	8000fa0 <selfrel_offset31>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	00c8      	lsls	r0, r1, #3
 8000fde:	3008      	adds	r0, #8
 8000fe0:	428f      	cmp	r7, r1
 8000fe2:	4420      	add	r0, r4
 8000fe4:	d009      	beq.n	8000ffa <search_EIT_table+0x46>
 8000fe6:	42ab      	cmp	r3, r5
 8000fe8:	d809      	bhi.n	8000ffe <search_EIT_table+0x4a>
 8000fea:	f7ff ffd9 	bl	8000fa0 <selfrel_offset31>
 8000fee:	3801      	subs	r0, #1
 8000ff0:	42a8      	cmp	r0, r5
 8000ff2:	d20a      	bcs.n	800100a <search_EIT_table+0x56>
 8000ff4:	f101 0801 	add.w	r8, r1, #1
 8000ff8:	e7e5      	b.n	8000fc6 <search_EIT_table+0x12>
 8000ffa:	42ab      	cmp	r3, r5
 8000ffc:	d905      	bls.n	800100a <search_EIT_table+0x56>
 8000ffe:	4588      	cmp	r8, r1
 8001000:	d001      	beq.n	8001006 <search_EIT_table+0x52>
 8001002:	1e4e      	subs	r6, r1, #1
 8001004:	e7df      	b.n	8000fc6 <search_EIT_table+0x12>
 8001006:	f04f 0900 	mov.w	r9, #0
 800100a:	4648      	mov	r0, r9
 800100c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001010 <__gnu_unwind_get_pr_addr>:
 8001010:	2801      	cmp	r0, #1
 8001012:	d007      	beq.n	8001024 <__gnu_unwind_get_pr_addr+0x14>
 8001014:	2802      	cmp	r0, #2
 8001016:	d007      	beq.n	8001028 <__gnu_unwind_get_pr_addr+0x18>
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <__gnu_unwind_get_pr_addr+0x1c>)
 800101a:	2800      	cmp	r0, #0
 800101c:	bf0c      	ite	eq
 800101e:	4618      	moveq	r0, r3
 8001020:	2000      	movne	r0, #0
 8001022:	4770      	bx	lr
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <__gnu_unwind_get_pr_addr+0x20>)
 8001026:	4770      	bx	lr
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <__gnu_unwind_get_pr_addr+0x24>)
 800102a:	4770      	bx	lr
 800102c:	080016e5 	.word	0x080016e5
 8001030:	080016e9 	.word	0x080016e9
 8001034:	080016ed 	.word	0x080016ed

08001038 <get_eit_entry>:
 8001038:	b530      	push	{r4, r5, lr}
 800103a:	4b22      	ldr	r3, [pc, #136]	; (80010c4 <get_eit_entry+0x8c>)
 800103c:	b083      	sub	sp, #12
 800103e:	4604      	mov	r4, r0
 8001040:	1e8d      	subs	r5, r1, #2
 8001042:	b343      	cbz	r3, 8001096 <get_eit_entry+0x5e>
 8001044:	a901      	add	r1, sp, #4
 8001046:	4628      	mov	r0, r5
 8001048:	f3af 8000 	nop.w
 800104c:	b1f0      	cbz	r0, 800108c <get_eit_entry+0x54>
 800104e:	9901      	ldr	r1, [sp, #4]
 8001050:	462a      	mov	r2, r5
 8001052:	f7ff ffaf 	bl	8000fb4 <search_EIT_table>
 8001056:	4601      	mov	r1, r0
 8001058:	b1c0      	cbz	r0, 800108c <get_eit_entry+0x54>
 800105a:	f7ff ffa1 	bl	8000fa0 <selfrel_offset31>
 800105e:	684b      	ldr	r3, [r1, #4]
 8001060:	64a0      	str	r0, [r4, #72]	; 0x48
 8001062:	2b01      	cmp	r3, #1
 8001064:	d02b      	beq.n	80010be <get_eit_entry+0x86>
 8001066:	2b00      	cmp	r3, #0
 8001068:	f101 0004 	add.w	r0, r1, #4
 800106c:	db25      	blt.n	80010ba <get_eit_entry+0x82>
 800106e:	f7ff ff97 	bl	8000fa0 <selfrel_offset31>
 8001072:	2300      	movs	r3, #0
 8001074:	6523      	str	r3, [r4, #80]	; 0x50
 8001076:	6803      	ldr	r3, [r0, #0]
 8001078:	64e0      	str	r0, [r4, #76]	; 0x4c
 800107a:	2b00      	cmp	r3, #0
 800107c:	db12      	blt.n	80010a4 <get_eit_entry+0x6c>
 800107e:	f7ff ff8f 	bl	8000fa0 <selfrel_offset31>
 8001082:	4603      	mov	r3, r0
 8001084:	2000      	movs	r0, #0
 8001086:	6123      	str	r3, [r4, #16]
 8001088:	b003      	add	sp, #12
 800108a:	bd30      	pop	{r4, r5, pc}
 800108c:	2300      	movs	r3, #0
 800108e:	2009      	movs	r0, #9
 8001090:	6123      	str	r3, [r4, #16]
 8001092:	b003      	add	sp, #12
 8001094:	bd30      	pop	{r4, r5, pc}
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <get_eit_entry+0x90>)
 8001098:	490c      	ldr	r1, [pc, #48]	; (80010cc <get_eit_entry+0x94>)
 800109a:	1ac9      	subs	r1, r1, r3
 800109c:	10c9      	asrs	r1, r1, #3
 800109e:	4618      	mov	r0, r3
 80010a0:	9101      	str	r1, [sp, #4]
 80010a2:	e7d5      	b.n	8001050 <get_eit_entry+0x18>
 80010a4:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80010a8:	f7ff ffb2 	bl	8001010 <__gnu_unwind_get_pr_addr>
 80010ac:	1e03      	subs	r3, r0, #0
 80010ae:	bf0c      	ite	eq
 80010b0:	2009      	moveq	r0, #9
 80010b2:	2000      	movne	r0, #0
 80010b4:	6123      	str	r3, [r4, #16]
 80010b6:	b003      	add	sp, #12
 80010b8:	bd30      	pop	{r4, r5, pc}
 80010ba:	2301      	movs	r3, #1
 80010bc:	e7da      	b.n	8001074 <get_eit_entry+0x3c>
 80010be:	2300      	movs	r3, #0
 80010c0:	2005      	movs	r0, #5
 80010c2:	e7e0      	b.n	8001086 <get_eit_entry+0x4e>
 80010c4:	00000000 	.word	0x00000000
 80010c8:	08016a44 	.word	0x08016a44
 80010cc:	08017794 	.word	0x08017794

080010d0 <restore_non_core_regs>:
 80010d0:	6803      	ldr	r3, [r0, #0]
 80010d2:	07da      	lsls	r2, r3, #31
 80010d4:	b510      	push	{r4, lr}
 80010d6:	4604      	mov	r4, r0
 80010d8:	d406      	bmi.n	80010e8 <restore_non_core_regs+0x18>
 80010da:	079b      	lsls	r3, r3, #30
 80010dc:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80010e0:	d509      	bpl.n	80010f6 <restore_non_core_regs+0x26>
 80010e2:	f000 fc71 	bl	80019c8 <__gnu_Unwind_Restore_VFP_D>
 80010e6:	6823      	ldr	r3, [r4, #0]
 80010e8:	0759      	lsls	r1, r3, #29
 80010ea:	d509      	bpl.n	8001100 <restore_non_core_regs+0x30>
 80010ec:	071a      	lsls	r2, r3, #28
 80010ee:	d50e      	bpl.n	800110e <restore_non_core_regs+0x3e>
 80010f0:	06db      	lsls	r3, r3, #27
 80010f2:	d513      	bpl.n	800111c <restore_non_core_regs+0x4c>
 80010f4:	bd10      	pop	{r4, pc}
 80010f6:	f000 fc5f 	bl	80019b8 <__gnu_Unwind_Restore_VFP>
 80010fa:	6823      	ldr	r3, [r4, #0]
 80010fc:	0759      	lsls	r1, r3, #29
 80010fe:	d4f5      	bmi.n	80010ec <restore_non_core_regs+0x1c>
 8001100:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001104:	f000 fc68 	bl	80019d8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001108:	6823      	ldr	r3, [r4, #0]
 800110a:	071a      	lsls	r2, r3, #28
 800110c:	d4f0      	bmi.n	80010f0 <restore_non_core_regs+0x20>
 800110e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8001112:	f000 fc69 	bl	80019e8 <__gnu_Unwind_Restore_WMMXD>
 8001116:	6823      	ldr	r3, [r4, #0]
 8001118:	06db      	lsls	r3, r3, #27
 800111a:	d4eb      	bmi.n	80010f4 <restore_non_core_regs+0x24>
 800111c:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8001120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001124:	f000 bca4 	b.w	8001a70 <__gnu_Unwind_Restore_WMMXC>

08001128 <__gnu_unwind_24bit.constprop.0>:
 8001128:	2009      	movs	r0, #9
 800112a:	4770      	bx	lr

0800112c <_Unwind_decode_typeinfo_ptr.constprop.0>:
 800112c:	4603      	mov	r3, r0
 800112e:	6800      	ldr	r0, [r0, #0]
 8001130:	b100      	cbz	r0, 8001134 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 8001132:	4418      	add	r0, r3
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop

08001138 <_Unwind_DebugHook>:
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop

0800113c <unwind_phase2>:
 800113c:	b570      	push	{r4, r5, r6, lr}
 800113e:	4604      	mov	r4, r0
 8001140:	460e      	mov	r6, r1
 8001142:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8001144:	4620      	mov	r0, r4
 8001146:	f7ff ff77 	bl	8001038 <get_eit_entry>
 800114a:	4605      	mov	r5, r0
 800114c:	b988      	cbnz	r0, 8001172 <unwind_phase2+0x36>
 800114e:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8001150:	6162      	str	r2, [r4, #20]
 8001152:	6923      	ldr	r3, [r4, #16]
 8001154:	4632      	mov	r2, r6
 8001156:	4621      	mov	r1, r4
 8001158:	2001      	movs	r0, #1
 800115a:	4798      	blx	r3
 800115c:	2808      	cmp	r0, #8
 800115e:	d0f0      	beq.n	8001142 <unwind_phase2+0x6>
 8001160:	2807      	cmp	r0, #7
 8001162:	d106      	bne.n	8001172 <unwind_phase2+0x36>
 8001164:	4628      	mov	r0, r5
 8001166:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8001168:	f7ff ffe6 	bl	8001138 <_Unwind_DebugHook>
 800116c:	1d30      	adds	r0, r6, #4
 800116e:	f000 fc17 	bl	80019a0 <__restore_core_regs>
 8001172:	f010 f993 	bl	801149c <abort>
 8001176:	bf00      	nop

08001178 <unwind_phase2_forced>:
 8001178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800117c:	1d0d      	adds	r5, r1, #4
 800117e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8001182:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8001186:	4607      	mov	r7, r0
 8001188:	4614      	mov	r4, r2
 800118a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800118c:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8001190:	f10d 0c0c 	add.w	ip, sp, #12
 8001194:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800119a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800119e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80011a4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011a8:	ae02      	add	r6, sp, #8
 80011aa:	f04f 0e00 	mov.w	lr, #0
 80011ae:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80011b2:	f8c6 e000 	str.w	lr, [r6]
 80011b6:	e020      	b.n	80011fa <unwind_phase2_forced+0x82>
 80011b8:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80011c0:	4631      	mov	r1, r6
 80011c2:	a87a      	add	r0, sp, #488	; 0x1e8
 80011c4:	f011 f86d 	bl	80122a2 <memcpy>
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	aa7a      	add	r2, sp, #488	; 0x1e8
 80011cc:	4639      	mov	r1, r7
 80011ce:	4650      	mov	r0, sl
 80011d0:	4798      	blx	r3
 80011d2:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80011d4:	6473      	str	r3, [r6, #68]	; 0x44
 80011d6:	4621      	mov	r1, r4
 80011d8:	e9cd 6900 	strd	r6, r9, [sp]
 80011dc:	4605      	mov	r5, r0
 80011de:	463b      	mov	r3, r7
 80011e0:	463a      	mov	r2, r7
 80011e2:	2001      	movs	r0, #1
 80011e4:	47c0      	blx	r8
 80011e6:	4604      	mov	r4, r0
 80011e8:	b9e0      	cbnz	r0, 8001224 <unwind_phase2_forced+0xac>
 80011ea:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80011ee:	a97a      	add	r1, sp, #488	; 0x1e8
 80011f0:	4630      	mov	r0, r6
 80011f2:	f011 f856 	bl	80122a2 <memcpy>
 80011f6:	2d08      	cmp	r5, #8
 80011f8:	d11a      	bne.n	8001230 <unwind_phase2_forced+0xb8>
 80011fa:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80011fc:	4638      	mov	r0, r7
 80011fe:	f7ff ff1b 	bl	8001038 <get_eit_entry>
 8001202:	3409      	adds	r4, #9
 8001204:	fa5f fa84 	uxtb.w	sl, r4
 8001208:	4605      	mov	r5, r0
 800120a:	2800      	cmp	r0, #0
 800120c:	d0d4      	beq.n	80011b8 <unwind_phase2_forced+0x40>
 800120e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8001210:	6473      	str	r3, [r6, #68]	; 0x44
 8001212:	463a      	mov	r2, r7
 8001214:	e9cd 6900 	strd	r6, r9, [sp]
 8001218:	463b      	mov	r3, r7
 800121a:	f04a 0110 	orr.w	r1, sl, #16
 800121e:	2001      	movs	r0, #1
 8001220:	47c0      	blx	r8
 8001222:	b100      	cbz	r0, 8001226 <unwind_phase2_forced+0xae>
 8001224:	2509      	movs	r5, #9
 8001226:	4628      	mov	r0, r5
 8001228:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800122c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001230:	2d07      	cmp	r5, #7
 8001232:	d1f7      	bne.n	8001224 <unwind_phase2_forced+0xac>
 8001234:	4620      	mov	r0, r4
 8001236:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8001238:	f7ff ff7e 	bl	8001138 <_Unwind_DebugHook>
 800123c:	a803      	add	r0, sp, #12
 800123e:	f000 fbaf 	bl	80019a0 <__restore_core_regs>
 8001242:	bf00      	nop

08001244 <_Unwind_GetCFA>:
 8001244:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8001246:	4770      	bx	lr

08001248 <__gnu_Unwind_RaiseException>:
 8001248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800124c:	640b      	str	r3, [r1, #64]	; 0x40
 800124e:	f101 0c04 	add.w	ip, r1, #4
 8001252:	460e      	mov	r6, r1
 8001254:	4605      	mov	r5, r0
 8001256:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800125a:	b0f9      	sub	sp, #484	; 0x1e4
 800125c:	ac01      	add	r4, sp, #4
 800125e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001260:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001266:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800126a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800126c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8001270:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001274:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001278:	9700      	str	r7, [sp, #0]
 800127a:	e006      	b.n	800128a <__gnu_Unwind_RaiseException+0x42>
 800127c:	692b      	ldr	r3, [r5, #16]
 800127e:	466a      	mov	r2, sp
 8001280:	4629      	mov	r1, r5
 8001282:	4798      	blx	r3
 8001284:	2808      	cmp	r0, #8
 8001286:	4604      	mov	r4, r0
 8001288:	d108      	bne.n	800129c <__gnu_Unwind_RaiseException+0x54>
 800128a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800128c:	4628      	mov	r0, r5
 800128e:	f7ff fed3 	bl	8001038 <get_eit_entry>
 8001292:	2800      	cmp	r0, #0
 8001294:	d0f2      	beq.n	800127c <__gnu_Unwind_RaiseException+0x34>
 8001296:	2009      	movs	r0, #9
 8001298:	b079      	add	sp, #484	; 0x1e4
 800129a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800129c:	4668      	mov	r0, sp
 800129e:	f7ff ff17 	bl	80010d0 <restore_non_core_regs>
 80012a2:	2c06      	cmp	r4, #6
 80012a4:	d1f7      	bne.n	8001296 <__gnu_Unwind_RaiseException+0x4e>
 80012a6:	4631      	mov	r1, r6
 80012a8:	4628      	mov	r0, r5
 80012aa:	f7ff ff47 	bl	800113c <unwind_phase2>
 80012ae:	bf00      	nop

080012b0 <__gnu_Unwind_ForcedUnwind>:
 80012b0:	60c1      	str	r1, [r0, #12]
 80012b2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80012b4:	6182      	str	r2, [r0, #24]
 80012b6:	6419      	str	r1, [r3, #64]	; 0x40
 80012b8:	2200      	movs	r2, #0
 80012ba:	4619      	mov	r1, r3
 80012bc:	e75c      	b.n	8001178 <unwind_phase2_forced>
 80012be:	bf00      	nop

080012c0 <__gnu_Unwind_Resume>:
 80012c0:	b570      	push	{r4, r5, r6, lr}
 80012c2:	68c6      	ldr	r6, [r0, #12]
 80012c4:	6943      	ldr	r3, [r0, #20]
 80012c6:	640b      	str	r3, [r1, #64]	; 0x40
 80012c8:	b9ae      	cbnz	r6, 80012f6 <__gnu_Unwind_Resume+0x36>
 80012ca:	6903      	ldr	r3, [r0, #16]
 80012cc:	460a      	mov	r2, r1
 80012ce:	4604      	mov	r4, r0
 80012d0:	460d      	mov	r5, r1
 80012d2:	4601      	mov	r1, r0
 80012d4:	2002      	movs	r0, #2
 80012d6:	4798      	blx	r3
 80012d8:	2807      	cmp	r0, #7
 80012da:	d005      	beq.n	80012e8 <__gnu_Unwind_Resume+0x28>
 80012dc:	2808      	cmp	r0, #8
 80012de:	d10f      	bne.n	8001300 <__gnu_Unwind_Resume+0x40>
 80012e0:	4629      	mov	r1, r5
 80012e2:	4620      	mov	r0, r4
 80012e4:	f7ff ff2a 	bl	800113c <unwind_phase2>
 80012e8:	4630      	mov	r0, r6
 80012ea:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80012ec:	f7ff ff24 	bl	8001138 <_Unwind_DebugHook>
 80012f0:	1d28      	adds	r0, r5, #4
 80012f2:	f000 fb55 	bl	80019a0 <__restore_core_regs>
 80012f6:	2201      	movs	r2, #1
 80012f8:	f7ff ff3e 	bl	8001178 <unwind_phase2_forced>
 80012fc:	f010 f8ce 	bl	801149c <abort>
 8001300:	f010 f8cc 	bl	801149c <abort>

08001304 <__gnu_Unwind_Resume_or_Rethrow>:
 8001304:	68c2      	ldr	r2, [r0, #12]
 8001306:	b11a      	cbz	r2, 8001310 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8001308:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800130a:	640a      	str	r2, [r1, #64]	; 0x40
 800130c:	2200      	movs	r2, #0
 800130e:	e733      	b.n	8001178 <unwind_phase2_forced>
 8001310:	e79a      	b.n	8001248 <__gnu_Unwind_RaiseException>
 8001312:	bf00      	nop

08001314 <_Unwind_Complete>:
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop

08001318 <_Unwind_DeleteException>:
 8001318:	6883      	ldr	r3, [r0, #8]
 800131a:	4601      	mov	r1, r0
 800131c:	b10b      	cbz	r3, 8001322 <_Unwind_DeleteException+0xa>
 800131e:	2001      	movs	r0, #1
 8001320:	4718      	bx	r3
 8001322:	4770      	bx	lr

08001324 <_Unwind_VRS_Get>:
 8001324:	2901      	cmp	r1, #1
 8001326:	d012      	beq.n	800134e <_Unwind_VRS_Get+0x2a>
 8001328:	d809      	bhi.n	800133e <_Unwind_VRS_Get+0x1a>
 800132a:	b973      	cbnz	r3, 800134a <_Unwind_VRS_Get+0x26>
 800132c:	2a0f      	cmp	r2, #15
 800132e:	d80c      	bhi.n	800134a <_Unwind_VRS_Get+0x26>
 8001330:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001334:	4618      	mov	r0, r3
 8001336:	6853      	ldr	r3, [r2, #4]
 8001338:	9a00      	ldr	r2, [sp, #0]
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4770      	bx	lr
 800133e:	3903      	subs	r1, #3
 8001340:	2901      	cmp	r1, #1
 8001342:	bf94      	ite	ls
 8001344:	2001      	movls	r0, #1
 8001346:	2002      	movhi	r0, #2
 8001348:	4770      	bx	lr
 800134a:	2002      	movs	r0, #2
 800134c:	4770      	bx	lr
 800134e:	4608      	mov	r0, r1
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop

08001354 <_Unwind_GetGR>:
 8001354:	b500      	push	{lr}
 8001356:	b085      	sub	sp, #20
 8001358:	460a      	mov	r2, r1
 800135a:	2300      	movs	r3, #0
 800135c:	a903      	add	r1, sp, #12
 800135e:	9100      	str	r1, [sp, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	f7ff ffdf 	bl	8001324 <_Unwind_VRS_Get>
 8001366:	9803      	ldr	r0, [sp, #12]
 8001368:	b005      	add	sp, #20
 800136a:	f85d fb04 	ldr.w	pc, [sp], #4
 800136e:	bf00      	nop

08001370 <_Unwind_VRS_Set>:
 8001370:	2901      	cmp	r1, #1
 8001372:	d012      	beq.n	800139a <_Unwind_VRS_Set+0x2a>
 8001374:	d809      	bhi.n	800138a <_Unwind_VRS_Set+0x1a>
 8001376:	b973      	cbnz	r3, 8001396 <_Unwind_VRS_Set+0x26>
 8001378:	2a0f      	cmp	r2, #15
 800137a:	d80c      	bhi.n	8001396 <_Unwind_VRS_Set+0x26>
 800137c:	9900      	ldr	r1, [sp, #0]
 800137e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001382:	6809      	ldr	r1, [r1, #0]
 8001384:	6051      	str	r1, [r2, #4]
 8001386:	4618      	mov	r0, r3
 8001388:	4770      	bx	lr
 800138a:	3903      	subs	r1, #3
 800138c:	2901      	cmp	r1, #1
 800138e:	bf94      	ite	ls
 8001390:	2001      	movls	r0, #1
 8001392:	2002      	movhi	r0, #2
 8001394:	4770      	bx	lr
 8001396:	2002      	movs	r0, #2
 8001398:	4770      	bx	lr
 800139a:	4608      	mov	r0, r1
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop

080013a0 <_Unwind_SetGR>:
 80013a0:	b510      	push	{r4, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	2300      	movs	r3, #0
 80013a6:	ac03      	add	r4, sp, #12
 80013a8:	9203      	str	r2, [sp, #12]
 80013aa:	9400      	str	r4, [sp, #0]
 80013ac:	460a      	mov	r2, r1
 80013ae:	4619      	mov	r1, r3
 80013b0:	f7ff ffde 	bl	8001370 <_Unwind_VRS_Set>
 80013b4:	b004      	add	sp, #16
 80013b6:	bd10      	pop	{r4, pc}

080013b8 <__gnu_Unwind_Backtrace>:
 80013b8:	b570      	push	{r4, r5, r6, lr}
 80013ba:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80013bc:	6413      	str	r3, [r2, #64]	; 0x40
 80013be:	f102 0c04 	add.w	ip, r2, #4
 80013c2:	4605      	mov	r5, r0
 80013c4:	460c      	mov	r4, r1
 80013c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80013ca:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 80013ce:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 80013d2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80013d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80013da:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80013de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80013e2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80013e6:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80013ea:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80013ee:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80013f2:	9616      	str	r6, [sp, #88]	; 0x58
 80013f4:	e010      	b.n	8001418 <__gnu_Unwind_Backtrace+0x60>
 80013f6:	f7ff ffd3 	bl	80013a0 <_Unwind_SetGR>
 80013fa:	4621      	mov	r1, r4
 80013fc:	a816      	add	r0, sp, #88	; 0x58
 80013fe:	47a8      	blx	r5
 8001400:	4603      	mov	r3, r0
 8001402:	aa16      	add	r2, sp, #88	; 0x58
 8001404:	4669      	mov	r1, sp
 8001406:	2008      	movs	r0, #8
 8001408:	b983      	cbnz	r3, 800142c <__gnu_Unwind_Backtrace+0x74>
 800140a:	9b04      	ldr	r3, [sp, #16]
 800140c:	4798      	blx	r3
 800140e:	2805      	cmp	r0, #5
 8001410:	4606      	mov	r6, r0
 8001412:	d00c      	beq.n	800142e <__gnu_Unwind_Backtrace+0x76>
 8001414:	2809      	cmp	r0, #9
 8001416:	d009      	beq.n	800142c <__gnu_Unwind_Backtrace+0x74>
 8001418:	9926      	ldr	r1, [sp, #152]	; 0x98
 800141a:	4668      	mov	r0, sp
 800141c:	f7ff fe0c 	bl	8001038 <get_eit_entry>
 8001420:	4603      	mov	r3, r0
 8001422:	466a      	mov	r2, sp
 8001424:	210c      	movs	r1, #12
 8001426:	a816      	add	r0, sp, #88	; 0x58
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0e4      	beq.n	80013f6 <__gnu_Unwind_Backtrace+0x3e>
 800142c:	2609      	movs	r6, #9
 800142e:	a816      	add	r0, sp, #88	; 0x58
 8001430:	f7ff fe4e 	bl	80010d0 <restore_non_core_regs>
 8001434:	4630      	mov	r0, r6
 8001436:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 800143a:	bd70      	pop	{r4, r5, r6, pc}

0800143c <__gnu_unwind_pr_common>:
 800143c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001440:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8001442:	b089      	sub	sp, #36	; 0x24
 8001444:	461e      	mov	r6, r3
 8001446:	f854 3b04 	ldr.w	r3, [r4], #4
 800144a:	9406      	str	r4, [sp, #24]
 800144c:	460d      	mov	r5, r1
 800144e:	4617      	mov	r7, r2
 8001450:	f000 0803 	and.w	r8, r0, #3
 8001454:	2e00      	cmp	r6, #0
 8001456:	d079      	beq.n	800154c <__gnu_unwind_pr_common+0x110>
 8001458:	0c1a      	lsrs	r2, r3, #16
 800145a:	f88d 201d 	strb.w	r2, [sp, #29]
 800145e:	041b      	lsls	r3, r3, #16
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	9305      	str	r3, [sp, #20]
 8001464:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8001468:	2302      	movs	r3, #2
 800146a:	f88d 301c 	strb.w	r3, [sp, #28]
 800146e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8001470:	f1b8 0f02 	cmp.w	r8, #2
 8001474:	bf08      	it	eq
 8001476:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8001478:	f013 0301 	ands.w	r3, r3, #1
 800147c:	d00c      	beq.n	8001498 <__gnu_unwind_pr_common+0x5c>
 800147e:	a905      	add	r1, sp, #20
 8001480:	4638      	mov	r0, r7
 8001482:	f000 fb8f 	bl	8001ba4 <__gnu_unwind_execute>
 8001486:	b918      	cbnz	r0, 8001490 <__gnu_unwind_pr_common+0x54>
 8001488:	2008      	movs	r0, #8
 800148a:	b009      	add	sp, #36	; 0x24
 800148c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001490:	2009      	movs	r0, #9
 8001492:	b009      	add	sp, #36	; 0x24
 8001494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001498:	f8d4 a000 	ldr.w	sl, [r4]
 800149c:	f1ba 0f00 	cmp.w	sl, #0
 80014a0:	d0ed      	beq.n	800147e <__gnu_unwind_pr_common+0x42>
 80014a2:	9301      	str	r3, [sp, #4]
 80014a4:	f000 0308 	and.w	r3, r0, #8
 80014a8:	9302      	str	r3, [sp, #8]
 80014aa:	2e02      	cmp	r6, #2
 80014ac:	d04a      	beq.n	8001544 <__gnu_unwind_pr_common+0x108>
 80014ae:	f8b4 a000 	ldrh.w	sl, [r4]
 80014b2:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 80014b6:	3404      	adds	r4, #4
 80014b8:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80014ba:	f029 0b01 	bic.w	fp, r9, #1
 80014be:	210f      	movs	r1, #15
 80014c0:	4638      	mov	r0, r7
 80014c2:	449b      	add	fp, r3
 80014c4:	f7ff ff46 	bl	8001354 <_Unwind_GetGR>
 80014c8:	4583      	cmp	fp, r0
 80014ca:	d839      	bhi.n	8001540 <__gnu_unwind_pr_common+0x104>
 80014cc:	f02a 0201 	bic.w	r2, sl, #1
 80014d0:	445a      	add	r2, fp
 80014d2:	4282      	cmp	r2, r0
 80014d4:	bf94      	ite	ls
 80014d6:	2200      	movls	r2, #0
 80014d8:	2201      	movhi	r2, #1
 80014da:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	f00a 0a01 	and.w	sl, sl, #1
 80014e6:	ea43 030a 	orr.w	r3, r3, sl
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d04b      	beq.n	8001586 <__gnu_unwind_pr_common+0x14a>
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d032      	beq.n	8001558 <__gnu_unwind_pr_common+0x11c>
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1cc      	bne.n	8001490 <__gnu_unwind_pr_common+0x54>
 80014f6:	f1b8 0f00 	cmp.w	r8, #0
 80014fa:	d002      	beq.n	8001502 <__gnu_unwind_pr_common+0xc6>
 80014fc:	2a00      	cmp	r2, #0
 80014fe:	f040 80cd 	bne.w	800169c <__gnu_unwind_pr_common+0x260>
 8001502:	3404      	adds	r4, #4
 8001504:	f8d4 a000 	ldr.w	sl, [r4]
 8001508:	f1ba 0f00 	cmp.w	sl, #0
 800150c:	d1cd      	bne.n	80014aa <__gnu_unwind_pr_common+0x6e>
 800150e:	a905      	add	r1, sp, #20
 8001510:	4638      	mov	r0, r7
 8001512:	f000 fb47 	bl	8001ba4 <__gnu_unwind_execute>
 8001516:	2800      	cmp	r0, #0
 8001518:	d1ba      	bne.n	8001490 <__gnu_unwind_pr_common+0x54>
 800151a:	9b01      	ldr	r3, [sp, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0b3      	beq.n	8001488 <__gnu_unwind_pr_common+0x4c>
 8001520:	210f      	movs	r1, #15
 8001522:	4638      	mov	r0, r7
 8001524:	f7ff ff16 	bl	8001354 <_Unwind_GetGR>
 8001528:	210e      	movs	r1, #14
 800152a:	4602      	mov	r2, r0
 800152c:	4638      	mov	r0, r7
 800152e:	f7ff ff37 	bl	80013a0 <_Unwind_SetGR>
 8001532:	4638      	mov	r0, r7
 8001534:	4a6a      	ldr	r2, [pc, #424]	; (80016e0 <__gnu_unwind_pr_common+0x2a4>)
 8001536:	210f      	movs	r1, #15
 8001538:	f7ff ff32 	bl	80013a0 <_Unwind_SetGR>
 800153c:	2007      	movs	r0, #7
 800153e:	e7a8      	b.n	8001492 <__gnu_unwind_pr_common+0x56>
 8001540:	2200      	movs	r2, #0
 8001542:	e7ca      	b.n	80014da <__gnu_unwind_pr_common+0x9e>
 8001544:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8001548:	3408      	adds	r4, #8
 800154a:	e7b5      	b.n	80014b8 <__gnu_unwind_pr_common+0x7c>
 800154c:	021b      	lsls	r3, r3, #8
 800154e:	9305      	str	r3, [sp, #20]
 8001550:	f88d 601d 	strb.w	r6, [sp, #29]
 8001554:	2303      	movs	r3, #3
 8001556:	e788      	b.n	800146a <__gnu_unwind_pr_common+0x2e>
 8001558:	f8d4 9000 	ldr.w	r9, [r4]
 800155c:	f029 4b00 	bic.w	fp, r9, #2147483648	; 0x80000000
 8001560:	f1b8 0f00 	cmp.w	r8, #0
 8001564:	d146      	bne.n	80015f4 <__gnu_unwind_pr_common+0x1b8>
 8001566:	b12a      	cbz	r2, 8001574 <__gnu_unwind_pr_common+0x138>
 8001568:	9b02      	ldr	r3, [sp, #8]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d05b      	beq.n	8001626 <__gnu_unwind_pr_common+0x1ea>
 800156e:	f1bb 0f00 	cmp.w	fp, #0
 8001572:	d073      	beq.n	800165c <__gnu_unwind_pr_common+0x220>
 8001574:	f1b9 0f00 	cmp.w	r9, #0
 8001578:	da00      	bge.n	800157c <__gnu_unwind_pr_common+0x140>
 800157a:	3404      	adds	r4, #4
 800157c:	f10b 0b01 	add.w	fp, fp, #1
 8001580:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8001584:	e7be      	b.n	8001504 <__gnu_unwind_pr_common+0xc8>
 8001586:	f1b8 0f00 	cmp.w	r8, #0
 800158a:	d119      	bne.n	80015c0 <__gnu_unwind_pr_common+0x184>
 800158c:	b1b2      	cbz	r2, 80015bc <__gnu_unwind_pr_common+0x180>
 800158e:	6861      	ldr	r1, [r4, #4]
 8001590:	6822      	ldr	r2, [r4, #0]
 8001592:	1c88      	adds	r0, r1, #2
 8001594:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8001598:	f43f af7a 	beq.w	8001490 <__gnu_unwind_pr_common+0x54>
 800159c:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80015a0:	3101      	adds	r1, #1
 80015a2:	9304      	str	r3, [sp, #16]
 80015a4:	f000 808e 	beq.w	80016c4 <__gnu_unwind_pr_common+0x288>
 80015a8:	1d20      	adds	r0, r4, #4
 80015aa:	f7ff fdbf 	bl	800112c <_Unwind_decode_typeinfo_ptr.constprop.0>
 80015ae:	ab04      	add	r3, sp, #16
 80015b0:	4601      	mov	r1, r0
 80015b2:	4628      	mov	r0, r5
 80015b4:	f00f f9c6 	bl	8010944 <__cxa_type_match>
 80015b8:	2800      	cmp	r0, #0
 80015ba:	d159      	bne.n	8001670 <__gnu_unwind_pr_common+0x234>
 80015bc:	3408      	adds	r4, #8
 80015be:	e7a1      	b.n	8001504 <__gnu_unwind_pr_common+0xc8>
 80015c0:	210d      	movs	r1, #13
 80015c2:	4638      	mov	r0, r7
 80015c4:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80015c8:	f7ff fec4 	bl	8001354 <_Unwind_GetGR>
 80015cc:	4581      	cmp	r9, r0
 80015ce:	d1f5      	bne.n	80015bc <__gnu_unwind_pr_common+0x180>
 80015d0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80015d2:	429c      	cmp	r4, r3
 80015d4:	d1f2      	bne.n	80015bc <__gnu_unwind_pr_common+0x180>
 80015d6:	4620      	mov	r0, r4
 80015d8:	f7ff fce2 	bl	8000fa0 <selfrel_offset31>
 80015dc:	210f      	movs	r1, #15
 80015de:	4602      	mov	r2, r0
 80015e0:	4638      	mov	r0, r7
 80015e2:	f7ff fedd 	bl	80013a0 <_Unwind_SetGR>
 80015e6:	4638      	mov	r0, r7
 80015e8:	462a      	mov	r2, r5
 80015ea:	2100      	movs	r1, #0
 80015ec:	f7ff fed8 	bl	80013a0 <_Unwind_SetGR>
 80015f0:	2007      	movs	r0, #7
 80015f2:	e74e      	b.n	8001492 <__gnu_unwind_pr_common+0x56>
 80015f4:	210d      	movs	r1, #13
 80015f6:	4638      	mov	r0, r7
 80015f8:	f8d5 a020 	ldr.w	sl, [r5, #32]
 80015fc:	f7ff feaa 	bl	8001354 <_Unwind_GetGR>
 8001600:	4582      	cmp	sl, r0
 8001602:	d1b7      	bne.n	8001574 <__gnu_unwind_pr_common+0x138>
 8001604:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001606:	429c      	cmp	r4, r3
 8001608:	d1b4      	bne.n	8001574 <__gnu_unwind_pr_common+0x138>
 800160a:	2304      	movs	r3, #4
 800160c:	2200      	movs	r2, #0
 800160e:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 8001612:	18e3      	adds	r3, r4, r3
 8001614:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 8001618:	636b      	str	r3, [r5, #52]	; 0x34
 800161a:	6823      	ldr	r3, [r4, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	db59      	blt.n	80016d4 <__gnu_unwind_pr_common+0x298>
 8001620:	2301      	movs	r3, #1
 8001622:	9301      	str	r3, [sp, #4]
 8001624:	e7aa      	b.n	800157c <__gnu_unwind_pr_common+0x140>
 8001626:	4699      	mov	r9, r3
 8001628:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800162c:	f8cd 800c 	str.w	r8, [sp, #12]
 8001630:	f104 0a04 	add.w	sl, r4, #4
 8001634:	46b0      	mov	r8, r6
 8001636:	461e      	mov	r6, r3
 8001638:	e00e      	b.n	8001658 <__gnu_unwind_pr_common+0x21c>
 800163a:	4650      	mov	r0, sl
 800163c:	9604      	str	r6, [sp, #16]
 800163e:	f7ff fd75 	bl	800112c <_Unwind_decode_typeinfo_ptr.constprop.0>
 8001642:	2200      	movs	r2, #0
 8001644:	4601      	mov	r1, r0
 8001646:	ab04      	add	r3, sp, #16
 8001648:	4628      	mov	r0, r5
 800164a:	f109 0901 	add.w	r9, r9, #1
 800164e:	f10a 0a04 	add.w	sl, sl, #4
 8001652:	f00f f977 	bl	8010944 <__cxa_type_match>
 8001656:	b9d8      	cbnz	r0, 8001690 <__gnu_unwind_pr_common+0x254>
 8001658:	45d9      	cmp	r9, fp
 800165a:	d1ee      	bne.n	800163a <__gnu_unwind_pr_common+0x1fe>
 800165c:	210d      	movs	r1, #13
 800165e:	4638      	mov	r0, r7
 8001660:	f7ff fe78 	bl	8001354 <_Unwind_GetGR>
 8001664:	9b04      	ldr	r3, [sp, #16]
 8001666:	6228      	str	r0, [r5, #32]
 8001668:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 800166c:	2006      	movs	r0, #6
 800166e:	e710      	b.n	8001492 <__gnu_unwind_pr_common+0x56>
 8001670:	4681      	mov	r9, r0
 8001672:	210d      	movs	r1, #13
 8001674:	4638      	mov	r0, r7
 8001676:	f7ff fe6d 	bl	8001354 <_Unwind_GetGR>
 800167a:	f1b9 0f02 	cmp.w	r9, #2
 800167e:	bf04      	itt	eq
 8001680:	462b      	moveq	r3, r5
 8001682:	9a04      	ldreq	r2, [sp, #16]
 8001684:	6228      	str	r0, [r5, #32]
 8001686:	bf14      	ite	ne
 8001688:	9b04      	ldrne	r3, [sp, #16]
 800168a:	f843 2f2c 	streq.w	r2, [r3, #44]!
 800168e:	e7eb      	b.n	8001668 <__gnu_unwind_pr_common+0x22c>
 8001690:	4646      	mov	r6, r8
 8001692:	f8d4 9000 	ldr.w	r9, [r4]
 8001696:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800169a:	e76b      	b.n	8001574 <__gnu_unwind_pr_common+0x138>
 800169c:	4620      	mov	r0, r4
 800169e:	f7ff fc7f 	bl	8000fa0 <selfrel_offset31>
 80016a2:	3404      	adds	r4, #4
 80016a4:	4602      	mov	r2, r0
 80016a6:	63ac      	str	r4, [r5, #56]	; 0x38
 80016a8:	4628      	mov	r0, r5
 80016aa:	4614      	mov	r4, r2
 80016ac:	f00f f9a8 	bl	8010a00 <__cxa_begin_cleanup>
 80016b0:	2800      	cmp	r0, #0
 80016b2:	f43f aeed 	beq.w	8001490 <__gnu_unwind_pr_common+0x54>
 80016b6:	4638      	mov	r0, r7
 80016b8:	4622      	mov	r2, r4
 80016ba:	210f      	movs	r1, #15
 80016bc:	f7ff fe70 	bl	80013a0 <_Unwind_SetGR>
 80016c0:	2007      	movs	r0, #7
 80016c2:	e6e6      	b.n	8001492 <__gnu_unwind_pr_common+0x56>
 80016c4:	210d      	movs	r1, #13
 80016c6:	4638      	mov	r0, r7
 80016c8:	9301      	str	r3, [sp, #4]
 80016ca:	f7ff fe43 	bl	8001354 <_Unwind_GetGR>
 80016ce:	9b01      	ldr	r3, [sp, #4]
 80016d0:	6228      	str	r0, [r5, #32]
 80016d2:	e7c9      	b.n	8001668 <__gnu_unwind_pr_common+0x22c>
 80016d4:	f10b 0001 	add.w	r0, fp, #1
 80016d8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80016dc:	e77c      	b.n	80015d8 <__gnu_unwind_pr_common+0x19c>
 80016de:	bf00      	nop
 80016e0:	080113d7 	.word	0x080113d7

080016e4 <__aeabi_unwind_cpp_pr0>:
 80016e4:	2300      	movs	r3, #0
 80016e6:	e6a9      	b.n	800143c <__gnu_unwind_pr_common>

080016e8 <__aeabi_unwind_cpp_pr1>:
 80016e8:	2301      	movs	r3, #1
 80016ea:	e6a7      	b.n	800143c <__gnu_unwind_pr_common>

080016ec <__aeabi_unwind_cpp_pr2>:
 80016ec:	2302      	movs	r3, #2
 80016ee:	e6a5      	b.n	800143c <__gnu_unwind_pr_common>

080016f0 <_Unwind_VRS_Pop>:
 80016f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016f4:	4606      	mov	r6, r0
 80016f6:	b0c3      	sub	sp, #268	; 0x10c
 80016f8:	4691      	mov	r9, r2
 80016fa:	461c      	mov	r4, r3
 80016fc:	2904      	cmp	r1, #4
 80016fe:	f200 809b 	bhi.w	8001838 <_Unwind_VRS_Pop+0x148>
 8001702:	e8df f001 	tbb	[pc, r1]
 8001706:	567b      	.short	0x567b
 8001708:	2e99      	.short	0x2e99
 800170a:	03          	.byte	0x03
 800170b:	00          	.byte	0x00
 800170c:	2c00      	cmp	r4, #0
 800170e:	f040 8093 	bne.w	8001838 <_Unwind_VRS_Pop+0x148>
 8001712:	2a10      	cmp	r2, #16
 8001714:	f200 8090 	bhi.w	8001838 <_Unwind_VRS_Pop+0x148>
 8001718:	6803      	ldr	r3, [r0, #0]
 800171a:	06dc      	lsls	r4, r3, #27
 800171c:	f100 80f3 	bmi.w	8001906 <_Unwind_VRS_Pop+0x216>
 8001720:	af20      	add	r7, sp, #128	; 0x80
 8001722:	4638      	mov	r0, r7
 8001724:	f000 f9ae 	bl	8001a84 <__gnu_Unwind_Save_WMMXC>
 8001728:	6bb4      	ldr	r4, [r6, #56]	; 0x38
 800172a:	4639      	mov	r1, r7
 800172c:	2300      	movs	r3, #0
 800172e:	f04f 0c01 	mov.w	ip, #1
 8001732:	fa0c f203 	lsl.w	r2, ip, r3
 8001736:	ea12 0f09 	tst.w	r2, r9
 800173a:	4620      	mov	r0, r4
 800173c:	f103 0301 	add.w	r3, r3, #1
 8001740:	d003      	beq.n	800174a <_Unwind_VRS_Pop+0x5a>
 8001742:	f850 2b04 	ldr.w	r2, [r0], #4
 8001746:	600a      	str	r2, [r1, #0]
 8001748:	4604      	mov	r4, r0
 800174a:	2b04      	cmp	r3, #4
 800174c:	f101 0104 	add.w	r1, r1, #4
 8001750:	d1ef      	bne.n	8001732 <_Unwind_VRS_Pop+0x42>
 8001752:	4638      	mov	r0, r7
 8001754:	63b4      	str	r4, [r6, #56]	; 0x38
 8001756:	f000 f98b 	bl	8001a70 <__gnu_Unwind_Restore_WMMXC>
 800175a:	2000      	movs	r0, #0
 800175c:	b043      	add	sp, #268	; 0x10c
 800175e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001762:	2c03      	cmp	r4, #3
 8001764:	d168      	bne.n	8001838 <_Unwind_VRS_Pop+0x148>
 8001766:	b294      	uxth	r4, r2
 8001768:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 800176c:	2b10      	cmp	r3, #16
 800176e:	ea4f 4912 	mov.w	r9, r2, lsr #16
 8001772:	d861      	bhi.n	8001838 <_Unwind_VRS_Pop+0x148>
 8001774:	6803      	ldr	r3, [r0, #0]
 8001776:	071d      	lsls	r5, r3, #28
 8001778:	f100 80cd 	bmi.w	8001916 <_Unwind_VRS_Pop+0x226>
 800177c:	af20      	add	r7, sp, #128	; 0x80
 800177e:	4638      	mov	r0, r7
 8001780:	f000 f954 	bl	8001a2c <__gnu_Unwind_Save_WMMXD>
 8001784:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8001786:	eb07 01c9 	add.w	r1, r7, r9, lsl #3
 800178a:	b154      	cbz	r4, 80017a2 <_Unwind_VRS_Pop+0xb2>
 800178c:	460b      	mov	r3, r1
 800178e:	1ad0      	subs	r0, r2, r3
 8001790:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8001794:	00e4      	lsls	r4, r4, #3
 8001796:	581d      	ldr	r5, [r3, r0]
 8001798:	f843 5b04 	str.w	r5, [r3], #4
 800179c:	428b      	cmp	r3, r1
 800179e:	d1fa      	bne.n	8001796 <_Unwind_VRS_Pop+0xa6>
 80017a0:	4422      	add	r2, r4
 80017a2:	4638      	mov	r0, r7
 80017a4:	63b2      	str	r2, [r6, #56]	; 0x38
 80017a6:	f000 f91f 	bl	80019e8 <__gnu_Unwind_Restore_WMMXD>
 80017aa:	2000      	movs	r0, #0
 80017ac:	b043      	add	sp, #268	; 0x10c
 80017ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017b2:	2c01      	cmp	r4, #1
 80017b4:	ea4f 4812 	mov.w	r8, r2, lsr #16
 80017b8:	fa1f f982 	uxth.w	r9, r2
 80017bc:	d038      	beq.n	8001830 <_Unwind_VRS_Pop+0x140>
 80017be:	2c05      	cmp	r4, #5
 80017c0:	d13a      	bne.n	8001838 <_Unwind_VRS_Pop+0x148>
 80017c2:	eb08 0309 	add.w	r3, r8, r9
 80017c6:	2b20      	cmp	r3, #32
 80017c8:	d836      	bhi.n	8001838 <_Unwind_VRS_Pop+0x148>
 80017ca:	f1b8 0f0f 	cmp.w	r8, #15
 80017ce:	d976      	bls.n	80018be <_Unwind_VRS_Pop+0x1ce>
 80017d0:	f1b9 0f00 	cmp.w	r9, #0
 80017d4:	f040 8083 	bne.w	80018de <_Unwind_VRS_Pop+0x1ee>
 80017d8:	2b0f      	cmp	r3, #15
 80017da:	d80b      	bhi.n	80017f4 <_Unwind_VRS_Pop+0x104>
 80017dc:	6833      	ldr	r3, [r6, #0]
 80017de:	07d8      	lsls	r0, r3, #31
 80017e0:	d508      	bpl.n	80017f4 <_Unwind_VRS_Pop+0x104>
 80017e2:	4630      	mov	r0, r6
 80017e4:	f023 0301 	bic.w	r3, r3, #1
 80017e8:	f043 0302 	orr.w	r3, r3, #2
 80017ec:	f840 3b48 	str.w	r3, [r0], #72
 80017f0:	f000 f8ee 	bl	80019d0 <__gnu_Unwind_Save_VFP_D>
 80017f4:	2000      	movs	r0, #0
 80017f6:	b043      	add	sp, #268	; 0x10c
 80017f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017fc:	b9e4      	cbnz	r4, 8001838 <_Unwind_VRS_Pop+0x148>
 80017fe:	6b87      	ldr	r7, [r0, #56]	; 0x38
 8001800:	4623      	mov	r3, r4
 8001802:	fa1f fc82 	uxth.w	ip, r2
 8001806:	2001      	movs	r0, #1
 8001808:	1d34      	adds	r4, r6, #4
 800180a:	fa00 f203 	lsl.w	r2, r0, r3
 800180e:	ea12 0f0c 	tst.w	r2, ip
 8001812:	4639      	mov	r1, r7
 8001814:	d004      	beq.n	8001820 <_Unwind_VRS_Pop+0x130>
 8001816:	f851 2b04 	ldr.w	r2, [r1], #4
 800181a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 800181e:	460f      	mov	r7, r1
 8001820:	3301      	adds	r3, #1
 8001822:	2b10      	cmp	r3, #16
 8001824:	d1f1      	bne.n	800180a <_Unwind_VRS_Pop+0x11a>
 8001826:	f419 5000 	ands.w	r0, r9, #8192	; 0x2000
 800182a:	d1e3      	bne.n	80017f4 <_Unwind_VRS_Pop+0x104>
 800182c:	63b7      	str	r7, [r6, #56]	; 0x38
 800182e:	e004      	b.n	800183a <_Unwind_VRS_Pop+0x14a>
 8001830:	eb08 0309 	add.w	r3, r8, r9
 8001834:	2b10      	cmp	r3, #16
 8001836:	d903      	bls.n	8001840 <_Unwind_VRS_Pop+0x150>
 8001838:	2002      	movs	r0, #2
 800183a:	b043      	add	sp, #268	; 0x10c
 800183c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001840:	f1b8 0f0f 	cmp.w	r8, #15
 8001844:	d8f8      	bhi.n	8001838 <_Unwind_VRS_Pop+0x148>
 8001846:	6833      	ldr	r3, [r6, #0]
 8001848:	07da      	lsls	r2, r3, #31
 800184a:	d506      	bpl.n	800185a <_Unwind_VRS_Pop+0x16a>
 800184c:	4630      	mov	r0, r6
 800184e:	f023 0303 	bic.w	r3, r3, #3
 8001852:	f840 3b48 	str.w	r3, [r0], #72
 8001856:	f000 f8b3 	bl	80019c0 <__gnu_Unwind_Save_VFP>
 800185a:	af20      	add	r7, sp, #128	; 0x80
 800185c:	4638      	mov	r0, r7
 800185e:	464d      	mov	r5, r9
 8001860:	f000 f8ae 	bl	80019c0 <__gnu_Unwind_Save_VFP>
 8001864:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8001866:	2d00      	cmp	r5, #0
 8001868:	d05e      	beq.n	8001928 <_Unwind_VRS_Pop+0x238>
 800186a:	f04f 0900 	mov.w	r9, #0
 800186e:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8001872:	eb02 03c5 	add.w	r3, r2, r5, lsl #3
 8001876:	3904      	subs	r1, #4
 8001878:	f852 0b04 	ldr.w	r0, [r2], #4
 800187c:	f841 0f04 	str.w	r0, [r1, #4]!
 8001880:	429a      	cmp	r2, r3
 8001882:	d1f9      	bne.n	8001878 <_Unwind_VRS_Pop+0x188>
 8001884:	f1b9 0f00 	cmp.w	r9, #0
 8001888:	d054      	beq.n	8001934 <_Unwind_VRS_Pop+0x244>
 800188a:	466f      	mov	r7, sp
 800188c:	4641      	mov	r1, r8
 800188e:	2910      	cmp	r1, #16
 8001890:	bf38      	it	cc
 8001892:	2110      	movcc	r1, #16
 8001894:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8001898:	3984      	subs	r1, #132	; 0x84
 800189a:	eb03 02c9 	add.w	r2, r3, r9, lsl #3
 800189e:	f853 5b04 	ldr.w	r5, [r3], #4
 80018a2:	f841 5f04 	str.w	r5, [r1, #4]!
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d1f9      	bne.n	800189e <_Unwind_VRS_Pop+0x1ae>
 80018aa:	2c01      	cmp	r4, #1
 80018ac:	d03b      	beq.n	8001926 <_Unwind_VRS_Pop+0x236>
 80018ae:	f1b8 0f0f 	cmp.w	r8, #15
 80018b2:	63b2      	str	r2, [r6, #56]	; 0x38
 80018b4:	d958      	bls.n	8001968 <_Unwind_VRS_Pop+0x278>
 80018b6:	4638      	mov	r0, r7
 80018b8:	f000 f88e 	bl	80019d8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80018bc:	e79a      	b.n	80017f4 <_Unwind_VRS_Pop+0x104>
 80018be:	2b10      	cmp	r3, #16
 80018c0:	d954      	bls.n	800196c <_Unwind_VRS_Pop+0x27c>
 80018c2:	6832      	ldr	r2, [r6, #0]
 80018c4:	07d7      	lsls	r7, r2, #31
 80018c6:	f1a3 0910 	sub.w	r9, r3, #16
 80018ca:	d509      	bpl.n	80018e0 <_Unwind_VRS_Pop+0x1f0>
 80018cc:	f022 0301 	bic.w	r3, r2, #1
 80018d0:	4630      	mov	r0, r6
 80018d2:	f043 0302 	orr.w	r3, r3, #2
 80018d6:	f840 3b48 	str.w	r3, [r0], #72
 80018da:	f000 f879 	bl	80019d0 <__gnu_Unwind_Save_VFP_D>
 80018de:	6832      	ldr	r2, [r6, #0]
 80018e0:	0753      	lsls	r3, r2, #29
 80018e2:	d439      	bmi.n	8001958 <_Unwind_VRS_Pop+0x268>
 80018e4:	f1b8 0f0f 	cmp.w	r8, #15
 80018e8:	d802      	bhi.n	80018f0 <_Unwind_VRS_Pop+0x200>
 80018ea:	a820      	add	r0, sp, #128	; 0x80
 80018ec:	f000 f870 	bl	80019d0 <__gnu_Unwind_Save_VFP_D>
 80018f0:	466f      	mov	r7, sp
 80018f2:	4638      	mov	r0, r7
 80018f4:	f1c8 0510 	rsb	r5, r8, #16
 80018f8:	f000 f872 	bl	80019e0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80018fc:	2d00      	cmp	r5, #0
 80018fe:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8001900:	dd28      	ble.n	8001954 <_Unwind_VRS_Pop+0x264>
 8001902:	af20      	add	r7, sp, #128	; 0x80
 8001904:	e7b3      	b.n	800186e <_Unwind_VRS_Pop+0x17e>
 8001906:	f023 0310 	bic.w	r3, r3, #16
 800190a:	6003      	str	r3, [r0, #0]
 800190c:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
 8001910:	f000 f8b8 	bl	8001a84 <__gnu_Unwind_Save_WMMXC>
 8001914:	e704      	b.n	8001720 <_Unwind_VRS_Pop+0x30>
 8001916:	f023 0308 	bic.w	r3, r3, #8
 800191a:	6003      	str	r3, [r0, #0]
 800191c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8001920:	f000 f884 	bl	8001a2c <__gnu_Unwind_Save_WMMXD>
 8001924:	e72a      	b.n	800177c <_Unwind_VRS_Pop+0x8c>
 8001926:	af20      	add	r7, sp, #128	; 0x80
 8001928:	3204      	adds	r2, #4
 800192a:	63b2      	str	r2, [r6, #56]	; 0x38
 800192c:	4638      	mov	r0, r7
 800192e:	f000 f843 	bl	80019b8 <__gnu_Unwind_Restore_VFP>
 8001932:	e75f      	b.n	80017f4 <_Unwind_VRS_Pop+0x104>
 8001934:	2c01      	cmp	r4, #1
 8001936:	d0f7      	beq.n	8001928 <_Unwind_VRS_Pop+0x238>
 8001938:	f1b8 0f0f 	cmp.w	r8, #15
 800193c:	63b2      	str	r2, [r6, #56]	; 0x38
 800193e:	f63f af59 	bhi.w	80017f4 <_Unwind_VRS_Pop+0x104>
 8001942:	4638      	mov	r0, r7
 8001944:	f000 f840 	bl	80019c8 <__gnu_Unwind_Restore_VFP_D>
 8001948:	f1b9 0f00 	cmp.w	r9, #0
 800194c:	f43f af52 	beq.w	80017f4 <_Unwind_VRS_Pop+0x104>
 8001950:	466f      	mov	r7, sp
 8001952:	e7b0      	b.n	80018b6 <_Unwind_VRS_Pop+0x1c6>
 8001954:	4613      	mov	r3, r2
 8001956:	e799      	b.n	800188c <_Unwind_VRS_Pop+0x19c>
 8001958:	4630      	mov	r0, r6
 800195a:	f022 0204 	bic.w	r2, r2, #4
 800195e:	f840 2bd0 	str.w	r2, [r0], #208
 8001962:	f000 f83d 	bl	80019e0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001966:	e7bd      	b.n	80018e4 <_Unwind_VRS_Pop+0x1f4>
 8001968:	af20      	add	r7, sp, #128	; 0x80
 800196a:	e7ea      	b.n	8001942 <_Unwind_VRS_Pop+0x252>
 800196c:	6833      	ldr	r3, [r6, #0]
 800196e:	07d9      	lsls	r1, r3, #31
 8001970:	d508      	bpl.n	8001984 <_Unwind_VRS_Pop+0x294>
 8001972:	f023 0301 	bic.w	r3, r3, #1
 8001976:	4630      	mov	r0, r6
 8001978:	f043 0302 	orr.w	r3, r3, #2
 800197c:	f840 3b48 	str.w	r3, [r0], #72
 8001980:	f000 f826 	bl	80019d0 <__gnu_Unwind_Save_VFP_D>
 8001984:	af20      	add	r7, sp, #128	; 0x80
 8001986:	4638      	mov	r0, r7
 8001988:	464d      	mov	r5, r9
 800198a:	f000 f821 	bl	80019d0 <__gnu_Unwind_Save_VFP_D>
 800198e:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8001990:	2d00      	cmp	r5, #0
 8001992:	f47f af6a 	bne.w	800186a <_Unwind_VRS_Pop+0x17a>
 8001996:	4638      	mov	r0, r7
 8001998:	f000 f816 	bl	80019c8 <__gnu_Unwind_Restore_VFP_D>
 800199c:	e72a      	b.n	80017f4 <_Unwind_VRS_Pop+0x104>
 800199e:	bf00      	nop

080019a0 <__restore_core_regs>:
 80019a0:	f100 0134 	add.w	r1, r0, #52	; 0x34
 80019a4:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 80019a8:	469c      	mov	ip, r3
 80019aa:	46a6      	mov	lr, r4
 80019ac:	f84c 5d04 	str.w	r5, [ip, #-4]!
 80019b0:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80019b4:	46e5      	mov	sp, ip
 80019b6:	bd00      	pop	{pc}

080019b8 <__gnu_Unwind_Restore_VFP>:
 80019b8:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop

080019c0 <__gnu_Unwind_Save_VFP>:
 80019c0:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop

080019c8 <__gnu_Unwind_Restore_VFP_D>:
 80019c8:	ec90 0b20 	vldmia	r0, {d0-d15}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop

080019d0 <__gnu_Unwind_Save_VFP_D>:
 80019d0:	ec80 0b20 	vstmia	r0, {d0-d15}
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop

080019d8 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80019d8:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop

080019e0 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80019e0:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop

080019e8 <__gnu_Unwind_Restore_WMMXD>:
 80019e8:	ecf0 0102 	ldfe	f0, [r0], #8
 80019ec:	ecf0 1102 	ldfe	f1, [r0], #8
 80019f0:	ecf0 2102 	ldfe	f2, [r0], #8
 80019f4:	ecf0 3102 	ldfe	f3, [r0], #8
 80019f8:	ecf0 4102 	ldfe	f4, [r0], #8
 80019fc:	ecf0 5102 	ldfe	f5, [r0], #8
 8001a00:	ecf0 6102 	ldfe	f6, [r0], #8
 8001a04:	ecf0 7102 	ldfe	f7, [r0], #8
 8001a08:	ecf0 8102 	ldfp	f0, [r0], #8
 8001a0c:	ecf0 9102 	ldfp	f1, [r0], #8
 8001a10:	ecf0 a102 	ldfp	f2, [r0], #8
 8001a14:	ecf0 b102 	ldfp	f3, [r0], #8
 8001a18:	ecf0 c102 	ldfp	f4, [r0], #8
 8001a1c:	ecf0 d102 	ldfp	f5, [r0], #8
 8001a20:	ecf0 e102 	ldfp	f6, [r0], #8
 8001a24:	ecf0 f102 	ldfp	f7, [r0], #8
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop

08001a2c <__gnu_Unwind_Save_WMMXD>:
 8001a2c:	ece0 0102 	stfe	f0, [r0], #8
 8001a30:	ece0 1102 	stfe	f1, [r0], #8
 8001a34:	ece0 2102 	stfe	f2, [r0], #8
 8001a38:	ece0 3102 	stfe	f3, [r0], #8
 8001a3c:	ece0 4102 	stfe	f4, [r0], #8
 8001a40:	ece0 5102 	stfe	f5, [r0], #8
 8001a44:	ece0 6102 	stfe	f6, [r0], #8
 8001a48:	ece0 7102 	stfe	f7, [r0], #8
 8001a4c:	ece0 8102 	stfp	f0, [r0], #8
 8001a50:	ece0 9102 	stfp	f1, [r0], #8
 8001a54:	ece0 a102 	stfp	f2, [r0], #8
 8001a58:	ece0 b102 	stfp	f3, [r0], #8
 8001a5c:	ece0 c102 	stfp	f4, [r0], #8
 8001a60:	ece0 d102 	stfp	f5, [r0], #8
 8001a64:	ece0 e102 	stfp	f6, [r0], #8
 8001a68:	ece0 f102 	stfp	f7, [r0], #8
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop

08001a70 <__gnu_Unwind_Restore_WMMXC>:
 8001a70:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001a74:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001a78:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001a7c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop

08001a84 <__gnu_Unwind_Save_WMMXC>:
 8001a84:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001a88:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001a8c:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001a90:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop

08001a98 <_Unwind_RaiseException>:
 8001a98:	46ec      	mov	ip, sp
 8001a9a:	b500      	push	{lr}
 8001a9c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001aa0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001aac:	a901      	add	r1, sp, #4
 8001aae:	f7ff fbcb 	bl	8001248 <__gnu_Unwind_RaiseException>
 8001ab2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001ab6:	b012      	add	sp, #72	; 0x48
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop

08001abc <_Unwind_Resume>:
 8001abc:	46ec      	mov	ip, sp
 8001abe:	b500      	push	{lr}
 8001ac0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001ac4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001ad0:	a901      	add	r1, sp, #4
 8001ad2:	f7ff fbf5 	bl	80012c0 <__gnu_Unwind_Resume>
 8001ad6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001ada:	b012      	add	sp, #72	; 0x48
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop

08001ae0 <_Unwind_Resume_or_Rethrow>:
 8001ae0:	46ec      	mov	ip, sp
 8001ae2:	b500      	push	{lr}
 8001ae4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001ae8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001aec:	f04f 0300 	mov.w	r3, #0
 8001af0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001af4:	a901      	add	r1, sp, #4
 8001af6:	f7ff fc05 	bl	8001304 <__gnu_Unwind_Resume_or_Rethrow>
 8001afa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001afe:	b012      	add	sp, #72	; 0x48
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop

08001b04 <_Unwind_ForcedUnwind>:
 8001b04:	46ec      	mov	ip, sp
 8001b06:	b500      	push	{lr}
 8001b08:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001b0c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001b10:	f04f 0300 	mov.w	r3, #0
 8001b14:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001b18:	ab01      	add	r3, sp, #4
 8001b1a:	f7ff fbc9 	bl	80012b0 <__gnu_Unwind_ForcedUnwind>
 8001b1e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001b22:	b012      	add	sp, #72	; 0x48
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop

08001b28 <_Unwind_Backtrace>:
 8001b28:	46ec      	mov	ip, sp
 8001b2a:	b500      	push	{lr}
 8001b2c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001b30:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001b34:	f04f 0300 	mov.w	r3, #0
 8001b38:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001b3c:	aa01      	add	r2, sp, #4
 8001b3e:	f7ff fc3b 	bl	80013b8 <__gnu_Unwind_Backtrace>
 8001b42:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001b46:	b012      	add	sp, #72	; 0x48
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop

08001b4c <next_unwind_byte>:
 8001b4c:	7a02      	ldrb	r2, [r0, #8]
 8001b4e:	4603      	mov	r3, r0
 8001b50:	b97a      	cbnz	r2, 8001b72 <next_unwind_byte+0x26>
 8001b52:	7a42      	ldrb	r2, [r0, #9]
 8001b54:	b1a2      	cbz	r2, 8001b80 <next_unwind_byte+0x34>
 8001b56:	6841      	ldr	r1, [r0, #4]
 8001b58:	3a01      	subs	r2, #1
 8001b5a:	b410      	push	{r4}
 8001b5c:	7242      	strb	r2, [r0, #9]
 8001b5e:	6808      	ldr	r0, [r1, #0]
 8001b60:	2203      	movs	r2, #3
 8001b62:	1d0c      	adds	r4, r1, #4
 8001b64:	721a      	strb	r2, [r3, #8]
 8001b66:	0202      	lsls	r2, r0, #8
 8001b68:	605c      	str	r4, [r3, #4]
 8001b6a:	0e00      	lsrs	r0, r0, #24
 8001b6c:	bc10      	pop	{r4}
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	4770      	bx	lr
 8001b72:	6800      	ldr	r0, [r0, #0]
 8001b74:	3a01      	subs	r2, #1
 8001b76:	721a      	strb	r2, [r3, #8]
 8001b78:	0202      	lsls	r2, r0, #8
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	0e00      	lsrs	r0, r0, #24
 8001b7e:	4770      	bx	lr
 8001b80:	20b0      	movs	r0, #176	; 0xb0
 8001b82:	4770      	bx	lr

08001b84 <_Unwind_GetGR.constprop.0>:
 8001b84:	b500      	push	{lr}
 8001b86:	b085      	sub	sp, #20
 8001b88:	2300      	movs	r3, #0
 8001b8a:	aa03      	add	r2, sp, #12
 8001b8c:	9200      	str	r2, [sp, #0]
 8001b8e:	4619      	mov	r1, r3
 8001b90:	220c      	movs	r2, #12
 8001b92:	f7ff fbc7 	bl	8001324 <_Unwind_VRS_Get>
 8001b96:	9803      	ldr	r0, [sp, #12]
 8001b98:	b005      	add	sp, #20
 8001b9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b9e:	bf00      	nop

08001ba0 <unwind_UCB_from_context>:
 8001ba0:	e7f0      	b.n	8001b84 <_Unwind_GetGR.constprop.0>
 8001ba2:	bf00      	nop

08001ba4 <__gnu_unwind_execute>:
 8001ba4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ba8:	b085      	sub	sp, #20
 8001baa:	4607      	mov	r7, r0
 8001bac:	460e      	mov	r6, r1
 8001bae:	f04f 0800 	mov.w	r8, #0
 8001bb2:	ad03      	add	r5, sp, #12
 8001bb4:	4630      	mov	r0, r6
 8001bb6:	f7ff ffc9 	bl	8001b4c <next_unwind_byte>
 8001bba:	28b0      	cmp	r0, #176	; 0xb0
 8001bbc:	4604      	mov	r4, r0
 8001bbe:	f000 80cb 	beq.w	8001d58 <__gnu_unwind_execute+0x1b4>
 8001bc2:	0603      	lsls	r3, r0, #24
 8001bc4:	d540      	bpl.n	8001c48 <__gnu_unwind_execute+0xa4>
 8001bc6:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001bca:	2b80      	cmp	r3, #128	; 0x80
 8001bcc:	d056      	beq.n	8001c7c <__gnu_unwind_execute+0xd8>
 8001bce:	2bb0      	cmp	r3, #176	; 0xb0
 8001bd0:	d07d      	beq.n	8001cce <__gnu_unwind_execute+0x12a>
 8001bd2:	d81c      	bhi.n	8001c0e <__gnu_unwind_execute+0x6a>
 8001bd4:	2b90      	cmp	r3, #144	; 0x90
 8001bd6:	f000 8093 	beq.w	8001d00 <__gnu_unwind_execute+0x15c>
 8001bda:	2ba0      	cmp	r3, #160	; 0xa0
 8001bdc:	d113      	bne.n	8001c06 <__gnu_unwind_execute+0x62>
 8001bde:	43c3      	mvns	r3, r0
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001be8:	411a      	asrs	r2, r3
 8001bea:	0701      	lsls	r1, r0, #28
 8001bec:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001bf0:	f04f 0300 	mov.w	r3, #0
 8001bf4:	bf48      	it	mi
 8001bf6:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4638      	mov	r0, r7
 8001bfe:	f7ff fd77 	bl	80016f0 <_Unwind_VRS_Pop>
 8001c02:	2800      	cmp	r0, #0
 8001c04:	d0d6      	beq.n	8001bb4 <__gnu_unwind_execute+0x10>
 8001c06:	2009      	movs	r0, #9
 8001c08:	b005      	add	sp, #20
 8001c0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c0e:	2bc0      	cmp	r3, #192	; 0xc0
 8001c10:	d14b      	bne.n	8001caa <__gnu_unwind_execute+0x106>
 8001c12:	28c6      	cmp	r0, #198	; 0xc6
 8001c14:	f000 8089 	beq.w	8001d2a <__gnu_unwind_execute+0x186>
 8001c18:	28c7      	cmp	r0, #199	; 0xc7
 8001c1a:	f000 80a2 	beq.w	8001d62 <__gnu_unwind_execute+0x1be>
 8001c1e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001c22:	2bc0      	cmp	r3, #192	; 0xc0
 8001c24:	f000 80bc 	beq.w	8001da0 <__gnu_unwind_execute+0x1fc>
 8001c28:	28c8      	cmp	r0, #200	; 0xc8
 8001c2a:	f000 80bf 	beq.w	8001dac <__gnu_unwind_execute+0x208>
 8001c2e:	28c9      	cmp	r0, #201	; 0xc9
 8001c30:	d1e9      	bne.n	8001c06 <__gnu_unwind_execute+0x62>
 8001c32:	4630      	mov	r0, r6
 8001c34:	f7ff ff8a 	bl	8001b4c <next_unwind_byte>
 8001c38:	0302      	lsls	r2, r0, #12
 8001c3a:	f000 000f 	and.w	r0, r0, #15
 8001c3e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001c42:	3001      	adds	r0, #1
 8001c44:	4302      	orrs	r2, r0
 8001c46:	e039      	b.n	8001cbc <__gnu_unwind_execute+0x118>
 8001c48:	0083      	lsls	r3, r0, #2
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	f103 0904 	add.w	r9, r3, #4
 8001c50:	2300      	movs	r3, #0
 8001c52:	4619      	mov	r1, r3
 8001c54:	9500      	str	r5, [sp, #0]
 8001c56:	220d      	movs	r2, #13
 8001c58:	4638      	mov	r0, r7
 8001c5a:	f7ff fb63 	bl	8001324 <_Unwind_VRS_Get>
 8001c5e:	9b03      	ldr	r3, [sp, #12]
 8001c60:	0660      	lsls	r0, r4, #25
 8001c62:	bf4c      	ite	mi
 8001c64:	eba3 0309 	submi.w	r3, r3, r9
 8001c68:	444b      	addpl	r3, r9
 8001c6a:	9303      	str	r3, [sp, #12]
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	9500      	str	r5, [sp, #0]
 8001c70:	220d      	movs	r2, #13
 8001c72:	4619      	mov	r1, r3
 8001c74:	4638      	mov	r0, r7
 8001c76:	f7ff fb7b 	bl	8001370 <_Unwind_VRS_Set>
 8001c7a:	e79b      	b.n	8001bb4 <__gnu_unwind_execute+0x10>
 8001c7c:	0204      	lsls	r4, r0, #8
 8001c7e:	4630      	mov	r0, r6
 8001c80:	f7ff ff64 	bl	8001b4c <next_unwind_byte>
 8001c84:	4320      	orrs	r0, r4
 8001c86:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001c8a:	d0bc      	beq.n	8001c06 <__gnu_unwind_execute+0x62>
 8001c8c:	0104      	lsls	r4, r0, #4
 8001c8e:	2300      	movs	r3, #0
 8001c90:	b2a2      	uxth	r2, r4
 8001c92:	4619      	mov	r1, r3
 8001c94:	4638      	mov	r0, r7
 8001c96:	f7ff fd2b 	bl	80016f0 <_Unwind_VRS_Pop>
 8001c9a:	2800      	cmp	r0, #0
 8001c9c:	d1b3      	bne.n	8001c06 <__gnu_unwind_execute+0x62>
 8001c9e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001ca2:	bf18      	it	ne
 8001ca4:	f04f 0801 	movne.w	r8, #1
 8001ca8:	e784      	b.n	8001bb4 <__gnu_unwind_execute+0x10>
 8001caa:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001cae:	2bd0      	cmp	r3, #208	; 0xd0
 8001cb0:	d1a9      	bne.n	8001c06 <__gnu_unwind_execute+0x62>
 8001cb2:	f000 0207 	and.w	r2, r0, #7
 8001cb6:	3201      	adds	r2, #1
 8001cb8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001cbc:	2305      	movs	r3, #5
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	4638      	mov	r0, r7
 8001cc2:	f7ff fd15 	bl	80016f0 <_Unwind_VRS_Pop>
 8001cc6:	2800      	cmp	r0, #0
 8001cc8:	f43f af74 	beq.w	8001bb4 <__gnu_unwind_execute+0x10>
 8001ccc:	e79b      	b.n	8001c06 <__gnu_unwind_execute+0x62>
 8001cce:	28b1      	cmp	r0, #177	; 0xb1
 8001cd0:	d037      	beq.n	8001d42 <__gnu_unwind_execute+0x19e>
 8001cd2:	28b2      	cmp	r0, #178	; 0xb2
 8001cd4:	f000 8087 	beq.w	8001de6 <__gnu_unwind_execute+0x242>
 8001cd8:	28b3      	cmp	r0, #179	; 0xb3
 8001cda:	d056      	beq.n	8001d8a <__gnu_unwind_execute+0x1e6>
 8001cdc:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001ce0:	2bb4      	cmp	r3, #180	; 0xb4
 8001ce2:	d090      	beq.n	8001c06 <__gnu_unwind_execute+0x62>
 8001ce4:	f000 0207 	and.w	r2, r0, #7
 8001ce8:	3201      	adds	r2, #1
 8001cea:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001cee:	2301      	movs	r3, #1
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4638      	mov	r0, r7
 8001cf4:	f7ff fcfc 	bl	80016f0 <_Unwind_VRS_Pop>
 8001cf8:	2800      	cmp	r0, #0
 8001cfa:	f43f af5b 	beq.w	8001bb4 <__gnu_unwind_execute+0x10>
 8001cfe:	e782      	b.n	8001c06 <__gnu_unwind_execute+0x62>
 8001d00:	f000 030d 	and.w	r3, r0, #13
 8001d04:	2b0d      	cmp	r3, #13
 8001d06:	f43f af7e 	beq.w	8001c06 <__gnu_unwind_execute+0x62>
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f000 020f 	and.w	r2, r0, #15
 8001d10:	4619      	mov	r1, r3
 8001d12:	9500      	str	r5, [sp, #0]
 8001d14:	4638      	mov	r0, r7
 8001d16:	f7ff fb05 	bl	8001324 <_Unwind_VRS_Get>
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	9500      	str	r5, [sp, #0]
 8001d1e:	220d      	movs	r2, #13
 8001d20:	4619      	mov	r1, r3
 8001d22:	4638      	mov	r0, r7
 8001d24:	f7ff fb24 	bl	8001370 <_Unwind_VRS_Set>
 8001d28:	e744      	b.n	8001bb4 <__gnu_unwind_execute+0x10>
 8001d2a:	4630      	mov	r0, r6
 8001d2c:	f7ff ff0e 	bl	8001b4c <next_unwind_byte>
 8001d30:	0302      	lsls	r2, r0, #12
 8001d32:	f000 000f 	and.w	r0, r0, #15
 8001d36:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001d3a:	3001      	adds	r0, #1
 8001d3c:	4302      	orrs	r2, r0
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e7d6      	b.n	8001cf0 <__gnu_unwind_execute+0x14c>
 8001d42:	4630      	mov	r0, r6
 8001d44:	f7ff ff02 	bl	8001b4c <next_unwind_byte>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	2800      	cmp	r0, #0
 8001d4c:	f43f af5b 	beq.w	8001c06 <__gnu_unwind_execute+0x62>
 8001d50:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001d54:	d0cc      	beq.n	8001cf0 <__gnu_unwind_execute+0x14c>
 8001d56:	e756      	b.n	8001c06 <__gnu_unwind_execute+0x62>
 8001d58:	f1b8 0f00 	cmp.w	r8, #0
 8001d5c:	d032      	beq.n	8001dc4 <__gnu_unwind_execute+0x220>
 8001d5e:	2000      	movs	r0, #0
 8001d60:	e752      	b.n	8001c08 <__gnu_unwind_execute+0x64>
 8001d62:	4630      	mov	r0, r6
 8001d64:	f7ff fef2 	bl	8001b4c <next_unwind_byte>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	2800      	cmp	r0, #0
 8001d6c:	f43f af4b 	beq.w	8001c06 <__gnu_unwind_execute+0x62>
 8001d70:	f010 0ff0 	tst.w	r0, #240	; 0xf0
 8001d74:	f47f af47 	bne.w	8001c06 <__gnu_unwind_execute+0x62>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	2104      	movs	r1, #4
 8001d7c:	4638      	mov	r0, r7
 8001d7e:	f7ff fcb7 	bl	80016f0 <_Unwind_VRS_Pop>
 8001d82:	2800      	cmp	r0, #0
 8001d84:	f43f af16 	beq.w	8001bb4 <__gnu_unwind_execute+0x10>
 8001d88:	e73d      	b.n	8001c06 <__gnu_unwind_execute+0x62>
 8001d8a:	4630      	mov	r0, r6
 8001d8c:	f7ff fede 	bl	8001b4c <next_unwind_byte>
 8001d90:	0302      	lsls	r2, r0, #12
 8001d92:	f000 000f 	and.w	r0, r0, #15
 8001d96:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001d9a:	3001      	adds	r0, #1
 8001d9c:	4302      	orrs	r2, r0
 8001d9e:	e7a6      	b.n	8001cee <__gnu_unwind_execute+0x14a>
 8001da0:	f000 020f 	and.w	r2, r0, #15
 8001da4:	3201      	adds	r2, #1
 8001da6:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001daa:	e7c8      	b.n	8001d3e <__gnu_unwind_execute+0x19a>
 8001dac:	4630      	mov	r0, r6
 8001dae:	f7ff fecd 	bl	8001b4c <next_unwind_byte>
 8001db2:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001db6:	f000 030f 	and.w	r3, r0, #15
 8001dba:	3210      	adds	r2, #16
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001dc2:	e77b      	b.n	8001cbc <__gnu_unwind_execute+0x118>
 8001dc4:	ac03      	add	r4, sp, #12
 8001dc6:	4643      	mov	r3, r8
 8001dc8:	220e      	movs	r2, #14
 8001dca:	4641      	mov	r1, r8
 8001dcc:	9400      	str	r4, [sp, #0]
 8001dce:	4638      	mov	r0, r7
 8001dd0:	f7ff faa8 	bl	8001324 <_Unwind_VRS_Get>
 8001dd4:	9400      	str	r4, [sp, #0]
 8001dd6:	4643      	mov	r3, r8
 8001dd8:	220f      	movs	r2, #15
 8001dda:	4641      	mov	r1, r8
 8001ddc:	4638      	mov	r0, r7
 8001dde:	f7ff fac7 	bl	8001370 <_Unwind_VRS_Set>
 8001de2:	4640      	mov	r0, r8
 8001de4:	e710      	b.n	8001c08 <__gnu_unwind_execute+0x64>
 8001de6:	2300      	movs	r3, #0
 8001de8:	220d      	movs	r2, #13
 8001dea:	4619      	mov	r1, r3
 8001dec:	9500      	str	r5, [sp, #0]
 8001dee:	4638      	mov	r0, r7
 8001df0:	f7ff fa98 	bl	8001324 <_Unwind_VRS_Get>
 8001df4:	4630      	mov	r0, r6
 8001df6:	f7ff fea9 	bl	8001b4c <next_unwind_byte>
 8001dfa:	0602      	lsls	r2, r0, #24
 8001dfc:	9c03      	ldr	r4, [sp, #12]
 8001dfe:	f04f 0902 	mov.w	r9, #2
 8001e02:	d50c      	bpl.n	8001e1e <__gnu_unwind_execute+0x27a>
 8001e04:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001e08:	fa00 f009 	lsl.w	r0, r0, r9
 8001e0c:	4404      	add	r4, r0
 8001e0e:	4630      	mov	r0, r6
 8001e10:	9403      	str	r4, [sp, #12]
 8001e12:	f7ff fe9b 	bl	8001b4c <next_unwind_byte>
 8001e16:	0603      	lsls	r3, r0, #24
 8001e18:	f109 0907 	add.w	r9, r9, #7
 8001e1c:	d4f2      	bmi.n	8001e04 <__gnu_unwind_execute+0x260>
 8001e1e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 8001e22:	fa03 f309 	lsl.w	r3, r3, r9
 8001e26:	f504 7401 	add.w	r4, r4, #516	; 0x204
 8001e2a:	4423      	add	r3, r4
 8001e2c:	e71d      	b.n	8001c6a <__gnu_unwind_execute+0xc6>
 8001e2e:	bf00      	nop

08001e30 <__gnu_unwind_frame>:
 8001e30:	b510      	push	{r4, lr}
 8001e32:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001e34:	6853      	ldr	r3, [r2, #4]
 8001e36:	b084      	sub	sp, #16
 8001e38:	f04f 0c03 	mov.w	ip, #3
 8001e3c:	3208      	adds	r2, #8
 8001e3e:	021c      	lsls	r4, r3, #8
 8001e40:	4608      	mov	r0, r1
 8001e42:	0e1b      	lsrs	r3, r3, #24
 8001e44:	a901      	add	r1, sp, #4
 8001e46:	9401      	str	r4, [sp, #4]
 8001e48:	9202      	str	r2, [sp, #8]
 8001e4a:	f88d c00c 	strb.w	ip, [sp, #12]
 8001e4e:	f88d 300d 	strb.w	r3, [sp, #13]
 8001e52:	f7ff fea7 	bl	8001ba4 <__gnu_unwind_execute>
 8001e56:	b004      	add	sp, #16
 8001e58:	bd10      	pop	{r4, pc}
 8001e5a:	bf00      	nop

08001e5c <_Unwind_GetRegionStart>:
 8001e5c:	b508      	push	{r3, lr}
 8001e5e:	f7ff fe9f 	bl	8001ba0 <unwind_UCB_from_context>
 8001e62:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001e64:	bd08      	pop	{r3, pc}
 8001e66:	bf00      	nop

08001e68 <_Unwind_GetLanguageSpecificData>:
 8001e68:	b508      	push	{r3, lr}
 8001e6a:	f7ff fe99 	bl	8001ba0 <unwind_UCB_from_context>
 8001e6e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001e70:	79c3      	ldrb	r3, [r0, #7]
 8001e72:	3302      	adds	r3, #2
 8001e74:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001e78:	bd08      	pop	{r3, pc}
 8001e7a:	bf00      	nop

08001e7c <__aeabi_idiv0>:
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop

08001e80 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>:
	 * @param standby_reset_port port name of the STBY\RST pin of the xnucleo shield.
	 * @param standby_reset_pin pin of the STBY\RST pin of the xnucleo shield.
	 * @param ssel_port     port name of the SSEL pin used for SPI communication.
	 * @param ssel_pin     pin of the SSEL used for SPI communication.
	 */
	XNucleoIHM02A1(L6470_init_t *init_0, L6470_init_t *init_1, SPI_HandleTypeDef *spi, GPIO_TypeDef* standby_reset_port  ,uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin) :spi(spi), standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin)
 8001e80:	b590      	push	{r4, r7, lr}
 8001e82:	b08b      	sub	sp, #44	; 0x2c
 8001e84:	af02      	add	r7, sp, #8
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	603b      	str	r3, [r7, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e98:	619a      	str	r2, [r3, #24]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001e9e:	839a      	strh	r2, [r3, #28]
	{
	    HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8001ea0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001ea8:	f00b fbee 	bl	800d688 <HAL_GPIO_WritePin>


	    if( shield_1::count == 0)
 8001eac:	4b65      	ldr	r3, [pc, #404]	; (8002044 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1c4>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d125      	bne.n	8001f00 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x80>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001eb4:	2008      	movs	r0, #8
 8001eb6:	f00f f8f9 	bl	80110ac <_Znaj>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
 8001ec6:	e017      	b.n	8001ef8 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x78>
	    	{
				motor_drivers[i] = new L6470<shield_1>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001ec8:	206c      	movs	r0, #108	; 0x6c
 8001eca:	f00f f8de 	bl	801108a <_Znwj>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	461c      	mov	r4, r3
 8001ed2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ede:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ee0:	4620      	mov	r0, r4
 8001ee2:	f000 fd61 	bl	80029a8 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	61fb      	str	r3, [r7, #28]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	dde4      	ble.n	8001ec8 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x48>
 8001efe:	e061      	b.n	8001fc4 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x144>
	    	}
	    }
	    else if( shield_2::count == 0)
 8001f00:	4b51      	ldr	r3, [pc, #324]	; (8002048 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1c8>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d125      	bne.n	8001f54 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xd4>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001f08:	2008      	movs	r0, #8
 8001f0a:	f00f f8cf 	bl	80110ac <_Znaj>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	461a      	mov	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f16:	2300      	movs	r3, #0
 8001f18:	61bb      	str	r3, [r7, #24]
 8001f1a:	e017      	b.n	8001f4c <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xcc>
	    	{
				motor_drivers[i] = new L6470<shield_2>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001f1c:	206c      	movs	r0, #108	; 0x6c
 8001f1e:	f00f f8b4 	bl	801108a <_Znwj>
 8001f22:	4603      	mov	r3, r0
 8001f24:	461c      	mov	r4, r3
 8001f26:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	9301      	str	r3, [sp, #4]
 8001f2c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f34:	4620      	mov	r0, r4
 8001f36:	f000 fda9 	bl	8002a8c <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	61bb      	str	r3, [r7, #24]
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	dde4      	ble.n	8001f1c <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x9c>
 8001f52:	e037      	b.n	8001fc4 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x144>
	    	}
	    }
	    else if( shield_3::count == 0)
 8001f54:	4b3d      	ldr	r3, [pc, #244]	; (800204c <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1cc>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d125      	bne.n	8001fa8 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x128>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001f5c:	2008      	movs	r0, #8
 8001f5e:	f00f f8a5 	bl	80110ac <_Znaj>
 8001f62:	4603      	mov	r3, r0
 8001f64:	461a      	mov	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	e017      	b.n	8001fa0 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x120>
	    	{
				motor_drivers[i] = new L6470<shield_3>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001f70:	206c      	movs	r0, #108	; 0x6c
 8001f72:	f00f f88a 	bl	801108a <_Znwj>
 8001f76:	4603      	mov	r3, r0
 8001f78:	461c      	mov	r4, r3
 8001f7a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	9301      	str	r3, [sp, #4]
 8001f80:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f88:	4620      	mov	r0, r4
 8001f8a:	f000 fdf1 	bl	8002b70 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	dde4      	ble.n	8001f70 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xf0>
 8001fa6:	e00d      	b.n	8001fc4 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x144>
	    	}
	    }
	    else
	    {
	    	throw std::runtime_error("Cannot create more than 3 shields");
 8001fa8:	2008      	movs	r0, #8
 8001faa:	f00e fc6d 	bl	8010888 <__cxa_allocate_exception>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	461c      	mov	r4, r3
 8001fb2:	4927      	ldr	r1, [pc, #156]	; (8002050 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1d0>)
 8001fb4:	4620      	mov	r0, r4
 8001fb6:	f00f f96b 	bl	8011290 <_ZNSt13runtime_errorC1EPKc>
 8001fba:	4a26      	ldr	r2, [pc, #152]	; (8002054 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1d4>)
 8001fbc:	4926      	ldr	r1, [pc, #152]	; (8002058 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1d8>)
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	f00f f848 	bl	8011054 <__cxa_throw>




	    /* Initializing the motor_drivers. */
	    init_motor_drivers[0] = init_0;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	68ba      	ldr	r2, [r7, #8]
 8001fc8:	609a      	str	r2, [r3, #8]
	    init_motor_drivers[1] = init_1;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	60da      	str	r2, [r3, #12]
	    if (!init()) {
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f000 f845 	bl	8002060 <_ZNK14XNucleoIHM02A14initEv>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	f083 0301 	eor.w	r3, r3, #1
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00d      	beq.n	8001ffe <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x17e>
	        /*Do nothing*/
	    	throw std::runtime_error("init failed");
 8001fe2:	2008      	movs	r0, #8
 8001fe4:	f00e fc50 	bl	8010888 <__cxa_allocate_exception>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	461c      	mov	r4, r3
 8001fec:	491b      	ldr	r1, [pc, #108]	; (800205c <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1dc>)
 8001fee:	4620      	mov	r0, r4
 8001ff0:	f00f f94e 	bl	8011290 <_ZNSt13runtime_errorC1EPKc>
 8001ff4:	4a17      	ldr	r2, [pc, #92]	; (8002054 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1d4>)
 8001ff6:	4918      	ldr	r1, [pc, #96]	; (8002058 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1d8>)
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	f00f f82b 	bl	8011054 <__cxa_throw>
	    }
	}
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	e01b      	b.n	800203a <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1ba>
				motor_drivers[i] = new L6470<shield_1>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8002002:	216c      	movs	r1, #108	; 0x6c
 8002004:	4620      	mov	r0, r4
 8002006:	f00e fbe1 	bl	80107cc <_ZdlPvj>
 800200a:	f00e fc77 	bl	80108fc <__cxa_end_cleanup>
				motor_drivers[i] = new L6470<shield_2>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 800200e:	216c      	movs	r1, #108	; 0x6c
 8002010:	4620      	mov	r0, r4
 8002012:	f00e fbdb 	bl	80107cc <_ZdlPvj>
 8002016:	f00e fc71 	bl	80108fc <__cxa_end_cleanup>
				motor_drivers[i] = new L6470<shield_3>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 800201a:	216c      	movs	r1, #108	; 0x6c
 800201c:	4620      	mov	r0, r4
 800201e:	f00e fbd5 	bl	80107cc <_ZdlPvj>
 8002022:	f00e fc6b 	bl	80108fc <__cxa_end_cleanup>
	    	throw std::runtime_error("Cannot create more than 3 shields");
 8002026:	4620      	mov	r0, r4
 8002028:	f00e fc44 	bl	80108b4 <__cxa_free_exception>
 800202c:	f00e fc66 	bl	80108fc <__cxa_end_cleanup>
	    	throw std::runtime_error("init failed");
 8002030:	4620      	mov	r0, r4
 8002032:	f00e fc3f 	bl	80108b4 <__cxa_free_exception>
 8002036:	f00e fc61 	bl	80108fc <__cxa_end_cleanup>
	}
 800203a:	4618      	mov	r0, r3
 800203c:	3724      	adds	r7, #36	; 0x24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd90      	pop	{r4, r7, pc}
 8002042:	bf00      	nop
 8002044:	200002a4 	.word	0x200002a4
 8002048:	200002a5 	.word	0x200002a5
 800204c:	200002a6 	.word	0x200002a6
 8002050:	08013e50 	.word	0x08013e50
 8002054:	080111e5 	.word	0x080111e5
 8002058:	08015410 	.word	0x08015410
 800205c:	08013e74 	.word	0x08013e74

08002060 <_ZNK14XNucleoIHM02A14initEv>:

    /**
     * @brief Initializing the X_NUCLEO_IHM02A1 board.
     * @retval true if initialization is successful, false otherwise.
     */
    bool init(void) const noexcept
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
    {
        /* Disable the L6470. */

    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6998      	ldr	r0, [r3, #24]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	8b9b      	ldrh	r3, [r3, #28]
 8002070:	2200      	movs	r2, #0
 8002072:	4619      	mov	r1, r3
 8002074:	f00b fb08 	bl	800d688 <HAL_GPIO_WritePin>

    	/* Wait for at least t_STBY,min */
    	HAL_Delay(1);
 8002078:	2001      	movs	r0, #1
 800207a:	f00a ffa9 	bl	800cfd0 <HAL_Delay>

    	/* Enable the L6470. */
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_SET);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6998      	ldr	r0, [r3, #24]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	8b9b      	ldrh	r3, [r3, #28]
 8002086:	2201      	movs	r2, #1
 8002088:	4619      	mov	r1, r3
 800208a:	f00b fafd 	bl	800d688 <HAL_GPIO_WritePin>

    	/* Wait for at least t_logicwu */
    	HAL_Delay(1);
 800208e:	2001      	movs	r0, #1
 8002090:	f00a ff9e 	bl	800cfd0 <HAL_Delay>



        return init_all_motor_drivers();
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f892 	bl	80021be <_ZNK14XNucleoIHM02A122init_all_motor_driversEv>
 800209a:	4603      	mov	r3, r0
    }
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <_ZNK14XNucleoIHM02A117get_motor_driversEv>:
    /**
     * @brief  Getting the array of motor_drivers.
     * @param  None.
     * @retval The array of motor_drivers.
     */
    abstractL6470 **get_motor_drivers(void) const noexcept
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
    {
        return motor_drivers;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
    }
 80020b0:	4618      	mov	r0, r3
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>:
      *         "Prepare<Action>()" methods, one for each motor of the daisy-chain.
      * @param  None.
      * @retval A pointer to the results returned by the motor_drivers, i.e. an
      *         integer value for each of them.
      */
    uint32_t* perform_prepared_actions(void) noexcept
 80020bc:	b5b0      	push	{r4, r5, r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
    {
        /* Performing pre-actions, if needed. */
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	e040      	b.n	800214c <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0x90>
            /*
               "GetPosition()" is needed by "PrepareSetMark()" at the time when the
               prepared actions get performed.
            */
            if (motor_drivers[m]->get_prepared_action() == prepared_action_t::PREPARED_SET_MARK) {
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	6819      	ldr	r1, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4608      	mov	r0, r1
 80020ec:	4798      	blx	r3
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b09      	cmp	r3, #9
 80020f2:	bf0c      	ite	eq
 80020f4:	2301      	moveq	r3, #1
 80020f6:	2300      	movne	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d023      	beq.n	8002146 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0x8a>
                motor_drivers[m]->prepare_set_mark((uint32_t) motor_drivers[m]->get_position());
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	681d      	ldr	r5, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	33cc      	adds	r3, #204	; 0xcc
 800211a:	681c      	ldr	r4, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	6819      	ldr	r1, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	3314      	adds	r3, #20
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4608      	mov	r0, r1
 800213c:	4798      	blx	r3
 800213e:	4603      	mov	r3, r0
 8002140:	4619      	mov	r1, r3
 8002142:	4628      	mov	r0, r5
 8002144:	47a0      	blx	r4
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	3301      	adds	r3, #1
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	2b01      	cmp	r3, #1
 8002150:	ddbb      	ble.n	80020ca <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0xe>
            }
        }
        
        /* Performing the prepared actions and getting back raw data. */
        uint8_t *raw_data = motor_drivers[0]->perform_prepared_actions();
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4610      	mov	r0, r2
 8002168:	4798      	blx	r3
 800216a:	4603      	mov	r3, r0
 800216c:	60fb      	str	r3, [r7, #12]

        /* Processing raw data. */
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 800216e:	2300      	movs	r3, #0
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	e01b      	b.n	80021ac <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0xf0>
            results[m] = motor_drivers[m]->get_result(raw_data);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68f9      	ldr	r1, [r7, #12]
 8002196:	4798      	blx	r3
 8002198:	4603      	mov	r3, r0
 800219a:	4619      	mov	r1, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	3204      	adds	r2, #4
 80021a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	3301      	adds	r3, #1
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	dde0      	ble.n	8002174 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0xb8>
        }

        /* Returning results. */
        return results;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3310      	adds	r3, #16
    }
 80021b6:	4618      	mov	r0, r3
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bdb0      	pop	{r4, r5, r7, pc}

080021be <_ZNK14XNucleoIHM02A122init_all_motor_driversEv>:

    /**
     * @brief  Initialize the L6470 motor drivers.
     * @retval true if initialization is successful, false otherwise.
     */
    bool init_all_motor_drivers() const noexcept
 80021be:	b580      	push	{r7, lr}
 80021c0:	b084      	sub	sp, #16
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
    {
    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	e022      	b.n	8002212 <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x54>
    	{
    		if(motor_drivers[i]->init((void*) init_motor_drivers[i]) != COMPONENT_OK)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	6818      	ldr	r0, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	3308      	adds	r3, #8
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	68f9      	ldr	r1, [r7, #12]
 80021ee:	3102      	adds	r1, #2
 80021f0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80021f4:	4611      	mov	r1, r2
 80021f6:	4798      	blx	r3
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	bf14      	ite	ne
 80021fe:	2301      	movne	r3, #1
 8002200:	2300      	moveq	r3, #0
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x4e>
    		{
    			return false;
 8002208:	2300      	movs	r3, #0
 800220a:	e006      	b.n	800221a <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x5c>
    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	3301      	adds	r3, #1
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2b01      	cmp	r3, #1
 8002216:	ddd9      	ble.n	80021cc <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0xe>
    		}
    	}
    	return true;
 8002218:	2301      	movs	r3, #1

    }
 800221a:	4618      	mov	r0, r3
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>:
  * @param standby_reset_port_shield_2 , port du GPIO du signal de reset du shield 2
  * @param standby_reset_pin_shield_2  , pin  du GPIO du signal de reset du shield 2
  * @param ssel_port_shield_2          , port du GPIO de commmunication SPI pour le shield 2
  * @param ssel_port_shield_2          , pin  du GPIO de commmunication SPI pour le shield 2
  */
BlocMoteurs::BlocMoteurs(SPI_HandleTypeDef *spi,
 8002224:	b590      	push	{r4, r7, lr}
 8002226:	b08b      	sub	sp, #44	; 0x2c
 8002228:	af04      	add	r7, sp, #16
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	807b      	strh	r3, [r7, #2]
		GPIO_TypeDef* standby_reset_port_shield_1  ,uint16_t standby_reset_pin_shield_1 ,GPIO_TypeDef* ssel_port_shield_1 , uint16_t ssel_pin_shield_1,
		GPIO_TypeDef* standby_reset_port_shield_2  ,uint16_t standby_reset_pin_shield_2 ,GPIO_TypeDef* ssel_port_shield_2 , uint16_t ssel_pin_shield_2)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4a41      	ldr	r2, [pc, #260]	; (800233c <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x118>)
 8002236:	3318      	adds	r3, #24
 8002238:	4611      	mov	r1, r2
 800223a:	22b0      	movs	r2, #176	; 0xb0
 800223c:	4618      	mov	r0, r3
 800223e:	f010 f830 	bl	80122a2 <memcpy>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4a3d      	ldr	r2, [pc, #244]	; (800233c <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x118>)
 8002246:	33c8      	adds	r3, #200	; 0xc8
 8002248:	4611      	mov	r1, r2
 800224a:	22b0      	movs	r2, #176	; 0xb0
 800224c:	4618      	mov	r0, r3
 800224e:	f010 f828 	bl	80122a2 <memcpy>
{
	//moteurs à l'arret par défaut
	moteurs_arret = 0;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	701a      	strb	r2, [r3, #0]
	//vitesse par défaut
	max_vitesse = MAX_VITESSE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800225e:	605a      	str	r2, [r3, #4]

    shield_1 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_1, standby_reset_pin_shield_1, ssel_port_shield_1, ssel_pin_shield_1);
 8002260:	2020      	movs	r0, #32
 8002262:	f00e ff12 	bl	801108a <_Znwj>
 8002266:	4603      	mov	r3, r0
 8002268:	461c      	mov	r4, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f103 0118 	add.w	r1, r3, #24
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f503 7290 	add.w	r2, r3, #288	; 0x120
 8002276:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002278:	9303      	str	r3, [sp, #12]
 800227a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227c:	9302      	str	r3, [sp, #8]
 800227e:	887b      	ldrh	r3, [r7, #2]
 8002280:	9301      	str	r3, [sp, #4]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	4620      	mov	r0, r4
 800228a:	f7ff fdf9 	bl	8001e80 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	609c      	str	r4, [r3, #8]
    shield_2 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_2, standby_reset_pin_shield_2, ssel_port_shield_2, ssel_pin_shield_2);
 8002292:	2020      	movs	r0, #32
 8002294:	f00e fef9 	bl	801108a <_Znwj>
 8002298:	4603      	mov	r3, r0
 800229a:	461c      	mov	r4, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f103 0118 	add.w	r1, r3, #24
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f503 7290 	add.w	r2, r3, #288	; 0x120
 80022a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80022aa:	9303      	str	r3, [sp, #12]
 80022ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ae:	9302      	str	r3, [sp, #8]
 80022b0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80022b2:	9301      	str	r3, [sp, #4]
 80022b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	4620      	mov	r0, r4
 80022bc:	f7ff fde0 	bl	8001e80 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	60dc      	str	r4, [r3, #12]
    abstractL6470** moteurs_shield_1 = shield_1->get_motor_drivers();
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff feeb 	bl	80020a4 <_ZNK14XNucleoIHM02A117get_motor_driversEv>
 80022ce:	6178      	str	r0, [r7, #20]
    abstractL6470** moteurs_shield_2 = shield_2->get_motor_drivers();
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff fee5 	bl	80020a4 <_ZNK14XNucleoIHM02A117get_motor_driversEv>
 80022da:	6138      	str	r0, [r7, #16]
    moteurs = new abstractL6470*[NMOTEURS];
 80022dc:	2010      	movs	r0, #16
 80022de:	f00e fee5 	bl	80110ac <_Znaj>
 80022e2:	4603      	mov	r3, r0
 80022e4:	461a      	mov	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	611a      	str	r2, [r3, #16]

	#ifdef CANONICAL_DIR // inverse ou non shield du haut/bas
		moteurs[front_left] = moteurs_shield_1[left];
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	601a      	str	r2, [r3, #0]
		moteurs[front_right] = moteurs_shield_1[right];
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	3304      	adds	r3, #4
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	6852      	ldr	r2, [r2, #4]
 80022fe:	601a      	str	r2, [r3, #0]
		moteurs[back_left] = moteurs_shield_2[left];
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	3308      	adds	r3, #8
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	6812      	ldr	r2, [r2, #0]
 800230a:	601a      	str	r2, [r3, #0]
		moteurs[back_right] = moteurs_shield_2[right];
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	330c      	adds	r3, #12
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	6852      	ldr	r2, [r2, #4]
 8002316:	601a      	str	r2, [r3, #0]
		moteurs[back_right] = moteurs_shield_1[right];
	#endif



}
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	e00b      	b.n	8002334 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x110>
    shield_1 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_1, standby_reset_pin_shield_1, ssel_port_shield_1, ssel_pin_shield_1);
 800231c:	2120      	movs	r1, #32
 800231e:	4620      	mov	r0, r4
 8002320:	f00e fa54 	bl	80107cc <_ZdlPvj>
 8002324:	f00e faea 	bl	80108fc <__cxa_end_cleanup>
    shield_2 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_2, standby_reset_pin_shield_2, ssel_port_shield_2, ssel_pin_shield_2);
 8002328:	2120      	movs	r1, #32
 800232a:	4620      	mov	r0, r4
 800232c:	f00e fa4e 	bl	80107cc <_ZdlPvj>
 8002330:	f00e fae4 	bl	80108fc <__cxa_end_cleanup>
}
 8002334:	4618      	mov	r0, r3
 8002336:	371c      	adds	r7, #28
 8002338:	46bd      	mov	sp, r7
 800233a:	bd90      	pop	{r4, r7, pc}
 800233c:	08013e80 	.word	0x08013e80

08002340 <_ZN11BlocMoteurs11rad_to_stepEf>:

constexpr float RAD_PER_FULL_STEP = (DEG_PER_FULL_STEP*M_PI)/180.0;

float BlocMoteurs::rad_to_step( float rad)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	ed87 0a00 	vstr	s0, [r7]
	return  (rad/RAD_PER_FULL_STEP);
 800234c:	edd7 7a00 	vldr	s15, [r7]
 8002350:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800236c <_ZN11BlocMoteurs11rad_to_stepEf+0x2c>
 8002354:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002358:	eef0 7a66 	vmov.f32	s15, s13
}
 800235c:	eeb0 0a67 	vmov.f32	s0, s15
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	3d00adfd 	.word	0x3d00adfd

08002370 <_ZN11BlocMoteurs11step_to_radEj>:
float BlocMoteurs::step_to_rad( unsigned int step)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
	return (RAD_PER_FULL_STEP*step);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	ee07 3a90 	vmov	s15, r3
 8002380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002384:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800239c <_ZN11BlocMoteurs11step_to_radEj+0x2c>
 8002388:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800238c:	eeb0 0a67 	vmov.f32	s0, s15
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	3d00adfd 	.word	0x3d00adfd

080023a0 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff>:
  * @param  vitesse_normalisee_FR vitesse du moteur Avant droit
  * @param  vitesse_normalisee_BL vitesse du moteur Arriere gauche
  * @param  vitesse_normalisee_BR vitesse du moteur Arriere droit
  */
void BlocMoteurs::commande_vitesses_normalisees(float vitesse_normalisee_FL, float vitesse_normalisee_FR, float vitesse_normalisee_BL, float vitesse_normalisee_BR )
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b094      	sub	sp, #80	; 0x50
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6178      	str	r0, [r7, #20]
 80023a8:	ed87 0a04 	vstr	s0, [r7, #16]
 80023ac:	edc7 0a03 	vstr	s1, [r7, #12]
 80023b0:	ed87 1a02 	vstr	s2, [r7, #8]
 80023b4:	edc7 1a01 	vstr	s3, [r7, #4]
    /////////////////////////////////////////////////////////////
    // Assurance que les parametres sont entre -1 et 1 ////////////////
    vitesse_normalisee_FL = std::min(1.0f, vitesse_normalisee_FL);
 80023b8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	f107 0210 	add.w	r2, r7, #16
 80023c2:	f107 031c 	add.w	r3, r7, #28
 80023c6:	4611      	mov	r1, r2
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 fc43 	bl	8002c54 <_ZSt3minIfERKT_S2_S2_>
 80023ce:	4603      	mov	r3, r0
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	613b      	str	r3, [r7, #16]
    vitesse_normalisee_FL = std::max(-1.0f, vitesse_normalisee_FL);
 80023d4:	4b7f      	ldr	r3, [pc, #508]	; (80025d4 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x234>)
 80023d6:	623b      	str	r3, [r7, #32]
 80023d8:	f107 0210 	add.w	r2, r7, #16
 80023dc:	f107 0320 	add.w	r3, r7, #32
 80023e0:	4611      	mov	r1, r2
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 fc4f 	bl	8002c86 <_ZSt3maxIfERKT_S2_S2_>
 80023e8:	4603      	mov	r3, r0
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	613b      	str	r3, [r7, #16]

    vitesse_normalisee_FR = std::min(1.0f, vitesse_normalisee_FR);
 80023ee:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80023f2:	627b      	str	r3, [r7, #36]	; 0x24
 80023f4:	f107 020c 	add.w	r2, r7, #12
 80023f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023fc:	4611      	mov	r1, r2
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 fc28 	bl	8002c54 <_ZSt3minIfERKT_S2_S2_>
 8002404:	4603      	mov	r3, r0
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	60fb      	str	r3, [r7, #12]
    vitesse_normalisee_FR = std::max(-1.0f, vitesse_normalisee_FR);
 800240a:	4b72      	ldr	r3, [pc, #456]	; (80025d4 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x234>)
 800240c:	62bb      	str	r3, [r7, #40]	; 0x28
 800240e:	f107 020c 	add.w	r2, r7, #12
 8002412:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002416:	4611      	mov	r1, r2
 8002418:	4618      	mov	r0, r3
 800241a:	f000 fc34 	bl	8002c86 <_ZSt3maxIfERKT_S2_S2_>
 800241e:	4603      	mov	r3, r0
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	60fb      	str	r3, [r7, #12]

    vitesse_normalisee_BL = std::min(1.0f, vitesse_normalisee_BL);
 8002424:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
 800242a:	f107 0208 	add.w	r2, r7, #8
 800242e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002432:	4611      	mov	r1, r2
 8002434:	4618      	mov	r0, r3
 8002436:	f000 fc0d 	bl	8002c54 <_ZSt3minIfERKT_S2_S2_>
 800243a:	4603      	mov	r3, r0
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	60bb      	str	r3, [r7, #8]
    vitesse_normalisee_BL = std::max(-1.0f, vitesse_normalisee_BL);
 8002440:	4b64      	ldr	r3, [pc, #400]	; (80025d4 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x234>)
 8002442:	633b      	str	r3, [r7, #48]	; 0x30
 8002444:	f107 0208 	add.w	r2, r7, #8
 8002448:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800244c:	4611      	mov	r1, r2
 800244e:	4618      	mov	r0, r3
 8002450:	f000 fc19 	bl	8002c86 <_ZSt3maxIfERKT_S2_S2_>
 8002454:	4603      	mov	r3, r0
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	60bb      	str	r3, [r7, #8]

    vitesse_normalisee_BR = std::min(1.0f, vitesse_normalisee_BR);
 800245a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800245e:	637b      	str	r3, [r7, #52]	; 0x34
 8002460:	1d3a      	adds	r2, r7, #4
 8002462:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002466:	4611      	mov	r1, r2
 8002468:	4618      	mov	r0, r3
 800246a:	f000 fbf3 	bl	8002c54 <_ZSt3minIfERKT_S2_S2_>
 800246e:	4603      	mov	r3, r0
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	607b      	str	r3, [r7, #4]
    vitesse_normalisee_BR = std::max(-1.0f, vitesse_normalisee_BR);
 8002474:	4b57      	ldr	r3, [pc, #348]	; (80025d4 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x234>)
 8002476:	63bb      	str	r3, [r7, #56]	; 0x38
 8002478:	1d3a      	adds	r2, r7, #4
 800247a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800247e:	4611      	mov	r1, r2
 8002480:	4618      	mov	r0, r3
 8002482:	f000 fc00 	bl	8002c86 <_ZSt3maxIfERKT_S2_S2_>
 8002486:	4603      	mov	r3, r0
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	607b      	str	r3, [r7, #4]
    /////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////

    // Détermination du signe des vitesses (logique inversée entre les deux moteurs car placés symétriquement sur le robot et branchement identique)
    StepperMotor::direction_t sens_FL = vitesse_normalisee_FL >= 0.0f ? StepperMotor::FWD : StepperMotor::BWD;
 800248c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002490:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002498:	db01      	blt.n	800249e <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0xfe>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x100>
 800249e:	2300      	movs	r3, #0
 80024a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    StepperMotor::direction_t sens_FR = vitesse_normalisee_FR >= 0.0f ? StepperMotor::BWD : StepperMotor::FWD;
 80024a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80024a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b0:	bfac      	ite	ge
 80024b2:	2301      	movge	r3, #1
 80024b4:	2300      	movlt	r3, #0
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	f083 0301 	eor.w	r3, r3, #1
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
    StepperMotor::direction_t sens_BL = vitesse_normalisee_BL >= 0.0f ? StepperMotor::FWD : StepperMotor::BWD;
 80024c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80024c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ce:	db01      	blt.n	80024d4 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x134>
 80024d0:	2301      	movs	r3, #1
 80024d2:	e000      	b.n	80024d6 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x136>
 80024d4:	2300      	movs	r3, #0
 80024d6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    StepperMotor::direction_t sens_BR = vitesse_normalisee_BR >= 0.0f ? StepperMotor::BWD : StepperMotor::FWD;
 80024da:	edd7 7a01 	vldr	s15, [r7, #4]
 80024de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e6:	bfac      	ite	ge
 80024e8:	2301      	movge	r3, #1
 80024ea:	2300      	movlt	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	f083 0301 	eor.w	r3, r3, #1
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c


    // Détermination des valeurs de vitesses réelles à envoyer au shield
    unsigned int vitesse_FL = ( (float) fabs(vitesse_normalisee_FL) * max_vitesse);
 80024f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80024fc:	eeb0 7ae7 	vabs.f32	s14, s15
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	ee07 3a90 	vmov	s15, r3
 8002508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800250c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002510:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002514:	ee17 3a90 	vmov	r3, s15
 8002518:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned int vitesse_FR = ( (float) fabs(vitesse_normalisee_FR) * max_vitesse);
 800251a:	edd7 7a03 	vldr	s15, [r7, #12]
 800251e:	eeb0 7ae7 	vabs.f32	s14, s15
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	ee07 3a90 	vmov	s15, r3
 800252a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800252e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002536:	ee17 3a90 	vmov	r3, s15
 800253a:	647b      	str	r3, [r7, #68]	; 0x44
    unsigned int vitesse_BL = ( (float) fabs(vitesse_normalisee_BL) * max_vitesse);
 800253c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002540:	eeb0 7ae7 	vabs.f32	s14, s15
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	ee07 3a90 	vmov	s15, r3
 800254c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002558:	ee17 3a90 	vmov	r3, s15
 800255c:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned int vitesse_BR = ( (float) fabs(vitesse_normalisee_BR) * max_vitesse);
 800255e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002562:	eeb0 7ae7 	vabs.f32	s14, s15
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	ee07 3a90 	vmov	s15, r3
 800256e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002576:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800257a:	ee17 3a90 	vmov	r3, s15
 800257e:	63fb      	str	r3, [r7, #60]	; 0x3c

    set_vitesse_moteur(vitesse_FL, sens_FL, id_moteurs::front_left);
 8002580:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002584:	2300      	movs	r3, #0
 8002586:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002588:	6978      	ldr	r0, [r7, #20]
 800258a:	f000 f825 	bl	80025d8 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    set_vitesse_moteur(vitesse_FR, sens_FR, id_moteurs::front_right);
 800258e:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8002592:	2301      	movs	r3, #1
 8002594:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002596:	6978      	ldr	r0, [r7, #20]
 8002598:	f000 f81e 	bl	80025d8 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    set_vitesse_moteur(vitesse_BL, sens_BL, id_moteurs::back_left);
 800259c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80025a0:	2302      	movs	r3, #2
 80025a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80025a4:	6978      	ldr	r0, [r7, #20]
 80025a6:	f000 f817 	bl	80025d8 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    set_vitesse_moteur(vitesse_BR, sens_BR, id_moteurs::back_right);
 80025aa:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80025ae:	2303      	movs	r3, #3
 80025b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80025b2:	6978      	ldr	r0, [r7, #20]
 80025b4:	f000 f810 	bl	80025d8 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    shield_1->perform_prepared_actions();
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff fd7d 	bl	80020bc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
    shield_2->perform_prepared_actions();
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff fd78 	bl	80020bc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>

}
 80025cc:	bf00      	nop
 80025ce:	3750      	adds	r7, #80	; 0x50
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	bf800000 	.word	0xbf800000

080025d8 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>:
  * @param vitesse , vitesse absolue en step/s
  * @param dir , sens de rotation (FWD / BWD)
  * @param id , id du moteur (front_left, front_right, back_left, back_right)
  */
void BlocMoteurs::set_vitesse_moteur(unsigned int vitesse, StepperMotor::direction_t dir, id_moteurs id)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	4611      	mov	r1, r2
 80025e4:	461a      	mov	r2, r3
 80025e6:	460b      	mov	r3, r1
 80025e8:	71fb      	strb	r3, [r7, #7]
 80025ea:	4613      	mov	r3, r2
 80025ec:	71bb      	strb	r3, [r7, #6]
    if (!moteurs_arret)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	f083 0301 	eor.w	r3, r3, #1
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d012      	beq.n	8002622 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs+0x4a>
    {
        moteurs[id]->prepare_run(dir, vitesse);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	79bb      	ldrb	r3, [r7, #6]
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	6818      	ldr	r0, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	79bb      	ldrb	r3, [r7, #6]
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	33fc      	adds	r3, #252	; 0xfc
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	79f9      	ldrb	r1, [r7, #7]
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	4798      	blx	r3
    }
    else
    {
    	moteurs[id]->prepare_hard_hiz(); // mode haute impédence pour pouvoir déplacer le robot à la main
    }
}
 8002620:	e011      	b.n	8002646 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs+0x6e>
    	moteurs[id]->prepare_hard_hiz(); // mode haute impédence pour pouvoir déplacer le robot à la main
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	691a      	ldr	r2, [r3, #16]
 8002626:	79bb      	ldrb	r3, [r7, #6]
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	6819      	ldr	r1, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	691a      	ldr	r2, [r3, #16]
 8002632:	79bb      	ldrb	r3, [r7, #6]
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4608      	mov	r0, r1
 8002644:	4798      	blx	r3
}
 8002646:	bf00      	nop
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <_ZN11BlocMoteurs26commande_vitesses_absoluesEffff>:
  * @param  vitesse_absolue_FR vitesse du moteur Avant droit
  * @param  vitesse_absolue_BL vitesse du moteur Arriere gauche
  * @param  vitesse_absolue_BR vitesse du moteur Arriere droit
  */
void BlocMoteurs::commande_vitesses_absolues(float vitesse_absolue_FL, float vitesse_absolue_FR, float vitesse_absolue_BL, float vitesse_absolue_BR )
{
 800264e:	b580      	push	{r7, lr}
 8002650:	ed2d 8b04 	vpush	{d8-d9}
 8002654:	b086      	sub	sp, #24
 8002656:	af00      	add	r7, sp, #0
 8002658:	6178      	str	r0, [r7, #20]
 800265a:	ed87 0a04 	vstr	s0, [r7, #16]
 800265e:	edc7 0a03 	vstr	s1, [r7, #12]
 8002662:	ed87 1a02 	vstr	s2, [r7, #8]
 8002666:	edc7 1a01 	vstr	s3, [r7, #4]
	commande_vitesses_normalisees(rad_to_step(vitesse_absolue_FL)/max_vitesse,rad_to_step(vitesse_absolue_FR)/max_vitesse,
 800266a:	ed97 0a04 	vldr	s0, [r7, #16]
 800266e:	6978      	ldr	r0, [r7, #20]
 8002670:	f7ff fe66 	bl	8002340 <_ZN11BlocMoteurs11rad_to_stepEf>
 8002674:	eeb0 7a40 	vmov.f32	s14, s0
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	ee07 3a90 	vmov	s15, r3
 8002680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002684:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8002688:	ed97 0a03 	vldr	s0, [r7, #12]
 800268c:	6978      	ldr	r0, [r7, #20]
 800268e:	f7ff fe57 	bl	8002340 <_ZN11BlocMoteurs11rad_to_stepEf>
 8002692:	eeb0 7a40 	vmov.f32	s14, s0
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	ee07 3a90 	vmov	s15, r3
 800269e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026a2:	eec7 8a27 	vdiv.f32	s17, s14, s15
								  rad_to_step(vitesse_absolue_BL)/max_vitesse,rad_to_step(vitesse_absolue_BR)/max_vitesse);
 80026a6:	ed97 0a02 	vldr	s0, [r7, #8]
 80026aa:	6978      	ldr	r0, [r7, #20]
 80026ac:	f7ff fe48 	bl	8002340 <_ZN11BlocMoteurs11rad_to_stepEf>
 80026b0:	eeb0 7a40 	vmov.f32	s14, s0
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	685b      	ldr	r3, [r3, #4]
	commande_vitesses_normalisees(rad_to_step(vitesse_absolue_FL)/max_vitesse,rad_to_step(vitesse_absolue_FR)/max_vitesse,
 80026b8:	ee07 3a90 	vmov	s15, r3
 80026bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026c0:	ee87 9a27 	vdiv.f32	s18, s14, s15
								  rad_to_step(vitesse_absolue_BL)/max_vitesse,rad_to_step(vitesse_absolue_BR)/max_vitesse);
 80026c4:	ed97 0a01 	vldr	s0, [r7, #4]
 80026c8:	6978      	ldr	r0, [r7, #20]
 80026ca:	f7ff fe39 	bl	8002340 <_ZN11BlocMoteurs11rad_to_stepEf>
 80026ce:	eef0 6a40 	vmov.f32	s13, s0
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	685b      	ldr	r3, [r3, #4]
	commande_vitesses_normalisees(rad_to_step(vitesse_absolue_FL)/max_vitesse,rad_to_step(vitesse_absolue_FR)/max_vitesse,
 80026d6:	ee07 3a90 	vmov	s15, r3
 80026da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026e2:	eef0 1a47 	vmov.f32	s3, s14
 80026e6:	eeb0 1a49 	vmov.f32	s2, s18
 80026ea:	eef0 0a68 	vmov.f32	s1, s17
 80026ee:	eeb0 0a48 	vmov.f32	s0, s16
 80026f2:	6978      	ldr	r0, [r7, #20]
 80026f4:	f7ff fe54 	bl	80023a0 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff>

}
 80026f8:	bf00      	nop
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	ecbd 8b04 	vpop	{d8-d9}
 8002702:	bd80      	pop	{r7, pc}

08002704 <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE>:
  * Ainsi, plus de finesse sur le deplacement (finesse != precision) est grande.
  * Un mode haut de microstepping degrade cependant la consommation et le couple effectif du moteur
  * @param  step_mode le mode de microstepping souhaite
  */
bool BlocMoteurs::set_microstepping_mode(step_mode_t step_mode)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	70fb      	strb	r3, [r7, #3]

    initShield1[0].step_sel = step_mode;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	78fa      	ldrb	r2, [r7, #3]
 8002714:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    initShield1[1].step_sel = step_mode;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	78fa      	ldrb	r2, [r7, #3]
 800271c:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
    initShield2[0].step_sel = step_mode;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	78fa      	ldrb	r2, [r7, #3]
 8002724:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
    initShield2[0].step_sel = step_mode;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	78fa      	ldrb	r2, [r7, #3]
 800272c:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
    bool return_value = true;
 8002730:	2301      	movs	r3, #1
 8002732:	73fb      	strb	r3, [r7, #15]
    for( int i = 0; i < NMOTEURS; i ++)
 8002734:	2300      	movs	r3, #0
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	e01c      	b.n	8002774 <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE+0x70>
    {
    	if(! moteurs[i]->set_step_mode(step_mode))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691a      	ldr	r2, [r3, #16]
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691a      	ldr	r2, [r3, #16]
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	3354      	adds	r3, #84	; 0x54
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	78fa      	ldrb	r2, [r7, #3]
 800275a:	4611      	mov	r1, r2
 800275c:	4798      	blx	r3
 800275e:	4603      	mov	r3, r0
 8002760:	f083 0301 	eor.w	r3, r3, #1
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE+0x6a>
    	{
    		return_value = false;
 800276a:	2300      	movs	r3, #0
 800276c:	73fb      	strb	r3, [r7, #15]
    for( int i = 0; i < NMOTEURS; i ++)
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	3301      	adds	r3, #1
 8002772:	60bb      	str	r3, [r7, #8]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2b03      	cmp	r3, #3
 8002778:	dddf      	ble.n	800273a <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE+0x36>
    	}
    }
    return return_value;
 800277a:	7bfb      	ldrb	r3, [r7, #15]

}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <_ZN11BlocMoteurs9motors_onEv>:

/**
  * @brief  autorise les commandes de vitesse jusqu'a l'appel des fonctions motors_stop
  */
void BlocMoteurs::motors_on()
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
    moteurs_arret = 0;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	701a      	strb	r2, [r3, #0]
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <_ZN11BlocMoteurs20motors_stop_soft_hizEv>:
  * @brief  stop les roues et les laisse libres par la suite
  * Le passage a la vitesse a zero respecte les parametre de deceleration maximale du robot
  * (contrairement a la methode motors_stop_hard_hiz)
  */
void BlocMoteurs::motors_stop_soft_hiz()
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b084      	sub	sp, #16
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]

	for(int i = 0; i < NMOTEURS; i ++)
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	e014      	b.n	80027d6 <_ZN11BlocMoteurs20motors_stop_soft_hizEv+0x38>
	{
		moteurs[i]->prepare_soft_hiz();
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	6819      	ldr	r1, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4608      	mov	r0, r1
 80027ce:	4798      	blx	r3
	for(int i = 0; i < NMOTEURS; i ++)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	3301      	adds	r3, #1
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2b03      	cmp	r3, #3
 80027da:	dde7      	ble.n	80027ac <_ZN11BlocMoteurs20motors_stop_soft_hizEv+0xe>
	}
    shield_1->perform_prepared_actions();
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff fc6b 	bl	80020bc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
    shield_2->perform_prepared_actions();
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fc66 	bl	80020bc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>

    moteurs_arret = true;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	701a      	strb	r2, [r3, #0]
}
 80027f6:	bf00      	nop
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <_ZN11BlocMoteurs19set_max_acc_moteursEf>:
  * @brief  Set l'accéleration maximale des moteurs
  *
  * @param  radian_par_seconde_carre la valeur maximale de l'accéleration angulaire en rad/s^2
  */
void BlocMoteurs::set_max_acc_moteurs(float radian_par_seconde2)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b084      	sub	sp, #16
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	ed87 0a00 	vstr	s0, [r7]
	unsigned int pps2 = rad_to_step(radian_par_seconde2);
 800280a:	ed97 0a00 	vldr	s0, [r7]
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7ff fd96 	bl	8002340 <_ZN11BlocMoteurs11rad_to_stepEf>
 8002814:	eef0 7a40 	vmov.f32	s15, s0
 8002818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800281c:	ee17 3a90 	vmov	r3, s15
 8002820:	60bb      	str	r3, [r7, #8]
	for( int i = 0; i < NMOTEURS; i ++)
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	e013      	b.n	8002850 <_ZN11BlocMoteurs19set_max_acc_moteursEf+0x52>
	{
		moteurs[i]->prepare_set_acceleration(pps2);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691a      	ldr	r2, [r3, #16]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691a      	ldr	r2, [r3, #16]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	33dc      	adds	r3, #220	; 0xdc
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68b9      	ldr	r1, [r7, #8]
 8002848:	4798      	blx	r3
	for( int i = 0; i < NMOTEURS; i ++)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	3301      	adds	r3, #1
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2b03      	cmp	r3, #3
 8002854:	dde8      	ble.n	8002828 <_ZN11BlocMoteurs19set_max_acc_moteursEf+0x2a>
	}
    shield_1->perform_prepared_actions();
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff fc2e 	bl	80020bc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
    shield_2->perform_prepared_actions();
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff fc29 	bl	80020bc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
	initShield1[0].acc = pps2;
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	ee07 3a90 	vmov	s15, r3
 8002870:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	initShield1[1].acc = pps2;
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	ee07 3a90 	vmov	s15, r3
 8002880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	initShield2[0].acc = pps2;
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	ee07 3a90 	vmov	s15, r3
 8002890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
	initShield2[1].acc = pps2;
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	ee07 3a90 	vmov	s15, r3
 80028a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	edc3 7a4d 	vstr	s15, [r3, #308]	; 0x134
}
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <_ZN11BlocMoteurs19mesure_vitesses_radEv>:
  *
  * @retval tableau float des 4 valeursen rad/s des vitesse. Les index correspondent à l'enum motor id
  * ex : id_moteurs::front_left = 0 -> to_return[0] = vitesse du moteur Avant gauche (front left)
  */
float* BlocMoteurs::mesure_vitesses_rad()
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
	static float to_return[NMOTEURS];
	for( int i = 0; i < NMOTEURS; i ++)
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	e013      	b.n	80028ea <_ZN11BlocMoteurs19mesure_vitesses_radEv+0x36>
	{
		moteurs[i]->prepare_get_speed();
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691a      	ldr	r2, [r3, #16]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	6819      	ldr	r1, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691a      	ldr	r2, [r3, #16]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	33a8      	adds	r3, #168	; 0xa8
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4608      	mov	r0, r1
 80028e2:	4798      	blx	r3
	for( int i = 0; i < NMOTEURS; i ++)
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	3301      	adds	r3, #1
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	2b03      	cmp	r3, #3
 80028ee:	dde8      	ble.n	80028c2 <_ZN11BlocMoteurs19mesure_vitesses_radEv+0xe>
	}
	uint32_t* result1 = shield_1->perform_prepared_actions();
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff fbe1 	bl	80020bc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
 80028fa:	60f8      	str	r0, [r7, #12]
	for( int i = 0; i < NMOTEURS; i ++)
 80028fc:	2300      	movs	r3, #0
 80028fe:	613b      	str	r3, [r7, #16]
 8002900:	e013      	b.n	800292a <_ZN11BlocMoteurs19mesure_vitesses_radEv+0x76>
	{
		moteurs[i]->prepare_get_speed();
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691a      	ldr	r2, [r3, #16]
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	6819      	ldr	r1, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691a      	ldr	r2, [r3, #16]
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	33a8      	adds	r3, #168	; 0xa8
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4608      	mov	r0, r1
 8002922:	4798      	blx	r3
	for( int i = 0; i < NMOTEURS; i ++)
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	3301      	adds	r3, #1
 8002928:	613b      	str	r3, [r7, #16]
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	2b03      	cmp	r3, #3
 800292e:	dde8      	ble.n	8002902 <_ZN11BlocMoteurs19mesure_vitesses_radEv+0x4e>
	}
	uint32_t* result2 = shield_2->perform_prepared_actions();
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff fbc1 	bl	80020bc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
 800293a:	60b8      	str	r0, [r7, #8]
	#ifdef CANONICAL_DIR // inverse ou non shield du haut/bas
		to_return[front_left] = step_to_rad(result1[left]);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4619      	mov	r1, r3
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7ff fd14 	bl	8002370 <_ZN11BlocMoteurs11step_to_radEj>
 8002948:	eef0 7a40 	vmov.f32	s15, s0
 800294c:	4b15      	ldr	r3, [pc, #84]	; (80029a4 <_ZN11BlocMoteurs19mesure_vitesses_radEv+0xf0>)
 800294e:	edc3 7a00 	vstr	s15, [r3]
		to_return[front_right] = step_to_rad(result1[right]);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	3304      	adds	r3, #4
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4619      	mov	r1, r3
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff fd08 	bl	8002370 <_ZN11BlocMoteurs11step_to_radEj>
 8002960:	eef0 7a40 	vmov.f32	s15, s0
 8002964:	4b0f      	ldr	r3, [pc, #60]	; (80029a4 <_ZN11BlocMoteurs19mesure_vitesses_radEv+0xf0>)
 8002966:	edc3 7a01 	vstr	s15, [r3, #4]
		to_return[back_left] = step_to_rad(result2[left]);
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4619      	mov	r1, r3
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f7ff fcfd 	bl	8002370 <_ZN11BlocMoteurs11step_to_radEj>
 8002976:	eef0 7a40 	vmov.f32	s15, s0
 800297a:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <_ZN11BlocMoteurs19mesure_vitesses_radEv+0xf0>)
 800297c:	edc3 7a02 	vstr	s15, [r3, #8]
		to_return[back_right] = step_to_rad(result2[right]);
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	3304      	adds	r3, #4
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4619      	mov	r1, r3
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f7ff fcf1 	bl	8002370 <_ZN11BlocMoteurs11step_to_radEj>
 800298e:	eef0 7a40 	vmov.f32	s15, s0
 8002992:	4b04      	ldr	r3, [pc, #16]	; (80029a4 <_ZN11BlocMoteurs19mesure_vitesses_radEv+0xf0>)
 8002994:	edc3 7a03 	vstr	s15, [r3, #12]
		to_return[front_right] = step_to_rad(result2[right]);
		to_return[back_left] = step_to_rad(result1[left]);
		to_return[back_right] = step_to_rad(result1[right]);
	#endif

	return to_return;
 8002998:	4b02      	ldr	r3, [pc, #8]	; (80029a4 <_ZN11BlocMoteurs19mesure_vitesses_radEv+0xf0>)
}
 800299a:	4618      	mov	r0, r3
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	200001f8 	.word	0x200001f8

080029a8 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
     * @param standby_reset pin name of the STBY\RST pin of the component.
     * @param ssel_port     port name of the SSEL pin of the SPI device to be used for communication.
     * @param ssel_pin      pin name of the SSEL pin of the SPI device to be used for communication.
     * @param spi           SPI handler to be used for communication.
     */
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	603b      	str	r3, [r7, #0]
 80029b4:	4613      	mov	r3, r2
 80029b6:	80fb      	strh	r3, [r7, #6]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f009 fc54 	bl	800c268 <_ZN13abstractL6470C1Ev>
 80029c0:	4a27      	ldr	r2, [pc, #156]	; (8002a60 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	609a      	str	r2, [r3, #8]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	88fa      	ldrh	r2, [r7, #6]
 80029d0:	819a      	strh	r2, [r3, #12]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	611a      	str	r2, [r3, #16]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8b3a      	ldrh	r2, [r7, #24]
 80029dc:	829a      	strh	r2, [r3, #20]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	69fa      	ldr	r2, [r7, #28]
 80029e2:	619a      	str	r2, [r3, #24]
    {

    	if(std::is_same<shield_x,shield_1>::value)
    	{
    		shield_id = 1;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2201      	movs	r2, #1
 80029e8:	711a      	strb	r2, [r3, #4]
    		shield_1::count++;
 80029ea:	4b1e      	ldr	r3, [pc, #120]	; (8002a64 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	3301      	adds	r3, #1
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	4b1c      	ldr	r3, [pc, #112]	; (8002a64 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 80029f4:	701a      	strb	r2, [r3, #0]
    	}
    	else
    	{
    		throw std::runtime_error("template of L6470 must be shield_1, shield_2 or shield_3");
    	}
        L6470_Register = &_L6470_Register[0];
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	4a1b      	ldr	r2, [pc, #108]	; (8002a68 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 80029fa:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4a1b      	ldr	r2, [pc, #108]	; (8002a6c <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 8002a00:	625a      	str	r2, [r3, #36]	; 0x24
        L6470_Direction = &_L6470_Direction[0];
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	4a1a      	ldr	r2, [pc, #104]	; (8002a70 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 8002a06:	629a      	str	r2, [r3, #40]	; 0x28
        L6470_ACT = &_L6470_ACT[0];
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4a1a      	ldr	r2, [pc, #104]	; (8002a74 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 8002a0c:	62da      	str	r2, [r3, #44]	; 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	635a      	str	r2, [r3, #52]	; 0x34
        prepared_action = PREPARED_NO_ACTION;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        L6470_Id = number_of_devices++;
 8002a20:	4b15      	ldr	r3, [pc, #84]	; (8002a78 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	b2d1      	uxtb	r1, r2
 8002a28:	4a13      	ldr	r2, [pc, #76]	; (8002a78 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002a2a:	7011      	strb	r1, [r2, #0]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 8002a30:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 8002a36:	2220      	movs	r2, #32
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4811      	ldr	r0, [pc, #68]	; (8002a80 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 8002a3c:	f00f fb5d 	bl	80120fa <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002a40:	2208      	movs	r2, #8
 8002a42:	2100      	movs	r1, #0
 8002a44:	480f      	ldr	r0, [pc, #60]	; (8002a84 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 8002a46:	f00f fb58 	bl	80120fa <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002a4a:	2208      	movs	r2, #8
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	480e      	ldr	r0, [pc, #56]	; (8002a88 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 8002a50:	f00f fb53 	bl	80120fa <memset>
    }
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	08014410 	.word	0x08014410
 8002a64:	200002a4 	.word	0x200002a4
 8002a68:	080146d4 	.word	0x080146d4
 8002a6c:	080148c8 	.word	0x080148c8
 8002a70:	080149d4 	.word	0x080149d4
 8002a74:	080149e8 	.word	0x080149e8
 8002a78:	20000208 	.word	0x20000208
 8002a7c:	20000209 	.word	0x20000209
 8002a80:	2000020c 	.word	0x2000020c
 8002a84:	2000022c 	.word	0x2000022c
 8002a88:	20000234 	.word	0x20000234

08002a8c <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	80fb      	strh	r3, [r7, #6]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f009 fbe2 	bl	800c268 <_ZN13abstractL6470C1Ev>
 8002aa4:	4a27      	ldr	r2, [pc, #156]	; (8002b44 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	88fa      	ldrh	r2, [r7, #6]
 8002ab4:	819a      	strh	r2, [r3, #12]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	611a      	str	r2, [r3, #16]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8b3a      	ldrh	r2, [r7, #24]
 8002ac0:	829a      	strh	r2, [r3, #20]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	69fa      	ldr	r2, [r7, #28]
 8002ac6:	619a      	str	r2, [r3, #24]
    		shield_id = 2;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2202      	movs	r2, #2
 8002acc:	711a      	strb	r2, [r3, #4]
    		shield_2::count++;
 8002ace:	4b1e      	ldr	r3, [pc, #120]	; (8002b48 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	4b1c      	ldr	r3, [pc, #112]	; (8002b48 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002ad8:	701a      	strb	r2, [r3, #0]
        L6470_Register = &_L6470_Register[0];
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4a1b      	ldr	r2, [pc, #108]	; (8002b4c <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 8002ade:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	4a1b      	ldr	r2, [pc, #108]	; (8002b50 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 8002ae4:	625a      	str	r2, [r3, #36]	; 0x24
        L6470_Direction = &_L6470_Direction[0];
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4a1a      	ldr	r2, [pc, #104]	; (8002b54 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 8002aea:	629a      	str	r2, [r3, #40]	; 0x28
        L6470_ACT = &_L6470_ACT[0];
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4a1a      	ldr	r2, [pc, #104]	; (8002b58 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 8002af0:	62da      	str	r2, [r3, #44]	; 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	635a      	str	r2, [r3, #52]	; 0x34
        prepared_action = PREPARED_NO_ACTION;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        L6470_Id = number_of_devices++;
 8002b04:	4b15      	ldr	r3, [pc, #84]	; (8002b5c <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	b2d1      	uxtb	r1, r2
 8002b0c:	4a13      	ldr	r2, [pc, #76]	; (8002b5c <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002b0e:	7011      	strb	r1, [r2, #0]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 8002b14:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	4811      	ldr	r0, [pc, #68]	; (8002b64 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 8002b20:	f00f faeb 	bl	80120fa <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002b24:	2208      	movs	r2, #8
 8002b26:	2100      	movs	r1, #0
 8002b28:	480f      	ldr	r0, [pc, #60]	; (8002b68 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 8002b2a:	f00f fae6 	bl	80120fa <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002b2e:	2208      	movs	r2, #8
 8002b30:	2100      	movs	r1, #0
 8002b32:	480e      	ldr	r0, [pc, #56]	; (8002b6c <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 8002b34:	f00f fae1 	bl	80120fa <memset>
    }
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	080141a4 	.word	0x080141a4
 8002b48:	200002a5 	.word	0x200002a5
 8002b4c:	080149f4 	.word	0x080149f4
 8002b50:	08014be8 	.word	0x08014be8
 8002b54:	08014cf4 	.word	0x08014cf4
 8002b58:	08014d08 	.word	0x08014d08
 8002b5c:	2000023c 	.word	0x2000023c
 8002b60:	2000023d 	.word	0x2000023d
 8002b64:	20000240 	.word	0x20000240
 8002b68:	20000260 	.word	0x20000260
 8002b6c:	20000268 	.word	0x20000268

08002b70 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	603b      	str	r3, [r7, #0]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	80fb      	strh	r3, [r7, #6]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f009 fb70 	bl	800c268 <_ZN13abstractL6470C1Ev>
 8002b88:	4a27      	ldr	r2, [pc, #156]	; (8002c28 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	609a      	str	r2, [r3, #8]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	88fa      	ldrh	r2, [r7, #6]
 8002b98:	819a      	strh	r2, [r3, #12]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	611a      	str	r2, [r3, #16]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8b3a      	ldrh	r2, [r7, #24]
 8002ba4:	829a      	strh	r2, [r3, #20]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	69fa      	ldr	r2, [r7, #28]
 8002baa:	619a      	str	r2, [r3, #24]
    		shield_id = 3;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2203      	movs	r2, #3
 8002bb0:	711a      	strb	r2, [r3, #4]
    		shield_3::count++;
 8002bb2:	4b1e      	ldr	r3, [pc, #120]	; (8002c2c <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	4b1c      	ldr	r3, [pc, #112]	; (8002c2c <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002bbc:	701a      	strb	r2, [r3, #0]
        L6470_Register = &_L6470_Register[0];
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	4a1b      	ldr	r2, [pc, #108]	; (8002c30 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 8002bc2:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4a1b      	ldr	r2, [pc, #108]	; (8002c34 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 8002bc8:	625a      	str	r2, [r3, #36]	; 0x24
        L6470_Direction = &_L6470_Direction[0];
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	4a1a      	ldr	r2, [pc, #104]	; (8002c38 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 8002bce:	629a      	str	r2, [r3, #40]	; 0x28
        L6470_ACT = &_L6470_ACT[0];
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4a1a      	ldr	r2, [pc, #104]	; (8002c3c <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 8002bd4:	62da      	str	r2, [r3, #44]	; 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	635a      	str	r2, [r3, #52]	; 0x34
        prepared_action = PREPARED_NO_ACTION;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        L6470_Id = number_of_devices++;
 8002be8:	4b15      	ldr	r3, [pc, #84]	; (8002c40 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	1c5a      	adds	r2, r3, #1
 8002bee:	b2d1      	uxtb	r1, r2
 8002bf0:	4a13      	ldr	r2, [pc, #76]	; (8002c40 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002bf2:	7011      	strb	r1, [r2, #0]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 8002bf8:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 8002bfe:	2220      	movs	r2, #32
 8002c00:	2100      	movs	r1, #0
 8002c02:	4811      	ldr	r0, [pc, #68]	; (8002c48 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 8002c04:	f00f fa79 	bl	80120fa <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002c08:	2208      	movs	r2, #8
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	480f      	ldr	r0, [pc, #60]	; (8002c4c <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 8002c0e:	f00f fa74 	bl	80120fa <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002c12:	2208      	movs	r2, #8
 8002c14:	2100      	movs	r1, #0
 8002c16:	480e      	ldr	r0, [pc, #56]	; (8002c50 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 8002c18:	f00f fa6f 	bl	80120fa <memset>
    }
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	08013f38 	.word	0x08013f38
 8002c2c:	200002a6 	.word	0x200002a6
 8002c30:	08014d14 	.word	0x08014d14
 8002c34:	08014f08 	.word	0x08014f08
 8002c38:	08015014 	.word	0x08015014
 8002c3c:	08015028 	.word	0x08015028
 8002c40:	20000270 	.word	0x20000270
 8002c44:	20000271 	.word	0x20000271
 8002c48:	20000274 	.word	0x20000274
 8002c4c:	20000294 	.word	0x20000294
 8002c50:	2000029c 	.word	0x2000029c

08002c54 <_ZSt3minIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	ed93 7a00 	vldr	s14, [r3]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	edd3 7a00 	vldr	s15, [r3]
 8002c6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c72:	d501      	bpl.n	8002c78 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	e000      	b.n	8002c7a <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8002c78:	687b      	ldr	r3, [r7, #4]
    }
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	ed93 7a00 	vldr	s14, [r3]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	edd3 7a00 	vldr	s15, [r3]
 8002c9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca4:	d501      	bpl.n	8002caa <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	e000      	b.n	8002cac <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8002caa:	687b      	ldr	r3, [r7, #4]
    }
 8002cac:	4618      	mov	r0, r3
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <_ZN5L6470I8shield_3ED1Ev>:

    /**
     * @brief Destructor.
     */
    ~L6470(void) = default;
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	4a05      	ldr	r2, [pc, #20]	; (8002cd8 <_ZN5L6470I8shield_3ED1Ev+0x20>)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f009 fadd 	bl	800c288 <_ZN13abstractL6470D1Ev>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	08013f38 	.word	0x08013f38

08002cdc <_ZN5L6470I8shield_3ED0Ev>:
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7ff ffe7 	bl	8002cb8 <_ZN5L6470I8shield_3ED1Ev>
 8002cea:	216c      	movs	r1, #108	; 0x6c
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f00d fd6d 	bl	80107cc <_ZdlPvj>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <_ZN5L6470I8shield_2ED1Ev>:
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	4a05      	ldr	r2, [pc, #20]	; (8002d1c <_ZN5L6470I8shield_2ED1Ev+0x20>)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f009 fabb 	bl	800c288 <_ZN13abstractL6470D1Ev>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4618      	mov	r0, r3
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	080141a4 	.word	0x080141a4

08002d20 <_ZN5L6470I8shield_2ED0Ev>:
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f7ff ffe7 	bl	8002cfc <_ZN5L6470I8shield_2ED1Ev>
 8002d2e:	216c      	movs	r1, #108	; 0x6c
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f00d fd4b 	bl	80107cc <_ZdlPvj>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <_ZN5L6470I8shield_1ED1Ev>:
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	4a05      	ldr	r2, [pc, #20]	; (8002d60 <_ZN5L6470I8shield_1ED1Ev+0x20>)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f009 fa99 	bl	800c288 <_ZN13abstractL6470D1Ev>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	08014410 	.word	0x08014410

08002d64 <_ZN5L6470I8shield_1ED0Ev>:
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff ffe7 	bl	8002d40 <_ZN5L6470I8shield_1ED1Ev>
 8002d72:	216c      	movs	r1, #108	; 0x6c
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f00d fd29 	bl	80107cc <_ZdlPvj>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <_ZN5L6470I8shield_3E4initEPv>:
    /**
     * @brief  Initializing the component.
     * @param  init Pointer to device specific initalization structure.
     * @retval "0" in case of success, an error code otherwise.
     */
    virtual int init(void *init)
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
    {
        return (int) L6470_Config((void *) init);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6839      	ldr	r1, [r7, #0]
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	4798      	blx	r3
 8002d9e:	4603      	mov	r3, r0
    }
 8002da0:	4618      	mov	r0, r3
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <_ZN5L6470I8shield_3E10get_statusEv>:
    /**
     * @brief  Getting the status.
     * @param  None.
     * @retval The status.
     */
    virtual unsigned int get_status(void)
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
    {
        return (unsigned int) L6470_GetStatus();
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	4798      	blx	r3
 8002dbe:	4603      	mov	r3, r0
    }
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <_ZN5L6470I8shield_3E13get_parameterEj>:
     *           + L6470_STEP_MODE_ID
     *           + L6470_ALARM_EN_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual unsigned int get_parameter(unsigned int parameter)
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
    {
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	4611      	mov	r1, r2
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	4798      	blx	r3
 8002de6:	4603      	mov	r3, r0
    }
 8002de8:	4618      	mov	r0, r3
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <_ZN5L6470I8shield_3E12get_positionEv>:
    /**
     * @brief  Getting the position.
     * @param  None.
     * @retval The position.
     */
    virtual signed int get_position(void)
 8002df0:	b590      	push	{r4, r7, lr}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
    {
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8002e00:	681c      	ldr	r4, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	4798      	blx	r3
 8002e12:	4603      	mov	r3, r0
 8002e14:	4619      	mov	r1, r3
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	47a0      	blx	r4
 8002e1a:	4603      	mov	r3, r0
    }
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd90      	pop	{r4, r7, pc}

08002e24 <_ZN5L6470I8shield_3E8get_markEv>:
    /**
     * @brief  Getting the marked position.
     * @param  None.
     * @retval The marked position.
     */
    virtual signed int get_mark(void)
 8002e24:	b590      	push	{r4, r7, lr}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
    {
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8002e34:	681c      	ldr	r4, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2102      	movs	r1, #2
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	4798      	blx	r3
 8002e46:	4603      	mov	r3, r0
 8002e48:	4619      	mov	r1, r3
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	47a0      	blx	r4
 8002e4e:	4603      	mov	r3, r0
    }
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd90      	pop	{r4, r7, pc}

08002e58 <_ZN5L6470I8shield_3E9get_speedEv>:
    /**
     * @brief  Getting the current speed in pps.
     * @param  None.
     * @retval The current speed in pps.
     */
    virtual unsigned int get_speed(void)
 8002e58:	b5b0      	push	{r4, r5, r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002e68:	681c      	ldr	r4, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002e72:	681d      	ldr	r5, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2103      	movs	r1, #3
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	4798      	blx	r3
 8002e84:	4603      	mov	r3, r0
 8002e86:	4619      	mov	r1, r3
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	47a8      	blx	r5
 8002e8c:	eef0 7a40 	vmov.f32	s15, s0
 8002e90:	eeb0 0a67 	vmov.f32	s0, s15
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	47a0      	blx	r4
 8002e98:	4603      	mov	r3, r0
    }
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bdb0      	pop	{r4, r5, r7, pc}

08002ea2 <_ZN5L6470I8shield_3E13get_max_speedEv>:
    /**
     * @brief  Getting the maximum speed in pps.
     * @param  None.
     * @retval The maximum speed in pps.
     */
    virtual unsigned int get_max_speed(void)
 8002ea2:	b5b0      	push	{r4, r5, r7, lr}
 8002ea4:	b082      	sub	sp, #8
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002eb2:	681c      	ldr	r4, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002ebc:	681d      	ldr	r5, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2106      	movs	r1, #6
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	4798      	blx	r3
 8002ece:	4603      	mov	r3, r0
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	47a8      	blx	r5
 8002ed8:	eef0 7a40 	vmov.f32	s15, s0
 8002edc:	eeb0 0a67 	vmov.f32	s0, s15
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	47a0      	blx	r4
 8002ee4:	4603      	mov	r3, r0
    }
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bdb0      	pop	{r4, r5, r7, pc}

08002eee <_ZN5L6470I8shield_3E13get_min_speedEv>:
    /**
     * @brief  Getting the minimum speed in pps.
     * @param  None.
     * @retval The minimum speed in pps.
     */
    virtual unsigned int get_min_speed(void)
 8002eee:	b5b0      	push	{r4, r5, r7, lr}
 8002ef0:	b082      	sub	sp, #8
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002efe:	681c      	ldr	r4, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8002f08:	681d      	ldr	r5, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2107      	movs	r1, #7
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	4798      	blx	r3
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	4619      	mov	r1, r3
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	47a8      	blx	r5
 8002f24:	eef0 7a40 	vmov.f32	s15, s0
 8002f28:	eeb0 0a67 	vmov.f32	s0, s15
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	47a0      	blx	r4
 8002f30:	4603      	mov	r3, r0
    }
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bdb0      	pop	{r4, r5, r7, pc}

08002f3a <_ZN5L6470I8shield_3E16get_accelerationEv>:
    /**
     * @brief  Getting the acceleration in pps^2.
     * @param  None.
     * @retval The acceleration in pps^2.
     */
    virtual unsigned int get_acceleration(void)
 8002f3a:	b5b0      	push	{r4, r5, r7, lr}
 8002f3c:	b082      	sub	sp, #8
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002f4a:	681c      	ldr	r4, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002f54:	681d      	ldr	r5, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2104      	movs	r1, #4
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	4798      	blx	r3
 8002f66:	4603      	mov	r3, r0
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	47a8      	blx	r5
 8002f70:	eef0 7a40 	vmov.f32	s15, s0
 8002f74:	eeb0 0a67 	vmov.f32	s0, s15
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	47a0      	blx	r4
 8002f7c:	4603      	mov	r3, r0
    }
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bdb0      	pop	{r4, r5, r7, pc}

08002f86 <_ZN5L6470I8shield_3E16get_decelerationEv>:
    /**
     * @brief  Getting the deceleration in pps^2.
     * @param  None.
     * @retval The deceleration in pps^2.
     */
    virtual unsigned int get_deceleration(void)
 8002f86:	b5b0      	push	{r4, r5, r7, lr}
 8002f88:	b082      	sub	sp, #8
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002f96:	681c      	ldr	r4, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8002fa0:	681d      	ldr	r5, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2105      	movs	r1, #5
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	4798      	blx	r3
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	47a8      	blx	r5
 8002fbc:	eef0 7a40 	vmov.f32	s15, s0
 8002fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	47a0      	blx	r4
 8002fc8:	4603      	mov	r3, r0
    }
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bdb0      	pop	{r4, r5, r7, pc}

08002fd2 <_ZN5L6470I8shield_3E13get_directionEv>:
    /**
     * @brief  Getting the direction of rotation.
     * @param  None.
     * @retval The direction of rotation.
     */
    virtual StepperMotor::direction_t get_direction(void)
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
    {
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2104      	movs	r1, #4
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	4798      	blx	r3
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d101      	bne.n	8002ff4 <_ZN5L6470I8shield_3E13get_directionEv+0x22>
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e000      	b.n	8002ff6 <_ZN5L6470I8shield_3E13get_directionEv+0x24>
 8002ff4:	2300      	movs	r3, #0
    }
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <_ZN5L6470I8shield_3E13set_parameterEjj>:
     *           + L6470_ADC_OUT_ID
     *           + L6470_STEP_MODE_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b084      	sub	sp, #16
 8003002:	af00      	add	r7, sp, #0
 8003004:	60f8      	str	r0, [r7, #12]
 8003006:	60b9      	str	r1, [r7, #8]
 8003008:	607a      	str	r2, [r7, #4]
    {
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	b2d1      	uxtb	r1, r2
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	4798      	blx	r3
    }
 800301e:	bf00      	nop
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <_ZN5L6470I8shield_3E8set_homeEv>:
    /**
     * @brief  Setting the current position to be the home position.
     * @param  None.
     * @retval None.
     */
    virtual void set_home(void)
 8003026:	b580      	push	{r7, lr}
 8003028:	b082      	sub	sp, #8
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
    {
        L6470_ResetPos();
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	4798      	blx	r3
    }
 800303c:	bf00      	nop
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <_ZN5L6470I8shield_3E8set_markEv>:
    /**
     * @brief  Setting the current position to be the marked position.
     * @param  None.
     * @retval None.
     */
    virtual void set_mark(void)
 8003044:	b590      	push	{r4, r7, lr}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8003054:	681c      	ldr	r4, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2100      	movs	r1, #0
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	4798      	blx	r3
 8003066:	4603      	mov	r3, r0
 8003068:	461a      	mov	r2, r3
 800306a:	2102      	movs	r1, #2
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	47a0      	blx	r4
    }
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	bd90      	pop	{r4, r7, pc}

08003078 <_ZN5L6470I8shield_3E8set_markEi>:
    /**
     * @brief  Setting the current position to be the marked position.
     * @param  position The given position.
     * @retval None.
     */
    virtual void set_mark(signed int position)
 8003078:	b590      	push	{r4, r7, lr}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800308a:	681c      	ldr	r4, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6839      	ldr	r1, [r7, #0]
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	4798      	blx	r3
 800309c:	4603      	mov	r3, r0
 800309e:	461a      	mov	r2, r3
 80030a0:	2102      	movs	r1, #2
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	47a0      	blx	r4
    }
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd90      	pop	{r4, r7, pc}

080030ae <_ZN5L6470I8shield_3E13set_max_speedEj>:
    /**
     * @brief  Setting the maximum speed in pps.
     * @param  speed The maximum speed in pps.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_max_speed(unsigned int speed)
 80030ae:	b590      	push	{r4, r7, lr}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
 80030b6:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80030c0:	681c      	ldr	r4, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	ee07 2a90 	vmov	s15, r2
 80030d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030d6:	eeb0 0a67 	vmov.f32	s0, s15
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	4798      	blx	r3
 80030de:	4603      	mov	r3, r0
 80030e0:	461a      	mov	r2, r3
 80030e2:	2106      	movs	r1, #6
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	47a0      	blx	r4
        return true;
 80030e8:	2301      	movs	r3, #1
    }
 80030ea:	4618      	mov	r0, r3
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd90      	pop	{r4, r7, pc}

080030f2 <_ZN5L6470I8shield_3E13set_min_speedEj>:
    /**
     * @brief  Setting the minimum speed in pps.
     * @param  speed The minimum speed in pps.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_min_speed(unsigned int speed)
 80030f2:	b590      	push	{r4, r7, lr}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8003104:	681c      	ldr	r4, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	ee07 2a90 	vmov	s15, r2
 8003116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800311a:	eeb0 0a67 	vmov.f32	s0, s15
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	4798      	blx	r3
 8003122:	4603      	mov	r3, r0
 8003124:	461a      	mov	r2, r3
 8003126:	2107      	movs	r1, #7
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	47a0      	blx	r4
        return true;
 800312c:	2301      	movs	r3, #1
    }
 800312e:	4618      	mov	r0, r3
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	bd90      	pop	{r4, r7, pc}

08003136 <_ZN5L6470I8shield_3E16set_accelerationEj>:
    /**
     * @brief  Setting the acceleration in pps^2.
     * @param  acceleration The acceleration in pps^2.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_acceleration(unsigned int acceleration)
 8003136:	b590      	push	{r4, r7, lr}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
 800313e:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8003148:	681c      	ldr	r4, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	ee07 2a90 	vmov	s15, r2
 800315a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800315e:	eeb0 0a67 	vmov.f32	s0, s15
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	4798      	blx	r3
 8003166:	4603      	mov	r3, r0
 8003168:	461a      	mov	r2, r3
 800316a:	2104      	movs	r1, #4
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	47a0      	blx	r4
        return true;
 8003170:	2301      	movs	r3, #1
    }
 8003172:	4618      	mov	r0, r3
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	bd90      	pop	{r4, r7, pc}

0800317a <_ZN5L6470I8shield_3E16set_decelerationEj>:
    /**
     * @brief  Setting the deceleration in pps^2.
     * @param  deceleration The deceleration in pps^2.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_deceleration(unsigned int deceleration)
 800317a:	b590      	push	{r4, r7, lr}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
 8003182:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800318c:	681c      	ldr	r4, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	ee07 2a90 	vmov	s15, r2
 800319e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031a2:	eeb0 0a67 	vmov.f32	s0, s15
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	4798      	blx	r3
 80031aa:	4603      	mov	r3, r0
 80031ac:	461a      	mov	r2, r3
 80031ae:	2105      	movs	r1, #5
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	47a0      	blx	r4
        return true;
 80031b4:	2301      	movs	r3, #1
    }
 80031b6:	4618      	mov	r0, r3
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd90      	pop	{r4, r7, pc}

080031be <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE>:
     * @warning Setting the step mode implies first disabling the power bridge through
     *          the soft_hiz() method.
     * @warning Every time step mode is changed, the values of the home
     *          and mark positions lose meaning and are reset.
     */
    virtual bool set_step_mode(step_mode_t step_mode)
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	460b      	mov	r3, r1
 80031c8:	70fb      	strb	r3, [r7, #3]
    {
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 80031ca:	78fb      	ldrb	r3, [r7, #3]
 80031cc:	2b07      	cmp	r3, #7
 80031ce:	d901      	bls.n	80031d4 <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 80031d0:	2300      	movs	r3, #0
 80031d2:	e00f      	b.n	80031f4 <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        }
        soft_hiz();
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	3380      	adds	r3, #128	; 0x80
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	78fa      	ldrb	r2, [r7, #3]
 80031ec:	2115      	movs	r1, #21
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	4798      	blx	r3
        return true;
 80031f2:	2301      	movs	r3, #1
    }
 80031f4:	4618      	mov	r0, r3
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <_ZN5L6470I8shield_3E5go_toEi>:
    /**
     * @brief  Going to a specified position through the shortest path.
     * @param  position The desired position.
     * @retval None.
     */
    virtual void go_to(signed int position)
 80031fc:	b590      	push	{r4, r7, lr}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
    {
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 800320e:	681c      	ldr	r4, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6839      	ldr	r1, [r7, #0]
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	4798      	blx	r3
 8003220:	4603      	mov	r3, r0
 8003222:	4619      	mov	r1, r3
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	47a0      	blx	r4
    }
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	bd90      	pop	{r4, r7, pc}

08003230 <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE>:
     * @brief  Going to a specified position imposing the desired direction.
     * @param  position The desired position.
     * @param  direction The direction of rotation.
     * @retval None.
     */
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 8003230:	b5b0      	push	{r4, r5, r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	4613      	mov	r3, r2
 800323c:	71fb      	strb	r3, [r7, #7]
    {
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8003246:	681c      	ldr	r4, [r3, #0]
 8003248:	79fb      	ldrb	r3, [r7, #7]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d101      	bne.n	8003252 <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE+0x22>
 800324e:	2501      	movs	r5, #1
 8003250:	e000      	b.n	8003254 <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE+0x24>
 8003252:	2500      	movs	r5, #0
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68b9      	ldr	r1, [r7, #8]
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	4798      	blx	r3
 8003264:	4603      	mov	r3, r0
 8003266:	461a      	mov	r2, r3
 8003268:	4629      	mov	r1, r5
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	47a0      	blx	r4
    }
 800326e:	bf00      	nop
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bdb0      	pop	{r4, r5, r7, pc}

08003276 <_ZN5L6470I8shield_3E7go_homeEv>:
    /**
     * @brief  Going to the home position.
     * @param  None.
     * @retval None.
     */
    virtual void go_home(void)
 8003276:	b580      	push	{r7, lr}
 8003278:	b082      	sub	sp, #8
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
    {
        L6470_GoHome();
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	4798      	blx	r3
    }
 800328c:	bf00      	nop
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <_ZN5L6470I8shield_3E7go_markEv>:
    /**
     * @brief  Going to the marked position.
     * @param  None.
     * @retval None.
     */
    virtual void go_mark(void)
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
    {
        L6470_GoMark();
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	4798      	blx	r3
    }
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
     * @note   The identifier of the action about the absolute position can be
     *         one of the following:
     *           + L6470_ACT_RST_ID: the absolute position is reset;
     *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
     */
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 80032b2:	b5b0      	push	{r4, r5, r7, lr}
 80032b4:	b084      	sub	sp, #16
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	607b      	str	r3, [r7, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	72fb      	strb	r3, [r7, #11]
 80032c0:	4613      	mov	r3, r2
 80032c2:	72bb      	strb	r3, [r7, #10]
    {
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032cc:	681c      	ldr	r4, [r3, #0]
 80032ce:	7abb      	ldrb	r3, [r7, #10]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 80032d4:	2501      	movs	r5, #1
 80032d6:	e000      	b.n	80032da <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 80032d8:	2500      	movs	r5, #0
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	ee07 2a90 	vmov	s15, r2
 80032ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ee:	eeb0 0a67 	vmov.f32	s0, s15
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	4798      	blx	r3
 80032f6:	4603      	mov	r3, r0
 80032f8:	7af9      	ldrb	r1, [r7, #11]
 80032fa:	462a      	mov	r2, r5
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	47a0      	blx	r4
    }
 8003300:	bf00      	nop
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bdb0      	pop	{r4, r5, r7, pc}

08003308 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE>:
    /**
     * @brief  Running towards a specified direction.
     * @param  direction The direction of rotation.
     * @retval None.
     */
    virtual void run(StepperMotor::direction_t direction)
 8003308:	b5b0      	push	{r4, r5, r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	460b      	mov	r3, r1
 8003312:	70fb      	strb	r3, [r7, #3]
    {
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 800331c:	681c      	ldr	r4, [r3, #0]
 800331e:	78fb      	ldrb	r3, [r7, #3]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d101      	bne.n	8003328 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE+0x20>
 8003324:	2501      	movs	r5, #1
 8003326:	e000      	b.n	800332a <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE+0x22>
 8003328:	2500      	movs	r5, #0
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2106      	movs	r1, #6
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	4798      	blx	r3
 800333a:	4603      	mov	r3, r0
 800333c:	461a      	mov	r2, r3
 800333e:	4629      	mov	r1, r5
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	47a0      	blx	r4
    }
 8003344:	bf00      	nop
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bdb0      	pop	{r4, r5, r7, pc}

0800334c <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj>:
     * @brief  Running towards a specified direction at the given speed.
     * @param  direction The direction of rotation.
     * @param  speed The speed value in pps.
     * @retval None.
     */
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 800334c:	b5b0      	push	{r4, r5, r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	460b      	mov	r3, r1
 8003356:	607a      	str	r2, [r7, #4]
 8003358:	72fb      	strb	r3, [r7, #11]
    {
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8003362:	681c      	ldr	r4, [r3, #0]
 8003364:	7afb      	ldrb	r3, [r7, #11]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj+0x22>
 800336a:	2501      	movs	r5, #1
 800336c:	e000      	b.n	8003370 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj+0x24>
 800336e:	2500      	movs	r5, #0
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	ee07 2a90 	vmov	s15, r2
 8003380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003384:	eeb0 0a67 	vmov.f32	s0, s15
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	4798      	blx	r3
 800338c:	4603      	mov	r3, r0
 800338e:	461a      	mov	r2, r3
 8003390:	4629      	mov	r1, r5
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	47a0      	blx	r4
    }
 8003396:	bf00      	nop
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bdb0      	pop	{r4, r5, r7, pc}

0800339e <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj>:
     * @brief  Moving towards a specified direction for a certain number of steps.
     * @param  direction The direction of rotation.
     * @param  steps The desired number of steps.
     * @retval None.
     */
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 800339e:	b580      	push	{r7, lr}
 80033a0:	b084      	sub	sp, #16
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	60f8      	str	r0, [r7, #12]
 80033a6:	460b      	mov	r3, r1
 80033a8:	607a      	str	r2, [r7, #4]
 80033aa:	72fb      	strb	r3, [r7, #11]
    {
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	7afa      	ldrb	r2, [r7, #11]
 80033b8:	2a01      	cmp	r2, #1
 80033ba:	d101      	bne.n	80033c0 <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj+0x22>
 80033bc:	2101      	movs	r1, #1
 80033be:	e000      	b.n	80033c2 <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj+0x24>
 80033c0:	2100      	movs	r1, #0
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	4798      	blx	r3
    }
 80033c8:	bf00      	nop
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <_ZN5L6470I8shield_3E9soft_stopEv>:
     * @brief  Stopping the motor through an immediate deceleration up to zero speed.
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     */
    virtual void soft_stop(void)
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
    {
        L6470_SoftStop();
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	4798      	blx	r3
    }
 80033e6:	bf00      	nop
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <_ZN5L6470I8shield_3E9hard_stopEv>:
    /**
     * @brief  Stopping the motor through an immediate infinite deceleration.
     * @param  None.
     * @retval None.
     */
    virtual void hard_stop(void)
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b082      	sub	sp, #8
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
    {
        L6470_HardStop();
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	4798      	blx	r3
    }
 8003404:	bf00      	nop
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <_ZN5L6470I8shield_3E8soft_hizEv>:
     * @brief  Disabling the power bridge after performing a deceleration to zero.
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     */
    virtual void soft_hiz(void)
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
    {
        L6470_SoftHiZ();
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	4798      	blx	r3
    }
 8003422:	bf00      	nop
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <_ZN5L6470I8shield_3E8hard_hizEv>:
    /**
     * @brief  Disabling the power bridge immediately.
     * @param  None.
     * @retval None.
     */
    virtual void hard_hiz(void)
 800342a:	b580      	push	{r7, lr}
 800342c:	b082      	sub	sp, #8
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
    {
        L6470_HardHiZ();
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	4798      	blx	r3
    }
 8003440:	bf00      	nop
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <_ZN5L6470I8shield_3E17wait_while_activeEv>:
    /**
     * @brief  Waiting while the motor is active.
     * @param  None.
     * @retval None.
     */
    virtual void wait_while_active(void)
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
    {
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 8003450:	bf00      	nop
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2101      	movs	r1, #1
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	4798      	blx	r3
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	bf0c      	ite	eq
 8003468:	2301      	moveq	r3, #1
 800346a:	2300      	movne	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1ef      	bne.n	8003452 <_ZN5L6470I8shield_3E17wait_while_activeEv+0xa>
    }
 8003472:	bf00      	nop
 8003474:	bf00      	nop
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE>:
     * @param   direction The direction of rotation.
     * @retval  None.
     * @warning Setting the step-clock mode implies first disabling the power bridge through
     *          the soft_hiz() method.
     */
    virtual void step_clock(StepperMotor::direction_t direction)
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	70fb      	strb	r3, [r7, #3]
    {
        soft_hiz();
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	3380      	adds	r3, #128	; 0x80
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	78fa      	ldrb	r2, [r7, #3]
 80034a0:	2a01      	cmp	r2, #1
 80034a2:	d101      	bne.n	80034a8 <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE+0x2c>
 80034a4:	2201      	movs	r2, #1
 80034a6:	e000      	b.n	80034aa <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE+0x2e>
 80034a8:	2200      	movs	r2, #0
 80034aa:	4611      	mov	r1, r2
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	4798      	blx	r3
    }
 80034b0:	bf00      	nop
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
      * @note   The identifier of the action about the absolute position can be
      *         one of the following:
      *           + L6470_ACT_RST_ID: the absolute position is reset;
      *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
      */
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	70fb      	strb	r3, [r7, #3]
 80034c4:	4613      	mov	r3, r2
 80034c6:	70bb      	strb	r3, [r7, #2]
    {
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	78ba      	ldrb	r2, [r7, #2]
 80034d4:	2a01      	cmp	r2, #1
 80034d6:	d101      	bne.n	80034dc <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 80034d8:	2201      	movs	r2, #1
 80034da:	e000      	b.n	80034de <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 80034dc:	2200      	movs	r2, #0
 80034de:	78f9      	ldrb	r1, [r7, #3]
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	4798      	blx	r3
    }
 80034e4:	bf00      	nop
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <_ZN5L6470I8shield_3E12reset_deviceEv>:
    /**
      * @brief  Resetting the device to power-up conditions.
      * @param  None.
      * @retval None.
      */
    virtual void reset_device(void)
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
    {
        L6470_ResetDevice();
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	4798      	blx	r3
    }
 8003502:	bf00      	nop
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <_ZN5L6470I8shield_3E18prepare_get_statusEv>:
     * @brief  Preparing the command to get the status.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_status(void)
 800350a:	b580      	push	{r7, lr}
 800350c:	b082      	sub	sp, #8
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetStatus();
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003528:	bf00      	nop
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <_ZN5L6470I8shield_3E21prepare_get_parameterEj>:
     *           + L6470_STEP_MODE_ID
     *           + L6470_ALARM_EN_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void prepare_get_parameter(unsigned int parameter)
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	4611      	mov	r1, r2
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003556:	bf00      	nop
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <_ZN5L6470I8shield_3E20prepare_get_positionEv>:
     * @brief  Preparing the command to get the position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_position(void)
 800355e:	b580      	push	{r7, lr}
 8003560:	b082      	sub	sp, #8
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2100      	movs	r1, #0
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800357e:	bf00      	nop
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <_ZN5L6470I8shield_3E16prepare_get_markEv>:
     * @brief  Preparing the command to get the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_mark(void)
 8003586:	b580      	push	{r7, lr}
 8003588:	b082      	sub	sp, #8
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2102      	movs	r1, #2
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2202      	movs	r2, #2
 80035a2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80035a6:	bf00      	nop
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <_ZN5L6470I8shield_3E17prepare_get_speedEv>:
     * @brief  Preparing the command to get the current speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_speed(void)
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b082      	sub	sp, #8
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2103      	movs	r1, #3
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2203      	movs	r2, #3
 80035ca:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <_ZN5L6470I8shield_3E21prepare_get_max_speedEv>:
     * @brief  Preparing the command to get the maximum speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_max_speed(void)
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2106      	movs	r1, #6
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2204      	movs	r2, #4
 80035f2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <_ZN5L6470I8shield_3E21prepare_get_min_speedEv>:
     * @brief  Preparing the command to get the minimum speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_min_speed(void)
 80035fe:	b580      	push	{r7, lr}
 8003600:	b082      	sub	sp, #8
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2107      	movs	r1, #7
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2205      	movs	r2, #5
 800361a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800361e:	bf00      	nop
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <_ZN5L6470I8shield_3E24prepare_get_accelerationEv>:
     * @brief  Preparing the command to get the acceleration in pps^2.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_acceleration(void)
 8003626:	b580      	push	{r7, lr}
 8003628:	b082      	sub	sp, #8
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2104      	movs	r1, #4
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2206      	movs	r2, #6
 8003642:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003646:	bf00      	nop
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <_ZN5L6470I8shield_3E24prepare_get_decelerationEv>:
     * @brief  Preparing the command to get the deceleration in pps^2.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_deceleration(void)
 800364e:	b580      	push	{r7, lr}
 8003650:	b082      	sub	sp, #8
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2105      	movs	r1, #5
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2207      	movs	r2, #7
 800366a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800366e:	bf00      	nop
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
	...

08003678 <_ZN5L6470I8shield_3E21prepare_get_directionEv>:
     * @brief  Preparing the command to get the direction of rotation.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_direction(void)
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
    {
        if (!L6470_DaisyChain_HalfPrepared) {
 8003680:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x38>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10a      	bne.n	800369e <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x26>
            /* To avoid deleting the previous entered command. */
            L6470_DaisyChain_HalfPrepared = ONE_F;
 8003688:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x38>)
 800368a:	2201      	movs	r2, #1
 800368c:	701a      	strb	r2, [r3, #0]
            /* Resetting commands. */
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4906      	ldr	r1, [pc, #24]	; (80036b4 <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x3c>)
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	4798      	blx	r3
        }
        prepared_action = PREPARED_GET_DIRECTION;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2208      	movs	r2, #8
 80036a2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80036a6:	bf00      	nop
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	20000271 	.word	0x20000271
 80036b4:	20000274 	.word	0x20000274

080036b8 <_ZN5L6470I8shield_3E21prepare_set_parameterEjj>:
     *           + L6470_ADC_OUT_ID
     *           + L6470_STEP_MODE_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	b2d1      	uxtb	r1, r2
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80036e0:	bf00      	nop
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <_ZN5L6470I8shield_3E16prepare_set_homeEv>:
     *         the home position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_home(void)
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareResetPos();
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003706:	bf00      	nop
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <_ZN5L6470I8shield_3E16prepare_set_markEv>:
     *         the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_mark(void)
 800370e:	b580      	push	{r7, lr}
 8003710:	b082      	sub	sp, #8
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
        /*
           Set "0" now as marked position. This value will be replaced by the
           actual position read at the time when the prepared actions will be
           performed.
        */
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2200      	movs	r2, #0
 8003722:	2102      	movs	r1, #2
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2209      	movs	r2, #9
 800372c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003730:	bf00      	nop
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <_ZN5L6470I8shield_3E16prepare_set_markEi>:
     *         the marked position.
     * @param  position The given position.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_mark(signed int position)
 8003738:	b590      	push	{r4, r7, lr}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800374a:	681c      	ldr	r4, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6839      	ldr	r1, [r7, #0]
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	4798      	blx	r3
 800375c:	4603      	mov	r3, r0
 800375e:	461a      	mov	r2, r3
 8003760:	2102      	movs	r1, #2
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	bd90      	pop	{r4, r7, pc}

08003776 <_ZN5L6470I8shield_3E17prepare_set_speedEj>:
     * @brief  Preparing the command to set the current speed in pps.
     * @param  speed The current speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_speed(unsigned int speed)
 8003776:	b590      	push	{r4, r7, lr}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003788:	681c      	ldr	r4, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	ee07 2a90 	vmov	s15, r2
 800379a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800379e:	eeb0 0a67 	vmov.f32	s0, s15
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	4798      	blx	r3
 80037a6:	4603      	mov	r3, r0
 80037a8:	461a      	mov	r2, r3
 80037aa:	2103      	movs	r1, #3
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd90      	pop	{r4, r7, pc}

080037c0 <_ZN5L6470I8shield_3E21prepare_set_max_speedEj>:
     * @brief  Preparing the command to set the maximum speed in pps.
     * @param  speed The maximum speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_max_speed(unsigned int speed)
 80037c0:	b590      	push	{r4, r7, lr}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80037d2:	681c      	ldr	r4, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	ee07 2a90 	vmov	s15, r2
 80037e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037e8:	eeb0 0a67 	vmov.f32	s0, s15
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	4798      	blx	r3
 80037f0:	4603      	mov	r3, r0
 80037f2:	461a      	mov	r2, r3
 80037f4:	2106      	movs	r1, #6
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	bd90      	pop	{r4, r7, pc}

0800380a <_ZN5L6470I8shield_3E21prepare_set_min_speedEj>:
     * @brief  Preparing the command to set the minimum speed in pps.
     * @param  speed The minimum speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_min_speed(unsigned int speed)
 800380a:	b590      	push	{r4, r7, lr}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
 8003812:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800381c:	681c      	ldr	r4, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	ee07 2a90 	vmov	s15, r2
 800382e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003832:	eeb0 0a67 	vmov.f32	s0, s15
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	4798      	blx	r3
 800383a:	4603      	mov	r3, r0
 800383c:	461a      	mov	r2, r3
 800383e:	2107      	movs	r1, #7
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	bd90      	pop	{r4, r7, pc}

08003854 <_ZN5L6470I8shield_3E24prepare_set_accelerationEj>:
     * @brief  Preparing the command to set the acceleration in pps^2.
     * @param  acceleration The acceleration in pps^2.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_acceleration(unsigned int acceleration)
 8003854:	b590      	push	{r4, r7, lr}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003866:	681c      	ldr	r4, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	ee07 2a90 	vmov	s15, r2
 8003878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800387c:	eeb0 0a67 	vmov.f32	s0, s15
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	4798      	blx	r3
 8003884:	4603      	mov	r3, r0
 8003886:	461a      	mov	r2, r3
 8003888:	2104      	movs	r1, #4
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	bd90      	pop	{r4, r7, pc}

0800389e <_ZN5L6470I8shield_3E24prepare_set_decelerationEj>:
     * @brief  Preparing the command to set the deceleration in pps^2.
     * @param  deceleration The deceleration in pps^2.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_deceleration(unsigned int deceleration)
 800389e:	b590      	push	{r4, r7, lr}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
 80038a6:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80038b0:	681c      	ldr	r4, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	ee07 2a90 	vmov	s15, r2
 80038c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038c6:	eeb0 0a67 	vmov.f32	s0, s15
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	4798      	blx	r3
 80038ce:	4603      	mov	r3, r0
 80038d0:	461a      	mov	r2, r3
 80038d2:	2105      	movs	r1, #5
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd90      	pop	{r4, r7, pc}

080038e8 <_ZN5L6470I8shield_3E13prepare_go_toEi>:
     * @brief  Preparing the command to go to a specified position.
     * @param  position The desired position.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_to(signed int position)
 80038e8:	b590      	push	{r4, r7, lr}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80038fa:	681c      	ldr	r4, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6839      	ldr	r1, [r7, #0]
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	4798      	blx	r3
 800390c:	4603      	mov	r3, r0
 800390e:	4619      	mov	r1, r3
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	bd90      	pop	{r4, r7, pc}

08003924 <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE>:
     * @param  position The desired position.
     * @param  direction The direction of rotation.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 8003924:	b5b0      	push	{r4, r5, r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	4613      	mov	r3, r2
 8003930:	71fb      	strb	r3, [r7, #7]
    {
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800393a:	681c      	ldr	r4, [r3, #0]
 800393c:	79fb      	ldrb	r3, [r7, #7]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d101      	bne.n	8003946 <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 8003942:	2501      	movs	r5, #1
 8003944:	e000      	b.n	8003948 <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 8003946:	2500      	movs	r5, #0
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68b9      	ldr	r1, [r7, #8]
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	4798      	blx	r3
 8003958:	4603      	mov	r3, r0
 800395a:	461a      	mov	r2, r3
 800395c:	4629      	mov	r1, r5
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800396a:	bf00      	nop
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bdb0      	pop	{r4, r5, r7, pc}

08003972 <_ZN5L6470I8shield_3E15prepare_go_homeEv>:
     * @brief  Preparing the command to go to the home position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_home(void)
 8003972:	b580      	push	{r7, lr}
 8003974:	b082      	sub	sp, #8
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGoHome();
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003990:	bf00      	nop
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <_ZN5L6470I8shield_3E15prepare_go_markEv>:
     * @brief  Preparing the command to go to the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_mark(void)
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGoMark();
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80039b6:	bf00      	nop
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
     *         The identifier of the action about the absolute position can be
     *         one of the following:
     *           + L6470_ACT_RST_ID: the absolute position is reset;
     *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
     */
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 80039be:	b5b0      	push	{r4, r5, r7, lr}
 80039c0:	b084      	sub	sp, #16
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	60f8      	str	r0, [r7, #12]
 80039c6:	607b      	str	r3, [r7, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	72fb      	strb	r3, [r7, #11]
 80039cc:	4613      	mov	r3, r2
 80039ce:	72bb      	strb	r3, [r7, #10]
    {
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80039d8:	681c      	ldr	r4, [r3, #0]
 80039da:	7abb      	ldrb	r3, [r7, #10]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 80039e0:	2501      	movs	r5, #1
 80039e2:	e000      	b.n	80039e6 <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 80039e4:	2500      	movs	r5, #0
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	ee07 2a90 	vmov	s15, r2
 80039f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039fa:	eeb0 0a67 	vmov.f32	s0, s15
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	4798      	blx	r3
 8003a02:	4603      	mov	r3, r0
 8003a04:	7af9      	ldrb	r1, [r7, #11]
 8003a06:	462a      	mov	r2, r5
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003a14:	bf00      	nop
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bdb0      	pop	{r4, r5, r7, pc}

08003a1c <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE>:
     *         at the maximum speed.
     * @param  direction The direction of rotation.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_run(StepperMotor::direction_t direction)
 8003a1c:	b5b0      	push	{r4, r5, r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	460b      	mov	r3, r1
 8003a26:	70fb      	strb	r3, [r7, #3]
    {
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8003a30:	681c      	ldr	r4, [r3, #0]
 8003a32:	78fb      	ldrb	r3, [r7, #3]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE+0x20>
 8003a38:	2501      	movs	r5, #1
 8003a3a:	e000      	b.n	8003a3e <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE+0x22>
 8003a3c:	2500      	movs	r5, #0
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2106      	movs	r1, #6
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	4798      	blx	r3
 8003a4e:	4603      	mov	r3, r0
 8003a50:	461a      	mov	r2, r3
 8003a52:	4629      	mov	r1, r5
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003a60:	bf00      	nop
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bdb0      	pop	{r4, r5, r7, pc}

08003a68 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj>:
     * @param  direction The direction of rotation.
     * @param  speed The speed value in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 8003a68:	b5b0      	push	{r4, r5, r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	460b      	mov	r3, r1
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	72fb      	strb	r3, [r7, #11]
    {
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8003a7e:	681c      	ldr	r4, [r3, #0]
 8003a80:	7afb      	ldrb	r3, [r7, #11]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 8003a86:	2501      	movs	r5, #1
 8003a88:	e000      	b.n	8003a8c <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 8003a8a:	2500      	movs	r5, #0
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	ee07 2a90 	vmov	s15, r2
 8003a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aa0:	eeb0 0a67 	vmov.f32	s0, s15
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	4798      	blx	r3
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	461a      	mov	r2, r3
 8003aac:	4629      	mov	r1, r5
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003aba:	bf00      	nop
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bdb0      	pop	{r4, r5, r7, pc}

08003ac2 <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj>:
     * @param  direction The direction of rotation.
     * @param  steps The desired number of steps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b084      	sub	sp, #16
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	60f8      	str	r0, [r7, #12]
 8003aca:	460b      	mov	r3, r1
 8003acc:	607a      	str	r2, [r7, #4]
 8003ace:	72fb      	strb	r3, [r7, #11]
    {
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	7afa      	ldrb	r2, [r7, #11]
 8003adc:	2a01      	cmp	r2, #1
 8003ade:	d101      	bne.n	8003ae4 <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	e000      	b.n	8003ae6 <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003af4:	bf00      	nop
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <_ZN5L6470I8shield_3E17prepare_soft_stopEv>:
     * @brief  Preparing the command to stop the motor.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_soft_stop(void)
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareSoftStop();
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003b1a:	bf00      	nop
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <_ZN5L6470I8shield_3E17prepare_hard_stopEv>:
     * @brief  Preparing the command to stop the motor and disabling the power bridge.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_hard_stop(void)
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b082      	sub	sp, #8
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareHardStop();
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003b40:	bf00      	nop
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <_ZN5L6470I8shield_3E16prepare_soft_hizEv>:
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_soft_hiz(void)
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareSoftHiZ();
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003b66:	bf00      	nop
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <_ZN5L6470I8shield_3E16prepare_hard_hizEv>:
     * @brief  Preparing the command to disable the power bridge immediately.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_hard_hiz(void)
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b082      	sub	sp, #8
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareHardHiZ();
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003b8c:	bf00      	nop
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE>:
     * @retval  None.
     * @warning Setting the step-clock mode requires an explicit action by the user to first
     *          disable the power bridge through the soft_hiz() method.
     * @note    The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	70fb      	strb	r3, [r7, #3]
    {
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	78fa      	ldrb	r2, [r7, #3]
 8003bac:	2a01      	cmp	r2, #1
 8003bae:	d101      	bne.n	8003bb4 <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	e000      	b.n	8003bb6 <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003bc4:	bf00      	nop
 8003bc6:	3708      	adds	r7, #8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
      *         The identifier of the action about the absolute position can be
      *         one of the following:
      *           + L6470_ACT_RST_ID: the absolute position is reset;
      *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
      */
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	70fb      	strb	r3, [r7, #3]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	70bb      	strb	r3, [r7, #2]
    {
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	78ba      	ldrb	r2, [r7, #2]
 8003be8:	2a01      	cmp	r2, #1
 8003bea:	d101      	bne.n	8003bf0 <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8003bec:	2201      	movs	r2, #1
 8003bee:	e000      	b.n	8003bf2 <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	78f9      	ldrb	r1, [r7, #3]
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003c00:	bf00      	nop
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <_ZN5L6470I8shield_3E20prepare_reset_deviceEv>:
      * @brief  Preparing the command to reset the device to power-up conditions.
      * @param  None.
      * @retval None.
      * @note   The command will be sent by issuing "perform_action()".
      */
    virtual void prepare_reset_device(void)
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareResetDevice();
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003c26:	bf00      	nop
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <_ZN5L6470I8shield_3E24perform_prepared_actionsEv>:
      * @brief    Performing all the actions prepared on the components
      *           of the daisy-chain.
      * @param    None.
      * @retval   The raw data returned by the components.
      */
    uint8_t* perform_prepared_actions(void)
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b082      	sub	sp, #8
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
    {
        return L6470_PerformPreparedApplicationCommand();
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	4798      	blx	r3
 8003c44:	4603      	mov	r3, r0
    }
 8003c46:	4618      	mov	r0, r3
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <_ZN5L6470I8shield_3E19get_prepared_actionEv>:
    /**
      * @brief    Getting the prepared action.
      * @param    None
      * @retval   The prepared action.
      */
    prepared_action_t get_prepared_action(void)
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
    {
        return prepared_action;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    }
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <_ZN5L6470I8shield_3E10get_resultEPh>:
      * @brief    Converting the raw data received by the component according to
      *           the action performed on it.
      * @param    raw_data The received raw data.
      * @retval   The result of the action performed.
      */
    int32_t get_result(uint8_t *raw_data)
 8003c68:	b5b0      	push	{r4, r5, r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
    {
        switch (prepared_action) {
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	2b07      	cmp	r3, #7
 8003c7c:	f200 80fe 	bhi.w	8003e7c <_ZN5L6470I8shield_3E10get_resultEPh+0x214>
 8003c80:	a201      	add	r2, pc, #4	; (adr r2, 8003c88 <_ZN5L6470I8shield_3E10get_resultEPh+0x20>)
 8003c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c86:	bf00      	nop
 8003c88:	08003ca9 	.word	0x08003ca9
 8003c8c:	08003cd5 	.word	0x08003cd5
 8003c90:	08003d03 	.word	0x08003d03
 8003c94:	08003d47 	.word	0x08003d47
 8003c98:	08003d8d 	.word	0x08003d8d
 8003c9c:	08003dd3 	.word	0x08003dd3
 8003ca0:	08003e19 	.word	0x08003e19
 8003ca4:	08003e5f 	.word	0x08003e5f
            case PREPARED_GET_POSITION:
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8003cb0:	681c      	ldr	r4, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6a12      	ldr	r2, [r2, #32]
 8003cc0:	7b92      	ldrb	r2, [r2, #14]
 8003cc2:	6839      	ldr	r1, [r7, #0]
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	4798      	blx	r3
 8003cc8:	4603      	mov	r3, r0
 8003cca:	4619      	mov	r1, r3
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	47a0      	blx	r4
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	e0d4      	b.n	8003e7e <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_MARK:
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8003cdc:	681c      	ldr	r4, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6a12      	ldr	r2, [r2, #32]
 8003cec:	3228      	adds	r2, #40	; 0x28
 8003cee:	7b92      	ldrb	r2, [r2, #14]
 8003cf0:	6839      	ldr	r1, [r7, #0]
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	4798      	blx	r3
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	47a0      	blx	r4
 8003cfe:	4603      	mov	r3, r0
 8003d00:	e0bd      	b.n	8003e7e <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_SPEED:
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003d0a:	681c      	ldr	r4, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8003d14:	681d      	ldr	r5, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6a12      	ldr	r2, [r2, #32]
 8003d24:	323c      	adds	r2, #60	; 0x3c
 8003d26:	7b92      	ldrb	r2, [r2, #14]
 8003d28:	6839      	ldr	r1, [r7, #0]
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	4798      	blx	r3
 8003d2e:	4603      	mov	r3, r0
 8003d30:	4619      	mov	r1, r3
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	47a8      	blx	r5
 8003d36:	eef0 7a40 	vmov.f32	s15, s0
 8003d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	47a0      	blx	r4
 8003d42:	4603      	mov	r3, r0
 8003d44:	e09b      	b.n	8003e7e <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_MAX_SPEED:
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003d4e:	681c      	ldr	r4, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003d58:	681d      	ldr	r5, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	6a12      	ldr	r2, [r2, #32]
 8003d68:	3278      	adds	r2, #120	; 0x78
 8003d6a:	7b92      	ldrb	r2, [r2, #14]
 8003d6c:	6839      	ldr	r1, [r7, #0]
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	4798      	blx	r3
 8003d72:	4603      	mov	r3, r0
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	4619      	mov	r1, r3
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	47a8      	blx	r5
 8003d7c:	eef0 7a40 	vmov.f32	s15, s0
 8003d80:	eeb0 0a67 	vmov.f32	s0, s15
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	47a0      	blx	r4
 8003d88:	4603      	mov	r3, r0
 8003d8a:	e078      	b.n	8003e7e <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_MIN_SPEED:
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003d94:	681c      	ldr	r4, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8003d9e:	681d      	ldr	r5, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	6a12      	ldr	r2, [r2, #32]
 8003dae:	328c      	adds	r2, #140	; 0x8c
 8003db0:	7b92      	ldrb	r2, [r2, #14]
 8003db2:	6839      	ldr	r1, [r7, #0]
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	4798      	blx	r3
 8003db8:	4603      	mov	r3, r0
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	47a8      	blx	r5
 8003dc2:	eef0 7a40 	vmov.f32	s15, s0
 8003dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	47a0      	blx	r4
 8003dce:	4603      	mov	r3, r0
 8003dd0:	e055      	b.n	8003e7e <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_ACCELERATION:
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003dda:	681c      	ldr	r4, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8003de4:	681d      	ldr	r5, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6a12      	ldr	r2, [r2, #32]
 8003df4:	3250      	adds	r2, #80	; 0x50
 8003df6:	7b92      	ldrb	r2, [r2, #14]
 8003df8:	6839      	ldr	r1, [r7, #0]
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	4798      	blx	r3
 8003dfe:	4603      	mov	r3, r0
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	4619      	mov	r1, r3
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	47a8      	blx	r5
 8003e08:	eef0 7a40 	vmov.f32	s15, s0
 8003e0c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	47a0      	blx	r4
 8003e14:	4603      	mov	r3, r0
 8003e16:	e032      	b.n	8003e7e <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_DECELERATION:
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003e20:	681c      	ldr	r4, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003e2a:	681d      	ldr	r5, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6a12      	ldr	r2, [r2, #32]
 8003e3a:	3264      	adds	r2, #100	; 0x64
 8003e3c:	7b92      	ldrb	r2, [r2, #14]
 8003e3e:	6839      	ldr	r1, [r7, #0]
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	4798      	blx	r3
 8003e44:	4603      	mov	r3, r0
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	4619      	mov	r1, r3
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	47a8      	blx	r5
 8003e4e:	eef0 7a40 	vmov.f32	s15, s0
 8003e52:	eeb0 0a67 	vmov.f32	s0, s15
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	47a0      	blx	r4
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	e00f      	b.n	8003e7e <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_DIRECTION:
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2104      	movs	r1, #4
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	4798      	blx	r3
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d101      	bne.n	8003e78 <_ZN5L6470I8shield_3E10get_resultEPh+0x210>
 8003e74:	2301      	movs	r3, #1
 8003e76:	e002      	b.n	8003e7e <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	e000      	b.n	8003e7e <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            default:
            case PREPARED_NO_ACTION:
                return 0;
 8003e7c:	2300      	movs	r3, #0
        }
    }
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bdb0      	pop	{r4, r5, r7, pc}
 8003e86:	bf00      	nop

08003e88 <_ZN5L6470I8shield_3E13L6470_DISABLEEv>:
    }

    /*
     * Puts the device in reset mode.
     */
    void L6470_DISABLE(void)
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
    {
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6898      	ldr	r0, [r3, #8]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	899b      	ldrh	r3, [r3, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	f009 fbf4 	bl	800d688 <HAL_GPIO_WritePin>
    }
 8003ea0:	bf00      	nop
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm>:
  * 
  * @param  AbsPos      The absolute position in the range from [-(2^21)] to [+(2^21)-1].
  * @retval Position    The position as signed number.
  */
template <class shield_x>
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
{
  if (AbsPos > L6470_MAX_POSITION)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003eb8:	d303      	bcc.n	8003ec2 <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	f5a3 0380 	sub.w	r3, r3, #4194304	; 0x400000
 8003ec0:	e000      	b.n	8003ec4 <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm+0x1c>
  else
    return AbsPos;
 8003ec2:	683b      	ldr	r3, [r7, #0]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl>:
  * 
  * @param  Position    The position as signed number.
  * @retval AbsPos      The absolute position in the range from [-(2^21)] to [+(2^21)-1].
  */
template <class shield_x>
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
{
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	db05      	blt.n	8003eec <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x1c>
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ee6:	da01      	bge.n	8003eec <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	e00c      	b.n	8003f06 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x36>
  else
  {
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
 8003ef2:	db06      	blt.n	8003f02 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x32>
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	da03      	bge.n	8003f02 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
 8003f00:	e001      	b.n	8003f06 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x36>
    else
      return (L6470_POSITION_RANGE + 1);        // OVF
 8003f02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  }
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
	...

08003f14 <_ZN5L6470I8shield_3E20L6470_Speed_2_Step_sEm>:
  * 
  * @param  Speed       The SPEED register value.
  * @retval step/s      The speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
{
  return (Speed * ((float)14.9012e-3));
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	ee07 3a90 	vmov	s15, r3
 8003f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f28:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003f40 <_ZN5L6470I8shield_3E20L6470_Speed_2_Step_sEm+0x2c>
 8003f2c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003f30:	eeb0 0a67 	vmov.f32	s0, s15
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	3c74242a 	.word	0x3c74242a

08003f44 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf>:
  * 
  * @param  step/s      The speed as step/s.
  * @retval Speed       The SPEED register value.
  */
template <class shield_x>
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 8003f50:	edd7 7a00 	vldr	s15, [r7]
 8003f54:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003f88 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x44>
 8003f58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f60:	d80a      	bhi.n	8003f78 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 8003f62:	ed97 7a00 	vldr	s14, [r7]
 8003f66:	eddf 6a09 	vldr	s13, [pc, #36]	; 8003f8c <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x48>
 8003f6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f72:	ee17 3a90 	vmov	r3, s15
 8003f76:	e000      	b.n	8003f7a <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x36>
  else
    return 0;   // Warning
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	4674241b 	.word	0x4674241b
 8003f8c:	3c74242a 	.word	0x3c74242a

08003f90 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et>:
  * 
  * @param  Acc         The ACCEL register value.
  * @retval step/(s^2)  The acceleration as step/(s^2).
  */
template <class shield_x>
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	807b      	strh	r3, [r7, #2]
{
  if (Acc <= L6470_MAX_ACC)
 8003f9c:	887b      	ldrh	r3, [r7, #2]
 8003f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa2:	d209      	bcs.n	8003fb8 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 8003fa4:	887b      	ldrh	r3, [r7, #2]
 8003fa6:	ee07 3a90 	vmov	s15, r3
 8003faa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fae:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003fcc <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x3c>
 8003fb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fb6:	e001      	b.n	8003fbc <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x2c>
  else
    return 0;   // Warning
 8003fb8:	eddf 7a05 	vldr	s15, [pc, #20]	; 8003fd0 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x40>
}
 8003fbc:	eeb0 0a67 	vmov.f32	s0, s15
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	4168d4fe 	.word	0x4168d4fe
 8003fd0:	00000000 	.word	0x00000000

08003fd4 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf>:
  * 
  * @param  step/(s^2)  The acceleration as step/(s^2).
  * @retval Acc         The ACCEL register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 8003fe0:	edd7 7a00 	vldr	s15, [r7]
 8003fe4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004018 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x44>
 8003fe8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ff0:	d80b      	bhi.n	800400a <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8003ff2:	ed97 7a00 	vldr	s14, [r7]
 8003ff6:	eddf 6a09 	vldr	s13, [pc, #36]	; 800401c <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x48>
 8003ffa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004002:	ee17 3a90 	vmov	r3, s15
 8004006:	b29b      	uxth	r3, r3
 8004008:	e000      	b.n	800400c <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x38>
  else
    return 0;   // Warning
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	4768c671 	.word	0x4768c671
 800401c:	4168d4fe 	.word	0x4168d4fe

08004020 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et>:
  * 
  * @param  Dec         The DECEL register value.
  * @retval step/(s^2)  The deceleration as step/(s^2).
  */
template <class shield_x>
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	460b      	mov	r3, r1
 800402a:	807b      	strh	r3, [r7, #2]
{
  if (Dec <= L6470_MAX_DEC)
 800402c:	887b      	ldrh	r3, [r7, #2]
 800402e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004032:	d209      	bcs.n	8004048 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 8004034:	887b      	ldrh	r3, [r7, #2]
 8004036:	ee07 3a90 	vmov	s15, r3
 800403a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800403e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800405c <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x3c>
 8004042:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004046:	e001      	b.n	800404c <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x2c>
  else
    return 0;   // Warning
 8004048:	eddf 7a05 	vldr	s15, [pc, #20]	; 8004060 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x40>
}
 800404c:	eeb0 0a67 	vmov.f32	s0, s15
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	4168d4fe 	.word	0x4168d4fe
 8004060:	00000000 	.word	0x00000000

08004064 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf>:
  * 
  * @param  step/(s^2)  The deceleration as step/(s^2).
  * @retval Dec         The DECEL register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 8004070:	edd7 7a00 	vldr	s15, [r7]
 8004074:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80040a8 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x44>
 8004078:	eef4 7ac7 	vcmpe.f32	s15, s14
 800407c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004080:	d80b      	bhi.n	800409a <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8004082:	ed97 7a00 	vldr	s14, [r7]
 8004086:	eddf 6a09 	vldr	s13, [pc, #36]	; 80040ac <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x48>
 800408a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800408e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004092:	ee17 3a90 	vmov	r3, s15
 8004096:	b29b      	uxth	r3, r3
 8004098:	e000      	b.n	800409c <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x38>
  else
    return 0;   // Warning
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	4768c671 	.word	0x4768c671
 80040ac:	4168d4fe 	.word	0x4168d4fe

080040b0 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt>:
  * 
  * @param  MaxSpeed    The MAX_SPEED register value.
  * @retval step/s      The max speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	460b      	mov	r3, r1
 80040ba:	807b      	strh	r3, [r7, #2]
{
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 80040bc:	887b      	ldrh	r3, [r7, #2]
 80040be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c2:	d209      	bcs.n	80040d8 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 80040c4:	887b      	ldrh	r3, [r7, #2]
 80040c6:	ee07 3a90 	vmov	s15, r3
 80040ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040ce:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80040ec <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 80040d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040d6:	e001      	b.n	80040dc <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 80040d8:	eddf 7a05 	vldr	s15, [pc, #20]	; 80040f0 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 80040dc:	eeb0 0a67 	vmov.f32	s0, s15
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	4174240b 	.word	0x4174240b
 80040f0:	00000000 	.word	0x00000000

080040f4 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf>:
  * 
  * @param  step/s      The max speed as step/s.
  * @retval MaxSpeed    The MAX_SPEED register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 8004100:	edd7 7a00 	vldr	s15, [r7]
 8004104:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004138 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x44>
 8004108:	eef4 7ac7 	vcmpe.f32	s15, s14
 800410c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004110:	d80b      	bhi.n	800412a <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 8004112:	ed97 7a00 	vldr	s14, [r7]
 8004116:	eddf 6a09 	vldr	s13, [pc, #36]	; 800413c <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x48>
 800411a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800411e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004122:	ee17 3a90 	vmov	r3, s15
 8004126:	b29b      	uxth	r3, r3
 8004128:	e000      	b.n	800412c <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x38>
  else
    return 0;   // Warning
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	4673e702 	.word	0x4673e702
 800413c:	4174240b 	.word	0x4174240b

08004140 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt>:
  * 
  * @param  MinSpeed    The MIN_SPEED register value.
  * @retval step/s      The min speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	460b      	mov	r3, r1
 800414a:	807b      	strh	r3, [r7, #2]
{
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 800414c:	887b      	ldrh	r3, [r7, #2]
 800414e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004152:	d209      	bcs.n	8004168 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 8004154:	887b      	ldrh	r3, [r7, #2]
 8004156:	ee07 3a90 	vmov	s15, r3
 800415a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800415e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800417c <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x3c>
 8004162:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004166:	e001      	b.n	800416c <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 8004168:	eddf 7a05 	vldr	s15, [pc, #20]	; 8004180 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 800416c:	eeb0 0a67 	vmov.f32	s0, s15
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	3e742401 	.word	0x3e742401
 8004180:	00000000 	.word	0x00000000

08004184 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf>:
  * 
  * @param  step/s      The min speed as step/s.
  * @retval MinSpeed    The MIN_SPEED register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 8004190:	edd7 7a00 	vldr	s15, [r7]
 8004194:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80041c8 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x44>
 8004198:	eef4 7ac7 	vcmpe.f32	s15, s14
 800419c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a0:	d80b      	bhi.n	80041ba <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 80041a2:	ed97 7a00 	vldr	s14, [r7]
 80041a6:	eddf 6a09 	vldr	s13, [pc, #36]	; 80041cc <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x48>
 80041aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041b2:	ee17 3a90 	vmov	r3, s15
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	e000      	b.n	80041bc <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x38>
  else
    return 0;   // Warning
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	447414bf 	.word	0x447414bf
 80041cc:	3e742401 	.word	0x3e742401

080041d0 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt>:
  * 
  * @param  FsSpd       The FS_SPD register value.
  * @retval step/s      The full-step speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	460b      	mov	r3, r1
 80041da:	807b      	strh	r3, [r7, #2]
{
  if (FsSpd <= L6470_MAX_FS_SPD)
 80041dc:	887b      	ldrh	r3, [r7, #2]
 80041de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e2:	d219      	bcs.n	8004218 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 80041e4:	887b      	ldrh	r3, [r7, #2]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fc f9cc 	bl	8000584 <__aeabi_i2d>
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	4b0e      	ldr	r3, [pc, #56]	; (800422c <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x5c>)
 80041f2:	f7fc f87b 	bl	80002ec <__adddf3>
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	4610      	mov	r0, r2
 80041fc:	4619      	mov	r1, r3
 80041fe:	f04f 0200 	mov.w	r2, #0
 8004202:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x60>)
 8004204:	f7fc fa28 	bl	8000658 <__aeabi_dmul>
 8004208:	4602      	mov	r2, r0
 800420a:	460b      	mov	r3, r1
 800420c:	4610      	mov	r0, r2
 800420e:	4619      	mov	r1, r3
 8004210:	f7fc fcfa 	bl	8000c08 <__aeabi_d2f>
 8004214:	4603      	mov	r3, r0
 8004216:	e001      	b.n	800421c <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x4c>
  else
    return 0;   // Warning
 8004218:	f04f 0300 	mov.w	r3, #0
}
 800421c:	ee07 3a90 	vmov	s15, r3
 8004220:	eeb0 0a67 	vmov.f32	s0, s15
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	3fe00000 	.word	0x3fe00000
 8004230:	402e8000 	.word	0x402e8000

08004234 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 8004240:	edd7 7a00 	vldr	s15, [r7]
 8004244:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004280 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x4c>
 8004248:	eef4 7ac7 	vcmpe.f32	s15, s14
 800424c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004250:	d80f      	bhi.n	8004272 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 8004252:	ed97 7a00 	vldr	s14, [r7]
 8004256:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8004284 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x50>
 800425a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800425e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004262:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004266:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800426a:	ee17 3a90 	vmov	r3, s15
 800426e:	b29b      	uxth	r3, r3
 8004270:	e000      	b.n	8004274 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x40>
  else
    return 0;   // Warning
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	4673e180 	.word	0x4673e180
 8004284:	41740000 	.word	0x41740000

08004288 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	460b      	mov	r3, r1
 8004292:	807b      	strh	r3, [r7, #2]
{
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 8004294:	887b      	ldrh	r3, [r7, #2]
 8004296:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800429a:	d209      	bcs.n	80042b0 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 800429c:	887b      	ldrh	r3, [r7, #2]
 800429e:	ee07 3a90 	vmov	s15, r3
 80042a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042a6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80042c4 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x3c>
 80042aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042ae:	e001      	b.n	80042b4 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 80042b0:	eddf 7a05 	vldr	s15, [pc, #20]	; 80042c8 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 80042b4:	eeb0 0a67 	vmov.f32	s0, s15
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	3d7423f4 	.word	0x3d7423f4
 80042c8:	00000000 	.word	0x00000000

080042cc <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 80042d8:	edd7 7a00 	vldr	s15, [r7]
 80042dc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004310 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x44>
 80042e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e8:	d80b      	bhi.n	8004302 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 80042ea:	ed97 7a00 	vldr	s14, [r7]
 80042ee:	eddf 6a09 	vldr	s13, [pc, #36]	; 8004314 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x48>
 80042f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042fa:	ee17 3a90 	vmov	r3, s15
 80042fe:	b29b      	uxth	r3, r3
 8004300:	e000      	b.n	8004304 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x38>
  else
    return 0;   // Warning
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	44742023 	.word	0x44742023
 8004314:	3d7423f4 	.word	0x3d7423f4

08004318 <_ZN5L6470I8shield_3E20L6470_StSlp_2_s_StepEh>:
  * 
  * @param  StartSlope  The ST_SLP register value.
  * @retval s/step      The start slope as s/step.
  */
template <class shield_x>
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	70fb      	strb	r3, [r7, #3]
{
//  if (StSlp <= L6470_MAX_ST_SLP)
    return (StSlp * ((float)1.5686e-5));
 8004324:	78fb      	ldrb	r3, [r7, #3]
 8004326:	ee07 3a90 	vmov	s15, r3
 800432a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800432e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004344 <_ZN5L6470I8shield_3E20L6470_StSlp_2_s_StepEh+0x2c>
 8004332:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 8004336:	eeb0 0a67 	vmov.f32	s0, s15
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	3783956e 	.word	0x3783956e

08004348 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 8004354:	edd7 7a02 	vldr	s15, [r7, #8]
 8004358:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004390 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x48>
 800435c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004364:	d80c      	bhi.n	8004380 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8004366:	ed97 7a02 	vldr	s14, [r7, #8]
 800436a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8004394 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x4c>
 800436e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004372:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004376:	edc7 7a01 	vstr	s15, [r7, #4]
 800437a:	793b      	ldrb	r3, [r7, #4]
 800437c:	b2db      	uxtb	r3, r3
 800437e:	e000      	b.n	8004382 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x3a>
  else
    return 0;   // Warning
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	3b8311d9 	.word	0x3b8311d9
 8004394:	3783956e 	.word	0x3783956e

08004398 <_ZN5L6470I8shield_3E23L6470_FnSlpAcc_2_s_StepEh>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	460b      	mov	r3, r1
 80043a2:	70fb      	strb	r3, [r7, #3]
{
//  if (FnSlpAcc <= L6470_MAX_FN_SLP_ACC)
    return (FnSlpAcc * ((float)1.5686e-5));
 80043a4:	78fb      	ldrb	r3, [r7, #3]
 80043a6:	ee07 3a90 	vmov	s15, r3
 80043aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043ae:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80043c4 <_ZN5L6470I8shield_3E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 80043b2:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 80043b6:	eeb0 0a67 	vmov.f32	s0, s15
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr
 80043c4:	3783956e 	.word	0x3783956e

080043c8 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 80043d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80043d8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004410 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x48>
 80043dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e4:	d80c      	bhi.n	8004400 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 80043e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80043ea:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8004414 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 80043ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043f6:	edc7 7a01 	vstr	s15, [r7, #4]
 80043fa:	793b      	ldrb	r3, [r7, #4]
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	e000      	b.n	8004402 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x3a>
  else
    return 0;   // Warning
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	3b8311d9 	.word	0x3b8311d9
 8004414:	3783956e 	.word	0x3783956e

08004418 <_ZN5L6470I8shield_3E23L6470_FnSlpDec_2_s_StepEh>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	460b      	mov	r3, r1
 8004422:	70fb      	strb	r3, [r7, #3]
{
//  if (FnSlpDec <= L6470_MAX_FN_SLP_DEC)
    return (FnSlpDec * ((float)1.5686e-5));
 8004424:	78fb      	ldrb	r3, [r7, #3]
 8004426:	ee07 3a90 	vmov	s15, r3
 800442a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800442e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004444 <_ZN5L6470I8shield_3E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 8004432:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 8004436:	eeb0 0a67 	vmov.f32	s0, s15
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr
 8004444:	3783956e 	.word	0x3783956e

08004448 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 8004454:	edd7 7a02 	vldr	s15, [r7, #8]
 8004458:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004490 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x48>
 800445c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004464:	d80c      	bhi.n	8004480 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8004466:	ed97 7a02 	vldr	s14, [r7, #8]
 800446a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8004494 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 800446e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004476:	edc7 7a01 	vstr	s15, [r7, #4]
 800447a:	793b      	ldrb	r3, [r7, #4]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	e000      	b.n	8004482 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x3a>
  else
    return 0;   // Warning
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	3b8311d9 	.word	0x3b8311d9
 8004494:	3783956e 	.word	0x3783956e

08004498 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh>:
  * 
  * @param  OcdTh       The OCD_TH register value.
  * @retval mA          The overcurrent threshold as mA.
  */
template <class shield_x>
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	460b      	mov	r3, r1
 80044a2:	70fb      	strb	r3, [r7, #3]
{
  if (OcdTh <= L6470_MAX_OCD_TH)
 80044a4:	78fb      	ldrb	r3, [r7, #3]
 80044a6:	2b0f      	cmp	r3, #15
 80044a8:	d80a      	bhi.n	80044c0 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 80044aa:	78fb      	ldrb	r3, [r7, #3]
 80044ac:	3301      	adds	r3, #1
 80044ae:	ee07 3a90 	vmov	s15, r3
 80044b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044b6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80044d4 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x3c>
 80044ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044be:	e001      	b.n	80044c4 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x2c>
  else
    return 0;   // Warning
 80044c0:	eddf 7a05 	vldr	s15, [pc, #20]	; 80044d8 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x40>
}
 80044c4:	eeb0 0a67 	vmov.f32	s0, s15
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	43bb8000 	.word	0x43bb8000
 80044d8:	00000000 	.word	0x00000000

080044dc <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf>:
  * 
  * @param  mA          The overcurrent threshold as mA.
  * @retval OcdTh       The OCD_TH register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 80044dc:	b480      	push	{r7}
 80044de:	b087      	sub	sp, #28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	ed87 0a02 	vstr	s0, [r7, #8]
{
  float result, decimal;
  
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 80044e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80044ec:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004578 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x9c>
 80044f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044f8:	d836      	bhi.n	8004568 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8c>
  {
    result = (mA / ((float)375));
 80044fa:	ed97 7a02 	vldr	s14, [r7, #8]
 80044fe:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800457c <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0xa0>
 8004502:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004506:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800450a:	edd7 7a05 	vldr	s15, [r7, #20]
 800450e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004512:	edc7 7a01 	vstr	s15, [r7, #4]
 8004516:	793b      	ldrb	r3, [r7, #4]
 8004518:	b2db      	uxtb	r3, r3
 800451a:	ee07 3a90 	vmov	s15, r3
 800451e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004522:	ed97 7a05 	vldr	s14, [r7, #20]
 8004526:	ee77 7a67 	vsub.f32	s15, s14, s15
 800452a:	edc7 7a04 	vstr	s15, [r7, #16]
    
    if (decimal < (float)0.5)
 800452e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004532:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004536:	eef4 7ac7 	vcmpe.f32	s15, s14
 800453a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800453e:	d50a      	bpl.n	8004556 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 8004540:	edd7 7a05 	vldr	s15, [r7, #20]
 8004544:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004548:	edc7 7a01 	vstr	s15, [r7, #4]
 800454c:	793b      	ldrb	r3, [r7, #4]
 800454e:	b2db      	uxtb	r3, r3
 8004550:	3b01      	subs	r3, #1
 8004552:	b2db      	uxtb	r3, r3
 8004554:	e009      	b.n	800456a <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8e>
    else
      return ((uint8_t)result);    
 8004556:	edd7 7a05 	vldr	s15, [r7, #20]
 800455a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800455e:	edc7 7a01 	vstr	s15, [r7, #4]
 8004562:	793b      	ldrb	r3, [r7, #4]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	e000      	b.n	800456a <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8e>
  }
  else
    return 0;   // Warning
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	371c      	adds	r7, #28
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	45bb8000 	.word	0x45bb8000
 800457c:	43bb8000 	.word	0x43bb8000

08004580 <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh>:
  * 
  * @param  StallTh     The STALL_TH register value.
  * @retval mA          The stall detection threshold as mA.
  */
template <class shield_x>
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	460b      	mov	r3, r1
 800458a:	70fb      	strb	r3, [r7, #3]
{
  if (StallTh <= L6470_MAX_STALL_TH)
 800458c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004590:	2b00      	cmp	r3, #0
 8004592:	db0a      	blt.n	80045aa <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 8004594:	78fb      	ldrb	r3, [r7, #3]
 8004596:	3301      	adds	r3, #1
 8004598:	ee07 3a90 	vmov	s15, r3
 800459c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045a0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80045bc <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x3c>
 80045a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045a8:	e001      	b.n	80045ae <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x2e>
  else
    return 0;   // Warning
 80045aa:	eddf 7a05 	vldr	s15, [pc, #20]	; 80045c0 <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x40>
}
 80045ae:	eeb0 0a67 	vmov.f32	s0, s15
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	41fa0000 	.word	0x41fa0000
 80045c0:	00000000 	.word	0x00000000

080045c4 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf>:
  * 
  * @param  mA          The stall detection threshold as mA.
  * @retval StallTh     The STALL_TH register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 80045c4:	b480      	push	{r7}
 80045c6:	b087      	sub	sp, #28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	ed87 0a02 	vstr	s0, [r7, #8]
{
  float result, decimal;
  
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 80045d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80045d4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004660 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x9c>
 80045d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045e0:	d836      	bhi.n	8004650 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8c>
  {
    result = (mA / ((float)31.25));
 80045e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80045e6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8004664 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0xa0>
 80045ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045ee:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 80045f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80045f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045fa:	edc7 7a01 	vstr	s15, [r7, #4]
 80045fe:	793b      	ldrb	r3, [r7, #4]
 8004600:	b2db      	uxtb	r3, r3
 8004602:	ee07 3a90 	vmov	s15, r3
 8004606:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800460a:	ed97 7a05 	vldr	s14, [r7, #20]
 800460e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004612:	edc7 7a04 	vstr	s15, [r7, #16]
    
    if (decimal < (float)0.5)
 8004616:	edd7 7a04 	vldr	s15, [r7, #16]
 800461a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800461e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004626:	d50a      	bpl.n	800463e <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 8004628:	edd7 7a05 	vldr	s15, [r7, #20]
 800462c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004630:	edc7 7a01 	vstr	s15, [r7, #4]
 8004634:	793b      	ldrb	r3, [r7, #4]
 8004636:	b2db      	uxtb	r3, r3
 8004638:	3b01      	subs	r3, #1
 800463a:	b2db      	uxtb	r3, r3
 800463c:	e009      	b.n	8004652 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8e>
    else
      return ((uint8_t)result);    
 800463e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004646:	edc7 7a01 	vstr	s15, [r7, #4]
 800464a:	793b      	ldrb	r3, [r7, #4]
 800464c:	b2db      	uxtb	r3, r3
 800464e:	e000      	b.n	8004652 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8e>
  }
  else
    return 0;   // Warning
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	371c      	adds	r7, #28
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	457a0000 	.word	0x457a0000
 8004664:	41fa0000 	.word	0x41fa0000

08004668 <_ZN5L6470I8shield_3E12L6470_ConfigEPv>:
/**
  * @brief  Configures the L6470 registers.
  * @param  init The pointer to the initialization structure.
  */
template <class shield_x>
status_t L6470<shield_x>::L6470_Config(void *init)
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
{
  /* Reset devices. */
  reset_device();
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	3394      	adds	r3, #148	; 0x94
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	4798      	blx	r3

  /* Reset Status Register flags. */
  get_status();
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	330c      	adds	r3, #12
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	4798      	blx	r3

  /* Prepare the 'Register' field of StepperMotorDriverHandle */
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	edd2 7a05 	vldr	s15, [r2, #20]
 800469e:	eeb0 0a67 	vmov.f32	s0, s15
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	4798      	blx	r3
 80046a6:	4603      	mov	r3, r0
 80046a8:	461a      	mov	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	edd2 7a06 	vldr	s15, [r2, #24]
 80046c0:	eeb0 0a67 	vmov.f32	s0, s15
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	4798      	blx	r3
 80046c8:	4603      	mov	r3, r0
 80046ca:	461a      	mov	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	edd2 7a07 	vldr	s15, [r2, #28]
 80046e2:	eeb0 0a67 	vmov.f32	s0, s15
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	4798      	blx	r3
 80046ea:	4603      	mov	r3, r0
 80046ec:	461a      	mov	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	edd2 7a08 	vldr	s15, [r2, #32]
 8004704:	eeb0 0a67 	vmov.f32	s0, s15
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	4798      	blx	r3
 800470c:	4603      	mov	r3, r0
 800470e:	461a      	mov	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8004726:	eeb0 0a67 	vmov.f32	s0, s15
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	4798      	blx	r3
 800472e:	4603      	mov	r3, r0
 8004730:	461a      	mov	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800473e:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8004a10 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 8004742:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	ed93 7a00 	vldr	s14, [r3]
 800474c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004750:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004754:	edc7 7a01 	vstr	s15, [r7, #4]
 8004758:	793b      	ldrb	r3, [r7, #4]
 800475a:	b2da      	uxtb	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004768:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8004a10 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 800476c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	ed93 7a00 	vldr	s14, [r3]
 8004776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800477a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800477e:	edc7 7a01 	vstr	s15, [r7, #4]
 8004782:	793b      	ldrb	r3, [r7, #4]
 8004784:	b2da      	uxtb	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004792:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8004a10 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 8004796:	ee67 6a87 	vmul.f32	s13, s15, s14
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	ed93 7a00 	vldr	s14, [r3]
 80047a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047a8:	edc7 7a01 	vstr	s15, [r7, #4]
 80047ac:	793b      	ldrb	r3, [r7, #4]
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80047bc:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8004a10 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 80047c0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	ed93 7a00 	vldr	s14, [r3]
 80047ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047d2:	edc7 7a01 	vstr	s15, [r7, #4]
 80047d6:	793b      	ldrb	r3, [r7, #4]
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80047f0:	eeb0 0a67 	vmov.f32	s0, s15
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	4798      	blx	r3
 80047f8:	4603      	mov	r3, r0
 80047fa:	461a      	mov	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	edd2 7a0f 	vldr	s15, [r2, #60]	; 0x3c
 8004812:	eeb0 0a67 	vmov.f32	s0, s15
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	4798      	blx	r3
 800481a:	4603      	mov	r3, r0
 800481c:	461a      	mov	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	edd2 7a10 	vldr	s15, [r2, #64]	; 0x40
 8004834:	eeb0 0a67 	vmov.f32	s0, s15
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	4798      	blx	r3
 800483c:	4603      	mov	r3, r0
 800483e:	461a      	mov	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 8004856:	eeb0 0a67 	vmov.f32	s0, s15
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	4798      	blx	r3
 800485e:	4603      	mov	r3, r0
 8004860:	461a      	mov	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	edd2 7a13 	vldr	s15, [r2, #76]	; 0x4c
 8004884:	eeb0 0a67 	vmov.f32	s0, s15
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	4798      	blx	r3
 800488c:	4603      	mov	r3, r0
 800488e:	461a      	mov	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	edd2 7a14 	vldr	s15, [r2, #80]	; 0x50
 80048a6:	eeb0 0a67 	vmov.f32	s0, s15
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	4798      	blx	r3
 80048ae:	4603      	mov	r3, r0
 80048b0:	461a      	mov	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f

  /* Write the L6470 registers with the prepared data */
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 80048ec:	2104      	movs	r1, #4
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
 8004902:	2105      	movs	r1, #5
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 8004918:	2106      	movs	r1, #6
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	f8b2 204e 	ldrh.w	r2, [r2, #78]	; 0x4e
 800492e:	2107      	movs	r1, #7
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8004944:	2108      	movs	r1, #8
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800495a:	2109      	movs	r1, #9
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	f892 2053 	ldrb.w	r2, [r2, #83]	; 0x53
 8004970:	210a      	movs	r1, #10
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8004986:	210b      	movs	r1, #11
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800499c:	210c      	movs	r1, #12
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	f8b2 2056 	ldrh.w	r2, [r2, #86]	; 0x56
 80049b2:	210d      	movs	r1, #13
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	f892 2058 	ldrb.w	r2, [r2, #88]	; 0x58
 80049c8:	210e      	movs	r1, #14
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	f892 2059 	ldrb.w	r2, [r2, #89]	; 0x59
 80049de:	210f      	movs	r1, #15
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	f892 205a 	ldrb.w	r2, [r2, #90]	; 0x5a
 80049f4:	2110      	movs	r1, #16
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	f892 205b 	ldrb.w	r2, [r2, #91]	; 0x5b
 8004a0a:	2111      	movs	r1, #17
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	e001      	b.n	8004a14 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3ac>
 8004a10:	43800000 	.word	0x43800000
 8004a14:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	f892 205d 	ldrb.w	r2, [r2, #93]	; 0x5d
 8004a26:	2113      	movs	r1, #19
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	f892 205e 	ldrb.w	r2, [r2, #94]	; 0x5e
 8004a3c:	2114      	movs	r1, #20
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004a52:	2116      	movs	r1, #22
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	f8b2 2062 	ldrh.w	r2, [r2, #98]	; 0x62
 8004a68:	2117      	movs	r1, #23
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	3354      	adds	r3, #84	; 0x54
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	f892 205f 	ldrb.w	r2, [r2, #95]	; 0x5f
 8004a7c:	4611      	mov	r1, r2
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	4798      	blx	r3
 8004a82:	4603      	mov	r3, r0
 8004a84:	f083 0301 	eor.w	r3, r3, #1
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e000      	b.n	8004a94 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x42c>
  
  return COMPONENT_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 8004a9c:	b590      	push	{r4, r7, lr}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af02      	add	r7, sp, #8
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	607a      	str	r2, [r7, #4]
 8004aa8:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004ab2:	681c      	ldr	r4, [r3, #0]
 8004ab4:	7afa      	ldrb	r2, [r7, #11]
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	9301      	str	r3, [sp, #4]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	490c      	ldr	r1, [pc, #48]	; (8004af4 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a09      	ldr	r2, [pc, #36]	; (8004af8 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8004ad4:	4907      	ldr	r1, [pc, #28]	; (8004af4 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a05      	ldr	r2, [pc, #20]	; (8004afc <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 8004ae6:	4904      	ldr	r1, [pc, #16]	; (8004af8 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	4798      	blx	r3
}
 8004aec:	bf00      	nop
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd90      	pop	{r4, r7, pc}
 8004af4:	20000274 	.word	0x20000274
 8004af8:	20000294 	.word	0x20000294
 8004afc:	2000029c 	.word	0x2000029c

08004b00 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 8004b00:	b590      	push	{r4, r7, lr}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af02      	add	r7, sp, #8
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	460b      	mov	r3, r1
 8004b0a:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004b14:	681c      	ldr	r4, [r3, #0]
 8004b16:	78fb      	ldrb	r3, [r7, #3]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	9201      	str	r2, [sp, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	9200      	str	r2, [sp, #0]
 8004b20:	2202      	movs	r2, #2
 8004b22:	4917      	ldr	r1, [pc, #92]	; (8004b80 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a14      	ldr	r2, [pc, #80]	; (8004b84 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8004b34:	4912      	ldr	r1, [pc, #72]	; (8004b80 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a10      	ldr	r2, [pc, #64]	; (8004b88 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8004b46:	490f      	ldr	r1, [pc, #60]	; (8004b84 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a19      	ldr	r1, [r3, #32]
 8004b50:	78fa      	ldrb	r2, [r7, #3]
 8004b52:	4613      	mov	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	440b      	add	r3, r1
 8004b5c:	7b9b      	ldrb	r3, [r3, #14]
 8004b5e:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	7bfa      	ldrb	r2, [r7, #15]
 8004b6c:	4906      	ldr	r1, [pc, #24]	; (8004b88 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	4798      	blx	r3
 8004b72:	4603      	mov	r3, r0
 8004b74:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 8004b76:	68bb      	ldr	r3, [r7, #8]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd90      	pop	{r4, r7, pc}
 8004b80:	20000274 	.word	0x20000274
 8004b84:	20000294 	.word	0x20000294
 8004b88:	2000029c 	.word	0x2000029c

08004b8c <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8004b8c:	b590      	push	{r4, r7, lr}
 8004b8e:	b087      	sub	sp, #28
 8004b90:	af02      	add	r7, sp, #8
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	460b      	mov	r3, r1
 8004b96:	607a      	str	r2, [r7, #4]
 8004b98:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004ba2:	681c      	ldr	r4, [r3, #0]
 8004ba4:	7afa      	ldrb	r2, [r7, #11]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	9301      	str	r3, [sp, #4]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	2203      	movs	r2, #3
 8004bb2:	490c      	ldr	r1, [pc, #48]	; (8004be4 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a09      	ldr	r2, [pc, #36]	; (8004be8 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8004bc4:	4907      	ldr	r1, [pc, #28]	; (8004be4 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a05      	ldr	r2, [pc, #20]	; (8004bec <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x60>)
 8004bd6:	4904      	ldr	r1, [pc, #16]	; (8004be8 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	4798      	blx	r3
}
 8004bdc:	bf00      	nop
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd90      	pop	{r4, r7, pc}
 8004be4:	20000274 	.word	0x20000274
 8004be8:	20000294 	.word	0x20000294
 8004bec:	2000029c 	.word	0x2000029c

08004bf0 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 8004bf0:	b590      	push	{r4, r7, lr}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af02      	add	r7, sp, #8
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004c04:	681c      	ldr	r4, [r3, #0]
 8004c06:	78fb      	ldrb	r3, [r7, #3]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	9201      	str	r2, [sp, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	9200      	str	r2, [sp, #0]
 8004c10:	2204      	movs	r2, #4
 8004c12:	490c      	ldr	r1, [pc, #48]	; (8004c44 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a09      	ldr	r2, [pc, #36]	; (8004c48 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8004c24:	4907      	ldr	r1, [pc, #28]	; (8004c44 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a05      	ldr	r2, [pc, #20]	; (8004c4c <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 8004c36:	4904      	ldr	r1, [pc, #16]	; (8004c48 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	4798      	blx	r3
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd90      	pop	{r4, r7, pc}
 8004c44:	20000274 	.word	0x20000274
 8004c48:	20000294 	.word	0x20000294
 8004c4c:	2000029c 	.word	0x2000029c

08004c50 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8004c50:	b590      	push	{r4, r7, lr}
 8004c52:	b087      	sub	sp, #28
 8004c54:	af02      	add	r7, sp, #8
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	460b      	mov	r3, r1
 8004c5a:	607a      	str	r2, [r7, #4]
 8004c5c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004c66:	681c      	ldr	r4, [r3, #0]
 8004c68:	7afa      	ldrb	r2, [r7, #11]
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	9301      	str	r3, [sp, #4]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	4613      	mov	r3, r2
 8004c74:	2205      	movs	r2, #5
 8004c76:	490c      	ldr	r1, [pc, #48]	; (8004ca8 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a09      	ldr	r2, [pc, #36]	; (8004cac <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8004c88:	4907      	ldr	r1, [pc, #28]	; (8004ca8 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a05      	ldr	r2, [pc, #20]	; (8004cb0 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 8004c9a:	4904      	ldr	r1, [pc, #16]	; (8004cac <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	4798      	blx	r3
}
 8004ca0:	bf00      	nop
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd90      	pop	{r4, r7, pc}
 8004ca8:	20000274 	.word	0x20000274
 8004cac:	20000294 	.word	0x20000294
 8004cb0:	2000029c 	.word	0x2000029c

08004cb4 <_ZN5L6470I8shield_3E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 8004cb4:	b590      	push	{r4, r7, lr}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af02      	add	r7, sp, #8
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cc4:	d21f      	bcs.n	8004d06 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004cce:	681c      	ldr	r4, [r3, #0]
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	9301      	str	r3, [sp, #4]
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	2206      	movs	r2, #6
 8004cdc:	490c      	ldr	r1, [pc, #48]	; (8004d10 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x5c>)
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a09      	ldr	r2, [pc, #36]	; (8004d14 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x60>)
 8004cee:	4908      	ldr	r1, [pc, #32]	; (8004d10 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x5c>)
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a06      	ldr	r2, [pc, #24]	; (8004d18 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x64>)
 8004d00:	4904      	ldr	r1, [pc, #16]	; (8004d14 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x60>)
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	4798      	blx	r3
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd90      	pop	{r4, r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	20000274 	.word	0x20000274
 8004d14:	20000294 	.word	0x20000294
 8004d18:	2000029c 	.word	0x2000029c

08004d1c <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 8004d1c:	b590      	push	{r4, r7, lr}
 8004d1e:	b087      	sub	sp, #28
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	460b      	mov	r3, r1
 8004d26:	607a      	str	r2, [r7, #4]
 8004d28:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d30:	d220      	bcs.n	8004d74 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004d3a:	681c      	ldr	r4, [r3, #0]
 8004d3c:	7afa      	ldrb	r2, [r7, #11]
 8004d3e:	2300      	movs	r3, #0
 8004d40:	9301      	str	r3, [sp, #4]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	4613      	mov	r3, r2
 8004d48:	2207      	movs	r2, #7
 8004d4a:	490c      	ldr	r1, [pc, #48]	; (8004d7c <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a09      	ldr	r2, [pc, #36]	; (8004d80 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8004d5c:	4907      	ldr	r1, [pc, #28]	; (8004d7c <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a05      	ldr	r2, [pc, #20]	; (8004d84 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 8004d6e:	4904      	ldr	r1, [pc, #16]	; (8004d80 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	4798      	blx	r3
}
 8004d74:	bf00      	nop
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd90      	pop	{r4, r7, pc}
 8004d7c:	20000274 	.word	0x20000274
 8004d80:	20000294 	.word	0x20000294
 8004d84:	2000029c 	.word	0x2000029c

08004d88 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8004d88:	b590      	push	{r4, r7, lr}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af02      	add	r7, sp, #8
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	607b      	str	r3, [r7, #4]
 8004d92:	460b      	mov	r3, r1
 8004d94:	72fb      	strb	r3, [r7, #11]
 8004d96:	4613      	mov	r3, r2
 8004d98:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004da2:	681c      	ldr	r4, [r3, #0]
 8004da4:	7af9      	ldrb	r1, [r7, #11]
 8004da6:	7abb      	ldrb	r3, [r7, #10]
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	9201      	str	r2, [sp, #4]
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	460b      	mov	r3, r1
 8004db0:	2208      	movs	r2, #8
 8004db2:	490c      	ldr	r1, [pc, #48]	; (8004de4 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a09      	ldr	r2, [pc, #36]	; (8004de8 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8004dc4:	4907      	ldr	r1, [pc, #28]	; (8004de4 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a05      	ldr	r2, [pc, #20]	; (8004dec <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 8004dd6:	4904      	ldr	r1, [pc, #16]	; (8004de8 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	4798      	blx	r3
}
 8004ddc:	bf00      	nop
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd90      	pop	{r4, r7, pc}
 8004de4:	20000274 	.word	0x20000274
 8004de8:	20000294 	.word	0x20000294
 8004dec:	2000029c 	.word	0x2000029c

08004df0 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8004df0:	b590      	push	{r4, r7, lr}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af02      	add	r7, sp, #8
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	70fb      	strb	r3, [r7, #3]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004e08:	681c      	ldr	r4, [r3, #0]
 8004e0a:	78fa      	ldrb	r2, [r7, #3]
 8004e0c:	78bb      	ldrb	r3, [r7, #2]
 8004e0e:	2100      	movs	r1, #0
 8004e10:	9101      	str	r1, [sp, #4]
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	4613      	mov	r3, r2
 8004e16:	2209      	movs	r2, #9
 8004e18:	490c      	ldr	r1, [pc, #48]	; (8004e4c <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a09      	ldr	r2, [pc, #36]	; (8004e50 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8004e2a:	4908      	ldr	r1, [pc, #32]	; (8004e4c <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a06      	ldr	r2, [pc, #24]	; (8004e54 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 8004e3c:	4904      	ldr	r1, [pc, #16]	; (8004e50 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	4798      	blx	r3
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd90      	pop	{r4, r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	20000274 	.word	0x20000274
 8004e50:	20000294 	.word	0x20000294
 8004e54:	2000029c 	.word	0x2000029c

08004e58 <_ZN5L6470I8shield_3E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 8004e58:	b590      	push	{r4, r7, lr}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af02      	add	r7, sp, #8
 8004e5e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004e68:	681c      	ldr	r4, [r3, #0]
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	9301      	str	r3, [sp, #4]
 8004e6e:	2300      	movs	r3, #0
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	2300      	movs	r3, #0
 8004e74:	220a      	movs	r2, #10
 8004e76:	490c      	ldr	r1, [pc, #48]	; (8004ea8 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x50>)
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a09      	ldr	r2, [pc, #36]	; (8004eac <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x54>)
 8004e88:	4907      	ldr	r1, [pc, #28]	; (8004ea8 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x50>)
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a05      	ldr	r2, [pc, #20]	; (8004eb0 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x58>)
 8004e9a:	4904      	ldr	r1, [pc, #16]	; (8004eac <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x54>)
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	4798      	blx	r3
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd90      	pop	{r4, r7, pc}
 8004ea8:	20000274 	.word	0x20000274
 8004eac:	20000294 	.word	0x20000294
 8004eb0:	2000029c 	.word	0x2000029c

08004eb4 <_ZN5L6470I8shield_3E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 8004eb4:	b590      	push	{r4, r7, lr}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af02      	add	r7, sp, #8
 8004eba:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004ec4:	681c      	ldr	r4, [r3, #0]
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	9301      	str	r3, [sp, #4]
 8004eca:	2300      	movs	r3, #0
 8004ecc:	9300      	str	r3, [sp, #0]
 8004ece:	2300      	movs	r3, #0
 8004ed0:	220b      	movs	r2, #11
 8004ed2:	490c      	ldr	r1, [pc, #48]	; (8004f04 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x50>)
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a09      	ldr	r2, [pc, #36]	; (8004f08 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x54>)
 8004ee4:	4907      	ldr	r1, [pc, #28]	; (8004f04 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x50>)
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a05      	ldr	r2, [pc, #20]	; (8004f0c <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x58>)
 8004ef6:	4904      	ldr	r1, [pc, #16]	; (8004f08 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x54>)
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	4798      	blx	r3
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd90      	pop	{r4, r7, pc}
 8004f04:	20000274 	.word	0x20000274
 8004f08:	20000294 	.word	0x20000294
 8004f0c:	2000029c 	.word	0x2000029c

08004f10 <_ZN5L6470I8shield_3E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 8004f10:	b590      	push	{r4, r7, lr}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af02      	add	r7, sp, #8
 8004f16:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004f20:	681c      	ldr	r4, [r3, #0]
 8004f22:	2300      	movs	r3, #0
 8004f24:	9301      	str	r3, [sp, #4]
 8004f26:	2300      	movs	r3, #0
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	220c      	movs	r2, #12
 8004f2e:	490c      	ldr	r1, [pc, #48]	; (8004f60 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x50>)
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a09      	ldr	r2, [pc, #36]	; (8004f64 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x54>)
 8004f40:	4907      	ldr	r1, [pc, #28]	; (8004f60 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x50>)
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a05      	ldr	r2, [pc, #20]	; (8004f68 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x58>)
 8004f52:	4904      	ldr	r1, [pc, #16]	; (8004f64 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x54>)
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	4798      	blx	r3
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd90      	pop	{r4, r7, pc}
 8004f60:	20000274 	.word	0x20000274
 8004f64:	20000294 	.word	0x20000294
 8004f68:	2000029c 	.word	0x2000029c

08004f6c <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 8004f6c:	b590      	push	{r4, r7, lr}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af02      	add	r7, sp, #8
 8004f72:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004f7c:	681c      	ldr	r4, [r3, #0]
 8004f7e:	2300      	movs	r3, #0
 8004f80:	9301      	str	r3, [sp, #4]
 8004f82:	2300      	movs	r3, #0
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	2300      	movs	r3, #0
 8004f88:	220d      	movs	r2, #13
 8004f8a:	490c      	ldr	r1, [pc, #48]	; (8004fbc <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x50>)
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a09      	ldr	r2, [pc, #36]	; (8004fc0 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x54>)
 8004f9c:	4907      	ldr	r1, [pc, #28]	; (8004fbc <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x50>)
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a05      	ldr	r2, [pc, #20]	; (8004fc4 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x58>)
 8004fae:	4904      	ldr	r1, [pc, #16]	; (8004fc0 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x54>)
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	4798      	blx	r3
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd90      	pop	{r4, r7, pc}
 8004fbc:	20000274 	.word	0x20000274
 8004fc0:	20000294 	.word	0x20000294
 8004fc4:	2000029c 	.word	0x2000029c

08004fc8 <_ZN5L6470I8shield_3E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 8004fc8:	b590      	push	{r4, r7, lr}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af02      	add	r7, sp, #8
 8004fce:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004fd8:	681c      	ldr	r4, [r3, #0]
 8004fda:	2300      	movs	r3, #0
 8004fdc:	9301      	str	r3, [sp, #4]
 8004fde:	2300      	movs	r3, #0
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	220e      	movs	r2, #14
 8004fe6:	490c      	ldr	r1, [pc, #48]	; (8005018 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x50>)
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a09      	ldr	r2, [pc, #36]	; (800501c <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x54>)
 8004ff8:	4907      	ldr	r1, [pc, #28]	; (8005018 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x50>)
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a05      	ldr	r2, [pc, #20]	; (8005020 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x58>)
 800500a:	4904      	ldr	r1, [pc, #16]	; (800501c <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x54>)
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	4798      	blx	r3
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	bd90      	pop	{r4, r7, pc}
 8005018:	20000274 	.word	0x20000274
 800501c:	20000294 	.word	0x20000294
 8005020:	2000029c 	.word	0x2000029c

08005024 <_ZN5L6470I8shield_3E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 8005024:	b590      	push	{r4, r7, lr}
 8005026:	b085      	sub	sp, #20
 8005028:	af02      	add	r7, sp, #8
 800502a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8005034:	681c      	ldr	r4, [r3, #0]
 8005036:	2300      	movs	r3, #0
 8005038:	9301      	str	r3, [sp, #4]
 800503a:	2300      	movs	r3, #0
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	2300      	movs	r3, #0
 8005040:	220f      	movs	r2, #15
 8005042:	490c      	ldr	r1, [pc, #48]	; (8005074 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x50>)
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a09      	ldr	r2, [pc, #36]	; (8005078 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x54>)
 8005054:	4907      	ldr	r1, [pc, #28]	; (8005074 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x50>)
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a05      	ldr	r2, [pc, #20]	; (800507c <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x58>)
 8005066:	4904      	ldr	r1, [pc, #16]	; (8005078 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x54>)
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	4798      	blx	r3
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	bd90      	pop	{r4, r7, pc}
 8005074:	20000274 	.word	0x20000274
 8005078:	20000294 	.word	0x20000294
 800507c:	2000029c 	.word	0x2000029c

08005080 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 8005080:	b590      	push	{r4, r7, lr}
 8005082:	b085      	sub	sp, #20
 8005084:	af02      	add	r7, sp, #8
 8005086:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8005090:	681c      	ldr	r4, [r3, #0]
 8005092:	2300      	movs	r3, #0
 8005094:	9301      	str	r3, [sp, #4]
 8005096:	2300      	movs	r3, #0
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	2300      	movs	r3, #0
 800509c:	2210      	movs	r2, #16
 800509e:	490c      	ldr	r1, [pc, #48]	; (80050d0 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x50>)
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a09      	ldr	r2, [pc, #36]	; (80050d4 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x54>)
 80050b0:	4907      	ldr	r1, [pc, #28]	; (80050d0 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x50>)
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a05      	ldr	r2, [pc, #20]	; (80050d8 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x58>)
 80050c2:	4904      	ldr	r1, [pc, #16]	; (80050d4 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x54>)
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	4798      	blx	r3
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd90      	pop	{r4, r7, pc}
 80050d0:	20000274 	.word	0x20000274
 80050d4:	20000294 	.word	0x20000294
 80050d8:	2000029c 	.word	0x2000029c

080050dc <_ZN5L6470I8shield_3E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 80050dc:	b590      	push	{r4, r7, lr}
 80050de:	b085      	sub	sp, #20
 80050e0:	af02      	add	r7, sp, #8
 80050e2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80050ec:	681c      	ldr	r4, [r3, #0]
 80050ee:	2300      	movs	r3, #0
 80050f0:	9301      	str	r3, [sp, #4]
 80050f2:	2300      	movs	r3, #0
 80050f4:	9300      	str	r3, [sp, #0]
 80050f6:	2300      	movs	r3, #0
 80050f8:	2211      	movs	r2, #17
 80050fa:	490c      	ldr	r1, [pc, #48]	; (800512c <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x50>)
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a09      	ldr	r2, [pc, #36]	; (8005130 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x54>)
 800510c:	4907      	ldr	r1, [pc, #28]	; (800512c <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x50>)
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a05      	ldr	r2, [pc, #20]	; (8005134 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x58>)
 800511e:	4904      	ldr	r1, [pc, #16]	; (8005130 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x54>)
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	4798      	blx	r3
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	bd90      	pop	{r4, r7, pc}
 800512c:	20000274 	.word	0x20000274
 8005130:	20000294 	.word	0x20000294
 8005134:	2000029c 	.word	0x2000029c

08005138 <_ZN5L6470I8shield_3E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 8005138:	b590      	push	{r4, r7, lr}
 800513a:	b087      	sub	sp, #28
 800513c:	af02      	add	r7, sp, #8
 800513e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8005148:	681c      	ldr	r4, [r3, #0]
 800514a:	2300      	movs	r3, #0
 800514c:	9301      	str	r3, [sp, #4]
 800514e:	2300      	movs	r3, #0
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	2300      	movs	r3, #0
 8005154:	2212      	movs	r2, #18
 8005156:	4912      	ldr	r1, [pc, #72]	; (80051a0 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x68>)
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a0f      	ldr	r2, [pc, #60]	; (80051a4 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x6c>)
 8005168:	490d      	ldr	r1, [pc, #52]	; (80051a0 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x68>)
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a0b      	ldr	r2, [pc, #44]	; (80051a8 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x70>)
 800517a:	490a      	ldr	r1, [pc, #40]	; (80051a4 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x6c>)
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2202      	movs	r2, #2
 800518c:	4906      	ldr	r1, [pc, #24]	; (80051a8 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x70>)
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	4798      	blx	r3
 8005192:	4603      	mov	r3, r0
 8005194:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 8005196:	89fb      	ldrh	r3, [r7, #14]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	bd90      	pop	{r4, r7, pc}
 80051a0:	20000274 	.word	0x20000274
 80051a4:	20000294 	.word	0x20000294
 80051a8:	2000029c 	.word	0x2000029c

080051ac <_ZN5L6470I8shield_3E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 80051ac:	b590      	push	{r4, r7, lr}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af02      	add	r7, sp, #8
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	460b      	mov	r3, r1
 80051b6:	607a      	str	r2, [r7, #4]
 80051b8:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80051c2:	681c      	ldr	r4, [r3, #0]
 80051c4:	7afa      	ldrb	r2, [r7, #11]
 80051c6:	2300      	movs	r3, #0
 80051c8:	9301      	str	r3, [sp, #4]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	4613      	mov	r3, r2
 80051d0:	2201      	movs	r2, #1
 80051d2:	4903      	ldr	r1, [pc, #12]	; (80051e0 <_ZN5L6470I8shield_3E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	47a0      	blx	r4
}
 80051d8:	bf00      	nop
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd90      	pop	{r4, r7, pc}
 80051e0:	20000274 	.word	0x20000274

080051e4 <_ZN5L6470I8shield_3E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 80051e4:	b590      	push	{r4, r7, lr}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af02      	add	r7, sp, #8
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	460b      	mov	r3, r1
 80051ee:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80051f8:	681c      	ldr	r4, [r3, #0]
 80051fa:	78fb      	ldrb	r3, [r7, #3]
 80051fc:	2200      	movs	r2, #0
 80051fe:	9201      	str	r2, [sp, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	9200      	str	r2, [sp, #0]
 8005204:	2202      	movs	r2, #2
 8005206:	4903      	ldr	r1, [pc, #12]	; (8005214 <_ZN5L6470I8shield_3E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	47a0      	blx	r4
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	bd90      	pop	{r4, r7, pc}
 8005214:	20000274 	.word	0x20000274

08005218 <_ZN5L6470I8shield_3E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8005218:	b590      	push	{r4, r7, lr}
 800521a:	b087      	sub	sp, #28
 800521c:	af02      	add	r7, sp, #8
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	460b      	mov	r3, r1
 8005222:	607a      	str	r2, [r7, #4]
 8005224:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800522e:	681c      	ldr	r4, [r3, #0]
 8005230:	7afa      	ldrb	r2, [r7, #11]
 8005232:	2300      	movs	r3, #0
 8005234:	9301      	str	r3, [sp, #4]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	9300      	str	r3, [sp, #0]
 800523a:	4613      	mov	r3, r2
 800523c:	2203      	movs	r2, #3
 800523e:	4903      	ldr	r1, [pc, #12]	; (800524c <_ZN5L6470I8shield_3E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	47a0      	blx	r4
}
 8005244:	bf00      	nop
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	bd90      	pop	{r4, r7, pc}
 800524c:	20000274 	.word	0x20000274

08005250 <_ZN5L6470I8shield_3E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 8005250:	b590      	push	{r4, r7, lr}
 8005252:	b085      	sub	sp, #20
 8005254:	af02      	add	r7, sp, #8
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	460b      	mov	r3, r1
 800525a:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8005264:	681c      	ldr	r4, [r3, #0]
 8005266:	78fb      	ldrb	r3, [r7, #3]
 8005268:	2200      	movs	r2, #0
 800526a:	9201      	str	r2, [sp, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	9200      	str	r2, [sp, #0]
 8005270:	2204      	movs	r2, #4
 8005272:	4903      	ldr	r1, [pc, #12]	; (8005280 <_ZN5L6470I8shield_3E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	47a0      	blx	r4
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	bd90      	pop	{r4, r7, pc}
 8005280:	20000274 	.word	0x20000274

08005284 <_ZN5L6470I8shield_3E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8005284:	b590      	push	{r4, r7, lr}
 8005286:	b087      	sub	sp, #28
 8005288:	af02      	add	r7, sp, #8
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	460b      	mov	r3, r1
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800529a:	681c      	ldr	r4, [r3, #0]
 800529c:	7afa      	ldrb	r2, [r7, #11]
 800529e:	2300      	movs	r3, #0
 80052a0:	9301      	str	r3, [sp, #4]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	4613      	mov	r3, r2
 80052a8:	2205      	movs	r2, #5
 80052aa:	4903      	ldr	r1, [pc, #12]	; (80052b8 <_ZN5L6470I8shield_3E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	47a0      	blx	r4
}
 80052b0:	bf00      	nop
 80052b2:	3714      	adds	r7, #20
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd90      	pop	{r4, r7, pc}
 80052b8:	20000274 	.word	0x20000274

080052bc <_ZN5L6470I8shield_3E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 80052bc:	b590      	push	{r4, r7, lr}
 80052be:	b085      	sub	sp, #20
 80052c0:	af02      	add	r7, sp, #8
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80052ce:	681c      	ldr	r4, [r3, #0]
 80052d0:	2300      	movs	r3, #0
 80052d2:	9301      	str	r3, [sp, #4]
 80052d4:	2300      	movs	r3, #0
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	2206      	movs	r2, #6
 80052dc:	4903      	ldr	r1, [pc, #12]	; (80052ec <_ZN5L6470I8shield_3E17L6470_PrepareGoToEm+0x30>)
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	47a0      	blx	r4
}
 80052e2:	bf00      	nop
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd90      	pop	{r4, r7, pc}
 80052ea:	bf00      	nop
 80052ec:	20000274 	.word	0x20000274

080052f0 <_ZN5L6470I8shield_3E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 80052f0:	b590      	push	{r4, r7, lr}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af02      	add	r7, sp, #8
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	460b      	mov	r3, r1
 80052fa:	607a      	str	r2, [r7, #4]
 80052fc:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8005306:	681c      	ldr	r4, [r3, #0]
 8005308:	7afa      	ldrb	r2, [r7, #11]
 800530a:	2300      	movs	r3, #0
 800530c:	9301      	str	r3, [sp, #4]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	4613      	mov	r3, r2
 8005314:	2207      	movs	r2, #7
 8005316:	4903      	ldr	r1, [pc, #12]	; (8005324 <_ZN5L6470I8shield_3E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	47a0      	blx	r4
}
 800531c:	bf00      	nop
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	bd90      	pop	{r4, r7, pc}
 8005324:	20000274 	.word	0x20000274

08005328 <_ZN5L6470I8shield_3E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8005328:	b590      	push	{r4, r7, lr}
 800532a:	b087      	sub	sp, #28
 800532c:	af02      	add	r7, sp, #8
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	607b      	str	r3, [r7, #4]
 8005332:	460b      	mov	r3, r1
 8005334:	72fb      	strb	r3, [r7, #11]
 8005336:	4613      	mov	r3, r2
 8005338:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8005342:	681c      	ldr	r4, [r3, #0]
 8005344:	7af9      	ldrb	r1, [r7, #11]
 8005346:	7abb      	ldrb	r3, [r7, #10]
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	9201      	str	r2, [sp, #4]
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	460b      	mov	r3, r1
 8005350:	2208      	movs	r2, #8
 8005352:	4903      	ldr	r1, [pc, #12]	; (8005360 <_ZN5L6470I8shield_3E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	47a0      	blx	r4
}
 8005358:	bf00      	nop
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	bd90      	pop	{r4, r7, pc}
 8005360:	20000274 	.word	0x20000274

08005364 <_ZN5L6470I8shield_3E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8005364:	b590      	push	{r4, r7, lr}
 8005366:	b085      	sub	sp, #20
 8005368:	af02      	add	r7, sp, #8
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	460b      	mov	r3, r1
 800536e:	70fb      	strb	r3, [r7, #3]
 8005370:	4613      	mov	r3, r2
 8005372:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800537c:	681c      	ldr	r4, [r3, #0]
 800537e:	78fa      	ldrb	r2, [r7, #3]
 8005380:	78bb      	ldrb	r3, [r7, #2]
 8005382:	2100      	movs	r1, #0
 8005384:	9101      	str	r1, [sp, #4]
 8005386:	9300      	str	r3, [sp, #0]
 8005388:	4613      	mov	r3, r2
 800538a:	2209      	movs	r2, #9
 800538c:	4903      	ldr	r1, [pc, #12]	; (800539c <_ZN5L6470I8shield_3E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	47a0      	blx	r4
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	bd90      	pop	{r4, r7, pc}
 800539a:	bf00      	nop
 800539c:	20000274 	.word	0x20000274

080053a0 <_ZN5L6470I8shield_3E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 80053a0:	b590      	push	{r4, r7, lr}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af02      	add	r7, sp, #8
 80053a6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80053b0:	681c      	ldr	r4, [r3, #0]
 80053b2:	2300      	movs	r3, #0
 80053b4:	9301      	str	r3, [sp, #4]
 80053b6:	2300      	movs	r3, #0
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	2300      	movs	r3, #0
 80053bc:	220a      	movs	r2, #10
 80053be:	4903      	ldr	r1, [pc, #12]	; (80053cc <_ZN5L6470I8shield_3E19L6470_PrepareGoHomeEv+0x2c>)
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	47a0      	blx	r4
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd90      	pop	{r4, r7, pc}
 80053cc:	20000274 	.word	0x20000274

080053d0 <_ZN5L6470I8shield_3E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 80053d0:	b590      	push	{r4, r7, lr}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af02      	add	r7, sp, #8
 80053d6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80053e0:	681c      	ldr	r4, [r3, #0]
 80053e2:	2300      	movs	r3, #0
 80053e4:	9301      	str	r3, [sp, #4]
 80053e6:	2300      	movs	r3, #0
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	2300      	movs	r3, #0
 80053ec:	220b      	movs	r2, #11
 80053ee:	4903      	ldr	r1, [pc, #12]	; (80053fc <_ZN5L6470I8shield_3E19L6470_PrepareGoMarkEv+0x2c>)
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	47a0      	blx	r4
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd90      	pop	{r4, r7, pc}
 80053fc:	20000274 	.word	0x20000274

08005400 <_ZN5L6470I8shield_3E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 8005400:	b590      	push	{r4, r7, lr}
 8005402:	b085      	sub	sp, #20
 8005404:	af02      	add	r7, sp, #8
 8005406:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8005410:	681c      	ldr	r4, [r3, #0]
 8005412:	2300      	movs	r3, #0
 8005414:	9301      	str	r3, [sp, #4]
 8005416:	2300      	movs	r3, #0
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	2300      	movs	r3, #0
 800541c:	220c      	movs	r2, #12
 800541e:	4903      	ldr	r1, [pc, #12]	; (800542c <_ZN5L6470I8shield_3E21L6470_PrepareResetPosEv+0x2c>)
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	47a0      	blx	r4
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	bd90      	pop	{r4, r7, pc}
 800542c:	20000274 	.word	0x20000274

08005430 <_ZN5L6470I8shield_3E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 8005430:	b590      	push	{r4, r7, lr}
 8005432:	b085      	sub	sp, #20
 8005434:	af02      	add	r7, sp, #8
 8005436:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8005440:	681c      	ldr	r4, [r3, #0]
 8005442:	2300      	movs	r3, #0
 8005444:	9301      	str	r3, [sp, #4]
 8005446:	2300      	movs	r3, #0
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	2300      	movs	r3, #0
 800544c:	220d      	movs	r2, #13
 800544e:	4903      	ldr	r1, [pc, #12]	; (800545c <_ZN5L6470I8shield_3E24L6470_PrepareResetDeviceEv+0x2c>)
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	47a0      	blx	r4
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	bd90      	pop	{r4, r7, pc}
 800545c:	20000274 	.word	0x20000274

08005460 <_ZN5L6470I8shield_3E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 8005460:	b590      	push	{r4, r7, lr}
 8005462:	b085      	sub	sp, #20
 8005464:	af02      	add	r7, sp, #8
 8005466:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8005470:	681c      	ldr	r4, [r3, #0]
 8005472:	2300      	movs	r3, #0
 8005474:	9301      	str	r3, [sp, #4]
 8005476:	2300      	movs	r3, #0
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	2300      	movs	r3, #0
 800547c:	220e      	movs	r2, #14
 800547e:	4903      	ldr	r1, [pc, #12]	; (800548c <_ZN5L6470I8shield_3E21L6470_PrepareSoftStopEv+0x2c>)
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	47a0      	blx	r4
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	bd90      	pop	{r4, r7, pc}
 800548c:	20000274 	.word	0x20000274

08005490 <_ZN5L6470I8shield_3E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 8005490:	b590      	push	{r4, r7, lr}
 8005492:	b085      	sub	sp, #20
 8005494:	af02      	add	r7, sp, #8
 8005496:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80054a0:	681c      	ldr	r4, [r3, #0]
 80054a2:	2300      	movs	r3, #0
 80054a4:	9301      	str	r3, [sp, #4]
 80054a6:	2300      	movs	r3, #0
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	2300      	movs	r3, #0
 80054ac:	220f      	movs	r2, #15
 80054ae:	4903      	ldr	r1, [pc, #12]	; (80054bc <_ZN5L6470I8shield_3E21L6470_PrepareHardStopEv+0x2c>)
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	47a0      	blx	r4
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd90      	pop	{r4, r7, pc}
 80054bc:	20000274 	.word	0x20000274

080054c0 <_ZN5L6470I8shield_3E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 80054c0:	b590      	push	{r4, r7, lr}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af02      	add	r7, sp, #8
 80054c6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80054d0:	681c      	ldr	r4, [r3, #0]
 80054d2:	2300      	movs	r3, #0
 80054d4:	9301      	str	r3, [sp, #4]
 80054d6:	2300      	movs	r3, #0
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	2300      	movs	r3, #0
 80054dc:	2210      	movs	r2, #16
 80054de:	4903      	ldr	r1, [pc, #12]	; (80054ec <_ZN5L6470I8shield_3E20L6470_PrepareSoftHiZEv+0x2c>)
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	47a0      	blx	r4
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd90      	pop	{r4, r7, pc}
 80054ec:	20000274 	.word	0x20000274

080054f0 <_ZN5L6470I8shield_3E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 80054f0:	b590      	push	{r4, r7, lr}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af02      	add	r7, sp, #8
 80054f6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8005500:	681c      	ldr	r4, [r3, #0]
 8005502:	2300      	movs	r3, #0
 8005504:	9301      	str	r3, [sp, #4]
 8005506:	2300      	movs	r3, #0
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	2300      	movs	r3, #0
 800550c:	2211      	movs	r2, #17
 800550e:	4903      	ldr	r1, [pc, #12]	; (800551c <_ZN5L6470I8shield_3E20L6470_PrepareHardHiZEv+0x2c>)
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	47a0      	blx	r4
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	bd90      	pop	{r4, r7, pc}
 800551c:	20000274 	.word	0x20000274

08005520 <_ZN5L6470I8shield_3E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 8005520:	b590      	push	{r4, r7, lr}
 8005522:	b085      	sub	sp, #20
 8005524:	af02      	add	r7, sp, #8
 8005526:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8005530:	681c      	ldr	r4, [r3, #0]
 8005532:	2300      	movs	r3, #0
 8005534:	9301      	str	r3, [sp, #4]
 8005536:	2300      	movs	r3, #0
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	2300      	movs	r3, #0
 800553c:	2212      	movs	r2, #18
 800553e:	4903      	ldr	r1, [pc, #12]	; (800554c <_ZN5L6470I8shield_3E22L6470_PrepareGetStatusEv+0x2c>)
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	47a0      	blx	r4
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	bd90      	pop	{r4, r7, pc}
 800554c:	20000274 	.word	0x20000274

08005550 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a09      	ldr	r2, [pc, #36]	; (8005588 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 8005564:	4909      	ldr	r1, [pc, #36]	; (800558c <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a06      	ldr	r2, [pc, #24]	; (8005590 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 8005576:	4904      	ldr	r1, [pc, #16]	; (8005588 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 800557c:	4b04      	ldr	r3, [pc, #16]	; (8005590 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 800557e:	4618      	mov	r0, r3
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	20000294 	.word	0x20000294
 800558c:	20000274 	.word	0x20000274
 8005590:	2000029c 	.word	0x2000029c

08005594 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 8005594:	b590      	push	{r4, r7, lr}
 8005596:	b089      	sub	sp, #36	; 0x24
 8005598:	af02      	add	r7, sp, #8
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 80055a0:	4b17      	ldr	r3, [pc, #92]	; (8005600 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 80055a6:	2300      	movs	r3, #0
 80055a8:	75fb      	strb	r3, [r7, #23]
 80055aa:	e020      	b.n	80055ee <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80055b4:	681c      	ldr	r4, [r3, #0]
 80055b6:	7dfb      	ldrb	r3, [r7, #23]
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	461a      	mov	r2, r3
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	1899      	adds	r1, r3, r2
 80055c0:	7dfb      	ldrb	r3, [r7, #23]
 80055c2:	005b      	lsls	r3, r3, #1
 80055c4:	461a      	mov	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	441a      	add	r2, r3
 80055ca:	230a      	movs	r3, #10
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	2302      	movs	r3, #2
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 80055d4:	2300      	movs	r3, #0
 80055d6:	75bb      	strb	r3, [r7, #22]
 80055d8:	e003      	b.n	80055e2 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x4e>
 80055da:	bf00      	nop
 80055dc:	7dbb      	ldrb	r3, [r7, #22]
 80055de:	3301      	adds	r3, #1
 80055e0:	75bb      	strb	r3, [r7, #22]
 80055e2:	7dbb      	ldrb	r3, [r7, #22]
 80055e4:	2b7c      	cmp	r3, #124	; 0x7c
 80055e6:	d9f8      	bls.n	80055da <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 80055e8:	7dfb      	ldrb	r3, [r7, #23]
 80055ea:	3301      	adds	r3, #1
 80055ec:	75fb      	strb	r3, [r7, #23]
 80055ee:	7dfb      	ldrb	r3, [r7, #23]
 80055f0:	2b03      	cmp	r3, #3
 80055f2:	d9db      	bls.n	80055ac <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 80055f4:	bf00      	nop
}
 80055f6:	bf00      	nop
 80055f8:	371c      	adds	r7, #28
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd90      	pop	{r4, r7, pc}
 80055fe:	bf00      	nop
 8005600:	20000271 	.word	0x20000271

08005604 <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 8005604:	b480      	push	{r7}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	4613      	mov	r3, r2
 8005610:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 8005612:	2300      	movs	r3, #0
 8005614:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8005616:	2301      	movs	r3, #1
 8005618:	74fb      	strb	r3, [r7, #19]
 800561a:	e016      	b.n	800564a <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 800561c:	7cfb      	ldrb	r3, [r7, #19]
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	461a      	mov	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	7f1b      	ldrb	r3, [r3, #28]
 8005626:	4413      	add	r3, r2
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	4413      	add	r3, r2
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	4619      	mov	r1, r3
 8005630:	79fa      	ldrb	r2, [r7, #7]
 8005632:	7cfb      	ldrb	r3, [r7, #19]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	fa01 f303 	lsl.w	r3, r1, r3
 800563c:	461a      	mov	r2, r3
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	4313      	orrs	r3, r2
 8005642:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8005644:	7cfb      	ldrb	r3, [r7, #19]
 8005646:	3301      	adds	r3, #1
 8005648:	74fb      	strb	r3, [r7, #19]
 800564a:	7cfb      	ldrb	r3, [r7, #19]
 800564c:	2b03      	cmp	r3, #3
 800564e:	d9e5      	bls.n	800561c <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 8005650:	697b      	ldr	r3, [r7, #20]
}
 8005652:	4618      	mov	r0, r3
 8005654:	371c      	adds	r7, #28
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
	...

08005660 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	460b      	mov	r3, r1
 800566a:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 800566c:	2300      	movs	r3, #0
 800566e:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2118      	movs	r1, #24
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	4798      	blx	r3
 8005680:	4602      	mov	r2, r0
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005686:	b292      	uxth	r2, r2
 8005688:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 800568a:	78fb      	ldrb	r3, [r7, #3]
 800568c:	2b0e      	cmp	r3, #14
 800568e:	f200 8099 	bhi.w	80057c4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
 8005692:	a201      	add	r2, pc, #4	; (adr r2, 8005698 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x38>)
 8005694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005698:	080056d5 	.word	0x080056d5
 800569c:	080056e5 	.word	0x080056e5
 80056a0:	080056f5 	.word	0x080056f5
 80056a4:	08005705 	.word	0x08005705
 80056a8:	08005715 	.word	0x08005715
 80056ac:	08005725 	.word	0x08005725
 80056b0:	08005735 	.word	0x08005735
 80056b4:	08005745 	.word	0x08005745
 80056b8:	08005755 	.word	0x08005755
 80056bc:	08005765 	.word	0x08005765
 80056c0:	08005775 	.word	0x08005775
 80056c4:	08005785 	.word	0x08005785
 80056c8:	08005795 	.word	0x08005795
 80056cc:	080057a5 	.word	0x080057a5
 80056d0:	080057b5 	.word	0x080057b5
      state = pL6470_StatusRegister->HiZ;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	73fb      	strb	r3, [r7, #15]
      break;
 80056e2:	e06f      	b.n	80057c4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	73fb      	strb	r3, [r7, #15]
      break;
 80056f2:	e067      	b.n	80057c4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	73fb      	strb	r3, [r7, #15]
      break;
 8005702:	e05f      	b.n	80057c4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800570e:	b2db      	uxtb	r3, r3
 8005710:	73fb      	strb	r3, [r7, #15]
      break;
 8005712:	e057      	b.n	80057c4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800571e:	b2db      	uxtb	r3, r3
 8005720:	73fb      	strb	r3, [r7, #15]
      break;
 8005722:	e04f      	b.n	80057c4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800572e:	b2db      	uxtb	r3, r3
 8005730:	73fb      	strb	r3, [r7, #15]
      break;
 8005732:	e047      	b.n	80057c4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800573e:	b2db      	uxtb	r3, r3
 8005740:	73fb      	strb	r3, [r7, #15]
      break;
 8005742:	e03f      	b.n	80057c4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005748:	785b      	ldrb	r3, [r3, #1]
 800574a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800574e:	b2db      	uxtb	r3, r3
 8005750:	73fb      	strb	r3, [r7, #15]
      break;
 8005752:	e037      	b.n	80057c4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005758:	785b      	ldrb	r3, [r3, #1]
 800575a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800575e:	b2db      	uxtb	r3, r3
 8005760:	73fb      	strb	r3, [r7, #15]
      break;
 8005762:	e02f      	b.n	80057c4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005768:	785b      	ldrb	r3, [r3, #1]
 800576a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800576e:	b2db      	uxtb	r3, r3
 8005770:	73fb      	strb	r3, [r7, #15]
      break;
 8005772:	e027      	b.n	80057c4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005778:	785b      	ldrb	r3, [r3, #1]
 800577a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800577e:	b2db      	uxtb	r3, r3
 8005780:	73fb      	strb	r3, [r7, #15]
      break;
 8005782:	e01f      	b.n	80057c4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005788:	785b      	ldrb	r3, [r3, #1]
 800578a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800578e:	b2db      	uxtb	r3, r3
 8005790:	73fb      	strb	r3, [r7, #15]
      break;
 8005792:	e017      	b.n	80057c4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005798:	785b      	ldrb	r3, [r3, #1]
 800579a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	73fb      	strb	r3, [r7, #15]
      break;
 80057a2:	e00f      	b.n	80057c4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a8:	785b      	ldrb	r3, [r3, #1]
 80057aa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	73fb      	strb	r3, [r7, #15]
      break;
 80057b2:	e007      	b.n	80057c4 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b8:	785b      	ldrb	r3, [r3, #1]
 80057ba:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	73fb      	strb	r3, [r7, #15]
      break;
 80057c2:	bf00      	nop
  return state;
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop

080057d0 <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	460b      	mov	r3, r1
 80057da:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 80057dc:	78fb      	ldrb	r3, [r7, #3]
 80057de:	2b18      	cmp	r3, #24
 80057e0:	d809      	bhi.n	80057f6 <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a19      	ldr	r1, [r3, #32]
 80057e6:	78fa      	ldrb	r2, [r7, #3]
 80057e8:	4613      	mov	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	440b      	add	r3, r1
 80057f2:	3301      	adds	r3, #1
 80057f4:	e000      	b.n	80057f8 <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 800580e:	2300      	movs	r3, #0
 8005810:	73fb      	strb	r3, [r7, #15]
 8005812:	e01a      	b.n	800584a <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8005814:	7bfb      	ldrb	r3, [r7, #15]
 8005816:	011b      	lsls	r3, r3, #4
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	4413      	add	r3, r2
 800581c:	2200      	movs	r2, #0
 800581e:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 8005820:	7bfb      	ldrb	r3, [r7, #15]
 8005822:	011b      	lsls	r3, r3, #4
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	4413      	add	r3, r2
 8005828:	2200      	movs	r2, #0
 800582a:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 800582c:	7bfb      	ldrb	r3, [r7, #15]
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	4413      	add	r3, r2
 8005834:	2200      	movs	r2, #0
 8005836:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 8005838:	7bfb      	ldrb	r3, [r7, #15]
 800583a:	011b      	lsls	r3, r3, #4
 800583c:	683a      	ldr	r2, [r7, #0]
 800583e:	4413      	add	r3, r2
 8005840:	2200      	movs	r2, #0
 8005842:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 8005844:	7bfb      	ldrb	r3, [r7, #15]
 8005846:	3301      	adds	r3, #1
 8005848:	73fb      	strb	r3, [r7, #15]
 800584a:	7bfb      	ldrb	r3, [r7, #15]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d9e1      	bls.n	8005814 <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 8005850:	bf00      	nop
 8005852:	bf00      	nop
 8005854:	3714      	adds	r7, #20
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <_ZN5L6470I8shield_3E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 800585e:	b480      	push	{r7}
 8005860:	b085      	sub	sp, #20
 8005862:	af00      	add	r7, sp, #0
 8005864:	60f8      	str	r0, [r7, #12]
 8005866:	60b9      	str	r1, [r7, #8]
 8005868:	603b      	str	r3, [r7, #0]
 800586a:	4613      	mov	r3, r2
 800586c:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	7f1b      	ldrb	r3, [r3, #28]
 8005872:	011b      	lsls	r3, r3, #4
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	4413      	add	r3, r2
 8005878:	79fa      	ldrb	r2, [r7, #7]
 800587a:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	7f1b      	ldrb	r3, [r3, #28]
 8005880:	011b      	lsls	r3, r3, #4
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	4413      	add	r3, r2
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	7f1b      	ldrb	r3, [r3, #28]
 800588e:	011b      	lsls	r3, r3, #4
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	4413      	add	r3, r2
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	7f1b      	ldrb	r3, [r3, #28]
 800589c:	011b      	lsls	r3, r3, #4
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	4413      	add	r3, r2
 80058a2:	69fa      	ldr	r2, [r7, #28]
 80058a4:	60da      	str	r2, [r3, #12]
}
 80058a6:	bf00      	nop
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
	...

080058b4 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 80058b4:	b590      	push	{r4, r7, lr}
 80058b6:	b087      	sub	sp, #28
 80058b8:	af02      	add	r7, sp, #8
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	603b      	str	r3, [r7, #0]
 80058c0:	4613      	mov	r3, r2
 80058c2:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 80058c4:	4b10      	ldr	r3, [pc, #64]	; (8005908 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10a      	bne.n	80058e2 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 80058cc:	4b0e      	ldr	r3, [pc, #56]	; (8005908 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 80058ce:	2201      	movs	r2, #1
 80058d0:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68b9      	ldr	r1, [r7, #8]
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f503 7311 	add.w	r3, r3, #580	; 0x244
 80058ea:	681c      	ldr	r4, [r3, #0]
 80058ec:	79fa      	ldrb	r2, [r7, #7]
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	9301      	str	r3, [sp, #4]
 80058f2:	6a3b      	ldr	r3, [r7, #32]
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	68b9      	ldr	r1, [r7, #8]
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	47a0      	blx	r4
}
 80058fe:	bf00      	nop
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	bd90      	pop	{r4, r7, pc}
 8005906:	bf00      	nop
 8005908:	20000271 	.word	0x20000271

0800590c <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 8005918:	2300      	movs	r3, #0
 800591a:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800591c:	2300      	movs	r3, #0
 800591e:	75bb      	strb	r3, [r7, #22]
 8005920:	e013      	b.n	800594a <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8005922:	2300      	movs	r3, #0
 8005924:	75fb      	strb	r3, [r7, #23]
 8005926:	e00a      	b.n	800593e <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 8005928:	7d7b      	ldrb	r3, [r7, #21]
 800592a:	1c5a      	adds	r2, r3, #1
 800592c:	757a      	strb	r2, [r7, #21]
 800592e:	461a      	mov	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4413      	add	r3, r2
 8005934:	2200      	movs	r2, #0
 8005936:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8005938:	7dfb      	ldrb	r3, [r7, #23]
 800593a:	3301      	adds	r3, #1
 800593c:	75fb      	strb	r3, [r7, #23]
 800593e:	7dfb      	ldrb	r3, [r7, #23]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d9f1      	bls.n	8005928 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8005944:	7dbb      	ldrb	r3, [r7, #22]
 8005946:	3301      	adds	r3, #1
 8005948:	75bb      	strb	r3, [r7, #22]
 800594a:	7dbb      	ldrb	r3, [r7, #22]
 800594c:	2b03      	cmp	r3, #3
 800594e:	d9e8      	bls.n	8005922 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8005950:	2300      	movs	r3, #0
 8005952:	75fb      	strb	r3, [r7, #23]
 8005954:	e1f1      	b.n	8005d3a <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800595a:	7dfb      	ldrb	r3, [r7, #23]
 800595c:	011b      	lsls	r3, r3, #4
 800595e:	68b9      	ldr	r1, [r7, #8]
 8005960:	440b      	add	r3, r1
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	4619      	mov	r1, r3
 8005966:	460b      	mov	r3, r1
 8005968:	00db      	lsls	r3, r3, #3
 800596a:	1a5b      	subs	r3, r3, r1
 800596c:	005b      	lsls	r3, r3, #1
 800596e:	441a      	add	r2, r3
 8005970:	7dfb      	ldrb	r3, [r7, #23]
 8005972:	6879      	ldr	r1, [r7, #4]
 8005974:	440b      	add	r3, r1
 8005976:	7b12      	ldrb	r2, [r2, #12]
 8005978:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 800597a:	7dfb      	ldrb	r3, [r7, #23]
 800597c:	011b      	lsls	r3, r3, #4
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	4413      	add	r3, r2
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	2b12      	cmp	r3, #18
 8005986:	f200 81d5 	bhi.w	8005d34 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 800598a:	a201      	add	r2, pc, #4	; (adr r2, 8005990 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 800598c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005990:	08005d35 	.word	0x08005d35
 8005994:	080059dd 	.word	0x080059dd
 8005998:	08005a65 	.word	0x08005a65
 800599c:	08005a95 	.word	0x08005a95
 80059a0:	08005afd 	.word	0x08005afd
 80059a4:	08005b2b 	.word	0x08005b2b
 80059a8:	08005b93 	.word	0x08005b93
 80059ac:	08005bcf 	.word	0x08005bcf
 80059b0:	08005c37 	.word	0x08005c37
 80059b4:	08005cd3 	.word	0x08005cd3
 80059b8:	08005d35 	.word	0x08005d35
 80059bc:	08005d35 	.word	0x08005d35
 80059c0:	08005d35 	.word	0x08005d35
 80059c4:	08005d35 	.word	0x08005d35
 80059c8:	08005d35 	.word	0x08005d35
 80059cc:	08005d35 	.word	0x08005d35
 80059d0:	08005d35 	.word	0x08005d35
 80059d4:	08005d35 	.word	0x08005d35
 80059d8:	08005d35 	.word	0x08005d35
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 80059dc:	7dfb      	ldrb	r3, [r7, #23]
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	4413      	add	r3, r2
 80059e2:	7819      	ldrb	r1, [r3, #0]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6a18      	ldr	r0, [r3, #32]
 80059e8:	7dfb      	ldrb	r3, [r7, #23]
 80059ea:	011b      	lsls	r3, r3, #4
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	4413      	add	r3, r2
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	4613      	mov	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4403      	add	r3, r0
 80059fc:	781a      	ldrb	r2, [r3, #0]
 80059fe:	7dfb      	ldrb	r3, [r7, #23]
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	4403      	add	r3, r0
 8005a04:	430a      	orrs	r2, r1
 8005a06:	b2d2      	uxtb	r2, r2
 8005a08:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6a19      	ldr	r1, [r3, #32]
 8005a0e:	7dfb      	ldrb	r3, [r7, #23]
 8005a10:	011b      	lsls	r3, r3, #4
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	4413      	add	r3, r2
 8005a16:	685a      	ldr	r2, [r3, #4]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	440b      	add	r3, r1
 8005a22:	7b9b      	ldrb	r3, [r3, #14]
 8005a24:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8005a26:	2301      	movs	r3, #1
 8005a28:	75bb      	strb	r3, [r7, #22]
 8005a2a:	e016      	b.n	8005a5a <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 8005a2c:	7dfb      	ldrb	r3, [r7, #23]
 8005a2e:	011b      	lsls	r3, r3, #4
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	4413      	add	r3, r2
 8005a34:	689a      	ldr	r2, [r3, #8]
 8005a36:	7d39      	ldrb	r1, [r7, #20]
 8005a38:	7dbb      	ldrb	r3, [r7, #22]
 8005a3a:	1acb      	subs	r3, r1, r3
 8005a3c:	00db      	lsls	r3, r3, #3
 8005a3e:	fa22 f103 	lsr.w	r1, r2, r3
 8005a42:	7dbb      	ldrb	r3, [r7, #22]
 8005a44:	005a      	lsls	r2, r3, #1
 8005a46:	7dfb      	ldrb	r3, [r7, #23]
 8005a48:	4413      	add	r3, r2
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4413      	add	r3, r2
 8005a50:	b2ca      	uxtb	r2, r1
 8005a52:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8005a54:	7dbb      	ldrb	r3, [r7, #22]
 8005a56:	3301      	adds	r3, #1
 8005a58:	75bb      	strb	r3, [r7, #22]
 8005a5a:	7d3a      	ldrb	r2, [r7, #20]
 8005a5c:	7dbb      	ldrb	r3, [r7, #22]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d2e4      	bcs.n	8005a2c <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 8005a62:	e167      	b.n	8005d34 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8005a64:	7dfb      	ldrb	r3, [r7, #23]
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	4413      	add	r3, r2
 8005a6a:	7819      	ldrb	r1, [r3, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6a18      	ldr	r0, [r3, #32]
 8005a70:	7dfb      	ldrb	r3, [r7, #23]
 8005a72:	011b      	lsls	r3, r3, #4
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	4413      	add	r3, r2
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	4413      	add	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4403      	add	r3, r0
 8005a84:	781a      	ldrb	r2, [r3, #0]
 8005a86:	7dfb      	ldrb	r3, [r7, #23]
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	4403      	add	r3, r0
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	b2d2      	uxtb	r2, r2
 8005a90:	701a      	strb	r2, [r3, #0]
      break;
 8005a92:	e14f      	b.n	8005d34 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8005a94:	7dfb      	ldrb	r3, [r7, #23]
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	4413      	add	r3, r2
 8005a9a:	7819      	ldrb	r1, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005aa0:	7dfb      	ldrb	r3, [r7, #23]
 8005aa2:	011b      	lsls	r3, r3, #4
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	00db      	lsls	r3, r3, #3
 8005aae:	4413      	add	r3, r2
 8005ab0:	4403      	add	r3, r0
 8005ab2:	7a1a      	ldrb	r2, [r3, #8]
 8005ab4:	7dfb      	ldrb	r3, [r7, #23]
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	4403      	add	r3, r0
 8005aba:	430a      	orrs	r2, r1
 8005abc:	b2d2      	uxtb	r2, r2
 8005abe:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	75bb      	strb	r3, [r7, #22]
 8005ac4:	e016      	b.n	8005af4 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8005ac6:	7dfb      	ldrb	r3, [r7, #23]
 8005ac8:	011b      	lsls	r3, r3, #4
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	4413      	add	r3, r2
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	7dbb      	ldrb	r3, [r7, #22]
 8005ad2:	f1c3 0303 	rsb	r3, r3, #3
 8005ad6:	00db      	lsls	r3, r3, #3
 8005ad8:	fa22 f103 	lsr.w	r1, r2, r3
 8005adc:	7dbb      	ldrb	r3, [r7, #22]
 8005ade:	005a      	lsls	r2, r3, #1
 8005ae0:	7dfb      	ldrb	r3, [r7, #23]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4413      	add	r3, r2
 8005aea:	b2ca      	uxtb	r2, r1
 8005aec:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005aee:	7dbb      	ldrb	r3, [r7, #22]
 8005af0:	3301      	adds	r3, #1
 8005af2:	75bb      	strb	r3, [r7, #22]
 8005af4:	7dbb      	ldrb	r3, [r7, #22]
 8005af6:	2b03      	cmp	r3, #3
 8005af8:	d9e5      	bls.n	8005ac6 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 8005afa:	e11b      	b.n	8005d34 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8005afc:	7dfb      	ldrb	r3, [r7, #23]
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	4413      	add	r3, r2
 8005b02:	7819      	ldrb	r1, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005b08:	7dfb      	ldrb	r3, [r7, #23]
 8005b0a:	011b      	lsls	r3, r3, #4
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	4413      	add	r3, r2
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	4613      	mov	r3, r2
 8005b14:	00db      	lsls	r3, r3, #3
 8005b16:	4413      	add	r3, r2
 8005b18:	4403      	add	r3, r0
 8005b1a:	7a1a      	ldrb	r2, [r3, #8]
 8005b1c:	7dfb      	ldrb	r3, [r7, #23]
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	4403      	add	r3, r0
 8005b22:	430a      	orrs	r2, r1
 8005b24:	b2d2      	uxtb	r2, r2
 8005b26:	701a      	strb	r2, [r3, #0]
      break;
 8005b28:	e104      	b.n	8005d34 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8005b2a:	7dfb      	ldrb	r3, [r7, #23]
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	4413      	add	r3, r2
 8005b30:	7819      	ldrb	r1, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005b36:	7dfb      	ldrb	r3, [r7, #23]
 8005b38:	011b      	lsls	r3, r3, #4
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	4613      	mov	r3, r2
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	4413      	add	r3, r2
 8005b46:	4403      	add	r3, r0
 8005b48:	7a1a      	ldrb	r2, [r3, #8]
 8005b4a:	7dfb      	ldrb	r3, [r7, #23]
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	4403      	add	r3, r0
 8005b50:	430a      	orrs	r2, r1
 8005b52:	b2d2      	uxtb	r2, r2
 8005b54:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005b56:	2301      	movs	r3, #1
 8005b58:	75bb      	strb	r3, [r7, #22]
 8005b5a:	e016      	b.n	8005b8a <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8005b5c:	7dfb      	ldrb	r3, [r7, #23]
 8005b5e:	011b      	lsls	r3, r3, #4
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	4413      	add	r3, r2
 8005b64:	689a      	ldr	r2, [r3, #8]
 8005b66:	7dbb      	ldrb	r3, [r7, #22]
 8005b68:	f1c3 0303 	rsb	r3, r3, #3
 8005b6c:	00db      	lsls	r3, r3, #3
 8005b6e:	fa22 f103 	lsr.w	r1, r2, r3
 8005b72:	7dbb      	ldrb	r3, [r7, #22]
 8005b74:	005a      	lsls	r2, r3, #1
 8005b76:	7dfb      	ldrb	r3, [r7, #23]
 8005b78:	4413      	add	r3, r2
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4413      	add	r3, r2
 8005b80:	b2ca      	uxtb	r2, r1
 8005b82:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005b84:	7dbb      	ldrb	r3, [r7, #22]
 8005b86:	3301      	adds	r3, #1
 8005b88:	75bb      	strb	r3, [r7, #22]
 8005b8a:	7dbb      	ldrb	r3, [r7, #22]
 8005b8c:	2b03      	cmp	r3, #3
 8005b8e:	d9e5      	bls.n	8005b5c <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 8005b90:	e0d0      	b.n	8005d34 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005b92:	2301      	movs	r3, #1
 8005b94:	75bb      	strb	r3, [r7, #22]
 8005b96:	e016      	b.n	8005bc6 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 8005b98:	7dfb      	ldrb	r3, [r7, #23]
 8005b9a:	011b      	lsls	r3, r3, #4
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	685a      	ldr	r2, [r3, #4]
 8005ba2:	7dbb      	ldrb	r3, [r7, #22]
 8005ba4:	f1c3 0303 	rsb	r3, r3, #3
 8005ba8:	00db      	lsls	r3, r3, #3
 8005baa:	fa22 f103 	lsr.w	r1, r2, r3
 8005bae:	7dbb      	ldrb	r3, [r7, #22]
 8005bb0:	005a      	lsls	r2, r3, #1
 8005bb2:	7dfb      	ldrb	r3, [r7, #23]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4413      	add	r3, r2
 8005bbc:	b2ca      	uxtb	r2, r1
 8005bbe:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005bc0:	7dbb      	ldrb	r3, [r7, #22]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	75bb      	strb	r3, [r7, #22]
 8005bc6:	7dbb      	ldrb	r3, [r7, #22]
 8005bc8:	2b03      	cmp	r3, #3
 8005bca:	d9e5      	bls.n	8005b98 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 8005bcc:	e0b2      	b.n	8005d34 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8005bce:	7dfb      	ldrb	r3, [r7, #23]
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	7819      	ldrb	r1, [r3, #0]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005bda:	7dfb      	ldrb	r3, [r7, #23]
 8005bdc:	011b      	lsls	r3, r3, #4
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	4413      	add	r3, r2
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	4613      	mov	r3, r2
 8005be6:	00db      	lsls	r3, r3, #3
 8005be8:	4413      	add	r3, r2
 8005bea:	4403      	add	r3, r0
 8005bec:	7a1a      	ldrb	r2, [r3, #8]
 8005bee:	7dfb      	ldrb	r3, [r7, #23]
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	4403      	add	r3, r0
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	b2d2      	uxtb	r2, r2
 8005bf8:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	75bb      	strb	r3, [r7, #22]
 8005bfe:	e016      	b.n	8005c2e <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8005c00:	7dfb      	ldrb	r3, [r7, #23]
 8005c02:	011b      	lsls	r3, r3, #4
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	4413      	add	r3, r2
 8005c08:	689a      	ldr	r2, [r3, #8]
 8005c0a:	7dbb      	ldrb	r3, [r7, #22]
 8005c0c:	f1c3 0303 	rsb	r3, r3, #3
 8005c10:	00db      	lsls	r3, r3, #3
 8005c12:	fa22 f103 	lsr.w	r1, r2, r3
 8005c16:	7dbb      	ldrb	r3, [r7, #22]
 8005c18:	005a      	lsls	r2, r3, #1
 8005c1a:	7dfb      	ldrb	r3, [r7, #23]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	461a      	mov	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4413      	add	r3, r2
 8005c24:	b2ca      	uxtb	r2, r1
 8005c26:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005c28:	7dbb      	ldrb	r3, [r7, #22]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	75bb      	strb	r3, [r7, #22]
 8005c2e:	7dbb      	ldrb	r3, [r7, #22]
 8005c30:	2b03      	cmp	r3, #3
 8005c32:	d9e5      	bls.n	8005c00 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 8005c34:	e07e      	b.n	8005d34 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8005c36:	7dfb      	ldrb	r3, [r7, #23]
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	b259      	sxtb	r1, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005c44:	7dfb      	ldrb	r3, [r7, #23]
 8005c46:	011b      	lsls	r3, r3, #4
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4413      	add	r3, r2
 8005c54:	4403      	add	r3, r0
 8005c56:	791b      	ldrb	r3, [r3, #4]
 8005c58:	00db      	lsls	r3, r3, #3
 8005c5a:	b25b      	sxtb	r3, r3
 8005c5c:	430b      	orrs	r3, r1
 8005c5e:	b259      	sxtb	r1, r3
 8005c60:	7dfb      	ldrb	r3, [r7, #23]
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	4413      	add	r3, r2
 8005c66:	b2ca      	uxtb	r2, r1
 8005c68:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8005c6a:	7dfb      	ldrb	r3, [r7, #23]
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	4413      	add	r3, r2
 8005c70:	7819      	ldrb	r1, [r3, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005c76:	7dfb      	ldrb	r3, [r7, #23]
 8005c78:	011b      	lsls	r3, r3, #4
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	689a      	ldr	r2, [r3, #8]
 8005c80:	4613      	mov	r3, r2
 8005c82:	00db      	lsls	r3, r3, #3
 8005c84:	4413      	add	r3, r2
 8005c86:	4403      	add	r3, r0
 8005c88:	7a1a      	ldrb	r2, [r3, #8]
 8005c8a:	7dfb      	ldrb	r3, [r7, #23]
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	4403      	add	r3, r0
 8005c90:	430a      	orrs	r2, r1
 8005c92:	b2d2      	uxtb	r2, r2
 8005c94:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005c96:	2301      	movs	r3, #1
 8005c98:	75bb      	strb	r3, [r7, #22]
 8005c9a:	e016      	b.n	8005cca <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 8005c9c:	7dfb      	ldrb	r3, [r7, #23]
 8005c9e:	011b      	lsls	r3, r3, #4
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	68da      	ldr	r2, [r3, #12]
 8005ca6:	7dbb      	ldrb	r3, [r7, #22]
 8005ca8:	f1c3 0303 	rsb	r3, r3, #3
 8005cac:	00db      	lsls	r3, r3, #3
 8005cae:	fa22 f103 	lsr.w	r1, r2, r3
 8005cb2:	7dbb      	ldrb	r3, [r7, #22]
 8005cb4:	005a      	lsls	r2, r3, #1
 8005cb6:	7dfb      	ldrb	r3, [r7, #23]
 8005cb8:	4413      	add	r3, r2
 8005cba:	461a      	mov	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	b2ca      	uxtb	r2, r1
 8005cc2:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005cc4:	7dbb      	ldrb	r3, [r7, #22]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	75bb      	strb	r3, [r7, #22]
 8005cca:	7dbb      	ldrb	r3, [r7, #22]
 8005ccc:	2b03      	cmp	r3, #3
 8005cce:	d9e5      	bls.n	8005c9c <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 8005cd0:	e030      	b.n	8005d34 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8005cd2:	7dfb      	ldrb	r3, [r7, #23]
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	b259      	sxtb	r1, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005ce0:	7dfb      	ldrb	r3, [r7, #23]
 8005ce2:	011b      	lsls	r3, r3, #4
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	685a      	ldr	r2, [r3, #4]
 8005cea:	4613      	mov	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	4403      	add	r3, r0
 8005cf2:	791b      	ldrb	r3, [r3, #4]
 8005cf4:	00db      	lsls	r3, r3, #3
 8005cf6:	b25b      	sxtb	r3, r3
 8005cf8:	430b      	orrs	r3, r1
 8005cfa:	b259      	sxtb	r1, r3
 8005cfc:	7dfb      	ldrb	r3, [r7, #23]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	4413      	add	r3, r2
 8005d02:	b2ca      	uxtb	r2, r1
 8005d04:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8005d06:	7dfb      	ldrb	r3, [r7, #23]
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	7819      	ldrb	r1, [r3, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005d12:	7dfb      	ldrb	r3, [r7, #23]
 8005d14:	011b      	lsls	r3, r3, #4
 8005d16:	68ba      	ldr	r2, [r7, #8]
 8005d18:	4413      	add	r3, r2
 8005d1a:	689a      	ldr	r2, [r3, #8]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	00db      	lsls	r3, r3, #3
 8005d20:	4413      	add	r3, r2
 8005d22:	4403      	add	r3, r0
 8005d24:	7a1a      	ldrb	r2, [r3, #8]
 8005d26:	7dfb      	ldrb	r3, [r7, #23]
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	4403      	add	r3, r0
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	b2d2      	uxtb	r2, r2
 8005d30:	701a      	strb	r2, [r3, #0]
      break;
 8005d32:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8005d34:	7dfb      	ldrb	r3, [r7, #23]
 8005d36:	3301      	adds	r3, #1
 8005d38:	75fb      	strb	r3, [r7, #23]
 8005d3a:	7dfb      	ldrb	r3, [r7, #23]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	f67f ae0a 	bls.w	8005956 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 8005d42:	bf00      	nop
 8005d44:	bf00      	nop
 8005d46:	371c      	adds	r7, #28
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <_ZN5L6470I8shield_3E11L6470_roundEf>:
    /**
     * @brief  Rounding a floating point number to the nearest unsigned integer number.
     * @param  f The floating point number.
     * @retval The nearest unsigned integer number.
     */
    int L6470_round(float f)
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	ed87 0a00 	vstr	s0, [r7]
    {
        if (f >= 0) {
 8005d5c:	edd7 7a00 	vldr	s15, [r7]
 8005d60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d68:	db1e      	blt.n	8005da8 <_ZN5L6470I8shield_3E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 8005d6a:	edd7 7a00 	vldr	s15, [r7]
 8005d6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d72:	ee17 2a90 	vmov	r2, s15
 8005d76:	edd7 7a00 	vldr	s15, [r7]
 8005d7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d82:	ed97 7a00 	vldr	s14, [r7]
 8005d86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d8a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005d8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d96:	bf4c      	ite	mi
 8005d98:	2301      	movmi	r3, #1
 8005d9a:	2300      	movpl	r3, #0
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	f083 0301 	eor.w	r3, r3, #1
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	4413      	add	r3, r2
 8005da6:	e01a      	b.n	8005dde <_ZN5L6470I8shield_3E11L6470_roundEf+0x8e>
        } else {
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 8005da8:	edd7 7a00 	vldr	s15, [r7]
 8005dac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005db0:	ee17 2a90 	vmov	r2, s15
 8005db4:	edd7 7a00 	vldr	s15, [r7]
 8005db8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dc0:	ed97 7a00 	vldr	s14, [r7]
 8005dc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005dc8:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8005dcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dd4:	d501      	bpl.n	8005dda <_ZN5L6470I8shield_3E11L6470_roundEf+0x8a>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e000      	b.n	8005ddc <_ZN5L6470I8shield_3E11L6470_roundEf+0x8c>
 8005dda:	2300      	movs	r3, #0
 8005ddc:	1ad3      	subs	r3, r2, r3
        }
    }
 8005dde:	4618      	mov	r0, r3
 8005de0:	370c      	adds	r7, #12
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <_ZN5L6470I8shield_3E4ReadEPht>:
     * @brief      Utility function to read data from L6470.
     * @param[out] pBuffer pointer to the buffer to read data into.
     * @param[in]  NumBytesToRead number of bytes to read.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b086      	sub	sp, #24
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	60f8      	str	r0, [r7, #12]
 8005df2:	60b9      	str	r1, [r7, #8]
 8005df4:	4613      	mov	r3, r2
 8005df6:	80fb      	strh	r3, [r7, #6]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6918      	ldr	r0, [r3, #16]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	8a9b      	ldrh	r3, [r3, #20]
 8005e00:	2200      	movs	r2, #0
 8005e02:	4619      	mov	r1, r3
 8005e04:	f007 fc40 	bl	800d688 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6998      	ldr	r0, [r3, #24]
 8005e0c:	88fa      	ldrh	r2, [r7, #6]
 8005e0e:	2364      	movs	r3, #100	; 0x64
 8005e10:	68b9      	ldr	r1, [r7, #8]
 8005e12:	f008 fc50 	bl	800e6b6 <HAL_SPI_Receive>
 8005e16:	4603      	mov	r3, r0
 8005e18:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6918      	ldr	r0, [r3, #16]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	8a9b      	ldrh	r3, [r3, #20]
 8005e22:	2201      	movs	r2, #1
 8005e24:	4619      	mov	r1, r3
 8005e26:	f007 fc2f 	bl	800d688 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8005e2a:	7dfb      	ldrb	r3, [r7, #23]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <_ZN5L6470I8shield_3E4ReadEPht+0x4a>
        {
        	return COMPONENT_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e000      	b.n	8005e36 <_ZN5L6470I8shield_3E4ReadEPht+0x4c>
        }
        return COMPONENT_OK;
 8005e34:	2300      	movs	r3, #0
    }
 8005e36:	4618      	mov	r0, r3
 8005e38:	3718      	adds	r7, #24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <_ZN5L6470I8shield_3E5WriteEPht>:
     * @brief      Utility function to write data to L6470.
     * @param[in]  pBuffer pointer to the buffer of data to send.
     * @param[in]  NumBytesToWrite number of bytes to write.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b086      	sub	sp, #24
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	60f8      	str	r0, [r7, #12]
 8005e46:	60b9      	str	r1, [r7, #8]
 8005e48:	4613      	mov	r3, r2
 8005e4a:	80fb      	strh	r3, [r7, #6]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6918      	ldr	r0, [r3, #16]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	8a9b      	ldrh	r3, [r3, #20]
 8005e54:	2200      	movs	r2, #0
 8005e56:	4619      	mov	r1, r3
 8005e58:	f007 fc16 	bl	800d688 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6998      	ldr	r0, [r3, #24]
 8005e60:	88fa      	ldrh	r2, [r7, #6]
 8005e62:	2364      	movs	r3, #100	; 0x64
 8005e64:	68b9      	ldr	r1, [r7, #8]
 8005e66:	f008 faea 	bl	800e43e <HAL_SPI_Transmit>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6918      	ldr	r0, [r3, #16]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	8a9b      	ldrh	r3, [r3, #20]
 8005e76:	2201      	movs	r2, #1
 8005e78:	4619      	mov	r1, r3
 8005e7a:	f007 fc05 	bl	800d688 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8005e7e:	7dfb      	ldrb	r3, [r7, #23]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d001      	beq.n	8005e88 <_ZN5L6470I8shield_3E5WriteEPht+0x4a>
        {
        	return COMPONENT_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e000      	b.n	8005e8a <_ZN5L6470I8shield_3E5WriteEPht+0x4c>
        }
        return COMPONENT_OK;
 8005e88:	2300      	movs	r3, #0
    }
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3718      	adds	r7, #24
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t>:
     * @param[out] pBufferToRead pointer to the buffer to read data into.
     * @param[in]  pBufferToWrite pointer to the buffer of data to send.
     * @param[in]  NumBytes number of bytes to read and write.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b088      	sub	sp, #32
 8005e96:	af02      	add	r7, sp, #8
 8005e98:	60f8      	str	r0, [r7, #12]
 8005e9a:	60b9      	str	r1, [r7, #8]
 8005e9c:	607a      	str	r2, [r7, #4]
 8005e9e:	807b      	strh	r3, [r7, #2]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6918      	ldr	r0, [r3, #16]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	8a9b      	ldrh	r3, [r3, #20]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	4619      	mov	r1, r3
 8005eac:	f007 fbec 	bl	800d688 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6998      	ldr	r0, [r3, #24]
 8005eb4:	887b      	ldrh	r3, [r7, #2]
 8005eb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005eba:	9200      	str	r2, [sp, #0]
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	6879      	ldr	r1, [r7, #4]
 8005ec0:	f008 fd0a 	bl	800e8d8 <HAL_SPI_TransmitReceive>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 8005ec8:	7dfb      	ldrb	r3, [r7, #23]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d009      	beq.n	8005ee2 <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t+0x50>
        {
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6918      	ldr	r0, [r3, #16]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8a9b      	ldrh	r3, [r3, #20]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	4619      	mov	r1, r3
 8005eda:	f007 fbd5 	bl	800d688 <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e008      	b.n	8005ef4 <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t+0x62>
        }
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6918      	ldr	r0, [r3, #16]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	8a9b      	ldrh	r3, [r3, #20]
 8005eea:	2201      	movs	r2, #1
 8005eec:	4619      	mov	r1, r3
 8005eee:	f007 fbcb 	bl	800d688 <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 8005ef2:	2300      	movs	r3, #0
    }
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3718      	adds	r7, #24
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <_ZN5L6470I8shield_3E23L6470_SPI_CommunicationEPhS2_tm>:


    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 8005efc:	b590      	push	{r4, r7, lr}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
 8005f08:	807b      	strh	r3, [r7, #2]
    {
        ReadWrite(pRxData, pTxData, Size);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8005f12:	681c      	ldr	r4, [r3, #0]
 8005f14:	887b      	ldrh	r3, [r7, #2]
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	6879      	ldr	r1, [r7, #4]
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	47a0      	blx	r4
    }
 8005f1e:	bf00      	nop
 8005f20:	3714      	adds	r7, #20
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd90      	pop	{r4, r7, pc}

08005f26 <_ZN5L6470I8shield_2E4initEPv>:
    virtual int init(void *init)
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b082      	sub	sp, #8
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
 8005f2e:	6039      	str	r1, [r7, #0]
        return (int) L6470_Config((void *) init);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6839      	ldr	r1, [r7, #0]
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	4798      	blx	r3
 8005f40:	4603      	mov	r3, r0
    }
 8005f42:	4618      	mov	r0, r3
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <_ZN5L6470I8shield_2E10get_statusEv>:
    virtual unsigned int get_status(void)
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b082      	sub	sp, #8
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
        return (unsigned int) L6470_GetStatus();
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	4798      	blx	r3
 8005f60:	4603      	mov	r3, r0
    }
 8005f62:	4618      	mov	r0, r3
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <_ZN5L6470I8shield_2E13get_parameterEj>:
    virtual unsigned int get_parameter(unsigned int parameter)
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b082      	sub	sp, #8
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	6039      	str	r1, [r7, #0]
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	683a      	ldr	r2, [r7, #0]
 8005f80:	b2d2      	uxtb	r2, r2
 8005f82:	4611      	mov	r1, r2
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	4798      	blx	r3
 8005f88:	4603      	mov	r3, r0
    }
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3708      	adds	r7, #8
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <_ZN5L6470I8shield_2E12get_positionEv>:
    virtual signed int get_position(void)
 8005f92:	b590      	push	{r4, r7, lr}
 8005f94:	b083      	sub	sp, #12
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8005fa2:	681c      	ldr	r4, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2100      	movs	r1, #0
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	4798      	blx	r3
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	47a0      	blx	r4
 8005fbc:	4603      	mov	r3, r0
    }
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd90      	pop	{r4, r7, pc}

08005fc6 <_ZN5L6470I8shield_2E8get_markEv>:
    virtual signed int get_mark(void)
 8005fc6:	b590      	push	{r4, r7, lr}
 8005fc8:	b083      	sub	sp, #12
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8005fd6:	681c      	ldr	r4, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2102      	movs	r1, #2
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	4798      	blx	r3
 8005fe8:	4603      	mov	r3, r0
 8005fea:	4619      	mov	r1, r3
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	47a0      	blx	r4
 8005ff0:	4603      	mov	r3, r0
    }
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd90      	pop	{r4, r7, pc}

08005ffa <_ZN5L6470I8shield_2E9get_speedEv>:
    virtual unsigned int get_speed(void)
 8005ffa:	b5b0      	push	{r4, r5, r7, lr}
 8005ffc:	b082      	sub	sp, #8
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800600a:	681c      	ldr	r4, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8006014:	681d      	ldr	r5, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2103      	movs	r1, #3
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	4798      	blx	r3
 8006026:	4603      	mov	r3, r0
 8006028:	4619      	mov	r1, r3
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	47a8      	blx	r5
 800602e:	eef0 7a40 	vmov.f32	s15, s0
 8006032:	eeb0 0a67 	vmov.f32	s0, s15
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	47a0      	blx	r4
 800603a:	4603      	mov	r3, r0
    }
 800603c:	4618      	mov	r0, r3
 800603e:	3708      	adds	r7, #8
 8006040:	46bd      	mov	sp, r7
 8006042:	bdb0      	pop	{r4, r5, r7, pc}

08006044 <_ZN5L6470I8shield_2E13get_max_speedEv>:
    virtual unsigned int get_max_speed(void)
 8006044:	b5b0      	push	{r4, r5, r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006054:	681c      	ldr	r4, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800605e:	681d      	ldr	r5, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2106      	movs	r1, #6
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	4798      	blx	r3
 8006070:	4603      	mov	r3, r0
 8006072:	b29b      	uxth	r3, r3
 8006074:	4619      	mov	r1, r3
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	47a8      	blx	r5
 800607a:	eef0 7a40 	vmov.f32	s15, s0
 800607e:	eeb0 0a67 	vmov.f32	s0, s15
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	47a0      	blx	r4
 8006086:	4603      	mov	r3, r0
    }
 8006088:	4618      	mov	r0, r3
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bdb0      	pop	{r4, r5, r7, pc}

08006090 <_ZN5L6470I8shield_2E13get_min_speedEv>:
    virtual unsigned int get_min_speed(void)
 8006090:	b5b0      	push	{r4, r5, r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80060a0:	681c      	ldr	r4, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80060aa:	681d      	ldr	r5, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2107      	movs	r1, #7
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	4798      	blx	r3
 80060bc:	4603      	mov	r3, r0
 80060be:	b29b      	uxth	r3, r3
 80060c0:	4619      	mov	r1, r3
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	47a8      	blx	r5
 80060c6:	eef0 7a40 	vmov.f32	s15, s0
 80060ca:	eeb0 0a67 	vmov.f32	s0, s15
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	47a0      	blx	r4
 80060d2:	4603      	mov	r3, r0
    }
 80060d4:	4618      	mov	r0, r3
 80060d6:	3708      	adds	r7, #8
 80060d8:	46bd      	mov	sp, r7
 80060da:	bdb0      	pop	{r4, r5, r7, pc}

080060dc <_ZN5L6470I8shield_2E16get_accelerationEv>:
    virtual unsigned int get_acceleration(void)
 80060dc:	b5b0      	push	{r4, r5, r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80060ec:	681c      	ldr	r4, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80060f6:	681d      	ldr	r5, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2104      	movs	r1, #4
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	4798      	blx	r3
 8006108:	4603      	mov	r3, r0
 800610a:	b29b      	uxth	r3, r3
 800610c:	4619      	mov	r1, r3
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	47a8      	blx	r5
 8006112:	eef0 7a40 	vmov.f32	s15, s0
 8006116:	eeb0 0a67 	vmov.f32	s0, s15
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	47a0      	blx	r4
 800611e:	4603      	mov	r3, r0
    }
 8006120:	4618      	mov	r0, r3
 8006122:	3708      	adds	r7, #8
 8006124:	46bd      	mov	sp, r7
 8006126:	bdb0      	pop	{r4, r5, r7, pc}

08006128 <_ZN5L6470I8shield_2E16get_decelerationEv>:
    virtual unsigned int get_deceleration(void)
 8006128:	b5b0      	push	{r4, r5, r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006138:	681c      	ldr	r4, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8006142:	681d      	ldr	r5, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2105      	movs	r1, #5
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	4798      	blx	r3
 8006154:	4603      	mov	r3, r0
 8006156:	b29b      	uxth	r3, r3
 8006158:	4619      	mov	r1, r3
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	47a8      	blx	r5
 800615e:	eef0 7a40 	vmov.f32	s15, s0
 8006162:	eeb0 0a67 	vmov.f32	s0, s15
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	47a0      	blx	r4
 800616a:	4603      	mov	r3, r0
    }
 800616c:	4618      	mov	r0, r3
 800616e:	3708      	adds	r7, #8
 8006170:	46bd      	mov	sp, r7
 8006172:	bdb0      	pop	{r4, r5, r7, pc}

08006174 <_ZN5L6470I8shield_2E13get_directionEv>:
    virtual StepperMotor::direction_t get_direction(void)
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2104      	movs	r1, #4
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	4798      	blx	r3
 800618c:	4603      	mov	r3, r0
 800618e:	2b01      	cmp	r3, #1
 8006190:	d101      	bne.n	8006196 <_ZN5L6470I8shield_2E13get_directionEv+0x22>
 8006192:	2301      	movs	r3, #1
 8006194:	e000      	b.n	8006198 <_ZN5L6470I8shield_2E13get_directionEv+0x24>
 8006196:	2300      	movs	r3, #0
    }
 8006198:	4618      	mov	r0, r3
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <_ZN5L6470I8shield_2E13set_parameterEjj>:
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	b2d1      	uxtb	r1, r2
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	4798      	blx	r3
    }
 80061c0:	bf00      	nop
 80061c2:	3710      	adds	r7, #16
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <_ZN5L6470I8shield_2E8set_homeEv>:
    virtual void set_home(void)
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
        L6470_ResetPos();
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	4798      	blx	r3
    }
 80061de:	bf00      	nop
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <_ZN5L6470I8shield_2E8set_markEv>:
    virtual void set_mark(void)
 80061e6:	b590      	push	{r4, r7, lr}
 80061e8:	b083      	sub	sp, #12
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80061f6:	681c      	ldr	r4, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2100      	movs	r1, #0
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	4798      	blx	r3
 8006208:	4603      	mov	r3, r0
 800620a:	461a      	mov	r2, r3
 800620c:	2102      	movs	r1, #2
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	47a0      	blx	r4
    }
 8006212:	bf00      	nop
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	bd90      	pop	{r4, r7, pc}

0800621a <_ZN5L6470I8shield_2E8set_markEi>:
    virtual void set_mark(signed int position)
 800621a:	b590      	push	{r4, r7, lr}
 800621c:	b083      	sub	sp, #12
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
 8006222:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800622c:	681c      	ldr	r4, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6839      	ldr	r1, [r7, #0]
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	4798      	blx	r3
 800623e:	4603      	mov	r3, r0
 8006240:	461a      	mov	r2, r3
 8006242:	2102      	movs	r1, #2
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	47a0      	blx	r4
    }
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	bd90      	pop	{r4, r7, pc}

08006250 <_ZN5L6470I8shield_2E13set_max_speedEj>:
    virtual bool set_max_speed(unsigned int speed)
 8006250:	b590      	push	{r4, r7, lr}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8006262:	681c      	ldr	r4, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	ee07 2a90 	vmov	s15, r2
 8006274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006278:	eeb0 0a67 	vmov.f32	s0, s15
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	4798      	blx	r3
 8006280:	4603      	mov	r3, r0
 8006282:	461a      	mov	r2, r3
 8006284:	2106      	movs	r1, #6
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	47a0      	blx	r4
        return true;
 800628a:	2301      	movs	r3, #1
    }
 800628c:	4618      	mov	r0, r3
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	bd90      	pop	{r4, r7, pc}

08006294 <_ZN5L6470I8shield_2E13set_min_speedEj>:
    virtual bool set_min_speed(unsigned int speed)
 8006294:	b590      	push	{r4, r7, lr}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80062a6:	681c      	ldr	r4, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	ee07 2a90 	vmov	s15, r2
 80062b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062bc:	eeb0 0a67 	vmov.f32	s0, s15
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	4798      	blx	r3
 80062c4:	4603      	mov	r3, r0
 80062c6:	461a      	mov	r2, r3
 80062c8:	2107      	movs	r1, #7
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	47a0      	blx	r4
        return true;
 80062ce:	2301      	movs	r3, #1
    }
 80062d0:	4618      	mov	r0, r3
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd90      	pop	{r4, r7, pc}

080062d8 <_ZN5L6470I8shield_2E16set_accelerationEj>:
    virtual bool set_acceleration(unsigned int acceleration)
 80062d8:	b590      	push	{r4, r7, lr}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80062ea:	681c      	ldr	r4, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	683a      	ldr	r2, [r7, #0]
 80062f8:	ee07 2a90 	vmov	s15, r2
 80062fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006300:	eeb0 0a67 	vmov.f32	s0, s15
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	4798      	blx	r3
 8006308:	4603      	mov	r3, r0
 800630a:	461a      	mov	r2, r3
 800630c:	2104      	movs	r1, #4
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	47a0      	blx	r4
        return true;
 8006312:	2301      	movs	r3, #1
    }
 8006314:	4618      	mov	r0, r3
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	bd90      	pop	{r4, r7, pc}

0800631c <_ZN5L6470I8shield_2E16set_decelerationEj>:
    virtual bool set_deceleration(unsigned int deceleration)
 800631c:	b590      	push	{r4, r7, lr}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800632e:	681c      	ldr	r4, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	ee07 2a90 	vmov	s15, r2
 8006340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006344:	eeb0 0a67 	vmov.f32	s0, s15
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	4798      	blx	r3
 800634c:	4603      	mov	r3, r0
 800634e:	461a      	mov	r2, r3
 8006350:	2105      	movs	r1, #5
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	47a0      	blx	r4
        return true;
 8006356:	2301      	movs	r3, #1
    }
 8006358:	4618      	mov	r0, r3
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	bd90      	pop	{r4, r7, pc}

08006360 <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE>:
    virtual bool set_step_mode(step_mode_t step_mode)
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	460b      	mov	r3, r1
 800636a:	70fb      	strb	r3, [r7, #3]
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 800636c:	78fb      	ldrb	r3, [r7, #3]
 800636e:	2b07      	cmp	r3, #7
 8006370:	d901      	bls.n	8006376 <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 8006372:	2300      	movs	r3, #0
 8006374:	e00f      	b.n	8006396 <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        soft_hiz();
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	3380      	adds	r3, #128	; 0x80
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	78fa      	ldrb	r2, [r7, #3]
 800638e:	2115      	movs	r1, #21
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	4798      	blx	r3
        return true;
 8006394:	2301      	movs	r3, #1
    }
 8006396:	4618      	mov	r0, r3
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <_ZN5L6470I8shield_2E5go_toEi>:
    virtual void go_to(signed int position)
 800639e:	b590      	push	{r4, r7, lr}
 80063a0:	b083      	sub	sp, #12
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
 80063a6:	6039      	str	r1, [r7, #0]
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80063b0:	681c      	ldr	r4, [r3, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6839      	ldr	r1, [r7, #0]
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	4798      	blx	r3
 80063c2:	4603      	mov	r3, r0
 80063c4:	4619      	mov	r1, r3
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	47a0      	blx	r4
    }
 80063ca:	bf00      	nop
 80063cc:	370c      	adds	r7, #12
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd90      	pop	{r4, r7, pc}

080063d2 <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE>:
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 80063d2:	b5b0      	push	{r4, r5, r7, lr}
 80063d4:	b084      	sub	sp, #16
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	60f8      	str	r0, [r7, #12]
 80063da:	60b9      	str	r1, [r7, #8]
 80063dc:	4613      	mov	r3, r2
 80063de:	71fb      	strb	r3, [r7, #7]
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 80063e8:	681c      	ldr	r4, [r3, #0]
 80063ea:	79fb      	ldrb	r3, [r7, #7]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d101      	bne.n	80063f4 <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE+0x22>
 80063f0:	2501      	movs	r5, #1
 80063f2:	e000      	b.n	80063f6 <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE+0x24>
 80063f4:	2500      	movs	r5, #0
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68b9      	ldr	r1, [r7, #8]
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	4798      	blx	r3
 8006406:	4603      	mov	r3, r0
 8006408:	461a      	mov	r2, r3
 800640a:	4629      	mov	r1, r5
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	47a0      	blx	r4
    }
 8006410:	bf00      	nop
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bdb0      	pop	{r4, r5, r7, pc}

08006418 <_ZN5L6470I8shield_2E7go_homeEv>:
    virtual void go_home(void)
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
        L6470_GoHome();
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	4798      	blx	r3
    }
 800642e:	bf00      	nop
 8006430:	3708      	adds	r7, #8
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <_ZN5L6470I8shield_2E7go_markEv>:
    virtual void go_mark(void)
 8006436:	b580      	push	{r7, lr}
 8006438:	b082      	sub	sp, #8
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
        L6470_GoMark();
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	4798      	blx	r3
    }
 800644c:	bf00      	nop
 800644e:	3708      	adds	r7, #8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 8006454:	b5b0      	push	{r4, r5, r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	607b      	str	r3, [r7, #4]
 800645e:	460b      	mov	r3, r1
 8006460:	72fb      	strb	r3, [r7, #11]
 8006462:	4613      	mov	r3, r2
 8006464:	72bb      	strb	r3, [r7, #10]
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800646e:	681c      	ldr	r4, [r3, #0]
 8006470:	7abb      	ldrb	r3, [r7, #10]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d101      	bne.n	800647a <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8006476:	2501      	movs	r5, #1
 8006478:	e000      	b.n	800647c <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 800647a:	2500      	movs	r5, #0
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	ee07 2a90 	vmov	s15, r2
 800648c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006490:	eeb0 0a67 	vmov.f32	s0, s15
 8006494:	68f8      	ldr	r0, [r7, #12]
 8006496:	4798      	blx	r3
 8006498:	4603      	mov	r3, r0
 800649a:	7af9      	ldrb	r1, [r7, #11]
 800649c:	462a      	mov	r2, r5
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	47a0      	blx	r4
    }
 80064a2:	bf00      	nop
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bdb0      	pop	{r4, r5, r7, pc}

080064aa <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE>:
    virtual void run(StepperMotor::direction_t direction)
 80064aa:	b5b0      	push	{r4, r5, r7, lr}
 80064ac:	b082      	sub	sp, #8
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
 80064b2:	460b      	mov	r3, r1
 80064b4:	70fb      	strb	r3, [r7, #3]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80064be:	681c      	ldr	r4, [r3, #0]
 80064c0:	78fb      	ldrb	r3, [r7, #3]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d101      	bne.n	80064ca <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE+0x20>
 80064c6:	2501      	movs	r5, #1
 80064c8:	e000      	b.n	80064cc <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE+0x22>
 80064ca:	2500      	movs	r5, #0
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2106      	movs	r1, #6
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	4798      	blx	r3
 80064dc:	4603      	mov	r3, r0
 80064de:	461a      	mov	r2, r3
 80064e0:	4629      	mov	r1, r5
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	47a0      	blx	r4
    }
 80064e6:	bf00      	nop
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bdb0      	pop	{r4, r5, r7, pc}

080064ee <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj>:
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 80064ee:	b5b0      	push	{r4, r5, r7, lr}
 80064f0:	b084      	sub	sp, #16
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	60f8      	str	r0, [r7, #12]
 80064f6:	460b      	mov	r3, r1
 80064f8:	607a      	str	r2, [r7, #4]
 80064fa:	72fb      	strb	r3, [r7, #11]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8006504:	681c      	ldr	r4, [r3, #0]
 8006506:	7afb      	ldrb	r3, [r7, #11]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d101      	bne.n	8006510 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj+0x22>
 800650c:	2501      	movs	r5, #1
 800650e:	e000      	b.n	8006512 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj+0x24>
 8006510:	2500      	movs	r5, #0
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	ee07 2a90 	vmov	s15, r2
 8006522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006526:	eeb0 0a67 	vmov.f32	s0, s15
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	4798      	blx	r3
 800652e:	4603      	mov	r3, r0
 8006530:	461a      	mov	r2, r3
 8006532:	4629      	mov	r1, r5
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	47a0      	blx	r4
    }
 8006538:	bf00      	nop
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bdb0      	pop	{r4, r5, r7, pc}

08006540 <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj>:
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	460b      	mov	r3, r1
 800654a:	607a      	str	r2, [r7, #4]
 800654c:	72fb      	strb	r3, [r7, #11]
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	7afa      	ldrb	r2, [r7, #11]
 800655a:	2a01      	cmp	r2, #1
 800655c:	d101      	bne.n	8006562 <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj+0x22>
 800655e:	2101      	movs	r1, #1
 8006560:	e000      	b.n	8006564 <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj+0x24>
 8006562:	2100      	movs	r1, #0
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	4798      	blx	r3
    }
 800656a:	bf00      	nop
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <_ZN5L6470I8shield_2E9soft_stopEv>:
    virtual void soft_stop(void)
 8006572:	b580      	push	{r7, lr}
 8006574:	b082      	sub	sp, #8
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
        L6470_SoftStop();
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	4798      	blx	r3
    }
 8006588:	bf00      	nop
 800658a:	3708      	adds	r7, #8
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <_ZN5L6470I8shield_2E9hard_stopEv>:
    virtual void hard_stop(void)
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
        L6470_HardStop();
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	4798      	blx	r3
    }
 80065a6:	bf00      	nop
 80065a8:	3708      	adds	r7, #8
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <_ZN5L6470I8shield_2E8soft_hizEv>:
    virtual void soft_hiz(void)
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b082      	sub	sp, #8
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
        L6470_SoftHiZ();
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	4798      	blx	r3
    }
 80065c4:	bf00      	nop
 80065c6:	3708      	adds	r7, #8
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <_ZN5L6470I8shield_2E8hard_hizEv>:
    virtual void hard_hiz(void)
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
        L6470_HardHiZ();
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	4798      	blx	r3
    }
 80065e2:	bf00      	nop
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <_ZN5L6470I8shield_2E17wait_while_activeEv>:
    virtual void wait_while_active(void)
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b082      	sub	sp, #8
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 80065f2:	bf00      	nop
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2101      	movs	r1, #1
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	4798      	blx	r3
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	bf0c      	ite	eq
 800660a:	2301      	moveq	r3, #1
 800660c:	2300      	movne	r3, #0
 800660e:	b2db      	uxtb	r3, r3
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1ef      	bne.n	80065f4 <_ZN5L6470I8shield_2E17wait_while_activeEv+0xa>
    }
 8006614:	bf00      	nop
 8006616:	bf00      	nop
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE>:
    virtual void step_clock(StepperMotor::direction_t direction)
 800661e:	b580      	push	{r7, lr}
 8006620:	b082      	sub	sp, #8
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
 8006626:	460b      	mov	r3, r1
 8006628:	70fb      	strb	r3, [r7, #3]
        soft_hiz();
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	3380      	adds	r3, #128	; 0x80
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	78fa      	ldrb	r2, [r7, #3]
 8006642:	2a01      	cmp	r2, #1
 8006644:	d101      	bne.n	800664a <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE+0x2c>
 8006646:	2201      	movs	r2, #1
 8006648:	e000      	b.n	800664c <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE+0x2e>
 800664a:	2200      	movs	r2, #0
 800664c:	4611      	mov	r1, r2
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	4798      	blx	r3
    }
 8006652:	bf00      	nop
 8006654:	3708      	adds	r7, #8
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 800665a:	b580      	push	{r7, lr}
 800665c:	b082      	sub	sp, #8
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	460b      	mov	r3, r1
 8006664:	70fb      	strb	r3, [r7, #3]
 8006666:	4613      	mov	r3, r2
 8006668:	70bb      	strb	r3, [r7, #2]
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	78ba      	ldrb	r2, [r7, #2]
 8006676:	2a01      	cmp	r2, #1
 8006678:	d101      	bne.n	800667e <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 800667a:	2201      	movs	r2, #1
 800667c:	e000      	b.n	8006680 <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 800667e:	2200      	movs	r2, #0
 8006680:	78f9      	ldrb	r1, [r7, #3]
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	4798      	blx	r3
    }
 8006686:	bf00      	nop
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <_ZN5L6470I8shield_2E12reset_deviceEv>:
    virtual void reset_device(void)
 800668e:	b580      	push	{r7, lr}
 8006690:	b082      	sub	sp, #8
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
        L6470_ResetDevice();
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	4798      	blx	r3
    }
 80066a4:	bf00      	nop
 80066a6:	3708      	adds	r7, #8
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <_ZN5L6470I8shield_2E18prepare_get_statusEv>:
    virtual void prepare_get_status(void)
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetStatus();
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80066ca:	bf00      	nop
 80066cc:	3708      	adds	r7, #8
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <_ZN5L6470I8shield_2E21prepare_get_parameterEj>:
    virtual void prepare_get_parameter(unsigned int parameter)
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b082      	sub	sp, #8
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	6039      	str	r1, [r7, #0]
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	b2d2      	uxtb	r2, r2
 80066ea:	4611      	mov	r1, r2
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80066f8:	bf00      	nop
 80066fa:	3708      	adds	r7, #8
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <_ZN5L6470I8shield_2E20prepare_get_positionEv>:
    virtual void prepare_get_position(void)
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2100      	movs	r1, #0
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006720:	bf00      	nop
 8006722:	3708      	adds	r7, #8
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <_ZN5L6470I8shield_2E16prepare_get_markEv>:
    virtual void prepare_get_mark(void)
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2102      	movs	r1, #2
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2202      	movs	r2, #2
 8006744:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006748:	bf00      	nop
 800674a:	3708      	adds	r7, #8
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <_ZN5L6470I8shield_2E17prepare_get_speedEv>:
    virtual void prepare_get_speed(void)
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2103      	movs	r1, #3
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2203      	movs	r2, #3
 800676c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006770:	bf00      	nop
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <_ZN5L6470I8shield_2E21prepare_get_max_speedEv>:
    virtual void prepare_get_max_speed(void)
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2106      	movs	r1, #6
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2204      	movs	r2, #4
 8006794:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006798:	bf00      	nop
 800679a:	3708      	adds	r7, #8
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <_ZN5L6470I8shield_2E21prepare_get_min_speedEv>:
    virtual void prepare_get_min_speed(void)
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2107      	movs	r1, #7
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2205      	movs	r2, #5
 80067bc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80067c0:	bf00      	nop
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <_ZN5L6470I8shield_2E24prepare_get_accelerationEv>:
    virtual void prepare_get_acceleration(void)
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2104      	movs	r1, #4
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2206      	movs	r2, #6
 80067e4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80067e8:	bf00      	nop
 80067ea:	3708      	adds	r7, #8
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <_ZN5L6470I8shield_2E24prepare_get_decelerationEv>:
    virtual void prepare_get_deceleration(void)
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2105      	movs	r1, #5
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2207      	movs	r2, #7
 800680c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006810:	bf00      	nop
 8006812:	3708      	adds	r7, #8
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <_ZN5L6470I8shield_2E21prepare_get_directionEv>:
    virtual void prepare_get_direction(void)
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
        if (!L6470_DaisyChain_HalfPrepared) {
 8006820:	4b0b      	ldr	r3, [pc, #44]	; (8006850 <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x38>)
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d10a      	bne.n	800683e <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x26>
            L6470_DaisyChain_HalfPrepared = ONE_F;
 8006828:	4b09      	ldr	r3, [pc, #36]	; (8006850 <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x38>)
 800682a:	2201      	movs	r2, #1
 800682c:	701a      	strb	r2, [r3, #0]
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4906      	ldr	r1, [pc, #24]	; (8006854 <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x3c>)
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	4798      	blx	r3
        prepared_action = PREPARED_GET_DIRECTION;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2208      	movs	r2, #8
 8006842:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006846:	bf00      	nop
 8006848:	3708      	adds	r7, #8
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	2000023d 	.word	0x2000023d
 8006854:	20000240 	.word	0x20000240

08006858 <_ZN5L6470I8shield_2E21prepare_set_parameterEjj>:
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	607a      	str	r2, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	b2d1      	uxtb	r1, r2
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006880:	bf00      	nop
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <_ZN5L6470I8shield_2E16prepare_set_homeEv>:
    virtual void prepare_set_home(void)
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetPos();
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80068a6:	bf00      	nop
 80068a8:	3708      	adds	r7, #8
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <_ZN5L6470I8shield_2E16prepare_set_markEv>:
    virtual void prepare_set_mark(void)
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b082      	sub	sp, #8
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2200      	movs	r2, #0
 80068c2:	2102      	movs	r1, #2
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2209      	movs	r2, #9
 80068cc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80068d0:	bf00      	nop
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <_ZN5L6470I8shield_2E16prepare_set_markEi>:
    virtual void prepare_set_mark(signed int position)
 80068d8:	b590      	push	{r4, r7, lr}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80068ea:	681c      	ldr	r4, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	6839      	ldr	r1, [r7, #0]
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	4798      	blx	r3
 80068fc:	4603      	mov	r3, r0
 80068fe:	461a      	mov	r2, r3
 8006900:	2102      	movs	r1, #2
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800690e:	bf00      	nop
 8006910:	370c      	adds	r7, #12
 8006912:	46bd      	mov	sp, r7
 8006914:	bd90      	pop	{r4, r7, pc}

08006916 <_ZN5L6470I8shield_2E17prepare_set_speedEj>:
    virtual void prepare_set_speed(unsigned int speed)
 8006916:	b590      	push	{r4, r7, lr}
 8006918:	b083      	sub	sp, #12
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
 800691e:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006928:	681c      	ldr	r4, [r3, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	683a      	ldr	r2, [r7, #0]
 8006936:	ee07 2a90 	vmov	s15, r2
 800693a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800693e:	eeb0 0a67 	vmov.f32	s0, s15
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	4798      	blx	r3
 8006946:	4603      	mov	r3, r0
 8006948:	461a      	mov	r2, r3
 800694a:	2103      	movs	r1, #3
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006958:	bf00      	nop
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	bd90      	pop	{r4, r7, pc}

08006960 <_ZN5L6470I8shield_2E21prepare_set_max_speedEj>:
    virtual void prepare_set_max_speed(unsigned int speed)
 8006960:	b590      	push	{r4, r7, lr}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006972:	681c      	ldr	r4, [r3, #0]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	ee07 2a90 	vmov	s15, r2
 8006984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006988:	eeb0 0a67 	vmov.f32	s0, s15
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	4798      	blx	r3
 8006990:	4603      	mov	r3, r0
 8006992:	461a      	mov	r2, r3
 8006994:	2106      	movs	r1, #6
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80069a2:	bf00      	nop
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd90      	pop	{r4, r7, pc}

080069aa <_ZN5L6470I8shield_2E21prepare_set_min_speedEj>:
    virtual void prepare_set_min_speed(unsigned int speed)
 80069aa:	b590      	push	{r4, r7, lr}
 80069ac:	b083      	sub	sp, #12
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
 80069b2:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80069bc:	681c      	ldr	r4, [r3, #0]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	683a      	ldr	r2, [r7, #0]
 80069ca:	ee07 2a90 	vmov	s15, r2
 80069ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069d2:	eeb0 0a67 	vmov.f32	s0, s15
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	4798      	blx	r3
 80069da:	4603      	mov	r3, r0
 80069dc:	461a      	mov	r2, r3
 80069de:	2107      	movs	r1, #7
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd90      	pop	{r4, r7, pc}

080069f4 <_ZN5L6470I8shield_2E24prepare_set_accelerationEj>:
    virtual void prepare_set_acceleration(unsigned int acceleration)
 80069f4:	b590      	push	{r4, r7, lr}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006a06:	681c      	ldr	r4, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	683a      	ldr	r2, [r7, #0]
 8006a14:	ee07 2a90 	vmov	s15, r2
 8006a18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a1c:	eeb0 0a67 	vmov.f32	s0, s15
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	4798      	blx	r3
 8006a24:	4603      	mov	r3, r0
 8006a26:	461a      	mov	r2, r3
 8006a28:	2104      	movs	r1, #4
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006a36:	bf00      	nop
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd90      	pop	{r4, r7, pc}

08006a3e <_ZN5L6470I8shield_2E24prepare_set_decelerationEj>:
    virtual void prepare_set_deceleration(unsigned int deceleration)
 8006a3e:	b590      	push	{r4, r7, lr}
 8006a40:	b083      	sub	sp, #12
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
 8006a46:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006a50:	681c      	ldr	r4, [r3, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	683a      	ldr	r2, [r7, #0]
 8006a5e:	ee07 2a90 	vmov	s15, r2
 8006a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a66:	eeb0 0a67 	vmov.f32	s0, s15
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	4798      	blx	r3
 8006a6e:	4603      	mov	r3, r0
 8006a70:	461a      	mov	r2, r3
 8006a72:	2105      	movs	r1, #5
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006a80:	bf00      	nop
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd90      	pop	{r4, r7, pc}

08006a88 <_ZN5L6470I8shield_2E13prepare_go_toEi>:
    virtual void prepare_go_to(signed int position)
 8006a88:	b590      	push	{r4, r7, lr}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006a9a:	681c      	ldr	r4, [r3, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6839      	ldr	r1, [r7, #0]
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	4798      	blx	r3
 8006aac:	4603      	mov	r3, r0
 8006aae:	4619      	mov	r1, r3
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd90      	pop	{r4, r7, pc}

08006ac4 <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE>:
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 8006ac4:	b5b0      	push	{r4, r5, r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	71fb      	strb	r3, [r7, #7]
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006ada:	681c      	ldr	r4, [r3, #0]
 8006adc:	79fb      	ldrb	r3, [r7, #7]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d101      	bne.n	8006ae6 <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 8006ae2:	2501      	movs	r5, #1
 8006ae4:	e000      	b.n	8006ae8 <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 8006ae6:	2500      	movs	r5, #0
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68b9      	ldr	r1, [r7, #8]
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	4798      	blx	r3
 8006af8:	4603      	mov	r3, r0
 8006afa:	461a      	mov	r2, r3
 8006afc:	4629      	mov	r1, r5
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006b0a:	bf00      	nop
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bdb0      	pop	{r4, r5, r7, pc}

08006b12 <_ZN5L6470I8shield_2E15prepare_go_homeEv>:
    virtual void prepare_go_home(void)
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b082      	sub	sp, #8
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoHome();
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006b30:	bf00      	nop
 8006b32:	3708      	adds	r7, #8
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <_ZN5L6470I8shield_2E15prepare_go_markEv>:
    virtual void prepare_go_mark(void)
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoMark();
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006b56:	bf00      	nop
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 8006b5e:	b5b0      	push	{r4, r5, r7, lr}
 8006b60:	b084      	sub	sp, #16
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	60f8      	str	r0, [r7, #12]
 8006b66:	607b      	str	r3, [r7, #4]
 8006b68:	460b      	mov	r3, r1
 8006b6a:	72fb      	strb	r3, [r7, #11]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	72bb      	strb	r3, [r7, #10]
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006b78:	681c      	ldr	r4, [r3, #0]
 8006b7a:	7abb      	ldrb	r3, [r7, #10]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d101      	bne.n	8006b84 <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8006b80:	2501      	movs	r5, #1
 8006b82:	e000      	b.n	8006b86 <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8006b84:	2500      	movs	r5, #0
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	ee07 2a90 	vmov	s15, r2
 8006b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b9a:	eeb0 0a67 	vmov.f32	s0, s15
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	4798      	blx	r3
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	7af9      	ldrb	r1, [r7, #11]
 8006ba6:	462a      	mov	r2, r5
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006bb4:	bf00      	nop
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bdb0      	pop	{r4, r5, r7, pc}

08006bbc <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE>:
    virtual void prepare_run(StepperMotor::direction_t direction)
 8006bbc:	b5b0      	push	{r4, r5, r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006bd0:	681c      	ldr	r4, [r3, #0]
 8006bd2:	78fb      	ldrb	r3, [r7, #3]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d101      	bne.n	8006bdc <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE+0x20>
 8006bd8:	2501      	movs	r5, #1
 8006bda:	e000      	b.n	8006bde <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE+0x22>
 8006bdc:	2500      	movs	r5, #0
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2106      	movs	r1, #6
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	4798      	blx	r3
 8006bee:	4603      	mov	r3, r0
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	4629      	mov	r1, r5
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006c00:	bf00      	nop
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bdb0      	pop	{r4, r5, r7, pc}

08006c08 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj>:
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 8006c08:	b5b0      	push	{r4, r5, r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	460b      	mov	r3, r1
 8006c12:	607a      	str	r2, [r7, #4]
 8006c14:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006c1e:	681c      	ldr	r4, [r3, #0]
 8006c20:	7afb      	ldrb	r3, [r7, #11]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d101      	bne.n	8006c2a <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 8006c26:	2501      	movs	r5, #1
 8006c28:	e000      	b.n	8006c2c <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 8006c2a:	2500      	movs	r5, #0
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	ee07 2a90 	vmov	s15, r2
 8006c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c40:	eeb0 0a67 	vmov.f32	s0, s15
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	4798      	blx	r3
 8006c48:	4603      	mov	r3, r0
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	4629      	mov	r1, r5
 8006c4e:	68f8      	ldr	r0, [r7, #12]
 8006c50:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006c5a:	bf00      	nop
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bdb0      	pop	{r4, r5, r7, pc}

08006c62 <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj>:
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b084      	sub	sp, #16
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	60f8      	str	r0, [r7, #12]
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	607a      	str	r2, [r7, #4]
 8006c6e:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	7afa      	ldrb	r2, [r7, #11]
 8006c7c:	2a01      	cmp	r2, #1
 8006c7e:	d101      	bne.n	8006c84 <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 8006c80:	2101      	movs	r1, #1
 8006c82:	e000      	b.n	8006c86 <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 8006c84:	2100      	movs	r1, #0
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006c94:	bf00      	nop
 8006c96:	3710      	adds	r7, #16
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <_ZN5L6470I8shield_2E17prepare_soft_stopEv>:
    virtual void prepare_soft_stop(void)
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftStop();
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006cba:	bf00      	nop
 8006cbc:	3708      	adds	r7, #8
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <_ZN5L6470I8shield_2E17prepare_hard_stopEv>:
    virtual void prepare_hard_stop(void)
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b082      	sub	sp, #8
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardStop();
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006ce0:	bf00      	nop
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <_ZN5L6470I8shield_2E16prepare_soft_hizEv>:
    virtual void prepare_soft_hiz(void)
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftHiZ();
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006d06:	bf00      	nop
 8006d08:	3708      	adds	r7, #8
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <_ZN5L6470I8shield_2E16prepare_hard_hizEv>:
    virtual void prepare_hard_hiz(void)
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b082      	sub	sp, #8
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardHiZ();
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006d2c:	bf00      	nop
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE>:
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	78fa      	ldrb	r2, [r7, #3]
 8006d4c:	2a01      	cmp	r2, #1
 8006d4e:	d101      	bne.n	8006d54 <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 8006d50:	2201      	movs	r2, #1
 8006d52:	e000      	b.n	8006d56 <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 8006d54:	2200      	movs	r2, #0
 8006d56:	4611      	mov	r1, r2
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006d64:	bf00      	nop
 8006d66:	3708      	adds	r7, #8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	460b      	mov	r3, r1
 8006d76:	70fb      	strb	r3, [r7, #3]
 8006d78:	4613      	mov	r3, r2
 8006d7a:	70bb      	strb	r3, [r7, #2]
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	78ba      	ldrb	r2, [r7, #2]
 8006d88:	2a01      	cmp	r2, #1
 8006d8a:	d101      	bne.n	8006d90 <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	e000      	b.n	8006d92 <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8006d90:	2200      	movs	r2, #0
 8006d92:	78f9      	ldrb	r1, [r7, #3]
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006da0:	bf00      	nop
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <_ZN5L6470I8shield_2E20prepare_reset_deviceEv>:
    virtual void prepare_reset_device(void)
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetDevice();
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006dc6:	bf00      	nop
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <_ZN5L6470I8shield_2E24perform_prepared_actionsEv>:
    uint8_t* perform_prepared_actions(void)
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b082      	sub	sp, #8
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
        return L6470_PerformPreparedApplicationCommand();
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	4798      	blx	r3
 8006de4:	4603      	mov	r3, r0
    }
 8006de6:	4618      	mov	r0, r3
 8006de8:	3708      	adds	r7, #8
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <_ZN5L6470I8shield_2E19get_prepared_actionEv>:
    prepared_action_t get_prepared_action(void)
 8006dee:	b480      	push	{r7}
 8006df0:	b083      	sub	sp, #12
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
        return prepared_action;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    }
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <_ZN5L6470I8shield_2E10get_resultEPh>:
    int32_t get_result(uint8_t *raw_data)
 8006e08:	b5b0      	push	{r4, r5, r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
        switch (prepared_action) {
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	2b07      	cmp	r3, #7
 8006e1c:	f200 80fe 	bhi.w	800701c <_ZN5L6470I8shield_2E10get_resultEPh+0x214>
 8006e20:	a201      	add	r2, pc, #4	; (adr r2, 8006e28 <_ZN5L6470I8shield_2E10get_resultEPh+0x20>)
 8006e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e26:	bf00      	nop
 8006e28:	08006e49 	.word	0x08006e49
 8006e2c:	08006e75 	.word	0x08006e75
 8006e30:	08006ea3 	.word	0x08006ea3
 8006e34:	08006ee7 	.word	0x08006ee7
 8006e38:	08006f2d 	.word	0x08006f2d
 8006e3c:	08006f73 	.word	0x08006f73
 8006e40:	08006fb9 	.word	0x08006fb9
 8006e44:	08006fff 	.word	0x08006fff
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8006e50:	681c      	ldr	r4, [r3, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	6a12      	ldr	r2, [r2, #32]
 8006e60:	7b92      	ldrb	r2, [r2, #14]
 8006e62:	6839      	ldr	r1, [r7, #0]
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	4798      	blx	r3
 8006e68:	4603      	mov	r3, r0
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	47a0      	blx	r4
 8006e70:	4603      	mov	r3, r0
 8006e72:	e0d4      	b.n	800701e <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8006e7c:	681c      	ldr	r4, [r3, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	6a12      	ldr	r2, [r2, #32]
 8006e8c:	3228      	adds	r2, #40	; 0x28
 8006e8e:	7b92      	ldrb	r2, [r2, #14]
 8006e90:	6839      	ldr	r1, [r7, #0]
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	4798      	blx	r3
 8006e96:	4603      	mov	r3, r0
 8006e98:	4619      	mov	r1, r3
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	47a0      	blx	r4
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	e0bd      	b.n	800701e <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006eaa:	681c      	ldr	r4, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8006eb4:	681d      	ldr	r5, [r3, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	6a12      	ldr	r2, [r2, #32]
 8006ec4:	323c      	adds	r2, #60	; 0x3c
 8006ec6:	7b92      	ldrb	r2, [r2, #14]
 8006ec8:	6839      	ldr	r1, [r7, #0]
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	4798      	blx	r3
 8006ece:	4603      	mov	r3, r0
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	47a8      	blx	r5
 8006ed6:	eef0 7a40 	vmov.f32	s15, s0
 8006eda:	eeb0 0a67 	vmov.f32	s0, s15
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	47a0      	blx	r4
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	e09b      	b.n	800701e <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006eee:	681c      	ldr	r4, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ef8:	681d      	ldr	r5, [r3, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	6a12      	ldr	r2, [r2, #32]
 8006f08:	3278      	adds	r2, #120	; 0x78
 8006f0a:	7b92      	ldrb	r2, [r2, #14]
 8006f0c:	6839      	ldr	r1, [r7, #0]
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	4798      	blx	r3
 8006f12:	4603      	mov	r3, r0
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	4619      	mov	r1, r3
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	47a8      	blx	r5
 8006f1c:	eef0 7a40 	vmov.f32	s15, s0
 8006f20:	eeb0 0a67 	vmov.f32	s0, s15
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	47a0      	blx	r4
 8006f28:	4603      	mov	r3, r0
 8006f2a:	e078      	b.n	800701e <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006f34:	681c      	ldr	r4, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006f3e:	681d      	ldr	r5, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	6a12      	ldr	r2, [r2, #32]
 8006f4e:	328c      	adds	r2, #140	; 0x8c
 8006f50:	7b92      	ldrb	r2, [r2, #14]
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	4798      	blx	r3
 8006f58:	4603      	mov	r3, r0
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	47a8      	blx	r5
 8006f62:	eef0 7a40 	vmov.f32	s15, s0
 8006f66:	eeb0 0a67 	vmov.f32	s0, s15
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	47a0      	blx	r4
 8006f6e:	4603      	mov	r3, r0
 8006f70:	e055      	b.n	800701e <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006f7a:	681c      	ldr	r4, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006f84:	681d      	ldr	r5, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	6a12      	ldr	r2, [r2, #32]
 8006f94:	3250      	adds	r2, #80	; 0x50
 8006f96:	7b92      	ldrb	r2, [r2, #14]
 8006f98:	6839      	ldr	r1, [r7, #0]
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	4798      	blx	r3
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	47a8      	blx	r5
 8006fa8:	eef0 7a40 	vmov.f32	s15, s0
 8006fac:	eeb0 0a67 	vmov.f32	s0, s15
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	47a0      	blx	r4
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	e032      	b.n	800701e <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006fc0:	681c      	ldr	r4, [r3, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8006fca:	681d      	ldr	r5, [r3, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	6a12      	ldr	r2, [r2, #32]
 8006fda:	3264      	adds	r2, #100	; 0x64
 8006fdc:	7b92      	ldrb	r2, [r2, #14]
 8006fde:	6839      	ldr	r1, [r7, #0]
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	4798      	blx	r3
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	4619      	mov	r1, r3
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	47a8      	blx	r5
 8006fee:	eef0 7a40 	vmov.f32	s15, s0
 8006ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	47a0      	blx	r4
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	e00f      	b.n	800701e <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2104      	movs	r1, #4
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	4798      	blx	r3
 800700e:	4603      	mov	r3, r0
 8007010:	2b01      	cmp	r3, #1
 8007012:	d101      	bne.n	8007018 <_ZN5L6470I8shield_2E10get_resultEPh+0x210>
 8007014:	2301      	movs	r3, #1
 8007016:	e002      	b.n	800701e <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
 8007018:	2300      	movs	r3, #0
 800701a:	e000      	b.n	800701e <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return 0;
 800701c:	2300      	movs	r3, #0
    }
 800701e:	4618      	mov	r0, r3
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bdb0      	pop	{r4, r5, r7, pc}
 8007026:	bf00      	nop

08007028 <_ZN5L6470I8shield_2E13L6470_DISABLEEv>:
    void L6470_DISABLE(void)
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6898      	ldr	r0, [r3, #8]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	899b      	ldrh	r3, [r3, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	4619      	mov	r1, r3
 800703c:	f006 fb24 	bl	800d688 <HAL_GPIO_WritePin>
    }
 8007040:	bf00      	nop
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm>:
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  if (AbsPos > L6470_MAX_POSITION)
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007058:	d303      	bcc.n	8007062 <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	f5a3 0380 	sub.w	r3, r3, #4194304	; 0x400000
 8007060:	e000      	b.n	8007064 <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm+0x1c>
    return AbsPos;
 8007062:	683b      	ldr	r3, [r7, #0]
}
 8007064:	4618      	mov	r0, r3
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl>:
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	db05      	blt.n	800708c <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x1c>
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007086:	da01      	bge.n	800708c <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	e00c      	b.n	80070a6 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x36>
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
 8007092:	db06      	blt.n	80070a2 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x32>
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	da03      	bge.n	80070a2 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
 80070a0:	e001      	b.n	80070a6 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x36>
      return (L6470_POSITION_RANGE + 1);        // OVF
 80070a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
	...

080070b4 <_ZN5L6470I8shield_2E20L6470_Speed_2_Step_sEm>:
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  return (Speed * ((float)14.9012e-3));
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	ee07 3a90 	vmov	s15, r3
 80070c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80070e0 <_ZN5L6470I8shield_2E20L6470_Speed_2_Step_sEm+0x2c>
 80070cc:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80070d0:	eeb0 0a67 	vmov.f32	s0, s15
 80070d4:	370c      	adds	r7, #12
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	3c74242a 	.word	0x3c74242a

080070e4 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf>:
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 80070f0:	edd7 7a00 	vldr	s15, [r7]
 80070f4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8007128 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x44>
 80070f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007100:	d80a      	bhi.n	8007118 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 8007102:	ed97 7a00 	vldr	s14, [r7]
 8007106:	eddf 6a09 	vldr	s13, [pc, #36]	; 800712c <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x48>
 800710a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800710e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007112:	ee17 3a90 	vmov	r3, s15
 8007116:	e000      	b.n	800711a <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x36>
    return 0;   // Warning
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	370c      	adds	r7, #12
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	4674241b 	.word	0x4674241b
 800712c:	3c74242a 	.word	0x3c74242a

08007130 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et>:
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	460b      	mov	r3, r1
 800713a:	807b      	strh	r3, [r7, #2]
  if (Acc <= L6470_MAX_ACC)
 800713c:	887b      	ldrh	r3, [r7, #2]
 800713e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007142:	d209      	bcs.n	8007158 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 8007144:	887b      	ldrh	r3, [r7, #2]
 8007146:	ee07 3a90 	vmov	s15, r3
 800714a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800714e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800716c <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x3c>
 8007152:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007156:	e001      	b.n	800715c <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x2c>
    return 0;   // Warning
 8007158:	eddf 7a05 	vldr	s15, [pc, #20]	; 8007170 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x40>
}
 800715c:	eeb0 0a67 	vmov.f32	s0, s15
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	4168d4fe 	.word	0x4168d4fe
 8007170:	00000000 	.word	0x00000000

08007174 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 8007180:	edd7 7a00 	vldr	s15, [r7]
 8007184:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80071b8 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x44>
 8007188:	eef4 7ac7 	vcmpe.f32	s15, s14
 800718c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007190:	d80b      	bhi.n	80071aa <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8007192:	ed97 7a00 	vldr	s14, [r7]
 8007196:	eddf 6a09 	vldr	s13, [pc, #36]	; 80071bc <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x48>
 800719a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800719e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071a2:	ee17 3a90 	vmov	r3, s15
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	e000      	b.n	80071ac <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x38>
    return 0;   // Warning
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr
 80071b8:	4768c671 	.word	0x4768c671
 80071bc:	4168d4fe 	.word	0x4168d4fe

080071c0 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et>:
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	460b      	mov	r3, r1
 80071ca:	807b      	strh	r3, [r7, #2]
  if (Dec <= L6470_MAX_DEC)
 80071cc:	887b      	ldrh	r3, [r7, #2]
 80071ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071d2:	d209      	bcs.n	80071e8 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 80071d4:	887b      	ldrh	r3, [r7, #2]
 80071d6:	ee07 3a90 	vmov	s15, r3
 80071da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071de:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80071fc <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x3c>
 80071e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80071e6:	e001      	b.n	80071ec <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x2c>
    return 0;   // Warning
 80071e8:	eddf 7a05 	vldr	s15, [pc, #20]	; 8007200 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x40>
}
 80071ec:	eeb0 0a67 	vmov.f32	s0, s15
 80071f0:	370c      	adds	r7, #12
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	4168d4fe 	.word	0x4168d4fe
 8007200:	00000000 	.word	0x00000000

08007204 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 8007210:	edd7 7a00 	vldr	s15, [r7]
 8007214:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8007248 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x44>
 8007218:	eef4 7ac7 	vcmpe.f32	s15, s14
 800721c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007220:	d80b      	bhi.n	800723a <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8007222:	ed97 7a00 	vldr	s14, [r7]
 8007226:	eddf 6a09 	vldr	s13, [pc, #36]	; 800724c <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x48>
 800722a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800722e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007232:	ee17 3a90 	vmov	r3, s15
 8007236:	b29b      	uxth	r3, r3
 8007238:	e000      	b.n	800723c <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x38>
    return 0;   // Warning
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr
 8007248:	4768c671 	.word	0x4768c671
 800724c:	4168d4fe 	.word	0x4168d4fe

08007250 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	460b      	mov	r3, r1
 800725a:	807b      	strh	r3, [r7, #2]
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 800725c:	887b      	ldrh	r3, [r7, #2]
 800725e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007262:	d209      	bcs.n	8007278 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 8007264:	887b      	ldrh	r3, [r7, #2]
 8007266:	ee07 3a90 	vmov	s15, r3
 800726a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800726e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800728c <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 8007272:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007276:	e001      	b.n	800727c <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 8007278:	eddf 7a05 	vldr	s15, [pc, #20]	; 8007290 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 800727c:	eeb0 0a67 	vmov.f32	s0, s15
 8007280:	370c      	adds	r7, #12
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop
 800728c:	4174240b 	.word	0x4174240b
 8007290:	00000000 	.word	0x00000000

08007294 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 80072a0:	edd7 7a00 	vldr	s15, [r7]
 80072a4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80072d8 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x44>
 80072a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072b0:	d80b      	bhi.n	80072ca <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 80072b2:	ed97 7a00 	vldr	s14, [r7]
 80072b6:	eddf 6a09 	vldr	s13, [pc, #36]	; 80072dc <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x48>
 80072ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80072be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072c2:	ee17 3a90 	vmov	r3, s15
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	e000      	b.n	80072cc <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x38>
    return 0;   // Warning
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr
 80072d8:	4673e702 	.word	0x4673e702
 80072dc:	4174240b 	.word	0x4174240b

080072e0 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	460b      	mov	r3, r1
 80072ea:	807b      	strh	r3, [r7, #2]
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 80072ec:	887b      	ldrh	r3, [r7, #2]
 80072ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072f2:	d209      	bcs.n	8007308 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 80072f4:	887b      	ldrh	r3, [r7, #2]
 80072f6:	ee07 3a90 	vmov	s15, r3
 80072fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072fe:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800731c <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x3c>
 8007302:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007306:	e001      	b.n	800730c <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 8007308:	eddf 7a05 	vldr	s15, [pc, #20]	; 8007320 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 800730c:	eeb0 0a67 	vmov.f32	s0, s15
 8007310:	370c      	adds	r7, #12
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	3e742401 	.word	0x3e742401
 8007320:	00000000 	.word	0x00000000

08007324 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 8007330:	edd7 7a00 	vldr	s15, [r7]
 8007334:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8007368 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x44>
 8007338:	eef4 7ac7 	vcmpe.f32	s15, s14
 800733c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007340:	d80b      	bhi.n	800735a <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 8007342:	ed97 7a00 	vldr	s14, [r7]
 8007346:	eddf 6a09 	vldr	s13, [pc, #36]	; 800736c <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x48>
 800734a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800734e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007352:	ee17 3a90 	vmov	r3, s15
 8007356:	b29b      	uxth	r3, r3
 8007358:	e000      	b.n	800735c <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x38>
    return 0;   // Warning
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr
 8007368:	447414bf 	.word	0x447414bf
 800736c:	3e742401 	.word	0x3e742401

08007370 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt>:
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	460b      	mov	r3, r1
 800737a:	807b      	strh	r3, [r7, #2]
  if (FsSpd <= L6470_MAX_FS_SPD)
 800737c:	887b      	ldrh	r3, [r7, #2]
 800737e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007382:	d219      	bcs.n	80073b8 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 8007384:	887b      	ldrh	r3, [r7, #2]
 8007386:	4618      	mov	r0, r3
 8007388:	f7f9 f8fc 	bl	8000584 <__aeabi_i2d>
 800738c:	f04f 0200 	mov.w	r2, #0
 8007390:	4b0e      	ldr	r3, [pc, #56]	; (80073cc <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x5c>)
 8007392:	f7f8 ffab 	bl	80002ec <__adddf3>
 8007396:	4602      	mov	r2, r0
 8007398:	460b      	mov	r3, r1
 800739a:	4610      	mov	r0, r2
 800739c:	4619      	mov	r1, r3
 800739e:	f04f 0200 	mov.w	r2, #0
 80073a2:	4b0b      	ldr	r3, [pc, #44]	; (80073d0 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x60>)
 80073a4:	f7f9 f958 	bl	8000658 <__aeabi_dmul>
 80073a8:	4602      	mov	r2, r0
 80073aa:	460b      	mov	r3, r1
 80073ac:	4610      	mov	r0, r2
 80073ae:	4619      	mov	r1, r3
 80073b0:	f7f9 fc2a 	bl	8000c08 <__aeabi_d2f>
 80073b4:	4603      	mov	r3, r0
 80073b6:	e001      	b.n	80073bc <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x4c>
    return 0;   // Warning
 80073b8:	f04f 0300 	mov.w	r3, #0
}
 80073bc:	ee07 3a90 	vmov	s15, r3
 80073c0:	eeb0 0a67 	vmov.f32	s0, s15
 80073c4:	3708      	adds	r7, #8
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	3fe00000 	.word	0x3fe00000
 80073d0:	402e8000 	.word	0x402e8000

080073d4 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 80073e0:	edd7 7a00 	vldr	s15, [r7]
 80073e4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8007420 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x4c>
 80073e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073f0:	d80f      	bhi.n	8007412 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 80073f2:	ed97 7a00 	vldr	s14, [r7]
 80073f6:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8007424 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x50>
 80073fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80073fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007402:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007406:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800740a:	ee17 3a90 	vmov	r3, s15
 800740e:	b29b      	uxth	r3, r3
 8007410:	e000      	b.n	8007414 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x40>
    return 0;   // Warning
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr
 8007420:	4673e180 	.word	0x4673e180
 8007424:	41740000 	.word	0x41740000

08007428 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	460b      	mov	r3, r1
 8007432:	807b      	strh	r3, [r7, #2]
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 8007434:	887b      	ldrh	r3, [r7, #2]
 8007436:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800743a:	d209      	bcs.n	8007450 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 800743c:	887b      	ldrh	r3, [r7, #2]
 800743e:	ee07 3a90 	vmov	s15, r3
 8007442:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007446:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8007464 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x3c>
 800744a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800744e:	e001      	b.n	8007454 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 8007450:	eddf 7a05 	vldr	s15, [pc, #20]	; 8007468 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 8007454:	eeb0 0a67 	vmov.f32	s0, s15
 8007458:	370c      	adds	r7, #12
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	3d7423f4 	.word	0x3d7423f4
 8007468:	00000000 	.word	0x00000000

0800746c <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 8007478:	edd7 7a00 	vldr	s15, [r7]
 800747c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80074b0 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x44>
 8007480:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007488:	d80b      	bhi.n	80074a2 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 800748a:	ed97 7a00 	vldr	s14, [r7]
 800748e:	eddf 6a09 	vldr	s13, [pc, #36]	; 80074b4 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x48>
 8007492:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800749a:	ee17 3a90 	vmov	r3, s15
 800749e:	b29b      	uxth	r3, r3
 80074a0:	e000      	b.n	80074a4 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x38>
    return 0;   // Warning
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	370c      	adds	r7, #12
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr
 80074b0:	44742023 	.word	0x44742023
 80074b4:	3d7423f4 	.word	0x3d7423f4

080074b8 <_ZN5L6470I8shield_2E20L6470_StSlp_2_s_StepEh>:
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	460b      	mov	r3, r1
 80074c2:	70fb      	strb	r3, [r7, #3]
    return (StSlp * ((float)1.5686e-5));
 80074c4:	78fb      	ldrb	r3, [r7, #3]
 80074c6:	ee07 3a90 	vmov	s15, r3
 80074ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074ce:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80074e4 <_ZN5L6470I8shield_2E20L6470_StSlp_2_s_StepEh+0x2c>
 80074d2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80074d6:	eeb0 0a67 	vmov.f32	s0, s15
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr
 80074e4:	3783956e 	.word	0x3783956e

080074e8 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 80074f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80074f8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8007530 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x48>
 80074fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007504:	d80c      	bhi.n	8007520 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8007506:	ed97 7a02 	vldr	s14, [r7, #8]
 800750a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8007534 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x4c>
 800750e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007512:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007516:	edc7 7a01 	vstr	s15, [r7, #4]
 800751a:	793b      	ldrb	r3, [r7, #4]
 800751c:	b2db      	uxtb	r3, r3
 800751e:	e000      	b.n	8007522 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x3a>
    return 0;   // Warning
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3714      	adds	r7, #20
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	3b8311d9 	.word	0x3b8311d9
 8007534:	3783956e 	.word	0x3783956e

08007538 <_ZN5L6470I8shield_2E23L6470_FnSlpAcc_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	460b      	mov	r3, r1
 8007542:	70fb      	strb	r3, [r7, #3]
    return (FnSlpAcc * ((float)1.5686e-5));
 8007544:	78fb      	ldrb	r3, [r7, #3]
 8007546:	ee07 3a90 	vmov	s15, r3
 800754a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800754e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8007564 <_ZN5L6470I8shield_2E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 8007552:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8007556:	eeb0 0a67 	vmov.f32	s0, s15
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr
 8007564:	3783956e 	.word	0x3783956e

08007568 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 8007574:	edd7 7a02 	vldr	s15, [r7, #8]
 8007578:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80075b0 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x48>
 800757c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007584:	d80c      	bhi.n	80075a0 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8007586:	ed97 7a02 	vldr	s14, [r7, #8]
 800758a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80075b4 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 800758e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007592:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007596:	edc7 7a01 	vstr	s15, [r7, #4]
 800759a:	793b      	ldrb	r3, [r7, #4]
 800759c:	b2db      	uxtb	r3, r3
 800759e:	e000      	b.n	80075a2 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x3a>
    return 0;   // Warning
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3714      	adds	r7, #20
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	3b8311d9 	.word	0x3b8311d9
 80075b4:	3783956e 	.word	0x3783956e

080075b8 <_ZN5L6470I8shield_2E23L6470_FnSlpDec_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	460b      	mov	r3, r1
 80075c2:	70fb      	strb	r3, [r7, #3]
    return (FnSlpDec * ((float)1.5686e-5));
 80075c4:	78fb      	ldrb	r3, [r7, #3]
 80075c6:	ee07 3a90 	vmov	s15, r3
 80075ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075ce:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80075e4 <_ZN5L6470I8shield_2E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 80075d2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80075d6:	eeb0 0a67 	vmov.f32	s0, s15
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr
 80075e4:	3783956e 	.word	0x3783956e

080075e8 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 80075f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80075f8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8007630 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x48>
 80075fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007604:	d80c      	bhi.n	8007620 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8007606:	ed97 7a02 	vldr	s14, [r7, #8]
 800760a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8007634 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 800760e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007612:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007616:	edc7 7a01 	vstr	s15, [r7, #4]
 800761a:	793b      	ldrb	r3, [r7, #4]
 800761c:	b2db      	uxtb	r3, r3
 800761e:	e000      	b.n	8007622 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x3a>
    return 0;   // Warning
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3714      	adds	r7, #20
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	3b8311d9 	.word	0x3b8311d9
 8007634:	3783956e 	.word	0x3783956e

08007638 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh>:
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	460b      	mov	r3, r1
 8007642:	70fb      	strb	r3, [r7, #3]
  if (OcdTh <= L6470_MAX_OCD_TH)
 8007644:	78fb      	ldrb	r3, [r7, #3]
 8007646:	2b0f      	cmp	r3, #15
 8007648:	d80a      	bhi.n	8007660 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 800764a:	78fb      	ldrb	r3, [r7, #3]
 800764c:	3301      	adds	r3, #1
 800764e:	ee07 3a90 	vmov	s15, r3
 8007652:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007656:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8007674 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x3c>
 800765a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800765e:	e001      	b.n	8007664 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x2c>
    return 0;   // Warning
 8007660:	eddf 7a05 	vldr	s15, [pc, #20]	; 8007678 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x40>
}
 8007664:	eeb0 0a67 	vmov.f32	s0, s15
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	43bb8000 	.word	0x43bb8000
 8007678:	00000000 	.word	0x00000000

0800767c <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 800767c:	b480      	push	{r7}
 800767e:	b087      	sub	sp, #28
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 8007688:	edd7 7a02 	vldr	s15, [r7, #8]
 800768c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8007718 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x9c>
 8007690:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007698:	d836      	bhi.n	8007708 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8c>
    result = (mA / ((float)375));
 800769a:	ed97 7a02 	vldr	s14, [r7, #8]
 800769e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800771c <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0xa0>
 80076a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80076a6:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 80076aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80076ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076b2:	edc7 7a01 	vstr	s15, [r7, #4]
 80076b6:	793b      	ldrb	r3, [r7, #4]
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	ee07 3a90 	vmov	s15, r3
 80076be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076c2:	ed97 7a05 	vldr	s14, [r7, #20]
 80076c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076ca:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 80076ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80076d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80076d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076de:	d50a      	bpl.n	80076f6 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 80076e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80076e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076e8:	edc7 7a01 	vstr	s15, [r7, #4]
 80076ec:	793b      	ldrb	r3, [r7, #4]
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	3b01      	subs	r3, #1
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	e009      	b.n	800770a <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8e>
      return ((uint8_t)result);    
 80076f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80076fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076fe:	edc7 7a01 	vstr	s15, [r7, #4]
 8007702:	793b      	ldrb	r3, [r7, #4]
 8007704:	b2db      	uxtb	r3, r3
 8007706:	e000      	b.n	800770a <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8e>
    return 0;   // Warning
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	371c      	adds	r7, #28
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop
 8007718:	45bb8000 	.word	0x45bb8000
 800771c:	43bb8000 	.word	0x43bb8000

08007720 <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh>:
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	460b      	mov	r3, r1
 800772a:	70fb      	strb	r3, [r7, #3]
  if (StallTh <= L6470_MAX_STALL_TH)
 800772c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007730:	2b00      	cmp	r3, #0
 8007732:	db0a      	blt.n	800774a <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 8007734:	78fb      	ldrb	r3, [r7, #3]
 8007736:	3301      	adds	r3, #1
 8007738:	ee07 3a90 	vmov	s15, r3
 800773c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007740:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800775c <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x3c>
 8007744:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007748:	e001      	b.n	800774e <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x2e>
    return 0;   // Warning
 800774a:	eddf 7a05 	vldr	s15, [pc, #20]	; 8007760 <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x40>
}
 800774e:	eeb0 0a67 	vmov.f32	s0, s15
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr
 800775c:	41fa0000 	.word	0x41fa0000
 8007760:	00000000 	.word	0x00000000

08007764 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 8007764:	b480      	push	{r7}
 8007766:	b087      	sub	sp, #28
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 8007770:	edd7 7a02 	vldr	s15, [r7, #8]
 8007774:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8007800 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x9c>
 8007778:	eef4 7ac7 	vcmpe.f32	s15, s14
 800777c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007780:	d836      	bhi.n	80077f0 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8c>
    result = (mA / ((float)31.25));
 8007782:	ed97 7a02 	vldr	s14, [r7, #8]
 8007786:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8007804 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0xa0>
 800778a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800778e:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 8007792:	edd7 7a05 	vldr	s15, [r7, #20]
 8007796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800779a:	edc7 7a01 	vstr	s15, [r7, #4]
 800779e:	793b      	ldrb	r3, [r7, #4]
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	ee07 3a90 	vmov	s15, r3
 80077a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077aa:	ed97 7a05 	vldr	s14, [r7, #20]
 80077ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80077b2:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 80077b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80077ba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80077be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077c6:	d50a      	bpl.n	80077de <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 80077c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80077cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077d0:	edc7 7a01 	vstr	s15, [r7, #4]
 80077d4:	793b      	ldrb	r3, [r7, #4]
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	3b01      	subs	r3, #1
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	e009      	b.n	80077f2 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8e>
      return ((uint8_t)result);    
 80077de:	edd7 7a05 	vldr	s15, [r7, #20]
 80077e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077e6:	edc7 7a01 	vstr	s15, [r7, #4]
 80077ea:	793b      	ldrb	r3, [r7, #4]
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	e000      	b.n	80077f2 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8e>
    return 0;   // Warning
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	371c      	adds	r7, #28
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	457a0000 	.word	0x457a0000
 8007804:	41fa0000 	.word	0x41fa0000

08007808 <_ZN5L6470I8shield_2E12L6470_ConfigEPv>:
status_t L6470<shield_x>::L6470_Config(void *init)
 8007808:	b580      	push	{r7, lr}
 800780a:	b086      	sub	sp, #24
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
  reset_device();
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	3394      	adds	r3, #148	; 0x94
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	4798      	blx	r3
  get_status();
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	330c      	adds	r3, #12
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	4798      	blx	r3
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	697a      	ldr	r2, [r7, #20]
 800783a:	edd2 7a05 	vldr	s15, [r2, #20]
 800783e:	eeb0 0a67 	vmov.f32	s0, s15
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	4798      	blx	r3
 8007846:	4603      	mov	r3, r0
 8007848:	461a      	mov	r2, r3
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	697a      	ldr	r2, [r7, #20]
 800785c:	edd2 7a06 	vldr	s15, [r2, #24]
 8007860:	eeb0 0a67 	vmov.f32	s0, s15
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	4798      	blx	r3
 8007868:	4603      	mov	r3, r0
 800786a:	461a      	mov	r2, r3
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	697a      	ldr	r2, [r7, #20]
 800787e:	edd2 7a07 	vldr	s15, [r2, #28]
 8007882:	eeb0 0a67 	vmov.f32	s0, s15
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	4798      	blx	r3
 800788a:	4603      	mov	r3, r0
 800788c:	461a      	mov	r2, r3
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	697a      	ldr	r2, [r7, #20]
 80078a0:	edd2 7a08 	vldr	s15, [r2, #32]
 80078a4:	eeb0 0a67 	vmov.f32	s0, s15
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	4798      	blx	r3
 80078ac:	4603      	mov	r3, r0
 80078ae:	461a      	mov	r2, r3
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	697a      	ldr	r2, [r7, #20]
 80078c2:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 80078c6:	eeb0 0a67 	vmov.f32	s0, s15
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	4798      	blx	r3
 80078ce:	4603      	mov	r3, r0
 80078d0:	461a      	mov	r2, r3
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80078de:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8007bb0 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 80078e2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	ed93 7a00 	vldr	s14, [r3]
 80078ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078f4:	edc7 7a01 	vstr	s15, [r7, #4]
 80078f8:	793b      	ldrb	r3, [r7, #4]
 80078fa:	b2da      	uxtb	r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8007908:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8007bb0 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 800790c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	ed93 7a00 	vldr	s14, [r3]
 8007916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800791a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800791e:	edc7 7a01 	vstr	s15, [r7, #4]
 8007922:	793b      	ldrb	r3, [r7, #4]
 8007924:	b2da      	uxtb	r2, r3
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8007932:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8007bb0 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 8007936:	ee67 6a87 	vmul.f32	s13, s15, s14
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	ed93 7a00 	vldr	s14, [r3]
 8007940:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007944:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007948:	edc7 7a01 	vstr	s15, [r7, #4]
 800794c:	793b      	ldrb	r3, [r7, #4]
 800794e:	b2da      	uxtb	r2, r3
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800795c:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8007bb0 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 8007960:	ee67 6a87 	vmul.f32	s13, s15, s14
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	ed93 7a00 	vldr	s14, [r3]
 800796a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800796e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007972:	edc7 7a01 	vstr	s15, [r7, #4]
 8007976:	793b      	ldrb	r3, [r7, #4]
 8007978:	b2da      	uxtb	r2, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8007990:	eeb0 0a67 	vmov.f32	s0, s15
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	4798      	blx	r3
 8007998:	4603      	mov	r3, r0
 800799a:	461a      	mov	r2, r3
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	697a      	ldr	r2, [r7, #20]
 80079ae:	edd2 7a0f 	vldr	s15, [r2, #60]	; 0x3c
 80079b2:	eeb0 0a67 	vmov.f32	s0, s15
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	4798      	blx	r3
 80079ba:	4603      	mov	r3, r0
 80079bc:	461a      	mov	r2, r3
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	697a      	ldr	r2, [r7, #20]
 80079d0:	edd2 7a10 	vldr	s15, [r2, #64]	; 0x40
 80079d4:	eeb0 0a67 	vmov.f32	s0, s15
 80079d8:	68f8      	ldr	r0, [r7, #12]
 80079da:	4798      	blx	r3
 80079dc:	4603      	mov	r3, r0
 80079de:	461a      	mov	r2, r3
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 80079f6:	eeb0 0a67 	vmov.f32	s0, s15
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	4798      	blx	r3
 80079fe:	4603      	mov	r3, r0
 8007a00:	461a      	mov	r2, r3
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	edd2 7a13 	vldr	s15, [r2, #76]	; 0x4c
 8007a24:	eeb0 0a67 	vmov.f32	s0, s15
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	4798      	blx	r3
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	461a      	mov	r2, r3
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	697a      	ldr	r2, [r7, #20]
 8007a42:	edd2 7a14 	vldr	s15, [r2, #80]	; 0x50
 8007a46:	eeb0 0a67 	vmov.f32	s0, s15
 8007a4a:	68f8      	ldr	r0, [r7, #12]
 8007a4c:	4798      	blx	r3
 8007a4e:	4603      	mov	r3, r0
 8007a50:	461a      	mov	r2, r3
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 8007a8c:	2104      	movs	r1, #4
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
 8007aa2:	2105      	movs	r1, #5
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 8007ab8:	2106      	movs	r1, #6
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	f8b2 204e 	ldrh.w	r2, [r2, #78]	; 0x4e
 8007ace:	2107      	movs	r1, #7
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8007ae4:	2108      	movs	r1, #8
 8007ae6:	68f8      	ldr	r0, [r7, #12]
 8007ae8:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8007afa:	2109      	movs	r1, #9
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68fa      	ldr	r2, [r7, #12]
 8007b0c:	f892 2053 	ldrb.w	r2, [r2, #83]	; 0x53
 8007b10:	210a      	movs	r1, #10
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8007b26:	210b      	movs	r1, #11
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8007b3c:	210c      	movs	r1, #12
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	f8b2 2056 	ldrh.w	r2, [r2, #86]	; 0x56
 8007b52:	210d      	movs	r1, #13
 8007b54:	68f8      	ldr	r0, [r7, #12]
 8007b56:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	f892 2058 	ldrb.w	r2, [r2, #88]	; 0x58
 8007b68:	210e      	movs	r1, #14
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	f892 2059 	ldrb.w	r2, [r2, #89]	; 0x59
 8007b7e:	210f      	movs	r1, #15
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	f892 205a 	ldrb.w	r2, [r2, #90]	; 0x5a
 8007b94:	2110      	movs	r1, #16
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	f892 205b 	ldrb.w	r2, [r2, #91]	; 0x5b
 8007baa:	2111      	movs	r1, #17
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	e001      	b.n	8007bb4 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3ac>
 8007bb0:	43800000 	.word	0x43800000
 8007bb4:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	f892 205d 	ldrb.w	r2, [r2, #93]	; 0x5d
 8007bc6:	2113      	movs	r1, #19
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	f892 205e 	ldrb.w	r2, [r2, #94]	; 0x5e
 8007bdc:	2114      	movs	r1, #20
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8007bf2:	2116      	movs	r1, #22
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	f8b2 2062 	ldrh.w	r2, [r2, #98]	; 0x62
 8007c08:	2117      	movs	r1, #23
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	3354      	adds	r3, #84	; 0x54
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68fa      	ldr	r2, [r7, #12]
 8007c18:	f892 205f 	ldrb.w	r2, [r2, #95]	; 0x5f
 8007c1c:	4611      	mov	r1, r2
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	4798      	blx	r3
 8007c22:	4603      	mov	r3, r0
 8007c24:	f083 0301 	eor.w	r3, r3, #1
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d001      	beq.n	8007c32 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e000      	b.n	8007c34 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x42c>
  return COMPONENT_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3718      	adds	r7, #24
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 8007c3c:	b590      	push	{r4, r7, lr}
 8007c3e:	b087      	sub	sp, #28
 8007c40:	af02      	add	r7, sp, #8
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	460b      	mov	r3, r1
 8007c46:	607a      	str	r2, [r7, #4]
 8007c48:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007c52:	681c      	ldr	r4, [r3, #0]
 8007c54:	7afa      	ldrb	r2, [r7, #11]
 8007c56:	2300      	movs	r3, #0
 8007c58:	9301      	str	r3, [sp, #4]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	9300      	str	r3, [sp, #0]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	2201      	movs	r2, #1
 8007c62:	490c      	ldr	r1, [pc, #48]	; (8007c94 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a09      	ldr	r2, [pc, #36]	; (8007c98 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8007c74:	4907      	ldr	r1, [pc, #28]	; (8007c94 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a05      	ldr	r2, [pc, #20]	; (8007c9c <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 8007c86:	4904      	ldr	r1, [pc, #16]	; (8007c98 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	4798      	blx	r3
}
 8007c8c:	bf00      	nop
 8007c8e:	3714      	adds	r7, #20
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd90      	pop	{r4, r7, pc}
 8007c94:	20000240 	.word	0x20000240
 8007c98:	20000260 	.word	0x20000260
 8007c9c:	20000268 	.word	0x20000268

08007ca0 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 8007ca0:	b590      	push	{r4, r7, lr}
 8007ca2:	b087      	sub	sp, #28
 8007ca4:	af02      	add	r7, sp, #8
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	460b      	mov	r3, r1
 8007caa:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007cb4:	681c      	ldr	r4, [r3, #0]
 8007cb6:	78fb      	ldrb	r3, [r7, #3]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	9201      	str	r2, [sp, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	9200      	str	r2, [sp, #0]
 8007cc0:	2202      	movs	r2, #2
 8007cc2:	4917      	ldr	r1, [pc, #92]	; (8007d20 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a14      	ldr	r2, [pc, #80]	; (8007d24 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8007cd4:	4912      	ldr	r1, [pc, #72]	; (8007d20 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a10      	ldr	r2, [pc, #64]	; (8007d28 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8007ce6:	490f      	ldr	r1, [pc, #60]	; (8007d24 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6a19      	ldr	r1, [r3, #32]
 8007cf0:	78fa      	ldrb	r2, [r7, #3]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	4413      	add	r3, r2
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	440b      	add	r3, r1
 8007cfc:	7b9b      	ldrb	r3, [r3, #14]
 8007cfe:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	7bfa      	ldrb	r2, [r7, #15]
 8007d0c:	4906      	ldr	r1, [pc, #24]	; (8007d28 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	4798      	blx	r3
 8007d12:	4603      	mov	r3, r0
 8007d14:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 8007d16:	68bb      	ldr	r3, [r7, #8]
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3714      	adds	r7, #20
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd90      	pop	{r4, r7, pc}
 8007d20:	20000240 	.word	0x20000240
 8007d24:	20000260 	.word	0x20000260
 8007d28:	20000268 	.word	0x20000268

08007d2c <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8007d2c:	b590      	push	{r4, r7, lr}
 8007d2e:	b087      	sub	sp, #28
 8007d30:	af02      	add	r7, sp, #8
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	460b      	mov	r3, r1
 8007d36:	607a      	str	r2, [r7, #4]
 8007d38:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007d42:	681c      	ldr	r4, [r3, #0]
 8007d44:	7afa      	ldrb	r2, [r7, #11]
 8007d46:	2300      	movs	r3, #0
 8007d48:	9301      	str	r3, [sp, #4]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	9300      	str	r3, [sp, #0]
 8007d4e:	4613      	mov	r3, r2
 8007d50:	2203      	movs	r2, #3
 8007d52:	490c      	ldr	r1, [pc, #48]	; (8007d84 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a09      	ldr	r2, [pc, #36]	; (8007d88 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8007d64:	4907      	ldr	r1, [pc, #28]	; (8007d84 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8007d66:	68f8      	ldr	r0, [r7, #12]
 8007d68:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a05      	ldr	r2, [pc, #20]	; (8007d8c <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x60>)
 8007d76:	4904      	ldr	r1, [pc, #16]	; (8007d88 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	4798      	blx	r3
}
 8007d7c:	bf00      	nop
 8007d7e:	3714      	adds	r7, #20
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd90      	pop	{r4, r7, pc}
 8007d84:	20000240 	.word	0x20000240
 8007d88:	20000260 	.word	0x20000260
 8007d8c:	20000268 	.word	0x20000268

08007d90 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 8007d90:	b590      	push	{r4, r7, lr}
 8007d92:	b085      	sub	sp, #20
 8007d94:	af02      	add	r7, sp, #8
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	460b      	mov	r3, r1
 8007d9a:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007da4:	681c      	ldr	r4, [r3, #0]
 8007da6:	78fb      	ldrb	r3, [r7, #3]
 8007da8:	2200      	movs	r2, #0
 8007daa:	9201      	str	r2, [sp, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	9200      	str	r2, [sp, #0]
 8007db0:	2204      	movs	r2, #4
 8007db2:	490c      	ldr	r1, [pc, #48]	; (8007de4 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a09      	ldr	r2, [pc, #36]	; (8007de8 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8007dc4:	4907      	ldr	r1, [pc, #28]	; (8007de4 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a05      	ldr	r2, [pc, #20]	; (8007dec <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 8007dd6:	4904      	ldr	r1, [pc, #16]	; (8007de8 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	4798      	blx	r3
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd90      	pop	{r4, r7, pc}
 8007de4:	20000240 	.word	0x20000240
 8007de8:	20000260 	.word	0x20000260
 8007dec:	20000268 	.word	0x20000268

08007df0 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8007df0:	b590      	push	{r4, r7, lr}
 8007df2:	b087      	sub	sp, #28
 8007df4:	af02      	add	r7, sp, #8
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	460b      	mov	r3, r1
 8007dfa:	607a      	str	r2, [r7, #4]
 8007dfc:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007e06:	681c      	ldr	r4, [r3, #0]
 8007e08:	7afa      	ldrb	r2, [r7, #11]
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	9301      	str	r3, [sp, #4]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	9300      	str	r3, [sp, #0]
 8007e12:	4613      	mov	r3, r2
 8007e14:	2205      	movs	r2, #5
 8007e16:	490c      	ldr	r1, [pc, #48]	; (8007e48 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a09      	ldr	r2, [pc, #36]	; (8007e4c <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8007e28:	4907      	ldr	r1, [pc, #28]	; (8007e48 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a05      	ldr	r2, [pc, #20]	; (8007e50 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 8007e3a:	4904      	ldr	r1, [pc, #16]	; (8007e4c <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	4798      	blx	r3
}
 8007e40:	bf00      	nop
 8007e42:	3714      	adds	r7, #20
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd90      	pop	{r4, r7, pc}
 8007e48:	20000240 	.word	0x20000240
 8007e4c:	20000260 	.word	0x20000260
 8007e50:	20000268 	.word	0x20000268

08007e54 <_ZN5L6470I8shield_2E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 8007e54:	b590      	push	{r4, r7, lr}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af02      	add	r7, sp, #8
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e64:	d21f      	bcs.n	8007ea6 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007e6e:	681c      	ldr	r4, [r3, #0]
 8007e70:	2300      	movs	r3, #0
 8007e72:	9301      	str	r3, [sp, #4]
 8007e74:	2300      	movs	r3, #0
 8007e76:	9300      	str	r3, [sp, #0]
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	2206      	movs	r2, #6
 8007e7c:	490c      	ldr	r1, [pc, #48]	; (8007eb0 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x5c>)
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a09      	ldr	r2, [pc, #36]	; (8007eb4 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x60>)
 8007e8e:	4908      	ldr	r1, [pc, #32]	; (8007eb0 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x5c>)
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a06      	ldr	r2, [pc, #24]	; (8007eb8 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x64>)
 8007ea0:	4904      	ldr	r1, [pc, #16]	; (8007eb4 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x60>)
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	4798      	blx	r3
}
 8007ea6:	bf00      	nop
 8007ea8:	370c      	adds	r7, #12
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd90      	pop	{r4, r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	20000240 	.word	0x20000240
 8007eb4:	20000260 	.word	0x20000260
 8007eb8:	20000268 	.word	0x20000268

08007ebc <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 8007ebc:	b590      	push	{r4, r7, lr}
 8007ebe:	b087      	sub	sp, #28
 8007ec0:	af02      	add	r7, sp, #8
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	607a      	str	r2, [r7, #4]
 8007ec8:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ed0:	d220      	bcs.n	8007f14 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007eda:	681c      	ldr	r4, [r3, #0]
 8007edc:	7afa      	ldrb	r2, [r7, #11]
 8007ede:	2300      	movs	r3, #0
 8007ee0:	9301      	str	r3, [sp, #4]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	9300      	str	r3, [sp, #0]
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	2207      	movs	r2, #7
 8007eea:	490c      	ldr	r1, [pc, #48]	; (8007f1c <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a09      	ldr	r2, [pc, #36]	; (8007f20 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8007efc:	4907      	ldr	r1, [pc, #28]	; (8007f1c <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a05      	ldr	r2, [pc, #20]	; (8007f24 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 8007f0e:	4904      	ldr	r1, [pc, #16]	; (8007f20 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	4798      	blx	r3
}
 8007f14:	bf00      	nop
 8007f16:	3714      	adds	r7, #20
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd90      	pop	{r4, r7, pc}
 8007f1c:	20000240 	.word	0x20000240
 8007f20:	20000260 	.word	0x20000260
 8007f24:	20000268 	.word	0x20000268

08007f28 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8007f28:	b590      	push	{r4, r7, lr}
 8007f2a:	b087      	sub	sp, #28
 8007f2c:	af02      	add	r7, sp, #8
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	607b      	str	r3, [r7, #4]
 8007f32:	460b      	mov	r3, r1
 8007f34:	72fb      	strb	r3, [r7, #11]
 8007f36:	4613      	mov	r3, r2
 8007f38:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007f42:	681c      	ldr	r4, [r3, #0]
 8007f44:	7af9      	ldrb	r1, [r7, #11]
 8007f46:	7abb      	ldrb	r3, [r7, #10]
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	9201      	str	r2, [sp, #4]
 8007f4c:	9300      	str	r3, [sp, #0]
 8007f4e:	460b      	mov	r3, r1
 8007f50:	2208      	movs	r2, #8
 8007f52:	490c      	ldr	r1, [pc, #48]	; (8007f84 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a09      	ldr	r2, [pc, #36]	; (8007f88 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8007f64:	4907      	ldr	r1, [pc, #28]	; (8007f84 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a05      	ldr	r2, [pc, #20]	; (8007f8c <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 8007f76:	4904      	ldr	r1, [pc, #16]	; (8007f88 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	4798      	blx	r3
}
 8007f7c:	bf00      	nop
 8007f7e:	3714      	adds	r7, #20
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd90      	pop	{r4, r7, pc}
 8007f84:	20000240 	.word	0x20000240
 8007f88:	20000260 	.word	0x20000260
 8007f8c:	20000268 	.word	0x20000268

08007f90 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8007f90:	b590      	push	{r4, r7, lr}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af02      	add	r7, sp, #8
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	460b      	mov	r3, r1
 8007f9a:	70fb      	strb	r3, [r7, #3]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007fa8:	681c      	ldr	r4, [r3, #0]
 8007faa:	78fa      	ldrb	r2, [r7, #3]
 8007fac:	78bb      	ldrb	r3, [r7, #2]
 8007fae:	2100      	movs	r1, #0
 8007fb0:	9101      	str	r1, [sp, #4]
 8007fb2:	9300      	str	r3, [sp, #0]
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	2209      	movs	r2, #9
 8007fb8:	490c      	ldr	r1, [pc, #48]	; (8007fec <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a09      	ldr	r2, [pc, #36]	; (8007ff0 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8007fca:	4908      	ldr	r1, [pc, #32]	; (8007fec <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a06      	ldr	r2, [pc, #24]	; (8007ff4 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 8007fdc:	4904      	ldr	r1, [pc, #16]	; (8007ff0 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	4798      	blx	r3
}
 8007fe2:	bf00      	nop
 8007fe4:	370c      	adds	r7, #12
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd90      	pop	{r4, r7, pc}
 8007fea:	bf00      	nop
 8007fec:	20000240 	.word	0x20000240
 8007ff0:	20000260 	.word	0x20000260
 8007ff4:	20000268 	.word	0x20000268

08007ff8 <_ZN5L6470I8shield_2E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 8007ff8:	b590      	push	{r4, r7, lr}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af02      	add	r7, sp, #8
 8007ffe:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008008:	681c      	ldr	r4, [r3, #0]
 800800a:	2300      	movs	r3, #0
 800800c:	9301      	str	r3, [sp, #4]
 800800e:	2300      	movs	r3, #0
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	2300      	movs	r3, #0
 8008014:	220a      	movs	r2, #10
 8008016:	490c      	ldr	r1, [pc, #48]	; (8008048 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x50>)
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a09      	ldr	r2, [pc, #36]	; (800804c <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x54>)
 8008028:	4907      	ldr	r1, [pc, #28]	; (8008048 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x50>)
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a05      	ldr	r2, [pc, #20]	; (8008050 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x58>)
 800803a:	4904      	ldr	r1, [pc, #16]	; (800804c <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x54>)
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	4798      	blx	r3
}
 8008040:	bf00      	nop
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	bd90      	pop	{r4, r7, pc}
 8008048:	20000240 	.word	0x20000240
 800804c:	20000260 	.word	0x20000260
 8008050:	20000268 	.word	0x20000268

08008054 <_ZN5L6470I8shield_2E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 8008054:	b590      	push	{r4, r7, lr}
 8008056:	b085      	sub	sp, #20
 8008058:	af02      	add	r7, sp, #8
 800805a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008064:	681c      	ldr	r4, [r3, #0]
 8008066:	2300      	movs	r3, #0
 8008068:	9301      	str	r3, [sp, #4]
 800806a:	2300      	movs	r3, #0
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	2300      	movs	r3, #0
 8008070:	220b      	movs	r2, #11
 8008072:	490c      	ldr	r1, [pc, #48]	; (80080a4 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x50>)
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a09      	ldr	r2, [pc, #36]	; (80080a8 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x54>)
 8008084:	4907      	ldr	r1, [pc, #28]	; (80080a4 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x50>)
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a05      	ldr	r2, [pc, #20]	; (80080ac <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x58>)
 8008096:	4904      	ldr	r1, [pc, #16]	; (80080a8 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x54>)
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	4798      	blx	r3
}
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd90      	pop	{r4, r7, pc}
 80080a4:	20000240 	.word	0x20000240
 80080a8:	20000260 	.word	0x20000260
 80080ac:	20000268 	.word	0x20000268

080080b0 <_ZN5L6470I8shield_2E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 80080b0:	b590      	push	{r4, r7, lr}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af02      	add	r7, sp, #8
 80080b6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80080c0:	681c      	ldr	r4, [r3, #0]
 80080c2:	2300      	movs	r3, #0
 80080c4:	9301      	str	r3, [sp, #4]
 80080c6:	2300      	movs	r3, #0
 80080c8:	9300      	str	r3, [sp, #0]
 80080ca:	2300      	movs	r3, #0
 80080cc:	220c      	movs	r2, #12
 80080ce:	490c      	ldr	r1, [pc, #48]	; (8008100 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x50>)
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a09      	ldr	r2, [pc, #36]	; (8008104 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x54>)
 80080e0:	4907      	ldr	r1, [pc, #28]	; (8008100 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x50>)
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a05      	ldr	r2, [pc, #20]	; (8008108 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x58>)
 80080f2:	4904      	ldr	r1, [pc, #16]	; (8008104 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x54>)
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	4798      	blx	r3
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd90      	pop	{r4, r7, pc}
 8008100:	20000240 	.word	0x20000240
 8008104:	20000260 	.word	0x20000260
 8008108:	20000268 	.word	0x20000268

0800810c <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 800810c:	b590      	push	{r4, r7, lr}
 800810e:	b085      	sub	sp, #20
 8008110:	af02      	add	r7, sp, #8
 8008112:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800811c:	681c      	ldr	r4, [r3, #0]
 800811e:	2300      	movs	r3, #0
 8008120:	9301      	str	r3, [sp, #4]
 8008122:	2300      	movs	r3, #0
 8008124:	9300      	str	r3, [sp, #0]
 8008126:	2300      	movs	r3, #0
 8008128:	220d      	movs	r2, #13
 800812a:	490c      	ldr	r1, [pc, #48]	; (800815c <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x50>)
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a09      	ldr	r2, [pc, #36]	; (8008160 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x54>)
 800813c:	4907      	ldr	r1, [pc, #28]	; (800815c <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x50>)
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a05      	ldr	r2, [pc, #20]	; (8008164 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x58>)
 800814e:	4904      	ldr	r1, [pc, #16]	; (8008160 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x54>)
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	4798      	blx	r3
}
 8008154:	bf00      	nop
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	bd90      	pop	{r4, r7, pc}
 800815c:	20000240 	.word	0x20000240
 8008160:	20000260 	.word	0x20000260
 8008164:	20000268 	.word	0x20000268

08008168 <_ZN5L6470I8shield_2E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 8008168:	b590      	push	{r4, r7, lr}
 800816a:	b085      	sub	sp, #20
 800816c:	af02      	add	r7, sp, #8
 800816e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008178:	681c      	ldr	r4, [r3, #0]
 800817a:	2300      	movs	r3, #0
 800817c:	9301      	str	r3, [sp, #4]
 800817e:	2300      	movs	r3, #0
 8008180:	9300      	str	r3, [sp, #0]
 8008182:	2300      	movs	r3, #0
 8008184:	220e      	movs	r2, #14
 8008186:	490c      	ldr	r1, [pc, #48]	; (80081b8 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x50>)
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a09      	ldr	r2, [pc, #36]	; (80081bc <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x54>)
 8008198:	4907      	ldr	r1, [pc, #28]	; (80081b8 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x50>)
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a05      	ldr	r2, [pc, #20]	; (80081c0 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x58>)
 80081aa:	4904      	ldr	r1, [pc, #16]	; (80081bc <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x54>)
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	4798      	blx	r3
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd90      	pop	{r4, r7, pc}
 80081b8:	20000240 	.word	0x20000240
 80081bc:	20000260 	.word	0x20000260
 80081c0:	20000268 	.word	0x20000268

080081c4 <_ZN5L6470I8shield_2E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 80081c4:	b590      	push	{r4, r7, lr}
 80081c6:	b085      	sub	sp, #20
 80081c8:	af02      	add	r7, sp, #8
 80081ca:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80081d4:	681c      	ldr	r4, [r3, #0]
 80081d6:	2300      	movs	r3, #0
 80081d8:	9301      	str	r3, [sp, #4]
 80081da:	2300      	movs	r3, #0
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	2300      	movs	r3, #0
 80081e0:	220f      	movs	r2, #15
 80081e2:	490c      	ldr	r1, [pc, #48]	; (8008214 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x50>)
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a09      	ldr	r2, [pc, #36]	; (8008218 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x54>)
 80081f4:	4907      	ldr	r1, [pc, #28]	; (8008214 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x50>)
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a05      	ldr	r2, [pc, #20]	; (800821c <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x58>)
 8008206:	4904      	ldr	r1, [pc, #16]	; (8008218 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x54>)
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	4798      	blx	r3
}
 800820c:	bf00      	nop
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	bd90      	pop	{r4, r7, pc}
 8008214:	20000240 	.word	0x20000240
 8008218:	20000260 	.word	0x20000260
 800821c:	20000268 	.word	0x20000268

08008220 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 8008220:	b590      	push	{r4, r7, lr}
 8008222:	b085      	sub	sp, #20
 8008224:	af02      	add	r7, sp, #8
 8008226:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008230:	681c      	ldr	r4, [r3, #0]
 8008232:	2300      	movs	r3, #0
 8008234:	9301      	str	r3, [sp, #4]
 8008236:	2300      	movs	r3, #0
 8008238:	9300      	str	r3, [sp, #0]
 800823a:	2300      	movs	r3, #0
 800823c:	2210      	movs	r2, #16
 800823e:	490c      	ldr	r1, [pc, #48]	; (8008270 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x50>)
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a09      	ldr	r2, [pc, #36]	; (8008274 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x54>)
 8008250:	4907      	ldr	r1, [pc, #28]	; (8008270 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x50>)
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a05      	ldr	r2, [pc, #20]	; (8008278 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x58>)
 8008262:	4904      	ldr	r1, [pc, #16]	; (8008274 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x54>)
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	4798      	blx	r3
}
 8008268:	bf00      	nop
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	bd90      	pop	{r4, r7, pc}
 8008270:	20000240 	.word	0x20000240
 8008274:	20000260 	.word	0x20000260
 8008278:	20000268 	.word	0x20000268

0800827c <_ZN5L6470I8shield_2E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 800827c:	b590      	push	{r4, r7, lr}
 800827e:	b085      	sub	sp, #20
 8008280:	af02      	add	r7, sp, #8
 8008282:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800828c:	681c      	ldr	r4, [r3, #0]
 800828e:	2300      	movs	r3, #0
 8008290:	9301      	str	r3, [sp, #4]
 8008292:	2300      	movs	r3, #0
 8008294:	9300      	str	r3, [sp, #0]
 8008296:	2300      	movs	r3, #0
 8008298:	2211      	movs	r2, #17
 800829a:	490c      	ldr	r1, [pc, #48]	; (80082cc <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x50>)
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a09      	ldr	r2, [pc, #36]	; (80082d0 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x54>)
 80082ac:	4907      	ldr	r1, [pc, #28]	; (80082cc <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x50>)
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a05      	ldr	r2, [pc, #20]	; (80082d4 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x58>)
 80082be:	4904      	ldr	r1, [pc, #16]	; (80082d0 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x54>)
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	4798      	blx	r3
}
 80082c4:	bf00      	nop
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd90      	pop	{r4, r7, pc}
 80082cc:	20000240 	.word	0x20000240
 80082d0:	20000260 	.word	0x20000260
 80082d4:	20000268 	.word	0x20000268

080082d8 <_ZN5L6470I8shield_2E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 80082d8:	b590      	push	{r4, r7, lr}
 80082da:	b087      	sub	sp, #28
 80082dc:	af02      	add	r7, sp, #8
 80082de:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80082e8:	681c      	ldr	r4, [r3, #0]
 80082ea:	2300      	movs	r3, #0
 80082ec:	9301      	str	r3, [sp, #4]
 80082ee:	2300      	movs	r3, #0
 80082f0:	9300      	str	r3, [sp, #0]
 80082f2:	2300      	movs	r3, #0
 80082f4:	2212      	movs	r2, #18
 80082f6:	4912      	ldr	r1, [pc, #72]	; (8008340 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x68>)
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a0f      	ldr	r2, [pc, #60]	; (8008344 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x6c>)
 8008308:	490d      	ldr	r1, [pc, #52]	; (8008340 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x68>)
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a0b      	ldr	r2, [pc, #44]	; (8008348 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x70>)
 800831a:	490a      	ldr	r1, [pc, #40]	; (8008344 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x6c>)
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2202      	movs	r2, #2
 800832c:	4906      	ldr	r1, [pc, #24]	; (8008348 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x70>)
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	4798      	blx	r3
 8008332:	4603      	mov	r3, r0
 8008334:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 8008336:	89fb      	ldrh	r3, [r7, #14]
}
 8008338:	4618      	mov	r0, r3
 800833a:	3714      	adds	r7, #20
 800833c:	46bd      	mov	sp, r7
 800833e:	bd90      	pop	{r4, r7, pc}
 8008340:	20000240 	.word	0x20000240
 8008344:	20000260 	.word	0x20000260
 8008348:	20000268 	.word	0x20000268

0800834c <_ZN5L6470I8shield_2E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 800834c:	b590      	push	{r4, r7, lr}
 800834e:	b087      	sub	sp, #28
 8008350:	af02      	add	r7, sp, #8
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	460b      	mov	r3, r1
 8008356:	607a      	str	r2, [r7, #4]
 8008358:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008362:	681c      	ldr	r4, [r3, #0]
 8008364:	7afa      	ldrb	r2, [r7, #11]
 8008366:	2300      	movs	r3, #0
 8008368:	9301      	str	r3, [sp, #4]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	9300      	str	r3, [sp, #0]
 800836e:	4613      	mov	r3, r2
 8008370:	2201      	movs	r2, #1
 8008372:	4903      	ldr	r1, [pc, #12]	; (8008380 <_ZN5L6470I8shield_2E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 8008374:	68f8      	ldr	r0, [r7, #12]
 8008376:	47a0      	blx	r4
}
 8008378:	bf00      	nop
 800837a:	3714      	adds	r7, #20
 800837c:	46bd      	mov	sp, r7
 800837e:	bd90      	pop	{r4, r7, pc}
 8008380:	20000240 	.word	0x20000240

08008384 <_ZN5L6470I8shield_2E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 8008384:	b590      	push	{r4, r7, lr}
 8008386:	b085      	sub	sp, #20
 8008388:	af02      	add	r7, sp, #8
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	460b      	mov	r3, r1
 800838e:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008398:	681c      	ldr	r4, [r3, #0]
 800839a:	78fb      	ldrb	r3, [r7, #3]
 800839c:	2200      	movs	r2, #0
 800839e:	9201      	str	r2, [sp, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	9200      	str	r2, [sp, #0]
 80083a4:	2202      	movs	r2, #2
 80083a6:	4903      	ldr	r1, [pc, #12]	; (80083b4 <_ZN5L6470I8shield_2E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	47a0      	blx	r4
}
 80083ac:	bf00      	nop
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd90      	pop	{r4, r7, pc}
 80083b4:	20000240 	.word	0x20000240

080083b8 <_ZN5L6470I8shield_2E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 80083b8:	b590      	push	{r4, r7, lr}
 80083ba:	b087      	sub	sp, #28
 80083bc:	af02      	add	r7, sp, #8
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	460b      	mov	r3, r1
 80083c2:	607a      	str	r2, [r7, #4]
 80083c4:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80083ce:	681c      	ldr	r4, [r3, #0]
 80083d0:	7afa      	ldrb	r2, [r7, #11]
 80083d2:	2300      	movs	r3, #0
 80083d4:	9301      	str	r3, [sp, #4]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	9300      	str	r3, [sp, #0]
 80083da:	4613      	mov	r3, r2
 80083dc:	2203      	movs	r2, #3
 80083de:	4903      	ldr	r1, [pc, #12]	; (80083ec <_ZN5L6470I8shield_2E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 80083e0:	68f8      	ldr	r0, [r7, #12]
 80083e2:	47a0      	blx	r4
}
 80083e4:	bf00      	nop
 80083e6:	3714      	adds	r7, #20
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd90      	pop	{r4, r7, pc}
 80083ec:	20000240 	.word	0x20000240

080083f0 <_ZN5L6470I8shield_2E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 80083f0:	b590      	push	{r4, r7, lr}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af02      	add	r7, sp, #8
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	460b      	mov	r3, r1
 80083fa:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008404:	681c      	ldr	r4, [r3, #0]
 8008406:	78fb      	ldrb	r3, [r7, #3]
 8008408:	2200      	movs	r2, #0
 800840a:	9201      	str	r2, [sp, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	9200      	str	r2, [sp, #0]
 8008410:	2204      	movs	r2, #4
 8008412:	4903      	ldr	r1, [pc, #12]	; (8008420 <_ZN5L6470I8shield_2E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	47a0      	blx	r4
}
 8008418:	bf00      	nop
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	bd90      	pop	{r4, r7, pc}
 8008420:	20000240 	.word	0x20000240

08008424 <_ZN5L6470I8shield_2E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8008424:	b590      	push	{r4, r7, lr}
 8008426:	b087      	sub	sp, #28
 8008428:	af02      	add	r7, sp, #8
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	460b      	mov	r3, r1
 800842e:	607a      	str	r2, [r7, #4]
 8008430:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800843a:	681c      	ldr	r4, [r3, #0]
 800843c:	7afa      	ldrb	r2, [r7, #11]
 800843e:	2300      	movs	r3, #0
 8008440:	9301      	str	r3, [sp, #4]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	9300      	str	r3, [sp, #0]
 8008446:	4613      	mov	r3, r2
 8008448:	2205      	movs	r2, #5
 800844a:	4903      	ldr	r1, [pc, #12]	; (8008458 <_ZN5L6470I8shield_2E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	47a0      	blx	r4
}
 8008450:	bf00      	nop
 8008452:	3714      	adds	r7, #20
 8008454:	46bd      	mov	sp, r7
 8008456:	bd90      	pop	{r4, r7, pc}
 8008458:	20000240 	.word	0x20000240

0800845c <_ZN5L6470I8shield_2E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 800845c:	b590      	push	{r4, r7, lr}
 800845e:	b085      	sub	sp, #20
 8008460:	af02      	add	r7, sp, #8
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800846e:	681c      	ldr	r4, [r3, #0]
 8008470:	2300      	movs	r3, #0
 8008472:	9301      	str	r3, [sp, #4]
 8008474:	2300      	movs	r3, #0
 8008476:	9300      	str	r3, [sp, #0]
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	2206      	movs	r2, #6
 800847c:	4903      	ldr	r1, [pc, #12]	; (800848c <_ZN5L6470I8shield_2E17L6470_PrepareGoToEm+0x30>)
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	47a0      	blx	r4
}
 8008482:	bf00      	nop
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	bd90      	pop	{r4, r7, pc}
 800848a:	bf00      	nop
 800848c:	20000240 	.word	0x20000240

08008490 <_ZN5L6470I8shield_2E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 8008490:	b590      	push	{r4, r7, lr}
 8008492:	b087      	sub	sp, #28
 8008494:	af02      	add	r7, sp, #8
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	460b      	mov	r3, r1
 800849a:	607a      	str	r2, [r7, #4]
 800849c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80084a6:	681c      	ldr	r4, [r3, #0]
 80084a8:	7afa      	ldrb	r2, [r7, #11]
 80084aa:	2300      	movs	r3, #0
 80084ac:	9301      	str	r3, [sp, #4]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	9300      	str	r3, [sp, #0]
 80084b2:	4613      	mov	r3, r2
 80084b4:	2207      	movs	r2, #7
 80084b6:	4903      	ldr	r1, [pc, #12]	; (80084c4 <_ZN5L6470I8shield_2E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	47a0      	blx	r4
}
 80084bc:	bf00      	nop
 80084be:	3714      	adds	r7, #20
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd90      	pop	{r4, r7, pc}
 80084c4:	20000240 	.word	0x20000240

080084c8 <_ZN5L6470I8shield_2E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 80084c8:	b590      	push	{r4, r7, lr}
 80084ca:	b087      	sub	sp, #28
 80084cc:	af02      	add	r7, sp, #8
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	607b      	str	r3, [r7, #4]
 80084d2:	460b      	mov	r3, r1
 80084d4:	72fb      	strb	r3, [r7, #11]
 80084d6:	4613      	mov	r3, r2
 80084d8:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80084e2:	681c      	ldr	r4, [r3, #0]
 80084e4:	7af9      	ldrb	r1, [r7, #11]
 80084e6:	7abb      	ldrb	r3, [r7, #10]
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	9201      	str	r2, [sp, #4]
 80084ec:	9300      	str	r3, [sp, #0]
 80084ee:	460b      	mov	r3, r1
 80084f0:	2208      	movs	r2, #8
 80084f2:	4903      	ldr	r1, [pc, #12]	; (8008500 <_ZN5L6470I8shield_2E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 80084f4:	68f8      	ldr	r0, [r7, #12]
 80084f6:	47a0      	blx	r4
}
 80084f8:	bf00      	nop
 80084fa:	3714      	adds	r7, #20
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd90      	pop	{r4, r7, pc}
 8008500:	20000240 	.word	0x20000240

08008504 <_ZN5L6470I8shield_2E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8008504:	b590      	push	{r4, r7, lr}
 8008506:	b085      	sub	sp, #20
 8008508:	af02      	add	r7, sp, #8
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	460b      	mov	r3, r1
 800850e:	70fb      	strb	r3, [r7, #3]
 8008510:	4613      	mov	r3, r2
 8008512:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800851c:	681c      	ldr	r4, [r3, #0]
 800851e:	78fa      	ldrb	r2, [r7, #3]
 8008520:	78bb      	ldrb	r3, [r7, #2]
 8008522:	2100      	movs	r1, #0
 8008524:	9101      	str	r1, [sp, #4]
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	4613      	mov	r3, r2
 800852a:	2209      	movs	r2, #9
 800852c:	4903      	ldr	r1, [pc, #12]	; (800853c <_ZN5L6470I8shield_2E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	47a0      	blx	r4
}
 8008532:	bf00      	nop
 8008534:	370c      	adds	r7, #12
 8008536:	46bd      	mov	sp, r7
 8008538:	bd90      	pop	{r4, r7, pc}
 800853a:	bf00      	nop
 800853c:	20000240 	.word	0x20000240

08008540 <_ZN5L6470I8shield_2E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 8008540:	b590      	push	{r4, r7, lr}
 8008542:	b085      	sub	sp, #20
 8008544:	af02      	add	r7, sp, #8
 8008546:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008550:	681c      	ldr	r4, [r3, #0]
 8008552:	2300      	movs	r3, #0
 8008554:	9301      	str	r3, [sp, #4]
 8008556:	2300      	movs	r3, #0
 8008558:	9300      	str	r3, [sp, #0]
 800855a:	2300      	movs	r3, #0
 800855c:	220a      	movs	r2, #10
 800855e:	4903      	ldr	r1, [pc, #12]	; (800856c <_ZN5L6470I8shield_2E19L6470_PrepareGoHomeEv+0x2c>)
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	47a0      	blx	r4
}
 8008564:	bf00      	nop
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	bd90      	pop	{r4, r7, pc}
 800856c:	20000240 	.word	0x20000240

08008570 <_ZN5L6470I8shield_2E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 8008570:	b590      	push	{r4, r7, lr}
 8008572:	b085      	sub	sp, #20
 8008574:	af02      	add	r7, sp, #8
 8008576:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008580:	681c      	ldr	r4, [r3, #0]
 8008582:	2300      	movs	r3, #0
 8008584:	9301      	str	r3, [sp, #4]
 8008586:	2300      	movs	r3, #0
 8008588:	9300      	str	r3, [sp, #0]
 800858a:	2300      	movs	r3, #0
 800858c:	220b      	movs	r2, #11
 800858e:	4903      	ldr	r1, [pc, #12]	; (800859c <_ZN5L6470I8shield_2E19L6470_PrepareGoMarkEv+0x2c>)
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	47a0      	blx	r4
}
 8008594:	bf00      	nop
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	bd90      	pop	{r4, r7, pc}
 800859c:	20000240 	.word	0x20000240

080085a0 <_ZN5L6470I8shield_2E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 80085a0:	b590      	push	{r4, r7, lr}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af02      	add	r7, sp, #8
 80085a6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80085b0:	681c      	ldr	r4, [r3, #0]
 80085b2:	2300      	movs	r3, #0
 80085b4:	9301      	str	r3, [sp, #4]
 80085b6:	2300      	movs	r3, #0
 80085b8:	9300      	str	r3, [sp, #0]
 80085ba:	2300      	movs	r3, #0
 80085bc:	220c      	movs	r2, #12
 80085be:	4903      	ldr	r1, [pc, #12]	; (80085cc <_ZN5L6470I8shield_2E21L6470_PrepareResetPosEv+0x2c>)
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	47a0      	blx	r4
}
 80085c4:	bf00      	nop
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd90      	pop	{r4, r7, pc}
 80085cc:	20000240 	.word	0x20000240

080085d0 <_ZN5L6470I8shield_2E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 80085d0:	b590      	push	{r4, r7, lr}
 80085d2:	b085      	sub	sp, #20
 80085d4:	af02      	add	r7, sp, #8
 80085d6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80085e0:	681c      	ldr	r4, [r3, #0]
 80085e2:	2300      	movs	r3, #0
 80085e4:	9301      	str	r3, [sp, #4]
 80085e6:	2300      	movs	r3, #0
 80085e8:	9300      	str	r3, [sp, #0]
 80085ea:	2300      	movs	r3, #0
 80085ec:	220d      	movs	r2, #13
 80085ee:	4903      	ldr	r1, [pc, #12]	; (80085fc <_ZN5L6470I8shield_2E24L6470_PrepareResetDeviceEv+0x2c>)
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	47a0      	blx	r4
}
 80085f4:	bf00      	nop
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd90      	pop	{r4, r7, pc}
 80085fc:	20000240 	.word	0x20000240

08008600 <_ZN5L6470I8shield_2E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 8008600:	b590      	push	{r4, r7, lr}
 8008602:	b085      	sub	sp, #20
 8008604:	af02      	add	r7, sp, #8
 8008606:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008610:	681c      	ldr	r4, [r3, #0]
 8008612:	2300      	movs	r3, #0
 8008614:	9301      	str	r3, [sp, #4]
 8008616:	2300      	movs	r3, #0
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	2300      	movs	r3, #0
 800861c:	220e      	movs	r2, #14
 800861e:	4903      	ldr	r1, [pc, #12]	; (800862c <_ZN5L6470I8shield_2E21L6470_PrepareSoftStopEv+0x2c>)
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	47a0      	blx	r4
}
 8008624:	bf00      	nop
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	bd90      	pop	{r4, r7, pc}
 800862c:	20000240 	.word	0x20000240

08008630 <_ZN5L6470I8shield_2E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 8008630:	b590      	push	{r4, r7, lr}
 8008632:	b085      	sub	sp, #20
 8008634:	af02      	add	r7, sp, #8
 8008636:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008640:	681c      	ldr	r4, [r3, #0]
 8008642:	2300      	movs	r3, #0
 8008644:	9301      	str	r3, [sp, #4]
 8008646:	2300      	movs	r3, #0
 8008648:	9300      	str	r3, [sp, #0]
 800864a:	2300      	movs	r3, #0
 800864c:	220f      	movs	r2, #15
 800864e:	4903      	ldr	r1, [pc, #12]	; (800865c <_ZN5L6470I8shield_2E21L6470_PrepareHardStopEv+0x2c>)
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	47a0      	blx	r4
}
 8008654:	bf00      	nop
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	bd90      	pop	{r4, r7, pc}
 800865c:	20000240 	.word	0x20000240

08008660 <_ZN5L6470I8shield_2E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 8008660:	b590      	push	{r4, r7, lr}
 8008662:	b085      	sub	sp, #20
 8008664:	af02      	add	r7, sp, #8
 8008666:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008670:	681c      	ldr	r4, [r3, #0]
 8008672:	2300      	movs	r3, #0
 8008674:	9301      	str	r3, [sp, #4]
 8008676:	2300      	movs	r3, #0
 8008678:	9300      	str	r3, [sp, #0]
 800867a:	2300      	movs	r3, #0
 800867c:	2210      	movs	r2, #16
 800867e:	4903      	ldr	r1, [pc, #12]	; (800868c <_ZN5L6470I8shield_2E20L6470_PrepareSoftHiZEv+0x2c>)
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	47a0      	blx	r4
}
 8008684:	bf00      	nop
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	bd90      	pop	{r4, r7, pc}
 800868c:	20000240 	.word	0x20000240

08008690 <_ZN5L6470I8shield_2E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 8008690:	b590      	push	{r4, r7, lr}
 8008692:	b085      	sub	sp, #20
 8008694:	af02      	add	r7, sp, #8
 8008696:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80086a0:	681c      	ldr	r4, [r3, #0]
 80086a2:	2300      	movs	r3, #0
 80086a4:	9301      	str	r3, [sp, #4]
 80086a6:	2300      	movs	r3, #0
 80086a8:	9300      	str	r3, [sp, #0]
 80086aa:	2300      	movs	r3, #0
 80086ac:	2211      	movs	r2, #17
 80086ae:	4903      	ldr	r1, [pc, #12]	; (80086bc <_ZN5L6470I8shield_2E20L6470_PrepareHardHiZEv+0x2c>)
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	47a0      	blx	r4
}
 80086b4:	bf00      	nop
 80086b6:	370c      	adds	r7, #12
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd90      	pop	{r4, r7, pc}
 80086bc:	20000240 	.word	0x20000240

080086c0 <_ZN5L6470I8shield_2E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 80086c0:	b590      	push	{r4, r7, lr}
 80086c2:	b085      	sub	sp, #20
 80086c4:	af02      	add	r7, sp, #8
 80086c6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80086d0:	681c      	ldr	r4, [r3, #0]
 80086d2:	2300      	movs	r3, #0
 80086d4:	9301      	str	r3, [sp, #4]
 80086d6:	2300      	movs	r3, #0
 80086d8:	9300      	str	r3, [sp, #0]
 80086da:	2300      	movs	r3, #0
 80086dc:	2212      	movs	r2, #18
 80086de:	4903      	ldr	r1, [pc, #12]	; (80086ec <_ZN5L6470I8shield_2E22L6470_PrepareGetStatusEv+0x2c>)
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	47a0      	blx	r4
}
 80086e4:	bf00      	nop
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd90      	pop	{r4, r7, pc}
 80086ec:	20000240 	.word	0x20000240

080086f0 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a09      	ldr	r2, [pc, #36]	; (8008728 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 8008704:	4909      	ldr	r1, [pc, #36]	; (800872c <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a06      	ldr	r2, [pc, #24]	; (8008730 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 8008716:	4904      	ldr	r1, [pc, #16]	; (8008728 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 800871c:	4b04      	ldr	r3, [pc, #16]	; (8008730 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 800871e:	4618      	mov	r0, r3
 8008720:	3708      	adds	r7, #8
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	20000260 	.word	0x20000260
 800872c:	20000240 	.word	0x20000240
 8008730:	20000268 	.word	0x20000268

08008734 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 8008734:	b590      	push	{r4, r7, lr}
 8008736:	b089      	sub	sp, #36	; 0x24
 8008738:	af02      	add	r7, sp, #8
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 8008740:	4b17      	ldr	r3, [pc, #92]	; (80087a0 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 8008742:	2200      	movs	r2, #0
 8008744:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8008746:	2300      	movs	r3, #0
 8008748:	75fb      	strb	r3, [r7, #23]
 800874a:	e020      	b.n	800878e <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008754:	681c      	ldr	r4, [r3, #0]
 8008756:	7dfb      	ldrb	r3, [r7, #23]
 8008758:	005b      	lsls	r3, r3, #1
 800875a:	461a      	mov	r2, r3
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	1899      	adds	r1, r3, r2
 8008760:	7dfb      	ldrb	r3, [r7, #23]
 8008762:	005b      	lsls	r3, r3, #1
 8008764:	461a      	mov	r2, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	441a      	add	r2, r3
 800876a:	230a      	movs	r3, #10
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	2302      	movs	r3, #2
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 8008774:	2300      	movs	r3, #0
 8008776:	75bb      	strb	r3, [r7, #22]
 8008778:	e003      	b.n	8008782 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x4e>
 800877a:	bf00      	nop
 800877c:	7dbb      	ldrb	r3, [r7, #22]
 800877e:	3301      	adds	r3, #1
 8008780:	75bb      	strb	r3, [r7, #22]
 8008782:	7dbb      	ldrb	r3, [r7, #22]
 8008784:	2b7c      	cmp	r3, #124	; 0x7c
 8008786:	d9f8      	bls.n	800877a <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8008788:	7dfb      	ldrb	r3, [r7, #23]
 800878a:	3301      	adds	r3, #1
 800878c:	75fb      	strb	r3, [r7, #23]
 800878e:	7dfb      	ldrb	r3, [r7, #23]
 8008790:	2b03      	cmp	r3, #3
 8008792:	d9db      	bls.n	800874c <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 8008794:	bf00      	nop
}
 8008796:	bf00      	nop
 8008798:	371c      	adds	r7, #28
 800879a:	46bd      	mov	sp, r7
 800879c:	bd90      	pop	{r4, r7, pc}
 800879e:	bf00      	nop
 80087a0:	2000023d 	.word	0x2000023d

080087a4 <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 80087a4:	b480      	push	{r7}
 80087a6:	b087      	sub	sp, #28
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	4613      	mov	r3, r2
 80087b0:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 80087b2:	2300      	movs	r3, #0
 80087b4:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 80087b6:	2301      	movs	r3, #1
 80087b8:	74fb      	strb	r3, [r7, #19]
 80087ba:	e016      	b.n	80087ea <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 80087bc:	7cfb      	ldrb	r3, [r7, #19]
 80087be:	005b      	lsls	r3, r3, #1
 80087c0:	461a      	mov	r2, r3
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	7f1b      	ldrb	r3, [r3, #28]
 80087c6:	4413      	add	r3, r2
 80087c8:	68ba      	ldr	r2, [r7, #8]
 80087ca:	4413      	add	r3, r2
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	4619      	mov	r1, r3
 80087d0:	79fa      	ldrb	r2, [r7, #7]
 80087d2:	7cfb      	ldrb	r3, [r7, #19]
 80087d4:	1ad3      	subs	r3, r2, r3
 80087d6:	00db      	lsls	r3, r3, #3
 80087d8:	fa01 f303 	lsl.w	r3, r1, r3
 80087dc:	461a      	mov	r2, r3
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	4313      	orrs	r3, r2
 80087e2:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 80087e4:	7cfb      	ldrb	r3, [r7, #19]
 80087e6:	3301      	adds	r3, #1
 80087e8:	74fb      	strb	r3, [r7, #19]
 80087ea:	7cfb      	ldrb	r3, [r7, #19]
 80087ec:	2b03      	cmp	r3, #3
 80087ee:	d9e5      	bls.n	80087bc <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 80087f0:	697b      	ldr	r3, [r7, #20]
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	371c      	adds	r7, #28
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
	...

08008800 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	460b      	mov	r3, r1
 800880a:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 800880c:	2300      	movs	r3, #0
 800880e:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	2118      	movs	r1, #24
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	4798      	blx	r3
 8008820:	4602      	mov	r2, r0
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008826:	b292      	uxth	r2, r2
 8008828:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 800882a:	78fb      	ldrb	r3, [r7, #3]
 800882c:	2b0e      	cmp	r3, #14
 800882e:	f200 8099 	bhi.w	8008964 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
 8008832:	a201      	add	r2, pc, #4	; (adr r2, 8008838 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x38>)
 8008834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008838:	08008875 	.word	0x08008875
 800883c:	08008885 	.word	0x08008885
 8008840:	08008895 	.word	0x08008895
 8008844:	080088a5 	.word	0x080088a5
 8008848:	080088b5 	.word	0x080088b5
 800884c:	080088c5 	.word	0x080088c5
 8008850:	080088d5 	.word	0x080088d5
 8008854:	080088e5 	.word	0x080088e5
 8008858:	080088f5 	.word	0x080088f5
 800885c:	08008905 	.word	0x08008905
 8008860:	08008915 	.word	0x08008915
 8008864:	08008925 	.word	0x08008925
 8008868:	08008935 	.word	0x08008935
 800886c:	08008945 	.word	0x08008945
 8008870:	08008955 	.word	0x08008955
      state = pL6470_StatusRegister->HiZ;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800887e:	b2db      	uxtb	r3, r3
 8008880:	73fb      	strb	r3, [r7, #15]
      break;
 8008882:	e06f      	b.n	8008964 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800888e:	b2db      	uxtb	r3, r3
 8008890:	73fb      	strb	r3, [r7, #15]
      break;
 8008892:	e067      	b.n	8008964 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	73fb      	strb	r3, [r7, #15]
      break;
 80088a2:	e05f      	b.n	8008964 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	73fb      	strb	r3, [r7, #15]
      break;
 80088b2:	e057      	b.n	8008964 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	73fb      	strb	r3, [r7, #15]
      break;
 80088c2:	e04f      	b.n	8008964 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	f3c3 1341 	ubfx	r3, r3, #5, #2
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	73fb      	strb	r3, [r7, #15]
      break;
 80088d2:	e047      	b.n	8008964 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	73fb      	strb	r3, [r7, #15]
      break;
 80088e2:	e03f      	b.n	8008964 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088e8:	785b      	ldrb	r3, [r3, #1]
 80088ea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	73fb      	strb	r3, [r7, #15]
      break;
 80088f2:	e037      	b.n	8008964 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088f8:	785b      	ldrb	r3, [r3, #1]
 80088fa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	73fb      	strb	r3, [r7, #15]
      break;
 8008902:	e02f      	b.n	8008964 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008908:	785b      	ldrb	r3, [r3, #1]
 800890a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800890e:	b2db      	uxtb	r3, r3
 8008910:	73fb      	strb	r3, [r7, #15]
      break;
 8008912:	e027      	b.n	8008964 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008918:	785b      	ldrb	r3, [r3, #1]
 800891a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800891e:	b2db      	uxtb	r3, r3
 8008920:	73fb      	strb	r3, [r7, #15]
      break;
 8008922:	e01f      	b.n	8008964 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008928:	785b      	ldrb	r3, [r3, #1]
 800892a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800892e:	b2db      	uxtb	r3, r3
 8008930:	73fb      	strb	r3, [r7, #15]
      break;
 8008932:	e017      	b.n	8008964 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008938:	785b      	ldrb	r3, [r3, #1]
 800893a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800893e:	b2db      	uxtb	r3, r3
 8008940:	73fb      	strb	r3, [r7, #15]
      break;
 8008942:	e00f      	b.n	8008964 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008948:	785b      	ldrb	r3, [r3, #1]
 800894a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800894e:	b2db      	uxtb	r3, r3
 8008950:	73fb      	strb	r3, [r7, #15]
      break;
 8008952:	e007      	b.n	8008964 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008958:	785b      	ldrb	r3, [r3, #1]
 800895a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800895e:	b2db      	uxtb	r3, r3
 8008960:	73fb      	strb	r3, [r7, #15]
      break;
 8008962:	bf00      	nop
  return state;
 8008964:	7bfb      	ldrb	r3, [r7, #15]
}
 8008966:	4618      	mov	r0, r3
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop

08008970 <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	460b      	mov	r3, r1
 800897a:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 800897c:	78fb      	ldrb	r3, [r7, #3]
 800897e:	2b18      	cmp	r3, #24
 8008980:	d809      	bhi.n	8008996 <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a19      	ldr	r1, [r3, #32]
 8008986:	78fa      	ldrb	r2, [r7, #3]
 8008988:	4613      	mov	r3, r2
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	4413      	add	r3, r2
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	440b      	add	r3, r1
 8008992:	3301      	adds	r3, #1
 8008994:	e000      	b.n	8008998 <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 8008996:	2300      	movs	r3, #0
}
 8008998:	4618      	mov	r0, r3
 800899a:	370c      	adds	r7, #12
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr

080089a4 <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 80089a4:	b480      	push	{r7}
 80089a6:	b085      	sub	sp, #20
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 80089ae:	2300      	movs	r3, #0
 80089b0:	73fb      	strb	r3, [r7, #15]
 80089b2:	e01a      	b.n	80089ea <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
 80089b6:	011b      	lsls	r3, r3, #4
 80089b8:	683a      	ldr	r2, [r7, #0]
 80089ba:	4413      	add	r3, r2
 80089bc:	2200      	movs	r2, #0
 80089be:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 80089c0:	7bfb      	ldrb	r3, [r7, #15]
 80089c2:	011b      	lsls	r3, r3, #4
 80089c4:	683a      	ldr	r2, [r7, #0]
 80089c6:	4413      	add	r3, r2
 80089c8:	2200      	movs	r2, #0
 80089ca:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 80089cc:	7bfb      	ldrb	r3, [r7, #15]
 80089ce:	011b      	lsls	r3, r3, #4
 80089d0:	683a      	ldr	r2, [r7, #0]
 80089d2:	4413      	add	r3, r2
 80089d4:	2200      	movs	r2, #0
 80089d6:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
 80089da:	011b      	lsls	r3, r3, #4
 80089dc:	683a      	ldr	r2, [r7, #0]
 80089de:	4413      	add	r3, r2
 80089e0:	2200      	movs	r2, #0
 80089e2:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 80089e4:	7bfb      	ldrb	r3, [r7, #15]
 80089e6:	3301      	adds	r3, #1
 80089e8:	73fb      	strb	r3, [r7, #15]
 80089ea:	7bfb      	ldrb	r3, [r7, #15]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d9e1      	bls.n	80089b4 <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 80089f0:	bf00      	nop
 80089f2:	bf00      	nop
 80089f4:	3714      	adds	r7, #20
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr

080089fe <_ZN5L6470I8shield_2E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 80089fe:	b480      	push	{r7}
 8008a00:	b085      	sub	sp, #20
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	60f8      	str	r0, [r7, #12]
 8008a06:	60b9      	str	r1, [r7, #8]
 8008a08:	603b      	str	r3, [r7, #0]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	7f1b      	ldrb	r3, [r3, #28]
 8008a12:	011b      	lsls	r3, r3, #4
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	4413      	add	r3, r2
 8008a18:	79fa      	ldrb	r2, [r7, #7]
 8008a1a:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	7f1b      	ldrb	r3, [r3, #28]
 8008a20:	011b      	lsls	r3, r3, #4
 8008a22:	68ba      	ldr	r2, [r7, #8]
 8008a24:	4413      	add	r3, r2
 8008a26:	683a      	ldr	r2, [r7, #0]
 8008a28:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	7f1b      	ldrb	r3, [r3, #28]
 8008a2e:	011b      	lsls	r3, r3, #4
 8008a30:	68ba      	ldr	r2, [r7, #8]
 8008a32:	4413      	add	r3, r2
 8008a34:	69ba      	ldr	r2, [r7, #24]
 8008a36:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	7f1b      	ldrb	r3, [r3, #28]
 8008a3c:	011b      	lsls	r3, r3, #4
 8008a3e:	68ba      	ldr	r2, [r7, #8]
 8008a40:	4413      	add	r3, r2
 8008a42:	69fa      	ldr	r2, [r7, #28]
 8008a44:	60da      	str	r2, [r3, #12]
}
 8008a46:	bf00      	nop
 8008a48:	3714      	adds	r7, #20
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr
	...

08008a54 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 8008a54:	b590      	push	{r4, r7, lr}
 8008a56:	b087      	sub	sp, #28
 8008a58:	af02      	add	r7, sp, #8
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	603b      	str	r3, [r7, #0]
 8008a60:	4613      	mov	r3, r2
 8008a62:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 8008a64:	4b10      	ldr	r3, [pc, #64]	; (8008aa8 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d10a      	bne.n	8008a82 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8008a6c:	4b0e      	ldr	r3, [pc, #56]	; (8008aa8 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 8008a6e:	2201      	movs	r2, #1
 8008a70:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	68b9      	ldr	r1, [r7, #8]
 8008a7e:	68f8      	ldr	r0, [r7, #12]
 8008a80:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8008a8a:	681c      	ldr	r4, [r3, #0]
 8008a8c:	79fa      	ldrb	r2, [r7, #7]
 8008a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a90:	9301      	str	r3, [sp, #4]
 8008a92:	6a3b      	ldr	r3, [r7, #32]
 8008a94:	9300      	str	r3, [sp, #0]
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	68b9      	ldr	r1, [r7, #8]
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	47a0      	blx	r4
}
 8008a9e:	bf00      	nop
 8008aa0:	3714      	adds	r7, #20
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd90      	pop	{r4, r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	2000023d 	.word	0x2000023d

08008aac <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 8008aac:	b480      	push	{r7}
 8008aae:	b087      	sub	sp, #28
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8008abc:	2300      	movs	r3, #0
 8008abe:	75bb      	strb	r3, [r7, #22]
 8008ac0:	e013      	b.n	8008aea <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	75fb      	strb	r3, [r7, #23]
 8008ac6:	e00a      	b.n	8008ade <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 8008ac8:	7d7b      	ldrb	r3, [r7, #21]
 8008aca:	1c5a      	adds	r2, r3, #1
 8008acc:	757a      	strb	r2, [r7, #21]
 8008ace:	461a      	mov	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8008ad8:	7dfb      	ldrb	r3, [r7, #23]
 8008ada:	3301      	adds	r3, #1
 8008adc:	75fb      	strb	r3, [r7, #23]
 8008ade:	7dfb      	ldrb	r3, [r7, #23]
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d9f1      	bls.n	8008ac8 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8008ae4:	7dbb      	ldrb	r3, [r7, #22]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	75bb      	strb	r3, [r7, #22]
 8008aea:	7dbb      	ldrb	r3, [r7, #22]
 8008aec:	2b03      	cmp	r3, #3
 8008aee:	d9e8      	bls.n	8008ac2 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8008af0:	2300      	movs	r3, #0
 8008af2:	75fb      	strb	r3, [r7, #23]
 8008af4:	e1f1      	b.n	8008eda <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008afa:	7dfb      	ldrb	r3, [r7, #23]
 8008afc:	011b      	lsls	r3, r3, #4
 8008afe:	68b9      	ldr	r1, [r7, #8]
 8008b00:	440b      	add	r3, r1
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	4619      	mov	r1, r3
 8008b06:	460b      	mov	r3, r1
 8008b08:	00db      	lsls	r3, r3, #3
 8008b0a:	1a5b      	subs	r3, r3, r1
 8008b0c:	005b      	lsls	r3, r3, #1
 8008b0e:	441a      	add	r2, r3
 8008b10:	7dfb      	ldrb	r3, [r7, #23]
 8008b12:	6879      	ldr	r1, [r7, #4]
 8008b14:	440b      	add	r3, r1
 8008b16:	7b12      	ldrb	r2, [r2, #12]
 8008b18:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 8008b1a:	7dfb      	ldrb	r3, [r7, #23]
 8008b1c:	011b      	lsls	r3, r3, #4
 8008b1e:	68ba      	ldr	r2, [r7, #8]
 8008b20:	4413      	add	r3, r2
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	2b12      	cmp	r3, #18
 8008b26:	f200 81d5 	bhi.w	8008ed4 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 8008b2a:	a201      	add	r2, pc, #4	; (adr r2, 8008b30 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 8008b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b30:	08008ed5 	.word	0x08008ed5
 8008b34:	08008b7d 	.word	0x08008b7d
 8008b38:	08008c05 	.word	0x08008c05
 8008b3c:	08008c35 	.word	0x08008c35
 8008b40:	08008c9d 	.word	0x08008c9d
 8008b44:	08008ccb 	.word	0x08008ccb
 8008b48:	08008d33 	.word	0x08008d33
 8008b4c:	08008d6f 	.word	0x08008d6f
 8008b50:	08008dd7 	.word	0x08008dd7
 8008b54:	08008e73 	.word	0x08008e73
 8008b58:	08008ed5 	.word	0x08008ed5
 8008b5c:	08008ed5 	.word	0x08008ed5
 8008b60:	08008ed5 	.word	0x08008ed5
 8008b64:	08008ed5 	.word	0x08008ed5
 8008b68:	08008ed5 	.word	0x08008ed5
 8008b6c:	08008ed5 	.word	0x08008ed5
 8008b70:	08008ed5 	.word	0x08008ed5
 8008b74:	08008ed5 	.word	0x08008ed5
 8008b78:	08008ed5 	.word	0x08008ed5
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8008b7c:	7dfb      	ldrb	r3, [r7, #23]
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	4413      	add	r3, r2
 8008b82:	7819      	ldrb	r1, [r3, #0]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6a18      	ldr	r0, [r3, #32]
 8008b88:	7dfb      	ldrb	r3, [r7, #23]
 8008b8a:	011b      	lsls	r3, r3, #4
 8008b8c:	68ba      	ldr	r2, [r7, #8]
 8008b8e:	4413      	add	r3, r2
 8008b90:	685a      	ldr	r2, [r3, #4]
 8008b92:	4613      	mov	r3, r2
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	4413      	add	r3, r2
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	4403      	add	r3, r0
 8008b9c:	781a      	ldrb	r2, [r3, #0]
 8008b9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	4403      	add	r3, r0
 8008ba4:	430a      	orrs	r2, r1
 8008ba6:	b2d2      	uxtb	r2, r2
 8008ba8:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	6a19      	ldr	r1, [r3, #32]
 8008bae:	7dfb      	ldrb	r3, [r7, #23]
 8008bb0:	011b      	lsls	r3, r3, #4
 8008bb2:	68ba      	ldr	r2, [r7, #8]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	685a      	ldr	r2, [r3, #4]
 8008bb8:	4613      	mov	r3, r2
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	4413      	add	r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	440b      	add	r3, r1
 8008bc2:	7b9b      	ldrb	r3, [r3, #14]
 8008bc4:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	75bb      	strb	r3, [r7, #22]
 8008bca:	e016      	b.n	8008bfa <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 8008bcc:	7dfb      	ldrb	r3, [r7, #23]
 8008bce:	011b      	lsls	r3, r3, #4
 8008bd0:	68ba      	ldr	r2, [r7, #8]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	689a      	ldr	r2, [r3, #8]
 8008bd6:	7d39      	ldrb	r1, [r7, #20]
 8008bd8:	7dbb      	ldrb	r3, [r7, #22]
 8008bda:	1acb      	subs	r3, r1, r3
 8008bdc:	00db      	lsls	r3, r3, #3
 8008bde:	fa22 f103 	lsr.w	r1, r2, r3
 8008be2:	7dbb      	ldrb	r3, [r7, #22]
 8008be4:	005a      	lsls	r2, r3, #1
 8008be6:	7dfb      	ldrb	r3, [r7, #23]
 8008be8:	4413      	add	r3, r2
 8008bea:	461a      	mov	r2, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4413      	add	r3, r2
 8008bf0:	b2ca      	uxtb	r2, r1
 8008bf2:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8008bf4:	7dbb      	ldrb	r3, [r7, #22]
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	75bb      	strb	r3, [r7, #22]
 8008bfa:	7d3a      	ldrb	r2, [r7, #20]
 8008bfc:	7dbb      	ldrb	r3, [r7, #22]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d2e4      	bcs.n	8008bcc <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 8008c02:	e167      	b.n	8008ed4 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8008c04:	7dfb      	ldrb	r3, [r7, #23]
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	4413      	add	r3, r2
 8008c0a:	7819      	ldrb	r1, [r3, #0]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6a18      	ldr	r0, [r3, #32]
 8008c10:	7dfb      	ldrb	r3, [r7, #23]
 8008c12:	011b      	lsls	r3, r3, #4
 8008c14:	68ba      	ldr	r2, [r7, #8]
 8008c16:	4413      	add	r3, r2
 8008c18:	685a      	ldr	r2, [r3, #4]
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	4413      	add	r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	4403      	add	r3, r0
 8008c24:	781a      	ldrb	r2, [r3, #0]
 8008c26:	7dfb      	ldrb	r3, [r7, #23]
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	4403      	add	r3, r0
 8008c2c:	430a      	orrs	r2, r1
 8008c2e:	b2d2      	uxtb	r2, r2
 8008c30:	701a      	strb	r2, [r3, #0]
      break;
 8008c32:	e14f      	b.n	8008ed4 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008c34:	7dfb      	ldrb	r3, [r7, #23]
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	4413      	add	r3, r2
 8008c3a:	7819      	ldrb	r1, [r3, #0]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008c40:	7dfb      	ldrb	r3, [r7, #23]
 8008c42:	011b      	lsls	r3, r3, #4
 8008c44:	68ba      	ldr	r2, [r7, #8]
 8008c46:	4413      	add	r3, r2
 8008c48:	685a      	ldr	r2, [r3, #4]
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	00db      	lsls	r3, r3, #3
 8008c4e:	4413      	add	r3, r2
 8008c50:	4403      	add	r3, r0
 8008c52:	7a1a      	ldrb	r2, [r3, #8]
 8008c54:	7dfb      	ldrb	r3, [r7, #23]
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	4403      	add	r3, r0
 8008c5a:	430a      	orrs	r2, r1
 8008c5c:	b2d2      	uxtb	r2, r2
 8008c5e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008c60:	2301      	movs	r3, #1
 8008c62:	75bb      	strb	r3, [r7, #22]
 8008c64:	e016      	b.n	8008c94 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8008c66:	7dfb      	ldrb	r3, [r7, #23]
 8008c68:	011b      	lsls	r3, r3, #4
 8008c6a:	68ba      	ldr	r2, [r7, #8]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	689a      	ldr	r2, [r3, #8]
 8008c70:	7dbb      	ldrb	r3, [r7, #22]
 8008c72:	f1c3 0303 	rsb	r3, r3, #3
 8008c76:	00db      	lsls	r3, r3, #3
 8008c78:	fa22 f103 	lsr.w	r1, r2, r3
 8008c7c:	7dbb      	ldrb	r3, [r7, #22]
 8008c7e:	005a      	lsls	r2, r3, #1
 8008c80:	7dfb      	ldrb	r3, [r7, #23]
 8008c82:	4413      	add	r3, r2
 8008c84:	461a      	mov	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4413      	add	r3, r2
 8008c8a:	b2ca      	uxtb	r2, r1
 8008c8c:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008c8e:	7dbb      	ldrb	r3, [r7, #22]
 8008c90:	3301      	adds	r3, #1
 8008c92:	75bb      	strb	r3, [r7, #22]
 8008c94:	7dbb      	ldrb	r3, [r7, #22]
 8008c96:	2b03      	cmp	r3, #3
 8008c98:	d9e5      	bls.n	8008c66 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 8008c9a:	e11b      	b.n	8008ed4 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008c9c:	7dfb      	ldrb	r3, [r7, #23]
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	7819      	ldrb	r1, [r3, #0]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008ca8:	7dfb      	ldrb	r3, [r7, #23]
 8008caa:	011b      	lsls	r3, r3, #4
 8008cac:	68ba      	ldr	r2, [r7, #8]
 8008cae:	4413      	add	r3, r2
 8008cb0:	685a      	ldr	r2, [r3, #4]
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	00db      	lsls	r3, r3, #3
 8008cb6:	4413      	add	r3, r2
 8008cb8:	4403      	add	r3, r0
 8008cba:	7a1a      	ldrb	r2, [r3, #8]
 8008cbc:	7dfb      	ldrb	r3, [r7, #23]
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	4403      	add	r3, r0
 8008cc2:	430a      	orrs	r2, r1
 8008cc4:	b2d2      	uxtb	r2, r2
 8008cc6:	701a      	strb	r2, [r3, #0]
      break;
 8008cc8:	e104      	b.n	8008ed4 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008cca:	7dfb      	ldrb	r3, [r7, #23]
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	4413      	add	r3, r2
 8008cd0:	7819      	ldrb	r1, [r3, #0]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008cd6:	7dfb      	ldrb	r3, [r7, #23]
 8008cd8:	011b      	lsls	r3, r3, #4
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	4413      	add	r3, r2
 8008cde:	685a      	ldr	r2, [r3, #4]
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	00db      	lsls	r3, r3, #3
 8008ce4:	4413      	add	r3, r2
 8008ce6:	4403      	add	r3, r0
 8008ce8:	7a1a      	ldrb	r2, [r3, #8]
 8008cea:	7dfb      	ldrb	r3, [r7, #23]
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	4403      	add	r3, r0
 8008cf0:	430a      	orrs	r2, r1
 8008cf2:	b2d2      	uxtb	r2, r2
 8008cf4:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	75bb      	strb	r3, [r7, #22]
 8008cfa:	e016      	b.n	8008d2a <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8008cfc:	7dfb      	ldrb	r3, [r7, #23]
 8008cfe:	011b      	lsls	r3, r3, #4
 8008d00:	68ba      	ldr	r2, [r7, #8]
 8008d02:	4413      	add	r3, r2
 8008d04:	689a      	ldr	r2, [r3, #8]
 8008d06:	7dbb      	ldrb	r3, [r7, #22]
 8008d08:	f1c3 0303 	rsb	r3, r3, #3
 8008d0c:	00db      	lsls	r3, r3, #3
 8008d0e:	fa22 f103 	lsr.w	r1, r2, r3
 8008d12:	7dbb      	ldrb	r3, [r7, #22]
 8008d14:	005a      	lsls	r2, r3, #1
 8008d16:	7dfb      	ldrb	r3, [r7, #23]
 8008d18:	4413      	add	r3, r2
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4413      	add	r3, r2
 8008d20:	b2ca      	uxtb	r2, r1
 8008d22:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008d24:	7dbb      	ldrb	r3, [r7, #22]
 8008d26:	3301      	adds	r3, #1
 8008d28:	75bb      	strb	r3, [r7, #22]
 8008d2a:	7dbb      	ldrb	r3, [r7, #22]
 8008d2c:	2b03      	cmp	r3, #3
 8008d2e:	d9e5      	bls.n	8008cfc <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 8008d30:	e0d0      	b.n	8008ed4 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008d32:	2301      	movs	r3, #1
 8008d34:	75bb      	strb	r3, [r7, #22]
 8008d36:	e016      	b.n	8008d66 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 8008d38:	7dfb      	ldrb	r3, [r7, #23]
 8008d3a:	011b      	lsls	r3, r3, #4
 8008d3c:	68ba      	ldr	r2, [r7, #8]
 8008d3e:	4413      	add	r3, r2
 8008d40:	685a      	ldr	r2, [r3, #4]
 8008d42:	7dbb      	ldrb	r3, [r7, #22]
 8008d44:	f1c3 0303 	rsb	r3, r3, #3
 8008d48:	00db      	lsls	r3, r3, #3
 8008d4a:	fa22 f103 	lsr.w	r1, r2, r3
 8008d4e:	7dbb      	ldrb	r3, [r7, #22]
 8008d50:	005a      	lsls	r2, r3, #1
 8008d52:	7dfb      	ldrb	r3, [r7, #23]
 8008d54:	4413      	add	r3, r2
 8008d56:	461a      	mov	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	b2ca      	uxtb	r2, r1
 8008d5e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008d60:	7dbb      	ldrb	r3, [r7, #22]
 8008d62:	3301      	adds	r3, #1
 8008d64:	75bb      	strb	r3, [r7, #22]
 8008d66:	7dbb      	ldrb	r3, [r7, #22]
 8008d68:	2b03      	cmp	r3, #3
 8008d6a:	d9e5      	bls.n	8008d38 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 8008d6c:	e0b2      	b.n	8008ed4 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008d6e:	7dfb      	ldrb	r3, [r7, #23]
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	4413      	add	r3, r2
 8008d74:	7819      	ldrb	r1, [r3, #0]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008d7a:	7dfb      	ldrb	r3, [r7, #23]
 8008d7c:	011b      	lsls	r3, r3, #4
 8008d7e:	68ba      	ldr	r2, [r7, #8]
 8008d80:	4413      	add	r3, r2
 8008d82:	685a      	ldr	r2, [r3, #4]
 8008d84:	4613      	mov	r3, r2
 8008d86:	00db      	lsls	r3, r3, #3
 8008d88:	4413      	add	r3, r2
 8008d8a:	4403      	add	r3, r0
 8008d8c:	7a1a      	ldrb	r2, [r3, #8]
 8008d8e:	7dfb      	ldrb	r3, [r7, #23]
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	4403      	add	r3, r0
 8008d94:	430a      	orrs	r2, r1
 8008d96:	b2d2      	uxtb	r2, r2
 8008d98:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	75bb      	strb	r3, [r7, #22]
 8008d9e:	e016      	b.n	8008dce <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8008da0:	7dfb      	ldrb	r3, [r7, #23]
 8008da2:	011b      	lsls	r3, r3, #4
 8008da4:	68ba      	ldr	r2, [r7, #8]
 8008da6:	4413      	add	r3, r2
 8008da8:	689a      	ldr	r2, [r3, #8]
 8008daa:	7dbb      	ldrb	r3, [r7, #22]
 8008dac:	f1c3 0303 	rsb	r3, r3, #3
 8008db0:	00db      	lsls	r3, r3, #3
 8008db2:	fa22 f103 	lsr.w	r1, r2, r3
 8008db6:	7dbb      	ldrb	r3, [r7, #22]
 8008db8:	005a      	lsls	r2, r3, #1
 8008dba:	7dfb      	ldrb	r3, [r7, #23]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	b2ca      	uxtb	r2, r1
 8008dc6:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008dc8:	7dbb      	ldrb	r3, [r7, #22]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	75bb      	strb	r3, [r7, #22]
 8008dce:	7dbb      	ldrb	r3, [r7, #22]
 8008dd0:	2b03      	cmp	r3, #3
 8008dd2:	d9e5      	bls.n	8008da0 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 8008dd4:	e07e      	b.n	8008ed4 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8008dd6:	7dfb      	ldrb	r3, [r7, #23]
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	4413      	add	r3, r2
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	b259      	sxtb	r1, r3
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008de4:	7dfb      	ldrb	r3, [r7, #23]
 8008de6:	011b      	lsls	r3, r3, #4
 8008de8:	68ba      	ldr	r2, [r7, #8]
 8008dea:	4413      	add	r3, r2
 8008dec:	685a      	ldr	r2, [r3, #4]
 8008dee:	4613      	mov	r3, r2
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	4413      	add	r3, r2
 8008df4:	4403      	add	r3, r0
 8008df6:	791b      	ldrb	r3, [r3, #4]
 8008df8:	00db      	lsls	r3, r3, #3
 8008dfa:	b25b      	sxtb	r3, r3
 8008dfc:	430b      	orrs	r3, r1
 8008dfe:	b259      	sxtb	r1, r3
 8008e00:	7dfb      	ldrb	r3, [r7, #23]
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	4413      	add	r3, r2
 8008e06:	b2ca      	uxtb	r2, r1
 8008e08:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8008e0a:	7dfb      	ldrb	r3, [r7, #23]
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	4413      	add	r3, r2
 8008e10:	7819      	ldrb	r1, [r3, #0]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008e16:	7dfb      	ldrb	r3, [r7, #23]
 8008e18:	011b      	lsls	r3, r3, #4
 8008e1a:	68ba      	ldr	r2, [r7, #8]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	689a      	ldr	r2, [r3, #8]
 8008e20:	4613      	mov	r3, r2
 8008e22:	00db      	lsls	r3, r3, #3
 8008e24:	4413      	add	r3, r2
 8008e26:	4403      	add	r3, r0
 8008e28:	7a1a      	ldrb	r2, [r3, #8]
 8008e2a:	7dfb      	ldrb	r3, [r7, #23]
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	4403      	add	r3, r0
 8008e30:	430a      	orrs	r2, r1
 8008e32:	b2d2      	uxtb	r2, r2
 8008e34:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008e36:	2301      	movs	r3, #1
 8008e38:	75bb      	strb	r3, [r7, #22]
 8008e3a:	e016      	b.n	8008e6a <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 8008e3c:	7dfb      	ldrb	r3, [r7, #23]
 8008e3e:	011b      	lsls	r3, r3, #4
 8008e40:	68ba      	ldr	r2, [r7, #8]
 8008e42:	4413      	add	r3, r2
 8008e44:	68da      	ldr	r2, [r3, #12]
 8008e46:	7dbb      	ldrb	r3, [r7, #22]
 8008e48:	f1c3 0303 	rsb	r3, r3, #3
 8008e4c:	00db      	lsls	r3, r3, #3
 8008e4e:	fa22 f103 	lsr.w	r1, r2, r3
 8008e52:	7dbb      	ldrb	r3, [r7, #22]
 8008e54:	005a      	lsls	r2, r3, #1
 8008e56:	7dfb      	ldrb	r3, [r7, #23]
 8008e58:	4413      	add	r3, r2
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4413      	add	r3, r2
 8008e60:	b2ca      	uxtb	r2, r1
 8008e62:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008e64:	7dbb      	ldrb	r3, [r7, #22]
 8008e66:	3301      	adds	r3, #1
 8008e68:	75bb      	strb	r3, [r7, #22]
 8008e6a:	7dbb      	ldrb	r3, [r7, #22]
 8008e6c:	2b03      	cmp	r3, #3
 8008e6e:	d9e5      	bls.n	8008e3c <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 8008e70:	e030      	b.n	8008ed4 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8008e72:	7dfb      	ldrb	r3, [r7, #23]
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	4413      	add	r3, r2
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	b259      	sxtb	r1, r3
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008e80:	7dfb      	ldrb	r3, [r7, #23]
 8008e82:	011b      	lsls	r3, r3, #4
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	4413      	add	r3, r2
 8008e88:	685a      	ldr	r2, [r3, #4]
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	4413      	add	r3, r2
 8008e90:	4403      	add	r3, r0
 8008e92:	791b      	ldrb	r3, [r3, #4]
 8008e94:	00db      	lsls	r3, r3, #3
 8008e96:	b25b      	sxtb	r3, r3
 8008e98:	430b      	orrs	r3, r1
 8008e9a:	b259      	sxtb	r1, r3
 8008e9c:	7dfb      	ldrb	r3, [r7, #23]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	b2ca      	uxtb	r2, r1
 8008ea4:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8008ea6:	7dfb      	ldrb	r3, [r7, #23]
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	4413      	add	r3, r2
 8008eac:	7819      	ldrb	r1, [r3, #0]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008eb2:	7dfb      	ldrb	r3, [r7, #23]
 8008eb4:	011b      	lsls	r3, r3, #4
 8008eb6:	68ba      	ldr	r2, [r7, #8]
 8008eb8:	4413      	add	r3, r2
 8008eba:	689a      	ldr	r2, [r3, #8]
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	00db      	lsls	r3, r3, #3
 8008ec0:	4413      	add	r3, r2
 8008ec2:	4403      	add	r3, r0
 8008ec4:	7a1a      	ldrb	r2, [r3, #8]
 8008ec6:	7dfb      	ldrb	r3, [r7, #23]
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	4403      	add	r3, r0
 8008ecc:	430a      	orrs	r2, r1
 8008ece:	b2d2      	uxtb	r2, r2
 8008ed0:	701a      	strb	r2, [r3, #0]
      break;
 8008ed2:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8008ed4:	7dfb      	ldrb	r3, [r7, #23]
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	75fb      	strb	r3, [r7, #23]
 8008eda:	7dfb      	ldrb	r3, [r7, #23]
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	f67f ae0a 	bls.w	8008af6 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 8008ee2:	bf00      	nop
 8008ee4:	bf00      	nop
 8008ee6:	371c      	adds	r7, #28
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <_ZN5L6470I8shield_2E11L6470_roundEf>:
    int L6470_round(float f)
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	ed87 0a00 	vstr	s0, [r7]
        if (f >= 0) {
 8008efc:	edd7 7a00 	vldr	s15, [r7]
 8008f00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f08:	db1e      	blt.n	8008f48 <_ZN5L6470I8shield_2E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 8008f0a:	edd7 7a00 	vldr	s15, [r7]
 8008f0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f12:	ee17 2a90 	vmov	r2, s15
 8008f16:	edd7 7a00 	vldr	s15, [r7]
 8008f1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f22:	ed97 7a00 	vldr	s14, [r7]
 8008f26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f2a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008f2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f36:	bf4c      	ite	mi
 8008f38:	2301      	movmi	r3, #1
 8008f3a:	2300      	movpl	r3, #0
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	f083 0301 	eor.w	r3, r3, #1
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	4413      	add	r3, r2
 8008f46:	e01a      	b.n	8008f7e <_ZN5L6470I8shield_2E11L6470_roundEf+0x8e>
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 8008f48:	edd7 7a00 	vldr	s15, [r7]
 8008f4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f50:	ee17 2a90 	vmov	r2, s15
 8008f54:	edd7 7a00 	vldr	s15, [r7]
 8008f58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f60:	ed97 7a00 	vldr	s14, [r7]
 8008f64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f68:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8008f6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f74:	d501      	bpl.n	8008f7a <_ZN5L6470I8shield_2E11L6470_roundEf+0x8a>
 8008f76:	2301      	movs	r3, #1
 8008f78:	e000      	b.n	8008f7c <_ZN5L6470I8shield_2E11L6470_roundEf+0x8c>
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	1ad3      	subs	r3, r2, r3
    }
 8008f7e:	4618      	mov	r0, r3
 8008f80:	370c      	adds	r7, #12
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr

08008f8a <_ZN5L6470I8shield_2E4ReadEPht>:
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b086      	sub	sp, #24
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	60f8      	str	r0, [r7, #12]
 8008f92:	60b9      	str	r1, [r7, #8]
 8008f94:	4613      	mov	r3, r2
 8008f96:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6918      	ldr	r0, [r3, #16]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	8a9b      	ldrh	r3, [r3, #20]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	f004 fb70 	bl	800d688 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6998      	ldr	r0, [r3, #24]
 8008fac:	88fa      	ldrh	r2, [r7, #6]
 8008fae:	2364      	movs	r3, #100	; 0x64
 8008fb0:	68b9      	ldr	r1, [r7, #8]
 8008fb2:	f005 fb80 	bl	800e6b6 <HAL_SPI_Receive>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6918      	ldr	r0, [r3, #16]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	8a9b      	ldrh	r3, [r3, #20]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	f004 fb5f 	bl	800d688 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8008fca:	7dfb      	ldrb	r3, [r7, #23]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d001      	beq.n	8008fd4 <_ZN5L6470I8shield_2E4ReadEPht+0x4a>
        	return COMPONENT_ERROR;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	e000      	b.n	8008fd6 <_ZN5L6470I8shield_2E4ReadEPht+0x4c>
        return COMPONENT_OK;
 8008fd4:	2300      	movs	r3, #0
    }
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3718      	adds	r7, #24
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <_ZN5L6470I8shield_2E5WriteEPht>:
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b086      	sub	sp, #24
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	60f8      	str	r0, [r7, #12]
 8008fe6:	60b9      	str	r1, [r7, #8]
 8008fe8:	4613      	mov	r3, r2
 8008fea:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6918      	ldr	r0, [r3, #16]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	8a9b      	ldrh	r3, [r3, #20]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	f004 fb46 	bl	800d688 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6998      	ldr	r0, [r3, #24]
 8009000:	88fa      	ldrh	r2, [r7, #6]
 8009002:	2364      	movs	r3, #100	; 0x64
 8009004:	68b9      	ldr	r1, [r7, #8]
 8009006:	f005 fa1a 	bl	800e43e <HAL_SPI_Transmit>
 800900a:	4603      	mov	r3, r0
 800900c:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	6918      	ldr	r0, [r3, #16]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	8a9b      	ldrh	r3, [r3, #20]
 8009016:	2201      	movs	r2, #1
 8009018:	4619      	mov	r1, r3
 800901a:	f004 fb35 	bl	800d688 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 800901e:	7dfb      	ldrb	r3, [r7, #23]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d001      	beq.n	8009028 <_ZN5L6470I8shield_2E5WriteEPht+0x4a>
        	return COMPONENT_ERROR;
 8009024:	2301      	movs	r3, #1
 8009026:	e000      	b.n	800902a <_ZN5L6470I8shield_2E5WriteEPht+0x4c>
        return COMPONENT_OK;
 8009028:	2300      	movs	r3, #0
    }
 800902a:	4618      	mov	r0, r3
 800902c:	3718      	adds	r7, #24
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t>:
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 8009032:	b580      	push	{r7, lr}
 8009034:	b088      	sub	sp, #32
 8009036:	af02      	add	r7, sp, #8
 8009038:	60f8      	str	r0, [r7, #12]
 800903a:	60b9      	str	r1, [r7, #8]
 800903c:	607a      	str	r2, [r7, #4]
 800903e:	807b      	strh	r3, [r7, #2]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6918      	ldr	r0, [r3, #16]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	8a9b      	ldrh	r3, [r3, #20]
 8009048:	2200      	movs	r2, #0
 800904a:	4619      	mov	r1, r3
 800904c:	f004 fb1c 	bl	800d688 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6998      	ldr	r0, [r3, #24]
 8009054:	887b      	ldrh	r3, [r7, #2]
 8009056:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800905a:	9200      	str	r2, [sp, #0]
 800905c:	68ba      	ldr	r2, [r7, #8]
 800905e:	6879      	ldr	r1, [r7, #4]
 8009060:	f005 fc3a 	bl	800e8d8 <HAL_SPI_TransmitReceive>
 8009064:	4603      	mov	r3, r0
 8009066:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 8009068:	7dfb      	ldrb	r3, [r7, #23]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d009      	beq.n	8009082 <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t+0x50>
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	6918      	ldr	r0, [r3, #16]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	8a9b      	ldrh	r3, [r3, #20]
 8009076:	2201      	movs	r2, #1
 8009078:	4619      	mov	r1, r3
 800907a:	f004 fb05 	bl	800d688 <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 800907e:	2301      	movs	r3, #1
 8009080:	e008      	b.n	8009094 <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t+0x62>
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	6918      	ldr	r0, [r3, #16]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	8a9b      	ldrh	r3, [r3, #20]
 800908a:	2201      	movs	r2, #1
 800908c:	4619      	mov	r1, r3
 800908e:	f004 fafb 	bl	800d688 <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 8009092:	2300      	movs	r3, #0
    }
 8009094:	4618      	mov	r0, r3
 8009096:	3718      	adds	r7, #24
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <_ZN5L6470I8shield_2E23L6470_SPI_CommunicationEPhS2_tm>:
    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 800909c:	b590      	push	{r4, r7, lr}
 800909e:	b085      	sub	sp, #20
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	607a      	str	r2, [r7, #4]
 80090a8:	807b      	strh	r3, [r7, #2]
        ReadWrite(pRxData, pTxData, Size);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80090b2:	681c      	ldr	r4, [r3, #0]
 80090b4:	887b      	ldrh	r3, [r7, #2]
 80090b6:	68ba      	ldr	r2, [r7, #8]
 80090b8:	6879      	ldr	r1, [r7, #4]
 80090ba:	68f8      	ldr	r0, [r7, #12]
 80090bc:	47a0      	blx	r4
    }
 80090be:	bf00      	nop
 80090c0:	3714      	adds	r7, #20
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd90      	pop	{r4, r7, pc}

080090c6 <_ZN5L6470I8shield_1E4initEPv>:
    virtual int init(void *init)
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b082      	sub	sp, #8
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
 80090ce:	6039      	str	r1, [r7, #0]
        return (int) L6470_Config((void *) init);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	6839      	ldr	r1, [r7, #0]
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	4798      	blx	r3
 80090e0:	4603      	mov	r3, r0
    }
 80090e2:	4618      	mov	r0, r3
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <_ZN5L6470I8shield_1E10get_statusEv>:
    virtual unsigned int get_status(void)
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b082      	sub	sp, #8
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
        return (unsigned int) L6470_GetStatus();
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	4798      	blx	r3
 8009100:	4603      	mov	r3, r0
    }
 8009102:	4618      	mov	r0, r3
 8009104:	3708      	adds	r7, #8
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <_ZN5L6470I8shield_1E13get_parameterEj>:
    virtual unsigned int get_parameter(unsigned int parameter)
 800910a:	b580      	push	{r7, lr}
 800910c:	b082      	sub	sp, #8
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
 8009112:	6039      	str	r1, [r7, #0]
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	683a      	ldr	r2, [r7, #0]
 8009120:	b2d2      	uxtb	r2, r2
 8009122:	4611      	mov	r1, r2
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	4798      	blx	r3
 8009128:	4603      	mov	r3, r0
    }
 800912a:	4618      	mov	r0, r3
 800912c:	3708      	adds	r7, #8
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <_ZN5L6470I8shield_1E12get_positionEv>:
    virtual signed int get_position(void)
 8009132:	b590      	push	{r4, r7, lr}
 8009134:	b083      	sub	sp, #12
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8009142:	681c      	ldr	r4, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	2100      	movs	r1, #0
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	4798      	blx	r3
 8009154:	4603      	mov	r3, r0
 8009156:	4619      	mov	r1, r3
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	47a0      	blx	r4
 800915c:	4603      	mov	r3, r0
    }
 800915e:	4618      	mov	r0, r3
 8009160:	370c      	adds	r7, #12
 8009162:	46bd      	mov	sp, r7
 8009164:	bd90      	pop	{r4, r7, pc}

08009166 <_ZN5L6470I8shield_1E8get_markEv>:
    virtual signed int get_mark(void)
 8009166:	b590      	push	{r4, r7, lr}
 8009168:	b083      	sub	sp, #12
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8009176:	681c      	ldr	r4, [r3, #0]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2102      	movs	r1, #2
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	4798      	blx	r3
 8009188:	4603      	mov	r3, r0
 800918a:	4619      	mov	r1, r3
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	47a0      	blx	r4
 8009190:	4603      	mov	r3, r0
    }
 8009192:	4618      	mov	r0, r3
 8009194:	370c      	adds	r7, #12
 8009196:	46bd      	mov	sp, r7
 8009198:	bd90      	pop	{r4, r7, pc}

0800919a <_ZN5L6470I8shield_1E9get_speedEv>:
    virtual unsigned int get_speed(void)
 800919a:	b5b0      	push	{r4, r5, r7, lr}
 800919c:	b082      	sub	sp, #8
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80091aa:	681c      	ldr	r4, [r3, #0]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80091b4:	681d      	ldr	r5, [r3, #0]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2103      	movs	r1, #3
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	4798      	blx	r3
 80091c6:	4603      	mov	r3, r0
 80091c8:	4619      	mov	r1, r3
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	47a8      	blx	r5
 80091ce:	eef0 7a40 	vmov.f32	s15, s0
 80091d2:	eeb0 0a67 	vmov.f32	s0, s15
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	47a0      	blx	r4
 80091da:	4603      	mov	r3, r0
    }
 80091dc:	4618      	mov	r0, r3
 80091de:	3708      	adds	r7, #8
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bdb0      	pop	{r4, r5, r7, pc}

080091e4 <_ZN5L6470I8shield_1E13get_max_speedEv>:
    virtual unsigned int get_max_speed(void)
 80091e4:	b5b0      	push	{r4, r5, r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80091f4:	681c      	ldr	r4, [r3, #0]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80091fe:	681d      	ldr	r5, [r3, #0]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2106      	movs	r1, #6
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	4798      	blx	r3
 8009210:	4603      	mov	r3, r0
 8009212:	b29b      	uxth	r3, r3
 8009214:	4619      	mov	r1, r3
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	47a8      	blx	r5
 800921a:	eef0 7a40 	vmov.f32	s15, s0
 800921e:	eeb0 0a67 	vmov.f32	s0, s15
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	47a0      	blx	r4
 8009226:	4603      	mov	r3, r0
    }
 8009228:	4618      	mov	r0, r3
 800922a:	3708      	adds	r7, #8
 800922c:	46bd      	mov	sp, r7
 800922e:	bdb0      	pop	{r4, r5, r7, pc}

08009230 <_ZN5L6470I8shield_1E13get_min_speedEv>:
    virtual unsigned int get_min_speed(void)
 8009230:	b5b0      	push	{r4, r5, r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8009240:	681c      	ldr	r4, [r3, #0]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800924a:	681d      	ldr	r5, [r3, #0]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2107      	movs	r1, #7
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	4798      	blx	r3
 800925c:	4603      	mov	r3, r0
 800925e:	b29b      	uxth	r3, r3
 8009260:	4619      	mov	r1, r3
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	47a8      	blx	r5
 8009266:	eef0 7a40 	vmov.f32	s15, s0
 800926a:	eeb0 0a67 	vmov.f32	s0, s15
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	47a0      	blx	r4
 8009272:	4603      	mov	r3, r0
    }
 8009274:	4618      	mov	r0, r3
 8009276:	3708      	adds	r7, #8
 8009278:	46bd      	mov	sp, r7
 800927a:	bdb0      	pop	{r4, r5, r7, pc}

0800927c <_ZN5L6470I8shield_1E16get_accelerationEv>:
    virtual unsigned int get_acceleration(void)
 800927c:	b5b0      	push	{r4, r5, r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800928c:	681c      	ldr	r4, [r3, #0]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009296:	681d      	ldr	r5, [r3, #0]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2104      	movs	r1, #4
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	4798      	blx	r3
 80092a8:	4603      	mov	r3, r0
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	4619      	mov	r1, r3
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	47a8      	blx	r5
 80092b2:	eef0 7a40 	vmov.f32	s15, s0
 80092b6:	eeb0 0a67 	vmov.f32	s0, s15
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	47a0      	blx	r4
 80092be:	4603      	mov	r3, r0
    }
 80092c0:	4618      	mov	r0, r3
 80092c2:	3708      	adds	r7, #8
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bdb0      	pop	{r4, r5, r7, pc}

080092c8 <_ZN5L6470I8shield_1E16get_decelerationEv>:
    virtual unsigned int get_deceleration(void)
 80092c8:	b5b0      	push	{r4, r5, r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80092d8:	681c      	ldr	r4, [r3, #0]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80092e2:	681d      	ldr	r5, [r3, #0]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2105      	movs	r1, #5
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	4798      	blx	r3
 80092f4:	4603      	mov	r3, r0
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	4619      	mov	r1, r3
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	47a8      	blx	r5
 80092fe:	eef0 7a40 	vmov.f32	s15, s0
 8009302:	eeb0 0a67 	vmov.f32	s0, s15
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	47a0      	blx	r4
 800930a:	4603      	mov	r3, r0
    }
 800930c:	4618      	mov	r0, r3
 800930e:	3708      	adds	r7, #8
 8009310:	46bd      	mov	sp, r7
 8009312:	bdb0      	pop	{r4, r5, r7, pc}

08009314 <_ZN5L6470I8shield_1E13get_directionEv>:
    virtual StepperMotor::direction_t get_direction(void)
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	2104      	movs	r1, #4
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	4798      	blx	r3
 800932c:	4603      	mov	r3, r0
 800932e:	2b01      	cmp	r3, #1
 8009330:	d101      	bne.n	8009336 <_ZN5L6470I8shield_1E13get_directionEv+0x22>
 8009332:	2301      	movs	r3, #1
 8009334:	e000      	b.n	8009338 <_ZN5L6470I8shield_1E13get_directionEv+0x24>
 8009336:	2300      	movs	r3, #0
    }
 8009338:	4618      	mov	r0, r3
 800933a:	3708      	adds	r7, #8
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <_ZN5L6470I8shield_1E13set_parameterEjj>:
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	607a      	str	r2, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	68ba      	ldr	r2, [r7, #8]
 8009358:	b2d1      	uxtb	r1, r2
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	4798      	blx	r3
    }
 8009360:	bf00      	nop
 8009362:	3710      	adds	r7, #16
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <_ZN5L6470I8shield_1E8set_homeEv>:
    virtual void set_home(void)
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
        L6470_ResetPos();
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	4798      	blx	r3
    }
 800937e:	bf00      	nop
 8009380:	3708      	adds	r7, #8
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}

08009386 <_ZN5L6470I8shield_1E8set_markEv>:
    virtual void set_mark(void)
 8009386:	b590      	push	{r4, r7, lr}
 8009388:	b083      	sub	sp, #12
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8009396:	681c      	ldr	r4, [r3, #0]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2100      	movs	r1, #0
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	4798      	blx	r3
 80093a8:	4603      	mov	r3, r0
 80093aa:	461a      	mov	r2, r3
 80093ac:	2102      	movs	r1, #2
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	47a0      	blx	r4
    }
 80093b2:	bf00      	nop
 80093b4:	370c      	adds	r7, #12
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd90      	pop	{r4, r7, pc}

080093ba <_ZN5L6470I8shield_1E8set_markEi>:
    virtual void set_mark(signed int position)
 80093ba:	b590      	push	{r4, r7, lr}
 80093bc:	b083      	sub	sp, #12
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
 80093c2:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80093cc:	681c      	ldr	r4, [r3, #0]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	6839      	ldr	r1, [r7, #0]
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	4798      	blx	r3
 80093de:	4603      	mov	r3, r0
 80093e0:	461a      	mov	r2, r3
 80093e2:	2102      	movs	r1, #2
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	47a0      	blx	r4
    }
 80093e8:	bf00      	nop
 80093ea:	370c      	adds	r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd90      	pop	{r4, r7, pc}

080093f0 <_ZN5L6470I8shield_1E13set_max_speedEj>:
    virtual bool set_max_speed(unsigned int speed)
 80093f0:	b590      	push	{r4, r7, lr}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8009402:	681c      	ldr	r4, [r3, #0]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	683a      	ldr	r2, [r7, #0]
 8009410:	ee07 2a90 	vmov	s15, r2
 8009414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009418:	eeb0 0a67 	vmov.f32	s0, s15
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	4798      	blx	r3
 8009420:	4603      	mov	r3, r0
 8009422:	461a      	mov	r2, r3
 8009424:	2106      	movs	r1, #6
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	47a0      	blx	r4
        return true;
 800942a:	2301      	movs	r3, #1
    }
 800942c:	4618      	mov	r0, r3
 800942e:	370c      	adds	r7, #12
 8009430:	46bd      	mov	sp, r7
 8009432:	bd90      	pop	{r4, r7, pc}

08009434 <_ZN5L6470I8shield_1E13set_min_speedEj>:
    virtual bool set_min_speed(unsigned int speed)
 8009434:	b590      	push	{r4, r7, lr}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8009446:	681c      	ldr	r4, [r3, #0]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	683a      	ldr	r2, [r7, #0]
 8009454:	ee07 2a90 	vmov	s15, r2
 8009458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800945c:	eeb0 0a67 	vmov.f32	s0, s15
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	4798      	blx	r3
 8009464:	4603      	mov	r3, r0
 8009466:	461a      	mov	r2, r3
 8009468:	2107      	movs	r1, #7
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	47a0      	blx	r4
        return true;
 800946e:	2301      	movs	r3, #1
    }
 8009470:	4618      	mov	r0, r3
 8009472:	370c      	adds	r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	bd90      	pop	{r4, r7, pc}

08009478 <_ZN5L6470I8shield_1E16set_accelerationEj>:
    virtual bool set_acceleration(unsigned int acceleration)
 8009478:	b590      	push	{r4, r7, lr}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800948a:	681c      	ldr	r4, [r3, #0]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	683a      	ldr	r2, [r7, #0]
 8009498:	ee07 2a90 	vmov	s15, r2
 800949c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094a0:	eeb0 0a67 	vmov.f32	s0, s15
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	4798      	blx	r3
 80094a8:	4603      	mov	r3, r0
 80094aa:	461a      	mov	r2, r3
 80094ac:	2104      	movs	r1, #4
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	47a0      	blx	r4
        return true;
 80094b2:	2301      	movs	r3, #1
    }
 80094b4:	4618      	mov	r0, r3
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd90      	pop	{r4, r7, pc}

080094bc <_ZN5L6470I8shield_1E16set_decelerationEj>:
    virtual bool set_deceleration(unsigned int deceleration)
 80094bc:	b590      	push	{r4, r7, lr}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80094ce:	681c      	ldr	r4, [r3, #0]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	683a      	ldr	r2, [r7, #0]
 80094dc:	ee07 2a90 	vmov	s15, r2
 80094e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094e4:	eeb0 0a67 	vmov.f32	s0, s15
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	4798      	blx	r3
 80094ec:	4603      	mov	r3, r0
 80094ee:	461a      	mov	r2, r3
 80094f0:	2105      	movs	r1, #5
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	47a0      	blx	r4
        return true;
 80094f6:	2301      	movs	r3, #1
    }
 80094f8:	4618      	mov	r0, r3
 80094fa:	370c      	adds	r7, #12
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd90      	pop	{r4, r7, pc}

08009500 <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE>:
    virtual bool set_step_mode(step_mode_t step_mode)
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	460b      	mov	r3, r1
 800950a:	70fb      	strb	r3, [r7, #3]
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 800950c:	78fb      	ldrb	r3, [r7, #3]
 800950e:	2b07      	cmp	r3, #7
 8009510:	d901      	bls.n	8009516 <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 8009512:	2300      	movs	r3, #0
 8009514:	e00f      	b.n	8009536 <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        soft_hiz();
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	3380      	adds	r3, #128	; 0x80
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	78fa      	ldrb	r2, [r7, #3]
 800952e:	2115      	movs	r1, #21
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	4798      	blx	r3
        return true;
 8009534:	2301      	movs	r3, #1
    }
 8009536:	4618      	mov	r0, r3
 8009538:	3708      	adds	r7, #8
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}

0800953e <_ZN5L6470I8shield_1E5go_toEi>:
    virtual void go_to(signed int position)
 800953e:	b590      	push	{r4, r7, lr}
 8009540:	b083      	sub	sp, #12
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
 8009546:	6039      	str	r1, [r7, #0]
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8009550:	681c      	ldr	r4, [r3, #0]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	6839      	ldr	r1, [r7, #0]
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	4798      	blx	r3
 8009562:	4603      	mov	r3, r0
 8009564:	4619      	mov	r1, r3
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	47a0      	blx	r4
    }
 800956a:	bf00      	nop
 800956c:	370c      	adds	r7, #12
 800956e:	46bd      	mov	sp, r7
 8009570:	bd90      	pop	{r4, r7, pc}

08009572 <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE>:
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 8009572:	b5b0      	push	{r4, r5, r7, lr}
 8009574:	b084      	sub	sp, #16
 8009576:	af00      	add	r7, sp, #0
 8009578:	60f8      	str	r0, [r7, #12]
 800957a:	60b9      	str	r1, [r7, #8]
 800957c:	4613      	mov	r3, r2
 800957e:	71fb      	strb	r3, [r7, #7]
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8009588:	681c      	ldr	r4, [r3, #0]
 800958a:	79fb      	ldrb	r3, [r7, #7]
 800958c:	2b01      	cmp	r3, #1
 800958e:	d101      	bne.n	8009594 <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE+0x22>
 8009590:	2501      	movs	r5, #1
 8009592:	e000      	b.n	8009596 <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE+0x24>
 8009594:	2500      	movs	r5, #0
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	68b9      	ldr	r1, [r7, #8]
 80095a2:	68f8      	ldr	r0, [r7, #12]
 80095a4:	4798      	blx	r3
 80095a6:	4603      	mov	r3, r0
 80095a8:	461a      	mov	r2, r3
 80095aa:	4629      	mov	r1, r5
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	47a0      	blx	r4
    }
 80095b0:	bf00      	nop
 80095b2:	3710      	adds	r7, #16
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bdb0      	pop	{r4, r5, r7, pc}

080095b8 <_ZN5L6470I8shield_1E7go_homeEv>:
    virtual void go_home(void)
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
        L6470_GoHome();
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	4798      	blx	r3
    }
 80095ce:	bf00      	nop
 80095d0:	3708      	adds	r7, #8
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <_ZN5L6470I8shield_1E7go_markEv>:
    virtual void go_mark(void)
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b082      	sub	sp, #8
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
        L6470_GoMark();
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	4798      	blx	r3
    }
 80095ec:	bf00      	nop
 80095ee:	3708      	adds	r7, #8
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 80095f4:	b5b0      	push	{r4, r5, r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	607b      	str	r3, [r7, #4]
 80095fe:	460b      	mov	r3, r1
 8009600:	72fb      	strb	r3, [r7, #11]
 8009602:	4613      	mov	r3, r2
 8009604:	72bb      	strb	r3, [r7, #10]
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800960e:	681c      	ldr	r4, [r3, #0]
 8009610:	7abb      	ldrb	r3, [r7, #10]
 8009612:	2b01      	cmp	r3, #1
 8009614:	d101      	bne.n	800961a <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8009616:	2501      	movs	r5, #1
 8009618:	e000      	b.n	800961c <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 800961a:	2500      	movs	r5, #0
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	ee07 2a90 	vmov	s15, r2
 800962c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009630:	eeb0 0a67 	vmov.f32	s0, s15
 8009634:	68f8      	ldr	r0, [r7, #12]
 8009636:	4798      	blx	r3
 8009638:	4603      	mov	r3, r0
 800963a:	7af9      	ldrb	r1, [r7, #11]
 800963c:	462a      	mov	r2, r5
 800963e:	68f8      	ldr	r0, [r7, #12]
 8009640:	47a0      	blx	r4
    }
 8009642:	bf00      	nop
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bdb0      	pop	{r4, r5, r7, pc}

0800964a <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE>:
    virtual void run(StepperMotor::direction_t direction)
 800964a:	b5b0      	push	{r4, r5, r7, lr}
 800964c:	b082      	sub	sp, #8
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
 8009652:	460b      	mov	r3, r1
 8009654:	70fb      	strb	r3, [r7, #3]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 800965e:	681c      	ldr	r4, [r3, #0]
 8009660:	78fb      	ldrb	r3, [r7, #3]
 8009662:	2b01      	cmp	r3, #1
 8009664:	d101      	bne.n	800966a <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE+0x20>
 8009666:	2501      	movs	r5, #1
 8009668:	e000      	b.n	800966c <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE+0x22>
 800966a:	2500      	movs	r5, #0
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	2106      	movs	r1, #6
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	4798      	blx	r3
 800967c:	4603      	mov	r3, r0
 800967e:	461a      	mov	r2, r3
 8009680:	4629      	mov	r1, r5
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	47a0      	blx	r4
    }
 8009686:	bf00      	nop
 8009688:	3708      	adds	r7, #8
 800968a:	46bd      	mov	sp, r7
 800968c:	bdb0      	pop	{r4, r5, r7, pc}

0800968e <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj>:
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 800968e:	b5b0      	push	{r4, r5, r7, lr}
 8009690:	b084      	sub	sp, #16
 8009692:	af00      	add	r7, sp, #0
 8009694:	60f8      	str	r0, [r7, #12]
 8009696:	460b      	mov	r3, r1
 8009698:	607a      	str	r2, [r7, #4]
 800969a:	72fb      	strb	r3, [r7, #11]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80096a4:	681c      	ldr	r4, [r3, #0]
 80096a6:	7afb      	ldrb	r3, [r7, #11]
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d101      	bne.n	80096b0 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj+0x22>
 80096ac:	2501      	movs	r5, #1
 80096ae:	e000      	b.n	80096b2 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj+0x24>
 80096b0:	2500      	movs	r5, #0
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	ee07 2a90 	vmov	s15, r2
 80096c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096c6:	eeb0 0a67 	vmov.f32	s0, s15
 80096ca:	68f8      	ldr	r0, [r7, #12]
 80096cc:	4798      	blx	r3
 80096ce:	4603      	mov	r3, r0
 80096d0:	461a      	mov	r2, r3
 80096d2:	4629      	mov	r1, r5
 80096d4:	68f8      	ldr	r0, [r7, #12]
 80096d6:	47a0      	blx	r4
    }
 80096d8:	bf00      	nop
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bdb0      	pop	{r4, r5, r7, pc}

080096e0 <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj>:
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	460b      	mov	r3, r1
 80096ea:	607a      	str	r2, [r7, #4]
 80096ec:	72fb      	strb	r3, [r7, #11]
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	7afa      	ldrb	r2, [r7, #11]
 80096fa:	2a01      	cmp	r2, #1
 80096fc:	d101      	bne.n	8009702 <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj+0x22>
 80096fe:	2101      	movs	r1, #1
 8009700:	e000      	b.n	8009704 <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj+0x24>
 8009702:	2100      	movs	r1, #0
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	68f8      	ldr	r0, [r7, #12]
 8009708:	4798      	blx	r3
    }
 800970a:	bf00      	nop
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <_ZN5L6470I8shield_1E9soft_stopEv>:
    virtual void soft_stop(void)
 8009712:	b580      	push	{r7, lr}
 8009714:	b082      	sub	sp, #8
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
        L6470_SoftStop();
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	4798      	blx	r3
    }
 8009728:	bf00      	nop
 800972a:	3708      	adds	r7, #8
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <_ZN5L6470I8shield_1E9hard_stopEv>:
    virtual void hard_stop(void)
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
        L6470_HardStop();
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	4798      	blx	r3
    }
 8009746:	bf00      	nop
 8009748:	3708      	adds	r7, #8
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <_ZN5L6470I8shield_1E8soft_hizEv>:
    virtual void soft_hiz(void)
 800974e:	b580      	push	{r7, lr}
 8009750:	b082      	sub	sp, #8
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
        L6470_SoftHiZ();
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	4798      	blx	r3
    }
 8009764:	bf00      	nop
 8009766:	3708      	adds	r7, #8
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <_ZN5L6470I8shield_1E8hard_hizEv>:
    virtual void hard_hiz(void)
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
        L6470_HardHiZ();
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	4798      	blx	r3
    }
 8009782:	bf00      	nop
 8009784:	3708      	adds	r7, #8
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <_ZN5L6470I8shield_1E17wait_while_activeEv>:
    virtual void wait_while_active(void)
 800978a:	b580      	push	{r7, lr}
 800978c:	b082      	sub	sp, #8
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 8009792:	bf00      	nop
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2101      	movs	r1, #1
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	4798      	blx	r3
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	bf0c      	ite	eq
 80097aa:	2301      	moveq	r3, #1
 80097ac:	2300      	movne	r3, #0
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d1ef      	bne.n	8009794 <_ZN5L6470I8shield_1E17wait_while_activeEv+0xa>
    }
 80097b4:	bf00      	nop
 80097b6:	bf00      	nop
 80097b8:	3708      	adds	r7, #8
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE>:
    virtual void step_clock(StepperMotor::direction_t direction)
 80097be:	b580      	push	{r7, lr}
 80097c0:	b082      	sub	sp, #8
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
 80097c6:	460b      	mov	r3, r1
 80097c8:	70fb      	strb	r3, [r7, #3]
        soft_hiz();
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	3380      	adds	r3, #128	; 0x80
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	78fa      	ldrb	r2, [r7, #3]
 80097e2:	2a01      	cmp	r2, #1
 80097e4:	d101      	bne.n	80097ea <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE+0x2c>
 80097e6:	2201      	movs	r2, #1
 80097e8:	e000      	b.n	80097ec <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE+0x2e>
 80097ea:	2200      	movs	r2, #0
 80097ec:	4611      	mov	r1, r2
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	4798      	blx	r3
    }
 80097f2:	bf00      	nop
 80097f4:	3708      	adds	r7, #8
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b082      	sub	sp, #8
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
 8009802:	460b      	mov	r3, r1
 8009804:	70fb      	strb	r3, [r7, #3]
 8009806:	4613      	mov	r3, r2
 8009808:	70bb      	strb	r3, [r7, #2]
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	78ba      	ldrb	r2, [r7, #2]
 8009816:	2a01      	cmp	r2, #1
 8009818:	d101      	bne.n	800981e <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 800981a:	2201      	movs	r2, #1
 800981c:	e000      	b.n	8009820 <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 800981e:	2200      	movs	r2, #0
 8009820:	78f9      	ldrb	r1, [r7, #3]
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	4798      	blx	r3
    }
 8009826:	bf00      	nop
 8009828:	3708      	adds	r7, #8
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}

0800982e <_ZN5L6470I8shield_1E12reset_deviceEv>:
    virtual void reset_device(void)
 800982e:	b580      	push	{r7, lr}
 8009830:	b082      	sub	sp, #8
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
        L6470_ResetDevice();
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	4798      	blx	r3
    }
 8009844:	bf00      	nop
 8009846:	3708      	adds	r7, #8
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <_ZN5L6470I8shield_1E18prepare_get_statusEv>:
    virtual void prepare_get_status(void)
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetStatus();
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2200      	movs	r2, #0
 8009866:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800986a:	bf00      	nop
 800986c:	3708      	adds	r7, #8
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <_ZN5L6470I8shield_1E21prepare_get_parameterEj>:
    virtual void prepare_get_parameter(unsigned int parameter)
 8009872:	b580      	push	{r7, lr}
 8009874:	b082      	sub	sp, #8
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
 800987a:	6039      	str	r1, [r7, #0]
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	683a      	ldr	r2, [r7, #0]
 8009888:	b2d2      	uxtb	r2, r2
 800988a:	4611      	mov	r1, r2
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009898:	bf00      	nop
 800989a:	3708      	adds	r7, #8
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <_ZN5L6470I8shield_1E20prepare_get_positionEv>:
    virtual void prepare_get_position(void)
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2100      	movs	r1, #0
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80098c0:	bf00      	nop
 80098c2:	3708      	adds	r7, #8
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <_ZN5L6470I8shield_1E16prepare_get_markEv>:
    virtual void prepare_get_mark(void)
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	2102      	movs	r1, #2
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2202      	movs	r2, #2
 80098e4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80098e8:	bf00      	nop
 80098ea:	3708      	adds	r7, #8
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <_ZN5L6470I8shield_1E17prepare_get_speedEv>:
    virtual void prepare_get_speed(void)
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	2103      	movs	r1, #3
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2203      	movs	r2, #3
 800990c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009910:	bf00      	nop
 8009912:	3708      	adds	r7, #8
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <_ZN5L6470I8shield_1E21prepare_get_max_speedEv>:
    virtual void prepare_get_max_speed(void)
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	2106      	movs	r1, #6
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2204      	movs	r2, #4
 8009934:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009938:	bf00      	nop
 800993a:	3708      	adds	r7, #8
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <_ZN5L6470I8shield_1E21prepare_get_min_speedEv>:
    virtual void prepare_get_min_speed(void)
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2107      	movs	r1, #7
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2205      	movs	r2, #5
 800995c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009960:	bf00      	nop
 8009962:	3708      	adds	r7, #8
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <_ZN5L6470I8shield_1E24prepare_get_accelerationEv>:
    virtual void prepare_get_acceleration(void)
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2104      	movs	r1, #4
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2206      	movs	r2, #6
 8009984:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009988:	bf00      	nop
 800998a:	3708      	adds	r7, #8
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <_ZN5L6470I8shield_1E24prepare_get_decelerationEv>:
    virtual void prepare_get_deceleration(void)
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	2105      	movs	r1, #5
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2207      	movs	r2, #7
 80099ac:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80099b0:	bf00      	nop
 80099b2:	3708      	adds	r7, #8
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <_ZN5L6470I8shield_1E21prepare_get_directionEv>:
    virtual void prepare_get_direction(void)
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
        if (!L6470_DaisyChain_HalfPrepared) {
 80099c0:	4b0b      	ldr	r3, [pc, #44]	; (80099f0 <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x38>)
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d10a      	bne.n	80099de <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x26>
            L6470_DaisyChain_HalfPrepared = ONE_F;
 80099c8:	4b09      	ldr	r3, [pc, #36]	; (80099f0 <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x38>)
 80099ca:	2201      	movs	r2, #1
 80099cc:	701a      	strb	r2, [r3, #0]
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4906      	ldr	r1, [pc, #24]	; (80099f4 <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x3c>)
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	4798      	blx	r3
        prepared_action = PREPARED_GET_DIRECTION;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2208      	movs	r2, #8
 80099e2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80099e6:	bf00      	nop
 80099e8:	3708      	adds	r7, #8
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	20000209 	.word	0x20000209
 80099f4:	2000020c 	.word	0x2000020c

080099f8 <_ZN5L6470I8shield_1E21prepare_set_parameterEjj>:
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	607a      	str	r2, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	68ba      	ldr	r2, [r7, #8]
 8009a10:	b2d1      	uxtb	r1, r2
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009a20:	bf00      	nop
 8009a22:	3710      	adds	r7, #16
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <_ZN5L6470I8shield_1E16prepare_set_homeEv>:
    virtual void prepare_set_home(void)
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetPos();
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2200      	movs	r2, #0
 8009a42:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009a46:	bf00      	nop
 8009a48:	3708      	adds	r7, #8
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <_ZN5L6470I8shield_1E16prepare_set_markEv>:
    virtual void prepare_set_mark(void)
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b082      	sub	sp, #8
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2200      	movs	r2, #0
 8009a62:	2102      	movs	r1, #2
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2209      	movs	r2, #9
 8009a6c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009a70:	bf00      	nop
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <_ZN5L6470I8shield_1E16prepare_set_markEi>:
    virtual void prepare_set_mark(signed int position)
 8009a78:	b590      	push	{r4, r7, lr}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009a8a:	681c      	ldr	r4, [r3, #0]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	6839      	ldr	r1, [r7, #0]
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	4798      	blx	r3
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	2102      	movs	r1, #2
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009aae:	bf00      	nop
 8009ab0:	370c      	adds	r7, #12
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd90      	pop	{r4, r7, pc}

08009ab6 <_ZN5L6470I8shield_1E17prepare_set_speedEj>:
    virtual void prepare_set_speed(unsigned int speed)
 8009ab6:	b590      	push	{r4, r7, lr}
 8009ab8:	b083      	sub	sp, #12
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
 8009abe:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009ac8:	681c      	ldr	r4, [r3, #0]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	683a      	ldr	r2, [r7, #0]
 8009ad6:	ee07 2a90 	vmov	s15, r2
 8009ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ade:	eeb0 0a67 	vmov.f32	s0, s15
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	4798      	blx	r3
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	461a      	mov	r2, r3
 8009aea:	2103      	movs	r1, #3
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2200      	movs	r2, #0
 8009af4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009af8:	bf00      	nop
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd90      	pop	{r4, r7, pc}

08009b00 <_ZN5L6470I8shield_1E21prepare_set_max_speedEj>:
    virtual void prepare_set_max_speed(unsigned int speed)
 8009b00:	b590      	push	{r4, r7, lr}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009b12:	681c      	ldr	r4, [r3, #0]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	683a      	ldr	r2, [r7, #0]
 8009b20:	ee07 2a90 	vmov	s15, r2
 8009b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b28:	eeb0 0a67 	vmov.f32	s0, s15
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	4798      	blx	r3
 8009b30:	4603      	mov	r3, r0
 8009b32:	461a      	mov	r2, r3
 8009b34:	2106      	movs	r1, #6
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009b42:	bf00      	nop
 8009b44:	370c      	adds	r7, #12
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd90      	pop	{r4, r7, pc}

08009b4a <_ZN5L6470I8shield_1E21prepare_set_min_speedEj>:
    virtual void prepare_set_min_speed(unsigned int speed)
 8009b4a:	b590      	push	{r4, r7, lr}
 8009b4c:	b083      	sub	sp, #12
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
 8009b52:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009b5c:	681c      	ldr	r4, [r3, #0]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	683a      	ldr	r2, [r7, #0]
 8009b6a:	ee07 2a90 	vmov	s15, r2
 8009b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b72:	eeb0 0a67 	vmov.f32	s0, s15
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	4798      	blx	r3
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	2107      	movs	r1, #7
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009b8c:	bf00      	nop
 8009b8e:	370c      	adds	r7, #12
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd90      	pop	{r4, r7, pc}

08009b94 <_ZN5L6470I8shield_1E24prepare_set_accelerationEj>:
    virtual void prepare_set_acceleration(unsigned int acceleration)
 8009b94:	b590      	push	{r4, r7, lr}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009ba6:	681c      	ldr	r4, [r3, #0]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	683a      	ldr	r2, [r7, #0]
 8009bb4:	ee07 2a90 	vmov	s15, r2
 8009bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	4798      	blx	r3
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	2104      	movs	r1, #4
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009bd6:	bf00      	nop
 8009bd8:	370c      	adds	r7, #12
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd90      	pop	{r4, r7, pc}

08009bde <_ZN5L6470I8shield_1E24prepare_set_decelerationEj>:
    virtual void prepare_set_deceleration(unsigned int deceleration)
 8009bde:	b590      	push	{r4, r7, lr}
 8009be0:	b083      	sub	sp, #12
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
 8009be6:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009bf0:	681c      	ldr	r4, [r3, #0]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	683a      	ldr	r2, [r7, #0]
 8009bfe:	ee07 2a90 	vmov	s15, r2
 8009c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c06:	eeb0 0a67 	vmov.f32	s0, s15
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	4798      	blx	r3
 8009c0e:	4603      	mov	r3, r0
 8009c10:	461a      	mov	r2, r3
 8009c12:	2105      	movs	r1, #5
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009c20:	bf00      	nop
 8009c22:	370c      	adds	r7, #12
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd90      	pop	{r4, r7, pc}

08009c28 <_ZN5L6470I8shield_1E13prepare_go_toEi>:
    virtual void prepare_go_to(signed int position)
 8009c28:	b590      	push	{r4, r7, lr}
 8009c2a:	b083      	sub	sp, #12
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6039      	str	r1, [r7, #0]
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009c3a:	681c      	ldr	r4, [r3, #0]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	6839      	ldr	r1, [r7, #0]
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	4798      	blx	r3
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	4619      	mov	r1, r3
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009c5c:	bf00      	nop
 8009c5e:	370c      	adds	r7, #12
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd90      	pop	{r4, r7, pc}

08009c64 <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE>:
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 8009c64:	b5b0      	push	{r4, r5, r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	4613      	mov	r3, r2
 8009c70:	71fb      	strb	r3, [r7, #7]
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8009c7a:	681c      	ldr	r4, [r3, #0]
 8009c7c:	79fb      	ldrb	r3, [r7, #7]
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d101      	bne.n	8009c86 <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 8009c82:	2501      	movs	r5, #1
 8009c84:	e000      	b.n	8009c88 <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 8009c86:	2500      	movs	r5, #0
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	68b9      	ldr	r1, [r7, #8]
 8009c94:	68f8      	ldr	r0, [r7, #12]
 8009c96:	4798      	blx	r3
 8009c98:	4603      	mov	r3, r0
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	4629      	mov	r1, r5
 8009c9e:	68f8      	ldr	r0, [r7, #12]
 8009ca0:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009caa:	bf00      	nop
 8009cac:	3710      	adds	r7, #16
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bdb0      	pop	{r4, r5, r7, pc}

08009cb2 <_ZN5L6470I8shield_1E15prepare_go_homeEv>:
    virtual void prepare_go_home(void)
 8009cb2:	b580      	push	{r7, lr}
 8009cb4:	b082      	sub	sp, #8
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoHome();
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009cd0:	bf00      	nop
 8009cd2:	3708      	adds	r7, #8
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <_ZN5L6470I8shield_1E15prepare_go_markEv>:
    virtual void prepare_go_mark(void)
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoMark();
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009cf6:	bf00      	nop
 8009cf8:	3708      	adds	r7, #8
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 8009cfe:	b5b0      	push	{r4, r5, r7, lr}
 8009d00:	b084      	sub	sp, #16
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	60f8      	str	r0, [r7, #12]
 8009d06:	607b      	str	r3, [r7, #4]
 8009d08:	460b      	mov	r3, r1
 8009d0a:	72fb      	strb	r3, [r7, #11]
 8009d0c:	4613      	mov	r3, r2
 8009d0e:	72bb      	strb	r3, [r7, #10]
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009d18:	681c      	ldr	r4, [r3, #0]
 8009d1a:	7abb      	ldrb	r3, [r7, #10]
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d101      	bne.n	8009d24 <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8009d20:	2501      	movs	r5, #1
 8009d22:	e000      	b.n	8009d26 <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8009d24:	2500      	movs	r5, #0
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	ee07 2a90 	vmov	s15, r2
 8009d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	4798      	blx	r3
 8009d42:	4603      	mov	r3, r0
 8009d44:	7af9      	ldrb	r1, [r7, #11]
 8009d46:	462a      	mov	r2, r5
 8009d48:	68f8      	ldr	r0, [r7, #12]
 8009d4a:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009d54:	bf00      	nop
 8009d56:	3710      	adds	r7, #16
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bdb0      	pop	{r4, r5, r7, pc}

08009d5c <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE>:
    virtual void prepare_run(StepperMotor::direction_t direction)
 8009d5c:	b5b0      	push	{r4, r5, r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	460b      	mov	r3, r1
 8009d66:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009d70:	681c      	ldr	r4, [r3, #0]
 8009d72:	78fb      	ldrb	r3, [r7, #3]
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d101      	bne.n	8009d7c <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE+0x20>
 8009d78:	2501      	movs	r5, #1
 8009d7a:	e000      	b.n	8009d7e <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE+0x22>
 8009d7c:	2500      	movs	r5, #0
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	2106      	movs	r1, #6
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	4798      	blx	r3
 8009d8e:	4603      	mov	r3, r0
 8009d90:	461a      	mov	r2, r3
 8009d92:	4629      	mov	r1, r5
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009da0:	bf00      	nop
 8009da2:	3708      	adds	r7, #8
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bdb0      	pop	{r4, r5, r7, pc}

08009da8 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj>:
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 8009da8:	b5b0      	push	{r4, r5, r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	60f8      	str	r0, [r7, #12]
 8009db0:	460b      	mov	r3, r1
 8009db2:	607a      	str	r2, [r7, #4]
 8009db4:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009dbe:	681c      	ldr	r4, [r3, #0]
 8009dc0:	7afb      	ldrb	r3, [r7, #11]
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d101      	bne.n	8009dca <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 8009dc6:	2501      	movs	r5, #1
 8009dc8:	e000      	b.n	8009dcc <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 8009dca:	2500      	movs	r5, #0
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	ee07 2a90 	vmov	s15, r2
 8009ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009de0:	eeb0 0a67 	vmov.f32	s0, s15
 8009de4:	68f8      	ldr	r0, [r7, #12]
 8009de6:	4798      	blx	r3
 8009de8:	4603      	mov	r3, r0
 8009dea:	461a      	mov	r2, r3
 8009dec:	4629      	mov	r1, r5
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2200      	movs	r2, #0
 8009df6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009dfa:	bf00      	nop
 8009dfc:	3710      	adds	r7, #16
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bdb0      	pop	{r4, r5, r7, pc}

08009e02 <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj>:
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b084      	sub	sp, #16
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	60f8      	str	r0, [r7, #12]
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	607a      	str	r2, [r7, #4]
 8009e0e:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	7afa      	ldrb	r2, [r7, #11]
 8009e1c:	2a01      	cmp	r2, #1
 8009e1e:	d101      	bne.n	8009e24 <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 8009e20:	2101      	movs	r1, #1
 8009e22:	e000      	b.n	8009e26 <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 8009e24:	2100      	movs	r1, #0
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	68f8      	ldr	r0, [r7, #12]
 8009e2a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009e34:	bf00      	nop
 8009e36:	3710      	adds	r7, #16
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <_ZN5L6470I8shield_1E17prepare_soft_stopEv>:
    virtual void prepare_soft_stop(void)
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftStop();
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2200      	movs	r2, #0
 8009e56:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009e5a:	bf00      	nop
 8009e5c:	3708      	adds	r7, #8
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <_ZN5L6470I8shield_1E17prepare_hard_stopEv>:
    virtual void prepare_hard_stop(void)
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b082      	sub	sp, #8
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardStop();
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009e80:	bf00      	nop
 8009e82:	3708      	adds	r7, #8
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <_ZN5L6470I8shield_1E16prepare_soft_hizEv>:
    virtual void prepare_soft_hiz(void)
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftHiZ();
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009ea6:	bf00      	nop
 8009ea8:	3708      	adds	r7, #8
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <_ZN5L6470I8shield_1E16prepare_hard_hizEv>:
    virtual void prepare_hard_hiz(void)
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b082      	sub	sp, #8
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardHiZ();
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009ecc:	bf00      	nop
 8009ece:	3708      	adds	r7, #8
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE>:
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	460b      	mov	r3, r1
 8009ede:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	78fa      	ldrb	r2, [r7, #3]
 8009eec:	2a01      	cmp	r2, #1
 8009eee:	d101      	bne.n	8009ef4 <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	e000      	b.n	8009ef6 <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	4611      	mov	r1, r2
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009f04:	bf00      	nop
 8009f06:	3708      	adds	r7, #8
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	460b      	mov	r3, r1
 8009f16:	70fb      	strb	r3, [r7, #3]
 8009f18:	4613      	mov	r3, r2
 8009f1a:	70bb      	strb	r3, [r7, #2]
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	78ba      	ldrb	r2, [r7, #2]
 8009f28:	2a01      	cmp	r2, #1
 8009f2a:	d101      	bne.n	8009f30 <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	e000      	b.n	8009f32 <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8009f30:	2200      	movs	r2, #0
 8009f32:	78f9      	ldrb	r1, [r7, #3]
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009f40:	bf00      	nop
 8009f42:	3708      	adds	r7, #8
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <_ZN5L6470I8shield_1E20prepare_reset_deviceEv>:
    virtual void prepare_reset_device(void)
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetDevice();
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2200      	movs	r2, #0
 8009f62:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009f66:	bf00      	nop
 8009f68:	3708      	adds	r7, #8
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}

08009f6e <_ZN5L6470I8shield_1E24perform_prepared_actionsEv>:
    uint8_t* perform_prepared_actions(void)
 8009f6e:	b580      	push	{r7, lr}
 8009f70:	b082      	sub	sp, #8
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
        return L6470_PerformPreparedApplicationCommand();
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	4798      	blx	r3
 8009f84:	4603      	mov	r3, r0
    }
 8009f86:	4618      	mov	r0, r3
 8009f88:	3708      	adds	r7, #8
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}

08009f8e <_ZN5L6470I8shield_1E19get_prepared_actionEv>:
    prepared_action_t get_prepared_action(void)
 8009f8e:	b480      	push	{r7}
 8009f90:	b083      	sub	sp, #12
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
        return prepared_action;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    }
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <_ZN5L6470I8shield_1E10get_resultEPh>:
    int32_t get_result(uint8_t *raw_data)
 8009fa8:	b5b0      	push	{r4, r5, r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
        switch (prepared_action) {
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8009fb8:	3b01      	subs	r3, #1
 8009fba:	2b07      	cmp	r3, #7
 8009fbc:	f200 80fe 	bhi.w	800a1bc <_ZN5L6470I8shield_1E10get_resultEPh+0x214>
 8009fc0:	a201      	add	r2, pc, #4	; (adr r2, 8009fc8 <_ZN5L6470I8shield_1E10get_resultEPh+0x20>)
 8009fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc6:	bf00      	nop
 8009fc8:	08009fe9 	.word	0x08009fe9
 8009fcc:	0800a015 	.word	0x0800a015
 8009fd0:	0800a043 	.word	0x0800a043
 8009fd4:	0800a087 	.word	0x0800a087
 8009fd8:	0800a0cd 	.word	0x0800a0cd
 8009fdc:	0800a113 	.word	0x0800a113
 8009fe0:	0800a159 	.word	0x0800a159
 8009fe4:	0800a19f 	.word	0x0800a19f
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8009ff0:	681c      	ldr	r4, [r3, #0]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	6a12      	ldr	r2, [r2, #32]
 800a000:	7b92      	ldrb	r2, [r2, #14]
 800a002:	6839      	ldr	r1, [r7, #0]
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	4798      	blx	r3
 800a008:	4603      	mov	r3, r0
 800a00a:	4619      	mov	r1, r3
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	47a0      	blx	r4
 800a010:	4603      	mov	r3, r0
 800a012:	e0d4      	b.n	800a1be <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800a01c:	681c      	ldr	r4, [r3, #0]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	687a      	ldr	r2, [r7, #4]
 800a02a:	6a12      	ldr	r2, [r2, #32]
 800a02c:	3228      	adds	r2, #40	; 0x28
 800a02e:	7b92      	ldrb	r2, [r2, #14]
 800a030:	6839      	ldr	r1, [r7, #0]
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	4798      	blx	r3
 800a036:	4603      	mov	r3, r0
 800a038:	4619      	mov	r1, r3
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	47a0      	blx	r4
 800a03e:	4603      	mov	r3, r0
 800a040:	e0bd      	b.n	800a1be <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800a04a:	681c      	ldr	r4, [r3, #0]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800a054:	681d      	ldr	r5, [r3, #0]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	6a12      	ldr	r2, [r2, #32]
 800a064:	323c      	adds	r2, #60	; 0x3c
 800a066:	7b92      	ldrb	r2, [r2, #14]
 800a068:	6839      	ldr	r1, [r7, #0]
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	4798      	blx	r3
 800a06e:	4603      	mov	r3, r0
 800a070:	4619      	mov	r1, r3
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	47a8      	blx	r5
 800a076:	eef0 7a40 	vmov.f32	s15, s0
 800a07a:	eeb0 0a67 	vmov.f32	s0, s15
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	47a0      	blx	r4
 800a082:	4603      	mov	r3, r0
 800a084:	e09b      	b.n	800a1be <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800a08e:	681c      	ldr	r4, [r3, #0]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a098:	681d      	ldr	r5, [r3, #0]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	6a12      	ldr	r2, [r2, #32]
 800a0a8:	3278      	adds	r2, #120	; 0x78
 800a0aa:	7b92      	ldrb	r2, [r2, #14]
 800a0ac:	6839      	ldr	r1, [r7, #0]
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	4798      	blx	r3
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	47a8      	blx	r5
 800a0bc:	eef0 7a40 	vmov.f32	s15, s0
 800a0c0:	eeb0 0a67 	vmov.f32	s0, s15
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	47a0      	blx	r4
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	e078      	b.n	800a1be <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800a0d4:	681c      	ldr	r4, [r3, #0]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a0de:	681d      	ldr	r5, [r3, #0]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	6a12      	ldr	r2, [r2, #32]
 800a0ee:	328c      	adds	r2, #140	; 0x8c
 800a0f0:	7b92      	ldrb	r2, [r2, #14]
 800a0f2:	6839      	ldr	r1, [r7, #0]
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	4798      	blx	r3
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	47a8      	blx	r5
 800a102:	eef0 7a40 	vmov.f32	s15, s0
 800a106:	eeb0 0a67 	vmov.f32	s0, s15
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	47a0      	blx	r4
 800a10e:	4603      	mov	r3, r0
 800a110:	e055      	b.n	800a1be <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800a11a:	681c      	ldr	r4, [r3, #0]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a124:	681d      	ldr	r5, [r3, #0]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	6a12      	ldr	r2, [r2, #32]
 800a134:	3250      	adds	r2, #80	; 0x50
 800a136:	7b92      	ldrb	r2, [r2, #14]
 800a138:	6839      	ldr	r1, [r7, #0]
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	4798      	blx	r3
 800a13e:	4603      	mov	r3, r0
 800a140:	b29b      	uxth	r3, r3
 800a142:	4619      	mov	r1, r3
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	47a8      	blx	r5
 800a148:	eef0 7a40 	vmov.f32	s15, s0
 800a14c:	eeb0 0a67 	vmov.f32	s0, s15
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	47a0      	blx	r4
 800a154:	4603      	mov	r3, r0
 800a156:	e032      	b.n	800a1be <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800a160:	681c      	ldr	r4, [r3, #0]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800a16a:	681d      	ldr	r5, [r3, #0]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	687a      	ldr	r2, [r7, #4]
 800a178:	6a12      	ldr	r2, [r2, #32]
 800a17a:	3264      	adds	r2, #100	; 0x64
 800a17c:	7b92      	ldrb	r2, [r2, #14]
 800a17e:	6839      	ldr	r1, [r7, #0]
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	4798      	blx	r3
 800a184:	4603      	mov	r3, r0
 800a186:	b29b      	uxth	r3, r3
 800a188:	4619      	mov	r1, r3
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	47a8      	blx	r5
 800a18e:	eef0 7a40 	vmov.f32	s15, s0
 800a192:	eeb0 0a67 	vmov.f32	s0, s15
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	47a0      	blx	r4
 800a19a:	4603      	mov	r3, r0
 800a19c:	e00f      	b.n	800a1be <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	2104      	movs	r1, #4
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	4798      	blx	r3
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	d101      	bne.n	800a1b8 <_ZN5L6470I8shield_1E10get_resultEPh+0x210>
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	e002      	b.n	800a1be <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	e000      	b.n	800a1be <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return 0;
 800a1bc:	2300      	movs	r3, #0
    }
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3708      	adds	r7, #8
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bdb0      	pop	{r4, r5, r7, pc}
 800a1c6:	bf00      	nop

0800a1c8 <_ZN5L6470I8shield_1E13L6470_DISABLEEv>:
    void L6470_DISABLE(void)
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6898      	ldr	r0, [r3, #8]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	899b      	ldrh	r3, [r3, #12]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	4619      	mov	r1, r3
 800a1dc:	f003 fa54 	bl	800d688 <HAL_GPIO_WritePin>
    }
 800a1e0:	bf00      	nop
 800a1e2:	3708      	adds	r7, #8
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm>:
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
  if (AbsPos > L6470_MAX_POSITION)
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a1f8:	d303      	bcc.n	800a202 <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	f5a3 0380 	sub.w	r3, r3, #4194304	; 0x400000
 800a200:	e000      	b.n	800a204 <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm+0x1c>
    return AbsPos;
 800a202:	683b      	ldr	r3, [r7, #0]
}
 800a204:	4618      	mov	r0, r3
 800a206:	370c      	adds	r7, #12
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr

0800a210 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl>:
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	db05      	blt.n	800a22c <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x1c>
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a226:	da01      	bge.n	800a22c <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	e00c      	b.n	800a246 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x36>
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
 800a232:	db06      	blt.n	800a242 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x32>
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	2b00      	cmp	r3, #0
 800a238:	da03      	bge.n	800a242 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
 800a240:	e001      	b.n	800a246 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x36>
      return (L6470_POSITION_RANGE + 1);        // OVF
 800a242:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
}
 800a246:	4618      	mov	r0, r3
 800a248:	370c      	adds	r7, #12
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr
	...

0800a254 <_ZN5L6470I8shield_1E20L6470_Speed_2_Step_sEm>:
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
  return (Speed * ((float)14.9012e-3));
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	ee07 3a90 	vmov	s15, r3
 800a264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a268:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800a280 <_ZN5L6470I8shield_1E20L6470_Speed_2_Step_sEm+0x2c>
 800a26c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a270:	eeb0 0a67 	vmov.f32	s0, s15
 800a274:	370c      	adds	r7, #12
 800a276:	46bd      	mov	sp, r7
 800a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27c:	4770      	bx	lr
 800a27e:	bf00      	nop
 800a280:	3c74242a 	.word	0x3c74242a

0800a284 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf>:
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 800a290:	edd7 7a00 	vldr	s15, [r7]
 800a294:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800a2c8 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x44>
 800a298:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a29c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2a0:	d80a      	bhi.n	800a2b8 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 800a2a2:	ed97 7a00 	vldr	s14, [r7]
 800a2a6:	eddf 6a09 	vldr	s13, [pc, #36]	; 800a2cc <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x48>
 800a2aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a2ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2b2:	ee17 3a90 	vmov	r3, s15
 800a2b6:	e000      	b.n	800a2ba <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x36>
    return 0;   // Warning
 800a2b8:	2300      	movs	r3, #0
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	370c      	adds	r7, #12
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c4:	4770      	bx	lr
 800a2c6:	bf00      	nop
 800a2c8:	4674241b 	.word	0x4674241b
 800a2cc:	3c74242a 	.word	0x3c74242a

0800a2d0 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et>:
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	460b      	mov	r3, r1
 800a2da:	807b      	strh	r3, [r7, #2]
  if (Acc <= L6470_MAX_ACC)
 800a2dc:	887b      	ldrh	r3, [r7, #2]
 800a2de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2e2:	d209      	bcs.n	800a2f8 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 800a2e4:	887b      	ldrh	r3, [r7, #2]
 800a2e6:	ee07 3a90 	vmov	s15, r3
 800a2ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2ee:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800a30c <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x3c>
 800a2f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a2f6:	e001      	b.n	800a2fc <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x2c>
    return 0;   // Warning
 800a2f8:	eddf 7a05 	vldr	s15, [pc, #20]	; 800a310 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x40>
}
 800a2fc:	eeb0 0a67 	vmov.f32	s0, s15
 800a300:	370c      	adds	r7, #12
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr
 800a30a:	bf00      	nop
 800a30c:	4168d4fe 	.word	0x4168d4fe
 800a310:	00000000 	.word	0x00000000

0800a314 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 800a314:	b480      	push	{r7}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 800a320:	edd7 7a00 	vldr	s15, [r7]
 800a324:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800a358 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x44>
 800a328:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a32c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a330:	d80b      	bhi.n	800a34a <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 800a332:	ed97 7a00 	vldr	s14, [r7]
 800a336:	eddf 6a09 	vldr	s13, [pc, #36]	; 800a35c <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x48>
 800a33a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a33e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a342:	ee17 3a90 	vmov	r3, s15
 800a346:	b29b      	uxth	r3, r3
 800a348:	e000      	b.n	800a34c <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x38>
    return 0;   // Warning
 800a34a:	2300      	movs	r3, #0
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	370c      	adds	r7, #12
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr
 800a358:	4768c671 	.word	0x4768c671
 800a35c:	4168d4fe 	.word	0x4168d4fe

0800a360 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et>:
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	460b      	mov	r3, r1
 800a36a:	807b      	strh	r3, [r7, #2]
  if (Dec <= L6470_MAX_DEC)
 800a36c:	887b      	ldrh	r3, [r7, #2]
 800a36e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a372:	d209      	bcs.n	800a388 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 800a374:	887b      	ldrh	r3, [r7, #2]
 800a376:	ee07 3a90 	vmov	s15, r3
 800a37a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a37e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800a39c <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x3c>
 800a382:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a386:	e001      	b.n	800a38c <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x2c>
    return 0;   // Warning
 800a388:	eddf 7a05 	vldr	s15, [pc, #20]	; 800a3a0 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x40>
}
 800a38c:	eeb0 0a67 	vmov.f32	s0, s15
 800a390:	370c      	adds	r7, #12
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr
 800a39a:	bf00      	nop
 800a39c:	4168d4fe 	.word	0x4168d4fe
 800a3a0:	00000000 	.word	0x00000000

0800a3a4 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 800a3b0:	edd7 7a00 	vldr	s15, [r7]
 800a3b4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800a3e8 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x44>
 800a3b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a3bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3c0:	d80b      	bhi.n	800a3da <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 800a3c2:	ed97 7a00 	vldr	s14, [r7]
 800a3c6:	eddf 6a09 	vldr	s13, [pc, #36]	; 800a3ec <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x48>
 800a3ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a3ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3d2:	ee17 3a90 	vmov	r3, s15
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	e000      	b.n	800a3dc <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x38>
    return 0;   // Warning
 800a3da:	2300      	movs	r3, #0
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	370c      	adds	r7, #12
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr
 800a3e8:	4768c671 	.word	0x4768c671
 800a3ec:	4168d4fe 	.word	0x4168d4fe

0800a3f0 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 800a3f0:	b480      	push	{r7}
 800a3f2:	b083      	sub	sp, #12
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	807b      	strh	r3, [r7, #2]
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 800a3fc:	887b      	ldrh	r3, [r7, #2]
 800a3fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a402:	d209      	bcs.n	800a418 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 800a404:	887b      	ldrh	r3, [r7, #2]
 800a406:	ee07 3a90 	vmov	s15, r3
 800a40a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a40e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800a42c <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 800a412:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a416:	e001      	b.n	800a41c <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800a418:	eddf 7a05 	vldr	s15, [pc, #20]	; 800a430 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 800a41c:	eeb0 0a67 	vmov.f32	s0, s15
 800a420:	370c      	adds	r7, #12
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr
 800a42a:	bf00      	nop
 800a42c:	4174240b 	.word	0x4174240b
 800a430:	00000000 	.word	0x00000000

0800a434 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 800a434:	b480      	push	{r7}
 800a436:	b083      	sub	sp, #12
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 800a440:	edd7 7a00 	vldr	s15, [r7]
 800a444:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800a478 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x44>
 800a448:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a44c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a450:	d80b      	bhi.n	800a46a <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 800a452:	ed97 7a00 	vldr	s14, [r7]
 800a456:	eddf 6a09 	vldr	s13, [pc, #36]	; 800a47c <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x48>
 800a45a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a45e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a462:	ee17 3a90 	vmov	r3, s15
 800a466:	b29b      	uxth	r3, r3
 800a468:	e000      	b.n	800a46c <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x38>
    return 0;   // Warning
 800a46a:	2300      	movs	r3, #0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr
 800a478:	4673e702 	.word	0x4673e702
 800a47c:	4174240b 	.word	0x4174240b

0800a480 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 800a480:	b480      	push	{r7}
 800a482:	b083      	sub	sp, #12
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	460b      	mov	r3, r1
 800a48a:	807b      	strh	r3, [r7, #2]
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 800a48c:	887b      	ldrh	r3, [r7, #2]
 800a48e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a492:	d209      	bcs.n	800a4a8 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 800a494:	887b      	ldrh	r3, [r7, #2]
 800a496:	ee07 3a90 	vmov	s15, r3
 800a49a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a49e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800a4bc <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x3c>
 800a4a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a4a6:	e001      	b.n	800a4ac <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800a4a8:	eddf 7a05 	vldr	s15, [pc, #20]	; 800a4c0 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 800a4ac:	eeb0 0a67 	vmov.f32	s0, s15
 800a4b0:	370c      	adds	r7, #12
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop
 800a4bc:	3e742401 	.word	0x3e742401
 800a4c0:	00000000 	.word	0x00000000

0800a4c4 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 800a4d0:	edd7 7a00 	vldr	s15, [r7]
 800a4d4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800a508 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x44>
 800a4d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a4dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4e0:	d80b      	bhi.n	800a4fa <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 800a4e2:	ed97 7a00 	vldr	s14, [r7]
 800a4e6:	eddf 6a09 	vldr	s13, [pc, #36]	; 800a50c <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x48>
 800a4ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a4ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4f2:	ee17 3a90 	vmov	r3, s15
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	e000      	b.n	800a4fc <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x38>
    return 0;   // Warning
 800a4fa:	2300      	movs	r3, #0
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr
 800a508:	447414bf 	.word	0x447414bf
 800a50c:	3e742401 	.word	0x3e742401

0800a510 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt>:
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 800a510:	b580      	push	{r7, lr}
 800a512:	b082      	sub	sp, #8
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	460b      	mov	r3, r1
 800a51a:	807b      	strh	r3, [r7, #2]
  if (FsSpd <= L6470_MAX_FS_SPD)
 800a51c:	887b      	ldrh	r3, [r7, #2]
 800a51e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a522:	d219      	bcs.n	800a558 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 800a524:	887b      	ldrh	r3, [r7, #2]
 800a526:	4618      	mov	r0, r3
 800a528:	f7f6 f82c 	bl	8000584 <__aeabi_i2d>
 800a52c:	f04f 0200 	mov.w	r2, #0
 800a530:	4b0e      	ldr	r3, [pc, #56]	; (800a56c <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x5c>)
 800a532:	f7f5 fedb 	bl	80002ec <__adddf3>
 800a536:	4602      	mov	r2, r0
 800a538:	460b      	mov	r3, r1
 800a53a:	4610      	mov	r0, r2
 800a53c:	4619      	mov	r1, r3
 800a53e:	f04f 0200 	mov.w	r2, #0
 800a542:	4b0b      	ldr	r3, [pc, #44]	; (800a570 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x60>)
 800a544:	f7f6 f888 	bl	8000658 <__aeabi_dmul>
 800a548:	4602      	mov	r2, r0
 800a54a:	460b      	mov	r3, r1
 800a54c:	4610      	mov	r0, r2
 800a54e:	4619      	mov	r1, r3
 800a550:	f7f6 fb5a 	bl	8000c08 <__aeabi_d2f>
 800a554:	4603      	mov	r3, r0
 800a556:	e001      	b.n	800a55c <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x4c>
    return 0;   // Warning
 800a558:	f04f 0300 	mov.w	r3, #0
}
 800a55c:	ee07 3a90 	vmov	s15, r3
 800a560:	eeb0 0a67 	vmov.f32	s0, s15
 800a564:	3708      	adds	r7, #8
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	3fe00000 	.word	0x3fe00000
 800a570:	402e8000 	.word	0x402e8000

0800a574 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 800a574:	b480      	push	{r7}
 800a576:	b083      	sub	sp, #12
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 800a580:	edd7 7a00 	vldr	s15, [r7]
 800a584:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800a5c0 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x4c>
 800a588:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a58c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a590:	d80f      	bhi.n	800a5b2 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 800a592:	ed97 7a00 	vldr	s14, [r7]
 800a596:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800a5c4 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x50>
 800a59a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a59e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a5a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a5a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5aa:	ee17 3a90 	vmov	r3, s15
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	e000      	b.n	800a5b4 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x40>
    return 0;   // Warning
 800a5b2:	2300      	movs	r3, #0
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	370c      	adds	r7, #12
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr
 800a5c0:	4673e180 	.word	0x4673e180
 800a5c4:	41740000 	.word	0x41740000

0800a5c8 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	460b      	mov	r3, r1
 800a5d2:	807b      	strh	r3, [r7, #2]
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 800a5d4:	887b      	ldrh	r3, [r7, #2]
 800a5d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5da:	d209      	bcs.n	800a5f0 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 800a5dc:	887b      	ldrh	r3, [r7, #2]
 800a5de:	ee07 3a90 	vmov	s15, r3
 800a5e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5e6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800a604 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x3c>
 800a5ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a5ee:	e001      	b.n	800a5f4 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800a5f0:	eddf 7a05 	vldr	s15, [pc, #20]	; 800a608 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 800a5f4:	eeb0 0a67 	vmov.f32	s0, s15
 800a5f8:	370c      	adds	r7, #12
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a600:	4770      	bx	lr
 800a602:	bf00      	nop
 800a604:	3d7423f4 	.word	0x3d7423f4
 800a608:	00000000 	.word	0x00000000

0800a60c <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 800a618:	edd7 7a00 	vldr	s15, [r7]
 800a61c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800a650 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x44>
 800a620:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a628:	d80b      	bhi.n	800a642 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 800a62a:	ed97 7a00 	vldr	s14, [r7]
 800a62e:	eddf 6a09 	vldr	s13, [pc, #36]	; 800a654 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x48>
 800a632:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a63a:	ee17 3a90 	vmov	r3, s15
 800a63e:	b29b      	uxth	r3, r3
 800a640:	e000      	b.n	800a644 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x38>
    return 0;   // Warning
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	370c      	adds	r7, #12
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr
 800a650:	44742023 	.word	0x44742023
 800a654:	3d7423f4 	.word	0x3d7423f4

0800a658 <_ZN5L6470I8shield_1E20L6470_StSlp_2_s_StepEh>:
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	460b      	mov	r3, r1
 800a662:	70fb      	strb	r3, [r7, #3]
    return (StSlp * ((float)1.5686e-5));
 800a664:	78fb      	ldrb	r3, [r7, #3]
 800a666:	ee07 3a90 	vmov	s15, r3
 800a66a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a66e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800a684 <_ZN5L6470I8shield_1E20L6470_StSlp_2_s_StepEh+0x2c>
 800a672:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a676:	eeb0 0a67 	vmov.f32	s0, s15
 800a67a:	370c      	adds	r7, #12
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr
 800a684:	3783956e 	.word	0x3783956e

0800a688 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 800a688:	b480      	push	{r7}
 800a68a:	b085      	sub	sp, #20
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 800a694:	edd7 7a02 	vldr	s15, [r7, #8]
 800a698:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800a6d0 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x48>
 800a69c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6a4:	d80c      	bhi.n	800a6c0 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800a6a6:	ed97 7a02 	vldr	s14, [r7, #8]
 800a6aa:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800a6d4 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x4c>
 800a6ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a6b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6b6:	edc7 7a01 	vstr	s15, [r7, #4]
 800a6ba:	793b      	ldrb	r3, [r7, #4]
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	e000      	b.n	800a6c2 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x3a>
    return 0;   // Warning
 800a6c0:	2300      	movs	r3, #0
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3714      	adds	r7, #20
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6cc:	4770      	bx	lr
 800a6ce:	bf00      	nop
 800a6d0:	3b8311d9 	.word	0x3b8311d9
 800a6d4:	3783956e 	.word	0x3783956e

0800a6d8 <_ZN5L6470I8shield_1E23L6470_FnSlpAcc_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 800a6d8:	b480      	push	{r7}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	70fb      	strb	r3, [r7, #3]
    return (FnSlpAcc * ((float)1.5686e-5));
 800a6e4:	78fb      	ldrb	r3, [r7, #3]
 800a6e6:	ee07 3a90 	vmov	s15, r3
 800a6ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6ee:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800a704 <_ZN5L6470I8shield_1E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 800a6f2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a6f6:	eeb0 0a67 	vmov.f32	s0, s15
 800a6fa:	370c      	adds	r7, #12
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr
 800a704:	3783956e 	.word	0x3783956e

0800a708 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 800a708:	b480      	push	{r7}
 800a70a:	b085      	sub	sp, #20
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 800a714:	edd7 7a02 	vldr	s15, [r7, #8]
 800a718:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800a750 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x48>
 800a71c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a724:	d80c      	bhi.n	800a740 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800a726:	ed97 7a02 	vldr	s14, [r7, #8]
 800a72a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800a754 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 800a72e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a736:	edc7 7a01 	vstr	s15, [r7, #4]
 800a73a:	793b      	ldrb	r3, [r7, #4]
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	e000      	b.n	800a742 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x3a>
    return 0;   // Warning
 800a740:	2300      	movs	r3, #0
}
 800a742:	4618      	mov	r0, r3
 800a744:	3714      	adds	r7, #20
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr
 800a74e:	bf00      	nop
 800a750:	3b8311d9 	.word	0x3b8311d9
 800a754:	3783956e 	.word	0x3783956e

0800a758 <_ZN5L6470I8shield_1E23L6470_FnSlpDec_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	460b      	mov	r3, r1
 800a762:	70fb      	strb	r3, [r7, #3]
    return (FnSlpDec * ((float)1.5686e-5));
 800a764:	78fb      	ldrb	r3, [r7, #3]
 800a766:	ee07 3a90 	vmov	s15, r3
 800a76a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a76e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800a784 <_ZN5L6470I8shield_1E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 800a772:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a776:	eeb0 0a67 	vmov.f32	s0, s15
 800a77a:	370c      	adds	r7, #12
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr
 800a784:	3783956e 	.word	0x3783956e

0800a788 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 800a788:	b480      	push	{r7}
 800a78a:	b085      	sub	sp, #20
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	60f8      	str	r0, [r7, #12]
 800a790:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 800a794:	edd7 7a02 	vldr	s15, [r7, #8]
 800a798:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800a7d0 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x48>
 800a79c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a7a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7a4:	d80c      	bhi.n	800a7c0 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800a7a6:	ed97 7a02 	vldr	s14, [r7, #8]
 800a7aa:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800a7d4 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 800a7ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a7b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7b6:	edc7 7a01 	vstr	s15, [r7, #4]
 800a7ba:	793b      	ldrb	r3, [r7, #4]
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	e000      	b.n	800a7c2 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x3a>
    return 0;   // Warning
 800a7c0:	2300      	movs	r3, #0
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3714      	adds	r7, #20
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr
 800a7ce:	bf00      	nop
 800a7d0:	3b8311d9 	.word	0x3b8311d9
 800a7d4:	3783956e 	.word	0x3783956e

0800a7d8 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh>:
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 800a7d8:	b480      	push	{r7}
 800a7da:	b083      	sub	sp, #12
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	70fb      	strb	r3, [r7, #3]
  if (OcdTh <= L6470_MAX_OCD_TH)
 800a7e4:	78fb      	ldrb	r3, [r7, #3]
 800a7e6:	2b0f      	cmp	r3, #15
 800a7e8:	d80a      	bhi.n	800a800 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 800a7ea:	78fb      	ldrb	r3, [r7, #3]
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	ee07 3a90 	vmov	s15, r3
 800a7f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7f6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800a814 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x3c>
 800a7fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a7fe:	e001      	b.n	800a804 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x2c>
    return 0;   // Warning
 800a800:	eddf 7a05 	vldr	s15, [pc, #20]	; 800a818 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x40>
}
 800a804:	eeb0 0a67 	vmov.f32	s0, s15
 800a808:	370c      	adds	r7, #12
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr
 800a812:	bf00      	nop
 800a814:	43bb8000 	.word	0x43bb8000
 800a818:	00000000 	.word	0x00000000

0800a81c <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 800a81c:	b480      	push	{r7}
 800a81e:	b087      	sub	sp, #28
 800a820:	af00      	add	r7, sp, #0
 800a822:	60f8      	str	r0, [r7, #12]
 800a824:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 800a828:	edd7 7a02 	vldr	s15, [r7, #8]
 800a82c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800a8b8 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x9c>
 800a830:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a838:	d836      	bhi.n	800a8a8 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8c>
    result = (mA / ((float)375));
 800a83a:	ed97 7a02 	vldr	s14, [r7, #8]
 800a83e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800a8bc <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0xa0>
 800a842:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a846:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800a84a:	edd7 7a05 	vldr	s15, [r7, #20]
 800a84e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a852:	edc7 7a01 	vstr	s15, [r7, #4]
 800a856:	793b      	ldrb	r3, [r7, #4]
 800a858:	b2db      	uxtb	r3, r3
 800a85a:	ee07 3a90 	vmov	s15, r3
 800a85e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a862:	ed97 7a05 	vldr	s14, [r7, #20]
 800a866:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a86a:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 800a86e:	edd7 7a04 	vldr	s15, [r7, #16]
 800a872:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a876:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a87a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a87e:	d50a      	bpl.n	800a896 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 800a880:	edd7 7a05 	vldr	s15, [r7, #20]
 800a884:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a888:	edc7 7a01 	vstr	s15, [r7, #4]
 800a88c:	793b      	ldrb	r3, [r7, #4]
 800a88e:	b2db      	uxtb	r3, r3
 800a890:	3b01      	subs	r3, #1
 800a892:	b2db      	uxtb	r3, r3
 800a894:	e009      	b.n	800a8aa <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8e>
      return ((uint8_t)result);    
 800a896:	edd7 7a05 	vldr	s15, [r7, #20]
 800a89a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a89e:	edc7 7a01 	vstr	s15, [r7, #4]
 800a8a2:	793b      	ldrb	r3, [r7, #4]
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	e000      	b.n	800a8aa <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8e>
    return 0;   // Warning
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	371c      	adds	r7, #28
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr
 800a8b6:	bf00      	nop
 800a8b8:	45bb8000 	.word	0x45bb8000
 800a8bc:	43bb8000 	.word	0x43bb8000

0800a8c0 <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh>:
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	70fb      	strb	r3, [r7, #3]
  if (StallTh <= L6470_MAX_STALL_TH)
 800a8cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	db0a      	blt.n	800a8ea <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 800a8d4:	78fb      	ldrb	r3, [r7, #3]
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	ee07 3a90 	vmov	s15, r3
 800a8dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a8e0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800a8fc <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x3c>
 800a8e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a8e8:	e001      	b.n	800a8ee <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x2e>
    return 0;   // Warning
 800a8ea:	eddf 7a05 	vldr	s15, [pc, #20]	; 800a900 <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x40>
}
 800a8ee:	eeb0 0a67 	vmov.f32	s0, s15
 800a8f2:	370c      	adds	r7, #12
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr
 800a8fc:	41fa0000 	.word	0x41fa0000
 800a900:	00000000 	.word	0x00000000

0800a904 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 800a904:	b480      	push	{r7}
 800a906:	b087      	sub	sp, #28
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 800a910:	edd7 7a02 	vldr	s15, [r7, #8]
 800a914:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800a9a0 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x9c>
 800a918:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a91c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a920:	d836      	bhi.n	800a990 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8c>
    result = (mA / ((float)31.25));
 800a922:	ed97 7a02 	vldr	s14, [r7, #8]
 800a926:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800a9a4 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0xa0>
 800a92a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a92e:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800a932:	edd7 7a05 	vldr	s15, [r7, #20]
 800a936:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a93a:	edc7 7a01 	vstr	s15, [r7, #4]
 800a93e:	793b      	ldrb	r3, [r7, #4]
 800a940:	b2db      	uxtb	r3, r3
 800a942:	ee07 3a90 	vmov	s15, r3
 800a946:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a94a:	ed97 7a05 	vldr	s14, [r7, #20]
 800a94e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a952:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 800a956:	edd7 7a04 	vldr	s15, [r7, #16]
 800a95a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a95e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a966:	d50a      	bpl.n	800a97e <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 800a968:	edd7 7a05 	vldr	s15, [r7, #20]
 800a96c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a970:	edc7 7a01 	vstr	s15, [r7, #4]
 800a974:	793b      	ldrb	r3, [r7, #4]
 800a976:	b2db      	uxtb	r3, r3
 800a978:	3b01      	subs	r3, #1
 800a97a:	b2db      	uxtb	r3, r3
 800a97c:	e009      	b.n	800a992 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8e>
      return ((uint8_t)result);    
 800a97e:	edd7 7a05 	vldr	s15, [r7, #20]
 800a982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a986:	edc7 7a01 	vstr	s15, [r7, #4]
 800a98a:	793b      	ldrb	r3, [r7, #4]
 800a98c:	b2db      	uxtb	r3, r3
 800a98e:	e000      	b.n	800a992 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8e>
    return 0;   // Warning
 800a990:	2300      	movs	r3, #0
}
 800a992:	4618      	mov	r0, r3
 800a994:	371c      	adds	r7, #28
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr
 800a99e:	bf00      	nop
 800a9a0:	457a0000 	.word	0x457a0000
 800a9a4:	41fa0000 	.word	0x41fa0000

0800a9a8 <_ZN5L6470I8shield_1E12L6470_ConfigEPv>:
status_t L6470<shield_x>::L6470_Config(void *init)
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b086      	sub	sp, #24
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	60f8      	str	r0, [r7, #12]
 800a9b0:	60b9      	str	r1, [r7, #8]
  reset_device();
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	3394      	adds	r3, #148	; 0x94
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	68f8      	ldr	r0, [r7, #12]
 800a9bc:	4798      	blx	r3
  get_status();
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	330c      	adds	r3, #12
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	68f8      	ldr	r0, [r7, #12]
 800a9c8:	4798      	blx	r3
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	697a      	ldr	r2, [r7, #20]
 800a9da:	edd2 7a05 	vldr	s15, [r2, #20]
 800a9de:	eeb0 0a67 	vmov.f32	s0, s15
 800a9e2:	68f8      	ldr	r0, [r7, #12]
 800a9e4:	4798      	blx	r3
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	697a      	ldr	r2, [r7, #20]
 800a9fc:	edd2 7a06 	vldr	s15, [r2, #24]
 800aa00:	eeb0 0a67 	vmov.f32	s0, s15
 800aa04:	68f8      	ldr	r0, [r7, #12]
 800aa06:	4798      	blx	r3
 800aa08:	4603      	mov	r3, r0
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	697a      	ldr	r2, [r7, #20]
 800aa1e:	edd2 7a07 	vldr	s15, [r2, #28]
 800aa22:	eeb0 0a67 	vmov.f32	s0, s15
 800aa26:	68f8      	ldr	r0, [r7, #12]
 800aa28:	4798      	blx	r3
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	697a      	ldr	r2, [r7, #20]
 800aa40:	edd2 7a08 	vldr	s15, [r2, #32]
 800aa44:	eeb0 0a67 	vmov.f32	s0, s15
 800aa48:	68f8      	ldr	r0, [r7, #12]
 800aa4a:	4798      	blx	r3
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	461a      	mov	r2, r3
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	697a      	ldr	r2, [r7, #20]
 800aa62:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800aa66:	eeb0 0a67 	vmov.f32	s0, s15
 800aa6a:	68f8      	ldr	r0, [r7, #12]
 800aa6c:	4798      	blx	r3
 800aa6e:	4603      	mov	r3, r0
 800aa70:	461a      	mov	r2, r3
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800aa7e:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 800ad50 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800aa82:	ee67 6a87 	vmul.f32	s13, s15, s14
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	ed93 7a00 	vldr	s14, [r3]
 800aa8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa94:	edc7 7a01 	vstr	s15, [r7, #4]
 800aa98:	793b      	ldrb	r3, [r7, #4]
 800aa9a:	b2da      	uxtb	r2, r3
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800aaa8:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 800ad50 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800aaac:	ee67 6a87 	vmul.f32	s13, s15, s14
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	ed93 7a00 	vldr	s14, [r3]
 800aab6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aaba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aabe:	edc7 7a01 	vstr	s15, [r7, #4]
 800aac2:	793b      	ldrb	r3, [r7, #4]
 800aac4:	b2da      	uxtb	r2, r3
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800aad2:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 800ad50 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800aad6:	ee67 6a87 	vmul.f32	s13, s15, s14
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	ed93 7a00 	vldr	s14, [r3]
 800aae0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aae4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aae8:	edc7 7a01 	vstr	s15, [r7, #4]
 800aaec:	793b      	ldrb	r3, [r7, #4]
 800aaee:	b2da      	uxtb	r2, r3
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800aafc:	ed9f 7a94 	vldr	s14, [pc, #592]	; 800ad50 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800ab00:	ee67 6a87 	vmul.f32	s13, s15, s14
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	ed93 7a00 	vldr	s14, [r3]
 800ab0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab12:	edc7 7a01 	vstr	s15, [r7, #4]
 800ab16:	793b      	ldrb	r3, [r7, #4]
 800ab18:	b2da      	uxtb	r2, r3
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	697a      	ldr	r2, [r7, #20]
 800ab2c:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800ab30:	eeb0 0a67 	vmov.f32	s0, s15
 800ab34:	68f8      	ldr	r0, [r7, #12]
 800ab36:	4798      	blx	r3
 800ab38:	4603      	mov	r3, r0
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	697a      	ldr	r2, [r7, #20]
 800ab4e:	edd2 7a0f 	vldr	s15, [r2, #60]	; 0x3c
 800ab52:	eeb0 0a67 	vmov.f32	s0, s15
 800ab56:	68f8      	ldr	r0, [r7, #12]
 800ab58:	4798      	blx	r3
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	461a      	mov	r2, r3
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	697a      	ldr	r2, [r7, #20]
 800ab70:	edd2 7a10 	vldr	s15, [r2, #64]	; 0x40
 800ab74:	eeb0 0a67 	vmov.f32	s0, s15
 800ab78:	68f8      	ldr	r0, [r7, #12]
 800ab7a:	4798      	blx	r3
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	461a      	mov	r2, r3
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	697a      	ldr	r2, [r7, #20]
 800ab92:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 800ab96:	eeb0 0a67 	vmov.f32	s0, s15
 800ab9a:	68f8      	ldr	r0, [r7, #12]
 800ab9c:	4798      	blx	r3
 800ab9e:	4603      	mov	r3, r0
 800aba0:	461a      	mov	r2, r3
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	697a      	ldr	r2, [r7, #20]
 800abc0:	edd2 7a13 	vldr	s15, [r2, #76]	; 0x4c
 800abc4:	eeb0 0a67 	vmov.f32	s0, s15
 800abc8:	68f8      	ldr	r0, [r7, #12]
 800abca:	4798      	blx	r3
 800abcc:	4603      	mov	r3, r0
 800abce:	461a      	mov	r2, r3
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	697a      	ldr	r2, [r7, #20]
 800abe2:	edd2 7a14 	vldr	s15, [r2, #80]	; 0x50
 800abe6:	eeb0 0a67 	vmov.f32	s0, s15
 800abea:	68f8      	ldr	r0, [r7, #12]
 800abec:	4798      	blx	r3
 800abee:	4603      	mov	r3, r0
 800abf0:	461a      	mov	r2, r3
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	68fa      	ldr	r2, [r7, #12]
 800ac28:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 800ac2c:	2104      	movs	r1, #4
 800ac2e:	68f8      	ldr	r0, [r7, #12]
 800ac30:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	68fa      	ldr	r2, [r7, #12]
 800ac3e:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
 800ac42:	2105      	movs	r1, #5
 800ac44:	68f8      	ldr	r0, [r7, #12]
 800ac46:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	68fa      	ldr	r2, [r7, #12]
 800ac54:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 800ac58:	2106      	movs	r1, #6
 800ac5a:	68f8      	ldr	r0, [r7, #12]
 800ac5c:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	68fa      	ldr	r2, [r7, #12]
 800ac6a:	f8b2 204e 	ldrh.w	r2, [r2, #78]	; 0x4e
 800ac6e:	2107      	movs	r1, #7
 800ac70:	68f8      	ldr	r0, [r7, #12]
 800ac72:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	68fa      	ldr	r2, [r7, #12]
 800ac80:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 800ac84:	2108      	movs	r1, #8
 800ac86:	68f8      	ldr	r0, [r7, #12]
 800ac88:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	68fa      	ldr	r2, [r7, #12]
 800ac96:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800ac9a:	2109      	movs	r1, #9
 800ac9c:	68f8      	ldr	r0, [r7, #12]
 800ac9e:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	68fa      	ldr	r2, [r7, #12]
 800acac:	f892 2053 	ldrb.w	r2, [r2, #83]	; 0x53
 800acb0:	210a      	movs	r1, #10
 800acb2:	68f8      	ldr	r0, [r7, #12]
 800acb4:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	68fa      	ldr	r2, [r7, #12]
 800acc2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800acc6:	210b      	movs	r1, #11
 800acc8:	68f8      	ldr	r0, [r7, #12]
 800acca:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	68fa      	ldr	r2, [r7, #12]
 800acd8:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800acdc:	210c      	movs	r1, #12
 800acde:	68f8      	ldr	r0, [r7, #12]
 800ace0:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	f8b2 2056 	ldrh.w	r2, [r2, #86]	; 0x56
 800acf2:	210d      	movs	r1, #13
 800acf4:	68f8      	ldr	r0, [r7, #12]
 800acf6:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	68fa      	ldr	r2, [r7, #12]
 800ad04:	f892 2058 	ldrb.w	r2, [r2, #88]	; 0x58
 800ad08:	210e      	movs	r1, #14
 800ad0a:	68f8      	ldr	r0, [r7, #12]
 800ad0c:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	68fa      	ldr	r2, [r7, #12]
 800ad1a:	f892 2059 	ldrb.w	r2, [r2, #89]	; 0x59
 800ad1e:	210f      	movs	r1, #15
 800ad20:	68f8      	ldr	r0, [r7, #12]
 800ad22:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	68fa      	ldr	r2, [r7, #12]
 800ad30:	f892 205a 	ldrb.w	r2, [r2, #90]	; 0x5a
 800ad34:	2110      	movs	r1, #16
 800ad36:	68f8      	ldr	r0, [r7, #12]
 800ad38:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	68fa      	ldr	r2, [r7, #12]
 800ad46:	f892 205b 	ldrb.w	r2, [r2, #91]	; 0x5b
 800ad4a:	2111      	movs	r1, #17
 800ad4c:	68f8      	ldr	r0, [r7, #12]
 800ad4e:	e001      	b.n	800ad54 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3ac>
 800ad50:	43800000 	.word	0x43800000
 800ad54:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	68fa      	ldr	r2, [r7, #12]
 800ad62:	f892 205d 	ldrb.w	r2, [r2, #93]	; 0x5d
 800ad66:	2113      	movs	r1, #19
 800ad68:	68f8      	ldr	r0, [r7, #12]
 800ad6a:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	68fa      	ldr	r2, [r7, #12]
 800ad78:	f892 205e 	ldrb.w	r2, [r2, #94]	; 0x5e
 800ad7c:	2114      	movs	r1, #20
 800ad7e:	68f8      	ldr	r0, [r7, #12]
 800ad80:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	68fa      	ldr	r2, [r7, #12]
 800ad8e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800ad92:	2116      	movs	r1, #22
 800ad94:	68f8      	ldr	r0, [r7, #12]
 800ad96:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	68fa      	ldr	r2, [r7, #12]
 800ada4:	f8b2 2062 	ldrh.w	r2, [r2, #98]	; 0x62
 800ada8:	2117      	movs	r1, #23
 800adaa:	68f8      	ldr	r0, [r7, #12]
 800adac:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	3354      	adds	r3, #84	; 0x54
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	f892 205f 	ldrb.w	r2, [r2, #95]	; 0x5f
 800adbc:	4611      	mov	r1, r2
 800adbe:	68f8      	ldr	r0, [r7, #12]
 800adc0:	4798      	blx	r3
 800adc2:	4603      	mov	r3, r0
 800adc4:	f083 0301 	eor.w	r3, r3, #1
 800adc8:	b2db      	uxtb	r3, r3
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d001      	beq.n	800add2 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 800adce:	2301      	movs	r3, #1
 800add0:	e000      	b.n	800add4 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x42c>
  return COMPONENT_OK;
 800add2:	2300      	movs	r3, #0
}
 800add4:	4618      	mov	r0, r3
 800add6:	3718      	adds	r7, #24
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 800addc:	b590      	push	{r4, r7, lr}
 800adde:	b087      	sub	sp, #28
 800ade0:	af02      	add	r7, sp, #8
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	460b      	mov	r3, r1
 800ade6:	607a      	str	r2, [r7, #4]
 800ade8:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800adf2:	681c      	ldr	r4, [r3, #0]
 800adf4:	7afa      	ldrb	r2, [r7, #11]
 800adf6:	2300      	movs	r3, #0
 800adf8:	9301      	str	r3, [sp, #4]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	9300      	str	r3, [sp, #0]
 800adfe:	4613      	mov	r3, r2
 800ae00:	2201      	movs	r2, #1
 800ae02:	490c      	ldr	r1, [pc, #48]	; (800ae34 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 800ae04:	68f8      	ldr	r0, [r7, #12]
 800ae06:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	4a09      	ldr	r2, [pc, #36]	; (800ae38 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 800ae14:	4907      	ldr	r1, [pc, #28]	; (800ae34 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 800ae16:	68f8      	ldr	r0, [r7, #12]
 800ae18:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4a05      	ldr	r2, [pc, #20]	; (800ae3c <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 800ae26:	4904      	ldr	r1, [pc, #16]	; (800ae38 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 800ae28:	68f8      	ldr	r0, [r7, #12]
 800ae2a:	4798      	blx	r3
}
 800ae2c:	bf00      	nop
 800ae2e:	3714      	adds	r7, #20
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd90      	pop	{r4, r7, pc}
 800ae34:	2000020c 	.word	0x2000020c
 800ae38:	2000022c 	.word	0x2000022c
 800ae3c:	20000234 	.word	0x20000234

0800ae40 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 800ae40:	b590      	push	{r4, r7, lr}
 800ae42:	b087      	sub	sp, #28
 800ae44:	af02      	add	r7, sp, #8
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	460b      	mov	r3, r1
 800ae4a:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800ae54:	681c      	ldr	r4, [r3, #0]
 800ae56:	78fb      	ldrb	r3, [r7, #3]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	9201      	str	r2, [sp, #4]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	9200      	str	r2, [sp, #0]
 800ae60:	2202      	movs	r2, #2
 800ae62:	4917      	ldr	r1, [pc, #92]	; (800aec0 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4a14      	ldr	r2, [pc, #80]	; (800aec4 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 800ae74:	4912      	ldr	r1, [pc, #72]	; (800aec0 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4a10      	ldr	r2, [pc, #64]	; (800aec8 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 800ae86:	490f      	ldr	r1, [pc, #60]	; (800aec4 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6a19      	ldr	r1, [r3, #32]
 800ae90:	78fa      	ldrb	r2, [r7, #3]
 800ae92:	4613      	mov	r3, r2
 800ae94:	009b      	lsls	r3, r3, #2
 800ae96:	4413      	add	r3, r2
 800ae98:	009b      	lsls	r3, r3, #2
 800ae9a:	440b      	add	r3, r1
 800ae9c:	7b9b      	ldrb	r3, [r3, #14]
 800ae9e:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	7bfa      	ldrb	r2, [r7, #15]
 800aeac:	4906      	ldr	r1, [pc, #24]	; (800aec8 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	4798      	blx	r3
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 800aeb6:	68bb      	ldr	r3, [r7, #8]
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3714      	adds	r7, #20
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd90      	pop	{r4, r7, pc}
 800aec0:	2000020c 	.word	0x2000020c
 800aec4:	2000022c 	.word	0x2000022c
 800aec8:	20000234 	.word	0x20000234

0800aecc <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800aecc:	b590      	push	{r4, r7, lr}
 800aece:	b087      	sub	sp, #28
 800aed0:	af02      	add	r7, sp, #8
 800aed2:	60f8      	str	r0, [r7, #12]
 800aed4:	460b      	mov	r3, r1
 800aed6:	607a      	str	r2, [r7, #4]
 800aed8:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800aee2:	681c      	ldr	r4, [r3, #0]
 800aee4:	7afa      	ldrb	r2, [r7, #11]
 800aee6:	2300      	movs	r3, #0
 800aee8:	9301      	str	r3, [sp, #4]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	9300      	str	r3, [sp, #0]
 800aeee:	4613      	mov	r3, r2
 800aef0:	2203      	movs	r2, #3
 800aef2:	490c      	ldr	r1, [pc, #48]	; (800af24 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x58>)
 800aef4:	68f8      	ldr	r0, [r7, #12]
 800aef6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	4a09      	ldr	r2, [pc, #36]	; (800af28 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 800af04:	4907      	ldr	r1, [pc, #28]	; (800af24 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x58>)
 800af06:	68f8      	ldr	r0, [r7, #12]
 800af08:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4a05      	ldr	r2, [pc, #20]	; (800af2c <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x60>)
 800af16:	4904      	ldr	r1, [pc, #16]	; (800af28 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 800af18:	68f8      	ldr	r0, [r7, #12]
 800af1a:	4798      	blx	r3
}
 800af1c:	bf00      	nop
 800af1e:	3714      	adds	r7, #20
 800af20:	46bd      	mov	sp, r7
 800af22:	bd90      	pop	{r4, r7, pc}
 800af24:	2000020c 	.word	0x2000020c
 800af28:	2000022c 	.word	0x2000022c
 800af2c:	20000234 	.word	0x20000234

0800af30 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 800af30:	b590      	push	{r4, r7, lr}
 800af32:	b085      	sub	sp, #20
 800af34:	af02      	add	r7, sp, #8
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	460b      	mov	r3, r1
 800af3a:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800af44:	681c      	ldr	r4, [r3, #0]
 800af46:	78fb      	ldrb	r3, [r7, #3]
 800af48:	2200      	movs	r2, #0
 800af4a:	9201      	str	r2, [sp, #4]
 800af4c:	2200      	movs	r2, #0
 800af4e:	9200      	str	r2, [sp, #0]
 800af50:	2204      	movs	r2, #4
 800af52:	490c      	ldr	r1, [pc, #48]	; (800af84 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	4a09      	ldr	r2, [pc, #36]	; (800af88 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 800af64:	4907      	ldr	r1, [pc, #28]	; (800af84 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	4a05      	ldr	r2, [pc, #20]	; (800af8c <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 800af76:	4904      	ldr	r1, [pc, #16]	; (800af88 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	4798      	blx	r3
}
 800af7c:	bf00      	nop
 800af7e:	370c      	adds	r7, #12
 800af80:	46bd      	mov	sp, r7
 800af82:	bd90      	pop	{r4, r7, pc}
 800af84:	2000020c 	.word	0x2000020c
 800af88:	2000022c 	.word	0x2000022c
 800af8c:	20000234 	.word	0x20000234

0800af90 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 800af90:	b590      	push	{r4, r7, lr}
 800af92:	b087      	sub	sp, #28
 800af94:	af02      	add	r7, sp, #8
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	460b      	mov	r3, r1
 800af9a:	607a      	str	r2, [r7, #4]
 800af9c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800afa6:	681c      	ldr	r4, [r3, #0]
 800afa8:	7afa      	ldrb	r2, [r7, #11]
 800afaa:	2300      	movs	r3, #0
 800afac:	9301      	str	r3, [sp, #4]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	9300      	str	r3, [sp, #0]
 800afb2:	4613      	mov	r3, r2
 800afb4:	2205      	movs	r2, #5
 800afb6:	490c      	ldr	r1, [pc, #48]	; (800afe8 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 800afb8:	68f8      	ldr	r0, [r7, #12]
 800afba:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	4a09      	ldr	r2, [pc, #36]	; (800afec <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 800afc8:	4907      	ldr	r1, [pc, #28]	; (800afe8 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 800afca:	68f8      	ldr	r0, [r7, #12]
 800afcc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4a05      	ldr	r2, [pc, #20]	; (800aff0 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 800afda:	4904      	ldr	r1, [pc, #16]	; (800afec <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 800afdc:	68f8      	ldr	r0, [r7, #12]
 800afde:	4798      	blx	r3
}
 800afe0:	bf00      	nop
 800afe2:	3714      	adds	r7, #20
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd90      	pop	{r4, r7, pc}
 800afe8:	2000020c 	.word	0x2000020c
 800afec:	2000022c 	.word	0x2000022c
 800aff0:	20000234 	.word	0x20000234

0800aff4 <_ZN5L6470I8shield_1E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 800aff4:	b590      	push	{r4, r7, lr}
 800aff6:	b085      	sub	sp, #20
 800aff8:	af02      	add	r7, sp, #8
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b004:	d21f      	bcs.n	800b046 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b00e:	681c      	ldr	r4, [r3, #0]
 800b010:	2300      	movs	r3, #0
 800b012:	9301      	str	r3, [sp, #4]
 800b014:	2300      	movs	r3, #0
 800b016:	9300      	str	r3, [sp, #0]
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	2206      	movs	r2, #6
 800b01c:	490c      	ldr	r1, [pc, #48]	; (800b050 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x5c>)
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4a09      	ldr	r2, [pc, #36]	; (800b054 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x60>)
 800b02e:	4908      	ldr	r1, [pc, #32]	; (800b050 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x5c>)
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4a06      	ldr	r2, [pc, #24]	; (800b058 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x64>)
 800b040:	4904      	ldr	r1, [pc, #16]	; (800b054 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x60>)
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	4798      	blx	r3
}
 800b046:	bf00      	nop
 800b048:	370c      	adds	r7, #12
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd90      	pop	{r4, r7, pc}
 800b04e:	bf00      	nop
 800b050:	2000020c 	.word	0x2000020c
 800b054:	2000022c 	.word	0x2000022c
 800b058:	20000234 	.word	0x20000234

0800b05c <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 800b05c:	b590      	push	{r4, r7, lr}
 800b05e:	b087      	sub	sp, #28
 800b060:	af02      	add	r7, sp, #8
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	460b      	mov	r3, r1
 800b066:	607a      	str	r2, [r7, #4]
 800b068:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b070:	d220      	bcs.n	800b0b4 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b07a:	681c      	ldr	r4, [r3, #0]
 800b07c:	7afa      	ldrb	r2, [r7, #11]
 800b07e:	2300      	movs	r3, #0
 800b080:	9301      	str	r3, [sp, #4]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	9300      	str	r3, [sp, #0]
 800b086:	4613      	mov	r3, r2
 800b088:	2207      	movs	r2, #7
 800b08a:	490c      	ldr	r1, [pc, #48]	; (800b0bc <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 800b08c:	68f8      	ldr	r0, [r7, #12]
 800b08e:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4a09      	ldr	r2, [pc, #36]	; (800b0c0 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 800b09c:	4907      	ldr	r1, [pc, #28]	; (800b0bc <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 800b09e:	68f8      	ldr	r0, [r7, #12]
 800b0a0:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4a05      	ldr	r2, [pc, #20]	; (800b0c4 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 800b0ae:	4904      	ldr	r1, [pc, #16]	; (800b0c0 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 800b0b0:	68f8      	ldr	r0, [r7, #12]
 800b0b2:	4798      	blx	r3
}
 800b0b4:	bf00      	nop
 800b0b6:	3714      	adds	r7, #20
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd90      	pop	{r4, r7, pc}
 800b0bc:	2000020c 	.word	0x2000020c
 800b0c0:	2000022c 	.word	0x2000022c
 800b0c4:	20000234 	.word	0x20000234

0800b0c8 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800b0c8:	b590      	push	{r4, r7, lr}
 800b0ca:	b087      	sub	sp, #28
 800b0cc:	af02      	add	r7, sp, #8
 800b0ce:	60f8      	str	r0, [r7, #12]
 800b0d0:	607b      	str	r3, [r7, #4]
 800b0d2:	460b      	mov	r3, r1
 800b0d4:	72fb      	strb	r3, [r7, #11]
 800b0d6:	4613      	mov	r3, r2
 800b0d8:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b0e2:	681c      	ldr	r4, [r3, #0]
 800b0e4:	7af9      	ldrb	r1, [r7, #11]
 800b0e6:	7abb      	ldrb	r3, [r7, #10]
 800b0e8:	687a      	ldr	r2, [r7, #4]
 800b0ea:	9201      	str	r2, [sp, #4]
 800b0ec:	9300      	str	r3, [sp, #0]
 800b0ee:	460b      	mov	r3, r1
 800b0f0:	2208      	movs	r2, #8
 800b0f2:	490c      	ldr	r1, [pc, #48]	; (800b124 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 800b0f4:	68f8      	ldr	r0, [r7, #12]
 800b0f6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4a09      	ldr	r2, [pc, #36]	; (800b128 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 800b104:	4907      	ldr	r1, [pc, #28]	; (800b124 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 800b106:	68f8      	ldr	r0, [r7, #12]
 800b108:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4a05      	ldr	r2, [pc, #20]	; (800b12c <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 800b116:	4904      	ldr	r1, [pc, #16]	; (800b128 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 800b118:	68f8      	ldr	r0, [r7, #12]
 800b11a:	4798      	blx	r3
}
 800b11c:	bf00      	nop
 800b11e:	3714      	adds	r7, #20
 800b120:	46bd      	mov	sp, r7
 800b122:	bd90      	pop	{r4, r7, pc}
 800b124:	2000020c 	.word	0x2000020c
 800b128:	2000022c 	.word	0x2000022c
 800b12c:	20000234 	.word	0x20000234

0800b130 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 800b130:	b590      	push	{r4, r7, lr}
 800b132:	b085      	sub	sp, #20
 800b134:	af02      	add	r7, sp, #8
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	460b      	mov	r3, r1
 800b13a:	70fb      	strb	r3, [r7, #3]
 800b13c:	4613      	mov	r3, r2
 800b13e:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b148:	681c      	ldr	r4, [r3, #0]
 800b14a:	78fa      	ldrb	r2, [r7, #3]
 800b14c:	78bb      	ldrb	r3, [r7, #2]
 800b14e:	2100      	movs	r1, #0
 800b150:	9101      	str	r1, [sp, #4]
 800b152:	9300      	str	r3, [sp, #0]
 800b154:	4613      	mov	r3, r2
 800b156:	2209      	movs	r2, #9
 800b158:	490c      	ldr	r1, [pc, #48]	; (800b18c <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4a09      	ldr	r2, [pc, #36]	; (800b190 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 800b16a:	4908      	ldr	r1, [pc, #32]	; (800b18c <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	4a06      	ldr	r2, [pc, #24]	; (800b194 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 800b17c:	4904      	ldr	r1, [pc, #16]	; (800b190 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	4798      	blx	r3
}
 800b182:	bf00      	nop
 800b184:	370c      	adds	r7, #12
 800b186:	46bd      	mov	sp, r7
 800b188:	bd90      	pop	{r4, r7, pc}
 800b18a:	bf00      	nop
 800b18c:	2000020c 	.word	0x2000020c
 800b190:	2000022c 	.word	0x2000022c
 800b194:	20000234 	.word	0x20000234

0800b198 <_ZN5L6470I8shield_1E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 800b198:	b590      	push	{r4, r7, lr}
 800b19a:	b085      	sub	sp, #20
 800b19c:	af02      	add	r7, sp, #8
 800b19e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b1a8:	681c      	ldr	r4, [r3, #0]
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	9301      	str	r3, [sp, #4]
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	9300      	str	r3, [sp, #0]
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	220a      	movs	r2, #10
 800b1b6:	490c      	ldr	r1, [pc, #48]	; (800b1e8 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x50>)
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	4a09      	ldr	r2, [pc, #36]	; (800b1ec <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x54>)
 800b1c8:	4907      	ldr	r1, [pc, #28]	; (800b1e8 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x50>)
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	4a05      	ldr	r2, [pc, #20]	; (800b1f0 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x58>)
 800b1da:	4904      	ldr	r1, [pc, #16]	; (800b1ec <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x54>)
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	4798      	blx	r3
}
 800b1e0:	bf00      	nop
 800b1e2:	370c      	adds	r7, #12
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd90      	pop	{r4, r7, pc}
 800b1e8:	2000020c 	.word	0x2000020c
 800b1ec:	2000022c 	.word	0x2000022c
 800b1f0:	20000234 	.word	0x20000234

0800b1f4 <_ZN5L6470I8shield_1E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 800b1f4:	b590      	push	{r4, r7, lr}
 800b1f6:	b085      	sub	sp, #20
 800b1f8:	af02      	add	r7, sp, #8
 800b1fa:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b204:	681c      	ldr	r4, [r3, #0]
 800b206:	2300      	movs	r3, #0
 800b208:	9301      	str	r3, [sp, #4]
 800b20a:	2300      	movs	r3, #0
 800b20c:	9300      	str	r3, [sp, #0]
 800b20e:	2300      	movs	r3, #0
 800b210:	220b      	movs	r2, #11
 800b212:	490c      	ldr	r1, [pc, #48]	; (800b244 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x50>)
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	4a09      	ldr	r2, [pc, #36]	; (800b248 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x54>)
 800b224:	4907      	ldr	r1, [pc, #28]	; (800b244 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x50>)
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4a05      	ldr	r2, [pc, #20]	; (800b24c <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x58>)
 800b236:	4904      	ldr	r1, [pc, #16]	; (800b248 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x54>)
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	4798      	blx	r3
}
 800b23c:	bf00      	nop
 800b23e:	370c      	adds	r7, #12
 800b240:	46bd      	mov	sp, r7
 800b242:	bd90      	pop	{r4, r7, pc}
 800b244:	2000020c 	.word	0x2000020c
 800b248:	2000022c 	.word	0x2000022c
 800b24c:	20000234 	.word	0x20000234

0800b250 <_ZN5L6470I8shield_1E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 800b250:	b590      	push	{r4, r7, lr}
 800b252:	b085      	sub	sp, #20
 800b254:	af02      	add	r7, sp, #8
 800b256:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b260:	681c      	ldr	r4, [r3, #0]
 800b262:	2300      	movs	r3, #0
 800b264:	9301      	str	r3, [sp, #4]
 800b266:	2300      	movs	r3, #0
 800b268:	9300      	str	r3, [sp, #0]
 800b26a:	2300      	movs	r3, #0
 800b26c:	220c      	movs	r2, #12
 800b26e:	490c      	ldr	r1, [pc, #48]	; (800b2a0 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x50>)
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	4a09      	ldr	r2, [pc, #36]	; (800b2a4 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x54>)
 800b280:	4907      	ldr	r1, [pc, #28]	; (800b2a0 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x50>)
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4a05      	ldr	r2, [pc, #20]	; (800b2a8 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x58>)
 800b292:	4904      	ldr	r1, [pc, #16]	; (800b2a4 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x54>)
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	4798      	blx	r3
}
 800b298:	bf00      	nop
 800b29a:	370c      	adds	r7, #12
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd90      	pop	{r4, r7, pc}
 800b2a0:	2000020c 	.word	0x2000020c
 800b2a4:	2000022c 	.word	0x2000022c
 800b2a8:	20000234 	.word	0x20000234

0800b2ac <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 800b2ac:	b590      	push	{r4, r7, lr}
 800b2ae:	b085      	sub	sp, #20
 800b2b0:	af02      	add	r7, sp, #8
 800b2b2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b2bc:	681c      	ldr	r4, [r3, #0]
 800b2be:	2300      	movs	r3, #0
 800b2c0:	9301      	str	r3, [sp, #4]
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	9300      	str	r3, [sp, #0]
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	220d      	movs	r2, #13
 800b2ca:	490c      	ldr	r1, [pc, #48]	; (800b2fc <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x50>)
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4a09      	ldr	r2, [pc, #36]	; (800b300 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x54>)
 800b2dc:	4907      	ldr	r1, [pc, #28]	; (800b2fc <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x50>)
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	4a05      	ldr	r2, [pc, #20]	; (800b304 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x58>)
 800b2ee:	4904      	ldr	r1, [pc, #16]	; (800b300 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x54>)
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	4798      	blx	r3
}
 800b2f4:	bf00      	nop
 800b2f6:	370c      	adds	r7, #12
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd90      	pop	{r4, r7, pc}
 800b2fc:	2000020c 	.word	0x2000020c
 800b300:	2000022c 	.word	0x2000022c
 800b304:	20000234 	.word	0x20000234

0800b308 <_ZN5L6470I8shield_1E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 800b308:	b590      	push	{r4, r7, lr}
 800b30a:	b085      	sub	sp, #20
 800b30c:	af02      	add	r7, sp, #8
 800b30e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b318:	681c      	ldr	r4, [r3, #0]
 800b31a:	2300      	movs	r3, #0
 800b31c:	9301      	str	r3, [sp, #4]
 800b31e:	2300      	movs	r3, #0
 800b320:	9300      	str	r3, [sp, #0]
 800b322:	2300      	movs	r3, #0
 800b324:	220e      	movs	r2, #14
 800b326:	490c      	ldr	r1, [pc, #48]	; (800b358 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x50>)
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	4a09      	ldr	r2, [pc, #36]	; (800b35c <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x54>)
 800b338:	4907      	ldr	r1, [pc, #28]	; (800b358 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x50>)
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4a05      	ldr	r2, [pc, #20]	; (800b360 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x58>)
 800b34a:	4904      	ldr	r1, [pc, #16]	; (800b35c <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x54>)
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	4798      	blx	r3
}
 800b350:	bf00      	nop
 800b352:	370c      	adds	r7, #12
 800b354:	46bd      	mov	sp, r7
 800b356:	bd90      	pop	{r4, r7, pc}
 800b358:	2000020c 	.word	0x2000020c
 800b35c:	2000022c 	.word	0x2000022c
 800b360:	20000234 	.word	0x20000234

0800b364 <_ZN5L6470I8shield_1E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 800b364:	b590      	push	{r4, r7, lr}
 800b366:	b085      	sub	sp, #20
 800b368:	af02      	add	r7, sp, #8
 800b36a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b374:	681c      	ldr	r4, [r3, #0]
 800b376:	2300      	movs	r3, #0
 800b378:	9301      	str	r3, [sp, #4]
 800b37a:	2300      	movs	r3, #0
 800b37c:	9300      	str	r3, [sp, #0]
 800b37e:	2300      	movs	r3, #0
 800b380:	220f      	movs	r2, #15
 800b382:	490c      	ldr	r1, [pc, #48]	; (800b3b4 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x50>)
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	4a09      	ldr	r2, [pc, #36]	; (800b3b8 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x54>)
 800b394:	4907      	ldr	r1, [pc, #28]	; (800b3b4 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x50>)
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	4a05      	ldr	r2, [pc, #20]	; (800b3bc <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x58>)
 800b3a6:	4904      	ldr	r1, [pc, #16]	; (800b3b8 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x54>)
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	4798      	blx	r3
}
 800b3ac:	bf00      	nop
 800b3ae:	370c      	adds	r7, #12
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd90      	pop	{r4, r7, pc}
 800b3b4:	2000020c 	.word	0x2000020c
 800b3b8:	2000022c 	.word	0x2000022c
 800b3bc:	20000234 	.word	0x20000234

0800b3c0 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 800b3c0:	b590      	push	{r4, r7, lr}
 800b3c2:	b085      	sub	sp, #20
 800b3c4:	af02      	add	r7, sp, #8
 800b3c6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b3d0:	681c      	ldr	r4, [r3, #0]
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	9301      	str	r3, [sp, #4]
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	9300      	str	r3, [sp, #0]
 800b3da:	2300      	movs	r3, #0
 800b3dc:	2210      	movs	r2, #16
 800b3de:	490c      	ldr	r1, [pc, #48]	; (800b410 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x50>)
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	4a09      	ldr	r2, [pc, #36]	; (800b414 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x54>)
 800b3f0:	4907      	ldr	r1, [pc, #28]	; (800b410 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x50>)
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4a05      	ldr	r2, [pc, #20]	; (800b418 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x58>)
 800b402:	4904      	ldr	r1, [pc, #16]	; (800b414 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x54>)
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	4798      	blx	r3
}
 800b408:	bf00      	nop
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd90      	pop	{r4, r7, pc}
 800b410:	2000020c 	.word	0x2000020c
 800b414:	2000022c 	.word	0x2000022c
 800b418:	20000234 	.word	0x20000234

0800b41c <_ZN5L6470I8shield_1E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 800b41c:	b590      	push	{r4, r7, lr}
 800b41e:	b085      	sub	sp, #20
 800b420:	af02      	add	r7, sp, #8
 800b422:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b42c:	681c      	ldr	r4, [r3, #0]
 800b42e:	2300      	movs	r3, #0
 800b430:	9301      	str	r3, [sp, #4]
 800b432:	2300      	movs	r3, #0
 800b434:	9300      	str	r3, [sp, #0]
 800b436:	2300      	movs	r3, #0
 800b438:	2211      	movs	r2, #17
 800b43a:	490c      	ldr	r1, [pc, #48]	; (800b46c <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x50>)
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a09      	ldr	r2, [pc, #36]	; (800b470 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x54>)
 800b44c:	4907      	ldr	r1, [pc, #28]	; (800b46c <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x50>)
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4a05      	ldr	r2, [pc, #20]	; (800b474 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x58>)
 800b45e:	4904      	ldr	r1, [pc, #16]	; (800b470 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x54>)
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	4798      	blx	r3
}
 800b464:	bf00      	nop
 800b466:	370c      	adds	r7, #12
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd90      	pop	{r4, r7, pc}
 800b46c:	2000020c 	.word	0x2000020c
 800b470:	2000022c 	.word	0x2000022c
 800b474:	20000234 	.word	0x20000234

0800b478 <_ZN5L6470I8shield_1E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 800b478:	b590      	push	{r4, r7, lr}
 800b47a:	b087      	sub	sp, #28
 800b47c:	af02      	add	r7, sp, #8
 800b47e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b488:	681c      	ldr	r4, [r3, #0]
 800b48a:	2300      	movs	r3, #0
 800b48c:	9301      	str	r3, [sp, #4]
 800b48e:	2300      	movs	r3, #0
 800b490:	9300      	str	r3, [sp, #0]
 800b492:	2300      	movs	r3, #0
 800b494:	2212      	movs	r2, #18
 800b496:	4912      	ldr	r1, [pc, #72]	; (800b4e0 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x68>)
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4a0f      	ldr	r2, [pc, #60]	; (800b4e4 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x6c>)
 800b4a8:	490d      	ldr	r1, [pc, #52]	; (800b4e0 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x68>)
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4a0b      	ldr	r2, [pc, #44]	; (800b4e8 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x70>)
 800b4ba:	490a      	ldr	r1, [pc, #40]	; (800b4e4 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x6c>)
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	2202      	movs	r2, #2
 800b4cc:	4906      	ldr	r1, [pc, #24]	; (800b4e8 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x70>)
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	4798      	blx	r3
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 800b4d6:	89fb      	ldrh	r3, [r7, #14]
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3714      	adds	r7, #20
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd90      	pop	{r4, r7, pc}
 800b4e0:	2000020c 	.word	0x2000020c
 800b4e4:	2000022c 	.word	0x2000022c
 800b4e8:	20000234 	.word	0x20000234

0800b4ec <_ZN5L6470I8shield_1E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 800b4ec:	b590      	push	{r4, r7, lr}
 800b4ee:	b087      	sub	sp, #28
 800b4f0:	af02      	add	r7, sp, #8
 800b4f2:	60f8      	str	r0, [r7, #12]
 800b4f4:	460b      	mov	r3, r1
 800b4f6:	607a      	str	r2, [r7, #4]
 800b4f8:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b502:	681c      	ldr	r4, [r3, #0]
 800b504:	7afa      	ldrb	r2, [r7, #11]
 800b506:	2300      	movs	r3, #0
 800b508:	9301      	str	r3, [sp, #4]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	9300      	str	r3, [sp, #0]
 800b50e:	4613      	mov	r3, r2
 800b510:	2201      	movs	r2, #1
 800b512:	4903      	ldr	r1, [pc, #12]	; (800b520 <_ZN5L6470I8shield_1E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 800b514:	68f8      	ldr	r0, [r7, #12]
 800b516:	47a0      	blx	r4
}
 800b518:	bf00      	nop
 800b51a:	3714      	adds	r7, #20
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd90      	pop	{r4, r7, pc}
 800b520:	2000020c 	.word	0x2000020c

0800b524 <_ZN5L6470I8shield_1E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 800b524:	b590      	push	{r4, r7, lr}
 800b526:	b085      	sub	sp, #20
 800b528:	af02      	add	r7, sp, #8
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	460b      	mov	r3, r1
 800b52e:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b538:	681c      	ldr	r4, [r3, #0]
 800b53a:	78fb      	ldrb	r3, [r7, #3]
 800b53c:	2200      	movs	r2, #0
 800b53e:	9201      	str	r2, [sp, #4]
 800b540:	2200      	movs	r2, #0
 800b542:	9200      	str	r2, [sp, #0]
 800b544:	2202      	movs	r2, #2
 800b546:	4903      	ldr	r1, [pc, #12]	; (800b554 <_ZN5L6470I8shield_1E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	47a0      	blx	r4
}
 800b54c:	bf00      	nop
 800b54e:	370c      	adds	r7, #12
 800b550:	46bd      	mov	sp, r7
 800b552:	bd90      	pop	{r4, r7, pc}
 800b554:	2000020c 	.word	0x2000020c

0800b558 <_ZN5L6470I8shield_1E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800b558:	b590      	push	{r4, r7, lr}
 800b55a:	b087      	sub	sp, #28
 800b55c:	af02      	add	r7, sp, #8
 800b55e:	60f8      	str	r0, [r7, #12]
 800b560:	460b      	mov	r3, r1
 800b562:	607a      	str	r2, [r7, #4]
 800b564:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b56e:	681c      	ldr	r4, [r3, #0]
 800b570:	7afa      	ldrb	r2, [r7, #11]
 800b572:	2300      	movs	r3, #0
 800b574:	9301      	str	r3, [sp, #4]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	9300      	str	r3, [sp, #0]
 800b57a:	4613      	mov	r3, r2
 800b57c:	2203      	movs	r2, #3
 800b57e:	4903      	ldr	r1, [pc, #12]	; (800b58c <_ZN5L6470I8shield_1E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 800b580:	68f8      	ldr	r0, [r7, #12]
 800b582:	47a0      	blx	r4
}
 800b584:	bf00      	nop
 800b586:	3714      	adds	r7, #20
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd90      	pop	{r4, r7, pc}
 800b58c:	2000020c 	.word	0x2000020c

0800b590 <_ZN5L6470I8shield_1E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 800b590:	b590      	push	{r4, r7, lr}
 800b592:	b085      	sub	sp, #20
 800b594:	af02      	add	r7, sp, #8
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	460b      	mov	r3, r1
 800b59a:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b5a4:	681c      	ldr	r4, [r3, #0]
 800b5a6:	78fb      	ldrb	r3, [r7, #3]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	9201      	str	r2, [sp, #4]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	9200      	str	r2, [sp, #0]
 800b5b0:	2204      	movs	r2, #4
 800b5b2:	4903      	ldr	r1, [pc, #12]	; (800b5c0 <_ZN5L6470I8shield_1E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	47a0      	blx	r4
}
 800b5b8:	bf00      	nop
 800b5ba:	370c      	adds	r7, #12
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd90      	pop	{r4, r7, pc}
 800b5c0:	2000020c 	.word	0x2000020c

0800b5c4 <_ZN5L6470I8shield_1E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 800b5c4:	b590      	push	{r4, r7, lr}
 800b5c6:	b087      	sub	sp, #28
 800b5c8:	af02      	add	r7, sp, #8
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	607a      	str	r2, [r7, #4]
 800b5d0:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b5da:	681c      	ldr	r4, [r3, #0]
 800b5dc:	7afa      	ldrb	r2, [r7, #11]
 800b5de:	2300      	movs	r3, #0
 800b5e0:	9301      	str	r3, [sp, #4]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	9300      	str	r3, [sp, #0]
 800b5e6:	4613      	mov	r3, r2
 800b5e8:	2205      	movs	r2, #5
 800b5ea:	4903      	ldr	r1, [pc, #12]	; (800b5f8 <_ZN5L6470I8shield_1E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 800b5ec:	68f8      	ldr	r0, [r7, #12]
 800b5ee:	47a0      	blx	r4
}
 800b5f0:	bf00      	nop
 800b5f2:	3714      	adds	r7, #20
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd90      	pop	{r4, r7, pc}
 800b5f8:	2000020c 	.word	0x2000020c

0800b5fc <_ZN5L6470I8shield_1E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 800b5fc:	b590      	push	{r4, r7, lr}
 800b5fe:	b085      	sub	sp, #20
 800b600:	af02      	add	r7, sp, #8
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b60e:	681c      	ldr	r4, [r3, #0]
 800b610:	2300      	movs	r3, #0
 800b612:	9301      	str	r3, [sp, #4]
 800b614:	2300      	movs	r3, #0
 800b616:	9300      	str	r3, [sp, #0]
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	2206      	movs	r2, #6
 800b61c:	4903      	ldr	r1, [pc, #12]	; (800b62c <_ZN5L6470I8shield_1E17L6470_PrepareGoToEm+0x30>)
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	47a0      	blx	r4
}
 800b622:	bf00      	nop
 800b624:	370c      	adds	r7, #12
 800b626:	46bd      	mov	sp, r7
 800b628:	bd90      	pop	{r4, r7, pc}
 800b62a:	bf00      	nop
 800b62c:	2000020c 	.word	0x2000020c

0800b630 <_ZN5L6470I8shield_1E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 800b630:	b590      	push	{r4, r7, lr}
 800b632:	b087      	sub	sp, #28
 800b634:	af02      	add	r7, sp, #8
 800b636:	60f8      	str	r0, [r7, #12]
 800b638:	460b      	mov	r3, r1
 800b63a:	607a      	str	r2, [r7, #4]
 800b63c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b646:	681c      	ldr	r4, [r3, #0]
 800b648:	7afa      	ldrb	r2, [r7, #11]
 800b64a:	2300      	movs	r3, #0
 800b64c:	9301      	str	r3, [sp, #4]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	9300      	str	r3, [sp, #0]
 800b652:	4613      	mov	r3, r2
 800b654:	2207      	movs	r2, #7
 800b656:	4903      	ldr	r1, [pc, #12]	; (800b664 <_ZN5L6470I8shield_1E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 800b658:	68f8      	ldr	r0, [r7, #12]
 800b65a:	47a0      	blx	r4
}
 800b65c:	bf00      	nop
 800b65e:	3714      	adds	r7, #20
 800b660:	46bd      	mov	sp, r7
 800b662:	bd90      	pop	{r4, r7, pc}
 800b664:	2000020c 	.word	0x2000020c

0800b668 <_ZN5L6470I8shield_1E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800b668:	b590      	push	{r4, r7, lr}
 800b66a:	b087      	sub	sp, #28
 800b66c:	af02      	add	r7, sp, #8
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	607b      	str	r3, [r7, #4]
 800b672:	460b      	mov	r3, r1
 800b674:	72fb      	strb	r3, [r7, #11]
 800b676:	4613      	mov	r3, r2
 800b678:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b682:	681c      	ldr	r4, [r3, #0]
 800b684:	7af9      	ldrb	r1, [r7, #11]
 800b686:	7abb      	ldrb	r3, [r7, #10]
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	9201      	str	r2, [sp, #4]
 800b68c:	9300      	str	r3, [sp, #0]
 800b68e:	460b      	mov	r3, r1
 800b690:	2208      	movs	r2, #8
 800b692:	4903      	ldr	r1, [pc, #12]	; (800b6a0 <_ZN5L6470I8shield_1E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 800b694:	68f8      	ldr	r0, [r7, #12]
 800b696:	47a0      	blx	r4
}
 800b698:	bf00      	nop
 800b69a:	3714      	adds	r7, #20
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd90      	pop	{r4, r7, pc}
 800b6a0:	2000020c 	.word	0x2000020c

0800b6a4 <_ZN5L6470I8shield_1E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 800b6a4:	b590      	push	{r4, r7, lr}
 800b6a6:	b085      	sub	sp, #20
 800b6a8:	af02      	add	r7, sp, #8
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	460b      	mov	r3, r1
 800b6ae:	70fb      	strb	r3, [r7, #3]
 800b6b0:	4613      	mov	r3, r2
 800b6b2:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b6bc:	681c      	ldr	r4, [r3, #0]
 800b6be:	78fa      	ldrb	r2, [r7, #3]
 800b6c0:	78bb      	ldrb	r3, [r7, #2]
 800b6c2:	2100      	movs	r1, #0
 800b6c4:	9101      	str	r1, [sp, #4]
 800b6c6:	9300      	str	r3, [sp, #0]
 800b6c8:	4613      	mov	r3, r2
 800b6ca:	2209      	movs	r2, #9
 800b6cc:	4903      	ldr	r1, [pc, #12]	; (800b6dc <_ZN5L6470I8shield_1E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	47a0      	blx	r4
}
 800b6d2:	bf00      	nop
 800b6d4:	370c      	adds	r7, #12
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd90      	pop	{r4, r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	2000020c 	.word	0x2000020c

0800b6e0 <_ZN5L6470I8shield_1E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 800b6e0:	b590      	push	{r4, r7, lr}
 800b6e2:	b085      	sub	sp, #20
 800b6e4:	af02      	add	r7, sp, #8
 800b6e6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b6f0:	681c      	ldr	r4, [r3, #0]
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	9301      	str	r3, [sp, #4]
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	9300      	str	r3, [sp, #0]
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	220a      	movs	r2, #10
 800b6fe:	4903      	ldr	r1, [pc, #12]	; (800b70c <_ZN5L6470I8shield_1E19L6470_PrepareGoHomeEv+0x2c>)
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	47a0      	blx	r4
}
 800b704:	bf00      	nop
 800b706:	370c      	adds	r7, #12
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd90      	pop	{r4, r7, pc}
 800b70c:	2000020c 	.word	0x2000020c

0800b710 <_ZN5L6470I8shield_1E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 800b710:	b590      	push	{r4, r7, lr}
 800b712:	b085      	sub	sp, #20
 800b714:	af02      	add	r7, sp, #8
 800b716:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b720:	681c      	ldr	r4, [r3, #0]
 800b722:	2300      	movs	r3, #0
 800b724:	9301      	str	r3, [sp, #4]
 800b726:	2300      	movs	r3, #0
 800b728:	9300      	str	r3, [sp, #0]
 800b72a:	2300      	movs	r3, #0
 800b72c:	220b      	movs	r2, #11
 800b72e:	4903      	ldr	r1, [pc, #12]	; (800b73c <_ZN5L6470I8shield_1E19L6470_PrepareGoMarkEv+0x2c>)
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	47a0      	blx	r4
}
 800b734:	bf00      	nop
 800b736:	370c      	adds	r7, #12
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd90      	pop	{r4, r7, pc}
 800b73c:	2000020c 	.word	0x2000020c

0800b740 <_ZN5L6470I8shield_1E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 800b740:	b590      	push	{r4, r7, lr}
 800b742:	b085      	sub	sp, #20
 800b744:	af02      	add	r7, sp, #8
 800b746:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b750:	681c      	ldr	r4, [r3, #0]
 800b752:	2300      	movs	r3, #0
 800b754:	9301      	str	r3, [sp, #4]
 800b756:	2300      	movs	r3, #0
 800b758:	9300      	str	r3, [sp, #0]
 800b75a:	2300      	movs	r3, #0
 800b75c:	220c      	movs	r2, #12
 800b75e:	4903      	ldr	r1, [pc, #12]	; (800b76c <_ZN5L6470I8shield_1E21L6470_PrepareResetPosEv+0x2c>)
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	47a0      	blx	r4
}
 800b764:	bf00      	nop
 800b766:	370c      	adds	r7, #12
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd90      	pop	{r4, r7, pc}
 800b76c:	2000020c 	.word	0x2000020c

0800b770 <_ZN5L6470I8shield_1E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 800b770:	b590      	push	{r4, r7, lr}
 800b772:	b085      	sub	sp, #20
 800b774:	af02      	add	r7, sp, #8
 800b776:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b780:	681c      	ldr	r4, [r3, #0]
 800b782:	2300      	movs	r3, #0
 800b784:	9301      	str	r3, [sp, #4]
 800b786:	2300      	movs	r3, #0
 800b788:	9300      	str	r3, [sp, #0]
 800b78a:	2300      	movs	r3, #0
 800b78c:	220d      	movs	r2, #13
 800b78e:	4903      	ldr	r1, [pc, #12]	; (800b79c <_ZN5L6470I8shield_1E24L6470_PrepareResetDeviceEv+0x2c>)
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	47a0      	blx	r4
}
 800b794:	bf00      	nop
 800b796:	370c      	adds	r7, #12
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd90      	pop	{r4, r7, pc}
 800b79c:	2000020c 	.word	0x2000020c

0800b7a0 <_ZN5L6470I8shield_1E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 800b7a0:	b590      	push	{r4, r7, lr}
 800b7a2:	b085      	sub	sp, #20
 800b7a4:	af02      	add	r7, sp, #8
 800b7a6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b7b0:	681c      	ldr	r4, [r3, #0]
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	9301      	str	r3, [sp, #4]
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	9300      	str	r3, [sp, #0]
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	220e      	movs	r2, #14
 800b7be:	4903      	ldr	r1, [pc, #12]	; (800b7cc <_ZN5L6470I8shield_1E21L6470_PrepareSoftStopEv+0x2c>)
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	47a0      	blx	r4
}
 800b7c4:	bf00      	nop
 800b7c6:	370c      	adds	r7, #12
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd90      	pop	{r4, r7, pc}
 800b7cc:	2000020c 	.word	0x2000020c

0800b7d0 <_ZN5L6470I8shield_1E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 800b7d0:	b590      	push	{r4, r7, lr}
 800b7d2:	b085      	sub	sp, #20
 800b7d4:	af02      	add	r7, sp, #8
 800b7d6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b7e0:	681c      	ldr	r4, [r3, #0]
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	9301      	str	r3, [sp, #4]
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	9300      	str	r3, [sp, #0]
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	220f      	movs	r2, #15
 800b7ee:	4903      	ldr	r1, [pc, #12]	; (800b7fc <_ZN5L6470I8shield_1E21L6470_PrepareHardStopEv+0x2c>)
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	47a0      	blx	r4
}
 800b7f4:	bf00      	nop
 800b7f6:	370c      	adds	r7, #12
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd90      	pop	{r4, r7, pc}
 800b7fc:	2000020c 	.word	0x2000020c

0800b800 <_ZN5L6470I8shield_1E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 800b800:	b590      	push	{r4, r7, lr}
 800b802:	b085      	sub	sp, #20
 800b804:	af02      	add	r7, sp, #8
 800b806:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b810:	681c      	ldr	r4, [r3, #0]
 800b812:	2300      	movs	r3, #0
 800b814:	9301      	str	r3, [sp, #4]
 800b816:	2300      	movs	r3, #0
 800b818:	9300      	str	r3, [sp, #0]
 800b81a:	2300      	movs	r3, #0
 800b81c:	2210      	movs	r2, #16
 800b81e:	4903      	ldr	r1, [pc, #12]	; (800b82c <_ZN5L6470I8shield_1E20L6470_PrepareSoftHiZEv+0x2c>)
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	47a0      	blx	r4
}
 800b824:	bf00      	nop
 800b826:	370c      	adds	r7, #12
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd90      	pop	{r4, r7, pc}
 800b82c:	2000020c 	.word	0x2000020c

0800b830 <_ZN5L6470I8shield_1E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 800b830:	b590      	push	{r4, r7, lr}
 800b832:	b085      	sub	sp, #20
 800b834:	af02      	add	r7, sp, #8
 800b836:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b840:	681c      	ldr	r4, [r3, #0]
 800b842:	2300      	movs	r3, #0
 800b844:	9301      	str	r3, [sp, #4]
 800b846:	2300      	movs	r3, #0
 800b848:	9300      	str	r3, [sp, #0]
 800b84a:	2300      	movs	r3, #0
 800b84c:	2211      	movs	r2, #17
 800b84e:	4903      	ldr	r1, [pc, #12]	; (800b85c <_ZN5L6470I8shield_1E20L6470_PrepareHardHiZEv+0x2c>)
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	47a0      	blx	r4
}
 800b854:	bf00      	nop
 800b856:	370c      	adds	r7, #12
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd90      	pop	{r4, r7, pc}
 800b85c:	2000020c 	.word	0x2000020c

0800b860 <_ZN5L6470I8shield_1E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 800b860:	b590      	push	{r4, r7, lr}
 800b862:	b085      	sub	sp, #20
 800b864:	af02      	add	r7, sp, #8
 800b866:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b870:	681c      	ldr	r4, [r3, #0]
 800b872:	2300      	movs	r3, #0
 800b874:	9301      	str	r3, [sp, #4]
 800b876:	2300      	movs	r3, #0
 800b878:	9300      	str	r3, [sp, #0]
 800b87a:	2300      	movs	r3, #0
 800b87c:	2212      	movs	r2, #18
 800b87e:	4903      	ldr	r1, [pc, #12]	; (800b88c <_ZN5L6470I8shield_1E22L6470_PrepareGetStatusEv+0x2c>)
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	47a0      	blx	r4
}
 800b884:	bf00      	nop
 800b886:	370c      	adds	r7, #12
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd90      	pop	{r4, r7, pc}
 800b88c:	2000020c 	.word	0x2000020c

0800b890 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 800b890:	b580      	push	{r7, lr}
 800b892:	b082      	sub	sp, #8
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4a09      	ldr	r2, [pc, #36]	; (800b8c8 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 800b8a4:	4909      	ldr	r1, [pc, #36]	; (800b8cc <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	4a06      	ldr	r2, [pc, #24]	; (800b8d0 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 800b8b6:	4904      	ldr	r1, [pc, #16]	; (800b8c8 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 800b8bc:	4b04      	ldr	r3, [pc, #16]	; (800b8d0 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3708      	adds	r7, #8
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	2000022c 	.word	0x2000022c
 800b8cc:	2000020c 	.word	0x2000020c
 800b8d0:	20000234 	.word	0x20000234

0800b8d4 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 800b8d4:	b590      	push	{r4, r7, lr}
 800b8d6:	b089      	sub	sp, #36	; 0x24
 800b8d8:	af02      	add	r7, sp, #8
 800b8da:	60f8      	str	r0, [r7, #12]
 800b8dc:	60b9      	str	r1, [r7, #8]
 800b8de:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 800b8e0:	4b17      	ldr	r3, [pc, #92]	; (800b940 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	75fb      	strb	r3, [r7, #23]
 800b8ea:	e020      	b.n	800b92e <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800b8f4:	681c      	ldr	r4, [r3, #0]
 800b8f6:	7dfb      	ldrb	r3, [r7, #23]
 800b8f8:	005b      	lsls	r3, r3, #1
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	1899      	adds	r1, r3, r2
 800b900:	7dfb      	ldrb	r3, [r7, #23]
 800b902:	005b      	lsls	r3, r3, #1
 800b904:	461a      	mov	r2, r3
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	441a      	add	r2, r3
 800b90a:	230a      	movs	r3, #10
 800b90c:	9300      	str	r3, [sp, #0]
 800b90e:	2302      	movs	r3, #2
 800b910:	68f8      	ldr	r0, [r7, #12]
 800b912:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 800b914:	2300      	movs	r3, #0
 800b916:	75bb      	strb	r3, [r7, #22]
 800b918:	e003      	b.n	800b922 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x4e>
 800b91a:	bf00      	nop
 800b91c:	7dbb      	ldrb	r3, [r7, #22]
 800b91e:	3301      	adds	r3, #1
 800b920:	75bb      	strb	r3, [r7, #22]
 800b922:	7dbb      	ldrb	r3, [r7, #22]
 800b924:	2b7c      	cmp	r3, #124	; 0x7c
 800b926:	d9f8      	bls.n	800b91a <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 800b928:	7dfb      	ldrb	r3, [r7, #23]
 800b92a:	3301      	adds	r3, #1
 800b92c:	75fb      	strb	r3, [r7, #23]
 800b92e:	7dfb      	ldrb	r3, [r7, #23]
 800b930:	2b03      	cmp	r3, #3
 800b932:	d9db      	bls.n	800b8ec <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 800b934:	bf00      	nop
}
 800b936:	bf00      	nop
 800b938:	371c      	adds	r7, #28
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd90      	pop	{r4, r7, pc}
 800b93e:	bf00      	nop
 800b940:	20000209 	.word	0x20000209

0800b944 <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 800b944:	b480      	push	{r7}
 800b946:	b087      	sub	sp, #28
 800b948:	af00      	add	r7, sp, #0
 800b94a:	60f8      	str	r0, [r7, #12]
 800b94c:	60b9      	str	r1, [r7, #8]
 800b94e:	4613      	mov	r3, r2
 800b950:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 800b952:	2300      	movs	r3, #0
 800b954:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 800b956:	2301      	movs	r3, #1
 800b958:	74fb      	strb	r3, [r7, #19]
 800b95a:	e016      	b.n	800b98a <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 800b95c:	7cfb      	ldrb	r3, [r7, #19]
 800b95e:	005b      	lsls	r3, r3, #1
 800b960:	461a      	mov	r2, r3
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	7f1b      	ldrb	r3, [r3, #28]
 800b966:	4413      	add	r3, r2
 800b968:	68ba      	ldr	r2, [r7, #8]
 800b96a:	4413      	add	r3, r2
 800b96c:	781b      	ldrb	r3, [r3, #0]
 800b96e:	4619      	mov	r1, r3
 800b970:	79fa      	ldrb	r2, [r7, #7]
 800b972:	7cfb      	ldrb	r3, [r7, #19]
 800b974:	1ad3      	subs	r3, r2, r3
 800b976:	00db      	lsls	r3, r3, #3
 800b978:	fa01 f303 	lsl.w	r3, r1, r3
 800b97c:	461a      	mov	r2, r3
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	4313      	orrs	r3, r2
 800b982:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 800b984:	7cfb      	ldrb	r3, [r7, #19]
 800b986:	3301      	adds	r3, #1
 800b988:	74fb      	strb	r3, [r7, #19]
 800b98a:	7cfb      	ldrb	r3, [r7, #19]
 800b98c:	2b03      	cmp	r3, #3
 800b98e:	d9e5      	bls.n	800b95c <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 800b990:	697b      	ldr	r3, [r7, #20]
}
 800b992:	4618      	mov	r0, r3
 800b994:	371c      	adds	r7, #28
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr
	...

0800b9a0 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	2118      	movs	r1, #24
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	4798      	blx	r3
 800b9c0:	4602      	mov	r2, r0
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9c6:	b292      	uxth	r2, r2
 800b9c8:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 800b9ca:	78fb      	ldrb	r3, [r7, #3]
 800b9cc:	2b0e      	cmp	r3, #14
 800b9ce:	f200 8099 	bhi.w	800bb04 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
 800b9d2:	a201      	add	r2, pc, #4	; (adr r2, 800b9d8 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x38>)
 800b9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9d8:	0800ba15 	.word	0x0800ba15
 800b9dc:	0800ba25 	.word	0x0800ba25
 800b9e0:	0800ba35 	.word	0x0800ba35
 800b9e4:	0800ba45 	.word	0x0800ba45
 800b9e8:	0800ba55 	.word	0x0800ba55
 800b9ec:	0800ba65 	.word	0x0800ba65
 800b9f0:	0800ba75 	.word	0x0800ba75
 800b9f4:	0800ba85 	.word	0x0800ba85
 800b9f8:	0800ba95 	.word	0x0800ba95
 800b9fc:	0800baa5 	.word	0x0800baa5
 800ba00:	0800bab5 	.word	0x0800bab5
 800ba04:	0800bac5 	.word	0x0800bac5
 800ba08:	0800bad5 	.word	0x0800bad5
 800ba0c:	0800bae5 	.word	0x0800bae5
 800ba10:	0800baf5 	.word	0x0800baf5
      state = pL6470_StatusRegister->HiZ;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ba1e:	b2db      	uxtb	r3, r3
 800ba20:	73fb      	strb	r3, [r7, #15]
      break;
 800ba22:	e06f      	b.n	800bb04 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba28:	781b      	ldrb	r3, [r3, #0]
 800ba2a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ba2e:	b2db      	uxtb	r3, r3
 800ba30:	73fb      	strb	r3, [r7, #15]
      break;
 800ba32:	e067      	b.n	800bb04 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ba3e:	b2db      	uxtb	r3, r3
 800ba40:	73fb      	strb	r3, [r7, #15]
      break;
 800ba42:	e05f      	b.n	800bb04 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800ba4e:	b2db      	uxtb	r3, r3
 800ba50:	73fb      	strb	r3, [r7, #15]
      break;
 800ba52:	e057      	b.n	800bb04 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba58:	781b      	ldrb	r3, [r3, #0]
 800ba5a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ba5e:	b2db      	uxtb	r3, r3
 800ba60:	73fb      	strb	r3, [r7, #15]
      break;
 800ba62:	e04f      	b.n	800bb04 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800ba6e:	b2db      	uxtb	r3, r3
 800ba70:	73fb      	strb	r3, [r7, #15]
      break;
 800ba72:	e047      	b.n	800bb04 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba78:	781b      	ldrb	r3, [r3, #0]
 800ba7a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ba7e:	b2db      	uxtb	r3, r3
 800ba80:	73fb      	strb	r3, [r7, #15]
      break;
 800ba82:	e03f      	b.n	800bb04 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba88:	785b      	ldrb	r3, [r3, #1]
 800ba8a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ba8e:	b2db      	uxtb	r3, r3
 800ba90:	73fb      	strb	r3, [r7, #15]
      break;
 800ba92:	e037      	b.n	800bb04 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba98:	785b      	ldrb	r3, [r3, #1]
 800ba9a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ba9e:	b2db      	uxtb	r3, r3
 800baa0:	73fb      	strb	r3, [r7, #15]
      break;
 800baa2:	e02f      	b.n	800bb04 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baa8:	785b      	ldrb	r3, [r3, #1]
 800baaa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800baae:	b2db      	uxtb	r3, r3
 800bab0:	73fb      	strb	r3, [r7, #15]
      break;
 800bab2:	e027      	b.n	800bb04 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bab8:	785b      	ldrb	r3, [r3, #1]
 800baba:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800babe:	b2db      	uxtb	r3, r3
 800bac0:	73fb      	strb	r3, [r7, #15]
      break;
 800bac2:	e01f      	b.n	800bb04 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bac8:	785b      	ldrb	r3, [r3, #1]
 800baca:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800bace:	b2db      	uxtb	r3, r3
 800bad0:	73fb      	strb	r3, [r7, #15]
      break;
 800bad2:	e017      	b.n	800bb04 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bad8:	785b      	ldrb	r3, [r3, #1]
 800bada:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800bade:	b2db      	uxtb	r3, r3
 800bae0:	73fb      	strb	r3, [r7, #15]
      break;
 800bae2:	e00f      	b.n	800bb04 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bae8:	785b      	ldrb	r3, [r3, #1]
 800baea:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800baee:	b2db      	uxtb	r3, r3
 800baf0:	73fb      	strb	r3, [r7, #15]
      break;
 800baf2:	e007      	b.n	800bb04 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baf8:	785b      	ldrb	r3, [r3, #1]
 800bafa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800bafe:	b2db      	uxtb	r3, r3
 800bb00:	73fb      	strb	r3, [r7, #15]
      break;
 800bb02:	bf00      	nop
  return state;
 800bb04:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3710      	adds	r7, #16
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop

0800bb10 <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 800bb10:	b480      	push	{r7}
 800bb12:	b083      	sub	sp, #12
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
 800bb18:	460b      	mov	r3, r1
 800bb1a:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 800bb1c:	78fb      	ldrb	r3, [r7, #3]
 800bb1e:	2b18      	cmp	r3, #24
 800bb20:	d809      	bhi.n	800bb36 <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6a19      	ldr	r1, [r3, #32]
 800bb26:	78fa      	ldrb	r2, [r7, #3]
 800bb28:	4613      	mov	r3, r2
 800bb2a:	009b      	lsls	r3, r3, #2
 800bb2c:	4413      	add	r3, r2
 800bb2e:	009b      	lsls	r3, r3, #2
 800bb30:	440b      	add	r3, r1
 800bb32:	3301      	adds	r3, #1
 800bb34:	e000      	b.n	800bb38 <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 800bb36:	2300      	movs	r3, #0
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	370c      	adds	r7, #12
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr

0800bb44 <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 800bb44:	b480      	push	{r7}
 800bb46:	b085      	sub	sp, #20
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
 800bb4c:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 800bb4e:	2300      	movs	r3, #0
 800bb50:	73fb      	strb	r3, [r7, #15]
 800bb52:	e01a      	b.n	800bb8a <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 800bb54:	7bfb      	ldrb	r3, [r7, #15]
 800bb56:	011b      	lsls	r3, r3, #4
 800bb58:	683a      	ldr	r2, [r7, #0]
 800bb5a:	4413      	add	r3, r2
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 800bb60:	7bfb      	ldrb	r3, [r7, #15]
 800bb62:	011b      	lsls	r3, r3, #4
 800bb64:	683a      	ldr	r2, [r7, #0]
 800bb66:	4413      	add	r3, r2
 800bb68:	2200      	movs	r2, #0
 800bb6a:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 800bb6c:	7bfb      	ldrb	r3, [r7, #15]
 800bb6e:	011b      	lsls	r3, r3, #4
 800bb70:	683a      	ldr	r2, [r7, #0]
 800bb72:	4413      	add	r3, r2
 800bb74:	2200      	movs	r2, #0
 800bb76:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 800bb78:	7bfb      	ldrb	r3, [r7, #15]
 800bb7a:	011b      	lsls	r3, r3, #4
 800bb7c:	683a      	ldr	r2, [r7, #0]
 800bb7e:	4413      	add	r3, r2
 800bb80:	2200      	movs	r2, #0
 800bb82:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 800bb84:	7bfb      	ldrb	r3, [r7, #15]
 800bb86:	3301      	adds	r3, #1
 800bb88:	73fb      	strb	r3, [r7, #15]
 800bb8a:	7bfb      	ldrb	r3, [r7, #15]
 800bb8c:	2b01      	cmp	r3, #1
 800bb8e:	d9e1      	bls.n	800bb54 <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 800bb90:	bf00      	nop
 800bb92:	bf00      	nop
 800bb94:	3714      	adds	r7, #20
 800bb96:	46bd      	mov	sp, r7
 800bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9c:	4770      	bx	lr

0800bb9e <_ZN5L6470I8shield_1E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 800bb9e:	b480      	push	{r7}
 800bba0:	b085      	sub	sp, #20
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	60f8      	str	r0, [r7, #12]
 800bba6:	60b9      	str	r1, [r7, #8]
 800bba8:	603b      	str	r3, [r7, #0]
 800bbaa:	4613      	mov	r3, r2
 800bbac:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	7f1b      	ldrb	r3, [r3, #28]
 800bbb2:	011b      	lsls	r3, r3, #4
 800bbb4:	68ba      	ldr	r2, [r7, #8]
 800bbb6:	4413      	add	r3, r2
 800bbb8:	79fa      	ldrb	r2, [r7, #7]
 800bbba:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	7f1b      	ldrb	r3, [r3, #28]
 800bbc0:	011b      	lsls	r3, r3, #4
 800bbc2:	68ba      	ldr	r2, [r7, #8]
 800bbc4:	4413      	add	r3, r2
 800bbc6:	683a      	ldr	r2, [r7, #0]
 800bbc8:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	7f1b      	ldrb	r3, [r3, #28]
 800bbce:	011b      	lsls	r3, r3, #4
 800bbd0:	68ba      	ldr	r2, [r7, #8]
 800bbd2:	4413      	add	r3, r2
 800bbd4:	69ba      	ldr	r2, [r7, #24]
 800bbd6:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	7f1b      	ldrb	r3, [r3, #28]
 800bbdc:	011b      	lsls	r3, r3, #4
 800bbde:	68ba      	ldr	r2, [r7, #8]
 800bbe0:	4413      	add	r3, r2
 800bbe2:	69fa      	ldr	r2, [r7, #28]
 800bbe4:	60da      	str	r2, [r3, #12]
}
 800bbe6:	bf00      	nop
 800bbe8:	3714      	adds	r7, #20
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr
	...

0800bbf4 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 800bbf4:	b590      	push	{r4, r7, lr}
 800bbf6:	b087      	sub	sp, #28
 800bbf8:	af02      	add	r7, sp, #8
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	60b9      	str	r1, [r7, #8]
 800bbfe:	603b      	str	r3, [r7, #0]
 800bc00:	4613      	mov	r3, r2
 800bc02:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 800bc04:	4b10      	ldr	r3, [pc, #64]	; (800bc48 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d10a      	bne.n	800bc22 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800bc0c:	4b0e      	ldr	r3, [pc, #56]	; (800bc48 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 800bc0e:	2201      	movs	r2, #1
 800bc10:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	68b9      	ldr	r1, [r7, #8]
 800bc1e:	68f8      	ldr	r0, [r7, #12]
 800bc20:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f503 7311 	add.w	r3, r3, #580	; 0x244
 800bc2a:	681c      	ldr	r4, [r3, #0]
 800bc2c:	79fa      	ldrb	r2, [r7, #7]
 800bc2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc30:	9301      	str	r3, [sp, #4]
 800bc32:	6a3b      	ldr	r3, [r7, #32]
 800bc34:	9300      	str	r3, [sp, #0]
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	68b9      	ldr	r1, [r7, #8]
 800bc3a:	68f8      	ldr	r0, [r7, #12]
 800bc3c:	47a0      	blx	r4
}
 800bc3e:	bf00      	nop
 800bc40:	3714      	adds	r7, #20
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd90      	pop	{r4, r7, pc}
 800bc46:	bf00      	nop
 800bc48:	20000209 	.word	0x20000209

0800bc4c <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 800bc4c:	b480      	push	{r7}
 800bc4e:	b087      	sub	sp, #28
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	60f8      	str	r0, [r7, #12]
 800bc54:	60b9      	str	r1, [r7, #8]
 800bc56:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	75bb      	strb	r3, [r7, #22]
 800bc60:	e013      	b.n	800bc8a <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800bc62:	2300      	movs	r3, #0
 800bc64:	75fb      	strb	r3, [r7, #23]
 800bc66:	e00a      	b.n	800bc7e <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 800bc68:	7d7b      	ldrb	r3, [r7, #21]
 800bc6a:	1c5a      	adds	r2, r3, #1
 800bc6c:	757a      	strb	r2, [r7, #21]
 800bc6e:	461a      	mov	r2, r3
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	4413      	add	r3, r2
 800bc74:	2200      	movs	r2, #0
 800bc76:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800bc78:	7dfb      	ldrb	r3, [r7, #23]
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	75fb      	strb	r3, [r7, #23]
 800bc7e:	7dfb      	ldrb	r3, [r7, #23]
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	d9f1      	bls.n	800bc68 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800bc84:	7dbb      	ldrb	r3, [r7, #22]
 800bc86:	3301      	adds	r3, #1
 800bc88:	75bb      	strb	r3, [r7, #22]
 800bc8a:	7dbb      	ldrb	r3, [r7, #22]
 800bc8c:	2b03      	cmp	r3, #3
 800bc8e:	d9e8      	bls.n	800bc62 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800bc90:	2300      	movs	r3, #0
 800bc92:	75fb      	strb	r3, [r7, #23]
 800bc94:	e1f1      	b.n	800c07a <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc9a:	7dfb      	ldrb	r3, [r7, #23]
 800bc9c:	011b      	lsls	r3, r3, #4
 800bc9e:	68b9      	ldr	r1, [r7, #8]
 800bca0:	440b      	add	r3, r1
 800bca2:	781b      	ldrb	r3, [r3, #0]
 800bca4:	4619      	mov	r1, r3
 800bca6:	460b      	mov	r3, r1
 800bca8:	00db      	lsls	r3, r3, #3
 800bcaa:	1a5b      	subs	r3, r3, r1
 800bcac:	005b      	lsls	r3, r3, #1
 800bcae:	441a      	add	r2, r3
 800bcb0:	7dfb      	ldrb	r3, [r7, #23]
 800bcb2:	6879      	ldr	r1, [r7, #4]
 800bcb4:	440b      	add	r3, r1
 800bcb6:	7b12      	ldrb	r2, [r2, #12]
 800bcb8:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 800bcba:	7dfb      	ldrb	r3, [r7, #23]
 800bcbc:	011b      	lsls	r3, r3, #4
 800bcbe:	68ba      	ldr	r2, [r7, #8]
 800bcc0:	4413      	add	r3, r2
 800bcc2:	781b      	ldrb	r3, [r3, #0]
 800bcc4:	2b12      	cmp	r3, #18
 800bcc6:	f200 81d5 	bhi.w	800c074 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 800bcca:	a201      	add	r2, pc, #4	; (adr r2, 800bcd0 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 800bccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcd0:	0800c075 	.word	0x0800c075
 800bcd4:	0800bd1d 	.word	0x0800bd1d
 800bcd8:	0800bda5 	.word	0x0800bda5
 800bcdc:	0800bdd5 	.word	0x0800bdd5
 800bce0:	0800be3d 	.word	0x0800be3d
 800bce4:	0800be6b 	.word	0x0800be6b
 800bce8:	0800bed3 	.word	0x0800bed3
 800bcec:	0800bf0f 	.word	0x0800bf0f
 800bcf0:	0800bf77 	.word	0x0800bf77
 800bcf4:	0800c013 	.word	0x0800c013
 800bcf8:	0800c075 	.word	0x0800c075
 800bcfc:	0800c075 	.word	0x0800c075
 800bd00:	0800c075 	.word	0x0800c075
 800bd04:	0800c075 	.word	0x0800c075
 800bd08:	0800c075 	.word	0x0800c075
 800bd0c:	0800c075 	.word	0x0800c075
 800bd10:	0800c075 	.word	0x0800c075
 800bd14:	0800c075 	.word	0x0800c075
 800bd18:	0800c075 	.word	0x0800c075
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 800bd1c:	7dfb      	ldrb	r3, [r7, #23]
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	4413      	add	r3, r2
 800bd22:	7819      	ldrb	r1, [r3, #0]
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	6a18      	ldr	r0, [r3, #32]
 800bd28:	7dfb      	ldrb	r3, [r7, #23]
 800bd2a:	011b      	lsls	r3, r3, #4
 800bd2c:	68ba      	ldr	r2, [r7, #8]
 800bd2e:	4413      	add	r3, r2
 800bd30:	685a      	ldr	r2, [r3, #4]
 800bd32:	4613      	mov	r3, r2
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	4413      	add	r3, r2
 800bd38:	009b      	lsls	r3, r3, #2
 800bd3a:	4403      	add	r3, r0
 800bd3c:	781a      	ldrb	r2, [r3, #0]
 800bd3e:	7dfb      	ldrb	r3, [r7, #23]
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	4403      	add	r3, r0
 800bd44:	430a      	orrs	r2, r1
 800bd46:	b2d2      	uxtb	r2, r2
 800bd48:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	6a19      	ldr	r1, [r3, #32]
 800bd4e:	7dfb      	ldrb	r3, [r7, #23]
 800bd50:	011b      	lsls	r3, r3, #4
 800bd52:	68ba      	ldr	r2, [r7, #8]
 800bd54:	4413      	add	r3, r2
 800bd56:	685a      	ldr	r2, [r3, #4]
 800bd58:	4613      	mov	r3, r2
 800bd5a:	009b      	lsls	r3, r3, #2
 800bd5c:	4413      	add	r3, r2
 800bd5e:	009b      	lsls	r3, r3, #2
 800bd60:	440b      	add	r3, r1
 800bd62:	7b9b      	ldrb	r3, [r3, #14]
 800bd64:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 800bd66:	2301      	movs	r3, #1
 800bd68:	75bb      	strb	r3, [r7, #22]
 800bd6a:	e016      	b.n	800bd9a <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 800bd6c:	7dfb      	ldrb	r3, [r7, #23]
 800bd6e:	011b      	lsls	r3, r3, #4
 800bd70:	68ba      	ldr	r2, [r7, #8]
 800bd72:	4413      	add	r3, r2
 800bd74:	689a      	ldr	r2, [r3, #8]
 800bd76:	7d39      	ldrb	r1, [r7, #20]
 800bd78:	7dbb      	ldrb	r3, [r7, #22]
 800bd7a:	1acb      	subs	r3, r1, r3
 800bd7c:	00db      	lsls	r3, r3, #3
 800bd7e:	fa22 f103 	lsr.w	r1, r2, r3
 800bd82:	7dbb      	ldrb	r3, [r7, #22]
 800bd84:	005a      	lsls	r2, r3, #1
 800bd86:	7dfb      	ldrb	r3, [r7, #23]
 800bd88:	4413      	add	r3, r2
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	4413      	add	r3, r2
 800bd90:	b2ca      	uxtb	r2, r1
 800bd92:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 800bd94:	7dbb      	ldrb	r3, [r7, #22]
 800bd96:	3301      	adds	r3, #1
 800bd98:	75bb      	strb	r3, [r7, #22]
 800bd9a:	7d3a      	ldrb	r2, [r7, #20]
 800bd9c:	7dbb      	ldrb	r3, [r7, #22]
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d2e4      	bcs.n	800bd6c <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 800bda2:	e167      	b.n	800c074 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 800bda4:	7dfb      	ldrb	r3, [r7, #23]
 800bda6:	687a      	ldr	r2, [r7, #4]
 800bda8:	4413      	add	r3, r2
 800bdaa:	7819      	ldrb	r1, [r3, #0]
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	6a18      	ldr	r0, [r3, #32]
 800bdb0:	7dfb      	ldrb	r3, [r7, #23]
 800bdb2:	011b      	lsls	r3, r3, #4
 800bdb4:	68ba      	ldr	r2, [r7, #8]
 800bdb6:	4413      	add	r3, r2
 800bdb8:	685a      	ldr	r2, [r3, #4]
 800bdba:	4613      	mov	r3, r2
 800bdbc:	009b      	lsls	r3, r3, #2
 800bdbe:	4413      	add	r3, r2
 800bdc0:	009b      	lsls	r3, r3, #2
 800bdc2:	4403      	add	r3, r0
 800bdc4:	781a      	ldrb	r2, [r3, #0]
 800bdc6:	7dfb      	ldrb	r3, [r7, #23]
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	4403      	add	r3, r0
 800bdcc:	430a      	orrs	r2, r1
 800bdce:	b2d2      	uxtb	r2, r2
 800bdd0:	701a      	strb	r2, [r3, #0]
      break;
 800bdd2:	e14f      	b.n	800c074 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800bdd4:	7dfb      	ldrb	r3, [r7, #23]
 800bdd6:	687a      	ldr	r2, [r7, #4]
 800bdd8:	4413      	add	r3, r2
 800bdda:	7819      	ldrb	r1, [r3, #0]
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800bde0:	7dfb      	ldrb	r3, [r7, #23]
 800bde2:	011b      	lsls	r3, r3, #4
 800bde4:	68ba      	ldr	r2, [r7, #8]
 800bde6:	4413      	add	r3, r2
 800bde8:	685a      	ldr	r2, [r3, #4]
 800bdea:	4613      	mov	r3, r2
 800bdec:	00db      	lsls	r3, r3, #3
 800bdee:	4413      	add	r3, r2
 800bdf0:	4403      	add	r3, r0
 800bdf2:	7a1a      	ldrb	r2, [r3, #8]
 800bdf4:	7dfb      	ldrb	r3, [r7, #23]
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	4403      	add	r3, r0
 800bdfa:	430a      	orrs	r2, r1
 800bdfc:	b2d2      	uxtb	r2, r2
 800bdfe:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800be00:	2301      	movs	r3, #1
 800be02:	75bb      	strb	r3, [r7, #22]
 800be04:	e016      	b.n	800be34 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800be06:	7dfb      	ldrb	r3, [r7, #23]
 800be08:	011b      	lsls	r3, r3, #4
 800be0a:	68ba      	ldr	r2, [r7, #8]
 800be0c:	4413      	add	r3, r2
 800be0e:	689a      	ldr	r2, [r3, #8]
 800be10:	7dbb      	ldrb	r3, [r7, #22]
 800be12:	f1c3 0303 	rsb	r3, r3, #3
 800be16:	00db      	lsls	r3, r3, #3
 800be18:	fa22 f103 	lsr.w	r1, r2, r3
 800be1c:	7dbb      	ldrb	r3, [r7, #22]
 800be1e:	005a      	lsls	r2, r3, #1
 800be20:	7dfb      	ldrb	r3, [r7, #23]
 800be22:	4413      	add	r3, r2
 800be24:	461a      	mov	r2, r3
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	4413      	add	r3, r2
 800be2a:	b2ca      	uxtb	r2, r1
 800be2c:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800be2e:	7dbb      	ldrb	r3, [r7, #22]
 800be30:	3301      	adds	r3, #1
 800be32:	75bb      	strb	r3, [r7, #22]
 800be34:	7dbb      	ldrb	r3, [r7, #22]
 800be36:	2b03      	cmp	r3, #3
 800be38:	d9e5      	bls.n	800be06 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 800be3a:	e11b      	b.n	800c074 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800be3c:	7dfb      	ldrb	r3, [r7, #23]
 800be3e:	687a      	ldr	r2, [r7, #4]
 800be40:	4413      	add	r3, r2
 800be42:	7819      	ldrb	r1, [r3, #0]
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800be48:	7dfb      	ldrb	r3, [r7, #23]
 800be4a:	011b      	lsls	r3, r3, #4
 800be4c:	68ba      	ldr	r2, [r7, #8]
 800be4e:	4413      	add	r3, r2
 800be50:	685a      	ldr	r2, [r3, #4]
 800be52:	4613      	mov	r3, r2
 800be54:	00db      	lsls	r3, r3, #3
 800be56:	4413      	add	r3, r2
 800be58:	4403      	add	r3, r0
 800be5a:	7a1a      	ldrb	r2, [r3, #8]
 800be5c:	7dfb      	ldrb	r3, [r7, #23]
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	4403      	add	r3, r0
 800be62:	430a      	orrs	r2, r1
 800be64:	b2d2      	uxtb	r2, r2
 800be66:	701a      	strb	r2, [r3, #0]
      break;
 800be68:	e104      	b.n	800c074 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800be6a:	7dfb      	ldrb	r3, [r7, #23]
 800be6c:	687a      	ldr	r2, [r7, #4]
 800be6e:	4413      	add	r3, r2
 800be70:	7819      	ldrb	r1, [r3, #0]
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800be76:	7dfb      	ldrb	r3, [r7, #23]
 800be78:	011b      	lsls	r3, r3, #4
 800be7a:	68ba      	ldr	r2, [r7, #8]
 800be7c:	4413      	add	r3, r2
 800be7e:	685a      	ldr	r2, [r3, #4]
 800be80:	4613      	mov	r3, r2
 800be82:	00db      	lsls	r3, r3, #3
 800be84:	4413      	add	r3, r2
 800be86:	4403      	add	r3, r0
 800be88:	7a1a      	ldrb	r2, [r3, #8]
 800be8a:	7dfb      	ldrb	r3, [r7, #23]
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	4403      	add	r3, r0
 800be90:	430a      	orrs	r2, r1
 800be92:	b2d2      	uxtb	r2, r2
 800be94:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800be96:	2301      	movs	r3, #1
 800be98:	75bb      	strb	r3, [r7, #22]
 800be9a:	e016      	b.n	800beca <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800be9c:	7dfb      	ldrb	r3, [r7, #23]
 800be9e:	011b      	lsls	r3, r3, #4
 800bea0:	68ba      	ldr	r2, [r7, #8]
 800bea2:	4413      	add	r3, r2
 800bea4:	689a      	ldr	r2, [r3, #8]
 800bea6:	7dbb      	ldrb	r3, [r7, #22]
 800bea8:	f1c3 0303 	rsb	r3, r3, #3
 800beac:	00db      	lsls	r3, r3, #3
 800beae:	fa22 f103 	lsr.w	r1, r2, r3
 800beb2:	7dbb      	ldrb	r3, [r7, #22]
 800beb4:	005a      	lsls	r2, r3, #1
 800beb6:	7dfb      	ldrb	r3, [r7, #23]
 800beb8:	4413      	add	r3, r2
 800beba:	461a      	mov	r2, r3
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	4413      	add	r3, r2
 800bec0:	b2ca      	uxtb	r2, r1
 800bec2:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bec4:	7dbb      	ldrb	r3, [r7, #22]
 800bec6:	3301      	adds	r3, #1
 800bec8:	75bb      	strb	r3, [r7, #22]
 800beca:	7dbb      	ldrb	r3, [r7, #22]
 800becc:	2b03      	cmp	r3, #3
 800bece:	d9e5      	bls.n	800be9c <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 800bed0:	e0d0      	b.n	800c074 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bed2:	2301      	movs	r3, #1
 800bed4:	75bb      	strb	r3, [r7, #22]
 800bed6:	e016      	b.n	800bf06 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 800bed8:	7dfb      	ldrb	r3, [r7, #23]
 800beda:	011b      	lsls	r3, r3, #4
 800bedc:	68ba      	ldr	r2, [r7, #8]
 800bede:	4413      	add	r3, r2
 800bee0:	685a      	ldr	r2, [r3, #4]
 800bee2:	7dbb      	ldrb	r3, [r7, #22]
 800bee4:	f1c3 0303 	rsb	r3, r3, #3
 800bee8:	00db      	lsls	r3, r3, #3
 800beea:	fa22 f103 	lsr.w	r1, r2, r3
 800beee:	7dbb      	ldrb	r3, [r7, #22]
 800bef0:	005a      	lsls	r2, r3, #1
 800bef2:	7dfb      	ldrb	r3, [r7, #23]
 800bef4:	4413      	add	r3, r2
 800bef6:	461a      	mov	r2, r3
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	4413      	add	r3, r2
 800befc:	b2ca      	uxtb	r2, r1
 800befe:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bf00:	7dbb      	ldrb	r3, [r7, #22]
 800bf02:	3301      	adds	r3, #1
 800bf04:	75bb      	strb	r3, [r7, #22]
 800bf06:	7dbb      	ldrb	r3, [r7, #22]
 800bf08:	2b03      	cmp	r3, #3
 800bf0a:	d9e5      	bls.n	800bed8 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 800bf0c:	e0b2      	b.n	800c074 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800bf0e:	7dfb      	ldrb	r3, [r7, #23]
 800bf10:	687a      	ldr	r2, [r7, #4]
 800bf12:	4413      	add	r3, r2
 800bf14:	7819      	ldrb	r1, [r3, #0]
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800bf1a:	7dfb      	ldrb	r3, [r7, #23]
 800bf1c:	011b      	lsls	r3, r3, #4
 800bf1e:	68ba      	ldr	r2, [r7, #8]
 800bf20:	4413      	add	r3, r2
 800bf22:	685a      	ldr	r2, [r3, #4]
 800bf24:	4613      	mov	r3, r2
 800bf26:	00db      	lsls	r3, r3, #3
 800bf28:	4413      	add	r3, r2
 800bf2a:	4403      	add	r3, r0
 800bf2c:	7a1a      	ldrb	r2, [r3, #8]
 800bf2e:	7dfb      	ldrb	r3, [r7, #23]
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	4403      	add	r3, r0
 800bf34:	430a      	orrs	r2, r1
 800bf36:	b2d2      	uxtb	r2, r2
 800bf38:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	75bb      	strb	r3, [r7, #22]
 800bf3e:	e016      	b.n	800bf6e <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800bf40:	7dfb      	ldrb	r3, [r7, #23]
 800bf42:	011b      	lsls	r3, r3, #4
 800bf44:	68ba      	ldr	r2, [r7, #8]
 800bf46:	4413      	add	r3, r2
 800bf48:	689a      	ldr	r2, [r3, #8]
 800bf4a:	7dbb      	ldrb	r3, [r7, #22]
 800bf4c:	f1c3 0303 	rsb	r3, r3, #3
 800bf50:	00db      	lsls	r3, r3, #3
 800bf52:	fa22 f103 	lsr.w	r1, r2, r3
 800bf56:	7dbb      	ldrb	r3, [r7, #22]
 800bf58:	005a      	lsls	r2, r3, #1
 800bf5a:	7dfb      	ldrb	r3, [r7, #23]
 800bf5c:	4413      	add	r3, r2
 800bf5e:	461a      	mov	r2, r3
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	4413      	add	r3, r2
 800bf64:	b2ca      	uxtb	r2, r1
 800bf66:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bf68:	7dbb      	ldrb	r3, [r7, #22]
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	75bb      	strb	r3, [r7, #22]
 800bf6e:	7dbb      	ldrb	r3, [r7, #22]
 800bf70:	2b03      	cmp	r3, #3
 800bf72:	d9e5      	bls.n	800bf40 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 800bf74:	e07e      	b.n	800c074 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 800bf76:	7dfb      	ldrb	r3, [r7, #23]
 800bf78:	687a      	ldr	r2, [r7, #4]
 800bf7a:	4413      	add	r3, r2
 800bf7c:	781b      	ldrb	r3, [r3, #0]
 800bf7e:	b259      	sxtb	r1, r3
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800bf84:	7dfb      	ldrb	r3, [r7, #23]
 800bf86:	011b      	lsls	r3, r3, #4
 800bf88:	68ba      	ldr	r2, [r7, #8]
 800bf8a:	4413      	add	r3, r2
 800bf8c:	685a      	ldr	r2, [r3, #4]
 800bf8e:	4613      	mov	r3, r2
 800bf90:	009b      	lsls	r3, r3, #2
 800bf92:	4413      	add	r3, r2
 800bf94:	4403      	add	r3, r0
 800bf96:	791b      	ldrb	r3, [r3, #4]
 800bf98:	00db      	lsls	r3, r3, #3
 800bf9a:	b25b      	sxtb	r3, r3
 800bf9c:	430b      	orrs	r3, r1
 800bf9e:	b259      	sxtb	r1, r3
 800bfa0:	7dfb      	ldrb	r3, [r7, #23]
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	4413      	add	r3, r2
 800bfa6:	b2ca      	uxtb	r2, r1
 800bfa8:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 800bfaa:	7dfb      	ldrb	r3, [r7, #23]
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	4413      	add	r3, r2
 800bfb0:	7819      	ldrb	r1, [r3, #0]
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800bfb6:	7dfb      	ldrb	r3, [r7, #23]
 800bfb8:	011b      	lsls	r3, r3, #4
 800bfba:	68ba      	ldr	r2, [r7, #8]
 800bfbc:	4413      	add	r3, r2
 800bfbe:	689a      	ldr	r2, [r3, #8]
 800bfc0:	4613      	mov	r3, r2
 800bfc2:	00db      	lsls	r3, r3, #3
 800bfc4:	4413      	add	r3, r2
 800bfc6:	4403      	add	r3, r0
 800bfc8:	7a1a      	ldrb	r2, [r3, #8]
 800bfca:	7dfb      	ldrb	r3, [r7, #23]
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	4403      	add	r3, r0
 800bfd0:	430a      	orrs	r2, r1
 800bfd2:	b2d2      	uxtb	r2, r2
 800bfd4:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	75bb      	strb	r3, [r7, #22]
 800bfda:	e016      	b.n	800c00a <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 800bfdc:	7dfb      	ldrb	r3, [r7, #23]
 800bfde:	011b      	lsls	r3, r3, #4
 800bfe0:	68ba      	ldr	r2, [r7, #8]
 800bfe2:	4413      	add	r3, r2
 800bfe4:	68da      	ldr	r2, [r3, #12]
 800bfe6:	7dbb      	ldrb	r3, [r7, #22]
 800bfe8:	f1c3 0303 	rsb	r3, r3, #3
 800bfec:	00db      	lsls	r3, r3, #3
 800bfee:	fa22 f103 	lsr.w	r1, r2, r3
 800bff2:	7dbb      	ldrb	r3, [r7, #22]
 800bff4:	005a      	lsls	r2, r3, #1
 800bff6:	7dfb      	ldrb	r3, [r7, #23]
 800bff8:	4413      	add	r3, r2
 800bffa:	461a      	mov	r2, r3
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	4413      	add	r3, r2
 800c000:	b2ca      	uxtb	r2, r1
 800c002:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800c004:	7dbb      	ldrb	r3, [r7, #22]
 800c006:	3301      	adds	r3, #1
 800c008:	75bb      	strb	r3, [r7, #22]
 800c00a:	7dbb      	ldrb	r3, [r7, #22]
 800c00c:	2b03      	cmp	r3, #3
 800c00e:	d9e5      	bls.n	800bfdc <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 800c010:	e030      	b.n	800c074 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 800c012:	7dfb      	ldrb	r3, [r7, #23]
 800c014:	687a      	ldr	r2, [r7, #4]
 800c016:	4413      	add	r3, r2
 800c018:	781b      	ldrb	r3, [r3, #0]
 800c01a:	b259      	sxtb	r1, r3
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800c020:	7dfb      	ldrb	r3, [r7, #23]
 800c022:	011b      	lsls	r3, r3, #4
 800c024:	68ba      	ldr	r2, [r7, #8]
 800c026:	4413      	add	r3, r2
 800c028:	685a      	ldr	r2, [r3, #4]
 800c02a:	4613      	mov	r3, r2
 800c02c:	009b      	lsls	r3, r3, #2
 800c02e:	4413      	add	r3, r2
 800c030:	4403      	add	r3, r0
 800c032:	791b      	ldrb	r3, [r3, #4]
 800c034:	00db      	lsls	r3, r3, #3
 800c036:	b25b      	sxtb	r3, r3
 800c038:	430b      	orrs	r3, r1
 800c03a:	b259      	sxtb	r1, r3
 800c03c:	7dfb      	ldrb	r3, [r7, #23]
 800c03e:	687a      	ldr	r2, [r7, #4]
 800c040:	4413      	add	r3, r2
 800c042:	b2ca      	uxtb	r2, r1
 800c044:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 800c046:	7dfb      	ldrb	r3, [r7, #23]
 800c048:	687a      	ldr	r2, [r7, #4]
 800c04a:	4413      	add	r3, r2
 800c04c:	7819      	ldrb	r1, [r3, #0]
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800c052:	7dfb      	ldrb	r3, [r7, #23]
 800c054:	011b      	lsls	r3, r3, #4
 800c056:	68ba      	ldr	r2, [r7, #8]
 800c058:	4413      	add	r3, r2
 800c05a:	689a      	ldr	r2, [r3, #8]
 800c05c:	4613      	mov	r3, r2
 800c05e:	00db      	lsls	r3, r3, #3
 800c060:	4413      	add	r3, r2
 800c062:	4403      	add	r3, r0
 800c064:	7a1a      	ldrb	r2, [r3, #8]
 800c066:	7dfb      	ldrb	r3, [r7, #23]
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	4403      	add	r3, r0
 800c06c:	430a      	orrs	r2, r1
 800c06e:	b2d2      	uxtb	r2, r2
 800c070:	701a      	strb	r2, [r3, #0]
      break;
 800c072:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800c074:	7dfb      	ldrb	r3, [r7, #23]
 800c076:	3301      	adds	r3, #1
 800c078:	75fb      	strb	r3, [r7, #23]
 800c07a:	7dfb      	ldrb	r3, [r7, #23]
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	f67f ae0a 	bls.w	800bc96 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 800c082:	bf00      	nop
 800c084:	bf00      	nop
 800c086:	371c      	adds	r7, #28
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr

0800c090 <_ZN5L6470I8shield_1E11L6470_roundEf>:
    int L6470_round(float f)
 800c090:	b480      	push	{r7}
 800c092:	b083      	sub	sp, #12
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
 800c098:	ed87 0a00 	vstr	s0, [r7]
        if (f >= 0) {
 800c09c:	edd7 7a00 	vldr	s15, [r7]
 800c0a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c0a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0a8:	db1e      	blt.n	800c0e8 <_ZN5L6470I8shield_1E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 800c0aa:	edd7 7a00 	vldr	s15, [r7]
 800c0ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c0b2:	ee17 2a90 	vmov	r2, s15
 800c0b6:	edd7 7a00 	vldr	s15, [r7]
 800c0ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c0be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0c2:	ed97 7a00 	vldr	s14, [r7]
 800c0c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c0ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c0ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c0d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0d6:	bf4c      	ite	mi
 800c0d8:	2301      	movmi	r3, #1
 800c0da:	2300      	movpl	r3, #0
 800c0dc:	b2db      	uxtb	r3, r3
 800c0de:	f083 0301 	eor.w	r3, r3, #1
 800c0e2:	b2db      	uxtb	r3, r3
 800c0e4:	4413      	add	r3, r2
 800c0e6:	e01a      	b.n	800c11e <_ZN5L6470I8shield_1E11L6470_roundEf+0x8e>
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 800c0e8:	edd7 7a00 	vldr	s15, [r7]
 800c0ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c0f0:	ee17 2a90 	vmov	r2, s15
 800c0f4:	edd7 7a00 	vldr	s15, [r7]
 800c0f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c0fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c100:	ed97 7a00 	vldr	s14, [r7]
 800c104:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c108:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800c10c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c114:	d501      	bpl.n	800c11a <_ZN5L6470I8shield_1E11L6470_roundEf+0x8a>
 800c116:	2301      	movs	r3, #1
 800c118:	e000      	b.n	800c11c <_ZN5L6470I8shield_1E11L6470_roundEf+0x8c>
 800c11a:	2300      	movs	r3, #0
 800c11c:	1ad3      	subs	r3, r2, r3
    }
 800c11e:	4618      	mov	r0, r3
 800c120:	370c      	adds	r7, #12
 800c122:	46bd      	mov	sp, r7
 800c124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c128:	4770      	bx	lr

0800c12a <_ZN5L6470I8shield_1E4ReadEPht>:
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 800c12a:	b580      	push	{r7, lr}
 800c12c:	b086      	sub	sp, #24
 800c12e:	af00      	add	r7, sp, #0
 800c130:	60f8      	str	r0, [r7, #12]
 800c132:	60b9      	str	r1, [r7, #8]
 800c134:	4613      	mov	r3, r2
 800c136:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	6918      	ldr	r0, [r3, #16]
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	8a9b      	ldrh	r3, [r3, #20]
 800c140:	2200      	movs	r2, #0
 800c142:	4619      	mov	r1, r3
 800c144:	f001 faa0 	bl	800d688 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	6998      	ldr	r0, [r3, #24]
 800c14c:	88fa      	ldrh	r2, [r7, #6]
 800c14e:	2364      	movs	r3, #100	; 0x64
 800c150:	68b9      	ldr	r1, [r7, #8]
 800c152:	f002 fab0 	bl	800e6b6 <HAL_SPI_Receive>
 800c156:	4603      	mov	r3, r0
 800c158:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	6918      	ldr	r0, [r3, #16]
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	8a9b      	ldrh	r3, [r3, #20]
 800c162:	2201      	movs	r2, #1
 800c164:	4619      	mov	r1, r3
 800c166:	f001 fa8f 	bl	800d688 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 800c16a:	7dfb      	ldrb	r3, [r7, #23]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d001      	beq.n	800c174 <_ZN5L6470I8shield_1E4ReadEPht+0x4a>
        	return COMPONENT_ERROR;
 800c170:	2301      	movs	r3, #1
 800c172:	e000      	b.n	800c176 <_ZN5L6470I8shield_1E4ReadEPht+0x4c>
        return COMPONENT_OK;
 800c174:	2300      	movs	r3, #0
    }
 800c176:	4618      	mov	r0, r3
 800c178:	3718      	adds	r7, #24
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}

0800c17e <_ZN5L6470I8shield_1E5WriteEPht>:
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 800c17e:	b580      	push	{r7, lr}
 800c180:	b086      	sub	sp, #24
 800c182:	af00      	add	r7, sp, #0
 800c184:	60f8      	str	r0, [r7, #12]
 800c186:	60b9      	str	r1, [r7, #8]
 800c188:	4613      	mov	r3, r2
 800c18a:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	6918      	ldr	r0, [r3, #16]
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	8a9b      	ldrh	r3, [r3, #20]
 800c194:	2200      	movs	r2, #0
 800c196:	4619      	mov	r1, r3
 800c198:	f001 fa76 	bl	800d688 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	6998      	ldr	r0, [r3, #24]
 800c1a0:	88fa      	ldrh	r2, [r7, #6]
 800c1a2:	2364      	movs	r3, #100	; 0x64
 800c1a4:	68b9      	ldr	r1, [r7, #8]
 800c1a6:	f002 f94a 	bl	800e43e <HAL_SPI_Transmit>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	6918      	ldr	r0, [r3, #16]
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	8a9b      	ldrh	r3, [r3, #20]
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	f001 fa65 	bl	800d688 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 800c1be:	7dfb      	ldrb	r3, [r7, #23]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d001      	beq.n	800c1c8 <_ZN5L6470I8shield_1E5WriteEPht+0x4a>
        	return COMPONENT_ERROR;
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	e000      	b.n	800c1ca <_ZN5L6470I8shield_1E5WriteEPht+0x4c>
        return COMPONENT_OK;
 800c1c8:	2300      	movs	r3, #0
    }
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3718      	adds	r7, #24
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}

0800c1d2 <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t>:
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 800c1d2:	b580      	push	{r7, lr}
 800c1d4:	b088      	sub	sp, #32
 800c1d6:	af02      	add	r7, sp, #8
 800c1d8:	60f8      	str	r0, [r7, #12]
 800c1da:	60b9      	str	r1, [r7, #8]
 800c1dc:	607a      	str	r2, [r7, #4]
 800c1de:	807b      	strh	r3, [r7, #2]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	6918      	ldr	r0, [r3, #16]
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	8a9b      	ldrh	r3, [r3, #20]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	4619      	mov	r1, r3
 800c1ec:	f001 fa4c 	bl	800d688 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	6998      	ldr	r0, [r3, #24]
 800c1f4:	887b      	ldrh	r3, [r7, #2]
 800c1f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c1fa:	9200      	str	r2, [sp, #0]
 800c1fc:	68ba      	ldr	r2, [r7, #8]
 800c1fe:	6879      	ldr	r1, [r7, #4]
 800c200:	f002 fb6a 	bl	800e8d8 <HAL_SPI_TransmitReceive>
 800c204:	4603      	mov	r3, r0
 800c206:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 800c208:	7dfb      	ldrb	r3, [r7, #23]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d009      	beq.n	800c222 <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t+0x50>
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	6918      	ldr	r0, [r3, #16]
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	8a9b      	ldrh	r3, [r3, #20]
 800c216:	2201      	movs	r2, #1
 800c218:	4619      	mov	r1, r3
 800c21a:	f001 fa35 	bl	800d688 <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 800c21e:	2301      	movs	r3, #1
 800c220:	e008      	b.n	800c234 <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t+0x62>
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	6918      	ldr	r0, [r3, #16]
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	8a9b      	ldrh	r3, [r3, #20]
 800c22a:	2201      	movs	r2, #1
 800c22c:	4619      	mov	r1, r3
 800c22e:	f001 fa2b 	bl	800d688 <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 800c232:	2300      	movs	r3, #0
    }
 800c234:	4618      	mov	r0, r3
 800c236:	3718      	adds	r7, #24
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <_ZN5L6470I8shield_1E23L6470_SPI_CommunicationEPhS2_tm>:
    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 800c23c:	b590      	push	{r4, r7, lr}
 800c23e:	b085      	sub	sp, #20
 800c240:	af00      	add	r7, sp, #0
 800c242:	60f8      	str	r0, [r7, #12]
 800c244:	60b9      	str	r1, [r7, #8]
 800c246:	607a      	str	r2, [r7, #4]
 800c248:	807b      	strh	r3, [r7, #2]
        ReadWrite(pRxData, pTxData, Size);
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800c252:	681c      	ldr	r4, [r3, #0]
 800c254:	887b      	ldrh	r3, [r7, #2]
 800c256:	68ba      	ldr	r2, [r7, #8]
 800c258:	6879      	ldr	r1, [r7, #4]
 800c25a:	68f8      	ldr	r0, [r7, #12]
 800c25c:	47a0      	blx	r4
    }
 800c25e:	bf00      	nop
 800c260:	3714      	adds	r7, #20
 800c262:	46bd      	mov	sp, r7
 800c264:	bd90      	pop	{r4, r7, pc}
	...

0800c268 <_ZN13abstractL6470C1Ev>:

uint8_t shield_1::count = 0;
uint8_t shield_2::count = 0;
uint8_t shield_3::count = 0;

abstractL6470::abstractL6470()
 800c268:	b480      	push	{r7}
 800c26a:	b083      	sub	sp, #12
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	4a04      	ldr	r2, [pc, #16]	; (800c284 <_ZN13abstractL6470C1Ev+0x1c>)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	601a      	str	r2, [r3, #0]
{

}
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	4618      	mov	r0, r3
 800c27a:	370c      	adds	r7, #12
 800c27c:	46bd      	mov	sp, r7
 800c27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c282:	4770      	bx	lr
 800c284:	0801503c 	.word	0x0801503c

0800c288 <_ZN13abstractL6470D1Ev>:

abstractL6470::~abstractL6470()
 800c288:	b480      	push	{r7}
 800c28a:	b083      	sub	sp, #12
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	4a04      	ldr	r2, [pc, #16]	; (800c2a4 <_ZN13abstractL6470D1Ev+0x1c>)
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	601a      	str	r2, [r3, #0]
{

}
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	4618      	mov	r0, r3
 800c29a:	370c      	adds	r7, #12
 800c29c:	46bd      	mov	sp, r7
 800c29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a2:	4770      	bx	lr
 800c2a4:	0801503c 	.word	0x0801503c

0800c2a8 <_ZN10MsgHandlerC1EP20__UART_HandleTypeDef>:


class MsgHandler
{
	public:
		MsgHandler(UART_HandleTypeDef *huart2) : huart(huart2)
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b082      	sub	sp, #8
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	6039      	str	r1, [r7, #0]
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	683a      	ldr	r2, [r7, #0]
 800c2b6:	601a      	str	r2, [r3, #0]
		{
			motor_speeds = new float[4];
 800c2b8:	2010      	movs	r0, #16
 800c2ba:	f004 fef7 	bl	80110ac <_Znaj>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	605a      	str	r2, [r3, #4]
			sending = false;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	725a      	strb	r2, [r3, #9]
			receiving = false;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	729a      	strb	r2, [r3, #10]
			received_motor_speeds = false;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	721a      	strb	r2, [r3, #8]
		}
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3708      	adds	r7, #8
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}

0800c2e2 <_ZN10MsgHandlerD1Ev>:
		~MsgHandler() { delete [] motor_speeds;}
 800c2e2:	b580      	push	{r7, lr}
 800c2e4:	b082      	sub	sp, #8
 800c2e6:	af00      	add	r7, sp, #0
 800c2e8:	6078      	str	r0, [r7, #4]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	685b      	ldr	r3, [r3, #4]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d004      	beq.n	800c2fc <_ZN10MsgHandlerD1Ev+0x1a>
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	685b      	ldr	r3, [r3, #4]
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f004 fa6a 	bl	80107d0 <_ZdaPv>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	4618      	mov	r0, r3
 800c300:	3708      	adds	r7, #8
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}

0800c306 <_ZN10MsgHandler14unlock_timeoutEv>:
		void process_rxclpt_callback();
		void process_txclpt_callback();
		void prepare_receive_motor_speeds();
		void send_motor_speeds(float* input_motor_speeds);
		bool get_received_motor_speeds(float* to_fill_motor_speeds);
		bool unlock_timeout() { receiving = false; sending = false; };
 800c306:	b480      	push	{r7}
 800c308:	b083      	sub	sp, #12
 800c30a:	af00      	add	r7, sp, #0
 800c30c:	6078      	str	r0, [r7, #4]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2200      	movs	r2, #0
 800c312:	729a      	strb	r2, [r3, #10]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2200      	movs	r2, #0
 800c318:	725a      	strb	r2, [r3, #9]
 800c31a:	bf00      	nop
 800c31c:	4618      	mov	r0, r3
 800c31e:	370c      	adds	r7, #12
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr

0800c328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c328:	b590      	push	{r4, r7, lr}
 800c32a:	b087      	sub	sp, #28
 800c32c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c32e:	f000 fddd 	bl	800ceec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c332:	f000 f8d3 	bl	800c4dc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c336:	f000 fa19 	bl	800c76c <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 800c33a:	f000 f9e9 	bl	800c710 <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 800c33e:	f000 f98b 	bl	800c658 <_ZL12MX_TIM2_Initv>
  MX_SPI1_Init();
 800c342:	f000 f94d 	bl	800c5e0 <_ZL12MX_SPI1_Initv>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 800c346:	485c      	ldr	r0, [pc, #368]	; (800c4b8 <main+0x190>)
 800c348:	f002 fde8 	bl	800ef1c <HAL_TIM_Base_Start_IT>

  moteurs = new BlocMoteurs(&hspi1, reset_shield_1_GPIO_Port, reset_shield_1_Pin, ssel1_GPIO_Port, ssel1_Pin,
		  	  	  	  	  	  	    reset_shield_2_GPIO_Port, reset_shield_2_Pin, ssel2_GPIO_Port, ssel2_Pin);
 800c34c:	f44f 70bc 	mov.w	r0, #376	; 0x178
 800c350:	f004 fe9b 	bl	801108a <_Znwj>
 800c354:	4603      	mov	r3, r0
 800c356:	461c      	mov	r4, r3
 800c358:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c35c:	9305      	str	r3, [sp, #20]
 800c35e:	4b57      	ldr	r3, [pc, #348]	; (800c4bc <main+0x194>)
 800c360:	9304      	str	r3, [sp, #16]
 800c362:	2310      	movs	r3, #16
 800c364:	9303      	str	r3, [sp, #12]
 800c366:	4b56      	ldr	r3, [pc, #344]	; (800c4c0 <main+0x198>)
 800c368:	9302      	str	r3, [sp, #8]
 800c36a:	2310      	movs	r3, #16
 800c36c:	9301      	str	r3, [sp, #4]
 800c36e:	4b53      	ldr	r3, [pc, #332]	; (800c4bc <main+0x194>)
 800c370:	9300      	str	r3, [sp, #0]
 800c372:	2320      	movs	r3, #32
 800c374:	4a52      	ldr	r2, [pc, #328]	; (800c4c0 <main+0x198>)
 800c376:	4953      	ldr	r1, [pc, #332]	; (800c4c4 <main+0x19c>)
 800c378:	4620      	mov	r0, r4
 800c37a:	f7f5 ff53 	bl	8002224 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>
  moteurs = new BlocMoteurs(&hspi1, reset_shield_1_GPIO_Port, reset_shield_1_Pin, ssel1_GPIO_Port, ssel1_Pin,
 800c37e:	4b52      	ldr	r3, [pc, #328]	; (800c4c8 <main+0x1a0>)
 800c380:	601c      	str	r4, [r3, #0]
  moteurs->set_microstepping_mode(step_mode_t::STEP_MODE_1_128);
 800c382:	4b51      	ldr	r3, [pc, #324]	; (800c4c8 <main+0x1a0>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	2107      	movs	r1, #7
 800c388:	4618      	mov	r0, r3
 800c38a:	f7f6 f9bb 	bl	8002704 <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE>
  moteurs->set_max_acc_moteurs(1.0);
 800c38e:	4b4e      	ldr	r3, [pc, #312]	; (800c4c8 <main+0x1a0>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c396:	4618      	mov	r0, r3
 800c398:	f7f6 fa31 	bl	80027fe <_ZN11BlocMoteurs19set_max_acc_moteursEf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  msg_handler.prepare_receive_motor_speeds();
 800c39c:	484b      	ldr	r0, [pc, #300]	; (800c4cc <main+0x1a4>)
 800c39e:	f000 fb24 	bl	800c9ea <_ZN10MsgHandler28prepare_receive_motor_speedsEv>
	  while(1)
	  {

			if( msg_handler.get_received_motor_speeds(input_motor_speeds) != true)
 800c3a2:	494b      	ldr	r1, [pc, #300]	; (800c4d0 <main+0x1a8>)
 800c3a4:	4849      	ldr	r0, [pc, #292]	; (800c4cc <main+0x1a4>)
 800c3a6:	f000 fb3c 	bl	800ca22 <_ZN10MsgHandler25get_received_motor_speedsEPf>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	2b01      	cmp	r3, #1
 800c3ae:	bf14      	ite	ne
 800c3b0:	2301      	movne	r3, #1
 800c3b2:	2300      	moveq	r3, #0
 800c3b4:	b2db      	uxtb	r3, r3
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d00c      	beq.n	800c3d4 <main+0xac>
			{
				if( timer_timeout_count >= 5)
 800c3ba:	4b46      	ldr	r3, [pc, #280]	; (800c4d4 <main+0x1ac>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	2b04      	cmp	r3, #4
 800c3c0:	ddef      	ble.n	800c3a2 <main+0x7a>
				{
					moteurs->motors_stop_soft_hiz();
 800c3c2:	4b41      	ldr	r3, [pc, #260]	; (800c4c8 <main+0x1a0>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7f6 f9e9 	bl	800279e <_ZN11BlocMoteurs20motors_stop_soft_hizEv>
					timeout_moteurs = true;
 800c3cc:	4b42      	ldr	r3, [pc, #264]	; (800c4d8 <main+0x1b0>)
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	701a      	strb	r2, [r3, #0]
					break;
 800c3d2:	e007      	b.n	800c3e4 <main+0xbc>
				}
			}
			else
			{
				moteurs->motors_on();
 800c3d4:	4b3c      	ldr	r3, [pc, #240]	; (800c4c8 <main+0x1a0>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f7f6 f9d3 	bl	8002784 <_ZN11BlocMoteurs9motors_onEv>
				timeout_moteurs = false;
 800c3de:	4b3e      	ldr	r3, [pc, #248]	; (800c4d8 <main+0x1b0>)
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	701a      	strb	r2, [r3, #0]
				break;
			}

	  }
	  if(timeout_moteurs == false)
 800c3e4:	4b3c      	ldr	r3, [pc, #240]	; (800c4d8 <main+0x1b0>)
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d154      	bne.n	800c496 <main+0x16e>
	  {
		  if( fabs(input_motor_speeds[front_left]) < 0.001 && fabs(input_motor_speeds[front_right]) < 0.001 )
 800c3ec:	4b38      	ldr	r3, [pc, #224]	; (800c4d0 <main+0x1a8>)
 800c3ee:	edd3 7a00 	vldr	s15, [r3]
 800c3f2:	eef0 7ae7 	vabs.f32	s15, s15
 800c3f6:	ee17 0a90 	vmov	r0, s15
 800c3fa:	f7f4 f8d5 	bl	80005a8 <__aeabi_f2d>
 800c3fe:	a32c      	add	r3, pc, #176	; (adr r3, 800c4b0 <main+0x188>)
 800c400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c404:	f7f4 fb9a 	bl	8000b3c <__aeabi_dcmplt>
 800c408:	4603      	mov	r3, r0
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d016      	beq.n	800c43c <main+0x114>
 800c40e:	4b30      	ldr	r3, [pc, #192]	; (800c4d0 <main+0x1a8>)
 800c410:	edd3 7a01 	vldr	s15, [r3, #4]
 800c414:	eef0 7ae7 	vabs.f32	s15, s15
 800c418:	ee17 0a90 	vmov	r0, s15
 800c41c:	f7f4 f8c4 	bl	80005a8 <__aeabi_f2d>
 800c420:	a323      	add	r3, pc, #140	; (adr r3, 800c4b0 <main+0x188>)
 800c422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c426:	f7f4 fb89 	bl	8000b3c <__aeabi_dcmplt>
 800c42a:	4603      	mov	r3, r0
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d005      	beq.n	800c43c <main+0x114>
		  {
			  HAL_GPIO_WritePin(LD2_GPIO_Port , LD2_Pin, GPIO_PinState::GPIO_PIN_SET);
 800c430:	2201      	movs	r2, #1
 800c432:	2120      	movs	r1, #32
 800c434:	4821      	ldr	r0, [pc, #132]	; (800c4bc <main+0x194>)
 800c436:	f001 f927 	bl	800d688 <HAL_GPIO_WritePin>
 800c43a:	e004      	b.n	800c446 <main+0x11e>
		  }
		  else
		  {
			  HAL_GPIO_WritePin(LD2_GPIO_Port , LD2_Pin, GPIO_PinState::GPIO_PIN_RESET);
 800c43c:	2200      	movs	r2, #0
 800c43e:	2120      	movs	r1, #32
 800c440:	481e      	ldr	r0, [pc, #120]	; (800c4bc <main+0x194>)
 800c442:	f001 f921 	bl	800d688 <HAL_GPIO_WritePin>
		  }
		  moteurs->commande_vitesses_absolues(input_motor_speeds[front_left], input_motor_speeds[front_right], input_motor_speeds[back_left], input_motor_speeds[back_right]);
 800c446:	4b20      	ldr	r3, [pc, #128]	; (800c4c8 <main+0x1a0>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	4a21      	ldr	r2, [pc, #132]	; (800c4d0 <main+0x1a8>)
 800c44c:	edd2 7a00 	vldr	s15, [r2]
 800c450:	4a1f      	ldr	r2, [pc, #124]	; (800c4d0 <main+0x1a8>)
 800c452:	ed92 7a01 	vldr	s14, [r2, #4]
 800c456:	4a1e      	ldr	r2, [pc, #120]	; (800c4d0 <main+0x1a8>)
 800c458:	edd2 6a02 	vldr	s13, [r2, #8]
 800c45c:	4a1c      	ldr	r2, [pc, #112]	; (800c4d0 <main+0x1a8>)
 800c45e:	ed92 6a03 	vldr	s12, [r2, #12]
 800c462:	eef0 1a46 	vmov.f32	s3, s12
 800c466:	eeb0 1a66 	vmov.f32	s2, s13
 800c46a:	eef0 0a47 	vmov.f32	s1, s14
 800c46e:	eeb0 0a67 	vmov.f32	s0, s15
 800c472:	4618      	mov	r0, r3
 800c474:	f7f6 f8eb 	bl	800264e <_ZN11BlocMoteurs26commande_vitesses_absoluesEffff>
		  moteurs->mesure_vitesses_rad();
 800c478:	4b13      	ldr	r3, [pc, #76]	; (800c4c8 <main+0x1a0>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	4618      	mov	r0, r3
 800c47e:	f7f6 fa19 	bl	80028b4 <_ZN11BlocMoteurs19mesure_vitesses_radEv>
		  msg_handler.send_motor_speeds(moteurs->mesure_vitesses_rad());
 800c482:	4b11      	ldr	r3, [pc, #68]	; (800c4c8 <main+0x1a0>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	4618      	mov	r0, r3
 800c488:	f7f6 fa14 	bl	80028b4 <_ZN11BlocMoteurs19mesure_vitesses_radEv>
 800c48c:	4603      	mov	r3, r0
 800c48e:	4619      	mov	r1, r3
 800c490:	480e      	ldr	r0, [pc, #56]	; (800c4cc <main+0x1a4>)
 800c492:	f000 fa8e 	bl	800c9b2 <_ZN10MsgHandler17send_motor_speedsEPf>
	  }
	  timer_timeout_count = 0;
 800c496:	4b0f      	ldr	r3, [pc, #60]	; (800c4d4 <main+0x1ac>)
 800c498:	2200      	movs	r2, #0
 800c49a:	601a      	str	r2, [r3, #0]
	  msg_handler.prepare_receive_motor_speeds();
 800c49c:	e77e      	b.n	800c39c <main+0x74>
		  	  	  	  	  	  	    reset_shield_2_GPIO_Port, reset_shield_2_Pin, ssel2_GPIO_Port, ssel2_Pin);
 800c49e:	f44f 71bc 	mov.w	r1, #376	; 0x178
 800c4a2:	4620      	mov	r0, r4
 800c4a4:	f004 f992 	bl	80107cc <_ZdlPvj>
 800c4a8:	f004 fa28 	bl	80108fc <__cxa_end_cleanup>
 800c4ac:	f3af 8000 	nop.w
 800c4b0:	d2f1a9fc 	.word	0xd2f1a9fc
 800c4b4:	3f50624d 	.word	0x3f50624d
 800c4b8:	20000300 	.word	0x20000300
 800c4bc:	40020000 	.word	0x40020000
 800c4c0:	40020400 	.word	0x40020400
 800c4c4:	200002a8 	.word	0x200002a8
 800c4c8:	200003b0 	.word	0x200003b0
 800c4cc:	2000038c 	.word	0x2000038c
 800c4d0:	2000039c 	.word	0x2000039c
 800c4d4:	20000398 	.word	0x20000398
 800c4d8:	200003ac 	.word	0x200003ac

0800c4dc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b094      	sub	sp, #80	; 0x50
 800c4e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c4e2:	f107 031c 	add.w	r3, r7, #28
 800c4e6:	2234      	movs	r2, #52	; 0x34
 800c4e8:	2100      	movs	r1, #0
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f005 fe05 	bl	80120fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c4f0:	f107 0308 	add.w	r3, r7, #8
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	601a      	str	r2, [r3, #0]
 800c4f8:	605a      	str	r2, [r3, #4]
 800c4fa:	609a      	str	r2, [r3, #8]
 800c4fc:	60da      	str	r2, [r3, #12]
 800c4fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800c500:	2300      	movs	r3, #0
 800c502:	607b      	str	r3, [r7, #4]
 800c504:	4b34      	ldr	r3, [pc, #208]	; (800c5d8 <_Z18SystemClock_Configv+0xfc>)
 800c506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c508:	4a33      	ldr	r2, [pc, #204]	; (800c5d8 <_Z18SystemClock_Configv+0xfc>)
 800c50a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c50e:	6413      	str	r3, [r2, #64]	; 0x40
 800c510:	4b31      	ldr	r3, [pc, #196]	; (800c5d8 <_Z18SystemClock_Configv+0xfc>)
 800c512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c518:	607b      	str	r3, [r7, #4]
 800c51a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c51c:	2300      	movs	r3, #0
 800c51e:	603b      	str	r3, [r7, #0]
 800c520:	4b2e      	ldr	r3, [pc, #184]	; (800c5dc <_Z18SystemClock_Configv+0x100>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	4a2d      	ldr	r2, [pc, #180]	; (800c5dc <_Z18SystemClock_Configv+0x100>)
 800c526:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c52a:	6013      	str	r3, [r2, #0]
 800c52c:	4b2b      	ldr	r3, [pc, #172]	; (800c5dc <_Z18SystemClock_Configv+0x100>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c534:	603b      	str	r3, [r7, #0]
 800c536:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800c538:	2302      	movs	r3, #2
 800c53a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800c53c:	2301      	movs	r3, #1
 800c53e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800c540:	2310      	movs	r3, #16
 800c542:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c544:	2302      	movs	r3, #2
 800c546:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800c548:	2300      	movs	r3, #0
 800c54a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800c54c:	2308      	movs	r3, #8
 800c54e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800c550:	23b4      	movs	r3, #180	; 0xb4
 800c552:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c554:	2302      	movs	r3, #2
 800c556:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800c558:	2302      	movs	r3, #2
 800c55a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800c55c:	2302      	movs	r3, #2
 800c55e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c560:	f107 031c 	add.w	r3, r7, #28
 800c564:	4618      	mov	r0, r3
 800c566:	f001 fc43 	bl	800ddf0 <HAL_RCC_OscConfig>
 800c56a:	4603      	mov	r3, r0
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	bf14      	ite	ne
 800c570:	2301      	movne	r3, #1
 800c572:	2300      	moveq	r3, #0
 800c574:	b2db      	uxtb	r3, r3
 800c576:	2b00      	cmp	r3, #0
 800c578:	d001      	beq.n	800c57e <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800c57a:	f000 f9c3 	bl	800c904 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800c57e:	f001 f89d 	bl	800d6bc <HAL_PWREx_EnableOverDrive>
 800c582:	4603      	mov	r3, r0
 800c584:	2b00      	cmp	r3, #0
 800c586:	bf14      	ite	ne
 800c588:	2301      	movne	r3, #1
 800c58a:	2300      	moveq	r3, #0
 800c58c:	b2db      	uxtb	r3, r3
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d001      	beq.n	800c596 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 800c592:	f000 f9b7 	bl	800c904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c596:	230f      	movs	r3, #15
 800c598:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c59a:	2302      	movs	r3, #2
 800c59c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800c5a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800c5a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800c5a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800c5ac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800c5ae:	f107 0308 	add.w	r3, r7, #8
 800c5b2:	2105      	movs	r1, #5
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f001 f8d1 	bl	800d75c <HAL_RCC_ClockConfig>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	bf14      	ite	ne
 800c5c0:	2301      	movne	r3, #1
 800c5c2:	2300      	moveq	r3, #0
 800c5c4:	b2db      	uxtb	r3, r3
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d001      	beq.n	800c5ce <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 800c5ca:	f000 f99b 	bl	800c904 <Error_Handler>
  }
}
 800c5ce:	bf00      	nop
 800c5d0:	3750      	adds	r7, #80	; 0x50
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
 800c5d6:	bf00      	nop
 800c5d8:	40023800 	.word	0x40023800
 800c5dc:	40007000 	.word	0x40007000

0800c5e0 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800c5e4:	4b1a      	ldr	r3, [pc, #104]	; (800c650 <_ZL12MX_SPI1_Initv+0x70>)
 800c5e6:	4a1b      	ldr	r2, [pc, #108]	; (800c654 <_ZL12MX_SPI1_Initv+0x74>)
 800c5e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800c5ea:	4b19      	ldr	r3, [pc, #100]	; (800c650 <_ZL12MX_SPI1_Initv+0x70>)
 800c5ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 800c5f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800c5f2:	4b17      	ldr	r3, [pc, #92]	; (800c650 <_ZL12MX_SPI1_Initv+0x70>)
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800c5f8:	4b15      	ldr	r3, [pc, #84]	; (800c650 <_ZL12MX_SPI1_Initv+0x70>)
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800c5fe:	4b14      	ldr	r3, [pc, #80]	; (800c650 <_ZL12MX_SPI1_Initv+0x70>)
 800c600:	2202      	movs	r2, #2
 800c602:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800c604:	4b12      	ldr	r3, [pc, #72]	; (800c650 <_ZL12MX_SPI1_Initv+0x70>)
 800c606:	2201      	movs	r2, #1
 800c608:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800c60a:	4b11      	ldr	r3, [pc, #68]	; (800c650 <_ZL12MX_SPI1_Initv+0x70>)
 800c60c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c610:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800c612:	4b0f      	ldr	r3, [pc, #60]	; (800c650 <_ZL12MX_SPI1_Initv+0x70>)
 800c614:	2210      	movs	r2, #16
 800c616:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c618:	4b0d      	ldr	r3, [pc, #52]	; (800c650 <_ZL12MX_SPI1_Initv+0x70>)
 800c61a:	2200      	movs	r2, #0
 800c61c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800c61e:	4b0c      	ldr	r3, [pc, #48]	; (800c650 <_ZL12MX_SPI1_Initv+0x70>)
 800c620:	2200      	movs	r2, #0
 800c622:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c624:	4b0a      	ldr	r3, [pc, #40]	; (800c650 <_ZL12MX_SPI1_Initv+0x70>)
 800c626:	2200      	movs	r2, #0
 800c628:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800c62a:	4b09      	ldr	r3, [pc, #36]	; (800c650 <_ZL12MX_SPI1_Initv+0x70>)
 800c62c:	220a      	movs	r2, #10
 800c62e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800c630:	4807      	ldr	r0, [pc, #28]	; (800c650 <_ZL12MX_SPI1_Initv+0x70>)
 800c632:	f001 fe7b 	bl	800e32c <HAL_SPI_Init>
 800c636:	4603      	mov	r3, r0
 800c638:	2b00      	cmp	r3, #0
 800c63a:	bf14      	ite	ne
 800c63c:	2301      	movne	r3, #1
 800c63e:	2300      	moveq	r3, #0
 800c640:	b2db      	uxtb	r3, r3
 800c642:	2b00      	cmp	r3, #0
 800c644:	d001      	beq.n	800c64a <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800c646:	f000 f95d 	bl	800c904 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800c64a:	bf00      	nop
 800c64c:	bd80      	pop	{r7, pc}
 800c64e:	bf00      	nop
 800c650:	200002a8 	.word	0x200002a8
 800c654:	40013000 	.word	0x40013000

0800c658 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b086      	sub	sp, #24
 800c65c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c65e:	f107 0308 	add.w	r3, r7, #8
 800c662:	2200      	movs	r2, #0
 800c664:	601a      	str	r2, [r3, #0]
 800c666:	605a      	str	r2, [r3, #4]
 800c668:	609a      	str	r2, [r3, #8]
 800c66a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c66c:	463b      	mov	r3, r7
 800c66e:	2200      	movs	r2, #0
 800c670:	601a      	str	r2, [r3, #0]
 800c672:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800c674:	4b24      	ldr	r3, [pc, #144]	; (800c708 <_ZL12MX_TIM2_Initv+0xb0>)
 800c676:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c67a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800c67c:	4b22      	ldr	r3, [pc, #136]	; (800c708 <_ZL12MX_TIM2_Initv+0xb0>)
 800c67e:	2200      	movs	r2, #0
 800c680:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c682:	4b21      	ldr	r3, [pc, #132]	; (800c708 <_ZL12MX_TIM2_Initv+0xb0>)
 800c684:	2200      	movs	r2, #0
 800c686:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1800000;
 800c688:	4b1f      	ldr	r3, [pc, #124]	; (800c708 <_ZL12MX_TIM2_Initv+0xb0>)
 800c68a:	4a20      	ldr	r2, [pc, #128]	; (800c70c <_ZL12MX_TIM2_Initv+0xb4>)
 800c68c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c68e:	4b1e      	ldr	r3, [pc, #120]	; (800c708 <_ZL12MX_TIM2_Initv+0xb0>)
 800c690:	2200      	movs	r2, #0
 800c692:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800c694:	4b1c      	ldr	r3, [pc, #112]	; (800c708 <_ZL12MX_TIM2_Initv+0xb0>)
 800c696:	2280      	movs	r2, #128	; 0x80
 800c698:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800c69a:	481b      	ldr	r0, [pc, #108]	; (800c708 <_ZL12MX_TIM2_Initv+0xb0>)
 800c69c:	f002 fbee 	bl	800ee7c <HAL_TIM_Base_Init>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	bf14      	ite	ne
 800c6a6:	2301      	movne	r3, #1
 800c6a8:	2300      	moveq	r3, #0
 800c6aa:	b2db      	uxtb	r3, r3
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d001      	beq.n	800c6b4 <_ZL12MX_TIM2_Initv+0x5c>
  {
    Error_Handler();
 800c6b0:	f000 f928 	bl	800c904 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c6b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c6b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800c6ba:	f107 0308 	add.w	r3, r7, #8
 800c6be:	4619      	mov	r1, r3
 800c6c0:	4811      	ldr	r0, [pc, #68]	; (800c708 <_ZL12MX_TIM2_Initv+0xb0>)
 800c6c2:	f002 fda3 	bl	800f20c <HAL_TIM_ConfigClockSource>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	bf14      	ite	ne
 800c6cc:	2301      	movne	r3, #1
 800c6ce:	2300      	moveq	r3, #0
 800c6d0:	b2db      	uxtb	r3, r3
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d001      	beq.n	800c6da <_ZL12MX_TIM2_Initv+0x82>
  {
    Error_Handler();
 800c6d6:	f000 f915 	bl	800c904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c6e2:	463b      	mov	r3, r7
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	4808      	ldr	r0, [pc, #32]	; (800c708 <_ZL12MX_TIM2_Initv+0xb0>)
 800c6e8:	f002 ffba 	bl	800f660 <HAL_TIMEx_MasterConfigSynchronization>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	bf14      	ite	ne
 800c6f2:	2301      	movne	r3, #1
 800c6f4:	2300      	moveq	r3, #0
 800c6f6:	b2db      	uxtb	r3, r3
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d001      	beq.n	800c700 <_ZL12MX_TIM2_Initv+0xa8>
  {
    Error_Handler();
 800c6fc:	f000 f902 	bl	800c904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800c700:	bf00      	nop
 800c702:	3718      	adds	r7, #24
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}
 800c708:	20000300 	.word	0x20000300
 800c70c:	001b7740 	.word	0x001b7740

0800c710 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800c714:	4b13      	ldr	r3, [pc, #76]	; (800c764 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c716:	4a14      	ldr	r2, [pc, #80]	; (800c768 <_ZL19MX_USART2_UART_Initv+0x58>)
 800c718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800c71a:	4b12      	ldr	r3, [pc, #72]	; (800c764 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c71c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800c722:	4b10      	ldr	r3, [pc, #64]	; (800c764 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c724:	2200      	movs	r2, #0
 800c726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800c728:	4b0e      	ldr	r3, [pc, #56]	; (800c764 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c72a:	2200      	movs	r2, #0
 800c72c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800c72e:	4b0d      	ldr	r3, [pc, #52]	; (800c764 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c730:	2200      	movs	r2, #0
 800c732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800c734:	4b0b      	ldr	r3, [pc, #44]	; (800c764 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c736:	220c      	movs	r2, #12
 800c738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c73a:	4b0a      	ldr	r3, [pc, #40]	; (800c764 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c73c:	2200      	movs	r2, #0
 800c73e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800c740:	4b08      	ldr	r3, [pc, #32]	; (800c764 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c742:	2200      	movs	r2, #0
 800c744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800c746:	4807      	ldr	r0, [pc, #28]	; (800c764 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c748:	f003 f81a 	bl	800f780 <HAL_UART_Init>
 800c74c:	4603      	mov	r3, r0
 800c74e:	2b00      	cmp	r3, #0
 800c750:	bf14      	ite	ne
 800c752:	2301      	movne	r3, #1
 800c754:	2300      	moveq	r3, #0
 800c756:	b2db      	uxtb	r3, r3
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d001      	beq.n	800c760 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 800c75c:	f000 f8d2 	bl	800c904 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800c760:	bf00      	nop
 800c762:	bd80      	pop	{r7, pc}
 800c764:	20000348 	.word	0x20000348
 800c768:	40004400 	.word	0x40004400

0800c76c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b08a      	sub	sp, #40	; 0x28
 800c770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c772:	f107 0314 	add.w	r3, r7, #20
 800c776:	2200      	movs	r2, #0
 800c778:	601a      	str	r2, [r3, #0]
 800c77a:	605a      	str	r2, [r3, #4]
 800c77c:	609a      	str	r2, [r3, #8]
 800c77e:	60da      	str	r2, [r3, #12]
 800c780:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c782:	2300      	movs	r3, #0
 800c784:	613b      	str	r3, [r7, #16]
 800c786:	4b38      	ldr	r3, [pc, #224]	; (800c868 <_ZL12MX_GPIO_Initv+0xfc>)
 800c788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c78a:	4a37      	ldr	r2, [pc, #220]	; (800c868 <_ZL12MX_GPIO_Initv+0xfc>)
 800c78c:	f043 0304 	orr.w	r3, r3, #4
 800c790:	6313      	str	r3, [r2, #48]	; 0x30
 800c792:	4b35      	ldr	r3, [pc, #212]	; (800c868 <_ZL12MX_GPIO_Initv+0xfc>)
 800c794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c796:	f003 0304 	and.w	r3, r3, #4
 800c79a:	613b      	str	r3, [r7, #16]
 800c79c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c79e:	2300      	movs	r3, #0
 800c7a0:	60fb      	str	r3, [r7, #12]
 800c7a2:	4b31      	ldr	r3, [pc, #196]	; (800c868 <_ZL12MX_GPIO_Initv+0xfc>)
 800c7a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7a6:	4a30      	ldr	r2, [pc, #192]	; (800c868 <_ZL12MX_GPIO_Initv+0xfc>)
 800c7a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7ac:	6313      	str	r3, [r2, #48]	; 0x30
 800c7ae:	4b2e      	ldr	r3, [pc, #184]	; (800c868 <_ZL12MX_GPIO_Initv+0xfc>)
 800c7b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7b6:	60fb      	str	r3, [r7, #12]
 800c7b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	60bb      	str	r3, [r7, #8]
 800c7be:	4b2a      	ldr	r3, [pc, #168]	; (800c868 <_ZL12MX_GPIO_Initv+0xfc>)
 800c7c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7c2:	4a29      	ldr	r2, [pc, #164]	; (800c868 <_ZL12MX_GPIO_Initv+0xfc>)
 800c7c4:	f043 0301 	orr.w	r3, r3, #1
 800c7c8:	6313      	str	r3, [r2, #48]	; 0x30
 800c7ca:	4b27      	ldr	r3, [pc, #156]	; (800c868 <_ZL12MX_GPIO_Initv+0xfc>)
 800c7cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7ce:	f003 0301 	and.w	r3, r3, #1
 800c7d2:	60bb      	str	r3, [r7, #8]
 800c7d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	607b      	str	r3, [r7, #4]
 800c7da:	4b23      	ldr	r3, [pc, #140]	; (800c868 <_ZL12MX_GPIO_Initv+0xfc>)
 800c7dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7de:	4a22      	ldr	r2, [pc, #136]	; (800c868 <_ZL12MX_GPIO_Initv+0xfc>)
 800c7e0:	f043 0302 	orr.w	r3, r3, #2
 800c7e4:	6313      	str	r3, [r2, #48]	; 0x30
 800c7e6:	4b20      	ldr	r3, [pc, #128]	; (800c868 <_ZL12MX_GPIO_Initv+0xfc>)
 800c7e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7ea:	f003 0302 	and.w	r3, r3, #2
 800c7ee:	607b      	str	r3, [r7, #4]
 800c7f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ssel1_Pin|LD2_Pin|ssel2_Pin, GPIO_PIN_RESET);
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	f44f 6186 	mov.w	r1, #1072	; 0x430
 800c7f8:	481c      	ldr	r0, [pc, #112]	; (800c86c <_ZL12MX_GPIO_Initv+0x100>)
 800c7fa:	f000 ff45 	bl	800d688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, reset_shield_2_Pin|reset_shield_1_Pin, GPIO_PIN_RESET);
 800c7fe:	2200      	movs	r2, #0
 800c800:	2130      	movs	r1, #48	; 0x30
 800c802:	481b      	ldr	r0, [pc, #108]	; (800c870 <_ZL12MX_GPIO_Initv+0x104>)
 800c804:	f000 ff40 	bl	800d688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800c808:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c80c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800c80e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800c812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c814:	2300      	movs	r3, #0
 800c816:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800c818:	f107 0314 	add.w	r3, r7, #20
 800c81c:	4619      	mov	r1, r3
 800c81e:	4815      	ldr	r0, [pc, #84]	; (800c874 <_ZL12MX_GPIO_Initv+0x108>)
 800c820:	f000 fd9e 	bl	800d360 <HAL_GPIO_Init>

  /*Configure GPIO pins : ssel1_Pin LD2_Pin ssel2_Pin */
  GPIO_InitStruct.Pin = ssel1_Pin|LD2_Pin|ssel2_Pin;
 800c824:	f44f 6386 	mov.w	r3, #1072	; 0x430
 800c828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c82a:	2301      	movs	r3, #1
 800c82c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c82e:	2300      	movs	r3, #0
 800c830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c832:	2300      	movs	r3, #0
 800c834:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c836:	f107 0314 	add.w	r3, r7, #20
 800c83a:	4619      	mov	r1, r3
 800c83c:	480b      	ldr	r0, [pc, #44]	; (800c86c <_ZL12MX_GPIO_Initv+0x100>)
 800c83e:	f000 fd8f 	bl	800d360 <HAL_GPIO_Init>

  /*Configure GPIO pins : reset_shield_2_Pin reset_shield_1_Pin */
  GPIO_InitStruct.Pin = reset_shield_2_Pin|reset_shield_1_Pin;
 800c842:	2330      	movs	r3, #48	; 0x30
 800c844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c846:	2301      	movs	r3, #1
 800c848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c84a:	2300      	movs	r3, #0
 800c84c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c84e:	2300      	movs	r3, #0
 800c850:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c852:	f107 0314 	add.w	r3, r7, #20
 800c856:	4619      	mov	r1, r3
 800c858:	4805      	ldr	r0, [pc, #20]	; (800c870 <_ZL12MX_GPIO_Initv+0x104>)
 800c85a:	f000 fd81 	bl	800d360 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800c85e:	bf00      	nop
 800c860:	3728      	adds	r7, #40	; 0x28
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
 800c866:	bf00      	nop
 800c868:	40023800 	.word	0x40023800
 800c86c:	40020000 	.word	0x40020000
 800c870:	40020400 	.word	0x40020400
 800c874:	40020800 	.word	0x40020800

0800c878 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b082      	sub	sp, #8
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	4a05      	ldr	r2, [pc, #20]	; (800c898 <HAL_UART_TxCpltCallback+0x20>)
 800c884:	4293      	cmp	r3, r2
 800c886:	d102      	bne.n	800c88e <HAL_UART_TxCpltCallback+0x16>
	{
		msg_handler.process_txclpt_callback();
 800c888:	4804      	ldr	r0, [pc, #16]	; (800c89c <HAL_UART_TxCpltCallback+0x24>)
 800c88a:	f000 f875 	bl	800c978 <_ZN10MsgHandler23process_txclpt_callbackEv>
	}


}
 800c88e:	bf00      	nop
 800c890:	3708      	adds	r7, #8
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
 800c896:	bf00      	nop
 800c898:	20000348 	.word	0x20000348
 800c89c:	2000038c 	.word	0x2000038c

0800c8a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b082      	sub	sp, #8
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
	if( huart == &huart2)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	4a05      	ldr	r2, [pc, #20]	; (800c8c0 <HAL_UART_RxCpltCallback+0x20>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d102      	bne.n	800c8b6 <HAL_UART_RxCpltCallback+0x16>
	{
		msg_handler.process_rxclpt_callback();
 800c8b0:	4804      	ldr	r0, [pc, #16]	; (800c8c4 <HAL_UART_RxCpltCallback+0x24>)
 800c8b2:	f000 f86e 	bl	800c992 <_ZN10MsgHandler23process_rxclpt_callbackEv>
	}

}
 800c8b6:	bf00      	nop
 800c8b8:	3708      	adds	r7, #8
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}
 800c8be:	bf00      	nop
 800c8c0:	20000348 	.word	0x20000348
 800c8c4:	2000038c 	.word	0x2000038c

0800c8c8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b082      	sub	sp, #8
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim2 )
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	4a09      	ldr	r2, [pc, #36]	; (800c8f8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d10b      	bne.n	800c8f0 <HAL_TIM_PeriodElapsedCallback+0x28>
  {

	  timer_timeout_count++;
 800c8d8:	4b08      	ldr	r3, [pc, #32]	; (800c8fc <HAL_TIM_PeriodElapsedCallback+0x34>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	3301      	adds	r3, #1
 800c8de:	4a07      	ldr	r2, [pc, #28]	; (800c8fc <HAL_TIM_PeriodElapsedCallback+0x34>)
 800c8e0:	6013      	str	r3, [r2, #0]
	  if (timer_timeout_count > 10)
 800c8e2:	4b06      	ldr	r3, [pc, #24]	; (800c8fc <HAL_TIM_PeriodElapsedCallback+0x34>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	2b0a      	cmp	r3, #10
 800c8e8:	dd02      	ble.n	800c8f0 <HAL_TIM_PeriodElapsedCallback+0x28>
	  {
		  msg_handler.unlock_timeout();
 800c8ea:	4805      	ldr	r0, [pc, #20]	; (800c900 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800c8ec:	f7ff fd0b 	bl	800c306 <_ZN10MsgHandler14unlock_timeoutEv>
	  }

  }
}
 800c8f0:	bf00      	nop
 800c8f2:	3708      	adds	r7, #8
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}
 800c8f8:	20000300 	.word	0x20000300
 800c8fc:	20000398 	.word	0x20000398
 800c900:	2000038c 	.word	0x2000038c

0800c904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c904:	b480      	push	{r7}
 800c906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800c908:	b672      	cpsid	i
}
 800c90a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800c90c:	e7fe      	b.n	800c90c <Error_Handler+0x8>
	...

0800c910 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800c910:	b580      	push	{r7, lr}
 800c912:	b082      	sub	sp, #8
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	6039      	str	r1, [r7, #0]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	d108      	bne.n	800c932 <_Z41__static_initialization_and_destruction_0ii+0x22>
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c926:	4293      	cmp	r3, r2
 800c928:	d103      	bne.n	800c932 <_Z41__static_initialization_and_destruction_0ii+0x22>
MsgHandler msg_handler(&huart2);
 800c92a:	4909      	ldr	r1, [pc, #36]	; (800c950 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800c92c:	4809      	ldr	r0, [pc, #36]	; (800c954 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800c92e:	f7ff fcbb 	bl	800c2a8 <_ZN10MsgHandlerC1EP20__UART_HandleTypeDef>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d107      	bne.n	800c948 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c93e:	4293      	cmp	r3, r2
 800c940:	d102      	bne.n	800c948 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800c942:	4804      	ldr	r0, [pc, #16]	; (800c954 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800c944:	f7ff fccd 	bl	800c2e2 <_ZN10MsgHandlerD1Ev>
}
 800c948:	bf00      	nop
 800c94a:	3708      	adds	r7, #8
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}
 800c950:	20000348 	.word	0x20000348
 800c954:	2000038c 	.word	0x2000038c

0800c958 <_GLOBAL__sub_I_hspi1>:
 800c958:	b580      	push	{r7, lr}
 800c95a:	af00      	add	r7, sp, #0
 800c95c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c960:	2001      	movs	r0, #1
 800c962:	f7ff ffd5 	bl	800c910 <_Z41__static_initialization_and_destruction_0ii>
 800c966:	bd80      	pop	{r7, pc}

0800c968 <_GLOBAL__sub_D_hspi1>:
 800c968:	b580      	push	{r7, lr}
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c970:	2000      	movs	r0, #0
 800c972:	f7ff ffcd 	bl	800c910 <_Z41__static_initialization_and_destruction_0ii>
 800c976:	bd80      	pop	{r7, pc}

0800c978 <_ZN10MsgHandler23process_txclpt_callbackEv>:
#include "msg_handler.hpp"

void MsgHandler::process_txclpt_callback()
{
 800c978:	b480      	push	{r7}
 800c97a:	b083      	sub	sp, #12
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
	sending =false;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2200      	movs	r2, #0
 800c984:	725a      	strb	r2, [r3, #9]
}
 800c986:	bf00      	nop
 800c988:	370c      	adds	r7, #12
 800c98a:	46bd      	mov	sp, r7
 800c98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c990:	4770      	bx	lr

0800c992 <_ZN10MsgHandler23process_rxclpt_callbackEv>:

void MsgHandler::process_rxclpt_callback()
{
 800c992:	b480      	push	{r7}
 800c994:	b083      	sub	sp, #12
 800c996:	af00      	add	r7, sp, #0
 800c998:	6078      	str	r0, [r7, #4]
	receiving = false;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2200      	movs	r2, #0
 800c99e:	729a      	strb	r2, [r3, #10]
	received_motor_speeds = true;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	721a      	strb	r2, [r3, #8]
}
 800c9a6:	bf00      	nop
 800c9a8:	370c      	adds	r7, #12
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b0:	4770      	bx	lr

0800c9b2 <_ZN10MsgHandler17send_motor_speedsEPf>:


void MsgHandler::send_motor_speeds(float* input_motor_speeds)
{
 800c9b2:	b580      	push	{r7, lr}
 800c9b4:	b082      	sub	sp, #8
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
 800c9ba:	6039      	str	r1, [r7, #0]
	while(sending || receiving);
 800c9bc:	bf00      	nop
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	7a5b      	ldrb	r3, [r3, #9]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d1fb      	bne.n	800c9be <_ZN10MsgHandler17send_motor_speedsEPf+0xc>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	7a9b      	ldrb	r3, [r3, #10]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d1f7      	bne.n	800c9be <_ZN10MsgHandler17send_motor_speedsEPf+0xc>
	sending = true;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2201      	movs	r2, #1
 800c9d2:	725a      	strb	r2, [r3, #9]
	HAL_UART_Transmit_IT(huart, (uint8_t*)input_motor_speeds, 4*sizeof(float));
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	2210      	movs	r2, #16
 800c9da:	6839      	ldr	r1, [r7, #0]
 800c9dc:	4618      	mov	r0, r3
 800c9de:	f002 ff1c 	bl	800f81a <HAL_UART_Transmit_IT>
}
 800c9e2:	bf00      	nop
 800c9e4:	3708      	adds	r7, #8
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}

0800c9ea <_ZN10MsgHandler28prepare_receive_motor_speedsEv>:


void MsgHandler::prepare_receive_motor_speeds()
{
 800c9ea:	b580      	push	{r7, lr}
 800c9ec:	b082      	sub	sp, #8
 800c9ee:	af00      	add	r7, sp, #0
 800c9f0:	6078      	str	r0, [r7, #4]
	while(sending || receiving);
 800c9f2:	bf00      	nop
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	7a5b      	ldrb	r3, [r3, #9]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d1fb      	bne.n	800c9f4 <_ZN10MsgHandler28prepare_receive_motor_speedsEv+0xa>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	7a9b      	ldrb	r3, [r3, #10]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d1f7      	bne.n	800c9f4 <_ZN10MsgHandler28prepare_receive_motor_speedsEv+0xa>
	receiving = true;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2201      	movs	r2, #1
 800ca08:	729a      	strb	r2, [r3, #10]
	HAL_UART_Receive_IT(huart, (uint8_t*)motor_speeds, 4*sizeof(float));
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6818      	ldr	r0, [r3, #0]
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	685b      	ldr	r3, [r3, #4]
 800ca12:	2210      	movs	r2, #16
 800ca14:	4619      	mov	r1, r3
 800ca16:	f002 ff45 	bl	800f8a4 <HAL_UART_Receive_IT>
}
 800ca1a:	bf00      	nop
 800ca1c:	3708      	adds	r7, #8
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}

0800ca22 <_ZN10MsgHandler25get_received_motor_speedsEPf>:


bool MsgHandler::get_received_motor_speeds(float* to_fill_motor_speeds)
{
 800ca22:	b580      	push	{r7, lr}
 800ca24:	b082      	sub	sp, #8
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	6078      	str	r0, [r7, #4]
 800ca2a:	6039      	str	r1, [r7, #0]
	if( received_motor_speeds )
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	7a1b      	ldrb	r3, [r3, #8]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d00f      	beq.n	800ca54 <_ZN10MsgHandler25get_received_motor_speedsEPf+0x32>
	{
		if( motor_speeds != NULL)
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	685b      	ldr	r3, [r3, #4]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d00b      	beq.n	800ca54 <_ZN10MsgHandler25get_received_motor_speedsEPf+0x32>
		{
			memcpy(to_fill_motor_speeds,motor_speeds,4*sizeof(float));
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	685b      	ldr	r3, [r3, #4]
 800ca40:	2210      	movs	r2, #16
 800ca42:	4619      	mov	r1, r3
 800ca44:	6838      	ldr	r0, [r7, #0]
 800ca46:	f005 fc2c 	bl	80122a2 <memcpy>
			received_motor_speeds = false;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	721a      	strb	r2, [r3, #8]
			return true;
 800ca50:	2301      	movs	r3, #1
 800ca52:	e000      	b.n	800ca56 <_ZN10MsgHandler25get_received_motor_speedsEPf+0x34>
		}
	}
	return false;
 800ca54:	2300      	movs	r3, #0
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3708      	adds	r7, #8
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
	...

0800ca60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b082      	sub	sp, #8
 800ca64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ca66:	2300      	movs	r3, #0
 800ca68:	607b      	str	r3, [r7, #4]
 800ca6a:	4b10      	ldr	r3, [pc, #64]	; (800caac <HAL_MspInit+0x4c>)
 800ca6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca6e:	4a0f      	ldr	r2, [pc, #60]	; (800caac <HAL_MspInit+0x4c>)
 800ca70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ca74:	6453      	str	r3, [r2, #68]	; 0x44
 800ca76:	4b0d      	ldr	r3, [pc, #52]	; (800caac <HAL_MspInit+0x4c>)
 800ca78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca7e:	607b      	str	r3, [r7, #4]
 800ca80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ca82:	2300      	movs	r3, #0
 800ca84:	603b      	str	r3, [r7, #0]
 800ca86:	4b09      	ldr	r3, [pc, #36]	; (800caac <HAL_MspInit+0x4c>)
 800ca88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca8a:	4a08      	ldr	r2, [pc, #32]	; (800caac <HAL_MspInit+0x4c>)
 800ca8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca90:	6413      	str	r3, [r2, #64]	; 0x40
 800ca92:	4b06      	ldr	r3, [pc, #24]	; (800caac <HAL_MspInit+0x4c>)
 800ca94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca9a:	603b      	str	r3, [r7, #0]
 800ca9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800ca9e:	2007      	movs	r0, #7
 800caa0:	f000 fb8a 	bl	800d1b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800caa4:	bf00      	nop
 800caa6:	3708      	adds	r7, #8
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}
 800caac:	40023800 	.word	0x40023800

0800cab0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b08a      	sub	sp, #40	; 0x28
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cab8:	f107 0314 	add.w	r3, r7, #20
 800cabc:	2200      	movs	r2, #0
 800cabe:	601a      	str	r2, [r3, #0]
 800cac0:	605a      	str	r2, [r3, #4]
 800cac2:	609a      	str	r2, [r3, #8]
 800cac4:	60da      	str	r2, [r3, #12]
 800cac6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	4a28      	ldr	r2, [pc, #160]	; (800cb70 <HAL_SPI_MspInit+0xc0>)
 800cace:	4293      	cmp	r3, r2
 800cad0:	d149      	bne.n	800cb66 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800cad2:	2300      	movs	r3, #0
 800cad4:	613b      	str	r3, [r7, #16]
 800cad6:	4b27      	ldr	r3, [pc, #156]	; (800cb74 <HAL_SPI_MspInit+0xc4>)
 800cad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cada:	4a26      	ldr	r2, [pc, #152]	; (800cb74 <HAL_SPI_MspInit+0xc4>)
 800cadc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cae0:	6453      	str	r3, [r2, #68]	; 0x44
 800cae2:	4b24      	ldr	r3, [pc, #144]	; (800cb74 <HAL_SPI_MspInit+0xc4>)
 800cae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cae6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800caea:	613b      	str	r3, [r7, #16]
 800caec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800caee:	2300      	movs	r3, #0
 800caf0:	60fb      	str	r3, [r7, #12]
 800caf2:	4b20      	ldr	r3, [pc, #128]	; (800cb74 <HAL_SPI_MspInit+0xc4>)
 800caf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caf6:	4a1f      	ldr	r2, [pc, #124]	; (800cb74 <HAL_SPI_MspInit+0xc4>)
 800caf8:	f043 0301 	orr.w	r3, r3, #1
 800cafc:	6313      	str	r3, [r2, #48]	; 0x30
 800cafe:	4b1d      	ldr	r3, [pc, #116]	; (800cb74 <HAL_SPI_MspInit+0xc4>)
 800cb00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb02:	f003 0301 	and.w	r3, r3, #1
 800cb06:	60fb      	str	r3, [r7, #12]
 800cb08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	60bb      	str	r3, [r7, #8]
 800cb0e:	4b19      	ldr	r3, [pc, #100]	; (800cb74 <HAL_SPI_MspInit+0xc4>)
 800cb10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb12:	4a18      	ldr	r2, [pc, #96]	; (800cb74 <HAL_SPI_MspInit+0xc4>)
 800cb14:	f043 0302 	orr.w	r3, r3, #2
 800cb18:	6313      	str	r3, [r2, #48]	; 0x30
 800cb1a:	4b16      	ldr	r3, [pc, #88]	; (800cb74 <HAL_SPI_MspInit+0xc4>)
 800cb1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb1e:	f003 0302 	and.w	r3, r3, #2
 800cb22:	60bb      	str	r3, [r7, #8]
 800cb24:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800cb26:	23c0      	movs	r3, #192	; 0xc0
 800cb28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb2a:	2302      	movs	r3, #2
 800cb2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cb32:	2303      	movs	r3, #3
 800cb34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800cb36:	2305      	movs	r3, #5
 800cb38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cb3a:	f107 0314 	add.w	r3, r7, #20
 800cb3e:	4619      	mov	r1, r3
 800cb40:	480d      	ldr	r0, [pc, #52]	; (800cb78 <HAL_SPI_MspInit+0xc8>)
 800cb42:	f000 fc0d 	bl	800d360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800cb46:	2308      	movs	r3, #8
 800cb48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb4a:	2302      	movs	r3, #2
 800cb4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cb52:	2303      	movs	r3, #3
 800cb54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800cb56:	2305      	movs	r3, #5
 800cb58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cb5a:	f107 0314 	add.w	r3, r7, #20
 800cb5e:	4619      	mov	r1, r3
 800cb60:	4806      	ldr	r0, [pc, #24]	; (800cb7c <HAL_SPI_MspInit+0xcc>)
 800cb62:	f000 fbfd 	bl	800d360 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800cb66:	bf00      	nop
 800cb68:	3728      	adds	r7, #40	; 0x28
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}
 800cb6e:	bf00      	nop
 800cb70:	40013000 	.word	0x40013000
 800cb74:	40023800 	.word	0x40023800
 800cb78:	40020000 	.word	0x40020000
 800cb7c:	40020400 	.word	0x40020400

0800cb80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b084      	sub	sp, #16
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb90:	d115      	bne.n	800cbbe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800cb92:	2300      	movs	r3, #0
 800cb94:	60fb      	str	r3, [r7, #12]
 800cb96:	4b0c      	ldr	r3, [pc, #48]	; (800cbc8 <HAL_TIM_Base_MspInit+0x48>)
 800cb98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb9a:	4a0b      	ldr	r2, [pc, #44]	; (800cbc8 <HAL_TIM_Base_MspInit+0x48>)
 800cb9c:	f043 0301 	orr.w	r3, r3, #1
 800cba0:	6413      	str	r3, [r2, #64]	; 0x40
 800cba2:	4b09      	ldr	r3, [pc, #36]	; (800cbc8 <HAL_TIM_Base_MspInit+0x48>)
 800cba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cba6:	f003 0301 	and.w	r3, r3, #1
 800cbaa:	60fb      	str	r3, [r7, #12]
 800cbac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 800cbae:	2202      	movs	r2, #2
 800cbb0:	2100      	movs	r1, #0
 800cbb2:	201c      	movs	r0, #28
 800cbb4:	f000 fb0b 	bl	800d1ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800cbb8:	201c      	movs	r0, #28
 800cbba:	f000 fb24 	bl	800d206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800cbbe:	bf00      	nop
 800cbc0:	3710      	adds	r7, #16
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}
 800cbc6:	bf00      	nop
 800cbc8:	40023800 	.word	0x40023800

0800cbcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b08a      	sub	sp, #40	; 0x28
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cbd4:	f107 0314 	add.w	r3, r7, #20
 800cbd8:	2200      	movs	r2, #0
 800cbda:	601a      	str	r2, [r3, #0]
 800cbdc:	605a      	str	r2, [r3, #4]
 800cbde:	609a      	str	r2, [r3, #8]
 800cbe0:	60da      	str	r2, [r3, #12]
 800cbe2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	4a1d      	ldr	r2, [pc, #116]	; (800cc60 <HAL_UART_MspInit+0x94>)
 800cbea:	4293      	cmp	r3, r2
 800cbec:	d133      	bne.n	800cc56 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800cbee:	2300      	movs	r3, #0
 800cbf0:	613b      	str	r3, [r7, #16]
 800cbf2:	4b1c      	ldr	r3, [pc, #112]	; (800cc64 <HAL_UART_MspInit+0x98>)
 800cbf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbf6:	4a1b      	ldr	r2, [pc, #108]	; (800cc64 <HAL_UART_MspInit+0x98>)
 800cbf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cbfc:	6413      	str	r3, [r2, #64]	; 0x40
 800cbfe:	4b19      	ldr	r3, [pc, #100]	; (800cc64 <HAL_UART_MspInit+0x98>)
 800cc00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc06:	613b      	str	r3, [r7, #16]
 800cc08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	60fb      	str	r3, [r7, #12]
 800cc0e:	4b15      	ldr	r3, [pc, #84]	; (800cc64 <HAL_UART_MspInit+0x98>)
 800cc10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc12:	4a14      	ldr	r2, [pc, #80]	; (800cc64 <HAL_UART_MspInit+0x98>)
 800cc14:	f043 0301 	orr.w	r3, r3, #1
 800cc18:	6313      	str	r3, [r2, #48]	; 0x30
 800cc1a:	4b12      	ldr	r3, [pc, #72]	; (800cc64 <HAL_UART_MspInit+0x98>)
 800cc1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc1e:	f003 0301 	and.w	r3, r3, #1
 800cc22:	60fb      	str	r3, [r7, #12]
 800cc24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800cc26:	230c      	movs	r3, #12
 800cc28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc2a:	2302      	movs	r3, #2
 800cc2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cc32:	2303      	movs	r3, #3
 800cc34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800cc36:	2307      	movs	r3, #7
 800cc38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cc3a:	f107 0314 	add.w	r3, r7, #20
 800cc3e:	4619      	mov	r1, r3
 800cc40:	4809      	ldr	r0, [pc, #36]	; (800cc68 <HAL_UART_MspInit+0x9c>)
 800cc42:	f000 fb8d 	bl	800d360 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800cc46:	2200      	movs	r2, #0
 800cc48:	2100      	movs	r1, #0
 800cc4a:	2026      	movs	r0, #38	; 0x26
 800cc4c:	f000 fabf 	bl	800d1ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800cc50:	2026      	movs	r0, #38	; 0x26
 800cc52:	f000 fad8 	bl	800d206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800cc56:	bf00      	nop
 800cc58:	3728      	adds	r7, #40	; 0x28
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}
 800cc5e:	bf00      	nop
 800cc60:	40004400 	.word	0x40004400
 800cc64:	40023800 	.word	0x40023800
 800cc68:	40020000 	.word	0x40020000

0800cc6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800cc70:	e7fe      	b.n	800cc70 <NMI_Handler+0x4>

0800cc72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800cc72:	b480      	push	{r7}
 800cc74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800cc76:	e7fe      	b.n	800cc76 <HardFault_Handler+0x4>

0800cc78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800cc7c:	e7fe      	b.n	800cc7c <MemManage_Handler+0x4>

0800cc7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800cc7e:	b480      	push	{r7}
 800cc80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800cc82:	e7fe      	b.n	800cc82 <BusFault_Handler+0x4>

0800cc84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800cc84:	b480      	push	{r7}
 800cc86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800cc88:	e7fe      	b.n	800cc88 <UsageFault_Handler+0x4>

0800cc8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800cc8a:	b480      	push	{r7}
 800cc8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800cc8e:	bf00      	nop
 800cc90:	46bd      	mov	sp, r7
 800cc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc96:	4770      	bx	lr

0800cc98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800cc98:	b480      	push	{r7}
 800cc9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800cc9c:	bf00      	nop
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca4:	4770      	bx	lr

0800cca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800cca6:	b480      	push	{r7}
 800cca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ccaa:	bf00      	nop
 800ccac:	46bd      	mov	sp, r7
 800ccae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb2:	4770      	bx	lr

0800ccb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ccb8:	f000 f96a 	bl	800cf90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ccbc:	bf00      	nop
 800ccbe:	bd80      	pop	{r7, pc}

0800ccc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800ccc4:	4802      	ldr	r0, [pc, #8]	; (800ccd0 <TIM2_IRQHandler+0x10>)
 800ccc6:	f002 f999 	bl	800effc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800ccca:	bf00      	nop
 800cccc:	bd80      	pop	{r7, pc}
 800ccce:	bf00      	nop
 800ccd0:	20000300 	.word	0x20000300

0800ccd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800ccd8:	4802      	ldr	r0, [pc, #8]	; (800cce4 <USART2_IRQHandler+0x10>)
 800ccda:	f002 fe13 	bl	800f904 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800ccde:	bf00      	nop
 800cce0:	bd80      	pop	{r7, pc}
 800cce2:	bf00      	nop
 800cce4:	20000348 	.word	0x20000348

0800cce8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800cce8:	b480      	push	{r7}
 800ccea:	af00      	add	r7, sp, #0
  return 1;
 800ccec:	2301      	movs	r3, #1
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr

0800ccf8 <_kill>:

int _kill(int pid, int sig)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b082      	sub	sp, #8
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800cd02:	f005 faa1 	bl	8012248 <__errno>
 800cd06:	4603      	mov	r3, r0
 800cd08:	2216      	movs	r2, #22
 800cd0a:	601a      	str	r2, [r3, #0]
  return -1;
 800cd0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3708      	adds	r7, #8
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}

0800cd18 <_exit>:

void _exit (int status)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b082      	sub	sp, #8
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800cd20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f7ff ffe7 	bl	800ccf8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800cd2a:	e7fe      	b.n	800cd2a <_exit+0x12>

0800cd2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b086      	sub	sp, #24
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	60f8      	str	r0, [r7, #12]
 800cd34:	60b9      	str	r1, [r7, #8]
 800cd36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cd38:	2300      	movs	r3, #0
 800cd3a:	617b      	str	r3, [r7, #20]
 800cd3c:	e00a      	b.n	800cd54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800cd3e:	f3af 8000 	nop.w
 800cd42:	4601      	mov	r1, r0
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	1c5a      	adds	r2, r3, #1
 800cd48:	60ba      	str	r2, [r7, #8]
 800cd4a:	b2ca      	uxtb	r2, r1
 800cd4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	3301      	adds	r3, #1
 800cd52:	617b      	str	r3, [r7, #20]
 800cd54:	697a      	ldr	r2, [r7, #20]
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	429a      	cmp	r2, r3
 800cd5a:	dbf0      	blt.n	800cd3e <_read+0x12>
  }

  return len;
 800cd5c:	687b      	ldr	r3, [r7, #4]
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3718      	adds	r7, #24
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}

0800cd66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800cd66:	b580      	push	{r7, lr}
 800cd68:	b086      	sub	sp, #24
 800cd6a:	af00      	add	r7, sp, #0
 800cd6c:	60f8      	str	r0, [r7, #12]
 800cd6e:	60b9      	str	r1, [r7, #8]
 800cd70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cd72:	2300      	movs	r3, #0
 800cd74:	617b      	str	r3, [r7, #20]
 800cd76:	e009      	b.n	800cd8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	1c5a      	adds	r2, r3, #1
 800cd7c:	60ba      	str	r2, [r7, #8]
 800cd7e:	781b      	ldrb	r3, [r3, #0]
 800cd80:	4618      	mov	r0, r3
 800cd82:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	3301      	adds	r3, #1
 800cd8a:	617b      	str	r3, [r7, #20]
 800cd8c:	697a      	ldr	r2, [r7, #20]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	dbf1      	blt.n	800cd78 <_write+0x12>
  }
  return len;
 800cd94:	687b      	ldr	r3, [r7, #4]
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3718      	adds	r7, #24
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}

0800cd9e <_close>:

int _close(int file)
{
 800cd9e:	b480      	push	{r7}
 800cda0:	b083      	sub	sp, #12
 800cda2:	af00      	add	r7, sp, #0
 800cda4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800cda6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	370c      	adds	r7, #12
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb4:	4770      	bx	lr

0800cdb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800cdb6:	b480      	push	{r7}
 800cdb8:	b083      	sub	sp, #12
 800cdba:	af00      	add	r7, sp, #0
 800cdbc:	6078      	str	r0, [r7, #4]
 800cdbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800cdc6:	605a      	str	r2, [r3, #4]
  return 0;
 800cdc8:	2300      	movs	r3, #0
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	370c      	adds	r7, #12
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd4:	4770      	bx	lr

0800cdd6 <_isatty>:

int _isatty(int file)
{
 800cdd6:	b480      	push	{r7}
 800cdd8:	b083      	sub	sp, #12
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800cdde:	2301      	movs	r3, #1
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	370c      	adds	r7, #12
 800cde4:	46bd      	mov	sp, r7
 800cde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdea:	4770      	bx	lr

0800cdec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800cdec:	b480      	push	{r7}
 800cdee:	b085      	sub	sp, #20
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	60f8      	str	r0, [r7, #12]
 800cdf4:	60b9      	str	r1, [r7, #8]
 800cdf6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800cdf8:	2300      	movs	r3, #0
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3714      	adds	r7, #20
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce04:	4770      	bx	lr
	...

0800ce08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b086      	sub	sp, #24
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ce10:	4a14      	ldr	r2, [pc, #80]	; (800ce64 <_sbrk+0x5c>)
 800ce12:	4b15      	ldr	r3, [pc, #84]	; (800ce68 <_sbrk+0x60>)
 800ce14:	1ad3      	subs	r3, r2, r3
 800ce16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800ce1c:	4b13      	ldr	r3, [pc, #76]	; (800ce6c <_sbrk+0x64>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d102      	bne.n	800ce2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ce24:	4b11      	ldr	r3, [pc, #68]	; (800ce6c <_sbrk+0x64>)
 800ce26:	4a12      	ldr	r2, [pc, #72]	; (800ce70 <_sbrk+0x68>)
 800ce28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ce2a:	4b10      	ldr	r3, [pc, #64]	; (800ce6c <_sbrk+0x64>)
 800ce2c:	681a      	ldr	r2, [r3, #0]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	4413      	add	r3, r2
 800ce32:	693a      	ldr	r2, [r7, #16]
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d207      	bcs.n	800ce48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800ce38:	f005 fa06 	bl	8012248 <__errno>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	220c      	movs	r2, #12
 800ce40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800ce42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce46:	e009      	b.n	800ce5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ce48:	4b08      	ldr	r3, [pc, #32]	; (800ce6c <_sbrk+0x64>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ce4e:	4b07      	ldr	r3, [pc, #28]	; (800ce6c <_sbrk+0x64>)
 800ce50:	681a      	ldr	r2, [r3, #0]
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	4413      	add	r3, r2
 800ce56:	4a05      	ldr	r2, [pc, #20]	; (800ce6c <_sbrk+0x64>)
 800ce58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3718      	adds	r7, #24
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}
 800ce64:	20020000 	.word	0x20020000
 800ce68:	00000400 	.word	0x00000400
 800ce6c:	200003b4 	.word	0x200003b4
 800ce70:	20000538 	.word	0x20000538

0800ce74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ce74:	b480      	push	{r7}
 800ce76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ce78:	4b06      	ldr	r3, [pc, #24]	; (800ce94 <SystemInit+0x20>)
 800ce7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce7e:	4a05      	ldr	r2, [pc, #20]	; (800ce94 <SystemInit+0x20>)
 800ce80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ce84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800ce88:	bf00      	nop
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce90:	4770      	bx	lr
 800ce92:	bf00      	nop
 800ce94:	e000ed00 	.word	0xe000ed00

0800ce98 <Reset_Handler>:
 800ce98:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ced0 <LoopFillZerobss+0x12>
 800ce9c:	480d      	ldr	r0, [pc, #52]	; (800ced4 <LoopFillZerobss+0x16>)
 800ce9e:	490e      	ldr	r1, [pc, #56]	; (800ced8 <LoopFillZerobss+0x1a>)
 800cea0:	4a0e      	ldr	r2, [pc, #56]	; (800cedc <LoopFillZerobss+0x1e>)
 800cea2:	2300      	movs	r3, #0
 800cea4:	e002      	b.n	800ceac <LoopCopyDataInit>

0800cea6 <CopyDataInit>:
 800cea6:	58d4      	ldr	r4, [r2, r3]
 800cea8:	50c4      	str	r4, [r0, r3]
 800ceaa:	3304      	adds	r3, #4

0800ceac <LoopCopyDataInit>:
 800ceac:	18c4      	adds	r4, r0, r3
 800ceae:	428c      	cmp	r4, r1
 800ceb0:	d3f9      	bcc.n	800cea6 <CopyDataInit>
 800ceb2:	4a0b      	ldr	r2, [pc, #44]	; (800cee0 <LoopFillZerobss+0x22>)
 800ceb4:	4c0b      	ldr	r4, [pc, #44]	; (800cee4 <LoopFillZerobss+0x26>)
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	e001      	b.n	800cebe <LoopFillZerobss>

0800ceba <FillZerobss>:
 800ceba:	6013      	str	r3, [r2, #0]
 800cebc:	3204      	adds	r2, #4

0800cebe <LoopFillZerobss>:
 800cebe:	42a2      	cmp	r2, r4
 800cec0:	d3fb      	bcc.n	800ceba <FillZerobss>
 800cec2:	f7ff ffd7 	bl	800ce74 <SystemInit>
 800cec6:	f005 f9c5 	bl	8012254 <__libc_init_array>
 800ceca:	f7ff fa2d 	bl	800c328 <main>
 800cece:	4770      	bx	lr
 800ced0:	20020000 	.word	0x20020000
 800ced4:	20000000 	.word	0x20000000
 800ced8:	200001dc 	.word	0x200001dc
 800cedc:	080177a8 	.word	0x080177a8
 800cee0:	200001dc 	.word	0x200001dc
 800cee4:	20000538 	.word	0x20000538

0800cee8 <ADC_IRQHandler>:
 800cee8:	e7fe      	b.n	800cee8 <ADC_IRQHandler>
	...

0800ceec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800cef0:	4b0e      	ldr	r3, [pc, #56]	; (800cf2c <HAL_Init+0x40>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	4a0d      	ldr	r2, [pc, #52]	; (800cf2c <HAL_Init+0x40>)
 800cef6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cefa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800cefc:	4b0b      	ldr	r3, [pc, #44]	; (800cf2c <HAL_Init+0x40>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	4a0a      	ldr	r2, [pc, #40]	; (800cf2c <HAL_Init+0x40>)
 800cf02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cf06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800cf08:	4b08      	ldr	r3, [pc, #32]	; (800cf2c <HAL_Init+0x40>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	4a07      	ldr	r2, [pc, #28]	; (800cf2c <HAL_Init+0x40>)
 800cf0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800cf14:	2003      	movs	r0, #3
 800cf16:	f000 f94f 	bl	800d1b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800cf1a:	2000      	movs	r0, #0
 800cf1c:	f000 f808 	bl	800cf30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800cf20:	f7ff fd9e 	bl	800ca60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800cf24:	2300      	movs	r3, #0
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	bd80      	pop	{r7, pc}
 800cf2a:	bf00      	nop
 800cf2c:	40023c00 	.word	0x40023c00

0800cf30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b082      	sub	sp, #8
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800cf38:	4b12      	ldr	r3, [pc, #72]	; (800cf84 <HAL_InitTick+0x54>)
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	4b12      	ldr	r3, [pc, #72]	; (800cf88 <HAL_InitTick+0x58>)
 800cf3e:	781b      	ldrb	r3, [r3, #0]
 800cf40:	4619      	mov	r1, r3
 800cf42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cf46:	fbb3 f3f1 	udiv	r3, r3, r1
 800cf4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f000 f967 	bl	800d222 <HAL_SYSTICK_Config>
 800cf54:	4603      	mov	r3, r0
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d001      	beq.n	800cf5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	e00e      	b.n	800cf7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2b0f      	cmp	r3, #15
 800cf62:	d80a      	bhi.n	800cf7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800cf64:	2200      	movs	r2, #0
 800cf66:	6879      	ldr	r1, [r7, #4]
 800cf68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf6c:	f000 f92f 	bl	800d1ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800cf70:	4a06      	ldr	r2, [pc, #24]	; (800cf8c <HAL_InitTick+0x5c>)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800cf76:	2300      	movs	r3, #0
 800cf78:	e000      	b.n	800cf7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800cf7a:	2301      	movs	r3, #1
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3708      	adds	r7, #8
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}
 800cf84:	20000000 	.word	0x20000000
 800cf88:	20000008 	.word	0x20000008
 800cf8c:	20000004 	.word	0x20000004

0800cf90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800cf90:	b480      	push	{r7}
 800cf92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800cf94:	4b06      	ldr	r3, [pc, #24]	; (800cfb0 <HAL_IncTick+0x20>)
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	461a      	mov	r2, r3
 800cf9a:	4b06      	ldr	r3, [pc, #24]	; (800cfb4 <HAL_IncTick+0x24>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	4413      	add	r3, r2
 800cfa0:	4a04      	ldr	r2, [pc, #16]	; (800cfb4 <HAL_IncTick+0x24>)
 800cfa2:	6013      	str	r3, [r2, #0]
}
 800cfa4:	bf00      	nop
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfac:	4770      	bx	lr
 800cfae:	bf00      	nop
 800cfb0:	20000008 	.word	0x20000008
 800cfb4:	200003b8 	.word	0x200003b8

0800cfb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800cfb8:	b480      	push	{r7}
 800cfba:	af00      	add	r7, sp, #0
  return uwTick;
 800cfbc:	4b03      	ldr	r3, [pc, #12]	; (800cfcc <HAL_GetTick+0x14>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc8:	4770      	bx	lr
 800cfca:	bf00      	nop
 800cfcc:	200003b8 	.word	0x200003b8

0800cfd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b084      	sub	sp, #16
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800cfd8:	f7ff ffee 	bl	800cfb8 <HAL_GetTick>
 800cfdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cfe8:	d005      	beq.n	800cff6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800cfea:	4b0a      	ldr	r3, [pc, #40]	; (800d014 <HAL_Delay+0x44>)
 800cfec:	781b      	ldrb	r3, [r3, #0]
 800cfee:	461a      	mov	r2, r3
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	4413      	add	r3, r2
 800cff4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800cff6:	bf00      	nop
 800cff8:	f7ff ffde 	bl	800cfb8 <HAL_GetTick>
 800cffc:	4602      	mov	r2, r0
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	1ad3      	subs	r3, r2, r3
 800d002:	68fa      	ldr	r2, [r7, #12]
 800d004:	429a      	cmp	r2, r3
 800d006:	d8f7      	bhi.n	800cff8 <HAL_Delay+0x28>
  {
  }
}
 800d008:	bf00      	nop
 800d00a:	bf00      	nop
 800d00c:	3710      	adds	r7, #16
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
 800d012:	bf00      	nop
 800d014:	20000008 	.word	0x20000008

0800d018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d018:	b480      	push	{r7}
 800d01a:	b085      	sub	sp, #20
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f003 0307 	and.w	r3, r3, #7
 800d026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d028:	4b0c      	ldr	r3, [pc, #48]	; (800d05c <__NVIC_SetPriorityGrouping+0x44>)
 800d02a:	68db      	ldr	r3, [r3, #12]
 800d02c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d02e:	68ba      	ldr	r2, [r7, #8]
 800d030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800d034:	4013      	ands	r3, r2
 800d036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800d040:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800d044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800d04a:	4a04      	ldr	r2, [pc, #16]	; (800d05c <__NVIC_SetPriorityGrouping+0x44>)
 800d04c:	68bb      	ldr	r3, [r7, #8]
 800d04e:	60d3      	str	r3, [r2, #12]
}
 800d050:	bf00      	nop
 800d052:	3714      	adds	r7, #20
 800d054:	46bd      	mov	sp, r7
 800d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05a:	4770      	bx	lr
 800d05c:	e000ed00 	.word	0xe000ed00

0800d060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800d060:	b480      	push	{r7}
 800d062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d064:	4b04      	ldr	r3, [pc, #16]	; (800d078 <__NVIC_GetPriorityGrouping+0x18>)
 800d066:	68db      	ldr	r3, [r3, #12]
 800d068:	0a1b      	lsrs	r3, r3, #8
 800d06a:	f003 0307 	and.w	r3, r3, #7
}
 800d06e:	4618      	mov	r0, r3
 800d070:	46bd      	mov	sp, r7
 800d072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d076:	4770      	bx	lr
 800d078:	e000ed00 	.word	0xe000ed00

0800d07c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d07c:	b480      	push	{r7}
 800d07e:	b083      	sub	sp, #12
 800d080:	af00      	add	r7, sp, #0
 800d082:	4603      	mov	r3, r0
 800d084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	db0b      	blt.n	800d0a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d08e:	79fb      	ldrb	r3, [r7, #7]
 800d090:	f003 021f 	and.w	r2, r3, #31
 800d094:	4907      	ldr	r1, [pc, #28]	; (800d0b4 <__NVIC_EnableIRQ+0x38>)
 800d096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d09a:	095b      	lsrs	r3, r3, #5
 800d09c:	2001      	movs	r0, #1
 800d09e:	fa00 f202 	lsl.w	r2, r0, r2
 800d0a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800d0a6:	bf00      	nop
 800d0a8:	370c      	adds	r7, #12
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b0:	4770      	bx	lr
 800d0b2:	bf00      	nop
 800d0b4:	e000e100 	.word	0xe000e100

0800d0b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b083      	sub	sp, #12
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	4603      	mov	r3, r0
 800d0c0:	6039      	str	r1, [r7, #0]
 800d0c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d0c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	db0a      	blt.n	800d0e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	b2da      	uxtb	r2, r3
 800d0d0:	490c      	ldr	r1, [pc, #48]	; (800d104 <__NVIC_SetPriority+0x4c>)
 800d0d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0d6:	0112      	lsls	r2, r2, #4
 800d0d8:	b2d2      	uxtb	r2, r2
 800d0da:	440b      	add	r3, r1
 800d0dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800d0e0:	e00a      	b.n	800d0f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	b2da      	uxtb	r2, r3
 800d0e6:	4908      	ldr	r1, [pc, #32]	; (800d108 <__NVIC_SetPriority+0x50>)
 800d0e8:	79fb      	ldrb	r3, [r7, #7]
 800d0ea:	f003 030f 	and.w	r3, r3, #15
 800d0ee:	3b04      	subs	r3, #4
 800d0f0:	0112      	lsls	r2, r2, #4
 800d0f2:	b2d2      	uxtb	r2, r2
 800d0f4:	440b      	add	r3, r1
 800d0f6:	761a      	strb	r2, [r3, #24]
}
 800d0f8:	bf00      	nop
 800d0fa:	370c      	adds	r7, #12
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d102:	4770      	bx	lr
 800d104:	e000e100 	.word	0xe000e100
 800d108:	e000ed00 	.word	0xe000ed00

0800d10c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d10c:	b480      	push	{r7}
 800d10e:	b089      	sub	sp, #36	; 0x24
 800d110:	af00      	add	r7, sp, #0
 800d112:	60f8      	str	r0, [r7, #12]
 800d114:	60b9      	str	r1, [r7, #8]
 800d116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	f003 0307 	and.w	r3, r3, #7
 800d11e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d120:	69fb      	ldr	r3, [r7, #28]
 800d122:	f1c3 0307 	rsb	r3, r3, #7
 800d126:	2b04      	cmp	r3, #4
 800d128:	bf28      	it	cs
 800d12a:	2304      	movcs	r3, #4
 800d12c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d12e:	69fb      	ldr	r3, [r7, #28]
 800d130:	3304      	adds	r3, #4
 800d132:	2b06      	cmp	r3, #6
 800d134:	d902      	bls.n	800d13c <NVIC_EncodePriority+0x30>
 800d136:	69fb      	ldr	r3, [r7, #28]
 800d138:	3b03      	subs	r3, #3
 800d13a:	e000      	b.n	800d13e <NVIC_EncodePriority+0x32>
 800d13c:	2300      	movs	r3, #0
 800d13e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d140:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d144:	69bb      	ldr	r3, [r7, #24]
 800d146:	fa02 f303 	lsl.w	r3, r2, r3
 800d14a:	43da      	mvns	r2, r3
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	401a      	ands	r2, r3
 800d150:	697b      	ldr	r3, [r7, #20]
 800d152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d154:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d158:	697b      	ldr	r3, [r7, #20]
 800d15a:	fa01 f303 	lsl.w	r3, r1, r3
 800d15e:	43d9      	mvns	r1, r3
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d164:	4313      	orrs	r3, r2
         );
}
 800d166:	4618      	mov	r0, r3
 800d168:	3724      	adds	r7, #36	; 0x24
 800d16a:	46bd      	mov	sp, r7
 800d16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d170:	4770      	bx	lr
	...

0800d174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b082      	sub	sp, #8
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	3b01      	subs	r3, #1
 800d180:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d184:	d301      	bcc.n	800d18a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800d186:	2301      	movs	r3, #1
 800d188:	e00f      	b.n	800d1aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800d18a:	4a0a      	ldr	r2, [pc, #40]	; (800d1b4 <SysTick_Config+0x40>)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	3b01      	subs	r3, #1
 800d190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800d192:	210f      	movs	r1, #15
 800d194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d198:	f7ff ff8e 	bl	800d0b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800d19c:	4b05      	ldr	r3, [pc, #20]	; (800d1b4 <SysTick_Config+0x40>)
 800d19e:	2200      	movs	r2, #0
 800d1a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800d1a2:	4b04      	ldr	r3, [pc, #16]	; (800d1b4 <SysTick_Config+0x40>)
 800d1a4:	2207      	movs	r2, #7
 800d1a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800d1a8:	2300      	movs	r3, #0
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3708      	adds	r7, #8
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}
 800d1b2:	bf00      	nop
 800d1b4:	e000e010 	.word	0xe000e010

0800d1b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f7ff ff29 	bl	800d018 <__NVIC_SetPriorityGrouping>
}
 800d1c6:	bf00      	nop
 800d1c8:	3708      	adds	r7, #8
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}

0800d1ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800d1ce:	b580      	push	{r7, lr}
 800d1d0:	b086      	sub	sp, #24
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	60b9      	str	r1, [r7, #8]
 800d1d8:	607a      	str	r2, [r7, #4]
 800d1da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800d1e0:	f7ff ff3e 	bl	800d060 <__NVIC_GetPriorityGrouping>
 800d1e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800d1e6:	687a      	ldr	r2, [r7, #4]
 800d1e8:	68b9      	ldr	r1, [r7, #8]
 800d1ea:	6978      	ldr	r0, [r7, #20]
 800d1ec:	f7ff ff8e 	bl	800d10c <NVIC_EncodePriority>
 800d1f0:	4602      	mov	r2, r0
 800d1f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1f6:	4611      	mov	r1, r2
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f7ff ff5d 	bl	800d0b8 <__NVIC_SetPriority>
}
 800d1fe:	bf00      	nop
 800d200:	3718      	adds	r7, #24
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}

0800d206 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d206:	b580      	push	{r7, lr}
 800d208:	b082      	sub	sp, #8
 800d20a:	af00      	add	r7, sp, #0
 800d20c:	4603      	mov	r3, r0
 800d20e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800d210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d214:	4618      	mov	r0, r3
 800d216:	f7ff ff31 	bl	800d07c <__NVIC_EnableIRQ>
}
 800d21a:	bf00      	nop
 800d21c:	3708      	adds	r7, #8
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}

0800d222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800d222:	b580      	push	{r7, lr}
 800d224:	b082      	sub	sp, #8
 800d226:	af00      	add	r7, sp, #0
 800d228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f7ff ffa2 	bl	800d174 <SysTick_Config>
 800d230:	4603      	mov	r3, r0
}
 800d232:	4618      	mov	r0, r3
 800d234:	3708      	adds	r7, #8
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}

0800d23a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800d23a:	b580      	push	{r7, lr}
 800d23c:	b084      	sub	sp, #16
 800d23e:	af00      	add	r7, sp, #0
 800d240:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d246:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800d248:	f7ff feb6 	bl	800cfb8 <HAL_GetTick>
 800d24c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d254:	b2db      	uxtb	r3, r3
 800d256:	2b02      	cmp	r3, #2
 800d258:	d008      	beq.n	800d26c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2280      	movs	r2, #128	; 0x80
 800d25e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2200      	movs	r2, #0
 800d264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800d268:	2301      	movs	r3, #1
 800d26a:	e052      	b.n	800d312 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	681a      	ldr	r2, [r3, #0]
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	f022 0216 	bic.w	r2, r2, #22
 800d27a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	695a      	ldr	r2, [r3, #20]
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d28a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d290:	2b00      	cmp	r3, #0
 800d292:	d103      	bne.n	800d29c <HAL_DMA_Abort+0x62>
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d007      	beq.n	800d2ac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	681a      	ldr	r2, [r3, #0]
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f022 0208 	bic.w	r2, r2, #8
 800d2aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	681a      	ldr	r2, [r3, #0]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f022 0201 	bic.w	r2, r2, #1
 800d2ba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d2bc:	e013      	b.n	800d2e6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800d2be:	f7ff fe7b 	bl	800cfb8 <HAL_GetTick>
 800d2c2:	4602      	mov	r2, r0
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	1ad3      	subs	r3, r2, r3
 800d2c8:	2b05      	cmp	r3, #5
 800d2ca:	d90c      	bls.n	800d2e6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2220      	movs	r2, #32
 800d2d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2203      	movs	r2, #3
 800d2d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800d2e2:	2303      	movs	r3, #3
 800d2e4:	e015      	b.n	800d312 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	f003 0301 	and.w	r3, r3, #1
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d1e4      	bne.n	800d2be <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2f8:	223f      	movs	r2, #63	; 0x3f
 800d2fa:	409a      	lsls	r2, r3
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2201      	movs	r2, #1
 800d304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2200      	movs	r2, #0
 800d30c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800d310:	2300      	movs	r3, #0
}
 800d312:	4618      	mov	r0, r3
 800d314:	3710      	adds	r7, #16
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}

0800d31a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800d31a:	b480      	push	{r7}
 800d31c:	b083      	sub	sp, #12
 800d31e:	af00      	add	r7, sp, #0
 800d320:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d328:	b2db      	uxtb	r3, r3
 800d32a:	2b02      	cmp	r3, #2
 800d32c:	d004      	beq.n	800d338 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2280      	movs	r2, #128	; 0x80
 800d332:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800d334:	2301      	movs	r3, #1
 800d336:	e00c      	b.n	800d352 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2205      	movs	r2, #5
 800d33c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	681a      	ldr	r2, [r3, #0]
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	f022 0201 	bic.w	r2, r2, #1
 800d34e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800d350:	2300      	movs	r3, #0
}
 800d352:	4618      	mov	r0, r3
 800d354:	370c      	adds	r7, #12
 800d356:	46bd      	mov	sp, r7
 800d358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35c:	4770      	bx	lr
	...

0800d360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d360:	b480      	push	{r7}
 800d362:	b089      	sub	sp, #36	; 0x24
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
 800d368:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800d36a:	2300      	movs	r3, #0
 800d36c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800d36e:	2300      	movs	r3, #0
 800d370:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800d372:	2300      	movs	r3, #0
 800d374:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d376:	2300      	movs	r3, #0
 800d378:	61fb      	str	r3, [r7, #28]
 800d37a:	e165      	b.n	800d648 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800d37c:	2201      	movs	r2, #1
 800d37e:	69fb      	ldr	r3, [r7, #28]
 800d380:	fa02 f303 	lsl.w	r3, r2, r3
 800d384:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	697a      	ldr	r2, [r7, #20]
 800d38c:	4013      	ands	r3, r2
 800d38e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800d390:	693a      	ldr	r2, [r7, #16]
 800d392:	697b      	ldr	r3, [r7, #20]
 800d394:	429a      	cmp	r2, r3
 800d396:	f040 8154 	bne.w	800d642 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	685b      	ldr	r3, [r3, #4]
 800d39e:	f003 0303 	and.w	r3, r3, #3
 800d3a2:	2b01      	cmp	r3, #1
 800d3a4:	d005      	beq.n	800d3b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	685b      	ldr	r3, [r3, #4]
 800d3aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800d3ae:	2b02      	cmp	r3, #2
 800d3b0:	d130      	bne.n	800d414 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	689b      	ldr	r3, [r3, #8]
 800d3b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800d3b8:	69fb      	ldr	r3, [r7, #28]
 800d3ba:	005b      	lsls	r3, r3, #1
 800d3bc:	2203      	movs	r2, #3
 800d3be:	fa02 f303 	lsl.w	r3, r2, r3
 800d3c2:	43db      	mvns	r3, r3
 800d3c4:	69ba      	ldr	r2, [r7, #24]
 800d3c6:	4013      	ands	r3, r2
 800d3c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	68da      	ldr	r2, [r3, #12]
 800d3ce:	69fb      	ldr	r3, [r7, #28]
 800d3d0:	005b      	lsls	r3, r3, #1
 800d3d2:	fa02 f303 	lsl.w	r3, r2, r3
 800d3d6:	69ba      	ldr	r2, [r7, #24]
 800d3d8:	4313      	orrs	r3, r2
 800d3da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	69ba      	ldr	r2, [r7, #24]
 800d3e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	685b      	ldr	r3, [r3, #4]
 800d3e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d3e8:	2201      	movs	r2, #1
 800d3ea:	69fb      	ldr	r3, [r7, #28]
 800d3ec:	fa02 f303 	lsl.w	r3, r2, r3
 800d3f0:	43db      	mvns	r3, r3
 800d3f2:	69ba      	ldr	r2, [r7, #24]
 800d3f4:	4013      	ands	r3, r2
 800d3f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	685b      	ldr	r3, [r3, #4]
 800d3fc:	091b      	lsrs	r3, r3, #4
 800d3fe:	f003 0201 	and.w	r2, r3, #1
 800d402:	69fb      	ldr	r3, [r7, #28]
 800d404:	fa02 f303 	lsl.w	r3, r2, r3
 800d408:	69ba      	ldr	r2, [r7, #24]
 800d40a:	4313      	orrs	r3, r2
 800d40c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	69ba      	ldr	r2, [r7, #24]
 800d412:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	685b      	ldr	r3, [r3, #4]
 800d418:	f003 0303 	and.w	r3, r3, #3
 800d41c:	2b03      	cmp	r3, #3
 800d41e:	d017      	beq.n	800d450 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	68db      	ldr	r3, [r3, #12]
 800d424:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800d426:	69fb      	ldr	r3, [r7, #28]
 800d428:	005b      	lsls	r3, r3, #1
 800d42a:	2203      	movs	r2, #3
 800d42c:	fa02 f303 	lsl.w	r3, r2, r3
 800d430:	43db      	mvns	r3, r3
 800d432:	69ba      	ldr	r2, [r7, #24]
 800d434:	4013      	ands	r3, r2
 800d436:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	689a      	ldr	r2, [r3, #8]
 800d43c:	69fb      	ldr	r3, [r7, #28]
 800d43e:	005b      	lsls	r3, r3, #1
 800d440:	fa02 f303 	lsl.w	r3, r2, r3
 800d444:	69ba      	ldr	r2, [r7, #24]
 800d446:	4313      	orrs	r3, r2
 800d448:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	69ba      	ldr	r2, [r7, #24]
 800d44e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	685b      	ldr	r3, [r3, #4]
 800d454:	f003 0303 	and.w	r3, r3, #3
 800d458:	2b02      	cmp	r3, #2
 800d45a:	d123      	bne.n	800d4a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d45c:	69fb      	ldr	r3, [r7, #28]
 800d45e:	08da      	lsrs	r2, r3, #3
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	3208      	adds	r2, #8
 800d464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d468:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800d46a:	69fb      	ldr	r3, [r7, #28]
 800d46c:	f003 0307 	and.w	r3, r3, #7
 800d470:	009b      	lsls	r3, r3, #2
 800d472:	220f      	movs	r2, #15
 800d474:	fa02 f303 	lsl.w	r3, r2, r3
 800d478:	43db      	mvns	r3, r3
 800d47a:	69ba      	ldr	r2, [r7, #24]
 800d47c:	4013      	ands	r3, r2
 800d47e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	691a      	ldr	r2, [r3, #16]
 800d484:	69fb      	ldr	r3, [r7, #28]
 800d486:	f003 0307 	and.w	r3, r3, #7
 800d48a:	009b      	lsls	r3, r3, #2
 800d48c:	fa02 f303 	lsl.w	r3, r2, r3
 800d490:	69ba      	ldr	r2, [r7, #24]
 800d492:	4313      	orrs	r3, r2
 800d494:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d496:	69fb      	ldr	r3, [r7, #28]
 800d498:	08da      	lsrs	r2, r3, #3
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	3208      	adds	r2, #8
 800d49e:	69b9      	ldr	r1, [r7, #24]
 800d4a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800d4aa:	69fb      	ldr	r3, [r7, #28]
 800d4ac:	005b      	lsls	r3, r3, #1
 800d4ae:	2203      	movs	r2, #3
 800d4b0:	fa02 f303 	lsl.w	r3, r2, r3
 800d4b4:	43db      	mvns	r3, r3
 800d4b6:	69ba      	ldr	r2, [r7, #24]
 800d4b8:	4013      	ands	r3, r2
 800d4ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	685b      	ldr	r3, [r3, #4]
 800d4c0:	f003 0203 	and.w	r2, r3, #3
 800d4c4:	69fb      	ldr	r3, [r7, #28]
 800d4c6:	005b      	lsls	r3, r3, #1
 800d4c8:	fa02 f303 	lsl.w	r3, r2, r3
 800d4cc:	69ba      	ldr	r2, [r7, #24]
 800d4ce:	4313      	orrs	r3, r2
 800d4d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	69ba      	ldr	r2, [r7, #24]
 800d4d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	685b      	ldr	r3, [r3, #4]
 800d4dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	f000 80ae 	beq.w	800d642 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	60fb      	str	r3, [r7, #12]
 800d4ea:	4b5d      	ldr	r3, [pc, #372]	; (800d660 <HAL_GPIO_Init+0x300>)
 800d4ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4ee:	4a5c      	ldr	r2, [pc, #368]	; (800d660 <HAL_GPIO_Init+0x300>)
 800d4f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d4f4:	6453      	str	r3, [r2, #68]	; 0x44
 800d4f6:	4b5a      	ldr	r3, [pc, #360]	; (800d660 <HAL_GPIO_Init+0x300>)
 800d4f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d4fe:	60fb      	str	r3, [r7, #12]
 800d500:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d502:	4a58      	ldr	r2, [pc, #352]	; (800d664 <HAL_GPIO_Init+0x304>)
 800d504:	69fb      	ldr	r3, [r7, #28]
 800d506:	089b      	lsrs	r3, r3, #2
 800d508:	3302      	adds	r3, #2
 800d50a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d50e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800d510:	69fb      	ldr	r3, [r7, #28]
 800d512:	f003 0303 	and.w	r3, r3, #3
 800d516:	009b      	lsls	r3, r3, #2
 800d518:	220f      	movs	r2, #15
 800d51a:	fa02 f303 	lsl.w	r3, r2, r3
 800d51e:	43db      	mvns	r3, r3
 800d520:	69ba      	ldr	r2, [r7, #24]
 800d522:	4013      	ands	r3, r2
 800d524:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	4a4f      	ldr	r2, [pc, #316]	; (800d668 <HAL_GPIO_Init+0x308>)
 800d52a:	4293      	cmp	r3, r2
 800d52c:	d025      	beq.n	800d57a <HAL_GPIO_Init+0x21a>
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	4a4e      	ldr	r2, [pc, #312]	; (800d66c <HAL_GPIO_Init+0x30c>)
 800d532:	4293      	cmp	r3, r2
 800d534:	d01f      	beq.n	800d576 <HAL_GPIO_Init+0x216>
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	4a4d      	ldr	r2, [pc, #308]	; (800d670 <HAL_GPIO_Init+0x310>)
 800d53a:	4293      	cmp	r3, r2
 800d53c:	d019      	beq.n	800d572 <HAL_GPIO_Init+0x212>
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	4a4c      	ldr	r2, [pc, #304]	; (800d674 <HAL_GPIO_Init+0x314>)
 800d542:	4293      	cmp	r3, r2
 800d544:	d013      	beq.n	800d56e <HAL_GPIO_Init+0x20e>
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	4a4b      	ldr	r2, [pc, #300]	; (800d678 <HAL_GPIO_Init+0x318>)
 800d54a:	4293      	cmp	r3, r2
 800d54c:	d00d      	beq.n	800d56a <HAL_GPIO_Init+0x20a>
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	4a4a      	ldr	r2, [pc, #296]	; (800d67c <HAL_GPIO_Init+0x31c>)
 800d552:	4293      	cmp	r3, r2
 800d554:	d007      	beq.n	800d566 <HAL_GPIO_Init+0x206>
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	4a49      	ldr	r2, [pc, #292]	; (800d680 <HAL_GPIO_Init+0x320>)
 800d55a:	4293      	cmp	r3, r2
 800d55c:	d101      	bne.n	800d562 <HAL_GPIO_Init+0x202>
 800d55e:	2306      	movs	r3, #6
 800d560:	e00c      	b.n	800d57c <HAL_GPIO_Init+0x21c>
 800d562:	2307      	movs	r3, #7
 800d564:	e00a      	b.n	800d57c <HAL_GPIO_Init+0x21c>
 800d566:	2305      	movs	r3, #5
 800d568:	e008      	b.n	800d57c <HAL_GPIO_Init+0x21c>
 800d56a:	2304      	movs	r3, #4
 800d56c:	e006      	b.n	800d57c <HAL_GPIO_Init+0x21c>
 800d56e:	2303      	movs	r3, #3
 800d570:	e004      	b.n	800d57c <HAL_GPIO_Init+0x21c>
 800d572:	2302      	movs	r3, #2
 800d574:	e002      	b.n	800d57c <HAL_GPIO_Init+0x21c>
 800d576:	2301      	movs	r3, #1
 800d578:	e000      	b.n	800d57c <HAL_GPIO_Init+0x21c>
 800d57a:	2300      	movs	r3, #0
 800d57c:	69fa      	ldr	r2, [r7, #28]
 800d57e:	f002 0203 	and.w	r2, r2, #3
 800d582:	0092      	lsls	r2, r2, #2
 800d584:	4093      	lsls	r3, r2
 800d586:	69ba      	ldr	r2, [r7, #24]
 800d588:	4313      	orrs	r3, r2
 800d58a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d58c:	4935      	ldr	r1, [pc, #212]	; (800d664 <HAL_GPIO_Init+0x304>)
 800d58e:	69fb      	ldr	r3, [r7, #28]
 800d590:	089b      	lsrs	r3, r3, #2
 800d592:	3302      	adds	r3, #2
 800d594:	69ba      	ldr	r2, [r7, #24]
 800d596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d59a:	4b3a      	ldr	r3, [pc, #232]	; (800d684 <HAL_GPIO_Init+0x324>)
 800d59c:	689b      	ldr	r3, [r3, #8]
 800d59e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d5a0:	693b      	ldr	r3, [r7, #16]
 800d5a2:	43db      	mvns	r3, r3
 800d5a4:	69ba      	ldr	r2, [r7, #24]
 800d5a6:	4013      	ands	r3, r2
 800d5a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	685b      	ldr	r3, [r3, #4]
 800d5ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d003      	beq.n	800d5be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800d5b6:	69ba      	ldr	r2, [r7, #24]
 800d5b8:	693b      	ldr	r3, [r7, #16]
 800d5ba:	4313      	orrs	r3, r2
 800d5bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800d5be:	4a31      	ldr	r2, [pc, #196]	; (800d684 <HAL_GPIO_Init+0x324>)
 800d5c0:	69bb      	ldr	r3, [r7, #24]
 800d5c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800d5c4:	4b2f      	ldr	r3, [pc, #188]	; (800d684 <HAL_GPIO_Init+0x324>)
 800d5c6:	68db      	ldr	r3, [r3, #12]
 800d5c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d5ca:	693b      	ldr	r3, [r7, #16]
 800d5cc:	43db      	mvns	r3, r3
 800d5ce:	69ba      	ldr	r2, [r7, #24]
 800d5d0:	4013      	ands	r3, r2
 800d5d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	685b      	ldr	r3, [r3, #4]
 800d5d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d003      	beq.n	800d5e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800d5e0:	69ba      	ldr	r2, [r7, #24]
 800d5e2:	693b      	ldr	r3, [r7, #16]
 800d5e4:	4313      	orrs	r3, r2
 800d5e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800d5e8:	4a26      	ldr	r2, [pc, #152]	; (800d684 <HAL_GPIO_Init+0x324>)
 800d5ea:	69bb      	ldr	r3, [r7, #24]
 800d5ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800d5ee:	4b25      	ldr	r3, [pc, #148]	; (800d684 <HAL_GPIO_Init+0x324>)
 800d5f0:	685b      	ldr	r3, [r3, #4]
 800d5f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	43db      	mvns	r3, r3
 800d5f8:	69ba      	ldr	r2, [r7, #24]
 800d5fa:	4013      	ands	r3, r2
 800d5fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	685b      	ldr	r3, [r3, #4]
 800d602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d606:	2b00      	cmp	r3, #0
 800d608:	d003      	beq.n	800d612 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800d60a:	69ba      	ldr	r2, [r7, #24]
 800d60c:	693b      	ldr	r3, [r7, #16]
 800d60e:	4313      	orrs	r3, r2
 800d610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800d612:	4a1c      	ldr	r2, [pc, #112]	; (800d684 <HAL_GPIO_Init+0x324>)
 800d614:	69bb      	ldr	r3, [r7, #24]
 800d616:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d618:	4b1a      	ldr	r3, [pc, #104]	; (800d684 <HAL_GPIO_Init+0x324>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	43db      	mvns	r3, r3
 800d622:	69ba      	ldr	r2, [r7, #24]
 800d624:	4013      	ands	r3, r2
 800d626:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	685b      	ldr	r3, [r3, #4]
 800d62c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d630:	2b00      	cmp	r3, #0
 800d632:	d003      	beq.n	800d63c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800d634:	69ba      	ldr	r2, [r7, #24]
 800d636:	693b      	ldr	r3, [r7, #16]
 800d638:	4313      	orrs	r3, r2
 800d63a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800d63c:	4a11      	ldr	r2, [pc, #68]	; (800d684 <HAL_GPIO_Init+0x324>)
 800d63e:	69bb      	ldr	r3, [r7, #24]
 800d640:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d642:	69fb      	ldr	r3, [r7, #28]
 800d644:	3301      	adds	r3, #1
 800d646:	61fb      	str	r3, [r7, #28]
 800d648:	69fb      	ldr	r3, [r7, #28]
 800d64a:	2b0f      	cmp	r3, #15
 800d64c:	f67f ae96 	bls.w	800d37c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800d650:	bf00      	nop
 800d652:	bf00      	nop
 800d654:	3724      	adds	r7, #36	; 0x24
 800d656:	46bd      	mov	sp, r7
 800d658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65c:	4770      	bx	lr
 800d65e:	bf00      	nop
 800d660:	40023800 	.word	0x40023800
 800d664:	40013800 	.word	0x40013800
 800d668:	40020000 	.word	0x40020000
 800d66c:	40020400 	.word	0x40020400
 800d670:	40020800 	.word	0x40020800
 800d674:	40020c00 	.word	0x40020c00
 800d678:	40021000 	.word	0x40021000
 800d67c:	40021400 	.word	0x40021400
 800d680:	40021800 	.word	0x40021800
 800d684:	40013c00 	.word	0x40013c00

0800d688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d688:	b480      	push	{r7}
 800d68a:	b083      	sub	sp, #12
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	460b      	mov	r3, r1
 800d692:	807b      	strh	r3, [r7, #2]
 800d694:	4613      	mov	r3, r2
 800d696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d698:	787b      	ldrb	r3, [r7, #1]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d003      	beq.n	800d6a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d69e:	887a      	ldrh	r2, [r7, #2]
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800d6a4:	e003      	b.n	800d6ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800d6a6:	887b      	ldrh	r3, [r7, #2]
 800d6a8:	041a      	lsls	r2, r3, #16
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	619a      	str	r2, [r3, #24]
}
 800d6ae:	bf00      	nop
 800d6b0:	370c      	adds	r7, #12
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b8:	4770      	bx	lr
	...

0800d6bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b082      	sub	sp, #8
 800d6c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	603b      	str	r3, [r7, #0]
 800d6ca:	4b20      	ldr	r3, [pc, #128]	; (800d74c <HAL_PWREx_EnableOverDrive+0x90>)
 800d6cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ce:	4a1f      	ldr	r2, [pc, #124]	; (800d74c <HAL_PWREx_EnableOverDrive+0x90>)
 800d6d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d6d4:	6413      	str	r3, [r2, #64]	; 0x40
 800d6d6:	4b1d      	ldr	r3, [pc, #116]	; (800d74c <HAL_PWREx_EnableOverDrive+0x90>)
 800d6d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d6de:	603b      	str	r3, [r7, #0]
 800d6e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800d6e2:	4b1b      	ldr	r3, [pc, #108]	; (800d750 <HAL_PWREx_EnableOverDrive+0x94>)
 800d6e4:	2201      	movs	r2, #1
 800d6e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d6e8:	f7ff fc66 	bl	800cfb8 <HAL_GetTick>
 800d6ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d6ee:	e009      	b.n	800d704 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d6f0:	f7ff fc62 	bl	800cfb8 <HAL_GetTick>
 800d6f4:	4602      	mov	r2, r0
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	1ad3      	subs	r3, r2, r3
 800d6fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d6fe:	d901      	bls.n	800d704 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800d700:	2303      	movs	r3, #3
 800d702:	e01f      	b.n	800d744 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d704:	4b13      	ldr	r3, [pc, #76]	; (800d754 <HAL_PWREx_EnableOverDrive+0x98>)
 800d706:	685b      	ldr	r3, [r3, #4]
 800d708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d70c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d710:	d1ee      	bne.n	800d6f0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800d712:	4b11      	ldr	r3, [pc, #68]	; (800d758 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d714:	2201      	movs	r2, #1
 800d716:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d718:	f7ff fc4e 	bl	800cfb8 <HAL_GetTick>
 800d71c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d71e:	e009      	b.n	800d734 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d720:	f7ff fc4a 	bl	800cfb8 <HAL_GetTick>
 800d724:	4602      	mov	r2, r0
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	1ad3      	subs	r3, r2, r3
 800d72a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d72e:	d901      	bls.n	800d734 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800d730:	2303      	movs	r3, #3
 800d732:	e007      	b.n	800d744 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d734:	4b07      	ldr	r3, [pc, #28]	; (800d754 <HAL_PWREx_EnableOverDrive+0x98>)
 800d736:	685b      	ldr	r3, [r3, #4]
 800d738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d73c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d740:	d1ee      	bne.n	800d720 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800d742:	2300      	movs	r3, #0
}
 800d744:	4618      	mov	r0, r3
 800d746:	3708      	adds	r7, #8
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}
 800d74c:	40023800 	.word	0x40023800
 800d750:	420e0040 	.word	0x420e0040
 800d754:	40007000 	.word	0x40007000
 800d758:	420e0044 	.word	0x420e0044

0800d75c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b084      	sub	sp, #16
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
 800d764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d101      	bne.n	800d770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d76c:	2301      	movs	r3, #1
 800d76e:	e0cc      	b.n	800d90a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d770:	4b68      	ldr	r3, [pc, #416]	; (800d914 <HAL_RCC_ClockConfig+0x1b8>)
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	f003 030f 	and.w	r3, r3, #15
 800d778:	683a      	ldr	r2, [r7, #0]
 800d77a:	429a      	cmp	r2, r3
 800d77c:	d90c      	bls.n	800d798 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d77e:	4b65      	ldr	r3, [pc, #404]	; (800d914 <HAL_RCC_ClockConfig+0x1b8>)
 800d780:	683a      	ldr	r2, [r7, #0]
 800d782:	b2d2      	uxtb	r2, r2
 800d784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d786:	4b63      	ldr	r3, [pc, #396]	; (800d914 <HAL_RCC_ClockConfig+0x1b8>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	f003 030f 	and.w	r3, r3, #15
 800d78e:	683a      	ldr	r2, [r7, #0]
 800d790:	429a      	cmp	r2, r3
 800d792:	d001      	beq.n	800d798 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d794:	2301      	movs	r3, #1
 800d796:	e0b8      	b.n	800d90a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	f003 0302 	and.w	r3, r3, #2
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d020      	beq.n	800d7e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	f003 0304 	and.w	r3, r3, #4
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d005      	beq.n	800d7bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d7b0:	4b59      	ldr	r3, [pc, #356]	; (800d918 <HAL_RCC_ClockConfig+0x1bc>)
 800d7b2:	689b      	ldr	r3, [r3, #8]
 800d7b4:	4a58      	ldr	r2, [pc, #352]	; (800d918 <HAL_RCC_ClockConfig+0x1bc>)
 800d7b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d7ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	f003 0308 	and.w	r3, r3, #8
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d005      	beq.n	800d7d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d7c8:	4b53      	ldr	r3, [pc, #332]	; (800d918 <HAL_RCC_ClockConfig+0x1bc>)
 800d7ca:	689b      	ldr	r3, [r3, #8]
 800d7cc:	4a52      	ldr	r2, [pc, #328]	; (800d918 <HAL_RCC_ClockConfig+0x1bc>)
 800d7ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d7d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d7d4:	4b50      	ldr	r3, [pc, #320]	; (800d918 <HAL_RCC_ClockConfig+0x1bc>)
 800d7d6:	689b      	ldr	r3, [r3, #8]
 800d7d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	689b      	ldr	r3, [r3, #8]
 800d7e0:	494d      	ldr	r1, [pc, #308]	; (800d918 <HAL_RCC_ClockConfig+0x1bc>)
 800d7e2:	4313      	orrs	r3, r2
 800d7e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	f003 0301 	and.w	r3, r3, #1
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d044      	beq.n	800d87c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	685b      	ldr	r3, [r3, #4]
 800d7f6:	2b01      	cmp	r3, #1
 800d7f8:	d107      	bne.n	800d80a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d7fa:	4b47      	ldr	r3, [pc, #284]	; (800d918 <HAL_RCC_ClockConfig+0x1bc>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d802:	2b00      	cmp	r3, #0
 800d804:	d119      	bne.n	800d83a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d806:	2301      	movs	r3, #1
 800d808:	e07f      	b.n	800d90a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	685b      	ldr	r3, [r3, #4]
 800d80e:	2b02      	cmp	r3, #2
 800d810:	d003      	beq.n	800d81a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d816:	2b03      	cmp	r3, #3
 800d818:	d107      	bne.n	800d82a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d81a:	4b3f      	ldr	r3, [pc, #252]	; (800d918 <HAL_RCC_ClockConfig+0x1bc>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d822:	2b00      	cmp	r3, #0
 800d824:	d109      	bne.n	800d83a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d826:	2301      	movs	r3, #1
 800d828:	e06f      	b.n	800d90a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d82a:	4b3b      	ldr	r3, [pc, #236]	; (800d918 <HAL_RCC_ClockConfig+0x1bc>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	f003 0302 	and.w	r3, r3, #2
 800d832:	2b00      	cmp	r3, #0
 800d834:	d101      	bne.n	800d83a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d836:	2301      	movs	r3, #1
 800d838:	e067      	b.n	800d90a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d83a:	4b37      	ldr	r3, [pc, #220]	; (800d918 <HAL_RCC_ClockConfig+0x1bc>)
 800d83c:	689b      	ldr	r3, [r3, #8]
 800d83e:	f023 0203 	bic.w	r2, r3, #3
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	685b      	ldr	r3, [r3, #4]
 800d846:	4934      	ldr	r1, [pc, #208]	; (800d918 <HAL_RCC_ClockConfig+0x1bc>)
 800d848:	4313      	orrs	r3, r2
 800d84a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d84c:	f7ff fbb4 	bl	800cfb8 <HAL_GetTick>
 800d850:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d852:	e00a      	b.n	800d86a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d854:	f7ff fbb0 	bl	800cfb8 <HAL_GetTick>
 800d858:	4602      	mov	r2, r0
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	1ad3      	subs	r3, r2, r3
 800d85e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d862:	4293      	cmp	r3, r2
 800d864:	d901      	bls.n	800d86a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d866:	2303      	movs	r3, #3
 800d868:	e04f      	b.n	800d90a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d86a:	4b2b      	ldr	r3, [pc, #172]	; (800d918 <HAL_RCC_ClockConfig+0x1bc>)
 800d86c:	689b      	ldr	r3, [r3, #8]
 800d86e:	f003 020c 	and.w	r2, r3, #12
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	685b      	ldr	r3, [r3, #4]
 800d876:	009b      	lsls	r3, r3, #2
 800d878:	429a      	cmp	r2, r3
 800d87a:	d1eb      	bne.n	800d854 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d87c:	4b25      	ldr	r3, [pc, #148]	; (800d914 <HAL_RCC_ClockConfig+0x1b8>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	f003 030f 	and.w	r3, r3, #15
 800d884:	683a      	ldr	r2, [r7, #0]
 800d886:	429a      	cmp	r2, r3
 800d888:	d20c      	bcs.n	800d8a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d88a:	4b22      	ldr	r3, [pc, #136]	; (800d914 <HAL_RCC_ClockConfig+0x1b8>)
 800d88c:	683a      	ldr	r2, [r7, #0]
 800d88e:	b2d2      	uxtb	r2, r2
 800d890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d892:	4b20      	ldr	r3, [pc, #128]	; (800d914 <HAL_RCC_ClockConfig+0x1b8>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	f003 030f 	and.w	r3, r3, #15
 800d89a:	683a      	ldr	r2, [r7, #0]
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d001      	beq.n	800d8a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	e032      	b.n	800d90a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	f003 0304 	and.w	r3, r3, #4
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d008      	beq.n	800d8c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d8b0:	4b19      	ldr	r3, [pc, #100]	; (800d918 <HAL_RCC_ClockConfig+0x1bc>)
 800d8b2:	689b      	ldr	r3, [r3, #8]
 800d8b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	68db      	ldr	r3, [r3, #12]
 800d8bc:	4916      	ldr	r1, [pc, #88]	; (800d918 <HAL_RCC_ClockConfig+0x1bc>)
 800d8be:	4313      	orrs	r3, r2
 800d8c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f003 0308 	and.w	r3, r3, #8
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d009      	beq.n	800d8e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d8ce:	4b12      	ldr	r3, [pc, #72]	; (800d918 <HAL_RCC_ClockConfig+0x1bc>)
 800d8d0:	689b      	ldr	r3, [r3, #8]
 800d8d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	691b      	ldr	r3, [r3, #16]
 800d8da:	00db      	lsls	r3, r3, #3
 800d8dc:	490e      	ldr	r1, [pc, #56]	; (800d918 <HAL_RCC_ClockConfig+0x1bc>)
 800d8de:	4313      	orrs	r3, r2
 800d8e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800d8e2:	f000 f855 	bl	800d990 <HAL_RCC_GetSysClockFreq>
 800d8e6:	4602      	mov	r2, r0
 800d8e8:	4b0b      	ldr	r3, [pc, #44]	; (800d918 <HAL_RCC_ClockConfig+0x1bc>)
 800d8ea:	689b      	ldr	r3, [r3, #8]
 800d8ec:	091b      	lsrs	r3, r3, #4
 800d8ee:	f003 030f 	and.w	r3, r3, #15
 800d8f2:	490a      	ldr	r1, [pc, #40]	; (800d91c <HAL_RCC_ClockConfig+0x1c0>)
 800d8f4:	5ccb      	ldrb	r3, [r1, r3]
 800d8f6:	fa22 f303 	lsr.w	r3, r2, r3
 800d8fa:	4a09      	ldr	r2, [pc, #36]	; (800d920 <HAL_RCC_ClockConfig+0x1c4>)
 800d8fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800d8fe:	4b09      	ldr	r3, [pc, #36]	; (800d924 <HAL_RCC_ClockConfig+0x1c8>)
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	4618      	mov	r0, r3
 800d904:	f7ff fb14 	bl	800cf30 <HAL_InitTick>

  return HAL_OK;
 800d908:	2300      	movs	r3, #0
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3710      	adds	r7, #16
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}
 800d912:	bf00      	nop
 800d914:	40023c00 	.word	0x40023c00
 800d918:	40023800 	.word	0x40023800
 800d91c:	080152b8 	.word	0x080152b8
 800d920:	20000000 	.word	0x20000000
 800d924:	20000004 	.word	0x20000004

0800d928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d928:	b480      	push	{r7}
 800d92a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d92c:	4b03      	ldr	r3, [pc, #12]	; (800d93c <HAL_RCC_GetHCLKFreq+0x14>)
 800d92e:	681b      	ldr	r3, [r3, #0]
}
 800d930:	4618      	mov	r0, r3
 800d932:	46bd      	mov	sp, r7
 800d934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d938:	4770      	bx	lr
 800d93a:	bf00      	nop
 800d93c:	20000000 	.word	0x20000000

0800d940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800d944:	f7ff fff0 	bl	800d928 <HAL_RCC_GetHCLKFreq>
 800d948:	4602      	mov	r2, r0
 800d94a:	4b05      	ldr	r3, [pc, #20]	; (800d960 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d94c:	689b      	ldr	r3, [r3, #8]
 800d94e:	0a9b      	lsrs	r3, r3, #10
 800d950:	f003 0307 	and.w	r3, r3, #7
 800d954:	4903      	ldr	r1, [pc, #12]	; (800d964 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d956:	5ccb      	ldrb	r3, [r1, r3]
 800d958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d95c:	4618      	mov	r0, r3
 800d95e:	bd80      	pop	{r7, pc}
 800d960:	40023800 	.word	0x40023800
 800d964:	080152c8 	.word	0x080152c8

0800d968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800d96c:	f7ff ffdc 	bl	800d928 <HAL_RCC_GetHCLKFreq>
 800d970:	4602      	mov	r2, r0
 800d972:	4b05      	ldr	r3, [pc, #20]	; (800d988 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d974:	689b      	ldr	r3, [r3, #8]
 800d976:	0b5b      	lsrs	r3, r3, #13
 800d978:	f003 0307 	and.w	r3, r3, #7
 800d97c:	4903      	ldr	r1, [pc, #12]	; (800d98c <HAL_RCC_GetPCLK2Freq+0x24>)
 800d97e:	5ccb      	ldrb	r3, [r1, r3]
 800d980:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d984:	4618      	mov	r0, r3
 800d986:	bd80      	pop	{r7, pc}
 800d988:	40023800 	.word	0x40023800
 800d98c:	080152c8 	.word	0x080152c8

0800d990 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d994:	b0ae      	sub	sp, #184	; 0xb8
 800d996:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800d998:	2300      	movs	r3, #0
 800d99a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d9b6:	4bcb      	ldr	r3, [pc, #812]	; (800dce4 <HAL_RCC_GetSysClockFreq+0x354>)
 800d9b8:	689b      	ldr	r3, [r3, #8]
 800d9ba:	f003 030c 	and.w	r3, r3, #12
 800d9be:	2b0c      	cmp	r3, #12
 800d9c0:	f200 8206 	bhi.w	800ddd0 <HAL_RCC_GetSysClockFreq+0x440>
 800d9c4:	a201      	add	r2, pc, #4	; (adr r2, 800d9cc <HAL_RCC_GetSysClockFreq+0x3c>)
 800d9c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9ca:	bf00      	nop
 800d9cc:	0800da01 	.word	0x0800da01
 800d9d0:	0800ddd1 	.word	0x0800ddd1
 800d9d4:	0800ddd1 	.word	0x0800ddd1
 800d9d8:	0800ddd1 	.word	0x0800ddd1
 800d9dc:	0800da09 	.word	0x0800da09
 800d9e0:	0800ddd1 	.word	0x0800ddd1
 800d9e4:	0800ddd1 	.word	0x0800ddd1
 800d9e8:	0800ddd1 	.word	0x0800ddd1
 800d9ec:	0800da11 	.word	0x0800da11
 800d9f0:	0800ddd1 	.word	0x0800ddd1
 800d9f4:	0800ddd1 	.word	0x0800ddd1
 800d9f8:	0800ddd1 	.word	0x0800ddd1
 800d9fc:	0800dc01 	.word	0x0800dc01
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800da00:	4bb9      	ldr	r3, [pc, #740]	; (800dce8 <HAL_RCC_GetSysClockFreq+0x358>)
 800da02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800da06:	e1e7      	b.n	800ddd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800da08:	4bb8      	ldr	r3, [pc, #736]	; (800dcec <HAL_RCC_GetSysClockFreq+0x35c>)
 800da0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800da0e:	e1e3      	b.n	800ddd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800da10:	4bb4      	ldr	r3, [pc, #720]	; (800dce4 <HAL_RCC_GetSysClockFreq+0x354>)
 800da12:	685b      	ldr	r3, [r3, #4]
 800da14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800da1c:	4bb1      	ldr	r3, [pc, #708]	; (800dce4 <HAL_RCC_GetSysClockFreq+0x354>)
 800da1e:	685b      	ldr	r3, [r3, #4]
 800da20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800da24:	2b00      	cmp	r3, #0
 800da26:	d071      	beq.n	800db0c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800da28:	4bae      	ldr	r3, [pc, #696]	; (800dce4 <HAL_RCC_GetSysClockFreq+0x354>)
 800da2a:	685b      	ldr	r3, [r3, #4]
 800da2c:	099b      	lsrs	r3, r3, #6
 800da2e:	2200      	movs	r2, #0
 800da30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800da34:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800da38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800da3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800da44:	2300      	movs	r3, #0
 800da46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800da4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800da4e:	4622      	mov	r2, r4
 800da50:	462b      	mov	r3, r5
 800da52:	f04f 0000 	mov.w	r0, #0
 800da56:	f04f 0100 	mov.w	r1, #0
 800da5a:	0159      	lsls	r1, r3, #5
 800da5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800da60:	0150      	lsls	r0, r2, #5
 800da62:	4602      	mov	r2, r0
 800da64:	460b      	mov	r3, r1
 800da66:	4621      	mov	r1, r4
 800da68:	1a51      	subs	r1, r2, r1
 800da6a:	6439      	str	r1, [r7, #64]	; 0x40
 800da6c:	4629      	mov	r1, r5
 800da6e:	eb63 0301 	sbc.w	r3, r3, r1
 800da72:	647b      	str	r3, [r7, #68]	; 0x44
 800da74:	f04f 0200 	mov.w	r2, #0
 800da78:	f04f 0300 	mov.w	r3, #0
 800da7c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800da80:	4649      	mov	r1, r9
 800da82:	018b      	lsls	r3, r1, #6
 800da84:	4641      	mov	r1, r8
 800da86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800da8a:	4641      	mov	r1, r8
 800da8c:	018a      	lsls	r2, r1, #6
 800da8e:	4641      	mov	r1, r8
 800da90:	1a51      	subs	r1, r2, r1
 800da92:	63b9      	str	r1, [r7, #56]	; 0x38
 800da94:	4649      	mov	r1, r9
 800da96:	eb63 0301 	sbc.w	r3, r3, r1
 800da9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da9c:	f04f 0200 	mov.w	r2, #0
 800daa0:	f04f 0300 	mov.w	r3, #0
 800daa4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800daa8:	4649      	mov	r1, r9
 800daaa:	00cb      	lsls	r3, r1, #3
 800daac:	4641      	mov	r1, r8
 800daae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800dab2:	4641      	mov	r1, r8
 800dab4:	00ca      	lsls	r2, r1, #3
 800dab6:	4610      	mov	r0, r2
 800dab8:	4619      	mov	r1, r3
 800daba:	4603      	mov	r3, r0
 800dabc:	4622      	mov	r2, r4
 800dabe:	189b      	adds	r3, r3, r2
 800dac0:	633b      	str	r3, [r7, #48]	; 0x30
 800dac2:	462b      	mov	r3, r5
 800dac4:	460a      	mov	r2, r1
 800dac6:	eb42 0303 	adc.w	r3, r2, r3
 800daca:	637b      	str	r3, [r7, #52]	; 0x34
 800dacc:	f04f 0200 	mov.w	r2, #0
 800dad0:	f04f 0300 	mov.w	r3, #0
 800dad4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800dad8:	4629      	mov	r1, r5
 800dada:	024b      	lsls	r3, r1, #9
 800dadc:	4621      	mov	r1, r4
 800dade:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800dae2:	4621      	mov	r1, r4
 800dae4:	024a      	lsls	r2, r1, #9
 800dae6:	4610      	mov	r0, r2
 800dae8:	4619      	mov	r1, r3
 800daea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800daee:	2200      	movs	r2, #0
 800daf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800daf4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800daf8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800dafc:	f7f3 f8d4 	bl	8000ca8 <__aeabi_uldivmod>
 800db00:	4602      	mov	r2, r0
 800db02:	460b      	mov	r3, r1
 800db04:	4613      	mov	r3, r2
 800db06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800db0a:	e067      	b.n	800dbdc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800db0c:	4b75      	ldr	r3, [pc, #468]	; (800dce4 <HAL_RCC_GetSysClockFreq+0x354>)
 800db0e:	685b      	ldr	r3, [r3, #4]
 800db10:	099b      	lsrs	r3, r3, #6
 800db12:	2200      	movs	r2, #0
 800db14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800db18:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800db1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800db20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db24:	67bb      	str	r3, [r7, #120]	; 0x78
 800db26:	2300      	movs	r3, #0
 800db28:	67fb      	str	r3, [r7, #124]	; 0x7c
 800db2a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800db2e:	4622      	mov	r2, r4
 800db30:	462b      	mov	r3, r5
 800db32:	f04f 0000 	mov.w	r0, #0
 800db36:	f04f 0100 	mov.w	r1, #0
 800db3a:	0159      	lsls	r1, r3, #5
 800db3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800db40:	0150      	lsls	r0, r2, #5
 800db42:	4602      	mov	r2, r0
 800db44:	460b      	mov	r3, r1
 800db46:	4621      	mov	r1, r4
 800db48:	1a51      	subs	r1, r2, r1
 800db4a:	62b9      	str	r1, [r7, #40]	; 0x28
 800db4c:	4629      	mov	r1, r5
 800db4e:	eb63 0301 	sbc.w	r3, r3, r1
 800db52:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db54:	f04f 0200 	mov.w	r2, #0
 800db58:	f04f 0300 	mov.w	r3, #0
 800db5c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800db60:	4649      	mov	r1, r9
 800db62:	018b      	lsls	r3, r1, #6
 800db64:	4641      	mov	r1, r8
 800db66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800db6a:	4641      	mov	r1, r8
 800db6c:	018a      	lsls	r2, r1, #6
 800db6e:	4641      	mov	r1, r8
 800db70:	ebb2 0a01 	subs.w	sl, r2, r1
 800db74:	4649      	mov	r1, r9
 800db76:	eb63 0b01 	sbc.w	fp, r3, r1
 800db7a:	f04f 0200 	mov.w	r2, #0
 800db7e:	f04f 0300 	mov.w	r3, #0
 800db82:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800db86:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800db8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800db8e:	4692      	mov	sl, r2
 800db90:	469b      	mov	fp, r3
 800db92:	4623      	mov	r3, r4
 800db94:	eb1a 0303 	adds.w	r3, sl, r3
 800db98:	623b      	str	r3, [r7, #32]
 800db9a:	462b      	mov	r3, r5
 800db9c:	eb4b 0303 	adc.w	r3, fp, r3
 800dba0:	627b      	str	r3, [r7, #36]	; 0x24
 800dba2:	f04f 0200 	mov.w	r2, #0
 800dba6:	f04f 0300 	mov.w	r3, #0
 800dbaa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800dbae:	4629      	mov	r1, r5
 800dbb0:	028b      	lsls	r3, r1, #10
 800dbb2:	4621      	mov	r1, r4
 800dbb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800dbb8:	4621      	mov	r1, r4
 800dbba:	028a      	lsls	r2, r1, #10
 800dbbc:	4610      	mov	r0, r2
 800dbbe:	4619      	mov	r1, r3
 800dbc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	673b      	str	r3, [r7, #112]	; 0x70
 800dbc8:	677a      	str	r2, [r7, #116]	; 0x74
 800dbca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800dbce:	f7f3 f86b 	bl	8000ca8 <__aeabi_uldivmod>
 800dbd2:	4602      	mov	r2, r0
 800dbd4:	460b      	mov	r3, r1
 800dbd6:	4613      	mov	r3, r2
 800dbd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800dbdc:	4b41      	ldr	r3, [pc, #260]	; (800dce4 <HAL_RCC_GetSysClockFreq+0x354>)
 800dbde:	685b      	ldr	r3, [r3, #4]
 800dbe0:	0c1b      	lsrs	r3, r3, #16
 800dbe2:	f003 0303 	and.w	r3, r3, #3
 800dbe6:	3301      	adds	r3, #1
 800dbe8:	005b      	lsls	r3, r3, #1
 800dbea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800dbee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800dbf2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dbf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800dbfe:	e0eb      	b.n	800ddd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800dc00:	4b38      	ldr	r3, [pc, #224]	; (800dce4 <HAL_RCC_GetSysClockFreq+0x354>)
 800dc02:	685b      	ldr	r3, [r3, #4]
 800dc04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dc08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800dc0c:	4b35      	ldr	r3, [pc, #212]	; (800dce4 <HAL_RCC_GetSysClockFreq+0x354>)
 800dc0e:	685b      	ldr	r3, [r3, #4]
 800dc10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d06b      	beq.n	800dcf0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dc18:	4b32      	ldr	r3, [pc, #200]	; (800dce4 <HAL_RCC_GetSysClockFreq+0x354>)
 800dc1a:	685b      	ldr	r3, [r3, #4]
 800dc1c:	099b      	lsrs	r3, r3, #6
 800dc1e:	2200      	movs	r2, #0
 800dc20:	66bb      	str	r3, [r7, #104]	; 0x68
 800dc22:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dc24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc2a:	663b      	str	r3, [r7, #96]	; 0x60
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	667b      	str	r3, [r7, #100]	; 0x64
 800dc30:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800dc34:	4622      	mov	r2, r4
 800dc36:	462b      	mov	r3, r5
 800dc38:	f04f 0000 	mov.w	r0, #0
 800dc3c:	f04f 0100 	mov.w	r1, #0
 800dc40:	0159      	lsls	r1, r3, #5
 800dc42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800dc46:	0150      	lsls	r0, r2, #5
 800dc48:	4602      	mov	r2, r0
 800dc4a:	460b      	mov	r3, r1
 800dc4c:	4621      	mov	r1, r4
 800dc4e:	1a51      	subs	r1, r2, r1
 800dc50:	61b9      	str	r1, [r7, #24]
 800dc52:	4629      	mov	r1, r5
 800dc54:	eb63 0301 	sbc.w	r3, r3, r1
 800dc58:	61fb      	str	r3, [r7, #28]
 800dc5a:	f04f 0200 	mov.w	r2, #0
 800dc5e:	f04f 0300 	mov.w	r3, #0
 800dc62:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800dc66:	4659      	mov	r1, fp
 800dc68:	018b      	lsls	r3, r1, #6
 800dc6a:	4651      	mov	r1, sl
 800dc6c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800dc70:	4651      	mov	r1, sl
 800dc72:	018a      	lsls	r2, r1, #6
 800dc74:	4651      	mov	r1, sl
 800dc76:	ebb2 0801 	subs.w	r8, r2, r1
 800dc7a:	4659      	mov	r1, fp
 800dc7c:	eb63 0901 	sbc.w	r9, r3, r1
 800dc80:	f04f 0200 	mov.w	r2, #0
 800dc84:	f04f 0300 	mov.w	r3, #0
 800dc88:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800dc8c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800dc90:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800dc94:	4690      	mov	r8, r2
 800dc96:	4699      	mov	r9, r3
 800dc98:	4623      	mov	r3, r4
 800dc9a:	eb18 0303 	adds.w	r3, r8, r3
 800dc9e:	613b      	str	r3, [r7, #16]
 800dca0:	462b      	mov	r3, r5
 800dca2:	eb49 0303 	adc.w	r3, r9, r3
 800dca6:	617b      	str	r3, [r7, #20]
 800dca8:	f04f 0200 	mov.w	r2, #0
 800dcac:	f04f 0300 	mov.w	r3, #0
 800dcb0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800dcb4:	4629      	mov	r1, r5
 800dcb6:	024b      	lsls	r3, r1, #9
 800dcb8:	4621      	mov	r1, r4
 800dcba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800dcbe:	4621      	mov	r1, r4
 800dcc0:	024a      	lsls	r2, r1, #9
 800dcc2:	4610      	mov	r0, r2
 800dcc4:	4619      	mov	r1, r3
 800dcc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dcca:	2200      	movs	r2, #0
 800dccc:	65bb      	str	r3, [r7, #88]	; 0x58
 800dcce:	65fa      	str	r2, [r7, #92]	; 0x5c
 800dcd0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800dcd4:	f7f2 ffe8 	bl	8000ca8 <__aeabi_uldivmod>
 800dcd8:	4602      	mov	r2, r0
 800dcda:	460b      	mov	r3, r1
 800dcdc:	4613      	mov	r3, r2
 800dcde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dce2:	e065      	b.n	800ddb0 <HAL_RCC_GetSysClockFreq+0x420>
 800dce4:	40023800 	.word	0x40023800
 800dce8:	00f42400 	.word	0x00f42400
 800dcec:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dcf0:	4b3d      	ldr	r3, [pc, #244]	; (800dde8 <HAL_RCC_GetSysClockFreq+0x458>)
 800dcf2:	685b      	ldr	r3, [r3, #4]
 800dcf4:	099b      	lsrs	r3, r3, #6
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	4611      	mov	r1, r2
 800dcfc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800dd00:	653b      	str	r3, [r7, #80]	; 0x50
 800dd02:	2300      	movs	r3, #0
 800dd04:	657b      	str	r3, [r7, #84]	; 0x54
 800dd06:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800dd0a:	4642      	mov	r2, r8
 800dd0c:	464b      	mov	r3, r9
 800dd0e:	f04f 0000 	mov.w	r0, #0
 800dd12:	f04f 0100 	mov.w	r1, #0
 800dd16:	0159      	lsls	r1, r3, #5
 800dd18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800dd1c:	0150      	lsls	r0, r2, #5
 800dd1e:	4602      	mov	r2, r0
 800dd20:	460b      	mov	r3, r1
 800dd22:	4641      	mov	r1, r8
 800dd24:	1a51      	subs	r1, r2, r1
 800dd26:	60b9      	str	r1, [r7, #8]
 800dd28:	4649      	mov	r1, r9
 800dd2a:	eb63 0301 	sbc.w	r3, r3, r1
 800dd2e:	60fb      	str	r3, [r7, #12]
 800dd30:	f04f 0200 	mov.w	r2, #0
 800dd34:	f04f 0300 	mov.w	r3, #0
 800dd38:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800dd3c:	4659      	mov	r1, fp
 800dd3e:	018b      	lsls	r3, r1, #6
 800dd40:	4651      	mov	r1, sl
 800dd42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800dd46:	4651      	mov	r1, sl
 800dd48:	018a      	lsls	r2, r1, #6
 800dd4a:	4651      	mov	r1, sl
 800dd4c:	1a54      	subs	r4, r2, r1
 800dd4e:	4659      	mov	r1, fp
 800dd50:	eb63 0501 	sbc.w	r5, r3, r1
 800dd54:	f04f 0200 	mov.w	r2, #0
 800dd58:	f04f 0300 	mov.w	r3, #0
 800dd5c:	00eb      	lsls	r3, r5, #3
 800dd5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800dd62:	00e2      	lsls	r2, r4, #3
 800dd64:	4614      	mov	r4, r2
 800dd66:	461d      	mov	r5, r3
 800dd68:	4643      	mov	r3, r8
 800dd6a:	18e3      	adds	r3, r4, r3
 800dd6c:	603b      	str	r3, [r7, #0]
 800dd6e:	464b      	mov	r3, r9
 800dd70:	eb45 0303 	adc.w	r3, r5, r3
 800dd74:	607b      	str	r3, [r7, #4]
 800dd76:	f04f 0200 	mov.w	r2, #0
 800dd7a:	f04f 0300 	mov.w	r3, #0
 800dd7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800dd82:	4629      	mov	r1, r5
 800dd84:	028b      	lsls	r3, r1, #10
 800dd86:	4621      	mov	r1, r4
 800dd88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800dd8c:	4621      	mov	r1, r4
 800dd8e:	028a      	lsls	r2, r1, #10
 800dd90:	4610      	mov	r0, r2
 800dd92:	4619      	mov	r1, r3
 800dd94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dd98:	2200      	movs	r2, #0
 800dd9a:	64bb      	str	r3, [r7, #72]	; 0x48
 800dd9c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800dd9e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800dda2:	f7f2 ff81 	bl	8000ca8 <__aeabi_uldivmod>
 800dda6:	4602      	mov	r2, r0
 800dda8:	460b      	mov	r3, r1
 800ddaa:	4613      	mov	r3, r2
 800ddac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800ddb0:	4b0d      	ldr	r3, [pc, #52]	; (800dde8 <HAL_RCC_GetSysClockFreq+0x458>)
 800ddb2:	685b      	ldr	r3, [r3, #4]
 800ddb4:	0f1b      	lsrs	r3, r3, #28
 800ddb6:	f003 0307 	and.w	r3, r3, #7
 800ddba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800ddbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ddc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ddc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800ddce:	e003      	b.n	800ddd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ddd0:	4b06      	ldr	r3, [pc, #24]	; (800ddec <HAL_RCC_GetSysClockFreq+0x45c>)
 800ddd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800ddd6:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ddd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	37b8      	adds	r7, #184	; 0xb8
 800dde0:	46bd      	mov	sp, r7
 800dde2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dde6:	bf00      	nop
 800dde8:	40023800 	.word	0x40023800
 800ddec:	00f42400 	.word	0x00f42400

0800ddf0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b086      	sub	sp, #24
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d101      	bne.n	800de02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ddfe:	2301      	movs	r3, #1
 800de00:	e28d      	b.n	800e31e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	f003 0301 	and.w	r3, r3, #1
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	f000 8083 	beq.w	800df16 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800de10:	4b94      	ldr	r3, [pc, #592]	; (800e064 <HAL_RCC_OscConfig+0x274>)
 800de12:	689b      	ldr	r3, [r3, #8]
 800de14:	f003 030c 	and.w	r3, r3, #12
 800de18:	2b04      	cmp	r3, #4
 800de1a:	d019      	beq.n	800de50 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800de1c:	4b91      	ldr	r3, [pc, #580]	; (800e064 <HAL_RCC_OscConfig+0x274>)
 800de1e:	689b      	ldr	r3, [r3, #8]
 800de20:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800de24:	2b08      	cmp	r3, #8
 800de26:	d106      	bne.n	800de36 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800de28:	4b8e      	ldr	r3, [pc, #568]	; (800e064 <HAL_RCC_OscConfig+0x274>)
 800de2a:	685b      	ldr	r3, [r3, #4]
 800de2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800de34:	d00c      	beq.n	800de50 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800de36:	4b8b      	ldr	r3, [pc, #556]	; (800e064 <HAL_RCC_OscConfig+0x274>)
 800de38:	689b      	ldr	r3, [r3, #8]
 800de3a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800de3e:	2b0c      	cmp	r3, #12
 800de40:	d112      	bne.n	800de68 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800de42:	4b88      	ldr	r3, [pc, #544]	; (800e064 <HAL_RCC_OscConfig+0x274>)
 800de44:	685b      	ldr	r3, [r3, #4]
 800de46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800de4e:	d10b      	bne.n	800de68 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800de50:	4b84      	ldr	r3, [pc, #528]	; (800e064 <HAL_RCC_OscConfig+0x274>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d05b      	beq.n	800df14 <HAL_RCC_OscConfig+0x124>
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	685b      	ldr	r3, [r3, #4]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d157      	bne.n	800df14 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800de64:	2301      	movs	r3, #1
 800de66:	e25a      	b.n	800e31e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	685b      	ldr	r3, [r3, #4]
 800de6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de70:	d106      	bne.n	800de80 <HAL_RCC_OscConfig+0x90>
 800de72:	4b7c      	ldr	r3, [pc, #496]	; (800e064 <HAL_RCC_OscConfig+0x274>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	4a7b      	ldr	r2, [pc, #492]	; (800e064 <HAL_RCC_OscConfig+0x274>)
 800de78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800de7c:	6013      	str	r3, [r2, #0]
 800de7e:	e01d      	b.n	800debc <HAL_RCC_OscConfig+0xcc>
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	685b      	ldr	r3, [r3, #4]
 800de84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800de88:	d10c      	bne.n	800dea4 <HAL_RCC_OscConfig+0xb4>
 800de8a:	4b76      	ldr	r3, [pc, #472]	; (800e064 <HAL_RCC_OscConfig+0x274>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	4a75      	ldr	r2, [pc, #468]	; (800e064 <HAL_RCC_OscConfig+0x274>)
 800de90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800de94:	6013      	str	r3, [r2, #0]
 800de96:	4b73      	ldr	r3, [pc, #460]	; (800e064 <HAL_RCC_OscConfig+0x274>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	4a72      	ldr	r2, [pc, #456]	; (800e064 <HAL_RCC_OscConfig+0x274>)
 800de9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dea0:	6013      	str	r3, [r2, #0]
 800dea2:	e00b      	b.n	800debc <HAL_RCC_OscConfig+0xcc>
 800dea4:	4b6f      	ldr	r3, [pc, #444]	; (800e064 <HAL_RCC_OscConfig+0x274>)
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	4a6e      	ldr	r2, [pc, #440]	; (800e064 <HAL_RCC_OscConfig+0x274>)
 800deaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800deae:	6013      	str	r3, [r2, #0]
 800deb0:	4b6c      	ldr	r3, [pc, #432]	; (800e064 <HAL_RCC_OscConfig+0x274>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	4a6b      	ldr	r2, [pc, #428]	; (800e064 <HAL_RCC_OscConfig+0x274>)
 800deb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800deba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	685b      	ldr	r3, [r3, #4]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d013      	beq.n	800deec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dec4:	f7ff f878 	bl	800cfb8 <HAL_GetTick>
 800dec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800deca:	e008      	b.n	800dede <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800decc:	f7ff f874 	bl	800cfb8 <HAL_GetTick>
 800ded0:	4602      	mov	r2, r0
 800ded2:	693b      	ldr	r3, [r7, #16]
 800ded4:	1ad3      	subs	r3, r2, r3
 800ded6:	2b64      	cmp	r3, #100	; 0x64
 800ded8:	d901      	bls.n	800dede <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800deda:	2303      	movs	r3, #3
 800dedc:	e21f      	b.n	800e31e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dede:	4b61      	ldr	r3, [pc, #388]	; (800e064 <HAL_RCC_OscConfig+0x274>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d0f0      	beq.n	800decc <HAL_RCC_OscConfig+0xdc>
 800deea:	e014      	b.n	800df16 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800deec:	f7ff f864 	bl	800cfb8 <HAL_GetTick>
 800def0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800def2:	e008      	b.n	800df06 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800def4:	f7ff f860 	bl	800cfb8 <HAL_GetTick>
 800def8:	4602      	mov	r2, r0
 800defa:	693b      	ldr	r3, [r7, #16]
 800defc:	1ad3      	subs	r3, r2, r3
 800defe:	2b64      	cmp	r3, #100	; 0x64
 800df00:	d901      	bls.n	800df06 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800df02:	2303      	movs	r3, #3
 800df04:	e20b      	b.n	800e31e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800df06:	4b57      	ldr	r3, [pc, #348]	; (800e064 <HAL_RCC_OscConfig+0x274>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d1f0      	bne.n	800def4 <HAL_RCC_OscConfig+0x104>
 800df12:	e000      	b.n	800df16 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800df14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	f003 0302 	and.w	r3, r3, #2
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d06f      	beq.n	800e002 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800df22:	4b50      	ldr	r3, [pc, #320]	; (800e064 <HAL_RCC_OscConfig+0x274>)
 800df24:	689b      	ldr	r3, [r3, #8]
 800df26:	f003 030c 	and.w	r3, r3, #12
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d017      	beq.n	800df5e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800df2e:	4b4d      	ldr	r3, [pc, #308]	; (800e064 <HAL_RCC_OscConfig+0x274>)
 800df30:	689b      	ldr	r3, [r3, #8]
 800df32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800df36:	2b08      	cmp	r3, #8
 800df38:	d105      	bne.n	800df46 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800df3a:	4b4a      	ldr	r3, [pc, #296]	; (800e064 <HAL_RCC_OscConfig+0x274>)
 800df3c:	685b      	ldr	r3, [r3, #4]
 800df3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800df42:	2b00      	cmp	r3, #0
 800df44:	d00b      	beq.n	800df5e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800df46:	4b47      	ldr	r3, [pc, #284]	; (800e064 <HAL_RCC_OscConfig+0x274>)
 800df48:	689b      	ldr	r3, [r3, #8]
 800df4a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800df4e:	2b0c      	cmp	r3, #12
 800df50:	d11c      	bne.n	800df8c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800df52:	4b44      	ldr	r3, [pc, #272]	; (800e064 <HAL_RCC_OscConfig+0x274>)
 800df54:	685b      	ldr	r3, [r3, #4]
 800df56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d116      	bne.n	800df8c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800df5e:	4b41      	ldr	r3, [pc, #260]	; (800e064 <HAL_RCC_OscConfig+0x274>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	f003 0302 	and.w	r3, r3, #2
 800df66:	2b00      	cmp	r3, #0
 800df68:	d005      	beq.n	800df76 <HAL_RCC_OscConfig+0x186>
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	68db      	ldr	r3, [r3, #12]
 800df6e:	2b01      	cmp	r3, #1
 800df70:	d001      	beq.n	800df76 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800df72:	2301      	movs	r3, #1
 800df74:	e1d3      	b.n	800e31e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800df76:	4b3b      	ldr	r3, [pc, #236]	; (800e064 <HAL_RCC_OscConfig+0x274>)
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	691b      	ldr	r3, [r3, #16]
 800df82:	00db      	lsls	r3, r3, #3
 800df84:	4937      	ldr	r1, [pc, #220]	; (800e064 <HAL_RCC_OscConfig+0x274>)
 800df86:	4313      	orrs	r3, r2
 800df88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800df8a:	e03a      	b.n	800e002 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	68db      	ldr	r3, [r3, #12]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d020      	beq.n	800dfd6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800df94:	4b34      	ldr	r3, [pc, #208]	; (800e068 <HAL_RCC_OscConfig+0x278>)
 800df96:	2201      	movs	r2, #1
 800df98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df9a:	f7ff f80d 	bl	800cfb8 <HAL_GetTick>
 800df9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dfa0:	e008      	b.n	800dfb4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800dfa2:	f7ff f809 	bl	800cfb8 <HAL_GetTick>
 800dfa6:	4602      	mov	r2, r0
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	1ad3      	subs	r3, r2, r3
 800dfac:	2b02      	cmp	r3, #2
 800dfae:	d901      	bls.n	800dfb4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800dfb0:	2303      	movs	r3, #3
 800dfb2:	e1b4      	b.n	800e31e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dfb4:	4b2b      	ldr	r3, [pc, #172]	; (800e064 <HAL_RCC_OscConfig+0x274>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	f003 0302 	and.w	r3, r3, #2
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d0f0      	beq.n	800dfa2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dfc0:	4b28      	ldr	r3, [pc, #160]	; (800e064 <HAL_RCC_OscConfig+0x274>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	691b      	ldr	r3, [r3, #16]
 800dfcc:	00db      	lsls	r3, r3, #3
 800dfce:	4925      	ldr	r1, [pc, #148]	; (800e064 <HAL_RCC_OscConfig+0x274>)
 800dfd0:	4313      	orrs	r3, r2
 800dfd2:	600b      	str	r3, [r1, #0]
 800dfd4:	e015      	b.n	800e002 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800dfd6:	4b24      	ldr	r3, [pc, #144]	; (800e068 <HAL_RCC_OscConfig+0x278>)
 800dfd8:	2200      	movs	r2, #0
 800dfda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dfdc:	f7fe ffec 	bl	800cfb8 <HAL_GetTick>
 800dfe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800dfe2:	e008      	b.n	800dff6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800dfe4:	f7fe ffe8 	bl	800cfb8 <HAL_GetTick>
 800dfe8:	4602      	mov	r2, r0
 800dfea:	693b      	ldr	r3, [r7, #16]
 800dfec:	1ad3      	subs	r3, r2, r3
 800dfee:	2b02      	cmp	r3, #2
 800dff0:	d901      	bls.n	800dff6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800dff2:	2303      	movs	r3, #3
 800dff4:	e193      	b.n	800e31e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800dff6:	4b1b      	ldr	r3, [pc, #108]	; (800e064 <HAL_RCC_OscConfig+0x274>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	f003 0302 	and.w	r3, r3, #2
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d1f0      	bne.n	800dfe4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	f003 0308 	and.w	r3, r3, #8
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d036      	beq.n	800e07c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	695b      	ldr	r3, [r3, #20]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d016      	beq.n	800e044 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e016:	4b15      	ldr	r3, [pc, #84]	; (800e06c <HAL_RCC_OscConfig+0x27c>)
 800e018:	2201      	movs	r2, #1
 800e01a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e01c:	f7fe ffcc 	bl	800cfb8 <HAL_GetTick>
 800e020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e022:	e008      	b.n	800e036 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e024:	f7fe ffc8 	bl	800cfb8 <HAL_GetTick>
 800e028:	4602      	mov	r2, r0
 800e02a:	693b      	ldr	r3, [r7, #16]
 800e02c:	1ad3      	subs	r3, r2, r3
 800e02e:	2b02      	cmp	r3, #2
 800e030:	d901      	bls.n	800e036 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800e032:	2303      	movs	r3, #3
 800e034:	e173      	b.n	800e31e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e036:	4b0b      	ldr	r3, [pc, #44]	; (800e064 <HAL_RCC_OscConfig+0x274>)
 800e038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e03a:	f003 0302 	and.w	r3, r3, #2
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d0f0      	beq.n	800e024 <HAL_RCC_OscConfig+0x234>
 800e042:	e01b      	b.n	800e07c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e044:	4b09      	ldr	r3, [pc, #36]	; (800e06c <HAL_RCC_OscConfig+0x27c>)
 800e046:	2200      	movs	r2, #0
 800e048:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e04a:	f7fe ffb5 	bl	800cfb8 <HAL_GetTick>
 800e04e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e050:	e00e      	b.n	800e070 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e052:	f7fe ffb1 	bl	800cfb8 <HAL_GetTick>
 800e056:	4602      	mov	r2, r0
 800e058:	693b      	ldr	r3, [r7, #16]
 800e05a:	1ad3      	subs	r3, r2, r3
 800e05c:	2b02      	cmp	r3, #2
 800e05e:	d907      	bls.n	800e070 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800e060:	2303      	movs	r3, #3
 800e062:	e15c      	b.n	800e31e <HAL_RCC_OscConfig+0x52e>
 800e064:	40023800 	.word	0x40023800
 800e068:	42470000 	.word	0x42470000
 800e06c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e070:	4b8a      	ldr	r3, [pc, #552]	; (800e29c <HAL_RCC_OscConfig+0x4ac>)
 800e072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e074:	f003 0302 	and.w	r3, r3, #2
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d1ea      	bne.n	800e052 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	f003 0304 	and.w	r3, r3, #4
 800e084:	2b00      	cmp	r3, #0
 800e086:	f000 8097 	beq.w	800e1b8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e08a:	2300      	movs	r3, #0
 800e08c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e08e:	4b83      	ldr	r3, [pc, #524]	; (800e29c <HAL_RCC_OscConfig+0x4ac>)
 800e090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e096:	2b00      	cmp	r3, #0
 800e098:	d10f      	bne.n	800e0ba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e09a:	2300      	movs	r3, #0
 800e09c:	60bb      	str	r3, [r7, #8]
 800e09e:	4b7f      	ldr	r3, [pc, #508]	; (800e29c <HAL_RCC_OscConfig+0x4ac>)
 800e0a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0a2:	4a7e      	ldr	r2, [pc, #504]	; (800e29c <HAL_RCC_OscConfig+0x4ac>)
 800e0a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e0a8:	6413      	str	r3, [r2, #64]	; 0x40
 800e0aa:	4b7c      	ldr	r3, [pc, #496]	; (800e29c <HAL_RCC_OscConfig+0x4ac>)
 800e0ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e0b2:	60bb      	str	r3, [r7, #8]
 800e0b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e0ba:	4b79      	ldr	r3, [pc, #484]	; (800e2a0 <HAL_RCC_OscConfig+0x4b0>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d118      	bne.n	800e0f8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e0c6:	4b76      	ldr	r3, [pc, #472]	; (800e2a0 <HAL_RCC_OscConfig+0x4b0>)
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	4a75      	ldr	r2, [pc, #468]	; (800e2a0 <HAL_RCC_OscConfig+0x4b0>)
 800e0cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e0d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e0d2:	f7fe ff71 	bl	800cfb8 <HAL_GetTick>
 800e0d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e0d8:	e008      	b.n	800e0ec <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e0da:	f7fe ff6d 	bl	800cfb8 <HAL_GetTick>
 800e0de:	4602      	mov	r2, r0
 800e0e0:	693b      	ldr	r3, [r7, #16]
 800e0e2:	1ad3      	subs	r3, r2, r3
 800e0e4:	2b02      	cmp	r3, #2
 800e0e6:	d901      	bls.n	800e0ec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800e0e8:	2303      	movs	r3, #3
 800e0ea:	e118      	b.n	800e31e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e0ec:	4b6c      	ldr	r3, [pc, #432]	; (800e2a0 <HAL_RCC_OscConfig+0x4b0>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d0f0      	beq.n	800e0da <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	689b      	ldr	r3, [r3, #8]
 800e0fc:	2b01      	cmp	r3, #1
 800e0fe:	d106      	bne.n	800e10e <HAL_RCC_OscConfig+0x31e>
 800e100:	4b66      	ldr	r3, [pc, #408]	; (800e29c <HAL_RCC_OscConfig+0x4ac>)
 800e102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e104:	4a65      	ldr	r2, [pc, #404]	; (800e29c <HAL_RCC_OscConfig+0x4ac>)
 800e106:	f043 0301 	orr.w	r3, r3, #1
 800e10a:	6713      	str	r3, [r2, #112]	; 0x70
 800e10c:	e01c      	b.n	800e148 <HAL_RCC_OscConfig+0x358>
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	689b      	ldr	r3, [r3, #8]
 800e112:	2b05      	cmp	r3, #5
 800e114:	d10c      	bne.n	800e130 <HAL_RCC_OscConfig+0x340>
 800e116:	4b61      	ldr	r3, [pc, #388]	; (800e29c <HAL_RCC_OscConfig+0x4ac>)
 800e118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e11a:	4a60      	ldr	r2, [pc, #384]	; (800e29c <HAL_RCC_OscConfig+0x4ac>)
 800e11c:	f043 0304 	orr.w	r3, r3, #4
 800e120:	6713      	str	r3, [r2, #112]	; 0x70
 800e122:	4b5e      	ldr	r3, [pc, #376]	; (800e29c <HAL_RCC_OscConfig+0x4ac>)
 800e124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e126:	4a5d      	ldr	r2, [pc, #372]	; (800e29c <HAL_RCC_OscConfig+0x4ac>)
 800e128:	f043 0301 	orr.w	r3, r3, #1
 800e12c:	6713      	str	r3, [r2, #112]	; 0x70
 800e12e:	e00b      	b.n	800e148 <HAL_RCC_OscConfig+0x358>
 800e130:	4b5a      	ldr	r3, [pc, #360]	; (800e29c <HAL_RCC_OscConfig+0x4ac>)
 800e132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e134:	4a59      	ldr	r2, [pc, #356]	; (800e29c <HAL_RCC_OscConfig+0x4ac>)
 800e136:	f023 0301 	bic.w	r3, r3, #1
 800e13a:	6713      	str	r3, [r2, #112]	; 0x70
 800e13c:	4b57      	ldr	r3, [pc, #348]	; (800e29c <HAL_RCC_OscConfig+0x4ac>)
 800e13e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e140:	4a56      	ldr	r2, [pc, #344]	; (800e29c <HAL_RCC_OscConfig+0x4ac>)
 800e142:	f023 0304 	bic.w	r3, r3, #4
 800e146:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	689b      	ldr	r3, [r3, #8]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d015      	beq.n	800e17c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e150:	f7fe ff32 	bl	800cfb8 <HAL_GetTick>
 800e154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e156:	e00a      	b.n	800e16e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e158:	f7fe ff2e 	bl	800cfb8 <HAL_GetTick>
 800e15c:	4602      	mov	r2, r0
 800e15e:	693b      	ldr	r3, [r7, #16]
 800e160:	1ad3      	subs	r3, r2, r3
 800e162:	f241 3288 	movw	r2, #5000	; 0x1388
 800e166:	4293      	cmp	r3, r2
 800e168:	d901      	bls.n	800e16e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800e16a:	2303      	movs	r3, #3
 800e16c:	e0d7      	b.n	800e31e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e16e:	4b4b      	ldr	r3, [pc, #300]	; (800e29c <HAL_RCC_OscConfig+0x4ac>)
 800e170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e172:	f003 0302 	and.w	r3, r3, #2
 800e176:	2b00      	cmp	r3, #0
 800e178:	d0ee      	beq.n	800e158 <HAL_RCC_OscConfig+0x368>
 800e17a:	e014      	b.n	800e1a6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e17c:	f7fe ff1c 	bl	800cfb8 <HAL_GetTick>
 800e180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e182:	e00a      	b.n	800e19a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e184:	f7fe ff18 	bl	800cfb8 <HAL_GetTick>
 800e188:	4602      	mov	r2, r0
 800e18a:	693b      	ldr	r3, [r7, #16]
 800e18c:	1ad3      	subs	r3, r2, r3
 800e18e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e192:	4293      	cmp	r3, r2
 800e194:	d901      	bls.n	800e19a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800e196:	2303      	movs	r3, #3
 800e198:	e0c1      	b.n	800e31e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e19a:	4b40      	ldr	r3, [pc, #256]	; (800e29c <HAL_RCC_OscConfig+0x4ac>)
 800e19c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e19e:	f003 0302 	and.w	r3, r3, #2
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d1ee      	bne.n	800e184 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e1a6:	7dfb      	ldrb	r3, [r7, #23]
 800e1a8:	2b01      	cmp	r3, #1
 800e1aa:	d105      	bne.n	800e1b8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e1ac:	4b3b      	ldr	r3, [pc, #236]	; (800e29c <HAL_RCC_OscConfig+0x4ac>)
 800e1ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1b0:	4a3a      	ldr	r2, [pc, #232]	; (800e29c <HAL_RCC_OscConfig+0x4ac>)
 800e1b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e1b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	699b      	ldr	r3, [r3, #24]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	f000 80ad 	beq.w	800e31c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e1c2:	4b36      	ldr	r3, [pc, #216]	; (800e29c <HAL_RCC_OscConfig+0x4ac>)
 800e1c4:	689b      	ldr	r3, [r3, #8]
 800e1c6:	f003 030c 	and.w	r3, r3, #12
 800e1ca:	2b08      	cmp	r3, #8
 800e1cc:	d060      	beq.n	800e290 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	699b      	ldr	r3, [r3, #24]
 800e1d2:	2b02      	cmp	r3, #2
 800e1d4:	d145      	bne.n	800e262 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e1d6:	4b33      	ldr	r3, [pc, #204]	; (800e2a4 <HAL_RCC_OscConfig+0x4b4>)
 800e1d8:	2200      	movs	r2, #0
 800e1da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e1dc:	f7fe feec 	bl	800cfb8 <HAL_GetTick>
 800e1e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e1e2:	e008      	b.n	800e1f6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e1e4:	f7fe fee8 	bl	800cfb8 <HAL_GetTick>
 800e1e8:	4602      	mov	r2, r0
 800e1ea:	693b      	ldr	r3, [r7, #16]
 800e1ec:	1ad3      	subs	r3, r2, r3
 800e1ee:	2b02      	cmp	r3, #2
 800e1f0:	d901      	bls.n	800e1f6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800e1f2:	2303      	movs	r3, #3
 800e1f4:	e093      	b.n	800e31e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e1f6:	4b29      	ldr	r3, [pc, #164]	; (800e29c <HAL_RCC_OscConfig+0x4ac>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d1f0      	bne.n	800e1e4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	69da      	ldr	r2, [r3, #28]
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6a1b      	ldr	r3, [r3, #32]
 800e20a:	431a      	orrs	r2, r3
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e210:	019b      	lsls	r3, r3, #6
 800e212:	431a      	orrs	r2, r3
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e218:	085b      	lsrs	r3, r3, #1
 800e21a:	3b01      	subs	r3, #1
 800e21c:	041b      	lsls	r3, r3, #16
 800e21e:	431a      	orrs	r2, r3
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e224:	061b      	lsls	r3, r3, #24
 800e226:	431a      	orrs	r2, r3
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e22c:	071b      	lsls	r3, r3, #28
 800e22e:	491b      	ldr	r1, [pc, #108]	; (800e29c <HAL_RCC_OscConfig+0x4ac>)
 800e230:	4313      	orrs	r3, r2
 800e232:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e234:	4b1b      	ldr	r3, [pc, #108]	; (800e2a4 <HAL_RCC_OscConfig+0x4b4>)
 800e236:	2201      	movs	r2, #1
 800e238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e23a:	f7fe febd 	bl	800cfb8 <HAL_GetTick>
 800e23e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e240:	e008      	b.n	800e254 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e242:	f7fe feb9 	bl	800cfb8 <HAL_GetTick>
 800e246:	4602      	mov	r2, r0
 800e248:	693b      	ldr	r3, [r7, #16]
 800e24a:	1ad3      	subs	r3, r2, r3
 800e24c:	2b02      	cmp	r3, #2
 800e24e:	d901      	bls.n	800e254 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800e250:	2303      	movs	r3, #3
 800e252:	e064      	b.n	800e31e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e254:	4b11      	ldr	r3, [pc, #68]	; (800e29c <HAL_RCC_OscConfig+0x4ac>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d0f0      	beq.n	800e242 <HAL_RCC_OscConfig+0x452>
 800e260:	e05c      	b.n	800e31c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e262:	4b10      	ldr	r3, [pc, #64]	; (800e2a4 <HAL_RCC_OscConfig+0x4b4>)
 800e264:	2200      	movs	r2, #0
 800e266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e268:	f7fe fea6 	bl	800cfb8 <HAL_GetTick>
 800e26c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e26e:	e008      	b.n	800e282 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e270:	f7fe fea2 	bl	800cfb8 <HAL_GetTick>
 800e274:	4602      	mov	r2, r0
 800e276:	693b      	ldr	r3, [r7, #16]
 800e278:	1ad3      	subs	r3, r2, r3
 800e27a:	2b02      	cmp	r3, #2
 800e27c:	d901      	bls.n	800e282 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800e27e:	2303      	movs	r3, #3
 800e280:	e04d      	b.n	800e31e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e282:	4b06      	ldr	r3, [pc, #24]	; (800e29c <HAL_RCC_OscConfig+0x4ac>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d1f0      	bne.n	800e270 <HAL_RCC_OscConfig+0x480>
 800e28e:	e045      	b.n	800e31c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	699b      	ldr	r3, [r3, #24]
 800e294:	2b01      	cmp	r3, #1
 800e296:	d107      	bne.n	800e2a8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800e298:	2301      	movs	r3, #1
 800e29a:	e040      	b.n	800e31e <HAL_RCC_OscConfig+0x52e>
 800e29c:	40023800 	.word	0x40023800
 800e2a0:	40007000 	.word	0x40007000
 800e2a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800e2a8:	4b1f      	ldr	r3, [pc, #124]	; (800e328 <HAL_RCC_OscConfig+0x538>)
 800e2aa:	685b      	ldr	r3, [r3, #4]
 800e2ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	699b      	ldr	r3, [r3, #24]
 800e2b2:	2b01      	cmp	r3, #1
 800e2b4:	d030      	beq.n	800e318 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e2c0:	429a      	cmp	r2, r3
 800e2c2:	d129      	bne.n	800e318 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e2ce:	429a      	cmp	r2, r3
 800e2d0:	d122      	bne.n	800e318 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e2d2:	68fa      	ldr	r2, [r7, #12]
 800e2d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800e2d8:	4013      	ands	r3, r2
 800e2da:	687a      	ldr	r2, [r7, #4]
 800e2dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e2de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e2e0:	4293      	cmp	r3, r2
 800e2e2:	d119      	bne.n	800e318 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2ee:	085b      	lsrs	r3, r3, #1
 800e2f0:	3b01      	subs	r3, #1
 800e2f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	d10f      	bne.n	800e318 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e302:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e304:	429a      	cmp	r2, r3
 800e306:	d107      	bne.n	800e318 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e312:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800e314:	429a      	cmp	r2, r3
 800e316:	d001      	beq.n	800e31c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800e318:	2301      	movs	r3, #1
 800e31a:	e000      	b.n	800e31e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800e31c:	2300      	movs	r3, #0
}
 800e31e:	4618      	mov	r0, r3
 800e320:	3718      	adds	r7, #24
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}
 800e326:	bf00      	nop
 800e328:	40023800 	.word	0x40023800

0800e32c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b082      	sub	sp, #8
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d101      	bne.n	800e33e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e33a:	2301      	movs	r3, #1
 800e33c:	e07b      	b.n	800e436 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e342:	2b00      	cmp	r3, #0
 800e344:	d108      	bne.n	800e358 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	685b      	ldr	r3, [r3, #4]
 800e34a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e34e:	d009      	beq.n	800e364 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2200      	movs	r2, #0
 800e354:	61da      	str	r2, [r3, #28]
 800e356:	e005      	b.n	800e364 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2200      	movs	r2, #0
 800e35c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	2200      	movs	r2, #0
 800e362:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2200      	movs	r2, #0
 800e368:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e370:	b2db      	uxtb	r3, r3
 800e372:	2b00      	cmp	r3, #0
 800e374:	d106      	bne.n	800e384 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2200      	movs	r2, #0
 800e37a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e37e:	6878      	ldr	r0, [r7, #4]
 800e380:	f7fe fb96 	bl	800cab0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2202      	movs	r2, #2
 800e388:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	681a      	ldr	r2, [r3, #0]
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e39a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	685b      	ldr	r3, [r3, #4]
 800e3a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	689b      	ldr	r3, [r3, #8]
 800e3a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800e3ac:	431a      	orrs	r2, r3
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	68db      	ldr	r3, [r3, #12]
 800e3b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e3b6:	431a      	orrs	r2, r3
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	691b      	ldr	r3, [r3, #16]
 800e3bc:	f003 0302 	and.w	r3, r3, #2
 800e3c0:	431a      	orrs	r2, r3
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	695b      	ldr	r3, [r3, #20]
 800e3c6:	f003 0301 	and.w	r3, r3, #1
 800e3ca:	431a      	orrs	r2, r3
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	699b      	ldr	r3, [r3, #24]
 800e3d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e3d4:	431a      	orrs	r2, r3
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	69db      	ldr	r3, [r3, #28]
 800e3da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e3de:	431a      	orrs	r2, r3
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	6a1b      	ldr	r3, [r3, #32]
 800e3e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3e8:	ea42 0103 	orr.w	r1, r2, r3
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	430a      	orrs	r2, r1
 800e3fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	699b      	ldr	r3, [r3, #24]
 800e400:	0c1b      	lsrs	r3, r3, #16
 800e402:	f003 0104 	and.w	r1, r3, #4
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e40a:	f003 0210 	and.w	r2, r3, #16
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	430a      	orrs	r2, r1
 800e414:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	69da      	ldr	r2, [r3, #28]
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e424:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2200      	movs	r2, #0
 800e42a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	2201      	movs	r2, #1
 800e430:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e434:	2300      	movs	r3, #0
}
 800e436:	4618      	mov	r0, r3
 800e438:	3708      	adds	r7, #8
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}

0800e43e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e43e:	b580      	push	{r7, lr}
 800e440:	b088      	sub	sp, #32
 800e442:	af00      	add	r7, sp, #0
 800e444:	60f8      	str	r0, [r7, #12]
 800e446:	60b9      	str	r1, [r7, #8]
 800e448:	603b      	str	r3, [r7, #0]
 800e44a:	4613      	mov	r3, r2
 800e44c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e44e:	2300      	movs	r3, #0
 800e450:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e458:	2b01      	cmp	r3, #1
 800e45a:	d101      	bne.n	800e460 <HAL_SPI_Transmit+0x22>
 800e45c:	2302      	movs	r3, #2
 800e45e:	e126      	b.n	800e6ae <HAL_SPI_Transmit+0x270>
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	2201      	movs	r2, #1
 800e464:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e468:	f7fe fda6 	bl	800cfb8 <HAL_GetTick>
 800e46c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e46e:	88fb      	ldrh	r3, [r7, #6]
 800e470:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e478:	b2db      	uxtb	r3, r3
 800e47a:	2b01      	cmp	r3, #1
 800e47c:	d002      	beq.n	800e484 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e47e:	2302      	movs	r3, #2
 800e480:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e482:	e10b      	b.n	800e69c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d002      	beq.n	800e490 <HAL_SPI_Transmit+0x52>
 800e48a:	88fb      	ldrh	r3, [r7, #6]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d102      	bne.n	800e496 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e490:	2301      	movs	r3, #1
 800e492:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e494:	e102      	b.n	800e69c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	2203      	movs	r2, #3
 800e49a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	68ba      	ldr	r2, [r7, #8]
 800e4a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	88fa      	ldrh	r2, [r7, #6]
 800e4ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	88fa      	ldrh	r2, [r7, #6]
 800e4b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	2200      	movs	r2, #0
 800e4c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	689b      	ldr	r3, [r3, #8]
 800e4d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e4dc:	d10f      	bne.n	800e4fe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	681a      	ldr	r2, [r3, #0]
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e4ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	681a      	ldr	r2, [r3, #0]
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e4fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e508:	2b40      	cmp	r3, #64	; 0x40
 800e50a:	d007      	beq.n	800e51c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	681a      	ldr	r2, [r3, #0]
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e51a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	68db      	ldr	r3, [r3, #12]
 800e520:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e524:	d14b      	bne.n	800e5be <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	685b      	ldr	r3, [r3, #4]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d002      	beq.n	800e534 <HAL_SPI_Transmit+0xf6>
 800e52e:	8afb      	ldrh	r3, [r7, #22]
 800e530:	2b01      	cmp	r3, #1
 800e532:	d13e      	bne.n	800e5b2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e538:	881a      	ldrh	r2, [r3, #0]
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e544:	1c9a      	adds	r2, r3, #2
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e54e:	b29b      	uxth	r3, r3
 800e550:	3b01      	subs	r3, #1
 800e552:	b29a      	uxth	r2, r3
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e558:	e02b      	b.n	800e5b2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	689b      	ldr	r3, [r3, #8]
 800e560:	f003 0302 	and.w	r3, r3, #2
 800e564:	2b02      	cmp	r3, #2
 800e566:	d112      	bne.n	800e58e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e56c:	881a      	ldrh	r2, [r3, #0]
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e578:	1c9a      	adds	r2, r3, #2
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e582:	b29b      	uxth	r3, r3
 800e584:	3b01      	subs	r3, #1
 800e586:	b29a      	uxth	r2, r3
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	86da      	strh	r2, [r3, #54]	; 0x36
 800e58c:	e011      	b.n	800e5b2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e58e:	f7fe fd13 	bl	800cfb8 <HAL_GetTick>
 800e592:	4602      	mov	r2, r0
 800e594:	69bb      	ldr	r3, [r7, #24]
 800e596:	1ad3      	subs	r3, r2, r3
 800e598:	683a      	ldr	r2, [r7, #0]
 800e59a:	429a      	cmp	r2, r3
 800e59c:	d803      	bhi.n	800e5a6 <HAL_SPI_Transmit+0x168>
 800e59e:	683b      	ldr	r3, [r7, #0]
 800e5a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5a4:	d102      	bne.n	800e5ac <HAL_SPI_Transmit+0x16e>
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d102      	bne.n	800e5b2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800e5ac:	2303      	movs	r3, #3
 800e5ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e5b0:	e074      	b.n	800e69c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e5b6:	b29b      	uxth	r3, r3
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d1ce      	bne.n	800e55a <HAL_SPI_Transmit+0x11c>
 800e5bc:	e04c      	b.n	800e658 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	685b      	ldr	r3, [r3, #4]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d002      	beq.n	800e5cc <HAL_SPI_Transmit+0x18e>
 800e5c6:	8afb      	ldrh	r3, [r7, #22]
 800e5c8:	2b01      	cmp	r3, #1
 800e5ca:	d140      	bne.n	800e64e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	330c      	adds	r3, #12
 800e5d6:	7812      	ldrb	r2, [r2, #0]
 800e5d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5de:	1c5a      	adds	r2, r3, #1
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e5e8:	b29b      	uxth	r3, r3
 800e5ea:	3b01      	subs	r3, #1
 800e5ec:	b29a      	uxth	r2, r3
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e5f2:	e02c      	b.n	800e64e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	689b      	ldr	r3, [r3, #8]
 800e5fa:	f003 0302 	and.w	r3, r3, #2
 800e5fe:	2b02      	cmp	r3, #2
 800e600:	d113      	bne.n	800e62a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	330c      	adds	r3, #12
 800e60c:	7812      	ldrb	r2, [r2, #0]
 800e60e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e614:	1c5a      	adds	r2, r3, #1
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e61e:	b29b      	uxth	r3, r3
 800e620:	3b01      	subs	r3, #1
 800e622:	b29a      	uxth	r2, r3
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	86da      	strh	r2, [r3, #54]	; 0x36
 800e628:	e011      	b.n	800e64e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e62a:	f7fe fcc5 	bl	800cfb8 <HAL_GetTick>
 800e62e:	4602      	mov	r2, r0
 800e630:	69bb      	ldr	r3, [r7, #24]
 800e632:	1ad3      	subs	r3, r2, r3
 800e634:	683a      	ldr	r2, [r7, #0]
 800e636:	429a      	cmp	r2, r3
 800e638:	d803      	bhi.n	800e642 <HAL_SPI_Transmit+0x204>
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e640:	d102      	bne.n	800e648 <HAL_SPI_Transmit+0x20a>
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d102      	bne.n	800e64e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800e648:	2303      	movs	r3, #3
 800e64a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e64c:	e026      	b.n	800e69c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e652:	b29b      	uxth	r3, r3
 800e654:	2b00      	cmp	r3, #0
 800e656:	d1cd      	bne.n	800e5f4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e658:	69ba      	ldr	r2, [r7, #24]
 800e65a:	6839      	ldr	r1, [r7, #0]
 800e65c:	68f8      	ldr	r0, [r7, #12]
 800e65e:	f000 fbcb 	bl	800edf8 <SPI_EndRxTxTransaction>
 800e662:	4603      	mov	r3, r0
 800e664:	2b00      	cmp	r3, #0
 800e666:	d002      	beq.n	800e66e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	2220      	movs	r2, #32
 800e66c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	689b      	ldr	r3, [r3, #8]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d10a      	bne.n	800e68c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e676:	2300      	movs	r3, #0
 800e678:	613b      	str	r3, [r7, #16]
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	68db      	ldr	r3, [r3, #12]
 800e680:	613b      	str	r3, [r7, #16]
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	689b      	ldr	r3, [r3, #8]
 800e688:	613b      	str	r3, [r7, #16]
 800e68a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e690:	2b00      	cmp	r3, #0
 800e692:	d002      	beq.n	800e69a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800e694:	2301      	movs	r3, #1
 800e696:	77fb      	strb	r3, [r7, #31]
 800e698:	e000      	b.n	800e69c <HAL_SPI_Transmit+0x25e>
  }

error:
 800e69a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	2201      	movs	r2, #1
 800e6a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e6ac:	7ffb      	ldrb	r3, [r7, #31]
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3720      	adds	r7, #32
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}

0800e6b6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e6b6:	b580      	push	{r7, lr}
 800e6b8:	b088      	sub	sp, #32
 800e6ba:	af02      	add	r7, sp, #8
 800e6bc:	60f8      	str	r0, [r7, #12]
 800e6be:	60b9      	str	r1, [r7, #8]
 800e6c0:	603b      	str	r3, [r7, #0]
 800e6c2:	4613      	mov	r3, r2
 800e6c4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	685b      	ldr	r3, [r3, #4]
 800e6ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e6d2:	d112      	bne.n	800e6fa <HAL_SPI_Receive+0x44>
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	689b      	ldr	r3, [r3, #8]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d10e      	bne.n	800e6fa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	2204      	movs	r2, #4
 800e6e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e6e4:	88fa      	ldrh	r2, [r7, #6]
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	9300      	str	r3, [sp, #0]
 800e6ea:	4613      	mov	r3, r2
 800e6ec:	68ba      	ldr	r2, [r7, #8]
 800e6ee:	68b9      	ldr	r1, [r7, #8]
 800e6f0:	68f8      	ldr	r0, [r7, #12]
 800e6f2:	f000 f8f1 	bl	800e8d8 <HAL_SPI_TransmitReceive>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	e0ea      	b.n	800e8d0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e700:	2b01      	cmp	r3, #1
 800e702:	d101      	bne.n	800e708 <HAL_SPI_Receive+0x52>
 800e704:	2302      	movs	r3, #2
 800e706:	e0e3      	b.n	800e8d0 <HAL_SPI_Receive+0x21a>
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	2201      	movs	r2, #1
 800e70c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e710:	f7fe fc52 	bl	800cfb8 <HAL_GetTick>
 800e714:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e71c:	b2db      	uxtb	r3, r3
 800e71e:	2b01      	cmp	r3, #1
 800e720:	d002      	beq.n	800e728 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e722:	2302      	movs	r3, #2
 800e724:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e726:	e0ca      	b.n	800e8be <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d002      	beq.n	800e734 <HAL_SPI_Receive+0x7e>
 800e72e:	88fb      	ldrh	r3, [r7, #6]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d102      	bne.n	800e73a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e734:	2301      	movs	r3, #1
 800e736:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e738:	e0c1      	b.n	800e8be <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	2204      	movs	r2, #4
 800e73e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	2200      	movs	r2, #0
 800e746:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	68ba      	ldr	r2, [r7, #8]
 800e74c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	88fa      	ldrh	r2, [r7, #6]
 800e752:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	88fa      	ldrh	r2, [r7, #6]
 800e758:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	2200      	movs	r2, #0
 800e75e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	2200      	movs	r2, #0
 800e764:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	2200      	movs	r2, #0
 800e76a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	2200      	movs	r2, #0
 800e770:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	2200      	movs	r2, #0
 800e776:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	689b      	ldr	r3, [r3, #8]
 800e77c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e780:	d10f      	bne.n	800e7a2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	681a      	ldr	r2, [r3, #0]
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e790:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	681a      	ldr	r2, [r3, #0]
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e7a0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7ac:	2b40      	cmp	r3, #64	; 0x40
 800e7ae:	d007      	beq.n	800e7c0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	681a      	ldr	r2, [r3, #0]
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e7be:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	68db      	ldr	r3, [r3, #12]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d162      	bne.n	800e88e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e7c8:	e02e      	b.n	800e828 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	689b      	ldr	r3, [r3, #8]
 800e7d0:	f003 0301 	and.w	r3, r3, #1
 800e7d4:	2b01      	cmp	r3, #1
 800e7d6:	d115      	bne.n	800e804 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	f103 020c 	add.w	r2, r3, #12
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7e4:	7812      	ldrb	r2, [r2, #0]
 800e7e6:	b2d2      	uxtb	r2, r2
 800e7e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7ee:	1c5a      	adds	r2, r3, #1
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e7f8:	b29b      	uxth	r3, r3
 800e7fa:	3b01      	subs	r3, #1
 800e7fc:	b29a      	uxth	r2, r3
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e802:	e011      	b.n	800e828 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e804:	f7fe fbd8 	bl	800cfb8 <HAL_GetTick>
 800e808:	4602      	mov	r2, r0
 800e80a:	693b      	ldr	r3, [r7, #16]
 800e80c:	1ad3      	subs	r3, r2, r3
 800e80e:	683a      	ldr	r2, [r7, #0]
 800e810:	429a      	cmp	r2, r3
 800e812:	d803      	bhi.n	800e81c <HAL_SPI_Receive+0x166>
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e81a:	d102      	bne.n	800e822 <HAL_SPI_Receive+0x16c>
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d102      	bne.n	800e828 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800e822:	2303      	movs	r3, #3
 800e824:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e826:	e04a      	b.n	800e8be <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e82c:	b29b      	uxth	r3, r3
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d1cb      	bne.n	800e7ca <HAL_SPI_Receive+0x114>
 800e832:	e031      	b.n	800e898 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	689b      	ldr	r3, [r3, #8]
 800e83a:	f003 0301 	and.w	r3, r3, #1
 800e83e:	2b01      	cmp	r3, #1
 800e840:	d113      	bne.n	800e86a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	68da      	ldr	r2, [r3, #12]
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e84c:	b292      	uxth	r2, r2
 800e84e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e854:	1c9a      	adds	r2, r3, #2
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e85e:	b29b      	uxth	r3, r3
 800e860:	3b01      	subs	r3, #1
 800e862:	b29a      	uxth	r2, r3
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e868:	e011      	b.n	800e88e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e86a:	f7fe fba5 	bl	800cfb8 <HAL_GetTick>
 800e86e:	4602      	mov	r2, r0
 800e870:	693b      	ldr	r3, [r7, #16]
 800e872:	1ad3      	subs	r3, r2, r3
 800e874:	683a      	ldr	r2, [r7, #0]
 800e876:	429a      	cmp	r2, r3
 800e878:	d803      	bhi.n	800e882 <HAL_SPI_Receive+0x1cc>
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e880:	d102      	bne.n	800e888 <HAL_SPI_Receive+0x1d2>
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d102      	bne.n	800e88e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800e888:	2303      	movs	r3, #3
 800e88a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e88c:	e017      	b.n	800e8be <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e892:	b29b      	uxth	r3, r3
 800e894:	2b00      	cmp	r3, #0
 800e896:	d1cd      	bne.n	800e834 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e898:	693a      	ldr	r2, [r7, #16]
 800e89a:	6839      	ldr	r1, [r7, #0]
 800e89c:	68f8      	ldr	r0, [r7, #12]
 800e89e:	f000 fa45 	bl	800ed2c <SPI_EndRxTransaction>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d002      	beq.n	800e8ae <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	2220      	movs	r2, #32
 800e8ac:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d002      	beq.n	800e8bc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800e8b6:	2301      	movs	r3, #1
 800e8b8:	75fb      	strb	r3, [r7, #23]
 800e8ba:	e000      	b.n	800e8be <HAL_SPI_Receive+0x208>
  }

error :
 800e8bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	2201      	movs	r2, #1
 800e8c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e8ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	3718      	adds	r7, #24
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	bd80      	pop	{r7, pc}

0800e8d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b08c      	sub	sp, #48	; 0x30
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	60f8      	str	r0, [r7, #12]
 800e8e0:	60b9      	str	r1, [r7, #8]
 800e8e2:	607a      	str	r2, [r7, #4]
 800e8e4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e8e6:	2301      	movs	r3, #1
 800e8e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e8f6:	2b01      	cmp	r3, #1
 800e8f8:	d101      	bne.n	800e8fe <HAL_SPI_TransmitReceive+0x26>
 800e8fa:	2302      	movs	r3, #2
 800e8fc:	e18a      	b.n	800ec14 <HAL_SPI_TransmitReceive+0x33c>
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	2201      	movs	r2, #1
 800e902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e906:	f7fe fb57 	bl	800cfb8 <HAL_GetTick>
 800e90a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	685b      	ldr	r3, [r3, #4]
 800e91a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800e91c:	887b      	ldrh	r3, [r7, #2]
 800e91e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e920:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e924:	2b01      	cmp	r3, #1
 800e926:	d00f      	beq.n	800e948 <HAL_SPI_TransmitReceive+0x70>
 800e928:	69fb      	ldr	r3, [r7, #28]
 800e92a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e92e:	d107      	bne.n	800e940 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	689b      	ldr	r3, [r3, #8]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d103      	bne.n	800e940 <HAL_SPI_TransmitReceive+0x68>
 800e938:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e93c:	2b04      	cmp	r3, #4
 800e93e:	d003      	beq.n	800e948 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800e940:	2302      	movs	r3, #2
 800e942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e946:	e15b      	b.n	800ec00 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e948:	68bb      	ldr	r3, [r7, #8]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d005      	beq.n	800e95a <HAL_SPI_TransmitReceive+0x82>
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d002      	beq.n	800e95a <HAL_SPI_TransmitReceive+0x82>
 800e954:	887b      	ldrh	r3, [r7, #2]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d103      	bne.n	800e962 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800e95a:	2301      	movs	r3, #1
 800e95c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e960:	e14e      	b.n	800ec00 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e968:	b2db      	uxtb	r3, r3
 800e96a:	2b04      	cmp	r3, #4
 800e96c:	d003      	beq.n	800e976 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	2205      	movs	r2, #5
 800e972:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	2200      	movs	r2, #0
 800e97a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	687a      	ldr	r2, [r7, #4]
 800e980:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	887a      	ldrh	r2, [r7, #2]
 800e986:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	887a      	ldrh	r2, [r7, #2]
 800e98c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	68ba      	ldr	r2, [r7, #8]
 800e992:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	887a      	ldrh	r2, [r7, #2]
 800e998:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	887a      	ldrh	r2, [r7, #2]
 800e99e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9b6:	2b40      	cmp	r3, #64	; 0x40
 800e9b8:	d007      	beq.n	800e9ca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	681a      	ldr	r2, [r3, #0]
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e9c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	68db      	ldr	r3, [r3, #12]
 800e9ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e9d2:	d178      	bne.n	800eac6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	685b      	ldr	r3, [r3, #4]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d002      	beq.n	800e9e2 <HAL_SPI_TransmitReceive+0x10a>
 800e9dc:	8b7b      	ldrh	r3, [r7, #26]
 800e9de:	2b01      	cmp	r3, #1
 800e9e0:	d166      	bne.n	800eab0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9e6:	881a      	ldrh	r2, [r3, #0]
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9f2:	1c9a      	adds	r2, r3, #2
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e9fc:	b29b      	uxth	r3, r3
 800e9fe:	3b01      	subs	r3, #1
 800ea00:	b29a      	uxth	r2, r3
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ea06:	e053      	b.n	800eab0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	689b      	ldr	r3, [r3, #8]
 800ea0e:	f003 0302 	and.w	r3, r3, #2
 800ea12:	2b02      	cmp	r3, #2
 800ea14:	d11b      	bne.n	800ea4e <HAL_SPI_TransmitReceive+0x176>
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ea1a:	b29b      	uxth	r3, r3
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d016      	beq.n	800ea4e <HAL_SPI_TransmitReceive+0x176>
 800ea20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea22:	2b01      	cmp	r3, #1
 800ea24:	d113      	bne.n	800ea4e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea2a:	881a      	ldrh	r2, [r3, #0]
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea36:	1c9a      	adds	r2, r3, #2
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ea40:	b29b      	uxth	r3, r3
 800ea42:	3b01      	subs	r3, #1
 800ea44:	b29a      	uxth	r2, r3
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	689b      	ldr	r3, [r3, #8]
 800ea54:	f003 0301 	and.w	r3, r3, #1
 800ea58:	2b01      	cmp	r3, #1
 800ea5a:	d119      	bne.n	800ea90 <HAL_SPI_TransmitReceive+0x1b8>
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea60:	b29b      	uxth	r3, r3
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d014      	beq.n	800ea90 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	68da      	ldr	r2, [r3, #12]
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea70:	b292      	uxth	r2, r2
 800ea72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea78:	1c9a      	adds	r2, r3, #2
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea82:	b29b      	uxth	r3, r3
 800ea84:	3b01      	subs	r3, #1
 800ea86:	b29a      	uxth	r2, r3
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ea8c:	2301      	movs	r3, #1
 800ea8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ea90:	f7fe fa92 	bl	800cfb8 <HAL_GetTick>
 800ea94:	4602      	mov	r2, r0
 800ea96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea98:	1ad3      	subs	r3, r2, r3
 800ea9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea9c:	429a      	cmp	r2, r3
 800ea9e:	d807      	bhi.n	800eab0 <HAL_SPI_TransmitReceive+0x1d8>
 800eaa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eaa6:	d003      	beq.n	800eab0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800eaa8:	2303      	movs	r3, #3
 800eaaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800eaae:	e0a7      	b.n	800ec00 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eab4:	b29b      	uxth	r3, r3
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d1a6      	bne.n	800ea08 <HAL_SPI_TransmitReceive+0x130>
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eabe:	b29b      	uxth	r3, r3
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d1a1      	bne.n	800ea08 <HAL_SPI_TransmitReceive+0x130>
 800eac4:	e07c      	b.n	800ebc0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	685b      	ldr	r3, [r3, #4]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d002      	beq.n	800ead4 <HAL_SPI_TransmitReceive+0x1fc>
 800eace:	8b7b      	ldrh	r3, [r7, #26]
 800ead0:	2b01      	cmp	r3, #1
 800ead2:	d16b      	bne.n	800ebac <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	330c      	adds	r3, #12
 800eade:	7812      	ldrb	r2, [r2, #0]
 800eae0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eae6:	1c5a      	adds	r2, r3, #1
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eaf0:	b29b      	uxth	r3, r3
 800eaf2:	3b01      	subs	r3, #1
 800eaf4:	b29a      	uxth	r2, r3
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eafa:	e057      	b.n	800ebac <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	689b      	ldr	r3, [r3, #8]
 800eb02:	f003 0302 	and.w	r3, r3, #2
 800eb06:	2b02      	cmp	r3, #2
 800eb08:	d11c      	bne.n	800eb44 <HAL_SPI_TransmitReceive+0x26c>
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb0e:	b29b      	uxth	r3, r3
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d017      	beq.n	800eb44 <HAL_SPI_TransmitReceive+0x26c>
 800eb14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb16:	2b01      	cmp	r3, #1
 800eb18:	d114      	bne.n	800eb44 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	330c      	adds	r3, #12
 800eb24:	7812      	ldrb	r2, [r2, #0]
 800eb26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb2c:	1c5a      	adds	r2, r3, #1
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb36:	b29b      	uxth	r3, r3
 800eb38:	3b01      	subs	r3, #1
 800eb3a:	b29a      	uxth	r2, r3
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800eb40:	2300      	movs	r3, #0
 800eb42:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	689b      	ldr	r3, [r3, #8]
 800eb4a:	f003 0301 	and.w	r3, r3, #1
 800eb4e:	2b01      	cmp	r3, #1
 800eb50:	d119      	bne.n	800eb86 <HAL_SPI_TransmitReceive+0x2ae>
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb56:	b29b      	uxth	r3, r3
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d014      	beq.n	800eb86 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	68da      	ldr	r2, [r3, #12]
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb66:	b2d2      	uxtb	r2, r2
 800eb68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb6e:	1c5a      	adds	r2, r3, #1
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb78:	b29b      	uxth	r3, r3
 800eb7a:	3b01      	subs	r3, #1
 800eb7c:	b29a      	uxth	r2, r3
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800eb82:	2301      	movs	r3, #1
 800eb84:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800eb86:	f7fe fa17 	bl	800cfb8 <HAL_GetTick>
 800eb8a:	4602      	mov	r2, r0
 800eb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb8e:	1ad3      	subs	r3, r2, r3
 800eb90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb92:	429a      	cmp	r2, r3
 800eb94:	d803      	bhi.n	800eb9e <HAL_SPI_TransmitReceive+0x2c6>
 800eb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb9c:	d102      	bne.n	800eba4 <HAL_SPI_TransmitReceive+0x2cc>
 800eb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d103      	bne.n	800ebac <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800eba4:	2303      	movs	r3, #3
 800eba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ebaa:	e029      	b.n	800ec00 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ebb0:	b29b      	uxth	r3, r3
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d1a2      	bne.n	800eafc <HAL_SPI_TransmitReceive+0x224>
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ebba:	b29b      	uxth	r3, r3
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d19d      	bne.n	800eafc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ebc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ebc4:	68f8      	ldr	r0, [r7, #12]
 800ebc6:	f000 f917 	bl	800edf8 <SPI_EndRxTxTransaction>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d006      	beq.n	800ebde <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ebd0:	2301      	movs	r3, #1
 800ebd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	2220      	movs	r2, #32
 800ebda:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ebdc:	e010      	b.n	800ec00 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	689b      	ldr	r3, [r3, #8]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d10b      	bne.n	800ebfe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	617b      	str	r3, [r7, #20]
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	68db      	ldr	r3, [r3, #12]
 800ebf0:	617b      	str	r3, [r7, #20]
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	689b      	ldr	r3, [r3, #8]
 800ebf8:	617b      	str	r3, [r7, #20]
 800ebfa:	697b      	ldr	r3, [r7, #20]
 800ebfc:	e000      	b.n	800ec00 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ebfe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	2201      	movs	r2, #1
 800ec04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ec10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ec14:	4618      	mov	r0, r3
 800ec16:	3730      	adds	r7, #48	; 0x30
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}

0800ec1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b088      	sub	sp, #32
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	60f8      	str	r0, [r7, #12]
 800ec24:	60b9      	str	r1, [r7, #8]
 800ec26:	603b      	str	r3, [r7, #0]
 800ec28:	4613      	mov	r3, r2
 800ec2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ec2c:	f7fe f9c4 	bl	800cfb8 <HAL_GetTick>
 800ec30:	4602      	mov	r2, r0
 800ec32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec34:	1a9b      	subs	r3, r3, r2
 800ec36:	683a      	ldr	r2, [r7, #0]
 800ec38:	4413      	add	r3, r2
 800ec3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ec3c:	f7fe f9bc 	bl	800cfb8 <HAL_GetTick>
 800ec40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ec42:	4b39      	ldr	r3, [pc, #228]	; (800ed28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	015b      	lsls	r3, r3, #5
 800ec48:	0d1b      	lsrs	r3, r3, #20
 800ec4a:	69fa      	ldr	r2, [r7, #28]
 800ec4c:	fb02 f303 	mul.w	r3, r2, r3
 800ec50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ec52:	e054      	b.n	800ecfe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec5a:	d050      	beq.n	800ecfe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ec5c:	f7fe f9ac 	bl	800cfb8 <HAL_GetTick>
 800ec60:	4602      	mov	r2, r0
 800ec62:	69bb      	ldr	r3, [r7, #24]
 800ec64:	1ad3      	subs	r3, r2, r3
 800ec66:	69fa      	ldr	r2, [r7, #28]
 800ec68:	429a      	cmp	r2, r3
 800ec6a:	d902      	bls.n	800ec72 <SPI_WaitFlagStateUntilTimeout+0x56>
 800ec6c:	69fb      	ldr	r3, [r7, #28]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d13d      	bne.n	800ecee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	685a      	ldr	r2, [r3, #4]
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ec80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	685b      	ldr	r3, [r3, #4]
 800ec86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ec8a:	d111      	bne.n	800ecb0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	689b      	ldr	r3, [r3, #8]
 800ec90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ec94:	d004      	beq.n	800eca0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	689b      	ldr	r3, [r3, #8]
 800ec9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ec9e:	d107      	bne.n	800ecb0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	681a      	ldr	r2, [r3, #0]
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ecae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ecb8:	d10f      	bne.n	800ecda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	681a      	ldr	r2, [r3, #0]
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ecc8:	601a      	str	r2, [r3, #0]
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	681a      	ldr	r2, [r3, #0]
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ecd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	2201      	movs	r2, #1
 800ecde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	2200      	movs	r2, #0
 800ece6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ecea:	2303      	movs	r3, #3
 800ecec:	e017      	b.n	800ed1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d101      	bne.n	800ecf8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ecf8:	697b      	ldr	r3, [r7, #20]
 800ecfa:	3b01      	subs	r3, #1
 800ecfc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	689a      	ldr	r2, [r3, #8]
 800ed04:	68bb      	ldr	r3, [r7, #8]
 800ed06:	4013      	ands	r3, r2
 800ed08:	68ba      	ldr	r2, [r7, #8]
 800ed0a:	429a      	cmp	r2, r3
 800ed0c:	bf0c      	ite	eq
 800ed0e:	2301      	moveq	r3, #1
 800ed10:	2300      	movne	r3, #0
 800ed12:	b2db      	uxtb	r3, r3
 800ed14:	461a      	mov	r2, r3
 800ed16:	79fb      	ldrb	r3, [r7, #7]
 800ed18:	429a      	cmp	r2, r3
 800ed1a:	d19b      	bne.n	800ec54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ed1c:	2300      	movs	r3, #0
}
 800ed1e:	4618      	mov	r0, r3
 800ed20:	3720      	adds	r7, #32
 800ed22:	46bd      	mov	sp, r7
 800ed24:	bd80      	pop	{r7, pc}
 800ed26:	bf00      	nop
 800ed28:	20000000 	.word	0x20000000

0800ed2c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b086      	sub	sp, #24
 800ed30:	af02      	add	r7, sp, #8
 800ed32:	60f8      	str	r0, [r7, #12]
 800ed34:	60b9      	str	r1, [r7, #8]
 800ed36:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	685b      	ldr	r3, [r3, #4]
 800ed3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ed40:	d111      	bne.n	800ed66 <SPI_EndRxTransaction+0x3a>
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	689b      	ldr	r3, [r3, #8]
 800ed46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed4a:	d004      	beq.n	800ed56 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	689b      	ldr	r3, [r3, #8]
 800ed50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed54:	d107      	bne.n	800ed66 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	681a      	ldr	r2, [r3, #0]
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ed64:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	685b      	ldr	r3, [r3, #4]
 800ed6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ed6e:	d12a      	bne.n	800edc6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	689b      	ldr	r3, [r3, #8]
 800ed74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed78:	d012      	beq.n	800eda0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	9300      	str	r3, [sp, #0]
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	2200      	movs	r2, #0
 800ed82:	2180      	movs	r1, #128	; 0x80
 800ed84:	68f8      	ldr	r0, [r7, #12]
 800ed86:	f7ff ff49 	bl	800ec1c <SPI_WaitFlagStateUntilTimeout>
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d02d      	beq.n	800edec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed94:	f043 0220 	orr.w	r2, r3, #32
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ed9c:	2303      	movs	r3, #3
 800ed9e:	e026      	b.n	800edee <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	9300      	str	r3, [sp, #0]
 800eda4:	68bb      	ldr	r3, [r7, #8]
 800eda6:	2200      	movs	r2, #0
 800eda8:	2101      	movs	r1, #1
 800edaa:	68f8      	ldr	r0, [r7, #12]
 800edac:	f7ff ff36 	bl	800ec1c <SPI_WaitFlagStateUntilTimeout>
 800edb0:	4603      	mov	r3, r0
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d01a      	beq.n	800edec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edba:	f043 0220 	orr.w	r2, r3, #32
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800edc2:	2303      	movs	r3, #3
 800edc4:	e013      	b.n	800edee <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	9300      	str	r3, [sp, #0]
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	2200      	movs	r2, #0
 800edce:	2101      	movs	r1, #1
 800edd0:	68f8      	ldr	r0, [r7, #12]
 800edd2:	f7ff ff23 	bl	800ec1c <SPI_WaitFlagStateUntilTimeout>
 800edd6:	4603      	mov	r3, r0
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d007      	beq.n	800edec <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ede0:	f043 0220 	orr.w	r2, r3, #32
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ede8:	2303      	movs	r3, #3
 800edea:	e000      	b.n	800edee <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800edec:	2300      	movs	r3, #0
}
 800edee:	4618      	mov	r0, r3
 800edf0:	3710      	adds	r7, #16
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bd80      	pop	{r7, pc}
	...

0800edf8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b088      	sub	sp, #32
 800edfc:	af02      	add	r7, sp, #8
 800edfe:	60f8      	str	r0, [r7, #12]
 800ee00:	60b9      	str	r1, [r7, #8]
 800ee02:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ee04:	4b1b      	ldr	r3, [pc, #108]	; (800ee74 <SPI_EndRxTxTransaction+0x7c>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	4a1b      	ldr	r2, [pc, #108]	; (800ee78 <SPI_EndRxTxTransaction+0x80>)
 800ee0a:	fba2 2303 	umull	r2, r3, r2, r3
 800ee0e:	0d5b      	lsrs	r3, r3, #21
 800ee10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ee14:	fb02 f303 	mul.w	r3, r2, r3
 800ee18:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	685b      	ldr	r3, [r3, #4]
 800ee1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ee22:	d112      	bne.n	800ee4a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	9300      	str	r3, [sp, #0]
 800ee28:	68bb      	ldr	r3, [r7, #8]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	2180      	movs	r1, #128	; 0x80
 800ee2e:	68f8      	ldr	r0, [r7, #12]
 800ee30:	f7ff fef4 	bl	800ec1c <SPI_WaitFlagStateUntilTimeout>
 800ee34:	4603      	mov	r3, r0
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d016      	beq.n	800ee68 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee3e:	f043 0220 	orr.w	r2, r3, #32
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ee46:	2303      	movs	r3, #3
 800ee48:	e00f      	b.n	800ee6a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d00a      	beq.n	800ee66 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800ee50:	697b      	ldr	r3, [r7, #20]
 800ee52:	3b01      	subs	r3, #1
 800ee54:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	689b      	ldr	r3, [r3, #8]
 800ee5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee60:	2b80      	cmp	r3, #128	; 0x80
 800ee62:	d0f2      	beq.n	800ee4a <SPI_EndRxTxTransaction+0x52>
 800ee64:	e000      	b.n	800ee68 <SPI_EndRxTxTransaction+0x70>
        break;
 800ee66:	bf00      	nop
  }

  return HAL_OK;
 800ee68:	2300      	movs	r3, #0
}
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	3718      	adds	r7, #24
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}
 800ee72:	bf00      	nop
 800ee74:	20000000 	.word	0x20000000
 800ee78:	165e9f81 	.word	0x165e9f81

0800ee7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b082      	sub	sp, #8
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d101      	bne.n	800ee8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	e041      	b.n	800ef12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ee94:	b2db      	uxtb	r3, r3
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d106      	bne.n	800eea8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800eea2:	6878      	ldr	r0, [r7, #4]
 800eea4:	f7fd fe6c 	bl	800cb80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2202      	movs	r2, #2
 800eeac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681a      	ldr	r2, [r3, #0]
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	3304      	adds	r3, #4
 800eeb8:	4619      	mov	r1, r3
 800eeba:	4610      	mov	r0, r2
 800eebc:	f000 fa96 	bl	800f3ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2201      	movs	r2, #1
 800eec4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2201      	movs	r2, #1
 800eecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2201      	movs	r2, #1
 800eed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2201      	movs	r2, #1
 800eedc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2201      	movs	r2, #1
 800eee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2201      	movs	r2, #1
 800eeec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2201      	movs	r2, #1
 800eef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	2201      	movs	r2, #1
 800eefc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	2201      	movs	r2, #1
 800ef04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	2201      	movs	r2, #1
 800ef0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ef10:	2300      	movs	r3, #0
}
 800ef12:	4618      	mov	r0, r3
 800ef14:	3708      	adds	r7, #8
 800ef16:	46bd      	mov	sp, r7
 800ef18:	bd80      	pop	{r7, pc}
	...

0800ef1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ef1c:	b480      	push	{r7}
 800ef1e:	b085      	sub	sp, #20
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ef2a:	b2db      	uxtb	r3, r3
 800ef2c:	2b01      	cmp	r3, #1
 800ef2e:	d001      	beq.n	800ef34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ef30:	2301      	movs	r3, #1
 800ef32:	e04e      	b.n	800efd2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2202      	movs	r2, #2
 800ef38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	68da      	ldr	r2, [r3, #12]
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	f042 0201 	orr.w	r2, r2, #1
 800ef4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	4a23      	ldr	r2, [pc, #140]	; (800efe0 <HAL_TIM_Base_Start_IT+0xc4>)
 800ef52:	4293      	cmp	r3, r2
 800ef54:	d022      	beq.n	800ef9c <HAL_TIM_Base_Start_IT+0x80>
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef5e:	d01d      	beq.n	800ef9c <HAL_TIM_Base_Start_IT+0x80>
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	4a1f      	ldr	r2, [pc, #124]	; (800efe4 <HAL_TIM_Base_Start_IT+0xc8>)
 800ef66:	4293      	cmp	r3, r2
 800ef68:	d018      	beq.n	800ef9c <HAL_TIM_Base_Start_IT+0x80>
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	4a1e      	ldr	r2, [pc, #120]	; (800efe8 <HAL_TIM_Base_Start_IT+0xcc>)
 800ef70:	4293      	cmp	r3, r2
 800ef72:	d013      	beq.n	800ef9c <HAL_TIM_Base_Start_IT+0x80>
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	4a1c      	ldr	r2, [pc, #112]	; (800efec <HAL_TIM_Base_Start_IT+0xd0>)
 800ef7a:	4293      	cmp	r3, r2
 800ef7c:	d00e      	beq.n	800ef9c <HAL_TIM_Base_Start_IT+0x80>
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	4a1b      	ldr	r2, [pc, #108]	; (800eff0 <HAL_TIM_Base_Start_IT+0xd4>)
 800ef84:	4293      	cmp	r3, r2
 800ef86:	d009      	beq.n	800ef9c <HAL_TIM_Base_Start_IT+0x80>
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	4a19      	ldr	r2, [pc, #100]	; (800eff4 <HAL_TIM_Base_Start_IT+0xd8>)
 800ef8e:	4293      	cmp	r3, r2
 800ef90:	d004      	beq.n	800ef9c <HAL_TIM_Base_Start_IT+0x80>
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	4a18      	ldr	r2, [pc, #96]	; (800eff8 <HAL_TIM_Base_Start_IT+0xdc>)
 800ef98:	4293      	cmp	r3, r2
 800ef9a:	d111      	bne.n	800efc0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	689b      	ldr	r3, [r3, #8]
 800efa2:	f003 0307 	and.w	r3, r3, #7
 800efa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	2b06      	cmp	r3, #6
 800efac:	d010      	beq.n	800efd0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	681a      	ldr	r2, [r3, #0]
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	f042 0201 	orr.w	r2, r2, #1
 800efbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efbe:	e007      	b.n	800efd0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	681a      	ldr	r2, [r3, #0]
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	f042 0201 	orr.w	r2, r2, #1
 800efce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800efd0:	2300      	movs	r3, #0
}
 800efd2:	4618      	mov	r0, r3
 800efd4:	3714      	adds	r7, #20
 800efd6:	46bd      	mov	sp, r7
 800efd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efdc:	4770      	bx	lr
 800efde:	bf00      	nop
 800efe0:	40010000 	.word	0x40010000
 800efe4:	40000400 	.word	0x40000400
 800efe8:	40000800 	.word	0x40000800
 800efec:	40000c00 	.word	0x40000c00
 800eff0:	40010400 	.word	0x40010400
 800eff4:	40014000 	.word	0x40014000
 800eff8:	40001800 	.word	0x40001800

0800effc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b082      	sub	sp, #8
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	691b      	ldr	r3, [r3, #16]
 800f00a:	f003 0302 	and.w	r3, r3, #2
 800f00e:	2b02      	cmp	r3, #2
 800f010:	d122      	bne.n	800f058 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	68db      	ldr	r3, [r3, #12]
 800f018:	f003 0302 	and.w	r3, r3, #2
 800f01c:	2b02      	cmp	r3, #2
 800f01e:	d11b      	bne.n	800f058 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	f06f 0202 	mvn.w	r2, #2
 800f028:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	2201      	movs	r2, #1
 800f02e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	699b      	ldr	r3, [r3, #24]
 800f036:	f003 0303 	and.w	r3, r3, #3
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d003      	beq.n	800f046 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f03e:	6878      	ldr	r0, [r7, #4]
 800f040:	f000 f9b5 	bl	800f3ae <HAL_TIM_IC_CaptureCallback>
 800f044:	e005      	b.n	800f052 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f046:	6878      	ldr	r0, [r7, #4]
 800f048:	f000 f9a7 	bl	800f39a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f000 f9b8 	bl	800f3c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	2200      	movs	r2, #0
 800f056:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	691b      	ldr	r3, [r3, #16]
 800f05e:	f003 0304 	and.w	r3, r3, #4
 800f062:	2b04      	cmp	r3, #4
 800f064:	d122      	bne.n	800f0ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	68db      	ldr	r3, [r3, #12]
 800f06c:	f003 0304 	and.w	r3, r3, #4
 800f070:	2b04      	cmp	r3, #4
 800f072:	d11b      	bne.n	800f0ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	f06f 0204 	mvn.w	r2, #4
 800f07c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	2202      	movs	r2, #2
 800f082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	699b      	ldr	r3, [r3, #24]
 800f08a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d003      	beq.n	800f09a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	f000 f98b 	bl	800f3ae <HAL_TIM_IC_CaptureCallback>
 800f098:	e005      	b.n	800f0a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f09a:	6878      	ldr	r0, [r7, #4]
 800f09c:	f000 f97d 	bl	800f39a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0a0:	6878      	ldr	r0, [r7, #4]
 800f0a2:	f000 f98e 	bl	800f3c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	691b      	ldr	r3, [r3, #16]
 800f0b2:	f003 0308 	and.w	r3, r3, #8
 800f0b6:	2b08      	cmp	r3, #8
 800f0b8:	d122      	bne.n	800f100 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	68db      	ldr	r3, [r3, #12]
 800f0c0:	f003 0308 	and.w	r3, r3, #8
 800f0c4:	2b08      	cmp	r3, #8
 800f0c6:	d11b      	bne.n	800f100 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	f06f 0208 	mvn.w	r2, #8
 800f0d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	2204      	movs	r2, #4
 800f0d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	69db      	ldr	r3, [r3, #28]
 800f0de:	f003 0303 	and.w	r3, r3, #3
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d003      	beq.n	800f0ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f0e6:	6878      	ldr	r0, [r7, #4]
 800f0e8:	f000 f961 	bl	800f3ae <HAL_TIM_IC_CaptureCallback>
 800f0ec:	e005      	b.n	800f0fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f0ee:	6878      	ldr	r0, [r7, #4]
 800f0f0:	f000 f953 	bl	800f39a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	f000 f964 	bl	800f3c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	691b      	ldr	r3, [r3, #16]
 800f106:	f003 0310 	and.w	r3, r3, #16
 800f10a:	2b10      	cmp	r3, #16
 800f10c:	d122      	bne.n	800f154 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	68db      	ldr	r3, [r3, #12]
 800f114:	f003 0310 	and.w	r3, r3, #16
 800f118:	2b10      	cmp	r3, #16
 800f11a:	d11b      	bne.n	800f154 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	f06f 0210 	mvn.w	r2, #16
 800f124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2208      	movs	r2, #8
 800f12a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	69db      	ldr	r3, [r3, #28]
 800f132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f136:	2b00      	cmp	r3, #0
 800f138:	d003      	beq.n	800f142 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f13a:	6878      	ldr	r0, [r7, #4]
 800f13c:	f000 f937 	bl	800f3ae <HAL_TIM_IC_CaptureCallback>
 800f140:	e005      	b.n	800f14e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f000 f929 	bl	800f39a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f148:	6878      	ldr	r0, [r7, #4]
 800f14a:	f000 f93a 	bl	800f3c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	2200      	movs	r2, #0
 800f152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	691b      	ldr	r3, [r3, #16]
 800f15a:	f003 0301 	and.w	r3, r3, #1
 800f15e:	2b01      	cmp	r3, #1
 800f160:	d10e      	bne.n	800f180 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	68db      	ldr	r3, [r3, #12]
 800f168:	f003 0301 	and.w	r3, r3, #1
 800f16c:	2b01      	cmp	r3, #1
 800f16e:	d107      	bne.n	800f180 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	f06f 0201 	mvn.w	r2, #1
 800f178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f17a:	6878      	ldr	r0, [r7, #4]
 800f17c:	f7fd fba4 	bl	800c8c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	691b      	ldr	r3, [r3, #16]
 800f186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f18a:	2b80      	cmp	r3, #128	; 0x80
 800f18c:	d10e      	bne.n	800f1ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	68db      	ldr	r3, [r3, #12]
 800f194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f198:	2b80      	cmp	r3, #128	; 0x80
 800f19a:	d107      	bne.n	800f1ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f1a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f1a6:	6878      	ldr	r0, [r7, #4]
 800f1a8:	f000 fae0 	bl	800f76c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	691b      	ldr	r3, [r3, #16]
 800f1b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1b6:	2b40      	cmp	r3, #64	; 0x40
 800f1b8:	d10e      	bne.n	800f1d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	68db      	ldr	r3, [r3, #12]
 800f1c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1c4:	2b40      	cmp	r3, #64	; 0x40
 800f1c6:	d107      	bne.n	800f1d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f1d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	f000 f8ff 	bl	800f3d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	691b      	ldr	r3, [r3, #16]
 800f1de:	f003 0320 	and.w	r3, r3, #32
 800f1e2:	2b20      	cmp	r3, #32
 800f1e4:	d10e      	bne.n	800f204 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	68db      	ldr	r3, [r3, #12]
 800f1ec:	f003 0320 	and.w	r3, r3, #32
 800f1f0:	2b20      	cmp	r3, #32
 800f1f2:	d107      	bne.n	800f204 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	f06f 0220 	mvn.w	r2, #32
 800f1fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f1fe:	6878      	ldr	r0, [r7, #4]
 800f200:	f000 faaa 	bl	800f758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f204:	bf00      	nop
 800f206:	3708      	adds	r7, #8
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}

0800f20c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b084      	sub	sp, #16
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
 800f214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f216:	2300      	movs	r3, #0
 800f218:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f220:	2b01      	cmp	r3, #1
 800f222:	d101      	bne.n	800f228 <HAL_TIM_ConfigClockSource+0x1c>
 800f224:	2302      	movs	r3, #2
 800f226:	e0b4      	b.n	800f392 <HAL_TIM_ConfigClockSource+0x186>
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2201      	movs	r2, #1
 800f22c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2202      	movs	r2, #2
 800f234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	689b      	ldr	r3, [r3, #8]
 800f23e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800f246:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f248:	68bb      	ldr	r3, [r7, #8]
 800f24a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f24e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	68ba      	ldr	r2, [r7, #8]
 800f256:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f258:	683b      	ldr	r3, [r7, #0]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f260:	d03e      	beq.n	800f2e0 <HAL_TIM_ConfigClockSource+0xd4>
 800f262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f266:	f200 8087 	bhi.w	800f378 <HAL_TIM_ConfigClockSource+0x16c>
 800f26a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f26e:	f000 8086 	beq.w	800f37e <HAL_TIM_ConfigClockSource+0x172>
 800f272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f276:	d87f      	bhi.n	800f378 <HAL_TIM_ConfigClockSource+0x16c>
 800f278:	2b70      	cmp	r3, #112	; 0x70
 800f27a:	d01a      	beq.n	800f2b2 <HAL_TIM_ConfigClockSource+0xa6>
 800f27c:	2b70      	cmp	r3, #112	; 0x70
 800f27e:	d87b      	bhi.n	800f378 <HAL_TIM_ConfigClockSource+0x16c>
 800f280:	2b60      	cmp	r3, #96	; 0x60
 800f282:	d050      	beq.n	800f326 <HAL_TIM_ConfigClockSource+0x11a>
 800f284:	2b60      	cmp	r3, #96	; 0x60
 800f286:	d877      	bhi.n	800f378 <HAL_TIM_ConfigClockSource+0x16c>
 800f288:	2b50      	cmp	r3, #80	; 0x50
 800f28a:	d03c      	beq.n	800f306 <HAL_TIM_ConfigClockSource+0xfa>
 800f28c:	2b50      	cmp	r3, #80	; 0x50
 800f28e:	d873      	bhi.n	800f378 <HAL_TIM_ConfigClockSource+0x16c>
 800f290:	2b40      	cmp	r3, #64	; 0x40
 800f292:	d058      	beq.n	800f346 <HAL_TIM_ConfigClockSource+0x13a>
 800f294:	2b40      	cmp	r3, #64	; 0x40
 800f296:	d86f      	bhi.n	800f378 <HAL_TIM_ConfigClockSource+0x16c>
 800f298:	2b30      	cmp	r3, #48	; 0x30
 800f29a:	d064      	beq.n	800f366 <HAL_TIM_ConfigClockSource+0x15a>
 800f29c:	2b30      	cmp	r3, #48	; 0x30
 800f29e:	d86b      	bhi.n	800f378 <HAL_TIM_ConfigClockSource+0x16c>
 800f2a0:	2b20      	cmp	r3, #32
 800f2a2:	d060      	beq.n	800f366 <HAL_TIM_ConfigClockSource+0x15a>
 800f2a4:	2b20      	cmp	r3, #32
 800f2a6:	d867      	bhi.n	800f378 <HAL_TIM_ConfigClockSource+0x16c>
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d05c      	beq.n	800f366 <HAL_TIM_ConfigClockSource+0x15a>
 800f2ac:	2b10      	cmp	r3, #16
 800f2ae:	d05a      	beq.n	800f366 <HAL_TIM_ConfigClockSource+0x15a>
 800f2b0:	e062      	b.n	800f378 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	6818      	ldr	r0, [r3, #0]
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	6899      	ldr	r1, [r3, #8]
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	685a      	ldr	r2, [r3, #4]
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	68db      	ldr	r3, [r3, #12]
 800f2c2:	f000 f9ad 	bl	800f620 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	689b      	ldr	r3, [r3, #8]
 800f2cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f2ce:	68bb      	ldr	r3, [r7, #8]
 800f2d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f2d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	68ba      	ldr	r2, [r7, #8]
 800f2dc:	609a      	str	r2, [r3, #8]
      break;
 800f2de:	e04f      	b.n	800f380 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	6818      	ldr	r0, [r3, #0]
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	6899      	ldr	r1, [r3, #8]
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	685a      	ldr	r2, [r3, #4]
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	68db      	ldr	r3, [r3, #12]
 800f2f0:	f000 f996 	bl	800f620 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	689a      	ldr	r2, [r3, #8]
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f302:	609a      	str	r2, [r3, #8]
      break;
 800f304:	e03c      	b.n	800f380 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	6818      	ldr	r0, [r3, #0]
 800f30a:	683b      	ldr	r3, [r7, #0]
 800f30c:	6859      	ldr	r1, [r3, #4]
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	68db      	ldr	r3, [r3, #12]
 800f312:	461a      	mov	r2, r3
 800f314:	f000 f90a 	bl	800f52c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	2150      	movs	r1, #80	; 0x50
 800f31e:	4618      	mov	r0, r3
 800f320:	f000 f963 	bl	800f5ea <TIM_ITRx_SetConfig>
      break;
 800f324:	e02c      	b.n	800f380 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	6818      	ldr	r0, [r3, #0]
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	6859      	ldr	r1, [r3, #4]
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	68db      	ldr	r3, [r3, #12]
 800f332:	461a      	mov	r2, r3
 800f334:	f000 f929 	bl	800f58a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	2160      	movs	r1, #96	; 0x60
 800f33e:	4618      	mov	r0, r3
 800f340:	f000 f953 	bl	800f5ea <TIM_ITRx_SetConfig>
      break;
 800f344:	e01c      	b.n	800f380 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	6818      	ldr	r0, [r3, #0]
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	6859      	ldr	r1, [r3, #4]
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	68db      	ldr	r3, [r3, #12]
 800f352:	461a      	mov	r2, r3
 800f354:	f000 f8ea 	bl	800f52c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	2140      	movs	r1, #64	; 0x40
 800f35e:	4618      	mov	r0, r3
 800f360:	f000 f943 	bl	800f5ea <TIM_ITRx_SetConfig>
      break;
 800f364:	e00c      	b.n	800f380 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681a      	ldr	r2, [r3, #0]
 800f36a:	683b      	ldr	r3, [r7, #0]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	4619      	mov	r1, r3
 800f370:	4610      	mov	r0, r2
 800f372:	f000 f93a 	bl	800f5ea <TIM_ITRx_SetConfig>
      break;
 800f376:	e003      	b.n	800f380 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800f378:	2301      	movs	r3, #1
 800f37a:	73fb      	strb	r3, [r7, #15]
      break;
 800f37c:	e000      	b.n	800f380 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800f37e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2201      	movs	r2, #1
 800f384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2200      	movs	r2, #0
 800f38c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f390:	7bfb      	ldrb	r3, [r7, #15]
}
 800f392:	4618      	mov	r0, r3
 800f394:	3710      	adds	r7, #16
 800f396:	46bd      	mov	sp, r7
 800f398:	bd80      	pop	{r7, pc}

0800f39a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f39a:	b480      	push	{r7}
 800f39c:	b083      	sub	sp, #12
 800f39e:	af00      	add	r7, sp, #0
 800f3a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f3a2:	bf00      	nop
 800f3a4:	370c      	adds	r7, #12
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ac:	4770      	bx	lr

0800f3ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f3ae:	b480      	push	{r7}
 800f3b0:	b083      	sub	sp, #12
 800f3b2:	af00      	add	r7, sp, #0
 800f3b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f3b6:	bf00      	nop
 800f3b8:	370c      	adds	r7, #12
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c0:	4770      	bx	lr

0800f3c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f3c2:	b480      	push	{r7}
 800f3c4:	b083      	sub	sp, #12
 800f3c6:	af00      	add	r7, sp, #0
 800f3c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f3ca:	bf00      	nop
 800f3cc:	370c      	adds	r7, #12
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d4:	4770      	bx	lr

0800f3d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f3d6:	b480      	push	{r7}
 800f3d8:	b083      	sub	sp, #12
 800f3da:	af00      	add	r7, sp, #0
 800f3dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f3de:	bf00      	nop
 800f3e0:	370c      	adds	r7, #12
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e8:	4770      	bx	lr
	...

0800f3ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f3ec:	b480      	push	{r7}
 800f3ee:	b085      	sub	sp, #20
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
 800f3f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	4a40      	ldr	r2, [pc, #256]	; (800f500 <TIM_Base_SetConfig+0x114>)
 800f400:	4293      	cmp	r3, r2
 800f402:	d013      	beq.n	800f42c <TIM_Base_SetConfig+0x40>
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f40a:	d00f      	beq.n	800f42c <TIM_Base_SetConfig+0x40>
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	4a3d      	ldr	r2, [pc, #244]	; (800f504 <TIM_Base_SetConfig+0x118>)
 800f410:	4293      	cmp	r3, r2
 800f412:	d00b      	beq.n	800f42c <TIM_Base_SetConfig+0x40>
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	4a3c      	ldr	r2, [pc, #240]	; (800f508 <TIM_Base_SetConfig+0x11c>)
 800f418:	4293      	cmp	r3, r2
 800f41a:	d007      	beq.n	800f42c <TIM_Base_SetConfig+0x40>
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	4a3b      	ldr	r2, [pc, #236]	; (800f50c <TIM_Base_SetConfig+0x120>)
 800f420:	4293      	cmp	r3, r2
 800f422:	d003      	beq.n	800f42c <TIM_Base_SetConfig+0x40>
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	4a3a      	ldr	r2, [pc, #232]	; (800f510 <TIM_Base_SetConfig+0x124>)
 800f428:	4293      	cmp	r3, r2
 800f42a:	d108      	bne.n	800f43e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f432:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f434:	683b      	ldr	r3, [r7, #0]
 800f436:	685b      	ldr	r3, [r3, #4]
 800f438:	68fa      	ldr	r2, [r7, #12]
 800f43a:	4313      	orrs	r3, r2
 800f43c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	4a2f      	ldr	r2, [pc, #188]	; (800f500 <TIM_Base_SetConfig+0x114>)
 800f442:	4293      	cmp	r3, r2
 800f444:	d02b      	beq.n	800f49e <TIM_Base_SetConfig+0xb2>
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f44c:	d027      	beq.n	800f49e <TIM_Base_SetConfig+0xb2>
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	4a2c      	ldr	r2, [pc, #176]	; (800f504 <TIM_Base_SetConfig+0x118>)
 800f452:	4293      	cmp	r3, r2
 800f454:	d023      	beq.n	800f49e <TIM_Base_SetConfig+0xb2>
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	4a2b      	ldr	r2, [pc, #172]	; (800f508 <TIM_Base_SetConfig+0x11c>)
 800f45a:	4293      	cmp	r3, r2
 800f45c:	d01f      	beq.n	800f49e <TIM_Base_SetConfig+0xb2>
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	4a2a      	ldr	r2, [pc, #168]	; (800f50c <TIM_Base_SetConfig+0x120>)
 800f462:	4293      	cmp	r3, r2
 800f464:	d01b      	beq.n	800f49e <TIM_Base_SetConfig+0xb2>
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	4a29      	ldr	r2, [pc, #164]	; (800f510 <TIM_Base_SetConfig+0x124>)
 800f46a:	4293      	cmp	r3, r2
 800f46c:	d017      	beq.n	800f49e <TIM_Base_SetConfig+0xb2>
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	4a28      	ldr	r2, [pc, #160]	; (800f514 <TIM_Base_SetConfig+0x128>)
 800f472:	4293      	cmp	r3, r2
 800f474:	d013      	beq.n	800f49e <TIM_Base_SetConfig+0xb2>
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	4a27      	ldr	r2, [pc, #156]	; (800f518 <TIM_Base_SetConfig+0x12c>)
 800f47a:	4293      	cmp	r3, r2
 800f47c:	d00f      	beq.n	800f49e <TIM_Base_SetConfig+0xb2>
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	4a26      	ldr	r2, [pc, #152]	; (800f51c <TIM_Base_SetConfig+0x130>)
 800f482:	4293      	cmp	r3, r2
 800f484:	d00b      	beq.n	800f49e <TIM_Base_SetConfig+0xb2>
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	4a25      	ldr	r2, [pc, #148]	; (800f520 <TIM_Base_SetConfig+0x134>)
 800f48a:	4293      	cmp	r3, r2
 800f48c:	d007      	beq.n	800f49e <TIM_Base_SetConfig+0xb2>
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	4a24      	ldr	r2, [pc, #144]	; (800f524 <TIM_Base_SetConfig+0x138>)
 800f492:	4293      	cmp	r3, r2
 800f494:	d003      	beq.n	800f49e <TIM_Base_SetConfig+0xb2>
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	4a23      	ldr	r2, [pc, #140]	; (800f528 <TIM_Base_SetConfig+0x13c>)
 800f49a:	4293      	cmp	r3, r2
 800f49c:	d108      	bne.n	800f4b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f4a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	68db      	ldr	r3, [r3, #12]
 800f4aa:	68fa      	ldr	r2, [r7, #12]
 800f4ac:	4313      	orrs	r3, r2
 800f4ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	695b      	ldr	r3, [r3, #20]
 800f4ba:	4313      	orrs	r3, r2
 800f4bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	68fa      	ldr	r2, [r7, #12]
 800f4c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	689a      	ldr	r2, [r3, #8]
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	681a      	ldr	r2, [r3, #0]
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	4a0a      	ldr	r2, [pc, #40]	; (800f500 <TIM_Base_SetConfig+0x114>)
 800f4d8:	4293      	cmp	r3, r2
 800f4da:	d003      	beq.n	800f4e4 <TIM_Base_SetConfig+0xf8>
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	4a0c      	ldr	r2, [pc, #48]	; (800f510 <TIM_Base_SetConfig+0x124>)
 800f4e0:	4293      	cmp	r3, r2
 800f4e2:	d103      	bne.n	800f4ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	691a      	ldr	r2, [r3, #16]
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	2201      	movs	r2, #1
 800f4f0:	615a      	str	r2, [r3, #20]
}
 800f4f2:	bf00      	nop
 800f4f4:	3714      	adds	r7, #20
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fc:	4770      	bx	lr
 800f4fe:	bf00      	nop
 800f500:	40010000 	.word	0x40010000
 800f504:	40000400 	.word	0x40000400
 800f508:	40000800 	.word	0x40000800
 800f50c:	40000c00 	.word	0x40000c00
 800f510:	40010400 	.word	0x40010400
 800f514:	40014000 	.word	0x40014000
 800f518:	40014400 	.word	0x40014400
 800f51c:	40014800 	.word	0x40014800
 800f520:	40001800 	.word	0x40001800
 800f524:	40001c00 	.word	0x40001c00
 800f528:	40002000 	.word	0x40002000

0800f52c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f52c:	b480      	push	{r7}
 800f52e:	b087      	sub	sp, #28
 800f530:	af00      	add	r7, sp, #0
 800f532:	60f8      	str	r0, [r7, #12]
 800f534:	60b9      	str	r1, [r7, #8]
 800f536:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	6a1b      	ldr	r3, [r3, #32]
 800f53c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	6a1b      	ldr	r3, [r3, #32]
 800f542:	f023 0201 	bic.w	r2, r3, #1
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	699b      	ldr	r3, [r3, #24]
 800f54e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f550:	693b      	ldr	r3, [r7, #16]
 800f552:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	011b      	lsls	r3, r3, #4
 800f55c:	693a      	ldr	r2, [r7, #16]
 800f55e:	4313      	orrs	r3, r2
 800f560:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	f023 030a 	bic.w	r3, r3, #10
 800f568:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f56a:	697a      	ldr	r2, [r7, #20]
 800f56c:	68bb      	ldr	r3, [r7, #8]
 800f56e:	4313      	orrs	r3, r2
 800f570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	693a      	ldr	r2, [r7, #16]
 800f576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	697a      	ldr	r2, [r7, #20]
 800f57c:	621a      	str	r2, [r3, #32]
}
 800f57e:	bf00      	nop
 800f580:	371c      	adds	r7, #28
 800f582:	46bd      	mov	sp, r7
 800f584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f588:	4770      	bx	lr

0800f58a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f58a:	b480      	push	{r7}
 800f58c:	b087      	sub	sp, #28
 800f58e:	af00      	add	r7, sp, #0
 800f590:	60f8      	str	r0, [r7, #12]
 800f592:	60b9      	str	r1, [r7, #8]
 800f594:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	6a1b      	ldr	r3, [r3, #32]
 800f59a:	f023 0210 	bic.w	r2, r3, #16
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	699b      	ldr	r3, [r3, #24]
 800f5a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	6a1b      	ldr	r3, [r3, #32]
 800f5ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f5b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	031b      	lsls	r3, r3, #12
 800f5ba:	697a      	ldr	r2, [r7, #20]
 800f5bc:	4313      	orrs	r3, r2
 800f5be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f5c0:	693b      	ldr	r3, [r7, #16]
 800f5c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f5c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	011b      	lsls	r3, r3, #4
 800f5cc:	693a      	ldr	r2, [r7, #16]
 800f5ce:	4313      	orrs	r3, r2
 800f5d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	697a      	ldr	r2, [r7, #20]
 800f5d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	693a      	ldr	r2, [r7, #16]
 800f5dc:	621a      	str	r2, [r3, #32]
}
 800f5de:	bf00      	nop
 800f5e0:	371c      	adds	r7, #28
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e8:	4770      	bx	lr

0800f5ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f5ea:	b480      	push	{r7}
 800f5ec:	b085      	sub	sp, #20
 800f5ee:	af00      	add	r7, sp, #0
 800f5f0:	6078      	str	r0, [r7, #4]
 800f5f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	689b      	ldr	r3, [r3, #8]
 800f5f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f600:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f602:	683a      	ldr	r2, [r7, #0]
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	4313      	orrs	r3, r2
 800f608:	f043 0307 	orr.w	r3, r3, #7
 800f60c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	68fa      	ldr	r2, [r7, #12]
 800f612:	609a      	str	r2, [r3, #8]
}
 800f614:	bf00      	nop
 800f616:	3714      	adds	r7, #20
 800f618:	46bd      	mov	sp, r7
 800f61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61e:	4770      	bx	lr

0800f620 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f620:	b480      	push	{r7}
 800f622:	b087      	sub	sp, #28
 800f624:	af00      	add	r7, sp, #0
 800f626:	60f8      	str	r0, [r7, #12]
 800f628:	60b9      	str	r1, [r7, #8]
 800f62a:	607a      	str	r2, [r7, #4]
 800f62c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	689b      	ldr	r3, [r3, #8]
 800f632:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f634:	697b      	ldr	r3, [r7, #20]
 800f636:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f63a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	021a      	lsls	r2, r3, #8
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	431a      	orrs	r2, r3
 800f644:	68bb      	ldr	r3, [r7, #8]
 800f646:	4313      	orrs	r3, r2
 800f648:	697a      	ldr	r2, [r7, #20]
 800f64a:	4313      	orrs	r3, r2
 800f64c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	697a      	ldr	r2, [r7, #20]
 800f652:	609a      	str	r2, [r3, #8]
}
 800f654:	bf00      	nop
 800f656:	371c      	adds	r7, #28
 800f658:	46bd      	mov	sp, r7
 800f65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65e:	4770      	bx	lr

0800f660 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f660:	b480      	push	{r7}
 800f662:	b085      	sub	sp, #20
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
 800f668:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f670:	2b01      	cmp	r3, #1
 800f672:	d101      	bne.n	800f678 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f674:	2302      	movs	r3, #2
 800f676:	e05a      	b.n	800f72e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	2201      	movs	r2, #1
 800f67c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2202      	movs	r2, #2
 800f684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	685b      	ldr	r3, [r3, #4]
 800f68e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	689b      	ldr	r3, [r3, #8]
 800f696:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f69e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	68fa      	ldr	r2, [r7, #12]
 800f6a6:	4313      	orrs	r3, r2
 800f6a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	68fa      	ldr	r2, [r7, #12]
 800f6b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	4a21      	ldr	r2, [pc, #132]	; (800f73c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f6b8:	4293      	cmp	r3, r2
 800f6ba:	d022      	beq.n	800f702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6c4:	d01d      	beq.n	800f702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	4a1d      	ldr	r2, [pc, #116]	; (800f740 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f6cc:	4293      	cmp	r3, r2
 800f6ce:	d018      	beq.n	800f702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	4a1b      	ldr	r2, [pc, #108]	; (800f744 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f6d6:	4293      	cmp	r3, r2
 800f6d8:	d013      	beq.n	800f702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	4a1a      	ldr	r2, [pc, #104]	; (800f748 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f6e0:	4293      	cmp	r3, r2
 800f6e2:	d00e      	beq.n	800f702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	4a18      	ldr	r2, [pc, #96]	; (800f74c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f6ea:	4293      	cmp	r3, r2
 800f6ec:	d009      	beq.n	800f702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	4a17      	ldr	r2, [pc, #92]	; (800f750 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f6f4:	4293      	cmp	r3, r2
 800f6f6:	d004      	beq.n	800f702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	4a15      	ldr	r2, [pc, #84]	; (800f754 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f6fe:	4293      	cmp	r3, r2
 800f700:	d10c      	bne.n	800f71c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f702:	68bb      	ldr	r3, [r7, #8]
 800f704:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f708:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f70a:	683b      	ldr	r3, [r7, #0]
 800f70c:	685b      	ldr	r3, [r3, #4]
 800f70e:	68ba      	ldr	r2, [r7, #8]
 800f710:	4313      	orrs	r3, r2
 800f712:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	68ba      	ldr	r2, [r7, #8]
 800f71a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2201      	movs	r2, #1
 800f720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2200      	movs	r2, #0
 800f728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f72c:	2300      	movs	r3, #0
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3714      	adds	r7, #20
 800f732:	46bd      	mov	sp, r7
 800f734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f738:	4770      	bx	lr
 800f73a:	bf00      	nop
 800f73c:	40010000 	.word	0x40010000
 800f740:	40000400 	.word	0x40000400
 800f744:	40000800 	.word	0x40000800
 800f748:	40000c00 	.word	0x40000c00
 800f74c:	40010400 	.word	0x40010400
 800f750:	40014000 	.word	0x40014000
 800f754:	40001800 	.word	0x40001800

0800f758 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f758:	b480      	push	{r7}
 800f75a:	b083      	sub	sp, #12
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f760:	bf00      	nop
 800f762:	370c      	adds	r7, #12
 800f764:	46bd      	mov	sp, r7
 800f766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76a:	4770      	bx	lr

0800f76c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f76c:	b480      	push	{r7}
 800f76e:	b083      	sub	sp, #12
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f774:	bf00      	nop
 800f776:	370c      	adds	r7, #12
 800f778:	46bd      	mov	sp, r7
 800f77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77e:	4770      	bx	lr

0800f780 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b082      	sub	sp, #8
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d101      	bne.n	800f792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f78e:	2301      	movs	r3, #1
 800f790:	e03f      	b.n	800f812 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f798:	b2db      	uxtb	r3, r3
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d106      	bne.n	800f7ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f7a6:	6878      	ldr	r0, [r7, #4]
 800f7a8:	f7fd fa10 	bl	800cbcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	2224      	movs	r2, #36	; 0x24
 800f7b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	68da      	ldr	r2, [r3, #12]
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f7c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f7c4:	6878      	ldr	r0, [r7, #4]
 800f7c6:	f000 fd19 	bl	80101fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	691a      	ldr	r2, [r3, #16]
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f7d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	695a      	ldr	r2, [r3, #20]
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f7e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	68da      	ldr	r2, [r3, #12]
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f7f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	2220      	movs	r2, #32
 800f804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2220      	movs	r2, #32
 800f80c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800f810:	2300      	movs	r3, #0
}
 800f812:	4618      	mov	r0, r3
 800f814:	3708      	adds	r7, #8
 800f816:	46bd      	mov	sp, r7
 800f818:	bd80      	pop	{r7, pc}

0800f81a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800f81a:	b480      	push	{r7}
 800f81c:	b085      	sub	sp, #20
 800f81e:	af00      	add	r7, sp, #0
 800f820:	60f8      	str	r0, [r7, #12]
 800f822:	60b9      	str	r1, [r7, #8]
 800f824:	4613      	mov	r3, r2
 800f826:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f82e:	b2db      	uxtb	r3, r3
 800f830:	2b20      	cmp	r3, #32
 800f832:	d130      	bne.n	800f896 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f834:	68bb      	ldr	r3, [r7, #8]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d002      	beq.n	800f840 <HAL_UART_Transmit_IT+0x26>
 800f83a:	88fb      	ldrh	r3, [r7, #6]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d101      	bne.n	800f844 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800f840:	2301      	movs	r3, #1
 800f842:	e029      	b.n	800f898 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f84a:	2b01      	cmp	r3, #1
 800f84c:	d101      	bne.n	800f852 <HAL_UART_Transmit_IT+0x38>
 800f84e:	2302      	movs	r3, #2
 800f850:	e022      	b.n	800f898 <HAL_UART_Transmit_IT+0x7e>
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	2201      	movs	r2, #1
 800f856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	68ba      	ldr	r2, [r7, #8]
 800f85e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	88fa      	ldrh	r2, [r7, #6]
 800f864:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	88fa      	ldrh	r2, [r7, #6]
 800f86a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	2200      	movs	r2, #0
 800f870:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	2221      	movs	r2, #33	; 0x21
 800f876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	2200      	movs	r2, #0
 800f87e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	68da      	ldr	r2, [r3, #12]
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f890:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800f892:	2300      	movs	r3, #0
 800f894:	e000      	b.n	800f898 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800f896:	2302      	movs	r3, #2
  }
}
 800f898:	4618      	mov	r0, r3
 800f89a:	3714      	adds	r7, #20
 800f89c:	46bd      	mov	sp, r7
 800f89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a2:	4770      	bx	lr

0800f8a4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b084      	sub	sp, #16
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	60f8      	str	r0, [r7, #12]
 800f8ac:	60b9      	str	r1, [r7, #8]
 800f8ae:	4613      	mov	r3, r2
 800f8b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f8b8:	b2db      	uxtb	r3, r3
 800f8ba:	2b20      	cmp	r3, #32
 800f8bc:	d11d      	bne.n	800f8fa <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800f8be:	68bb      	ldr	r3, [r7, #8]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d002      	beq.n	800f8ca <HAL_UART_Receive_IT+0x26>
 800f8c4:	88fb      	ldrh	r3, [r7, #6]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d101      	bne.n	800f8ce <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800f8ca:	2301      	movs	r3, #1
 800f8cc:	e016      	b.n	800f8fc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f8d4:	2b01      	cmp	r3, #1
 800f8d6:	d101      	bne.n	800f8dc <HAL_UART_Receive_IT+0x38>
 800f8d8:	2302      	movs	r3, #2
 800f8da:	e00f      	b.n	800f8fc <HAL_UART_Receive_IT+0x58>
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	2201      	movs	r2, #1
 800f8e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800f8ea:	88fb      	ldrh	r3, [r7, #6]
 800f8ec:	461a      	mov	r2, r3
 800f8ee:	68b9      	ldr	r1, [r7, #8]
 800f8f0:	68f8      	ldr	r0, [r7, #12]
 800f8f2:	f000 faab 	bl	800fe4c <UART_Start_Receive_IT>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	e000      	b.n	800f8fc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800f8fa:	2302      	movs	r3, #2
  }
}
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	3710      	adds	r7, #16
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}

0800f904 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b0ba      	sub	sp, #232	; 0xe8
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	68db      	ldr	r3, [r3, #12]
 800f91c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	695b      	ldr	r3, [r3, #20]
 800f926:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800f92a:	2300      	movs	r3, #0
 800f92c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800f930:	2300      	movs	r3, #0
 800f932:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800f936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f93a:	f003 030f 	and.w	r3, r3, #15
 800f93e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800f942:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f946:	2b00      	cmp	r3, #0
 800f948:	d10f      	bne.n	800f96a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f94a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f94e:	f003 0320 	and.w	r3, r3, #32
 800f952:	2b00      	cmp	r3, #0
 800f954:	d009      	beq.n	800f96a <HAL_UART_IRQHandler+0x66>
 800f956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f95a:	f003 0320 	and.w	r3, r3, #32
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d003      	beq.n	800f96a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800f962:	6878      	ldr	r0, [r7, #4]
 800f964:	f000 fb8f 	bl	8010086 <UART_Receive_IT>
      return;
 800f968:	e256      	b.n	800fe18 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800f96a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f96e:	2b00      	cmp	r3, #0
 800f970:	f000 80de 	beq.w	800fb30 <HAL_UART_IRQHandler+0x22c>
 800f974:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f978:	f003 0301 	and.w	r3, r3, #1
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d106      	bne.n	800f98e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800f980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f984:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800f988:	2b00      	cmp	r3, #0
 800f98a:	f000 80d1 	beq.w	800fb30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800f98e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f992:	f003 0301 	and.w	r3, r3, #1
 800f996:	2b00      	cmp	r3, #0
 800f998:	d00b      	beq.n	800f9b2 <HAL_UART_IRQHandler+0xae>
 800f99a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f99e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d005      	beq.n	800f9b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9aa:	f043 0201 	orr.w	r2, r3, #1
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f9b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9b6:	f003 0304 	and.w	r3, r3, #4
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d00b      	beq.n	800f9d6 <HAL_UART_IRQHandler+0xd2>
 800f9be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f9c2:	f003 0301 	and.w	r3, r3, #1
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d005      	beq.n	800f9d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9ce:	f043 0202 	orr.w	r2, r3, #2
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f9d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9da:	f003 0302 	and.w	r3, r3, #2
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d00b      	beq.n	800f9fa <HAL_UART_IRQHandler+0xf6>
 800f9e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f9e6:	f003 0301 	and.w	r3, r3, #1
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d005      	beq.n	800f9fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9f2:	f043 0204 	orr.w	r2, r3, #4
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800f9fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9fe:	f003 0308 	and.w	r3, r3, #8
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d011      	beq.n	800fa2a <HAL_UART_IRQHandler+0x126>
 800fa06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa0a:	f003 0320 	and.w	r3, r3, #32
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d105      	bne.n	800fa1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800fa12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fa16:	f003 0301 	and.w	r3, r3, #1
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d005      	beq.n	800fa2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa22:	f043 0208 	orr.w	r2, r3, #8
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	f000 81ed 	beq.w	800fe0e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800fa34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa38:	f003 0320 	and.w	r3, r3, #32
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d008      	beq.n	800fa52 <HAL_UART_IRQHandler+0x14e>
 800fa40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa44:	f003 0320 	and.w	r3, r3, #32
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d002      	beq.n	800fa52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800fa4c:	6878      	ldr	r0, [r7, #4]
 800fa4e:	f000 fb1a 	bl	8010086 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	695b      	ldr	r3, [r3, #20]
 800fa58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa5c:	2b40      	cmp	r3, #64	; 0x40
 800fa5e:	bf0c      	ite	eq
 800fa60:	2301      	moveq	r3, #1
 800fa62:	2300      	movne	r3, #0
 800fa64:	b2db      	uxtb	r3, r3
 800fa66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa6e:	f003 0308 	and.w	r3, r3, #8
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d103      	bne.n	800fa7e <HAL_UART_IRQHandler+0x17a>
 800fa76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d04f      	beq.n	800fb1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fa7e:	6878      	ldr	r0, [r7, #4]
 800fa80:	f000 fa22 	bl	800fec8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	695b      	ldr	r3, [r3, #20]
 800fa8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa8e:	2b40      	cmp	r3, #64	; 0x40
 800fa90:	d141      	bne.n	800fb16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	3314      	adds	r3, #20
 800fa98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800faa0:	e853 3f00 	ldrex	r3, [r3]
 800faa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800faa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800faac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fab0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	3314      	adds	r3, #20
 800faba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800fabe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800fac2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fac6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800faca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800face:	e841 2300 	strex	r3, r2, [r1]
 800fad2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800fad6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d1d9      	bne.n	800fa92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d013      	beq.n	800fb0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800faea:	4a7d      	ldr	r2, [pc, #500]	; (800fce0 <HAL_UART_IRQHandler+0x3dc>)
 800faec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800faf2:	4618      	mov	r0, r3
 800faf4:	f7fd fc11 	bl	800d31a <HAL_DMA_Abort_IT>
 800faf8:	4603      	mov	r3, r0
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d016      	beq.n	800fb2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb04:	687a      	ldr	r2, [r7, #4]
 800fb06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800fb08:	4610      	mov	r0, r2
 800fb0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb0c:	e00e      	b.n	800fb2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fb0e:	6878      	ldr	r0, [r7, #4]
 800fb10:	f000 f986 	bl	800fe20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb14:	e00a      	b.n	800fb2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	f000 f982 	bl	800fe20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb1c:	e006      	b.n	800fb2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fb1e:	6878      	ldr	r0, [r7, #4]
 800fb20:	f000 f97e 	bl	800fe20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	2200      	movs	r2, #0
 800fb28:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800fb2a:	e170      	b.n	800fe0e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb2c:	bf00      	nop
    return;
 800fb2e:	e16e      	b.n	800fe0e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb34:	2b01      	cmp	r3, #1
 800fb36:	f040 814a 	bne.w	800fdce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800fb3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fb3e:	f003 0310 	and.w	r3, r3, #16
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	f000 8143 	beq.w	800fdce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800fb48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fb4c:	f003 0310 	and.w	r3, r3, #16
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	f000 813c 	beq.w	800fdce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800fb56:	2300      	movs	r3, #0
 800fb58:	60bb      	str	r3, [r7, #8]
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	60bb      	str	r3, [r7, #8]
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	685b      	ldr	r3, [r3, #4]
 800fb68:	60bb      	str	r3, [r7, #8]
 800fb6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	695b      	ldr	r3, [r3, #20]
 800fb72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb76:	2b40      	cmp	r3, #64	; 0x40
 800fb78:	f040 80b4 	bne.w	800fce4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	685b      	ldr	r3, [r3, #4]
 800fb84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fb88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	f000 8140 	beq.w	800fe12 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800fb96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fb9a:	429a      	cmp	r2, r3
 800fb9c:	f080 8139 	bcs.w	800fe12 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fba6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbac:	69db      	ldr	r3, [r3, #28]
 800fbae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fbb2:	f000 8088 	beq.w	800fcc6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	330c      	adds	r3, #12
 800fbbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fbc4:	e853 3f00 	ldrex	r3, [r3]
 800fbc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800fbcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fbd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fbd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	330c      	adds	r3, #12
 800fbde:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800fbe2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800fbe6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800fbee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800fbf2:	e841 2300 	strex	r3, r2, [r1]
 800fbf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800fbfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d1d9      	bne.n	800fbb6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	3314      	adds	r3, #20
 800fc08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fc0c:	e853 3f00 	ldrex	r3, [r3]
 800fc10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800fc12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fc14:	f023 0301 	bic.w	r3, r3, #1
 800fc18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	3314      	adds	r3, #20
 800fc22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800fc26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fc2a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800fc2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fc32:	e841 2300 	strex	r3, r2, [r1]
 800fc36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800fc38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d1e1      	bne.n	800fc02 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	3314      	adds	r3, #20
 800fc44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc48:	e853 3f00 	ldrex	r3, [r3]
 800fc4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800fc4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fc54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	3314      	adds	r3, #20
 800fc5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800fc62:	66fa      	str	r2, [r7, #108]	; 0x6c
 800fc64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fc68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fc6a:	e841 2300 	strex	r3, r2, [r1]
 800fc6e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800fc70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d1e3      	bne.n	800fc3e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	2220      	movs	r2, #32
 800fc7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2200      	movs	r2, #0
 800fc82:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	330c      	adds	r3, #12
 800fc8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc8e:	e853 3f00 	ldrex	r3, [r3]
 800fc92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fc94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc96:	f023 0310 	bic.w	r3, r3, #16
 800fc9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	330c      	adds	r3, #12
 800fca4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800fca8:	65ba      	str	r2, [r7, #88]	; 0x58
 800fcaa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fcae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fcb0:	e841 2300 	strex	r3, r2, [r1]
 800fcb4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fcb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d1e3      	bne.n	800fc84 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f7fd faba 	bl	800d23a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800fcce:	b29b      	uxth	r3, r3
 800fcd0:	1ad3      	subs	r3, r2, r3
 800fcd2:	b29b      	uxth	r3, r3
 800fcd4:	4619      	mov	r1, r3
 800fcd6:	6878      	ldr	r0, [r7, #4]
 800fcd8:	f000 f8ac 	bl	800fe34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800fcdc:	e099      	b.n	800fe12 <HAL_UART_IRQHandler+0x50e>
 800fcde:	bf00      	nop
 800fce0:	0800ff8f 	.word	0x0800ff8f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800fcec:	b29b      	uxth	r3, r3
 800fcee:	1ad3      	subs	r3, r2, r3
 800fcf0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800fcf8:	b29b      	uxth	r3, r3
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	f000 808b 	beq.w	800fe16 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800fd00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	f000 8086 	beq.w	800fe16 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	330c      	adds	r3, #12
 800fd10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd14:	e853 3f00 	ldrex	r3, [r3]
 800fd18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fd1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fd20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	330c      	adds	r3, #12
 800fd2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800fd2e:	647a      	str	r2, [r7, #68]	; 0x44
 800fd30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fd34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fd36:	e841 2300 	strex	r3, r2, [r1]
 800fd3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fd3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d1e3      	bne.n	800fd0a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	3314      	adds	r3, #20
 800fd48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd4c:	e853 3f00 	ldrex	r3, [r3]
 800fd50:	623b      	str	r3, [r7, #32]
   return(result);
 800fd52:	6a3b      	ldr	r3, [r7, #32]
 800fd54:	f023 0301 	bic.w	r3, r3, #1
 800fd58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	3314      	adds	r3, #20
 800fd62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800fd66:	633a      	str	r2, [r7, #48]	; 0x30
 800fd68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fd6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd6e:	e841 2300 	strex	r3, r2, [r1]
 800fd72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d1e3      	bne.n	800fd42 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	2220      	movs	r2, #32
 800fd7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	2200      	movs	r2, #0
 800fd86:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	330c      	adds	r3, #12
 800fd8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd90:	693b      	ldr	r3, [r7, #16]
 800fd92:	e853 3f00 	ldrex	r3, [r3]
 800fd96:	60fb      	str	r3, [r7, #12]
   return(result);
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	f023 0310 	bic.w	r3, r3, #16
 800fd9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	330c      	adds	r3, #12
 800fda8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800fdac:	61fa      	str	r2, [r7, #28]
 800fdae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdb0:	69b9      	ldr	r1, [r7, #24]
 800fdb2:	69fa      	ldr	r2, [r7, #28]
 800fdb4:	e841 2300 	strex	r3, r2, [r1]
 800fdb8:	617b      	str	r3, [r7, #20]
   return(result);
 800fdba:	697b      	ldr	r3, [r7, #20]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d1e3      	bne.n	800fd88 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fdc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fdc4:	4619      	mov	r1, r3
 800fdc6:	6878      	ldr	r0, [r7, #4]
 800fdc8:	f000 f834 	bl	800fe34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800fdcc:	e023      	b.n	800fe16 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800fdce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fdd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d009      	beq.n	800fdee <HAL_UART_IRQHandler+0x4ea>
 800fdda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fdde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d003      	beq.n	800fdee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800fde6:	6878      	ldr	r0, [r7, #4]
 800fde8:	f000 f8e5 	bl	800ffb6 <UART_Transmit_IT>
    return;
 800fdec:	e014      	b.n	800fe18 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800fdee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fdf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d00e      	beq.n	800fe18 <HAL_UART_IRQHandler+0x514>
 800fdfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fdfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d008      	beq.n	800fe18 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	f000 f925 	bl	8010056 <UART_EndTransmit_IT>
    return;
 800fe0c:	e004      	b.n	800fe18 <HAL_UART_IRQHandler+0x514>
    return;
 800fe0e:	bf00      	nop
 800fe10:	e002      	b.n	800fe18 <HAL_UART_IRQHandler+0x514>
      return;
 800fe12:	bf00      	nop
 800fe14:	e000      	b.n	800fe18 <HAL_UART_IRQHandler+0x514>
      return;
 800fe16:	bf00      	nop
  }
}
 800fe18:	37e8      	adds	r7, #232	; 0xe8
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}
 800fe1e:	bf00      	nop

0800fe20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fe20:	b480      	push	{r7}
 800fe22:	b083      	sub	sp, #12
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800fe28:	bf00      	nop
 800fe2a:	370c      	adds	r7, #12
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe32:	4770      	bx	lr

0800fe34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fe34:	b480      	push	{r7}
 800fe36:	b083      	sub	sp, #12
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
 800fe3c:	460b      	mov	r3, r1
 800fe3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fe40:	bf00      	nop
 800fe42:	370c      	adds	r7, #12
 800fe44:	46bd      	mov	sp, r7
 800fe46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4a:	4770      	bx	lr

0800fe4c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fe4c:	b480      	push	{r7}
 800fe4e:	b085      	sub	sp, #20
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	60f8      	str	r0, [r7, #12]
 800fe54:	60b9      	str	r1, [r7, #8]
 800fe56:	4613      	mov	r3, r2
 800fe58:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	68ba      	ldr	r2, [r7, #8]
 800fe5e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	88fa      	ldrh	r2, [r7, #6]
 800fe64:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	88fa      	ldrh	r2, [r7, #6]
 800fe6a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	2200      	movs	r2, #0
 800fe70:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	2222      	movs	r2, #34	; 0x22
 800fe76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	691b      	ldr	r3, [r3, #16]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d007      	beq.n	800fe9a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	68da      	ldr	r2, [r3, #12]
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fe98:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	695a      	ldr	r2, [r3, #20]
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	f042 0201 	orr.w	r2, r2, #1
 800fea8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	68da      	ldr	r2, [r3, #12]
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	f042 0220 	orr.w	r2, r2, #32
 800feb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800feba:	2300      	movs	r3, #0
}
 800febc:	4618      	mov	r0, r3
 800febe:	3714      	adds	r7, #20
 800fec0:	46bd      	mov	sp, r7
 800fec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec6:	4770      	bx	lr

0800fec8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fec8:	b480      	push	{r7}
 800feca:	b095      	sub	sp, #84	; 0x54
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	330c      	adds	r3, #12
 800fed6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800feda:	e853 3f00 	ldrex	r3, [r3]
 800fede:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fee2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fee6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	330c      	adds	r3, #12
 800feee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fef0:	643a      	str	r2, [r7, #64]	; 0x40
 800fef2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fef4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fef6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fef8:	e841 2300 	strex	r3, r2, [r1]
 800fefc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fefe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d1e5      	bne.n	800fed0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	3314      	adds	r3, #20
 800ff0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff0c:	6a3b      	ldr	r3, [r7, #32]
 800ff0e:	e853 3f00 	ldrex	r3, [r3]
 800ff12:	61fb      	str	r3, [r7, #28]
   return(result);
 800ff14:	69fb      	ldr	r3, [r7, #28]
 800ff16:	f023 0301 	bic.w	r3, r3, #1
 800ff1a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	3314      	adds	r3, #20
 800ff22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ff24:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ff26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ff2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff2c:	e841 2300 	strex	r3, r2, [r1]
 800ff30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ff32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d1e5      	bne.n	800ff04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff3c:	2b01      	cmp	r3, #1
 800ff3e:	d119      	bne.n	800ff74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	330c      	adds	r3, #12
 800ff46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	e853 3f00 	ldrex	r3, [r3]
 800ff4e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ff50:	68bb      	ldr	r3, [r7, #8]
 800ff52:	f023 0310 	bic.w	r3, r3, #16
 800ff56:	647b      	str	r3, [r7, #68]	; 0x44
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	330c      	adds	r3, #12
 800ff5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff60:	61ba      	str	r2, [r7, #24]
 800ff62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff64:	6979      	ldr	r1, [r7, #20]
 800ff66:	69ba      	ldr	r2, [r7, #24]
 800ff68:	e841 2300 	strex	r3, r2, [r1]
 800ff6c:	613b      	str	r3, [r7, #16]
   return(result);
 800ff6e:	693b      	ldr	r3, [r7, #16]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d1e5      	bne.n	800ff40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	2220      	movs	r2, #32
 800ff78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	2200      	movs	r2, #0
 800ff80:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ff82:	bf00      	nop
 800ff84:	3754      	adds	r7, #84	; 0x54
 800ff86:	46bd      	mov	sp, r7
 800ff88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8c:	4770      	bx	lr

0800ff8e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ff8e:	b580      	push	{r7, lr}
 800ff90:	b084      	sub	sp, #16
 800ff92:	af00      	add	r7, sp, #0
 800ff94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ffa8:	68f8      	ldr	r0, [r7, #12]
 800ffaa:	f7ff ff39 	bl	800fe20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ffae:	bf00      	nop
 800ffb0:	3710      	adds	r7, #16
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	bd80      	pop	{r7, pc}

0800ffb6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ffb6:	b480      	push	{r7}
 800ffb8:	b085      	sub	sp, #20
 800ffba:	af00      	add	r7, sp, #0
 800ffbc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ffc4:	b2db      	uxtb	r3, r3
 800ffc6:	2b21      	cmp	r3, #33	; 0x21
 800ffc8:	d13e      	bne.n	8010048 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	689b      	ldr	r3, [r3, #8]
 800ffce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ffd2:	d114      	bne.n	800fffe <UART_Transmit_IT+0x48>
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	691b      	ldr	r3, [r3, #16]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d110      	bne.n	800fffe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	6a1b      	ldr	r3, [r3, #32]
 800ffe0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	881b      	ldrh	r3, [r3, #0]
 800ffe6:	461a      	mov	r2, r3
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fff0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	6a1b      	ldr	r3, [r3, #32]
 800fff6:	1c9a      	adds	r2, r3, #2
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	621a      	str	r2, [r3, #32]
 800fffc:	e008      	b.n	8010010 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	6a1b      	ldr	r3, [r3, #32]
 8010002:	1c59      	adds	r1, r3, #1
 8010004:	687a      	ldr	r2, [r7, #4]
 8010006:	6211      	str	r1, [r2, #32]
 8010008:	781a      	ldrb	r2, [r3, #0]
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010014:	b29b      	uxth	r3, r3
 8010016:	3b01      	subs	r3, #1
 8010018:	b29b      	uxth	r3, r3
 801001a:	687a      	ldr	r2, [r7, #4]
 801001c:	4619      	mov	r1, r3
 801001e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8010020:	2b00      	cmp	r3, #0
 8010022:	d10f      	bne.n	8010044 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	68da      	ldr	r2, [r3, #12]
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010032:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	68da      	ldr	r2, [r3, #12]
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010042:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8010044:	2300      	movs	r3, #0
 8010046:	e000      	b.n	801004a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8010048:	2302      	movs	r3, #2
  }
}
 801004a:	4618      	mov	r0, r3
 801004c:	3714      	adds	r7, #20
 801004e:	46bd      	mov	sp, r7
 8010050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010054:	4770      	bx	lr

08010056 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010056:	b580      	push	{r7, lr}
 8010058:	b082      	sub	sp, #8
 801005a:	af00      	add	r7, sp, #0
 801005c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	68da      	ldr	r2, [r3, #12]
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801006c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	2220      	movs	r2, #32
 8010072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010076:	6878      	ldr	r0, [r7, #4]
 8010078:	f7fc fbfe 	bl	800c878 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801007c:	2300      	movs	r3, #0
}
 801007e:	4618      	mov	r0, r3
 8010080:	3708      	adds	r7, #8
 8010082:	46bd      	mov	sp, r7
 8010084:	bd80      	pop	{r7, pc}

08010086 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8010086:	b580      	push	{r7, lr}
 8010088:	b08c      	sub	sp, #48	; 0x30
 801008a:	af00      	add	r7, sp, #0
 801008c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010094:	b2db      	uxtb	r3, r3
 8010096:	2b22      	cmp	r3, #34	; 0x22
 8010098:	f040 80ab 	bne.w	80101f2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	689b      	ldr	r3, [r3, #8]
 80100a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80100a4:	d117      	bne.n	80100d6 <UART_Receive_IT+0x50>
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	691b      	ldr	r3, [r3, #16]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d113      	bne.n	80100d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80100ae:	2300      	movs	r3, #0
 80100b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	685b      	ldr	r3, [r3, #4]
 80100be:	b29b      	uxth	r3, r3
 80100c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80100c4:	b29a      	uxth	r2, r3
 80100c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100ce:	1c9a      	adds	r2, r3, #2
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	629a      	str	r2, [r3, #40]	; 0x28
 80100d4:	e026      	b.n	8010124 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80100dc:	2300      	movs	r3, #0
 80100de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	689b      	ldr	r3, [r3, #8]
 80100e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80100e8:	d007      	beq.n	80100fa <UART_Receive_IT+0x74>
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	689b      	ldr	r3, [r3, #8]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d10a      	bne.n	8010108 <UART_Receive_IT+0x82>
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	691b      	ldr	r3, [r3, #16]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d106      	bne.n	8010108 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	685b      	ldr	r3, [r3, #4]
 8010100:	b2da      	uxtb	r2, r3
 8010102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010104:	701a      	strb	r2, [r3, #0]
 8010106:	e008      	b.n	801011a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	685b      	ldr	r3, [r3, #4]
 801010e:	b2db      	uxtb	r3, r3
 8010110:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010114:	b2da      	uxtb	r2, r3
 8010116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010118:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801011e:	1c5a      	adds	r2, r3, #1
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010128:	b29b      	uxth	r3, r3
 801012a:	3b01      	subs	r3, #1
 801012c:	b29b      	uxth	r3, r3
 801012e:	687a      	ldr	r2, [r7, #4]
 8010130:	4619      	mov	r1, r3
 8010132:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8010134:	2b00      	cmp	r3, #0
 8010136:	d15a      	bne.n	80101ee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	68da      	ldr	r2, [r3, #12]
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	f022 0220 	bic.w	r2, r2, #32
 8010146:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	68da      	ldr	r2, [r3, #12]
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010156:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	695a      	ldr	r2, [r3, #20]
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	f022 0201 	bic.w	r2, r2, #1
 8010166:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	2220      	movs	r2, #32
 801016c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010174:	2b01      	cmp	r3, #1
 8010176:	d135      	bne.n	80101e4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	2200      	movs	r2, #0
 801017c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	330c      	adds	r3, #12
 8010184:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010186:	697b      	ldr	r3, [r7, #20]
 8010188:	e853 3f00 	ldrex	r3, [r3]
 801018c:	613b      	str	r3, [r7, #16]
   return(result);
 801018e:	693b      	ldr	r3, [r7, #16]
 8010190:	f023 0310 	bic.w	r3, r3, #16
 8010194:	627b      	str	r3, [r7, #36]	; 0x24
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	330c      	adds	r3, #12
 801019c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801019e:	623a      	str	r2, [r7, #32]
 80101a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101a2:	69f9      	ldr	r1, [r7, #28]
 80101a4:	6a3a      	ldr	r2, [r7, #32]
 80101a6:	e841 2300 	strex	r3, r2, [r1]
 80101aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80101ac:	69bb      	ldr	r3, [r7, #24]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d1e5      	bne.n	801017e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	f003 0310 	and.w	r3, r3, #16
 80101bc:	2b10      	cmp	r3, #16
 80101be:	d10a      	bne.n	80101d6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80101c0:	2300      	movs	r3, #0
 80101c2:	60fb      	str	r3, [r7, #12]
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	60fb      	str	r3, [r7, #12]
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	685b      	ldr	r3, [r3, #4]
 80101d2:	60fb      	str	r3, [r7, #12]
 80101d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80101da:	4619      	mov	r1, r3
 80101dc:	6878      	ldr	r0, [r7, #4]
 80101de:	f7ff fe29 	bl	800fe34 <HAL_UARTEx_RxEventCallback>
 80101e2:	e002      	b.n	80101ea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80101e4:	6878      	ldr	r0, [r7, #4]
 80101e6:	f7fc fb5b 	bl	800c8a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80101ea:	2300      	movs	r3, #0
 80101ec:	e002      	b.n	80101f4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80101ee:	2300      	movs	r3, #0
 80101f0:	e000      	b.n	80101f4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80101f2:	2302      	movs	r3, #2
  }
}
 80101f4:	4618      	mov	r0, r3
 80101f6:	3730      	adds	r7, #48	; 0x30
 80101f8:	46bd      	mov	sp, r7
 80101fa:	bd80      	pop	{r7, pc}

080101fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80101fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010200:	b0c0      	sub	sp, #256	; 0x100
 8010202:	af00      	add	r7, sp, #0
 8010204:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	691b      	ldr	r3, [r3, #16]
 8010210:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8010214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010218:	68d9      	ldr	r1, [r3, #12]
 801021a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801021e:	681a      	ldr	r2, [r3, #0]
 8010220:	ea40 0301 	orr.w	r3, r0, r1
 8010224:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801022a:	689a      	ldr	r2, [r3, #8]
 801022c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010230:	691b      	ldr	r3, [r3, #16]
 8010232:	431a      	orrs	r2, r3
 8010234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010238:	695b      	ldr	r3, [r3, #20]
 801023a:	431a      	orrs	r2, r3
 801023c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010240:	69db      	ldr	r3, [r3, #28]
 8010242:	4313      	orrs	r3, r2
 8010244:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8010248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	68db      	ldr	r3, [r3, #12]
 8010250:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8010254:	f021 010c 	bic.w	r1, r1, #12
 8010258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801025c:	681a      	ldr	r2, [r3, #0]
 801025e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010262:	430b      	orrs	r3, r1
 8010264:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	695b      	ldr	r3, [r3, #20]
 801026e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8010272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010276:	6999      	ldr	r1, [r3, #24]
 8010278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801027c:	681a      	ldr	r2, [r3, #0]
 801027e:	ea40 0301 	orr.w	r3, r0, r1
 8010282:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010288:	681a      	ldr	r2, [r3, #0]
 801028a:	4b8f      	ldr	r3, [pc, #572]	; (80104c8 <UART_SetConfig+0x2cc>)
 801028c:	429a      	cmp	r2, r3
 801028e:	d005      	beq.n	801029c <UART_SetConfig+0xa0>
 8010290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010294:	681a      	ldr	r2, [r3, #0]
 8010296:	4b8d      	ldr	r3, [pc, #564]	; (80104cc <UART_SetConfig+0x2d0>)
 8010298:	429a      	cmp	r2, r3
 801029a:	d104      	bne.n	80102a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801029c:	f7fd fb64 	bl	800d968 <HAL_RCC_GetPCLK2Freq>
 80102a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80102a4:	e003      	b.n	80102ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80102a6:	f7fd fb4b 	bl	800d940 <HAL_RCC_GetPCLK1Freq>
 80102aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80102ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80102b2:	69db      	ldr	r3, [r3, #28]
 80102b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80102b8:	f040 810c 	bne.w	80104d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80102bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80102c0:	2200      	movs	r2, #0
 80102c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80102c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80102ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80102ce:	4622      	mov	r2, r4
 80102d0:	462b      	mov	r3, r5
 80102d2:	1891      	adds	r1, r2, r2
 80102d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80102d6:	415b      	adcs	r3, r3
 80102d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80102da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80102de:	4621      	mov	r1, r4
 80102e0:	eb12 0801 	adds.w	r8, r2, r1
 80102e4:	4629      	mov	r1, r5
 80102e6:	eb43 0901 	adc.w	r9, r3, r1
 80102ea:	f04f 0200 	mov.w	r2, #0
 80102ee:	f04f 0300 	mov.w	r3, #0
 80102f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80102f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80102fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80102fe:	4690      	mov	r8, r2
 8010300:	4699      	mov	r9, r3
 8010302:	4623      	mov	r3, r4
 8010304:	eb18 0303 	adds.w	r3, r8, r3
 8010308:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801030c:	462b      	mov	r3, r5
 801030e:	eb49 0303 	adc.w	r3, r9, r3
 8010312:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801031a:	685b      	ldr	r3, [r3, #4]
 801031c:	2200      	movs	r2, #0
 801031e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010322:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8010326:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801032a:	460b      	mov	r3, r1
 801032c:	18db      	adds	r3, r3, r3
 801032e:	653b      	str	r3, [r7, #80]	; 0x50
 8010330:	4613      	mov	r3, r2
 8010332:	eb42 0303 	adc.w	r3, r2, r3
 8010336:	657b      	str	r3, [r7, #84]	; 0x54
 8010338:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801033c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8010340:	f7f0 fcb2 	bl	8000ca8 <__aeabi_uldivmod>
 8010344:	4602      	mov	r2, r0
 8010346:	460b      	mov	r3, r1
 8010348:	4b61      	ldr	r3, [pc, #388]	; (80104d0 <UART_SetConfig+0x2d4>)
 801034a:	fba3 2302 	umull	r2, r3, r3, r2
 801034e:	095b      	lsrs	r3, r3, #5
 8010350:	011c      	lsls	r4, r3, #4
 8010352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010356:	2200      	movs	r2, #0
 8010358:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801035c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8010360:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8010364:	4642      	mov	r2, r8
 8010366:	464b      	mov	r3, r9
 8010368:	1891      	adds	r1, r2, r2
 801036a:	64b9      	str	r1, [r7, #72]	; 0x48
 801036c:	415b      	adcs	r3, r3
 801036e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010370:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8010374:	4641      	mov	r1, r8
 8010376:	eb12 0a01 	adds.w	sl, r2, r1
 801037a:	4649      	mov	r1, r9
 801037c:	eb43 0b01 	adc.w	fp, r3, r1
 8010380:	f04f 0200 	mov.w	r2, #0
 8010384:	f04f 0300 	mov.w	r3, #0
 8010388:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801038c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8010390:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010394:	4692      	mov	sl, r2
 8010396:	469b      	mov	fp, r3
 8010398:	4643      	mov	r3, r8
 801039a:	eb1a 0303 	adds.w	r3, sl, r3
 801039e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80103a2:	464b      	mov	r3, r9
 80103a4:	eb4b 0303 	adc.w	r3, fp, r3
 80103a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80103ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80103b0:	685b      	ldr	r3, [r3, #4]
 80103b2:	2200      	movs	r2, #0
 80103b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80103b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80103bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80103c0:	460b      	mov	r3, r1
 80103c2:	18db      	adds	r3, r3, r3
 80103c4:	643b      	str	r3, [r7, #64]	; 0x40
 80103c6:	4613      	mov	r3, r2
 80103c8:	eb42 0303 	adc.w	r3, r2, r3
 80103cc:	647b      	str	r3, [r7, #68]	; 0x44
 80103ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80103d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80103d6:	f7f0 fc67 	bl	8000ca8 <__aeabi_uldivmod>
 80103da:	4602      	mov	r2, r0
 80103dc:	460b      	mov	r3, r1
 80103de:	4611      	mov	r1, r2
 80103e0:	4b3b      	ldr	r3, [pc, #236]	; (80104d0 <UART_SetConfig+0x2d4>)
 80103e2:	fba3 2301 	umull	r2, r3, r3, r1
 80103e6:	095b      	lsrs	r3, r3, #5
 80103e8:	2264      	movs	r2, #100	; 0x64
 80103ea:	fb02 f303 	mul.w	r3, r2, r3
 80103ee:	1acb      	subs	r3, r1, r3
 80103f0:	00db      	lsls	r3, r3, #3
 80103f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80103f6:	4b36      	ldr	r3, [pc, #216]	; (80104d0 <UART_SetConfig+0x2d4>)
 80103f8:	fba3 2302 	umull	r2, r3, r3, r2
 80103fc:	095b      	lsrs	r3, r3, #5
 80103fe:	005b      	lsls	r3, r3, #1
 8010400:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010404:	441c      	add	r4, r3
 8010406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801040a:	2200      	movs	r2, #0
 801040c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010410:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8010414:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8010418:	4642      	mov	r2, r8
 801041a:	464b      	mov	r3, r9
 801041c:	1891      	adds	r1, r2, r2
 801041e:	63b9      	str	r1, [r7, #56]	; 0x38
 8010420:	415b      	adcs	r3, r3
 8010422:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010424:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8010428:	4641      	mov	r1, r8
 801042a:	1851      	adds	r1, r2, r1
 801042c:	6339      	str	r1, [r7, #48]	; 0x30
 801042e:	4649      	mov	r1, r9
 8010430:	414b      	adcs	r3, r1
 8010432:	637b      	str	r3, [r7, #52]	; 0x34
 8010434:	f04f 0200 	mov.w	r2, #0
 8010438:	f04f 0300 	mov.w	r3, #0
 801043c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8010440:	4659      	mov	r1, fp
 8010442:	00cb      	lsls	r3, r1, #3
 8010444:	4651      	mov	r1, sl
 8010446:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801044a:	4651      	mov	r1, sl
 801044c:	00ca      	lsls	r2, r1, #3
 801044e:	4610      	mov	r0, r2
 8010450:	4619      	mov	r1, r3
 8010452:	4603      	mov	r3, r0
 8010454:	4642      	mov	r2, r8
 8010456:	189b      	adds	r3, r3, r2
 8010458:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801045c:	464b      	mov	r3, r9
 801045e:	460a      	mov	r2, r1
 8010460:	eb42 0303 	adc.w	r3, r2, r3
 8010464:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801046c:	685b      	ldr	r3, [r3, #4]
 801046e:	2200      	movs	r2, #0
 8010470:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8010474:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8010478:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 801047c:	460b      	mov	r3, r1
 801047e:	18db      	adds	r3, r3, r3
 8010480:	62bb      	str	r3, [r7, #40]	; 0x28
 8010482:	4613      	mov	r3, r2
 8010484:	eb42 0303 	adc.w	r3, r2, r3
 8010488:	62fb      	str	r3, [r7, #44]	; 0x2c
 801048a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801048e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8010492:	f7f0 fc09 	bl	8000ca8 <__aeabi_uldivmod>
 8010496:	4602      	mov	r2, r0
 8010498:	460b      	mov	r3, r1
 801049a:	4b0d      	ldr	r3, [pc, #52]	; (80104d0 <UART_SetConfig+0x2d4>)
 801049c:	fba3 1302 	umull	r1, r3, r3, r2
 80104a0:	095b      	lsrs	r3, r3, #5
 80104a2:	2164      	movs	r1, #100	; 0x64
 80104a4:	fb01 f303 	mul.w	r3, r1, r3
 80104a8:	1ad3      	subs	r3, r2, r3
 80104aa:	00db      	lsls	r3, r3, #3
 80104ac:	3332      	adds	r3, #50	; 0x32
 80104ae:	4a08      	ldr	r2, [pc, #32]	; (80104d0 <UART_SetConfig+0x2d4>)
 80104b0:	fba2 2303 	umull	r2, r3, r2, r3
 80104b4:	095b      	lsrs	r3, r3, #5
 80104b6:	f003 0207 	and.w	r2, r3, #7
 80104ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	4422      	add	r2, r4
 80104c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80104c4:	e106      	b.n	80106d4 <UART_SetConfig+0x4d8>
 80104c6:	bf00      	nop
 80104c8:	40011000 	.word	0x40011000
 80104cc:	40011400 	.word	0x40011400
 80104d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80104d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80104d8:	2200      	movs	r2, #0
 80104da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80104de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80104e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80104e6:	4642      	mov	r2, r8
 80104e8:	464b      	mov	r3, r9
 80104ea:	1891      	adds	r1, r2, r2
 80104ec:	6239      	str	r1, [r7, #32]
 80104ee:	415b      	adcs	r3, r3
 80104f0:	627b      	str	r3, [r7, #36]	; 0x24
 80104f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80104f6:	4641      	mov	r1, r8
 80104f8:	1854      	adds	r4, r2, r1
 80104fa:	4649      	mov	r1, r9
 80104fc:	eb43 0501 	adc.w	r5, r3, r1
 8010500:	f04f 0200 	mov.w	r2, #0
 8010504:	f04f 0300 	mov.w	r3, #0
 8010508:	00eb      	lsls	r3, r5, #3
 801050a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801050e:	00e2      	lsls	r2, r4, #3
 8010510:	4614      	mov	r4, r2
 8010512:	461d      	mov	r5, r3
 8010514:	4643      	mov	r3, r8
 8010516:	18e3      	adds	r3, r4, r3
 8010518:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801051c:	464b      	mov	r3, r9
 801051e:	eb45 0303 	adc.w	r3, r5, r3
 8010522:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801052a:	685b      	ldr	r3, [r3, #4]
 801052c:	2200      	movs	r2, #0
 801052e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010532:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8010536:	f04f 0200 	mov.w	r2, #0
 801053a:	f04f 0300 	mov.w	r3, #0
 801053e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8010542:	4629      	mov	r1, r5
 8010544:	008b      	lsls	r3, r1, #2
 8010546:	4621      	mov	r1, r4
 8010548:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801054c:	4621      	mov	r1, r4
 801054e:	008a      	lsls	r2, r1, #2
 8010550:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8010554:	f7f0 fba8 	bl	8000ca8 <__aeabi_uldivmod>
 8010558:	4602      	mov	r2, r0
 801055a:	460b      	mov	r3, r1
 801055c:	4b60      	ldr	r3, [pc, #384]	; (80106e0 <UART_SetConfig+0x4e4>)
 801055e:	fba3 2302 	umull	r2, r3, r3, r2
 8010562:	095b      	lsrs	r3, r3, #5
 8010564:	011c      	lsls	r4, r3, #4
 8010566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801056a:	2200      	movs	r2, #0
 801056c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010570:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010574:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8010578:	4642      	mov	r2, r8
 801057a:	464b      	mov	r3, r9
 801057c:	1891      	adds	r1, r2, r2
 801057e:	61b9      	str	r1, [r7, #24]
 8010580:	415b      	adcs	r3, r3
 8010582:	61fb      	str	r3, [r7, #28]
 8010584:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010588:	4641      	mov	r1, r8
 801058a:	1851      	adds	r1, r2, r1
 801058c:	6139      	str	r1, [r7, #16]
 801058e:	4649      	mov	r1, r9
 8010590:	414b      	adcs	r3, r1
 8010592:	617b      	str	r3, [r7, #20]
 8010594:	f04f 0200 	mov.w	r2, #0
 8010598:	f04f 0300 	mov.w	r3, #0
 801059c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80105a0:	4659      	mov	r1, fp
 80105a2:	00cb      	lsls	r3, r1, #3
 80105a4:	4651      	mov	r1, sl
 80105a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80105aa:	4651      	mov	r1, sl
 80105ac:	00ca      	lsls	r2, r1, #3
 80105ae:	4610      	mov	r0, r2
 80105b0:	4619      	mov	r1, r3
 80105b2:	4603      	mov	r3, r0
 80105b4:	4642      	mov	r2, r8
 80105b6:	189b      	adds	r3, r3, r2
 80105b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80105bc:	464b      	mov	r3, r9
 80105be:	460a      	mov	r2, r1
 80105c0:	eb42 0303 	adc.w	r3, r2, r3
 80105c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80105c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80105cc:	685b      	ldr	r3, [r3, #4]
 80105ce:	2200      	movs	r2, #0
 80105d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80105d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80105d4:	f04f 0200 	mov.w	r2, #0
 80105d8:	f04f 0300 	mov.w	r3, #0
 80105dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80105e0:	4649      	mov	r1, r9
 80105e2:	008b      	lsls	r3, r1, #2
 80105e4:	4641      	mov	r1, r8
 80105e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80105ea:	4641      	mov	r1, r8
 80105ec:	008a      	lsls	r2, r1, #2
 80105ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80105f2:	f7f0 fb59 	bl	8000ca8 <__aeabi_uldivmod>
 80105f6:	4602      	mov	r2, r0
 80105f8:	460b      	mov	r3, r1
 80105fa:	4611      	mov	r1, r2
 80105fc:	4b38      	ldr	r3, [pc, #224]	; (80106e0 <UART_SetConfig+0x4e4>)
 80105fe:	fba3 2301 	umull	r2, r3, r3, r1
 8010602:	095b      	lsrs	r3, r3, #5
 8010604:	2264      	movs	r2, #100	; 0x64
 8010606:	fb02 f303 	mul.w	r3, r2, r3
 801060a:	1acb      	subs	r3, r1, r3
 801060c:	011b      	lsls	r3, r3, #4
 801060e:	3332      	adds	r3, #50	; 0x32
 8010610:	4a33      	ldr	r2, [pc, #204]	; (80106e0 <UART_SetConfig+0x4e4>)
 8010612:	fba2 2303 	umull	r2, r3, r2, r3
 8010616:	095b      	lsrs	r3, r3, #5
 8010618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801061c:	441c      	add	r4, r3
 801061e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010622:	2200      	movs	r2, #0
 8010624:	673b      	str	r3, [r7, #112]	; 0x70
 8010626:	677a      	str	r2, [r7, #116]	; 0x74
 8010628:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 801062c:	4642      	mov	r2, r8
 801062e:	464b      	mov	r3, r9
 8010630:	1891      	adds	r1, r2, r2
 8010632:	60b9      	str	r1, [r7, #8]
 8010634:	415b      	adcs	r3, r3
 8010636:	60fb      	str	r3, [r7, #12]
 8010638:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801063c:	4641      	mov	r1, r8
 801063e:	1851      	adds	r1, r2, r1
 8010640:	6039      	str	r1, [r7, #0]
 8010642:	4649      	mov	r1, r9
 8010644:	414b      	adcs	r3, r1
 8010646:	607b      	str	r3, [r7, #4]
 8010648:	f04f 0200 	mov.w	r2, #0
 801064c:	f04f 0300 	mov.w	r3, #0
 8010650:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8010654:	4659      	mov	r1, fp
 8010656:	00cb      	lsls	r3, r1, #3
 8010658:	4651      	mov	r1, sl
 801065a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801065e:	4651      	mov	r1, sl
 8010660:	00ca      	lsls	r2, r1, #3
 8010662:	4610      	mov	r0, r2
 8010664:	4619      	mov	r1, r3
 8010666:	4603      	mov	r3, r0
 8010668:	4642      	mov	r2, r8
 801066a:	189b      	adds	r3, r3, r2
 801066c:	66bb      	str	r3, [r7, #104]	; 0x68
 801066e:	464b      	mov	r3, r9
 8010670:	460a      	mov	r2, r1
 8010672:	eb42 0303 	adc.w	r3, r2, r3
 8010676:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801067c:	685b      	ldr	r3, [r3, #4]
 801067e:	2200      	movs	r2, #0
 8010680:	663b      	str	r3, [r7, #96]	; 0x60
 8010682:	667a      	str	r2, [r7, #100]	; 0x64
 8010684:	f04f 0200 	mov.w	r2, #0
 8010688:	f04f 0300 	mov.w	r3, #0
 801068c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8010690:	4649      	mov	r1, r9
 8010692:	008b      	lsls	r3, r1, #2
 8010694:	4641      	mov	r1, r8
 8010696:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801069a:	4641      	mov	r1, r8
 801069c:	008a      	lsls	r2, r1, #2
 801069e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80106a2:	f7f0 fb01 	bl	8000ca8 <__aeabi_uldivmod>
 80106a6:	4602      	mov	r2, r0
 80106a8:	460b      	mov	r3, r1
 80106aa:	4b0d      	ldr	r3, [pc, #52]	; (80106e0 <UART_SetConfig+0x4e4>)
 80106ac:	fba3 1302 	umull	r1, r3, r3, r2
 80106b0:	095b      	lsrs	r3, r3, #5
 80106b2:	2164      	movs	r1, #100	; 0x64
 80106b4:	fb01 f303 	mul.w	r3, r1, r3
 80106b8:	1ad3      	subs	r3, r2, r3
 80106ba:	011b      	lsls	r3, r3, #4
 80106bc:	3332      	adds	r3, #50	; 0x32
 80106be:	4a08      	ldr	r2, [pc, #32]	; (80106e0 <UART_SetConfig+0x4e4>)
 80106c0:	fba2 2303 	umull	r2, r3, r2, r3
 80106c4:	095b      	lsrs	r3, r3, #5
 80106c6:	f003 020f 	and.w	r2, r3, #15
 80106ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	4422      	add	r2, r4
 80106d2:	609a      	str	r2, [r3, #8]
}
 80106d4:	bf00      	nop
 80106d6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80106da:	46bd      	mov	sp, r7
 80106dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80106e0:	51eb851f 	.word	0x51eb851f

080106e4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80106e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80106e6:	2400      	movs	r4, #0
 80106e8:	2310      	movs	r3, #16
 80106ea:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80106ee:	6803      	ldr	r3, [r0, #0]
 80106f0:	4615      	mov	r5, r2
 80106f2:	699e      	ldr	r6, [r3, #24]
 80106f4:	6812      	ldr	r2, [r2, #0]
 80106f6:	466b      	mov	r3, sp
 80106f8:	e9cd 4400 	strd	r4, r4, [sp]
 80106fc:	47b0      	blx	r6
 80106fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010702:	f003 0306 	and.w	r3, r3, #6
 8010706:	2b06      	cmp	r3, #6
 8010708:	bf03      	ittte	eq
 801070a:	9b00      	ldreq	r3, [sp, #0]
 801070c:	602b      	streq	r3, [r5, #0]
 801070e:	2001      	moveq	r0, #1
 8010710:	4620      	movne	r0, r4
 8010712:	b004      	add	sp, #16
 8010714:	bd70      	pop	{r4, r5, r6, pc}

08010716 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8010716:	9800      	ldr	r0, [sp, #0]
 8010718:	4290      	cmp	r0, r2
 801071a:	bf14      	ite	ne
 801071c:	2001      	movne	r0, #1
 801071e:	2006      	moveq	r0, #6
 8010720:	4770      	bx	lr
	...

08010724 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8010724:	b510      	push	{r4, lr}
 8010726:	4b03      	ldr	r3, [pc, #12]	; (8010734 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8010728:	6003      	str	r3, [r0, #0]
 801072a:	4604      	mov	r4, r0
 801072c:	f000 fd3f 	bl	80111ae <_ZNSt9type_infoD1Ev>
 8010730:	4620      	mov	r0, r4
 8010732:	bd10      	pop	{r4, pc}
 8010734:	08015308 	.word	0x08015308

08010738 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8010738:	b510      	push	{r4, lr}
 801073a:	4604      	mov	r4, r0
 801073c:	f7ff fff2 	bl	8010724 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8010740:	4620      	mov	r0, r4
 8010742:	2108      	movs	r1, #8
 8010744:	f000 f842 	bl	80107cc <_ZdlPvj>
 8010748:	4620      	mov	r0, r4
 801074a:	bd10      	pop	{r4, pc}

0801074c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 801074c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010750:	461f      	mov	r7, r3
 8010752:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8010756:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801075a:	4598      	cmp	r8, r3
 801075c:	4606      	mov	r6, r0
 801075e:	4615      	mov	r5, r2
 8010760:	d107      	bne.n	8010772 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8010762:	9907      	ldr	r1, [sp, #28]
 8010764:	f000 fd26 	bl	80111b4 <_ZNKSt9type_infoeqERKS_>
 8010768:	b118      	cbz	r0, 8010772 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 801076a:	7165      	strb	r5, [r4, #5]
 801076c:	2000      	movs	r0, #0
 801076e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010772:	4639      	mov	r1, r7
 8010774:	4630      	mov	r0, r6
 8010776:	f000 fd1d 	bl	80111b4 <_ZNKSt9type_infoeqERKS_>
 801077a:	2800      	cmp	r0, #0
 801077c:	d0f6      	beq.n	801076c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 801077e:	2301      	movs	r3, #1
 8010780:	f8c4 8000 	str.w	r8, [r4]
 8010784:	7125      	strb	r5, [r4, #4]
 8010786:	71a3      	strb	r3, [r4, #6]
 8010788:	e7f0      	b.n	801076c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

0801078a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 801078a:	b538      	push	{r3, r4, r5, lr}
 801078c:	4615      	mov	r5, r2
 801078e:	461c      	mov	r4, r3
 8010790:	f000 fd10 	bl	80111b4 <_ZNKSt9type_infoeqERKS_>
 8010794:	b120      	cbz	r0, 80107a0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8010796:	2308      	movs	r3, #8
 8010798:	60e3      	str	r3, [r4, #12]
 801079a:	2306      	movs	r3, #6
 801079c:	6025      	str	r5, [r4, #0]
 801079e:	7123      	strb	r3, [r4, #4]
 80107a0:	bd38      	pop	{r3, r4, r5, pc}

080107a2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80107a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80107a4:	4605      	mov	r5, r0
 80107a6:	460c      	mov	r4, r1
 80107a8:	9201      	str	r2, [sp, #4]
 80107aa:	461e      	mov	r6, r3
 80107ac:	f000 fd02 	bl	80111b4 <_ZNKSt9type_infoeqERKS_>
 80107b0:	b950      	cbnz	r0, 80107c8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80107b2:	2e03      	cmp	r6, #3
 80107b4:	d808      	bhi.n	80107c8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80107b6:	6823      	ldr	r3, [r4, #0]
 80107b8:	9a01      	ldr	r2, [sp, #4]
 80107ba:	695b      	ldr	r3, [r3, #20]
 80107bc:	4629      	mov	r1, r5
 80107be:	4620      	mov	r0, r4
 80107c0:	b002      	add	sp, #8
 80107c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80107c6:	4718      	bx	r3
 80107c8:	b002      	add	sp, #8
 80107ca:	bd70      	pop	{r4, r5, r6, pc}

080107cc <_ZdlPvj>:
 80107cc:	f000 bdd5 	b.w	801137a <_ZdlPv>

080107d0 <_ZdaPv>:
 80107d0:	f000 bdd3 	b.w	801137a <_ZdlPv>

080107d4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>:
 80107d4:	4a19      	ldr	r2, [pc, #100]	; (801083c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x68>)
 80107d6:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80107da:	6853      	ldr	r3, [r2, #4]
 80107dc:	b570      	push	{r4, r5, r6, lr}
 80107de:	f1a0 0408 	sub.w	r4, r0, #8
 80107e2:	b113      	cbz	r3, 80107ea <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x16>
 80107e4:	1865      	adds	r5, r4, r1
 80107e6:	42ab      	cmp	r3, r5
 80107e8:	d903      	bls.n	80107f2 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1e>
 80107ea:	f840 3c04 	str.w	r3, [r0, #-4]
 80107ee:	6054      	str	r4, [r2, #4]
 80107f0:	bd70      	pop	{r4, r5, r6, pc}
 80107f2:	685e      	ldr	r6, [r3, #4]
 80107f4:	d11f      	bne.n	8010836 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x62>
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	440b      	add	r3, r1
 80107fa:	e940 3602 	strd	r3, r6, [r0, #-8]
 80107fe:	e7f6      	b.n	80107ee <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1a>
 8010800:	1d1a      	adds	r2, r3, #4
 8010802:	4633      	mov	r3, r6
 8010804:	685e      	ldr	r6, [r3, #4]
 8010806:	b136      	cbz	r6, 8010816 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x42>
 8010808:	42b5      	cmp	r5, r6
 801080a:	d3f9      	bcc.n	8010800 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x2c>
 801080c:	bf01      	itttt	eq
 801080e:	682e      	ldreq	r6, [r5, #0]
 8010810:	686d      	ldreq	r5, [r5, #4]
 8010812:	605d      	streq	r5, [r3, #4]
 8010814:	1989      	addeq	r1, r1, r6
 8010816:	6813      	ldr	r3, [r2, #0]
 8010818:	681d      	ldr	r5, [r3, #0]
 801081a:	195e      	adds	r6, r3, r5
 801081c:	42b4      	cmp	r4, r6
 801081e:	bf1f      	itttt	ne
 8010820:	685b      	ldrne	r3, [r3, #4]
 8010822:	f840 3c04 	strne.w	r3, [r0, #-4]
 8010826:	6813      	ldrne	r3, [r2, #0]
 8010828:	f840 1c08 	strne.w	r1, [r0, #-8]
 801082c:	bf06      	itte	eq
 801082e:	186d      	addeq	r5, r5, r1
 8010830:	601d      	streq	r5, [r3, #0]
 8010832:	605c      	strne	r4, [r3, #4]
 8010834:	e7dc      	b.n	80107f0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1c>
 8010836:	3204      	adds	r2, #4
 8010838:	e7e4      	b.n	8010804 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x30>
 801083a:	bf00      	nop
 801083c:	200003bc 	.word	0x200003bc

08010840 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>:
 8010840:	3008      	adds	r0, #8
 8010842:	2808      	cmp	r0, #8
 8010844:	b530      	push	{r4, r5, lr}
 8010846:	4a0f      	ldr	r2, [pc, #60]	; (8010884 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x44>)
 8010848:	bf38      	it	cc
 801084a:	2008      	movcc	r0, #8
 801084c:	3007      	adds	r0, #7
 801084e:	f020 0307 	bic.w	r3, r0, #7
 8010852:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8010856:	b198      	cbz	r0, 8010880 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x40>
 8010858:	e9d0 1400 	ldrd	r1, r4, [r0]
 801085c:	428b      	cmp	r3, r1
 801085e:	d805      	bhi.n	801086c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x2c>
 8010860:	1acd      	subs	r5, r1, r3
 8010862:	2d07      	cmp	r5, #7
 8010864:	d805      	bhi.n	8010872 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x32>
 8010866:	6001      	str	r1, [r0, #0]
 8010868:	4621      	mov	r1, r4
 801086a:	e007      	b.n	801087c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x3c>
 801086c:	1d02      	adds	r2, r0, #4
 801086e:	4620      	mov	r0, r4
 8010870:	e7f1      	b.n	8010856 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x16>
 8010872:	18c1      	adds	r1, r0, r3
 8010874:	604c      	str	r4, [r1, #4]
 8010876:	50c5      	str	r5, [r0, r3]
 8010878:	6810      	ldr	r0, [r2, #0]
 801087a:	6003      	str	r3, [r0, #0]
 801087c:	6011      	str	r1, [r2, #0]
 801087e:	3008      	adds	r0, #8
 8010880:	bd30      	pop	{r4, r5, pc}
 8010882:	bf00      	nop
 8010884:	200003bc 	.word	0x200003bc

08010888 <__cxa_allocate_exception>:
 8010888:	b510      	push	{r4, lr}
 801088a:	f100 0480 	add.w	r4, r0, #128	; 0x80
 801088e:	4620      	mov	r0, r4
 8010890:	f000 fe0c 	bl	80114ac <malloc>
 8010894:	4603      	mov	r3, r0
 8010896:	b930      	cbnz	r0, 80108a6 <__cxa_allocate_exception+0x1e>
 8010898:	4620      	mov	r0, r4
 801089a:	f7ff ffd1 	bl	8010840 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>
 801089e:	4603      	mov	r3, r0
 80108a0:	b908      	cbnz	r0, 80108a6 <__cxa_allocate_exception+0x1e>
 80108a2:	f000 fb6f 	bl	8010f84 <_ZSt9terminatev>
 80108a6:	2280      	movs	r2, #128	; 0x80
 80108a8:	2100      	movs	r1, #0
 80108aa:	4618      	mov	r0, r3
 80108ac:	f001 fc25 	bl	80120fa <memset>
 80108b0:	3080      	adds	r0, #128	; 0x80
 80108b2:	bd10      	pop	{r4, pc}

080108b4 <__cxa_free_exception>:
 80108b4:	4a06      	ldr	r2, [pc, #24]	; (80108d0 <__cxa_free_exception+0x1c>)
 80108b6:	6893      	ldr	r3, [r2, #8]
 80108b8:	3880      	subs	r0, #128	; 0x80
 80108ba:	4298      	cmp	r0, r3
 80108bc:	d905      	bls.n	80108ca <__cxa_free_exception+0x16>
 80108be:	68d2      	ldr	r2, [r2, #12]
 80108c0:	4413      	add	r3, r2
 80108c2:	4298      	cmp	r0, r3
 80108c4:	d201      	bcs.n	80108ca <__cxa_free_exception+0x16>
 80108c6:	f7ff bf85 	b.w	80107d4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
 80108ca:	f000 bdf7 	b.w	80114bc <free>
 80108ce:	bf00      	nop
 80108d0:	200003bc 	.word	0x200003bc

080108d4 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 80108d4:	b538      	push	{r3, r4, r5, lr}
 80108d6:	4c08      	ldr	r4, [pc, #32]	; (80108f8 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 80108d8:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 80108dc:	4628      	mov	r0, r5
 80108de:	60e5      	str	r5, [r4, #12]
 80108e0:	f000 fde4 	bl	80114ac <malloc>
 80108e4:	60a0      	str	r0, [r4, #8]
 80108e6:	b910      	cbnz	r0, 80108ee <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1a>
 80108e8:	60e0      	str	r0, [r4, #12]
 80108ea:	6060      	str	r0, [r4, #4]
 80108ec:	bd38      	pop	{r3, r4, r5, pc}
 80108ee:	2300      	movs	r3, #0
 80108f0:	6060      	str	r0, [r4, #4]
 80108f2:	6005      	str	r5, [r0, #0]
 80108f4:	6043      	str	r3, [r0, #4]
 80108f6:	e7f9      	b.n	80108ec <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x18>
 80108f8:	200003bc 	.word	0x200003bc

080108fc <__cxa_end_cleanup>:
 80108fc:	b41e      	push	{r1, r2, r3, r4}
 80108fe:	f000 f89c 	bl	8010a3a <__gnu_end_cleanup>
 8010902:	bc1e      	pop	{r1, r2, r3, r4}
 8010904:	f7f1 f8da 	bl	8001abc <_Unwind_Resume>

08010908 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8010908:	7803      	ldrb	r3, [r0, #0]
 801090a:	2b47      	cmp	r3, #71	; 0x47
 801090c:	d117      	bne.n	801093e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801090e:	7843      	ldrb	r3, [r0, #1]
 8010910:	2b4e      	cmp	r3, #78	; 0x4e
 8010912:	d114      	bne.n	801093e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8010914:	7883      	ldrb	r3, [r0, #2]
 8010916:	2b55      	cmp	r3, #85	; 0x55
 8010918:	d111      	bne.n	801093e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801091a:	78c3      	ldrb	r3, [r0, #3]
 801091c:	2b43      	cmp	r3, #67	; 0x43
 801091e:	d10e      	bne.n	801093e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8010920:	7903      	ldrb	r3, [r0, #4]
 8010922:	2b43      	cmp	r3, #67	; 0x43
 8010924:	d10b      	bne.n	801093e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8010926:	7943      	ldrb	r3, [r0, #5]
 8010928:	2b2b      	cmp	r3, #43	; 0x2b
 801092a:	d108      	bne.n	801093e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801092c:	7983      	ldrb	r3, [r0, #6]
 801092e:	2b2b      	cmp	r3, #43	; 0x2b
 8010930:	d105      	bne.n	801093e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8010932:	79c0      	ldrb	r0, [r0, #7]
 8010934:	2801      	cmp	r0, #1
 8010936:	bf8c      	ite	hi
 8010938:	2000      	movhi	r0, #0
 801093a:	2001      	movls	r0, #1
 801093c:	4770      	bx	lr
 801093e:	2000      	movs	r0, #0
 8010940:	4770      	bx	lr
	...

08010944 <__cxa_type_match>:
 8010944:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010948:	461d      	mov	r5, r3
 801094a:	7803      	ldrb	r3, [r0, #0]
 801094c:	2b47      	cmp	r3, #71	; 0x47
 801094e:	460e      	mov	r6, r1
 8010950:	4602      	mov	r2, r0
 8010952:	79c1      	ldrb	r1, [r0, #7]
 8010954:	d113      	bne.n	801097e <__cxa_type_match+0x3a>
 8010956:	7843      	ldrb	r3, [r0, #1]
 8010958:	2b4e      	cmp	r3, #78	; 0x4e
 801095a:	d110      	bne.n	801097e <__cxa_type_match+0x3a>
 801095c:	7883      	ldrb	r3, [r0, #2]
 801095e:	2b55      	cmp	r3, #85	; 0x55
 8010960:	d10d      	bne.n	801097e <__cxa_type_match+0x3a>
 8010962:	78c3      	ldrb	r3, [r0, #3]
 8010964:	2b43      	cmp	r3, #67	; 0x43
 8010966:	d10a      	bne.n	801097e <__cxa_type_match+0x3a>
 8010968:	7903      	ldrb	r3, [r0, #4]
 801096a:	2b46      	cmp	r3, #70	; 0x46
 801096c:	d107      	bne.n	801097e <__cxa_type_match+0x3a>
 801096e:	7943      	ldrb	r3, [r0, #5]
 8010970:	2b4f      	cmp	r3, #79	; 0x4f
 8010972:	d104      	bne.n	801097e <__cxa_type_match+0x3a>
 8010974:	7983      	ldrb	r3, [r0, #6]
 8010976:	2b52      	cmp	r3, #82	; 0x52
 8010978:	d101      	bne.n	801097e <__cxa_type_match+0x3a>
 801097a:	2900      	cmp	r1, #0
 801097c:	d031      	beq.n	80109e2 <__cxa_type_match+0x9e>
 801097e:	4610      	mov	r0, r2
 8010980:	f7ff ffc2 	bl	8010908 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8010984:	f080 0001 	eor.w	r0, r0, #1
 8010988:	b2c4      	uxtb	r4, r0
 801098a:	2300      	movs	r3, #0
 801098c:	2000      	movs	r0, #0
 801098e:	9001      	str	r0, [sp, #4]
 8010990:	bb53      	cbnz	r3, 80109e8 <__cxa_type_match+0xa4>
 8010992:	bb5c      	cbnz	r4, 80109ec <__cxa_type_match+0xa8>
 8010994:	2901      	cmp	r1, #1
 8010996:	bf0a      	itet	eq
 8010998:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 801099c:	f1a2 0320 	subne.w	r3, r2, #32
 80109a0:	3b78      	subeq	r3, #120	; 0x78
 80109a2:	2901      	cmp	r1, #1
 80109a4:	bf08      	it	eq
 80109a6:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 80109aa:	681c      	ldr	r4, [r3, #0]
 80109ac:	bf18      	it	ne
 80109ae:	3258      	addne	r2, #88	; 0x58
 80109b0:	9201      	str	r2, [sp, #4]
 80109b2:	6823      	ldr	r3, [r4, #0]
 80109b4:	4620      	mov	r0, r4
 80109b6:	689b      	ldr	r3, [r3, #8]
 80109b8:	4798      	blx	r3
 80109ba:	b1c8      	cbz	r0, 80109f0 <__cxa_type_match+0xac>
 80109bc:	9b01      	ldr	r3, [sp, #4]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	9301      	str	r3, [sp, #4]
 80109c2:	2702      	movs	r7, #2
 80109c4:	6833      	ldr	r3, [r6, #0]
 80109c6:	aa01      	add	r2, sp, #4
 80109c8:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80109cc:	4621      	mov	r1, r4
 80109ce:	2301      	movs	r3, #1
 80109d0:	4630      	mov	r0, r6
 80109d2:	47c0      	blx	r8
 80109d4:	b170      	cbz	r0, 80109f4 <__cxa_type_match+0xb0>
 80109d6:	9b01      	ldr	r3, [sp, #4]
 80109d8:	602b      	str	r3, [r5, #0]
 80109da:	4638      	mov	r0, r7
 80109dc:	b002      	add	sp, #8
 80109de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109e2:	2301      	movs	r3, #1
 80109e4:	460c      	mov	r4, r1
 80109e6:	e7d1      	b.n	801098c <__cxa_type_match+0x48>
 80109e8:	4c03      	ldr	r4, [pc, #12]	; (80109f8 <__cxa_type_match+0xb4>)
 80109ea:	e7e2      	b.n	80109b2 <__cxa_type_match+0x6e>
 80109ec:	4c03      	ldr	r4, [pc, #12]	; (80109fc <__cxa_type_match+0xb8>)
 80109ee:	e7e0      	b.n	80109b2 <__cxa_type_match+0x6e>
 80109f0:	2701      	movs	r7, #1
 80109f2:	e7e7      	b.n	80109c4 <__cxa_type_match+0x80>
 80109f4:	4607      	mov	r7, r0
 80109f6:	e7f0      	b.n	80109da <__cxa_type_match+0x96>
 80109f8:	0801532c 	.word	0x0801532c
 80109fc:	08015334 	.word	0x08015334

08010a00 <__cxa_begin_cleanup>:
 8010a00:	b510      	push	{r4, lr}
 8010a02:	4604      	mov	r4, r0
 8010a04:	f000 f834 	bl	8010a70 <__cxa_get_globals>
 8010a08:	4602      	mov	r2, r0
 8010a0a:	4620      	mov	r0, r4
 8010a0c:	f1a4 0120 	sub.w	r1, r4, #32
 8010a10:	f7ff ff7a 	bl	8010908 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8010a14:	b160      	cbz	r0, 8010a30 <__cxa_begin_cleanup+0x30>
 8010a16:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010a1a:	3301      	adds	r3, #1
 8010a1c:	2b01      	cmp	r3, #1
 8010a1e:	f844 3c04 	str.w	r3, [r4, #-4]
 8010a22:	d103      	bne.n	8010a2c <__cxa_begin_cleanup+0x2c>
 8010a24:	6893      	ldr	r3, [r2, #8]
 8010a26:	f844 3c08 	str.w	r3, [r4, #-8]
 8010a2a:	6091      	str	r1, [r2, #8]
 8010a2c:	2001      	movs	r0, #1
 8010a2e:	bd10      	pop	{r4, pc}
 8010a30:	6893      	ldr	r3, [r2, #8]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d0f9      	beq.n	8010a2a <__cxa_begin_cleanup+0x2a>
 8010a36:	f000 faa5 	bl	8010f84 <_ZSt9terminatev>

08010a3a <__gnu_end_cleanup>:
 8010a3a:	b510      	push	{r4, lr}
 8010a3c:	f000 f818 	bl	8010a70 <__cxa_get_globals>
 8010a40:	6882      	ldr	r2, [r0, #8]
 8010a42:	4601      	mov	r1, r0
 8010a44:	b90a      	cbnz	r2, 8010a4a <__gnu_end_cleanup+0x10>
 8010a46:	f000 fa9d 	bl	8010f84 <_ZSt9terminatev>
 8010a4a:	f102 0420 	add.w	r4, r2, #32
 8010a4e:	4620      	mov	r0, r4
 8010a50:	f7ff ff5a 	bl	8010908 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8010a54:	b140      	cbz	r0, 8010a68 <__gnu_end_cleanup+0x2e>
 8010a56:	69d3      	ldr	r3, [r2, #28]
 8010a58:	3b01      	subs	r3, #1
 8010a5a:	61d3      	str	r3, [r2, #28]
 8010a5c:	b913      	cbnz	r3, 8010a64 <__gnu_end_cleanup+0x2a>
 8010a5e:	6990      	ldr	r0, [r2, #24]
 8010a60:	6088      	str	r0, [r1, #8]
 8010a62:	6193      	str	r3, [r2, #24]
 8010a64:	4620      	mov	r0, r4
 8010a66:	bd10      	pop	{r4, pc}
 8010a68:	6088      	str	r0, [r1, #8]
 8010a6a:	e7fb      	b.n	8010a64 <__gnu_end_cleanup+0x2a>

08010a6c <_ZNSt9exceptionD1Ev>:
 8010a6c:	4770      	bx	lr
	...

08010a70 <__cxa_get_globals>:
 8010a70:	4800      	ldr	r0, [pc, #0]	; (8010a74 <__cxa_get_globals+0x4>)
 8010a72:	4770      	bx	lr
 8010a74:	200003cc 	.word	0x200003cc

08010a78 <_ZL12read_uleb128PKhPm>:
 8010a78:	b530      	push	{r4, r5, lr}
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	461a      	mov	r2, r3
 8010a7e:	f810 5b01 	ldrb.w	r5, [r0], #1
 8010a82:	f005 047f 	and.w	r4, r5, #127	; 0x7f
 8010a86:	4094      	lsls	r4, r2
 8010a88:	4323      	orrs	r3, r4
 8010a8a:	062c      	lsls	r4, r5, #24
 8010a8c:	f102 0207 	add.w	r2, r2, #7
 8010a90:	d4f5      	bmi.n	8010a7e <_ZL12read_uleb128PKhPm+0x6>
 8010a92:	600b      	str	r3, [r1, #0]
 8010a94:	bd30      	pop	{r4, r5, pc}

08010a96 <_ZL12read_sleb128PKhPl>:
 8010a96:	b530      	push	{r4, r5, lr}
 8010a98:	2300      	movs	r3, #0
 8010a9a:	461a      	mov	r2, r3
 8010a9c:	f810 4b01 	ldrb.w	r4, [r0], #1
 8010aa0:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 8010aa4:	4095      	lsls	r5, r2
 8010aa6:	432b      	orrs	r3, r5
 8010aa8:	0625      	lsls	r5, r4, #24
 8010aaa:	f102 0207 	add.w	r2, r2, #7
 8010aae:	d4f5      	bmi.n	8010a9c <_ZL12read_sleb128PKhPl+0x6>
 8010ab0:	2a1f      	cmp	r2, #31
 8010ab2:	d806      	bhi.n	8010ac2 <_ZL12read_sleb128PKhPl+0x2c>
 8010ab4:	0664      	lsls	r4, r4, #25
 8010ab6:	bf42      	ittt	mi
 8010ab8:	f04f 34ff 	movmi.w	r4, #4294967295	; 0xffffffff
 8010abc:	fa04 f202 	lslmi.w	r2, r4, r2
 8010ac0:	4313      	orrmi	r3, r2
 8010ac2:	600b      	str	r3, [r1, #0]
 8010ac4:	bd30      	pop	{r4, r5, pc}

08010ac6 <_ZL28read_encoded_value_with_basehjPKhPj>:
 8010ac6:	2850      	cmp	r0, #80	; 0x50
 8010ac8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010acc:	4606      	mov	r6, r0
 8010ace:	4688      	mov	r8, r1
 8010ad0:	4615      	mov	r5, r2
 8010ad2:	461f      	mov	r7, r3
 8010ad4:	d108      	bne.n	8010ae8 <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
 8010ad6:	3203      	adds	r2, #3
 8010ad8:	f022 0003 	bic.w	r0, r2, #3
 8010adc:	f850 4b04 	ldr.w	r4, [r0], #4
 8010ae0:	603c      	str	r4, [r7, #0]
 8010ae2:	b002      	add	sp, #8
 8010ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ae8:	f000 030f 	and.w	r3, r0, #15
 8010aec:	2b0c      	cmp	r3, #12
 8010aee:	d82e      	bhi.n	8010b4e <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
 8010af0:	e8df f003 	tbb	[pc, r3]
 8010af4:	251d0725 	.word	0x251d0725
 8010af8:	2d2d2d29 	.word	0x2d2d2d29
 8010afc:	2521182d 	.word	0x2521182d
 8010b00:	29          	.byte	0x29
 8010b01:	00          	.byte	0x00
 8010b02:	a901      	add	r1, sp, #4
 8010b04:	4628      	mov	r0, r5
 8010b06:	f7ff ffb7 	bl	8010a78 <_ZL12read_uleb128PKhPm>
 8010b0a:	9c01      	ldr	r4, [sp, #4]
 8010b0c:	2c00      	cmp	r4, #0
 8010b0e:	d0e7      	beq.n	8010ae0 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8010b10:	f006 0370 	and.w	r3, r6, #112	; 0x70
 8010b14:	2b10      	cmp	r3, #16
 8010b16:	bf08      	it	eq
 8010b18:	46a8      	moveq	r8, r5
 8010b1a:	4444      	add	r4, r8
 8010b1c:	0633      	lsls	r3, r6, #24
 8010b1e:	bf48      	it	mi
 8010b20:	6824      	ldrmi	r4, [r4, #0]
 8010b22:	e7dd      	b.n	8010ae0 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8010b24:	a901      	add	r1, sp, #4
 8010b26:	4628      	mov	r0, r5
 8010b28:	f7ff ffb5 	bl	8010a96 <_ZL12read_sleb128PKhPl>
 8010b2c:	e7ed      	b.n	8010b0a <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
 8010b2e:	4628      	mov	r0, r5
 8010b30:	f830 4b02 	ldrh.w	r4, [r0], #2
 8010b34:	e7ea      	b.n	8010b0c <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8010b36:	4628      	mov	r0, r5
 8010b38:	f930 4b02 	ldrsh.w	r4, [r0], #2
 8010b3c:	e7e6      	b.n	8010b0c <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8010b3e:	4628      	mov	r0, r5
 8010b40:	f850 4b04 	ldr.w	r4, [r0], #4
 8010b44:	e7e2      	b.n	8010b0c <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8010b46:	4628      	mov	r0, r5
 8010b48:	f850 4b08 	ldr.w	r4, [r0], #8
 8010b4c:	e7de      	b.n	8010b0c <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8010b4e:	f000 fca5 	bl	801149c <abort>

08010b52 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 8010b52:	b508      	push	{r3, lr}
 8010b54:	4603      	mov	r3, r0
 8010b56:	2bff      	cmp	r3, #255	; 0xff
 8010b58:	4608      	mov	r0, r1
 8010b5a:	d010      	beq.n	8010b7e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 8010b5c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8010b60:	2a30      	cmp	r2, #48	; 0x30
 8010b62:	d012      	beq.n	8010b8a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 8010b64:	d807      	bhi.n	8010b76 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
 8010b66:	2a20      	cmp	r2, #32
 8010b68:	d00b      	beq.n	8010b82 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x30>
 8010b6a:	d802      	bhi.n	8010b72 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8010b6c:	f013 0f60 	tst.w	r3, #96	; 0x60
 8010b70:	d005      	beq.n	8010b7e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 8010b72:	f000 fc93 	bl	801149c <abort>
 8010b76:	2a40      	cmp	r2, #64	; 0x40
 8010b78:	d00b      	beq.n	8010b92 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
 8010b7a:	2a50      	cmp	r2, #80	; 0x50
 8010b7c:	d1f9      	bne.n	8010b72 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8010b7e:	2000      	movs	r0, #0
 8010b80:	bd08      	pop	{r3, pc}
 8010b82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010b86:	f003 b952 	b.w	8013e2e <_Unwind_GetTextRelBase>
 8010b8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010b8e:	f003 b94b 	b.w	8013e28 <_Unwind_GetDataRelBase>
 8010b92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010b96:	f7f1 b961 	b.w	8001e5c <_Unwind_GetRegionStart>

08010b9a <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8010b9a:	b513      	push	{r0, r1, r4, lr}
 8010b9c:	460c      	mov	r4, r1
 8010b9e:	4601      	mov	r1, r0
 8010ba0:	4620      	mov	r0, r4
 8010ba2:	e9cd 3200 	strd	r3, r2, [sp]
 8010ba6:	f7ff ffd4 	bl	8010b52 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8010baa:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010bae:	4601      	mov	r1, r0
 8010bb0:	4620      	mov	r0, r4
 8010bb2:	b002      	add	sp, #8
 8010bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bb8:	f7ff bf85 	b.w	8010ac6 <_ZL28read_encoded_value_with_basehjPKhPj>

08010bbc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8010bbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010bbe:	460c      	mov	r4, r1
 8010bc0:	4615      	mov	r5, r2
 8010bc2:	4606      	mov	r6, r0
 8010bc4:	b320      	cbz	r0, 8010c10 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
 8010bc6:	f7f1 f949 	bl	8001e5c <_Unwind_GetRegionStart>
 8010bca:	4603      	mov	r3, r0
 8010bcc:	4620      	mov	r0, r4
 8010bce:	602b      	str	r3, [r5, #0]
 8010bd0:	f810 1b01 	ldrb.w	r1, [r0], #1
 8010bd4:	29ff      	cmp	r1, #255	; 0xff
 8010bd6:	d01d      	beq.n	8010c14 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x58>
 8010bd8:	4602      	mov	r2, r0
 8010bda:	1d2b      	adds	r3, r5, #4
 8010bdc:	4630      	mov	r0, r6
 8010bde:	f7ff ffdc 	bl	8010b9a <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8010be2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010be6:	2bff      	cmp	r3, #255	; 0xff
 8010be8:	d016      	beq.n	8010c18 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5c>
 8010bea:	2310      	movs	r3, #16
 8010bec:	752b      	strb	r3, [r5, #20]
 8010bee:	a901      	add	r1, sp, #4
 8010bf0:	f7ff ff42 	bl	8010a78 <_ZL12read_uleb128PKhPm>
 8010bf4:	9b01      	ldr	r3, [sp, #4]
 8010bf6:	4403      	add	r3, r0
 8010bf8:	60eb      	str	r3, [r5, #12]
 8010bfa:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010bfe:	756b      	strb	r3, [r5, #21]
 8010c00:	a901      	add	r1, sp, #4
 8010c02:	f7ff ff39 	bl	8010a78 <_ZL12read_uleb128PKhPm>
 8010c06:	9b01      	ldr	r3, [sp, #4]
 8010c08:	4403      	add	r3, r0
 8010c0a:	612b      	str	r3, [r5, #16]
 8010c0c:	b002      	add	sp, #8
 8010c0e:	bd70      	pop	{r4, r5, r6, pc}
 8010c10:	4603      	mov	r3, r0
 8010c12:	e7db      	b.n	8010bcc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>
 8010c14:	606b      	str	r3, [r5, #4]
 8010c16:	e7e4      	b.n	8010be2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x26>
 8010c18:	752b      	strb	r3, [r5, #20]
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	e7ec      	b.n	8010bf8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>

08010c1e <_Unwind_GetGR>:
 8010c1e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010c20:	ab03      	add	r3, sp, #12
 8010c22:	9300      	str	r3, [sp, #0]
 8010c24:	2300      	movs	r3, #0
 8010c26:	460a      	mov	r2, r1
 8010c28:	4619      	mov	r1, r3
 8010c2a:	f7f0 fb7b 	bl	8001324 <_Unwind_VRS_Get>
 8010c2e:	9803      	ldr	r0, [sp, #12]
 8010c30:	b005      	add	sp, #20
 8010c32:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010c38 <__gxx_personality_v0>:
 8010c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c3c:	b091      	sub	sp, #68	; 0x44
 8010c3e:	2300      	movs	r3, #0
 8010c40:	9305      	str	r3, [sp, #20]
 8010c42:	f000 0303 	and.w	r3, r0, #3
 8010c46:	2b01      	cmp	r3, #1
 8010c48:	4606      	mov	r6, r0
 8010c4a:	460c      	mov	r4, r1
 8010c4c:	4617      	mov	r7, r2
 8010c4e:	d00e      	beq.n	8010c6e <__gxx_personality_v0+0x36>
 8010c50:	2b02      	cmp	r3, #2
 8010c52:	d003      	beq.n	8010c5c <__gxx_personality_v0+0x24>
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d13b      	bne.n	8010cd0 <__gxx_personality_v0+0x98>
 8010c58:	0701      	lsls	r1, r0, #28
 8010c5a:	d53b      	bpl.n	8010cd4 <__gxx_personality_v0+0x9c>
 8010c5c:	4639      	mov	r1, r7
 8010c5e:	4620      	mov	r0, r4
 8010c60:	f7f1 f8e6 	bl	8001e30 <__gnu_unwind_frame>
 8010c64:	b390      	cbz	r0, 8010ccc <__gxx_personality_v0+0x94>
 8010c66:	2009      	movs	r0, #9
 8010c68:	b011      	add	sp, #68	; 0x44
 8010c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c6e:	0702      	lsls	r2, r0, #28
 8010c70:	d406      	bmi.n	8010c80 <__gxx_personality_v0+0x48>
 8010c72:	6a0d      	ldr	r5, [r1, #32]
 8010c74:	4638      	mov	r0, r7
 8010c76:	210d      	movs	r1, #13
 8010c78:	f7ff ffd1 	bl	8010c1e <_Unwind_GetGR>
 8010c7c:	4285      	cmp	r5, r0
 8010c7e:	d02b      	beq.n	8010cd8 <__gxx_personality_v0+0xa0>
 8010c80:	2302      	movs	r3, #2
 8010c82:	f006 0608 	and.w	r6, r6, #8
 8010c86:	431e      	orrs	r6, r3
 8010c88:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	f8cd b000 	str.w	fp, [sp]
 8010c92:	220c      	movs	r2, #12
 8010c94:	4619      	mov	r1, r3
 8010c96:	4638      	mov	r0, r7
 8010c98:	940a      	str	r4, [sp, #40]	; 0x28
 8010c9a:	f7f0 fb69 	bl	8001370 <_Unwind_VRS_Set>
 8010c9e:	2e06      	cmp	r6, #6
 8010ca0:	d11c      	bne.n	8010cdc <__gxx_personality_v0+0xa4>
 8010ca2:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8010ca6:	e9d4 5a0a 	ldrd	r5, sl, [r4, #40]	; 0x28
 8010caa:	f1b8 0f00 	cmp.w	r8, #0
 8010cae:	bf0c      	ite	eq
 8010cb0:	f04f 0901 	moveq.w	r9, #1
 8010cb4:	f04f 0903 	movne.w	r9, #3
 8010cb8:	f016 0608 	ands.w	r6, r6, #8
 8010cbc:	f000 8104 	beq.w	8010ec8 <__gxx_personality_v0+0x290>
 8010cc0:	f1b9 0f01 	cmp.w	r9, #1
 8010cc4:	f040 80fc 	bne.w	8010ec0 <__gxx_personality_v0+0x288>
 8010cc8:	f000 f95c 	bl	8010f84 <_ZSt9terminatev>
 8010ccc:	2008      	movs	r0, #8
 8010cce:	e7cb      	b.n	8010c68 <__gxx_personality_v0+0x30>
 8010cd0:	f000 fbe4 	bl	801149c <abort>
 8010cd4:	2301      	movs	r3, #1
 8010cd6:	e7d4      	b.n	8010c82 <__gxx_personality_v0+0x4a>
 8010cd8:	2306      	movs	r3, #6
 8010cda:	e7d2      	b.n	8010c82 <__gxx_personality_v0+0x4a>
 8010cdc:	4638      	mov	r0, r7
 8010cde:	f7f1 f8c3 	bl	8001e68 <_Unwind_GetLanguageSpecificData>
 8010ce2:	4682      	mov	sl, r0
 8010ce4:	2800      	cmp	r0, #0
 8010ce6:	d0b9      	beq.n	8010c5c <__gxx_personality_v0+0x24>
 8010ce8:	465a      	mov	r2, fp
 8010cea:	4601      	mov	r1, r0
 8010cec:	4638      	mov	r0, r7
 8010cee:	f7ff ff65 	bl	8010bbc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8010cf2:	4639      	mov	r1, r7
 8010cf4:	4605      	mov	r5, r0
 8010cf6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8010cfa:	f7ff ff2a 	bl	8010b52 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8010cfe:	210f      	movs	r1, #15
 8010d00:	900c      	str	r0, [sp, #48]	; 0x30
 8010d02:	4638      	mov	r0, r7
 8010d04:	f7ff ff8b 	bl	8010c1e <_Unwind_GetGR>
 8010d08:	f020 0801 	bic.w	r8, r0, #1
 8010d0c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8010d10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010d12:	42ab      	cmp	r3, r5
 8010d14:	d815      	bhi.n	8010d42 <__gxx_personality_v0+0x10a>
 8010d16:	2500      	movs	r5, #0
 8010d18:	46a8      	mov	r8, r5
 8010d1a:	f04f 0901 	mov.w	r9, #1
 8010d1e:	07f3      	lsls	r3, r6, #31
 8010d20:	d5ca      	bpl.n	8010cb8 <__gxx_personality_v0+0x80>
 8010d22:	f1b9 0f02 	cmp.w	r9, #2
 8010d26:	d099      	beq.n	8010c5c <__gxx_personality_v0+0x24>
 8010d28:	210d      	movs	r1, #13
 8010d2a:	4638      	mov	r0, r7
 8010d2c:	9e05      	ldr	r6, [sp, #20]
 8010d2e:	f7ff ff76 	bl	8010c1e <_Unwind_GetGR>
 8010d32:	e9c4 5a0a 	strd	r5, sl, [r4, #40]	; 0x28
 8010d36:	e9c4 0608 	strd	r0, r6, [r4, #32]
 8010d3a:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 8010d3e:	2006      	movs	r0, #6
 8010d40:	e792      	b.n	8010c68 <__gxx_personality_v0+0x30>
 8010d42:	462a      	mov	r2, r5
 8010d44:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8010d48:	ab06      	add	r3, sp, #24
 8010d4a:	2000      	movs	r0, #0
 8010d4c:	f7ff ff25 	bl	8010b9a <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8010d50:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8010d54:	4602      	mov	r2, r0
 8010d56:	ab07      	add	r3, sp, #28
 8010d58:	2000      	movs	r0, #0
 8010d5a:	f7ff ff1e 	bl	8010b9a <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8010d5e:	ab08      	add	r3, sp, #32
 8010d60:	4602      	mov	r2, r0
 8010d62:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8010d66:	2000      	movs	r0, #0
 8010d68:	f7ff ff17 	bl	8010b9a <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8010d6c:	a909      	add	r1, sp, #36	; 0x24
 8010d6e:	f7ff fe83 	bl	8010a78 <_ZL12read_uleb128PKhPm>
 8010d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d74:	9a06      	ldr	r2, [sp, #24]
 8010d76:	4413      	add	r3, r2
 8010d78:	4543      	cmp	r3, r8
 8010d7a:	4605      	mov	r5, r0
 8010d7c:	d901      	bls.n	8010d82 <__gxx_personality_v0+0x14a>
 8010d7e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8010d80:	e7c6      	b.n	8010d10 <__gxx_personality_v0+0xd8>
 8010d82:	9a07      	ldr	r2, [sp, #28]
 8010d84:	4413      	add	r3, r2
 8010d86:	4543      	cmp	r3, r8
 8010d88:	d9c2      	bls.n	8010d10 <__gxx_personality_v0+0xd8>
 8010d8a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010d8e:	f1b8 0f00 	cmp.w	r8, #0
 8010d92:	d001      	beq.n	8010d98 <__gxx_personality_v0+0x160>
 8010d94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d96:	4498      	add	r8, r3
 8010d98:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010d9a:	b115      	cbz	r5, 8010da2 <__gxx_personality_v0+0x16a>
 8010d9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010d9e:	3d01      	subs	r5, #1
 8010da0:	441d      	add	r5, r3
 8010da2:	f1b8 0f00 	cmp.w	r8, #0
 8010da6:	f43f af59 	beq.w	8010c5c <__gxx_personality_v0+0x24>
 8010daa:	2d00      	cmp	r5, #0
 8010dac:	f000 8085 	beq.w	8010eba <__gxx_personality_v0+0x282>
 8010db0:	f016 0308 	ands.w	r3, r6, #8
 8010db4:	9303      	str	r3, [sp, #12]
 8010db6:	d033      	beq.n	8010e20 <__gxx_personality_v0+0x1e8>
 8010db8:	2347      	movs	r3, #71	; 0x47
 8010dba:	7023      	strb	r3, [r4, #0]
 8010dbc:	234e      	movs	r3, #78	; 0x4e
 8010dbe:	7063      	strb	r3, [r4, #1]
 8010dc0:	2355      	movs	r3, #85	; 0x55
 8010dc2:	70a3      	strb	r3, [r4, #2]
 8010dc4:	2343      	movs	r3, #67	; 0x43
 8010dc6:	70e3      	strb	r3, [r4, #3]
 8010dc8:	2346      	movs	r3, #70	; 0x46
 8010dca:	7123      	strb	r3, [r4, #4]
 8010dcc:	234f      	movs	r3, #79	; 0x4f
 8010dce:	7163      	strb	r3, [r4, #5]
 8010dd0:	2352      	movs	r3, #82	; 0x52
 8010dd2:	71a3      	strb	r3, [r4, #6]
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	71e3      	strb	r3, [r4, #7]
 8010dd8:	2300      	movs	r3, #0
 8010dda:	9302      	str	r3, [sp, #8]
 8010ddc:	a907      	add	r1, sp, #28
 8010dde:	4628      	mov	r0, r5
 8010de0:	f7ff fe59 	bl	8010a96 <_ZL12read_sleb128PKhPl>
 8010de4:	a908      	add	r1, sp, #32
 8010de6:	4681      	mov	r9, r0
 8010de8:	f7ff fe55 	bl	8010a96 <_ZL12read_sleb128PKhPl>
 8010dec:	9907      	ldr	r1, [sp, #28]
 8010dee:	2900      	cmp	r1, #0
 8010df0:	d060      	beq.n	8010eb4 <__gxx_personality_v0+0x27c>
 8010df2:	dd39      	ble.n	8010e68 <__gxx_personality_v0+0x230>
 8010df4:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8010df8:	28ff      	cmp	r0, #255	; 0xff
 8010dfa:	d031      	beq.n	8010e60 <__gxx_personality_v0+0x228>
 8010dfc:	f000 0307 	and.w	r3, r0, #7
 8010e00:	2b04      	cmp	r3, #4
 8010e02:	f63f af65 	bhi.w	8010cd0 <__gxx_personality_v0+0x98>
 8010e06:	a201      	add	r2, pc, #4	; (adr r2, 8010e0c <__gxx_personality_v0+0x1d4>)
 8010e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e0c:	08010e65 	.word	0x08010e65
 8010e10:	08010cd1 	.word	0x08010cd1
 8010e14:	08010e33 	.word	0x08010e33
 8010e18:	08010e65 	.word	0x08010e65
 8010e1c:	08010e5d 	.word	0x08010e5d
 8010e20:	79e3      	ldrb	r3, [r4, #7]
 8010e22:	2b01      	cmp	r3, #1
 8010e24:	bf0c      	ite	eq
 8010e26:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 8010e2a:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 8010e2e:	9305      	str	r3, [sp, #20]
 8010e30:	e7d2      	b.n	8010dd8 <__gxx_personality_v0+0x1a0>
 8010e32:	2502      	movs	r5, #2
 8010e34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010e36:	ab09      	add	r3, sp, #36	; 0x24
 8010e38:	fb05 2211 	mls	r2, r5, r1, r2
 8010e3c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010e3e:	f7ff fe42 	bl	8010ac6 <_ZL28read_encoded_value_with_basehjPKhPj>
 8010e42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010e44:	b131      	cbz	r1, 8010e54 <__gxx_personality_v0+0x21c>
 8010e46:	b35c      	cbz	r4, 8010ea0 <__gxx_personality_v0+0x268>
 8010e48:	ab05      	add	r3, sp, #20
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	4620      	mov	r0, r4
 8010e4e:	f7ff fd79 	bl	8010944 <__cxa_type_match>
 8010e52:	b328      	cbz	r0, 8010ea0 <__gxx_personality_v0+0x268>
 8010e54:	9d07      	ldr	r5, [sp, #28]
 8010e56:	f04f 0903 	mov.w	r9, #3
 8010e5a:	e760      	b.n	8010d1e <__gxx_personality_v0+0xe6>
 8010e5c:	2508      	movs	r5, #8
 8010e5e:	e7e9      	b.n	8010e34 <__gxx_personality_v0+0x1fc>
 8010e60:	2500      	movs	r5, #0
 8010e62:	e7e7      	b.n	8010e34 <__gxx_personality_v0+0x1fc>
 8010e64:	2504      	movs	r5, #4
 8010e66:	e7e5      	b.n	8010e34 <__gxx_personality_v0+0x1fc>
 8010e68:	f1c1 517f 	rsb	r1, r1, #1069547520	; 0x3fc00000
 8010e6c:	f501 117f 	add.w	r1, r1, #4177920	; 0x3fc000
 8010e70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e72:	f501 517f 	add.w	r1, r1, #16320	; 0x3fc0
 8010e76:	313f      	adds	r1, #63	; 0x3f
 8010e78:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 8010e7c:	b1ac      	cbz	r4, 8010eaa <__gxx_personality_v0+0x272>
 8010e7e:	9a03      	ldr	r2, [sp, #12]
 8010e80:	b99a      	cbnz	r2, 8010eaa <__gxx_personality_v0+0x272>
 8010e82:	9b05      	ldr	r3, [sp, #20]
 8010e84:	9309      	str	r3, [sp, #36]	; 0x24
 8010e86:	3d04      	subs	r5, #4
 8010e88:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8010e8c:	2900      	cmp	r1, #0
 8010e8e:	d0e1      	beq.n	8010e54 <__gxx_personality_v0+0x21c>
 8010e90:	ab09      	add	r3, sp, #36	; 0x24
 8010e92:	2200      	movs	r2, #0
 8010e94:	4429      	add	r1, r5
 8010e96:	4620      	mov	r0, r4
 8010e98:	f7ff fd54 	bl	8010944 <__cxa_type_match>
 8010e9c:	2800      	cmp	r0, #0
 8010e9e:	d0f3      	beq.n	8010e88 <__gxx_personality_v0+0x250>
 8010ea0:	9d08      	ldr	r5, [sp, #32]
 8010ea2:	2d00      	cmp	r5, #0
 8010ea4:	d05a      	beq.n	8010f5c <__gxx_personality_v0+0x324>
 8010ea6:	444d      	add	r5, r9
 8010ea8:	e798      	b.n	8010ddc <__gxx_personality_v0+0x1a4>
 8010eaa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d1f6      	bne.n	8010ea0 <__gxx_personality_v0+0x268>
 8010eb2:	e7cf      	b.n	8010e54 <__gxx_personality_v0+0x21c>
 8010eb4:	2301      	movs	r3, #1
 8010eb6:	9302      	str	r3, [sp, #8]
 8010eb8:	e7f2      	b.n	8010ea0 <__gxx_personality_v0+0x268>
 8010eba:	f04f 0902 	mov.w	r9, #2
 8010ebe:	e72e      	b.n	8010d1e <__gxx_personality_v0+0xe6>
 8010ec0:	2d00      	cmp	r5, #0
 8010ec2:	da20      	bge.n	8010f06 <__gxx_personality_v0+0x2ce>
 8010ec4:	f000 f870 	bl	8010fa8 <_ZSt10unexpectedv>
 8010ec8:	f1b9 0f01 	cmp.w	r9, #1
 8010ecc:	d102      	bne.n	8010ed4 <__gxx_personality_v0+0x29c>
 8010ece:	4620      	mov	r0, r4
 8010ed0:	f000 fa72 	bl	80113b8 <__cxa_call_terminate>
 8010ed4:	2d00      	cmp	r5, #0
 8010ed6:	da16      	bge.n	8010f06 <__gxx_personality_v0+0x2ce>
 8010ed8:	465a      	mov	r2, fp
 8010eda:	4651      	mov	r1, sl
 8010edc:	4638      	mov	r0, r7
 8010ede:	f7ff fe6d 	bl	8010bbc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8010ee2:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8010ee6:	4639      	mov	r1, r7
 8010ee8:	f7ff fe33 	bl	8010b52 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8010eec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010eee:	900c      	str	r0, [sp, #48]	; 0x30
 8010ef0:	43ea      	mvns	r2, r5
 8010ef2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8010ef6:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 8010efa:	bb6a      	cbnz	r2, 8010f58 <__gxx_personality_v0+0x320>
 8010efc:	2204      	movs	r2, #4
 8010efe:	e9c4 600a 	strd	r6, r0, [r4, #40]	; 0x28
 8010f02:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 8010f06:	2300      	movs	r3, #0
 8010f08:	ae09      	add	r6, sp, #36	; 0x24
 8010f0a:	461a      	mov	r2, r3
 8010f0c:	4619      	mov	r1, r3
 8010f0e:	9600      	str	r6, [sp, #0]
 8010f10:	4638      	mov	r0, r7
 8010f12:	9409      	str	r4, [sp, #36]	; 0x24
 8010f14:	f7f0 fa2c 	bl	8001370 <_Unwind_VRS_Set>
 8010f18:	2300      	movs	r3, #0
 8010f1a:	4619      	mov	r1, r3
 8010f1c:	2201      	movs	r2, #1
 8010f1e:	9600      	str	r6, [sp, #0]
 8010f20:	4638      	mov	r0, r7
 8010f22:	9509      	str	r5, [sp, #36]	; 0x24
 8010f24:	f7f0 fa24 	bl	8001370 <_Unwind_VRS_Set>
 8010f28:	210f      	movs	r1, #15
 8010f2a:	4638      	mov	r0, r7
 8010f2c:	f7ff fe77 	bl	8010c1e <_Unwind_GetGR>
 8010f30:	f000 0001 	and.w	r0, r0, #1
 8010f34:	ea40 0008 	orr.w	r0, r0, r8
 8010f38:	2300      	movs	r3, #0
 8010f3a:	9009      	str	r0, [sp, #36]	; 0x24
 8010f3c:	9600      	str	r6, [sp, #0]
 8010f3e:	220f      	movs	r2, #15
 8010f40:	4619      	mov	r1, r3
 8010f42:	4638      	mov	r0, r7
 8010f44:	f7f0 fa14 	bl	8001370 <_Unwind_VRS_Set>
 8010f48:	f1b9 0f02 	cmp.w	r9, #2
 8010f4c:	d102      	bne.n	8010f54 <__gxx_personality_v0+0x31c>
 8010f4e:	4620      	mov	r0, r4
 8010f50:	f7ff fd56 	bl	8010a00 <__cxa_begin_cleanup>
 8010f54:	2007      	movs	r0, #7
 8010f56:	e687      	b.n	8010c68 <__gxx_personality_v0+0x30>
 8010f58:	3601      	adds	r6, #1
 8010f5a:	e7cc      	b.n	8010ef6 <__gxx_personality_v0+0x2be>
 8010f5c:	9b02      	ldr	r3, [sp, #8]
 8010f5e:	ea4f 0943 	mov.w	r9, r3, lsl #1
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	f43f ae7a 	beq.w	8010c5c <__gxx_personality_v0+0x24>
 8010f68:	e6d9      	b.n	8010d1e <__gxx_personality_v0+0xe6>
 8010f6a:	bf00      	nop

08010f6c <_ZN10__cxxabiv111__terminateEPFvvE>:
 8010f6c:	b508      	push	{r3, lr}
 8010f6e:	4780      	blx	r0
 8010f70:	f000 fa94 	bl	801149c <abort>

08010f74 <_ZSt13get_terminatev>:
 8010f74:	4b02      	ldr	r3, [pc, #8]	; (8010f80 <_ZSt13get_terminatev+0xc>)
 8010f76:	6818      	ldr	r0, [r3, #0]
 8010f78:	f3bf 8f5b 	dmb	ish
 8010f7c:	4770      	bx	lr
 8010f7e:	bf00      	nop
 8010f80:	20000010 	.word	0x20000010

08010f84 <_ZSt9terminatev>:
 8010f84:	b508      	push	{r3, lr}
 8010f86:	f7ff fff5 	bl	8010f74 <_ZSt13get_terminatev>
 8010f8a:	f7ff ffef 	bl	8010f6c <_ZN10__cxxabiv111__terminateEPFvvE>

08010f8e <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8010f8e:	b508      	push	{r3, lr}
 8010f90:	4780      	blx	r0
 8010f92:	f7ff fff7 	bl	8010f84 <_ZSt9terminatev>
	...

08010f98 <_ZSt14get_unexpectedv>:
 8010f98:	4b02      	ldr	r3, [pc, #8]	; (8010fa4 <_ZSt14get_unexpectedv+0xc>)
 8010f9a:	6818      	ldr	r0, [r3, #0]
 8010f9c:	f3bf 8f5b 	dmb	ish
 8010fa0:	4770      	bx	lr
 8010fa2:	bf00      	nop
 8010fa4:	2000000c 	.word	0x2000000c

08010fa8 <_ZSt10unexpectedv>:
 8010fa8:	b508      	push	{r3, lr}
 8010faa:	f7ff fff5 	bl	8010f98 <_ZSt14get_unexpectedv>
 8010fae:	f7ff ffee 	bl	8010f8e <_ZN10__cxxabiv112__unexpectedEPFvvE>

08010fb2 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 8010fb2:	2801      	cmp	r0, #1
 8010fb4:	b507      	push	{r0, r1, r2, lr}
 8010fb6:	d903      	bls.n	8010fc0 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
 8010fb8:	f851 0c14 	ldr.w	r0, [r1, #-20]
 8010fbc:	f7ff ffd6 	bl	8010f6c <_ZN10__cxxabiv111__terminateEPFvvE>
 8010fc0:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 8010fc4:	f3bf 8f5b 	dmb	ish
 8010fc8:	e853 2f00 	ldrex	r2, [r3]
 8010fcc:	3a01      	subs	r2, #1
 8010fce:	e843 2000 	strex	r0, r2, [r3]
 8010fd2:	2800      	cmp	r0, #0
 8010fd4:	d1f8      	bne.n	8010fc8 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x16>
 8010fd6:	f3bf 8f5b 	dmb	ish
 8010fda:	b962      	cbnz	r2, 8010ff6 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x44>
 8010fdc:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 8010fe0:	f101 0058 	add.w	r0, r1, #88	; 0x58
 8010fe4:	b113      	cbz	r3, 8010fec <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
 8010fe6:	9001      	str	r0, [sp, #4]
 8010fe8:	4798      	blx	r3
 8010fea:	9801      	ldr	r0, [sp, #4]
 8010fec:	b003      	add	sp, #12
 8010fee:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ff2:	f7ff bc5f 	b.w	80108b4 <__cxa_free_exception>
 8010ff6:	b003      	add	sp, #12
 8010ff8:	f85d fb04 	ldr.w	pc, [sp], #4

08010ffc <__cxa_init_primary_exception>:
 8010ffc:	b538      	push	{r3, r4, r5, lr}
 8010ffe:	2500      	movs	r5, #0
 8011000:	e940 121e 	strd	r1, r2, [r0, #-120]	; 0x78
 8011004:	f840 5c80 	str.w	r5, [r0, #-128]
 8011008:	4604      	mov	r4, r0
 801100a:	f7ff ffc5 	bl	8010f98 <_ZSt14get_unexpectedv>
 801100e:	f844 0c70 	str.w	r0, [r4, #-112]
 8011012:	f7ff ffaf 	bl	8010f74 <_ZSt13get_terminatev>
 8011016:	2347      	movs	r3, #71	; 0x47
 8011018:	f804 3c58 	strb.w	r3, [r4, #-88]
 801101c:	234e      	movs	r3, #78	; 0x4e
 801101e:	f804 3c57 	strb.w	r3, [r4, #-87]
 8011022:	2355      	movs	r3, #85	; 0x55
 8011024:	f804 3c56 	strb.w	r3, [r4, #-86]
 8011028:	2343      	movs	r3, #67	; 0x43
 801102a:	f804 3c55 	strb.w	r3, [r4, #-85]
 801102e:	f804 3c54 	strb.w	r3, [r4, #-84]
 8011032:	232b      	movs	r3, #43	; 0x2b
 8011034:	f804 3c53 	strb.w	r3, [r4, #-83]
 8011038:	f804 3c52 	strb.w	r3, [r4, #-82]
 801103c:	4b04      	ldr	r3, [pc, #16]	; (8011050 <__cxa_init_primary_exception+0x54>)
 801103e:	f844 0c6c 	str.w	r0, [r4, #-108]
 8011042:	f804 5c51 	strb.w	r5, [r4, #-81]
 8011046:	f844 3c50 	str.w	r3, [r4, #-80]
 801104a:	f1a4 0080 	sub.w	r0, r4, #128	; 0x80
 801104e:	bd38      	pop	{r3, r4, r5, pc}
 8011050:	08010fb3 	.word	0x08010fb3

08011054 <__cxa_throw>:
 8011054:	b507      	push	{r0, r1, r2, lr}
 8011056:	4604      	mov	r4, r0
 8011058:	e9cd 2100 	strd	r2, r1, [sp]
 801105c:	f7ff fd08 	bl	8010a70 <__cxa_get_globals>
 8011060:	4603      	mov	r3, r0
 8011062:	6840      	ldr	r0, [r0, #4]
 8011064:	3001      	adds	r0, #1
 8011066:	e9dd 2100 	ldrd	r2, r1, [sp]
 801106a:	6058      	str	r0, [r3, #4]
 801106c:	4620      	mov	r0, r4
 801106e:	f7ff ffc5 	bl	8010ffc <__cxa_init_primary_exception>
 8011072:	4604      	mov	r4, r0
 8011074:	2301      	movs	r3, #1
 8011076:	f844 3b28 	str.w	r3, [r4], #40
 801107a:	4620      	mov	r0, r4
 801107c:	f7f0 fd0c 	bl	8001a98 <_Unwind_RaiseException>
 8011080:	4620      	mov	r0, r4
 8011082:	f000 f9d9 	bl	8011438 <__cxa_begin_catch>
 8011086:	f7ff ff7d 	bl	8010f84 <_ZSt9terminatev>

0801108a <_Znwj>:
 801108a:	2801      	cmp	r0, #1
 801108c:	bf38      	it	cc
 801108e:	2001      	movcc	r0, #1
 8011090:	b510      	push	{r4, lr}
 8011092:	4604      	mov	r4, r0
 8011094:	4620      	mov	r0, r4
 8011096:	f000 fa09 	bl	80114ac <malloc>
 801109a:	b100      	cbz	r0, 801109e <_Znwj+0x14>
 801109c:	bd10      	pop	{r4, pc}
 801109e:	f000 f9f5 	bl	801148c <_ZSt15get_new_handlerv>
 80110a2:	b908      	cbnz	r0, 80110a8 <_Znwj+0x1e>
 80110a4:	f000 f9fa 	bl	801149c <abort>
 80110a8:	4780      	blx	r0
 80110aa:	e7f3      	b.n	8011094 <_Znwj+0xa>

080110ac <_Znaj>:
 80110ac:	f7ff bfed 	b.w	801108a <_Znwj>

080110b0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80110b0:	b510      	push	{r4, lr}
 80110b2:	4b03      	ldr	r3, [pc, #12]	; (80110c0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80110b4:	6003      	str	r3, [r0, #0]
 80110b6:	4604      	mov	r4, r0
 80110b8:	f7ff fb34 	bl	8010724 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80110bc:	4620      	mov	r0, r4
 80110be:	bd10      	pop	{r4, pc}
 80110c0:	080153d4 	.word	0x080153d4

080110c4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80110c4:	b510      	push	{r4, lr}
 80110c6:	4604      	mov	r4, r0
 80110c8:	f7ff fff2 	bl	80110b0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80110cc:	4620      	mov	r0, r4
 80110ce:	210c      	movs	r1, #12
 80110d0:	f7ff fb7c 	bl	80107cc <_ZdlPvj>
 80110d4:	4620      	mov	r0, r4
 80110d6:	bd10      	pop	{r4, pc}

080110d8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80110d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80110da:	9f08      	ldr	r7, [sp, #32]
 80110dc:	4297      	cmp	r7, r2
 80110de:	4605      	mov	r5, r0
 80110e0:	460e      	mov	r6, r1
 80110e2:	4614      	mov	r4, r2
 80110e4:	d00a      	beq.n	80110fc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 80110e6:	68a8      	ldr	r0, [r5, #8]
 80110e8:	6802      	ldr	r2, [r0, #0]
 80110ea:	9708      	str	r7, [sp, #32]
 80110ec:	6a15      	ldr	r5, [r2, #32]
 80110ee:	4631      	mov	r1, r6
 80110f0:	4622      	mov	r2, r4
 80110f2:	46ac      	mov	ip, r5
 80110f4:	b003      	add	sp, #12
 80110f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80110fa:	4760      	bx	ip
 80110fc:	4619      	mov	r1, r3
 80110fe:	9301      	str	r3, [sp, #4]
 8011100:	f000 f858 	bl	80111b4 <_ZNKSt9type_infoeqERKS_>
 8011104:	9b01      	ldr	r3, [sp, #4]
 8011106:	2800      	cmp	r0, #0
 8011108:	d0ed      	beq.n	80110e6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 801110a:	2006      	movs	r0, #6
 801110c:	b003      	add	sp, #12
 801110e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011110 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8011110:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011114:	460d      	mov	r5, r1
 8011116:	4619      	mov	r1, r3
 8011118:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 801111c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 8011120:	4681      	mov	r9, r0
 8011122:	4617      	mov	r7, r2
 8011124:	4698      	mov	r8, r3
 8011126:	f000 f845 	bl	80111b4 <_ZNKSt9type_infoeqERKS_>
 801112a:	b190      	cbz	r0, 8011152 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 801112c:	2d00      	cmp	r5, #0
 801112e:	6034      	str	r4, [r6, #0]
 8011130:	7137      	strb	r7, [r6, #4]
 8011132:	db09      	blt.n	8011148 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8011134:	1961      	adds	r1, r4, r5
 8011136:	458a      	cmp	sl, r1
 8011138:	bf0c      	ite	eq
 801113a:	2106      	moveq	r1, #6
 801113c:	2101      	movne	r1, #1
 801113e:	71b1      	strb	r1, [r6, #6]
 8011140:	2000      	movs	r0, #0
 8011142:	b001      	add	sp, #4
 8011144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011148:	3502      	adds	r5, #2
 801114a:	d1f9      	bne.n	8011140 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801114c:	2301      	movs	r3, #1
 801114e:	71b3      	strb	r3, [r6, #6]
 8011150:	e7f6      	b.n	8011140 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8011152:	4554      	cmp	r4, sl
 8011154:	d106      	bne.n	8011164 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8011156:	4659      	mov	r1, fp
 8011158:	4648      	mov	r0, r9
 801115a:	f000 f82b 	bl	80111b4 <_ZNKSt9type_infoeqERKS_>
 801115e:	b108      	cbz	r0, 8011164 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8011160:	7177      	strb	r7, [r6, #5]
 8011162:	e7ed      	b.n	8011140 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8011164:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8011168:	6803      	ldr	r3, [r0, #0]
 801116a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 801116e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 8011172:	69dc      	ldr	r4, [r3, #28]
 8011174:	463a      	mov	r2, r7
 8011176:	4643      	mov	r3, r8
 8011178:	4629      	mov	r1, r5
 801117a:	46a4      	mov	ip, r4
 801117c:	b001      	add	sp, #4
 801117e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011182:	4760      	bx	ip

08011184 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8011184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011188:	4607      	mov	r7, r0
 801118a:	460c      	mov	r4, r1
 801118c:	4615      	mov	r5, r2
 801118e:	461e      	mov	r6, r3
 8011190:	f7ff fafb 	bl	801078a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8011194:	b948      	cbnz	r0, 80111aa <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8011196:	68b8      	ldr	r0, [r7, #8]
 8011198:	6803      	ldr	r3, [r0, #0]
 801119a:	699f      	ldr	r7, [r3, #24]
 801119c:	462a      	mov	r2, r5
 801119e:	4633      	mov	r3, r6
 80111a0:	4621      	mov	r1, r4
 80111a2:	46bc      	mov	ip, r7
 80111a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80111a8:	4760      	bx	ip
 80111aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080111ae <_ZNSt9type_infoD1Ev>:
 80111ae:	4770      	bx	lr

080111b0 <_ZNKSt9type_info14__is_pointer_pEv>:
 80111b0:	2000      	movs	r0, #0
 80111b2:	4770      	bx	lr

080111b4 <_ZNKSt9type_infoeqERKS_>:
 80111b4:	4281      	cmp	r1, r0
 80111b6:	b508      	push	{r3, lr}
 80111b8:	d00e      	beq.n	80111d8 <_ZNKSt9type_infoeqERKS_+0x24>
 80111ba:	6840      	ldr	r0, [r0, #4]
 80111bc:	7803      	ldrb	r3, [r0, #0]
 80111be:	2b2a      	cmp	r3, #42	; 0x2a
 80111c0:	d00c      	beq.n	80111dc <_ZNKSt9type_infoeqERKS_+0x28>
 80111c2:	6849      	ldr	r1, [r1, #4]
 80111c4:	780b      	ldrb	r3, [r1, #0]
 80111c6:	2b2a      	cmp	r3, #42	; 0x2a
 80111c8:	bf08      	it	eq
 80111ca:	3101      	addeq	r1, #1
 80111cc:	f7ef f820 	bl	8000210 <strcmp>
 80111d0:	fab0 f080 	clz	r0, r0
 80111d4:	0940      	lsrs	r0, r0, #5
 80111d6:	bd08      	pop	{r3, pc}
 80111d8:	2001      	movs	r0, #1
 80111da:	e7fc      	b.n	80111d6 <_ZNKSt9type_infoeqERKS_+0x22>
 80111dc:	2000      	movs	r0, #0
 80111de:	e7fa      	b.n	80111d6 <_ZNKSt9type_infoeqERKS_+0x22>

080111e0 <_ZNKSt11logic_error4whatEv>:
 80111e0:	6840      	ldr	r0, [r0, #4]
 80111e2:	4770      	bx	lr

080111e4 <_ZNSt13runtime_errorD1Ev>:
 80111e4:	b513      	push	{r0, r1, r4, lr}
 80111e6:	4b07      	ldr	r3, [pc, #28]	; (8011204 <_ZNSt13runtime_errorD1Ev+0x20>)
 80111e8:	6003      	str	r3, [r0, #0]
 80111ea:	4604      	mov	r4, r0
 80111ec:	6840      	ldr	r0, [r0, #4]
 80111ee:	a901      	add	r1, sp, #4
 80111f0:	380c      	subs	r0, #12
 80111f2:	f000 f8ab 	bl	801134c <_ZNSs4_Rep10_M_disposeERKSaIcE>
 80111f6:	4620      	mov	r0, r4
 80111f8:	f7ff fc38 	bl	8010a6c <_ZNSt9exceptionD1Ev>
 80111fc:	4620      	mov	r0, r4
 80111fe:	b002      	add	sp, #8
 8011200:	bd10      	pop	{r4, pc}
 8011202:	bf00      	nop
 8011204:	08015438 	.word	0x08015438

08011208 <_ZNSt13runtime_errorD0Ev>:
 8011208:	b510      	push	{r4, lr}
 801120a:	4604      	mov	r4, r0
 801120c:	f7ff ffea 	bl	80111e4 <_ZNSt13runtime_errorD1Ev>
 8011210:	4620      	mov	r0, r4
 8011212:	f000 f8b2 	bl	801137a <_ZdlPv>
 8011216:	4620      	mov	r0, r4
 8011218:	bd10      	pop	{r4, pc}
	...

0801121c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0>:
 801121c:	4288      	cmp	r0, r1
 801121e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011222:	4604      	mov	r4, r0
 8011224:	460d      	mov	r5, r1
 8011226:	d018      	beq.n	801125a <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x3e>
 8011228:	b1a0      	cbz	r0, 8011254 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x38>
 801122a:	eba1 0800 	sub.w	r8, r1, r0
 801122e:	4640      	mov	r0, r8
 8011230:	2100      	movs	r1, #0
 8011232:	f000 f859 	bl	80112e8 <_ZNSs4_Rep9_S_createEjjRKSaIcE>
 8011236:	f100 070c 	add.w	r7, r0, #12
 801123a:	4606      	mov	r6, r0
 801123c:	4621      	mov	r1, r4
 801123e:	4638      	mov	r0, r7
 8011240:	462a      	mov	r2, r5
 8011242:	f000 f83f 	bl	80112c4 <_ZNSs13_S_copy_charsEPcPKcS1_>
 8011246:	4641      	mov	r1, r8
 8011248:	4630      	mov	r0, r6
 801124a:	f000 f841 	bl	80112d0 <_ZNSs4_Rep26_M_set_length_and_sharableEj>
 801124e:	4638      	mov	r0, r7
 8011250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011254:	4802      	ldr	r0, [pc, #8]	; (8011260 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x44>)
 8011256:	f000 f88a 	bl	801136e <_ZSt19__throw_logic_errorPKc>
 801125a:	4f02      	ldr	r7, [pc, #8]	; (8011264 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x48>)
 801125c:	e7f7      	b.n	801124e <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x32>
 801125e:	bf00      	nop
 8011260:	08015444 	.word	0x08015444
 8011264:	200003e4 	.word	0x200003e4

08011268 <_ZNSsC2EPKcRKSaIcE.isra.0>:
 8011268:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801126a:	4605      	mov	r5, r0
 801126c:	460c      	mov	r4, r1
 801126e:	b159      	cbz	r1, 8011288 <_ZNSsC2EPKcRKSaIcE.isra.0+0x20>
 8011270:	4608      	mov	r0, r1
 8011272:	9201      	str	r2, [sp, #4]
 8011274:	f7ef f82c 	bl	80002d0 <strlen>
 8011278:	9a01      	ldr	r2, [sp, #4]
 801127a:	1821      	adds	r1, r4, r0
 801127c:	4620      	mov	r0, r4
 801127e:	f7ff ffcd 	bl	801121c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0>
 8011282:	6028      	str	r0, [r5, #0]
 8011284:	b003      	add	sp, #12
 8011286:	bd30      	pop	{r4, r5, pc}
 8011288:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801128c:	e7f6      	b.n	801127c <_ZNSsC2EPKcRKSaIcE.isra.0+0x14>
	...

08011290 <_ZNSt13runtime_errorC1EPKc>:
 8011290:	b513      	push	{r0, r1, r4, lr}
 8011292:	4b05      	ldr	r3, [pc, #20]	; (80112a8 <_ZNSt13runtime_errorC1EPKc+0x18>)
 8011294:	4604      	mov	r4, r0
 8011296:	aa01      	add	r2, sp, #4
 8011298:	f840 3b04 	str.w	r3, [r0], #4
 801129c:	f7ff ffe4 	bl	8011268 <_ZNSsC2EPKcRKSaIcE.isra.0>
 80112a0:	4620      	mov	r0, r4
 80112a2:	b002      	add	sp, #8
 80112a4:	bd10      	pop	{r4, pc}
 80112a6:	bf00      	nop
 80112a8:	08015438 	.word	0x08015438

080112ac <_ZNSs7_M_copyEPcPKcj>:
 80112ac:	2a01      	cmp	r2, #1
 80112ae:	b430      	push	{r4, r5}
 80112b0:	d103      	bne.n	80112ba <_ZNSs7_M_copyEPcPKcj+0xe>
 80112b2:	780b      	ldrb	r3, [r1, #0]
 80112b4:	7003      	strb	r3, [r0, #0]
 80112b6:	bc30      	pop	{r4, r5}
 80112b8:	4770      	bx	lr
 80112ba:	2a00      	cmp	r2, #0
 80112bc:	d0fb      	beq.n	80112b6 <_ZNSs7_M_copyEPcPKcj+0xa>
 80112be:	bc30      	pop	{r4, r5}
 80112c0:	f000 bfef 	b.w	80122a2 <memcpy>

080112c4 <_ZNSs13_S_copy_charsEPcPKcS1_>:
 80112c4:	b508      	push	{r3, lr}
 80112c6:	1a52      	subs	r2, r2, r1
 80112c8:	f7ff fff0 	bl	80112ac <_ZNSs7_M_copyEPcPKcj>
 80112cc:	bd08      	pop	{r3, pc}
	...

080112d0 <_ZNSs4_Rep26_M_set_length_and_sharableEj>:
 80112d0:	4b04      	ldr	r3, [pc, #16]	; (80112e4 <_ZNSs4_Rep26_M_set_length_and_sharableEj+0x14>)
 80112d2:	4298      	cmp	r0, r3
 80112d4:	d004      	beq.n	80112e0 <_ZNSs4_Rep26_M_set_length_and_sharableEj+0x10>
 80112d6:	6001      	str	r1, [r0, #0]
 80112d8:	4401      	add	r1, r0
 80112da:	2300      	movs	r3, #0
 80112dc:	6083      	str	r3, [r0, #8]
 80112de:	730b      	strb	r3, [r1, #12]
 80112e0:	4770      	bx	lr
 80112e2:	bf00      	nop
 80112e4:	200003d8 	.word	0x200003d8

080112e8 <_ZNSs4_Rep9_S_createEjjRKSaIcE>:
 80112e8:	4b15      	ldr	r3, [pc, #84]	; (8011340 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x58>)
 80112ea:	4298      	cmp	r0, r3
 80112ec:	b510      	push	{r4, lr}
 80112ee:	4604      	mov	r4, r0
 80112f0:	d902      	bls.n	80112f8 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x10>
 80112f2:	4814      	ldr	r0, [pc, #80]	; (8011344 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x5c>)
 80112f4:	f000 f83e 	bl	8011374 <_ZSt20__throw_length_errorPKc>
 80112f8:	4288      	cmp	r0, r1
 80112fa:	d903      	bls.n	8011304 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x1c>
 80112fc:	004b      	lsls	r3, r1, #1
 80112fe:	4298      	cmp	r0, r3
 8011300:	bf38      	it	cc
 8011302:	461c      	movcc	r4, r3
 8011304:	f104 031d 	add.w	r3, r4, #29
 8011308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801130c:	f104 000d 	add.w	r0, r4, #13
 8011310:	d90c      	bls.n	801132c <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 8011312:	428c      	cmp	r4, r1
 8011314:	d90a      	bls.n	801132c <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 8011316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801131a:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 801131e:	1ae4      	subs	r4, r4, r3
 8011320:	4b07      	ldr	r3, [pc, #28]	; (8011340 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x58>)
 8011322:	429c      	cmp	r4, r3
 8011324:	bf28      	it	cs
 8011326:	461c      	movcs	r4, r3
 8011328:	f104 000d 	add.w	r0, r4, #13
 801132c:	2800      	cmp	r0, #0
 801132e:	da01      	bge.n	8011334 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x4c>
 8011330:	f000 f81a 	bl	8011368 <_ZSt17__throw_bad_allocv>
 8011334:	f7ff fea9 	bl	801108a <_Znwj>
 8011338:	2200      	movs	r2, #0
 801133a:	6044      	str	r4, [r0, #4]
 801133c:	6082      	str	r2, [r0, #8]
 801133e:	bd10      	pop	{r4, pc}
 8011340:	3ffffffc 	.word	0x3ffffffc
 8011344:	0801546e 	.word	0x0801546e

08011348 <_ZNSs4_Rep10_M_destroyERKSaIcE>:
 8011348:	f000 b817 	b.w	801137a <_ZdlPv>

0801134c <_ZNSs4_Rep10_M_disposeERKSaIcE>:
 801134c:	4a05      	ldr	r2, [pc, #20]	; (8011364 <_ZNSs4_Rep10_M_disposeERKSaIcE+0x18>)
 801134e:	4290      	cmp	r0, r2
 8011350:	b510      	push	{r4, lr}
 8011352:	d006      	beq.n	8011362 <_ZNSs4_Rep10_M_disposeERKSaIcE+0x16>
 8011354:	6882      	ldr	r2, [r0, #8]
 8011356:	1e54      	subs	r4, r2, #1
 8011358:	2a00      	cmp	r2, #0
 801135a:	6084      	str	r4, [r0, #8]
 801135c:	dc01      	bgt.n	8011362 <_ZNSs4_Rep10_M_disposeERKSaIcE+0x16>
 801135e:	f7ff fff3 	bl	8011348 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 8011362:	bd10      	pop	{r4, pc}
 8011364:	200003d8 	.word	0x200003d8

08011368 <_ZSt17__throw_bad_allocv>:
 8011368:	b508      	push	{r3, lr}
 801136a:	f000 f897 	bl	801149c <abort>

0801136e <_ZSt19__throw_logic_errorPKc>:
 801136e:	b508      	push	{r3, lr}
 8011370:	f000 f894 	bl	801149c <abort>

08011374 <_ZSt20__throw_length_errorPKc>:
 8011374:	b508      	push	{r3, lr}
 8011376:	f000 f891 	bl	801149c <abort>

0801137a <_ZdlPv>:
 801137a:	f000 b89f 	b.w	80114bc <free>

0801137e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 801137e:	7803      	ldrb	r3, [r0, #0]
 8011380:	2b47      	cmp	r3, #71	; 0x47
 8011382:	d117      	bne.n	80113b4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011384:	7843      	ldrb	r3, [r0, #1]
 8011386:	2b4e      	cmp	r3, #78	; 0x4e
 8011388:	d114      	bne.n	80113b4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801138a:	7883      	ldrb	r3, [r0, #2]
 801138c:	2b55      	cmp	r3, #85	; 0x55
 801138e:	d111      	bne.n	80113b4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011390:	78c3      	ldrb	r3, [r0, #3]
 8011392:	2b43      	cmp	r3, #67	; 0x43
 8011394:	d10e      	bne.n	80113b4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011396:	7903      	ldrb	r3, [r0, #4]
 8011398:	2b43      	cmp	r3, #67	; 0x43
 801139a:	d10b      	bne.n	80113b4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801139c:	7943      	ldrb	r3, [r0, #5]
 801139e:	2b2b      	cmp	r3, #43	; 0x2b
 80113a0:	d108      	bne.n	80113b4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80113a2:	7983      	ldrb	r3, [r0, #6]
 80113a4:	2b2b      	cmp	r3, #43	; 0x2b
 80113a6:	d105      	bne.n	80113b4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80113a8:	79c0      	ldrb	r0, [r0, #7]
 80113aa:	2801      	cmp	r0, #1
 80113ac:	bf8c      	ite	hi
 80113ae:	2000      	movhi	r0, #0
 80113b0:	2001      	movls	r0, #1
 80113b2:	4770      	bx	lr
 80113b4:	2000      	movs	r0, #0
 80113b6:	4770      	bx	lr

080113b8 <__cxa_call_terminate>:
 80113b8:	b510      	push	{r4, lr}
 80113ba:	4604      	mov	r4, r0
 80113bc:	b148      	cbz	r0, 80113d2 <__cxa_call_terminate+0x1a>
 80113be:	f000 f83b 	bl	8011438 <__cxa_begin_catch>
 80113c2:	4620      	mov	r0, r4
 80113c4:	f7ff ffdb 	bl	801137e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80113c8:	b118      	cbz	r0, 80113d2 <__cxa_call_terminate+0x1a>
 80113ca:	f854 0c14 	ldr.w	r0, [r4, #-20]
 80113ce:	f7ff fdcd 	bl	8010f6c <_ZN10__cxxabiv111__terminateEPFvvE>
 80113d2:	f7ff fdd7 	bl	8010f84 <_ZSt9terminatev>

080113d6 <__cxa_call_unexpected>:
 80113d6:	b538      	push	{r3, r4, r5, lr}
 80113d8:	4602      	mov	r2, r0
 80113da:	f7ff ffd0 	bl	801137e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80113de:	4604      	mov	r4, r0
 80113e0:	b140      	cbz	r0, 80113f4 <__cxa_call_unexpected+0x1e>
 80113e2:	f852 4c18 	ldr.w	r4, [r2, #-24]
 80113e6:	2500      	movs	r5, #0
 80113e8:	4610      	mov	r0, r2
 80113ea:	f000 f825 	bl	8011438 <__cxa_begin_catch>
 80113ee:	b11d      	cbz	r5, 80113f8 <__cxa_call_unexpected+0x22>
 80113f0:	f7ff fdda 	bl	8010fa8 <_ZSt10unexpectedv>
 80113f4:	2501      	movs	r5, #1
 80113f6:	e7f7      	b.n	80113e8 <__cxa_call_unexpected+0x12>
 80113f8:	4620      	mov	r0, r4
 80113fa:	f7ff fdc8 	bl	8010f8e <_ZN10__cxxabiv112__unexpectedEPFvvE>

080113fe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80113fe:	7803      	ldrb	r3, [r0, #0]
 8011400:	2b47      	cmp	r3, #71	; 0x47
 8011402:	d117      	bne.n	8011434 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011404:	7843      	ldrb	r3, [r0, #1]
 8011406:	2b4e      	cmp	r3, #78	; 0x4e
 8011408:	d114      	bne.n	8011434 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801140a:	7883      	ldrb	r3, [r0, #2]
 801140c:	2b55      	cmp	r3, #85	; 0x55
 801140e:	d111      	bne.n	8011434 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011410:	78c3      	ldrb	r3, [r0, #3]
 8011412:	2b43      	cmp	r3, #67	; 0x43
 8011414:	d10e      	bne.n	8011434 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011416:	7903      	ldrb	r3, [r0, #4]
 8011418:	2b43      	cmp	r3, #67	; 0x43
 801141a:	d10b      	bne.n	8011434 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801141c:	7943      	ldrb	r3, [r0, #5]
 801141e:	2b2b      	cmp	r3, #43	; 0x2b
 8011420:	d108      	bne.n	8011434 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011422:	7983      	ldrb	r3, [r0, #6]
 8011424:	2b2b      	cmp	r3, #43	; 0x2b
 8011426:	d105      	bne.n	8011434 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8011428:	79c0      	ldrb	r0, [r0, #7]
 801142a:	2801      	cmp	r0, #1
 801142c:	bf8c      	ite	hi
 801142e:	2000      	movhi	r0, #0
 8011430:	2001      	movls	r0, #1
 8011432:	4770      	bx	lr
 8011434:	2000      	movs	r0, #0
 8011436:	4770      	bx	lr

08011438 <__cxa_begin_catch>:
 8011438:	b538      	push	{r3, r4, r5, lr}
 801143a:	4604      	mov	r4, r0
 801143c:	f7ff fb18 	bl	8010a70 <__cxa_get_globals>
 8011440:	6805      	ldr	r5, [r0, #0]
 8011442:	4602      	mov	r2, r0
 8011444:	4620      	mov	r0, r4
 8011446:	f1a4 0120 	sub.w	r1, r4, #32
 801144a:	f7ff ffd8 	bl	80113fe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 801144e:	b928      	cbnz	r0, 801145c <__cxa_begin_catch+0x24>
 8011450:	b10d      	cbz	r5, 8011456 <__cxa_begin_catch+0x1e>
 8011452:	f7ff fd97 	bl	8010f84 <_ZSt9terminatev>
 8011456:	6011      	str	r1, [r2, #0]
 8011458:	4628      	mov	r0, r5
 801145a:	bd38      	pop	{r3, r4, r5, pc}
 801145c:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8011460:	2b00      	cmp	r3, #0
 8011462:	bfb4      	ite	lt
 8011464:	f1c3 0301 	rsblt	r3, r3, #1
 8011468:	3301      	addge	r3, #1
 801146a:	f844 3c0c 	str.w	r3, [r4, #-12]
 801146e:	6853      	ldr	r3, [r2, #4]
 8011470:	428d      	cmp	r5, r1
 8011472:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8011476:	6053      	str	r3, [r2, #4]
 8011478:	4620      	mov	r0, r4
 801147a:	bf1c      	itt	ne
 801147c:	f844 5c10 	strne.w	r5, [r4, #-16]
 8011480:	6011      	strne	r1, [r2, #0]
 8011482:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8011484:	f7ef ff46 	bl	8001314 <_Unwind_Complete>
 8011488:	e7e6      	b.n	8011458 <__cxa_begin_catch+0x20>
	...

0801148c <_ZSt15get_new_handlerv>:
 801148c:	4b02      	ldr	r3, [pc, #8]	; (8011498 <_ZSt15get_new_handlerv+0xc>)
 801148e:	6818      	ldr	r0, [r3, #0]
 8011490:	f3bf 8f5b 	dmb	ish
 8011494:	4770      	bx	lr
 8011496:	bf00      	nop
 8011498:	200003e8 	.word	0x200003e8

0801149c <abort>:
 801149c:	b508      	push	{r3, lr}
 801149e:	2006      	movs	r0, #6
 80114a0:	f000 fe5c 	bl	801215c <raise>
 80114a4:	2001      	movs	r0, #1
 80114a6:	f7fb fc37 	bl	800cd18 <_exit>
	...

080114ac <malloc>:
 80114ac:	4b02      	ldr	r3, [pc, #8]	; (80114b8 <malloc+0xc>)
 80114ae:	4601      	mov	r1, r0
 80114b0:	6818      	ldr	r0, [r3, #0]
 80114b2:	f000 b82b 	b.w	801150c <_malloc_r>
 80114b6:	bf00      	nop
 80114b8:	2000006c 	.word	0x2000006c

080114bc <free>:
 80114bc:	4b02      	ldr	r3, [pc, #8]	; (80114c8 <free+0xc>)
 80114be:	4601      	mov	r1, r0
 80114c0:	6818      	ldr	r0, [r3, #0]
 80114c2:	f001 bd77 	b.w	8012fb4 <_free_r>
 80114c6:	bf00      	nop
 80114c8:	2000006c 	.word	0x2000006c

080114cc <sbrk_aligned>:
 80114cc:	b570      	push	{r4, r5, r6, lr}
 80114ce:	4e0e      	ldr	r6, [pc, #56]	; (8011508 <sbrk_aligned+0x3c>)
 80114d0:	460c      	mov	r4, r1
 80114d2:	6831      	ldr	r1, [r6, #0]
 80114d4:	4605      	mov	r5, r0
 80114d6:	b911      	cbnz	r1, 80114de <sbrk_aligned+0x12>
 80114d8:	f000 fe94 	bl	8012204 <_sbrk_r>
 80114dc:	6030      	str	r0, [r6, #0]
 80114de:	4621      	mov	r1, r4
 80114e0:	4628      	mov	r0, r5
 80114e2:	f000 fe8f 	bl	8012204 <_sbrk_r>
 80114e6:	1c43      	adds	r3, r0, #1
 80114e8:	d00a      	beq.n	8011500 <sbrk_aligned+0x34>
 80114ea:	1cc4      	adds	r4, r0, #3
 80114ec:	f024 0403 	bic.w	r4, r4, #3
 80114f0:	42a0      	cmp	r0, r4
 80114f2:	d007      	beq.n	8011504 <sbrk_aligned+0x38>
 80114f4:	1a21      	subs	r1, r4, r0
 80114f6:	4628      	mov	r0, r5
 80114f8:	f000 fe84 	bl	8012204 <_sbrk_r>
 80114fc:	3001      	adds	r0, #1
 80114fe:	d101      	bne.n	8011504 <sbrk_aligned+0x38>
 8011500:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011504:	4620      	mov	r0, r4
 8011506:	bd70      	pop	{r4, r5, r6, pc}
 8011508:	200003f0 	.word	0x200003f0

0801150c <_malloc_r>:
 801150c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011510:	1ccd      	adds	r5, r1, #3
 8011512:	f025 0503 	bic.w	r5, r5, #3
 8011516:	3508      	adds	r5, #8
 8011518:	2d0c      	cmp	r5, #12
 801151a:	bf38      	it	cc
 801151c:	250c      	movcc	r5, #12
 801151e:	2d00      	cmp	r5, #0
 8011520:	4607      	mov	r7, r0
 8011522:	db01      	blt.n	8011528 <_malloc_r+0x1c>
 8011524:	42a9      	cmp	r1, r5
 8011526:	d905      	bls.n	8011534 <_malloc_r+0x28>
 8011528:	230c      	movs	r3, #12
 801152a:	603b      	str	r3, [r7, #0]
 801152c:	2600      	movs	r6, #0
 801152e:	4630      	mov	r0, r6
 8011530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011534:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011608 <_malloc_r+0xfc>
 8011538:	f000 f868 	bl	801160c <__malloc_lock>
 801153c:	f8d8 3000 	ldr.w	r3, [r8]
 8011540:	461c      	mov	r4, r3
 8011542:	bb5c      	cbnz	r4, 801159c <_malloc_r+0x90>
 8011544:	4629      	mov	r1, r5
 8011546:	4638      	mov	r0, r7
 8011548:	f7ff ffc0 	bl	80114cc <sbrk_aligned>
 801154c:	1c43      	adds	r3, r0, #1
 801154e:	4604      	mov	r4, r0
 8011550:	d155      	bne.n	80115fe <_malloc_r+0xf2>
 8011552:	f8d8 4000 	ldr.w	r4, [r8]
 8011556:	4626      	mov	r6, r4
 8011558:	2e00      	cmp	r6, #0
 801155a:	d145      	bne.n	80115e8 <_malloc_r+0xdc>
 801155c:	2c00      	cmp	r4, #0
 801155e:	d048      	beq.n	80115f2 <_malloc_r+0xe6>
 8011560:	6823      	ldr	r3, [r4, #0]
 8011562:	4631      	mov	r1, r6
 8011564:	4638      	mov	r0, r7
 8011566:	eb04 0903 	add.w	r9, r4, r3
 801156a:	f000 fe4b 	bl	8012204 <_sbrk_r>
 801156e:	4581      	cmp	r9, r0
 8011570:	d13f      	bne.n	80115f2 <_malloc_r+0xe6>
 8011572:	6821      	ldr	r1, [r4, #0]
 8011574:	1a6d      	subs	r5, r5, r1
 8011576:	4629      	mov	r1, r5
 8011578:	4638      	mov	r0, r7
 801157a:	f7ff ffa7 	bl	80114cc <sbrk_aligned>
 801157e:	3001      	adds	r0, #1
 8011580:	d037      	beq.n	80115f2 <_malloc_r+0xe6>
 8011582:	6823      	ldr	r3, [r4, #0]
 8011584:	442b      	add	r3, r5
 8011586:	6023      	str	r3, [r4, #0]
 8011588:	f8d8 3000 	ldr.w	r3, [r8]
 801158c:	2b00      	cmp	r3, #0
 801158e:	d038      	beq.n	8011602 <_malloc_r+0xf6>
 8011590:	685a      	ldr	r2, [r3, #4]
 8011592:	42a2      	cmp	r2, r4
 8011594:	d12b      	bne.n	80115ee <_malloc_r+0xe2>
 8011596:	2200      	movs	r2, #0
 8011598:	605a      	str	r2, [r3, #4]
 801159a:	e00f      	b.n	80115bc <_malloc_r+0xb0>
 801159c:	6822      	ldr	r2, [r4, #0]
 801159e:	1b52      	subs	r2, r2, r5
 80115a0:	d41f      	bmi.n	80115e2 <_malloc_r+0xd6>
 80115a2:	2a0b      	cmp	r2, #11
 80115a4:	d917      	bls.n	80115d6 <_malloc_r+0xca>
 80115a6:	1961      	adds	r1, r4, r5
 80115a8:	42a3      	cmp	r3, r4
 80115aa:	6025      	str	r5, [r4, #0]
 80115ac:	bf18      	it	ne
 80115ae:	6059      	strne	r1, [r3, #4]
 80115b0:	6863      	ldr	r3, [r4, #4]
 80115b2:	bf08      	it	eq
 80115b4:	f8c8 1000 	streq.w	r1, [r8]
 80115b8:	5162      	str	r2, [r4, r5]
 80115ba:	604b      	str	r3, [r1, #4]
 80115bc:	4638      	mov	r0, r7
 80115be:	f104 060b 	add.w	r6, r4, #11
 80115c2:	f000 f829 	bl	8011618 <__malloc_unlock>
 80115c6:	f026 0607 	bic.w	r6, r6, #7
 80115ca:	1d23      	adds	r3, r4, #4
 80115cc:	1af2      	subs	r2, r6, r3
 80115ce:	d0ae      	beq.n	801152e <_malloc_r+0x22>
 80115d0:	1b9b      	subs	r3, r3, r6
 80115d2:	50a3      	str	r3, [r4, r2]
 80115d4:	e7ab      	b.n	801152e <_malloc_r+0x22>
 80115d6:	42a3      	cmp	r3, r4
 80115d8:	6862      	ldr	r2, [r4, #4]
 80115da:	d1dd      	bne.n	8011598 <_malloc_r+0x8c>
 80115dc:	f8c8 2000 	str.w	r2, [r8]
 80115e0:	e7ec      	b.n	80115bc <_malloc_r+0xb0>
 80115e2:	4623      	mov	r3, r4
 80115e4:	6864      	ldr	r4, [r4, #4]
 80115e6:	e7ac      	b.n	8011542 <_malloc_r+0x36>
 80115e8:	4634      	mov	r4, r6
 80115ea:	6876      	ldr	r6, [r6, #4]
 80115ec:	e7b4      	b.n	8011558 <_malloc_r+0x4c>
 80115ee:	4613      	mov	r3, r2
 80115f0:	e7cc      	b.n	801158c <_malloc_r+0x80>
 80115f2:	230c      	movs	r3, #12
 80115f4:	603b      	str	r3, [r7, #0]
 80115f6:	4638      	mov	r0, r7
 80115f8:	f000 f80e 	bl	8011618 <__malloc_unlock>
 80115fc:	e797      	b.n	801152e <_malloc_r+0x22>
 80115fe:	6025      	str	r5, [r4, #0]
 8011600:	e7dc      	b.n	80115bc <_malloc_r+0xb0>
 8011602:	605b      	str	r3, [r3, #4]
 8011604:	deff      	udf	#255	; 0xff
 8011606:	bf00      	nop
 8011608:	200003ec 	.word	0x200003ec

0801160c <__malloc_lock>:
 801160c:	4801      	ldr	r0, [pc, #4]	; (8011614 <__malloc_lock+0x8>)
 801160e:	f000 be46 	b.w	801229e <__retarget_lock_acquire_recursive>
 8011612:	bf00      	nop
 8011614:	20000534 	.word	0x20000534

08011618 <__malloc_unlock>:
 8011618:	4801      	ldr	r0, [pc, #4]	; (8011620 <__malloc_unlock+0x8>)
 801161a:	f000 be41 	b.w	80122a0 <__retarget_lock_release_recursive>
 801161e:	bf00      	nop
 8011620:	20000534 	.word	0x20000534

08011624 <__cvt>:
 8011624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011628:	ec55 4b10 	vmov	r4, r5, d0
 801162c:	2d00      	cmp	r5, #0
 801162e:	460e      	mov	r6, r1
 8011630:	4619      	mov	r1, r3
 8011632:	462b      	mov	r3, r5
 8011634:	bfbb      	ittet	lt
 8011636:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801163a:	461d      	movlt	r5, r3
 801163c:	2300      	movge	r3, #0
 801163e:	232d      	movlt	r3, #45	; 0x2d
 8011640:	700b      	strb	r3, [r1, #0]
 8011642:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011644:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011648:	4691      	mov	r9, r2
 801164a:	f023 0820 	bic.w	r8, r3, #32
 801164e:	bfbc      	itt	lt
 8011650:	4622      	movlt	r2, r4
 8011652:	4614      	movlt	r4, r2
 8011654:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011658:	d005      	beq.n	8011666 <__cvt+0x42>
 801165a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801165e:	d100      	bne.n	8011662 <__cvt+0x3e>
 8011660:	3601      	adds	r6, #1
 8011662:	2102      	movs	r1, #2
 8011664:	e000      	b.n	8011668 <__cvt+0x44>
 8011666:	2103      	movs	r1, #3
 8011668:	ab03      	add	r3, sp, #12
 801166a:	9301      	str	r3, [sp, #4]
 801166c:	ab02      	add	r3, sp, #8
 801166e:	9300      	str	r3, [sp, #0]
 8011670:	ec45 4b10 	vmov	d0, r4, r5
 8011674:	4653      	mov	r3, sl
 8011676:	4632      	mov	r2, r6
 8011678:	f000 feaa 	bl	80123d0 <_dtoa_r>
 801167c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011680:	4607      	mov	r7, r0
 8011682:	d102      	bne.n	801168a <__cvt+0x66>
 8011684:	f019 0f01 	tst.w	r9, #1
 8011688:	d022      	beq.n	80116d0 <__cvt+0xac>
 801168a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801168e:	eb07 0906 	add.w	r9, r7, r6
 8011692:	d110      	bne.n	80116b6 <__cvt+0x92>
 8011694:	783b      	ldrb	r3, [r7, #0]
 8011696:	2b30      	cmp	r3, #48	; 0x30
 8011698:	d10a      	bne.n	80116b0 <__cvt+0x8c>
 801169a:	2200      	movs	r2, #0
 801169c:	2300      	movs	r3, #0
 801169e:	4620      	mov	r0, r4
 80116a0:	4629      	mov	r1, r5
 80116a2:	f7ef fa41 	bl	8000b28 <__aeabi_dcmpeq>
 80116a6:	b918      	cbnz	r0, 80116b0 <__cvt+0x8c>
 80116a8:	f1c6 0601 	rsb	r6, r6, #1
 80116ac:	f8ca 6000 	str.w	r6, [sl]
 80116b0:	f8da 3000 	ldr.w	r3, [sl]
 80116b4:	4499      	add	r9, r3
 80116b6:	2200      	movs	r2, #0
 80116b8:	2300      	movs	r3, #0
 80116ba:	4620      	mov	r0, r4
 80116bc:	4629      	mov	r1, r5
 80116be:	f7ef fa33 	bl	8000b28 <__aeabi_dcmpeq>
 80116c2:	b108      	cbz	r0, 80116c8 <__cvt+0xa4>
 80116c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80116c8:	2230      	movs	r2, #48	; 0x30
 80116ca:	9b03      	ldr	r3, [sp, #12]
 80116cc:	454b      	cmp	r3, r9
 80116ce:	d307      	bcc.n	80116e0 <__cvt+0xbc>
 80116d0:	9b03      	ldr	r3, [sp, #12]
 80116d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80116d4:	1bdb      	subs	r3, r3, r7
 80116d6:	4638      	mov	r0, r7
 80116d8:	6013      	str	r3, [r2, #0]
 80116da:	b004      	add	sp, #16
 80116dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116e0:	1c59      	adds	r1, r3, #1
 80116e2:	9103      	str	r1, [sp, #12]
 80116e4:	701a      	strb	r2, [r3, #0]
 80116e6:	e7f0      	b.n	80116ca <__cvt+0xa6>

080116e8 <__exponent>:
 80116e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80116ea:	4603      	mov	r3, r0
 80116ec:	2900      	cmp	r1, #0
 80116ee:	bfb8      	it	lt
 80116f0:	4249      	neglt	r1, r1
 80116f2:	f803 2b02 	strb.w	r2, [r3], #2
 80116f6:	bfb4      	ite	lt
 80116f8:	222d      	movlt	r2, #45	; 0x2d
 80116fa:	222b      	movge	r2, #43	; 0x2b
 80116fc:	2909      	cmp	r1, #9
 80116fe:	7042      	strb	r2, [r0, #1]
 8011700:	dd2a      	ble.n	8011758 <__exponent+0x70>
 8011702:	f10d 0207 	add.w	r2, sp, #7
 8011706:	4617      	mov	r7, r2
 8011708:	260a      	movs	r6, #10
 801170a:	4694      	mov	ip, r2
 801170c:	fb91 f5f6 	sdiv	r5, r1, r6
 8011710:	fb06 1415 	mls	r4, r6, r5, r1
 8011714:	3430      	adds	r4, #48	; 0x30
 8011716:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801171a:	460c      	mov	r4, r1
 801171c:	2c63      	cmp	r4, #99	; 0x63
 801171e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8011722:	4629      	mov	r1, r5
 8011724:	dcf1      	bgt.n	801170a <__exponent+0x22>
 8011726:	3130      	adds	r1, #48	; 0x30
 8011728:	f1ac 0402 	sub.w	r4, ip, #2
 801172c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011730:	1c41      	adds	r1, r0, #1
 8011732:	4622      	mov	r2, r4
 8011734:	42ba      	cmp	r2, r7
 8011736:	d30a      	bcc.n	801174e <__exponent+0x66>
 8011738:	f10d 0209 	add.w	r2, sp, #9
 801173c:	eba2 020c 	sub.w	r2, r2, ip
 8011740:	42bc      	cmp	r4, r7
 8011742:	bf88      	it	hi
 8011744:	2200      	movhi	r2, #0
 8011746:	4413      	add	r3, r2
 8011748:	1a18      	subs	r0, r3, r0
 801174a:	b003      	add	sp, #12
 801174c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801174e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011752:	f801 5f01 	strb.w	r5, [r1, #1]!
 8011756:	e7ed      	b.n	8011734 <__exponent+0x4c>
 8011758:	2330      	movs	r3, #48	; 0x30
 801175a:	3130      	adds	r1, #48	; 0x30
 801175c:	7083      	strb	r3, [r0, #2]
 801175e:	70c1      	strb	r1, [r0, #3]
 8011760:	1d03      	adds	r3, r0, #4
 8011762:	e7f1      	b.n	8011748 <__exponent+0x60>

08011764 <_printf_float>:
 8011764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011768:	ed2d 8b02 	vpush	{d8}
 801176c:	b08d      	sub	sp, #52	; 0x34
 801176e:	460c      	mov	r4, r1
 8011770:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011774:	4616      	mov	r6, r2
 8011776:	461f      	mov	r7, r3
 8011778:	4605      	mov	r5, r0
 801177a:	f000 fcf7 	bl	801216c <_localeconv_r>
 801177e:	f8d0 a000 	ldr.w	sl, [r0]
 8011782:	4650      	mov	r0, sl
 8011784:	f7ee fda4 	bl	80002d0 <strlen>
 8011788:	2300      	movs	r3, #0
 801178a:	930a      	str	r3, [sp, #40]	; 0x28
 801178c:	6823      	ldr	r3, [r4, #0]
 801178e:	9305      	str	r3, [sp, #20]
 8011790:	f8d8 3000 	ldr.w	r3, [r8]
 8011794:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011798:	3307      	adds	r3, #7
 801179a:	f023 0307 	bic.w	r3, r3, #7
 801179e:	f103 0208 	add.w	r2, r3, #8
 80117a2:	f8c8 2000 	str.w	r2, [r8]
 80117a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80117aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80117ae:	9307      	str	r3, [sp, #28]
 80117b0:	f8cd 8018 	str.w	r8, [sp, #24]
 80117b4:	ee08 0a10 	vmov	s16, r0
 80117b8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80117bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80117c0:	4b9e      	ldr	r3, [pc, #632]	; (8011a3c <_printf_float+0x2d8>)
 80117c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80117c6:	f7ef f9e1 	bl	8000b8c <__aeabi_dcmpun>
 80117ca:	bb88      	cbnz	r0, 8011830 <_printf_float+0xcc>
 80117cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80117d0:	4b9a      	ldr	r3, [pc, #616]	; (8011a3c <_printf_float+0x2d8>)
 80117d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80117d6:	f7ef f9bb 	bl	8000b50 <__aeabi_dcmple>
 80117da:	bb48      	cbnz	r0, 8011830 <_printf_float+0xcc>
 80117dc:	2200      	movs	r2, #0
 80117de:	2300      	movs	r3, #0
 80117e0:	4640      	mov	r0, r8
 80117e2:	4649      	mov	r1, r9
 80117e4:	f7ef f9aa 	bl	8000b3c <__aeabi_dcmplt>
 80117e8:	b110      	cbz	r0, 80117f0 <_printf_float+0x8c>
 80117ea:	232d      	movs	r3, #45	; 0x2d
 80117ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80117f0:	4a93      	ldr	r2, [pc, #588]	; (8011a40 <_printf_float+0x2dc>)
 80117f2:	4b94      	ldr	r3, [pc, #592]	; (8011a44 <_printf_float+0x2e0>)
 80117f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80117f8:	bf94      	ite	ls
 80117fa:	4690      	movls	r8, r2
 80117fc:	4698      	movhi	r8, r3
 80117fe:	2303      	movs	r3, #3
 8011800:	6123      	str	r3, [r4, #16]
 8011802:	9b05      	ldr	r3, [sp, #20]
 8011804:	f023 0304 	bic.w	r3, r3, #4
 8011808:	6023      	str	r3, [r4, #0]
 801180a:	f04f 0900 	mov.w	r9, #0
 801180e:	9700      	str	r7, [sp, #0]
 8011810:	4633      	mov	r3, r6
 8011812:	aa0b      	add	r2, sp, #44	; 0x2c
 8011814:	4621      	mov	r1, r4
 8011816:	4628      	mov	r0, r5
 8011818:	f000 f9da 	bl	8011bd0 <_printf_common>
 801181c:	3001      	adds	r0, #1
 801181e:	f040 8090 	bne.w	8011942 <_printf_float+0x1de>
 8011822:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011826:	b00d      	add	sp, #52	; 0x34
 8011828:	ecbd 8b02 	vpop	{d8}
 801182c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011830:	4642      	mov	r2, r8
 8011832:	464b      	mov	r3, r9
 8011834:	4640      	mov	r0, r8
 8011836:	4649      	mov	r1, r9
 8011838:	f7ef f9a8 	bl	8000b8c <__aeabi_dcmpun>
 801183c:	b140      	cbz	r0, 8011850 <_printf_float+0xec>
 801183e:	464b      	mov	r3, r9
 8011840:	2b00      	cmp	r3, #0
 8011842:	bfbc      	itt	lt
 8011844:	232d      	movlt	r3, #45	; 0x2d
 8011846:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801184a:	4a7f      	ldr	r2, [pc, #508]	; (8011a48 <_printf_float+0x2e4>)
 801184c:	4b7f      	ldr	r3, [pc, #508]	; (8011a4c <_printf_float+0x2e8>)
 801184e:	e7d1      	b.n	80117f4 <_printf_float+0x90>
 8011850:	6863      	ldr	r3, [r4, #4]
 8011852:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011856:	9206      	str	r2, [sp, #24]
 8011858:	1c5a      	adds	r2, r3, #1
 801185a:	d13f      	bne.n	80118dc <_printf_float+0x178>
 801185c:	2306      	movs	r3, #6
 801185e:	6063      	str	r3, [r4, #4]
 8011860:	9b05      	ldr	r3, [sp, #20]
 8011862:	6861      	ldr	r1, [r4, #4]
 8011864:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011868:	2300      	movs	r3, #0
 801186a:	9303      	str	r3, [sp, #12]
 801186c:	ab0a      	add	r3, sp, #40	; 0x28
 801186e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011872:	ab09      	add	r3, sp, #36	; 0x24
 8011874:	ec49 8b10 	vmov	d0, r8, r9
 8011878:	9300      	str	r3, [sp, #0]
 801187a:	6022      	str	r2, [r4, #0]
 801187c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011880:	4628      	mov	r0, r5
 8011882:	f7ff fecf 	bl	8011624 <__cvt>
 8011886:	9b06      	ldr	r3, [sp, #24]
 8011888:	9909      	ldr	r1, [sp, #36]	; 0x24
 801188a:	2b47      	cmp	r3, #71	; 0x47
 801188c:	4680      	mov	r8, r0
 801188e:	d108      	bne.n	80118a2 <_printf_float+0x13e>
 8011890:	1cc8      	adds	r0, r1, #3
 8011892:	db02      	blt.n	801189a <_printf_float+0x136>
 8011894:	6863      	ldr	r3, [r4, #4]
 8011896:	4299      	cmp	r1, r3
 8011898:	dd41      	ble.n	801191e <_printf_float+0x1ba>
 801189a:	f1ab 0302 	sub.w	r3, fp, #2
 801189e:	fa5f fb83 	uxtb.w	fp, r3
 80118a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80118a6:	d820      	bhi.n	80118ea <_printf_float+0x186>
 80118a8:	3901      	subs	r1, #1
 80118aa:	465a      	mov	r2, fp
 80118ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80118b0:	9109      	str	r1, [sp, #36]	; 0x24
 80118b2:	f7ff ff19 	bl	80116e8 <__exponent>
 80118b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80118b8:	1813      	adds	r3, r2, r0
 80118ba:	2a01      	cmp	r2, #1
 80118bc:	4681      	mov	r9, r0
 80118be:	6123      	str	r3, [r4, #16]
 80118c0:	dc02      	bgt.n	80118c8 <_printf_float+0x164>
 80118c2:	6822      	ldr	r2, [r4, #0]
 80118c4:	07d2      	lsls	r2, r2, #31
 80118c6:	d501      	bpl.n	80118cc <_printf_float+0x168>
 80118c8:	3301      	adds	r3, #1
 80118ca:	6123      	str	r3, [r4, #16]
 80118cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d09c      	beq.n	801180e <_printf_float+0xaa>
 80118d4:	232d      	movs	r3, #45	; 0x2d
 80118d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80118da:	e798      	b.n	801180e <_printf_float+0xaa>
 80118dc:	9a06      	ldr	r2, [sp, #24]
 80118de:	2a47      	cmp	r2, #71	; 0x47
 80118e0:	d1be      	bne.n	8011860 <_printf_float+0xfc>
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d1bc      	bne.n	8011860 <_printf_float+0xfc>
 80118e6:	2301      	movs	r3, #1
 80118e8:	e7b9      	b.n	801185e <_printf_float+0xfa>
 80118ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80118ee:	d118      	bne.n	8011922 <_printf_float+0x1be>
 80118f0:	2900      	cmp	r1, #0
 80118f2:	6863      	ldr	r3, [r4, #4]
 80118f4:	dd0b      	ble.n	801190e <_printf_float+0x1aa>
 80118f6:	6121      	str	r1, [r4, #16]
 80118f8:	b913      	cbnz	r3, 8011900 <_printf_float+0x19c>
 80118fa:	6822      	ldr	r2, [r4, #0]
 80118fc:	07d0      	lsls	r0, r2, #31
 80118fe:	d502      	bpl.n	8011906 <_printf_float+0x1a2>
 8011900:	3301      	adds	r3, #1
 8011902:	440b      	add	r3, r1
 8011904:	6123      	str	r3, [r4, #16]
 8011906:	65a1      	str	r1, [r4, #88]	; 0x58
 8011908:	f04f 0900 	mov.w	r9, #0
 801190c:	e7de      	b.n	80118cc <_printf_float+0x168>
 801190e:	b913      	cbnz	r3, 8011916 <_printf_float+0x1b2>
 8011910:	6822      	ldr	r2, [r4, #0]
 8011912:	07d2      	lsls	r2, r2, #31
 8011914:	d501      	bpl.n	801191a <_printf_float+0x1b6>
 8011916:	3302      	adds	r3, #2
 8011918:	e7f4      	b.n	8011904 <_printf_float+0x1a0>
 801191a:	2301      	movs	r3, #1
 801191c:	e7f2      	b.n	8011904 <_printf_float+0x1a0>
 801191e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011924:	4299      	cmp	r1, r3
 8011926:	db05      	blt.n	8011934 <_printf_float+0x1d0>
 8011928:	6823      	ldr	r3, [r4, #0]
 801192a:	6121      	str	r1, [r4, #16]
 801192c:	07d8      	lsls	r0, r3, #31
 801192e:	d5ea      	bpl.n	8011906 <_printf_float+0x1a2>
 8011930:	1c4b      	adds	r3, r1, #1
 8011932:	e7e7      	b.n	8011904 <_printf_float+0x1a0>
 8011934:	2900      	cmp	r1, #0
 8011936:	bfd4      	ite	le
 8011938:	f1c1 0202 	rsble	r2, r1, #2
 801193c:	2201      	movgt	r2, #1
 801193e:	4413      	add	r3, r2
 8011940:	e7e0      	b.n	8011904 <_printf_float+0x1a0>
 8011942:	6823      	ldr	r3, [r4, #0]
 8011944:	055a      	lsls	r2, r3, #21
 8011946:	d407      	bmi.n	8011958 <_printf_float+0x1f4>
 8011948:	6923      	ldr	r3, [r4, #16]
 801194a:	4642      	mov	r2, r8
 801194c:	4631      	mov	r1, r6
 801194e:	4628      	mov	r0, r5
 8011950:	47b8      	blx	r7
 8011952:	3001      	adds	r0, #1
 8011954:	d12c      	bne.n	80119b0 <_printf_float+0x24c>
 8011956:	e764      	b.n	8011822 <_printf_float+0xbe>
 8011958:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801195c:	f240 80e0 	bls.w	8011b20 <_printf_float+0x3bc>
 8011960:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011964:	2200      	movs	r2, #0
 8011966:	2300      	movs	r3, #0
 8011968:	f7ef f8de 	bl	8000b28 <__aeabi_dcmpeq>
 801196c:	2800      	cmp	r0, #0
 801196e:	d034      	beq.n	80119da <_printf_float+0x276>
 8011970:	4a37      	ldr	r2, [pc, #220]	; (8011a50 <_printf_float+0x2ec>)
 8011972:	2301      	movs	r3, #1
 8011974:	4631      	mov	r1, r6
 8011976:	4628      	mov	r0, r5
 8011978:	47b8      	blx	r7
 801197a:	3001      	adds	r0, #1
 801197c:	f43f af51 	beq.w	8011822 <_printf_float+0xbe>
 8011980:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011984:	429a      	cmp	r2, r3
 8011986:	db02      	blt.n	801198e <_printf_float+0x22a>
 8011988:	6823      	ldr	r3, [r4, #0]
 801198a:	07d8      	lsls	r0, r3, #31
 801198c:	d510      	bpl.n	80119b0 <_printf_float+0x24c>
 801198e:	ee18 3a10 	vmov	r3, s16
 8011992:	4652      	mov	r2, sl
 8011994:	4631      	mov	r1, r6
 8011996:	4628      	mov	r0, r5
 8011998:	47b8      	blx	r7
 801199a:	3001      	adds	r0, #1
 801199c:	f43f af41 	beq.w	8011822 <_printf_float+0xbe>
 80119a0:	f04f 0800 	mov.w	r8, #0
 80119a4:	f104 091a 	add.w	r9, r4, #26
 80119a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119aa:	3b01      	subs	r3, #1
 80119ac:	4543      	cmp	r3, r8
 80119ae:	dc09      	bgt.n	80119c4 <_printf_float+0x260>
 80119b0:	6823      	ldr	r3, [r4, #0]
 80119b2:	079b      	lsls	r3, r3, #30
 80119b4:	f100 8107 	bmi.w	8011bc6 <_printf_float+0x462>
 80119b8:	68e0      	ldr	r0, [r4, #12]
 80119ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80119bc:	4298      	cmp	r0, r3
 80119be:	bfb8      	it	lt
 80119c0:	4618      	movlt	r0, r3
 80119c2:	e730      	b.n	8011826 <_printf_float+0xc2>
 80119c4:	2301      	movs	r3, #1
 80119c6:	464a      	mov	r2, r9
 80119c8:	4631      	mov	r1, r6
 80119ca:	4628      	mov	r0, r5
 80119cc:	47b8      	blx	r7
 80119ce:	3001      	adds	r0, #1
 80119d0:	f43f af27 	beq.w	8011822 <_printf_float+0xbe>
 80119d4:	f108 0801 	add.w	r8, r8, #1
 80119d8:	e7e6      	b.n	80119a8 <_printf_float+0x244>
 80119da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119dc:	2b00      	cmp	r3, #0
 80119de:	dc39      	bgt.n	8011a54 <_printf_float+0x2f0>
 80119e0:	4a1b      	ldr	r2, [pc, #108]	; (8011a50 <_printf_float+0x2ec>)
 80119e2:	2301      	movs	r3, #1
 80119e4:	4631      	mov	r1, r6
 80119e6:	4628      	mov	r0, r5
 80119e8:	47b8      	blx	r7
 80119ea:	3001      	adds	r0, #1
 80119ec:	f43f af19 	beq.w	8011822 <_printf_float+0xbe>
 80119f0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80119f4:	4313      	orrs	r3, r2
 80119f6:	d102      	bne.n	80119fe <_printf_float+0x29a>
 80119f8:	6823      	ldr	r3, [r4, #0]
 80119fa:	07d9      	lsls	r1, r3, #31
 80119fc:	d5d8      	bpl.n	80119b0 <_printf_float+0x24c>
 80119fe:	ee18 3a10 	vmov	r3, s16
 8011a02:	4652      	mov	r2, sl
 8011a04:	4631      	mov	r1, r6
 8011a06:	4628      	mov	r0, r5
 8011a08:	47b8      	blx	r7
 8011a0a:	3001      	adds	r0, #1
 8011a0c:	f43f af09 	beq.w	8011822 <_printf_float+0xbe>
 8011a10:	f04f 0900 	mov.w	r9, #0
 8011a14:	f104 0a1a 	add.w	sl, r4, #26
 8011a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a1a:	425b      	negs	r3, r3
 8011a1c:	454b      	cmp	r3, r9
 8011a1e:	dc01      	bgt.n	8011a24 <_printf_float+0x2c0>
 8011a20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a22:	e792      	b.n	801194a <_printf_float+0x1e6>
 8011a24:	2301      	movs	r3, #1
 8011a26:	4652      	mov	r2, sl
 8011a28:	4631      	mov	r1, r6
 8011a2a:	4628      	mov	r0, r5
 8011a2c:	47b8      	blx	r7
 8011a2e:	3001      	adds	r0, #1
 8011a30:	f43f aef7 	beq.w	8011822 <_printf_float+0xbe>
 8011a34:	f109 0901 	add.w	r9, r9, #1
 8011a38:	e7ee      	b.n	8011a18 <_printf_float+0x2b4>
 8011a3a:	bf00      	nop
 8011a3c:	7fefffff 	.word	0x7fefffff
 8011a40:	08015587 	.word	0x08015587
 8011a44:	0801558b 	.word	0x0801558b
 8011a48:	0801558f 	.word	0x0801558f
 8011a4c:	08015593 	.word	0x08015593
 8011a50:	08015597 	.word	0x08015597
 8011a54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011a56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011a58:	429a      	cmp	r2, r3
 8011a5a:	bfa8      	it	ge
 8011a5c:	461a      	movge	r2, r3
 8011a5e:	2a00      	cmp	r2, #0
 8011a60:	4691      	mov	r9, r2
 8011a62:	dc37      	bgt.n	8011ad4 <_printf_float+0x370>
 8011a64:	f04f 0b00 	mov.w	fp, #0
 8011a68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011a6c:	f104 021a 	add.w	r2, r4, #26
 8011a70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011a72:	9305      	str	r3, [sp, #20]
 8011a74:	eba3 0309 	sub.w	r3, r3, r9
 8011a78:	455b      	cmp	r3, fp
 8011a7a:	dc33      	bgt.n	8011ae4 <_printf_float+0x380>
 8011a7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011a80:	429a      	cmp	r2, r3
 8011a82:	db3b      	blt.n	8011afc <_printf_float+0x398>
 8011a84:	6823      	ldr	r3, [r4, #0]
 8011a86:	07da      	lsls	r2, r3, #31
 8011a88:	d438      	bmi.n	8011afc <_printf_float+0x398>
 8011a8a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011a8e:	eba2 0903 	sub.w	r9, r2, r3
 8011a92:	9b05      	ldr	r3, [sp, #20]
 8011a94:	1ad2      	subs	r2, r2, r3
 8011a96:	4591      	cmp	r9, r2
 8011a98:	bfa8      	it	ge
 8011a9a:	4691      	movge	r9, r2
 8011a9c:	f1b9 0f00 	cmp.w	r9, #0
 8011aa0:	dc35      	bgt.n	8011b0e <_printf_float+0x3aa>
 8011aa2:	f04f 0800 	mov.w	r8, #0
 8011aa6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011aaa:	f104 0a1a 	add.w	sl, r4, #26
 8011aae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011ab2:	1a9b      	subs	r3, r3, r2
 8011ab4:	eba3 0309 	sub.w	r3, r3, r9
 8011ab8:	4543      	cmp	r3, r8
 8011aba:	f77f af79 	ble.w	80119b0 <_printf_float+0x24c>
 8011abe:	2301      	movs	r3, #1
 8011ac0:	4652      	mov	r2, sl
 8011ac2:	4631      	mov	r1, r6
 8011ac4:	4628      	mov	r0, r5
 8011ac6:	47b8      	blx	r7
 8011ac8:	3001      	adds	r0, #1
 8011aca:	f43f aeaa 	beq.w	8011822 <_printf_float+0xbe>
 8011ace:	f108 0801 	add.w	r8, r8, #1
 8011ad2:	e7ec      	b.n	8011aae <_printf_float+0x34a>
 8011ad4:	4613      	mov	r3, r2
 8011ad6:	4631      	mov	r1, r6
 8011ad8:	4642      	mov	r2, r8
 8011ada:	4628      	mov	r0, r5
 8011adc:	47b8      	blx	r7
 8011ade:	3001      	adds	r0, #1
 8011ae0:	d1c0      	bne.n	8011a64 <_printf_float+0x300>
 8011ae2:	e69e      	b.n	8011822 <_printf_float+0xbe>
 8011ae4:	2301      	movs	r3, #1
 8011ae6:	4631      	mov	r1, r6
 8011ae8:	4628      	mov	r0, r5
 8011aea:	9205      	str	r2, [sp, #20]
 8011aec:	47b8      	blx	r7
 8011aee:	3001      	adds	r0, #1
 8011af0:	f43f ae97 	beq.w	8011822 <_printf_float+0xbe>
 8011af4:	9a05      	ldr	r2, [sp, #20]
 8011af6:	f10b 0b01 	add.w	fp, fp, #1
 8011afa:	e7b9      	b.n	8011a70 <_printf_float+0x30c>
 8011afc:	ee18 3a10 	vmov	r3, s16
 8011b00:	4652      	mov	r2, sl
 8011b02:	4631      	mov	r1, r6
 8011b04:	4628      	mov	r0, r5
 8011b06:	47b8      	blx	r7
 8011b08:	3001      	adds	r0, #1
 8011b0a:	d1be      	bne.n	8011a8a <_printf_float+0x326>
 8011b0c:	e689      	b.n	8011822 <_printf_float+0xbe>
 8011b0e:	9a05      	ldr	r2, [sp, #20]
 8011b10:	464b      	mov	r3, r9
 8011b12:	4442      	add	r2, r8
 8011b14:	4631      	mov	r1, r6
 8011b16:	4628      	mov	r0, r5
 8011b18:	47b8      	blx	r7
 8011b1a:	3001      	adds	r0, #1
 8011b1c:	d1c1      	bne.n	8011aa2 <_printf_float+0x33e>
 8011b1e:	e680      	b.n	8011822 <_printf_float+0xbe>
 8011b20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b22:	2a01      	cmp	r2, #1
 8011b24:	dc01      	bgt.n	8011b2a <_printf_float+0x3c6>
 8011b26:	07db      	lsls	r3, r3, #31
 8011b28:	d53a      	bpl.n	8011ba0 <_printf_float+0x43c>
 8011b2a:	2301      	movs	r3, #1
 8011b2c:	4642      	mov	r2, r8
 8011b2e:	4631      	mov	r1, r6
 8011b30:	4628      	mov	r0, r5
 8011b32:	47b8      	blx	r7
 8011b34:	3001      	adds	r0, #1
 8011b36:	f43f ae74 	beq.w	8011822 <_printf_float+0xbe>
 8011b3a:	ee18 3a10 	vmov	r3, s16
 8011b3e:	4652      	mov	r2, sl
 8011b40:	4631      	mov	r1, r6
 8011b42:	4628      	mov	r0, r5
 8011b44:	47b8      	blx	r7
 8011b46:	3001      	adds	r0, #1
 8011b48:	f43f ae6b 	beq.w	8011822 <_printf_float+0xbe>
 8011b4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011b50:	2200      	movs	r2, #0
 8011b52:	2300      	movs	r3, #0
 8011b54:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8011b58:	f7ee ffe6 	bl	8000b28 <__aeabi_dcmpeq>
 8011b5c:	b9d8      	cbnz	r0, 8011b96 <_printf_float+0x432>
 8011b5e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8011b62:	f108 0201 	add.w	r2, r8, #1
 8011b66:	4631      	mov	r1, r6
 8011b68:	4628      	mov	r0, r5
 8011b6a:	47b8      	blx	r7
 8011b6c:	3001      	adds	r0, #1
 8011b6e:	d10e      	bne.n	8011b8e <_printf_float+0x42a>
 8011b70:	e657      	b.n	8011822 <_printf_float+0xbe>
 8011b72:	2301      	movs	r3, #1
 8011b74:	4652      	mov	r2, sl
 8011b76:	4631      	mov	r1, r6
 8011b78:	4628      	mov	r0, r5
 8011b7a:	47b8      	blx	r7
 8011b7c:	3001      	adds	r0, #1
 8011b7e:	f43f ae50 	beq.w	8011822 <_printf_float+0xbe>
 8011b82:	f108 0801 	add.w	r8, r8, #1
 8011b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b88:	3b01      	subs	r3, #1
 8011b8a:	4543      	cmp	r3, r8
 8011b8c:	dcf1      	bgt.n	8011b72 <_printf_float+0x40e>
 8011b8e:	464b      	mov	r3, r9
 8011b90:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011b94:	e6da      	b.n	801194c <_printf_float+0x1e8>
 8011b96:	f04f 0800 	mov.w	r8, #0
 8011b9a:	f104 0a1a 	add.w	sl, r4, #26
 8011b9e:	e7f2      	b.n	8011b86 <_printf_float+0x422>
 8011ba0:	2301      	movs	r3, #1
 8011ba2:	4642      	mov	r2, r8
 8011ba4:	e7df      	b.n	8011b66 <_printf_float+0x402>
 8011ba6:	2301      	movs	r3, #1
 8011ba8:	464a      	mov	r2, r9
 8011baa:	4631      	mov	r1, r6
 8011bac:	4628      	mov	r0, r5
 8011bae:	47b8      	blx	r7
 8011bb0:	3001      	adds	r0, #1
 8011bb2:	f43f ae36 	beq.w	8011822 <_printf_float+0xbe>
 8011bb6:	f108 0801 	add.w	r8, r8, #1
 8011bba:	68e3      	ldr	r3, [r4, #12]
 8011bbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011bbe:	1a5b      	subs	r3, r3, r1
 8011bc0:	4543      	cmp	r3, r8
 8011bc2:	dcf0      	bgt.n	8011ba6 <_printf_float+0x442>
 8011bc4:	e6f8      	b.n	80119b8 <_printf_float+0x254>
 8011bc6:	f04f 0800 	mov.w	r8, #0
 8011bca:	f104 0919 	add.w	r9, r4, #25
 8011bce:	e7f4      	b.n	8011bba <_printf_float+0x456>

08011bd0 <_printf_common>:
 8011bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011bd4:	4616      	mov	r6, r2
 8011bd6:	4699      	mov	r9, r3
 8011bd8:	688a      	ldr	r2, [r1, #8]
 8011bda:	690b      	ldr	r3, [r1, #16]
 8011bdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011be0:	4293      	cmp	r3, r2
 8011be2:	bfb8      	it	lt
 8011be4:	4613      	movlt	r3, r2
 8011be6:	6033      	str	r3, [r6, #0]
 8011be8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011bec:	4607      	mov	r7, r0
 8011bee:	460c      	mov	r4, r1
 8011bf0:	b10a      	cbz	r2, 8011bf6 <_printf_common+0x26>
 8011bf2:	3301      	adds	r3, #1
 8011bf4:	6033      	str	r3, [r6, #0]
 8011bf6:	6823      	ldr	r3, [r4, #0]
 8011bf8:	0699      	lsls	r1, r3, #26
 8011bfa:	bf42      	ittt	mi
 8011bfc:	6833      	ldrmi	r3, [r6, #0]
 8011bfe:	3302      	addmi	r3, #2
 8011c00:	6033      	strmi	r3, [r6, #0]
 8011c02:	6825      	ldr	r5, [r4, #0]
 8011c04:	f015 0506 	ands.w	r5, r5, #6
 8011c08:	d106      	bne.n	8011c18 <_printf_common+0x48>
 8011c0a:	f104 0a19 	add.w	sl, r4, #25
 8011c0e:	68e3      	ldr	r3, [r4, #12]
 8011c10:	6832      	ldr	r2, [r6, #0]
 8011c12:	1a9b      	subs	r3, r3, r2
 8011c14:	42ab      	cmp	r3, r5
 8011c16:	dc26      	bgt.n	8011c66 <_printf_common+0x96>
 8011c18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011c1c:	1e13      	subs	r3, r2, #0
 8011c1e:	6822      	ldr	r2, [r4, #0]
 8011c20:	bf18      	it	ne
 8011c22:	2301      	movne	r3, #1
 8011c24:	0692      	lsls	r2, r2, #26
 8011c26:	d42b      	bmi.n	8011c80 <_printf_common+0xb0>
 8011c28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011c2c:	4649      	mov	r1, r9
 8011c2e:	4638      	mov	r0, r7
 8011c30:	47c0      	blx	r8
 8011c32:	3001      	adds	r0, #1
 8011c34:	d01e      	beq.n	8011c74 <_printf_common+0xa4>
 8011c36:	6823      	ldr	r3, [r4, #0]
 8011c38:	6922      	ldr	r2, [r4, #16]
 8011c3a:	f003 0306 	and.w	r3, r3, #6
 8011c3e:	2b04      	cmp	r3, #4
 8011c40:	bf02      	ittt	eq
 8011c42:	68e5      	ldreq	r5, [r4, #12]
 8011c44:	6833      	ldreq	r3, [r6, #0]
 8011c46:	1aed      	subeq	r5, r5, r3
 8011c48:	68a3      	ldr	r3, [r4, #8]
 8011c4a:	bf0c      	ite	eq
 8011c4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011c50:	2500      	movne	r5, #0
 8011c52:	4293      	cmp	r3, r2
 8011c54:	bfc4      	itt	gt
 8011c56:	1a9b      	subgt	r3, r3, r2
 8011c58:	18ed      	addgt	r5, r5, r3
 8011c5a:	2600      	movs	r6, #0
 8011c5c:	341a      	adds	r4, #26
 8011c5e:	42b5      	cmp	r5, r6
 8011c60:	d11a      	bne.n	8011c98 <_printf_common+0xc8>
 8011c62:	2000      	movs	r0, #0
 8011c64:	e008      	b.n	8011c78 <_printf_common+0xa8>
 8011c66:	2301      	movs	r3, #1
 8011c68:	4652      	mov	r2, sl
 8011c6a:	4649      	mov	r1, r9
 8011c6c:	4638      	mov	r0, r7
 8011c6e:	47c0      	blx	r8
 8011c70:	3001      	adds	r0, #1
 8011c72:	d103      	bne.n	8011c7c <_printf_common+0xac>
 8011c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c7c:	3501      	adds	r5, #1
 8011c7e:	e7c6      	b.n	8011c0e <_printf_common+0x3e>
 8011c80:	18e1      	adds	r1, r4, r3
 8011c82:	1c5a      	adds	r2, r3, #1
 8011c84:	2030      	movs	r0, #48	; 0x30
 8011c86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011c8a:	4422      	add	r2, r4
 8011c8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011c90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011c94:	3302      	adds	r3, #2
 8011c96:	e7c7      	b.n	8011c28 <_printf_common+0x58>
 8011c98:	2301      	movs	r3, #1
 8011c9a:	4622      	mov	r2, r4
 8011c9c:	4649      	mov	r1, r9
 8011c9e:	4638      	mov	r0, r7
 8011ca0:	47c0      	blx	r8
 8011ca2:	3001      	adds	r0, #1
 8011ca4:	d0e6      	beq.n	8011c74 <_printf_common+0xa4>
 8011ca6:	3601      	adds	r6, #1
 8011ca8:	e7d9      	b.n	8011c5e <_printf_common+0x8e>
	...

08011cac <_printf_i>:
 8011cac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011cb0:	7e0f      	ldrb	r7, [r1, #24]
 8011cb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011cb4:	2f78      	cmp	r7, #120	; 0x78
 8011cb6:	4691      	mov	r9, r2
 8011cb8:	4680      	mov	r8, r0
 8011cba:	460c      	mov	r4, r1
 8011cbc:	469a      	mov	sl, r3
 8011cbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011cc2:	d807      	bhi.n	8011cd4 <_printf_i+0x28>
 8011cc4:	2f62      	cmp	r7, #98	; 0x62
 8011cc6:	d80a      	bhi.n	8011cde <_printf_i+0x32>
 8011cc8:	2f00      	cmp	r7, #0
 8011cca:	f000 80d4 	beq.w	8011e76 <_printf_i+0x1ca>
 8011cce:	2f58      	cmp	r7, #88	; 0x58
 8011cd0:	f000 80c0 	beq.w	8011e54 <_printf_i+0x1a8>
 8011cd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011cd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011cdc:	e03a      	b.n	8011d54 <_printf_i+0xa8>
 8011cde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011ce2:	2b15      	cmp	r3, #21
 8011ce4:	d8f6      	bhi.n	8011cd4 <_printf_i+0x28>
 8011ce6:	a101      	add	r1, pc, #4	; (adr r1, 8011cec <_printf_i+0x40>)
 8011ce8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011cec:	08011d45 	.word	0x08011d45
 8011cf0:	08011d59 	.word	0x08011d59
 8011cf4:	08011cd5 	.word	0x08011cd5
 8011cf8:	08011cd5 	.word	0x08011cd5
 8011cfc:	08011cd5 	.word	0x08011cd5
 8011d00:	08011cd5 	.word	0x08011cd5
 8011d04:	08011d59 	.word	0x08011d59
 8011d08:	08011cd5 	.word	0x08011cd5
 8011d0c:	08011cd5 	.word	0x08011cd5
 8011d10:	08011cd5 	.word	0x08011cd5
 8011d14:	08011cd5 	.word	0x08011cd5
 8011d18:	08011e5d 	.word	0x08011e5d
 8011d1c:	08011d85 	.word	0x08011d85
 8011d20:	08011e17 	.word	0x08011e17
 8011d24:	08011cd5 	.word	0x08011cd5
 8011d28:	08011cd5 	.word	0x08011cd5
 8011d2c:	08011e7f 	.word	0x08011e7f
 8011d30:	08011cd5 	.word	0x08011cd5
 8011d34:	08011d85 	.word	0x08011d85
 8011d38:	08011cd5 	.word	0x08011cd5
 8011d3c:	08011cd5 	.word	0x08011cd5
 8011d40:	08011e1f 	.word	0x08011e1f
 8011d44:	682b      	ldr	r3, [r5, #0]
 8011d46:	1d1a      	adds	r2, r3, #4
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	602a      	str	r2, [r5, #0]
 8011d4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011d50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011d54:	2301      	movs	r3, #1
 8011d56:	e09f      	b.n	8011e98 <_printf_i+0x1ec>
 8011d58:	6820      	ldr	r0, [r4, #0]
 8011d5a:	682b      	ldr	r3, [r5, #0]
 8011d5c:	0607      	lsls	r7, r0, #24
 8011d5e:	f103 0104 	add.w	r1, r3, #4
 8011d62:	6029      	str	r1, [r5, #0]
 8011d64:	d501      	bpl.n	8011d6a <_printf_i+0xbe>
 8011d66:	681e      	ldr	r6, [r3, #0]
 8011d68:	e003      	b.n	8011d72 <_printf_i+0xc6>
 8011d6a:	0646      	lsls	r6, r0, #25
 8011d6c:	d5fb      	bpl.n	8011d66 <_printf_i+0xba>
 8011d6e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011d72:	2e00      	cmp	r6, #0
 8011d74:	da03      	bge.n	8011d7e <_printf_i+0xd2>
 8011d76:	232d      	movs	r3, #45	; 0x2d
 8011d78:	4276      	negs	r6, r6
 8011d7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d7e:	485a      	ldr	r0, [pc, #360]	; (8011ee8 <_printf_i+0x23c>)
 8011d80:	230a      	movs	r3, #10
 8011d82:	e012      	b.n	8011daa <_printf_i+0xfe>
 8011d84:	682b      	ldr	r3, [r5, #0]
 8011d86:	6820      	ldr	r0, [r4, #0]
 8011d88:	1d19      	adds	r1, r3, #4
 8011d8a:	6029      	str	r1, [r5, #0]
 8011d8c:	0605      	lsls	r5, r0, #24
 8011d8e:	d501      	bpl.n	8011d94 <_printf_i+0xe8>
 8011d90:	681e      	ldr	r6, [r3, #0]
 8011d92:	e002      	b.n	8011d9a <_printf_i+0xee>
 8011d94:	0641      	lsls	r1, r0, #25
 8011d96:	d5fb      	bpl.n	8011d90 <_printf_i+0xe4>
 8011d98:	881e      	ldrh	r6, [r3, #0]
 8011d9a:	4853      	ldr	r0, [pc, #332]	; (8011ee8 <_printf_i+0x23c>)
 8011d9c:	2f6f      	cmp	r7, #111	; 0x6f
 8011d9e:	bf0c      	ite	eq
 8011da0:	2308      	moveq	r3, #8
 8011da2:	230a      	movne	r3, #10
 8011da4:	2100      	movs	r1, #0
 8011da6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011daa:	6865      	ldr	r5, [r4, #4]
 8011dac:	60a5      	str	r5, [r4, #8]
 8011dae:	2d00      	cmp	r5, #0
 8011db0:	bfa2      	ittt	ge
 8011db2:	6821      	ldrge	r1, [r4, #0]
 8011db4:	f021 0104 	bicge.w	r1, r1, #4
 8011db8:	6021      	strge	r1, [r4, #0]
 8011dba:	b90e      	cbnz	r6, 8011dc0 <_printf_i+0x114>
 8011dbc:	2d00      	cmp	r5, #0
 8011dbe:	d04b      	beq.n	8011e58 <_printf_i+0x1ac>
 8011dc0:	4615      	mov	r5, r2
 8011dc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8011dc6:	fb03 6711 	mls	r7, r3, r1, r6
 8011dca:	5dc7      	ldrb	r7, [r0, r7]
 8011dcc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011dd0:	4637      	mov	r7, r6
 8011dd2:	42bb      	cmp	r3, r7
 8011dd4:	460e      	mov	r6, r1
 8011dd6:	d9f4      	bls.n	8011dc2 <_printf_i+0x116>
 8011dd8:	2b08      	cmp	r3, #8
 8011dda:	d10b      	bne.n	8011df4 <_printf_i+0x148>
 8011ddc:	6823      	ldr	r3, [r4, #0]
 8011dde:	07de      	lsls	r6, r3, #31
 8011de0:	d508      	bpl.n	8011df4 <_printf_i+0x148>
 8011de2:	6923      	ldr	r3, [r4, #16]
 8011de4:	6861      	ldr	r1, [r4, #4]
 8011de6:	4299      	cmp	r1, r3
 8011de8:	bfde      	ittt	le
 8011dea:	2330      	movle	r3, #48	; 0x30
 8011dec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011df0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011df4:	1b52      	subs	r2, r2, r5
 8011df6:	6122      	str	r2, [r4, #16]
 8011df8:	f8cd a000 	str.w	sl, [sp]
 8011dfc:	464b      	mov	r3, r9
 8011dfe:	aa03      	add	r2, sp, #12
 8011e00:	4621      	mov	r1, r4
 8011e02:	4640      	mov	r0, r8
 8011e04:	f7ff fee4 	bl	8011bd0 <_printf_common>
 8011e08:	3001      	adds	r0, #1
 8011e0a:	d14a      	bne.n	8011ea2 <_printf_i+0x1f6>
 8011e0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e10:	b004      	add	sp, #16
 8011e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e16:	6823      	ldr	r3, [r4, #0]
 8011e18:	f043 0320 	orr.w	r3, r3, #32
 8011e1c:	6023      	str	r3, [r4, #0]
 8011e1e:	4833      	ldr	r0, [pc, #204]	; (8011eec <_printf_i+0x240>)
 8011e20:	2778      	movs	r7, #120	; 0x78
 8011e22:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011e26:	6823      	ldr	r3, [r4, #0]
 8011e28:	6829      	ldr	r1, [r5, #0]
 8011e2a:	061f      	lsls	r7, r3, #24
 8011e2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8011e30:	d402      	bmi.n	8011e38 <_printf_i+0x18c>
 8011e32:	065f      	lsls	r7, r3, #25
 8011e34:	bf48      	it	mi
 8011e36:	b2b6      	uxthmi	r6, r6
 8011e38:	07df      	lsls	r7, r3, #31
 8011e3a:	bf48      	it	mi
 8011e3c:	f043 0320 	orrmi.w	r3, r3, #32
 8011e40:	6029      	str	r1, [r5, #0]
 8011e42:	bf48      	it	mi
 8011e44:	6023      	strmi	r3, [r4, #0]
 8011e46:	b91e      	cbnz	r6, 8011e50 <_printf_i+0x1a4>
 8011e48:	6823      	ldr	r3, [r4, #0]
 8011e4a:	f023 0320 	bic.w	r3, r3, #32
 8011e4e:	6023      	str	r3, [r4, #0]
 8011e50:	2310      	movs	r3, #16
 8011e52:	e7a7      	b.n	8011da4 <_printf_i+0xf8>
 8011e54:	4824      	ldr	r0, [pc, #144]	; (8011ee8 <_printf_i+0x23c>)
 8011e56:	e7e4      	b.n	8011e22 <_printf_i+0x176>
 8011e58:	4615      	mov	r5, r2
 8011e5a:	e7bd      	b.n	8011dd8 <_printf_i+0x12c>
 8011e5c:	682b      	ldr	r3, [r5, #0]
 8011e5e:	6826      	ldr	r6, [r4, #0]
 8011e60:	6961      	ldr	r1, [r4, #20]
 8011e62:	1d18      	adds	r0, r3, #4
 8011e64:	6028      	str	r0, [r5, #0]
 8011e66:	0635      	lsls	r5, r6, #24
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	d501      	bpl.n	8011e70 <_printf_i+0x1c4>
 8011e6c:	6019      	str	r1, [r3, #0]
 8011e6e:	e002      	b.n	8011e76 <_printf_i+0x1ca>
 8011e70:	0670      	lsls	r0, r6, #25
 8011e72:	d5fb      	bpl.n	8011e6c <_printf_i+0x1c0>
 8011e74:	8019      	strh	r1, [r3, #0]
 8011e76:	2300      	movs	r3, #0
 8011e78:	6123      	str	r3, [r4, #16]
 8011e7a:	4615      	mov	r5, r2
 8011e7c:	e7bc      	b.n	8011df8 <_printf_i+0x14c>
 8011e7e:	682b      	ldr	r3, [r5, #0]
 8011e80:	1d1a      	adds	r2, r3, #4
 8011e82:	602a      	str	r2, [r5, #0]
 8011e84:	681d      	ldr	r5, [r3, #0]
 8011e86:	6862      	ldr	r2, [r4, #4]
 8011e88:	2100      	movs	r1, #0
 8011e8a:	4628      	mov	r0, r5
 8011e8c:	f7ee f9d0 	bl	8000230 <memchr>
 8011e90:	b108      	cbz	r0, 8011e96 <_printf_i+0x1ea>
 8011e92:	1b40      	subs	r0, r0, r5
 8011e94:	6060      	str	r0, [r4, #4]
 8011e96:	6863      	ldr	r3, [r4, #4]
 8011e98:	6123      	str	r3, [r4, #16]
 8011e9a:	2300      	movs	r3, #0
 8011e9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011ea0:	e7aa      	b.n	8011df8 <_printf_i+0x14c>
 8011ea2:	6923      	ldr	r3, [r4, #16]
 8011ea4:	462a      	mov	r2, r5
 8011ea6:	4649      	mov	r1, r9
 8011ea8:	4640      	mov	r0, r8
 8011eaa:	47d0      	blx	sl
 8011eac:	3001      	adds	r0, #1
 8011eae:	d0ad      	beq.n	8011e0c <_printf_i+0x160>
 8011eb0:	6823      	ldr	r3, [r4, #0]
 8011eb2:	079b      	lsls	r3, r3, #30
 8011eb4:	d413      	bmi.n	8011ede <_printf_i+0x232>
 8011eb6:	68e0      	ldr	r0, [r4, #12]
 8011eb8:	9b03      	ldr	r3, [sp, #12]
 8011eba:	4298      	cmp	r0, r3
 8011ebc:	bfb8      	it	lt
 8011ebe:	4618      	movlt	r0, r3
 8011ec0:	e7a6      	b.n	8011e10 <_printf_i+0x164>
 8011ec2:	2301      	movs	r3, #1
 8011ec4:	4632      	mov	r2, r6
 8011ec6:	4649      	mov	r1, r9
 8011ec8:	4640      	mov	r0, r8
 8011eca:	47d0      	blx	sl
 8011ecc:	3001      	adds	r0, #1
 8011ece:	d09d      	beq.n	8011e0c <_printf_i+0x160>
 8011ed0:	3501      	adds	r5, #1
 8011ed2:	68e3      	ldr	r3, [r4, #12]
 8011ed4:	9903      	ldr	r1, [sp, #12]
 8011ed6:	1a5b      	subs	r3, r3, r1
 8011ed8:	42ab      	cmp	r3, r5
 8011eda:	dcf2      	bgt.n	8011ec2 <_printf_i+0x216>
 8011edc:	e7eb      	b.n	8011eb6 <_printf_i+0x20a>
 8011ede:	2500      	movs	r5, #0
 8011ee0:	f104 0619 	add.w	r6, r4, #25
 8011ee4:	e7f5      	b.n	8011ed2 <_printf_i+0x226>
 8011ee6:	bf00      	nop
 8011ee8:	08015599 	.word	0x08015599
 8011eec:	080155aa 	.word	0x080155aa

08011ef0 <std>:
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	b510      	push	{r4, lr}
 8011ef4:	4604      	mov	r4, r0
 8011ef6:	e9c0 3300 	strd	r3, r3, [r0]
 8011efa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011efe:	6083      	str	r3, [r0, #8]
 8011f00:	8181      	strh	r1, [r0, #12]
 8011f02:	6643      	str	r3, [r0, #100]	; 0x64
 8011f04:	81c2      	strh	r2, [r0, #14]
 8011f06:	6183      	str	r3, [r0, #24]
 8011f08:	4619      	mov	r1, r3
 8011f0a:	2208      	movs	r2, #8
 8011f0c:	305c      	adds	r0, #92	; 0x5c
 8011f0e:	f000 f8f4 	bl	80120fa <memset>
 8011f12:	4b0d      	ldr	r3, [pc, #52]	; (8011f48 <std+0x58>)
 8011f14:	6263      	str	r3, [r4, #36]	; 0x24
 8011f16:	4b0d      	ldr	r3, [pc, #52]	; (8011f4c <std+0x5c>)
 8011f18:	62a3      	str	r3, [r4, #40]	; 0x28
 8011f1a:	4b0d      	ldr	r3, [pc, #52]	; (8011f50 <std+0x60>)
 8011f1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011f1e:	4b0d      	ldr	r3, [pc, #52]	; (8011f54 <std+0x64>)
 8011f20:	6323      	str	r3, [r4, #48]	; 0x30
 8011f22:	4b0d      	ldr	r3, [pc, #52]	; (8011f58 <std+0x68>)
 8011f24:	6224      	str	r4, [r4, #32]
 8011f26:	429c      	cmp	r4, r3
 8011f28:	d006      	beq.n	8011f38 <std+0x48>
 8011f2a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8011f2e:	4294      	cmp	r4, r2
 8011f30:	d002      	beq.n	8011f38 <std+0x48>
 8011f32:	33d0      	adds	r3, #208	; 0xd0
 8011f34:	429c      	cmp	r4, r3
 8011f36:	d105      	bne.n	8011f44 <std+0x54>
 8011f38:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f40:	f000 b9ac 	b.w	801229c <__retarget_lock_init_recursive>
 8011f44:	bd10      	pop	{r4, pc}
 8011f46:	bf00      	nop
 8011f48:	08012075 	.word	0x08012075
 8011f4c:	08012097 	.word	0x08012097
 8011f50:	080120cf 	.word	0x080120cf
 8011f54:	080120f3 	.word	0x080120f3
 8011f58:	200003f4 	.word	0x200003f4

08011f5c <stdio_exit_handler>:
 8011f5c:	4a02      	ldr	r2, [pc, #8]	; (8011f68 <stdio_exit_handler+0xc>)
 8011f5e:	4903      	ldr	r1, [pc, #12]	; (8011f6c <stdio_exit_handler+0x10>)
 8011f60:	4803      	ldr	r0, [pc, #12]	; (8011f70 <stdio_exit_handler+0x14>)
 8011f62:	f000 b869 	b.w	8012038 <_fwalk_sglue>
 8011f66:	bf00      	nop
 8011f68:	20000014 	.word	0x20000014
 8011f6c:	08013851 	.word	0x08013851
 8011f70:	20000020 	.word	0x20000020

08011f74 <cleanup_stdio>:
 8011f74:	6841      	ldr	r1, [r0, #4]
 8011f76:	4b0c      	ldr	r3, [pc, #48]	; (8011fa8 <cleanup_stdio+0x34>)
 8011f78:	4299      	cmp	r1, r3
 8011f7a:	b510      	push	{r4, lr}
 8011f7c:	4604      	mov	r4, r0
 8011f7e:	d001      	beq.n	8011f84 <cleanup_stdio+0x10>
 8011f80:	f001 fc66 	bl	8013850 <_fflush_r>
 8011f84:	68a1      	ldr	r1, [r4, #8]
 8011f86:	4b09      	ldr	r3, [pc, #36]	; (8011fac <cleanup_stdio+0x38>)
 8011f88:	4299      	cmp	r1, r3
 8011f8a:	d002      	beq.n	8011f92 <cleanup_stdio+0x1e>
 8011f8c:	4620      	mov	r0, r4
 8011f8e:	f001 fc5f 	bl	8013850 <_fflush_r>
 8011f92:	68e1      	ldr	r1, [r4, #12]
 8011f94:	4b06      	ldr	r3, [pc, #24]	; (8011fb0 <cleanup_stdio+0x3c>)
 8011f96:	4299      	cmp	r1, r3
 8011f98:	d004      	beq.n	8011fa4 <cleanup_stdio+0x30>
 8011f9a:	4620      	mov	r0, r4
 8011f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011fa0:	f001 bc56 	b.w	8013850 <_fflush_r>
 8011fa4:	bd10      	pop	{r4, pc}
 8011fa6:	bf00      	nop
 8011fa8:	200003f4 	.word	0x200003f4
 8011fac:	2000045c 	.word	0x2000045c
 8011fb0:	200004c4 	.word	0x200004c4

08011fb4 <global_stdio_init.part.0>:
 8011fb4:	b510      	push	{r4, lr}
 8011fb6:	4b0b      	ldr	r3, [pc, #44]	; (8011fe4 <global_stdio_init.part.0+0x30>)
 8011fb8:	4c0b      	ldr	r4, [pc, #44]	; (8011fe8 <global_stdio_init.part.0+0x34>)
 8011fba:	4a0c      	ldr	r2, [pc, #48]	; (8011fec <global_stdio_init.part.0+0x38>)
 8011fbc:	601a      	str	r2, [r3, #0]
 8011fbe:	4620      	mov	r0, r4
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	2104      	movs	r1, #4
 8011fc4:	f7ff ff94 	bl	8011ef0 <std>
 8011fc8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011fcc:	2201      	movs	r2, #1
 8011fce:	2109      	movs	r1, #9
 8011fd0:	f7ff ff8e 	bl	8011ef0 <std>
 8011fd4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011fd8:	2202      	movs	r2, #2
 8011fda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011fde:	2112      	movs	r1, #18
 8011fe0:	f7ff bf86 	b.w	8011ef0 <std>
 8011fe4:	2000052c 	.word	0x2000052c
 8011fe8:	200003f4 	.word	0x200003f4
 8011fec:	08011f5d 	.word	0x08011f5d

08011ff0 <__sfp_lock_acquire>:
 8011ff0:	4801      	ldr	r0, [pc, #4]	; (8011ff8 <__sfp_lock_acquire+0x8>)
 8011ff2:	f000 b954 	b.w	801229e <__retarget_lock_acquire_recursive>
 8011ff6:	bf00      	nop
 8011ff8:	20000535 	.word	0x20000535

08011ffc <__sfp_lock_release>:
 8011ffc:	4801      	ldr	r0, [pc, #4]	; (8012004 <__sfp_lock_release+0x8>)
 8011ffe:	f000 b94f 	b.w	80122a0 <__retarget_lock_release_recursive>
 8012002:	bf00      	nop
 8012004:	20000535 	.word	0x20000535

08012008 <__sinit>:
 8012008:	b510      	push	{r4, lr}
 801200a:	4604      	mov	r4, r0
 801200c:	f7ff fff0 	bl	8011ff0 <__sfp_lock_acquire>
 8012010:	6a23      	ldr	r3, [r4, #32]
 8012012:	b11b      	cbz	r3, 801201c <__sinit+0x14>
 8012014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012018:	f7ff bff0 	b.w	8011ffc <__sfp_lock_release>
 801201c:	4b04      	ldr	r3, [pc, #16]	; (8012030 <__sinit+0x28>)
 801201e:	6223      	str	r3, [r4, #32]
 8012020:	4b04      	ldr	r3, [pc, #16]	; (8012034 <__sinit+0x2c>)
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d1f5      	bne.n	8012014 <__sinit+0xc>
 8012028:	f7ff ffc4 	bl	8011fb4 <global_stdio_init.part.0>
 801202c:	e7f2      	b.n	8012014 <__sinit+0xc>
 801202e:	bf00      	nop
 8012030:	08011f75 	.word	0x08011f75
 8012034:	2000052c 	.word	0x2000052c

08012038 <_fwalk_sglue>:
 8012038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801203c:	4607      	mov	r7, r0
 801203e:	4688      	mov	r8, r1
 8012040:	4614      	mov	r4, r2
 8012042:	2600      	movs	r6, #0
 8012044:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012048:	f1b9 0901 	subs.w	r9, r9, #1
 801204c:	d505      	bpl.n	801205a <_fwalk_sglue+0x22>
 801204e:	6824      	ldr	r4, [r4, #0]
 8012050:	2c00      	cmp	r4, #0
 8012052:	d1f7      	bne.n	8012044 <_fwalk_sglue+0xc>
 8012054:	4630      	mov	r0, r6
 8012056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801205a:	89ab      	ldrh	r3, [r5, #12]
 801205c:	2b01      	cmp	r3, #1
 801205e:	d907      	bls.n	8012070 <_fwalk_sglue+0x38>
 8012060:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012064:	3301      	adds	r3, #1
 8012066:	d003      	beq.n	8012070 <_fwalk_sglue+0x38>
 8012068:	4629      	mov	r1, r5
 801206a:	4638      	mov	r0, r7
 801206c:	47c0      	blx	r8
 801206e:	4306      	orrs	r6, r0
 8012070:	3568      	adds	r5, #104	; 0x68
 8012072:	e7e9      	b.n	8012048 <_fwalk_sglue+0x10>

08012074 <__sread>:
 8012074:	b510      	push	{r4, lr}
 8012076:	460c      	mov	r4, r1
 8012078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801207c:	f000 f89c 	bl	80121b8 <_read_r>
 8012080:	2800      	cmp	r0, #0
 8012082:	bfab      	itete	ge
 8012084:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012086:	89a3      	ldrhlt	r3, [r4, #12]
 8012088:	181b      	addge	r3, r3, r0
 801208a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801208e:	bfac      	ite	ge
 8012090:	6563      	strge	r3, [r4, #84]	; 0x54
 8012092:	81a3      	strhlt	r3, [r4, #12]
 8012094:	bd10      	pop	{r4, pc}

08012096 <__swrite>:
 8012096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801209a:	461f      	mov	r7, r3
 801209c:	898b      	ldrh	r3, [r1, #12]
 801209e:	05db      	lsls	r3, r3, #23
 80120a0:	4605      	mov	r5, r0
 80120a2:	460c      	mov	r4, r1
 80120a4:	4616      	mov	r6, r2
 80120a6:	d505      	bpl.n	80120b4 <__swrite+0x1e>
 80120a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120ac:	2302      	movs	r3, #2
 80120ae:	2200      	movs	r2, #0
 80120b0:	f000 f870 	bl	8012194 <_lseek_r>
 80120b4:	89a3      	ldrh	r3, [r4, #12]
 80120b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80120ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80120be:	81a3      	strh	r3, [r4, #12]
 80120c0:	4632      	mov	r2, r6
 80120c2:	463b      	mov	r3, r7
 80120c4:	4628      	mov	r0, r5
 80120c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80120ca:	f000 b8ab 	b.w	8012224 <_write_r>

080120ce <__sseek>:
 80120ce:	b510      	push	{r4, lr}
 80120d0:	460c      	mov	r4, r1
 80120d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120d6:	f000 f85d 	bl	8012194 <_lseek_r>
 80120da:	1c43      	adds	r3, r0, #1
 80120dc:	89a3      	ldrh	r3, [r4, #12]
 80120de:	bf15      	itete	ne
 80120e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80120e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80120e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80120ea:	81a3      	strheq	r3, [r4, #12]
 80120ec:	bf18      	it	ne
 80120ee:	81a3      	strhne	r3, [r4, #12]
 80120f0:	bd10      	pop	{r4, pc}

080120f2 <__sclose>:
 80120f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120f6:	f000 b83d 	b.w	8012174 <_close_r>

080120fa <memset>:
 80120fa:	4402      	add	r2, r0
 80120fc:	4603      	mov	r3, r0
 80120fe:	4293      	cmp	r3, r2
 8012100:	d100      	bne.n	8012104 <memset+0xa>
 8012102:	4770      	bx	lr
 8012104:	f803 1b01 	strb.w	r1, [r3], #1
 8012108:	e7f9      	b.n	80120fe <memset+0x4>

0801210a <_raise_r>:
 801210a:	291f      	cmp	r1, #31
 801210c:	b538      	push	{r3, r4, r5, lr}
 801210e:	4604      	mov	r4, r0
 8012110:	460d      	mov	r5, r1
 8012112:	d904      	bls.n	801211e <_raise_r+0x14>
 8012114:	2316      	movs	r3, #22
 8012116:	6003      	str	r3, [r0, #0]
 8012118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801211c:	bd38      	pop	{r3, r4, r5, pc}
 801211e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8012120:	b112      	cbz	r2, 8012128 <_raise_r+0x1e>
 8012122:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012126:	b94b      	cbnz	r3, 801213c <_raise_r+0x32>
 8012128:	4620      	mov	r0, r4
 801212a:	f000 f869 	bl	8012200 <_getpid_r>
 801212e:	462a      	mov	r2, r5
 8012130:	4601      	mov	r1, r0
 8012132:	4620      	mov	r0, r4
 8012134:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012138:	f000 b850 	b.w	80121dc <_kill_r>
 801213c:	2b01      	cmp	r3, #1
 801213e:	d00a      	beq.n	8012156 <_raise_r+0x4c>
 8012140:	1c59      	adds	r1, r3, #1
 8012142:	d103      	bne.n	801214c <_raise_r+0x42>
 8012144:	2316      	movs	r3, #22
 8012146:	6003      	str	r3, [r0, #0]
 8012148:	2001      	movs	r0, #1
 801214a:	e7e7      	b.n	801211c <_raise_r+0x12>
 801214c:	2400      	movs	r4, #0
 801214e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012152:	4628      	mov	r0, r5
 8012154:	4798      	blx	r3
 8012156:	2000      	movs	r0, #0
 8012158:	e7e0      	b.n	801211c <_raise_r+0x12>
	...

0801215c <raise>:
 801215c:	4b02      	ldr	r3, [pc, #8]	; (8012168 <raise+0xc>)
 801215e:	4601      	mov	r1, r0
 8012160:	6818      	ldr	r0, [r3, #0]
 8012162:	f7ff bfd2 	b.w	801210a <_raise_r>
 8012166:	bf00      	nop
 8012168:	2000006c 	.word	0x2000006c

0801216c <_localeconv_r>:
 801216c:	4800      	ldr	r0, [pc, #0]	; (8012170 <_localeconv_r+0x4>)
 801216e:	4770      	bx	lr
 8012170:	20000160 	.word	0x20000160

08012174 <_close_r>:
 8012174:	b538      	push	{r3, r4, r5, lr}
 8012176:	4d06      	ldr	r5, [pc, #24]	; (8012190 <_close_r+0x1c>)
 8012178:	2300      	movs	r3, #0
 801217a:	4604      	mov	r4, r0
 801217c:	4608      	mov	r0, r1
 801217e:	602b      	str	r3, [r5, #0]
 8012180:	f7fa fe0d 	bl	800cd9e <_close>
 8012184:	1c43      	adds	r3, r0, #1
 8012186:	d102      	bne.n	801218e <_close_r+0x1a>
 8012188:	682b      	ldr	r3, [r5, #0]
 801218a:	b103      	cbz	r3, 801218e <_close_r+0x1a>
 801218c:	6023      	str	r3, [r4, #0]
 801218e:	bd38      	pop	{r3, r4, r5, pc}
 8012190:	20000530 	.word	0x20000530

08012194 <_lseek_r>:
 8012194:	b538      	push	{r3, r4, r5, lr}
 8012196:	4d07      	ldr	r5, [pc, #28]	; (80121b4 <_lseek_r+0x20>)
 8012198:	4604      	mov	r4, r0
 801219a:	4608      	mov	r0, r1
 801219c:	4611      	mov	r1, r2
 801219e:	2200      	movs	r2, #0
 80121a0:	602a      	str	r2, [r5, #0]
 80121a2:	461a      	mov	r2, r3
 80121a4:	f7fa fe22 	bl	800cdec <_lseek>
 80121a8:	1c43      	adds	r3, r0, #1
 80121aa:	d102      	bne.n	80121b2 <_lseek_r+0x1e>
 80121ac:	682b      	ldr	r3, [r5, #0]
 80121ae:	b103      	cbz	r3, 80121b2 <_lseek_r+0x1e>
 80121b0:	6023      	str	r3, [r4, #0]
 80121b2:	bd38      	pop	{r3, r4, r5, pc}
 80121b4:	20000530 	.word	0x20000530

080121b8 <_read_r>:
 80121b8:	b538      	push	{r3, r4, r5, lr}
 80121ba:	4d07      	ldr	r5, [pc, #28]	; (80121d8 <_read_r+0x20>)
 80121bc:	4604      	mov	r4, r0
 80121be:	4608      	mov	r0, r1
 80121c0:	4611      	mov	r1, r2
 80121c2:	2200      	movs	r2, #0
 80121c4:	602a      	str	r2, [r5, #0]
 80121c6:	461a      	mov	r2, r3
 80121c8:	f7fa fdb0 	bl	800cd2c <_read>
 80121cc:	1c43      	adds	r3, r0, #1
 80121ce:	d102      	bne.n	80121d6 <_read_r+0x1e>
 80121d0:	682b      	ldr	r3, [r5, #0]
 80121d2:	b103      	cbz	r3, 80121d6 <_read_r+0x1e>
 80121d4:	6023      	str	r3, [r4, #0]
 80121d6:	bd38      	pop	{r3, r4, r5, pc}
 80121d8:	20000530 	.word	0x20000530

080121dc <_kill_r>:
 80121dc:	b538      	push	{r3, r4, r5, lr}
 80121de:	4d07      	ldr	r5, [pc, #28]	; (80121fc <_kill_r+0x20>)
 80121e0:	2300      	movs	r3, #0
 80121e2:	4604      	mov	r4, r0
 80121e4:	4608      	mov	r0, r1
 80121e6:	4611      	mov	r1, r2
 80121e8:	602b      	str	r3, [r5, #0]
 80121ea:	f7fa fd85 	bl	800ccf8 <_kill>
 80121ee:	1c43      	adds	r3, r0, #1
 80121f0:	d102      	bne.n	80121f8 <_kill_r+0x1c>
 80121f2:	682b      	ldr	r3, [r5, #0]
 80121f4:	b103      	cbz	r3, 80121f8 <_kill_r+0x1c>
 80121f6:	6023      	str	r3, [r4, #0]
 80121f8:	bd38      	pop	{r3, r4, r5, pc}
 80121fa:	bf00      	nop
 80121fc:	20000530 	.word	0x20000530

08012200 <_getpid_r>:
 8012200:	f7fa bd72 	b.w	800cce8 <_getpid>

08012204 <_sbrk_r>:
 8012204:	b538      	push	{r3, r4, r5, lr}
 8012206:	4d06      	ldr	r5, [pc, #24]	; (8012220 <_sbrk_r+0x1c>)
 8012208:	2300      	movs	r3, #0
 801220a:	4604      	mov	r4, r0
 801220c:	4608      	mov	r0, r1
 801220e:	602b      	str	r3, [r5, #0]
 8012210:	f7fa fdfa 	bl	800ce08 <_sbrk>
 8012214:	1c43      	adds	r3, r0, #1
 8012216:	d102      	bne.n	801221e <_sbrk_r+0x1a>
 8012218:	682b      	ldr	r3, [r5, #0]
 801221a:	b103      	cbz	r3, 801221e <_sbrk_r+0x1a>
 801221c:	6023      	str	r3, [r4, #0]
 801221e:	bd38      	pop	{r3, r4, r5, pc}
 8012220:	20000530 	.word	0x20000530

08012224 <_write_r>:
 8012224:	b538      	push	{r3, r4, r5, lr}
 8012226:	4d07      	ldr	r5, [pc, #28]	; (8012244 <_write_r+0x20>)
 8012228:	4604      	mov	r4, r0
 801222a:	4608      	mov	r0, r1
 801222c:	4611      	mov	r1, r2
 801222e:	2200      	movs	r2, #0
 8012230:	602a      	str	r2, [r5, #0]
 8012232:	461a      	mov	r2, r3
 8012234:	f7fa fd97 	bl	800cd66 <_write>
 8012238:	1c43      	adds	r3, r0, #1
 801223a:	d102      	bne.n	8012242 <_write_r+0x1e>
 801223c:	682b      	ldr	r3, [r5, #0]
 801223e:	b103      	cbz	r3, 8012242 <_write_r+0x1e>
 8012240:	6023      	str	r3, [r4, #0]
 8012242:	bd38      	pop	{r3, r4, r5, pc}
 8012244:	20000530 	.word	0x20000530

08012248 <__errno>:
 8012248:	4b01      	ldr	r3, [pc, #4]	; (8012250 <__errno+0x8>)
 801224a:	6818      	ldr	r0, [r3, #0]
 801224c:	4770      	bx	lr
 801224e:	bf00      	nop
 8012250:	2000006c 	.word	0x2000006c

08012254 <__libc_init_array>:
 8012254:	b570      	push	{r4, r5, r6, lr}
 8012256:	4d0d      	ldr	r5, [pc, #52]	; (801228c <__libc_init_array+0x38>)
 8012258:	4c0d      	ldr	r4, [pc, #52]	; (8012290 <__libc_init_array+0x3c>)
 801225a:	1b64      	subs	r4, r4, r5
 801225c:	10a4      	asrs	r4, r4, #2
 801225e:	2600      	movs	r6, #0
 8012260:	42a6      	cmp	r6, r4
 8012262:	d109      	bne.n	8012278 <__libc_init_array+0x24>
 8012264:	4d0b      	ldr	r5, [pc, #44]	; (8012294 <__libc_init_array+0x40>)
 8012266:	4c0c      	ldr	r4, [pc, #48]	; (8012298 <__libc_init_array+0x44>)
 8012268:	f001 fde4 	bl	8013e34 <_init>
 801226c:	1b64      	subs	r4, r4, r5
 801226e:	10a4      	asrs	r4, r4, #2
 8012270:	2600      	movs	r6, #0
 8012272:	42a6      	cmp	r6, r4
 8012274:	d105      	bne.n	8012282 <__libc_init_array+0x2e>
 8012276:	bd70      	pop	{r4, r5, r6, pc}
 8012278:	f855 3b04 	ldr.w	r3, [r5], #4
 801227c:	4798      	blx	r3
 801227e:	3601      	adds	r6, #1
 8012280:	e7ee      	b.n	8012260 <__libc_init_array+0xc>
 8012282:	f855 3b04 	ldr.w	r3, [r5], #4
 8012286:	4798      	blx	r3
 8012288:	3601      	adds	r6, #1
 801228a:	e7f2      	b.n	8012272 <__libc_init_array+0x1e>
 801228c:	08017794 	.word	0x08017794
 8012290:	08017794 	.word	0x08017794
 8012294:	08017794 	.word	0x08017794
 8012298:	080177a0 	.word	0x080177a0

0801229c <__retarget_lock_init_recursive>:
 801229c:	4770      	bx	lr

0801229e <__retarget_lock_acquire_recursive>:
 801229e:	4770      	bx	lr

080122a0 <__retarget_lock_release_recursive>:
 80122a0:	4770      	bx	lr

080122a2 <memcpy>:
 80122a2:	440a      	add	r2, r1
 80122a4:	4291      	cmp	r1, r2
 80122a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80122aa:	d100      	bne.n	80122ae <memcpy+0xc>
 80122ac:	4770      	bx	lr
 80122ae:	b510      	push	{r4, lr}
 80122b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80122b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80122b8:	4291      	cmp	r1, r2
 80122ba:	d1f9      	bne.n	80122b0 <memcpy+0xe>
 80122bc:	bd10      	pop	{r4, pc}

080122be <quorem>:
 80122be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122c2:	6903      	ldr	r3, [r0, #16]
 80122c4:	690c      	ldr	r4, [r1, #16]
 80122c6:	42a3      	cmp	r3, r4
 80122c8:	4607      	mov	r7, r0
 80122ca:	db7e      	blt.n	80123ca <quorem+0x10c>
 80122cc:	3c01      	subs	r4, #1
 80122ce:	f101 0814 	add.w	r8, r1, #20
 80122d2:	f100 0514 	add.w	r5, r0, #20
 80122d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80122da:	9301      	str	r3, [sp, #4]
 80122dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80122e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80122e4:	3301      	adds	r3, #1
 80122e6:	429a      	cmp	r2, r3
 80122e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80122ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80122f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80122f4:	d331      	bcc.n	801235a <quorem+0x9c>
 80122f6:	f04f 0e00 	mov.w	lr, #0
 80122fa:	4640      	mov	r0, r8
 80122fc:	46ac      	mov	ip, r5
 80122fe:	46f2      	mov	sl, lr
 8012300:	f850 2b04 	ldr.w	r2, [r0], #4
 8012304:	b293      	uxth	r3, r2
 8012306:	fb06 e303 	mla	r3, r6, r3, lr
 801230a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801230e:	0c1a      	lsrs	r2, r3, #16
 8012310:	b29b      	uxth	r3, r3
 8012312:	ebaa 0303 	sub.w	r3, sl, r3
 8012316:	f8dc a000 	ldr.w	sl, [ip]
 801231a:	fa13 f38a 	uxtah	r3, r3, sl
 801231e:	fb06 220e 	mla	r2, r6, lr, r2
 8012322:	9300      	str	r3, [sp, #0]
 8012324:	9b00      	ldr	r3, [sp, #0]
 8012326:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801232a:	b292      	uxth	r2, r2
 801232c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012330:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012334:	f8bd 3000 	ldrh.w	r3, [sp]
 8012338:	4581      	cmp	r9, r0
 801233a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801233e:	f84c 3b04 	str.w	r3, [ip], #4
 8012342:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012346:	d2db      	bcs.n	8012300 <quorem+0x42>
 8012348:	f855 300b 	ldr.w	r3, [r5, fp]
 801234c:	b92b      	cbnz	r3, 801235a <quorem+0x9c>
 801234e:	9b01      	ldr	r3, [sp, #4]
 8012350:	3b04      	subs	r3, #4
 8012352:	429d      	cmp	r5, r3
 8012354:	461a      	mov	r2, r3
 8012356:	d32c      	bcc.n	80123b2 <quorem+0xf4>
 8012358:	613c      	str	r4, [r7, #16]
 801235a:	4638      	mov	r0, r7
 801235c:	f001 f8f2 	bl	8013544 <__mcmp>
 8012360:	2800      	cmp	r0, #0
 8012362:	db22      	blt.n	80123aa <quorem+0xec>
 8012364:	3601      	adds	r6, #1
 8012366:	4629      	mov	r1, r5
 8012368:	2000      	movs	r0, #0
 801236a:	f858 2b04 	ldr.w	r2, [r8], #4
 801236e:	f8d1 c000 	ldr.w	ip, [r1]
 8012372:	b293      	uxth	r3, r2
 8012374:	1ac3      	subs	r3, r0, r3
 8012376:	0c12      	lsrs	r2, r2, #16
 8012378:	fa13 f38c 	uxtah	r3, r3, ip
 801237c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8012380:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012384:	b29b      	uxth	r3, r3
 8012386:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801238a:	45c1      	cmp	r9, r8
 801238c:	f841 3b04 	str.w	r3, [r1], #4
 8012390:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012394:	d2e9      	bcs.n	801236a <quorem+0xac>
 8012396:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801239a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801239e:	b922      	cbnz	r2, 80123aa <quorem+0xec>
 80123a0:	3b04      	subs	r3, #4
 80123a2:	429d      	cmp	r5, r3
 80123a4:	461a      	mov	r2, r3
 80123a6:	d30a      	bcc.n	80123be <quorem+0x100>
 80123a8:	613c      	str	r4, [r7, #16]
 80123aa:	4630      	mov	r0, r6
 80123ac:	b003      	add	sp, #12
 80123ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123b2:	6812      	ldr	r2, [r2, #0]
 80123b4:	3b04      	subs	r3, #4
 80123b6:	2a00      	cmp	r2, #0
 80123b8:	d1ce      	bne.n	8012358 <quorem+0x9a>
 80123ba:	3c01      	subs	r4, #1
 80123bc:	e7c9      	b.n	8012352 <quorem+0x94>
 80123be:	6812      	ldr	r2, [r2, #0]
 80123c0:	3b04      	subs	r3, #4
 80123c2:	2a00      	cmp	r2, #0
 80123c4:	d1f0      	bne.n	80123a8 <quorem+0xea>
 80123c6:	3c01      	subs	r4, #1
 80123c8:	e7eb      	b.n	80123a2 <quorem+0xe4>
 80123ca:	2000      	movs	r0, #0
 80123cc:	e7ee      	b.n	80123ac <quorem+0xee>
	...

080123d0 <_dtoa_r>:
 80123d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123d4:	ed2d 8b04 	vpush	{d8-d9}
 80123d8:	69c5      	ldr	r5, [r0, #28]
 80123da:	b093      	sub	sp, #76	; 0x4c
 80123dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80123e0:	ec57 6b10 	vmov	r6, r7, d0
 80123e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80123e8:	9107      	str	r1, [sp, #28]
 80123ea:	4604      	mov	r4, r0
 80123ec:	920a      	str	r2, [sp, #40]	; 0x28
 80123ee:	930d      	str	r3, [sp, #52]	; 0x34
 80123f0:	b975      	cbnz	r5, 8012410 <_dtoa_r+0x40>
 80123f2:	2010      	movs	r0, #16
 80123f4:	f7ff f85a 	bl	80114ac <malloc>
 80123f8:	4602      	mov	r2, r0
 80123fa:	61e0      	str	r0, [r4, #28]
 80123fc:	b920      	cbnz	r0, 8012408 <_dtoa_r+0x38>
 80123fe:	4bae      	ldr	r3, [pc, #696]	; (80126b8 <_dtoa_r+0x2e8>)
 8012400:	21ef      	movs	r1, #239	; 0xef
 8012402:	48ae      	ldr	r0, [pc, #696]	; (80126bc <_dtoa_r+0x2ec>)
 8012404:	f001 fa4c 	bl	80138a0 <__assert_func>
 8012408:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801240c:	6005      	str	r5, [r0, #0]
 801240e:	60c5      	str	r5, [r0, #12]
 8012410:	69e3      	ldr	r3, [r4, #28]
 8012412:	6819      	ldr	r1, [r3, #0]
 8012414:	b151      	cbz	r1, 801242c <_dtoa_r+0x5c>
 8012416:	685a      	ldr	r2, [r3, #4]
 8012418:	604a      	str	r2, [r1, #4]
 801241a:	2301      	movs	r3, #1
 801241c:	4093      	lsls	r3, r2
 801241e:	608b      	str	r3, [r1, #8]
 8012420:	4620      	mov	r0, r4
 8012422:	f000 fe53 	bl	80130cc <_Bfree>
 8012426:	69e3      	ldr	r3, [r4, #28]
 8012428:	2200      	movs	r2, #0
 801242a:	601a      	str	r2, [r3, #0]
 801242c:	1e3b      	subs	r3, r7, #0
 801242e:	bfbb      	ittet	lt
 8012430:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012434:	9303      	strlt	r3, [sp, #12]
 8012436:	2300      	movge	r3, #0
 8012438:	2201      	movlt	r2, #1
 801243a:	bfac      	ite	ge
 801243c:	f8c8 3000 	strge.w	r3, [r8]
 8012440:	f8c8 2000 	strlt.w	r2, [r8]
 8012444:	4b9e      	ldr	r3, [pc, #632]	; (80126c0 <_dtoa_r+0x2f0>)
 8012446:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801244a:	ea33 0308 	bics.w	r3, r3, r8
 801244e:	d11b      	bne.n	8012488 <_dtoa_r+0xb8>
 8012450:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012452:	f242 730f 	movw	r3, #9999	; 0x270f
 8012456:	6013      	str	r3, [r2, #0]
 8012458:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801245c:	4333      	orrs	r3, r6
 801245e:	f000 8593 	beq.w	8012f88 <_dtoa_r+0xbb8>
 8012462:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012464:	b963      	cbnz	r3, 8012480 <_dtoa_r+0xb0>
 8012466:	4b97      	ldr	r3, [pc, #604]	; (80126c4 <_dtoa_r+0x2f4>)
 8012468:	e027      	b.n	80124ba <_dtoa_r+0xea>
 801246a:	4b97      	ldr	r3, [pc, #604]	; (80126c8 <_dtoa_r+0x2f8>)
 801246c:	9300      	str	r3, [sp, #0]
 801246e:	3308      	adds	r3, #8
 8012470:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012472:	6013      	str	r3, [r2, #0]
 8012474:	9800      	ldr	r0, [sp, #0]
 8012476:	b013      	add	sp, #76	; 0x4c
 8012478:	ecbd 8b04 	vpop	{d8-d9}
 801247c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012480:	4b90      	ldr	r3, [pc, #576]	; (80126c4 <_dtoa_r+0x2f4>)
 8012482:	9300      	str	r3, [sp, #0]
 8012484:	3303      	adds	r3, #3
 8012486:	e7f3      	b.n	8012470 <_dtoa_r+0xa0>
 8012488:	ed9d 7b02 	vldr	d7, [sp, #8]
 801248c:	2200      	movs	r2, #0
 801248e:	ec51 0b17 	vmov	r0, r1, d7
 8012492:	eeb0 8a47 	vmov.f32	s16, s14
 8012496:	eef0 8a67 	vmov.f32	s17, s15
 801249a:	2300      	movs	r3, #0
 801249c:	f7ee fb44 	bl	8000b28 <__aeabi_dcmpeq>
 80124a0:	4681      	mov	r9, r0
 80124a2:	b160      	cbz	r0, 80124be <_dtoa_r+0xee>
 80124a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80124a6:	2301      	movs	r3, #1
 80124a8:	6013      	str	r3, [r2, #0]
 80124aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	f000 8568 	beq.w	8012f82 <_dtoa_r+0xbb2>
 80124b2:	4b86      	ldr	r3, [pc, #536]	; (80126cc <_dtoa_r+0x2fc>)
 80124b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80124b6:	6013      	str	r3, [r2, #0]
 80124b8:	3b01      	subs	r3, #1
 80124ba:	9300      	str	r3, [sp, #0]
 80124bc:	e7da      	b.n	8012474 <_dtoa_r+0xa4>
 80124be:	aa10      	add	r2, sp, #64	; 0x40
 80124c0:	a911      	add	r1, sp, #68	; 0x44
 80124c2:	4620      	mov	r0, r4
 80124c4:	eeb0 0a48 	vmov.f32	s0, s16
 80124c8:	eef0 0a68 	vmov.f32	s1, s17
 80124cc:	f001 f8e0 	bl	8013690 <__d2b>
 80124d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80124d4:	4682      	mov	sl, r0
 80124d6:	2d00      	cmp	r5, #0
 80124d8:	d07f      	beq.n	80125da <_dtoa_r+0x20a>
 80124da:	ee18 3a90 	vmov	r3, s17
 80124de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80124e2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80124e6:	ec51 0b18 	vmov	r0, r1, d8
 80124ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80124ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80124f2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80124f6:	4619      	mov	r1, r3
 80124f8:	2200      	movs	r2, #0
 80124fa:	4b75      	ldr	r3, [pc, #468]	; (80126d0 <_dtoa_r+0x300>)
 80124fc:	f7ed fef4 	bl	80002e8 <__aeabi_dsub>
 8012500:	a367      	add	r3, pc, #412	; (adr r3, 80126a0 <_dtoa_r+0x2d0>)
 8012502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012506:	f7ee f8a7 	bl	8000658 <__aeabi_dmul>
 801250a:	a367      	add	r3, pc, #412	; (adr r3, 80126a8 <_dtoa_r+0x2d8>)
 801250c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012510:	f7ed feec 	bl	80002ec <__adddf3>
 8012514:	4606      	mov	r6, r0
 8012516:	4628      	mov	r0, r5
 8012518:	460f      	mov	r7, r1
 801251a:	f7ee f833 	bl	8000584 <__aeabi_i2d>
 801251e:	a364      	add	r3, pc, #400	; (adr r3, 80126b0 <_dtoa_r+0x2e0>)
 8012520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012524:	f7ee f898 	bl	8000658 <__aeabi_dmul>
 8012528:	4602      	mov	r2, r0
 801252a:	460b      	mov	r3, r1
 801252c:	4630      	mov	r0, r6
 801252e:	4639      	mov	r1, r7
 8012530:	f7ed fedc 	bl	80002ec <__adddf3>
 8012534:	4606      	mov	r6, r0
 8012536:	460f      	mov	r7, r1
 8012538:	f7ee fb3e 	bl	8000bb8 <__aeabi_d2iz>
 801253c:	2200      	movs	r2, #0
 801253e:	4683      	mov	fp, r0
 8012540:	2300      	movs	r3, #0
 8012542:	4630      	mov	r0, r6
 8012544:	4639      	mov	r1, r7
 8012546:	f7ee faf9 	bl	8000b3c <__aeabi_dcmplt>
 801254a:	b148      	cbz	r0, 8012560 <_dtoa_r+0x190>
 801254c:	4658      	mov	r0, fp
 801254e:	f7ee f819 	bl	8000584 <__aeabi_i2d>
 8012552:	4632      	mov	r2, r6
 8012554:	463b      	mov	r3, r7
 8012556:	f7ee fae7 	bl	8000b28 <__aeabi_dcmpeq>
 801255a:	b908      	cbnz	r0, 8012560 <_dtoa_r+0x190>
 801255c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012560:	f1bb 0f16 	cmp.w	fp, #22
 8012564:	d857      	bhi.n	8012616 <_dtoa_r+0x246>
 8012566:	4b5b      	ldr	r3, [pc, #364]	; (80126d4 <_dtoa_r+0x304>)
 8012568:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801256c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012570:	ec51 0b18 	vmov	r0, r1, d8
 8012574:	f7ee fae2 	bl	8000b3c <__aeabi_dcmplt>
 8012578:	2800      	cmp	r0, #0
 801257a:	d04e      	beq.n	801261a <_dtoa_r+0x24a>
 801257c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012580:	2300      	movs	r3, #0
 8012582:	930c      	str	r3, [sp, #48]	; 0x30
 8012584:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012586:	1b5b      	subs	r3, r3, r5
 8012588:	1e5a      	subs	r2, r3, #1
 801258a:	bf45      	ittet	mi
 801258c:	f1c3 0301 	rsbmi	r3, r3, #1
 8012590:	9305      	strmi	r3, [sp, #20]
 8012592:	2300      	movpl	r3, #0
 8012594:	2300      	movmi	r3, #0
 8012596:	9206      	str	r2, [sp, #24]
 8012598:	bf54      	ite	pl
 801259a:	9305      	strpl	r3, [sp, #20]
 801259c:	9306      	strmi	r3, [sp, #24]
 801259e:	f1bb 0f00 	cmp.w	fp, #0
 80125a2:	db3c      	blt.n	801261e <_dtoa_r+0x24e>
 80125a4:	9b06      	ldr	r3, [sp, #24]
 80125a6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80125aa:	445b      	add	r3, fp
 80125ac:	9306      	str	r3, [sp, #24]
 80125ae:	2300      	movs	r3, #0
 80125b0:	9308      	str	r3, [sp, #32]
 80125b2:	9b07      	ldr	r3, [sp, #28]
 80125b4:	2b09      	cmp	r3, #9
 80125b6:	d868      	bhi.n	801268a <_dtoa_r+0x2ba>
 80125b8:	2b05      	cmp	r3, #5
 80125ba:	bfc4      	itt	gt
 80125bc:	3b04      	subgt	r3, #4
 80125be:	9307      	strgt	r3, [sp, #28]
 80125c0:	9b07      	ldr	r3, [sp, #28]
 80125c2:	f1a3 0302 	sub.w	r3, r3, #2
 80125c6:	bfcc      	ite	gt
 80125c8:	2500      	movgt	r5, #0
 80125ca:	2501      	movle	r5, #1
 80125cc:	2b03      	cmp	r3, #3
 80125ce:	f200 8085 	bhi.w	80126dc <_dtoa_r+0x30c>
 80125d2:	e8df f003 	tbb	[pc, r3]
 80125d6:	3b2e      	.short	0x3b2e
 80125d8:	5839      	.short	0x5839
 80125da:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80125de:	441d      	add	r5, r3
 80125e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80125e4:	2b20      	cmp	r3, #32
 80125e6:	bfc1      	itttt	gt
 80125e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80125ec:	fa08 f803 	lslgt.w	r8, r8, r3
 80125f0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80125f4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80125f8:	bfd6      	itet	le
 80125fa:	f1c3 0320 	rsble	r3, r3, #32
 80125fe:	ea48 0003 	orrgt.w	r0, r8, r3
 8012602:	fa06 f003 	lslle.w	r0, r6, r3
 8012606:	f7ed ffad 	bl	8000564 <__aeabi_ui2d>
 801260a:	2201      	movs	r2, #1
 801260c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8012610:	3d01      	subs	r5, #1
 8012612:	920e      	str	r2, [sp, #56]	; 0x38
 8012614:	e76f      	b.n	80124f6 <_dtoa_r+0x126>
 8012616:	2301      	movs	r3, #1
 8012618:	e7b3      	b.n	8012582 <_dtoa_r+0x1b2>
 801261a:	900c      	str	r0, [sp, #48]	; 0x30
 801261c:	e7b2      	b.n	8012584 <_dtoa_r+0x1b4>
 801261e:	9b05      	ldr	r3, [sp, #20]
 8012620:	eba3 030b 	sub.w	r3, r3, fp
 8012624:	9305      	str	r3, [sp, #20]
 8012626:	f1cb 0300 	rsb	r3, fp, #0
 801262a:	9308      	str	r3, [sp, #32]
 801262c:	2300      	movs	r3, #0
 801262e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012630:	e7bf      	b.n	80125b2 <_dtoa_r+0x1e2>
 8012632:	2300      	movs	r3, #0
 8012634:	9309      	str	r3, [sp, #36]	; 0x24
 8012636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012638:	2b00      	cmp	r3, #0
 801263a:	dc52      	bgt.n	80126e2 <_dtoa_r+0x312>
 801263c:	2301      	movs	r3, #1
 801263e:	9301      	str	r3, [sp, #4]
 8012640:	9304      	str	r3, [sp, #16]
 8012642:	461a      	mov	r2, r3
 8012644:	920a      	str	r2, [sp, #40]	; 0x28
 8012646:	e00b      	b.n	8012660 <_dtoa_r+0x290>
 8012648:	2301      	movs	r3, #1
 801264a:	e7f3      	b.n	8012634 <_dtoa_r+0x264>
 801264c:	2300      	movs	r3, #0
 801264e:	9309      	str	r3, [sp, #36]	; 0x24
 8012650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012652:	445b      	add	r3, fp
 8012654:	9301      	str	r3, [sp, #4]
 8012656:	3301      	adds	r3, #1
 8012658:	2b01      	cmp	r3, #1
 801265a:	9304      	str	r3, [sp, #16]
 801265c:	bfb8      	it	lt
 801265e:	2301      	movlt	r3, #1
 8012660:	69e0      	ldr	r0, [r4, #28]
 8012662:	2100      	movs	r1, #0
 8012664:	2204      	movs	r2, #4
 8012666:	f102 0614 	add.w	r6, r2, #20
 801266a:	429e      	cmp	r6, r3
 801266c:	d93d      	bls.n	80126ea <_dtoa_r+0x31a>
 801266e:	6041      	str	r1, [r0, #4]
 8012670:	4620      	mov	r0, r4
 8012672:	f000 fceb 	bl	801304c <_Balloc>
 8012676:	9000      	str	r0, [sp, #0]
 8012678:	2800      	cmp	r0, #0
 801267a:	d139      	bne.n	80126f0 <_dtoa_r+0x320>
 801267c:	4b16      	ldr	r3, [pc, #88]	; (80126d8 <_dtoa_r+0x308>)
 801267e:	4602      	mov	r2, r0
 8012680:	f240 11af 	movw	r1, #431	; 0x1af
 8012684:	e6bd      	b.n	8012402 <_dtoa_r+0x32>
 8012686:	2301      	movs	r3, #1
 8012688:	e7e1      	b.n	801264e <_dtoa_r+0x27e>
 801268a:	2501      	movs	r5, #1
 801268c:	2300      	movs	r3, #0
 801268e:	9307      	str	r3, [sp, #28]
 8012690:	9509      	str	r5, [sp, #36]	; 0x24
 8012692:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012696:	9301      	str	r3, [sp, #4]
 8012698:	9304      	str	r3, [sp, #16]
 801269a:	2200      	movs	r2, #0
 801269c:	2312      	movs	r3, #18
 801269e:	e7d1      	b.n	8012644 <_dtoa_r+0x274>
 80126a0:	636f4361 	.word	0x636f4361
 80126a4:	3fd287a7 	.word	0x3fd287a7
 80126a8:	8b60c8b3 	.word	0x8b60c8b3
 80126ac:	3fc68a28 	.word	0x3fc68a28
 80126b0:	509f79fb 	.word	0x509f79fb
 80126b4:	3fd34413 	.word	0x3fd34413
 80126b8:	080155c8 	.word	0x080155c8
 80126bc:	080155df 	.word	0x080155df
 80126c0:	7ff00000 	.word	0x7ff00000
 80126c4:	080155c4 	.word	0x080155c4
 80126c8:	080155bb 	.word	0x080155bb
 80126cc:	08015598 	.word	0x08015598
 80126d0:	3ff80000 	.word	0x3ff80000
 80126d4:	080156d0 	.word	0x080156d0
 80126d8:	08015637 	.word	0x08015637
 80126dc:	2301      	movs	r3, #1
 80126de:	9309      	str	r3, [sp, #36]	; 0x24
 80126e0:	e7d7      	b.n	8012692 <_dtoa_r+0x2c2>
 80126e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126e4:	9301      	str	r3, [sp, #4]
 80126e6:	9304      	str	r3, [sp, #16]
 80126e8:	e7ba      	b.n	8012660 <_dtoa_r+0x290>
 80126ea:	3101      	adds	r1, #1
 80126ec:	0052      	lsls	r2, r2, #1
 80126ee:	e7ba      	b.n	8012666 <_dtoa_r+0x296>
 80126f0:	69e3      	ldr	r3, [r4, #28]
 80126f2:	9a00      	ldr	r2, [sp, #0]
 80126f4:	601a      	str	r2, [r3, #0]
 80126f6:	9b04      	ldr	r3, [sp, #16]
 80126f8:	2b0e      	cmp	r3, #14
 80126fa:	f200 80a8 	bhi.w	801284e <_dtoa_r+0x47e>
 80126fe:	2d00      	cmp	r5, #0
 8012700:	f000 80a5 	beq.w	801284e <_dtoa_r+0x47e>
 8012704:	f1bb 0f00 	cmp.w	fp, #0
 8012708:	dd38      	ble.n	801277c <_dtoa_r+0x3ac>
 801270a:	4bc0      	ldr	r3, [pc, #768]	; (8012a0c <_dtoa_r+0x63c>)
 801270c:	f00b 020f 	and.w	r2, fp, #15
 8012710:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012714:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012718:	e9d3 6700 	ldrd	r6, r7, [r3]
 801271c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8012720:	d019      	beq.n	8012756 <_dtoa_r+0x386>
 8012722:	4bbb      	ldr	r3, [pc, #748]	; (8012a10 <_dtoa_r+0x640>)
 8012724:	ec51 0b18 	vmov	r0, r1, d8
 8012728:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801272c:	f7ee f8be 	bl	80008ac <__aeabi_ddiv>
 8012730:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012734:	f008 080f 	and.w	r8, r8, #15
 8012738:	2503      	movs	r5, #3
 801273a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8012a10 <_dtoa_r+0x640>
 801273e:	f1b8 0f00 	cmp.w	r8, #0
 8012742:	d10a      	bne.n	801275a <_dtoa_r+0x38a>
 8012744:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012748:	4632      	mov	r2, r6
 801274a:	463b      	mov	r3, r7
 801274c:	f7ee f8ae 	bl	80008ac <__aeabi_ddiv>
 8012750:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012754:	e02b      	b.n	80127ae <_dtoa_r+0x3de>
 8012756:	2502      	movs	r5, #2
 8012758:	e7ef      	b.n	801273a <_dtoa_r+0x36a>
 801275a:	f018 0f01 	tst.w	r8, #1
 801275e:	d008      	beq.n	8012772 <_dtoa_r+0x3a2>
 8012760:	4630      	mov	r0, r6
 8012762:	4639      	mov	r1, r7
 8012764:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012768:	f7ed ff76 	bl	8000658 <__aeabi_dmul>
 801276c:	3501      	adds	r5, #1
 801276e:	4606      	mov	r6, r0
 8012770:	460f      	mov	r7, r1
 8012772:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012776:	f109 0908 	add.w	r9, r9, #8
 801277a:	e7e0      	b.n	801273e <_dtoa_r+0x36e>
 801277c:	f000 809f 	beq.w	80128be <_dtoa_r+0x4ee>
 8012780:	f1cb 0600 	rsb	r6, fp, #0
 8012784:	4ba1      	ldr	r3, [pc, #644]	; (8012a0c <_dtoa_r+0x63c>)
 8012786:	4fa2      	ldr	r7, [pc, #648]	; (8012a10 <_dtoa_r+0x640>)
 8012788:	f006 020f 	and.w	r2, r6, #15
 801278c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012794:	ec51 0b18 	vmov	r0, r1, d8
 8012798:	f7ed ff5e 	bl	8000658 <__aeabi_dmul>
 801279c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80127a0:	1136      	asrs	r6, r6, #4
 80127a2:	2300      	movs	r3, #0
 80127a4:	2502      	movs	r5, #2
 80127a6:	2e00      	cmp	r6, #0
 80127a8:	d17e      	bne.n	80128a8 <_dtoa_r+0x4d8>
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d1d0      	bne.n	8012750 <_dtoa_r+0x380>
 80127ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80127b0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	f000 8084 	beq.w	80128c2 <_dtoa_r+0x4f2>
 80127ba:	4b96      	ldr	r3, [pc, #600]	; (8012a14 <_dtoa_r+0x644>)
 80127bc:	2200      	movs	r2, #0
 80127be:	4640      	mov	r0, r8
 80127c0:	4649      	mov	r1, r9
 80127c2:	f7ee f9bb 	bl	8000b3c <__aeabi_dcmplt>
 80127c6:	2800      	cmp	r0, #0
 80127c8:	d07b      	beq.n	80128c2 <_dtoa_r+0x4f2>
 80127ca:	9b04      	ldr	r3, [sp, #16]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d078      	beq.n	80128c2 <_dtoa_r+0x4f2>
 80127d0:	9b01      	ldr	r3, [sp, #4]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	dd39      	ble.n	801284a <_dtoa_r+0x47a>
 80127d6:	4b90      	ldr	r3, [pc, #576]	; (8012a18 <_dtoa_r+0x648>)
 80127d8:	2200      	movs	r2, #0
 80127da:	4640      	mov	r0, r8
 80127dc:	4649      	mov	r1, r9
 80127de:	f7ed ff3b 	bl	8000658 <__aeabi_dmul>
 80127e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80127e6:	9e01      	ldr	r6, [sp, #4]
 80127e8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80127ec:	3501      	adds	r5, #1
 80127ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80127f2:	4628      	mov	r0, r5
 80127f4:	f7ed fec6 	bl	8000584 <__aeabi_i2d>
 80127f8:	4642      	mov	r2, r8
 80127fa:	464b      	mov	r3, r9
 80127fc:	f7ed ff2c 	bl	8000658 <__aeabi_dmul>
 8012800:	4b86      	ldr	r3, [pc, #536]	; (8012a1c <_dtoa_r+0x64c>)
 8012802:	2200      	movs	r2, #0
 8012804:	f7ed fd72 	bl	80002ec <__adddf3>
 8012808:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801280c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012810:	9303      	str	r3, [sp, #12]
 8012812:	2e00      	cmp	r6, #0
 8012814:	d158      	bne.n	80128c8 <_dtoa_r+0x4f8>
 8012816:	4b82      	ldr	r3, [pc, #520]	; (8012a20 <_dtoa_r+0x650>)
 8012818:	2200      	movs	r2, #0
 801281a:	4640      	mov	r0, r8
 801281c:	4649      	mov	r1, r9
 801281e:	f7ed fd63 	bl	80002e8 <__aeabi_dsub>
 8012822:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012826:	4680      	mov	r8, r0
 8012828:	4689      	mov	r9, r1
 801282a:	f7ee f9a5 	bl	8000b78 <__aeabi_dcmpgt>
 801282e:	2800      	cmp	r0, #0
 8012830:	f040 8296 	bne.w	8012d60 <_dtoa_r+0x990>
 8012834:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012838:	4640      	mov	r0, r8
 801283a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801283e:	4649      	mov	r1, r9
 8012840:	f7ee f97c 	bl	8000b3c <__aeabi_dcmplt>
 8012844:	2800      	cmp	r0, #0
 8012846:	f040 8289 	bne.w	8012d5c <_dtoa_r+0x98c>
 801284a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801284e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012850:	2b00      	cmp	r3, #0
 8012852:	f2c0 814e 	blt.w	8012af2 <_dtoa_r+0x722>
 8012856:	f1bb 0f0e 	cmp.w	fp, #14
 801285a:	f300 814a 	bgt.w	8012af2 <_dtoa_r+0x722>
 801285e:	4b6b      	ldr	r3, [pc, #428]	; (8012a0c <_dtoa_r+0x63c>)
 8012860:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012864:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801286a:	2b00      	cmp	r3, #0
 801286c:	f280 80dc 	bge.w	8012a28 <_dtoa_r+0x658>
 8012870:	9b04      	ldr	r3, [sp, #16]
 8012872:	2b00      	cmp	r3, #0
 8012874:	f300 80d8 	bgt.w	8012a28 <_dtoa_r+0x658>
 8012878:	f040 826f 	bne.w	8012d5a <_dtoa_r+0x98a>
 801287c:	4b68      	ldr	r3, [pc, #416]	; (8012a20 <_dtoa_r+0x650>)
 801287e:	2200      	movs	r2, #0
 8012880:	4640      	mov	r0, r8
 8012882:	4649      	mov	r1, r9
 8012884:	f7ed fee8 	bl	8000658 <__aeabi_dmul>
 8012888:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801288c:	f7ee f96a 	bl	8000b64 <__aeabi_dcmpge>
 8012890:	9e04      	ldr	r6, [sp, #16]
 8012892:	4637      	mov	r7, r6
 8012894:	2800      	cmp	r0, #0
 8012896:	f040 8245 	bne.w	8012d24 <_dtoa_r+0x954>
 801289a:	9d00      	ldr	r5, [sp, #0]
 801289c:	2331      	movs	r3, #49	; 0x31
 801289e:	f805 3b01 	strb.w	r3, [r5], #1
 80128a2:	f10b 0b01 	add.w	fp, fp, #1
 80128a6:	e241      	b.n	8012d2c <_dtoa_r+0x95c>
 80128a8:	07f2      	lsls	r2, r6, #31
 80128aa:	d505      	bpl.n	80128b8 <_dtoa_r+0x4e8>
 80128ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80128b0:	f7ed fed2 	bl	8000658 <__aeabi_dmul>
 80128b4:	3501      	adds	r5, #1
 80128b6:	2301      	movs	r3, #1
 80128b8:	1076      	asrs	r6, r6, #1
 80128ba:	3708      	adds	r7, #8
 80128bc:	e773      	b.n	80127a6 <_dtoa_r+0x3d6>
 80128be:	2502      	movs	r5, #2
 80128c0:	e775      	b.n	80127ae <_dtoa_r+0x3de>
 80128c2:	9e04      	ldr	r6, [sp, #16]
 80128c4:	465f      	mov	r7, fp
 80128c6:	e792      	b.n	80127ee <_dtoa_r+0x41e>
 80128c8:	9900      	ldr	r1, [sp, #0]
 80128ca:	4b50      	ldr	r3, [pc, #320]	; (8012a0c <_dtoa_r+0x63c>)
 80128cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80128d0:	4431      	add	r1, r6
 80128d2:	9102      	str	r1, [sp, #8]
 80128d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80128d6:	eeb0 9a47 	vmov.f32	s18, s14
 80128da:	eef0 9a67 	vmov.f32	s19, s15
 80128de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80128e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80128e6:	2900      	cmp	r1, #0
 80128e8:	d044      	beq.n	8012974 <_dtoa_r+0x5a4>
 80128ea:	494e      	ldr	r1, [pc, #312]	; (8012a24 <_dtoa_r+0x654>)
 80128ec:	2000      	movs	r0, #0
 80128ee:	f7ed ffdd 	bl	80008ac <__aeabi_ddiv>
 80128f2:	ec53 2b19 	vmov	r2, r3, d9
 80128f6:	f7ed fcf7 	bl	80002e8 <__aeabi_dsub>
 80128fa:	9d00      	ldr	r5, [sp, #0]
 80128fc:	ec41 0b19 	vmov	d9, r0, r1
 8012900:	4649      	mov	r1, r9
 8012902:	4640      	mov	r0, r8
 8012904:	f7ee f958 	bl	8000bb8 <__aeabi_d2iz>
 8012908:	4606      	mov	r6, r0
 801290a:	f7ed fe3b 	bl	8000584 <__aeabi_i2d>
 801290e:	4602      	mov	r2, r0
 8012910:	460b      	mov	r3, r1
 8012912:	4640      	mov	r0, r8
 8012914:	4649      	mov	r1, r9
 8012916:	f7ed fce7 	bl	80002e8 <__aeabi_dsub>
 801291a:	3630      	adds	r6, #48	; 0x30
 801291c:	f805 6b01 	strb.w	r6, [r5], #1
 8012920:	ec53 2b19 	vmov	r2, r3, d9
 8012924:	4680      	mov	r8, r0
 8012926:	4689      	mov	r9, r1
 8012928:	f7ee f908 	bl	8000b3c <__aeabi_dcmplt>
 801292c:	2800      	cmp	r0, #0
 801292e:	d164      	bne.n	80129fa <_dtoa_r+0x62a>
 8012930:	4642      	mov	r2, r8
 8012932:	464b      	mov	r3, r9
 8012934:	4937      	ldr	r1, [pc, #220]	; (8012a14 <_dtoa_r+0x644>)
 8012936:	2000      	movs	r0, #0
 8012938:	f7ed fcd6 	bl	80002e8 <__aeabi_dsub>
 801293c:	ec53 2b19 	vmov	r2, r3, d9
 8012940:	f7ee f8fc 	bl	8000b3c <__aeabi_dcmplt>
 8012944:	2800      	cmp	r0, #0
 8012946:	f040 80b6 	bne.w	8012ab6 <_dtoa_r+0x6e6>
 801294a:	9b02      	ldr	r3, [sp, #8]
 801294c:	429d      	cmp	r5, r3
 801294e:	f43f af7c 	beq.w	801284a <_dtoa_r+0x47a>
 8012952:	4b31      	ldr	r3, [pc, #196]	; (8012a18 <_dtoa_r+0x648>)
 8012954:	ec51 0b19 	vmov	r0, r1, d9
 8012958:	2200      	movs	r2, #0
 801295a:	f7ed fe7d 	bl	8000658 <__aeabi_dmul>
 801295e:	4b2e      	ldr	r3, [pc, #184]	; (8012a18 <_dtoa_r+0x648>)
 8012960:	ec41 0b19 	vmov	d9, r0, r1
 8012964:	2200      	movs	r2, #0
 8012966:	4640      	mov	r0, r8
 8012968:	4649      	mov	r1, r9
 801296a:	f7ed fe75 	bl	8000658 <__aeabi_dmul>
 801296e:	4680      	mov	r8, r0
 8012970:	4689      	mov	r9, r1
 8012972:	e7c5      	b.n	8012900 <_dtoa_r+0x530>
 8012974:	ec51 0b17 	vmov	r0, r1, d7
 8012978:	f7ed fe6e 	bl	8000658 <__aeabi_dmul>
 801297c:	9b02      	ldr	r3, [sp, #8]
 801297e:	9d00      	ldr	r5, [sp, #0]
 8012980:	930f      	str	r3, [sp, #60]	; 0x3c
 8012982:	ec41 0b19 	vmov	d9, r0, r1
 8012986:	4649      	mov	r1, r9
 8012988:	4640      	mov	r0, r8
 801298a:	f7ee f915 	bl	8000bb8 <__aeabi_d2iz>
 801298e:	4606      	mov	r6, r0
 8012990:	f7ed fdf8 	bl	8000584 <__aeabi_i2d>
 8012994:	3630      	adds	r6, #48	; 0x30
 8012996:	4602      	mov	r2, r0
 8012998:	460b      	mov	r3, r1
 801299a:	4640      	mov	r0, r8
 801299c:	4649      	mov	r1, r9
 801299e:	f7ed fca3 	bl	80002e8 <__aeabi_dsub>
 80129a2:	f805 6b01 	strb.w	r6, [r5], #1
 80129a6:	9b02      	ldr	r3, [sp, #8]
 80129a8:	429d      	cmp	r5, r3
 80129aa:	4680      	mov	r8, r0
 80129ac:	4689      	mov	r9, r1
 80129ae:	f04f 0200 	mov.w	r2, #0
 80129b2:	d124      	bne.n	80129fe <_dtoa_r+0x62e>
 80129b4:	4b1b      	ldr	r3, [pc, #108]	; (8012a24 <_dtoa_r+0x654>)
 80129b6:	ec51 0b19 	vmov	r0, r1, d9
 80129ba:	f7ed fc97 	bl	80002ec <__adddf3>
 80129be:	4602      	mov	r2, r0
 80129c0:	460b      	mov	r3, r1
 80129c2:	4640      	mov	r0, r8
 80129c4:	4649      	mov	r1, r9
 80129c6:	f7ee f8d7 	bl	8000b78 <__aeabi_dcmpgt>
 80129ca:	2800      	cmp	r0, #0
 80129cc:	d173      	bne.n	8012ab6 <_dtoa_r+0x6e6>
 80129ce:	ec53 2b19 	vmov	r2, r3, d9
 80129d2:	4914      	ldr	r1, [pc, #80]	; (8012a24 <_dtoa_r+0x654>)
 80129d4:	2000      	movs	r0, #0
 80129d6:	f7ed fc87 	bl	80002e8 <__aeabi_dsub>
 80129da:	4602      	mov	r2, r0
 80129dc:	460b      	mov	r3, r1
 80129de:	4640      	mov	r0, r8
 80129e0:	4649      	mov	r1, r9
 80129e2:	f7ee f8ab 	bl	8000b3c <__aeabi_dcmplt>
 80129e6:	2800      	cmp	r0, #0
 80129e8:	f43f af2f 	beq.w	801284a <_dtoa_r+0x47a>
 80129ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80129ee:	1e6b      	subs	r3, r5, #1
 80129f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80129f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80129f6:	2b30      	cmp	r3, #48	; 0x30
 80129f8:	d0f8      	beq.n	80129ec <_dtoa_r+0x61c>
 80129fa:	46bb      	mov	fp, r7
 80129fc:	e04a      	b.n	8012a94 <_dtoa_r+0x6c4>
 80129fe:	4b06      	ldr	r3, [pc, #24]	; (8012a18 <_dtoa_r+0x648>)
 8012a00:	f7ed fe2a 	bl	8000658 <__aeabi_dmul>
 8012a04:	4680      	mov	r8, r0
 8012a06:	4689      	mov	r9, r1
 8012a08:	e7bd      	b.n	8012986 <_dtoa_r+0x5b6>
 8012a0a:	bf00      	nop
 8012a0c:	080156d0 	.word	0x080156d0
 8012a10:	080156a8 	.word	0x080156a8
 8012a14:	3ff00000 	.word	0x3ff00000
 8012a18:	40240000 	.word	0x40240000
 8012a1c:	401c0000 	.word	0x401c0000
 8012a20:	40140000 	.word	0x40140000
 8012a24:	3fe00000 	.word	0x3fe00000
 8012a28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012a2c:	9d00      	ldr	r5, [sp, #0]
 8012a2e:	4642      	mov	r2, r8
 8012a30:	464b      	mov	r3, r9
 8012a32:	4630      	mov	r0, r6
 8012a34:	4639      	mov	r1, r7
 8012a36:	f7ed ff39 	bl	80008ac <__aeabi_ddiv>
 8012a3a:	f7ee f8bd 	bl	8000bb8 <__aeabi_d2iz>
 8012a3e:	9001      	str	r0, [sp, #4]
 8012a40:	f7ed fda0 	bl	8000584 <__aeabi_i2d>
 8012a44:	4642      	mov	r2, r8
 8012a46:	464b      	mov	r3, r9
 8012a48:	f7ed fe06 	bl	8000658 <__aeabi_dmul>
 8012a4c:	4602      	mov	r2, r0
 8012a4e:	460b      	mov	r3, r1
 8012a50:	4630      	mov	r0, r6
 8012a52:	4639      	mov	r1, r7
 8012a54:	f7ed fc48 	bl	80002e8 <__aeabi_dsub>
 8012a58:	9e01      	ldr	r6, [sp, #4]
 8012a5a:	9f04      	ldr	r7, [sp, #16]
 8012a5c:	3630      	adds	r6, #48	; 0x30
 8012a5e:	f805 6b01 	strb.w	r6, [r5], #1
 8012a62:	9e00      	ldr	r6, [sp, #0]
 8012a64:	1bae      	subs	r6, r5, r6
 8012a66:	42b7      	cmp	r7, r6
 8012a68:	4602      	mov	r2, r0
 8012a6a:	460b      	mov	r3, r1
 8012a6c:	d134      	bne.n	8012ad8 <_dtoa_r+0x708>
 8012a6e:	f7ed fc3d 	bl	80002ec <__adddf3>
 8012a72:	4642      	mov	r2, r8
 8012a74:	464b      	mov	r3, r9
 8012a76:	4606      	mov	r6, r0
 8012a78:	460f      	mov	r7, r1
 8012a7a:	f7ee f87d 	bl	8000b78 <__aeabi_dcmpgt>
 8012a7e:	b9c8      	cbnz	r0, 8012ab4 <_dtoa_r+0x6e4>
 8012a80:	4642      	mov	r2, r8
 8012a82:	464b      	mov	r3, r9
 8012a84:	4630      	mov	r0, r6
 8012a86:	4639      	mov	r1, r7
 8012a88:	f7ee f84e 	bl	8000b28 <__aeabi_dcmpeq>
 8012a8c:	b110      	cbz	r0, 8012a94 <_dtoa_r+0x6c4>
 8012a8e:	9b01      	ldr	r3, [sp, #4]
 8012a90:	07db      	lsls	r3, r3, #31
 8012a92:	d40f      	bmi.n	8012ab4 <_dtoa_r+0x6e4>
 8012a94:	4651      	mov	r1, sl
 8012a96:	4620      	mov	r0, r4
 8012a98:	f000 fb18 	bl	80130cc <_Bfree>
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012aa0:	702b      	strb	r3, [r5, #0]
 8012aa2:	f10b 0301 	add.w	r3, fp, #1
 8012aa6:	6013      	str	r3, [r2, #0]
 8012aa8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	f43f ace2 	beq.w	8012474 <_dtoa_r+0xa4>
 8012ab0:	601d      	str	r5, [r3, #0]
 8012ab2:	e4df      	b.n	8012474 <_dtoa_r+0xa4>
 8012ab4:	465f      	mov	r7, fp
 8012ab6:	462b      	mov	r3, r5
 8012ab8:	461d      	mov	r5, r3
 8012aba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012abe:	2a39      	cmp	r2, #57	; 0x39
 8012ac0:	d106      	bne.n	8012ad0 <_dtoa_r+0x700>
 8012ac2:	9a00      	ldr	r2, [sp, #0]
 8012ac4:	429a      	cmp	r2, r3
 8012ac6:	d1f7      	bne.n	8012ab8 <_dtoa_r+0x6e8>
 8012ac8:	9900      	ldr	r1, [sp, #0]
 8012aca:	2230      	movs	r2, #48	; 0x30
 8012acc:	3701      	adds	r7, #1
 8012ace:	700a      	strb	r2, [r1, #0]
 8012ad0:	781a      	ldrb	r2, [r3, #0]
 8012ad2:	3201      	adds	r2, #1
 8012ad4:	701a      	strb	r2, [r3, #0]
 8012ad6:	e790      	b.n	80129fa <_dtoa_r+0x62a>
 8012ad8:	4ba3      	ldr	r3, [pc, #652]	; (8012d68 <_dtoa_r+0x998>)
 8012ada:	2200      	movs	r2, #0
 8012adc:	f7ed fdbc 	bl	8000658 <__aeabi_dmul>
 8012ae0:	2200      	movs	r2, #0
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	4606      	mov	r6, r0
 8012ae6:	460f      	mov	r7, r1
 8012ae8:	f7ee f81e 	bl	8000b28 <__aeabi_dcmpeq>
 8012aec:	2800      	cmp	r0, #0
 8012aee:	d09e      	beq.n	8012a2e <_dtoa_r+0x65e>
 8012af0:	e7d0      	b.n	8012a94 <_dtoa_r+0x6c4>
 8012af2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012af4:	2a00      	cmp	r2, #0
 8012af6:	f000 80ca 	beq.w	8012c8e <_dtoa_r+0x8be>
 8012afa:	9a07      	ldr	r2, [sp, #28]
 8012afc:	2a01      	cmp	r2, #1
 8012afe:	f300 80ad 	bgt.w	8012c5c <_dtoa_r+0x88c>
 8012b02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012b04:	2a00      	cmp	r2, #0
 8012b06:	f000 80a5 	beq.w	8012c54 <_dtoa_r+0x884>
 8012b0a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012b0e:	9e08      	ldr	r6, [sp, #32]
 8012b10:	9d05      	ldr	r5, [sp, #20]
 8012b12:	9a05      	ldr	r2, [sp, #20]
 8012b14:	441a      	add	r2, r3
 8012b16:	9205      	str	r2, [sp, #20]
 8012b18:	9a06      	ldr	r2, [sp, #24]
 8012b1a:	2101      	movs	r1, #1
 8012b1c:	441a      	add	r2, r3
 8012b1e:	4620      	mov	r0, r4
 8012b20:	9206      	str	r2, [sp, #24]
 8012b22:	f000 fb89 	bl	8013238 <__i2b>
 8012b26:	4607      	mov	r7, r0
 8012b28:	b165      	cbz	r5, 8012b44 <_dtoa_r+0x774>
 8012b2a:	9b06      	ldr	r3, [sp, #24]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	dd09      	ble.n	8012b44 <_dtoa_r+0x774>
 8012b30:	42ab      	cmp	r3, r5
 8012b32:	9a05      	ldr	r2, [sp, #20]
 8012b34:	bfa8      	it	ge
 8012b36:	462b      	movge	r3, r5
 8012b38:	1ad2      	subs	r2, r2, r3
 8012b3a:	9205      	str	r2, [sp, #20]
 8012b3c:	9a06      	ldr	r2, [sp, #24]
 8012b3e:	1aed      	subs	r5, r5, r3
 8012b40:	1ad3      	subs	r3, r2, r3
 8012b42:	9306      	str	r3, [sp, #24]
 8012b44:	9b08      	ldr	r3, [sp, #32]
 8012b46:	b1f3      	cbz	r3, 8012b86 <_dtoa_r+0x7b6>
 8012b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	f000 80a3 	beq.w	8012c96 <_dtoa_r+0x8c6>
 8012b50:	2e00      	cmp	r6, #0
 8012b52:	dd10      	ble.n	8012b76 <_dtoa_r+0x7a6>
 8012b54:	4639      	mov	r1, r7
 8012b56:	4632      	mov	r2, r6
 8012b58:	4620      	mov	r0, r4
 8012b5a:	f000 fc2d 	bl	80133b8 <__pow5mult>
 8012b5e:	4652      	mov	r2, sl
 8012b60:	4601      	mov	r1, r0
 8012b62:	4607      	mov	r7, r0
 8012b64:	4620      	mov	r0, r4
 8012b66:	f000 fb7d 	bl	8013264 <__multiply>
 8012b6a:	4651      	mov	r1, sl
 8012b6c:	4680      	mov	r8, r0
 8012b6e:	4620      	mov	r0, r4
 8012b70:	f000 faac 	bl	80130cc <_Bfree>
 8012b74:	46c2      	mov	sl, r8
 8012b76:	9b08      	ldr	r3, [sp, #32]
 8012b78:	1b9a      	subs	r2, r3, r6
 8012b7a:	d004      	beq.n	8012b86 <_dtoa_r+0x7b6>
 8012b7c:	4651      	mov	r1, sl
 8012b7e:	4620      	mov	r0, r4
 8012b80:	f000 fc1a 	bl	80133b8 <__pow5mult>
 8012b84:	4682      	mov	sl, r0
 8012b86:	2101      	movs	r1, #1
 8012b88:	4620      	mov	r0, r4
 8012b8a:	f000 fb55 	bl	8013238 <__i2b>
 8012b8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	4606      	mov	r6, r0
 8012b94:	f340 8081 	ble.w	8012c9a <_dtoa_r+0x8ca>
 8012b98:	461a      	mov	r2, r3
 8012b9a:	4601      	mov	r1, r0
 8012b9c:	4620      	mov	r0, r4
 8012b9e:	f000 fc0b 	bl	80133b8 <__pow5mult>
 8012ba2:	9b07      	ldr	r3, [sp, #28]
 8012ba4:	2b01      	cmp	r3, #1
 8012ba6:	4606      	mov	r6, r0
 8012ba8:	dd7a      	ble.n	8012ca0 <_dtoa_r+0x8d0>
 8012baa:	f04f 0800 	mov.w	r8, #0
 8012bae:	6933      	ldr	r3, [r6, #16]
 8012bb0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012bb4:	6918      	ldr	r0, [r3, #16]
 8012bb6:	f000 faf1 	bl	801319c <__hi0bits>
 8012bba:	f1c0 0020 	rsb	r0, r0, #32
 8012bbe:	9b06      	ldr	r3, [sp, #24]
 8012bc0:	4418      	add	r0, r3
 8012bc2:	f010 001f 	ands.w	r0, r0, #31
 8012bc6:	f000 8094 	beq.w	8012cf2 <_dtoa_r+0x922>
 8012bca:	f1c0 0320 	rsb	r3, r0, #32
 8012bce:	2b04      	cmp	r3, #4
 8012bd0:	f340 8085 	ble.w	8012cde <_dtoa_r+0x90e>
 8012bd4:	9b05      	ldr	r3, [sp, #20]
 8012bd6:	f1c0 001c 	rsb	r0, r0, #28
 8012bda:	4403      	add	r3, r0
 8012bdc:	9305      	str	r3, [sp, #20]
 8012bde:	9b06      	ldr	r3, [sp, #24]
 8012be0:	4403      	add	r3, r0
 8012be2:	4405      	add	r5, r0
 8012be4:	9306      	str	r3, [sp, #24]
 8012be6:	9b05      	ldr	r3, [sp, #20]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	dd05      	ble.n	8012bf8 <_dtoa_r+0x828>
 8012bec:	4651      	mov	r1, sl
 8012bee:	461a      	mov	r2, r3
 8012bf0:	4620      	mov	r0, r4
 8012bf2:	f000 fc3b 	bl	801346c <__lshift>
 8012bf6:	4682      	mov	sl, r0
 8012bf8:	9b06      	ldr	r3, [sp, #24]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	dd05      	ble.n	8012c0a <_dtoa_r+0x83a>
 8012bfe:	4631      	mov	r1, r6
 8012c00:	461a      	mov	r2, r3
 8012c02:	4620      	mov	r0, r4
 8012c04:	f000 fc32 	bl	801346c <__lshift>
 8012c08:	4606      	mov	r6, r0
 8012c0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d072      	beq.n	8012cf6 <_dtoa_r+0x926>
 8012c10:	4631      	mov	r1, r6
 8012c12:	4650      	mov	r0, sl
 8012c14:	f000 fc96 	bl	8013544 <__mcmp>
 8012c18:	2800      	cmp	r0, #0
 8012c1a:	da6c      	bge.n	8012cf6 <_dtoa_r+0x926>
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	4651      	mov	r1, sl
 8012c20:	220a      	movs	r2, #10
 8012c22:	4620      	mov	r0, r4
 8012c24:	f000 fa74 	bl	8013110 <__multadd>
 8012c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c2a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012c2e:	4682      	mov	sl, r0
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	f000 81b0 	beq.w	8012f96 <_dtoa_r+0xbc6>
 8012c36:	2300      	movs	r3, #0
 8012c38:	4639      	mov	r1, r7
 8012c3a:	220a      	movs	r2, #10
 8012c3c:	4620      	mov	r0, r4
 8012c3e:	f000 fa67 	bl	8013110 <__multadd>
 8012c42:	9b01      	ldr	r3, [sp, #4]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	4607      	mov	r7, r0
 8012c48:	f300 8096 	bgt.w	8012d78 <_dtoa_r+0x9a8>
 8012c4c:	9b07      	ldr	r3, [sp, #28]
 8012c4e:	2b02      	cmp	r3, #2
 8012c50:	dc59      	bgt.n	8012d06 <_dtoa_r+0x936>
 8012c52:	e091      	b.n	8012d78 <_dtoa_r+0x9a8>
 8012c54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012c56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012c5a:	e758      	b.n	8012b0e <_dtoa_r+0x73e>
 8012c5c:	9b04      	ldr	r3, [sp, #16]
 8012c5e:	1e5e      	subs	r6, r3, #1
 8012c60:	9b08      	ldr	r3, [sp, #32]
 8012c62:	42b3      	cmp	r3, r6
 8012c64:	bfbf      	itttt	lt
 8012c66:	9b08      	ldrlt	r3, [sp, #32]
 8012c68:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8012c6a:	9608      	strlt	r6, [sp, #32]
 8012c6c:	1af3      	sublt	r3, r6, r3
 8012c6e:	bfb4      	ite	lt
 8012c70:	18d2      	addlt	r2, r2, r3
 8012c72:	1b9e      	subge	r6, r3, r6
 8012c74:	9b04      	ldr	r3, [sp, #16]
 8012c76:	bfbc      	itt	lt
 8012c78:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8012c7a:	2600      	movlt	r6, #0
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	bfb7      	itett	lt
 8012c80:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8012c84:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8012c88:	1a9d      	sublt	r5, r3, r2
 8012c8a:	2300      	movlt	r3, #0
 8012c8c:	e741      	b.n	8012b12 <_dtoa_r+0x742>
 8012c8e:	9e08      	ldr	r6, [sp, #32]
 8012c90:	9d05      	ldr	r5, [sp, #20]
 8012c92:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012c94:	e748      	b.n	8012b28 <_dtoa_r+0x758>
 8012c96:	9a08      	ldr	r2, [sp, #32]
 8012c98:	e770      	b.n	8012b7c <_dtoa_r+0x7ac>
 8012c9a:	9b07      	ldr	r3, [sp, #28]
 8012c9c:	2b01      	cmp	r3, #1
 8012c9e:	dc19      	bgt.n	8012cd4 <_dtoa_r+0x904>
 8012ca0:	9b02      	ldr	r3, [sp, #8]
 8012ca2:	b9bb      	cbnz	r3, 8012cd4 <_dtoa_r+0x904>
 8012ca4:	9b03      	ldr	r3, [sp, #12]
 8012ca6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012caa:	b99b      	cbnz	r3, 8012cd4 <_dtoa_r+0x904>
 8012cac:	9b03      	ldr	r3, [sp, #12]
 8012cae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012cb2:	0d1b      	lsrs	r3, r3, #20
 8012cb4:	051b      	lsls	r3, r3, #20
 8012cb6:	b183      	cbz	r3, 8012cda <_dtoa_r+0x90a>
 8012cb8:	9b05      	ldr	r3, [sp, #20]
 8012cba:	3301      	adds	r3, #1
 8012cbc:	9305      	str	r3, [sp, #20]
 8012cbe:	9b06      	ldr	r3, [sp, #24]
 8012cc0:	3301      	adds	r3, #1
 8012cc2:	9306      	str	r3, [sp, #24]
 8012cc4:	f04f 0801 	mov.w	r8, #1
 8012cc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	f47f af6f 	bne.w	8012bae <_dtoa_r+0x7de>
 8012cd0:	2001      	movs	r0, #1
 8012cd2:	e774      	b.n	8012bbe <_dtoa_r+0x7ee>
 8012cd4:	f04f 0800 	mov.w	r8, #0
 8012cd8:	e7f6      	b.n	8012cc8 <_dtoa_r+0x8f8>
 8012cda:	4698      	mov	r8, r3
 8012cdc:	e7f4      	b.n	8012cc8 <_dtoa_r+0x8f8>
 8012cde:	d082      	beq.n	8012be6 <_dtoa_r+0x816>
 8012ce0:	9a05      	ldr	r2, [sp, #20]
 8012ce2:	331c      	adds	r3, #28
 8012ce4:	441a      	add	r2, r3
 8012ce6:	9205      	str	r2, [sp, #20]
 8012ce8:	9a06      	ldr	r2, [sp, #24]
 8012cea:	441a      	add	r2, r3
 8012cec:	441d      	add	r5, r3
 8012cee:	9206      	str	r2, [sp, #24]
 8012cf0:	e779      	b.n	8012be6 <_dtoa_r+0x816>
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	e7f4      	b.n	8012ce0 <_dtoa_r+0x910>
 8012cf6:	9b04      	ldr	r3, [sp, #16]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	dc37      	bgt.n	8012d6c <_dtoa_r+0x99c>
 8012cfc:	9b07      	ldr	r3, [sp, #28]
 8012cfe:	2b02      	cmp	r3, #2
 8012d00:	dd34      	ble.n	8012d6c <_dtoa_r+0x99c>
 8012d02:	9b04      	ldr	r3, [sp, #16]
 8012d04:	9301      	str	r3, [sp, #4]
 8012d06:	9b01      	ldr	r3, [sp, #4]
 8012d08:	b963      	cbnz	r3, 8012d24 <_dtoa_r+0x954>
 8012d0a:	4631      	mov	r1, r6
 8012d0c:	2205      	movs	r2, #5
 8012d0e:	4620      	mov	r0, r4
 8012d10:	f000 f9fe 	bl	8013110 <__multadd>
 8012d14:	4601      	mov	r1, r0
 8012d16:	4606      	mov	r6, r0
 8012d18:	4650      	mov	r0, sl
 8012d1a:	f000 fc13 	bl	8013544 <__mcmp>
 8012d1e:	2800      	cmp	r0, #0
 8012d20:	f73f adbb 	bgt.w	801289a <_dtoa_r+0x4ca>
 8012d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d26:	9d00      	ldr	r5, [sp, #0]
 8012d28:	ea6f 0b03 	mvn.w	fp, r3
 8012d2c:	f04f 0800 	mov.w	r8, #0
 8012d30:	4631      	mov	r1, r6
 8012d32:	4620      	mov	r0, r4
 8012d34:	f000 f9ca 	bl	80130cc <_Bfree>
 8012d38:	2f00      	cmp	r7, #0
 8012d3a:	f43f aeab 	beq.w	8012a94 <_dtoa_r+0x6c4>
 8012d3e:	f1b8 0f00 	cmp.w	r8, #0
 8012d42:	d005      	beq.n	8012d50 <_dtoa_r+0x980>
 8012d44:	45b8      	cmp	r8, r7
 8012d46:	d003      	beq.n	8012d50 <_dtoa_r+0x980>
 8012d48:	4641      	mov	r1, r8
 8012d4a:	4620      	mov	r0, r4
 8012d4c:	f000 f9be 	bl	80130cc <_Bfree>
 8012d50:	4639      	mov	r1, r7
 8012d52:	4620      	mov	r0, r4
 8012d54:	f000 f9ba 	bl	80130cc <_Bfree>
 8012d58:	e69c      	b.n	8012a94 <_dtoa_r+0x6c4>
 8012d5a:	2600      	movs	r6, #0
 8012d5c:	4637      	mov	r7, r6
 8012d5e:	e7e1      	b.n	8012d24 <_dtoa_r+0x954>
 8012d60:	46bb      	mov	fp, r7
 8012d62:	4637      	mov	r7, r6
 8012d64:	e599      	b.n	801289a <_dtoa_r+0x4ca>
 8012d66:	bf00      	nop
 8012d68:	40240000 	.word	0x40240000
 8012d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	f000 80c8 	beq.w	8012f04 <_dtoa_r+0xb34>
 8012d74:	9b04      	ldr	r3, [sp, #16]
 8012d76:	9301      	str	r3, [sp, #4]
 8012d78:	2d00      	cmp	r5, #0
 8012d7a:	dd05      	ble.n	8012d88 <_dtoa_r+0x9b8>
 8012d7c:	4639      	mov	r1, r7
 8012d7e:	462a      	mov	r2, r5
 8012d80:	4620      	mov	r0, r4
 8012d82:	f000 fb73 	bl	801346c <__lshift>
 8012d86:	4607      	mov	r7, r0
 8012d88:	f1b8 0f00 	cmp.w	r8, #0
 8012d8c:	d05b      	beq.n	8012e46 <_dtoa_r+0xa76>
 8012d8e:	6879      	ldr	r1, [r7, #4]
 8012d90:	4620      	mov	r0, r4
 8012d92:	f000 f95b 	bl	801304c <_Balloc>
 8012d96:	4605      	mov	r5, r0
 8012d98:	b928      	cbnz	r0, 8012da6 <_dtoa_r+0x9d6>
 8012d9a:	4b83      	ldr	r3, [pc, #524]	; (8012fa8 <_dtoa_r+0xbd8>)
 8012d9c:	4602      	mov	r2, r0
 8012d9e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8012da2:	f7ff bb2e 	b.w	8012402 <_dtoa_r+0x32>
 8012da6:	693a      	ldr	r2, [r7, #16]
 8012da8:	3202      	adds	r2, #2
 8012daa:	0092      	lsls	r2, r2, #2
 8012dac:	f107 010c 	add.w	r1, r7, #12
 8012db0:	300c      	adds	r0, #12
 8012db2:	f7ff fa76 	bl	80122a2 <memcpy>
 8012db6:	2201      	movs	r2, #1
 8012db8:	4629      	mov	r1, r5
 8012dba:	4620      	mov	r0, r4
 8012dbc:	f000 fb56 	bl	801346c <__lshift>
 8012dc0:	9b00      	ldr	r3, [sp, #0]
 8012dc2:	3301      	adds	r3, #1
 8012dc4:	9304      	str	r3, [sp, #16]
 8012dc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012dca:	4413      	add	r3, r2
 8012dcc:	9308      	str	r3, [sp, #32]
 8012dce:	9b02      	ldr	r3, [sp, #8]
 8012dd0:	f003 0301 	and.w	r3, r3, #1
 8012dd4:	46b8      	mov	r8, r7
 8012dd6:	9306      	str	r3, [sp, #24]
 8012dd8:	4607      	mov	r7, r0
 8012dda:	9b04      	ldr	r3, [sp, #16]
 8012ddc:	4631      	mov	r1, r6
 8012dde:	3b01      	subs	r3, #1
 8012de0:	4650      	mov	r0, sl
 8012de2:	9301      	str	r3, [sp, #4]
 8012de4:	f7ff fa6b 	bl	80122be <quorem>
 8012de8:	4641      	mov	r1, r8
 8012dea:	9002      	str	r0, [sp, #8]
 8012dec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8012df0:	4650      	mov	r0, sl
 8012df2:	f000 fba7 	bl	8013544 <__mcmp>
 8012df6:	463a      	mov	r2, r7
 8012df8:	9005      	str	r0, [sp, #20]
 8012dfa:	4631      	mov	r1, r6
 8012dfc:	4620      	mov	r0, r4
 8012dfe:	f000 fbbd 	bl	801357c <__mdiff>
 8012e02:	68c2      	ldr	r2, [r0, #12]
 8012e04:	4605      	mov	r5, r0
 8012e06:	bb02      	cbnz	r2, 8012e4a <_dtoa_r+0xa7a>
 8012e08:	4601      	mov	r1, r0
 8012e0a:	4650      	mov	r0, sl
 8012e0c:	f000 fb9a 	bl	8013544 <__mcmp>
 8012e10:	4602      	mov	r2, r0
 8012e12:	4629      	mov	r1, r5
 8012e14:	4620      	mov	r0, r4
 8012e16:	9209      	str	r2, [sp, #36]	; 0x24
 8012e18:	f000 f958 	bl	80130cc <_Bfree>
 8012e1c:	9b07      	ldr	r3, [sp, #28]
 8012e1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012e20:	9d04      	ldr	r5, [sp, #16]
 8012e22:	ea43 0102 	orr.w	r1, r3, r2
 8012e26:	9b06      	ldr	r3, [sp, #24]
 8012e28:	4319      	orrs	r1, r3
 8012e2a:	d110      	bne.n	8012e4e <_dtoa_r+0xa7e>
 8012e2c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012e30:	d029      	beq.n	8012e86 <_dtoa_r+0xab6>
 8012e32:	9b05      	ldr	r3, [sp, #20]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	dd02      	ble.n	8012e3e <_dtoa_r+0xa6e>
 8012e38:	9b02      	ldr	r3, [sp, #8]
 8012e3a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8012e3e:	9b01      	ldr	r3, [sp, #4]
 8012e40:	f883 9000 	strb.w	r9, [r3]
 8012e44:	e774      	b.n	8012d30 <_dtoa_r+0x960>
 8012e46:	4638      	mov	r0, r7
 8012e48:	e7ba      	b.n	8012dc0 <_dtoa_r+0x9f0>
 8012e4a:	2201      	movs	r2, #1
 8012e4c:	e7e1      	b.n	8012e12 <_dtoa_r+0xa42>
 8012e4e:	9b05      	ldr	r3, [sp, #20]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	db04      	blt.n	8012e5e <_dtoa_r+0xa8e>
 8012e54:	9907      	ldr	r1, [sp, #28]
 8012e56:	430b      	orrs	r3, r1
 8012e58:	9906      	ldr	r1, [sp, #24]
 8012e5a:	430b      	orrs	r3, r1
 8012e5c:	d120      	bne.n	8012ea0 <_dtoa_r+0xad0>
 8012e5e:	2a00      	cmp	r2, #0
 8012e60:	dded      	ble.n	8012e3e <_dtoa_r+0xa6e>
 8012e62:	4651      	mov	r1, sl
 8012e64:	2201      	movs	r2, #1
 8012e66:	4620      	mov	r0, r4
 8012e68:	f000 fb00 	bl	801346c <__lshift>
 8012e6c:	4631      	mov	r1, r6
 8012e6e:	4682      	mov	sl, r0
 8012e70:	f000 fb68 	bl	8013544 <__mcmp>
 8012e74:	2800      	cmp	r0, #0
 8012e76:	dc03      	bgt.n	8012e80 <_dtoa_r+0xab0>
 8012e78:	d1e1      	bne.n	8012e3e <_dtoa_r+0xa6e>
 8012e7a:	f019 0f01 	tst.w	r9, #1
 8012e7e:	d0de      	beq.n	8012e3e <_dtoa_r+0xa6e>
 8012e80:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012e84:	d1d8      	bne.n	8012e38 <_dtoa_r+0xa68>
 8012e86:	9a01      	ldr	r2, [sp, #4]
 8012e88:	2339      	movs	r3, #57	; 0x39
 8012e8a:	7013      	strb	r3, [r2, #0]
 8012e8c:	462b      	mov	r3, r5
 8012e8e:	461d      	mov	r5, r3
 8012e90:	3b01      	subs	r3, #1
 8012e92:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012e96:	2a39      	cmp	r2, #57	; 0x39
 8012e98:	d06c      	beq.n	8012f74 <_dtoa_r+0xba4>
 8012e9a:	3201      	adds	r2, #1
 8012e9c:	701a      	strb	r2, [r3, #0]
 8012e9e:	e747      	b.n	8012d30 <_dtoa_r+0x960>
 8012ea0:	2a00      	cmp	r2, #0
 8012ea2:	dd07      	ble.n	8012eb4 <_dtoa_r+0xae4>
 8012ea4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012ea8:	d0ed      	beq.n	8012e86 <_dtoa_r+0xab6>
 8012eaa:	9a01      	ldr	r2, [sp, #4]
 8012eac:	f109 0301 	add.w	r3, r9, #1
 8012eb0:	7013      	strb	r3, [r2, #0]
 8012eb2:	e73d      	b.n	8012d30 <_dtoa_r+0x960>
 8012eb4:	9b04      	ldr	r3, [sp, #16]
 8012eb6:	9a08      	ldr	r2, [sp, #32]
 8012eb8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8012ebc:	4293      	cmp	r3, r2
 8012ebe:	d043      	beq.n	8012f48 <_dtoa_r+0xb78>
 8012ec0:	4651      	mov	r1, sl
 8012ec2:	2300      	movs	r3, #0
 8012ec4:	220a      	movs	r2, #10
 8012ec6:	4620      	mov	r0, r4
 8012ec8:	f000 f922 	bl	8013110 <__multadd>
 8012ecc:	45b8      	cmp	r8, r7
 8012ece:	4682      	mov	sl, r0
 8012ed0:	f04f 0300 	mov.w	r3, #0
 8012ed4:	f04f 020a 	mov.w	r2, #10
 8012ed8:	4641      	mov	r1, r8
 8012eda:	4620      	mov	r0, r4
 8012edc:	d107      	bne.n	8012eee <_dtoa_r+0xb1e>
 8012ede:	f000 f917 	bl	8013110 <__multadd>
 8012ee2:	4680      	mov	r8, r0
 8012ee4:	4607      	mov	r7, r0
 8012ee6:	9b04      	ldr	r3, [sp, #16]
 8012ee8:	3301      	adds	r3, #1
 8012eea:	9304      	str	r3, [sp, #16]
 8012eec:	e775      	b.n	8012dda <_dtoa_r+0xa0a>
 8012eee:	f000 f90f 	bl	8013110 <__multadd>
 8012ef2:	4639      	mov	r1, r7
 8012ef4:	4680      	mov	r8, r0
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	220a      	movs	r2, #10
 8012efa:	4620      	mov	r0, r4
 8012efc:	f000 f908 	bl	8013110 <__multadd>
 8012f00:	4607      	mov	r7, r0
 8012f02:	e7f0      	b.n	8012ee6 <_dtoa_r+0xb16>
 8012f04:	9b04      	ldr	r3, [sp, #16]
 8012f06:	9301      	str	r3, [sp, #4]
 8012f08:	9d00      	ldr	r5, [sp, #0]
 8012f0a:	4631      	mov	r1, r6
 8012f0c:	4650      	mov	r0, sl
 8012f0e:	f7ff f9d6 	bl	80122be <quorem>
 8012f12:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8012f16:	9b00      	ldr	r3, [sp, #0]
 8012f18:	f805 9b01 	strb.w	r9, [r5], #1
 8012f1c:	1aea      	subs	r2, r5, r3
 8012f1e:	9b01      	ldr	r3, [sp, #4]
 8012f20:	4293      	cmp	r3, r2
 8012f22:	dd07      	ble.n	8012f34 <_dtoa_r+0xb64>
 8012f24:	4651      	mov	r1, sl
 8012f26:	2300      	movs	r3, #0
 8012f28:	220a      	movs	r2, #10
 8012f2a:	4620      	mov	r0, r4
 8012f2c:	f000 f8f0 	bl	8013110 <__multadd>
 8012f30:	4682      	mov	sl, r0
 8012f32:	e7ea      	b.n	8012f0a <_dtoa_r+0xb3a>
 8012f34:	9b01      	ldr	r3, [sp, #4]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	bfc8      	it	gt
 8012f3a:	461d      	movgt	r5, r3
 8012f3c:	9b00      	ldr	r3, [sp, #0]
 8012f3e:	bfd8      	it	le
 8012f40:	2501      	movle	r5, #1
 8012f42:	441d      	add	r5, r3
 8012f44:	f04f 0800 	mov.w	r8, #0
 8012f48:	4651      	mov	r1, sl
 8012f4a:	2201      	movs	r2, #1
 8012f4c:	4620      	mov	r0, r4
 8012f4e:	f000 fa8d 	bl	801346c <__lshift>
 8012f52:	4631      	mov	r1, r6
 8012f54:	4682      	mov	sl, r0
 8012f56:	f000 faf5 	bl	8013544 <__mcmp>
 8012f5a:	2800      	cmp	r0, #0
 8012f5c:	dc96      	bgt.n	8012e8c <_dtoa_r+0xabc>
 8012f5e:	d102      	bne.n	8012f66 <_dtoa_r+0xb96>
 8012f60:	f019 0f01 	tst.w	r9, #1
 8012f64:	d192      	bne.n	8012e8c <_dtoa_r+0xabc>
 8012f66:	462b      	mov	r3, r5
 8012f68:	461d      	mov	r5, r3
 8012f6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012f6e:	2a30      	cmp	r2, #48	; 0x30
 8012f70:	d0fa      	beq.n	8012f68 <_dtoa_r+0xb98>
 8012f72:	e6dd      	b.n	8012d30 <_dtoa_r+0x960>
 8012f74:	9a00      	ldr	r2, [sp, #0]
 8012f76:	429a      	cmp	r2, r3
 8012f78:	d189      	bne.n	8012e8e <_dtoa_r+0xabe>
 8012f7a:	f10b 0b01 	add.w	fp, fp, #1
 8012f7e:	2331      	movs	r3, #49	; 0x31
 8012f80:	e796      	b.n	8012eb0 <_dtoa_r+0xae0>
 8012f82:	4b0a      	ldr	r3, [pc, #40]	; (8012fac <_dtoa_r+0xbdc>)
 8012f84:	f7ff ba99 	b.w	80124ba <_dtoa_r+0xea>
 8012f88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	f47f aa6d 	bne.w	801246a <_dtoa_r+0x9a>
 8012f90:	4b07      	ldr	r3, [pc, #28]	; (8012fb0 <_dtoa_r+0xbe0>)
 8012f92:	f7ff ba92 	b.w	80124ba <_dtoa_r+0xea>
 8012f96:	9b01      	ldr	r3, [sp, #4]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	dcb5      	bgt.n	8012f08 <_dtoa_r+0xb38>
 8012f9c:	9b07      	ldr	r3, [sp, #28]
 8012f9e:	2b02      	cmp	r3, #2
 8012fa0:	f73f aeb1 	bgt.w	8012d06 <_dtoa_r+0x936>
 8012fa4:	e7b0      	b.n	8012f08 <_dtoa_r+0xb38>
 8012fa6:	bf00      	nop
 8012fa8:	08015637 	.word	0x08015637
 8012fac:	08015597 	.word	0x08015597
 8012fb0:	080155bb 	.word	0x080155bb

08012fb4 <_free_r>:
 8012fb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012fb6:	2900      	cmp	r1, #0
 8012fb8:	d044      	beq.n	8013044 <_free_r+0x90>
 8012fba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012fbe:	9001      	str	r0, [sp, #4]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	f1a1 0404 	sub.w	r4, r1, #4
 8012fc6:	bfb8      	it	lt
 8012fc8:	18e4      	addlt	r4, r4, r3
 8012fca:	f7fe fb1f 	bl	801160c <__malloc_lock>
 8012fce:	4a1e      	ldr	r2, [pc, #120]	; (8013048 <_free_r+0x94>)
 8012fd0:	9801      	ldr	r0, [sp, #4]
 8012fd2:	6813      	ldr	r3, [r2, #0]
 8012fd4:	b933      	cbnz	r3, 8012fe4 <_free_r+0x30>
 8012fd6:	6063      	str	r3, [r4, #4]
 8012fd8:	6014      	str	r4, [r2, #0]
 8012fda:	b003      	add	sp, #12
 8012fdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012fe0:	f7fe bb1a 	b.w	8011618 <__malloc_unlock>
 8012fe4:	42a3      	cmp	r3, r4
 8012fe6:	d908      	bls.n	8012ffa <_free_r+0x46>
 8012fe8:	6825      	ldr	r5, [r4, #0]
 8012fea:	1961      	adds	r1, r4, r5
 8012fec:	428b      	cmp	r3, r1
 8012fee:	bf01      	itttt	eq
 8012ff0:	6819      	ldreq	r1, [r3, #0]
 8012ff2:	685b      	ldreq	r3, [r3, #4]
 8012ff4:	1949      	addeq	r1, r1, r5
 8012ff6:	6021      	streq	r1, [r4, #0]
 8012ff8:	e7ed      	b.n	8012fd6 <_free_r+0x22>
 8012ffa:	461a      	mov	r2, r3
 8012ffc:	685b      	ldr	r3, [r3, #4]
 8012ffe:	b10b      	cbz	r3, 8013004 <_free_r+0x50>
 8013000:	42a3      	cmp	r3, r4
 8013002:	d9fa      	bls.n	8012ffa <_free_r+0x46>
 8013004:	6811      	ldr	r1, [r2, #0]
 8013006:	1855      	adds	r5, r2, r1
 8013008:	42a5      	cmp	r5, r4
 801300a:	d10b      	bne.n	8013024 <_free_r+0x70>
 801300c:	6824      	ldr	r4, [r4, #0]
 801300e:	4421      	add	r1, r4
 8013010:	1854      	adds	r4, r2, r1
 8013012:	42a3      	cmp	r3, r4
 8013014:	6011      	str	r1, [r2, #0]
 8013016:	d1e0      	bne.n	8012fda <_free_r+0x26>
 8013018:	681c      	ldr	r4, [r3, #0]
 801301a:	685b      	ldr	r3, [r3, #4]
 801301c:	6053      	str	r3, [r2, #4]
 801301e:	440c      	add	r4, r1
 8013020:	6014      	str	r4, [r2, #0]
 8013022:	e7da      	b.n	8012fda <_free_r+0x26>
 8013024:	d902      	bls.n	801302c <_free_r+0x78>
 8013026:	230c      	movs	r3, #12
 8013028:	6003      	str	r3, [r0, #0]
 801302a:	e7d6      	b.n	8012fda <_free_r+0x26>
 801302c:	6825      	ldr	r5, [r4, #0]
 801302e:	1961      	adds	r1, r4, r5
 8013030:	428b      	cmp	r3, r1
 8013032:	bf04      	itt	eq
 8013034:	6819      	ldreq	r1, [r3, #0]
 8013036:	685b      	ldreq	r3, [r3, #4]
 8013038:	6063      	str	r3, [r4, #4]
 801303a:	bf04      	itt	eq
 801303c:	1949      	addeq	r1, r1, r5
 801303e:	6021      	streq	r1, [r4, #0]
 8013040:	6054      	str	r4, [r2, #4]
 8013042:	e7ca      	b.n	8012fda <_free_r+0x26>
 8013044:	b003      	add	sp, #12
 8013046:	bd30      	pop	{r4, r5, pc}
 8013048:	200003ec 	.word	0x200003ec

0801304c <_Balloc>:
 801304c:	b570      	push	{r4, r5, r6, lr}
 801304e:	69c6      	ldr	r6, [r0, #28]
 8013050:	4604      	mov	r4, r0
 8013052:	460d      	mov	r5, r1
 8013054:	b976      	cbnz	r6, 8013074 <_Balloc+0x28>
 8013056:	2010      	movs	r0, #16
 8013058:	f7fe fa28 	bl	80114ac <malloc>
 801305c:	4602      	mov	r2, r0
 801305e:	61e0      	str	r0, [r4, #28]
 8013060:	b920      	cbnz	r0, 801306c <_Balloc+0x20>
 8013062:	4b18      	ldr	r3, [pc, #96]	; (80130c4 <_Balloc+0x78>)
 8013064:	4818      	ldr	r0, [pc, #96]	; (80130c8 <_Balloc+0x7c>)
 8013066:	216b      	movs	r1, #107	; 0x6b
 8013068:	f000 fc1a 	bl	80138a0 <__assert_func>
 801306c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013070:	6006      	str	r6, [r0, #0]
 8013072:	60c6      	str	r6, [r0, #12]
 8013074:	69e6      	ldr	r6, [r4, #28]
 8013076:	68f3      	ldr	r3, [r6, #12]
 8013078:	b183      	cbz	r3, 801309c <_Balloc+0x50>
 801307a:	69e3      	ldr	r3, [r4, #28]
 801307c:	68db      	ldr	r3, [r3, #12]
 801307e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013082:	b9b8      	cbnz	r0, 80130b4 <_Balloc+0x68>
 8013084:	2101      	movs	r1, #1
 8013086:	fa01 f605 	lsl.w	r6, r1, r5
 801308a:	1d72      	adds	r2, r6, #5
 801308c:	0092      	lsls	r2, r2, #2
 801308e:	4620      	mov	r0, r4
 8013090:	f000 fc24 	bl	80138dc <_calloc_r>
 8013094:	b160      	cbz	r0, 80130b0 <_Balloc+0x64>
 8013096:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801309a:	e00e      	b.n	80130ba <_Balloc+0x6e>
 801309c:	2221      	movs	r2, #33	; 0x21
 801309e:	2104      	movs	r1, #4
 80130a0:	4620      	mov	r0, r4
 80130a2:	f000 fc1b 	bl	80138dc <_calloc_r>
 80130a6:	69e3      	ldr	r3, [r4, #28]
 80130a8:	60f0      	str	r0, [r6, #12]
 80130aa:	68db      	ldr	r3, [r3, #12]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d1e4      	bne.n	801307a <_Balloc+0x2e>
 80130b0:	2000      	movs	r0, #0
 80130b2:	bd70      	pop	{r4, r5, r6, pc}
 80130b4:	6802      	ldr	r2, [r0, #0]
 80130b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80130ba:	2300      	movs	r3, #0
 80130bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80130c0:	e7f7      	b.n	80130b2 <_Balloc+0x66>
 80130c2:	bf00      	nop
 80130c4:	080155c8 	.word	0x080155c8
 80130c8:	08015648 	.word	0x08015648

080130cc <_Bfree>:
 80130cc:	b570      	push	{r4, r5, r6, lr}
 80130ce:	69c6      	ldr	r6, [r0, #28]
 80130d0:	4605      	mov	r5, r0
 80130d2:	460c      	mov	r4, r1
 80130d4:	b976      	cbnz	r6, 80130f4 <_Bfree+0x28>
 80130d6:	2010      	movs	r0, #16
 80130d8:	f7fe f9e8 	bl	80114ac <malloc>
 80130dc:	4602      	mov	r2, r0
 80130de:	61e8      	str	r0, [r5, #28]
 80130e0:	b920      	cbnz	r0, 80130ec <_Bfree+0x20>
 80130e2:	4b09      	ldr	r3, [pc, #36]	; (8013108 <_Bfree+0x3c>)
 80130e4:	4809      	ldr	r0, [pc, #36]	; (801310c <_Bfree+0x40>)
 80130e6:	218f      	movs	r1, #143	; 0x8f
 80130e8:	f000 fbda 	bl	80138a0 <__assert_func>
 80130ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80130f0:	6006      	str	r6, [r0, #0]
 80130f2:	60c6      	str	r6, [r0, #12]
 80130f4:	b13c      	cbz	r4, 8013106 <_Bfree+0x3a>
 80130f6:	69eb      	ldr	r3, [r5, #28]
 80130f8:	6862      	ldr	r2, [r4, #4]
 80130fa:	68db      	ldr	r3, [r3, #12]
 80130fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013100:	6021      	str	r1, [r4, #0]
 8013102:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013106:	bd70      	pop	{r4, r5, r6, pc}
 8013108:	080155c8 	.word	0x080155c8
 801310c:	08015648 	.word	0x08015648

08013110 <__multadd>:
 8013110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013114:	690d      	ldr	r5, [r1, #16]
 8013116:	4607      	mov	r7, r0
 8013118:	460c      	mov	r4, r1
 801311a:	461e      	mov	r6, r3
 801311c:	f101 0c14 	add.w	ip, r1, #20
 8013120:	2000      	movs	r0, #0
 8013122:	f8dc 3000 	ldr.w	r3, [ip]
 8013126:	b299      	uxth	r1, r3
 8013128:	fb02 6101 	mla	r1, r2, r1, r6
 801312c:	0c1e      	lsrs	r6, r3, #16
 801312e:	0c0b      	lsrs	r3, r1, #16
 8013130:	fb02 3306 	mla	r3, r2, r6, r3
 8013134:	b289      	uxth	r1, r1
 8013136:	3001      	adds	r0, #1
 8013138:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801313c:	4285      	cmp	r5, r0
 801313e:	f84c 1b04 	str.w	r1, [ip], #4
 8013142:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013146:	dcec      	bgt.n	8013122 <__multadd+0x12>
 8013148:	b30e      	cbz	r6, 801318e <__multadd+0x7e>
 801314a:	68a3      	ldr	r3, [r4, #8]
 801314c:	42ab      	cmp	r3, r5
 801314e:	dc19      	bgt.n	8013184 <__multadd+0x74>
 8013150:	6861      	ldr	r1, [r4, #4]
 8013152:	4638      	mov	r0, r7
 8013154:	3101      	adds	r1, #1
 8013156:	f7ff ff79 	bl	801304c <_Balloc>
 801315a:	4680      	mov	r8, r0
 801315c:	b928      	cbnz	r0, 801316a <__multadd+0x5a>
 801315e:	4602      	mov	r2, r0
 8013160:	4b0c      	ldr	r3, [pc, #48]	; (8013194 <__multadd+0x84>)
 8013162:	480d      	ldr	r0, [pc, #52]	; (8013198 <__multadd+0x88>)
 8013164:	21ba      	movs	r1, #186	; 0xba
 8013166:	f000 fb9b 	bl	80138a0 <__assert_func>
 801316a:	6922      	ldr	r2, [r4, #16]
 801316c:	3202      	adds	r2, #2
 801316e:	f104 010c 	add.w	r1, r4, #12
 8013172:	0092      	lsls	r2, r2, #2
 8013174:	300c      	adds	r0, #12
 8013176:	f7ff f894 	bl	80122a2 <memcpy>
 801317a:	4621      	mov	r1, r4
 801317c:	4638      	mov	r0, r7
 801317e:	f7ff ffa5 	bl	80130cc <_Bfree>
 8013182:	4644      	mov	r4, r8
 8013184:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013188:	3501      	adds	r5, #1
 801318a:	615e      	str	r6, [r3, #20]
 801318c:	6125      	str	r5, [r4, #16]
 801318e:	4620      	mov	r0, r4
 8013190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013194:	08015637 	.word	0x08015637
 8013198:	08015648 	.word	0x08015648

0801319c <__hi0bits>:
 801319c:	0c03      	lsrs	r3, r0, #16
 801319e:	041b      	lsls	r3, r3, #16
 80131a0:	b9d3      	cbnz	r3, 80131d8 <__hi0bits+0x3c>
 80131a2:	0400      	lsls	r0, r0, #16
 80131a4:	2310      	movs	r3, #16
 80131a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80131aa:	bf04      	itt	eq
 80131ac:	0200      	lsleq	r0, r0, #8
 80131ae:	3308      	addeq	r3, #8
 80131b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80131b4:	bf04      	itt	eq
 80131b6:	0100      	lsleq	r0, r0, #4
 80131b8:	3304      	addeq	r3, #4
 80131ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80131be:	bf04      	itt	eq
 80131c0:	0080      	lsleq	r0, r0, #2
 80131c2:	3302      	addeq	r3, #2
 80131c4:	2800      	cmp	r0, #0
 80131c6:	db05      	blt.n	80131d4 <__hi0bits+0x38>
 80131c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80131cc:	f103 0301 	add.w	r3, r3, #1
 80131d0:	bf08      	it	eq
 80131d2:	2320      	moveq	r3, #32
 80131d4:	4618      	mov	r0, r3
 80131d6:	4770      	bx	lr
 80131d8:	2300      	movs	r3, #0
 80131da:	e7e4      	b.n	80131a6 <__hi0bits+0xa>

080131dc <__lo0bits>:
 80131dc:	6803      	ldr	r3, [r0, #0]
 80131de:	f013 0207 	ands.w	r2, r3, #7
 80131e2:	d00c      	beq.n	80131fe <__lo0bits+0x22>
 80131e4:	07d9      	lsls	r1, r3, #31
 80131e6:	d422      	bmi.n	801322e <__lo0bits+0x52>
 80131e8:	079a      	lsls	r2, r3, #30
 80131ea:	bf49      	itett	mi
 80131ec:	085b      	lsrmi	r3, r3, #1
 80131ee:	089b      	lsrpl	r3, r3, #2
 80131f0:	6003      	strmi	r3, [r0, #0]
 80131f2:	2201      	movmi	r2, #1
 80131f4:	bf5c      	itt	pl
 80131f6:	6003      	strpl	r3, [r0, #0]
 80131f8:	2202      	movpl	r2, #2
 80131fa:	4610      	mov	r0, r2
 80131fc:	4770      	bx	lr
 80131fe:	b299      	uxth	r1, r3
 8013200:	b909      	cbnz	r1, 8013206 <__lo0bits+0x2a>
 8013202:	0c1b      	lsrs	r3, r3, #16
 8013204:	2210      	movs	r2, #16
 8013206:	b2d9      	uxtb	r1, r3
 8013208:	b909      	cbnz	r1, 801320e <__lo0bits+0x32>
 801320a:	3208      	adds	r2, #8
 801320c:	0a1b      	lsrs	r3, r3, #8
 801320e:	0719      	lsls	r1, r3, #28
 8013210:	bf04      	itt	eq
 8013212:	091b      	lsreq	r3, r3, #4
 8013214:	3204      	addeq	r2, #4
 8013216:	0799      	lsls	r1, r3, #30
 8013218:	bf04      	itt	eq
 801321a:	089b      	lsreq	r3, r3, #2
 801321c:	3202      	addeq	r2, #2
 801321e:	07d9      	lsls	r1, r3, #31
 8013220:	d403      	bmi.n	801322a <__lo0bits+0x4e>
 8013222:	085b      	lsrs	r3, r3, #1
 8013224:	f102 0201 	add.w	r2, r2, #1
 8013228:	d003      	beq.n	8013232 <__lo0bits+0x56>
 801322a:	6003      	str	r3, [r0, #0]
 801322c:	e7e5      	b.n	80131fa <__lo0bits+0x1e>
 801322e:	2200      	movs	r2, #0
 8013230:	e7e3      	b.n	80131fa <__lo0bits+0x1e>
 8013232:	2220      	movs	r2, #32
 8013234:	e7e1      	b.n	80131fa <__lo0bits+0x1e>
	...

08013238 <__i2b>:
 8013238:	b510      	push	{r4, lr}
 801323a:	460c      	mov	r4, r1
 801323c:	2101      	movs	r1, #1
 801323e:	f7ff ff05 	bl	801304c <_Balloc>
 8013242:	4602      	mov	r2, r0
 8013244:	b928      	cbnz	r0, 8013252 <__i2b+0x1a>
 8013246:	4b05      	ldr	r3, [pc, #20]	; (801325c <__i2b+0x24>)
 8013248:	4805      	ldr	r0, [pc, #20]	; (8013260 <__i2b+0x28>)
 801324a:	f240 1145 	movw	r1, #325	; 0x145
 801324e:	f000 fb27 	bl	80138a0 <__assert_func>
 8013252:	2301      	movs	r3, #1
 8013254:	6144      	str	r4, [r0, #20]
 8013256:	6103      	str	r3, [r0, #16]
 8013258:	bd10      	pop	{r4, pc}
 801325a:	bf00      	nop
 801325c:	08015637 	.word	0x08015637
 8013260:	08015648 	.word	0x08015648

08013264 <__multiply>:
 8013264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013268:	4691      	mov	r9, r2
 801326a:	690a      	ldr	r2, [r1, #16]
 801326c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013270:	429a      	cmp	r2, r3
 8013272:	bfb8      	it	lt
 8013274:	460b      	movlt	r3, r1
 8013276:	460c      	mov	r4, r1
 8013278:	bfbc      	itt	lt
 801327a:	464c      	movlt	r4, r9
 801327c:	4699      	movlt	r9, r3
 801327e:	6927      	ldr	r7, [r4, #16]
 8013280:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013284:	68a3      	ldr	r3, [r4, #8]
 8013286:	6861      	ldr	r1, [r4, #4]
 8013288:	eb07 060a 	add.w	r6, r7, sl
 801328c:	42b3      	cmp	r3, r6
 801328e:	b085      	sub	sp, #20
 8013290:	bfb8      	it	lt
 8013292:	3101      	addlt	r1, #1
 8013294:	f7ff feda 	bl	801304c <_Balloc>
 8013298:	b930      	cbnz	r0, 80132a8 <__multiply+0x44>
 801329a:	4602      	mov	r2, r0
 801329c:	4b44      	ldr	r3, [pc, #272]	; (80133b0 <__multiply+0x14c>)
 801329e:	4845      	ldr	r0, [pc, #276]	; (80133b4 <__multiply+0x150>)
 80132a0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80132a4:	f000 fafc 	bl	80138a0 <__assert_func>
 80132a8:	f100 0514 	add.w	r5, r0, #20
 80132ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80132b0:	462b      	mov	r3, r5
 80132b2:	2200      	movs	r2, #0
 80132b4:	4543      	cmp	r3, r8
 80132b6:	d321      	bcc.n	80132fc <__multiply+0x98>
 80132b8:	f104 0314 	add.w	r3, r4, #20
 80132bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80132c0:	f109 0314 	add.w	r3, r9, #20
 80132c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80132c8:	9202      	str	r2, [sp, #8]
 80132ca:	1b3a      	subs	r2, r7, r4
 80132cc:	3a15      	subs	r2, #21
 80132ce:	f022 0203 	bic.w	r2, r2, #3
 80132d2:	3204      	adds	r2, #4
 80132d4:	f104 0115 	add.w	r1, r4, #21
 80132d8:	428f      	cmp	r7, r1
 80132da:	bf38      	it	cc
 80132dc:	2204      	movcc	r2, #4
 80132de:	9201      	str	r2, [sp, #4]
 80132e0:	9a02      	ldr	r2, [sp, #8]
 80132e2:	9303      	str	r3, [sp, #12]
 80132e4:	429a      	cmp	r2, r3
 80132e6:	d80c      	bhi.n	8013302 <__multiply+0x9e>
 80132e8:	2e00      	cmp	r6, #0
 80132ea:	dd03      	ble.n	80132f4 <__multiply+0x90>
 80132ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d05b      	beq.n	80133ac <__multiply+0x148>
 80132f4:	6106      	str	r6, [r0, #16]
 80132f6:	b005      	add	sp, #20
 80132f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132fc:	f843 2b04 	str.w	r2, [r3], #4
 8013300:	e7d8      	b.n	80132b4 <__multiply+0x50>
 8013302:	f8b3 a000 	ldrh.w	sl, [r3]
 8013306:	f1ba 0f00 	cmp.w	sl, #0
 801330a:	d024      	beq.n	8013356 <__multiply+0xf2>
 801330c:	f104 0e14 	add.w	lr, r4, #20
 8013310:	46a9      	mov	r9, r5
 8013312:	f04f 0c00 	mov.w	ip, #0
 8013316:	f85e 2b04 	ldr.w	r2, [lr], #4
 801331a:	f8d9 1000 	ldr.w	r1, [r9]
 801331e:	fa1f fb82 	uxth.w	fp, r2
 8013322:	b289      	uxth	r1, r1
 8013324:	fb0a 110b 	mla	r1, sl, fp, r1
 8013328:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801332c:	f8d9 2000 	ldr.w	r2, [r9]
 8013330:	4461      	add	r1, ip
 8013332:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013336:	fb0a c20b 	mla	r2, sl, fp, ip
 801333a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801333e:	b289      	uxth	r1, r1
 8013340:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013344:	4577      	cmp	r7, lr
 8013346:	f849 1b04 	str.w	r1, [r9], #4
 801334a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801334e:	d8e2      	bhi.n	8013316 <__multiply+0xb2>
 8013350:	9a01      	ldr	r2, [sp, #4]
 8013352:	f845 c002 	str.w	ip, [r5, r2]
 8013356:	9a03      	ldr	r2, [sp, #12]
 8013358:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801335c:	3304      	adds	r3, #4
 801335e:	f1b9 0f00 	cmp.w	r9, #0
 8013362:	d021      	beq.n	80133a8 <__multiply+0x144>
 8013364:	6829      	ldr	r1, [r5, #0]
 8013366:	f104 0c14 	add.w	ip, r4, #20
 801336a:	46ae      	mov	lr, r5
 801336c:	f04f 0a00 	mov.w	sl, #0
 8013370:	f8bc b000 	ldrh.w	fp, [ip]
 8013374:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013378:	fb09 220b 	mla	r2, r9, fp, r2
 801337c:	4452      	add	r2, sl
 801337e:	b289      	uxth	r1, r1
 8013380:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013384:	f84e 1b04 	str.w	r1, [lr], #4
 8013388:	f85c 1b04 	ldr.w	r1, [ip], #4
 801338c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013390:	f8be 1000 	ldrh.w	r1, [lr]
 8013394:	fb09 110a 	mla	r1, r9, sl, r1
 8013398:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801339c:	4567      	cmp	r7, ip
 801339e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80133a2:	d8e5      	bhi.n	8013370 <__multiply+0x10c>
 80133a4:	9a01      	ldr	r2, [sp, #4]
 80133a6:	50a9      	str	r1, [r5, r2]
 80133a8:	3504      	adds	r5, #4
 80133aa:	e799      	b.n	80132e0 <__multiply+0x7c>
 80133ac:	3e01      	subs	r6, #1
 80133ae:	e79b      	b.n	80132e8 <__multiply+0x84>
 80133b0:	08015637 	.word	0x08015637
 80133b4:	08015648 	.word	0x08015648

080133b8 <__pow5mult>:
 80133b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80133bc:	4615      	mov	r5, r2
 80133be:	f012 0203 	ands.w	r2, r2, #3
 80133c2:	4606      	mov	r6, r0
 80133c4:	460f      	mov	r7, r1
 80133c6:	d007      	beq.n	80133d8 <__pow5mult+0x20>
 80133c8:	4c25      	ldr	r4, [pc, #148]	; (8013460 <__pow5mult+0xa8>)
 80133ca:	3a01      	subs	r2, #1
 80133cc:	2300      	movs	r3, #0
 80133ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80133d2:	f7ff fe9d 	bl	8013110 <__multadd>
 80133d6:	4607      	mov	r7, r0
 80133d8:	10ad      	asrs	r5, r5, #2
 80133da:	d03d      	beq.n	8013458 <__pow5mult+0xa0>
 80133dc:	69f4      	ldr	r4, [r6, #28]
 80133de:	b97c      	cbnz	r4, 8013400 <__pow5mult+0x48>
 80133e0:	2010      	movs	r0, #16
 80133e2:	f7fe f863 	bl	80114ac <malloc>
 80133e6:	4602      	mov	r2, r0
 80133e8:	61f0      	str	r0, [r6, #28]
 80133ea:	b928      	cbnz	r0, 80133f8 <__pow5mult+0x40>
 80133ec:	4b1d      	ldr	r3, [pc, #116]	; (8013464 <__pow5mult+0xac>)
 80133ee:	481e      	ldr	r0, [pc, #120]	; (8013468 <__pow5mult+0xb0>)
 80133f0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80133f4:	f000 fa54 	bl	80138a0 <__assert_func>
 80133f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80133fc:	6004      	str	r4, [r0, #0]
 80133fe:	60c4      	str	r4, [r0, #12]
 8013400:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8013404:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013408:	b94c      	cbnz	r4, 801341e <__pow5mult+0x66>
 801340a:	f240 2171 	movw	r1, #625	; 0x271
 801340e:	4630      	mov	r0, r6
 8013410:	f7ff ff12 	bl	8013238 <__i2b>
 8013414:	2300      	movs	r3, #0
 8013416:	f8c8 0008 	str.w	r0, [r8, #8]
 801341a:	4604      	mov	r4, r0
 801341c:	6003      	str	r3, [r0, #0]
 801341e:	f04f 0900 	mov.w	r9, #0
 8013422:	07eb      	lsls	r3, r5, #31
 8013424:	d50a      	bpl.n	801343c <__pow5mult+0x84>
 8013426:	4639      	mov	r1, r7
 8013428:	4622      	mov	r2, r4
 801342a:	4630      	mov	r0, r6
 801342c:	f7ff ff1a 	bl	8013264 <__multiply>
 8013430:	4639      	mov	r1, r7
 8013432:	4680      	mov	r8, r0
 8013434:	4630      	mov	r0, r6
 8013436:	f7ff fe49 	bl	80130cc <_Bfree>
 801343a:	4647      	mov	r7, r8
 801343c:	106d      	asrs	r5, r5, #1
 801343e:	d00b      	beq.n	8013458 <__pow5mult+0xa0>
 8013440:	6820      	ldr	r0, [r4, #0]
 8013442:	b938      	cbnz	r0, 8013454 <__pow5mult+0x9c>
 8013444:	4622      	mov	r2, r4
 8013446:	4621      	mov	r1, r4
 8013448:	4630      	mov	r0, r6
 801344a:	f7ff ff0b 	bl	8013264 <__multiply>
 801344e:	6020      	str	r0, [r4, #0]
 8013450:	f8c0 9000 	str.w	r9, [r0]
 8013454:	4604      	mov	r4, r0
 8013456:	e7e4      	b.n	8013422 <__pow5mult+0x6a>
 8013458:	4638      	mov	r0, r7
 801345a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801345e:	bf00      	nop
 8013460:	08015798 	.word	0x08015798
 8013464:	080155c8 	.word	0x080155c8
 8013468:	08015648 	.word	0x08015648

0801346c <__lshift>:
 801346c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013470:	460c      	mov	r4, r1
 8013472:	6849      	ldr	r1, [r1, #4]
 8013474:	6923      	ldr	r3, [r4, #16]
 8013476:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801347a:	68a3      	ldr	r3, [r4, #8]
 801347c:	4607      	mov	r7, r0
 801347e:	4691      	mov	r9, r2
 8013480:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013484:	f108 0601 	add.w	r6, r8, #1
 8013488:	42b3      	cmp	r3, r6
 801348a:	db0b      	blt.n	80134a4 <__lshift+0x38>
 801348c:	4638      	mov	r0, r7
 801348e:	f7ff fddd 	bl	801304c <_Balloc>
 8013492:	4605      	mov	r5, r0
 8013494:	b948      	cbnz	r0, 80134aa <__lshift+0x3e>
 8013496:	4602      	mov	r2, r0
 8013498:	4b28      	ldr	r3, [pc, #160]	; (801353c <__lshift+0xd0>)
 801349a:	4829      	ldr	r0, [pc, #164]	; (8013540 <__lshift+0xd4>)
 801349c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80134a0:	f000 f9fe 	bl	80138a0 <__assert_func>
 80134a4:	3101      	adds	r1, #1
 80134a6:	005b      	lsls	r3, r3, #1
 80134a8:	e7ee      	b.n	8013488 <__lshift+0x1c>
 80134aa:	2300      	movs	r3, #0
 80134ac:	f100 0114 	add.w	r1, r0, #20
 80134b0:	f100 0210 	add.w	r2, r0, #16
 80134b4:	4618      	mov	r0, r3
 80134b6:	4553      	cmp	r3, sl
 80134b8:	db33      	blt.n	8013522 <__lshift+0xb6>
 80134ba:	6920      	ldr	r0, [r4, #16]
 80134bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80134c0:	f104 0314 	add.w	r3, r4, #20
 80134c4:	f019 091f 	ands.w	r9, r9, #31
 80134c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80134cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80134d0:	d02b      	beq.n	801352a <__lshift+0xbe>
 80134d2:	f1c9 0e20 	rsb	lr, r9, #32
 80134d6:	468a      	mov	sl, r1
 80134d8:	2200      	movs	r2, #0
 80134da:	6818      	ldr	r0, [r3, #0]
 80134dc:	fa00 f009 	lsl.w	r0, r0, r9
 80134e0:	4310      	orrs	r0, r2
 80134e2:	f84a 0b04 	str.w	r0, [sl], #4
 80134e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80134ea:	459c      	cmp	ip, r3
 80134ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80134f0:	d8f3      	bhi.n	80134da <__lshift+0x6e>
 80134f2:	ebac 0304 	sub.w	r3, ip, r4
 80134f6:	3b15      	subs	r3, #21
 80134f8:	f023 0303 	bic.w	r3, r3, #3
 80134fc:	3304      	adds	r3, #4
 80134fe:	f104 0015 	add.w	r0, r4, #21
 8013502:	4584      	cmp	ip, r0
 8013504:	bf38      	it	cc
 8013506:	2304      	movcc	r3, #4
 8013508:	50ca      	str	r2, [r1, r3]
 801350a:	b10a      	cbz	r2, 8013510 <__lshift+0xa4>
 801350c:	f108 0602 	add.w	r6, r8, #2
 8013510:	3e01      	subs	r6, #1
 8013512:	4638      	mov	r0, r7
 8013514:	612e      	str	r6, [r5, #16]
 8013516:	4621      	mov	r1, r4
 8013518:	f7ff fdd8 	bl	80130cc <_Bfree>
 801351c:	4628      	mov	r0, r5
 801351e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013522:	f842 0f04 	str.w	r0, [r2, #4]!
 8013526:	3301      	adds	r3, #1
 8013528:	e7c5      	b.n	80134b6 <__lshift+0x4a>
 801352a:	3904      	subs	r1, #4
 801352c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013530:	f841 2f04 	str.w	r2, [r1, #4]!
 8013534:	459c      	cmp	ip, r3
 8013536:	d8f9      	bhi.n	801352c <__lshift+0xc0>
 8013538:	e7ea      	b.n	8013510 <__lshift+0xa4>
 801353a:	bf00      	nop
 801353c:	08015637 	.word	0x08015637
 8013540:	08015648 	.word	0x08015648

08013544 <__mcmp>:
 8013544:	b530      	push	{r4, r5, lr}
 8013546:	6902      	ldr	r2, [r0, #16]
 8013548:	690c      	ldr	r4, [r1, #16]
 801354a:	1b12      	subs	r2, r2, r4
 801354c:	d10e      	bne.n	801356c <__mcmp+0x28>
 801354e:	f100 0314 	add.w	r3, r0, #20
 8013552:	3114      	adds	r1, #20
 8013554:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013558:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801355c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013560:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013564:	42a5      	cmp	r5, r4
 8013566:	d003      	beq.n	8013570 <__mcmp+0x2c>
 8013568:	d305      	bcc.n	8013576 <__mcmp+0x32>
 801356a:	2201      	movs	r2, #1
 801356c:	4610      	mov	r0, r2
 801356e:	bd30      	pop	{r4, r5, pc}
 8013570:	4283      	cmp	r3, r0
 8013572:	d3f3      	bcc.n	801355c <__mcmp+0x18>
 8013574:	e7fa      	b.n	801356c <__mcmp+0x28>
 8013576:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801357a:	e7f7      	b.n	801356c <__mcmp+0x28>

0801357c <__mdiff>:
 801357c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013580:	460c      	mov	r4, r1
 8013582:	4606      	mov	r6, r0
 8013584:	4611      	mov	r1, r2
 8013586:	4620      	mov	r0, r4
 8013588:	4690      	mov	r8, r2
 801358a:	f7ff ffdb 	bl	8013544 <__mcmp>
 801358e:	1e05      	subs	r5, r0, #0
 8013590:	d110      	bne.n	80135b4 <__mdiff+0x38>
 8013592:	4629      	mov	r1, r5
 8013594:	4630      	mov	r0, r6
 8013596:	f7ff fd59 	bl	801304c <_Balloc>
 801359a:	b930      	cbnz	r0, 80135aa <__mdiff+0x2e>
 801359c:	4b3a      	ldr	r3, [pc, #232]	; (8013688 <__mdiff+0x10c>)
 801359e:	4602      	mov	r2, r0
 80135a0:	f240 2137 	movw	r1, #567	; 0x237
 80135a4:	4839      	ldr	r0, [pc, #228]	; (801368c <__mdiff+0x110>)
 80135a6:	f000 f97b 	bl	80138a0 <__assert_func>
 80135aa:	2301      	movs	r3, #1
 80135ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80135b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135b4:	bfa4      	itt	ge
 80135b6:	4643      	movge	r3, r8
 80135b8:	46a0      	movge	r8, r4
 80135ba:	4630      	mov	r0, r6
 80135bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80135c0:	bfa6      	itte	ge
 80135c2:	461c      	movge	r4, r3
 80135c4:	2500      	movge	r5, #0
 80135c6:	2501      	movlt	r5, #1
 80135c8:	f7ff fd40 	bl	801304c <_Balloc>
 80135cc:	b920      	cbnz	r0, 80135d8 <__mdiff+0x5c>
 80135ce:	4b2e      	ldr	r3, [pc, #184]	; (8013688 <__mdiff+0x10c>)
 80135d0:	4602      	mov	r2, r0
 80135d2:	f240 2145 	movw	r1, #581	; 0x245
 80135d6:	e7e5      	b.n	80135a4 <__mdiff+0x28>
 80135d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80135dc:	6926      	ldr	r6, [r4, #16]
 80135de:	60c5      	str	r5, [r0, #12]
 80135e0:	f104 0914 	add.w	r9, r4, #20
 80135e4:	f108 0514 	add.w	r5, r8, #20
 80135e8:	f100 0e14 	add.w	lr, r0, #20
 80135ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80135f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80135f4:	f108 0210 	add.w	r2, r8, #16
 80135f8:	46f2      	mov	sl, lr
 80135fa:	2100      	movs	r1, #0
 80135fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8013600:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013604:	fa11 f88b 	uxtah	r8, r1, fp
 8013608:	b299      	uxth	r1, r3
 801360a:	0c1b      	lsrs	r3, r3, #16
 801360c:	eba8 0801 	sub.w	r8, r8, r1
 8013610:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013614:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013618:	fa1f f888 	uxth.w	r8, r8
 801361c:	1419      	asrs	r1, r3, #16
 801361e:	454e      	cmp	r6, r9
 8013620:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013624:	f84a 3b04 	str.w	r3, [sl], #4
 8013628:	d8e8      	bhi.n	80135fc <__mdiff+0x80>
 801362a:	1b33      	subs	r3, r6, r4
 801362c:	3b15      	subs	r3, #21
 801362e:	f023 0303 	bic.w	r3, r3, #3
 8013632:	3304      	adds	r3, #4
 8013634:	3415      	adds	r4, #21
 8013636:	42a6      	cmp	r6, r4
 8013638:	bf38      	it	cc
 801363a:	2304      	movcc	r3, #4
 801363c:	441d      	add	r5, r3
 801363e:	4473      	add	r3, lr
 8013640:	469e      	mov	lr, r3
 8013642:	462e      	mov	r6, r5
 8013644:	4566      	cmp	r6, ip
 8013646:	d30e      	bcc.n	8013666 <__mdiff+0xea>
 8013648:	f10c 0203 	add.w	r2, ip, #3
 801364c:	1b52      	subs	r2, r2, r5
 801364e:	f022 0203 	bic.w	r2, r2, #3
 8013652:	3d03      	subs	r5, #3
 8013654:	45ac      	cmp	ip, r5
 8013656:	bf38      	it	cc
 8013658:	2200      	movcc	r2, #0
 801365a:	4413      	add	r3, r2
 801365c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013660:	b17a      	cbz	r2, 8013682 <__mdiff+0x106>
 8013662:	6107      	str	r7, [r0, #16]
 8013664:	e7a4      	b.n	80135b0 <__mdiff+0x34>
 8013666:	f856 8b04 	ldr.w	r8, [r6], #4
 801366a:	fa11 f288 	uxtah	r2, r1, r8
 801366e:	1414      	asrs	r4, r2, #16
 8013670:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013674:	b292      	uxth	r2, r2
 8013676:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801367a:	f84e 2b04 	str.w	r2, [lr], #4
 801367e:	1421      	asrs	r1, r4, #16
 8013680:	e7e0      	b.n	8013644 <__mdiff+0xc8>
 8013682:	3f01      	subs	r7, #1
 8013684:	e7ea      	b.n	801365c <__mdiff+0xe0>
 8013686:	bf00      	nop
 8013688:	08015637 	.word	0x08015637
 801368c:	08015648 	.word	0x08015648

08013690 <__d2b>:
 8013690:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013694:	460f      	mov	r7, r1
 8013696:	2101      	movs	r1, #1
 8013698:	ec59 8b10 	vmov	r8, r9, d0
 801369c:	4616      	mov	r6, r2
 801369e:	f7ff fcd5 	bl	801304c <_Balloc>
 80136a2:	4604      	mov	r4, r0
 80136a4:	b930      	cbnz	r0, 80136b4 <__d2b+0x24>
 80136a6:	4602      	mov	r2, r0
 80136a8:	4b24      	ldr	r3, [pc, #144]	; (801373c <__d2b+0xac>)
 80136aa:	4825      	ldr	r0, [pc, #148]	; (8013740 <__d2b+0xb0>)
 80136ac:	f240 310f 	movw	r1, #783	; 0x30f
 80136b0:	f000 f8f6 	bl	80138a0 <__assert_func>
 80136b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80136b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80136bc:	bb2d      	cbnz	r5, 801370a <__d2b+0x7a>
 80136be:	9301      	str	r3, [sp, #4]
 80136c0:	f1b8 0300 	subs.w	r3, r8, #0
 80136c4:	d026      	beq.n	8013714 <__d2b+0x84>
 80136c6:	4668      	mov	r0, sp
 80136c8:	9300      	str	r3, [sp, #0]
 80136ca:	f7ff fd87 	bl	80131dc <__lo0bits>
 80136ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80136d2:	b1e8      	cbz	r0, 8013710 <__d2b+0x80>
 80136d4:	f1c0 0320 	rsb	r3, r0, #32
 80136d8:	fa02 f303 	lsl.w	r3, r2, r3
 80136dc:	430b      	orrs	r3, r1
 80136de:	40c2      	lsrs	r2, r0
 80136e0:	6163      	str	r3, [r4, #20]
 80136e2:	9201      	str	r2, [sp, #4]
 80136e4:	9b01      	ldr	r3, [sp, #4]
 80136e6:	61a3      	str	r3, [r4, #24]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	bf14      	ite	ne
 80136ec:	2202      	movne	r2, #2
 80136ee:	2201      	moveq	r2, #1
 80136f0:	6122      	str	r2, [r4, #16]
 80136f2:	b1bd      	cbz	r5, 8013724 <__d2b+0x94>
 80136f4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80136f8:	4405      	add	r5, r0
 80136fa:	603d      	str	r5, [r7, #0]
 80136fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013700:	6030      	str	r0, [r6, #0]
 8013702:	4620      	mov	r0, r4
 8013704:	b003      	add	sp, #12
 8013706:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801370a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801370e:	e7d6      	b.n	80136be <__d2b+0x2e>
 8013710:	6161      	str	r1, [r4, #20]
 8013712:	e7e7      	b.n	80136e4 <__d2b+0x54>
 8013714:	a801      	add	r0, sp, #4
 8013716:	f7ff fd61 	bl	80131dc <__lo0bits>
 801371a:	9b01      	ldr	r3, [sp, #4]
 801371c:	6163      	str	r3, [r4, #20]
 801371e:	3020      	adds	r0, #32
 8013720:	2201      	movs	r2, #1
 8013722:	e7e5      	b.n	80136f0 <__d2b+0x60>
 8013724:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013728:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801372c:	6038      	str	r0, [r7, #0]
 801372e:	6918      	ldr	r0, [r3, #16]
 8013730:	f7ff fd34 	bl	801319c <__hi0bits>
 8013734:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013738:	e7e2      	b.n	8013700 <__d2b+0x70>
 801373a:	bf00      	nop
 801373c:	08015637 	.word	0x08015637
 8013740:	08015648 	.word	0x08015648

08013744 <__sflush_r>:
 8013744:	898a      	ldrh	r2, [r1, #12]
 8013746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801374a:	4605      	mov	r5, r0
 801374c:	0710      	lsls	r0, r2, #28
 801374e:	460c      	mov	r4, r1
 8013750:	d458      	bmi.n	8013804 <__sflush_r+0xc0>
 8013752:	684b      	ldr	r3, [r1, #4]
 8013754:	2b00      	cmp	r3, #0
 8013756:	dc05      	bgt.n	8013764 <__sflush_r+0x20>
 8013758:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801375a:	2b00      	cmp	r3, #0
 801375c:	dc02      	bgt.n	8013764 <__sflush_r+0x20>
 801375e:	2000      	movs	r0, #0
 8013760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013764:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013766:	2e00      	cmp	r6, #0
 8013768:	d0f9      	beq.n	801375e <__sflush_r+0x1a>
 801376a:	2300      	movs	r3, #0
 801376c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013770:	682f      	ldr	r7, [r5, #0]
 8013772:	6a21      	ldr	r1, [r4, #32]
 8013774:	602b      	str	r3, [r5, #0]
 8013776:	d032      	beq.n	80137de <__sflush_r+0x9a>
 8013778:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801377a:	89a3      	ldrh	r3, [r4, #12]
 801377c:	075a      	lsls	r2, r3, #29
 801377e:	d505      	bpl.n	801378c <__sflush_r+0x48>
 8013780:	6863      	ldr	r3, [r4, #4]
 8013782:	1ac0      	subs	r0, r0, r3
 8013784:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013786:	b10b      	cbz	r3, 801378c <__sflush_r+0x48>
 8013788:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801378a:	1ac0      	subs	r0, r0, r3
 801378c:	2300      	movs	r3, #0
 801378e:	4602      	mov	r2, r0
 8013790:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013792:	6a21      	ldr	r1, [r4, #32]
 8013794:	4628      	mov	r0, r5
 8013796:	47b0      	blx	r6
 8013798:	1c43      	adds	r3, r0, #1
 801379a:	89a3      	ldrh	r3, [r4, #12]
 801379c:	d106      	bne.n	80137ac <__sflush_r+0x68>
 801379e:	6829      	ldr	r1, [r5, #0]
 80137a0:	291d      	cmp	r1, #29
 80137a2:	d82b      	bhi.n	80137fc <__sflush_r+0xb8>
 80137a4:	4a29      	ldr	r2, [pc, #164]	; (801384c <__sflush_r+0x108>)
 80137a6:	410a      	asrs	r2, r1
 80137a8:	07d6      	lsls	r6, r2, #31
 80137aa:	d427      	bmi.n	80137fc <__sflush_r+0xb8>
 80137ac:	2200      	movs	r2, #0
 80137ae:	6062      	str	r2, [r4, #4]
 80137b0:	04d9      	lsls	r1, r3, #19
 80137b2:	6922      	ldr	r2, [r4, #16]
 80137b4:	6022      	str	r2, [r4, #0]
 80137b6:	d504      	bpl.n	80137c2 <__sflush_r+0x7e>
 80137b8:	1c42      	adds	r2, r0, #1
 80137ba:	d101      	bne.n	80137c0 <__sflush_r+0x7c>
 80137bc:	682b      	ldr	r3, [r5, #0]
 80137be:	b903      	cbnz	r3, 80137c2 <__sflush_r+0x7e>
 80137c0:	6560      	str	r0, [r4, #84]	; 0x54
 80137c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80137c4:	602f      	str	r7, [r5, #0]
 80137c6:	2900      	cmp	r1, #0
 80137c8:	d0c9      	beq.n	801375e <__sflush_r+0x1a>
 80137ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80137ce:	4299      	cmp	r1, r3
 80137d0:	d002      	beq.n	80137d8 <__sflush_r+0x94>
 80137d2:	4628      	mov	r0, r5
 80137d4:	f7ff fbee 	bl	8012fb4 <_free_r>
 80137d8:	2000      	movs	r0, #0
 80137da:	6360      	str	r0, [r4, #52]	; 0x34
 80137dc:	e7c0      	b.n	8013760 <__sflush_r+0x1c>
 80137de:	2301      	movs	r3, #1
 80137e0:	4628      	mov	r0, r5
 80137e2:	47b0      	blx	r6
 80137e4:	1c41      	adds	r1, r0, #1
 80137e6:	d1c8      	bne.n	801377a <__sflush_r+0x36>
 80137e8:	682b      	ldr	r3, [r5, #0]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d0c5      	beq.n	801377a <__sflush_r+0x36>
 80137ee:	2b1d      	cmp	r3, #29
 80137f0:	d001      	beq.n	80137f6 <__sflush_r+0xb2>
 80137f2:	2b16      	cmp	r3, #22
 80137f4:	d101      	bne.n	80137fa <__sflush_r+0xb6>
 80137f6:	602f      	str	r7, [r5, #0]
 80137f8:	e7b1      	b.n	801375e <__sflush_r+0x1a>
 80137fa:	89a3      	ldrh	r3, [r4, #12]
 80137fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013800:	81a3      	strh	r3, [r4, #12]
 8013802:	e7ad      	b.n	8013760 <__sflush_r+0x1c>
 8013804:	690f      	ldr	r7, [r1, #16]
 8013806:	2f00      	cmp	r7, #0
 8013808:	d0a9      	beq.n	801375e <__sflush_r+0x1a>
 801380a:	0793      	lsls	r3, r2, #30
 801380c:	680e      	ldr	r6, [r1, #0]
 801380e:	bf08      	it	eq
 8013810:	694b      	ldreq	r3, [r1, #20]
 8013812:	600f      	str	r7, [r1, #0]
 8013814:	bf18      	it	ne
 8013816:	2300      	movne	r3, #0
 8013818:	eba6 0807 	sub.w	r8, r6, r7
 801381c:	608b      	str	r3, [r1, #8]
 801381e:	f1b8 0f00 	cmp.w	r8, #0
 8013822:	dd9c      	ble.n	801375e <__sflush_r+0x1a>
 8013824:	6a21      	ldr	r1, [r4, #32]
 8013826:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013828:	4643      	mov	r3, r8
 801382a:	463a      	mov	r2, r7
 801382c:	4628      	mov	r0, r5
 801382e:	47b0      	blx	r6
 8013830:	2800      	cmp	r0, #0
 8013832:	dc06      	bgt.n	8013842 <__sflush_r+0xfe>
 8013834:	89a3      	ldrh	r3, [r4, #12]
 8013836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801383a:	81a3      	strh	r3, [r4, #12]
 801383c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013840:	e78e      	b.n	8013760 <__sflush_r+0x1c>
 8013842:	4407      	add	r7, r0
 8013844:	eba8 0800 	sub.w	r8, r8, r0
 8013848:	e7e9      	b.n	801381e <__sflush_r+0xda>
 801384a:	bf00      	nop
 801384c:	dfbffffe 	.word	0xdfbffffe

08013850 <_fflush_r>:
 8013850:	b538      	push	{r3, r4, r5, lr}
 8013852:	690b      	ldr	r3, [r1, #16]
 8013854:	4605      	mov	r5, r0
 8013856:	460c      	mov	r4, r1
 8013858:	b913      	cbnz	r3, 8013860 <_fflush_r+0x10>
 801385a:	2500      	movs	r5, #0
 801385c:	4628      	mov	r0, r5
 801385e:	bd38      	pop	{r3, r4, r5, pc}
 8013860:	b118      	cbz	r0, 801386a <_fflush_r+0x1a>
 8013862:	6a03      	ldr	r3, [r0, #32]
 8013864:	b90b      	cbnz	r3, 801386a <_fflush_r+0x1a>
 8013866:	f7fe fbcf 	bl	8012008 <__sinit>
 801386a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801386e:	2b00      	cmp	r3, #0
 8013870:	d0f3      	beq.n	801385a <_fflush_r+0xa>
 8013872:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013874:	07d0      	lsls	r0, r2, #31
 8013876:	d404      	bmi.n	8013882 <_fflush_r+0x32>
 8013878:	0599      	lsls	r1, r3, #22
 801387a:	d402      	bmi.n	8013882 <_fflush_r+0x32>
 801387c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801387e:	f7fe fd0e 	bl	801229e <__retarget_lock_acquire_recursive>
 8013882:	4628      	mov	r0, r5
 8013884:	4621      	mov	r1, r4
 8013886:	f7ff ff5d 	bl	8013744 <__sflush_r>
 801388a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801388c:	07da      	lsls	r2, r3, #31
 801388e:	4605      	mov	r5, r0
 8013890:	d4e4      	bmi.n	801385c <_fflush_r+0xc>
 8013892:	89a3      	ldrh	r3, [r4, #12]
 8013894:	059b      	lsls	r3, r3, #22
 8013896:	d4e1      	bmi.n	801385c <_fflush_r+0xc>
 8013898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801389a:	f7fe fd01 	bl	80122a0 <__retarget_lock_release_recursive>
 801389e:	e7dd      	b.n	801385c <_fflush_r+0xc>

080138a0 <__assert_func>:
 80138a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80138a2:	4614      	mov	r4, r2
 80138a4:	461a      	mov	r2, r3
 80138a6:	4b09      	ldr	r3, [pc, #36]	; (80138cc <__assert_func+0x2c>)
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	4605      	mov	r5, r0
 80138ac:	68d8      	ldr	r0, [r3, #12]
 80138ae:	b14c      	cbz	r4, 80138c4 <__assert_func+0x24>
 80138b0:	4b07      	ldr	r3, [pc, #28]	; (80138d0 <__assert_func+0x30>)
 80138b2:	9100      	str	r1, [sp, #0]
 80138b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80138b8:	4906      	ldr	r1, [pc, #24]	; (80138d4 <__assert_func+0x34>)
 80138ba:	462b      	mov	r3, r5
 80138bc:	f000 f844 	bl	8013948 <fiprintf>
 80138c0:	f7fd fdec 	bl	801149c <abort>
 80138c4:	4b04      	ldr	r3, [pc, #16]	; (80138d8 <__assert_func+0x38>)
 80138c6:	461c      	mov	r4, r3
 80138c8:	e7f3      	b.n	80138b2 <__assert_func+0x12>
 80138ca:	bf00      	nop
 80138cc:	2000006c 	.word	0x2000006c
 80138d0:	080157ae 	.word	0x080157ae
 80138d4:	080157bb 	.word	0x080157bb
 80138d8:	080157e9 	.word	0x080157e9

080138dc <_calloc_r>:
 80138dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80138de:	fba1 2402 	umull	r2, r4, r1, r2
 80138e2:	b94c      	cbnz	r4, 80138f8 <_calloc_r+0x1c>
 80138e4:	4611      	mov	r1, r2
 80138e6:	9201      	str	r2, [sp, #4]
 80138e8:	f7fd fe10 	bl	801150c <_malloc_r>
 80138ec:	9a01      	ldr	r2, [sp, #4]
 80138ee:	4605      	mov	r5, r0
 80138f0:	b930      	cbnz	r0, 8013900 <_calloc_r+0x24>
 80138f2:	4628      	mov	r0, r5
 80138f4:	b003      	add	sp, #12
 80138f6:	bd30      	pop	{r4, r5, pc}
 80138f8:	220c      	movs	r2, #12
 80138fa:	6002      	str	r2, [r0, #0]
 80138fc:	2500      	movs	r5, #0
 80138fe:	e7f8      	b.n	80138f2 <_calloc_r+0x16>
 8013900:	4621      	mov	r1, r4
 8013902:	f7fe fbfa 	bl	80120fa <memset>
 8013906:	e7f4      	b.n	80138f2 <_calloc_r+0x16>

08013908 <__ascii_mbtowc>:
 8013908:	b082      	sub	sp, #8
 801390a:	b901      	cbnz	r1, 801390e <__ascii_mbtowc+0x6>
 801390c:	a901      	add	r1, sp, #4
 801390e:	b142      	cbz	r2, 8013922 <__ascii_mbtowc+0x1a>
 8013910:	b14b      	cbz	r3, 8013926 <__ascii_mbtowc+0x1e>
 8013912:	7813      	ldrb	r3, [r2, #0]
 8013914:	600b      	str	r3, [r1, #0]
 8013916:	7812      	ldrb	r2, [r2, #0]
 8013918:	1e10      	subs	r0, r2, #0
 801391a:	bf18      	it	ne
 801391c:	2001      	movne	r0, #1
 801391e:	b002      	add	sp, #8
 8013920:	4770      	bx	lr
 8013922:	4610      	mov	r0, r2
 8013924:	e7fb      	b.n	801391e <__ascii_mbtowc+0x16>
 8013926:	f06f 0001 	mvn.w	r0, #1
 801392a:	e7f8      	b.n	801391e <__ascii_mbtowc+0x16>

0801392c <__ascii_wctomb>:
 801392c:	b149      	cbz	r1, 8013942 <__ascii_wctomb+0x16>
 801392e:	2aff      	cmp	r2, #255	; 0xff
 8013930:	bf85      	ittet	hi
 8013932:	238a      	movhi	r3, #138	; 0x8a
 8013934:	6003      	strhi	r3, [r0, #0]
 8013936:	700a      	strbls	r2, [r1, #0]
 8013938:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801393c:	bf98      	it	ls
 801393e:	2001      	movls	r0, #1
 8013940:	4770      	bx	lr
 8013942:	4608      	mov	r0, r1
 8013944:	4770      	bx	lr
	...

08013948 <fiprintf>:
 8013948:	b40e      	push	{r1, r2, r3}
 801394a:	b503      	push	{r0, r1, lr}
 801394c:	4601      	mov	r1, r0
 801394e:	ab03      	add	r3, sp, #12
 8013950:	4805      	ldr	r0, [pc, #20]	; (8013968 <fiprintf+0x20>)
 8013952:	f853 2b04 	ldr.w	r2, [r3], #4
 8013956:	6800      	ldr	r0, [r0, #0]
 8013958:	9301      	str	r3, [sp, #4]
 801395a:	f000 f831 	bl	80139c0 <_vfiprintf_r>
 801395e:	b002      	add	sp, #8
 8013960:	f85d eb04 	ldr.w	lr, [sp], #4
 8013964:	b003      	add	sp, #12
 8013966:	4770      	bx	lr
 8013968:	2000006c 	.word	0x2000006c

0801396c <__sfputc_r>:
 801396c:	6893      	ldr	r3, [r2, #8]
 801396e:	3b01      	subs	r3, #1
 8013970:	2b00      	cmp	r3, #0
 8013972:	b410      	push	{r4}
 8013974:	6093      	str	r3, [r2, #8]
 8013976:	da08      	bge.n	801398a <__sfputc_r+0x1e>
 8013978:	6994      	ldr	r4, [r2, #24]
 801397a:	42a3      	cmp	r3, r4
 801397c:	db01      	blt.n	8013982 <__sfputc_r+0x16>
 801397e:	290a      	cmp	r1, #10
 8013980:	d103      	bne.n	801398a <__sfputc_r+0x1e>
 8013982:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013986:	f000 b935 	b.w	8013bf4 <__swbuf_r>
 801398a:	6813      	ldr	r3, [r2, #0]
 801398c:	1c58      	adds	r0, r3, #1
 801398e:	6010      	str	r0, [r2, #0]
 8013990:	7019      	strb	r1, [r3, #0]
 8013992:	4608      	mov	r0, r1
 8013994:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013998:	4770      	bx	lr

0801399a <__sfputs_r>:
 801399a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801399c:	4606      	mov	r6, r0
 801399e:	460f      	mov	r7, r1
 80139a0:	4614      	mov	r4, r2
 80139a2:	18d5      	adds	r5, r2, r3
 80139a4:	42ac      	cmp	r4, r5
 80139a6:	d101      	bne.n	80139ac <__sfputs_r+0x12>
 80139a8:	2000      	movs	r0, #0
 80139aa:	e007      	b.n	80139bc <__sfputs_r+0x22>
 80139ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139b0:	463a      	mov	r2, r7
 80139b2:	4630      	mov	r0, r6
 80139b4:	f7ff ffda 	bl	801396c <__sfputc_r>
 80139b8:	1c43      	adds	r3, r0, #1
 80139ba:	d1f3      	bne.n	80139a4 <__sfputs_r+0xa>
 80139bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080139c0 <_vfiprintf_r>:
 80139c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139c4:	460d      	mov	r5, r1
 80139c6:	b09d      	sub	sp, #116	; 0x74
 80139c8:	4614      	mov	r4, r2
 80139ca:	4698      	mov	r8, r3
 80139cc:	4606      	mov	r6, r0
 80139ce:	b118      	cbz	r0, 80139d8 <_vfiprintf_r+0x18>
 80139d0:	6a03      	ldr	r3, [r0, #32]
 80139d2:	b90b      	cbnz	r3, 80139d8 <_vfiprintf_r+0x18>
 80139d4:	f7fe fb18 	bl	8012008 <__sinit>
 80139d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80139da:	07d9      	lsls	r1, r3, #31
 80139dc:	d405      	bmi.n	80139ea <_vfiprintf_r+0x2a>
 80139de:	89ab      	ldrh	r3, [r5, #12]
 80139e0:	059a      	lsls	r2, r3, #22
 80139e2:	d402      	bmi.n	80139ea <_vfiprintf_r+0x2a>
 80139e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80139e6:	f7fe fc5a 	bl	801229e <__retarget_lock_acquire_recursive>
 80139ea:	89ab      	ldrh	r3, [r5, #12]
 80139ec:	071b      	lsls	r3, r3, #28
 80139ee:	d501      	bpl.n	80139f4 <_vfiprintf_r+0x34>
 80139f0:	692b      	ldr	r3, [r5, #16]
 80139f2:	b99b      	cbnz	r3, 8013a1c <_vfiprintf_r+0x5c>
 80139f4:	4629      	mov	r1, r5
 80139f6:	4630      	mov	r0, r6
 80139f8:	f000 f93a 	bl	8013c70 <__swsetup_r>
 80139fc:	b170      	cbz	r0, 8013a1c <_vfiprintf_r+0x5c>
 80139fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013a00:	07dc      	lsls	r4, r3, #31
 8013a02:	d504      	bpl.n	8013a0e <_vfiprintf_r+0x4e>
 8013a04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013a08:	b01d      	add	sp, #116	; 0x74
 8013a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a0e:	89ab      	ldrh	r3, [r5, #12]
 8013a10:	0598      	lsls	r0, r3, #22
 8013a12:	d4f7      	bmi.n	8013a04 <_vfiprintf_r+0x44>
 8013a14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013a16:	f7fe fc43 	bl	80122a0 <__retarget_lock_release_recursive>
 8013a1a:	e7f3      	b.n	8013a04 <_vfiprintf_r+0x44>
 8013a1c:	2300      	movs	r3, #0
 8013a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8013a20:	2320      	movs	r3, #32
 8013a22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013a26:	f8cd 800c 	str.w	r8, [sp, #12]
 8013a2a:	2330      	movs	r3, #48	; 0x30
 8013a2c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8013be0 <_vfiprintf_r+0x220>
 8013a30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013a34:	f04f 0901 	mov.w	r9, #1
 8013a38:	4623      	mov	r3, r4
 8013a3a:	469a      	mov	sl, r3
 8013a3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013a40:	b10a      	cbz	r2, 8013a46 <_vfiprintf_r+0x86>
 8013a42:	2a25      	cmp	r2, #37	; 0x25
 8013a44:	d1f9      	bne.n	8013a3a <_vfiprintf_r+0x7a>
 8013a46:	ebba 0b04 	subs.w	fp, sl, r4
 8013a4a:	d00b      	beq.n	8013a64 <_vfiprintf_r+0xa4>
 8013a4c:	465b      	mov	r3, fp
 8013a4e:	4622      	mov	r2, r4
 8013a50:	4629      	mov	r1, r5
 8013a52:	4630      	mov	r0, r6
 8013a54:	f7ff ffa1 	bl	801399a <__sfputs_r>
 8013a58:	3001      	adds	r0, #1
 8013a5a:	f000 80a9 	beq.w	8013bb0 <_vfiprintf_r+0x1f0>
 8013a5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013a60:	445a      	add	r2, fp
 8013a62:	9209      	str	r2, [sp, #36]	; 0x24
 8013a64:	f89a 3000 	ldrb.w	r3, [sl]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	f000 80a1 	beq.w	8013bb0 <_vfiprintf_r+0x1f0>
 8013a6e:	2300      	movs	r3, #0
 8013a70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013a74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013a78:	f10a 0a01 	add.w	sl, sl, #1
 8013a7c:	9304      	str	r3, [sp, #16]
 8013a7e:	9307      	str	r3, [sp, #28]
 8013a80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013a84:	931a      	str	r3, [sp, #104]	; 0x68
 8013a86:	4654      	mov	r4, sl
 8013a88:	2205      	movs	r2, #5
 8013a8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a8e:	4854      	ldr	r0, [pc, #336]	; (8013be0 <_vfiprintf_r+0x220>)
 8013a90:	f7ec fbce 	bl	8000230 <memchr>
 8013a94:	9a04      	ldr	r2, [sp, #16]
 8013a96:	b9d8      	cbnz	r0, 8013ad0 <_vfiprintf_r+0x110>
 8013a98:	06d1      	lsls	r1, r2, #27
 8013a9a:	bf44      	itt	mi
 8013a9c:	2320      	movmi	r3, #32
 8013a9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013aa2:	0713      	lsls	r3, r2, #28
 8013aa4:	bf44      	itt	mi
 8013aa6:	232b      	movmi	r3, #43	; 0x2b
 8013aa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013aac:	f89a 3000 	ldrb.w	r3, [sl]
 8013ab0:	2b2a      	cmp	r3, #42	; 0x2a
 8013ab2:	d015      	beq.n	8013ae0 <_vfiprintf_r+0x120>
 8013ab4:	9a07      	ldr	r2, [sp, #28]
 8013ab6:	4654      	mov	r4, sl
 8013ab8:	2000      	movs	r0, #0
 8013aba:	f04f 0c0a 	mov.w	ip, #10
 8013abe:	4621      	mov	r1, r4
 8013ac0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013ac4:	3b30      	subs	r3, #48	; 0x30
 8013ac6:	2b09      	cmp	r3, #9
 8013ac8:	d94d      	bls.n	8013b66 <_vfiprintf_r+0x1a6>
 8013aca:	b1b0      	cbz	r0, 8013afa <_vfiprintf_r+0x13a>
 8013acc:	9207      	str	r2, [sp, #28]
 8013ace:	e014      	b.n	8013afa <_vfiprintf_r+0x13a>
 8013ad0:	eba0 0308 	sub.w	r3, r0, r8
 8013ad4:	fa09 f303 	lsl.w	r3, r9, r3
 8013ad8:	4313      	orrs	r3, r2
 8013ada:	9304      	str	r3, [sp, #16]
 8013adc:	46a2      	mov	sl, r4
 8013ade:	e7d2      	b.n	8013a86 <_vfiprintf_r+0xc6>
 8013ae0:	9b03      	ldr	r3, [sp, #12]
 8013ae2:	1d19      	adds	r1, r3, #4
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	9103      	str	r1, [sp, #12]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	bfbb      	ittet	lt
 8013aec:	425b      	neglt	r3, r3
 8013aee:	f042 0202 	orrlt.w	r2, r2, #2
 8013af2:	9307      	strge	r3, [sp, #28]
 8013af4:	9307      	strlt	r3, [sp, #28]
 8013af6:	bfb8      	it	lt
 8013af8:	9204      	strlt	r2, [sp, #16]
 8013afa:	7823      	ldrb	r3, [r4, #0]
 8013afc:	2b2e      	cmp	r3, #46	; 0x2e
 8013afe:	d10c      	bne.n	8013b1a <_vfiprintf_r+0x15a>
 8013b00:	7863      	ldrb	r3, [r4, #1]
 8013b02:	2b2a      	cmp	r3, #42	; 0x2a
 8013b04:	d134      	bne.n	8013b70 <_vfiprintf_r+0x1b0>
 8013b06:	9b03      	ldr	r3, [sp, #12]
 8013b08:	1d1a      	adds	r2, r3, #4
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	9203      	str	r2, [sp, #12]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	bfb8      	it	lt
 8013b12:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013b16:	3402      	adds	r4, #2
 8013b18:	9305      	str	r3, [sp, #20]
 8013b1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8013bf0 <_vfiprintf_r+0x230>
 8013b1e:	7821      	ldrb	r1, [r4, #0]
 8013b20:	2203      	movs	r2, #3
 8013b22:	4650      	mov	r0, sl
 8013b24:	f7ec fb84 	bl	8000230 <memchr>
 8013b28:	b138      	cbz	r0, 8013b3a <_vfiprintf_r+0x17a>
 8013b2a:	9b04      	ldr	r3, [sp, #16]
 8013b2c:	eba0 000a 	sub.w	r0, r0, sl
 8013b30:	2240      	movs	r2, #64	; 0x40
 8013b32:	4082      	lsls	r2, r0
 8013b34:	4313      	orrs	r3, r2
 8013b36:	3401      	adds	r4, #1
 8013b38:	9304      	str	r3, [sp, #16]
 8013b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b3e:	4829      	ldr	r0, [pc, #164]	; (8013be4 <_vfiprintf_r+0x224>)
 8013b40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013b44:	2206      	movs	r2, #6
 8013b46:	f7ec fb73 	bl	8000230 <memchr>
 8013b4a:	2800      	cmp	r0, #0
 8013b4c:	d03f      	beq.n	8013bce <_vfiprintf_r+0x20e>
 8013b4e:	4b26      	ldr	r3, [pc, #152]	; (8013be8 <_vfiprintf_r+0x228>)
 8013b50:	bb1b      	cbnz	r3, 8013b9a <_vfiprintf_r+0x1da>
 8013b52:	9b03      	ldr	r3, [sp, #12]
 8013b54:	3307      	adds	r3, #7
 8013b56:	f023 0307 	bic.w	r3, r3, #7
 8013b5a:	3308      	adds	r3, #8
 8013b5c:	9303      	str	r3, [sp, #12]
 8013b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b60:	443b      	add	r3, r7
 8013b62:	9309      	str	r3, [sp, #36]	; 0x24
 8013b64:	e768      	b.n	8013a38 <_vfiprintf_r+0x78>
 8013b66:	fb0c 3202 	mla	r2, ip, r2, r3
 8013b6a:	460c      	mov	r4, r1
 8013b6c:	2001      	movs	r0, #1
 8013b6e:	e7a6      	b.n	8013abe <_vfiprintf_r+0xfe>
 8013b70:	2300      	movs	r3, #0
 8013b72:	3401      	adds	r4, #1
 8013b74:	9305      	str	r3, [sp, #20]
 8013b76:	4619      	mov	r1, r3
 8013b78:	f04f 0c0a 	mov.w	ip, #10
 8013b7c:	4620      	mov	r0, r4
 8013b7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013b82:	3a30      	subs	r2, #48	; 0x30
 8013b84:	2a09      	cmp	r2, #9
 8013b86:	d903      	bls.n	8013b90 <_vfiprintf_r+0x1d0>
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d0c6      	beq.n	8013b1a <_vfiprintf_r+0x15a>
 8013b8c:	9105      	str	r1, [sp, #20]
 8013b8e:	e7c4      	b.n	8013b1a <_vfiprintf_r+0x15a>
 8013b90:	fb0c 2101 	mla	r1, ip, r1, r2
 8013b94:	4604      	mov	r4, r0
 8013b96:	2301      	movs	r3, #1
 8013b98:	e7f0      	b.n	8013b7c <_vfiprintf_r+0x1bc>
 8013b9a:	ab03      	add	r3, sp, #12
 8013b9c:	9300      	str	r3, [sp, #0]
 8013b9e:	462a      	mov	r2, r5
 8013ba0:	4b12      	ldr	r3, [pc, #72]	; (8013bec <_vfiprintf_r+0x22c>)
 8013ba2:	a904      	add	r1, sp, #16
 8013ba4:	4630      	mov	r0, r6
 8013ba6:	f7fd fddd 	bl	8011764 <_printf_float>
 8013baa:	4607      	mov	r7, r0
 8013bac:	1c78      	adds	r0, r7, #1
 8013bae:	d1d6      	bne.n	8013b5e <_vfiprintf_r+0x19e>
 8013bb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013bb2:	07d9      	lsls	r1, r3, #31
 8013bb4:	d405      	bmi.n	8013bc2 <_vfiprintf_r+0x202>
 8013bb6:	89ab      	ldrh	r3, [r5, #12]
 8013bb8:	059a      	lsls	r2, r3, #22
 8013bba:	d402      	bmi.n	8013bc2 <_vfiprintf_r+0x202>
 8013bbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013bbe:	f7fe fb6f 	bl	80122a0 <__retarget_lock_release_recursive>
 8013bc2:	89ab      	ldrh	r3, [r5, #12]
 8013bc4:	065b      	lsls	r3, r3, #25
 8013bc6:	f53f af1d 	bmi.w	8013a04 <_vfiprintf_r+0x44>
 8013bca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013bcc:	e71c      	b.n	8013a08 <_vfiprintf_r+0x48>
 8013bce:	ab03      	add	r3, sp, #12
 8013bd0:	9300      	str	r3, [sp, #0]
 8013bd2:	462a      	mov	r2, r5
 8013bd4:	4b05      	ldr	r3, [pc, #20]	; (8013bec <_vfiprintf_r+0x22c>)
 8013bd6:	a904      	add	r1, sp, #16
 8013bd8:	4630      	mov	r0, r6
 8013bda:	f7fe f867 	bl	8011cac <_printf_i>
 8013bde:	e7e4      	b.n	8013baa <_vfiprintf_r+0x1ea>
 8013be0:	080157ea 	.word	0x080157ea
 8013be4:	080157f4 	.word	0x080157f4
 8013be8:	08011765 	.word	0x08011765
 8013bec:	0801399b 	.word	0x0801399b
 8013bf0:	080157f0 	.word	0x080157f0

08013bf4 <__swbuf_r>:
 8013bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bf6:	460e      	mov	r6, r1
 8013bf8:	4614      	mov	r4, r2
 8013bfa:	4605      	mov	r5, r0
 8013bfc:	b118      	cbz	r0, 8013c06 <__swbuf_r+0x12>
 8013bfe:	6a03      	ldr	r3, [r0, #32]
 8013c00:	b90b      	cbnz	r3, 8013c06 <__swbuf_r+0x12>
 8013c02:	f7fe fa01 	bl	8012008 <__sinit>
 8013c06:	69a3      	ldr	r3, [r4, #24]
 8013c08:	60a3      	str	r3, [r4, #8]
 8013c0a:	89a3      	ldrh	r3, [r4, #12]
 8013c0c:	071a      	lsls	r2, r3, #28
 8013c0e:	d525      	bpl.n	8013c5c <__swbuf_r+0x68>
 8013c10:	6923      	ldr	r3, [r4, #16]
 8013c12:	b31b      	cbz	r3, 8013c5c <__swbuf_r+0x68>
 8013c14:	6823      	ldr	r3, [r4, #0]
 8013c16:	6922      	ldr	r2, [r4, #16]
 8013c18:	1a98      	subs	r0, r3, r2
 8013c1a:	6963      	ldr	r3, [r4, #20]
 8013c1c:	b2f6      	uxtb	r6, r6
 8013c1e:	4283      	cmp	r3, r0
 8013c20:	4637      	mov	r7, r6
 8013c22:	dc04      	bgt.n	8013c2e <__swbuf_r+0x3a>
 8013c24:	4621      	mov	r1, r4
 8013c26:	4628      	mov	r0, r5
 8013c28:	f7ff fe12 	bl	8013850 <_fflush_r>
 8013c2c:	b9e0      	cbnz	r0, 8013c68 <__swbuf_r+0x74>
 8013c2e:	68a3      	ldr	r3, [r4, #8]
 8013c30:	3b01      	subs	r3, #1
 8013c32:	60a3      	str	r3, [r4, #8]
 8013c34:	6823      	ldr	r3, [r4, #0]
 8013c36:	1c5a      	adds	r2, r3, #1
 8013c38:	6022      	str	r2, [r4, #0]
 8013c3a:	701e      	strb	r6, [r3, #0]
 8013c3c:	6962      	ldr	r2, [r4, #20]
 8013c3e:	1c43      	adds	r3, r0, #1
 8013c40:	429a      	cmp	r2, r3
 8013c42:	d004      	beq.n	8013c4e <__swbuf_r+0x5a>
 8013c44:	89a3      	ldrh	r3, [r4, #12]
 8013c46:	07db      	lsls	r3, r3, #31
 8013c48:	d506      	bpl.n	8013c58 <__swbuf_r+0x64>
 8013c4a:	2e0a      	cmp	r6, #10
 8013c4c:	d104      	bne.n	8013c58 <__swbuf_r+0x64>
 8013c4e:	4621      	mov	r1, r4
 8013c50:	4628      	mov	r0, r5
 8013c52:	f7ff fdfd 	bl	8013850 <_fflush_r>
 8013c56:	b938      	cbnz	r0, 8013c68 <__swbuf_r+0x74>
 8013c58:	4638      	mov	r0, r7
 8013c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c5c:	4621      	mov	r1, r4
 8013c5e:	4628      	mov	r0, r5
 8013c60:	f000 f806 	bl	8013c70 <__swsetup_r>
 8013c64:	2800      	cmp	r0, #0
 8013c66:	d0d5      	beq.n	8013c14 <__swbuf_r+0x20>
 8013c68:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013c6c:	e7f4      	b.n	8013c58 <__swbuf_r+0x64>
	...

08013c70 <__swsetup_r>:
 8013c70:	b538      	push	{r3, r4, r5, lr}
 8013c72:	4b2a      	ldr	r3, [pc, #168]	; (8013d1c <__swsetup_r+0xac>)
 8013c74:	4605      	mov	r5, r0
 8013c76:	6818      	ldr	r0, [r3, #0]
 8013c78:	460c      	mov	r4, r1
 8013c7a:	b118      	cbz	r0, 8013c84 <__swsetup_r+0x14>
 8013c7c:	6a03      	ldr	r3, [r0, #32]
 8013c7e:	b90b      	cbnz	r3, 8013c84 <__swsetup_r+0x14>
 8013c80:	f7fe f9c2 	bl	8012008 <__sinit>
 8013c84:	89a3      	ldrh	r3, [r4, #12]
 8013c86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013c8a:	0718      	lsls	r0, r3, #28
 8013c8c:	d422      	bmi.n	8013cd4 <__swsetup_r+0x64>
 8013c8e:	06d9      	lsls	r1, r3, #27
 8013c90:	d407      	bmi.n	8013ca2 <__swsetup_r+0x32>
 8013c92:	2309      	movs	r3, #9
 8013c94:	602b      	str	r3, [r5, #0]
 8013c96:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013c9a:	81a3      	strh	r3, [r4, #12]
 8013c9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013ca0:	e034      	b.n	8013d0c <__swsetup_r+0x9c>
 8013ca2:	0758      	lsls	r0, r3, #29
 8013ca4:	d512      	bpl.n	8013ccc <__swsetup_r+0x5c>
 8013ca6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013ca8:	b141      	cbz	r1, 8013cbc <__swsetup_r+0x4c>
 8013caa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013cae:	4299      	cmp	r1, r3
 8013cb0:	d002      	beq.n	8013cb8 <__swsetup_r+0x48>
 8013cb2:	4628      	mov	r0, r5
 8013cb4:	f7ff f97e 	bl	8012fb4 <_free_r>
 8013cb8:	2300      	movs	r3, #0
 8013cba:	6363      	str	r3, [r4, #52]	; 0x34
 8013cbc:	89a3      	ldrh	r3, [r4, #12]
 8013cbe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013cc2:	81a3      	strh	r3, [r4, #12]
 8013cc4:	2300      	movs	r3, #0
 8013cc6:	6063      	str	r3, [r4, #4]
 8013cc8:	6923      	ldr	r3, [r4, #16]
 8013cca:	6023      	str	r3, [r4, #0]
 8013ccc:	89a3      	ldrh	r3, [r4, #12]
 8013cce:	f043 0308 	orr.w	r3, r3, #8
 8013cd2:	81a3      	strh	r3, [r4, #12]
 8013cd4:	6923      	ldr	r3, [r4, #16]
 8013cd6:	b94b      	cbnz	r3, 8013cec <__swsetup_r+0x7c>
 8013cd8:	89a3      	ldrh	r3, [r4, #12]
 8013cda:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013cde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013ce2:	d003      	beq.n	8013cec <__swsetup_r+0x7c>
 8013ce4:	4621      	mov	r1, r4
 8013ce6:	4628      	mov	r0, r5
 8013ce8:	f000 f840 	bl	8013d6c <__smakebuf_r>
 8013cec:	89a0      	ldrh	r0, [r4, #12]
 8013cee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013cf2:	f010 0301 	ands.w	r3, r0, #1
 8013cf6:	d00a      	beq.n	8013d0e <__swsetup_r+0x9e>
 8013cf8:	2300      	movs	r3, #0
 8013cfa:	60a3      	str	r3, [r4, #8]
 8013cfc:	6963      	ldr	r3, [r4, #20]
 8013cfe:	425b      	negs	r3, r3
 8013d00:	61a3      	str	r3, [r4, #24]
 8013d02:	6923      	ldr	r3, [r4, #16]
 8013d04:	b943      	cbnz	r3, 8013d18 <__swsetup_r+0xa8>
 8013d06:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013d0a:	d1c4      	bne.n	8013c96 <__swsetup_r+0x26>
 8013d0c:	bd38      	pop	{r3, r4, r5, pc}
 8013d0e:	0781      	lsls	r1, r0, #30
 8013d10:	bf58      	it	pl
 8013d12:	6963      	ldrpl	r3, [r4, #20]
 8013d14:	60a3      	str	r3, [r4, #8]
 8013d16:	e7f4      	b.n	8013d02 <__swsetup_r+0x92>
 8013d18:	2000      	movs	r0, #0
 8013d1a:	e7f7      	b.n	8013d0c <__swsetup_r+0x9c>
 8013d1c:	2000006c 	.word	0x2000006c

08013d20 <__swhatbuf_r>:
 8013d20:	b570      	push	{r4, r5, r6, lr}
 8013d22:	460c      	mov	r4, r1
 8013d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d28:	2900      	cmp	r1, #0
 8013d2a:	b096      	sub	sp, #88	; 0x58
 8013d2c:	4615      	mov	r5, r2
 8013d2e:	461e      	mov	r6, r3
 8013d30:	da0d      	bge.n	8013d4e <__swhatbuf_r+0x2e>
 8013d32:	89a3      	ldrh	r3, [r4, #12]
 8013d34:	f013 0f80 	tst.w	r3, #128	; 0x80
 8013d38:	f04f 0100 	mov.w	r1, #0
 8013d3c:	bf0c      	ite	eq
 8013d3e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8013d42:	2340      	movne	r3, #64	; 0x40
 8013d44:	2000      	movs	r0, #0
 8013d46:	6031      	str	r1, [r6, #0]
 8013d48:	602b      	str	r3, [r5, #0]
 8013d4a:	b016      	add	sp, #88	; 0x58
 8013d4c:	bd70      	pop	{r4, r5, r6, pc}
 8013d4e:	466a      	mov	r2, sp
 8013d50:	f000 f848 	bl	8013de4 <_fstat_r>
 8013d54:	2800      	cmp	r0, #0
 8013d56:	dbec      	blt.n	8013d32 <__swhatbuf_r+0x12>
 8013d58:	9901      	ldr	r1, [sp, #4]
 8013d5a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8013d5e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8013d62:	4259      	negs	r1, r3
 8013d64:	4159      	adcs	r1, r3
 8013d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013d6a:	e7eb      	b.n	8013d44 <__swhatbuf_r+0x24>

08013d6c <__smakebuf_r>:
 8013d6c:	898b      	ldrh	r3, [r1, #12]
 8013d6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013d70:	079d      	lsls	r5, r3, #30
 8013d72:	4606      	mov	r6, r0
 8013d74:	460c      	mov	r4, r1
 8013d76:	d507      	bpl.n	8013d88 <__smakebuf_r+0x1c>
 8013d78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013d7c:	6023      	str	r3, [r4, #0]
 8013d7e:	6123      	str	r3, [r4, #16]
 8013d80:	2301      	movs	r3, #1
 8013d82:	6163      	str	r3, [r4, #20]
 8013d84:	b002      	add	sp, #8
 8013d86:	bd70      	pop	{r4, r5, r6, pc}
 8013d88:	ab01      	add	r3, sp, #4
 8013d8a:	466a      	mov	r2, sp
 8013d8c:	f7ff ffc8 	bl	8013d20 <__swhatbuf_r>
 8013d90:	9900      	ldr	r1, [sp, #0]
 8013d92:	4605      	mov	r5, r0
 8013d94:	4630      	mov	r0, r6
 8013d96:	f7fd fbb9 	bl	801150c <_malloc_r>
 8013d9a:	b948      	cbnz	r0, 8013db0 <__smakebuf_r+0x44>
 8013d9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013da0:	059a      	lsls	r2, r3, #22
 8013da2:	d4ef      	bmi.n	8013d84 <__smakebuf_r+0x18>
 8013da4:	f023 0303 	bic.w	r3, r3, #3
 8013da8:	f043 0302 	orr.w	r3, r3, #2
 8013dac:	81a3      	strh	r3, [r4, #12]
 8013dae:	e7e3      	b.n	8013d78 <__smakebuf_r+0xc>
 8013db0:	89a3      	ldrh	r3, [r4, #12]
 8013db2:	6020      	str	r0, [r4, #0]
 8013db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013db8:	81a3      	strh	r3, [r4, #12]
 8013dba:	9b00      	ldr	r3, [sp, #0]
 8013dbc:	6163      	str	r3, [r4, #20]
 8013dbe:	9b01      	ldr	r3, [sp, #4]
 8013dc0:	6120      	str	r0, [r4, #16]
 8013dc2:	b15b      	cbz	r3, 8013ddc <__smakebuf_r+0x70>
 8013dc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013dc8:	4630      	mov	r0, r6
 8013dca:	f000 f81d 	bl	8013e08 <_isatty_r>
 8013dce:	b128      	cbz	r0, 8013ddc <__smakebuf_r+0x70>
 8013dd0:	89a3      	ldrh	r3, [r4, #12]
 8013dd2:	f023 0303 	bic.w	r3, r3, #3
 8013dd6:	f043 0301 	orr.w	r3, r3, #1
 8013dda:	81a3      	strh	r3, [r4, #12]
 8013ddc:	89a3      	ldrh	r3, [r4, #12]
 8013dde:	431d      	orrs	r5, r3
 8013de0:	81a5      	strh	r5, [r4, #12]
 8013de2:	e7cf      	b.n	8013d84 <__smakebuf_r+0x18>

08013de4 <_fstat_r>:
 8013de4:	b538      	push	{r3, r4, r5, lr}
 8013de6:	4d07      	ldr	r5, [pc, #28]	; (8013e04 <_fstat_r+0x20>)
 8013de8:	2300      	movs	r3, #0
 8013dea:	4604      	mov	r4, r0
 8013dec:	4608      	mov	r0, r1
 8013dee:	4611      	mov	r1, r2
 8013df0:	602b      	str	r3, [r5, #0]
 8013df2:	f7f8 ffe0 	bl	800cdb6 <_fstat>
 8013df6:	1c43      	adds	r3, r0, #1
 8013df8:	d102      	bne.n	8013e00 <_fstat_r+0x1c>
 8013dfa:	682b      	ldr	r3, [r5, #0]
 8013dfc:	b103      	cbz	r3, 8013e00 <_fstat_r+0x1c>
 8013dfe:	6023      	str	r3, [r4, #0]
 8013e00:	bd38      	pop	{r3, r4, r5, pc}
 8013e02:	bf00      	nop
 8013e04:	20000530 	.word	0x20000530

08013e08 <_isatty_r>:
 8013e08:	b538      	push	{r3, r4, r5, lr}
 8013e0a:	4d06      	ldr	r5, [pc, #24]	; (8013e24 <_isatty_r+0x1c>)
 8013e0c:	2300      	movs	r3, #0
 8013e0e:	4604      	mov	r4, r0
 8013e10:	4608      	mov	r0, r1
 8013e12:	602b      	str	r3, [r5, #0]
 8013e14:	f7f8 ffdf 	bl	800cdd6 <_isatty>
 8013e18:	1c43      	adds	r3, r0, #1
 8013e1a:	d102      	bne.n	8013e22 <_isatty_r+0x1a>
 8013e1c:	682b      	ldr	r3, [r5, #0]
 8013e1e:	b103      	cbz	r3, 8013e22 <_isatty_r+0x1a>
 8013e20:	6023      	str	r3, [r4, #0]
 8013e22:	bd38      	pop	{r3, r4, r5, pc}
 8013e24:	20000530 	.word	0x20000530

08013e28 <_Unwind_GetDataRelBase>:
 8013e28:	b508      	push	{r3, lr}
 8013e2a:	f7fd fb37 	bl	801149c <abort>

08013e2e <_Unwind_GetTextRelBase>:
 8013e2e:	b508      	push	{r3, lr}
 8013e30:	f7ff fffa 	bl	8013e28 <_Unwind_GetDataRelBase>

08013e34 <_init>:
 8013e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e36:	bf00      	nop
 8013e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e3a:	bc08      	pop	{r3}
 8013e3c:	469e      	mov	lr, r3
 8013e3e:	4770      	bx	lr

08013e40 <_fini>:
 8013e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e42:	bf00      	nop
 8013e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e46:	bc08      	pop	{r3}
 8013e48:	469e      	mov	lr, r3
 8013e4a:	4770      	bx	lr
