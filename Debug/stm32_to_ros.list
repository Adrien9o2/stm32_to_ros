
stm32_to_ros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ede8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c64  0800efb8  0800efb8  0001efb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc1c  0800fc1c  00020284  2**0
                  CONTENTS
  4 .ARM          00000008  0800fc1c  0800fc1c  0001fc1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fc24  0800fc24  00020284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800fc24  0800fc24  0001fc24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800fc2c  0800fc2c  0001fc2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000284  20000000  0800fc34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  20000284  0800feb8  00020284  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000061c  0800feb8  0002061c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00032276  00000000  00000000  000202f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004944  00000000  00000000  0005256d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002190  00000000  00000000  00056eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000019be  00000000  00000000  00059048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a3d  00000000  00000000  0005aa06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b0a9  00000000  00000000  00082443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eeb28  00000000  00000000  0009d4ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000ab4c  00000000  00000000  0018c014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00196b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000284 	.word	0x20000284
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800efa0 	.word	0x0800efa0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000288 	.word	0x20000288
 800020c:	0800efa0 	.word	0x0800efa0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b970 	b.w	8000f00 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9e08      	ldr	r6, [sp, #32]
 8000c3e:	460d      	mov	r5, r1
 8000c40:	4604      	mov	r4, r0
 8000c42:	460f      	mov	r7, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14a      	bne.n	8000cde <__udivmoddi4+0xa6>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4694      	mov	ip, r2
 8000c4c:	d965      	bls.n	8000d1a <__udivmoddi4+0xe2>
 8000c4e:	fab2 f382 	clz	r3, r2
 8000c52:	b143      	cbz	r3, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c58:	f1c3 0220 	rsb	r2, r3, #32
 8000c5c:	409f      	lsls	r7, r3
 8000c5e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c62:	4317      	orrs	r7, r2
 8000c64:	409c      	lsls	r4, r3
 8000c66:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c6a:	fa1f f58c 	uxth.w	r5, ip
 8000c6e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c72:	0c22      	lsrs	r2, r4, #16
 8000c74:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c78:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c7c:	fb01 f005 	mul.w	r0, r1, r5
 8000c80:	4290      	cmp	r0, r2
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x62>
 8000c84:	eb1c 0202 	adds.w	r2, ip, r2
 8000c88:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c8c:	f080 811c 	bcs.w	8000ec8 <__udivmoddi4+0x290>
 8000c90:	4290      	cmp	r0, r2
 8000c92:	f240 8119 	bls.w	8000ec8 <__udivmoddi4+0x290>
 8000c96:	3902      	subs	r1, #2
 8000c98:	4462      	add	r2, ip
 8000c9a:	1a12      	subs	r2, r2, r0
 8000c9c:	b2a4      	uxth	r4, r4
 8000c9e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ca2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ca6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000caa:	fb00 f505 	mul.w	r5, r0, r5
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	d90a      	bls.n	8000cc8 <__udivmoddi4+0x90>
 8000cb2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cba:	f080 8107 	bcs.w	8000ecc <__udivmoddi4+0x294>
 8000cbe:	42a5      	cmp	r5, r4
 8000cc0:	f240 8104 	bls.w	8000ecc <__udivmoddi4+0x294>
 8000cc4:	4464      	add	r4, ip
 8000cc6:	3802      	subs	r0, #2
 8000cc8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ccc:	1b64      	subs	r4, r4, r5
 8000cce:	2100      	movs	r1, #0
 8000cd0:	b11e      	cbz	r6, 8000cda <__udivmoddi4+0xa2>
 8000cd2:	40dc      	lsrs	r4, r3
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0xbc>
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	f000 80ed 	beq.w	8000ec2 <__udivmoddi4+0x28a>
 8000ce8:	2100      	movs	r1, #0
 8000cea:	e9c6 0500 	strd	r0, r5, [r6]
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf4:	fab3 f183 	clz	r1, r3
 8000cf8:	2900      	cmp	r1, #0
 8000cfa:	d149      	bne.n	8000d90 <__udivmoddi4+0x158>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	d302      	bcc.n	8000d06 <__udivmoddi4+0xce>
 8000d00:	4282      	cmp	r2, r0
 8000d02:	f200 80f8 	bhi.w	8000ef6 <__udivmoddi4+0x2be>
 8000d06:	1a84      	subs	r4, r0, r2
 8000d08:	eb65 0203 	sbc.w	r2, r5, r3
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	4617      	mov	r7, r2
 8000d10:	2e00      	cmp	r6, #0
 8000d12:	d0e2      	beq.n	8000cda <__udivmoddi4+0xa2>
 8000d14:	e9c6 4700 	strd	r4, r7, [r6]
 8000d18:	e7df      	b.n	8000cda <__udivmoddi4+0xa2>
 8000d1a:	b902      	cbnz	r2, 8000d1e <__udivmoddi4+0xe6>
 8000d1c:	deff      	udf	#255	; 0xff
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f040 8090 	bne.w	8000e48 <__udivmoddi4+0x210>
 8000d28:	1a8a      	subs	r2, r1, r2
 8000d2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2e:	fa1f fe8c 	uxth.w	lr, ip
 8000d32:	2101      	movs	r1, #1
 8000d34:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d38:	fb07 2015 	mls	r0, r7, r5, r2
 8000d3c:	0c22      	lsrs	r2, r4, #16
 8000d3e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d42:	fb0e f005 	mul.w	r0, lr, r5
 8000d46:	4290      	cmp	r0, r2
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x124>
 8000d4a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d4e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x122>
 8000d54:	4290      	cmp	r0, r2
 8000d56:	f200 80cb 	bhi.w	8000ef0 <__udivmoddi4+0x2b8>
 8000d5a:	4645      	mov	r5, r8
 8000d5c:	1a12      	subs	r2, r2, r0
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d64:	fb07 2210 	mls	r2, r7, r0, r2
 8000d68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d6c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d70:	45a6      	cmp	lr, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x14e>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7c:	d202      	bcs.n	8000d84 <__udivmoddi4+0x14c>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f200 80bb 	bhi.w	8000efa <__udivmoddi4+0x2c2>
 8000d84:	4610      	mov	r0, r2
 8000d86:	eba4 040e 	sub.w	r4, r4, lr
 8000d8a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d8e:	e79f      	b.n	8000cd0 <__udivmoddi4+0x98>
 8000d90:	f1c1 0720 	rsb	r7, r1, #32
 8000d94:	408b      	lsls	r3, r1
 8000d96:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d9a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d9e:	fa05 f401 	lsl.w	r4, r5, r1
 8000da2:	fa20 f307 	lsr.w	r3, r0, r7
 8000da6:	40fd      	lsrs	r5, r7
 8000da8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dac:	4323      	orrs	r3, r4
 8000dae:	fbb5 f8f9 	udiv	r8, r5, r9
 8000db2:	fa1f fe8c 	uxth.w	lr, ip
 8000db6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dba:	0c1c      	lsrs	r4, r3, #16
 8000dbc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dc0:	fb08 f50e 	mul.w	r5, r8, lr
 8000dc4:	42a5      	cmp	r5, r4
 8000dc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dca:	fa00 f001 	lsl.w	r0, r0, r1
 8000dce:	d90b      	bls.n	8000de8 <__udivmoddi4+0x1b0>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd8:	f080 8088 	bcs.w	8000eec <__udivmoddi4+0x2b4>
 8000ddc:	42a5      	cmp	r5, r4
 8000dde:	f240 8085 	bls.w	8000eec <__udivmoddi4+0x2b4>
 8000de2:	f1a8 0802 	sub.w	r8, r8, #2
 8000de6:	4464      	add	r4, ip
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	b29d      	uxth	r5, r3
 8000dec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000df0:	fb09 4413 	mls	r4, r9, r3, r4
 8000df4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000df8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x1da>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e08:	d26c      	bcs.n	8000ee4 <__udivmoddi4+0x2ac>
 8000e0a:	45a6      	cmp	lr, r4
 8000e0c:	d96a      	bls.n	8000ee4 <__udivmoddi4+0x2ac>
 8000e0e:	3b02      	subs	r3, #2
 8000e10:	4464      	add	r4, ip
 8000e12:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e16:	fba3 9502 	umull	r9, r5, r3, r2
 8000e1a:	eba4 040e 	sub.w	r4, r4, lr
 8000e1e:	42ac      	cmp	r4, r5
 8000e20:	46c8      	mov	r8, r9
 8000e22:	46ae      	mov	lr, r5
 8000e24:	d356      	bcc.n	8000ed4 <__udivmoddi4+0x29c>
 8000e26:	d053      	beq.n	8000ed0 <__udivmoddi4+0x298>
 8000e28:	b156      	cbz	r6, 8000e40 <__udivmoddi4+0x208>
 8000e2a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e2e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e32:	fa04 f707 	lsl.w	r7, r4, r7
 8000e36:	40ca      	lsrs	r2, r1
 8000e38:	40cc      	lsrs	r4, r1
 8000e3a:	4317      	orrs	r7, r2
 8000e3c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e40:	4618      	mov	r0, r3
 8000e42:	2100      	movs	r1, #0
 8000e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e48:	f1c3 0120 	rsb	r1, r3, #32
 8000e4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e50:	fa20 f201 	lsr.w	r2, r0, r1
 8000e54:	fa25 f101 	lsr.w	r1, r5, r1
 8000e58:	409d      	lsls	r5, r3
 8000e5a:	432a      	orrs	r2, r5
 8000e5c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e60:	fa1f fe8c 	uxth.w	lr, ip
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1510 	mls	r5, r7, r0, r1
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e72:	fb00 f50e 	mul.w	r5, r0, lr
 8000e76:	428d      	cmp	r5, r1
 8000e78:	fa04 f403 	lsl.w	r4, r4, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x258>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e86:	d22f      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000e88:	428d      	cmp	r5, r1
 8000e8a:	d92d      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	1b49      	subs	r1, r1, r5
 8000e92:	b292      	uxth	r2, r2
 8000e94:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e98:	fb07 1115 	mls	r1, r7, r5, r1
 8000e9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ea4:	4291      	cmp	r1, r2
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x282>
 8000ea8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eac:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eb0:	d216      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000eb2:	4291      	cmp	r1, r2
 8000eb4:	d914      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000eb6:	3d02      	subs	r5, #2
 8000eb8:	4462      	add	r2, ip
 8000eba:	1a52      	subs	r2, r2, r1
 8000ebc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ec0:	e738      	b.n	8000d34 <__udivmoddi4+0xfc>
 8000ec2:	4631      	mov	r1, r6
 8000ec4:	4630      	mov	r0, r6
 8000ec6:	e708      	b.n	8000cda <__udivmoddi4+0xa2>
 8000ec8:	4639      	mov	r1, r7
 8000eca:	e6e6      	b.n	8000c9a <__udivmoddi4+0x62>
 8000ecc:	4610      	mov	r0, r2
 8000ece:	e6fb      	b.n	8000cc8 <__udivmoddi4+0x90>
 8000ed0:	4548      	cmp	r0, r9
 8000ed2:	d2a9      	bcs.n	8000e28 <__udivmoddi4+0x1f0>
 8000ed4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000edc:	3b01      	subs	r3, #1
 8000ede:	e7a3      	b.n	8000e28 <__udivmoddi4+0x1f0>
 8000ee0:	4645      	mov	r5, r8
 8000ee2:	e7ea      	b.n	8000eba <__udivmoddi4+0x282>
 8000ee4:	462b      	mov	r3, r5
 8000ee6:	e794      	b.n	8000e12 <__udivmoddi4+0x1da>
 8000ee8:	4640      	mov	r0, r8
 8000eea:	e7d1      	b.n	8000e90 <__udivmoddi4+0x258>
 8000eec:	46d0      	mov	r8, sl
 8000eee:	e77b      	b.n	8000de8 <__udivmoddi4+0x1b0>
 8000ef0:	3d02      	subs	r5, #2
 8000ef2:	4462      	add	r2, ip
 8000ef4:	e732      	b.n	8000d5c <__udivmoddi4+0x124>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e70a      	b.n	8000d10 <__udivmoddi4+0xd8>
 8000efa:	4464      	add	r4, ip
 8000efc:	3802      	subs	r0, #2
 8000efe:	e742      	b.n	8000d86 <__udivmoddi4+0x14e>

08000f00 <__aeabi_idiv0>:
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <_ZN5L64709ReadWriteEPhS0_t>:
     * @param[out] pBufferToRead pointer to the buffer to read data into.
     * @param[in]  pBufferToWrite pointer to the buffer of data to send.
     * @param[in]  NumBytes number of bytes to read and write.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
 8000f10:	807b      	strh	r3, [r7, #2]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	68d8      	ldr	r0, [r3, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	8a1b      	ldrh	r3, [r3, #16]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f007 fd4d 	bl	80089bc <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8000f22:	2001      	movs	r0, #1
 8000f24:	f006 fe72 	bl	8007c0c <HAL_Delay>
        HAL_StatusTypeDef status_transmit = HAL_SPI_Transmit(spi, (uint8_t *)pBufferToWrite, NumBytes, 100);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	6958      	ldr	r0, [r3, #20]
 8000f2c:	887a      	ldrh	r2, [r7, #2]
 8000f2e:	2364      	movs	r3, #100	; 0x64
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	f008 fc38 	bl	80097a6 <HAL_SPI_Transmit>
 8000f36:	4603      	mov	r3, r0
 8000f38:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 8000f3a:	7dfb      	ldrb	r3, [r7, #23]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d009      	beq.n	8000f54 <_ZN5L64709ReadWriteEPhS0_t+0x50>
        {
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	68d8      	ldr	r0, [r3, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	8a1b      	ldrh	r3, [r3, #16]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f007 fd36 	bl	80089bc <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e01e      	b.n	8000f92 <_ZN5L64709ReadWriteEPhS0_t+0x8e>
        }
        HAL_StatusTypeDef status_receive = HAL_SPI_Receive(spi, (uint8_t *)pBufferToRead, NumBytes, 100);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6958      	ldr	r0, [r3, #20]
 8000f58:	887a      	ldrh	r2, [r7, #2]
 8000f5a:	2364      	movs	r3, #100	; 0x64
 8000f5c:	68b9      	ldr	r1, [r7, #8]
 8000f5e:	f008 fd65 	bl	8009a2c <HAL_SPI_Receive>
 8000f62:	4603      	mov	r3, r0
 8000f64:	75bb      	strb	r3, [r7, #22]
        if( status_receive != HAL_StatusTypeDef::HAL_OK)
 8000f66:	7dbb      	ldrb	r3, [r7, #22]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d009      	beq.n	8000f80 <_ZN5L64709ReadWriteEPhS0_t+0x7c>
        {
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	68d8      	ldr	r0, [r3, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	8a1b      	ldrh	r3, [r3, #16]
 8000f74:	2201      	movs	r2, #1
 8000f76:	4619      	mov	r1, r3
 8000f78:	f007 fd20 	bl	80089bc <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e008      	b.n	8000f92 <_ZN5L64709ReadWriteEPhS0_t+0x8e>
        }
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	68d8      	ldr	r0, [r3, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	8a1b      	ldrh	r3, [r3, #16]
 8000f88:	2201      	movs	r2, #1
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f007 fd16 	bl	80089bc <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 8000f90:	2300      	movs	r3, #0
    }
 8000f92:	4618      	mov	r0, r3
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <_ZN5L647023L6470_SPI_CommunicationEPhS0_tm>:
     *------------------------------------------------------------------------*/

    /*
     * Write and read bytes to/from the component through the SPI at the same time.
     */
    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b084      	sub	sp, #16
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	60f8      	str	r0, [r7, #12]
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	607a      	str	r2, [r7, #4]
 8000fa6:	807b      	strh	r3, [r7, #2]
    {
        ReadWrite(pRxData, pTxData, Size);
 8000fa8:	887b      	ldrh	r3, [r7, #2]
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	6879      	ldr	r1, [r7, #4]
 8000fae:	68f8      	ldr	r0, [r7, #12]
 8000fb0:	f7ff ffa8 	bl	8000f04 <_ZN5L64709ReadWriteEPhS0_t>
    }
 8000fb4:	bf00      	nop
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <_ZN5L647020L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
  * @brief  Reset the structure used to store the identifier of the L6470
  *         application command and its the needed parameters.
  * @param  pL6470_AppCmdPkg   The structure to be reset.
  */
void L6470::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  uint8_t id;
  
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73fb      	strb	r3, [r7, #15]
 8000fca:	e01a      	b.n	8001002 <_ZN5L647020L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
  {
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	011b      	lsls	r3, r3, #4
 8000fd0:	683a      	ldr	r2, [r7, #0]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	011b      	lsls	r3, r3, #4
 8000fdc:	683a      	ldr	r2, [r7, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	011b      	lsls	r3, r3, #4
 8000fe8:	683a      	ldr	r2, [r7, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	011b      	lsls	r3, r3, #4
 8000ff4:	683a      	ldr	r2, [r7, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	3301      	adds	r3, #1
 8001000:	73fb      	strb	r3, [r7, #15]
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d9e1      	bls.n	8000fcc <_ZN5L647020L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
  }
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <_ZN5L647019L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
  * @param  p1                The 1st parameter (if it is not needed it will be not considered).
  * @param  p2                The 2nd parameter (if it is not needed it will be not considered).
  * @param  p3                The 3rd parameter (if it is not needed it will be not considered).
  */
void L6470::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
{
 8001016:	b480      	push	{r7}
 8001018:	b085      	sub	sp, #20
 800101a:	af00      	add	r7, sp, #0
 800101c:	60f8      	str	r0, [r7, #12]
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	603b      	str	r3, [r7, #0]
 8001022:	4613      	mov	r3, r2
 8001024:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	7e5b      	ldrb	r3, [r3, #25]
 800102a:	011b      	lsls	r3, r3, #4
 800102c:	68ba      	ldr	r2, [r7, #8]
 800102e:	4413      	add	r3, r2
 8001030:	79fa      	ldrb	r2, [r7, #7]
 8001032:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	7e5b      	ldrb	r3, [r3, #25]
 8001038:	011b      	lsls	r3, r3, #4
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	4413      	add	r3, r2
 800103e:	683a      	ldr	r2, [r7, #0]
 8001040:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	7e5b      	ldrb	r3, [r3, #25]
 8001046:	011b      	lsls	r3, r3, #4
 8001048:	68ba      	ldr	r2, [r7, #8]
 800104a:	4413      	add	r3, r2
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	7e5b      	ldrb	r3, [r3, #25]
 8001054:	011b      	lsls	r3, r3, #4
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	4413      	add	r3, r2
 800105a:	69fa      	ldr	r2, [r7, #28]
 800105c:	60da      	str	r2, [r3, #12]
}
 800105e:	bf00      	nop
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
  * @param  p1                The 1st parameter (if it is not needed it will be not considered).
  * @param  p2                The 2nd parameter (if it is not needed it will be not considered).
  * @param  p3                The 3rd parameter (if it is not needed it will be not considered).
  */
void L6470::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af02      	add	r7, sp, #8
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	4613      	mov	r3, r2
 800107a:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x44>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d106      	bne.n	8001092 <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x26>
  {
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8001084:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x44>)
 8001086:	2201      	movs	r2, #1
 8001088:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 800108a:	68b9      	ldr	r1, [r7, #8]
 800108c:	68f8      	ldr	r0, [r7, #12]
 800108e:	f7ff ff95 	bl	8000fbc <_ZN5L647020L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>
  }
  
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 8001092:	79fa      	ldrb	r2, [r7, #7]
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	9301      	str	r3, [sp, #4]
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	68b9      	ldr	r1, [r7, #8]
 80010a0:	68f8      	ldr	r0, [r7, #12]
 80010a2:	f7ff ffb8 	bl	8001016 <_ZN5L647019L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
}
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200002a1 	.word	0x200002a1

080010b4 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
  *
  * @param  pL6470_AppCmdPkg              Pointer to the sL6470_AppCmdPkg_t to be filled.
  * @param  pL6470_DaisyChainSpiTxStruct  Pointer to the structure used by SPI to send the commands.
  */
void L6470::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b087      	sub	sp, #28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  uint8_t PkgId;
  uint8_t PARAMLengthBytes; /* The number of bytes related to the numeric value for the addressed register */
  uint8_t spibyte;
  
  /* Reset the structure used to send the command to the L6470 Daisy Chain through the SPI */
  uint8_t i = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 80010c4:	2300      	movs	r3, #0
 80010c6:	75bb      	strb	r3, [r7, #22]
 80010c8:	e013      	b.n	80010f2 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	75fb      	strb	r3, [r7, #23]
 80010ce:	e00a      	b.n	80010e6 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 80010d0:	7d7b      	ldrb	r3, [r7, #21]
 80010d2:	1c5a      	adds	r2, r3, #1
 80010d4:	757a      	strb	r2, [r7, #21]
 80010d6:	461a      	mov	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4413      	add	r3, r2
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 80010e0:	7dfb      	ldrb	r3, [r7, #23]
 80010e2:	3301      	adds	r3, #1
 80010e4:	75fb      	strb	r3, [r7, #23]
 80010e6:	7dfb      	ldrb	r3, [r7, #23]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d9f1      	bls.n	80010d0 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 80010ec:	7dbb      	ldrb	r3, [r7, #22]
 80010ee:	3301      	adds	r3, #1
 80010f0:	75bb      	strb	r3, [r7, #22]
 80010f2:	7dbb      	ldrb	r3, [r7, #22]
 80010f4:	2b03      	cmp	r3, #3
 80010f6:	d9e8      	bls.n	80010ca <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>

  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 80010f8:	2300      	movs	r3, #0
 80010fa:	75fb      	strb	r3, [r7, #23]
 80010fc:	e1f1      	b.n	80014e2 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
  {
    /* Build the 1st bytes to transmit with the binary code of the command */
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6a1a      	ldr	r2, [r3, #32]
 8001102:	7dfb      	ldrb	r3, [r7, #23]
 8001104:	011b      	lsls	r3, r3, #4
 8001106:	68b9      	ldr	r1, [r7, #8]
 8001108:	440b      	add	r3, r1
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	460b      	mov	r3, r1
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	1a5b      	subs	r3, r3, r1
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	441a      	add	r2, r3
 8001118:	7dfb      	ldrb	r3, [r7, #23]
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	440b      	add	r3, r1
 800111e:	7b12      	ldrb	r2, [r2, #12]
 8001120:	701a      	strb	r2, [r3, #0]
    
    /* Perform the related L6470_AppCmdId */
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 8001122:	7dfb      	ldrb	r3, [r7, #23]
 8001124:	011b      	lsls	r3, r3, #4
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	4413      	add	r3, r2
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b12      	cmp	r3, #18
 800112e:	f200 81d5 	bhi.w	80014dc <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 8001132:	a201      	add	r2, pc, #4	; (adr r2, 8001138 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 8001134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001138:	080014dd 	.word	0x080014dd
 800113c:	08001185 	.word	0x08001185
 8001140:	0800120d 	.word	0x0800120d
 8001144:	0800123d 	.word	0x0800123d
 8001148:	080012a5 	.word	0x080012a5
 800114c:	080012d3 	.word	0x080012d3
 8001150:	0800133b 	.word	0x0800133b
 8001154:	08001377 	.word	0x08001377
 8001158:	080013df 	.word	0x080013df
 800115c:	0800147b 	.word	0x0800147b
 8001160:	080014dd 	.word	0x080014dd
 8001164:	080014dd 	.word	0x080014dd
 8001168:	080014dd 	.word	0x080014dd
 800116c:	080014dd 	.word	0x080014dd
 8001170:	080014dd 	.word	0x080014dd
 8001174:	080014dd 	.word	0x080014dd
 8001178:	080014dd 	.word	0x080014dd
 800117c:	080014dd 	.word	0x080014dd
 8001180:	080014dd 	.word	0x080014dd
    {
    case L6470_NOP_ID:
      break;
    case L6470_SETPARAM_ID:
      /* Build the 1st bytes to transmit (PARAM) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8001184:	7dfb      	ldrb	r3, [r7, #23]
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	7819      	ldrb	r1, [r3, #0]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	69d8      	ldr	r0, [r3, #28]
 8001190:	7dfb      	ldrb	r3, [r7, #23]
 8001192:	011b      	lsls	r3, r3, #4
 8001194:	68ba      	ldr	r2, [r7, #8]
 8001196:	4413      	add	r3, r2
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	4613      	mov	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4403      	add	r3, r0
 80011a4:	781a      	ldrb	r2, [r3, #0]
 80011a6:	7dfb      	ldrb	r3, [r7, #23]
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	4403      	add	r3, r0
 80011ac:	430a      	orrs	r2, r1
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	701a      	strb	r2, [r3, #0]
      
      /* The length, in byte, of this register (PARAM) is... */
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	69d9      	ldr	r1, [r3, #28]
 80011b6:	7dfb      	ldrb	r3, [r7, #23]
 80011b8:	011b      	lsls	r3, r3, #4
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	4413      	add	r3, r2
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	4613      	mov	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	440b      	add	r3, r1
 80011ca:	7b9b      	ldrb	r3, [r3, #14]
 80011cc:	753b      	strb	r3, [r7, #20]
      
      /* Build the others bytes to transmit (VALUE) */
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 80011ce:	2301      	movs	r3, #1
 80011d0:	75bb      	strb	r3, [r7, #22]
 80011d2:	e016      	b.n	8001202 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 80011d4:	7dfb      	ldrb	r3, [r7, #23]
 80011d6:	011b      	lsls	r3, r3, #4
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	4413      	add	r3, r2
 80011dc:	689a      	ldr	r2, [r3, #8]
 80011de:	7d39      	ldrb	r1, [r7, #20]
 80011e0:	7dbb      	ldrb	r3, [r7, #22]
 80011e2:	1acb      	subs	r3, r1, r3
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	fa22 f103 	lsr.w	r1, r2, r3
 80011ea:	7dbb      	ldrb	r3, [r7, #22]
 80011ec:	005a      	lsls	r2, r3, #1
 80011ee:	7dfb      	ldrb	r3, [r7, #23]
 80011f0:	4413      	add	r3, r2
 80011f2:	461a      	mov	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4413      	add	r3, r2
 80011f8:	b2ca      	uxtb	r2, r1
 80011fa:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 80011fc:	7dbb      	ldrb	r3, [r7, #22]
 80011fe:	3301      	adds	r3, #1
 8001200:	75bb      	strb	r3, [r7, #22]
 8001202:	7d3a      	ldrb	r2, [r7, #20]
 8001204:	7dbb      	ldrb	r3, [r7, #22]
 8001206:	429a      	cmp	r2, r3
 8001208:	d2e4      	bcs.n	80011d4 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      }
      break;
 800120a:	e167      	b.n	80014dc <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
    case L6470_GETPARAM_ID:
      /* Build the 1st bytes to transmit (PARAM) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 800120c:	7dfb      	ldrb	r3, [r7, #23]
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	7819      	ldrb	r1, [r3, #0]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	69d8      	ldr	r0, [r3, #28]
 8001218:	7dfb      	ldrb	r3, [r7, #23]
 800121a:	011b      	lsls	r3, r3, #4
 800121c:	68ba      	ldr	r2, [r7, #8]
 800121e:	4413      	add	r3, r2
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	4613      	mov	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4403      	add	r3, r0
 800122c:	781a      	ldrb	r2, [r3, #0]
 800122e:	7dfb      	ldrb	r3, [r7, #23]
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	4403      	add	r3, r0
 8001234:	430a      	orrs	r2, r1
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	701a      	strb	r2, [r3, #0]
      break;
 800123a:	e14f      	b.n	80014dc <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
    case L6470_RUN_ID:
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800123c:	7dfb      	ldrb	r3, [r7, #23]
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	4413      	add	r3, r2
 8001242:	7819      	ldrb	r1, [r3, #0]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001248:	7dfb      	ldrb	r3, [r7, #23]
 800124a:	011b      	lsls	r3, r3, #4
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	4413      	add	r3, r2
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	4413      	add	r3, r2
 8001258:	4403      	add	r3, r0
 800125a:	7a1a      	ldrb	r2, [r3, #8]
 800125c:	7dfb      	ldrb	r3, [r7, #23]
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	4403      	add	r3, r0
 8001262:	430a      	orrs	r2, r1
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	701a      	strb	r2, [r3, #0]
      
      /* Build the others bytes to transmit (SPD) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8001268:	2301      	movs	r3, #1
 800126a:	75bb      	strb	r3, [r7, #22]
 800126c:	e016      	b.n	800129c <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800126e:	7dfb      	ldrb	r3, [r7, #23]
 8001270:	011b      	lsls	r3, r3, #4
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	4413      	add	r3, r2
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	7dbb      	ldrb	r3, [r7, #22]
 800127a:	f1c3 0303 	rsb	r3, r3, #3
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	fa22 f103 	lsr.w	r1, r2, r3
 8001284:	7dbb      	ldrb	r3, [r7, #22]
 8001286:	005a      	lsls	r2, r3, #1
 8001288:	7dfb      	ldrb	r3, [r7, #23]
 800128a:	4413      	add	r3, r2
 800128c:	461a      	mov	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	b2ca      	uxtb	r2, r1
 8001294:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8001296:	7dbb      	ldrb	r3, [r7, #22]
 8001298:	3301      	adds	r3, #1
 800129a:	75bb      	strb	r3, [r7, #22]
 800129c:	7dbb      	ldrb	r3, [r7, #22]
 800129e:	2b03      	cmp	r3, #3
 80012a0:	d9e5      	bls.n	800126e <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      }
      break;
 80012a2:	e11b      	b.n	80014dc <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
    case L6470_STEPCLOCK_ID:
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 80012a4:	7dfb      	ldrb	r3, [r7, #23]
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	7819      	ldrb	r1, [r3, #0]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80012b0:	7dfb      	ldrb	r3, [r7, #23]
 80012b2:	011b      	lsls	r3, r3, #4
 80012b4:	68ba      	ldr	r2, [r7, #8]
 80012b6:	4413      	add	r3, r2
 80012b8:	685a      	ldr	r2, [r3, #4]
 80012ba:	4613      	mov	r3, r2
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	4413      	add	r3, r2
 80012c0:	4403      	add	r3, r0
 80012c2:	7a1a      	ldrb	r2, [r3, #8]
 80012c4:	7dfb      	ldrb	r3, [r7, #23]
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	4403      	add	r3, r0
 80012ca:	430a      	orrs	r2, r1
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	701a      	strb	r2, [r3, #0]
      break;
 80012d0:	e104      	b.n	80014dc <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
    case L6470_MOVE_ID:
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 80012d2:	7dfb      	ldrb	r3, [r7, #23]
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	4413      	add	r3, r2
 80012d8:	7819      	ldrb	r1, [r3, #0]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80012de:	7dfb      	ldrb	r3, [r7, #23]
 80012e0:	011b      	lsls	r3, r3, #4
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	4413      	add	r3, r2
 80012e6:	685a      	ldr	r2, [r3, #4]
 80012e8:	4613      	mov	r3, r2
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	4413      	add	r3, r2
 80012ee:	4403      	add	r3, r0
 80012f0:	7a1a      	ldrb	r2, [r3, #8]
 80012f2:	7dfb      	ldrb	r3, [r7, #23]
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	4403      	add	r3, r0
 80012f8:	430a      	orrs	r2, r1
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	701a      	strb	r2, [r3, #0]
      
      /* Build the others bytes to transmit (N_STEP) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80012fe:	2301      	movs	r3, #1
 8001300:	75bb      	strb	r3, [r7, #22]
 8001302:	e016      	b.n	8001332 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8001304:	7dfb      	ldrb	r3, [r7, #23]
 8001306:	011b      	lsls	r3, r3, #4
 8001308:	68ba      	ldr	r2, [r7, #8]
 800130a:	4413      	add	r3, r2
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	7dbb      	ldrb	r3, [r7, #22]
 8001310:	f1c3 0303 	rsb	r3, r3, #3
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	fa22 f103 	lsr.w	r1, r2, r3
 800131a:	7dbb      	ldrb	r3, [r7, #22]
 800131c:	005a      	lsls	r2, r3, #1
 800131e:	7dfb      	ldrb	r3, [r7, #23]
 8001320:	4413      	add	r3, r2
 8001322:	461a      	mov	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4413      	add	r3, r2
 8001328:	b2ca      	uxtb	r2, r1
 800132a:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800132c:	7dbb      	ldrb	r3, [r7, #22]
 800132e:	3301      	adds	r3, #1
 8001330:	75bb      	strb	r3, [r7, #22]
 8001332:	7dbb      	ldrb	r3, [r7, #22]
 8001334:	2b03      	cmp	r3, #3
 8001336:	d9e5      	bls.n	8001304 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      }      
      break;
 8001338:	e0d0      	b.n	80014dc <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
    case L6470_GOTO_ID:
      /* Build the others bytes to transmit (ABS_POS) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800133a:	2301      	movs	r3, #1
 800133c:	75bb      	strb	r3, [r7, #22]
 800133e:	e016      	b.n	800136e <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 8001340:	7dfb      	ldrb	r3, [r7, #23]
 8001342:	011b      	lsls	r3, r3, #4
 8001344:	68ba      	ldr	r2, [r7, #8]
 8001346:	4413      	add	r3, r2
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	7dbb      	ldrb	r3, [r7, #22]
 800134c:	f1c3 0303 	rsb	r3, r3, #3
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	fa22 f103 	lsr.w	r1, r2, r3
 8001356:	7dbb      	ldrb	r3, [r7, #22]
 8001358:	005a      	lsls	r2, r3, #1
 800135a:	7dfb      	ldrb	r3, [r7, #23]
 800135c:	4413      	add	r3, r2
 800135e:	461a      	mov	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4413      	add	r3, r2
 8001364:	b2ca      	uxtb	r2, r1
 8001366:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8001368:	7dbb      	ldrb	r3, [r7, #22]
 800136a:	3301      	adds	r3, #1
 800136c:	75bb      	strb	r3, [r7, #22]
 800136e:	7dbb      	ldrb	r3, [r7, #22]
 8001370:	2b03      	cmp	r3, #3
 8001372:	d9e5      	bls.n	8001340 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      }
      break;
 8001374:	e0b2      	b.n	80014dc <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
    case L6470_GOTODIR_ID:
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8001376:	7dfb      	ldrb	r3, [r7, #23]
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	4413      	add	r3, r2
 800137c:	7819      	ldrb	r1, [r3, #0]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001382:	7dfb      	ldrb	r3, [r7, #23]
 8001384:	011b      	lsls	r3, r3, #4
 8001386:	68ba      	ldr	r2, [r7, #8]
 8001388:	4413      	add	r3, r2
 800138a:	685a      	ldr	r2, [r3, #4]
 800138c:	4613      	mov	r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	4413      	add	r3, r2
 8001392:	4403      	add	r3, r0
 8001394:	7a1a      	ldrb	r2, [r3, #8]
 8001396:	7dfb      	ldrb	r3, [r7, #23]
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	4403      	add	r3, r0
 800139c:	430a      	orrs	r2, r1
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	701a      	strb	r2, [r3, #0]
      
      /* Build the others bytes to transmit (ABS_POS) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80013a2:	2301      	movs	r3, #1
 80013a4:	75bb      	strb	r3, [r7, #22]
 80013a6:	e016      	b.n	80013d6 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 80013a8:	7dfb      	ldrb	r3, [r7, #23]
 80013aa:	011b      	lsls	r3, r3, #4
 80013ac:	68ba      	ldr	r2, [r7, #8]
 80013ae:	4413      	add	r3, r2
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	7dbb      	ldrb	r3, [r7, #22]
 80013b4:	f1c3 0303 	rsb	r3, r3, #3
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	fa22 f103 	lsr.w	r1, r2, r3
 80013be:	7dbb      	ldrb	r3, [r7, #22]
 80013c0:	005a      	lsls	r2, r3, #1
 80013c2:	7dfb      	ldrb	r3, [r7, #23]
 80013c4:	4413      	add	r3, r2
 80013c6:	461a      	mov	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4413      	add	r3, r2
 80013cc:	b2ca      	uxtb	r2, r1
 80013ce:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80013d0:	7dbb      	ldrb	r3, [r7, #22]
 80013d2:	3301      	adds	r3, #1
 80013d4:	75bb      	strb	r3, [r7, #22]
 80013d6:	7dbb      	ldrb	r3, [r7, #22]
 80013d8:	2b03      	cmp	r3, #3
 80013da:	d9e5      	bls.n	80013a8 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      }
      break;
 80013dc:	e07e      	b.n	80014dc <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
    case L6470_GOUNTIL_ID:
      /* Build the 1st bytes to transmit (ACT) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 80013de:	7dfb      	ldrb	r3, [r7, #23]
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	4413      	add	r3, r2
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	b259      	sxtb	r1, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80013ec:	7dfb      	ldrb	r3, [r7, #23]
 80013ee:	011b      	lsls	r3, r3, #4
 80013f0:	68ba      	ldr	r2, [r7, #8]
 80013f2:	4413      	add	r3, r2
 80013f4:	685a      	ldr	r2, [r3, #4]
 80013f6:	4613      	mov	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	4403      	add	r3, r0
 80013fe:	791b      	ldrb	r3, [r3, #4]
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	b25b      	sxtb	r3, r3
 8001404:	430b      	orrs	r3, r1
 8001406:	b259      	sxtb	r1, r3
 8001408:	7dfb      	ldrb	r3, [r7, #23]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	4413      	add	r3, r2
 800140e:	b2ca      	uxtb	r2, r1
 8001410:	701a      	strb	r2, [r3, #0]
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8001412:	7dfb      	ldrb	r3, [r7, #23]
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	4413      	add	r3, r2
 8001418:	7819      	ldrb	r1, [r3, #0]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800141e:	7dfb      	ldrb	r3, [r7, #23]
 8001420:	011b      	lsls	r3, r3, #4
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	4413      	add	r3, r2
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	4613      	mov	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	4413      	add	r3, r2
 800142e:	4403      	add	r3, r0
 8001430:	7a1a      	ldrb	r2, [r3, #8]
 8001432:	7dfb      	ldrb	r3, [r7, #23]
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	4403      	add	r3, r0
 8001438:	430a      	orrs	r2, r1
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	701a      	strb	r2, [r3, #0]
      
      /* Build the others bytes to transmit (SPD) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800143e:	2301      	movs	r3, #1
 8001440:	75bb      	strb	r3, [r7, #22]
 8001442:	e016      	b.n	8001472 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 8001444:	7dfb      	ldrb	r3, [r7, #23]
 8001446:	011b      	lsls	r3, r3, #4
 8001448:	68ba      	ldr	r2, [r7, #8]
 800144a:	4413      	add	r3, r2
 800144c:	68da      	ldr	r2, [r3, #12]
 800144e:	7dbb      	ldrb	r3, [r7, #22]
 8001450:	f1c3 0303 	rsb	r3, r3, #3
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	fa22 f103 	lsr.w	r1, r2, r3
 800145a:	7dbb      	ldrb	r3, [r7, #22]
 800145c:	005a      	lsls	r2, r3, #1
 800145e:	7dfb      	ldrb	r3, [r7, #23]
 8001460:	4413      	add	r3, r2
 8001462:	461a      	mov	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4413      	add	r3, r2
 8001468:	b2ca      	uxtb	r2, r1
 800146a:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800146c:	7dbb      	ldrb	r3, [r7, #22]
 800146e:	3301      	adds	r3, #1
 8001470:	75bb      	strb	r3, [r7, #22]
 8001472:	7dbb      	ldrb	r3, [r7, #22]
 8001474:	2b03      	cmp	r3, #3
 8001476:	d9e5      	bls.n	8001444 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      }
      break;
 8001478:	e030      	b.n	80014dc <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
    case L6470_RELEASESW_ID:
      /* Build the 1st bytes to transmit (ACT) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 800147a:	7dfb      	ldrb	r3, [r7, #23]
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	4413      	add	r3, r2
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	b259      	sxtb	r1, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001488:	7dfb      	ldrb	r3, [r7, #23]
 800148a:	011b      	lsls	r3, r3, #4
 800148c:	68ba      	ldr	r2, [r7, #8]
 800148e:	4413      	add	r3, r2
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	4403      	add	r3, r0
 800149a:	791b      	ldrb	r3, [r3, #4]
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	b25b      	sxtb	r3, r3
 80014a0:	430b      	orrs	r3, r1
 80014a2:	b259      	sxtb	r1, r3
 80014a4:	7dfb      	ldrb	r3, [r7, #23]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	b2ca      	uxtb	r2, r1
 80014ac:	701a      	strb	r2, [r3, #0]
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 80014ae:	7dfb      	ldrb	r3, [r7, #23]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	4413      	add	r3, r2
 80014b4:	7819      	ldrb	r1, [r3, #0]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80014ba:	7dfb      	ldrb	r3, [r7, #23]
 80014bc:	011b      	lsls	r3, r3, #4
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	4413      	add	r3, r2
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	4613      	mov	r3, r2
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	4413      	add	r3, r2
 80014ca:	4403      	add	r3, r0
 80014cc:	7a1a      	ldrb	r2, [r3, #8]
 80014ce:	7dfb      	ldrb	r3, [r7, #23]
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	4403      	add	r3, r0
 80014d4:	430a      	orrs	r2, r1
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	701a      	strb	r2, [r3, #0]
      break;
 80014da:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 80014dc:	7dfb      	ldrb	r3, [r7, #23]
 80014de:	3301      	adds	r3, #1
 80014e0:	75fb      	strb	r3, [r7, #23]
 80014e2:	7dfb      	ldrb	r3, [r7, #23]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	f67f ae0a 	bls.w	80010fe <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
      break;
    case L6470_GETSTATUS_ID:
      break;
    }
  }
}
 80014ea:	bf00      	nop
 80014ec:	bf00      	nop
 80014ee:	371c      	adds	r7, #28
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <_ZN5L647023L6470_AbsPos_2_PositionEm>:
  * 
  * @param  AbsPos      The absolute position in the range from [-(2^21)] to [+(2^21)-1].
  * @retval Position    The position as signed number.
  */
int32_t L6470::L6470_AbsPos_2_Position(uint32_t AbsPos)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  if (AbsPos > L6470_MAX_POSITION)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001508:	d303      	bcc.n	8001512 <_ZN5L647023L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	f5a3 0380 	sub.w	r3, r3, #4194304	; 0x400000
 8001510:	e000      	b.n	8001514 <_ZN5L647023L6470_AbsPos_2_PositionEm+0x1c>
  else
    return AbsPos;
 8001512:	683b      	ldr	r3, [r7, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <_ZN5L647023L6470_Position_2_AbsPosEl>:
  * 
  * @param  Position    The position as signed number.
  * @retval AbsPos      The absolute position in the range from [-(2^21)] to [+(2^21)-1].
  */
uint32_t L6470::L6470_Position_2_AbsPos(int32_t Position)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	db05      	blt.n	800153c <_ZN5L647023L6470_Position_2_AbsPosEl+0x1c>
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001536:	da01      	bge.n	800153c <_ZN5L647023L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	e00c      	b.n	8001556 <_ZN5L647023L6470_Position_2_AbsPosEl+0x36>
  else
  {
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
 8001542:	db06      	blt.n	8001552 <_ZN5L647023L6470_Position_2_AbsPosEl+0x32>
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	da03      	bge.n	8001552 <_ZN5L647023L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
 8001550:	e001      	b.n	8001556 <_ZN5L647023L6470_Position_2_AbsPosEl+0x36>
    else
      return (L6470_POSITION_RANGE + 1);        // OVF
 8001552:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  }
}
 8001556:	4618      	mov	r0, r3
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <_ZN5L647020L6470_Speed_2_Step_sEm>:
  * 
  * @param  Speed       The SPEED register value.
  * @retval step/s      The speed as step/s.
  */
float L6470::L6470_Speed_2_Step_s(uint32_t Speed)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  return (Speed * ((float)14.9012e-3));
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	ee07 3a90 	vmov	s15, r3
 8001574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001578:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001590 <_ZN5L647020L6470_Speed_2_Step_sEm+0x2c>
 800157c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001580:	eeb0 0a67 	vmov.f32	s0, s15
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	3c74242a 	.word	0x3c74242a

08001594 <_ZN5L647020L6470_Step_s_2_SpeedEf>:
  * 
  * @param  step/s      The speed as step/s.
  * @retval Speed       The SPEED register value.
  */
uint32_t L6470::L6470_Step_s_2_Speed(float Step_s)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 80015a0:	edd7 7a00 	vldr	s15, [r7]
 80015a4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80015d8 <_ZN5L647020L6470_Step_s_2_SpeedEf+0x44>
 80015a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b0:	d80a      	bhi.n	80015c8 <_ZN5L647020L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 80015b2:	ed97 7a00 	vldr	s14, [r7]
 80015b6:	eddf 6a09 	vldr	s13, [pc, #36]	; 80015dc <_ZN5L647020L6470_Step_s_2_SpeedEf+0x48>
 80015ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015c2:	ee17 3a90 	vmov	r3, s15
 80015c6:	e000      	b.n	80015ca <_ZN5L647020L6470_Step_s_2_SpeedEf+0x36>
  else
    return 0;   // Warning
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	4674241b 	.word	0x4674241b
 80015dc:	3c74242a 	.word	0x3c74242a

080015e0 <_ZN5L647019L6470_Acc_2_Step_s2Et>:
  * 
  * @param  Acc         The ACCEL register value.
  * @retval step/(s^2)  The acceleration as step/(s^2).
  */
float L6470::L6470_Acc_2_Step_s2(uint16_t Acc)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	807b      	strh	r3, [r7, #2]
  if (Acc <= L6470_MAX_ACC)
 80015ec:	887b      	ldrh	r3, [r7, #2]
 80015ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015f2:	d209      	bcs.n	8001608 <_ZN5L647019L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 80015f4:	887b      	ldrh	r3, [r7, #2]
 80015f6:	ee07 3a90 	vmov	s15, r3
 80015fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015fe:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800161c <_ZN5L647019L6470_Acc_2_Step_s2Et+0x3c>
 8001602:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001606:	e001      	b.n	800160c <_ZN5L647019L6470_Acc_2_Step_s2Et+0x2c>
  else
    return 0;   // Warning
 8001608:	eddf 7a05 	vldr	s15, [pc, #20]	; 8001620 <_ZN5L647019L6470_Acc_2_Step_s2Et+0x40>
}
 800160c:	eeb0 0a67 	vmov.f32	s0, s15
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	4168d4fe 	.word	0x4168d4fe
 8001620:	00000000 	.word	0x00000000

08001624 <_ZN5L647019L6470_Step_s2_2_AccEf>:
  * 
  * @param  step/(s^2)  The acceleration as step/(s^2).
  * @retval Acc         The ACCEL register value.
  */
uint16_t L6470::L6470_Step_s2_2_Acc(float Step_s2)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 8001630:	edd7 7a00 	vldr	s15, [r7]
 8001634:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001668 <_ZN5L647019L6470_Step_s2_2_AccEf+0x44>
 8001638:	eef4 7ac7 	vcmpe.f32	s15, s14
 800163c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001640:	d80b      	bhi.n	800165a <_ZN5L647019L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8001642:	ed97 7a00 	vldr	s14, [r7]
 8001646:	eddf 6a09 	vldr	s13, [pc, #36]	; 800166c <_ZN5L647019L6470_Step_s2_2_AccEf+0x48>
 800164a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800164e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001652:	ee17 3a90 	vmov	r3, s15
 8001656:	b29b      	uxth	r3, r3
 8001658:	e000      	b.n	800165c <_ZN5L647019L6470_Step_s2_2_AccEf+0x38>
  else
    return 0;   // Warning
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	4768c671 	.word	0x4768c671
 800166c:	4168d4fe 	.word	0x4168d4fe

08001670 <_ZN5L647019L6470_Dec_2_Step_s2Et>:
  * 
  * @param  Dec         The DECEL register value.
  * @retval step/(s^2)  The deceleration as step/(s^2).
  */
float L6470::L6470_Dec_2_Step_s2(uint16_t Dec)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	807b      	strh	r3, [r7, #2]
  if (Dec <= L6470_MAX_DEC)
 800167c:	887b      	ldrh	r3, [r7, #2]
 800167e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001682:	d209      	bcs.n	8001698 <_ZN5L647019L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 8001684:	887b      	ldrh	r3, [r7, #2]
 8001686:	ee07 3a90 	vmov	s15, r3
 800168a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800168e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80016ac <_ZN5L647019L6470_Dec_2_Step_s2Et+0x3c>
 8001692:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001696:	e001      	b.n	800169c <_ZN5L647019L6470_Dec_2_Step_s2Et+0x2c>
  else
    return 0;   // Warning
 8001698:	eddf 7a05 	vldr	s15, [pc, #20]	; 80016b0 <_ZN5L647019L6470_Dec_2_Step_s2Et+0x40>
}
 800169c:	eeb0 0a67 	vmov.f32	s0, s15
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	4168d4fe 	.word	0x4168d4fe
 80016b0:	00000000 	.word	0x00000000

080016b4 <_ZN5L647019L6470_Step_s2_2_DecEf>:
  * 
  * @param  step/(s^2)  The deceleration as step/(s^2).
  * @retval Dec         The DECEL register value.
  */
uint16_t L6470::L6470_Step_s2_2_Dec(float Step_s2)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 80016c0:	edd7 7a00 	vldr	s15, [r7]
 80016c4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80016f8 <_ZN5L647019L6470_Step_s2_2_DecEf+0x44>
 80016c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d0:	d80b      	bhi.n	80016ea <_ZN5L647019L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 80016d2:	ed97 7a00 	vldr	s14, [r7]
 80016d6:	eddf 6a09 	vldr	s13, [pc, #36]	; 80016fc <_ZN5L647019L6470_Step_s2_2_DecEf+0x48>
 80016da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016e2:	ee17 3a90 	vmov	r3, s15
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	e000      	b.n	80016ec <_ZN5L647019L6470_Step_s2_2_DecEf+0x38>
  else
    return 0;   // Warning
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	4768c671 	.word	0x4768c671
 80016fc:	4168d4fe 	.word	0x4168d4fe

08001700 <_ZN5L647023L6470_MaxSpeed_2_Step_sEt>:
  * 
  * @param  MaxSpeed    The MAX_SPEED register value.
  * @retval step/s      The max speed as step/s.
  */
float L6470::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	807b      	strh	r3, [r7, #2]
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 800170c:	887b      	ldrh	r3, [r7, #2]
 800170e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001712:	d209      	bcs.n	8001728 <_ZN5L647023L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 8001714:	887b      	ldrh	r3, [r7, #2]
 8001716:	ee07 3a90 	vmov	s15, r3
 800171a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800171e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800173c <_ZN5L647023L6470_MaxSpeed_2_Step_sEt+0x3c>
 8001722:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001726:	e001      	b.n	800172c <_ZN5L647023L6470_MaxSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 8001728:	eddf 7a05 	vldr	s15, [pc, #20]	; 8001740 <_ZN5L647023L6470_MaxSpeed_2_Step_sEt+0x40>
}
 800172c:	eeb0 0a67 	vmov.f32	s0, s15
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	4174240b 	.word	0x4174240b
 8001740:	00000000 	.word	0x00000000

08001744 <_ZN5L647023L6470_Step_s_2_MaxSpeedEf>:
  * 
  * @param  step/s      The max speed as step/s.
  * @retval MaxSpeed    The MAX_SPEED register value.
  */
uint16_t L6470::L6470_Step_s_2_MaxSpeed(float Step_s)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 8001750:	edd7 7a00 	vldr	s15, [r7]
 8001754:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001788 <_ZN5L647023L6470_Step_s_2_MaxSpeedEf+0x44>
 8001758:	eef4 7ac7 	vcmpe.f32	s15, s14
 800175c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001760:	d80b      	bhi.n	800177a <_ZN5L647023L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 8001762:	ed97 7a00 	vldr	s14, [r7]
 8001766:	eddf 6a09 	vldr	s13, [pc, #36]	; 800178c <_ZN5L647023L6470_Step_s_2_MaxSpeedEf+0x48>
 800176a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800176e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001772:	ee17 3a90 	vmov	r3, s15
 8001776:	b29b      	uxth	r3, r3
 8001778:	e000      	b.n	800177c <_ZN5L647023L6470_Step_s_2_MaxSpeedEf+0x38>
  else
    return 0;   // Warning
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	4673e702 	.word	0x4673e702
 800178c:	4174240b 	.word	0x4174240b

08001790 <_ZN5L647023L6470_MinSpeed_2_Step_sEt>:
  * 
  * @param  MinSpeed    The MIN_SPEED register value.
  * @retval step/s      The min speed as step/s.
  */
float L6470::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	807b      	strh	r3, [r7, #2]
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 800179c:	887b      	ldrh	r3, [r7, #2]
 800179e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017a2:	d209      	bcs.n	80017b8 <_ZN5L647023L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 80017a4:	887b      	ldrh	r3, [r7, #2]
 80017a6:	ee07 3a90 	vmov	s15, r3
 80017aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ae:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80017cc <_ZN5L647023L6470_MinSpeed_2_Step_sEt+0x3c>
 80017b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017b6:	e001      	b.n	80017bc <_ZN5L647023L6470_MinSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 80017b8:	eddf 7a05 	vldr	s15, [pc, #20]	; 80017d0 <_ZN5L647023L6470_MinSpeed_2_Step_sEt+0x40>
}
 80017bc:	eeb0 0a67 	vmov.f32	s0, s15
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	3e742401 	.word	0x3e742401
 80017d0:	00000000 	.word	0x00000000

080017d4 <_ZN5L647023L6470_Step_s_2_MinSpeedEf>:
  * 
  * @param  step/s      The min speed as step/s.
  * @retval MinSpeed    The MIN_SPEED register value.
  */
uint16_t L6470::L6470_Step_s_2_MinSpeed(float Step_s)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 80017e0:	edd7 7a00 	vldr	s15, [r7]
 80017e4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001818 <_ZN5L647023L6470_Step_s_2_MinSpeedEf+0x44>
 80017e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f0:	d80b      	bhi.n	800180a <_ZN5L647023L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 80017f2:	ed97 7a00 	vldr	s14, [r7]
 80017f6:	eddf 6a09 	vldr	s13, [pc, #36]	; 800181c <_ZN5L647023L6470_Step_s_2_MinSpeedEf+0x48>
 80017fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001802:	ee17 3a90 	vmov	r3, s15
 8001806:	b29b      	uxth	r3, r3
 8001808:	e000      	b.n	800180c <_ZN5L647023L6470_Step_s_2_MinSpeedEf+0x38>
  else
    return 0;   // Warning
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	447414bf 	.word	0x447414bf
 800181c:	3e742401 	.word	0x3e742401

08001820 <_ZN5L647020L6470_Step_s_2_FsSpdEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint16_t L6470::L6470_Step_s_2_FsSpd(float Step_s)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 800182c:	edd7 7a00 	vldr	s15, [r7]
 8001830:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800186c <_ZN5L647020L6470_Step_s_2_FsSpdEf+0x4c>
 8001834:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183c:	d80f      	bhi.n	800185e <_ZN5L647020L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 800183e:	ed97 7a00 	vldr	s14, [r7]
 8001842:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001870 <_ZN5L647020L6470_Step_s_2_FsSpdEf+0x50>
 8001846:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800184a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800184e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001856:	ee17 3a90 	vmov	r3, s15
 800185a:	b29b      	uxth	r3, r3
 800185c:	e000      	b.n	8001860 <_ZN5L647020L6470_Step_s_2_FsSpdEf+0x40>
  else
    return 0;   // Warning
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	4673e180 	.word	0x4673e180
 8001870:	41740000 	.word	0x41740000

08001874 <_ZN5L647023L6470_Step_s_2_IntSpeedEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint16_t L6470::L6470_Step_s_2_IntSpeed(float Step_s)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 8001880:	edd7 7a00 	vldr	s15, [r7]
 8001884:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80018b8 <_ZN5L647023L6470_Step_s_2_IntSpeedEf+0x44>
 8001888:	eef4 7ac7 	vcmpe.f32	s15, s14
 800188c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001890:	d80b      	bhi.n	80018aa <_ZN5L647023L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 8001892:	ed97 7a00 	vldr	s14, [r7]
 8001896:	eddf 6a09 	vldr	s13, [pc, #36]	; 80018bc <_ZN5L647023L6470_Step_s_2_IntSpeedEf+0x48>
 800189a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800189e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018a2:	ee17 3a90 	vmov	r3, s15
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	e000      	b.n	80018ac <_ZN5L647023L6470_Step_s_2_IntSpeedEf+0x38>
  else
    return 0;   // Warning
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	44742023 	.word	0x44742023
 80018bc:	3d7423f4 	.word	0x3d7423f4

080018c0 <_ZN5L647020L6470_s_Step_2_StSlpEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint8_t L6470::L6470_s_Step_2_StSlp(float s_Step)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 80018cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80018d0:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001908 <_ZN5L647020L6470_s_Step_2_StSlpEf+0x48>
 80018d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018dc:	d80c      	bhi.n	80018f8 <_ZN5L647020L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 80018de:	ed97 7a02 	vldr	s14, [r7, #8]
 80018e2:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800190c <_ZN5L647020L6470_s_Step_2_StSlpEf+0x4c>
 80018e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018ee:	edc7 7a01 	vstr	s15, [r7, #4]
 80018f2:	793b      	ldrb	r3, [r7, #4]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	e000      	b.n	80018fa <_ZN5L647020L6470_s_Step_2_StSlpEf+0x3a>
  else
    return 0;   // Warning
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	3b8311d9 	.word	0x3b8311d9
 800190c:	3783956e 	.word	0x3783956e

08001910 <_ZN5L647023L6470_s_Step_2_FnSlpAccEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint8_t L6470::L6470_s_Step_2_FnSlpAcc(float s_Step)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 800191c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001920:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001958 <_ZN5L647023L6470_s_Step_2_FnSlpAccEf+0x48>
 8001924:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192c:	d80c      	bhi.n	8001948 <_ZN5L647023L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800192e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001932:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800195c <_ZN5L647023L6470_s_Step_2_FnSlpAccEf+0x4c>
 8001936:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800193a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800193e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001942:	793b      	ldrb	r3, [r7, #4]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	e000      	b.n	800194a <_ZN5L647023L6470_s_Step_2_FnSlpAccEf+0x3a>
  else
    return 0;   // Warning
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	3b8311d9 	.word	0x3b8311d9
 800195c:	3783956e 	.word	0x3783956e

08001960 <_ZN5L647023L6470_s_Step_2_FnSlpDecEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint8_t L6470::L6470_s_Step_2_FnSlpDec(float s_Step)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 800196c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001970:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80019a8 <_ZN5L647023L6470_s_Step_2_FnSlpDecEf+0x48>
 8001974:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197c:	d80c      	bhi.n	8001998 <_ZN5L647023L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800197e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001982:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80019ac <_ZN5L647023L6470_s_Step_2_FnSlpDecEf+0x4c>
 8001986:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800198a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800198e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001992:	793b      	ldrb	r3, [r7, #4]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	e000      	b.n	800199a <_ZN5L647023L6470_s_Step_2_FnSlpDecEf+0x3a>
  else
    return 0;   // Warning
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	3b8311d9 	.word	0x3b8311d9
 80019ac:	3783956e 	.word	0x3783956e

080019b0 <_ZN5L647016L6470_mA_2_OcdThEf>:
  * 
  * @param  mA          The overcurrent threshold as mA.
  * @retval OcdTh       The OCD_TH register value.
  */
uint8_t L6470::L6470_mA_2_OcdTh(float mA)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b087      	sub	sp, #28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	ed87 0a02 	vstr	s0, [r7, #8]
  float result, decimal;
  
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 80019bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80019c0:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001a4c <_ZN5L647016L6470_mA_2_OcdThEf+0x9c>
 80019c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019cc:	d836      	bhi.n	8001a3c <_ZN5L647016L6470_mA_2_OcdThEf+0x8c>
  {
    result = (mA / ((float)375));
 80019ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80019d2:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001a50 <_ZN5L647016L6470_mA_2_OcdThEf+0xa0>
 80019d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019da:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 80019de:	edd7 7a05 	vldr	s15, [r7, #20]
 80019e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019e6:	edc7 7a01 	vstr	s15, [r7, #4]
 80019ea:	793b      	ldrb	r3, [r7, #4]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	ee07 3a90 	vmov	s15, r3
 80019f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019f6:	ed97 7a05 	vldr	s14, [r7, #20]
 80019fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019fe:	edc7 7a04 	vstr	s15, [r7, #16]
    
    if (decimal < (float)0.5)
 8001a02:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a06:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a12:	d50a      	bpl.n	8001a2a <_ZN5L647016L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 8001a14:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a1c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a20:	793b      	ldrb	r3, [r7, #4]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	3b01      	subs	r3, #1
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	e009      	b.n	8001a3e <_ZN5L647016L6470_mA_2_OcdThEf+0x8e>
    else
      return ((uint8_t)result);    
 8001a2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a32:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a36:	793b      	ldrb	r3, [r7, #4]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	e000      	b.n	8001a3e <_ZN5L647016L6470_mA_2_OcdThEf+0x8e>
  }
  else
    return 0;   // Warning
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	371c      	adds	r7, #28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	45bb8000 	.word	0x45bb8000
 8001a50:	43bb8000 	.word	0x43bb8000

08001a54 <_ZN5L647018L6470_mA_2_StallThEf>:
  * 
  * @param  mA          The stall detection threshold as mA.
  * @retval StallTh     The STALL_TH register value.
  */
uint8_t L6470::L6470_mA_2_StallTh(float mA)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b087      	sub	sp, #28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	ed87 0a02 	vstr	s0, [r7, #8]
  float result, decimal;
  
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 8001a60:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a64:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001af0 <_ZN5L647018L6470_mA_2_StallThEf+0x9c>
 8001a68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a70:	d836      	bhi.n	8001ae0 <_ZN5L647018L6470_mA_2_StallThEf+0x8c>
  {
    result = (mA / ((float)31.25));
 8001a72:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a76:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001af4 <_ZN5L647018L6470_mA_2_StallThEf+0xa0>
 8001a7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a7e:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 8001a82:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a8a:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a8e:	793b      	ldrb	r3, [r7, #4]
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	ee07 3a90 	vmov	s15, r3
 8001a96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a9a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aa2:	edc7 7a04 	vstr	s15, [r7, #16]
    
    if (decimal < (float)0.5)
 8001aa6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001aaa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001aae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab6:	d50a      	bpl.n	8001ace <_ZN5L647018L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 8001ab8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001abc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ac0:	edc7 7a01 	vstr	s15, [r7, #4]
 8001ac4:	793b      	ldrb	r3, [r7, #4]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	e009      	b.n	8001ae2 <_ZN5L647018L6470_mA_2_StallThEf+0x8e>
    else
      return ((uint8_t)result);    
 8001ace:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ad2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ad6:	edc7 7a01 	vstr	s15, [r7, #4]
 8001ada:	793b      	ldrb	r3, [r7, #4]
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	e000      	b.n	8001ae2 <_ZN5L647018L6470_mA_2_StallThEf+0x8e>
  }
  else
    return 0;   // Warning
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	371c      	adds	r7, #28
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	457a0000 	.word	0x457a0000
 8001af4:	41fa0000 	.word	0x41fa0000

08001af8 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>:
  * 
  * @param  L6470_RegId   The identifier of the L6470 register to be addressed.
  * @param  Value         The new value.
  */
void L6470::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af02      	add	r7, sp, #8
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	460b      	mov	r3, r1
 8001b02:	607a      	str	r2, [r7, #4]
 8001b04:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8001b06:	7afa      	ldrb	r2, [r7, #11]
 8001b08:	2300      	movs	r3, #0
 8001b0a:	9301      	str	r3, [sp, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	4613      	mov	r3, r2
 8001b12:	2201      	movs	r2, #1
 8001b14:	4908      	ldr	r1, [pc, #32]	; (8001b38 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm+0x40>)
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f7ff faa8 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8001b1c:	4a07      	ldr	r2, [pc, #28]	; (8001b3c <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm+0x44>)
 8001b1e:	4906      	ldr	r1, [pc, #24]	; (8001b38 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm+0x40>)
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f7ff fac7 	bl	80010b4 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8001b26:	4a06      	ldr	r2, [pc, #24]	; (8001b40 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm+0x48>)
 8001b28:	4904      	ldr	r1, [pc, #16]	; (8001b3c <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm+0x44>)
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f000 fc30 	bl	8002390 <_ZN5L647023L6470_DaisyChainCommandEPhS0_>
}
 8001b30:	bf00      	nop
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	200002a4 	.word	0x200002a4
 8001b3c:	200002c4 	.word	0x200002c4
 8001b40:	200002cc 	.word	0x200002cc

08001b44 <_ZN5L647014L6470_GetParamE14eL6470_RegId_t>:
  * @param  L6470_RegId   The identifier of the L6470 register to be addressed.
  * 
  * @retval ReceivedValue The register value.
  */
uint32_t L6470::L6470_GetParam(eL6470_RegId_t L6470_RegId)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af02      	add	r7, sp, #8
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	70fb      	strb	r3, [r7, #3]
  uint8_t ValueLengthByte;
  uint32_t ReceivedValue;

  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8001b50:	78fb      	ldrb	r3, [r7, #3]
 8001b52:	2200      	movs	r2, #0
 8001b54:	9201      	str	r2, [sp, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	9200      	str	r2, [sp, #0]
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	4911      	ldr	r1, [pc, #68]	; (8001ba4 <_ZN5L647014L6470_GetParamE14eL6470_RegId_t+0x60>)
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff fa84 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8001b64:	4a10      	ldr	r2, [pc, #64]	; (8001ba8 <_ZN5L647014L6470_GetParamE14eL6470_RegId_t+0x64>)
 8001b66:	490f      	ldr	r1, [pc, #60]	; (8001ba4 <_ZN5L647014L6470_GetParamE14eL6470_RegId_t+0x60>)
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff faa3 	bl	80010b4 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8001b6e:	4a0f      	ldr	r2, [pc, #60]	; (8001bac <_ZN5L647014L6470_GetParamE14eL6470_RegId_t+0x68>)
 8001b70:	490d      	ldr	r1, [pc, #52]	; (8001ba8 <_ZN5L647014L6470_GetParamE14eL6470_RegId_t+0x64>)
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 fc0c 	bl	8002390 <_ZN5L647023L6470_DaisyChainCommandEPhS0_>
  
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69d9      	ldr	r1, [r3, #28]
 8001b7c:	78fa      	ldrb	r2, [r7, #3]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	440b      	add	r3, r1
 8001b88:	7b9b      	ldrb	r3, [r3, #14]
 8001b8a:	73fb      	strb	r3, [r7, #15]
  
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	4906      	ldr	r1, [pc, #24]	; (8001bac <_ZN5L647014L6470_GetParamE14eL6470_RegId_t+0x68>)
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 fc30 	bl	80023f8 <_ZN5L647025L6470_ExtractReturnedDataEPhh>
 8001b98:	60b8      	str	r0, [r7, #8]
  
  return ReceivedValue;
 8001b9a:	68bb      	ldr	r3, [r7, #8]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	200002a4 	.word	0x200002a4
 8001ba8:	200002c4 	.word	0x200002c4
 8001bac:	200002cc 	.word	0x200002cc

08001bb0 <_ZN5L64709L6470_RunE14eL6470_DirId_tm>:
  * 
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  * @param  Speed         The speed value as (([step/s] * 250e-9) / 2^-28)
  */
void L6470::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af02      	add	r7, sp, #8
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8001bbe:	7afa      	ldrb	r2, [r7, #11]
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	9301      	str	r3, [sp, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	2203      	movs	r2, #3
 8001bcc:	4908      	ldr	r1, [pc, #32]	; (8001bf0 <_ZN5L64709L6470_RunE14eL6470_DirId_tm+0x40>)
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f7ff fa4c 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8001bd4:	4a07      	ldr	r2, [pc, #28]	; (8001bf4 <_ZN5L64709L6470_RunE14eL6470_DirId_tm+0x44>)
 8001bd6:	4906      	ldr	r1, [pc, #24]	; (8001bf0 <_ZN5L64709L6470_RunE14eL6470_DirId_tm+0x40>)
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f7ff fa6b 	bl	80010b4 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8001bde:	4a06      	ldr	r2, [pc, #24]	; (8001bf8 <_ZN5L64709L6470_RunE14eL6470_DirId_tm+0x48>)
 8001be0:	4904      	ldr	r1, [pc, #16]	; (8001bf4 <_ZN5L64709L6470_RunE14eL6470_DirId_tm+0x44>)
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f000 fbd4 	bl	8002390 <_ZN5L647023L6470_DaisyChainCommandEPhS0_>
}
 8001be8:	bf00      	nop
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	200002a4 	.word	0x200002a4
 8001bf4:	200002c4 	.word	0x200002c4
 8001bf8:	200002cc 	.word	0x200002cc

08001bfc <_ZN5L647015L6470_StepClockE14eL6470_DirId_t>:
  * @brief  StepClock command switches the device in Step-clock mode.
  * 
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  */
void L6470::L6470_StepClock(eL6470_DirId_t L6470_DirId)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af02      	add	r7, sp, #8
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8001c08:	78fb      	ldrb	r3, [r7, #3]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	9201      	str	r2, [sp, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	9200      	str	r2, [sp, #0]
 8001c12:	2204      	movs	r2, #4
 8001c14:	4908      	ldr	r1, [pc, #32]	; (8001c38 <_ZN5L647015L6470_StepClockE14eL6470_DirId_t+0x3c>)
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff fa28 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8001c1c:	4a07      	ldr	r2, [pc, #28]	; (8001c3c <_ZN5L647015L6470_StepClockE14eL6470_DirId_t+0x40>)
 8001c1e:	4906      	ldr	r1, [pc, #24]	; (8001c38 <_ZN5L647015L6470_StepClockE14eL6470_DirId_t+0x3c>)
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff fa47 	bl	80010b4 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8001c26:	4a06      	ldr	r2, [pc, #24]	; (8001c40 <_ZN5L647015L6470_StepClockE14eL6470_DirId_t+0x44>)
 8001c28:	4904      	ldr	r1, [pc, #16]	; (8001c3c <_ZN5L647015L6470_StepClockE14eL6470_DirId_t+0x40>)
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 fbb0 	bl	8002390 <_ZN5L647023L6470_DaisyChainCommandEPhS0_>
}
 8001c30:	bf00      	nop
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	200002a4 	.word	0x200002a4
 8001c3c:	200002c4 	.word	0x200002c4
 8001c40:	200002cc 	.word	0x200002cc

08001c44 <_ZN5L647010L6470_MoveE14eL6470_DirId_tm>:
  * 
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  * @param  N_Step        The number of microsteps.
  */
void L6470::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af02      	add	r7, sp, #8
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	607a      	str	r2, [r7, #4]
 8001c50:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8001c52:	7afa      	ldrb	r2, [r7, #11]
 8001c54:	2300      	movs	r3, #0
 8001c56:	9301      	str	r3, [sp, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	2205      	movs	r2, #5
 8001c60:	4908      	ldr	r1, [pc, #32]	; (8001c84 <_ZN5L647010L6470_MoveE14eL6470_DirId_tm+0x40>)
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f7ff fa02 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8001c68:	4a07      	ldr	r2, [pc, #28]	; (8001c88 <_ZN5L647010L6470_MoveE14eL6470_DirId_tm+0x44>)
 8001c6a:	4906      	ldr	r1, [pc, #24]	; (8001c84 <_ZN5L647010L6470_MoveE14eL6470_DirId_tm+0x40>)
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f7ff fa21 	bl	80010b4 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8001c72:	4a06      	ldr	r2, [pc, #24]	; (8001c8c <_ZN5L647010L6470_MoveE14eL6470_DirId_tm+0x48>)
 8001c74:	4904      	ldr	r1, [pc, #16]	; (8001c88 <_ZN5L647010L6470_MoveE14eL6470_DirId_tm+0x44>)
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f000 fb8a 	bl	8002390 <_ZN5L647023L6470_DaisyChainCommandEPhS0_>
}
 8001c7c:	bf00      	nop
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	200002a4 	.word	0x200002a4
 8001c88:	200002c4 	.word	0x200002c4
 8001c8c:	200002cc 	.word	0x200002cc

08001c90 <_ZN5L647010L6470_GoToEm>:
  * @brief  GoTo command produces a motion to ABS_POS absolute position through the shortest path.
  * 
  * @param  AbsPos        The target absolute position.
  */
void L6470::L6470_GoTo(uint32_t AbsPos)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af02      	add	r7, sp, #8
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ca0:	d213      	bcs.n	8001cca <_ZN5L647010L6470_GoToEm+0x3a>
  {
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	9301      	str	r3, [sp, #4]
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	2206      	movs	r2, #6
 8001cae:	4909      	ldr	r1, [pc, #36]	; (8001cd4 <_ZN5L647010L6470_GoToEm+0x44>)
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff f9db 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8001cb6:	4a08      	ldr	r2, [pc, #32]	; (8001cd8 <_ZN5L647010L6470_GoToEm+0x48>)
 8001cb8:	4906      	ldr	r1, [pc, #24]	; (8001cd4 <_ZN5L647010L6470_GoToEm+0x44>)
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff f9fa 	bl	80010b4 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8001cc0:	4a06      	ldr	r2, [pc, #24]	; (8001cdc <_ZN5L647010L6470_GoToEm+0x4c>)
 8001cc2:	4905      	ldr	r1, [pc, #20]	; (8001cd8 <_ZN5L647010L6470_GoToEm+0x48>)
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 fb63 	bl	8002390 <_ZN5L647023L6470_DaisyChainCommandEPhS0_>
  }
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	200002a4 	.word	0x200002a4
 8001cd8:	200002c4 	.word	0x200002c4
 8001cdc:	200002cc 	.word	0x200002cc

08001ce0 <_ZN5L647013L6470_GoToDirE14eL6470_DirId_tm>:
  * 
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  * @param  AbsPos        The target absolute position.
  */
void L6470::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af02      	add	r7, sp, #8
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cf4:	d214      	bcs.n	8001d20 <_ZN5L647013L6470_GoToDirE14eL6470_DirId_tm+0x40>
  {
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8001cf6:	7afa      	ldrb	r2, [r7, #11]
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	9301      	str	r3, [sp, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	4613      	mov	r3, r2
 8001d02:	2207      	movs	r2, #7
 8001d04:	4908      	ldr	r1, [pc, #32]	; (8001d28 <_ZN5L647013L6470_GoToDirE14eL6470_DirId_tm+0x48>)
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f7ff f9b0 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8001d0c:	4a07      	ldr	r2, [pc, #28]	; (8001d2c <_ZN5L647013L6470_GoToDirE14eL6470_DirId_tm+0x4c>)
 8001d0e:	4906      	ldr	r1, [pc, #24]	; (8001d28 <_ZN5L647013L6470_GoToDirE14eL6470_DirId_tm+0x48>)
 8001d10:	68f8      	ldr	r0, [r7, #12]
 8001d12:	f7ff f9cf 	bl	80010b4 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8001d16:	4a06      	ldr	r2, [pc, #24]	; (8001d30 <_ZN5L647013L6470_GoToDirE14eL6470_DirId_tm+0x50>)
 8001d18:	4904      	ldr	r1, [pc, #16]	; (8001d2c <_ZN5L647013L6470_GoToDirE14eL6470_DirId_tm+0x4c>)
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f000 fb38 	bl	8002390 <_ZN5L647023L6470_DaisyChainCommandEPhS0_>
  }
}
 8001d20:	bf00      	nop
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	200002a4 	.word	0x200002a4
 8001d2c:	200002c4 	.word	0x200002c4
 8001d30:	200002cc 	.word	0x200002cc

08001d34 <_ZN5L647013L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
  * @param  L6470_ActId   The identifier of the L6470 action about the absolute position.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  * @param  Speed         The speed value as (([step/s] * 250e-9) / 2^-28)
  */
void L6470::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af02      	add	r7, sp, #8
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	607b      	str	r3, [r7, #4]
 8001d3e:	460b      	mov	r3, r1
 8001d40:	72fb      	strb	r3, [r7, #11]
 8001d42:	4613      	mov	r3, r2
 8001d44:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8001d46:	7af9      	ldrb	r1, [r7, #11]
 8001d48:	7abb      	ldrb	r3, [r7, #10]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	9201      	str	r2, [sp, #4]
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	460b      	mov	r3, r1
 8001d52:	2208      	movs	r2, #8
 8001d54:	4908      	ldr	r1, [pc, #32]	; (8001d78 <_ZN5L647013L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x44>)
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f7ff f988 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8001d5c:	4a07      	ldr	r2, [pc, #28]	; (8001d7c <_ZN5L647013L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x48>)
 8001d5e:	4906      	ldr	r1, [pc, #24]	; (8001d78 <_ZN5L647013L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x44>)
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f7ff f9a7 	bl	80010b4 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8001d66:	4a06      	ldr	r2, [pc, #24]	; (8001d80 <_ZN5L647013L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x4c>)
 8001d68:	4904      	ldr	r1, [pc, #16]	; (8001d7c <_ZN5L647013L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x48>)
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f000 fb10 	bl	8002390 <_ZN5L647023L6470_DaisyChainCommandEPhS0_>
}
 8001d70:	bf00      	nop
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	200002a4 	.word	0x200002a4
 8001d7c:	200002c4 	.word	0x200002c4
 8001d80:	200002cc 	.word	0x200002cc

08001d84 <_ZN5L647015L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
  * 
  * @param  L6470_ActId   The identifier of the L6470 action about the absolute position.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  */
void L6470::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af02      	add	r7, sp, #8
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	70fb      	strb	r3, [r7, #3]
 8001d90:	4613      	mov	r3, r2
 8001d92:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8001d94:	78fa      	ldrb	r2, [r7, #3]
 8001d96:	78bb      	ldrb	r3, [r7, #2]
 8001d98:	2100      	movs	r1, #0
 8001d9a:	9101      	str	r1, [sp, #4]
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	2209      	movs	r2, #9
 8001da2:	4909      	ldr	r1, [pc, #36]	; (8001dc8 <_ZN5L647015L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x44>)
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f7ff f961 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8001daa:	4a08      	ldr	r2, [pc, #32]	; (8001dcc <_ZN5L647015L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x48>)
 8001dac:	4906      	ldr	r1, [pc, #24]	; (8001dc8 <_ZN5L647015L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x44>)
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff f980 	bl	80010b4 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8001db4:	4a06      	ldr	r2, [pc, #24]	; (8001dd0 <_ZN5L647015L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x4c>)
 8001db6:	4905      	ldr	r1, [pc, #20]	; (8001dcc <_ZN5L647015L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x48>)
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 fae9 	bl	8002390 <_ZN5L647023L6470_DaisyChainCommandEPhS0_>
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200002a4 	.word	0x200002a4
 8001dcc:	200002c4 	.word	0x200002c4
 8001dd0:	200002cc 	.word	0x200002cc

08001dd4 <_ZN5L647012L6470_GoHomeEv>:
  * @brief  GoHome command produces a motion to the HOME position (zero position)
  *         via the shortest path.
  * 
  */
void L6470::L6470_GoHome(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af02      	add	r7, sp, #8
 8001dda:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8001ddc:	2300      	movs	r3, #0
 8001dde:	9301      	str	r3, [sp, #4]
 8001de0:	2300      	movs	r3, #0
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	2300      	movs	r3, #0
 8001de6:	220a      	movs	r2, #10
 8001de8:	4908      	ldr	r1, [pc, #32]	; (8001e0c <_ZN5L647012L6470_GoHomeEv+0x38>)
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff f93e 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8001df0:	4a07      	ldr	r2, [pc, #28]	; (8001e10 <_ZN5L647012L6470_GoHomeEv+0x3c>)
 8001df2:	4906      	ldr	r1, [pc, #24]	; (8001e0c <_ZN5L647012L6470_GoHomeEv+0x38>)
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff f95d 	bl	80010b4 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8001dfa:	4a06      	ldr	r2, [pc, #24]	; (8001e14 <_ZN5L647012L6470_GoHomeEv+0x40>)
 8001dfc:	4904      	ldr	r1, [pc, #16]	; (8001e10 <_ZN5L647012L6470_GoHomeEv+0x3c>)
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 fac6 	bl	8002390 <_ZN5L647023L6470_DaisyChainCommandEPhS0_>
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	200002a4 	.word	0x200002a4
 8001e10:	200002c4 	.word	0x200002c4
 8001e14:	200002cc 	.word	0x200002cc

08001e18 <_ZN5L647012L6470_GoMarkEv>:
  * @brief  GoMark command produces a motion to the MARK position performing the
  *         minimum path.
  * 
  */
void L6470::L6470_GoMark(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af02      	add	r7, sp, #8
 8001e1e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8001e20:	2300      	movs	r3, #0
 8001e22:	9301      	str	r3, [sp, #4]
 8001e24:	2300      	movs	r3, #0
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	2300      	movs	r3, #0
 8001e2a:	220b      	movs	r2, #11
 8001e2c:	4908      	ldr	r1, [pc, #32]	; (8001e50 <_ZN5L647012L6470_GoMarkEv+0x38>)
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff f91c 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8001e34:	4a07      	ldr	r2, [pc, #28]	; (8001e54 <_ZN5L647012L6470_GoMarkEv+0x3c>)
 8001e36:	4906      	ldr	r1, [pc, #24]	; (8001e50 <_ZN5L647012L6470_GoMarkEv+0x38>)
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7ff f93b 	bl	80010b4 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8001e3e:	4a06      	ldr	r2, [pc, #24]	; (8001e58 <_ZN5L647012L6470_GoMarkEv+0x40>)
 8001e40:	4904      	ldr	r1, [pc, #16]	; (8001e54 <_ZN5L647012L6470_GoMarkEv+0x3c>)
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 faa4 	bl	8002390 <_ZN5L647023L6470_DaisyChainCommandEPhS0_>
}
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	200002a4 	.word	0x200002a4
 8001e54:	200002c4 	.word	0x200002c4
 8001e58:	200002cc 	.word	0x200002cc

08001e5c <_ZN5L647014L6470_ResetPosEv>:
/**
  * @brief  ResetPos command resets the ABS_POS register to zero.
  * 
  */
void L6470::L6470_ResetPos(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af02      	add	r7, sp, #8
 8001e62:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8001e64:	2300      	movs	r3, #0
 8001e66:	9301      	str	r3, [sp, #4]
 8001e68:	2300      	movs	r3, #0
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	220c      	movs	r2, #12
 8001e70:	4908      	ldr	r1, [pc, #32]	; (8001e94 <_ZN5L647014L6470_ResetPosEv+0x38>)
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff f8fa 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8001e78:	4a07      	ldr	r2, [pc, #28]	; (8001e98 <_ZN5L647014L6470_ResetPosEv+0x3c>)
 8001e7a:	4906      	ldr	r1, [pc, #24]	; (8001e94 <_ZN5L647014L6470_ResetPosEv+0x38>)
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff f919 	bl	80010b4 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8001e82:	4a06      	ldr	r2, [pc, #24]	; (8001e9c <_ZN5L647014L6470_ResetPosEv+0x40>)
 8001e84:	4904      	ldr	r1, [pc, #16]	; (8001e98 <_ZN5L647014L6470_ResetPosEv+0x3c>)
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 fa82 	bl	8002390 <_ZN5L647023L6470_DaisyChainCommandEPhS0_>
}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	200002a4 	.word	0x200002a4
 8001e98:	200002c4 	.word	0x200002c4
 8001e9c:	200002cc 	.word	0x200002cc

08001ea0 <_ZN5L647017L6470_ResetDeviceEv>:
/**
  * @brief  ResetDevice command resets the device to power-up conditions.
  * 
  */
void L6470::L6470_ResetDevice(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af02      	add	r7, sp, #8
 8001ea6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	9301      	str	r3, [sp, #4]
 8001eac:	2300      	movs	r3, #0
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	220d      	movs	r2, #13
 8001eb4:	4908      	ldr	r1, [pc, #32]	; (8001ed8 <_ZN5L647017L6470_ResetDeviceEv+0x38>)
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff f8d8 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8001ebc:	4a07      	ldr	r2, [pc, #28]	; (8001edc <_ZN5L647017L6470_ResetDeviceEv+0x3c>)
 8001ebe:	4906      	ldr	r1, [pc, #24]	; (8001ed8 <_ZN5L647017L6470_ResetDeviceEv+0x38>)
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff f8f7 	bl	80010b4 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8001ec6:	4a06      	ldr	r2, [pc, #24]	; (8001ee0 <_ZN5L647017L6470_ResetDeviceEv+0x40>)
 8001ec8:	4904      	ldr	r1, [pc, #16]	; (8001edc <_ZN5L647017L6470_ResetDeviceEv+0x3c>)
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 fa60 	bl	8002390 <_ZN5L647023L6470_DaisyChainCommandEPhS0_>
}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	200002a4 	.word	0x200002a4
 8001edc:	200002c4 	.word	0x200002c4
 8001ee0:	200002cc 	.word	0x200002cc

08001ee4 <_ZN5L647014L6470_SoftStopEv>:
  *         a consequent motor stop; the deceleration value used is the one stored
  *         in the DECEL register.
  * 
  */
void L6470::L6470_SoftStop(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af02      	add	r7, sp, #8
 8001eea:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8001eec:	2300      	movs	r3, #0
 8001eee:	9301      	str	r3, [sp, #4]
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	220e      	movs	r2, #14
 8001ef8:	4908      	ldr	r1, [pc, #32]	; (8001f1c <_ZN5L647014L6470_SoftStopEv+0x38>)
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff f8b6 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8001f00:	4a07      	ldr	r2, [pc, #28]	; (8001f20 <_ZN5L647014L6470_SoftStopEv+0x3c>)
 8001f02:	4906      	ldr	r1, [pc, #24]	; (8001f1c <_ZN5L647014L6470_SoftStopEv+0x38>)
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff f8d5 	bl	80010b4 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8001f0a:	4a06      	ldr	r2, [pc, #24]	; (8001f24 <_ZN5L647014L6470_SoftStopEv+0x40>)
 8001f0c:	4904      	ldr	r1, [pc, #16]	; (8001f20 <_ZN5L647014L6470_SoftStopEv+0x3c>)
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 fa3e 	bl	8002390 <_ZN5L647023L6470_DaisyChainCommandEPhS0_>
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	200002a4 	.word	0x200002a4
 8001f20:	200002c4 	.word	0x200002c4
 8001f24:	200002cc 	.word	0x200002cc

08001f28 <_ZN5L647014L6470_HardStopEv>:
/**
  * @brief  HardStop command causes an immediate motor stop with infinite deceleration.
  * 
  */
void L6470::L6470_HardStop(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af02      	add	r7, sp, #8
 8001f2e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8001f30:	2300      	movs	r3, #0
 8001f32:	9301      	str	r3, [sp, #4]
 8001f34:	2300      	movs	r3, #0
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	2300      	movs	r3, #0
 8001f3a:	220f      	movs	r2, #15
 8001f3c:	4908      	ldr	r1, [pc, #32]	; (8001f60 <_ZN5L647014L6470_HardStopEv+0x38>)
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff f894 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8001f44:	4a07      	ldr	r2, [pc, #28]	; (8001f64 <_ZN5L647014L6470_HardStopEv+0x3c>)
 8001f46:	4906      	ldr	r1, [pc, #24]	; (8001f60 <_ZN5L647014L6470_HardStopEv+0x38>)
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff f8b3 	bl	80010b4 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8001f4e:	4a06      	ldr	r2, [pc, #24]	; (8001f68 <_ZN5L647014L6470_HardStopEv+0x40>)
 8001f50:	4904      	ldr	r1, [pc, #16]	; (8001f64 <_ZN5L647014L6470_HardStopEv+0x3c>)
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 fa1c 	bl	8002390 <_ZN5L647023L6470_DaisyChainCommandEPhS0_>
}
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	200002a4 	.word	0x200002a4
 8001f64:	200002c4 	.word	0x200002c4
 8001f68:	200002cc 	.word	0x200002cc

08001f6c <_ZN5L647013L6470_SoftHiZEv>:
  *         after a deceleration to zero; the deceleration value used is the one
  *         stored in the DECEL register.
  * 
  */
void L6470::L6470_SoftHiZ(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af02      	add	r7, sp, #8
 8001f72:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8001f74:	2300      	movs	r3, #0
 8001f76:	9301      	str	r3, [sp, #4]
 8001f78:	2300      	movs	r3, #0
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	2210      	movs	r2, #16
 8001f80:	4908      	ldr	r1, [pc, #32]	; (8001fa4 <_ZN5L647013L6470_SoftHiZEv+0x38>)
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff f872 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8001f88:	4a07      	ldr	r2, [pc, #28]	; (8001fa8 <_ZN5L647013L6470_SoftHiZEv+0x3c>)
 8001f8a:	4906      	ldr	r1, [pc, #24]	; (8001fa4 <_ZN5L647013L6470_SoftHiZEv+0x38>)
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7ff f891 	bl	80010b4 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8001f92:	4a06      	ldr	r2, [pc, #24]	; (8001fac <_ZN5L647013L6470_SoftHiZEv+0x40>)
 8001f94:	4904      	ldr	r1, [pc, #16]	; (8001fa8 <_ZN5L647013L6470_SoftHiZEv+0x3c>)
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f9fa 	bl	8002390 <_ZN5L647023L6470_DaisyChainCommandEPhS0_>
}
 8001f9c:	bf00      	nop
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	200002a4 	.word	0x200002a4
 8001fa8:	200002c4 	.word	0x200002c4
 8001fac:	200002cc 	.word	0x200002cc

08001fb0 <_ZN5L647013L6470_HardHiZEv>:
/**
  * @brief  HardHiZ command immediately disables the power bridges (high impedance state).
  * 
  */
void L6470::L6470_HardHiZ(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af02      	add	r7, sp, #8
 8001fb6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8001fb8:	2300      	movs	r3, #0
 8001fba:	9301      	str	r3, [sp, #4]
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	2211      	movs	r2, #17
 8001fc4:	4908      	ldr	r1, [pc, #32]	; (8001fe8 <_ZN5L647013L6470_HardHiZEv+0x38>)
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff f850 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8001fcc:	4a07      	ldr	r2, [pc, #28]	; (8001fec <_ZN5L647013L6470_HardHiZEv+0x3c>)
 8001fce:	4906      	ldr	r1, [pc, #24]	; (8001fe8 <_ZN5L647013L6470_HardHiZEv+0x38>)
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff f86f 	bl	80010b4 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8001fd6:	4a06      	ldr	r2, [pc, #24]	; (8001ff0 <_ZN5L647013L6470_HardHiZEv+0x40>)
 8001fd8:	4904      	ldr	r1, [pc, #16]	; (8001fec <_ZN5L647013L6470_HardHiZEv+0x3c>)
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f9d8 	bl	8002390 <_ZN5L647023L6470_DaisyChainCommandEPhS0_>
}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	200002a4 	.word	0x200002a4
 8001fec:	200002c4 	.word	0x200002c4
 8001ff0:	200002cc 	.word	0x200002cc

08001ff4 <_ZN5L647015L6470_GetStatusEv>:
  * 
  * 
  * @retval ReceivedValue The register value.
  */
uint16_t L6470::L6470_GetStatus(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af02      	add	r7, sp, #8
 8001ffa:	6078      	str	r0, [r7, #4]
  uint16_t ReceivedValue;

  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	9301      	str	r3, [sp, #4]
 8002000:	2300      	movs	r3, #0
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	2300      	movs	r3, #0
 8002006:	2212      	movs	r2, #18
 8002008:	490c      	ldr	r1, [pc, #48]	; (800203c <_ZN5L647015L6470_GetStatusEv+0x48>)
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff f82e 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8002010:	4a0b      	ldr	r2, [pc, #44]	; (8002040 <_ZN5L647015L6470_GetStatusEv+0x4c>)
 8002012:	490a      	ldr	r1, [pc, #40]	; (800203c <_ZN5L647015L6470_GetStatusEv+0x48>)
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff f84d 	bl	80010b4 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800201a:	4a0a      	ldr	r2, [pc, #40]	; (8002044 <_ZN5L647015L6470_GetStatusEv+0x50>)
 800201c:	4908      	ldr	r1, [pc, #32]	; (8002040 <_ZN5L647015L6470_GetStatusEv+0x4c>)
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f9b6 	bl	8002390 <_ZN5L647023L6470_DaisyChainCommandEPhS0_>
  
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 8002024:	2202      	movs	r2, #2
 8002026:	4907      	ldr	r1, [pc, #28]	; (8002044 <_ZN5L647015L6470_GetStatusEv+0x50>)
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f9e5 	bl	80023f8 <_ZN5L647025L6470_ExtractReturnedDataEPhh>
 800202e:	4603      	mov	r3, r0
 8002030:	81fb      	strh	r3, [r7, #14]
  
  return ReceivedValue;
 8002032:	89fb      	ldrh	r3, [r7, #14]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	200002a4 	.word	0x200002a4
 8002040:	200002c4 	.word	0x200002c4
 8002044:	200002cc 	.word	0x200002cc

08002048 <_ZN5L647021L6470_PrepareSetParamE14eL6470_RegId_tm>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af02      	add	r7, sp, #8
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	460b      	mov	r3, r1
 8002052:	607a      	str	r2, [r7, #4]
 8002054:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8002056:	7afa      	ldrb	r2, [r7, #11]
 8002058:	2300      	movs	r3, #0
 800205a:	9301      	str	r3, [sp, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	4613      	mov	r3, r2
 8002062:	2201      	movs	r2, #1
 8002064:	4903      	ldr	r1, [pc, #12]	; (8002074 <_ZN5L647021L6470_PrepareSetParamE14eL6470_RegId_tm+0x2c>)
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f7ff f800 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
}
 800206c:	bf00      	nop
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	200002a4 	.word	0x200002a4

08002078 <_ZN5L647021L6470_PrepareGetParamE14eL6470_RegId_t>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af02      	add	r7, sp, #8
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8002084:	78fb      	ldrb	r3, [r7, #3]
 8002086:	2200      	movs	r2, #0
 8002088:	9201      	str	r2, [sp, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	9200      	str	r2, [sp, #0]
 800208e:	2202      	movs	r2, #2
 8002090:	4903      	ldr	r1, [pc, #12]	; (80020a0 <_ZN5L647021L6470_PrepareGetParamE14eL6470_RegId_t+0x28>)
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7fe ffea 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
}
 8002098:	bf00      	nop
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	200002a4 	.word	0x200002a4

080020a4 <_ZN5L647016L6470_PrepareRunE14eL6470_DirId_tm>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af02      	add	r7, sp, #8
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	460b      	mov	r3, r1
 80020ae:	607a      	str	r2, [r7, #4]
 80020b0:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 80020b2:	7afa      	ldrb	r2, [r7, #11]
 80020b4:	2300      	movs	r3, #0
 80020b6:	9301      	str	r3, [sp, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	4613      	mov	r3, r2
 80020be:	2203      	movs	r2, #3
 80020c0:	4903      	ldr	r1, [pc, #12]	; (80020d0 <_ZN5L647016L6470_PrepareRunE14eL6470_DirId_tm+0x2c>)
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f7fe ffd2 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
}
 80020c8:	bf00      	nop
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	200002a4 	.word	0x200002a4

080020d4 <_ZN5L647022L6470_PrepareStepClockE14eL6470_DirId_t>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af02      	add	r7, sp, #8
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 80020e0:	78fb      	ldrb	r3, [r7, #3]
 80020e2:	2200      	movs	r2, #0
 80020e4:	9201      	str	r2, [sp, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	9200      	str	r2, [sp, #0]
 80020ea:	2204      	movs	r2, #4
 80020ec:	4903      	ldr	r1, [pc, #12]	; (80020fc <_ZN5L647022L6470_PrepareStepClockE14eL6470_DirId_t+0x28>)
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7fe ffbc 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	200002a4 	.word	0x200002a4

08002100 <_ZN5L647017L6470_PrepareMoveE14eL6470_DirId_tm>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af02      	add	r7, sp, #8
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	460b      	mov	r3, r1
 800210a:	607a      	str	r2, [r7, #4]
 800210c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 800210e:	7afa      	ldrb	r2, [r7, #11]
 8002110:	2300      	movs	r3, #0
 8002112:	9301      	str	r3, [sp, #4]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	4613      	mov	r3, r2
 800211a:	2205      	movs	r2, #5
 800211c:	4903      	ldr	r1, [pc, #12]	; (800212c <_ZN5L647017L6470_PrepareMoveE14eL6470_DirId_tm+0x2c>)
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f7fe ffa4 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
}
 8002124:	bf00      	nop
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	200002a4 	.word	0x200002a4

08002130 <_ZN5L647017L6470_PrepareGoToEm>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470::L6470_PrepareGoTo(uint32_t AbsPos)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af02      	add	r7, sp, #8
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 800213a:	2300      	movs	r3, #0
 800213c:	9301      	str	r3, [sp, #4]
 800213e:	2300      	movs	r3, #0
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	2206      	movs	r2, #6
 8002146:	4904      	ldr	r1, [pc, #16]	; (8002158 <_ZN5L647017L6470_PrepareGoToEm+0x28>)
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7fe ff8f 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	200002a4 	.word	0x200002a4

0800215c <_ZN5L647020L6470_PrepareGoToDirE14eL6470_DirId_tm>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af02      	add	r7, sp, #8
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	460b      	mov	r3, r1
 8002166:	607a      	str	r2, [r7, #4]
 8002168:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 800216a:	7afa      	ldrb	r2, [r7, #11]
 800216c:	2300      	movs	r3, #0
 800216e:	9301      	str	r3, [sp, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	4613      	mov	r3, r2
 8002176:	2207      	movs	r2, #7
 8002178:	4903      	ldr	r1, [pc, #12]	; (8002188 <_ZN5L647020L6470_PrepareGoToDirE14eL6470_DirId_tm+0x2c>)
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f7fe ff76 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
}
 8002180:	bf00      	nop
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	200002a4 	.word	0x200002a4

0800218c <_ZN5L647020L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af02      	add	r7, sp, #8
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	607b      	str	r3, [r7, #4]
 8002196:	460b      	mov	r3, r1
 8002198:	72fb      	strb	r3, [r7, #11]
 800219a:	4613      	mov	r3, r2
 800219c:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 800219e:	7af9      	ldrb	r1, [r7, #11]
 80021a0:	7abb      	ldrb	r3, [r7, #10]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	9201      	str	r2, [sp, #4]
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	460b      	mov	r3, r1
 80021aa:	2208      	movs	r2, #8
 80021ac:	4903      	ldr	r1, [pc, #12]	; (80021bc <_ZN5L647020L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x30>)
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f7fe ff5c 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
}
 80021b4:	bf00      	nop
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	200002a4 	.word	0x200002a4

080021c0 <_ZN5L647022L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af02      	add	r7, sp, #8
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	70fb      	strb	r3, [r7, #3]
 80021cc:	4613      	mov	r3, r2
 80021ce:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 80021d0:	78fa      	ldrb	r2, [r7, #3]
 80021d2:	78bb      	ldrb	r3, [r7, #2]
 80021d4:	2100      	movs	r1, #0
 80021d6:	9101      	str	r1, [sp, #4]
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	4613      	mov	r3, r2
 80021dc:	2209      	movs	r2, #9
 80021de:	4904      	ldr	r1, [pc, #16]	; (80021f0 <_ZN5L647022L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x30>)
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7fe ff43 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	200002a4 	.word	0x200002a4

080021f4 <_ZN5L647019L6470_PrepareGoHomeEv>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470::L6470_PrepareGoHome(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af02      	add	r7, sp, #8
 80021fa:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 80021fc:	2300      	movs	r3, #0
 80021fe:	9301      	str	r3, [sp, #4]
 8002200:	2300      	movs	r3, #0
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	2300      	movs	r3, #0
 8002206:	220a      	movs	r2, #10
 8002208:	4903      	ldr	r1, [pc, #12]	; (8002218 <_ZN5L647019L6470_PrepareGoHomeEv+0x24>)
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7fe ff2e 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
}
 8002210:	bf00      	nop
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	200002a4 	.word	0x200002a4

0800221c <_ZN5L647019L6470_PrepareGoMarkEv>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470::L6470_PrepareGoMark(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af02      	add	r7, sp, #8
 8002222:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8002224:	2300      	movs	r3, #0
 8002226:	9301      	str	r3, [sp, #4]
 8002228:	2300      	movs	r3, #0
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	2300      	movs	r3, #0
 800222e:	220b      	movs	r2, #11
 8002230:	4903      	ldr	r1, [pc, #12]	; (8002240 <_ZN5L647019L6470_PrepareGoMarkEv+0x24>)
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7fe ff1a 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	200002a4 	.word	0x200002a4

08002244 <_ZN5L647021L6470_PrepareResetPosEv>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470::L6470_PrepareResetPos(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af02      	add	r7, sp, #8
 800224a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 800224c:	2300      	movs	r3, #0
 800224e:	9301      	str	r3, [sp, #4]
 8002250:	2300      	movs	r3, #0
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	2300      	movs	r3, #0
 8002256:	220c      	movs	r2, #12
 8002258:	4903      	ldr	r1, [pc, #12]	; (8002268 <_ZN5L647021L6470_PrepareResetPosEv+0x24>)
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7fe ff06 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
}
 8002260:	bf00      	nop
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	200002a4 	.word	0x200002a4

0800226c <_ZN5L647024L6470_PrepareResetDeviceEv>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470::L6470_PrepareResetDevice(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af02      	add	r7, sp, #8
 8002272:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8002274:	2300      	movs	r3, #0
 8002276:	9301      	str	r3, [sp, #4]
 8002278:	2300      	movs	r3, #0
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	2300      	movs	r3, #0
 800227e:	220d      	movs	r2, #13
 8002280:	4903      	ldr	r1, [pc, #12]	; (8002290 <_ZN5L647024L6470_PrepareResetDeviceEv+0x24>)
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7fe fef2 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
}
 8002288:	bf00      	nop
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	200002a4 	.word	0x200002a4

08002294 <_ZN5L647021L6470_PrepareSoftStopEv>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470::L6470_PrepareSoftStop(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af02      	add	r7, sp, #8
 800229a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 800229c:	2300      	movs	r3, #0
 800229e:	9301      	str	r3, [sp, #4]
 80022a0:	2300      	movs	r3, #0
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	2300      	movs	r3, #0
 80022a6:	220e      	movs	r2, #14
 80022a8:	4903      	ldr	r1, [pc, #12]	; (80022b8 <_ZN5L647021L6470_PrepareSoftStopEv+0x24>)
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7fe fede 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
}
 80022b0:	bf00      	nop
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	200002a4 	.word	0x200002a4

080022bc <_ZN5L647021L6470_PrepareHardStopEv>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470::L6470_PrepareHardStop(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af02      	add	r7, sp, #8
 80022c2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 80022c4:	2300      	movs	r3, #0
 80022c6:	9301      	str	r3, [sp, #4]
 80022c8:	2300      	movs	r3, #0
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	2300      	movs	r3, #0
 80022ce:	220f      	movs	r2, #15
 80022d0:	4903      	ldr	r1, [pc, #12]	; (80022e0 <_ZN5L647021L6470_PrepareHardStopEv+0x24>)
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7fe feca 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
}
 80022d8:	bf00      	nop
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	200002a4 	.word	0x200002a4

080022e4 <_ZN5L647020L6470_PrepareSoftHiZEv>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470::L6470_PrepareSoftHiZ(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af02      	add	r7, sp, #8
 80022ea:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 80022ec:	2300      	movs	r3, #0
 80022ee:	9301      	str	r3, [sp, #4]
 80022f0:	2300      	movs	r3, #0
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	2300      	movs	r3, #0
 80022f6:	2210      	movs	r2, #16
 80022f8:	4903      	ldr	r1, [pc, #12]	; (8002308 <_ZN5L647020L6470_PrepareSoftHiZEv+0x24>)
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7fe feb6 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
}
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	200002a4 	.word	0x200002a4

0800230c <_ZN5L647020L6470_PrepareHardHiZEv>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470::L6470_PrepareHardHiZ(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af02      	add	r7, sp, #8
 8002312:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8002314:	2300      	movs	r3, #0
 8002316:	9301      	str	r3, [sp, #4]
 8002318:	2300      	movs	r3, #0
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	2300      	movs	r3, #0
 800231e:	2211      	movs	r2, #17
 8002320:	4903      	ldr	r1, [pc, #12]	; (8002330 <_ZN5L647020L6470_PrepareHardHiZEv+0x24>)
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7fe fea2 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	200002a4 	.word	0x200002a4

08002334 <_ZN5L647022L6470_PrepareGetStatusEv>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470::L6470_PrepareGetStatus(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af02      	add	r7, sp, #8
 800233a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 800233c:	2300      	movs	r3, #0
 800233e:	9301      	str	r3, [sp, #4]
 8002340:	2300      	movs	r3, #0
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	2300      	movs	r3, #0
 8002346:	2212      	movs	r2, #18
 8002348:	4903      	ldr	r1, [pc, #12]	; (8002358 <_ZN5L647022L6470_PrepareGetStatusEv+0x24>)
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7fe fe8e 	bl	800106c <_ZN5L647022L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	200002a4 	.word	0x200002a4

0800235c <_ZN5L647039L6470_PerformPreparedApplicationCommandEv>:
  * @retval (uint8_t*)data->L6470_DaisyChainSpiRxStruct  The pointer to the structure
  *         containing returned values from each L6470 of the daisy chain for each
  *         sent SPI data.
  */
uint8_t* L6470::L6470_PerformPreparedApplicationCommand(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8002364:	4a07      	ldr	r2, [pc, #28]	; (8002384 <_ZN5L647039L6470_PerformPreparedApplicationCommandEv+0x28>)
 8002366:	4908      	ldr	r1, [pc, #32]	; (8002388 <_ZN5L647039L6470_PerformPreparedApplicationCommandEv+0x2c>)
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7fe fea3 	bl	80010b4 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800236e:	4a07      	ldr	r2, [pc, #28]	; (800238c <_ZN5L647039L6470_PerformPreparedApplicationCommandEv+0x30>)
 8002370:	4904      	ldr	r1, [pc, #16]	; (8002384 <_ZN5L647039L6470_PerformPreparedApplicationCommandEv+0x28>)
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f80c 	bl	8002390 <_ZN5L647023L6470_DaisyChainCommandEPhS0_>
  
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 8002378:	4b04      	ldr	r3, [pc, #16]	; (800238c <_ZN5L647039L6470_PerformPreparedApplicationCommandEv+0x30>)
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	200002c4 	.word	0x200002c4
 8002388:	200002a4 	.word	0x200002a4
 800238c:	200002cc 	.word	0x200002cc

08002390 <_ZN5L647023L6470_DaisyChainCommandEPhS0_>:
  * @brief  Send command to the L6470 daisy chain via SPI
  * @param  pL6470_DaisyChainSpiTxStruct  Pointer to the matrix array of bytes to be sent to the daisy chain L6470
  * @param  pL6470_DaisyChainSpiRxStruct  Pointer to the matrix array of bytes to be received from the daisy chain L6470
  */
void L6470::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af02      	add	r7, sp, #8
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  uint8_t spibyte;
  
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 800239c:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <_ZN5L647023L6470_DaisyChainCommandEPhS0_+0x64>)
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
  
  /* Send all command bytes via SPI */
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 80023a2:	2300      	movs	r3, #0
 80023a4:	75fb      	strb	r3, [r7, #23]
 80023a6:	e01c      	b.n	80023e2 <_ZN5L647023L6470_DaisyChainCommandEPhS0_+0x52>
  {
    /* Send the command via SPI */
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 80023a8:	7dfb      	ldrb	r3, [r7, #23]
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	461a      	mov	r2, r3
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	1899      	adds	r1, r3, r2
 80023b2:	7dfb      	ldrb	r3, [r7, #23]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	461a      	mov	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	441a      	add	r2, r3
 80023bc:	230a      	movs	r3, #10
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	2302      	movs	r3, #2
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f7fe fde9 	bl	8000f9a <_ZN5L647023L6470_SPI_CommunicationEPhS0_tm>
    
    //_DELAY(TDISCS);
    uint8_t delay_cnt;
    for (delay_cnt=0; delay_cnt<20; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 80023c8:	2300      	movs	r3, #0
 80023ca:	75bb      	strb	r3, [r7, #22]
 80023cc:	e003      	b.n	80023d6 <_ZN5L647023L6470_DaisyChainCommandEPhS0_+0x46>
 80023ce:	bf00      	nop
 80023d0:	7dbb      	ldrb	r3, [r7, #22]
 80023d2:	3301      	adds	r3, #1
 80023d4:	75bb      	strb	r3, [r7, #22]
 80023d6:	7dbb      	ldrb	r3, [r7, #22]
 80023d8:	2b13      	cmp	r3, #19
 80023da:	d9f8      	bls.n	80023ce <_ZN5L647023L6470_DaisyChainCommandEPhS0_+0x3e>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 80023dc:	7dfb      	ldrb	r3, [r7, #23]
 80023de:	3301      	adds	r3, #1
 80023e0:	75fb      	strb	r3, [r7, #23]
 80023e2:	7dfb      	ldrb	r3, [r7, #23]
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d9df      	bls.n	80023a8 <_ZN5L647023L6470_DaisyChainCommandEPhS0_+0x18>
  }
}
 80023e8:	bf00      	nop
 80023ea:	bf00      	nop
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	200002a1 	.word	0x200002a1

080023f8 <_ZN5L647025L6470_ExtractReturnedDataEPhh>:
  * @param    pL6470_DaisyChainSpiRxStruct  uint8_t-pointer to the matrix that
  *           contains the received data by SPI from the L6470 daisy chain.
  * @param    LengthByte  The number of bytes about the received value.
  */
uint32_t L6470::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b087      	sub	sp, #28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	4613      	mov	r3, r2
 8002404:	71fb      	strb	r3, [r7, #7]
  uint32_t value;
  uint8_t i;

  value = 0x000000;
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 800240a:	2301      	movs	r3, #1
 800240c:	74fb      	strb	r3, [r7, #19]
 800240e:	e016      	b.n	800243e <_ZN5L647025L6470_ExtractReturnedDataEPhh+0x46>
  {
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 8002410:	7cfb      	ldrb	r3, [r7, #19]
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	461a      	mov	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	7e5b      	ldrb	r3, [r3, #25]
 800241a:	4413      	add	r3, r2
 800241c:	68ba      	ldr	r2, [r7, #8]
 800241e:	4413      	add	r3, r2
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	4619      	mov	r1, r3
 8002424:	79fa      	ldrb	r2, [r7, #7]
 8002426:	7cfb      	ldrb	r3, [r7, #19]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	fa01 f303 	lsl.w	r3, r1, r3
 8002430:	461a      	mov	r2, r3
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	4313      	orrs	r3, r2
 8002436:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8002438:	7cfb      	ldrb	r3, [r7, #19]
 800243a:	3301      	adds	r3, #1
 800243c:	74fb      	strb	r3, [r7, #19]
 800243e:	7cfb      	ldrb	r3, [r7, #19]
 8002440:	2b03      	cmp	r3, #3
 8002442:	d9e5      	bls.n	8002410 <_ZN5L647025L6470_ExtractReturnedDataEPhh+0x18>
  }

  return value;
 8002444:	697b      	ldr	r3, [r7, #20]
}
 8002446:	4618      	mov	r0, r3
 8002448:	371c      	adds	r7, #28
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
	...

08002454 <_ZN5L647029L6470_CheckStatusRegisterFlagEh>:
  *
  * @retval state The flag state.
  */

uint8_t L6470::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 8002460:	2300      	movs	r3, #0
 8002462:	73fb      	strb	r3, [r7, #15]

  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 8002464:	2118      	movs	r1, #24
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff fb6c 	bl	8001b44 <_ZN5L647014L6470_GetParamE14eL6470_RegId_t>
 800246c:	4602      	mov	r2, r0
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	b292      	uxth	r2, r2
 8002474:	801a      	strh	r2, [r3, #0]
  
  switch(L6470_StatusRegisterFlagId)
 8002476:	78fb      	ldrb	r3, [r7, #3]
 8002478:	2b0e      	cmp	r3, #14
 800247a:	f200 8099 	bhi.w	80025b0 <_ZN5L647029L6470_CheckStatusRegisterFlagEh+0x15c>
 800247e:	a201      	add	r2, pc, #4	; (adr r2, 8002484 <_ZN5L647029L6470_CheckStatusRegisterFlagEh+0x30>)
 8002480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002484:	080024c1 	.word	0x080024c1
 8002488:	080024d1 	.word	0x080024d1
 800248c:	080024e1 	.word	0x080024e1
 8002490:	080024f1 	.word	0x080024f1
 8002494:	08002501 	.word	0x08002501
 8002498:	08002511 	.word	0x08002511
 800249c:	08002521 	.word	0x08002521
 80024a0:	08002531 	.word	0x08002531
 80024a4:	08002541 	.word	0x08002541
 80024a8:	08002551 	.word	0x08002551
 80024ac:	08002561 	.word	0x08002561
 80024b0:	08002571 	.word	0x08002571
 80024b4:	08002581 	.word	0x08002581
 80024b8:	08002591 	.word	0x08002591
 80024bc:	080025a1 	.word	0x080025a1
  {
    case HiZ_ID:
      state = pL6470_StatusRegister->HiZ;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	73fb      	strb	r3, [r7, #15]
      break;
 80024ce:	e06f      	b.n	80025b0 <_ZN5L647029L6470_CheckStatusRegisterFlagEh+0x15c>
    case BUSY_ID:
      state = pL6470_StatusRegister->BUSY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	73fb      	strb	r3, [r7, #15]
      break;
 80024de:	e067      	b.n	80025b0 <_ZN5L647029L6470_CheckStatusRegisterFlagEh+0x15c>
    case SW_F_ID:
      state = pL6470_StatusRegister->SW_F;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	73fb      	strb	r3, [r7, #15]
      break;
 80024ee:	e05f      	b.n	80025b0 <_ZN5L647029L6470_CheckStatusRegisterFlagEh+0x15c>
    case SW_EVN_ID:
      state = pL6470_StatusRegister->SW_EVN;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	73fb      	strb	r3, [r7, #15]
      break;
 80024fe:	e057      	b.n	80025b0 <_ZN5L647029L6470_CheckStatusRegisterFlagEh+0x15c>
    case DIR_ID:
      state = pL6470_StatusRegister->DIR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800250a:	b2db      	uxtb	r3, r3
 800250c:	73fb      	strb	r3, [r7, #15]
      break;
 800250e:	e04f      	b.n	80025b0 <_ZN5L647029L6470_CheckStatusRegisterFlagEh+0x15c>
    case MOT_STATUS_ID:
      state = pL6470_StatusRegister->MOT_STATUS;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800251a:	b2db      	uxtb	r3, r3
 800251c:	73fb      	strb	r3, [r7, #15]
      break;
 800251e:	e047      	b.n	80025b0 <_ZN5L647029L6470_CheckStatusRegisterFlagEh+0x15c>
    case NOTPERF_CMD_ID:
      state = pL6470_StatusRegister->NOTPERF_CMD;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800252a:	b2db      	uxtb	r3, r3
 800252c:	73fb      	strb	r3, [r7, #15]
      break;
 800252e:	e03f      	b.n	80025b0 <_ZN5L647029L6470_CheckStatusRegisterFlagEh+0x15c>
    case WRONG_CMD_ID:
      state = pL6470_StatusRegister->WRONG_CMD;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002534:	785b      	ldrb	r3, [r3, #1]
 8002536:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800253a:	b2db      	uxtb	r3, r3
 800253c:	73fb      	strb	r3, [r7, #15]
      break;
 800253e:	e037      	b.n	80025b0 <_ZN5L647029L6470_CheckStatusRegisterFlagEh+0x15c>
    case UVLO_ID:
      state = pL6470_StatusRegister->UVLO;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	785b      	ldrb	r3, [r3, #1]
 8002546:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800254a:	b2db      	uxtb	r3, r3
 800254c:	73fb      	strb	r3, [r7, #15]
      break;
 800254e:	e02f      	b.n	80025b0 <_ZN5L647029L6470_CheckStatusRegisterFlagEh+0x15c>
    case TH_WRN_ID:
      state = pL6470_StatusRegister->TH_WRN;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002554:	785b      	ldrb	r3, [r3, #1]
 8002556:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800255a:	b2db      	uxtb	r3, r3
 800255c:	73fb      	strb	r3, [r7, #15]
      break;
 800255e:	e027      	b.n	80025b0 <_ZN5L647029L6470_CheckStatusRegisterFlagEh+0x15c>
    case TH_SD_ID:
      state = pL6470_StatusRegister->TH_SD;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002564:	785b      	ldrb	r3, [r3, #1]
 8002566:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800256a:	b2db      	uxtb	r3, r3
 800256c:	73fb      	strb	r3, [r7, #15]
      break;
 800256e:	e01f      	b.n	80025b0 <_ZN5L647029L6470_CheckStatusRegisterFlagEh+0x15c>
    case OCD_ID:
      state = pL6470_StatusRegister->OCD;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002574:	785b      	ldrb	r3, [r3, #1]
 8002576:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800257a:	b2db      	uxtb	r3, r3
 800257c:	73fb      	strb	r3, [r7, #15]
      break;
 800257e:	e017      	b.n	80025b0 <_ZN5L647029L6470_CheckStatusRegisterFlagEh+0x15c>
    case STEP_LOSS_A_ID:
      state = pL6470_StatusRegister->STEP_LOSS_A;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002584:	785b      	ldrb	r3, [r3, #1]
 8002586:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800258a:	b2db      	uxtb	r3, r3
 800258c:	73fb      	strb	r3, [r7, #15]
      break;
 800258e:	e00f      	b.n	80025b0 <_ZN5L647029L6470_CheckStatusRegisterFlagEh+0x15c>
    case STEP_LOSS_B_ID:
      state = pL6470_StatusRegister->STEP_LOSS_B;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002594:	785b      	ldrb	r3, [r3, #1]
 8002596:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800259a:	b2db      	uxtb	r3, r3
 800259c:	73fb      	strb	r3, [r7, #15]
      break;
 800259e:	e007      	b.n	80025b0 <_ZN5L647029L6470_CheckStatusRegisterFlagEh+0x15c>
    case SCK_MOD_ID:
      state = pL6470_StatusRegister->SCK_MOD;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a4:	785b      	ldrb	r3, [r3, #1]
 80025a6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	73fb      	strb	r3, [r7, #15]
      break;
 80025ae:	bf00      	nop
  }
  
  return state;
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop

080025bc <_ZN5L647012L6470_ConfigEPv>:
/**
  * @brief  Configures the L6470 registers.
  * @param  init The pointer to the initialization structure.
  */
status_t L6470::L6470_Config(void *init)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
  /* Reset devices. */
  reset_device();
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	3398      	adds	r3, #152	; 0x98
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	4798      	blx	r3

  /* Reset Status Register flags. */
  get_status();
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	3310      	adds	r3, #16
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	4798      	blx	r3

  /* Prepare the 'Register' field of StepperMotorDriverHandle */
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	edd3 7a05 	vldr	s15, [r3, #20]
 80025e8:	eeb0 0a67 	vmov.f32	s0, s15
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f7ff f819 	bl	8001624 <_ZN5L647019L6470_Step_s2_2_AccEf>
 80025f2:	4603      	mov	r3, r0
 80025f4:	461a      	mov	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	edd3 7a06 	vldr	s15, [r3, #24]
 8002602:	eeb0 0a67 	vmov.f32	s0, s15
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f7ff f854 	bl	80016b4 <_ZN5L647019L6470_Step_s2_2_DecEf>
 800260c:	4603      	mov	r3, r0
 800260e:	461a      	mov	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	edd3 7a07 	vldr	s15, [r3, #28]
 800261c:	eeb0 0a67 	vmov.f32	s0, s15
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f7ff f88f 	bl	8001744 <_ZN5L647023L6470_Step_s_2_MaxSpeedEf>
 8002626:	4603      	mov	r3, r0
 8002628:	461a      	mov	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	edd3 7a08 	vldr	s15, [r3, #32]
 8002636:	eeb0 0a67 	vmov.f32	s0, s15
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f7ff f8ca 	bl	80017d4 <_ZN5L647023L6470_Step_s_2_MinSpeedEf>
 8002640:	4603      	mov	r3, r0
 8002642:	461a      	mov	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002650:	eeb0 0a67 	vmov.f32	s0, s15
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f7ff f8e3 	bl	8001820 <_ZN5L647020L6470_Step_s_2_FsSpdEf>
 800265a:	4603      	mov	r3, r0
 800265c:	461a      	mov	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800266a:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 8002928 <_ZN5L647012L6470_ConfigEPv+0x36c>
 800266e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	ed93 7a00 	vldr	s14, [r3]
 8002678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800267c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002680:	edc7 7a01 	vstr	s15, [r7, #4]
 8002684:	793b      	ldrb	r3, [r7, #4]
 8002686:	b2da      	uxtb	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002694:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8002928 <_ZN5L647012L6470_ConfigEPv+0x36c>
 8002698:	ee67 6a87 	vmul.f32	s13, s15, s14
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	ed93 7a00 	vldr	s14, [r3]
 80026a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026aa:	edc7 7a01 	vstr	s15, [r7, #4]
 80026ae:	793b      	ldrb	r3, [r7, #4]
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80026be:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8002928 <_ZN5L647012L6470_ConfigEPv+0x36c>
 80026c2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	ed93 7a00 	vldr	s14, [r3]
 80026cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026d4:	edc7 7a01 	vstr	s15, [r7, #4]
 80026d8:	793b      	ldrb	r3, [r7, #4]
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80026e8:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8002928 <_ZN5L647012L6470_ConfigEPv+0x36c>
 80026ec:	ee67 6a87 	vmul.f32	s13, s15, s14
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	ed93 7a00 	vldr	s14, [r3]
 80026f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026fe:	edc7 7a01 	vstr	s15, [r7, #4]
 8002702:	793b      	ldrb	r3, [r7, #4]
 8002704:	b2da      	uxtb	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002712:	eeb0 0a67 	vmov.f32	s0, s15
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f7ff f8ac 	bl	8001874 <_ZN5L647023L6470_Step_s_2_IntSpeedEf>
 800271c:	4603      	mov	r3, r0
 800271e:	461a      	mov	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800272c:	eeb0 0a67 	vmov.f32	s0, s15
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f7ff f8c5 	bl	80018c0 <_ZN5L647020L6470_s_Step_2_StSlpEf>
 8002736:	4603      	mov	r3, r0
 8002738:	461a      	mov	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002746:	eeb0 0a67 	vmov.f32	s0, s15
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f7ff f8e0 	bl	8001910 <_ZN5L647023L6470_s_Step_2_FnSlpAccEf>
 8002750:	4603      	mov	r3, r0
 8002752:	461a      	mov	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002760:	eeb0 0a67 	vmov.f32	s0, s15
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f7ff f8fb 	bl	8001960 <_ZN5L647023L6470_s_Step_2_FnSlpDecEf>
 800276a:	4603      	mov	r3, r0
 800276c:	461a      	mov	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002786:	eeb0 0a67 	vmov.f32	s0, s15
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f7ff f910 	bl	80019b0 <_ZN5L647016L6470_mA_2_OcdThEf>
 8002790:	4603      	mov	r3, r0
 8002792:	461a      	mov	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80027a0:	eeb0 0a67 	vmov.f32	s0, s15
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f7ff f955 	bl	8001a54 <_ZN5L647018L6470_mA_2_StallThEf>
 80027aa:	4603      	mov	r3, r0
 80027ac:	461a      	mov	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b

  /* Write the L6470 registers with the prepared data */
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027de:	461a      	mov	r2, r3
 80027e0:	2104      	movs	r1, #4
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f7ff f988 	bl	8001af8 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80027ee:	461a      	mov	r2, r3
 80027f0:	2105      	movs	r1, #5
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f7ff f980 	bl	8001af8 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80027fe:	461a      	mov	r2, r3
 8002800:	2106      	movs	r1, #6
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f7ff f978 	bl	8001af8 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800280e:	461a      	mov	r2, r3
 8002810:	2107      	movs	r1, #7
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f7ff f970 	bl	8001af8 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800281e:	461a      	mov	r2, r3
 8002820:	2108      	movs	r1, #8
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f7ff f968 	bl	8001af8 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800282e:	461a      	mov	r2, r3
 8002830:	2109      	movs	r1, #9
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f7ff f960 	bl	8001af8 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 800283e:	461a      	mov	r2, r3
 8002840:	210a      	movs	r1, #10
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f7ff f958 	bl	8001af8 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800284e:	461a      	mov	r2, r3
 8002850:	210b      	movs	r1, #11
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f7ff f950 	bl	8001af8 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800285e:	461a      	mov	r2, r3
 8002860:	210c      	movs	r1, #12
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f7ff f948 	bl	8001af8 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800286e:	461a      	mov	r2, r3
 8002870:	210d      	movs	r1, #13
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f7ff f940 	bl	8001af8 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800287e:	461a      	mov	r2, r3
 8002880:	210e      	movs	r1, #14
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f7ff f938 	bl	8001af8 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800288e:	461a      	mov	r2, r3
 8002890:	210f      	movs	r1, #15
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f7ff f930 	bl	8001af8 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800289e:	461a      	mov	r2, r3
 80028a0:	2110      	movs	r1, #16
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f7ff f928 	bl	8001af8 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80028ae:	461a      	mov	r2, r3
 80028b0:	2111      	movs	r1, #17
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f7ff f920 	bl	8001af8 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80028be:	461a      	mov	r2, r3
 80028c0:	2113      	movs	r1, #19
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f7ff f918 	bl	8001af8 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 80028ce:	461a      	mov	r2, r3
 80028d0:	2114      	movs	r1, #20
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f7ff f910 	bl	8001af8 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80028de:	461a      	mov	r2, r3
 80028e0:	2116      	movs	r1, #22
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f7ff f908 	bl	8001af8 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80028ee:	461a      	mov	r2, r3
 80028f0:	2117      	movs	r1, #23
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f7ff f900 	bl	8001af8 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	334c      	adds	r3, #76	; 0x4c
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	f892 205b 	ldrb.w	r2, [r2, #91]	; 0x5b
 8002906:	4611      	mov	r1, r2
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	4798      	blx	r3
 800290c:	4603      	mov	r3, r0
 800290e:	f083 0301 	eor.w	r3, r3, #1
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <_ZN5L647012L6470_ConfigEPv+0x360>
    return COMPONENT_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e000      	b.n	800291e <_ZN5L647012L6470_ConfigEPv+0x362>
  
  return COMPONENT_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	43800000 	.word	0x43800000

0800292c <_ZN9ComponentD1Ev>:
    virtual int read_id(uint8_t *id) = 0;

    /**
     * @brief Destructor.
     */
    virtual ~Component() {};
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	4a04      	ldr	r2, [pc, #16]	; (8002948 <_ZN9ComponentD1Ev+0x1c>)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4618      	mov	r0, r3
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	0800f4c8 	.word	0x0800f4c8

0800294c <_ZN9ComponentD0Ev>:
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f7ff ffe9 	bl	800292c <_ZN9ComponentD1Ev>
 800295a:	2104      	movs	r1, #4
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f009 fbc5 	bl	800c0ec <_ZdlPvj>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <_ZN12StepperMotorD1Ev>:
    virtual void wait_while_active(void) = 0;

    /**
     * @brief Destructor.
     */
    virtual ~StepperMotor() {};
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	4a05      	ldr	r2, [pc, #20]	; (800298c <_ZN12StepperMotorD1Ev+0x20>)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff ffd5 	bl	800292c <_ZN9ComponentD1Ev>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4618      	mov	r0, r3
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	0800f448 	.word	0x0800f448

08002990 <_ZN12StepperMotorD0Ev>:
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff ffe7 	bl	800296c <_ZN12StepperMotorD1Ev>
 800299e:	2104      	movs	r1, #4
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f009 fba3 	bl	800c0ec <_ZdlPvj>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4618      	mov	r0, r3
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <_ZN9ComponentC1Ev>:
class Component {
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	4a04      	ldr	r2, [pc, #16]	; (80029cc <_ZN9ComponentC1Ev+0x1c>)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4618      	mov	r0, r3
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	0800f4c8 	.word	0x0800f4c8

080029d0 <_ZN12StepperMotorC1Ev>:
class StepperMotor : public Component {
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff ffe8 	bl	80029b0 <_ZN9ComponentC1Ev>
 80029e0:	4a03      	ldr	r2, [pc, #12]	; (80029f0 <_ZN12StepperMotorC1Ev+0x20>)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4618      	mov	r0, r3
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	0800f448 	.word	0x0800f448

080029f4 <_ZN5L6470C1EP12GPIO_TypeDeftS1_tP19__SPI_HandleTypeDef>:
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : StepperMotor(), standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	603b      	str	r3, [r7, #0]
 8002a00:	4613      	mov	r3, r2
 8002a02:	80fb      	strh	r3, [r7, #6]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff ffe2 	bl	80029d0 <_ZN12StepperMotorC1Ev>
 8002a0c:	4a22      	ldr	r2, [pc, #136]	; (8002a98 <_ZN5L6470C1EP12GPIO_TypeDeftS1_tP19__SPI_HandleTypeDef+0xa4>)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	605a      	str	r2, [r3, #4]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	88fa      	ldrh	r2, [r7, #6]
 8002a1c:	811a      	strh	r2, [r3, #8]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	60da      	str	r2, [r3, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8b3a      	ldrh	r2, [r7, #24]
 8002a28:	821a      	strh	r2, [r3, #16]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	69fa      	ldr	r2, [r7, #28]
 8002a2e:	615a      	str	r2, [r3, #20]
        L6470_Register = &_L6470_Register[0];
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4a1a      	ldr	r2, [pc, #104]	; (8002a9c <_ZN5L6470C1EP12GPIO_TypeDeftS1_tP19__SPI_HandleTypeDef+0xa8>)
 8002a34:	61da      	str	r2, [r3, #28]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4a19      	ldr	r2, [pc, #100]	; (8002aa0 <_ZN5L6470C1EP12GPIO_TypeDeftS1_tP19__SPI_HandleTypeDef+0xac>)
 8002a3a:	621a      	str	r2, [r3, #32]
        L6470_Direction = &_L6470_Direction[0];
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4a19      	ldr	r2, [pc, #100]	; (8002aa4 <_ZN5L6470C1EP12GPIO_TypeDeftS1_tP19__SPI_HandleTypeDef+0xb0>)
 8002a40:	625a      	str	r2, [r3, #36]	; 0x24
        L6470_ACT = &_L6470_ACT[0];
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	4a18      	ldr	r2, [pc, #96]	; (8002aa8 <_ZN5L6470C1EP12GPIO_TypeDeftS1_tP19__SPI_HandleTypeDef+0xb4>)
 8002a46:	629a      	str	r2, [r3, #40]	; 0x28
        pL6470_StatusRegister = &L6470_StatusRegister;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	631a      	str	r2, [r3, #48]	; 0x30
        prepared_action = PREPARED_NO_ACTION;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        L6470_Id = number_of_devices++;
 8002a5a:	4b14      	ldr	r3, [pc, #80]	; (8002aac <_ZN5L6470C1EP12GPIO_TypeDeftS1_tP19__SPI_HandleTypeDef+0xb8>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	1c5a      	adds	r2, r3, #1
 8002a60:	b2d1      	uxtb	r1, r2
 8002a62:	4a12      	ldr	r2, [pc, #72]	; (8002aac <_ZN5L6470C1EP12GPIO_TypeDeftS1_tP19__SPI_HandleTypeDef+0xb8>)
 8002a64:	7011      	strb	r1, [r2, #0]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	7653      	strb	r3, [r2, #25]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 8002a6a:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <_ZN5L6470C1EP12GPIO_TypeDeftS1_tP19__SPI_HandleTypeDef+0xbc>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 8002a70:	2220      	movs	r2, #32
 8002a72:	2100      	movs	r1, #0
 8002a74:	480f      	ldr	r0, [pc, #60]	; (8002ab4 <_ZN5L6470C1EP12GPIO_TypeDeftS1_tP19__SPI_HandleTypeDef+0xc0>)
 8002a76:	f00a fa54 	bl	800cf22 <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002a7a:	2208      	movs	r2, #8
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	480e      	ldr	r0, [pc, #56]	; (8002ab8 <_ZN5L6470C1EP12GPIO_TypeDeftS1_tP19__SPI_HandleTypeDef+0xc4>)
 8002a80:	f00a fa4f 	bl	800cf22 <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002a84:	2208      	movs	r2, #8
 8002a86:	2100      	movs	r1, #0
 8002a88:	480c      	ldr	r0, [pc, #48]	; (8002abc <_ZN5L6470C1EP12GPIO_TypeDeftS1_tP19__SPI_HandleTypeDef+0xc8>)
 8002a8a:	f00a fa4a 	bl	800cf22 <memset>
    }
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	0800f31c 	.word	0x0800f31c
 8002a9c:	0800efe8 	.word	0x0800efe8
 8002aa0:	0800f1dc 	.word	0x0800f1dc
 8002aa4:	0800f2e8 	.word	0x0800f2e8
 8002aa8:	0800f2fc 	.word	0x0800f2fc
 8002aac:	200002a0 	.word	0x200002a0
 8002ab0:	200002a1 	.word	0x200002a1
 8002ab4:	200002a4 	.word	0x200002a4
 8002ab8:	200002c4 	.word	0x200002c4
 8002abc:	200002cc 	.word	0x200002cc

08002ac0 <_ZN5L6470D1Ev>:
    virtual ~L6470(void) {}
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	4a05      	ldr	r2, [pc, #20]	; (8002ae0 <_ZN5L6470D1Ev+0x20>)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff ff4b 	bl	800296c <_ZN12StepperMotorD1Ev>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	0800f31c 	.word	0x0800f31c

08002ae4 <_ZN5L6470D0Ev>:
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f7ff ffe7 	bl	8002ac0 <_ZN5L6470D1Ev>
 8002af2:	2168      	movs	r1, #104	; 0x68
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f009 faf9 	bl	800c0ec <_ZdlPvj>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4618      	mov	r0, r3
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <_ZN5L64704initEPv>:
    virtual int init(void *init)
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
        return (int) L6470_Config((void *) init);
 8002b0e:	6839      	ldr	r1, [r7, #0]
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff fd53 	bl	80025bc <_ZN5L647012L6470_ConfigEPv>
 8002b16:	4603      	mov	r3, r0
    }
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <_ZN5L64707read_idEPh>:
    virtual int read_id(uint8_t *id)
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
        return (int) 0;
 8002b2a:	2300      	movs	r3, #0
    }
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <_ZN5L647010get_statusEv>:
    virtual unsigned int get_status(void)
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
        return (unsigned int) L6470_GetStatus();
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7ff fa57 	bl	8001ff4 <_ZN5L647015L6470_GetStatusEv>
 8002b46:	4603      	mov	r3, r0
    }
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <_ZN5L647013get_parameterEj>:
    virtual unsigned int get_parameter(unsigned int parameter)
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	4619      	mov	r1, r3
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7fe ffef 	bl	8001b44 <_ZN5L647014L6470_GetParamE14eL6470_RegId_t>
 8002b66:	4603      	mov	r3, r0
    }
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <_ZN5L647012get_positionEv>:
    virtual signed int get_position(void)
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8002b78:	2100      	movs	r1, #0
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7fe ffe2 	bl	8001b44 <_ZN5L647014L6470_GetParamE14eL6470_RegId_t>
 8002b80:	4603      	mov	r3, r0
 8002b82:	4619      	mov	r1, r3
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7fe fcb7 	bl	80014f8 <_ZN5L647023L6470_AbsPos_2_PositionEm>
 8002b8a:	4603      	mov	r3, r0
    }
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <_ZN5L64708get_markEv>:
    virtual signed int get_mark(void)
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 8002b9c:	2102      	movs	r1, #2
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7fe ffd0 	bl	8001b44 <_ZN5L647014L6470_GetParamE14eL6470_RegId_t>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f7fe fca5 	bl	80014f8 <_ZN5L647023L6470_AbsPos_2_PositionEm>
 8002bae:	4603      	mov	r3, r0
    }
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <_ZN5L64709get_speedEv>:
    virtual unsigned int get_speed(void)
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 8002bc0:	2103      	movs	r1, #3
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7fe ffbe 	bl	8001b44 <_ZN5L647014L6470_GetParamE14eL6470_RegId_t>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	4619      	mov	r1, r3
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f7fe fcc9 	bl	8001564 <_ZN5L647020L6470_Speed_2_Step_sEm>
 8002bd2:	eef0 7a40 	vmov.f32	s15, s0
 8002bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 fe3a 	bl	8003854 <_ZN5L647011L6470_roundEf>
 8002be0:	4603      	mov	r3, r0
    }
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <_ZN5L647013get_max_speedEv>:
    virtual unsigned int get_max_speed(void)
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 8002bf2:	2106      	movs	r1, #6
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7fe ffa5 	bl	8001b44 <_ZN5L647014L6470_GetParamE14eL6470_RegId_t>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	4619      	mov	r1, r3
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7fe fd7d 	bl	8001700 <_ZN5L647023L6470_MaxSpeed_2_Step_sEt>
 8002c06:	eef0 7a40 	vmov.f32	s15, s0
 8002c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 fe20 	bl	8003854 <_ZN5L647011L6470_roundEf>
 8002c14:	4603      	mov	r3, r0
    }
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <_ZN5L647013get_min_speedEv>:
    virtual unsigned int get_min_speed(void)
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 8002c26:	2107      	movs	r1, #7
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f7fe ff8b 	bl	8001b44 <_ZN5L647014L6470_GetParamE14eL6470_RegId_t>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	4619      	mov	r1, r3
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7fe fdab 	bl	8001790 <_ZN5L647023L6470_MinSpeed_2_Step_sEt>
 8002c3a:	eef0 7a40 	vmov.f32	s15, s0
 8002c3e:	eeb0 0a67 	vmov.f32	s0, s15
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 fe06 	bl	8003854 <_ZN5L647011L6470_roundEf>
 8002c48:	4603      	mov	r3, r0
    }
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <_ZN5L647016get_accelerationEv>:
    virtual unsigned int get_acceleration(void)
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b082      	sub	sp, #8
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 8002c5a:	2104      	movs	r1, #4
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f7fe ff71 	bl	8001b44 <_ZN5L647014L6470_GetParamE14eL6470_RegId_t>
 8002c62:	4603      	mov	r3, r0
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	4619      	mov	r1, r3
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7fe fcb9 	bl	80015e0 <_ZN5L647019L6470_Acc_2_Step_s2Et>
 8002c6e:	eef0 7a40 	vmov.f32	s15, s0
 8002c72:	eeb0 0a67 	vmov.f32	s0, s15
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 fdec 	bl	8003854 <_ZN5L647011L6470_roundEf>
 8002c7c:	4603      	mov	r3, r0
    }
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <_ZN5L647016get_decelerationEv>:
    virtual unsigned int get_deceleration(void)
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 8002c8e:	2105      	movs	r1, #5
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7fe ff57 	bl	8001b44 <_ZN5L647014L6470_GetParamE14eL6470_RegId_t>
 8002c96:	4603      	mov	r3, r0
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f7fe fce7 	bl	8001670 <_ZN5L647019L6470_Dec_2_Step_s2Et>
 8002ca2:	eef0 7a40 	vmov.f32	s15, s0
 8002ca6:	eeb0 0a67 	vmov.f32	s0, s15
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 fdd2 	bl	8003854 <_ZN5L647011L6470_roundEf>
 8002cb0:	4603      	mov	r3, r0
    }
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <_ZN5L647013get_directionEv>:
    virtual direction_t get_direction(void)
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b082      	sub	sp, #8
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
        return (direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8002cc2:	2104      	movs	r1, #4
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f7ff fbc5 	bl	8002454 <_ZN5L647029L6470_CheckStatusRegisterFlagEh>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <_ZN5L647013get_directionEv+0x1a>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <_ZN5L647013get_directionEv+0x1c>
 8002cd4:	2300      	movs	r3, #0
    }
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <_ZN5L647013set_parameterEjj>:
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b084      	sub	sp, #16
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	60f8      	str	r0, [r7, #12]
 8002ce6:	60b9      	str	r1, [r7, #8]
 8002ce8:	607a      	str	r2, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f7fe ff00 	bl	8001af8 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
    }
 8002cf8:	bf00      	nop
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <_ZN5L64708set_homeEv>:
    virtual void set_home(void)
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
        L6470_ResetPos();
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff f8a7 	bl	8001e5c <_ZN5L647014L6470_ResetPosEv>
    }
 8002d0e:	bf00      	nop
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <_ZN5L64708set_markEv>:
    virtual void set_mark(void)
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8002d1e:	2100      	movs	r1, #0
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7fe ff0f 	bl	8001b44 <_ZN5L647014L6470_GetParamE14eL6470_RegId_t>
 8002d26:	4603      	mov	r3, r0
 8002d28:	461a      	mov	r2, r3
 8002d2a:	2102      	movs	r1, #2
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7fe fee3 	bl	8001af8 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
    }
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <_ZN5L64708set_markEi>:
    virtual void set_mark(signed int position)
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
 8002d42:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8002d44:	6839      	ldr	r1, [r7, #0]
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7fe fbea 	bl	8001520 <_ZN5L647023L6470_Position_2_AbsPosEl>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	461a      	mov	r2, r3
 8002d50:	2102      	movs	r1, #2
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7fe fed0 	bl	8001af8 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
    }
 8002d58:	bf00      	nop
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <_ZN5L647013set_max_speedEj>:
    virtual bool set_max_speed(unsigned int speed)
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	ee07 3a90 	vmov	s15, r3
 8002d70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d74:	eeb0 0a67 	vmov.f32	s0, s15
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7fe fce3 	bl	8001744 <_ZN5L647023L6470_Step_s_2_MaxSpeedEf>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	461a      	mov	r2, r3
 8002d82:	2106      	movs	r1, #6
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7fe feb7 	bl	8001af8 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
        return true;
 8002d8a:	2301      	movs	r3, #1
    }
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <_ZN5L647013set_min_speedEj>:
    virtual bool set_min_speed(unsigned int speed)
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	ee07 3a90 	vmov	s15, r3
 8002da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002da8:	eeb0 0a67 	vmov.f32	s0, s15
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f7fe fd11 	bl	80017d4 <_ZN5L647023L6470_Step_s_2_MinSpeedEf>
 8002db2:	4603      	mov	r3, r0
 8002db4:	461a      	mov	r2, r3
 8002db6:	2107      	movs	r1, #7
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f7fe fe9d 	bl	8001af8 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
        return true;
 8002dbe:	2301      	movs	r3, #1
    }
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <_ZN5L647016set_accelerationEj>:
    virtual bool set_acceleration(unsigned int acceleration)
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	ee07 3a90 	vmov	s15, r3
 8002dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ddc:	eeb0 0a67 	vmov.f32	s0, s15
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7fe fc1f 	bl	8001624 <_ZN5L647019L6470_Step_s2_2_AccEf>
 8002de6:	4603      	mov	r3, r0
 8002de8:	461a      	mov	r2, r3
 8002dea:	2104      	movs	r1, #4
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f7fe fe83 	bl	8001af8 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
        return true;
 8002df2:	2301      	movs	r3, #1
    }
 8002df4:	4618      	mov	r0, r3
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <_ZN5L647016set_decelerationEj>:
    virtual bool set_deceleration(unsigned int deceleration)
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	ee07 3a90 	vmov	s15, r3
 8002e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e10:	eeb0 0a67 	vmov.f32	s0, s15
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7fe fc4d 	bl	80016b4 <_ZN5L647019L6470_Step_s2_2_DecEf>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	2105      	movs	r1, #5
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7fe fe69 	bl	8001af8 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
        return true;
 8002e26:	2301      	movs	r3, #1
    }
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <_ZN5L647013set_step_modeEN12StepperMotor11step_mode_tE>:
    virtual bool set_step_mode(step_mode_t step_mode)
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	70fb      	strb	r3, [r7, #3]
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 8002e3c:	78fb      	ldrb	r3, [r7, #3]
 8002e3e:	2b07      	cmp	r3, #7
 8002e40:	d901      	bls.n	8002e46 <_ZN5L647013set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 8002e42:	2300      	movs	r3, #0
 8002e44:	e00c      	b.n	8002e60 <_ZN5L647013set_step_modeEN12StepperMotor11step_mode_tE+0x30>
        soft_hiz();
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	336c      	adds	r3, #108	; 0x6c
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 8002e52:	78fb      	ldrb	r3, [r7, #3]
 8002e54:	461a      	mov	r2, r3
 8002e56:	2115      	movs	r1, #21
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7fe fe4d 	bl	8001af8 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
        return true;
 8002e5e:	2301      	movs	r3, #1
    }
 8002e60:	4618      	mov	r0, r3
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <_ZN5L64705go_toEi>:
    virtual void go_to(signed int position)
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8002e72:	6839      	ldr	r1, [r7, #0]
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f7fe fb53 	bl	8001520 <_ZN5L647023L6470_Position_2_AbsPosEl>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7fe ff06 	bl	8001c90 <_ZN5L647010L6470_GoToEm>
    }
 8002e84:	bf00      	nop
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <_ZN5L64705go_toEiN12StepperMotor11direction_tE>:
    virtual void go_to(signed int position, direction_t direction)
 8002e8c:	b590      	push	{r4, r7, lr}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	4613      	mov	r3, r2
 8002e98:	71fb      	strb	r3, [r7, #7]
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8002e9a:	79fb      	ldrb	r3, [r7, #7]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d101      	bne.n	8002ea4 <_ZN5L64705go_toEiN12StepperMotor11direction_tE+0x18>
 8002ea0:	2401      	movs	r4, #1
 8002ea2:	e000      	b.n	8002ea6 <_ZN5L64705go_toEiN12StepperMotor11direction_tE+0x1a>
 8002ea4:	2400      	movs	r4, #0
 8002ea6:	68b9      	ldr	r1, [r7, #8]
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f7fe fb39 	bl	8001520 <_ZN5L647023L6470_Position_2_AbsPosEl>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	4621      	mov	r1, r4
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f7fe ff13 	bl	8001ce0 <_ZN5L647013L6470_GoToDirE14eL6470_DirId_tm>
    }
 8002eba:	bf00      	nop
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd90      	pop	{r4, r7, pc}

08002ec2 <_ZN5L64707go_homeEv>:
    virtual void go_home(void)
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b082      	sub	sp, #8
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
        L6470_GoHome();
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7fe ff82 	bl	8001dd4 <_ZN5L647012L6470_GoHomeEv>
    }
 8002ed0:	bf00      	nop
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <_ZN5L64707go_markEv>:
    virtual void go_mark(void)
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
        L6470_GoMark();
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7fe ff99 	bl	8001e18 <_ZN5L647012L6470_GoMarkEv>
    }
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <_ZN5L64708go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void go_until(eL6470_ActId_t action, direction_t direction, unsigned int speed)
 8002eee:	b590      	push	{r4, r7, lr}
 8002ef0:	b085      	sub	sp, #20
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	60f8      	str	r0, [r7, #12]
 8002ef6:	607b      	str	r3, [r7, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	72fb      	strb	r3, [r7, #11]
 8002efc:	4613      	mov	r3, r2
 8002efe:	72bb      	strb	r3, [r7, #10]
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8002f00:	7abb      	ldrb	r3, [r7, #10]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <_ZN5L64708go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x1c>
 8002f06:	2401      	movs	r4, #1
 8002f08:	e000      	b.n	8002f0c <_ZN5L64708go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x1e>
 8002f0a:	2400      	movs	r4, #0
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	ee07 3a90 	vmov	s15, r3
 8002f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f16:	eeb0 0a67 	vmov.f32	s0, s15
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f7fe fb3a 	bl	8001594 <_ZN5L647020L6470_Step_s_2_SpeedEf>
 8002f20:	4603      	mov	r3, r0
 8002f22:	7af9      	ldrb	r1, [r7, #11]
 8002f24:	4622      	mov	r2, r4
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f7fe ff04 	bl	8001d34 <_ZN5L647013L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>
    }
 8002f2c:	bf00      	nop
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd90      	pop	{r4, r7, pc}

08002f34 <_ZN5L64703runEN12StepperMotor11direction_tE>:
    virtual void run(direction_t direction)
 8002f34:	b590      	push	{r4, r7, lr}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	70fb      	strb	r3, [r7, #3]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8002f40:	78fb      	ldrb	r3, [r7, #3]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <_ZN5L64703runEN12StepperMotor11direction_tE+0x16>
 8002f46:	2401      	movs	r4, #1
 8002f48:	e000      	b.n	8002f4c <_ZN5L64703runEN12StepperMotor11direction_tE+0x18>
 8002f4a:	2400      	movs	r4, #0
 8002f4c:	2106      	movs	r1, #6
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7fe fdf8 	bl	8001b44 <_ZN5L647014L6470_GetParamE14eL6470_RegId_t>
 8002f54:	4603      	mov	r3, r0
 8002f56:	461a      	mov	r2, r3
 8002f58:	4621      	mov	r1, r4
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7fe fe28 	bl	8001bb0 <_ZN5L64709L6470_RunE14eL6470_DirId_tm>
    }
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd90      	pop	{r4, r7, pc}

08002f68 <_ZN5L64703runEN12StepperMotor11direction_tEj>:
    virtual void run(direction_t direction, unsigned int speed)
 8002f68:	b590      	push	{r4, r7, lr}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	460b      	mov	r3, r1
 8002f72:	607a      	str	r2, [r7, #4]
 8002f74:	72fb      	strb	r3, [r7, #11]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8002f76:	7afb      	ldrb	r3, [r7, #11]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <_ZN5L64703runEN12StepperMotor11direction_tEj+0x18>
 8002f7c:	2401      	movs	r4, #1
 8002f7e:	e000      	b.n	8002f82 <_ZN5L64703runEN12StepperMotor11direction_tEj+0x1a>
 8002f80:	2400      	movs	r4, #0
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	ee07 3a90 	vmov	s15, r3
 8002f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f8c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f7fe faff 	bl	8001594 <_ZN5L647020L6470_Step_s_2_SpeedEf>
 8002f96:	4603      	mov	r3, r0
 8002f98:	461a      	mov	r2, r3
 8002f9a:	4621      	mov	r1, r4
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f7fe fe07 	bl	8001bb0 <_ZN5L64709L6470_RunE14eL6470_DirId_tm>
    }
 8002fa2:	bf00      	nop
 8002fa4:	3714      	adds	r7, #20
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd90      	pop	{r4, r7, pc}

08002faa <_ZN5L64704moveEN12StepperMotor11direction_tEj>:
    virtual void move(direction_t direction, unsigned int steps)
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b084      	sub	sp, #16
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	607a      	str	r2, [r7, #4]
 8002fb6:	72fb      	strb	r3, [r7, #11]
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8002fb8:	7afb      	ldrb	r3, [r7, #11]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d101      	bne.n	8002fc2 <_ZN5L64704moveEN12StepperMotor11direction_tEj+0x18>
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e000      	b.n	8002fc4 <_ZN5L64704moveEN12StepperMotor11direction_tEj+0x1a>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f7fe fe3b 	bl	8001c44 <_ZN5L647010L6470_MoveE14eL6470_DirId_tm>
    }
 8002fce:	bf00      	nop
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <_ZN5L64709soft_stopEv>:
    virtual void soft_stop(void)
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b082      	sub	sp, #8
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
        L6470_SoftStop();
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7fe ff80 	bl	8001ee4 <_ZN5L647014L6470_SoftStopEv>
    }
 8002fe4:	bf00      	nop
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <_ZN5L64709hard_stopEv>:
    virtual void hard_stop(void)
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
        L6470_HardStop();
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7fe ff97 	bl	8001f28 <_ZN5L647014L6470_HardStopEv>
    }
 8002ffa:	bf00      	nop
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <_ZN5L64708soft_hizEv>:
    virtual void soft_hiz(void)
 8003002:	b580      	push	{r7, lr}
 8003004:	b082      	sub	sp, #8
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
        L6470_SoftHiZ();
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7fe ffae 	bl	8001f6c <_ZN5L647013L6470_SoftHiZEv>
    }
 8003010:	bf00      	nop
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <_ZN5L64708hard_hizEv>:
    virtual void hard_hiz(void)
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
        L6470_HardHiZ();
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7fe ffc5 	bl	8001fb0 <_ZN5L647013L6470_HardHiZEv>
    }
 8003026:	bf00      	nop
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <_ZN5L647017wait_while_activeEv>:
    virtual void wait_while_active(void)
 800302e:	b580      	push	{r7, lr}
 8003030:	b082      	sub	sp, #8
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 8003036:	bf00      	nop
 8003038:	2101      	movs	r1, #1
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7ff fa0a 	bl	8002454 <_ZN5L647029L6470_CheckStatusRegisterFlagEh>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	bf0c      	ite	eq
 8003046:	2301      	moveq	r3, #1
 8003048:	2300      	movne	r3, #0
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1f3      	bne.n	8003038 <_ZN5L647017wait_while_activeEv+0xa>
    }
 8003050:	bf00      	nop
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <_ZN5L647010step_clockEN12StepperMotor11direction_tE>:
    virtual void step_clock(direction_t direction)
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	460b      	mov	r3, r1
 8003064:	70fb      	strb	r3, [r7, #3]
        soft_hiz();
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	336c      	adds	r3, #108	; 0x6c
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8003072:	78fb      	ldrb	r3, [r7, #3]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <_ZN5L647010step_clockEN12StepperMotor11direction_tE+0x22>
 8003078:	2301      	movs	r3, #1
 800307a:	e000      	b.n	800307e <_ZN5L647010step_clockEN12StepperMotor11direction_tE+0x24>
 800307c:	2300      	movs	r3, #0
 800307e:	4619      	mov	r1, r3
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7fe fdbb 	bl	8001bfc <_ZN5L647015L6470_StepClockE14eL6470_DirId_t>
    }
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <_ZN5L647010release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void release_sw(eL6470_ActId_t action, direction_t direction)
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	460b      	mov	r3, r1
 8003098:	70fb      	strb	r3, [r7, #3]
 800309a:	4613      	mov	r3, r2
 800309c:	70bb      	strb	r3, [r7, #2]
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 800309e:	78bb      	ldrb	r3, [r7, #2]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d101      	bne.n	80030a8 <_ZN5L647010release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x1a>
 80030a4:	2201      	movs	r2, #1
 80030a6:	e000      	b.n	80030aa <_ZN5L647010release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x1c>
 80030a8:	2200      	movs	r2, #0
 80030aa:	78fb      	ldrb	r3, [r7, #3]
 80030ac:	4619      	mov	r1, r3
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7fe fe68 	bl	8001d84 <_ZN5L647015L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>
    }
 80030b4:	bf00      	nop
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <_ZN5L647012reset_deviceEv>:
    virtual void reset_device(void)
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
        L6470_ResetDevice();
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f7fe feeb 	bl	8001ea0 <_ZN5L647017L6470_ResetDeviceEv>
    }
 80030ca:	bf00      	nop
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <_ZN5L647018prepare_get_statusEv>:
    virtual void prepare_get_status(void)
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetStatus();
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7ff f92a 	bl	8002334 <_ZN5L647022L6470_PrepareGetStatusEv>
        prepared_action = PREPARED_NO_ACTION;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 80030e8:	bf00      	nop
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <_ZN5L647021prepare_get_parameterEj>:
    virtual void prepare_get_parameter(unsigned int parameter)
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	4619      	mov	r1, r3
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7fe ffb9 	bl	8002078 <_ZN5L647021L6470_PrepareGetParamE14eL6470_RegId_t>
        prepared_action = PREPARED_NO_ACTION;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 800310e:	bf00      	nop
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <_ZN5L647020prepare_get_positionEv>:
    virtual void prepare_get_position(void)
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 800311e:	2100      	movs	r1, #0
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7fe ffa9 	bl	8002078 <_ZN5L647021L6470_PrepareGetParamE14eL6470_RegId_t>
        prepared_action = PREPARED_GET_POSITION;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 800312e:	bf00      	nop
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <_ZN5L647016prepare_get_markEv>:
    virtual void prepare_get_mark(void)
 8003136:	b580      	push	{r7, lr}
 8003138:	b082      	sub	sp, #8
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 800313e:	2102      	movs	r1, #2
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7fe ff99 	bl	8002078 <_ZN5L647021L6470_PrepareGetParamE14eL6470_RegId_t>
        prepared_action = PREPARED_GET_MARK;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2202      	movs	r2, #2
 800314a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 800314e:	bf00      	nop
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <_ZN5L647017prepare_get_speedEv>:
    virtual void prepare_get_speed(void)
 8003156:	b580      	push	{r7, lr}
 8003158:	b082      	sub	sp, #8
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 800315e:	2103      	movs	r1, #3
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7fe ff89 	bl	8002078 <_ZN5L647021L6470_PrepareGetParamE14eL6470_RegId_t>
        prepared_action = PREPARED_GET_SPEED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2203      	movs	r2, #3
 800316a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <_ZN5L647021prepare_get_max_speedEv>:
    virtual void prepare_get_max_speed(void)
 8003176:	b580      	push	{r7, lr}
 8003178:	b082      	sub	sp, #8
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 800317e:	2106      	movs	r1, #6
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7fe ff79 	bl	8002078 <_ZN5L647021L6470_PrepareGetParamE14eL6470_RegId_t>
        prepared_action = PREPARED_GET_MAX_SPEED;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2204      	movs	r2, #4
 800318a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <_ZN5L647021prepare_get_min_speedEv>:
    virtual void prepare_get_min_speed(void)
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 800319e:	2107      	movs	r1, #7
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f7fe ff69 	bl	8002078 <_ZN5L647021L6470_PrepareGetParamE14eL6470_RegId_t>
        prepared_action = PREPARED_GET_MIN_SPEED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2205      	movs	r2, #5
 80031aa:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 80031ae:	bf00      	nop
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <_ZN5L647024prepare_get_accelerationEv>:
    virtual void prepare_get_acceleration(void)
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b082      	sub	sp, #8
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 80031be:	2104      	movs	r1, #4
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7fe ff59 	bl	8002078 <_ZN5L647021L6470_PrepareGetParamE14eL6470_RegId_t>
        prepared_action = PREPARED_GET_ACCELERATION;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2206      	movs	r2, #6
 80031ca:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <_ZN5L647024prepare_get_decelerationEv>:
    virtual void prepare_get_deceleration(void)
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 80031de:	2105      	movs	r1, #5
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7fe ff49 	bl	8002078 <_ZN5L647021L6470_PrepareGetParamE14eL6470_RegId_t>
        prepared_action = PREPARED_GET_DECELERATION;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2207      	movs	r2, #7
 80031ea:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
	...

080031f8 <_ZN5L647021prepare_get_directionEv>:
    virtual void prepare_get_direction(void)
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
        if (!L6470_DaisyChain_HalfPrepared) {
 8003200:	4b09      	ldr	r3, [pc, #36]	; (8003228 <_ZN5L647021prepare_get_directionEv+0x30>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d106      	bne.n	8003216 <_ZN5L647021prepare_get_directionEv+0x1e>
            L6470_DaisyChain_HalfPrepared = ONE_F;
 8003208:	4b07      	ldr	r3, [pc, #28]	; (8003228 <_ZN5L647021prepare_get_directionEv+0x30>)
 800320a:	2201      	movs	r2, #1
 800320c:	701a      	strb	r2, [r3, #0]
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 800320e:	4907      	ldr	r1, [pc, #28]	; (800322c <_ZN5L647021prepare_get_directionEv+0x34>)
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7fd fed3 	bl	8000fbc <_ZN5L647020L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>
        prepared_action = PREPARED_GET_DIRECTION;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2208      	movs	r2, #8
 800321a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	200002a1 	.word	0x200002a1
 800322c:	200002a4 	.word	0x200002a4

08003230 <_ZN5L647021prepare_set_parameterEjj>:
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	b2db      	uxtb	r3, r3
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	4619      	mov	r1, r3
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f7fe feff 	bl	8002048 <_ZN5L647021L6470_PrepareSetParamE14eL6470_RegId_tm>
        prepared_action = PREPARED_NO_ACTION;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 8003252:	bf00      	nop
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <_ZN5L647016prepare_set_homeEv>:
    virtual void prepare_set_home(void)
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetPos();
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7fe ffee 	bl	8002244 <_ZN5L647021L6470_PrepareResetPosEv>
        prepared_action = PREPARED_NO_ACTION;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 8003270:	bf00      	nop
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <_ZN5L647016prepare_set_markEv>:
    virtual void prepare_set_mark(void)
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 8003280:	2200      	movs	r2, #0
 8003282:	2102      	movs	r1, #2
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f7fe fedf 	bl	8002048 <_ZN5L647021L6470_PrepareSetParamE14eL6470_RegId_tm>
        prepared_action = PREPARED_SET_MARK;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2209      	movs	r2, #9
 800328e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 8003292:	bf00      	nop
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <_ZN5L647016prepare_set_markEi>:
    virtual void prepare_set_mark(signed int position)
 800329a:	b580      	push	{r7, lr}
 800329c:	b082      	sub	sp, #8
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80032a4:	6839      	ldr	r1, [r7, #0]
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7fe f93a 	bl	8001520 <_ZN5L647023L6470_Position_2_AbsPosEl>
 80032ac:	4603      	mov	r3, r0
 80032ae:	461a      	mov	r2, r3
 80032b0:	2102      	movs	r1, #2
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7fe fec8 	bl	8002048 <_ZN5L647021L6470_PrepareSetParamE14eL6470_RegId_tm>
        prepared_action = PREPARED_NO_ACTION;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 80032c0:	bf00      	nop
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <_ZN5L647017prepare_set_speedEj>:
    virtual void prepare_set_speed(unsigned int speed)
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	ee07 3a90 	vmov	s15, r3
 80032d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032dc:	eeb0 0a67 	vmov.f32	s0, s15
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7fe f957 	bl	8001594 <_ZN5L647020L6470_Step_s_2_SpeedEf>
 80032e6:	4603      	mov	r3, r0
 80032e8:	461a      	mov	r2, r3
 80032ea:	2103      	movs	r1, #3
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7fe feab 	bl	8002048 <_ZN5L647021L6470_PrepareSetParamE14eL6470_RegId_tm>
        prepared_action = PREPARED_NO_ACTION;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 80032fa:	bf00      	nop
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <_ZN5L647021prepare_set_max_speedEj>:
    virtual void prepare_set_max_speed(unsigned int speed)
 8003302:	b580      	push	{r7, lr}
 8003304:	b082      	sub	sp, #8
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	ee07 3a90 	vmov	s15, r3
 8003312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003316:	eeb0 0a67 	vmov.f32	s0, s15
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7fe fa12 	bl	8001744 <_ZN5L647023L6470_Step_s_2_MaxSpeedEf>
 8003320:	4603      	mov	r3, r0
 8003322:	461a      	mov	r2, r3
 8003324:	2106      	movs	r1, #6
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7fe fe8e 	bl	8002048 <_ZN5L647021L6470_PrepareSetParamE14eL6470_RegId_tm>
        prepared_action = PREPARED_NO_ACTION;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 8003334:	bf00      	nop
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <_ZN5L647021prepare_set_min_speedEj>:
    virtual void prepare_set_min_speed(unsigned int speed)
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	ee07 3a90 	vmov	s15, r3
 800334c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003350:	eeb0 0a67 	vmov.f32	s0, s15
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7fe fa3d 	bl	80017d4 <_ZN5L647023L6470_Step_s_2_MinSpeedEf>
 800335a:	4603      	mov	r3, r0
 800335c:	461a      	mov	r2, r3
 800335e:	2107      	movs	r1, #7
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7fe fe71 	bl	8002048 <_ZN5L647021L6470_PrepareSetParamE14eL6470_RegId_tm>
        prepared_action = PREPARED_NO_ACTION;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 800336e:	bf00      	nop
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <_ZN5L647024prepare_set_accelerationEj>:
    virtual void prepare_set_acceleration(unsigned int acceleration)
 8003376:	b580      	push	{r7, lr}
 8003378:	b082      	sub	sp, #8
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
 800337e:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	ee07 3a90 	vmov	s15, r3
 8003386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800338a:	eeb0 0a67 	vmov.f32	s0, s15
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7fe f948 	bl	8001624 <_ZN5L647019L6470_Step_s2_2_AccEf>
 8003394:	4603      	mov	r3, r0
 8003396:	461a      	mov	r2, r3
 8003398:	2104      	movs	r1, #4
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7fe fe54 	bl	8002048 <_ZN5L647021L6470_PrepareSetParamE14eL6470_RegId_tm>
        prepared_action = PREPARED_NO_ACTION;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 80033a8:	bf00      	nop
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <_ZN5L647024prepare_set_decelerationEj>:
    virtual void prepare_set_deceleration(unsigned int deceleration)
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	ee07 3a90 	vmov	s15, r3
 80033c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033c4:	eeb0 0a67 	vmov.f32	s0, s15
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7fe f973 	bl	80016b4 <_ZN5L647019L6470_Step_s2_2_DecEf>
 80033ce:	4603      	mov	r3, r0
 80033d0:	461a      	mov	r2, r3
 80033d2:	2105      	movs	r1, #5
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7fe fe37 	bl	8002048 <_ZN5L647021L6470_PrepareSetParamE14eL6470_RegId_tm>
        prepared_action = PREPARED_NO_ACTION;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <_ZN5L647013prepare_go_toEi>:
    virtual void prepare_go_to(signed int position)
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
 80033f2:	6039      	str	r1, [r7, #0]
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80033f4:	6839      	ldr	r1, [r7, #0]
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fe f892 	bl	8001520 <_ZN5L647023L6470_Position_2_AbsPosEl>
 80033fc:	4603      	mov	r3, r0
 80033fe:	4619      	mov	r1, r3
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7fe fe95 	bl	8002130 <_ZN5L647017L6470_PrepareGoToEm>
        prepared_action = PREPARED_NO_ACTION;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <_ZN5L647013prepare_go_toEiN12StepperMotor11direction_tE>:
    virtual void prepare_go_to(signed int position, direction_t direction)
 8003416:	b590      	push	{r4, r7, lr}
 8003418:	b085      	sub	sp, #20
 800341a:	af00      	add	r7, sp, #0
 800341c:	60f8      	str	r0, [r7, #12]
 800341e:	60b9      	str	r1, [r7, #8]
 8003420:	4613      	mov	r3, r2
 8003422:	71fb      	strb	r3, [r7, #7]
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8003424:	79fb      	ldrb	r3, [r7, #7]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <_ZN5L647013prepare_go_toEiN12StepperMotor11direction_tE+0x18>
 800342a:	2401      	movs	r4, #1
 800342c:	e000      	b.n	8003430 <_ZN5L647013prepare_go_toEiN12StepperMotor11direction_tE+0x1a>
 800342e:	2400      	movs	r4, #0
 8003430:	68b9      	ldr	r1, [r7, #8]
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f7fe f874 	bl	8001520 <_ZN5L647023L6470_Position_2_AbsPosEl>
 8003438:	4603      	mov	r3, r0
 800343a:	461a      	mov	r2, r3
 800343c:	4621      	mov	r1, r4
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f7fe fe8c 	bl	800215c <_ZN5L647020L6470_PrepareGoToDirE14eL6470_DirId_tm>
        prepared_action = PREPARED_NO_ACTION;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 800344c:	bf00      	nop
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	bd90      	pop	{r4, r7, pc}

08003454 <_ZN5L647015prepare_go_homeEv>:
    virtual void prepare_go_home(void)
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoHome();
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7fe fec9 	bl	80021f4 <_ZN5L647019L6470_PrepareGoHomeEv>
        prepared_action = PREPARED_NO_ACTION;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 800346a:	bf00      	nop
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <_ZN5L647015prepare_go_markEv>:
    virtual void prepare_go_mark(void)
 8003472:	b580      	push	{r7, lr}
 8003474:	b082      	sub	sp, #8
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoMark();
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7fe fece 	bl	800221c <_ZN5L647019L6470_PrepareGoMarkEv>
        prepared_action = PREPARED_NO_ACTION;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 8003488:	bf00      	nop
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <_ZN5L647016prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, direction_t direction, unsigned int speed)
 8003490:	b590      	push	{r4, r7, lr}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	607b      	str	r3, [r7, #4]
 800349a:	460b      	mov	r3, r1
 800349c:	72fb      	strb	r3, [r7, #11]
 800349e:	4613      	mov	r3, r2
 80034a0:	72bb      	strb	r3, [r7, #10]
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80034a2:	7abb      	ldrb	r3, [r7, #10]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d101      	bne.n	80034ac <_ZN5L647016prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x1c>
 80034a8:	2401      	movs	r4, #1
 80034aa:	e000      	b.n	80034ae <_ZN5L647016prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x1e>
 80034ac:	2400      	movs	r4, #0
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	ee07 3a90 	vmov	s15, r3
 80034b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034b8:	eeb0 0a67 	vmov.f32	s0, s15
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f7fe f869 	bl	8001594 <_ZN5L647020L6470_Step_s_2_SpeedEf>
 80034c2:	4603      	mov	r3, r0
 80034c4:	7af9      	ldrb	r1, [r7, #11]
 80034c6:	4622      	mov	r2, r4
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f7fe fe5f 	bl	800218c <_ZN5L647020L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>
        prepared_action = PREPARED_NO_ACTION;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 80034d6:	bf00      	nop
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd90      	pop	{r4, r7, pc}

080034de <_ZN5L647011prepare_runEN12StepperMotor11direction_tE>:
    virtual void prepare_run(direction_t direction)
 80034de:	b590      	push	{r4, r7, lr}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
 80034e6:	460b      	mov	r3, r1
 80034e8:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 80034ea:	78fb      	ldrb	r3, [r7, #3]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d101      	bne.n	80034f4 <_ZN5L647011prepare_runEN12StepperMotor11direction_tE+0x16>
 80034f0:	2401      	movs	r4, #1
 80034f2:	e000      	b.n	80034f6 <_ZN5L647011prepare_runEN12StepperMotor11direction_tE+0x18>
 80034f4:	2400      	movs	r4, #0
 80034f6:	2106      	movs	r1, #6
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f7fe fb23 	bl	8001b44 <_ZN5L647014L6470_GetParamE14eL6470_RegId_t>
 80034fe:	4603      	mov	r3, r0
 8003500:	461a      	mov	r2, r3
 8003502:	4621      	mov	r1, r4
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7fe fdcd 	bl	80020a4 <_ZN5L647016L6470_PrepareRunE14eL6470_DirId_tm>
        prepared_action = PREPARED_NO_ACTION;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	bd90      	pop	{r4, r7, pc}

0800351a <_ZN5L647011prepare_runEN12StepperMotor11direction_tEj>:
    virtual void prepare_run(direction_t direction, unsigned int speed)
 800351a:	b590      	push	{r4, r7, lr}
 800351c:	b085      	sub	sp, #20
 800351e:	af00      	add	r7, sp, #0
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	460b      	mov	r3, r1
 8003524:	607a      	str	r2, [r7, #4]
 8003526:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8003528:	7afb      	ldrb	r3, [r7, #11]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d101      	bne.n	8003532 <_ZN5L647011prepare_runEN12StepperMotor11direction_tEj+0x18>
 800352e:	2401      	movs	r4, #1
 8003530:	e000      	b.n	8003534 <_ZN5L647011prepare_runEN12StepperMotor11direction_tEj+0x1a>
 8003532:	2400      	movs	r4, #0
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	ee07 3a90 	vmov	s15, r3
 800353a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800353e:	eeb0 0a67 	vmov.f32	s0, s15
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f7fe f826 	bl	8001594 <_ZN5L647020L6470_Step_s_2_SpeedEf>
 8003548:	4603      	mov	r3, r0
 800354a:	461a      	mov	r2, r3
 800354c:	4621      	mov	r1, r4
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f7fe fda8 	bl	80020a4 <_ZN5L647016L6470_PrepareRunE14eL6470_DirId_tm>
        prepared_action = PREPARED_NO_ACTION;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 800355c:	bf00      	nop
 800355e:	3714      	adds	r7, #20
 8003560:	46bd      	mov	sp, r7
 8003562:	bd90      	pop	{r4, r7, pc}

08003564 <_ZN5L647012prepare_moveEN12StepperMotor11direction_tEj>:
    virtual void prepare_move(direction_t direction, unsigned int steps)
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	460b      	mov	r3, r1
 800356e:	607a      	str	r2, [r7, #4]
 8003570:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8003572:	7afb      	ldrb	r3, [r7, #11]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d101      	bne.n	800357c <_ZN5L647012prepare_moveEN12StepperMotor11direction_tEj+0x18>
 8003578:	2301      	movs	r3, #1
 800357a:	e000      	b.n	800357e <_ZN5L647012prepare_moveEN12StepperMotor11direction_tEj+0x1a>
 800357c:	2300      	movs	r3, #0
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	4619      	mov	r1, r3
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f7fe fdbc 	bl	8002100 <_ZN5L647017L6470_PrepareMoveE14eL6470_DirId_tm>
        prepared_action = PREPARED_NO_ACTION;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 8003590:	bf00      	nop
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <_ZN5L647017prepare_soft_stopEv>:
    virtual void prepare_soft_stop(void)
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftStop();
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7fe fe77 	bl	8002294 <_ZN5L647021L6470_PrepareSoftStopEv>
        prepared_action = PREPARED_NO_ACTION;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <_ZN5L647017prepare_hard_stopEv>:
    virtual void prepare_hard_stop(void)
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b082      	sub	sp, #8
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardStop();
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7fe fe7c 	bl	80022bc <_ZN5L647021L6470_PrepareHardStopEv>
        prepared_action = PREPARED_NO_ACTION;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 80035cc:	bf00      	nop
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <_ZN5L647016prepare_soft_hizEv>:
    virtual void prepare_soft_hiz(void)
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftHiZ();
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7fe fe81 	bl	80022e4 <_ZN5L647020L6470_PrepareSoftHiZEv>
        prepared_action = PREPARED_NO_ACTION;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 80035ea:	bf00      	nop
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <_ZN5L647016prepare_hard_hizEv>:
    virtual void prepare_hard_hiz(void)
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b082      	sub	sp, #8
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardHiZ();
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7fe fe86 	bl	800230c <_ZN5L647020L6470_PrepareHardHiZEv>
        prepared_action = PREPARED_NO_ACTION;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 8003608:	bf00      	nop
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <_ZN5L647018prepare_step_clockEN12StepperMotor11direction_tE>:
    virtual void prepare_step_clock(direction_t direction)
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	460b      	mov	r3, r1
 800361a:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 800361c:	78fb      	ldrb	r3, [r7, #3]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d101      	bne.n	8003626 <_ZN5L647018prepare_step_clockEN12StepperMotor11direction_tE+0x16>
 8003622:	2301      	movs	r3, #1
 8003624:	e000      	b.n	8003628 <_ZN5L647018prepare_step_clockEN12StepperMotor11direction_tE+0x18>
 8003626:	2300      	movs	r3, #0
 8003628:	4619      	mov	r1, r3
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7fe fd52 	bl	80020d4 <_ZN5L647022L6470_PrepareStepClockE14eL6470_DirId_t>
        prepared_action = PREPARED_NO_ACTION;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 8003638:	bf00      	nop
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <_ZN5L647018prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void prepare_release_sw(eL6470_ActId_t action, direction_t direction)
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	70fb      	strb	r3, [r7, #3]
 800364c:	4613      	mov	r3, r2
 800364e:	70bb      	strb	r3, [r7, #2]
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8003650:	78bb      	ldrb	r3, [r7, #2]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d101      	bne.n	800365a <_ZN5L647018prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x1a>
 8003656:	2201      	movs	r2, #1
 8003658:	e000      	b.n	800365c <_ZN5L647018prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x1c>
 800365a:	2200      	movs	r2, #0
 800365c:	78fb      	ldrb	r3, [r7, #3]
 800365e:	4619      	mov	r1, r3
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7fe fdad 	bl	80021c0 <_ZN5L647022L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>
        prepared_action = PREPARED_NO_ACTION;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 800366e:	bf00      	nop
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <_ZN5L647020prepare_reset_deviceEv>:
    virtual void prepare_reset_device(void)
 8003676:	b580      	push	{r7, lr}
 8003678:	b082      	sub	sp, #8
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetDevice();
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7fe fdf4 	bl	800226c <_ZN5L647024L6470_PrepareResetDeviceEv>
        prepared_action = PREPARED_NO_ACTION;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 800368c:	bf00      	nop
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <_ZN5L647024perform_prepared_actionsEv>:
    uint8_t* perform_prepared_actions(void)
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
        return L6470_PerformPreparedApplicationCommand();
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7fe fe5d 	bl	800235c <_ZN5L647039L6470_PerformPreparedApplicationCommandEv>
 80036a2:	4603      	mov	r3, r0
    }
 80036a4:	4618      	mov	r0, r3
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <_ZN5L647019get_prepared_actionEv>:
    prepared_action_t get_prepared_action(void)
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
        return prepared_action;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
    }
 80036ba:	4618      	mov	r0, r3
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
	...

080036c8 <_ZN5L647010get_resultEPh>:
    int32_t get_result(uint8_t *raw_data)
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
        switch (prepared_action) {
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80036d8:	3b01      	subs	r3, #1
 80036da:	2b07      	cmp	r3, #7
 80036dc:	f200 80b5 	bhi.w	800384a <_ZN5L647010get_resultEPh+0x182>
 80036e0:	a201      	add	r2, pc, #4	; (adr r2, 80036e8 <_ZN5L647010get_resultEPh+0x20>)
 80036e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e6:	bf00      	nop
 80036e8:	08003709 	.word	0x08003709
 80036ec:	08003727 	.word	0x08003727
 80036f0:	08003747 	.word	0x08003747
 80036f4:	08003775 	.word	0x08003775
 80036f8:	080037a5 	.word	0x080037a5
 80036fc:	080037d5 	.word	0x080037d5
 8003700:	08003805 	.word	0x08003805
 8003704:	08003835 	.word	0x08003835
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	7b9b      	ldrb	r3, [r3, #14]
 800370e:	461a      	mov	r2, r3
 8003710:	6839      	ldr	r1, [r7, #0]
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fe fe70 	bl	80023f8 <_ZN5L647025L6470_ExtractReturnedDataEPhh>
 8003718:	4603      	mov	r3, r0
 800371a:	4619      	mov	r1, r3
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7fd feeb 	bl	80014f8 <_ZN5L647023L6470_AbsPos_2_PositionEm>
 8003722:	4603      	mov	r3, r0
 8003724:	e092      	b.n	800384c <_ZN5L647010get_resultEPh+0x184>
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	3328      	adds	r3, #40	; 0x28
 800372c:	7b9b      	ldrb	r3, [r3, #14]
 800372e:	461a      	mov	r2, r3
 8003730:	6839      	ldr	r1, [r7, #0]
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7fe fe60 	bl	80023f8 <_ZN5L647025L6470_ExtractReturnedDataEPhh>
 8003738:	4603      	mov	r3, r0
 800373a:	4619      	mov	r1, r3
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7fd fedb 	bl	80014f8 <_ZN5L647023L6470_AbsPos_2_PositionEm>
 8003742:	4603      	mov	r3, r0
 8003744:	e082      	b.n	800384c <_ZN5L647010get_resultEPh+0x184>
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	333c      	adds	r3, #60	; 0x3c
 800374c:	7b9b      	ldrb	r3, [r3, #14]
 800374e:	461a      	mov	r2, r3
 8003750:	6839      	ldr	r1, [r7, #0]
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7fe fe50 	bl	80023f8 <_ZN5L647025L6470_ExtractReturnedDataEPhh>
 8003758:	4603      	mov	r3, r0
 800375a:	4619      	mov	r1, r3
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7fd ff01 	bl	8001564 <_ZN5L647020L6470_Speed_2_Step_sEm>
 8003762:	eef0 7a40 	vmov.f32	s15, s0
 8003766:	eeb0 0a67 	vmov.f32	s0, s15
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f872 	bl	8003854 <_ZN5L647011L6470_roundEf>
 8003770:	4603      	mov	r3, r0
 8003772:	e06b      	b.n	800384c <_ZN5L647010get_resultEPh+0x184>
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	3378      	adds	r3, #120	; 0x78
 800377a:	7b9b      	ldrb	r3, [r3, #14]
 800377c:	461a      	mov	r2, r3
 800377e:	6839      	ldr	r1, [r7, #0]
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7fe fe39 	bl	80023f8 <_ZN5L647025L6470_ExtractReturnedDataEPhh>
 8003786:	4603      	mov	r3, r0
 8003788:	b29b      	uxth	r3, r3
 800378a:	4619      	mov	r1, r3
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7fd ffb7 	bl	8001700 <_ZN5L647023L6470_MaxSpeed_2_Step_sEt>
 8003792:	eef0 7a40 	vmov.f32	s15, s0
 8003796:	eeb0 0a67 	vmov.f32	s0, s15
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f85a 	bl	8003854 <_ZN5L647011L6470_roundEf>
 80037a0:	4603      	mov	r3, r0
 80037a2:	e053      	b.n	800384c <_ZN5L647010get_resultEPh+0x184>
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	69db      	ldr	r3, [r3, #28]
 80037a8:	338c      	adds	r3, #140	; 0x8c
 80037aa:	7b9b      	ldrb	r3, [r3, #14]
 80037ac:	461a      	mov	r2, r3
 80037ae:	6839      	ldr	r1, [r7, #0]
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7fe fe21 	bl	80023f8 <_ZN5L647025L6470_ExtractReturnedDataEPhh>
 80037b6:	4603      	mov	r3, r0
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	4619      	mov	r1, r3
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7fd ffe7 	bl	8001790 <_ZN5L647023L6470_MinSpeed_2_Step_sEt>
 80037c2:	eef0 7a40 	vmov.f32	s15, s0
 80037c6:	eeb0 0a67 	vmov.f32	s0, s15
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f842 	bl	8003854 <_ZN5L647011L6470_roundEf>
 80037d0:	4603      	mov	r3, r0
 80037d2:	e03b      	b.n	800384c <_ZN5L647010get_resultEPh+0x184>
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	3350      	adds	r3, #80	; 0x50
 80037da:	7b9b      	ldrb	r3, [r3, #14]
 80037dc:	461a      	mov	r2, r3
 80037de:	6839      	ldr	r1, [r7, #0]
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7fe fe09 	bl	80023f8 <_ZN5L647025L6470_ExtractReturnedDataEPhh>
 80037e6:	4603      	mov	r3, r0
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	4619      	mov	r1, r3
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7fd fef7 	bl	80015e0 <_ZN5L647019L6470_Acc_2_Step_s2Et>
 80037f2:	eef0 7a40 	vmov.f32	s15, s0
 80037f6:	eeb0 0a67 	vmov.f32	s0, s15
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f82a 	bl	8003854 <_ZN5L647011L6470_roundEf>
 8003800:	4603      	mov	r3, r0
 8003802:	e023      	b.n	800384c <_ZN5L647010get_resultEPh+0x184>
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	3364      	adds	r3, #100	; 0x64
 800380a:	7b9b      	ldrb	r3, [r3, #14]
 800380c:	461a      	mov	r2, r3
 800380e:	6839      	ldr	r1, [r7, #0]
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7fe fdf1 	bl	80023f8 <_ZN5L647025L6470_ExtractReturnedDataEPhh>
 8003816:	4603      	mov	r3, r0
 8003818:	b29b      	uxth	r3, r3
 800381a:	4619      	mov	r1, r3
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7fd ff27 	bl	8001670 <_ZN5L647019L6470_Dec_2_Step_s2Et>
 8003822:	eef0 7a40 	vmov.f32	s15, s0
 8003826:	eeb0 0a67 	vmov.f32	s0, s15
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f812 	bl	8003854 <_ZN5L647011L6470_roundEf>
 8003830:	4603      	mov	r3, r0
 8003832:	e00b      	b.n	800384c <_ZN5L647010get_resultEPh+0x184>
                return (int32_t) (direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8003834:	2104      	movs	r1, #4
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7fe fe0c 	bl	8002454 <_ZN5L647029L6470_CheckStatusRegisterFlagEh>
 800383c:	4603      	mov	r3, r0
 800383e:	2b01      	cmp	r3, #1
 8003840:	d101      	bne.n	8003846 <_ZN5L647010get_resultEPh+0x17e>
 8003842:	2301      	movs	r3, #1
 8003844:	e002      	b.n	800384c <_ZN5L647010get_resultEPh+0x184>
 8003846:	2300      	movs	r3, #0
 8003848:	e000      	b.n	800384c <_ZN5L647010get_resultEPh+0x184>
                return 0;
 800384a:	2300      	movs	r3, #0
    }
 800384c:	4618      	mov	r0, r3
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <_ZN5L647011L6470_roundEf>:
    int L6470_round(float f)
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	ed87 0a00 	vstr	s0, [r7]
        if (f >= 0) {
 8003860:	edd7 7a00 	vldr	s15, [r7]
 8003864:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800386c:	db1e      	blt.n	80038ac <_ZN5L647011L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 800386e:	edd7 7a00 	vldr	s15, [r7]
 8003872:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003876:	ee17 2a90 	vmov	r2, s15
 800387a:	edd7 7a00 	vldr	s15, [r7]
 800387e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003882:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003886:	ed97 7a00 	vldr	s14, [r7]
 800388a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800388e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003892:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800389a:	bf4c      	ite	mi
 800389c:	2301      	movmi	r3, #1
 800389e:	2300      	movpl	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	f083 0301 	eor.w	r3, r3, #1
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	4413      	add	r3, r2
 80038aa:	e01a      	b.n	80038e2 <_ZN5L647011L6470_roundEf+0x8e>
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 80038ac:	edd7 7a00 	vldr	s15, [r7]
 80038b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038b4:	ee17 2a90 	vmov	r2, s15
 80038b8:	edd7 7a00 	vldr	s15, [r7]
 80038bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038c4:	ed97 7a00 	vldr	s14, [r7]
 80038c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038cc:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80038d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d8:	d501      	bpl.n	80038de <_ZN5L647011L6470_roundEf+0x8a>
 80038da:	2301      	movs	r3, #1
 80038dc:	e000      	b.n	80038e0 <_ZN5L647011L6470_roundEf+0x8c>
 80038de:	2300      	movs	r3, #0
 80038e0:	1ad3      	subs	r3, r2, r3
    }
 80038e2:	4618      	mov	r0, r3
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr

080038ee <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>:
      *         "Prepare<Action>()" methods, one for each motor of the daisy-chain.
      * @param  None.
      * @retval A pointer to the results returned by the components, i.e. an
      *         integer value for each of them.
      */
    virtual uint32_t* perform_prepared_actions(void)
 80038ee:	b5b0      	push	{r4, r5, r7, lr}
 80038f0:	b086      	sub	sp, #24
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
    {
        /* Performing pre-actions, if needed. */
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 80038f6:	2300      	movs	r3, #0
 80038f8:	617b      	str	r3, [r7, #20]
 80038fa:	e032      	b.n	8003962 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0x74>
            /*
               "GetPosition()" is needed by "PrepareSetMark()" at the time when the
               prepared actions get performed.
            */
            if (components[m]->get_prepared_action() == L6470::PREPARED_SET_MARK) {
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	3204      	adds	r2, #4
 8003902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003906:	4618      	mov	r0, r3
 8003908:	f7ff fed0 	bl	80036ac <_ZN5L647019get_prepared_actionEv>
 800390c:	4603      	mov	r3, r0
 800390e:	2b09      	cmp	r3, #9
 8003910:	bf0c      	ite	eq
 8003912:	2301      	moveq	r3, #1
 8003914:	2300      	movne	r3, #0
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	d01f      	beq.n	800395c <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0x6e>
                components[m]->prepare_set_mark((uint32_t) components[m]->get_position());
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	3204      	adds	r2, #4
 8003922:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	3204      	adds	r2, #4
 800392c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	33d0      	adds	r3, #208	; 0xd0
 8003934:	681c      	ldr	r4, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	3204      	adds	r2, #4
 800393c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	3204      	adds	r2, #4
 8003946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	3314      	adds	r3, #20
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4608      	mov	r0, r1
 8003952:	4798      	blx	r3
 8003954:	4603      	mov	r3, r0
 8003956:	4619      	mov	r1, r3
 8003958:	4628      	mov	r0, r5
 800395a:	47a0      	blx	r4
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	3301      	adds	r3, #1
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2b01      	cmp	r3, #1
 8003966:	ddc9      	ble.n	80038fc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0xe>
            }
        }
        
        /* Performing the prepared actions and getting back raw data. */
        uint8_t *raw_data = components[0]->perform_prepared_actions();
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff fe91 	bl	8003694 <_ZN5L647024perform_prepared_actionsEv>
 8003972:	60f8      	str	r0, [r7, #12]

        /* Processing raw data. */
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 8003974:	2300      	movs	r3, #0
 8003976:	613b      	str	r3, [r7, #16]
 8003978:	e012      	b.n	80039a0 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0xb2>
            results[m] = components[m]->get_result(raw_data);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	3204      	adds	r2, #4
 8003980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003984:	68f9      	ldr	r1, [r7, #12]
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff fe9e 	bl	80036c8 <_ZN5L647010get_resultEPh>
 800398c:	4603      	mov	r3, r0
 800398e:	4619      	mov	r1, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	3208      	adds	r2, #8
 8003996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	3301      	adds	r3, #1
 800399e:	613b      	str	r3, [r7, #16]
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	dde9      	ble.n	800397a <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0x8c>
        }

        /* Returning results. */
        return results;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	3320      	adds	r3, #32
    }
 80039aa:	4618      	mov	r0, r3
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080039b4 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>:
 * @param busy_irq      pin name of the BUSY pin of the component.
 * @param standby_reset pin name of the STBY\RST pin of the component.
 * @param ssel          pin name of the SSEL pin of the SPI device to be used for communication.
 * @param spi           SPI device to be used for communication.
 */
XNucleoIHM02A1::XNucleoIHM02A1(L6470_init_t *init_0, L6470_init_t *init_1, SPI_HandleTypeDef *spi, GPIO_TypeDef* standby_reset_port  ,uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin) :spi(spi), standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin)
 80039b4:	b590      	push	{r4, r7, lr}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af02      	add	r7, sp, #8
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
 80039c0:	603b      	str	r3, [r7, #0]
 80039c2:	4a2d      	ldr	r2, [pc, #180]	; (8003a78 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xc4>)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	60da      	str	r2, [r3, #12]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a3a      	ldr	r2, [r7, #32]
 80039d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80039d8:	861a      	strh	r2, [r3, #48]	; 0x30
{
    /* Checking stackability. */
    if (!(number_of_boards < EXPBRD_MOUNTED_NR_MAX)) {
        /*Do nothing*/
    }
    instance_id = number_of_boards++;
 80039da:	4b28      	ldr	r3, [pc, #160]	; (8003a7c <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xc8>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	1c5a      	adds	r2, r3, #1
 80039e0:	b2d1      	uxtb	r1, r2
 80039e2:	4a26      	ldr	r2, [pc, #152]	; (8003a7c <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xc8>)
 80039e4:	7011      	strb	r1, [r2, #0]
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28



    HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 80039ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80039ee:	2201      	movs	r2, #1
 80039f0:	4619      	mov	r1, r3
 80039f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039f4:	f004 ffe2 	bl	80089bc <HAL_GPIO_WritePin>
     *                                                                        *
     * Example:                                                               *
     *   component_1 = new COMPONENT_1(ssel, *dev_spi);                       *
     *   component_2 = new COMPONENT_2(ssel, *dev_spi);                       *
     *------------------------------------------------------------------------*/
    components[0] = l6470_0 = new L6470(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 80039f8:	2068      	movs	r0, #104	; 0x68
 80039fa:	f008 fb7b 	bl	800c0f4 <_Znwj>
 80039fe:	4603      	mov	r3, r0
 8003a00:	461c      	mov	r4, r3
 8003a02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	9301      	str	r3, [sp, #4]
 8003a08:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0e:	6a39      	ldr	r1, [r7, #32]
 8003a10:	4620      	mov	r0, r4
 8003a12:	f7fe ffef 	bl	80029f4 <_ZN5L6470C1EP12GPIO_TypeDeftS1_tP19__SPI_HandleTypeDef>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	605c      	str	r4, [r3, #4]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	611a      	str	r2, [r3, #16]
    components[1] = l6470_1 = new L6470(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8003a22:	2068      	movs	r0, #104	; 0x68
 8003a24:	f008 fb66 	bl	800c0f4 <_Znwj>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	461c      	mov	r4, r3
 8003a2c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	9301      	str	r3, [sp, #4]
 8003a32:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a38:	6a39      	ldr	r1, [r7, #32]
 8003a3a:	4620      	mov	r0, r4
 8003a3c:	f7fe ffda 	bl	80029f4 <_ZN5L6470C1EP12GPIO_TypeDeftS1_tP19__SPI_HandleTypeDef>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	609c      	str	r4, [r3, #8]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	615a      	str	r2, [r3, #20]

    /* Initializing the components. */
    init_components[0] = init_0;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	619a      	str	r2, [r3, #24]
    init_components[1] = init_1;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	61da      	str	r2, [r3, #28]
    if (!init()) {
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 f811 	bl	8003a80 <_ZN14XNucleoIHM02A14initEv>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	f083 0301 	eor.w	r3, r3, #1
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d000      	beq.n	8003a6c <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xb8>
        /*Do nothing*/
    	asm("nop");
 8003a6a:	bf00      	nop
    }
}
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd90      	pop	{r4, r7, pc}
 8003a76:	bf00      	nop
 8003a78:	0800f310 	.word	0x0800f310
 8003a7c:	200002d4 	.word	0x200002d4

08003a80 <_ZN14XNucleoIHM02A14initEv>:
/**
 * @brief Initializing the X_NUCLEO_IHM02A1 board.
 * @retval true if initialization is successful, false otherwise.
 */
bool XNucleoIHM02A1::init(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
     *                                                                        *
     * Example:                                                               *
     *   return (init_COMPONENT_1() && init_COMPONENT_2());                   *
     *------------------------------------------------------------------------*/
    /* Disable the L6470. */
	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003a90:	2200      	movs	r2, #0
 8003a92:	4619      	mov	r1, r3
 8003a94:	f004 ff92 	bl	80089bc <HAL_GPIO_WritePin>

    /* Wait for at least t_STBY,min */
    HAL_Delay(1);
 8003a98:	2001      	movs	r0, #1
 8003a9a:	f004 f8b7 	bl	8007c0c <HAL_Delay>

    /* Enable the L6470. */
    HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_SET);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	f004 ff87 	bl	80089bc <HAL_GPIO_WritePin>

    /* Wait for at least t_logicwu */
    HAL_Delay(1);
 8003aae:	2001      	movs	r0, #1
 8003ab0:	f004 f8ac 	bl	8007c0c <HAL_Delay>

    return (init_L6470_0() && init_L6470_1());
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f810 	bl	8003ada <_ZN14XNucleoIHM02A112init_L6470_0Ev>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d007      	beq.n	8003ad0 <_ZN14XNucleoIHM02A14initEv+0x50>
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f827 	bl	8003b14 <_ZN14XNucleoIHM02A112init_L6470_1Ev>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <_ZN14XNucleoIHM02A14initEv+0x50>
 8003acc:	2301      	movs	r3, #1
 8003ace:	e000      	b.n	8003ad2 <_ZN14XNucleoIHM02A14initEv+0x52>
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <_ZN14XNucleoIHM02A112init_L6470_0Ev>:
/**
 * @brief  Initialize the L6470 component.
 * @retval true if initialization is successful, false otherwise.
 */
bool XNucleoIHM02A1::init_L6470_0(void)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b082      	sub	sp, #8
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
    /* Initialization. */
    if (l6470_0->init((void *) init_components[0]) != COMPONENT_OK) {
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6858      	ldr	r0, [r3, #4]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6992      	ldr	r2, [r2, #24]
 8003af2:	4611      	mov	r1, r2
 8003af4:	4798      	blx	r3
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	bf14      	ite	ne
 8003afc:	2301      	movne	r3, #1
 8003afe:	2300      	moveq	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <_ZN14XNucleoIHM02A112init_L6470_0Ev+0x30>
        return false;
 8003b06:	2300      	movs	r3, #0
 8003b08:	e000      	b.n	8003b0c <_ZN14XNucleoIHM02A112init_L6470_0Ev+0x32>
    }

    return true;
 8003b0a:	2301      	movs	r3, #1
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <_ZN14XNucleoIHM02A112init_L6470_1Ev>:
/**
 * @brief  Initialize the L6470 component.
 * @retval true if initialization is successful, false otherwise.
 */
bool XNucleoIHM02A1::init_L6470_1(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
    /* Initialization. */
    if (l6470_1->init((void *) init_components[1]) != COMPONENT_OK) {
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6898      	ldr	r0, [r3, #8]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	69d2      	ldr	r2, [r2, #28]
 8003b2c:	4611      	mov	r1, r2
 8003b2e:	4798      	blx	r3
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	bf14      	ite	ne
 8003b36:	2301      	movne	r3, #1
 8003b38:	2300      	moveq	r3, #0
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <_ZN14XNucleoIHM02A112init_L6470_1Ev+0x30>
        return false;
 8003b40:	2300      	movs	r3, #0
 8003b42:	e000      	b.n	8003b46 <_ZN14XNucleoIHM02A112init_L6470_1Ev+0x32>
    }

    return true;
 8003b44:	2301      	movs	r3, #1
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <_ZNSt8__detail17_List_node_headerC1Ev>:
    {
#if _GLIBCXX_USE_CXX11_ABI
      std::size_t _M_size;
#endif

      _List_node_header() _GLIBCXX_NOEXCEPT
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b082      	sub	sp, #8
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
      { _M_init(); }
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f805 	bl	8003b66 <_ZNSt8__detail17_List_node_header7_M_initEv>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <_ZNSt8__detail17_List_node_header7_M_initEv>:
	  }
      }
#endif

      void
      _M_init() _GLIBCXX_NOEXCEPT
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
      {
	this->_M_next = this->_M_prev = this;
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	605a      	str	r2, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	601a      	str	r2, [r3, #0]
#if _GLIBCXX_USE_CXX11_ABI
	this->_M_size = 0;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	609a      	str	r2, [r3, #8]
#endif
      }
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b082      	sub	sp, #8
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	1e5a      	subs	r2, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	605a      	str	r2, [r3, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	bf0c      	ite	eq
 8003ba8:	2301      	moveq	r3, #1
 8003baa:	2300      	movne	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d019      	beq.n	8003be6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	3308      	adds	r3, #8
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	1e5a      	subs	r2, r3, #1
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	609a      	str	r2, [r3, #8]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	bf0c      	ite	eq
 8003bd0:	2301      	moveq	r3, #1
 8003bd2:	2300      	movne	r3, #0
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d005      	beq.n	8003be6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	330c      	adds	r3, #12
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	4798      	blx	r3
        }
    }
 8003be6:	bf00      	nop
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <_ZN11AbstractMsgD1Ev>:

class AbstractMsg
{
	public:
		AbstractMsg() = default;
		virtual ~AbstractMsg() {};
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	4a04      	ldr	r2, [pc, #16]	; (8003c0c <_ZN11AbstractMsgD1Ev+0x1c>)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4618      	mov	r0, r3
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	0800f578 	.word	0x0800f578

08003c10 <_ZN11AbstractMsgD0Ev>:
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f7ff ffe9 	bl	8003bf0 <_ZN11AbstractMsgD1Ev>
 8003c1e:	2104      	movs	r1, #4
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f008 fa63 	bl	800c0ec <_ZdlPvj>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <_ZN11AbstractMsgC1Ev>:
		AbstractMsg() = default;
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	4a04      	ldr	r2, [pc, #16]	; (8003c4c <_ZN11AbstractMsgC1Ev+0x1c>)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4618      	mov	r0, r3
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	0800f578 	.word	0x0800f578

08003c50 <_ZN11HeaderClassC1Ehh>:
{
	static const msg_type header_msg_type = header;
	static const uint8_t header_size = 3;
	public:
		HeaderClass() = delete;
		HeaderClass(uint8_t msg_id, uint8_t msg_len): _data(new uint8_t[HeaderClass::header_msg_type])
 8003c50:	b590      	push	{r4, r7, lr}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	460b      	mov	r3, r1
 8003c5a:	70fb      	strb	r3, [r7, #3]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	70bb      	strb	r3, [r7, #2]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff ffe4 	bl	8003c30 <_ZN11AbstractMsgC1Ev>
 8003c68:	4a16      	ldr	r2, [pc, #88]	; (8003cc4 <_ZN11HeaderClassC1Ehh+0x74>)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	1d1c      	adds	r4, r3, #4
 8003c72:	2000      	movs	r0, #0
 8003c74:	f008 fa4f 	bl	800c116 <_Znaj>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	f000 fc30 	bl	80044e2 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
		{
			_data[0] = SerialID::MSG_START;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	3304      	adds	r3, #4
 8003c86:	2100      	movs	r1, #0
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fc58 	bl	800453e <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	22fe      	movs	r2, #254	; 0xfe
 8003c92:	701a      	strb	r2, [r3, #0]
			_data[1] = msg_id;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3304      	adds	r3, #4
 8003c98:	2101      	movs	r1, #1
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fc4f 	bl	800453e <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	78fb      	ldrb	r3, [r7, #3]
 8003ca4:	7013      	strb	r3, [r2, #0]
			_data[2] = msg_len;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	2102      	movs	r1, #2
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 fc46 	bl	800453e <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	78bb      	ldrb	r3, [r7, #2]
 8003cb6:	7013      	strb	r3, [r2, #0]
		};
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd90      	pop	{r4, r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	0800f55c 	.word	0x0800f55c

08003cc8 <_ZNK11HeaderClass8get_dataEv>:
		~HeaderClass() = default;
		uint8_t* get_data() const noexcept override {return _data.get();};
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 fc43 	bl	8004560 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <_ZNK11HeaderClass8get_typeEv>:
		msg_type get_type() const noexcept override {return HeaderClass::header_msg_type;}
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	2300      	movs	r3, #0
 8003cee:	4618      	mov	r0, r3
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <_ZNK11HeaderClass13get_data_sizeEv>:
		uint8_t get_data_size() const noexcept override {return HeaderClass::header_size;}
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
 8003d02:	2303      	movs	r3, #3
 8003d04:	4618      	mov	r0, r3
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <_ZN6AckMsgC1Ev>:
class AckMsg : public AbstractMsg
{
	static const msg_type incoming_msg_type = acknowledge;
	static const uint8_t incoming_msg_size = 3;
	public:
		AckMsg(): _data(new uint8_t[AckMsg::incoming_msg_size])
 8003d10:	b590      	push	{r4, r7, lr}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff ff88 	bl	8003c30 <_ZN11AbstractMsgC1Ev>
 8003d20:	4a16      	ldr	r2, [pc, #88]	; (8003d7c <_ZN6AckMsgC1Ev+0x6c>)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	1d1c      	adds	r4, r3, #4
 8003d2a:	2003      	movs	r0, #3
 8003d2c:	f008 f9f3 	bl	800c116 <_Znaj>
 8003d30:	4603      	mov	r3, r0
 8003d32:	4619      	mov	r1, r3
 8003d34:	4620      	mov	r0, r4
 8003d36:	f000 fbd4 	bl	80044e2 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
		{
			_data[0] = SerialID::MSG_NO_ACK;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	2100      	movs	r1, #0
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 fbfc 	bl	800453e <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 8003d46:	4603      	mov	r3, r0
 8003d48:	22fc      	movs	r2, #252	; 0xfc
 8003d4a:	701a      	strb	r2, [r3, #0]
			_data[1] = SerialID::MSG_NO_ID;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3304      	adds	r3, #4
 8003d50:	2101      	movs	r1, #1
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fbf3 	bl	800453e <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	22fb      	movs	r2, #251	; 0xfb
 8003d5c:	701a      	strb	r2, [r3, #0]
			_data[2] = SerialID::MSG_NO_SIZE;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3304      	adds	r3, #4
 8003d62:	2102      	movs	r1, #2
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 fbea 	bl	800453e <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	22fa      	movs	r2, #250	; 0xfa
 8003d6e:	701a      	strb	r2, [r3, #0]
		};
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4618      	mov	r0, r3
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd90      	pop	{r4, r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	0800f540 	.word	0x0800f540

08003d80 <_ZNK6AckMsg8get_dataEv>:

			}
			return *this;

		}
		uint8_t* get_data() const noexcept override {return _data.get();}
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 fbe7 	bl	8004560 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 8003d92:	4603      	mov	r3, r0
 8003d94:	4618      	mov	r0, r3
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <_ZNK6AckMsg8get_typeEv>:
		msg_type get_type() const noexcept override {return AckMsg::incoming_msg_type;}
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	2302      	movs	r3, #2
 8003da6:	4618      	mov	r0, r3
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <_ZNK6AckMsg13get_data_sizeEv>:
		uint8_t get_data_size() const noexcept override {return AckMsg::incoming_msg_size;}
 8003db2:	b480      	push	{r7}
 8003db4:	b083      	sub	sp, #12
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
 8003dba:	2303      	movs	r3, #3
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE10_List_implD1Ev>:
	  }
	return __n;
      }
#endif

      struct _List_impl
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 fc3b 	bl	800464c <_ZNSaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEED1Ev>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EEC1Ev>:
      const _Node_alloc_type&
      _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT
      { return _M_impl; }

#if __cplusplus >= 201103L
      _List_base() = default;
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 fc1e 	bl	800462c <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE10_List_implC1Ev>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4618      	mov	r0, r3
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EEC1Ev>:

      /**
       *  @brief  Creates a %list with no elements.
       */
#if __cplusplus >= 201103L
      list() = default;
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b082      	sub	sp, #8
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff ffeb 	bl	8003de0 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EEC1Ev>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EED1Ev>:
       *  things.  The _Base dtor only erases the elements, and note
       *  that if the elements themselves are pointers, the pointed-to
       *  memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      ~list() = default;
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fc20 	bl	8004664 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EED1Ev>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4618      	mov	r0, r3
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b082      	sub	sp, #8
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3304      	adds	r3, #4
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 fc2f 	bl	800469e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4618      	mov	r0, r3
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <_ZNSt10shared_ptrI11AbstractMsgED1Ev>:
   * the stored pointer returned by `get()`, not the owned pointer.
   * To test whether two `shared_ptr` objects share ownership of the same
   * pointer see `std::shared_ptr::owner_before` and `std::owner_less`.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b082      	sub	sp, #8
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff ffea 	bl	8003e2e <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <_ZN10MsgHandlerC1EP20__UART_HandleTypeDef>:


class MsgHandler
{
	public:
		MsgHandler(UART_HandleTypeDef *huart2) : huart(huart2), ongoing_fetch(false),register_ongoing_fetch(false), rxHeader(SerialID::MSG_NO_ID,3) {};
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	711a      	strb	r2, [r3, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	715a      	strb	r2, [r3, #5]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	3308      	adds	r3, #8
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7ff ff43 	bl	8003d10 <_ZN6AckMsgC1Ev>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3310      	adds	r3, #16
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff ff3e 	bl	8003d10 <_ZN6AckMsgC1Ev>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	3318      	adds	r3, #24
 8003e98:	2203      	movs	r2, #3
 8003e9a:	21fb      	movs	r1, #251	; 0xfb
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff fed7 	bl	8003c50 <_ZN11HeaderClassC1Ehh>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	3320      	adds	r3, #32
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 fb8e 	bl	80045c8 <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EEC1IS2_vEEv>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3324      	adds	r3, #36	; 0x24
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff ffa2 	bl	8003dfa <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EEC1Ev>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3330      	adds	r3, #48	; 0x30
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 fbe2 	bl	8004684 <_ZNSt10shared_ptrI11AbstractMsgEC1Ev>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <_ZN14XNucleoIHM02A114get_componentsEv>:
    L6470 **get_components(void)
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
        return components;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	3310      	adds	r3, #16
    }
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
	...

08003ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ee4:	b590      	push	{r4, r7, lr}
 8003ee6:	b093      	sub	sp, #76	; 0x4c
 8003ee8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003eea:	f003 fe1d 	bl	8007b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003eee:	f000 f8ad 	bl	800404c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003ef2:	f000 fa1b 	bl	800432c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8003ef6:	f000 f9f1 	bl	80042dc <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 8003efa:	f000 f9c1 	bl	8004280 <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 8003efe:	f000 f963 	bl	80041c8 <_ZL12MX_TIM2_Initv>
  MX_SPI1_Init();
 8003f02:	f000 f925 	bl	8004150 <_ZL12MX_SPI1_Initv>
  /* USER CODE BEGIN 2 */
  char print_msg[50] = "Hello World\n";
 8003f06:	4a47      	ldr	r2, [pc, #284]	; (8004024 <main+0x140>)
 8003f08:	463b      	mov	r3, r7
 8003f0a:	4614      	mov	r4, r2
 8003f0c:	6820      	ldr	r0, [r4, #0]
 8003f0e:	6861      	ldr	r1, [r4, #4]
 8003f10:	68a2      	ldr	r2, [r4, #8]
 8003f12:	c307      	stmia	r3!, {r0, r1, r2}
 8003f14:	7b22      	ldrb	r2, [r4, #12]
 8003f16:	701a      	strb	r2, [r3, #0]
 8003f18:	f107 030d 	add.w	r3, r7, #13
 8003f1c:	2225      	movs	r2, #37	; 0x25
 8003f1e:	2100      	movs	r1, #0
 8003f20:	4618      	mov	r0, r3
 8003f22:	f008 fffe 	bl	800cf22 <memset>
  float tosend1 = 0.1;
 8003f26:	4b40      	ldr	r3, [pc, #256]	; (8004028 <main+0x144>)
 8003f28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_TIM_Base_Start_IT(&htim2);
 8003f2a:	4840      	ldr	r0, [pc, #256]	; (800402c <main+0x148>)
 8003f2c:	f006 f9c6 	bl	800a2bc <HAL_TIM_Base_Start_IT>
  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8003f30:	2120      	movs	r1, #32
 8003f32:	483f      	ldr	r0, [pc, #252]	; (8004030 <main+0x14c>)
 8003f34:	f004 fd5b 	bl	80089ee <HAL_GPIO_TogglePin>
  bottom_shield = new XNucleoIHM02A1(&initShield[0],&initShield[1],&hspi1,reset_shields_GPIO_Port,reset_shields_Pin,ssel1_GPIO_Port,ssel1_Pin);
 8003f38:	2034      	movs	r0, #52	; 0x34
 8003f3a:	f008 f8db 	bl	800c0f4 <_Znwj>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	461c      	mov	r4, r3
 8003f42:	2310      	movs	r3, #16
 8003f44:	9303      	str	r3, [sp, #12]
 8003f46:	4b3a      	ldr	r3, [pc, #232]	; (8004030 <main+0x14c>)
 8003f48:	9302      	str	r3, [sp, #8]
 8003f4a:	2320      	movs	r3, #32
 8003f4c:	9301      	str	r3, [sp, #4]
 8003f4e:	4b39      	ldr	r3, [pc, #228]	; (8004034 <main+0x150>)
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	4b39      	ldr	r3, [pc, #228]	; (8004038 <main+0x154>)
 8003f54:	4a39      	ldr	r2, [pc, #228]	; (800403c <main+0x158>)
 8003f56:	493a      	ldr	r1, [pc, #232]	; (8004040 <main+0x15c>)
 8003f58:	4620      	mov	r0, r4
 8003f5a:	f7ff fd2b 	bl	80039b4 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>
 8003f5e:	4b39      	ldr	r3, [pc, #228]	; (8004044 <main+0x160>)
 8003f60:	601c      	str	r4, [r3, #0]
  motors = bottom_shield->get_components();
 8003f62:	4b38      	ldr	r3, [pc, #224]	; (8004044 <main+0x160>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7ff ffaf 	bl	8003eca <_ZN14XNucleoIHM02A114get_componentsEv>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	4a36      	ldr	r2, [pc, #216]	; (8004048 <main+0x164>)
 8003f70:	6013      	str	r3, [r2, #0]
  HAL_Delay(1000);
 8003f72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f76:	f003 fe49 	bl	8007c0c <HAL_Delay>
  motors[0]->prepare_run(StepperMotor::direction_t::FWD, 100);
 8003f7a:	4b33      	ldr	r3, [pc, #204]	; (8004048 <main+0x164>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6818      	ldr	r0, [r3, #0]
 8003f80:	4b31      	ldr	r3, [pc, #196]	; (8004048 <main+0x164>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2264      	movs	r2, #100	; 0x64
 8003f90:	2101      	movs	r1, #1
 8003f92:	4798      	blx	r3
  motors[1]->prepare_run(StepperMotor::direction_t::BWD, 100);
 8003f94:	4b2c      	ldr	r3, [pc, #176]	; (8004048 <main+0x164>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	6818      	ldr	r0, [r3, #0]
 8003f9c:	4b2a      	ldr	r3, [pc, #168]	; (8004048 <main+0x164>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2264      	movs	r2, #100	; 0x64
 8003fae:	2100      	movs	r1, #0
 8003fb0:	4798      	blx	r3
  bottom_shield->perform_prepared_actions();
 8003fb2:	4b24      	ldr	r3, [pc, #144]	; (8004044 <main+0x160>)
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	4b23      	ldr	r3, [pc, #140]	; (8004044 <main+0x160>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	4798      	blx	r3
  HAL_Delay(1000);
 8003fc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fc6:	f003 fe21 	bl	8007c0c <HAL_Delay>
  bottom_shield->perform_prepared_actions();
 8003fca:	4b1e      	ldr	r3, [pc, #120]	; (8004044 <main+0x160>)
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	4b1d      	ldr	r3, [pc, #116]	; (8004044 <main+0x160>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4610      	mov	r0, r2
 8003fd8:	4798      	blx	r3
  HAL_Delay(1000);
 8003fda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fde:	f003 fe15 	bl	8007c0c <HAL_Delay>
  bottom_shield->perform_prepared_actions();
 8003fe2:	4b18      	ldr	r3, [pc, #96]	; (8004044 <main+0x160>)
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	4b17      	ldr	r3, [pc, #92]	; (8004044 <main+0x160>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4610      	mov	r0, r2
 8003ff0:	4798      	blx	r3
  HAL_Delay(1000);
 8003ff2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ff6:	f003 fe09 	bl	8007c0c <HAL_Delay>
  bottom_shield->perform_prepared_actions();
 8003ffa:	4b12      	ldr	r3, [pc, #72]	; (8004044 <main+0x160>)
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	4b11      	ldr	r3, [pc, #68]	; (8004044 <main+0x160>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4610      	mov	r0, r2
 8004008:	4798      	blx	r3
  HAL_Delay(1000);
 800400a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800400e:	f003 fdfd 	bl	8007c0c <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 HAL_Delay(1000);
 8004012:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004016:	f003 fdf9 	bl	8007c0c <HAL_Delay>
	//msg_handler.send_print(print_msg);
	 //msg_handler.send_float(tosend1);
	 HAL_Delay(1000);
 800401a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800401e:	f003 fdf5 	bl	8007c0c <HAL_Delay>
	 HAL_Delay(1000);
 8004022:	e7f6      	b.n	8004012 <main+0x12e>
 8004024:	0800efb8 	.word	0x0800efb8
 8004028:	3dcccccd 	.word	0x3dcccccd
 800402c:	20000330 	.word	0x20000330
 8004030:	40020000 	.word	0x40020000
 8004034:	40020400 	.word	0x40020400
 8004038:	200002d8 	.word	0x200002d8
 800403c:	20000058 	.word	0x20000058
 8004040:	20000000 	.word	0x20000000
 8004044:	200004bc 	.word	0x200004bc
 8004048:	200004c0 	.word	0x200004c0

0800404c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b094      	sub	sp, #80	; 0x50
 8004050:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004052:	f107 031c 	add.w	r3, r7, #28
 8004056:	2234      	movs	r2, #52	; 0x34
 8004058:	2100      	movs	r1, #0
 800405a:	4618      	mov	r0, r3
 800405c:	f008 ff61 	bl	800cf22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004060:	f107 0308 	add.w	r3, r7, #8
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	605a      	str	r2, [r3, #4]
 800406a:	609a      	str	r2, [r3, #8]
 800406c:	60da      	str	r2, [r3, #12]
 800406e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004070:	2300      	movs	r3, #0
 8004072:	607b      	str	r3, [r7, #4]
 8004074:	4b34      	ldr	r3, [pc, #208]	; (8004148 <_Z18SystemClock_Configv+0xfc>)
 8004076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004078:	4a33      	ldr	r2, [pc, #204]	; (8004148 <_Z18SystemClock_Configv+0xfc>)
 800407a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800407e:	6413      	str	r3, [r2, #64]	; 0x40
 8004080:	4b31      	ldr	r3, [pc, #196]	; (8004148 <_Z18SystemClock_Configv+0xfc>)
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004088:	607b      	str	r3, [r7, #4]
 800408a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800408c:	2300      	movs	r3, #0
 800408e:	603b      	str	r3, [r7, #0]
 8004090:	4b2e      	ldr	r3, [pc, #184]	; (800414c <_Z18SystemClock_Configv+0x100>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a2d      	ldr	r2, [pc, #180]	; (800414c <_Z18SystemClock_Configv+0x100>)
 8004096:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800409a:	6013      	str	r3, [r2, #0]
 800409c:	4b2b      	ldr	r3, [pc, #172]	; (800414c <_Z18SystemClock_Configv+0x100>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80040a4:	603b      	str	r3, [r7, #0]
 80040a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80040a8:	2302      	movs	r3, #2
 80040aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80040ac:	2301      	movs	r3, #1
 80040ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80040b0:	2310      	movs	r3, #16
 80040b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80040b4:	2302      	movs	r3, #2
 80040b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80040b8:	2300      	movs	r3, #0
 80040ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80040bc:	2310      	movs	r3, #16
 80040be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80040c0:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80040c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80040c6:	2302      	movs	r3, #2
 80040c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80040ca:	2302      	movs	r3, #2
 80040cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80040ce:	2302      	movs	r3, #2
 80040d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040d2:	f107 031c 	add.w	r3, r7, #28
 80040d6:	4618      	mov	r0, r3
 80040d8:	f005 f83e 	bl	8009158 <HAL_RCC_OscConfig>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	bf14      	ite	ne
 80040e2:	2301      	movne	r3, #1
 80040e4:	2300      	moveq	r3, #0
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 80040ec:	f000 f9e4 	bl	80044b8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80040f0:	f004 fc98 	bl	8008a24 <HAL_PWREx_EnableOverDrive>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	bf14      	ite	ne
 80040fa:	2301      	movne	r3, #1
 80040fc:	2300      	moveq	r3, #0
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 8004104:	f000 f9d8 	bl	80044b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004108:	230f      	movs	r3, #15
 800410a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800410c:	2302      	movs	r3, #2
 800410e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004110:	2300      	movs	r3, #0
 8004112:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004114:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004118:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800411a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800411e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004120:	f107 0308 	add.w	r3, r7, #8
 8004124:	2105      	movs	r1, #5
 8004126:	4618      	mov	r0, r3
 8004128:	f004 fccc 	bl	8008ac4 <HAL_RCC_ClockConfig>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	bf14      	ite	ne
 8004132:	2301      	movne	r3, #1
 8004134:	2300      	moveq	r3, #0
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <_Z18SystemClock_Configv+0xf4>
  {
    Error_Handler();
 800413c:	f000 f9bc 	bl	80044b8 <Error_Handler>
  }
}
 8004140:	bf00      	nop
 8004142:	3750      	adds	r7, #80	; 0x50
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40023800 	.word	0x40023800
 800414c:	40007000 	.word	0x40007000

08004150 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004154:	4b1a      	ldr	r3, [pc, #104]	; (80041c0 <_ZL12MX_SPI1_Initv+0x70>)
 8004156:	4a1b      	ldr	r2, [pc, #108]	; (80041c4 <_ZL12MX_SPI1_Initv+0x74>)
 8004158:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800415a:	4b19      	ldr	r3, [pc, #100]	; (80041c0 <_ZL12MX_SPI1_Initv+0x70>)
 800415c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004160:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004162:	4b17      	ldr	r3, [pc, #92]	; (80041c0 <_ZL12MX_SPI1_Initv+0x70>)
 8004164:	2200      	movs	r2, #0
 8004166:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004168:	4b15      	ldr	r3, [pc, #84]	; (80041c0 <_ZL12MX_SPI1_Initv+0x70>)
 800416a:	2200      	movs	r2, #0
 800416c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800416e:	4b14      	ldr	r3, [pc, #80]	; (80041c0 <_ZL12MX_SPI1_Initv+0x70>)
 8004170:	2202      	movs	r2, #2
 8004172:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004174:	4b12      	ldr	r3, [pc, #72]	; (80041c0 <_ZL12MX_SPI1_Initv+0x70>)
 8004176:	2201      	movs	r2, #1
 8004178:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800417a:	4b11      	ldr	r3, [pc, #68]	; (80041c0 <_ZL12MX_SPI1_Initv+0x70>)
 800417c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004180:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004182:	4b0f      	ldr	r3, [pc, #60]	; (80041c0 <_ZL12MX_SPI1_Initv+0x70>)
 8004184:	2218      	movs	r2, #24
 8004186:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004188:	4b0d      	ldr	r3, [pc, #52]	; (80041c0 <_ZL12MX_SPI1_Initv+0x70>)
 800418a:	2200      	movs	r2, #0
 800418c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800418e:	4b0c      	ldr	r3, [pc, #48]	; (80041c0 <_ZL12MX_SPI1_Initv+0x70>)
 8004190:	2200      	movs	r2, #0
 8004192:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004194:	4b0a      	ldr	r3, [pc, #40]	; (80041c0 <_ZL12MX_SPI1_Initv+0x70>)
 8004196:	2200      	movs	r2, #0
 8004198:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800419a:	4b09      	ldr	r3, [pc, #36]	; (80041c0 <_ZL12MX_SPI1_Initv+0x70>)
 800419c:	220a      	movs	r2, #10
 800419e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80041a0:	4807      	ldr	r0, [pc, #28]	; (80041c0 <_ZL12MX_SPI1_Initv+0x70>)
 80041a2:	f005 fa77 	bl	8009694 <HAL_SPI_Init>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	bf14      	ite	ne
 80041ac:	2301      	movne	r3, #1
 80041ae:	2300      	moveq	r3, #0
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 80041b6:	f000 f97f 	bl	80044b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80041ba:	bf00      	nop
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	200002d8 	.word	0x200002d8
 80041c4:	40013000 	.word	0x40013000

080041c8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041ce:	f107 0308 	add.w	r3, r7, #8
 80041d2:	2200      	movs	r2, #0
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	605a      	str	r2, [r3, #4]
 80041d8:	609a      	str	r2, [r3, #8]
 80041da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041dc:	463b      	mov	r3, r7
 80041de:	2200      	movs	r2, #0
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80041e4:	4b24      	ldr	r3, [pc, #144]	; (8004278 <_ZL12MX_TIM2_Initv+0xb0>)
 80041e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80041ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80041ec:	4b22      	ldr	r3, [pc, #136]	; (8004278 <_ZL12MX_TIM2_Initv+0xb0>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041f2:	4b21      	ldr	r3, [pc, #132]	; (8004278 <_ZL12MX_TIM2_Initv+0xb0>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 450000;
 80041f8:	4b1f      	ldr	r3, [pc, #124]	; (8004278 <_ZL12MX_TIM2_Initv+0xb0>)
 80041fa:	4a20      	ldr	r2, [pc, #128]	; (800427c <_ZL12MX_TIM2_Initv+0xb4>)
 80041fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041fe:	4b1e      	ldr	r3, [pc, #120]	; (8004278 <_ZL12MX_TIM2_Initv+0xb0>)
 8004200:	2200      	movs	r2, #0
 8004202:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004204:	4b1c      	ldr	r3, [pc, #112]	; (8004278 <_ZL12MX_TIM2_Initv+0xb0>)
 8004206:	2280      	movs	r2, #128	; 0x80
 8004208:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800420a:	481b      	ldr	r0, [pc, #108]	; (8004278 <_ZL12MX_TIM2_Initv+0xb0>)
 800420c:	f006 f806 	bl	800a21c <HAL_TIM_Base_Init>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	bf14      	ite	ne
 8004216:	2301      	movne	r3, #1
 8004218:	2300      	moveq	r3, #0
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <_ZL12MX_TIM2_Initv+0x5c>
  {
    Error_Handler();
 8004220:	f000 f94a 	bl	80044b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004224:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004228:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800422a:	f107 0308 	add.w	r3, r7, #8
 800422e:	4619      	mov	r1, r3
 8004230:	4811      	ldr	r0, [pc, #68]	; (8004278 <_ZL12MX_TIM2_Initv+0xb0>)
 8004232:	f006 f9bb 	bl	800a5ac <HAL_TIM_ConfigClockSource>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	bf14      	ite	ne
 800423c:	2301      	movne	r3, #1
 800423e:	2300      	moveq	r3, #0
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <_ZL12MX_TIM2_Initv+0x82>
  {
    Error_Handler();
 8004246:	f000 f937 	bl	80044b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800424a:	2300      	movs	r3, #0
 800424c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800424e:	2300      	movs	r3, #0
 8004250:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004252:	463b      	mov	r3, r7
 8004254:	4619      	mov	r1, r3
 8004256:	4808      	ldr	r0, [pc, #32]	; (8004278 <_ZL12MX_TIM2_Initv+0xb0>)
 8004258:	f006 fbd2 	bl	800aa00 <HAL_TIMEx_MasterConfigSynchronization>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	bf14      	ite	ne
 8004262:	2301      	movne	r3, #1
 8004264:	2300      	moveq	r3, #0
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <_ZL12MX_TIM2_Initv+0xa8>
  {
    Error_Handler();
 800426c:	f000 f924 	bl	80044b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004270:	bf00      	nop
 8004272:	3718      	adds	r7, #24
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	20000330 	.word	0x20000330
 800427c:	0006ddd0 	.word	0x0006ddd0

08004280 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004284:	4b13      	ldr	r3, [pc, #76]	; (80042d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8004286:	4a14      	ldr	r2, [pc, #80]	; (80042d8 <_ZL19MX_USART2_UART_Initv+0x58>)
 8004288:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800428a:	4b12      	ldr	r3, [pc, #72]	; (80042d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800428c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004290:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004292:	4b10      	ldr	r3, [pc, #64]	; (80042d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8004294:	2200      	movs	r2, #0
 8004296:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004298:	4b0e      	ldr	r3, [pc, #56]	; (80042d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800429a:	2200      	movs	r2, #0
 800429c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800429e:	4b0d      	ldr	r3, [pc, #52]	; (80042d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80042a4:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80042a6:	220c      	movs	r2, #12
 80042a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042aa:	4b0a      	ldr	r3, [pc, #40]	; (80042d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80042b0:	4b08      	ldr	r3, [pc, #32]	; (80042d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80042b6:	4807      	ldr	r0, [pc, #28]	; (80042d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80042b8:	f006 fc32 	bl	800ab20 <HAL_UART_Init>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	bf14      	ite	ne
 80042c2:	2301      	movne	r3, #1
 80042c4:	2300      	moveq	r3, #0
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80042cc:	f000 f8f4 	bl	80044b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80042d0:	bf00      	nop
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	20000378 	.word	0x20000378
 80042d8:	40004400 	.word	0x40004400

080042dc <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80042e2:	2300      	movs	r3, #0
 80042e4:	607b      	str	r3, [r7, #4]
 80042e6:	4b10      	ldr	r3, [pc, #64]	; (8004328 <_ZL11MX_DMA_Initv+0x4c>)
 80042e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ea:	4a0f      	ldr	r2, [pc, #60]	; (8004328 <_ZL11MX_DMA_Initv+0x4c>)
 80042ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042f0:	6313      	str	r3, [r2, #48]	; 0x30
 80042f2:	4b0d      	ldr	r3, [pc, #52]	; (8004328 <_ZL11MX_DMA_Initv+0x4c>)
 80042f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042fa:	607b      	str	r3, [r7, #4]
 80042fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80042fe:	2200      	movs	r2, #0
 8004300:	2100      	movs	r1, #0
 8004302:	2010      	movs	r0, #16
 8004304:	f003 fd81 	bl	8007e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004308:	2010      	movs	r0, #16
 800430a:	f003 fd9a 	bl	8007e42 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800430e:	2200      	movs	r2, #0
 8004310:	2100      	movs	r1, #0
 8004312:	2011      	movs	r0, #17
 8004314:	f003 fd79 	bl	8007e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8004318:	2011      	movs	r0, #17
 800431a:	f003 fd92 	bl	8007e42 <HAL_NVIC_EnableIRQ>

}
 800431e:	bf00      	nop
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	40023800 	.word	0x40023800

0800432c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08a      	sub	sp, #40	; 0x28
 8004330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004332:	f107 0314 	add.w	r3, r7, #20
 8004336:	2200      	movs	r2, #0
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	605a      	str	r2, [r3, #4]
 800433c:	609a      	str	r2, [r3, #8]
 800433e:	60da      	str	r2, [r3, #12]
 8004340:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004342:	2300      	movs	r3, #0
 8004344:	613b      	str	r3, [r7, #16]
 8004346:	4b38      	ldr	r3, [pc, #224]	; (8004428 <_ZL12MX_GPIO_Initv+0xfc>)
 8004348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434a:	4a37      	ldr	r2, [pc, #220]	; (8004428 <_ZL12MX_GPIO_Initv+0xfc>)
 800434c:	f043 0304 	orr.w	r3, r3, #4
 8004350:	6313      	str	r3, [r2, #48]	; 0x30
 8004352:	4b35      	ldr	r3, [pc, #212]	; (8004428 <_ZL12MX_GPIO_Initv+0xfc>)
 8004354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	613b      	str	r3, [r7, #16]
 800435c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800435e:	2300      	movs	r3, #0
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	4b31      	ldr	r3, [pc, #196]	; (8004428 <_ZL12MX_GPIO_Initv+0xfc>)
 8004364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004366:	4a30      	ldr	r2, [pc, #192]	; (8004428 <_ZL12MX_GPIO_Initv+0xfc>)
 8004368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800436c:	6313      	str	r3, [r2, #48]	; 0x30
 800436e:	4b2e      	ldr	r3, [pc, #184]	; (8004428 <_ZL12MX_GPIO_Initv+0xfc>)
 8004370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800437a:	2300      	movs	r3, #0
 800437c:	60bb      	str	r3, [r7, #8]
 800437e:	4b2a      	ldr	r3, [pc, #168]	; (8004428 <_ZL12MX_GPIO_Initv+0xfc>)
 8004380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004382:	4a29      	ldr	r2, [pc, #164]	; (8004428 <_ZL12MX_GPIO_Initv+0xfc>)
 8004384:	f043 0301 	orr.w	r3, r3, #1
 8004388:	6313      	str	r3, [r2, #48]	; 0x30
 800438a:	4b27      	ldr	r3, [pc, #156]	; (8004428 <_ZL12MX_GPIO_Initv+0xfc>)
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	60bb      	str	r3, [r7, #8]
 8004394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004396:	2300      	movs	r3, #0
 8004398:	607b      	str	r3, [r7, #4]
 800439a:	4b23      	ldr	r3, [pc, #140]	; (8004428 <_ZL12MX_GPIO_Initv+0xfc>)
 800439c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439e:	4a22      	ldr	r2, [pc, #136]	; (8004428 <_ZL12MX_GPIO_Initv+0xfc>)
 80043a0:	f043 0302 	orr.w	r3, r3, #2
 80043a4:	6313      	str	r3, [r2, #48]	; 0x30
 80043a6:	4b20      	ldr	r3, [pc, #128]	; (8004428 <_ZL12MX_GPIO_Initv+0xfc>)
 80043a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	607b      	str	r3, [r7, #4]
 80043b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ssel1_Pin|LD2_Pin|ssel2_Pin, GPIO_PIN_RESET);
 80043b2:	2200      	movs	r2, #0
 80043b4:	f44f 6186 	mov.w	r1, #1072	; 0x430
 80043b8:	481c      	ldr	r0, [pc, #112]	; (800442c <_ZL12MX_GPIO_Initv+0x100>)
 80043ba:	f004 faff 	bl	80089bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(reset_shields_GPIO_Port, reset_shields_Pin, GPIO_PIN_RESET);
 80043be:	2200      	movs	r2, #0
 80043c0:	2120      	movs	r1, #32
 80043c2:	481b      	ldr	r0, [pc, #108]	; (8004430 <_ZL12MX_GPIO_Initv+0x104>)
 80043c4:	f004 fafa 	bl	80089bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80043c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80043ce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80043d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d4:	2300      	movs	r3, #0
 80043d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80043d8:	f107 0314 	add.w	r3, r7, #20
 80043dc:	4619      	mov	r1, r3
 80043de:	4815      	ldr	r0, [pc, #84]	; (8004434 <_ZL12MX_GPIO_Initv+0x108>)
 80043e0:	f004 f958 	bl	8008694 <HAL_GPIO_Init>

  /*Configure GPIO pins : ssel1_Pin LD2_Pin ssel2_Pin */
  GPIO_InitStruct.Pin = ssel1_Pin|LD2_Pin|ssel2_Pin;
 80043e4:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80043e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043ea:	2301      	movs	r3, #1
 80043ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ee:	2300      	movs	r3, #0
 80043f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043f2:	2300      	movs	r3, #0
 80043f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043f6:	f107 0314 	add.w	r3, r7, #20
 80043fa:	4619      	mov	r1, r3
 80043fc:	480b      	ldr	r0, [pc, #44]	; (800442c <_ZL12MX_GPIO_Initv+0x100>)
 80043fe:	f004 f949 	bl	8008694 <HAL_GPIO_Init>

  /*Configure GPIO pin : reset_shields_Pin */
  GPIO_InitStruct.Pin = reset_shields_Pin;
 8004402:	2320      	movs	r3, #32
 8004404:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004406:	2301      	movs	r3, #1
 8004408:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800440a:	2300      	movs	r3, #0
 800440c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800440e:	2300      	movs	r3, #0
 8004410:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(reset_shields_GPIO_Port, &GPIO_InitStruct);
 8004412:	f107 0314 	add.w	r3, r7, #20
 8004416:	4619      	mov	r1, r3
 8004418:	4805      	ldr	r0, [pc, #20]	; (8004430 <_ZL12MX_GPIO_Initv+0x104>)
 800441a:	f004 f93b 	bl	8008694 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800441e:	bf00      	nop
 8004420:	3728      	adds	r7, #40	; 0x28
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	40023800 	.word	0x40023800
 800442c:	40020000 	.word	0x40020000
 8004430:	40020400 	.word	0x40020400
 8004434:	40020800 	.word	0x40020800

08004438 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a05      	ldr	r2, [pc, #20]	; (8004458 <HAL_UART_TxCpltCallback+0x20>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d102      	bne.n	800444e <HAL_UART_TxCpltCallback+0x16>
	{
		msg_handler.process_txclpt_callback();
 8004448:	4804      	ldr	r0, [pc, #16]	; (800445c <HAL_UART_TxCpltCallback+0x24>)
 800444a:	f000 fd4a 	bl	8004ee2 <_ZN10MsgHandler23process_txclpt_callbackEv>
	}


}
 800444e:	bf00      	nop
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	20000378 	.word	0x20000378
 800445c:	20000480 	.word	0x20000480

08004460 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
	if( huart == &huart2)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a05      	ldr	r2, [pc, #20]	; (8004480 <HAL_UART_RxCpltCallback+0x20>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d102      	bne.n	8004476 <HAL_UART_RxCpltCallback+0x16>
	{
		msg_handler.process_rxclpt_callback();
 8004470:	4804      	ldr	r0, [pc, #16]	; (8004484 <HAL_UART_RxCpltCallback+0x24>)
 8004472:	f000 fdba 	bl	8004fea <_ZN10MsgHandler23process_rxclpt_callbackEv>
	}

}
 8004476:	bf00      	nop
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	20000378 	.word	0x20000378
 8004484:	20000480 	.word	0x20000480

08004488 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim2 )
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a06      	ldr	r2, [pc, #24]	; (80044ac <HAL_TIM_PeriodElapsedCallback+0x24>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d105      	bne.n	80044a4 <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
	  timer_20_ms = true;
 8004498:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800449a:	2201      	movs	r2, #1
 800449c:	701a      	strb	r2, [r3, #0]
	  msg_handler.process_timeout();
 800449e:	4805      	ldr	r0, [pc, #20]	; (80044b4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80044a0:	f001 f9be 	bl	8005820 <_ZN10MsgHandler15process_timeoutEv>
  }
}
 80044a4:	bf00      	nop
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	20000330 	.word	0x20000330
 80044b0:	200004b8 	.word	0x200004b8
 80044b4:	20000480 	.word	0x20000480

080044b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80044bc:	b672      	cpsid	i
}
 80044be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80044c0:	e7fe      	b.n	80044c0 <Error_Handler+0x8>

080044c2 <_ZNSt15__uniq_ptr_dataIhSt14default_deleteIA_hELb1ELb1EECI1St15__uniq_ptr_implIhS2_EEPh>:
  template <typename _Tp, typename _Dp,
	    bool = is_move_constructible<_Dp>::value,
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b082      	sub	sp, #8
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
 80044ca:	6039      	str	r1, [r7, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	4611      	mov	r1, r2
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 f8f5 	bl	80046c2 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>:
	       typename _Vp = _Dp,
	       typename = _DeleterConstraint<_Vp>,
	       typename = typename enable_if<
                 __safe_conversion_raw<_Up>::value, bool>::type>
	explicit
	unique_ptr(_Up __p) noexcept
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b082      	sub	sp, #8
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6839      	ldr	r1, [r7, #0]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff ffe6 	bl	80044c2 <_ZNSt15__uniq_ptr_dataIhSt14default_deleteIA_hELb1ELb1EECI1St15__uniq_ptr_implIhS2_EEPh>
        { }
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4618      	mov	r0, r3
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED1Ev>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
	{ }

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
      {
	auto& __ptr = _M_t._M_ptr();
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4618      	mov	r0, r3
 800450c:	f000 f8ed 	bl	80046ea <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 8004510:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d009      	beq.n	800452e <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED1Ev+0x2e>
	  get_deleter()(__ptr);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f8f2 	bl	8004704 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EE11get_deleterEv>
 8004520:	4602      	mov	r2, r0
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4619      	mov	r1, r3
 8004528:	4610      	mov	r0, r2
 800452a:	f000 f8f8 	bl	800471e <_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS0_E5valueEvE4typeEPS5_>
	__ptr = pointer();
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]
      }
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>:

      // Observers.

      /// Access an element of owned array.
      typename std::add_lvalue_reference<element_type>::type
      operator[](size_t __i) const
 800453e:	b580      	push	{r7, lr}
 8004540:	b082      	sub	sp, #8
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
 8004546:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_assert(get() != pointer());
 8004548:	2300      	movs	r3, #0
 800454a:	2b00      	cmp	r3, #0
	return get()[__i];
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f807 	bl	8004560 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 8004552:	4602      	mov	r2, r0
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	4413      	add	r3, r2
      }
 8004558:	4618      	mov	r0, r3
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>:

      /// Return the stored pointer.
      pointer
      get() const noexcept
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4618      	mov	r0, r3
 800456c:	f000 f8e6 	bl	800473c <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 8004570:	4603      	mov	r3, r0
 8004572:	4618      	mov	r0, r3
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <_ZNSt5tupleIJP12PayloadClassSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 800457a:	b580      	push	{r7, lr}
 800457c:	b082      	sub	sp, #8
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4618      	mov	r0, r3
 8004586:	f000 f8e7 	bl	8004758 <_ZNSt11_Tuple_implILj0EJP12PayloadClassSt14default_deleteIS0_EEEC1Ev>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4618      	mov	r0, r3
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4618      	mov	r0, r3
 80045a0:	f7ff ffeb 	bl	800457a <_ZNSt5tupleIJP12PayloadClassSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4618      	mov	r0, r3
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <_ZNSt15__uniq_ptr_dataI12PayloadClassSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b082      	sub	sp, #8
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff ffeb 	bl	8004594 <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EEC1Ev>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4618      	mov	r0, r3
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
	: _M_t()
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4618      	mov	r0, r3
 80045da:	f7ff ffe8 	bl	80045ae <_ZNSt15__uniq_ptr_dataI12PayloadClassSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4618      	mov	r0, r3
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80045e8:	b590      	push	{r4, r7, lr}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 f8c0 	bl	8004778 <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE6_M_ptrEv>
 80045f8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00c      	beq.n	800461c <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f8c5 	bl	8004792 <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EE11get_deleterEv>
 8004608:	4604      	mov	r4, r0
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 f8ce 	bl	80047ac <_ZSt4moveIRP12PayloadClassEONSt16remove_referenceIT_E4typeEOS4_>
 8004610:	4603      	mov	r3, r0
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4619      	mov	r1, r3
 8004616:	4620      	mov	r0, r4
 8004618:	f000 f8d3 	bl	80047c2 <_ZNKSt14default_deleteI12PayloadClassEclEPS0_>
	__ptr = pointer();
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]
      }
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4618      	mov	r0, r3
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	bd90      	pop	{r4, r7, pc}

0800462c <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT_IF(
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type()
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f8d5 	bl	80047e4 <_ZNSaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEC1Ev>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff fa86 	bl	8003b4e <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <_ZNSaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f8d1 	bl	80047fc <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEED1Ev>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4618      	mov	r0, r3
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f8d0 	bl	8004812 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE8_M_clearEv>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4618      	mov	r0, r3
 8004676:	f7ff fba7 	bl	8003dc8 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE10_List_implD1Ev>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4618      	mov	r0, r3
 800467e:	3708      	adds	r7, #8
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <_ZNSt10shared_ptrI11AbstractMsgEC1Ev>:
#endif
      /**
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4618      	mov	r0, r3
 8004690:	f000 f8e5 	bl	800485e <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4618      	mov	r0, r3
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 800469e:	b580      	push	{r7, lr}
 80046a0:	b082      	sub	sp, #8
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d004      	beq.n	80046b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff fa6b 	bl	8003b8e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4618      	mov	r0, r3
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b082      	sub	sp, #8
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
 80046ca:	6039      	str	r1, [r7, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 f8d6 	bl	8004880 <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1ILb1ELb1EEEv>
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f808 	bl	80046ea <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 80046da:	4602      	mov	r2, r0
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	6013      	str	r3, [r2, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4618      	mov	r0, r3
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b082      	sub	sp, #8
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 f8d0 	bl	800489a <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80046fa:	4603      	mov	r3, r0
 80046fc:	4618      	mov	r0, r3
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EE11get_deleterEv>:

      /// Return a reference to the stored deleter.
      deleter_type&
      get_deleter() noexcept
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4618      	mov	r0, r3
 8004710:	f000 f8d0 	bl	80048b4 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE10_M_deleterEv>
 8004714:	4603      	mov	r3, r0
 8004716:	4618      	mov	r0, r3
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS0_E5valueEvE4typeEPS5_>:
	operator()(_Up* __ptr) const
 800471e:	b580      	push	{r7, lr}
 8004720:	b082      	sub	sp, #8
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
 8004726:	6039      	str	r1, [r7, #0]
	  delete [] __ptr;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d002      	beq.n	8004734 <_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS0_E5valueEvE4typeEPS5_+0x16>
 800472e:	6838      	ldr	r0, [r7, #0]
 8004730:	f007 fcde 	bl	800c0f0 <_ZdaPv>
	}
 8004734:	bf00      	nop
 8004736:	3708      	adds	r7, #8
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4618      	mov	r0, r3
 8004748:	f000 f8c1 	bl	80048ce <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800474c:	4603      	mov	r3, r0
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4618      	mov	r0, r3
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <_ZNSt11_Tuple_implILj0EJP12PayloadClassSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 f8c1 	bl	80048e8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12PayloadClassEEEC1Ev>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4618      	mov	r0, r3
 800476a:	f000 f8c9 	bl	8004900 <_ZNSt10_Head_baseILj0EP12PayloadClassLb0EEC1Ev>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4618      	mov	r0, r3
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4618      	mov	r0, r3
 8004784:	f000 f8ca 	bl	800491c <_ZSt3getILj0EJP12PayloadClassSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8004788:	4603      	mov	r3, r0
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8004792:	b580      	push	{r7, lr}
 8004794:	b082      	sub	sp, #8
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4618      	mov	r0, r3
 800479e:	f000 f8ca 	bl	8004936 <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE10_M_deleterEv>
 80047a2:	4603      	mov	r3, r0
 80047a4:	4618      	mov	r0, r3
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <_ZSt4moveIRP12PayloadClassEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4618      	mov	r0, r3
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <_ZNKSt14default_deleteI12PayloadClassEclEPS0_>:
      operator()(_Tp* __ptr) const
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b082      	sub	sp, #8
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d004      	beq.n	80047dc <_ZNKSt14default_deleteI12PayloadClassEclEPS0_+0x1a>
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	3204      	adds	r2, #4
 80047d6:	6812      	ldr	r2, [r2, #0]
 80047d8:	4618      	mov	r0, r3
 80047da:	4790      	blx	r2
      }
 80047dc:	bf00      	nop
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <_ZNSaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 f8af 	bl	8004950 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEC1Ev>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4618      	mov	r0, r3
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4618      	mov	r0, r3
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE8_M_clearEv>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER

  template<typename _Tp, typename _Alloc>
    void
    _List_base<_Tp, _Alloc>::
 8004812:	b580      	push	{r7, lr}
 8004814:	b086      	sub	sp, #24
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
    _M_clear() _GLIBCXX_NOEXCEPT
    {
      typedef _List_node<_Tp>  _Node;
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 8004820:	e014      	b.n	800484c <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE8_M_clearEv+0x3a>
	{
	  _Node* __tmp = static_cast<_Node*>(__cur);
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 800482c:	6938      	ldr	r0, [r7, #16]
 800482e:	f000 f89a 	bl	8004966 <_ZNSt10_List_nodeISt10shared_ptrI11AbstractMsgEE9_M_valptrEv>
 8004832:	60f8      	str	r0, [r7, #12]
#if __cplusplus >= 201103L
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 f8a4 	bl	8004982 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE21_M_get_Node_allocatorEv>
 800483a:	4603      	mov	r3, r0
 800483c:	68f9      	ldr	r1, [r7, #12]
 800483e:	4618      	mov	r0, r3
 8004840:	f000 f8aa 	bl	8004998 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE7destroyIS3_EEvRS5_PT_>
#else
	  _Tp_alloc_type(_M_get_Node_allocator()).destroy(__val);
#endif
	  _M_put_node(__tmp);
 8004844:	6939      	ldr	r1, [r7, #16]
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f8b3 	bl	80049b2 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_put_nodeEPSt10_List_nodeIS3_E>
      while (__cur != &_M_impl._M_node)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	429a      	cmp	r2, r3
 8004852:	d1e6      	bne.n	8004822 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE8_M_clearEv+0x10>
	}
    }
 8004854:	bf00      	nop
 8004856:	bf00      	nop
 8004858:	3718      	adds	r7, #24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 800485e:	b580      	push	{r7, lr}
 8004860:	b082      	sub	sp, #8
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3304      	adds	r3, #4
 8004870:	4618      	mov	r0, r3
 8004872:	f000 f8ad 	bl	80049d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4618      	mov	r0, r3
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1ILb1ELb1EEEv>:
	tuple()
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4618      	mov	r0, r3
 800488c:	f000 f8ae 	bl	80049ec <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4618      	mov	r0, r3
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800489a:	b580      	push	{r7, lr}
 800489c:	b082      	sub	sp, #8
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 f8b1 	bl	8004a0c <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80048aa:	4603      	mov	r3, r0
 80048ac:	4618      	mov	r0, r3
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 f8b0 	bl	8004a24 <_ZSt3getILj1EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80048c4:	4603      	mov	r3, r0
 80048c6:	4618      	mov	r0, r3
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b082      	sub	sp, #8
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 f8af 	bl	8004a3c <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80048de:	4603      	mov	r3, r0
 80048e0:	4618      	mov	r0, r3
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12PayloadClassEEEC1Ev>:
      _Tuple_impl()
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f8af 	bl	8004a54 <_ZNSt10_Head_baseILj1ESt14default_deleteI12PayloadClassELb1EEC1Ev>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4618      	mov	r0, r3
 80048fa:	3708      	adds	r7, #8
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <_ZNSt10_Head_baseILj0EP12PayloadClassLb0EEC1Ev>:
      constexpr _Head_base()
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4618      	mov	r0, r3
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <_ZSt3getILj0EJP12PayloadClassSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4618      	mov	r0, r3
 8004928:	f000 f89f 	bl	8004a6a <_ZSt12__get_helperILj0EP12PayloadClassJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800492c:	4603      	mov	r3, r0
 800492e:	4618      	mov	r0, r3
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE10_M_deleterEv>:
 8004936:	b580      	push	{r7, lr}
 8004938:	b082      	sub	sp, #8
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4618      	mov	r0, r3
 8004942:	f000 f89e 	bl	8004a82 <_ZSt3getILj1EJP12PayloadClassSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8004946:	4603      	mov	r3, r0
 8004948:	4618      	mov	r0, r3
 800494a:	3708      	adds	r7, #8
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4618      	mov	r0, r3
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <_ZNSt10_List_nodeISt10shared_ptrI11AbstractMsgEE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 8004966:	b580      	push	{r7, lr}
 8004968:	b082      	sub	sp, #8
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3308      	adds	r3, #8
 8004972:	4618      	mov	r0, r3
 8004974:	f000 f891 	bl	8004a9a <_ZN9__gnu_cxx16__aligned_membufISt10shared_ptrI11AbstractMsgEE6_M_ptrEv>
 8004978:	4603      	mov	r3, r0
 800497a:	4618      	mov	r0, r3
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4618      	mov	r0, r3
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE7destroyIS3_EEvRS5_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 80049a2:	6839      	ldr	r1, [r7, #0]
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f884 	bl	8004ab2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE7destroyIS4_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 80049aa:	bf00      	nop
 80049ac:	3708      	adds	r7, #8
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_put_nodeEPSt10_List_nodeIS3_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b082      	sub	sp, #8
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
 80049ba:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	6839      	ldr	r1, [r7, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 f881 	bl	8004aca <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE10deallocateERS5_PS4_j>
 80049c8:	bf00      	nop
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	601a      	str	r2, [r3, #0]
      { }
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4618      	mov	r0, r3
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f877 	bl	8004ae8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f000 f87f 	bl	8004b00 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4618      	mov	r0, r3
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f881 	bl	8004b1c <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <_ZSt3getILj1EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f882 	bl	8004b36 <_ZSt12__get_helperILj1ESt14default_deleteIA_hEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8004a32:	4603      	mov	r3, r0
 8004a34:	4618      	mov	r0, r3
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f882 	bl	8004b4e <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <_ZNSt10_Head_baseILj1ESt14default_deleteI12PayloadClassELb1EEC1Ev>:
      constexpr _Head_base()
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <_ZSt12__get_helperILj0EP12PayloadClassJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b082      	sub	sp, #8
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f878 	bl	8004b68 <_ZNSt11_Tuple_implILj0EJP12PayloadClassSt14default_deleteIS0_EEE7_M_headERS4_>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3708      	adds	r7, #8
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <_ZSt3getILj1EJP12PayloadClassSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b082      	sub	sp, #8
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f879 	bl	8004b82 <_ZSt12__get_helperILj1ESt14default_deleteI12PayloadClassEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8004a90:	4603      	mov	r3, r0
 8004a92:	4618      	mov	r0, r3
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <_ZN9__gnu_cxx16__aligned_membufISt10shared_ptrI11AbstractMsgEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b082      	sub	sp, #8
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f879 	bl	8004b9a <_ZN9__gnu_cxx16__aligned_membufISt10shared_ptrI11AbstractMsgEE7_M_addrEv>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE7destroyIS4_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b082      	sub	sp, #8
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8004abc:	6838      	ldr	r0, [r7, #0]
 8004abe:	f7ff f9c4 	bl	8003e4a <_ZNSt10shared_ptrI11AbstractMsgED1Ev>
 8004ac2:	bf00      	nop
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE10deallocateERS5_PS4_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b084      	sub	sp, #16
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	60f8      	str	r0, [r7, #12]
 8004ad2:	60b9      	str	r1, [r7, #8]
 8004ad4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	68b9      	ldr	r1, [r7, #8]
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 f868 	bl	8004bb0 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE10deallocateEPS5_j>
 8004ae0:	bf00      	nop
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>:
      _Tuple_impl()
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 f86d 	bl	8004bd0 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4618      	mov	r0, r3
 8004afa:	3708      	adds	r7, #8
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>:
      constexpr _Head_base()
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4618      	mov	r0, r3
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 f85d 	bl	8004be6 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <_ZSt12__get_helperILj1ESt14default_deleteIA_hEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b082      	sub	sp, #8
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f85c 	bl	8004bfc <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEE7_M_headERS3_>
 8004b44:	4603      	mov	r3, r0
 8004b46:	4618      	mov	r0, r3
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b082      	sub	sp, #8
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 f85b 	bl	8004c14 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	4618      	mov	r0, r3
 8004b62:	3708      	adds	r7, #8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <_ZNSt11_Tuple_implILj0EJP12PayloadClassSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 f859 	bl	8004c2a <_ZNSt10_Head_baseILj0EP12PayloadClassLb0EE7_M_headERS2_>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3708      	adds	r7, #8
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <_ZSt12__get_helperILj1ESt14default_deleteI12PayloadClassEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b082      	sub	sp, #8
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f858 	bl	8004c40 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12PayloadClassEEE7_M_headERS3_>
 8004b90:	4603      	mov	r3, r0
 8004b92:	4618      	mov	r0, r3
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <_ZN9__gnu_cxx16__aligned_membufISt10shared_ptrI11AbstractMsgEE7_M_addrEv>:
      _M_addr() noexcept
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	011b      	lsls	r3, r3, #4
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	68b8      	ldr	r0, [r7, #8]
 8004bc4:	f007 fa92 	bl	800c0ec <_ZdlPvj>
      }
 8004bc8:	bf00      	nop
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>:
      constexpr _Head_base()
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 f827 	bl	8004c58 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EE7_M_headERS3_>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3708      	adds	r7, #8
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <_ZNSt10_Head_baseILj0EP12PayloadClassLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4618      	mov	r0, r3
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12PayloadClassEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f810 	bl	8004c6e <_ZNSt10_Head_baseILj1ESt14default_deleteI12PayloadClassELb1EE7_M_headERS3_>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	4618      	mov	r0, r3
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4618      	mov	r0, r3
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <_ZNSt10_Head_baseILj1ESt14default_deleteI12PayloadClassELb1EE7_M_headERS3_>:
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <_ZN6AckMsgD1Ev>:
		~AckMsg() = default;
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	4a08      	ldr	r2, [pc, #32]	; (8004cb0 <_ZN6AckMsgD1Ev+0x2c>)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	3304      	adds	r3, #4
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7ff fc32 	bl	8004500 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED1Ev>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fe ffa6 	bl	8003bf0 <_ZN11AbstractMsgD1Ev>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3708      	adds	r7, #8
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	0800f540 	.word	0x0800f540

08004cb4 <_ZN6AckMsgD0Ev>:
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7ff ffe1 	bl	8004c84 <_ZN6AckMsgD1Ev>
 8004cc2:	2108      	movs	r1, #8
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f007 fa11 	bl	800c0ec <_ZdlPvj>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3708      	adds	r7, #8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <_ZN11HeaderClassD1Ev>:
		~HeaderClass() = default;
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	4a08      	ldr	r2, [pc, #32]	; (8004d00 <_ZN11HeaderClassD1Ev+0x2c>)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	3304      	adds	r3, #4
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7ff fc0a 	bl	8004500 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED1Ev>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fe ff7e 	bl	8003bf0 <_ZN11AbstractMsgD1Ev>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	0800f55c 	.word	0x0800f55c

08004d04 <_ZN11HeaderClassD0Ev>:
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7ff ffe1 	bl	8004cd4 <_ZN11HeaderClassD1Ev>
 8004d12:	2108      	movs	r1, #8
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f007 f9e9 	bl	800c0ec <_ZdlPvj>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3708      	adds	r7, #8
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <_ZN10MsgHandlerD1Ev>:
		~MsgHandler() = default;
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3330      	adds	r3, #48	; 0x30
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7ff f88a 	bl	8003e4a <_ZNSt10shared_ptrI11AbstractMsgED1Ev>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	3324      	adds	r3, #36	; 0x24
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7ff f86a 	bl	8003e14 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EED1Ev>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3320      	adds	r3, #32
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff fc4f 	bl	80045e8 <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EED1Ev>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	3318      	adds	r3, #24
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff ffc0 	bl	8004cd4 <_ZN11HeaderClassD1Ev>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	3310      	adds	r3, #16
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7ff ff93 	bl	8004c84 <_ZN6AckMsgD1Ev>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	3308      	adds	r3, #8
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7ff ff8e 	bl	8004c84 <_ZN6AckMsgD1Ev>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
	...

08004d74 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d108      	bne.n	8004d96 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d103      	bne.n	8004d96 <_Z41__static_initialization_and_destruction_0ii+0x22>
MsgHandler msg_handler(&huart2);
 8004d8e:	4909      	ldr	r1, [pc, #36]	; (8004db4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004d90:	4809      	ldr	r0, [pc, #36]	; (8004db8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8004d92:	f7ff f867 	bl	8003e64 <_ZN10MsgHandlerC1EP20__UART_HandleTypeDef>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d107      	bne.n	8004dac <_Z41__static_initialization_and_destruction_0ii+0x38>
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d102      	bne.n	8004dac <_Z41__static_initialization_and_destruction_0ii+0x38>
 8004da6:	4804      	ldr	r0, [pc, #16]	; (8004db8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8004da8:	f7ff ffbc 	bl	8004d24 <_ZN10MsgHandlerD1Ev>
}
 8004dac:	bf00      	nop
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	20000378 	.word	0x20000378
 8004db8:	20000480 	.word	0x20000480

08004dbc <_GLOBAL__sub_I_hspi1>:
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004dc4:	2001      	movs	r0, #1
 8004dc6:	f7ff ffd5 	bl	8004d74 <_Z41__static_initialization_and_destruction_0ii>
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <_GLOBAL__sub_D_hspi1>:
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004dd4:	2000      	movs	r0, #0
 8004dd6:	f7ff ffcd 	bl	8004d74 <_Z41__static_initialization_and_destruction_0ii>
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	4618      	mov	r0, r3
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    { ++_M_use_count; }
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	1c5a      	adds	r2, r3, #1
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	605a      	str	r2, [r3, #4]
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
	...

08004e14 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>:
    _S_ti() noexcept _GLIBCXX_VISIBILITY(default)
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
      return reinterpret_cast<const type_info&>(__tag);
 8004e18:	4b02      	ldr	r3, [pc, #8]	; (8004e24 <_ZNSt19_Sp_make_shared_tag5_S_tiEv+0x10>)
    }
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	0800f5d4 	.word	0x0800f5d4

08004e28 <_ZNK12PayloadClass8get_dataEv>:
		uint8_t* get_data() const noexcept override {return _data.get();}
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	3308      	adds	r3, #8
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff fb93 	bl	8004560 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <_ZNK12PayloadClass8get_typeEv>:
		msg_type get_type() const noexcept override {return PayloadClass::payload_msg_type;}
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	4618      	mov	r0, r3
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <_ZNK12PayloadClass13get_data_sizeEv>:
		uint8_t get_data_size() const noexcept override {return _data_size;}
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	791b      	ldrb	r3, [r3, #4]
 8004e66:	4618      	mov	r0, r3
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <_ZN6AckMsgaSERKS_>:
		AckMsg& operator=(const AckMsg& to_copy)
 8004e72:	b590      	push	{r4, r7, lr}
 8004e74:	b085      	sub	sp, #20
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
 8004e7a:	6039      	str	r1, [r7, #0]
			if (this != &to_copy)
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d029      	beq.n	8004ed8 <_ZN6AckMsgaSERKS_+0x66>
				if(to_copy._data)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	3304      	adds	r3, #4
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 fd57 	bl	800593c <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEcvbEv>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d01b      	beq.n	8004ecc <_ZN6AckMsgaSERKS_+0x5a>
					for(int i = 0; i< AckMsg::incoming_msg_size; i ++)
 8004e94:	2300      	movs	r3, #0
 8004e96:	60fb      	str	r3, [r7, #12]
 8004e98:	e014      	b.n	8004ec4 <_ZN6AckMsgaSERKS_+0x52>
						_data[i] = to_copy._data[i];
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	4611      	mov	r1, r2
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7ff fb4b 	bl	800453e <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 8004ea8:	4604      	mov	r4, r0
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	3304      	adds	r3, #4
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	4611      	mov	r1, r2
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7ff fb43 	bl	800453e <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	7822      	ldrb	r2, [r4, #0]
 8004ebc:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i< AckMsg::incoming_msg_size; i ++)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	dde7      	ble.n	8004e9a <_ZN6AckMsgaSERKS_+0x28>
 8004eca:	e005      	b.n	8004ed8 <_ZN6AckMsgaSERKS_+0x66>
					_data.reset();
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3304      	adds	r3, #4
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 fd43 	bl	800595e <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EE5resetEDn>
			return *this;
 8004ed8:	687b      	ldr	r3, [r7, #4]
		}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd90      	pop	{r4, r7, pc}

08004ee2 <_ZN10MsgHandler23process_txclpt_callbackEv>:
#include "msg_handler.hpp"

void MsgHandler::process_txclpt_callback()
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b082      	sub	sp, #8
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]

	if ( !tx_msg_list.empty() && ongoing_fetch == false)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3324      	adds	r3, #36	; 0x24
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 fd42 	bl	8005978 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5emptyEv>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	f083 0301 	eor.w	r3, r3, #1
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d005      	beq.n	8004f0c <_ZN10MsgHandler23process_txclpt_callbackEv+0x2a>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	791b      	ldrb	r3, [r3, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <_ZN10MsgHandler23process_txclpt_callbackEv+0x2a>
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e000      	b.n	8004f0e <_ZN10MsgHandler23process_txclpt_callbackEv+0x2c>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d060      	beq.n	8004fd4 <_ZN10MsgHandler23process_txclpt_callbackEv+0xf2>
	{
		if( tx_msg_list.front()->get_type() == msg_type::payload)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	3324      	adds	r3, #36	; 0x24
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 fd40 	bl	800599c <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 fd4f 	bl	80059c2 <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8004f24:	4603      	mov	r3, r0
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	320c      	adds	r2, #12
 8004f2a:	6812      	ldr	r2, [r2, #0]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	4790      	blx	r2
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	bf0c      	ite	eq
 8004f36:	2301      	moveq	r3, #1
 8004f38:	2300      	movne	r3, #0
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d02e      	beq.n	8004f9e <_ZN10MsgHandler23process_txclpt_callbackEv+0xbc>
		{
			tx_msg_list.pop_front();
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	3324      	adds	r3, #36	; 0x24
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 fd48 	bl	80059da <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE9pop_frontEv>
			if ( !tx_msg_list.empty())
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	3324      	adds	r3, #36	; 0x24
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 fd12 	bl	8005978 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5emptyEv>
 8004f54:	4603      	mov	r3, r0
 8004f56:	f083 0301 	eor.w	r3, r3, #1
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d01a      	beq.n	8004f96 <_ZN10MsgHandler23process_txclpt_callbackEv+0xb4>
			{
				if(tx_msg_list.front()->get_type() == msg_type::header)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3324      	adds	r3, #36	; 0x24
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 fd19 	bl	800599c <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 fd28 	bl	80059c2 <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8004f72:	4603      	mov	r3, r0
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	320c      	adds	r2, #12
 8004f78:	6812      	ldr	r2, [r2, #0]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	4790      	blx	r2
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	bf0c      	ite	eq
 8004f84:	2301      	moveq	r3, #1
 8004f86:	2300      	movne	r3, #0
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d029      	beq.n	8004fe2 <_ZN10MsgHandler23process_txclpt_callbackEv+0x100>
				{
					transmit_front_msg();
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 fa02 	bl	8005398 <_ZN10MsgHandler18transmit_front_msgEv>
	else if (ongoing_fetch)
	{
		receive_data();
	}

}
 8004f94:	e025      	b.n	8004fe2 <_ZN10MsgHandler23process_txclpt_callbackEv+0x100>
				receive_data_header();
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 fa54 	bl	8005444 <_ZN10MsgHandler19receive_data_headerEv>
}
 8004f9c:	e021      	b.n	8004fe2 <_ZN10MsgHandler23process_txclpt_callbackEv+0x100>
		else if ( tx_msg_list.front()->get_type() == msg_type::header)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	3324      	adds	r3, #36	; 0x24
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 fcfa 	bl	800599c <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 fd09 	bl	80059c2 <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	320c      	adds	r2, #12
 8004fb6:	6812      	ldr	r2, [r2, #0]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	4790      	blx	r2
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	bf0c      	ite	eq
 8004fc2:	2301      	moveq	r3, #1
 8004fc4:	2300      	movne	r3, #0
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00a      	beq.n	8004fe2 <_ZN10MsgHandler23process_txclpt_callbackEv+0x100>
			receive_ack();
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 fa1c 	bl	800540a <_ZN10MsgHandler11receive_ackEv>
}
 8004fd2:	e006      	b.n	8004fe2 <_ZN10MsgHandler23process_txclpt_callbackEv+0x100>
	else if (ongoing_fetch)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	791b      	ldrb	r3, [r3, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d002      	beq.n	8004fe2 <_ZN10MsgHandler23process_txclpt_callbackEv+0x100>
		receive_data();
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 fb46 	bl	800566e <_ZN10MsgHandler12receive_dataEv>
}
 8004fe2:	bf00      	nop
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <_ZN10MsgHandler23process_rxclpt_callbackEv>:


void MsgHandler::process_rxclpt_callback()
{
 8004fea:	b590      	push	{r4, r7, lr}
 8004fec:	b087      	sub	sp, #28
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
	if ( !tx_msg_list.empty() && ongoing_fetch == false)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	3324      	adds	r3, #36	; 0x24
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 fcbe 	bl	8005978 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5emptyEv>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	f083 0301 	eor.w	r3, r3, #1
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d005      	beq.n	8005014 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x2a>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	791b      	ldrb	r3, [r3, #4]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d101      	bne.n	8005014 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x2a>
 8005010:	2301      	movs	r3, #1
 8005012:	e000      	b.n	8005016 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x2c>
 8005014:	2300      	movs	r3, #0
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 8092 	beq.w	8005140 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x156>
	{
		if(rxSingleack.get_data()[0] == SerialID::MSG_ACK)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3308      	adds	r3, #8
 8005020:	4618      	mov	r0, r3
 8005022:	f7fe fead 	bl	8003d80 <_ZNK6AckMsg8get_dataEv>
 8005026:	4603      	mov	r3, r0
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	2bff      	cmp	r3, #255	; 0xff
 800502c:	bf0c      	ite	eq
 800502e:	2301      	moveq	r3, #1
 8005030:	2300      	movne	r3, #0
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 8083 	beq.w	8005140 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x156>
		{
			if( tx_msg_list.front()->get_type() == msg_type::header
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	3324      	adds	r3, #36	; 0x24
 800503e:	4618      	mov	r0, r3
 8005040:	f000 fcac 	bl	800599c <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 8005044:	4603      	mov	r3, r0
 8005046:	4618      	mov	r0, r3
 8005048:	f000 fcbb 	bl	80059c2 <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800504c:	4603      	mov	r3, r0
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	320c      	adds	r2, #12
 8005052:	6812      	ldr	r2, [r2, #0]
 8005054:	4618      	mov	r0, r3
 8005056:	4790      	blx	r2
 8005058:	4603      	mov	r3, r0
				&& tx_msg_list.front()->get_data()[1] == rxSingleack.get_data()[1]
				&& tx_msg_list.front()->get_data()[2] == rxSingleack.get_data()[2]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d139      	bne.n	80050d2 <_ZN10MsgHandler23process_rxclpt_callbackEv+0xe8>
				&& tx_msg_list.front()->get_data()[1] == rxSingleack.get_data()[1]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	3324      	adds	r3, #36	; 0x24
 8005062:	4618      	mov	r0, r3
 8005064:	f000 fc9a 	bl	800599c <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 8005068:	4603      	mov	r3, r0
 800506a:	4618      	mov	r0, r3
 800506c:	f000 fca9 	bl	80059c2 <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8005070:	4603      	mov	r3, r0
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	3208      	adds	r2, #8
 8005076:	6812      	ldr	r2, [r2, #0]
 8005078:	4618      	mov	r0, r3
 800507a:	4790      	blx	r2
 800507c:	4603      	mov	r3, r0
 800507e:	3301      	adds	r3, #1
 8005080:	781c      	ldrb	r4, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	3308      	adds	r3, #8
 8005086:	4618      	mov	r0, r3
 8005088:	f7fe fe7a 	bl	8003d80 <_ZNK6AckMsg8get_dataEv>
 800508c:	4603      	mov	r3, r0
 800508e:	3301      	adds	r3, #1
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	429c      	cmp	r4, r3
 8005094:	d11d      	bne.n	80050d2 <_ZN10MsgHandler23process_rxclpt_callbackEv+0xe8>
				&& tx_msg_list.front()->get_data()[2] == rxSingleack.get_data()[2]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	3324      	adds	r3, #36	; 0x24
 800509a:	4618      	mov	r0, r3
 800509c:	f000 fc7e 	bl	800599c <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 80050a0:	4603      	mov	r3, r0
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 fc8d 	bl	80059c2 <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80050a8:	4603      	mov	r3, r0
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	3208      	adds	r2, #8
 80050ae:	6812      	ldr	r2, [r2, #0]
 80050b0:	4618      	mov	r0, r3
 80050b2:	4790      	blx	r2
 80050b4:	4603      	mov	r3, r0
 80050b6:	3302      	adds	r3, #2
 80050b8:	781c      	ldrb	r4, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	3308      	adds	r3, #8
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fe fe5e 	bl	8003d80 <_ZNK6AckMsg8get_dataEv>
 80050c4:	4603      	mov	r3, r0
 80050c6:	3302      	adds	r3, #2
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	429c      	cmp	r4, r3
 80050cc:	d101      	bne.n	80050d2 <_ZN10MsgHandler23process_rxclpt_callbackEv+0xe8>
 80050ce:	2301      	movs	r3, #1
 80050d0:	e000      	b.n	80050d4 <_ZN10MsgHandler23process_rxclpt_callbackEv+0xea>
 80050d2:	2300      	movs	r3, #0
			if( tx_msg_list.front()->get_type() == msg_type::header
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 80af 	beq.w	8005238 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x24e>
			)
			{
				tx_msg_list.pop_front();
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	3324      	adds	r3, #36	; 0x24
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 fc7b 	bl	80059da <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE9pop_frontEv>
				if( tx_msg_list.front()->get_type() == msg_type::payload)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	3324      	adds	r3, #36	; 0x24
 80050e8:	4618      	mov	r0, r3
 80050ea:	f000 fc57 	bl	800599c <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 80050ee:	4603      	mov	r3, r0
 80050f0:	4618      	mov	r0, r3
 80050f2:	f000 fc66 	bl	80059c2 <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80050f6:	4603      	mov	r3, r0
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	320c      	adds	r2, #12
 80050fc:	6812      	ldr	r2, [r2, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	4790      	blx	r2
 8005102:	4603      	mov	r3, r0
 8005104:	2b01      	cmp	r3, #1
 8005106:	bf0c      	ite	eq
 8005108:	2301      	moveq	r3, #1
 800510a:	2300      	movne	r3, #0
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d002      	beq.n	8005118 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x12e>
				{
					transmit_front_msg();
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f940 	bl	8005398 <_ZN10MsgHandler18transmit_front_msgEv>
				}
				rxSingleack = AckMsg();
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f103 0408 	add.w	r4, r3, #8
 800511e:	f107 030c 	add.w	r3, r7, #12
 8005122:	4618      	mov	r0, r3
 8005124:	f7fe fdf4 	bl	8003d10 <_ZN6AckMsgC1Ev>
 8005128:	f107 030c 	add.w	r3, r7, #12
 800512c:	4619      	mov	r1, r3
 800512e:	4620      	mov	r0, r4
 8005130:	f7ff fe9f 	bl	8004e72 <_ZN6AckMsgaSERKS_>
 8005134:	f107 030c 	add.w	r3, r7, #12
 8005138:	4618      	mov	r0, r3
 800513a:	f7ff fda3 	bl	8004c84 <_ZN6AckMsgD1Ev>

			}
			return;
 800513e:	e07b      	b.n	8005238 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x24e>
		}
	}
	if(rxHeader.get_data()[0] == SerialID::MSG_START && ongoing_fetch == false)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	3318      	adds	r3, #24
 8005144:	4618      	mov	r0, r3
 8005146:	f7fe fdbf 	bl	8003cc8 <_ZNK11HeaderClass8get_dataEv>
 800514a:	4603      	mov	r3, r0
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	2bfe      	cmp	r3, #254	; 0xfe
 8005150:	d105      	bne.n	800515e <_ZN10MsgHandler23process_rxclpt_callbackEv+0x174>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	791b      	ldrb	r3, [r3, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <_ZN10MsgHandler23process_rxclpt_callbackEv+0x174>
 800515a:	2301      	movs	r3, #1
 800515c:	e000      	b.n	8005160 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x176>
 800515e:	2300      	movs	r3, #0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d028      	beq.n	80051b6 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x1cc>
	{
		uint8_t msg_id = rxHeader.get_data()[1];
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	3318      	adds	r3, #24
 8005168:	4618      	mov	r0, r3
 800516a:	f7fe fdad 	bl	8003cc8 <_ZNK11HeaderClass8get_dataEv>
 800516e:	4603      	mov	r3, r0
 8005170:	785b      	ldrb	r3, [r3, #1]
 8005172:	757b      	strb	r3, [r7, #21]
		uint8_t msg_len = rxHeader.get_data()[2];
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	3318      	adds	r3, #24
 8005178:	4618      	mov	r0, r3
 800517a:	f7fe fda5 	bl	8003cc8 <_ZNK11HeaderClass8get_dataEv>
 800517e:	4603      	mov	r3, r0
 8005180:	789b      	ldrb	r3, [r3, #2]
 8005182:	753b      	strb	r3, [r7, #20]
		switch (msg_id) {
 8005184:	7d7b      	ldrb	r3, [r7, #21]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d002      	beq.n	8005190 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x1a6>
 800518a:	2b01      	cmp	r3, #1
 800518c:	d009      	beq.n	80051a2 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x1b8>
					ongoing_fetch = true;
					ack_msg_data_1();
				}
				break;
			default:
				break;
 800518e:	e056      	b.n	800523e <_ZN10MsgHandler23process_rxclpt_callbackEv+0x254>
				ongoing_fetch = true;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	711a      	strb	r2, [r3, #4]
				ack_msg_print(msg_len);
 8005196:	7d3b      	ldrb	r3, [r7, #20]
 8005198:	4619      	mov	r1, r3
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f9eb 	bl	8005576 <_ZN10MsgHandler13ack_msg_printEh>
				break;
 80051a0:	e04d      	b.n	800523e <_ZN10MsgHandler23process_rxclpt_callbackEv+0x254>
				if(msg_len == sizeof(float))
 80051a2:	7d3b      	ldrb	r3, [r7, #20]
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	d149      	bne.n	800523c <_ZN10MsgHandler23process_rxclpt_callbackEv+0x252>
					ongoing_fetch = true;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	711a      	strb	r2, [r3, #4]
					ack_msg_data_1();
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f98c 	bl	80054cc <_ZN10MsgHandler14ack_msg_data_1Ev>
				break;
 80051b4:	e042      	b.n	800523c <_ZN10MsgHandler23process_rxclpt_callbackEv+0x252>
		}
	}
	else if ( ongoing_fetch == true)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	791b      	ldrb	r3, [r3, #4]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d13f      	bne.n	800523e <_ZN10MsgHandler23process_rxclpt_callbackEv+0x254>
	{
		uint8_t msg_id = txSingleack.get_data()[1];
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	3310      	adds	r3, #16
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7fe fddc 	bl	8003d80 <_ZNK6AckMsg8get_dataEv>
 80051c8:	4603      	mov	r3, r0
 80051ca:	785b      	ldrb	r3, [r3, #1]
 80051cc:	75fb      	strb	r3, [r7, #23]
		uint8_t msg_len = txSingleack.get_data()[2];
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	3310      	adds	r3, #16
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fe fdd4 	bl	8003d80 <_ZNK6AckMsg8get_dataEv>
 80051d8:	4603      	mov	r3, r0
 80051da:	789b      	ldrb	r3, [r3, #2]
 80051dc:	75bb      	strb	r3, [r7, #22]
		switch (msg_id) {
 80051de:	7dfb      	ldrb	r3, [r7, #23]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d002      	beq.n	80051ea <_ZN10MsgHandler23process_rxclpt_callbackEv+0x200>
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d012      	beq.n	800520e <_ZN10MsgHandler23process_rxclpt_callbackEv+0x224>
				break;
			case SerialID::MSG_DATA_1:
				process_received_msg_data_1(incoming_data->get_data());
				break;
			default:
				break;
 80051e8:	e022      	b.n	8005230 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x246>
				process_received_msg_print(incoming_data->get_data(),msg_len);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	3320      	adds	r3, #32
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 fc03 	bl	80059fa <_ZNKSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EEptEv>
 80051f4:	4603      	mov	r3, r0
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	3208      	adds	r2, #8
 80051fa:	6812      	ldr	r2, [r2, #0]
 80051fc:	4618      	mov	r0, r3
 80051fe:	4790      	blx	r2
 8005200:	4601      	mov	r1, r0
 8005202:	7dbb      	ldrb	r3, [r7, #22]
 8005204:	461a      	mov	r2, r3
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fa8e 	bl	8005728 <_ZN10MsgHandler26process_received_msg_printEPhh>
				break;
 800520c:	e010      	b.n	8005230 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x246>
				process_received_msg_data_1(incoming_data->get_data());
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	3320      	adds	r3, #32
 8005212:	4618      	mov	r0, r3
 8005214:	f000 fbf1 	bl	80059fa <_ZNKSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EEptEv>
 8005218:	4603      	mov	r3, r0
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	3208      	adds	r2, #8
 800521e:	6812      	ldr	r2, [r2, #0]
 8005220:	4618      	mov	r0, r3
 8005222:	4790      	blx	r2
 8005224:	4603      	mov	r3, r0
 8005226:	4619      	mov	r1, r3
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fa49 	bl	80056c0 <_ZN10MsgHandler27process_received_msg_data_1EPh>
				break;
 800522e:	bf00      	nop
		}
		ongoing_fetch = false;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	711a      	strb	r2, [r3, #4]
 8005236:	e002      	b.n	800523e <_ZN10MsgHandler23process_rxclpt_callbackEv+0x254>
			return;
 8005238:	bf00      	nop
 800523a:	e000      	b.n	800523e <_ZN10MsgHandler23process_rxclpt_callbackEv+0x254>
				break;
 800523c:	bf00      	nop

	}


}
 800523e:	371c      	adds	r7, #28
 8005240:	46bd      	mov	sp, r7
 8005242:	bd90      	pop	{r4, r7, pc}

08005244 <_ZNSt12__shared_ptrI11HeaderClassLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	3304      	adds	r3, #4
 8005250:	4618      	mov	r0, r3
 8005252:	f7ff fa24 	bl	800469e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4618      	mov	r0, r3
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <_ZNSt10shared_ptrI11HeaderClassED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4618      	mov	r0, r3
 800526c:	f7ff ffea 	bl	8005244 <_ZNSt12__shared_ptrI11HeaderClassLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4618      	mov	r0, r3
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <_ZNSt12__shared_ptrI12PayloadClassLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 800527a:	b580      	push	{r7, lr}
 800527c:	b082      	sub	sp, #8
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	3304      	adds	r3, #4
 8005286:	4618      	mov	r0, r3
 8005288:	f7ff fa09 	bl	800469e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4618      	mov	r0, r3
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <_ZNSt10shared_ptrI12PayloadClassED1Ev>:
 8005296:	b580      	push	{r7, lr}
 8005298:	b082      	sub	sp, #8
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7ff ffea 	bl	800527a <_ZNSt12__shared_ptrI12PayloadClassLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4618      	mov	r0, r3
 80052aa:	3708      	adds	r7, #8
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <_ZN10MsgHandler10send_printEPKc>:


void MsgHandler::send_print(const char* msg)
{
 80052b0:	b590      	push	{r4, r7, lr}
 80052b2:	b08d      	sub	sp, #52	; 0x34
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
	if( strlen(msg) < UINT8_MAX)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	4618      	mov	r0, r3
 80052be:	f7fb f807 	bl	80002d0 <strlen>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2bfe      	cmp	r3, #254	; 0xfe
 80052c6:	d861      	bhi.n	800538c <_ZN10MsgHandler10send_printEPKc+0xdc>
	{
		tx_msg_list.push_back(std::make_shared<HeaderClass>(SerialID::MSG_PRINT,strlen(msg)));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7fa fffd 	bl	80002d0 <strlen>
 80052d6:	4603      	mov	r3, r0
 80052d8:	61bb      	str	r3, [r7, #24]
 80052da:	f107 0310 	add.w	r3, r7, #16
 80052de:	f107 0218 	add.w	r2, r7, #24
 80052e2:	492c      	ldr	r1, [pc, #176]	; (8005394 <_ZN10MsgHandler10send_printEPKc+0xe4>)
 80052e4:	4618      	mov	r0, r3
 80052e6:	f000 fb94 	bl	8005a12 <_ZSt11make_sharedI11HeaderClassJRKhjEESt10shared_ptrIT_EDpOT0_>
 80052ea:	f107 0210 	add.w	r2, r7, #16
 80052ee:	f107 0308 	add.w	r3, r7, #8
 80052f2:	4611      	mov	r1, r2
 80052f4:	4618      	mov	r0, r3
 80052f6:	f000 fbaf 	bl	8005a58 <_ZNSt10shared_ptrI11AbstractMsgEC1I11HeaderClassvEEOS_IT_E>
 80052fa:	f107 0308 	add.w	r3, r7, #8
 80052fe:	4619      	mov	r1, r3
 8005300:	4620      	mov	r0, r4
 8005302:	f000 fbbc 	bl	8005a7e <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE9push_backEOS3_>
 8005306:	f107 0308 	add.w	r3, r7, #8
 800530a:	4618      	mov	r0, r3
 800530c:	f7fe fd9d 	bl	8003e4a <_ZNSt10shared_ptrI11AbstractMsgED1Ev>
 8005310:	f107 0310 	add.w	r3, r7, #16
 8005314:	4618      	mov	r0, r3
 8005316:	f7ff ffa3 	bl	8005260 <_ZNSt10shared_ptrI11HeaderClassED1Ev>
		tx_msg_list.push_back(std::make_shared<PayloadClass>(msg,strlen(msg)));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	f7fa ffd4 	bl	80002d0 <strlen>
 8005328:	4603      	mov	r3, r0
 800532a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800532c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005330:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005334:	4639      	mov	r1, r7
 8005336:	4618      	mov	r0, r3
 8005338:	f000 fbb7 	bl	8005aaa <_ZSt11make_sharedI12PayloadClassJRPKcjEESt10shared_ptrIT_EDpOT0_>
 800533c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005340:	f107 031c 	add.w	r3, r7, #28
 8005344:	4611      	mov	r1, r2
 8005346:	4618      	mov	r0, r3
 8005348:	f000 fbd2 	bl	8005af0 <_ZNSt10shared_ptrI11AbstractMsgEC1I12PayloadClassvEEOS_IT_E>
 800534c:	f107 031c 	add.w	r3, r7, #28
 8005350:	4619      	mov	r1, r3
 8005352:	4620      	mov	r0, r4
 8005354:	f000 fb93 	bl	8005a7e <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE9push_backEOS3_>
 8005358:	f107 031c 	add.w	r3, r7, #28
 800535c:	4618      	mov	r0, r3
 800535e:	f7fe fd74 	bl	8003e4a <_ZNSt10shared_ptrI11AbstractMsgED1Ev>
 8005362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005366:	4618      	mov	r0, r3
 8005368:	f7ff ff95 	bl	8005296 <_ZNSt10shared_ptrI12PayloadClassED1Ev>
		if( tx_msg_list.size() == 2)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	3324      	adds	r3, #36	; 0x24
 8005370:	4618      	mov	r0, r3
 8005372:	f000 fbd0 	bl	8005b16 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE4sizeEv>
 8005376:	4603      	mov	r3, r0
 8005378:	2b02      	cmp	r3, #2
 800537a:	bf0c      	ite	eq
 800537c:	2301      	moveq	r3, #1
 800537e:	2300      	movne	r3, #0
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d002      	beq.n	800538c <_ZN10MsgHandler10send_printEPKc+0xdc>
		{
			transmit_front_msg();
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f806 	bl	8005398 <_ZN10MsgHandler18transmit_front_msgEv>
		}
	}

}
 800538c:	bf00      	nop
 800538e:	3734      	adds	r7, #52	; 0x34
 8005390:	46bd      	mov	sp, r7
 8005392:	bd90      	pop	{r4, r7, pc}
 8005394:	0800f5dc 	.word	0x0800f5dc

08005398 <_ZN10MsgHandler18transmit_front_msgEv>:
	}

}

void MsgHandler::transmit_front_msg()
{
 8005398:	b5b0      	push	{r4, r5, r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
	if(ongoing_fetch == false)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	791b      	ldrb	r3, [r3, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d104      	bne.n	80053b2 <_ZN10MsgHandler18transmit_front_msgEv+0x1a>
	{
		HAL_UART_AbortReceive(huart);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4618      	mov	r0, r3
 80053ae:	f005 fc9c 	bl	800acea <HAL_UART_AbortReceive>
	}
	HAL_UART_Transmit_DMA(huart, (uint8_t*)tx_msg_list.front()->get_data(), tx_msg_list.front()->get_data_size());
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681c      	ldr	r4, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	3324      	adds	r3, #36	; 0x24
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 faee 	bl	800599c <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 80053c0:	4603      	mov	r3, r0
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 fafd 	bl	80059c2 <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80053c8:	4603      	mov	r3, r0
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	3208      	adds	r2, #8
 80053ce:	6812      	ldr	r2, [r2, #0]
 80053d0:	4618      	mov	r0, r3
 80053d2:	4790      	blx	r2
 80053d4:	4605      	mov	r5, r0
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	3324      	adds	r3, #36	; 0x24
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 fade 	bl	800599c <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 80053e0:	4603      	mov	r3, r0
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 faed 	bl	80059c2 <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80053e8:	4603      	mov	r3, r0
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	3210      	adds	r2, #16
 80053ee:	6812      	ldr	r2, [r2, #0]
 80053f0:	4618      	mov	r0, r3
 80053f2:	4790      	blx	r2
 80053f4:	4603      	mov	r3, r0
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	461a      	mov	r2, r3
 80053fa:	4629      	mov	r1, r5
 80053fc:	4620      	mov	r0, r4
 80053fe:	f005 fbdf 	bl	800abc0 <HAL_UART_Transmit_DMA>
}
 8005402:	bf00      	nop
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bdb0      	pop	{r4, r5, r7, pc}

0800540a <_ZN10MsgHandler11receive_ackEv>:

void MsgHandler::receive_ack()
{
 800540a:	b5b0      	push	{r4, r5, r7, lr}
 800540c:	b082      	sub	sp, #8
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(huart, rxSingleack.get_data(), rxSingleack.get_data_size());
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681c      	ldr	r4, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	3308      	adds	r3, #8
 800541a:	4618      	mov	r0, r3
 800541c:	f7fe fcb0 	bl	8003d80 <_ZNK6AckMsg8get_dataEv>
 8005420:	4605      	mov	r5, r0
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	3308      	adds	r3, #8
 8005426:	4618      	mov	r0, r3
 8005428:	f7fe fcc3 	bl	8003db2 <_ZNK6AckMsg13get_data_sizeEv>
 800542c:	4603      	mov	r3, r0
 800542e:	b29b      	uxth	r3, r3
 8005430:	461a      	mov	r2, r3
 8005432:	4629      	mov	r1, r5
 8005434:	4620      	mov	r0, r4
 8005436:	f005 fc33 	bl	800aca0 <HAL_UART_Receive_DMA>
}
 800543a:	bf00      	nop
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005444 <_ZN10MsgHandler19receive_data_headerEv>:
void MsgHandler::receive_data_header()
{
 8005444:	b5b0      	push	{r4, r5, r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, GPIO_PinState::GPIO_PIN_RESET);
 800544c:	2200      	movs	r2, #0
 800544e:	2120      	movs	r1, #32
 8005450:	480d      	ldr	r0, [pc, #52]	; (8005488 <_ZN10MsgHandler19receive_data_headerEv+0x44>)
 8005452:	f003 fab3 	bl	80089bc <HAL_GPIO_WritePin>
	HAL_UART_Receive_DMA(huart, rxHeader.get_data(), rxHeader.get_data_size());
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681c      	ldr	r4, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	3318      	adds	r3, #24
 800545e:	4618      	mov	r0, r3
 8005460:	f7fe fc32 	bl	8003cc8 <_ZNK11HeaderClass8get_dataEv>
 8005464:	4605      	mov	r5, r0
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	3318      	adds	r3, #24
 800546a:	4618      	mov	r0, r3
 800546c:	f7fe fc45 	bl	8003cfa <_ZNK11HeaderClass13get_data_sizeEv>
 8005470:	4603      	mov	r3, r0
 8005472:	b29b      	uxth	r3, r3
 8005474:	461a      	mov	r2, r3
 8005476:	4629      	mov	r1, r5
 8005478:	4620      	mov	r0, r4
 800547a:	f005 fc11 	bl	800aca0 <HAL_UART_Receive_DMA>
}
 800547e:	bf00      	nop
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bdb0      	pop	{r4, r5, r7, pc}
 8005486:	bf00      	nop
 8005488:	40020000 	.word	0x40020000

0800548c <_ZNSt15__uniq_ptr_dataI12PayloadClassSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	4611      	mov	r1, r2
 800549c:	4618      	mov	r0, r3
 800549e:	f000 fb74 	bl	8005b8a <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EEaSEOS3_>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4618      	mov	r0, r3
 80054a6:	3708      	adds	r7, #8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EEaSEOS3_>:
      unique_ptr& operator=(unique_ptr&&) = default;
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	4611      	mov	r1, r2
 80054bc:	4618      	mov	r0, r3
 80054be:	f7ff ffe5 	bl	800548c <_ZNSt15__uniq_ptr_dataI12PayloadClassSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4618      	mov	r0, r3
 80054c6:	3708      	adds	r7, #8
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <_ZN10MsgHandler14ack_msg_data_1Ev>:
void MsgHandler::ack_msg_data_1()
{
 80054cc:	b5b0      	push	{r4, r5, r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
	float dummy_data_1 = 0.0;
 80054d4:	f04f 0300 	mov.w	r3, #0
 80054d8:	60bb      	str	r3, [r7, #8]
	incoming_data = std::make_unique<PayloadClass>(&dummy_data_1,sizeof(float));
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f103 0420 	add.w	r4, r3, #32
 80054e0:	f107 0308 	add.w	r3, r7, #8
 80054e4:	613b      	str	r3, [r7, #16]
 80054e6:	2304      	movs	r3, #4
 80054e8:	617b      	str	r3, [r7, #20]
 80054ea:	f107 030c 	add.w	r3, r7, #12
 80054ee:	f107 0214 	add.w	r2, r7, #20
 80054f2:	f107 0110 	add.w	r1, r7, #16
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 fb24 	bl	8005b44 <_ZSt11make_uniqueI12PayloadClassJPfjEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 80054fc:	f107 030c 	add.w	r3, r7, #12
 8005500:	4619      	mov	r1, r3
 8005502:	4620      	mov	r0, r4
 8005504:	f7ff ffd2 	bl	80054ac <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EEaSEOS3_>
 8005508:	f107 030c 	add.w	r3, r7, #12
 800550c:	4618      	mov	r0, r3
 800550e:	f7ff f86b 	bl	80045e8 <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EED1Ev>
	txSingleack.get_data()[0] = SerialID::MSG_ACK;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	3310      	adds	r3, #16
 8005516:	4618      	mov	r0, r3
 8005518:	f7fe fc32 	bl	8003d80 <_ZNK6AckMsg8get_dataEv>
 800551c:	4603      	mov	r3, r0
 800551e:	22ff      	movs	r2, #255	; 0xff
 8005520:	701a      	strb	r2, [r3, #0]
	txSingleack.get_data()[1] = SerialID::MSG_DATA_1;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	3310      	adds	r3, #16
 8005526:	4618      	mov	r0, r3
 8005528:	f7fe fc2a 	bl	8003d80 <_ZNK6AckMsg8get_dataEv>
 800552c:	4603      	mov	r3, r0
 800552e:	3301      	adds	r3, #1
 8005530:	2201      	movs	r2, #1
 8005532:	701a      	strb	r2, [r3, #0]
	txSingleack.get_data()[2] = sizeof(float);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	3310      	adds	r3, #16
 8005538:	4618      	mov	r0, r3
 800553a:	f7fe fc21 	bl	8003d80 <_ZNK6AckMsg8get_dataEv>
 800553e:	4603      	mov	r3, r0
 8005540:	3302      	adds	r3, #2
 8005542:	2204      	movs	r2, #4
 8005544:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(huart, txSingleack.get_data(), txSingleack.get_data_size());
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681c      	ldr	r4, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	3310      	adds	r3, #16
 800554e:	4618      	mov	r0, r3
 8005550:	f7fe fc16 	bl	8003d80 <_ZNK6AckMsg8get_dataEv>
 8005554:	4605      	mov	r5, r0
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	3310      	adds	r3, #16
 800555a:	4618      	mov	r0, r3
 800555c:	f7fe fc29 	bl	8003db2 <_ZNK6AckMsg13get_data_sizeEv>
 8005560:	4603      	mov	r3, r0
 8005562:	b29b      	uxth	r3, r3
 8005564:	461a      	mov	r2, r3
 8005566:	4629      	mov	r1, r5
 8005568:	4620      	mov	r0, r4
 800556a:	f005 fb29 	bl	800abc0 <HAL_UART_Transmit_DMA>

}
 800556e:	bf00      	nop
 8005570:	3718      	adds	r7, #24
 8005572:	46bd      	mov	sp, r7
 8005574:	bdb0      	pop	{r4, r5, r7, pc}

08005576 <_ZN10MsgHandler13ack_msg_printEh>:
void MsgHandler::ack_msg_print(uint8_t msg_len)
{
 8005576:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	460b      	mov	r3, r1
 8005582:	70fb      	strb	r3, [r7, #3]
	txSingleack.get_data()[0] = SerialID::MSG_ACK;
	txSingleack.get_data()[1] = SerialID::MSG_PRINT;
	txSingleack.get_data()[2] = msg_len;
	HAL_UART_Transmit_DMA(huart, txSingleack.get_data(), txSingleack.get_data_size());

}
 8005584:	466b      	mov	r3, sp
 8005586:	461e      	mov	r6, r3
	char dummy_print_msg[msg_len];
 8005588:	78f9      	ldrb	r1, [r7, #3]
 800558a:	460b      	mov	r3, r1
 800558c:	3b01      	subs	r3, #1
 800558e:	617b      	str	r3, [r7, #20]
 8005590:	b2cb      	uxtb	r3, r1
 8005592:	2200      	movs	r2, #0
 8005594:	4698      	mov	r8, r3
 8005596:	4691      	mov	r9, r2
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	f04f 0300 	mov.w	r3, #0
 80055a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055ac:	b2cb      	uxtb	r3, r1
 80055ae:	2200      	movs	r2, #0
 80055b0:	461c      	mov	r4, r3
 80055b2:	4615      	mov	r5, r2
 80055b4:	f04f 0200 	mov.w	r2, #0
 80055b8:	f04f 0300 	mov.w	r3, #0
 80055bc:	00eb      	lsls	r3, r5, #3
 80055be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055c2:	00e2      	lsls	r2, r4, #3
 80055c4:	460b      	mov	r3, r1
 80055c6:	3307      	adds	r3, #7
 80055c8:	08db      	lsrs	r3, r3, #3
 80055ca:	00db      	lsls	r3, r3, #3
 80055cc:	ebad 0d03 	sub.w	sp, sp, r3
 80055d0:	466b      	mov	r3, sp
 80055d2:	3300      	adds	r3, #0
 80055d4:	613b      	str	r3, [r7, #16]
	char *dummy_print_msg_ptr = dummy_print_msg;
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	60bb      	str	r3, [r7, #8]
	incoming_data = std::make_unique<PayloadClass>(dummy_print_msg_ptr,msg_len);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f103 0420 	add.w	r4, r3, #32
 80055e0:	f107 030c 	add.w	r3, r7, #12
 80055e4:	1cfa      	adds	r2, r7, #3
 80055e6:	f107 0108 	add.w	r1, r7, #8
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 fae9 	bl	8005bc2 <_ZSt11make_uniqueI12PayloadClassJRPcRhEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 80055f0:	f107 030c 	add.w	r3, r7, #12
 80055f4:	4619      	mov	r1, r3
 80055f6:	4620      	mov	r0, r4
 80055f8:	f7ff ff58 	bl	80054ac <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EEaSEOS3_>
 80055fc:	f107 030c 	add.w	r3, r7, #12
 8005600:	4618      	mov	r0, r3
 8005602:	f7fe fff1 	bl	80045e8 <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EED1Ev>
	txSingleack.get_data()[0] = SerialID::MSG_ACK;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	3310      	adds	r3, #16
 800560a:	4618      	mov	r0, r3
 800560c:	f7fe fbb8 	bl	8003d80 <_ZNK6AckMsg8get_dataEv>
 8005610:	4603      	mov	r3, r0
 8005612:	22ff      	movs	r2, #255	; 0xff
 8005614:	701a      	strb	r2, [r3, #0]
	txSingleack.get_data()[1] = SerialID::MSG_PRINT;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	3310      	adds	r3, #16
 800561a:	4618      	mov	r0, r3
 800561c:	f7fe fbb0 	bl	8003d80 <_ZNK6AckMsg8get_dataEv>
 8005620:	4603      	mov	r3, r0
 8005622:	3301      	adds	r3, #1
 8005624:	2200      	movs	r2, #0
 8005626:	701a      	strb	r2, [r3, #0]
	txSingleack.get_data()[2] = msg_len;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	3310      	adds	r3, #16
 800562c:	4618      	mov	r0, r3
 800562e:	f7fe fba7 	bl	8003d80 <_ZNK6AckMsg8get_dataEv>
 8005632:	4603      	mov	r3, r0
 8005634:	3302      	adds	r3, #2
 8005636:	78fa      	ldrb	r2, [r7, #3]
 8005638:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(huart, txSingleack.get_data(), txSingleack.get_data_size());
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681c      	ldr	r4, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	3310      	adds	r3, #16
 8005642:	4618      	mov	r0, r3
 8005644:	f7fe fb9c 	bl	8003d80 <_ZNK6AckMsg8get_dataEv>
 8005648:	4605      	mov	r5, r0
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	3310      	adds	r3, #16
 800564e:	4618      	mov	r0, r3
 8005650:	f7fe fbaf 	bl	8003db2 <_ZNK6AckMsg13get_data_sizeEv>
 8005654:	4603      	mov	r3, r0
 8005656:	b29b      	uxth	r3, r3
 8005658:	461a      	mov	r2, r3
 800565a:	4629      	mov	r1, r5
 800565c:	4620      	mov	r0, r4
 800565e:	f005 faaf 	bl	800abc0 <HAL_UART_Transmit_DMA>
 8005662:	46b5      	mov	sp, r6
}
 8005664:	bf00      	nop
 8005666:	371c      	adds	r7, #28
 8005668:	46bd      	mov	sp, r7
 800566a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800566e <_ZN10MsgHandler12receive_dataEv>:

void MsgHandler::receive_data()
{
 800566e:	b5b0      	push	{r4, r5, r7, lr}
 8005670:	b082      	sub	sp, #8
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(huart, incoming_data->get_data(), incoming_data->get_data_size());
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681c      	ldr	r4, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	3320      	adds	r3, #32
 800567e:	4618      	mov	r0, r3
 8005680:	f000 f9bb 	bl	80059fa <_ZNKSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EEptEv>
 8005684:	4603      	mov	r3, r0
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	3208      	adds	r2, #8
 800568a:	6812      	ldr	r2, [r2, #0]
 800568c:	4618      	mov	r0, r3
 800568e:	4790      	blx	r2
 8005690:	4605      	mov	r5, r0
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	3320      	adds	r3, #32
 8005696:	4618      	mov	r0, r3
 8005698:	f000 f9af 	bl	80059fa <_ZNKSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EEptEv>
 800569c:	4603      	mov	r3, r0
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	3210      	adds	r2, #16
 80056a2:	6812      	ldr	r2, [r2, #0]
 80056a4:	4618      	mov	r0, r3
 80056a6:	4790      	blx	r2
 80056a8:	4603      	mov	r3, r0
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	461a      	mov	r2, r3
 80056ae:	4629      	mov	r1, r5
 80056b0:	4620      	mov	r0, r4
 80056b2:	f005 faf5 	bl	800aca0 <HAL_UART_Receive_DMA>
}
 80056b6:	bf00      	nop
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080056c0 <_ZN10MsgHandler27process_received_msg_data_1EPh>:

void MsgHandler::process_received_msg_data_1(uint8_t * data)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b090      	sub	sp, #64	; 0x40
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
	float* float_ptr = reinterpret_cast<float*>(data);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	63fb      	str	r3, [r7, #60]	; 0x3c
	char msg[50];
	sprintf(msg,"received : %f",*float_ptr);
 80056ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7fa ff68 	bl	80005a8 <__aeabi_f2d>
 80056d8:	4602      	mov	r2, r0
 80056da:	460b      	mov	r3, r1
 80056dc:	f107 0008 	add.w	r0, r7, #8
 80056e0:	4906      	ldr	r1, [pc, #24]	; (80056fc <_ZN10MsgHandler27process_received_msg_data_1EPh+0x3c>)
 80056e2:	f007 fbbb 	bl	800ce5c <siprintf>
	send_print(msg);
 80056e6:	f107 0308 	add.w	r3, r7, #8
 80056ea:	4619      	mov	r1, r3
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f7ff fddf 	bl	80052b0 <_ZN10MsgHandler10send_printEPKc>

}
 80056f2:	bf00      	nop
 80056f4:	3740      	adds	r7, #64	; 0x40
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	0800efc8 	.word	0x0800efc8

08005700 <_ZSt3minIiERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	429a      	cmp	r2, r3
 8005714:	da01      	bge.n	800571a <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	e000      	b.n	800571c <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 800571a:	687b      	ldr	r3, [r7, #4]
    }
 800571c:	4618      	mov	r0, r3
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <_ZN10MsgHandler26process_received_msg_printEPhh>:
void MsgHandler::process_received_msg_print(uint8_t * data, uint8_t msg_len)
{
 8005728:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800572c:	b08b      	sub	sp, #44	; 0x2c
 800572e:	af00      	add	r7, sp, #0
 8005730:	60f8      	str	r0, [r7, #12]
 8005732:	60b9      	str	r1, [r7, #8]
 8005734:	4613      	mov	r3, r2
 8005736:	71fb      	strb	r3, [r7, #7]
 	uint8_t max_len = std::min(UINT8_MAX, 50+msg_len);
	char msg[max_len];
	sprintf(msg,"received : %s",charPtr);
	send_print(msg);

}
 8005738:	466b      	mov	r3, sp
 800573a:	461e      	mov	r6, r3
    char* charPtr = reinterpret_cast<char*>(data);
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	627b      	str	r3, [r7, #36]	; 0x24
 	uint8_t max_len = std::min(UINT8_MAX, 50+msg_len);
 8005740:	23ff      	movs	r3, #255	; 0xff
 8005742:	613b      	str	r3, [r7, #16]
 8005744:	79fb      	ldrb	r3, [r7, #7]
 8005746:	3332      	adds	r3, #50	; 0x32
 8005748:	617b      	str	r3, [r7, #20]
 800574a:	f107 0214 	add.w	r2, r7, #20
 800574e:	f107 0310 	add.w	r3, r7, #16
 8005752:	4611      	mov	r1, r2
 8005754:	4618      	mov	r0, r3
 8005756:	f7ff ffd3 	bl	8005700 <_ZSt3minIiERKT_S2_S2_>
 800575a:	4603      	mov	r3, r0
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	char msg[max_len];
 8005762:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8005766:	460b      	mov	r3, r1
 8005768:	3b01      	subs	r3, #1
 800576a:	61fb      	str	r3, [r7, #28]
 800576c:	b2cb      	uxtb	r3, r1
 800576e:	2200      	movs	r2, #0
 8005770:	4698      	mov	r8, r3
 8005772:	4691      	mov	r9, r2
 8005774:	f04f 0200 	mov.w	r2, #0
 8005778:	f04f 0300 	mov.w	r3, #0
 800577c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005780:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005784:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005788:	b2cb      	uxtb	r3, r1
 800578a:	2200      	movs	r2, #0
 800578c:	461c      	mov	r4, r3
 800578e:	4615      	mov	r5, r2
 8005790:	f04f 0200 	mov.w	r2, #0
 8005794:	f04f 0300 	mov.w	r3, #0
 8005798:	00eb      	lsls	r3, r5, #3
 800579a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800579e:	00e2      	lsls	r2, r4, #3
 80057a0:	460b      	mov	r3, r1
 80057a2:	3307      	adds	r3, #7
 80057a4:	08db      	lsrs	r3, r3, #3
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	ebad 0d03 	sub.w	sp, sp, r3
 80057ac:	466b      	mov	r3, sp
 80057ae:	3300      	adds	r3, #0
 80057b0:	61bb      	str	r3, [r7, #24]
	sprintf(msg,"received : %s",charPtr);
 80057b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057b4:	4906      	ldr	r1, [pc, #24]	; (80057d0 <_ZN10MsgHandler26process_received_msg_printEPhh+0xa8>)
 80057b6:	69b8      	ldr	r0, [r7, #24]
 80057b8:	f007 fb50 	bl	800ce5c <siprintf>
	send_print(msg);
 80057bc:	69b9      	ldr	r1, [r7, #24]
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f7ff fd76 	bl	80052b0 <_ZN10MsgHandler10send_printEPKc>
 80057c4:	46b5      	mov	sp, r6
}
 80057c6:	bf00      	nop
 80057c8:	372c      	adds	r7, #44	; 0x2c
 80057ca:	46bd      	mov	sp, r7
 80057cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057d0:	0800efd8 	.word	0x0800efd8

080057d4 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEaSERKS3_>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	601a      	str	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	1d1a      	adds	r2, r3, #4
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	3304      	adds	r3, #4
 80057ee:	4619      	mov	r1, r3
 80057f0:	4610      	mov	r0, r2
 80057f2:	f000 fa44 	bl	8005c7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4618      	mov	r0, r3
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <_ZNSt10shared_ptrI11AbstractMsgEaSERKS1_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	4611      	mov	r1, r2
 8005810:	4618      	mov	r0, r3
 8005812:	f7ff ffdf 	bl	80057d4 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEaSERKS3_>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4618      	mov	r0, r3
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <_ZN10MsgHandler15process_timeoutEv>:

void MsgHandler::process_timeout(void)
{
 8005820:	b590      	push	{r4, r7, lr}
 8005822:	b087      	sub	sp, #28
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]

	if( ! tx_msg_list.empty())
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	3324      	adds	r3, #36	; 0x24
 800582c:	4618      	mov	r0, r3
 800582e:	f000 f8a3 	bl	8005978 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5emptyEv>
 8005832:	4603      	mov	r3, r0
 8005834:	f083 0301 	eor.w	r3, r3, #1
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d040      	beq.n	80058c0 <_ZN10MsgHandler15process_timeoutEv+0xa0>
	{
		if(registered_msg.get() == tx_msg_list.front().get() )
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	3330      	adds	r3, #48	; 0x30
 8005842:	4618      	mov	r0, r3
 8005844:	f000 f9df 	bl	8005c06 <_ZNKSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8005848:	4604      	mov	r4, r0
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	3324      	adds	r3, #36	; 0x24
 800584e:	4618      	mov	r0, r3
 8005850:	f000 f8a4 	bl	800599c <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 8005854:	4603      	mov	r3, r0
 8005856:	4618      	mov	r0, r3
 8005858:	f000 f9d5 	bl	8005c06 <_ZNKSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800585c:	4603      	mov	r3, r0
 800585e:	429c      	cmp	r4, r3
 8005860:	bf0c      	ite	eq
 8005862:	2301      	moveq	r3, #1
 8005864:	2300      	movne	r3, #0
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	d01c      	beq.n	80058a6 <_ZN10MsgHandler15process_timeoutEv+0x86>
		{
			tx_msg_list.clear();
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	3324      	adds	r3, #36	; 0x24
 8005870:	4618      	mov	r0, r3
 8005872:	f000 f9d4 	bl	8005c1e <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5clearEv>
			registered_msg = nullptr;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800587c:	f107 0308 	add.w	r3, r7, #8
 8005880:	2100      	movs	r1, #0
 8005882:	4618      	mov	r0, r3
 8005884:	f000 f9db 	bl	8005c3e <_ZNSt10shared_ptrI11AbstractMsgEC1EDn>
 8005888:	f107 0308 	add.w	r3, r7, #8
 800588c:	4619      	mov	r1, r3
 800588e:	4620      	mov	r0, r4
 8005890:	f000 f9e2 	bl	8005c58 <_ZNSt10shared_ptrI11AbstractMsgEaSEOS1_>
 8005894:	f107 0308 	add.w	r3, r7, #8
 8005898:	4618      	mov	r0, r3
 800589a:	f7fe fad6 	bl	8003e4a <_ZNSt10shared_ptrI11AbstractMsgED1Ev>
			receive_data_header();
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7ff fdd0 	bl	8005444 <_ZN10MsgHandler19receive_data_headerEv>
 80058a4:	e00c      	b.n	80058c0 <_ZN10MsgHandler15process_timeoutEv+0xa0>
		}
		else
		{
			registered_msg = tx_msg_list.front();
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	3324      	adds	r3, #36	; 0x24
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 f873 	bl	800599c <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 80058b6:	4603      	mov	r3, r0
 80058b8:	4619      	mov	r1, r3
 80058ba:	4620      	mov	r0, r4
 80058bc:	f7ff ffa0 	bl	8005800 <_ZNSt10shared_ptrI11AbstractMsgEaSERKS1_>
		}
	}
	if( ongoing_fetch)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	791b      	ldrb	r3, [r3, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d021      	beq.n	800590c <_ZN10MsgHandler15process_timeoutEv+0xec>
	{
		if(register_ongoing_fetch)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	795b      	ldrb	r3, [r3, #5]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d019      	beq.n	8005904 <_ZN10MsgHandler15process_timeoutEv+0xe4>
		{
			ongoing_fetch = false;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	711a      	strb	r2, [r3, #4]
			register_ongoing_fetch = false;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	715a      	strb	r2, [r3, #5]
			txSingleack = AckMsg();
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f103 0410 	add.w	r4, r3, #16
 80058e2:	f107 0310 	add.w	r3, r7, #16
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7fe fa12 	bl	8003d10 <_ZN6AckMsgC1Ev>
 80058ec:	f107 0310 	add.w	r3, r7, #16
 80058f0:	4619      	mov	r1, r3
 80058f2:	4620      	mov	r0, r4
 80058f4:	f7ff fabd 	bl	8004e72 <_ZN6AckMsgaSERKS_>
 80058f8:	f107 0310 	add.w	r3, r7, #16
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7ff f9c1 	bl	8004c84 <_ZN6AckMsgD1Ev>
	}
	else
	{
		register_ongoing_fetch = false;
	}
}
 8005902:	e006      	b.n	8005912 <_ZN10MsgHandler15process_timeoutEv+0xf2>
			register_ongoing_fetch = true;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	715a      	strb	r2, [r3, #5]
}
 800590a:	e002      	b.n	8005912 <_ZN10MsgHandler15process_timeoutEv+0xf2>
		register_ongoing_fetch = false;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	715a      	strb	r2, [r3, #5]
}
 8005912:	bf00      	nop
 8005914:	371c      	adds	r7, #28
 8005916:	46bd      	mov	sp, r7
 8005918:	bd90      	pop	{r4, r7, pc}

0800591a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800591a:	b580      	push	{r7, lr}
 800591c:	b082      	sub	sp, #8
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
      { delete this; }
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d005      	beq.n	8005934 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	3304      	adds	r3, #4
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	4798      	blx	r3
 8005934:	bf00      	nop
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEcvbEv>:
      const deleter_type&
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }

      /// Return @c true if the stored pointer is not null.
      explicit operator bool() const noexcept
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f7fe fe0b 	bl	8004560 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	bf14      	ite	ne
 8005950:	2301      	movne	r3, #1
 8005952:	2300      	moveq	r3, #0
 8005954:	b2db      	uxtb	r3, r3
 8005956:	4618      	mov	r0, r3
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EE5resetEDn>:
               >>
      void
      reset(_Up __p) noexcept
      { _M_t.reset(std::move(__p)); }

      void reset(nullptr_t = nullptr) noexcept
 800595e:	b580      	push	{r7, lr}
 8005960:	b082      	sub	sp, #8
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
 8005966:	6039      	str	r1, [r7, #0]
      { reset(pointer()); }
 8005968:	2100      	movs	r1, #0
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f9cc 	bl	8005d08 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EE5resetIPhvEEvT_>
 8005970:	bf00      	nop
 8005972:	3708      	adds	r7, #8
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5emptyEv>:
      /**
       *  Returns true if the %list is empty.  (Thus begin() would equal
       *  end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	429a      	cmp	r2, r3
 8005988:	bf0c      	ite	eq
 800598a:	2301      	moveq	r3, #1
 800598c:	2300      	movne	r3, #0
 800598e:	b2db      	uxtb	r3, r3
 8005990:	4618      	mov	r0, r3
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %list.
       */
      reference
      front() _GLIBCXX_NOEXCEPT
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
      { return *begin(); }
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 f9eb 	bl	8005d80 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5beginEv>
 80059aa:	4603      	mov	r3, r0
 80059ac:	60fb      	str	r3, [r7, #12]
 80059ae:	f107 030c 	add.w	r3, r7, #12
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 f9f5 	bl	8005da2 <_ZNKSt14_List_iteratorISt10shared_ptrI11AbstractMsgEEdeEv>
 80059b8:	4603      	mov	r3, r0
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b082      	sub	sp, #8
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
	return _M_get();
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f9f7 	bl	8005dbe <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 80059d0:	4603      	mov	r3, r0
      }
 80059d2:	4618      	mov	r0, r3
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE9pop_frontEv>:
       *  Note that no data is returned, and if the first element's data
       *  is needed, it should be retrieved before pop_front() is
       *  called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 80059da:	b580      	push	{r7, lr}
 80059dc:	b082      	sub	sp, #8
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
      { this->_M_erase(begin()); }
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f9cc 	bl	8005d80 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5beginEv>
 80059e8:	4603      	mov	r3, r0
 80059ea:	4619      	mov	r1, r3
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f9f2 	bl	8005dd6 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE8_M_eraseESt14_List_iteratorIS3_E>
 80059f2:	bf00      	nop
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <_ZNKSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b082      	sub	sp, #8
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
	return get();
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 fa0d 	bl	8005e22 <_ZNKSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EE3getEv>
 8005a08:	4603      	mov	r3, r0
      }
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <_ZSt11make_sharedI11HeaderClassJRKhjEESt10shared_ptrIT_EDpOT0_>:
   *  @throw  std::bad_alloc, or an exception thrown from the
   *          constructor of @a _Tp.
   */
  template<typename _Tp, typename... _Args>
    inline shared_ptr<_Tp>
    make_shared(_Args&&... __args)
 8005a12:	b590      	push	{r4, r7, lr}
 8005a14:	b087      	sub	sp, #28
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	60f8      	str	r0, [r7, #12]
 8005a1a:	60b9      	str	r1, [r7, #8]
 8005a1c:	607a      	str	r2, [r7, #4]
    {
      typedef typename std::remove_cv<_Tp>::type _Tp_nc;
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
 8005a1e:	f107 0314 	add.w	r3, r7, #20
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 fa0a 	bl	8005e3c <_ZNSaI11HeaderClassEC1Ev>
				       std::forward<_Args>(__args)...);
 8005a28:	68b8      	ldr	r0, [r7, #8]
 8005a2a:	f000 fa1f 	bl	8005e6c <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8005a2e:	4604      	mov	r4, r0
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 f87c 	bl	8005b2e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8005a36:	4603      	mov	r3, r0
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f107 0114 	add.w	r1, r7, #20
 8005a3e:	4622      	mov	r2, r4
 8005a40:	f000 fa1f 	bl	8005e82 <_ZSt15allocate_sharedI11HeaderClassSaIS0_EJRKhjEESt10shared_ptrIT_ERKT0_DpOT1_>
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
 8005a44:	f107 0314 	add.w	r3, r7, #20
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f000 fa03 	bl	8005e54 <_ZNSaI11HeaderClassED1Ev>
				       std::forward<_Args>(__args)...);
 8005a4e:	bf00      	nop
    }
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	371c      	adds	r7, #28
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd90      	pop	{r4, r7, pc}

08005a58 <_ZNSt10shared_ptrI11AbstractMsgEC1I11HeaderClassvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 8005a58:	b590      	push	{r4, r7, lr}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8005a62:	687c      	ldr	r4, [r7, #4]
 8005a64:	6838      	ldr	r0, [r7, #0]
 8005a66:	f000 fa25 	bl	8005eb4 <_ZSt4moveIRSt10shared_ptrI11HeaderClassEEONSt16remove_referenceIT_E4typeEOS5_>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4620      	mov	r0, r4
 8005a70:	f000 fa2b 	bl	8005eca <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEC1I11HeaderClassvEEOS_IT_LS2_0EE>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4618      	mov	r0, r3
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd90      	pop	{r4, r7, pc}

08005a7e <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE9push_backEOS3_>:
      push_back(const value_type& __x)
      { this->_M_insert(end(), __x); }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 8005a7e:	b590      	push	{r4, r7, lr}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	6039      	str	r1, [r7, #0]
      { this->_M_insert(end(), std::move(__x)); }
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 fa3c 	bl	8005f06 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE3endEv>
 8005a8e:	4604      	mov	r4, r0
 8005a90:	6838      	ldr	r0, [r7, #0]
 8005a92:	f000 fa48 	bl	8005f26 <_ZSt4moveIRSt10shared_ptrI11AbstractMsgEEONSt16remove_referenceIT_E4typeEOS5_>
 8005a96:	4603      	mov	r3, r0
 8005a98:	461a      	mov	r2, r3
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 fa4d 	bl	8005f3c <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE9_M_insertIJS3_EEEvSt14_List_iteratorIS3_EDpOT_>
 8005aa2:	bf00      	nop
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd90      	pop	{r4, r7, pc}

08005aaa <_ZSt11make_sharedI12PayloadClassJRPKcjEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8005aaa:	b590      	push	{r4, r7, lr}
 8005aac:	b087      	sub	sp, #28
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	60f8      	str	r0, [r7, #12]
 8005ab2:	60b9      	str	r1, [r7, #8]
 8005ab4:	607a      	str	r2, [r7, #4]
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
 8005ab6:	f107 0314 	add.w	r3, r7, #20
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 fa5c 	bl	8005f78 <_ZNSaI12PayloadClassEC1Ev>
				       std::forward<_Args>(__args)...);
 8005ac0:	68b8      	ldr	r0, [r7, #8]
 8005ac2:	f000 fa71 	bl	8005fa8 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8005ac6:	4604      	mov	r4, r0
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f830 	bl	8005b2e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f107 0114 	add.w	r1, r7, #20
 8005ad6:	4622      	mov	r2, r4
 8005ad8:	f000 fa71 	bl	8005fbe <_ZSt15allocate_sharedI12PayloadClassSaIS0_EJRPKcjEESt10shared_ptrIT_ERKT0_DpOT1_>
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
 8005adc:	f107 0314 	add.w	r3, r7, #20
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 fa55 	bl	8005f90 <_ZNSaI12PayloadClassED1Ev>
				       std::forward<_Args>(__args)...);
 8005ae6:	bf00      	nop
    }
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	371c      	adds	r7, #28
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd90      	pop	{r4, r7, pc}

08005af0 <_ZNSt10shared_ptrI11AbstractMsgEC1I12PayloadClassvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 8005af0:	b590      	push	{r4, r7, lr}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8005afa:	687c      	ldr	r4, [r7, #4]
 8005afc:	6838      	ldr	r0, [r7, #0]
 8005afe:	f000 fa77 	bl	8005ff0 <_ZSt4moveIRSt10shared_ptrI12PayloadClassEEONSt16remove_referenceIT_E4typeEOS5_>
 8005b02:	4603      	mov	r3, r0
 8005b04:	4619      	mov	r1, r3
 8005b06:	4620      	mov	r0, r4
 8005b08:	f000 fa7d 	bl	8006006 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEC1I12PayloadClassvEEOS_IT_LS2_0EE>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd90      	pop	{r4, r7, pc}

08005b16 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b082      	sub	sp, #8
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
      { return _M_node_count(); }
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fa8f 	bl	8006042 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE13_M_node_countEv>
 8005b24:	4603      	mov	r3, r0
 8005b26:	4618      	mov	r0, r3
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005b2e:	b480      	push	{r7}
 8005b30:	b083      	sub	sp, #12
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <_ZSt11make_uniqueI12PayloadClassJPfjEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
  /// @endcond

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
 8005b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8005b50:	68b8      	ldr	r0, [r7, #8]
 8005b52:	f000 fa83 	bl	800605c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8005b56:	4603      	mov	r3, r0
 8005b58:	681c      	ldr	r4, [r3, #0]
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7ff ffe7 	bl	8005b2e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8005b60:	4603      	mov	r3, r0
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	b2dd      	uxtb	r5, r3
 8005b66:	200c      	movs	r0, #12
 8005b68:	f006 fac4 	bl	800c0f4 <_Znwj>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	461e      	mov	r6, r3
 8005b70:	462a      	mov	r2, r5
 8005b72:	4621      	mov	r1, r4
 8005b74:	4630      	mov	r0, r6
 8005b76:	f000 fa7d 	bl	8006074 <_ZN12PayloadClassC1IfEEPT_h>
 8005b7a:	4631      	mov	r1, r6
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f000 fac7 	bl	8006110 <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	3714      	adds	r7, #20
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b8a <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b082      	sub	sp, #8
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 8005b94:	6838      	ldr	r0, [r7, #0]
 8005b96:	f000 faea 	bl	800616e <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE7releaseEv>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 fac5 	bl	800612e <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 8005ba4:	6838      	ldr	r0, [r7, #0]
 8005ba6:	f7fe fec6 	bl	8004936 <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE10_M_deleterEv>
 8005baa:	4603      	mov	r3, r0
 8005bac:	4618      	mov	r0, r3
 8005bae:	f000 faf3 	bl	8006198 <_ZSt7forwardISt14default_deleteI12PayloadClassEEOT_RNSt16remove_referenceIS3_E4typeE>
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7fe febf 	bl	8004936 <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 8005bb8:	687b      	ldr	r3, [r7, #4]
      }
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <_ZSt11make_uniqueI12PayloadClassJRPcRhEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8005bc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bc4:	b085      	sub	sp, #20
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	60f8      	str	r0, [r7, #12]
 8005bca:	60b9      	str	r1, [r7, #8]
 8005bcc:	607a      	str	r2, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8005bce:	68b8      	ldr	r0, [r7, #8]
 8005bd0:	f000 faed 	bl	80061ae <_ZSt7forwardIRPcEOT_RNSt16remove_referenceIS2_E4typeE>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	681c      	ldr	r4, [r3, #0]
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 faf3 	bl	80061c4 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8005bde:	4603      	mov	r3, r0
 8005be0:	781d      	ldrb	r5, [r3, #0]
 8005be2:	200c      	movs	r0, #12
 8005be4:	f006 fa86 	bl	800c0f4 <_Znwj>
 8005be8:	4603      	mov	r3, r0
 8005bea:	461e      	mov	r6, r3
 8005bec:	462a      	mov	r2, r5
 8005bee:	4621      	mov	r1, r4
 8005bf0:	4630      	mov	r0, r6
 8005bf2:	f000 faf3 	bl	80061dc <_ZN12PayloadClassC1IcEEPT_h>
 8005bf6:	4631      	mov	r1, r6
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f000 fa89 	bl	8006110 <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c06 <_ZNKSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
	reset(_Yp* __p, _Deleter __d, _Alloc __a)
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
 8005c06:	b480      	push	{r7}
 8005c08:	b083      	sub	sp, #12
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4618      	mov	r0, r3
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5clearEv>:
       *  the elements, and that if the elements themselves are
       *  pointers, the pointed-to memory is not touched in any way.
       *  Managing the pointer is the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b082      	sub	sp, #8
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
      {
	_Base::_M_clear();
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7fe fdf2 	bl	8004812 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE8_M_clearEv>
	_Base::_M_init();
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4618      	mov	r0, r3
 8005c32:	f000 fb11 	bl	8006258 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE7_M_initEv>
      }
 8005c36:	bf00      	nop
 8005c38:	3708      	adds	r7, #8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <_ZNSt10shared_ptrI11AbstractMsgEC1EDn>:
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b082      	sub	sp, #8
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
 8005c46:	6039      	str	r1, [r7, #0]
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f7fe fd1b 	bl	8004684 <_ZNSt10shared_ptrI11AbstractMsgEC1Ev>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4618      	mov	r0, r3
 8005c52:	3708      	adds	r7, #8
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <_ZNSt10shared_ptrI11AbstractMsgEaSEOS1_>:
      operator=(shared_ptr&& __r) noexcept
 8005c58:	b590      	push	{r4, r7, lr}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 8005c62:	687c      	ldr	r4, [r7, #4]
 8005c64:	6838      	ldr	r0, [r7, #0]
 8005c66:	f000 f95e 	bl	8005f26 <_ZSt4moveIRSt10shared_ptrI11AbstractMsgEEONSt16remove_referenceIT_E4typeEOS5_>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	4620      	mov	r0, r4
 8005c70:	f000 fafe 	bl	8006270 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>
	return *this;
 8005c74:	687b      	ldr	r3, [r7, #4]
      }
 8005c76:	4618      	mov	r0, r3
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd90      	pop	{r4, r7, pc}

08005c7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
      operator=(const __shared_count& __r) noexcept
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b084      	sub	sp, #16
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
 8005c86:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	60fb      	str	r3, [r7, #12]
	if (__tmp != _M_pi)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d011      	beq.n	8005cbc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x3e>
	    if (__tmp != nullptr)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d002      	beq.n	8005ca4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	      __tmp->_M_add_ref_copy();
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f7ff f8a8 	bl	8004df4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
	    if (_M_pi != nullptr)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d004      	beq.n	8005cb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x38>
	      _M_pi->_M_release();
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7fd ff6c 	bl	8003b8e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	601a      	str	r2, [r3, #0]
	return *this;
 8005cbc:	687b      	ldr	r3, [r7, #4]
      }
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
	...

08005cc8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
      { }
 8005cd0:	4a04      	ldr	r2, [pc, #16]	; (8005ce4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	601a      	str	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr
 8005ce4:	0800f63c 	.word	0x0800f63c

08005ce8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
      { }
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f7ff ffe9 	bl	8005cc8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8005cf6:	210c      	movs	r1, #12
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f006 f9f7 	bl	800c0ec <_ZdlPvj>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4618      	mov	r0, r3
 8005d02:	3708      	adds	r7, #8
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EE5resetIPhvEEvT_>:
      reset(_Up __p) noexcept
 8005d08:	b590      	push	{r4, r7, lr}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
      { _M_t.reset(std::move(__p)); }
 8005d12:	687c      	ldr	r4, [r7, #4]
 8005d14:	463b      	mov	r3, r7
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 fac9 	bl	80062ae <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4619      	mov	r1, r3
 8005d22:	4620      	mov	r0, r4
 8005d24:	f000 face 	bl	80062c4 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE5resetEPh>
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd90      	pop	{r4, r7, pc}

08005d30 <_ZN12PayloadClassD1Ev>:
		~PayloadClass() = default;
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	4a08      	ldr	r2, [pc, #32]	; (8005d5c <_ZN12PayloadClassD1Ev+0x2c>)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	3308      	adds	r3, #8
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7fe fbdc 	bl	8004500 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED1Ev>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fd ff50 	bl	8003bf0 <_ZN11AbstractMsgD1Ev>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4618      	mov	r0, r3
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	0800f620 	.word	0x0800f620

08005d60 <_ZN12PayloadClassD0Ev>:
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f7ff ffe1 	bl	8005d30 <_ZN12PayloadClassD1Ev>
 8005d6e:	210c      	movs	r1, #12
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f006 f9bb 	bl	800c0ec <_ZdlPvj>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_node._M_next); }
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	f107 030c 	add.w	r3, r7, #12
 8005d90:	4611      	mov	r1, r2
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 fab6 	bl	8006304 <_ZNSt14_List_iteratorISt10shared_ptrI11AbstractMsgEEC1EPNSt8__detail15_List_node_baseE>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <_ZNKSt14_List_iteratorISt10shared_ptrI11AbstractMsgEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b082      	sub	sp, #8
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7fe fdd9 	bl	8004966 <_ZNSt10_List_nodeISt10shared_ptrI11AbstractMsgEE9_M_valptrEv>
 8005db4:	4603      	mov	r3, r0
 8005db6:	4618      	mov	r0, r3
 8005db8:	3708      	adds	r7, #8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b082      	sub	sp, #8
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7ff ff1d 	bl	8005c06 <_ZNKSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE8_M_eraseESt14_List_iteratorIS3_E>:
       }
#endif

      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
 8005dd6:	b590      	push	{r4, r7, lr}
 8005dd8:	b085      	sub	sp, #20
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
 8005dde:	6039      	str	r1, [r7, #0]
      {
	this->_M_dec_size(1);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2101      	movs	r1, #1
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 fa9c 	bl	8006322 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_dec_sizeEj>
	__position._M_node->_M_unhook();
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	4618      	mov	r0, r3
 8005dee:	f006 fa34 	bl	800c25a <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	_Node* __n = static_cast<_Node*>(__position._M_node);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	60fb      	str	r3, [r7, #12]
#if __cplusplus >= 201103L
	_Node_alloc_traits::destroy(_M_get_Node_allocator(), __n->_M_valptr());
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fe fdc2 	bl	8004982 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE21_M_get_Node_allocatorEv>
 8005dfe:	4604      	mov	r4, r0
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f7fe fdb0 	bl	8004966 <_ZNSt10_List_nodeISt10shared_ptrI11AbstractMsgEE9_M_valptrEv>
 8005e06:	4603      	mov	r3, r0
 8005e08:	4619      	mov	r1, r3
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	f7fe fdc4 	bl	8004998 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE7destroyIS3_EEvRS5_PT_>
#else
	_Tp_alloc_type(_M_get_Node_allocator()).destroy(__n->_M_valptr());
#endif

	_M_put_node(__n);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	68f9      	ldr	r1, [r7, #12]
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7fe fdcc 	bl	80049b2 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_put_nodeEPSt10_List_nodeIS3_E>
      }
 8005e1a:	bf00      	nop
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd90      	pop	{r4, r7, pc}

08005e22 <_ZNKSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b082      	sub	sp, #8
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f000 fa89 	bl	8006344 <_ZNKSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE6_M_ptrEv>
 8005e32:	4603      	mov	r3, r0
 8005e34:	4618      	mov	r0, r3
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <_ZNSaI11HeaderClassEC1Ev>:
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fa8b 	bl	8006360 <_ZN9__gnu_cxx13new_allocatorI11HeaderClassEC1Ev>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3708      	adds	r7, #8
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <_ZNSaI11HeaderClassED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fa8a 	bl	8006376 <_ZN9__gnu_cxx13new_allocatorI11HeaderClassED1Ev>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4618      	mov	r0, r3
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4618      	mov	r0, r3
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <_ZSt15allocate_sharedI11HeaderClassSaIS0_EJRKhjEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 8005e82:	b5b0      	push	{r4, r5, r7, lr}
 8005e84:	b084      	sub	sp, #16
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	60f8      	str	r0, [r7, #12]
 8005e8a:	60b9      	str	r1, [r7, #8]
 8005e8c:	607a      	str	r2, [r7, #4]
 8005e8e:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 8005e90:	68bc      	ldr	r4, [r7, #8]
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7ff ffea 	bl	8005e6c <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8005e98:	4605      	mov	r5, r0
 8005e9a:	6838      	ldr	r0, [r7, #0]
 8005e9c:	f7ff fe47 	bl	8005b2e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	462a      	mov	r2, r5
 8005ea4:	4621      	mov	r1, r4
 8005ea6:	68f8      	ldr	r0, [r7, #12]
 8005ea8:	f000 fa70 	bl	800638c <_ZNSt10shared_ptrI11HeaderClassEC1ISaIS0_EJRKhjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bdb0      	pop	{r4, r5, r7, pc}

08005eb4 <_ZSt4moveIRSt10shared_ptrI11HeaderClassEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	370c      	adds	r7, #12
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEC1I11HeaderClassvEEOS_IT_LS2_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b082      	sub	sp, #8
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
 8005ed2:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	601a      	str	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	3304      	adds	r3, #4
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7fe fd75 	bl	80049d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	1d1a      	adds	r2, r3, #4
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	3304      	adds	r3, #4
 8005eee:	4619      	mov	r1, r3
 8005ef0:	4610      	mov	r0, r2
 8005ef2:	f000 fa65 	bl	80063c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = nullptr;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	601a      	str	r2, [r3, #0]
	}
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4618      	mov	r0, r3
 8005f00:	3708      	adds	r7, #8
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b084      	sub	sp, #16
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_node); }
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	f107 030c 	add.w	r3, r7, #12
 8005f14:	4611      	mov	r1, r2
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 f9f4 	bl	8006304 <_ZNSt14_List_iteratorISt10shared_ptrI11AbstractMsgEEC1EPNSt8__detail15_List_node_baseE>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <_ZSt4moveIRSt10shared_ptrI11AbstractMsgEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8005f26:	b480      	push	{r7}
 8005f28:	b083      	sub	sp, #12
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4618      	mov	r0, r3
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE9_M_insertIJS3_EEEvSt14_List_iteratorIS3_EDpOT_>:
       _M_insert(iterator __position, _Args&&... __args)
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 fa4e 	bl	80063ea <_ZSt7forwardISt10shared_ptrI11AbstractMsgEEOT_RNSt16remove_referenceIS3_E4typeE>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	4619      	mov	r1, r3
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f000 fa54 	bl	8006400 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE14_M_create_nodeIJS3_EEEPSt10_List_nodeIS3_EDpOT_>
 8005f58:	6178      	str	r0, [r7, #20]
	 __tmp->_M_hook(__position._M_node);
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	4611      	mov	r1, r2
 8005f60:	4618      	mov	r0, r3
 8005f62:	f006 f973 	bl	800c24c <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
	 this->_M_inc_size(1);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2101      	movs	r1, #1
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f000 fa7c 	bl	8006468 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_inc_sizeEj>
       }
 8005f70:	bf00      	nop
 8005f72:	3718      	adds	r7, #24
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <_ZNSaI12PayloadClassEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 fa82 	bl	800648a <_ZN9__gnu_cxx13new_allocatorI12PayloadClassEC1Ev>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3708      	adds	r7, #8
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <_ZNSaI12PayloadClassED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 fa81 	bl	80064a0 <_ZN9__gnu_cxx13new_allocatorI12PayloadClassED1Ev>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3708      	adds	r7, #8
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <_ZSt15allocate_sharedI12PayloadClassSaIS0_EJRPKcjEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 8005fbe:	b5b0      	push	{r4, r5, r7, lr}
 8005fc0:	b084      	sub	sp, #16
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	60f8      	str	r0, [r7, #12]
 8005fc6:	60b9      	str	r1, [r7, #8]
 8005fc8:	607a      	str	r2, [r7, #4]
 8005fca:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 8005fcc:	68bc      	ldr	r4, [r7, #8]
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7ff ffea 	bl	8005fa8 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8005fd4:	4605      	mov	r5, r0
 8005fd6:	6838      	ldr	r0, [r7, #0]
 8005fd8:	f7ff fda9 	bl	8005b2e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	462a      	mov	r2, r5
 8005fe0:	4621      	mov	r1, r4
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f000 fa67 	bl	80064b6 <_ZNSt10shared_ptrI12PayloadClassEC1ISaIS0_EJRPKcjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bdb0      	pop	{r4, r5, r7, pc}

08005ff0 <_ZSt4moveIRSt10shared_ptrI12PayloadClassEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEC1I12PayloadClassvEEOS_IT_LS2_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8006006:	b580      	push	{r7, lr}
 8006008:	b082      	sub	sp, #8
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
 800600e:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	3304      	adds	r3, #4
 800601c:	4618      	mov	r0, r3
 800601e:	f7fe fcd7 	bl	80049d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	1d1a      	adds	r2, r3, #4
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	3304      	adds	r3, #4
 800602a:	4619      	mov	r1, r3
 800602c:	4610      	mov	r0, r2
 800602e:	f000 f9c7 	bl	80063c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = nullptr;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2200      	movs	r2, #0
 8006036:	601a      	str	r2, [r3, #0]
	}
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4618      	mov	r0, r3
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE13_M_node_countEv>:
      _M_node_count() const
 8006042:	b580      	push	{r7, lr}
 8006044:	b082      	sub	sp, #8
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
      { return this->_M_get_size(); }
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4618      	mov	r0, r3
 800604e:	f000 fa4c 	bl	80064ea <_ZNKSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_get_sizeEv>
 8006052:	4603      	mov	r3, r0
 8006054:	4618      	mov	r0, r3
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4618      	mov	r0, r3
 8006068:	370c      	adds	r7, #12
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
	...

08006074 <_ZN12PayloadClassC1IfEEPT_h>:
		PayloadClass(T* struct_or_plain_type_data, uint8_t data_size): _data_size(data_size), _data(new uint8_t[data_size])
 8006074:	b590      	push	{r4, r7, lr}
 8006076:	b087      	sub	sp, #28
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	4613      	mov	r3, r2
 8006080:	71fb      	strb	r3, [r7, #7]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	4618      	mov	r0, r3
 8006086:	f7fd fdd3 	bl	8003c30 <_ZN11AbstractMsgC1Ev>
 800608a:	4a18      	ldr	r2, [pc, #96]	; (80060ec <_ZN12PayloadClassC1IfEEPT_h+0x78>)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	601a      	str	r2, [r3, #0]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	79fa      	ldrb	r2, [r7, #7]
 8006094:	711a      	strb	r2, [r3, #4]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f103 0408 	add.w	r4, r3, #8
 800609c:	79fb      	ldrb	r3, [r7, #7]
 800609e:	4618      	mov	r0, r3
 80060a0:	f006 f839 	bl	800c116 <_Znaj>
 80060a4:	4603      	mov	r3, r0
 80060a6:	4619      	mov	r1, r3
 80060a8:	4620      	mov	r0, r4
 80060aa:	f7fe fa1a 	bl	80044e2 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
			uint8_t* data_ptr = (uint8_t*) struct_or_plain_type_data;
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	613b      	str	r3, [r7, #16]
			for( uint8_t i = 0; i < _data_size; i ++)
 80060b2:	2300      	movs	r3, #0
 80060b4:	75fb      	strb	r3, [r7, #23]
 80060b6:	e00f      	b.n	80060d8 <_ZN12PayloadClassC1IfEEPT_h+0x64>
				_data[i] = data_ptr[i];
 80060b8:	7dfb      	ldrb	r3, [r7, #23]
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	18d4      	adds	r4, r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	3308      	adds	r3, #8
 80060c2:	7dfa      	ldrb	r2, [r7, #23]
 80060c4:	4611      	mov	r1, r2
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fe fa39 	bl	800453e <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 80060cc:	4603      	mov	r3, r0
 80060ce:	7822      	ldrb	r2, [r4, #0]
 80060d0:	701a      	strb	r2, [r3, #0]
			for( uint8_t i = 0; i < _data_size; i ++)
 80060d2:	7dfb      	ldrb	r3, [r7, #23]
 80060d4:	3301      	adds	r3, #1
 80060d6:	75fb      	strb	r3, [r7, #23]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	791b      	ldrb	r3, [r3, #4]
 80060dc:	7dfa      	ldrb	r2, [r7, #23]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d3ea      	bcc.n	80060b8 <_ZN12PayloadClassC1IfEEPT_h+0x44>
		};
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4618      	mov	r0, r3
 80060e6:	371c      	adds	r7, #28
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd90      	pop	{r4, r7, pc}
 80060ec:	0800f620 	.word	0x0800f620

080060f0 <_ZNSt15__uniq_ptr_dataI12PayloadClassSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	683a      	ldr	r2, [r7, #0]
 80060fe:	4611      	mov	r1, r2
 8006100:	4618      	mov	r0, r3
 8006102:	f000 f9fe 	bl	8006502 <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EEC1EPS0_>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4618      	mov	r0, r3
 800610a:	3708      	adds	r7, #8
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6839      	ldr	r1, [r7, #0]
 800611e:	4618      	mov	r0, r3
 8006120:	f7ff ffe6 	bl	80060f0 <_ZNSt15__uniq_ptr_dataI12PayloadClassSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4618      	mov	r0, r3
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 800612e:	b580      	push	{r7, lr}
 8006130:	b084      	sub	sp, #16
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
 8006136:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f7fe fb1d 	bl	8004778 <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE6_M_ptrEv>
 800613e:	4603      	mov	r3, r0
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f7fe fb17 	bl	8004778 <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE6_M_ptrEv>
 800614a:	4602      	mov	r2, r0
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	6013      	str	r3, [r2, #0]
	if (__old_p)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d007      	beq.n	8006166 <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7fe fbed 	bl	8004936 <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE10_M_deleterEv>
 800615c:	4603      	mov	r3, r0
 800615e:	68f9      	ldr	r1, [r7, #12]
 8006160:	4618      	mov	r0, r3
 8006162:	f7fe fb2e 	bl	80047c2 <_ZNKSt14default_deleteI12PayloadClassEclEPS0_>
      }
 8006166:	bf00      	nop
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7fe fafe 	bl	8004778 <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE6_M_ptrEv>
 800617c:	4603      	mov	r3, r0
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7fe faf8 	bl	8004778 <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE6_M_ptrEv>
 8006188:	4603      	mov	r3, r0
 800618a:	2200      	movs	r2, #0
 800618c:	601a      	str	r2, [r3, #0]
	return __p;
 800618e:	68fb      	ldr	r3, [r7, #12]
      }
 8006190:	4618      	mov	r0, r3
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <_ZSt7forwardISt14default_deleteI12PayloadClassEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4618      	mov	r0, r3
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <_ZSt7forwardIRPcEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80061ae:	b480      	push	{r7}
 80061b0:	b083      	sub	sp, #12
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4618      	mov	r0, r3
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4618      	mov	r0, r3
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
	...

080061dc <_ZN12PayloadClassC1IcEEPT_h>:
		PayloadClass(T* struct_or_plain_type_data, uint8_t data_size): _data_size(data_size), _data(new uint8_t[data_size])
 80061dc:	b590      	push	{r4, r7, lr}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	4613      	mov	r3, r2
 80061e8:	71fb      	strb	r3, [r7, #7]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7fd fd1f 	bl	8003c30 <_ZN11AbstractMsgC1Ev>
 80061f2:	4a18      	ldr	r2, [pc, #96]	; (8006254 <_ZN12PayloadClassC1IcEEPT_h+0x78>)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	601a      	str	r2, [r3, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	79fa      	ldrb	r2, [r7, #7]
 80061fc:	711a      	strb	r2, [r3, #4]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f103 0408 	add.w	r4, r3, #8
 8006204:	79fb      	ldrb	r3, [r7, #7]
 8006206:	4618      	mov	r0, r3
 8006208:	f005 ff85 	bl	800c116 <_Znaj>
 800620c:	4603      	mov	r3, r0
 800620e:	4619      	mov	r1, r3
 8006210:	4620      	mov	r0, r4
 8006212:	f7fe f966 	bl	80044e2 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
			uint8_t* data_ptr = (uint8_t*) struct_or_plain_type_data;
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	613b      	str	r3, [r7, #16]
			for( uint8_t i = 0; i < _data_size; i ++)
 800621a:	2300      	movs	r3, #0
 800621c:	75fb      	strb	r3, [r7, #23]
 800621e:	e00f      	b.n	8006240 <_ZN12PayloadClassC1IcEEPT_h+0x64>
				_data[i] = data_ptr[i];
 8006220:	7dfb      	ldrb	r3, [r7, #23]
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	18d4      	adds	r4, r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	3308      	adds	r3, #8
 800622a:	7dfa      	ldrb	r2, [r7, #23]
 800622c:	4611      	mov	r1, r2
 800622e:	4618      	mov	r0, r3
 8006230:	f7fe f985 	bl	800453e <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 8006234:	4603      	mov	r3, r0
 8006236:	7822      	ldrb	r2, [r4, #0]
 8006238:	701a      	strb	r2, [r3, #0]
			for( uint8_t i = 0; i < _data_size; i ++)
 800623a:	7dfb      	ldrb	r3, [r7, #23]
 800623c:	3301      	adds	r3, #1
 800623e:	75fb      	strb	r3, [r7, #23]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	791b      	ldrb	r3, [r3, #4]
 8006244:	7dfa      	ldrb	r2, [r7, #23]
 8006246:	429a      	cmp	r2, r3
 8006248:	d3ea      	bcc.n	8006220 <_ZN12PayloadClassC1IcEEPT_h+0x44>
		};
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	4618      	mov	r0, r3
 800624e:	371c      	adds	r7, #28
 8006250:	46bd      	mov	sp, r7
 8006252:	bd90      	pop	{r4, r7, pc}
 8006254:	0800f620 	.word	0x0800f620

08006258 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE7_M_initEv>:
      _M_init() _GLIBCXX_NOEXCEPT
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
      { this->_M_impl._M_node._M_init(); }
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4618      	mov	r0, r3
 8006264:	f7fd fc7f 	bl	8003b66 <_ZNSt8__detail17_List_node_header7_M_initEv>
 8006268:	bf00      	nop
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>:
      operator=(__shared_ptr&& __r) noexcept
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
	__shared_ptr(std::move(__r)).swap(*this);
 800627a:	6838      	ldr	r0, [r7, #0]
 800627c:	f000 f955 	bl	800652a <_ZSt4moveIRSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>
 8006280:	4602      	mov	r2, r0
 8006282:	f107 0308 	add.w	r3, r7, #8
 8006286:	4611      	mov	r1, r2
 8006288:	4618      	mov	r0, r3
 800628a:	f000 f959 	bl	8006540 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 800628e:	f107 0308 	add.w	r3, r7, #8
 8006292:	6879      	ldr	r1, [r7, #4]
 8006294:	4618      	mov	r0, r3
 8006296:	f000 f971 	bl	800657c <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>
 800629a:	f107 0308 	add.w	r3, r7, #8
 800629e:	4618      	mov	r0, r3
 80062a0:	f7fd fdc5 	bl	8003e2e <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 80062a4:	687b      	ldr	r3, [r7, #4]
      }
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80062ae:	b480      	push	{r7}
 80062b0:	b083      	sub	sp, #12
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4618      	mov	r0, r3
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE5resetEPh>:
      void reset(pointer __p) noexcept
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7fe fa0b 	bl	80046ea <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 80062d4:	4603      	mov	r3, r0
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7fe fa05 	bl	80046ea <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 80062e0:	4602      	mov	r2, r0
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	6013      	str	r3, [r2, #0]
	if (__old_p)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d007      	beq.n	80062fc <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE5resetEPh+0x38>
	  _M_deleter()(__old_p);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f7fe fae1 	bl	80048b4 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE10_M_deleterEv>
 80062f2:	4603      	mov	r3, r0
 80062f4:	68f9      	ldr	r1, [r7, #12]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7fe fa11 	bl	800471e <_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS0_E5valueEvE4typeEPS5_>
      }
 80062fc:	bf00      	nop
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <_ZNSt14_List_iteratorISt10shared_ptrI11AbstractMsgEEC1EPNSt8__detail15_List_node_baseE>:
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4618      	mov	r0, r3
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_dec_sizeEj>:
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 8006322:	b480      	push	{r7}
 8006324:	b083      	sub	sp, #12
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
 800632a:	6039      	str	r1, [r7, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	689a      	ldr	r2, [r3, #8]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	1ad2      	subs	r2, r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	609a      	str	r2, [r3, #8]
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <_ZNKSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4618      	mov	r0, r3
 8006350:	f000 f92b 	bl	80065aa <_ZSt3getILj0EJP12PayloadClassSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8006354:	4603      	mov	r3, r0
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4618      	mov	r0, r3
 800635a:	3708      	adds	r7, #8
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <_ZN9__gnu_cxx13new_allocatorI11HeaderClassEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4618      	mov	r0, r3
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <_ZN9__gnu_cxx13new_allocatorI11HeaderClassED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006376:	b480      	push	{r7}
 8006378:	b083      	sub	sp, #12
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4618      	mov	r0, r3
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <_ZNSt10shared_ptrI11HeaderClassEC1ISaIS0_EJRKhjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 800638c:	b5b0      	push	{r4, r5, r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
 8006398:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 800639a:	68fc      	ldr	r4, [r7, #12]
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f7ff fd65 	bl	8005e6c <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 80063a2:	4605      	mov	r5, r0
 80063a4:	6838      	ldr	r0, [r7, #0]
 80063a6:	f7ff fbc2 	bl	8005b2e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80063aa:	4603      	mov	r3, r0
 80063ac:	462a      	mov	r2, r5
 80063ae:	68b9      	ldr	r1, [r7, #8]
 80063b0:	4620      	mov	r0, r4
 80063b2:	f000 f907 	bl	80065c4 <_ZNSt12__shared_ptrI11HeaderClassLN9__gnu_cxx12_Lock_policyE0EEC1ISaIS0_EJRKhjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	4618      	mov	r0, r3
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bdb0      	pop	{r4, r5, r7, pc}

080063c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	601a      	str	r2, [r3, #0]
      }
 80063de:	bf00      	nop
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <_ZSt7forwardISt10shared_ptrI11AbstractMsgEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80063ea:	b480      	push	{r7}
 80063ec:	b083      	sub	sp, #12
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4618      	mov	r0, r3
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE14_M_create_nodeIJS3_EEEPSt10_List_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8006400:	b590      	push	{r4, r7, lr}
 8006402:	b087      	sub	sp, #28
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
	  auto __p = this->_M_get_node();
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4618      	mov	r0, r3
 800640e:	f000 f900 	bl	8006612 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_get_nodeEv>
 8006412:	6178      	str	r0, [r7, #20]
	  auto& __alloc = _M_get_Node_allocator();
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4618      	mov	r0, r3
 8006418:	f7fe fab3 	bl	8004982 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE21_M_get_Node_allocatorEv>
 800641c:	6138      	str	r0, [r7, #16]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 800641e:	f107 0308 	add.w	r3, r7, #8
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	6939      	ldr	r1, [r7, #16]
 8006426:	4618      	mov	r0, r3
 8006428:	f000 f901 	bl	800662e <_ZNSt15__allocated_ptrISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEEC1ERS5_PS4_>
	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
 800642c:	6978      	ldr	r0, [r7, #20]
 800642e:	f7fe fa9a 	bl	8004966 <_ZNSt10_List_nodeISt10shared_ptrI11AbstractMsgEE9_M_valptrEv>
 8006432:	4604      	mov	r4, r0
 8006434:	6838      	ldr	r0, [r7, #0]
 8006436:	f7ff ffd8 	bl	80063ea <_ZSt7forwardISt10shared_ptrI11AbstractMsgEEOT_RNSt16remove_referenceIS3_E4typeE>
 800643a:	4603      	mov	r3, r0
 800643c:	461a      	mov	r2, r3
 800643e:	4621      	mov	r1, r4
 8006440:	6938      	ldr	r0, [r7, #16]
 8006442:	f000 f91d 	bl	8006680 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE9constructIS3_JS3_EEEvRS5_PT_DpOT0_>
	  __guard = nullptr;
 8006446:	f107 0308 	add.w	r3, r7, #8
 800644a:	2100      	movs	r1, #0
 800644c:	4618      	mov	r0, r3
 800644e:	f000 f92a 	bl	80066a6 <_ZNSt15__allocated_ptrISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEEaSEDn>
	  return __p;
 8006452:	697c      	ldr	r4, [r7, #20]
	}
 8006454:	f107 0308 	add.w	r3, r7, #8
 8006458:	4618      	mov	r0, r3
 800645a:	f000 f8fc 	bl	8006656 <_ZNSt15__allocated_ptrISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEED1Ev>
	  return __p;
 800645e:	4623      	mov	r3, r4
	}
 8006460:	4618      	mov	r0, r3
 8006462:	371c      	adds	r7, #28
 8006464:	46bd      	mov	sp, r7
 8006466:	bd90      	pop	{r4, r7, pc}

08006468 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_inc_sizeEj>:
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	689a      	ldr	r2, [r3, #8]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	441a      	add	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	609a      	str	r2, [r3, #8]
 800647e:	bf00      	nop
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <_ZN9__gnu_cxx13new_allocatorI12PayloadClassEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800648a:	b480      	push	{r7}
 800648c:	b083      	sub	sp, #12
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4618      	mov	r0, r3
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <_ZN9__gnu_cxx13new_allocatorI12PayloadClassED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4618      	mov	r0, r3
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <_ZNSt10shared_ptrI12PayloadClassEC1ISaIS0_EJRPKcjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 80064b6:	b5b0      	push	{r4, r5, r7, lr}
 80064b8:	b084      	sub	sp, #16
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	60f8      	str	r0, [r7, #12]
 80064be:	60b9      	str	r1, [r7, #8]
 80064c0:	607a      	str	r2, [r7, #4]
 80064c2:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 80064c4:	68fc      	ldr	r4, [r7, #12]
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7ff fd6e 	bl	8005fa8 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80064cc:	4605      	mov	r5, r0
 80064ce:	6838      	ldr	r0, [r7, #0]
 80064d0:	f7ff fb2d 	bl	8005b2e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80064d4:	4603      	mov	r3, r0
 80064d6:	462a      	mov	r2, r5
 80064d8:	68b9      	ldr	r1, [r7, #8]
 80064da:	4620      	mov	r0, r4
 80064dc:	f000 f8f2 	bl	80066c4 <_ZNSt12__shared_ptrI12PayloadClassLN9__gnu_cxx12_Lock_policyE0EEC1ISaIS0_EJRPKcjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bdb0      	pop	{r4, r5, r7, pc}

080064ea <_ZNKSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_get_sizeEv>:
      size_t _M_get_size() const { return _M_impl._M_node._M_size; }
 80064ea:	b480      	push	{r7}
 80064ec:	b083      	sub	sp, #12
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	4618      	mov	r0, r3
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr

08006502 <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8006502:	b580      	push	{r7, lr}
 8006504:	b082      	sub	sp, #8
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
 800650a:	6039      	str	r1, [r7, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4618      	mov	r0, r3
 8006510:	f7fe f833 	bl	800457a <_ZNSt5tupleIJP12PayloadClassSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f7fe f92f 	bl	8004778 <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE6_M_ptrEv>
 800651a:	4602      	mov	r2, r0
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	6013      	str	r3, [r2, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4618      	mov	r0, r3
 8006524:	3708      	adds	r7, #8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <_ZSt4moveIRSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800652a:	b480      	push	{r7}
 800652c:	b083      	sub	sp, #12
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4618      	mov	r0, r3
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	3304      	adds	r3, #4
 8006556:	4618      	mov	r0, r3
 8006558:	f7fe fa3a 	bl	80049d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	1d1a      	adds	r2, r3, #4
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	3304      	adds	r3, #4
 8006564:	4619      	mov	r1, r3
 8006566:	4610      	mov	r0, r2
 8006568:	f7ff ff2a 	bl	80063c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	2200      	movs	r2, #0
 8006570:	601a      	str	r2, [r3, #0]
      }
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4618      	mov	r0, r3
 8006576:	3708      	adds	r7, #8
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>:
      use_count() const noexcept
      { return _M_refcount._M_get_use_count(); }

      /// Exchange both the owned pointer and the stored pointer.
      void
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
      {
	std::swap(_M_ptr, __other._M_ptr);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	4611      	mov	r1, r2
 800658c:	4618      	mov	r0, r3
 800658e:	f000 f8cb 	bl	8006728 <_ZSt4swapIP11AbstractMsgENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	_M_refcount._M_swap(__other._M_refcount);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	1d1a      	adds	r2, r3, #4
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	3304      	adds	r3, #4
 800659a:	4619      	mov	r1, r3
 800659c:	4610      	mov	r0, r2
 800659e:	f7ff ff0f 	bl	80063c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 80065a2:	bf00      	nop
 80065a4:	3708      	adds	r7, #8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <_ZSt3getILj0EJP12PayloadClassSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b082      	sub	sp, #8
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4618      	mov	r0, r3
 80065b6:	f000 f8d6 	bl	8006766 <_ZSt12__get_helperILj0EP12PayloadClassJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80065ba:	4603      	mov	r3, r0
 80065bc:	4618      	mov	r0, r3
 80065be:	3708      	adds	r7, #8
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <_ZNSt12__shared_ptrI11HeaderClassLN9__gnu_cxx12_Lock_policyE0EEC1ISaIS0_EJRKhjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
      /// @}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 80065c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065c6:	b087      	sub	sp, #28
 80065c8:	af02      	add	r7, sp, #8
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
 80065d0:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	601a      	str	r2, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	1d1c      	adds	r4, r3, #4
 80065dc:	68fd      	ldr	r5, [r7, #12]
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f7ff fc44 	bl	8005e6c <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 80065e4:	4606      	mov	r6, r0
 80065e6:	6838      	ldr	r0, [r7, #0]
 80065e8:	f7ff faa1 	bl	8005b2e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80065ec:	4603      	mov	r3, r0
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	4633      	mov	r3, r6
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	4629      	mov	r1, r5
 80065f6:	4620      	mov	r0, r4
 80065f8:	f000 f8c1 	bl	800677e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I11HeaderClassSaIS4_EJRKhjEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4619      	mov	r1, r3
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f000 f91a 	bl	800683c <_ZNSt12__shared_ptrI11HeaderClassLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4618      	mov	r0, r3
 800660c:	3714      	adds	r7, #20
 800660e:	46bd      	mov	sp, r7
 8006610:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006612 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_get_nodeEv>:
      _M_get_node()
 8006612:	b580      	push	{r7, lr}
 8006614:	b082      	sub	sp, #8
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
      { return _Node_alloc_traits::allocate(_M_impl, 1); }
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2101      	movs	r1, #1
 800661e:	4618      	mov	r0, r3
 8006620:	f000 f917 	bl	8006852 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE8allocateERS5_j>
 8006624:	4603      	mov	r3, r0
 8006626:	4618      	mov	r0, r3
 8006628:	3708      	adds	r7, #8
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <_ZNSt15__allocated_ptrISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEEC1ERS5_PS4_>:
    {
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800662e:	b580      	push	{r7, lr}
 8006630:	b084      	sub	sp, #16
 8006632:	af00      	add	r7, sp, #0
 8006634:	60f8      	str	r0, [r7, #12]
 8006636:	60b9      	str	r1, [r7, #8]
 8006638:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800663a:	68b8      	ldr	r0, [r7, #8]
 800663c:	f000 f918 	bl	8006870 <_ZSt11__addressofISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEEPT_RS6_>
 8006640:	4602      	mov	r2, r0
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	601a      	str	r2, [r3, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	605a      	str	r2, [r3, #4]
      { }
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4618      	mov	r0, r3
 8006650:	3710      	adds	r7, #16
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <_ZNSt15__allocated_ptrISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
 8006656:	b580      	push	{r7, lr}
 8006658:	b082      	sub	sp, #8
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
      {
	if (_M_ptr != nullptr)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d007      	beq.n	8006676 <_ZNSt15__allocated_ptrISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6818      	ldr	r0, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	4619      	mov	r1, r3
 8006672:	f7fe fa2a 	bl	8004aca <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE10deallocateERS5_PS4_j>
      }
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4618      	mov	r0, r3
 800667a:	3708      	adds	r7, #8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE9constructIS3_JS3_EEEvRS5_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f7ff feac 	bl	80063ea <_ZSt7forwardISt10shared_ptrI11AbstractMsgEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006692:	4603      	mov	r3, r0
 8006694:	461a      	mov	r2, r3
 8006696:	68b9      	ldr	r1, [r7, #8]
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f000 f8f4 	bl	8006886 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE9constructIS4_JS4_EEEvPT_DpOT0_>
	}
 800669e:	bf00      	nop
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <_ZNSt15__allocated_ptrISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEEaSEDn>:

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
 80066a6:	b480      	push	{r7}
 80066a8:	b083      	sub	sp, #12
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
 80066ae:	6039      	str	r1, [r7, #0]
      {
	_M_ptr = nullptr;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	605a      	str	r2, [r3, #4]
	return *this;
 80066b6:	687b      	ldr	r3, [r7, #4]
      }
 80066b8:	4618      	mov	r0, r3
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <_ZNSt12__shared_ptrI12PayloadClassLN9__gnu_cxx12_Lock_policyE0EEC1ISaIS0_EJRPKcjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 80066c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066c6:	b087      	sub	sp, #28
 80066c8:	af02      	add	r7, sp, #8
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
 80066d0:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	601a      	str	r2, [r3, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	1d1c      	adds	r4, r3, #4
 80066dc:	68fd      	ldr	r5, [r7, #12]
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7ff fc62 	bl	8005fa8 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80066e4:	4606      	mov	r6, r0
 80066e6:	6838      	ldr	r0, [r7, #0]
 80066e8:	f7ff fa21 	bl	8005b2e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80066ec:	4603      	mov	r3, r0
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	4633      	mov	r3, r6
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	4629      	mov	r1, r5
 80066f6:	4620      	mov	r0, r4
 80066f8:	f000 f8dd 	bl	80068b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I12PayloadClassSaIS4_EJRPKcjEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4619      	mov	r1, r3
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f000 f936 	bl	8006974 <_ZNSt12__shared_ptrI12PayloadClassLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	4618      	mov	r0, r3
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006712 <_ZSt4moveIRP11AbstractMsgEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8006712:	b480      	push	{r7}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4618      	mov	r0, r3
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <_ZSt4swapIP11AbstractMsgENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7ff ffed 	bl	8006712 <_ZSt4moveIRP11AbstractMsgEONSt16remove_referenceIT_E4typeEOS4_>
 8006738:	4603      	mov	r3, r0
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800673e:	6838      	ldr	r0, [r7, #0]
 8006740:	f7ff ffe7 	bl	8006712 <_ZSt4moveIRP11AbstractMsgEONSt16remove_referenceIT_E4typeEOS4_>
 8006744:	4603      	mov	r3, r0
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800674c:	f107 030c 	add.w	r3, r7, #12
 8006750:	4618      	mov	r0, r3
 8006752:	f7ff ffde 	bl	8006712 <_ZSt4moveIRP11AbstractMsgEONSt16remove_referenceIT_E4typeEOS4_>
 8006756:	4603      	mov	r3, r0
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	601a      	str	r2, [r3, #0]
    }
 800675e:	bf00      	nop
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <_ZSt12__get_helperILj0EP12PayloadClassJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8006766:	b580      	push	{r7, lr}
 8006768:	b082      	sub	sp, #8
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f90b 	bl	800698a <_ZNSt11_Tuple_implILj0EJP12PayloadClassSt14default_deleteIS0_EEE7_M_headERKS4_>
 8006774:	4603      	mov	r3, r0
 8006776:	4618      	mov	r0, r3
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I11HeaderClassSaIS4_EJRKhjEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 800677e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006782:	b08a      	sub	sp, #40	; 0x28
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
 800678c:	603b      	str	r3, [r7, #0]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	f107 0318 	add.w	r3, r7, #24
 8006794:	4611      	mov	r1, r2
 8006796:	4618      	mov	r0, r3
 8006798:	f000 f904 	bl	80069a4 <_ZNSaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEEC1IS0_EERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 800679c:	f107 0310 	add.w	r3, r7, #16
 80067a0:	f107 0218 	add.w	r2, r7, #24
 80067a4:	4611      	mov	r1, r2
 80067a6:	4618      	mov	r0, r3
 80067a8:	f000 f915 	bl	80069d6 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 80067ac:	f107 0310 	add.w	r3, r7, #16
 80067b0:	4618      	mov	r0, r3
 80067b2:	f000 f938 	bl	8006a26 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 80067b6:	6278      	str	r0, [r7, #36]	; 0x24
	  auto __pi = ::new (__mem)
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	f107 031c 	add.w	r3, r7, #28
 80067be:	4611      	mov	r1, r2
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 f93e 	bl	8006a42 <_ZNSaI11HeaderClassEC1ERKS0_>
 80067c6:	f107 051c 	add.w	r5, r7, #28
	    _Sp_cp_type(__a._M_a, std::forward<_Args>(__args)...);
 80067ca:	6838      	ldr	r0, [r7, #0]
 80067cc:	f7ff fb4e 	bl	8005e6c <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 80067d0:	4606      	mov	r6, r0
 80067d2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80067d4:	f7ff f9ab 	bl	8005b2e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80067d8:	4680      	mov	r8, r0
	  auto __pi = ::new (__mem)
 80067da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067dc:	4619      	mov	r1, r3
 80067de:	2014      	movs	r0, #20
 80067e0:	f7fe fafc 	bl	8004ddc <_ZnwjPv>
 80067e4:	4604      	mov	r4, r0
 80067e6:	4643      	mov	r3, r8
 80067e8:	4632      	mov	r2, r6
 80067ea:	4629      	mov	r1, r5
 80067ec:	4620      	mov	r0, r4
 80067ee:	f000 f94f 	bl	8006a90 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJRKhjEEES1_DpOT_>
 80067f2:	623c      	str	r4, [r7, #32]
 80067f4:	f107 031c 	add.w	r3, r7, #28
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7ff fb2b 	bl	8005e54 <_ZNSaI11HeaderClassED1Ev>
	  __guard = nullptr;
 80067fe:	f107 0310 	add.w	r3, r7, #16
 8006802:	2100      	movs	r1, #0
 8006804:	4618      	mov	r0, r3
 8006806:	f000 f97d 	bl	8006b04 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6a3a      	ldr	r2, [r7, #32]
 800680e:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 8006810:	6a38      	ldr	r0, [r7, #32]
 8006812:	f000 f986 	bl	8006b22 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8006816:	4602      	mov	r2, r0
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	601a      	str	r2, [r3, #0]
	}
 800681c:	f107 0310 	add.w	r3, r7, #16
 8006820:	4618      	mov	r0, r3
 8006822:	f000 f8eb 	bl	80069fc <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8006826:	f107 0318 	add.w	r3, r7, #24
 800682a:	4618      	mov	r0, r3
 800682c:	f000 f8c7 	bl	80069be <_ZNSaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	4618      	mov	r0, r3
 8006834:	3728      	adds	r7, #40	; 0x28
 8006836:	46bd      	mov	sp, r7
 8006838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800683c <_ZNSt12__shared_ptrI11HeaderClassLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
	{ }
 8006846:	bf00      	nop
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr

08006852 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE8allocateERS5_j>:
      allocate(allocator_type& __a, size_type __n)
 8006852:	b580      	push	{r7, lr}
 8006854:	b082      	sub	sp, #8
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
 800685a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800685c:	2200      	movs	r2, #0
 800685e:	6839      	ldr	r1, [r7, #0]
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 f978 	bl	8006b56 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE8allocateEjPKv>
 8006866:	4603      	mov	r3, r0
 8006868:	4618      	mov	r0, r3
 800686a:	3708      	adds	r7, #8
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <_ZSt11__addressofISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4618      	mov	r0, r3
 800687c:	370c      	adds	r7, #12
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr

08006886 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE9constructIS4_JS4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8006886:	b590      	push	{r4, r7, lr}
 8006888:	b085      	sub	sp, #20
 800688a:	af00      	add	r7, sp, #0
 800688c:	60f8      	str	r0, [r7, #12]
 800688e:	60b9      	str	r1, [r7, #8]
 8006890:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f7ff fda9 	bl	80063ea <_ZSt7forwardISt10shared_ptrI11AbstractMsgEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006898:	4604      	mov	r4, r0
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	4619      	mov	r1, r3
 800689e:	2008      	movs	r0, #8
 80068a0:	f7fe fa9c 	bl	8004ddc <_ZnwjPv>
 80068a4:	4603      	mov	r3, r0
 80068a6:	4621      	mov	r1, r4
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 f97d 	bl	8006ba8 <_ZNSt10shared_ptrI11AbstractMsgEC1EOS1_>
 80068ae:	bf00      	nop
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd90      	pop	{r4, r7, pc}

080068b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I12PayloadClassSaIS4_EJRPKcjEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 80068b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068ba:	b08a      	sub	sp, #40	; 0x28
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	607a      	str	r2, [r7, #4]
 80068c4:	603b      	str	r3, [r7, #0]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	f107 0318 	add.w	r3, r7, #24
 80068cc:	4611      	mov	r1, r2
 80068ce:	4618      	mov	r0, r3
 80068d0:	f000 f97d 	bl	8006bce <_ZNSaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEEC1IS0_EERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 80068d4:	f107 0310 	add.w	r3, r7, #16
 80068d8:	f107 0218 	add.w	r2, r7, #24
 80068dc:	4611      	mov	r1, r2
 80068de:	4618      	mov	r0, r3
 80068e0:	f000 f98e 	bl	8006c00 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 80068e4:	f107 0310 	add.w	r3, r7, #16
 80068e8:	4618      	mov	r0, r3
 80068ea:	f000 f9b1 	bl	8006c50 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 80068ee:	6278      	str	r0, [r7, #36]	; 0x24
	  auto __pi = ::new (__mem)
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	f107 031c 	add.w	r3, r7, #28
 80068f6:	4611      	mov	r1, r2
 80068f8:	4618      	mov	r0, r3
 80068fa:	f000 f9b7 	bl	8006c6c <_ZNSaI12PayloadClassEC1ERKS0_>
 80068fe:	f107 051c 	add.w	r5, r7, #28
	    _Sp_cp_type(__a._M_a, std::forward<_Args>(__args)...);
 8006902:	6838      	ldr	r0, [r7, #0]
 8006904:	f7ff fb50 	bl	8005fa8 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8006908:	4606      	mov	r6, r0
 800690a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800690c:	f7ff f90f 	bl	8005b2e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006910:	4680      	mov	r8, r0
	  auto __pi = ::new (__mem)
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006914:	4619      	mov	r1, r3
 8006916:	2018      	movs	r0, #24
 8006918:	f7fe fa60 	bl	8004ddc <_ZnwjPv>
 800691c:	4604      	mov	r4, r0
 800691e:	4643      	mov	r3, r8
 8006920:	4632      	mov	r2, r6
 8006922:	4629      	mov	r1, r5
 8006924:	4620      	mov	r0, r4
 8006926:	f000 f9c7 	bl	8006cb8 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcjEEES1_DpOT_>
 800692a:	623c      	str	r4, [r7, #32]
 800692c:	f107 031c 	add.w	r3, r7, #28
 8006930:	4618      	mov	r0, r3
 8006932:	f7ff fb2d 	bl	8005f90 <_ZNSaI12PayloadClassED1Ev>
	  __guard = nullptr;
 8006936:	f107 0310 	add.w	r3, r7, #16
 800693a:	2100      	movs	r1, #0
 800693c:	4618      	mov	r0, r3
 800693e:	f000 f9f5 	bl	8006d2c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6a3a      	ldr	r2, [r7, #32]
 8006946:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 8006948:	6a38      	ldr	r0, [r7, #32]
 800694a:	f000 f9fe 	bl	8006d4a <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800694e:	4602      	mov	r2, r0
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	601a      	str	r2, [r3, #0]
	}
 8006954:	f107 0310 	add.w	r3, r7, #16
 8006958:	4618      	mov	r0, r3
 800695a:	f000 f964 	bl	8006c26 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800695e:	f107 0318 	add.w	r3, r7, #24
 8006962:	4618      	mov	r0, r3
 8006964:	f000 f940 	bl	8006be8 <_ZNSaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	4618      	mov	r0, r3
 800696c:	3728      	adds	r7, #40	; 0x28
 800696e:	46bd      	mov	sp, r7
 8006970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006974 <_ZNSt12__shared_ptrI12PayloadClassLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
	{ }
 800697e:	bf00      	nop
 8006980:	370c      	adds	r7, #12
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr

0800698a <_ZNSt11_Tuple_implILj0EJP12PayloadClassSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800698a:	b580      	push	{r7, lr}
 800698c:	b082      	sub	sp, #8
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4618      	mov	r0, r3
 8006996:	f000 f9e6 	bl	8006d66 <_ZNSt10_Head_baseILj0EP12PayloadClassLb0EE7_M_headERKS2_>
 800699a:	4603      	mov	r3, r0
 800699c:	4618      	mov	r0, r3
 800699e:	3708      	adds	r7, #8
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <_ZNSaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEEC1IS0_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f9e4 	bl	8006d7c <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEEC1Ev>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4618      	mov	r0, r3
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <_ZNSaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80069be:	b580      	push	{r7, lr}
 80069c0:	b082      	sub	sp, #8
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f9e3 	bl	8006d92 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEED1Ev>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4618      	mov	r0, r3
 80069d0:	3708      	adds	r7, #8
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    };

  /// Allocate space for a single object using __a
  template<typename _Alloc>
    __allocated_ptr<_Alloc>
    __allocate_guarded(_Alloc& __a)
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b082      	sub	sp, #8
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
 80069de:	6039      	str	r1, [r7, #0]
    {
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 80069e0:	2101      	movs	r1, #1
 80069e2:	6838      	ldr	r0, [r7, #0]
 80069e4:	f000 f9e0 	bl	8006da8 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 80069e8:	4603      	mov	r3, r0
 80069ea:	461a      	mov	r2, r3
 80069ec:	6839      	ldr	r1, [r7, #0]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f9e9 	bl	8006dc6 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d007      	beq.n	8006a1c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6818      	ldr	r0, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	4619      	mov	r1, r3
 8006a18:	f000 f9e9 	bl	8006dee <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3708      	adds	r7, #8
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b082      	sub	sp, #8
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 f9ea 	bl	8006e0c <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <_ZNSaI11HeaderClassEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b082      	sub	sp, #8
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
 8006a4a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8006a4c:	6839      	ldr	r1, [r7, #0]
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f9e7 	bl	8006e22 <_ZN9__gnu_cxx13new_allocatorI11HeaderClassEC1ERKS2_>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4618      	mov	r0, r3
 8006a58:	3708      	adds	r7, #8
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <_ZNSt14_Sp_ebo_helperILi0ESaI11HeaderClassELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b082      	sub	sp, #8
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7ff f9f4 	bl	8005e54 <_ZNSaI11HeaderClassED1Ev>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Alloc>
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b082      	sub	sp, #8
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f7ff ffed 	bl	8006a5e <_ZNSt14_Sp_ebo_helperILi0ESaI11HeaderClassELb1EED1Ev>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4618      	mov	r0, r3
 8006a88:	3708      	adds	r7, #8
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
	...

08006a90 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJRKhjEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 8006a90:	b5b0      	push	{r4, r5, r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
 8006a9c:	603b      	str	r3, [r7, #0]
	: _M_impl(__a)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f000 f9cb 	bl	8006e3c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8006aa6:	4a16      	ldr	r2, [pc, #88]	; (8006b00 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJRKhjEEES1_DpOT_+0x70>)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	601a      	str	r2, [r3, #0]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f103 040c 	add.w	r4, r3, #12
 8006ab2:	f107 0314 	add.w	r3, r7, #20
 8006ab6:	68b9      	ldr	r1, [r7, #8]
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7ff ffc2 	bl	8006a42 <_ZNSaI11HeaderClassEC1ERKS0_>
 8006abe:	f107 0314 	add.w	r3, r7, #20
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	f000 f9cf 	bl	8006e68 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
 8006aca:	f107 0314 	add.w	r3, r7, #20
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7ff f9c0 	bl	8005e54 <_ZNSaI11HeaderClassED1Ev>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f000 f824 	bl	8006b22 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8006ada:	4604      	mov	r4, r0
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7ff f9c5 	bl	8005e6c <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8006ae2:	4605      	mov	r5, r0
 8006ae4:	6838      	ldr	r0, [r7, #0]
 8006ae6:	f7ff f822 	bl	8005b2e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006aea:	4603      	mov	r3, r0
 8006aec:	462a      	mov	r2, r5
 8006aee:	4621      	mov	r1, r4
 8006af0:	68b8      	ldr	r0, [r7, #8]
 8006af2:	f000 f9c7 	bl	8006e84 <_ZNSt16allocator_traitsISaI11HeaderClassEE9constructIS0_JRKhjEEEvRS1_PT_DpOT0_>
	}
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	4618      	mov	r0, r3
 8006afa:	3718      	adds	r7, #24
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bdb0      	pop	{r4, r5, r7, pc}
 8006b00:	0800f604 	.word	0x0800f604

08006b04 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	605a      	str	r2, [r3, #4]
	return *this;
 8006b14:	687b      	ldr	r3, [r7, #4]
      }
 8006b16:	4618      	mov	r0, r3
 8006b18:	370c      	adds	r7, #12
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b082      	sub	sp, #8
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	330c      	adds	r3, #12
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f000 f9c0 	bl	8006eb4 <_ZN9__gnu_cxx16__aligned_bufferI11HeaderClassE6_M_ptrEv>
 8006b34:	4603      	mov	r3, r0
 8006b36:	4618      	mov	r0, r3
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8006b3e:	b480      	push	{r7}
 8006b40:	b083      	sub	sp, #12
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006b46:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	370c      	adds	r7, #12
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b084      	sub	sp, #16
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	60f8      	str	r0, [r7, #12]
 8006b5e:	60b9      	str	r1, [r7, #8]
 8006b60:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f7ff ffeb 	bl	8006b3e <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE11_M_max_sizeEv>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	bf8c      	ite	hi
 8006b70:	2301      	movhi	r3, #1
 8006b72:	2300      	movls	r3, #0
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	bf14      	ite	ne
 8006b7a:	2301      	movne	r3, #1
 8006b7c:	2300      	moveq	r3, #0
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d007      	beq.n	8006b94 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b8a:	d301      	bcc.n	8006b90 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8006b8c:	f005 fb6d 	bl	800c26a <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8006b90:	f005 fb68 	bl	800c264 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	011b      	lsls	r3, r3, #4
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f005 faab 	bl	800c0f4 <_Znwj>
 8006b9e:	4603      	mov	r3, r0
      }
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <_ZNSt10shared_ptrI11AbstractMsgEC1EOS1_>:
      shared_ptr(shared_ptr&& __r) noexcept
 8006ba8:	b590      	push	{r4, r7, lr}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
      : __shared_ptr<_Tp>(std::move(__r)) { }
 8006bb2:	687c      	ldr	r4, [r7, #4]
 8006bb4:	6838      	ldr	r0, [r7, #0]
 8006bb6:	f7ff f9b6 	bl	8005f26 <_ZSt4moveIRSt10shared_ptrI11AbstractMsgEEONSt16remove_referenceIT_E4typeEOS5_>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	f7ff fcbe 	bl	8006540 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	370c      	adds	r7, #12
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd90      	pop	{r4, r7, pc}

08006bce <_ZNSaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEEC1IS0_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b082      	sub	sp, #8
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	6039      	str	r1, [r7, #0]
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 f977 	bl	8006ecc <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEEC1Ev>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4618      	mov	r0, r3
 8006be2:	3708      	adds	r7, #8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <_ZNSaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 f976 	bl	8006ee2 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEED1Ev>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3708      	adds	r7, #8
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    __allocate_guarded(_Alloc& __a)
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	6838      	ldr	r0, [r7, #0]
 8006c0e:	f000 f973 	bl	8006ef8 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 8006c12:	4603      	mov	r3, r0
 8006c14:	461a      	mov	r2, r3
 8006c16:	6839      	ldr	r1, [r7, #0]
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f97c 	bl	8006f16 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	3708      	adds	r7, #8
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b082      	sub	sp, #8
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d007      	beq.n	8006c46 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6818      	ldr	r0, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	4619      	mov	r1, r3
 8006c42:	f000 f97c 	bl	8006f3e <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3708      	adds	r7, #8
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 f97d 	bl	8006f5c <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 8006c62:	4603      	mov	r3, r0
 8006c64:	4618      	mov	r0, r3
 8006c66:	3708      	adds	r7, #8
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <_ZNSaI12PayloadClassEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8006c76:	6839      	ldr	r1, [r7, #0]
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f97a 	bl	8006f72 <_ZN9__gnu_cxx13new_allocatorI12PayloadClassEC1ERKS2_>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4618      	mov	r0, r3
 8006c82:	3708      	adds	r7, #8
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <_ZNSt14_Sp_ebo_helperILi0ESaI12PayloadClassELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f7ff f97d 	bl	8005f90 <_ZNSaI12PayloadClassED1Ev>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3708      	adds	r7, #8
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Alloc>
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f7ff ffed 	bl	8006c88 <_ZNSt14_Sp_ebo_helperILi0ESaI12PayloadClassELb1EED1Ev>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3708      	adds	r7, #8
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcjEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 8006cb8:	b5b0      	push	{r4, r5, r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
 8006cc4:	603b      	str	r3, [r7, #0]
	: _M_impl(__a)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f000 f8b7 	bl	8006e3c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8006cce:	4a16      	ldr	r2, [pc, #88]	; (8006d28 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcjEEES1_DpOT_+0x70>)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f103 040c 	add.w	r4, r3, #12
 8006cda:	f107 0314 	add.w	r3, r7, #20
 8006cde:	68b9      	ldr	r1, [r7, #8]
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f7ff ffc3 	bl	8006c6c <_ZNSaI12PayloadClassEC1ERKS0_>
 8006ce6:	f107 0314 	add.w	r3, r7, #20
 8006cea:	4619      	mov	r1, r3
 8006cec:	4620      	mov	r0, r4
 8006cee:	f000 f94c 	bl	8006f8a <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
 8006cf2:	f107 0314 	add.w	r3, r7, #20
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7ff f94a 	bl	8005f90 <_ZNSaI12PayloadClassED1Ev>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f000 f824 	bl	8006d4a <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8006d02:	4604      	mov	r4, r0
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f7ff f94f 	bl	8005fa8 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8006d0a:	4605      	mov	r5, r0
 8006d0c:	6838      	ldr	r0, [r7, #0]
 8006d0e:	f7fe ff0e 	bl	8005b2e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006d12:	4603      	mov	r3, r0
 8006d14:	462a      	mov	r2, r5
 8006d16:	4621      	mov	r1, r4
 8006d18:	68b8      	ldr	r0, [r7, #8]
 8006d1a:	f000 f944 	bl	8006fa6 <_ZNSt16allocator_traitsISaI12PayloadClassEE9constructIS0_JRPKcjEEEvRS1_PT_DpOT0_>
	}
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	4618      	mov	r0, r3
 8006d22:	3718      	adds	r7, #24
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bdb0      	pop	{r4, r5, r7, pc}
 8006d28:	0800f5e8 	.word	0x0800f5e8

08006d2c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	605a      	str	r2, [r3, #4]
	return *this;
 8006d3c:	687b      	ldr	r3, [r7, #4]
      }
 8006d3e:	4618      	mov	r0, r3
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b082      	sub	sp, #8
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	330c      	adds	r3, #12
 8006d56:	4618      	mov	r0, r3
 8006d58:	f000 f93d 	bl	8006fd6 <_ZN9__gnu_cxx16__aligned_bufferI12PayloadClassE6_M_ptrEv>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <_ZNSt10_Head_baseILj0EP12PayloadClassLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8006d66:	b480      	push	{r7}
 8006d68:	b083      	sub	sp, #12
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4618      	mov	r0, r3
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4618      	mov	r0, r3
 8006d88:	370c      	adds	r7, #12
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006d92:	b480      	push	{r7}
 8006d94:	b083      	sub	sp, #12
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006db2:	2200      	movs	r2, #0
 8006db4:	6839      	ldr	r1, [r7, #0]
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f928 	bl	800700c <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3708      	adds	r7, #8
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b084      	sub	sp, #16
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	60f8      	str	r0, [r7, #12]
 8006dce:	60b9      	str	r1, [r7, #8]
 8006dd0:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8006dd2:	68b8      	ldr	r0, [r7, #8]
 8006dd4:	f000 f948 	bl	8007068 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	605a      	str	r2, [r3, #4]
      { }
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4618      	mov	r0, r3
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b084      	sub	sp, #16
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	60f8      	str	r0, [r7, #12]
 8006df6:	60b9      	str	r1, [r7, #8]
 8006df8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	68b9      	ldr	r1, [r7, #8]
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	f000 f93d 	bl	800707e <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE10deallocateEPS5_j>
 8006e04:	bf00      	nop
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 8006e14:	687b      	ldr	r3, [r7, #4]
    }
 8006e16:	4618      	mov	r0, r3
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr

08006e22 <_ZN9__gnu_cxx13new_allocatorI11HeaderClassEC1ERKS2_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8006e22:	b480      	push	{r7}
 8006e24:	b083      	sub	sp, #12
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
 8006e2a:	6039      	str	r1, [r7, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	370c      	adds	r7, #12
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr
	...

08006e3c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 8006e44:	4a07      	ldr	r2, [pc, #28]	; (8006e64 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	601a      	str	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	605a      	str	r2, [r3, #4]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	609a      	str	r2, [r3, #8]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4618      	mov	r0, r3
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr
 8006e64:	0800f63c 	.word	0x0800f63c

08006e68 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
 8006e72:	6839      	ldr	r1, [r7, #0]
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 f915 	bl	80070a4 <_ZNSt14_Sp_ebo_helperILi0ESaI11HeaderClassELb1EEC1ERKS1_>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <_ZNSt16allocator_traitsISaI11HeaderClassEE9constructIS0_JRKhjEEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8006e84:	b590      	push	{r4, r7, lr}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
 8006e90:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f7fe ffea 	bl	8005e6c <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8006e98:	4604      	mov	r4, r0
 8006e9a:	6838      	ldr	r0, [r7, #0]
 8006e9c:	f7fe fe47 	bl	8005b2e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	4622      	mov	r2, r4
 8006ea4:	68b9      	ldr	r1, [r7, #8]
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f000 f90a 	bl	80070c0 <_ZN9__gnu_cxx13new_allocatorI11HeaderClassE9constructIS1_JRKhjEEEvPT_DpOT0_>
	}
 8006eac:	bf00      	nop
 8006eae:	3714      	adds	r7, #20
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd90      	pop	{r4, r7, pc}

08006eb4 <_ZN9__gnu_cxx16__aligned_bufferI11HeaderClassE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 f920 	bl	8007102 <_ZN9__gnu_cxx16__aligned_bufferI11HeaderClassE7_M_addrEv>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3708      	adds	r7, #8
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	370c      	adds	r7, #12
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr

08006ee2 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006ee2:	b480      	push	{r7}
 8006ee4:	b083      	sub	sp, #12
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4618      	mov	r0, r3
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006f02:	2200      	movs	r2, #0
 8006f04:	6839      	ldr	r1, [r7, #0]
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f914 	bl	8007134 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b084      	sub	sp, #16
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	60f8      	str	r0, [r7, #12]
 8006f1e:	60b9      	str	r1, [r7, #8]
 8006f20:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8006f22:	68b8      	ldr	r0, [r7, #8]
 8006f24:	f000 f934 	bl	8007190 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	601a      	str	r2, [r3, #0]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	605a      	str	r2, [r3, #4]
      { }
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	4618      	mov	r0, r3
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b084      	sub	sp, #16
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	60f8      	str	r0, [r7, #12]
 8006f46:	60b9      	str	r1, [r7, #8]
 8006f48:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	68b9      	ldr	r1, [r7, #8]
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f000 f929 	bl	80071a6 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE10deallocateEPS5_j>
 8006f54:	bf00      	nop
 8006f56:	3710      	adds	r7, #16
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
    __to_address(_Tp* __ptr) noexcept
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
      return __ptr;
 8006f64:	687b      	ldr	r3, [r7, #4]
    }
 8006f66:	4618      	mov	r0, r3
 8006f68:	370c      	adds	r7, #12
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <_ZN9__gnu_cxx13new_allocatorI12PayloadClassEC1ERKS2_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8006f72:	b480      	push	{r7}
 8006f74:	b083      	sub	sp, #12
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
 8006f7a:	6039      	str	r1, [r7, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4618      	mov	r0, r3
 8006f80:	370c      	adds	r7, #12
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr

08006f8a <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b082      	sub	sp, #8
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
 8006f92:	6039      	str	r1, [r7, #0]
 8006f94:	6839      	ldr	r1, [r7, #0]
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f918 	bl	80071cc <_ZNSt14_Sp_ebo_helperILi0ESaI12PayloadClassELb1EEC1ERKS1_>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3708      	adds	r7, #8
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <_ZNSt16allocator_traitsISaI12PayloadClassEE9constructIS0_JRPKcjEEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8006fa6:	b590      	push	{r4, r7, lr}
 8006fa8:	b085      	sub	sp, #20
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	60f8      	str	r0, [r7, #12]
 8006fae:	60b9      	str	r1, [r7, #8]
 8006fb0:	607a      	str	r2, [r7, #4]
 8006fb2:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f7fe fff7 	bl	8005fa8 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8006fba:	4604      	mov	r4, r0
 8006fbc:	6838      	ldr	r0, [r7, #0]
 8006fbe:	f7fe fdb6 	bl	8005b2e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	4622      	mov	r2, r4
 8006fc6:	68b9      	ldr	r1, [r7, #8]
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f000 f90d 	bl	80071e8 <_ZN9__gnu_cxx13new_allocatorI12PayloadClassE9constructIS1_JRPKcjEEEvPT_DpOT0_>
	}
 8006fce:	bf00      	nop
 8006fd0:	3714      	adds	r7, #20
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd90      	pop	{r4, r7, pc}

08006fd6 <_ZN9__gnu_cxx16__aligned_bufferI12PayloadClassE6_M_ptrEv>:
      _M_ptr() noexcept
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b082      	sub	sp, #8
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f923 	bl	800722a <_ZN9__gnu_cxx16__aligned_bufferI12PayloadClassE7_M_addrEv>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3708      	adds	r7, #8
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
	...

08006ff0 <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006ff8:	4b03      	ldr	r3, [pc, #12]	; (8007008 <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	370c      	adds	r7, #12
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	06666666 	.word	0x06666666

0800700c <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f7ff ffe9 	bl	8006ff0 <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE11_M_max_sizeEv>
 800701e:	4602      	mov	r2, r0
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	4293      	cmp	r3, r2
 8007024:	bf8c      	ite	hi
 8007026:	2301      	movhi	r3, #1
 8007028:	2300      	movls	r3, #0
 800702a:	b2db      	uxtb	r3, r3
 800702c:	2b00      	cmp	r3, #0
 800702e:	bf14      	ite	ne
 8007030:	2301      	movne	r3, #1
 8007032:	2300      	moveq	r3, #0
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d007      	beq.n	800704a <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	4a09      	ldr	r2, [pc, #36]	; (8007064 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d901      	bls.n	8007046 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8007042:	f005 f912 	bl	800c26a <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8007046:	f005 f90d 	bl	800c264 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	4613      	mov	r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	4618      	mov	r0, r3
 8007056:	f005 f84d 	bl	800c0f4 <_Znwj>
 800705a:	4603      	mov	r3, r0
      }
 800705c:	4618      	mov	r0, r3
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	0ccccccc 	.word	0x0ccccccc

08007068 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4618      	mov	r0, r3
 8007074:	370c      	adds	r7, #12
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr

0800707e <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800707e:	b580      	push	{r7, lr}
 8007080:	b084      	sub	sp, #16
 8007082:	af00      	add	r7, sp, #0
 8007084:	60f8      	str	r0, [r7, #12]
 8007086:	60b9      	str	r1, [r7, #8]
 8007088:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	4613      	mov	r3, r2
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4413      	add	r3, r2
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	4619      	mov	r1, r3
 8007096:	68b8      	ldr	r0, [r7, #8]
 8007098:	f005 f828 	bl	800c0ec <_ZdlPvj>
      }
 800709c:	bf00      	nop
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <_ZNSt14_Sp_ebo_helperILi0ESaI11HeaderClassELb1EEC1ERKS1_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
 80070ae:	6839      	ldr	r1, [r7, #0]
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f7ff fcc6 	bl	8006a42 <_ZNSaI11HeaderClassEC1ERKS0_>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4618      	mov	r0, r3
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <_ZN9__gnu_cxx13new_allocatorI11HeaderClassE9constructIS1_JRKhjEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80070c0:	b5b0      	push	{r4, r5, r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	607a      	str	r2, [r7, #4]
 80070cc:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f7fe fecc 	bl	8005e6c <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 80070d4:	4603      	mov	r3, r0
 80070d6:	781c      	ldrb	r4, [r3, #0]
 80070d8:	6838      	ldr	r0, [r7, #0]
 80070da:	f7fe fd28 	bl	8005b2e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80070de:	4603      	mov	r3, r0
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	b2dd      	uxtb	r5, r3
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	4619      	mov	r1, r3
 80070e8:	2008      	movs	r0, #8
 80070ea:	f7fd fe77 	bl	8004ddc <_ZnwjPv>
 80070ee:	4603      	mov	r3, r0
 80070f0:	462a      	mov	r2, r5
 80070f2:	4621      	mov	r1, r4
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7fc fdab 	bl	8003c50 <_ZN11HeaderClassC1Ehh>
 80070fa:	bf00      	nop
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bdb0      	pop	{r4, r5, r7, pc}

08007102 <_ZN9__gnu_cxx16__aligned_bufferI11HeaderClassE7_M_addrEv>:
      _M_addr() noexcept
 8007102:	b480      	push	{r7}
 8007104:	b083      	sub	sp, #12
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 800710a:	687b      	ldr	r3, [r7, #4]
      }
 800710c:	4618      	mov	r0, r3
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007120:	4b03      	ldr	r3, [pc, #12]	; (8007130 <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 8007122:	4618      	mov	r0, r3
 8007124:	370c      	adds	r7, #12
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	05555555 	.word	0x05555555

08007134 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8007140:	68f8      	ldr	r0, [r7, #12]
 8007142:	f7ff ffe9 	bl	8007118 <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE11_M_max_sizeEv>
 8007146:	4602      	mov	r2, r0
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	4293      	cmp	r3, r2
 800714c:	bf8c      	ite	hi
 800714e:	2301      	movhi	r3, #1
 8007150:	2300      	movls	r3, #0
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b00      	cmp	r3, #0
 8007156:	bf14      	ite	ne
 8007158:	2301      	movne	r3, #1
 800715a:	2300      	moveq	r3, #0
 800715c:	b2db      	uxtb	r3, r3
 800715e:	2b00      	cmp	r3, #0
 8007160:	d007      	beq.n	8007172 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	4a09      	ldr	r2, [pc, #36]	; (800718c <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d901      	bls.n	800716e <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800716a:	f005 f87e 	bl	800c26a <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800716e:	f005 f879 	bl	800c264 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007172:	68ba      	ldr	r2, [r7, #8]
 8007174:	4613      	mov	r3, r2
 8007176:	005b      	lsls	r3, r3, #1
 8007178:	4413      	add	r3, r2
 800717a:	00db      	lsls	r3, r3, #3
 800717c:	4618      	mov	r0, r3
 800717e:	f004 ffb9 	bl	800c0f4 <_Znwj>
 8007182:	4603      	mov	r3, r0
      }
 8007184:	4618      	mov	r0, r3
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	0aaaaaaa 	.word	0x0aaaaaaa

08007190 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4618      	mov	r0, r3
 800719c:	370c      	adds	r7, #12
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr

080071a6 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b084      	sub	sp, #16
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	60f8      	str	r0, [r7, #12]
 80071ae:	60b9      	str	r1, [r7, #8]
 80071b0:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	4613      	mov	r3, r2
 80071b6:	005b      	lsls	r3, r3, #1
 80071b8:	4413      	add	r3, r2
 80071ba:	00db      	lsls	r3, r3, #3
 80071bc:	4619      	mov	r1, r3
 80071be:	68b8      	ldr	r0, [r7, #8]
 80071c0:	f004 ff94 	bl	800c0ec <_ZdlPvj>
      }
 80071c4:	bf00      	nop
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <_ZNSt14_Sp_ebo_helperILi0ESaI12PayloadClassELb1EEC1ERKS1_>:
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
 80071d6:	6839      	ldr	r1, [r7, #0]
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f7ff fd47 	bl	8006c6c <_ZNSaI12PayloadClassEC1ERKS0_>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4618      	mov	r0, r3
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <_ZN9__gnu_cxx13new_allocatorI12PayloadClassE9constructIS1_JRPKcjEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80071e8:	b5b0      	push	{r4, r5, r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	607a      	str	r2, [r7, #4]
 80071f4:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f7fe fed6 	bl	8005fa8 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80071fc:	4603      	mov	r3, r0
 80071fe:	681c      	ldr	r4, [r3, #0]
 8007200:	6838      	ldr	r0, [r7, #0]
 8007202:	f7fe fc94 	bl	8005b2e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8007206:	4603      	mov	r3, r0
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	b2dd      	uxtb	r5, r3
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	4619      	mov	r1, r3
 8007210:	200c      	movs	r0, #12
 8007212:	f7fd fde3 	bl	8004ddc <_ZnwjPv>
 8007216:	4603      	mov	r3, r0
 8007218:	462a      	mov	r2, r5
 800721a:	4621      	mov	r1, r4
 800721c:	4618      	mov	r0, r3
 800721e:	f000 f80f 	bl	8007240 <_ZN12PayloadClassC1IKcEEPT_h>
 8007222:	bf00      	nop
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bdb0      	pop	{r4, r5, r7, pc}

0800722a <_ZN9__gnu_cxx16__aligned_bufferI12PayloadClassE7_M_addrEv>:
      _M_addr() noexcept
 800722a:	b480      	push	{r7}
 800722c:	b083      	sub	sp, #12
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 8007232:	687b      	ldr	r3, [r7, #4]
      }
 8007234:	4618      	mov	r0, r3
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <_ZN12PayloadClassC1IKcEEPT_h>:
		PayloadClass(T* struct_or_plain_type_data, uint8_t data_size): _data_size(data_size), _data(new uint8_t[data_size])
 8007240:	b590      	push	{r4, r7, lr}
 8007242:	b087      	sub	sp, #28
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	4613      	mov	r3, r2
 800724c:	71fb      	strb	r3, [r7, #7]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	4618      	mov	r0, r3
 8007252:	f7fc fced 	bl	8003c30 <_ZN11AbstractMsgC1Ev>
 8007256:	4a18      	ldr	r2, [pc, #96]	; (80072b8 <_ZN12PayloadClassC1IKcEEPT_h+0x78>)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	601a      	str	r2, [r3, #0]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	79fa      	ldrb	r2, [r7, #7]
 8007260:	711a      	strb	r2, [r3, #4]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f103 0408 	add.w	r4, r3, #8
 8007268:	79fb      	ldrb	r3, [r7, #7]
 800726a:	4618      	mov	r0, r3
 800726c:	f004 ff53 	bl	800c116 <_Znaj>
 8007270:	4603      	mov	r3, r0
 8007272:	4619      	mov	r1, r3
 8007274:	4620      	mov	r0, r4
 8007276:	f7fd f934 	bl	80044e2 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
			uint8_t* data_ptr = (uint8_t*) struct_or_plain_type_data;
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	613b      	str	r3, [r7, #16]
			for( uint8_t i = 0; i < _data_size; i ++)
 800727e:	2300      	movs	r3, #0
 8007280:	75fb      	strb	r3, [r7, #23]
 8007282:	e00f      	b.n	80072a4 <_ZN12PayloadClassC1IKcEEPT_h+0x64>
				_data[i] = data_ptr[i];
 8007284:	7dfb      	ldrb	r3, [r7, #23]
 8007286:	693a      	ldr	r2, [r7, #16]
 8007288:	18d4      	adds	r4, r2, r3
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	3308      	adds	r3, #8
 800728e:	7dfa      	ldrb	r2, [r7, #23]
 8007290:	4611      	mov	r1, r2
 8007292:	4618      	mov	r0, r3
 8007294:	f7fd f953 	bl	800453e <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 8007298:	4603      	mov	r3, r0
 800729a:	7822      	ldrb	r2, [r4, #0]
 800729c:	701a      	strb	r2, [r3, #0]
			for( uint8_t i = 0; i < _data_size; i ++)
 800729e:	7dfb      	ldrb	r3, [r7, #23]
 80072a0:	3301      	adds	r3, #1
 80072a2:	75fb      	strb	r3, [r7, #23]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	791b      	ldrb	r3, [r3, #4]
 80072a8:	7dfa      	ldrb	r2, [r7, #23]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d3ea      	bcc.n	8007284 <_ZN12PayloadClassC1IKcEEPT_h+0x44>
		};
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	4618      	mov	r0, r3
 80072b2:	371c      	adds	r7, #28
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd90      	pop	{r4, r7, pc}
 80072b8:	0800f620 	.word	0x0800f620

080072bc <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	4a08      	ldr	r2, [pc, #32]	; (80072e8 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x2c>)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	601a      	str	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	330c      	adds	r3, #12
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7ff fce6 	bl	8006ca0 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplD1Ev>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7fe fcf6 	bl	8005cc8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4618      	mov	r0, r3
 80072e0:	3708      	adds	r7, #8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	0800f5e8 	.word	0x0800f5e8

080072ec <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f7ff ffe1 	bl	80072bc <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80072fa:	2118      	movs	r1, #24
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f004 fef5 	bl	800c0ec <_ZdlPvj>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4618      	mov	r0, r3
 8007306:	3708      	adds	r7, #8
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800730c:	b590      	push	{r4, r7, lr}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	330c      	adds	r3, #12
 8007318:	4618      	mov	r0, r3
 800731a:	f000 f8e3 	bl	80074e4 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800731e:	4604      	mov	r4, r0
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f7ff fd12 	bl	8006d4a <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8007326:	4603      	mov	r3, r0
 8007328:	4619      	mov	r1, r3
 800732a:	4620      	mov	r0, r4
 800732c:	f000 f8e6 	bl	80074fc <_ZNSt16allocator_traitsISaI12PayloadClassEE7destroyIS0_EEvRS1_PT_>
      }
 8007330:	bf00      	nop
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	bd90      	pop	{r4, r7, pc}

08007338 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8007338:	b580      	push	{r7, lr}
 800733a:	b086      	sub	sp, #24
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	330c      	adds	r3, #12
 8007344:	4618      	mov	r0, r3
 8007346:	f000 f8cd 	bl	80074e4 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800734a:	4602      	mov	r2, r0
 800734c:	f107 0314 	add.w	r3, r7, #20
 8007350:	4611      	mov	r1, r2
 8007352:	4618      	mov	r0, r3
 8007354:	f7ff fc3b 	bl	8006bce <_ZNSaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEEC1IS0_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8007358:	f107 0114 	add.w	r1, r7, #20
 800735c:	f107 030c 	add.w	r3, r7, #12
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	4618      	mov	r0, r3
 8007364:	f7ff fdd7 	bl	8006f16 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f7ff ffa7 	bl	80072bc <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 800736e:	f107 030c 	add.w	r3, r7, #12
 8007372:	4618      	mov	r0, r3
 8007374:	f7ff fc57 	bl	8006c26 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8007378:	f107 0314 	add.w	r3, r7, #20
 800737c:	4618      	mov	r0, r3
 800737e:	f7ff fc33 	bl	8006be8 <_ZNSaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8007382:	3718      	adds	r7, #24
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f7ff fcd9 	bl	8006d4a <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8007398:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 800739a:	f7fd fd3b 	bl	8004e14 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 800739e:	4602      	mov	r2, r0
	    ||
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d006      	beq.n	80073b4 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2c>
	    __ti == typeid(_Sp_make_shared_tag)
 80073a6:	4909      	ldr	r1, [pc, #36]	; (80073cc <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x44>)
 80073a8:	6838      	ldr	r0, [r7, #0]
 80073aa:	f004 ff39 	bl	800c220 <_ZNKSt9type_infoeqERKS_>
 80073ae:	4603      	mov	r3, r0
	    ||
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d001      	beq.n	80073b8 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 80073b4:	2301      	movs	r3, #1
 80073b6:	e000      	b.n	80073ba <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x32>
 80073b8:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d001      	beq.n	80073c2 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	  return __ptr;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	e000      	b.n	80073c4 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3c>
	return nullptr;
 80073c2:	2300      	movs	r3, #0
      }
 80073c4:	4618      	mov	r0, r3
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	0800f764 	.word	0x0800f764

080073d0 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	4a08      	ldr	r2, [pc, #32]	; (80073fc <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x2c>)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	601a      	str	r2, [r3, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	330c      	adds	r3, #12
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7ff fb47 	bl	8006a76 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplD1Ev>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fe fc6c 	bl	8005cc8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4618      	mov	r0, r3
 80073f4:	3708      	adds	r7, #8
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	0800f604 	.word	0x0800f604

08007400 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f7ff ffe1 	bl	80073d0 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800740e:	2114      	movs	r1, #20
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f004 fe6b 	bl	800c0ec <_ZdlPvj>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4618      	mov	r0, r3
 800741a:	3708      	adds	r7, #8
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8007420:	b590      	push	{r4, r7, lr}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	330c      	adds	r3, #12
 800742c:	4618      	mov	r0, r3
 800742e:	f000 f872 	bl	8007516 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8007432:	4604      	mov	r4, r0
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f7ff fb74 	bl	8006b22 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800743a:	4603      	mov	r3, r0
 800743c:	4619      	mov	r1, r3
 800743e:	4620      	mov	r0, r4
 8007440:	f000 f875 	bl	800752e <_ZNSt16allocator_traitsISaI11HeaderClassEE7destroyIS0_EEvRS1_PT_>
      }
 8007444:	bf00      	nop
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	bd90      	pop	{r4, r7, pc}

0800744c <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800744c:	b580      	push	{r7, lr}
 800744e:	b086      	sub	sp, #24
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	330c      	adds	r3, #12
 8007458:	4618      	mov	r0, r3
 800745a:	f000 f85c 	bl	8007516 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800745e:	4602      	mov	r2, r0
 8007460:	f107 0314 	add.w	r3, r7, #20
 8007464:	4611      	mov	r1, r2
 8007466:	4618      	mov	r0, r3
 8007468:	f7ff fa9c 	bl	80069a4 <_ZNSaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEEC1IS0_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800746c:	f107 0114 	add.w	r1, r7, #20
 8007470:	f107 030c 	add.w	r3, r7, #12
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	4618      	mov	r0, r3
 8007478:	f7ff fca5 	bl	8006dc6 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f7ff ffa7 	bl	80073d0 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 8007482:	f107 030c 	add.w	r3, r7, #12
 8007486:	4618      	mov	r0, r3
 8007488:	f7ff fab8 	bl	80069fc <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800748c:	f107 0314 	add.w	r3, r7, #20
 8007490:	4618      	mov	r0, r3
 8007492:	f7ff fa94 	bl	80069be <_ZNSaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8007496:	3718      	adds	r7, #24
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f7ff fb3b 	bl	8006b22 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 80074ac:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 80074ae:	f7fd fcb1 	bl	8004e14 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 80074b2:	4602      	mov	r2, r0
	    ||
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d006      	beq.n	80074c8 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2c>
	    __ti == typeid(_Sp_make_shared_tag)
 80074ba:	4909      	ldr	r1, [pc, #36]	; (80074e0 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x44>)
 80074bc:	6838      	ldr	r0, [r7, #0]
 80074be:	f004 feaf 	bl	800c220 <_ZNKSt9type_infoeqERKS_>
 80074c2:	4603      	mov	r3, r0
	    ||
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 80074c8:	2301      	movs	r3, #1
 80074ca:	e000      	b.n	80074ce <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x32>
 80074cc:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d001      	beq.n	80074d6 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	  return __ptr;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	e000      	b.n	80074d8 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3c>
	return nullptr;
 80074d6:	2300      	movs	r3, #0
      }
 80074d8:	4618      	mov	r0, r3
 80074da:	3710      	adds	r7, #16
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	0800f764 	.word	0x0800f764

080074e4 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 f82b 	bl	8007548 <_ZNSt14_Sp_ebo_helperILi0ESaI12PayloadClassELb1EE6_S_getERS2_>
 80074f2:	4603      	mov	r3, r0
 80074f4:	4618      	mov	r0, r3
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <_ZNSt16allocator_traitsISaI12PayloadClassEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8007506:	6839      	ldr	r1, [r7, #0]
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 f828 	bl	800755e <_ZN9__gnu_cxx13new_allocatorI12PayloadClassE7destroyIS1_EEvPT_>
	}
 800750e:	bf00      	nop
 8007510:	3708      	adds	r7, #8
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
 8007516:	b580      	push	{r7, lr}
 8007518:	b082      	sub	sp, #8
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 f82b 	bl	800757a <_ZNSt14_Sp_ebo_helperILi0ESaI11HeaderClassELb1EE6_S_getERS2_>
 8007524:	4603      	mov	r3, r0
 8007526:	4618      	mov	r0, r3
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <_ZNSt16allocator_traitsISaI11HeaderClassEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800752e:	b580      	push	{r7, lr}
 8007530:	b082      	sub	sp, #8
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8007538:	6839      	ldr	r1, [r7, #0]
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f828 	bl	8007590 <_ZN9__gnu_cxx13new_allocatorI11HeaderClassE7destroyIS1_EEvPT_>
	}
 8007540:	bf00      	nop
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <_ZNSt14_Sp_ebo_helperILi0ESaI12PayloadClassELb1EE6_S_getERS2_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4618      	mov	r0, r3
 8007554:	370c      	adds	r7, #12
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr

0800755e <_ZN9__gnu_cxx13new_allocatorI12PayloadClassE7destroyIS1_EEvPT_>:
	destroy(_Up* __p)
 800755e:	b580      	push	{r7, lr}
 8007560:	b082      	sub	sp, #8
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
 8007566:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6838      	ldr	r0, [r7, #0]
 8007570:	4798      	blx	r3
 8007572:	bf00      	nop
 8007574:	3708      	adds	r7, #8
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <_ZNSt14_Sp_ebo_helperILi0ESaI11HeaderClassELb1EE6_S_getERS2_>:
 800757a:	b480      	push	{r7}
 800757c:	b083      	sub	sp, #12
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4618      	mov	r0, r3
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <_ZN9__gnu_cxx13new_allocatorI11HeaderClassE7destroyIS1_EEvPT_>:
	destroy(_Up* __p)
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6838      	ldr	r0, [r7, #0]
 80075a2:	4798      	blx	r3
 80075a4:	bf00      	nop
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80075b2:	2300      	movs	r3, #0
 80075b4:	607b      	str	r3, [r7, #4]
 80075b6:	4b10      	ldr	r3, [pc, #64]	; (80075f8 <HAL_MspInit+0x4c>)
 80075b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ba:	4a0f      	ldr	r2, [pc, #60]	; (80075f8 <HAL_MspInit+0x4c>)
 80075bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80075c0:	6453      	str	r3, [r2, #68]	; 0x44
 80075c2:	4b0d      	ldr	r3, [pc, #52]	; (80075f8 <HAL_MspInit+0x4c>)
 80075c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075ca:	607b      	str	r3, [r7, #4]
 80075cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80075ce:	2300      	movs	r3, #0
 80075d0:	603b      	str	r3, [r7, #0]
 80075d2:	4b09      	ldr	r3, [pc, #36]	; (80075f8 <HAL_MspInit+0x4c>)
 80075d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d6:	4a08      	ldr	r2, [pc, #32]	; (80075f8 <HAL_MspInit+0x4c>)
 80075d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075dc:	6413      	str	r3, [r2, #64]	; 0x40
 80075de:	4b06      	ldr	r3, [pc, #24]	; (80075f8 <HAL_MspInit+0x4c>)
 80075e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075e6:	603b      	str	r3, [r7, #0]
 80075e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80075ea:	2007      	movs	r0, #7
 80075ec:	f000 fc02 	bl	8007df4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80075f0:	bf00      	nop
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	40023800 	.word	0x40023800

080075fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b08a      	sub	sp, #40	; 0x28
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007604:	f107 0314 	add.w	r3, r7, #20
 8007608:	2200      	movs	r2, #0
 800760a:	601a      	str	r2, [r3, #0]
 800760c:	605a      	str	r2, [r3, #4]
 800760e:	609a      	str	r2, [r3, #8]
 8007610:	60da      	str	r2, [r3, #12]
 8007612:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a28      	ldr	r2, [pc, #160]	; (80076bc <HAL_SPI_MspInit+0xc0>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d149      	bne.n	80076b2 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800761e:	2300      	movs	r3, #0
 8007620:	613b      	str	r3, [r7, #16]
 8007622:	4b27      	ldr	r3, [pc, #156]	; (80076c0 <HAL_SPI_MspInit+0xc4>)
 8007624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007626:	4a26      	ldr	r2, [pc, #152]	; (80076c0 <HAL_SPI_MspInit+0xc4>)
 8007628:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800762c:	6453      	str	r3, [r2, #68]	; 0x44
 800762e:	4b24      	ldr	r3, [pc, #144]	; (80076c0 <HAL_SPI_MspInit+0xc4>)
 8007630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007632:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007636:	613b      	str	r3, [r7, #16]
 8007638:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800763a:	2300      	movs	r3, #0
 800763c:	60fb      	str	r3, [r7, #12]
 800763e:	4b20      	ldr	r3, [pc, #128]	; (80076c0 <HAL_SPI_MspInit+0xc4>)
 8007640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007642:	4a1f      	ldr	r2, [pc, #124]	; (80076c0 <HAL_SPI_MspInit+0xc4>)
 8007644:	f043 0301 	orr.w	r3, r3, #1
 8007648:	6313      	str	r3, [r2, #48]	; 0x30
 800764a:	4b1d      	ldr	r3, [pc, #116]	; (80076c0 <HAL_SPI_MspInit+0xc4>)
 800764c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	60fb      	str	r3, [r7, #12]
 8007654:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007656:	2300      	movs	r3, #0
 8007658:	60bb      	str	r3, [r7, #8]
 800765a:	4b19      	ldr	r3, [pc, #100]	; (80076c0 <HAL_SPI_MspInit+0xc4>)
 800765c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765e:	4a18      	ldr	r2, [pc, #96]	; (80076c0 <HAL_SPI_MspInit+0xc4>)
 8007660:	f043 0302 	orr.w	r3, r3, #2
 8007664:	6313      	str	r3, [r2, #48]	; 0x30
 8007666:	4b16      	ldr	r3, [pc, #88]	; (80076c0 <HAL_SPI_MspInit+0xc4>)
 8007668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800766a:	f003 0302 	and.w	r3, r3, #2
 800766e:	60bb      	str	r3, [r7, #8]
 8007670:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007672:	23c0      	movs	r3, #192	; 0xc0
 8007674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007676:	2302      	movs	r3, #2
 8007678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800767a:	2300      	movs	r3, #0
 800767c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800767e:	2303      	movs	r3, #3
 8007680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007682:	2305      	movs	r3, #5
 8007684:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007686:	f107 0314 	add.w	r3, r7, #20
 800768a:	4619      	mov	r1, r3
 800768c:	480d      	ldr	r0, [pc, #52]	; (80076c4 <HAL_SPI_MspInit+0xc8>)
 800768e:	f001 f801 	bl	8008694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007692:	2308      	movs	r3, #8
 8007694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007696:	2302      	movs	r3, #2
 8007698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800769a:	2300      	movs	r3, #0
 800769c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800769e:	2303      	movs	r3, #3
 80076a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80076a2:	2305      	movs	r3, #5
 80076a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076a6:	f107 0314 	add.w	r3, r7, #20
 80076aa:	4619      	mov	r1, r3
 80076ac:	4806      	ldr	r0, [pc, #24]	; (80076c8 <HAL_SPI_MspInit+0xcc>)
 80076ae:	f000 fff1 	bl	8008694 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80076b2:	bf00      	nop
 80076b4:	3728      	adds	r7, #40	; 0x28
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	40013000 	.word	0x40013000
 80076c0:	40023800 	.word	0x40023800
 80076c4:	40020000 	.word	0x40020000
 80076c8:	40020400 	.word	0x40020400

080076cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076dc:	d115      	bne.n	800770a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80076de:	2300      	movs	r3, #0
 80076e0:	60fb      	str	r3, [r7, #12]
 80076e2:	4b0c      	ldr	r3, [pc, #48]	; (8007714 <HAL_TIM_Base_MspInit+0x48>)
 80076e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e6:	4a0b      	ldr	r2, [pc, #44]	; (8007714 <HAL_TIM_Base_MspInit+0x48>)
 80076e8:	f043 0301 	orr.w	r3, r3, #1
 80076ec:	6413      	str	r3, [r2, #64]	; 0x40
 80076ee:	4b09      	ldr	r3, [pc, #36]	; (8007714 <HAL_TIM_Base_MspInit+0x48>)
 80076f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f2:	f003 0301 	and.w	r3, r3, #1
 80076f6:	60fb      	str	r3, [r7, #12]
 80076f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80076fa:	2200      	movs	r2, #0
 80076fc:	2100      	movs	r1, #0
 80076fe:	201c      	movs	r0, #28
 8007700:	f000 fb83 	bl	8007e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007704:	201c      	movs	r0, #28
 8007706:	f000 fb9c 	bl	8007e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800770a:	bf00      	nop
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	40023800 	.word	0x40023800

08007718 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b08a      	sub	sp, #40	; 0x28
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007720:	f107 0314 	add.w	r3, r7, #20
 8007724:	2200      	movs	r2, #0
 8007726:	601a      	str	r2, [r3, #0]
 8007728:	605a      	str	r2, [r3, #4]
 800772a:	609a      	str	r2, [r3, #8]
 800772c:	60da      	str	r2, [r3, #12]
 800772e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a4b      	ldr	r2, [pc, #300]	; (8007864 <HAL_UART_MspInit+0x14c>)
 8007736:	4293      	cmp	r3, r2
 8007738:	f040 8090 	bne.w	800785c <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800773c:	2300      	movs	r3, #0
 800773e:	613b      	str	r3, [r7, #16]
 8007740:	4b49      	ldr	r3, [pc, #292]	; (8007868 <HAL_UART_MspInit+0x150>)
 8007742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007744:	4a48      	ldr	r2, [pc, #288]	; (8007868 <HAL_UART_MspInit+0x150>)
 8007746:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800774a:	6413      	str	r3, [r2, #64]	; 0x40
 800774c:	4b46      	ldr	r3, [pc, #280]	; (8007868 <HAL_UART_MspInit+0x150>)
 800774e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007754:	613b      	str	r3, [r7, #16]
 8007756:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007758:	2300      	movs	r3, #0
 800775a:	60fb      	str	r3, [r7, #12]
 800775c:	4b42      	ldr	r3, [pc, #264]	; (8007868 <HAL_UART_MspInit+0x150>)
 800775e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007760:	4a41      	ldr	r2, [pc, #260]	; (8007868 <HAL_UART_MspInit+0x150>)
 8007762:	f043 0301 	orr.w	r3, r3, #1
 8007766:	6313      	str	r3, [r2, #48]	; 0x30
 8007768:	4b3f      	ldr	r3, [pc, #252]	; (8007868 <HAL_UART_MspInit+0x150>)
 800776a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800776c:	f003 0301 	and.w	r3, r3, #1
 8007770:	60fb      	str	r3, [r7, #12]
 8007772:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8007774:	230c      	movs	r3, #12
 8007776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007778:	2302      	movs	r3, #2
 800777a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800777c:	2300      	movs	r3, #0
 800777e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007780:	2303      	movs	r3, #3
 8007782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007784:	2307      	movs	r3, #7
 8007786:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007788:	f107 0314 	add.w	r3, r7, #20
 800778c:	4619      	mov	r1, r3
 800778e:	4837      	ldr	r0, [pc, #220]	; (800786c <HAL_UART_MspInit+0x154>)
 8007790:	f000 ff80 	bl	8008694 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8007794:	4b36      	ldr	r3, [pc, #216]	; (8007870 <HAL_UART_MspInit+0x158>)
 8007796:	4a37      	ldr	r2, [pc, #220]	; (8007874 <HAL_UART_MspInit+0x15c>)
 8007798:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800779a:	4b35      	ldr	r3, [pc, #212]	; (8007870 <HAL_UART_MspInit+0x158>)
 800779c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80077a0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80077a2:	4b33      	ldr	r3, [pc, #204]	; (8007870 <HAL_UART_MspInit+0x158>)
 80077a4:	2240      	movs	r2, #64	; 0x40
 80077a6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80077a8:	4b31      	ldr	r3, [pc, #196]	; (8007870 <HAL_UART_MspInit+0x158>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80077ae:	4b30      	ldr	r3, [pc, #192]	; (8007870 <HAL_UART_MspInit+0x158>)
 80077b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80077b4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80077b6:	4b2e      	ldr	r3, [pc, #184]	; (8007870 <HAL_UART_MspInit+0x158>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80077bc:	4b2c      	ldr	r3, [pc, #176]	; (8007870 <HAL_UART_MspInit+0x158>)
 80077be:	2200      	movs	r2, #0
 80077c0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80077c2:	4b2b      	ldr	r3, [pc, #172]	; (8007870 <HAL_UART_MspInit+0x158>)
 80077c4:	2200      	movs	r2, #0
 80077c6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80077c8:	4b29      	ldr	r3, [pc, #164]	; (8007870 <HAL_UART_MspInit+0x158>)
 80077ca:	2200      	movs	r2, #0
 80077cc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80077ce:	4b28      	ldr	r3, [pc, #160]	; (8007870 <HAL_UART_MspInit+0x158>)
 80077d0:	2200      	movs	r2, #0
 80077d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80077d4:	4826      	ldr	r0, [pc, #152]	; (8007870 <HAL_UART_MspInit+0x158>)
 80077d6:	f000 fb4f 	bl	8007e78 <HAL_DMA_Init>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d001      	beq.n	80077e4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80077e0:	f7fc fe6a 	bl	80044b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a22      	ldr	r2, [pc, #136]	; (8007870 <HAL_UART_MspInit+0x158>)
 80077e8:	639a      	str	r2, [r3, #56]	; 0x38
 80077ea:	4a21      	ldr	r2, [pc, #132]	; (8007870 <HAL_UART_MspInit+0x158>)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80077f0:	4b21      	ldr	r3, [pc, #132]	; (8007878 <HAL_UART_MspInit+0x160>)
 80077f2:	4a22      	ldr	r2, [pc, #136]	; (800787c <HAL_UART_MspInit+0x164>)
 80077f4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80077f6:	4b20      	ldr	r3, [pc, #128]	; (8007878 <HAL_UART_MspInit+0x160>)
 80077f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80077fc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80077fe:	4b1e      	ldr	r3, [pc, #120]	; (8007878 <HAL_UART_MspInit+0x160>)
 8007800:	2200      	movs	r2, #0
 8007802:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007804:	4b1c      	ldr	r3, [pc, #112]	; (8007878 <HAL_UART_MspInit+0x160>)
 8007806:	2200      	movs	r2, #0
 8007808:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800780a:	4b1b      	ldr	r3, [pc, #108]	; (8007878 <HAL_UART_MspInit+0x160>)
 800780c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007810:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007812:	4b19      	ldr	r3, [pc, #100]	; (8007878 <HAL_UART_MspInit+0x160>)
 8007814:	2200      	movs	r2, #0
 8007816:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007818:	4b17      	ldr	r3, [pc, #92]	; (8007878 <HAL_UART_MspInit+0x160>)
 800781a:	2200      	movs	r2, #0
 800781c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800781e:	4b16      	ldr	r3, [pc, #88]	; (8007878 <HAL_UART_MspInit+0x160>)
 8007820:	2200      	movs	r2, #0
 8007822:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007824:	4b14      	ldr	r3, [pc, #80]	; (8007878 <HAL_UART_MspInit+0x160>)
 8007826:	2200      	movs	r2, #0
 8007828:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800782a:	4b13      	ldr	r3, [pc, #76]	; (8007878 <HAL_UART_MspInit+0x160>)
 800782c:	2200      	movs	r2, #0
 800782e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8007830:	4811      	ldr	r0, [pc, #68]	; (8007878 <HAL_UART_MspInit+0x160>)
 8007832:	f000 fb21 	bl	8007e78 <HAL_DMA_Init>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d001      	beq.n	8007840 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 800783c:	f7fc fe3c 	bl	80044b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4a0d      	ldr	r2, [pc, #52]	; (8007878 <HAL_UART_MspInit+0x160>)
 8007844:	63da      	str	r2, [r3, #60]	; 0x3c
 8007846:	4a0c      	ldr	r2, [pc, #48]	; (8007878 <HAL_UART_MspInit+0x160>)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800784c:	2200      	movs	r2, #0
 800784e:	2100      	movs	r1, #0
 8007850:	2026      	movs	r0, #38	; 0x26
 8007852:	f000 fada 	bl	8007e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007856:	2026      	movs	r0, #38	; 0x26
 8007858:	f000 faf3 	bl	8007e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800785c:	bf00      	nop
 800785e:	3728      	adds	r7, #40	; 0x28
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	40004400 	.word	0x40004400
 8007868:	40023800 	.word	0x40023800
 800786c:	40020000 	.word	0x40020000
 8007870:	200003c0 	.word	0x200003c0
 8007874:	400260a0 	.word	0x400260a0
 8007878:	20000420 	.word	0x20000420
 800787c:	40026088 	.word	0x40026088

08007880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007880:	b480      	push	{r7}
 8007882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007884:	e7fe      	b.n	8007884 <NMI_Handler+0x4>

08007886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007886:	b480      	push	{r7}
 8007888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800788a:	e7fe      	b.n	800788a <HardFault_Handler+0x4>

0800788c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800788c:	b480      	push	{r7}
 800788e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007890:	e7fe      	b.n	8007890 <MemManage_Handler+0x4>

08007892 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007892:	b480      	push	{r7}
 8007894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007896:	e7fe      	b.n	8007896 <BusFault_Handler+0x4>

08007898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007898:	b480      	push	{r7}
 800789a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800789c:	e7fe      	b.n	800789c <UsageFault_Handler+0x4>

0800789e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800789e:	b480      	push	{r7}
 80078a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80078a2:	bf00      	nop
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80078ac:	b480      	push	{r7}
 80078ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80078b0:	bf00      	nop
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80078ba:	b480      	push	{r7}
 80078bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80078be:	bf00      	nop
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80078cc:	f000 f97e 	bl	8007bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80078d0:	bf00      	nop
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80078d8:	4802      	ldr	r0, [pc, #8]	; (80078e4 <DMA1_Stream5_IRQHandler+0x10>)
 80078da:	f000 fc65 	bl	80081a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80078de:	bf00      	nop
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	20000420 	.word	0x20000420

080078e8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80078ec:	4802      	ldr	r0, [pc, #8]	; (80078f8 <DMA1_Stream6_IRQHandler+0x10>)
 80078ee:	f000 fc5b 	bl	80081a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80078f2:	bf00      	nop
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	200003c0 	.word	0x200003c0

080078fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007900:	4802      	ldr	r0, [pc, #8]	; (800790c <TIM2_IRQHandler+0x10>)
 8007902:	f002 fd4b 	bl	800a39c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007906:	bf00      	nop
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	20000330 	.word	0x20000330

08007910 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007914:	4802      	ldr	r0, [pc, #8]	; (8007920 <USART2_IRQHandler+0x10>)
 8007916:	f003 fa8b 	bl	800ae30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800791a:	bf00      	nop
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	20000378 	.word	0x20000378

08007924 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007924:	b480      	push	{r7}
 8007926:	af00      	add	r7, sp, #0
  return 1;
 8007928:	2301      	movs	r3, #1
}
 800792a:	4618      	mov	r0, r3
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <_kill>:

int _kill(int pid, int sig)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800793e:	f005 fb97 	bl	800d070 <__errno>
 8007942:	4603      	mov	r3, r0
 8007944:	2216      	movs	r2, #22
 8007946:	601a      	str	r2, [r3, #0]
  return -1;
 8007948:	f04f 33ff 	mov.w	r3, #4294967295
}
 800794c:	4618      	mov	r0, r3
 800794e:	3708      	adds	r7, #8
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <_exit>:

void _exit (int status)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800795c:	f04f 31ff 	mov.w	r1, #4294967295
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f7ff ffe7 	bl	8007934 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007966:	e7fe      	b.n	8007966 <_exit+0x12>

08007968 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b086      	sub	sp, #24
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007974:	2300      	movs	r3, #0
 8007976:	617b      	str	r3, [r7, #20]
 8007978:	e00a      	b.n	8007990 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800797a:	f3af 8000 	nop.w
 800797e:	4601      	mov	r1, r0
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	1c5a      	adds	r2, r3, #1
 8007984:	60ba      	str	r2, [r7, #8]
 8007986:	b2ca      	uxtb	r2, r1
 8007988:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	3301      	adds	r3, #1
 800798e:	617b      	str	r3, [r7, #20]
 8007990:	697a      	ldr	r2, [r7, #20]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	429a      	cmp	r2, r3
 8007996:	dbf0      	blt.n	800797a <_read+0x12>
  }

  return len;
 8007998:	687b      	ldr	r3, [r7, #4]
}
 800799a:	4618      	mov	r0, r3
 800799c:	3718      	adds	r7, #24
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b086      	sub	sp, #24
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	60f8      	str	r0, [r7, #12]
 80079aa:	60b9      	str	r1, [r7, #8]
 80079ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80079ae:	2300      	movs	r3, #0
 80079b0:	617b      	str	r3, [r7, #20]
 80079b2:	e009      	b.n	80079c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	1c5a      	adds	r2, r3, #1
 80079b8:	60ba      	str	r2, [r7, #8]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	4618      	mov	r0, r3
 80079be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	3301      	adds	r3, #1
 80079c6:	617b      	str	r3, [r7, #20]
 80079c8:	697a      	ldr	r2, [r7, #20]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	dbf1      	blt.n	80079b4 <_write+0x12>
  }
  return len;
 80079d0:	687b      	ldr	r3, [r7, #4]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3718      	adds	r7, #24
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <_close>:

int _close(int file)
{
 80079da:	b480      	push	{r7}
 80079dc:	b083      	sub	sp, #12
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80079e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	370c      	adds	r7, #12
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr

080079f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80079f2:	b480      	push	{r7}
 80079f4:	b083      	sub	sp, #12
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
 80079fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007a02:	605a      	str	r2, [r3, #4]
  return 0;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	370c      	adds	r7, #12
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr

08007a12 <_isatty>:

int _isatty(int file)
{
 8007a12:	b480      	push	{r7}
 8007a14:	b083      	sub	sp, #12
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007a1a:	2301      	movs	r3, #1
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
	...

08007a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007a4c:	4a14      	ldr	r2, [pc, #80]	; (8007aa0 <_sbrk+0x5c>)
 8007a4e:	4b15      	ldr	r3, [pc, #84]	; (8007aa4 <_sbrk+0x60>)
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007a58:	4b13      	ldr	r3, [pc, #76]	; (8007aa8 <_sbrk+0x64>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d102      	bne.n	8007a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007a60:	4b11      	ldr	r3, [pc, #68]	; (8007aa8 <_sbrk+0x64>)
 8007a62:	4a12      	ldr	r2, [pc, #72]	; (8007aac <_sbrk+0x68>)
 8007a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007a66:	4b10      	ldr	r3, [pc, #64]	; (8007aa8 <_sbrk+0x64>)
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	693a      	ldr	r2, [r7, #16]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d207      	bcs.n	8007a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007a74:	f005 fafc 	bl	800d070 <__errno>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	220c      	movs	r2, #12
 8007a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a82:	e009      	b.n	8007a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007a84:	4b08      	ldr	r3, [pc, #32]	; (8007aa8 <_sbrk+0x64>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007a8a:	4b07      	ldr	r3, [pc, #28]	; (8007aa8 <_sbrk+0x64>)
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4413      	add	r3, r2
 8007a92:	4a05      	ldr	r2, [pc, #20]	; (8007aa8 <_sbrk+0x64>)
 8007a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007a96:	68fb      	ldr	r3, [r7, #12]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3718      	adds	r7, #24
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	20020000 	.word	0x20020000
 8007aa4:	00000400 	.word	0x00000400
 8007aa8:	200004c4 	.word	0x200004c4
 8007aac:	20000620 	.word	0x20000620

08007ab0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007ab4:	4b06      	ldr	r3, [pc, #24]	; (8007ad0 <SystemInit+0x20>)
 8007ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aba:	4a05      	ldr	r2, [pc, #20]	; (8007ad0 <SystemInit+0x20>)
 8007abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ac0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007ac4:	bf00      	nop
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	e000ed00 	.word	0xe000ed00

08007ad4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007b0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007ad8:	480d      	ldr	r0, [pc, #52]	; (8007b10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007ada:	490e      	ldr	r1, [pc, #56]	; (8007b14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007adc:	4a0e      	ldr	r2, [pc, #56]	; (8007b18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007ae0:	e002      	b.n	8007ae8 <LoopCopyDataInit>

08007ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007ae6:	3304      	adds	r3, #4

08007ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007aec:	d3f9      	bcc.n	8007ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007aee:	4a0b      	ldr	r2, [pc, #44]	; (8007b1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007af0:	4c0b      	ldr	r4, [pc, #44]	; (8007b20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8007af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007af4:	e001      	b.n	8007afa <LoopFillZerobss>

08007af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007af8:	3204      	adds	r2, #4

08007afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007afc:	d3fb      	bcc.n	8007af6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007afe:	f7ff ffd7 	bl	8007ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007b02:	f005 fabb 	bl	800d07c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007b06:	f7fc f9ed 	bl	8003ee4 <main>
  bx  lr    
 8007b0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007b0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007b14:	20000284 	.word	0x20000284
  ldr r2, =_sidata
 8007b18:	0800fc34 	.word	0x0800fc34
  ldr r2, =_sbss
 8007b1c:	20000284 	.word	0x20000284
  ldr r4, =_ebss
 8007b20:	2000061c 	.word	0x2000061c

08007b24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007b24:	e7fe      	b.n	8007b24 <ADC_IRQHandler>
	...

08007b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007b2c:	4b0e      	ldr	r3, [pc, #56]	; (8007b68 <HAL_Init+0x40>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a0d      	ldr	r2, [pc, #52]	; (8007b68 <HAL_Init+0x40>)
 8007b32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007b38:	4b0b      	ldr	r3, [pc, #44]	; (8007b68 <HAL_Init+0x40>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a0a      	ldr	r2, [pc, #40]	; (8007b68 <HAL_Init+0x40>)
 8007b3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007b42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007b44:	4b08      	ldr	r3, [pc, #32]	; (8007b68 <HAL_Init+0x40>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a07      	ldr	r2, [pc, #28]	; (8007b68 <HAL_Init+0x40>)
 8007b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007b50:	2003      	movs	r0, #3
 8007b52:	f000 f94f 	bl	8007df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007b56:	2000      	movs	r0, #0
 8007b58:	f000 f808 	bl	8007b6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007b5c:	f7ff fd26 	bl	80075ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	40023c00 	.word	0x40023c00

08007b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007b74:	4b12      	ldr	r3, [pc, #72]	; (8007bc0 <HAL_InitTick+0x54>)
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	4b12      	ldr	r3, [pc, #72]	; (8007bc4 <HAL_InitTick+0x58>)
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f000 f967 	bl	8007e5e <HAL_SYSTICK_Config>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d001      	beq.n	8007b9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e00e      	b.n	8007bb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2b0f      	cmp	r3, #15
 8007b9e:	d80a      	bhi.n	8007bb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	6879      	ldr	r1, [r7, #4]
 8007ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba8:	f000 f92f 	bl	8007e0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007bac:	4a06      	ldr	r2, [pc, #24]	; (8007bc8 <HAL_InitTick+0x5c>)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	e000      	b.n	8007bb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3708      	adds	r7, #8
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	200000b0 	.word	0x200000b0
 8007bc4:	200000b8 	.word	0x200000b8
 8007bc8:	200000b4 	.word	0x200000b4

08007bcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007bd0:	4b06      	ldr	r3, [pc, #24]	; (8007bec <HAL_IncTick+0x20>)
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	4b06      	ldr	r3, [pc, #24]	; (8007bf0 <HAL_IncTick+0x24>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4413      	add	r3, r2
 8007bdc:	4a04      	ldr	r2, [pc, #16]	; (8007bf0 <HAL_IncTick+0x24>)
 8007bde:	6013      	str	r3, [r2, #0]
}
 8007be0:	bf00      	nop
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	200000b8 	.word	0x200000b8
 8007bf0:	200004c8 	.word	0x200004c8

08007bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8007bf8:	4b03      	ldr	r3, [pc, #12]	; (8007c08 <HAL_GetTick+0x14>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	200004c8 	.word	0x200004c8

08007c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007c14:	f7ff ffee 	bl	8007bf4 <HAL_GetTick>
 8007c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c24:	d005      	beq.n	8007c32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007c26:	4b0a      	ldr	r3, [pc, #40]	; (8007c50 <HAL_Delay+0x44>)
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	4413      	add	r3, r2
 8007c30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007c32:	bf00      	nop
 8007c34:	f7ff ffde 	bl	8007bf4 <HAL_GetTick>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	1ad3      	subs	r3, r2, r3
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d8f7      	bhi.n	8007c34 <HAL_Delay+0x28>
  {
  }
}
 8007c44:	bf00      	nop
 8007c46:	bf00      	nop
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	200000b8 	.word	0x200000b8

08007c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f003 0307 	and.w	r3, r3, #7
 8007c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007c64:	4b0c      	ldr	r3, [pc, #48]	; (8007c98 <__NVIC_SetPriorityGrouping+0x44>)
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007c70:	4013      	ands	r3, r2
 8007c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007c7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007c86:	4a04      	ldr	r2, [pc, #16]	; (8007c98 <__NVIC_SetPriorityGrouping+0x44>)
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	60d3      	str	r3, [r2, #12]
}
 8007c8c:	bf00      	nop
 8007c8e:	3714      	adds	r7, #20
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr
 8007c98:	e000ed00 	.word	0xe000ed00

08007c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007ca0:	4b04      	ldr	r3, [pc, #16]	; (8007cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	0a1b      	lsrs	r3, r3, #8
 8007ca6:	f003 0307 	and.w	r3, r3, #7
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr
 8007cb4:	e000ed00 	.word	0xe000ed00

08007cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	db0b      	blt.n	8007ce2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007cca:	79fb      	ldrb	r3, [r7, #7]
 8007ccc:	f003 021f 	and.w	r2, r3, #31
 8007cd0:	4907      	ldr	r1, [pc, #28]	; (8007cf0 <__NVIC_EnableIRQ+0x38>)
 8007cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cd6:	095b      	lsrs	r3, r3, #5
 8007cd8:	2001      	movs	r0, #1
 8007cda:	fa00 f202 	lsl.w	r2, r0, r2
 8007cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007ce2:	bf00      	nop
 8007ce4:	370c      	adds	r7, #12
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	e000e100 	.word	0xe000e100

08007cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	6039      	str	r1, [r7, #0]
 8007cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	db0a      	blt.n	8007d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	b2da      	uxtb	r2, r3
 8007d0c:	490c      	ldr	r1, [pc, #48]	; (8007d40 <__NVIC_SetPriority+0x4c>)
 8007d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d12:	0112      	lsls	r2, r2, #4
 8007d14:	b2d2      	uxtb	r2, r2
 8007d16:	440b      	add	r3, r1
 8007d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007d1c:	e00a      	b.n	8007d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	b2da      	uxtb	r2, r3
 8007d22:	4908      	ldr	r1, [pc, #32]	; (8007d44 <__NVIC_SetPriority+0x50>)
 8007d24:	79fb      	ldrb	r3, [r7, #7]
 8007d26:	f003 030f 	and.w	r3, r3, #15
 8007d2a:	3b04      	subs	r3, #4
 8007d2c:	0112      	lsls	r2, r2, #4
 8007d2e:	b2d2      	uxtb	r2, r2
 8007d30:	440b      	add	r3, r1
 8007d32:	761a      	strb	r2, [r3, #24]
}
 8007d34:	bf00      	nop
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr
 8007d40:	e000e100 	.word	0xe000e100
 8007d44:	e000ed00 	.word	0xe000ed00

08007d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b089      	sub	sp, #36	; 0x24
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f003 0307 	and.w	r3, r3, #7
 8007d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	f1c3 0307 	rsb	r3, r3, #7
 8007d62:	2b04      	cmp	r3, #4
 8007d64:	bf28      	it	cs
 8007d66:	2304      	movcs	r3, #4
 8007d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	3304      	adds	r3, #4
 8007d6e:	2b06      	cmp	r3, #6
 8007d70:	d902      	bls.n	8007d78 <NVIC_EncodePriority+0x30>
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	3b03      	subs	r3, #3
 8007d76:	e000      	b.n	8007d7a <NVIC_EncodePriority+0x32>
 8007d78:	2300      	movs	r3, #0
 8007d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	fa02 f303 	lsl.w	r3, r2, r3
 8007d86:	43da      	mvns	r2, r3
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	401a      	ands	r2, r3
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007d90:	f04f 31ff 	mov.w	r1, #4294967295
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	fa01 f303 	lsl.w	r3, r1, r3
 8007d9a:	43d9      	mvns	r1, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007da0:	4313      	orrs	r3, r2
         );
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3724      	adds	r7, #36	; 0x24
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
	...

08007db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007dc0:	d301      	bcc.n	8007dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e00f      	b.n	8007de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007dc6:	4a0a      	ldr	r2, [pc, #40]	; (8007df0 <SysTick_Config+0x40>)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007dce:	210f      	movs	r1, #15
 8007dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd4:	f7ff ff8e 	bl	8007cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007dd8:	4b05      	ldr	r3, [pc, #20]	; (8007df0 <SysTick_Config+0x40>)
 8007dda:	2200      	movs	r2, #0
 8007ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007dde:	4b04      	ldr	r3, [pc, #16]	; (8007df0 <SysTick_Config+0x40>)
 8007de0:	2207      	movs	r2, #7
 8007de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3708      	adds	r7, #8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	e000e010 	.word	0xe000e010

08007df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f7ff ff29 	bl	8007c54 <__NVIC_SetPriorityGrouping>
}
 8007e02:	bf00      	nop
 8007e04:	3708      	adds	r7, #8
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b086      	sub	sp, #24
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	4603      	mov	r3, r0
 8007e12:	60b9      	str	r1, [r7, #8]
 8007e14:	607a      	str	r2, [r7, #4]
 8007e16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007e1c:	f7ff ff3e 	bl	8007c9c <__NVIC_GetPriorityGrouping>
 8007e20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	68b9      	ldr	r1, [r7, #8]
 8007e26:	6978      	ldr	r0, [r7, #20]
 8007e28:	f7ff ff8e 	bl	8007d48 <NVIC_EncodePriority>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e32:	4611      	mov	r1, r2
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7ff ff5d 	bl	8007cf4 <__NVIC_SetPriority>
}
 8007e3a:	bf00      	nop
 8007e3c:	3718      	adds	r7, #24
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b082      	sub	sp, #8
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	4603      	mov	r3, r0
 8007e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7ff ff31 	bl	8007cb8 <__NVIC_EnableIRQ>
}
 8007e56:	bf00      	nop
 8007e58:	3708      	adds	r7, #8
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b082      	sub	sp, #8
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f7ff ffa2 	bl	8007db0 <SysTick_Config>
 8007e6c:	4603      	mov	r3, r0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3708      	adds	r7, #8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
	...

08007e78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b086      	sub	sp, #24
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007e80:	2300      	movs	r3, #0
 8007e82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007e84:	f7ff feb6 	bl	8007bf4 <HAL_GetTick>
 8007e88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d101      	bne.n	8007e94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e099      	b.n	8007fc8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2202      	movs	r2, #2
 8007e98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f022 0201 	bic.w	r2, r2, #1
 8007eb2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007eb4:	e00f      	b.n	8007ed6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007eb6:	f7ff fe9d 	bl	8007bf4 <HAL_GetTick>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	1ad3      	subs	r3, r2, r3
 8007ec0:	2b05      	cmp	r3, #5
 8007ec2:	d908      	bls.n	8007ed6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2220      	movs	r2, #32
 8007ec8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2203      	movs	r2, #3
 8007ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e078      	b.n	8007fc8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f003 0301 	and.w	r3, r3, #1
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d1e8      	bne.n	8007eb6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007eec:	697a      	ldr	r2, [r7, #20]
 8007eee:	4b38      	ldr	r3, [pc, #224]	; (8007fd0 <HAL_DMA_Init+0x158>)
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685a      	ldr	r2, [r3, #4]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007f02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	691b      	ldr	r3, [r3, #16]
 8007f08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	699b      	ldr	r3, [r3, #24]
 8007f14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a1b      	ldr	r3, [r3, #32]
 8007f20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007f22:	697a      	ldr	r2, [r7, #20]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2c:	2b04      	cmp	r3, #4
 8007f2e:	d107      	bne.n	8007f40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	697a      	ldr	r2, [r7, #20]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	697a      	ldr	r2, [r7, #20]
 8007f46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	695b      	ldr	r3, [r3, #20]
 8007f4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	f023 0307 	bic.w	r3, r3, #7
 8007f56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5c:	697a      	ldr	r2, [r7, #20]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f66:	2b04      	cmp	r3, #4
 8007f68:	d117      	bne.n	8007f9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00e      	beq.n	8007f9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 fb0d 	bl	800859c <DMA_CheckFifoParam>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d008      	beq.n	8007f9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2240      	movs	r2, #64	; 0x40
 8007f8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2201      	movs	r2, #1
 8007f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007f96:	2301      	movs	r3, #1
 8007f98:	e016      	b.n	8007fc8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 fac4 	bl	8008530 <DMA_CalcBaseAndBitshift>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fb0:	223f      	movs	r2, #63	; 0x3f
 8007fb2:	409a      	lsls	r2, r3
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3718      	adds	r7, #24
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	f010803f 	.word	0xf010803f

08007fd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b086      	sub	sp, #24
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	607a      	str	r2, [r7, #4]
 8007fe0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d101      	bne.n	8007ffa <HAL_DMA_Start_IT+0x26>
 8007ff6:	2302      	movs	r3, #2
 8007ff8:	e040      	b.n	800807c <HAL_DMA_Start_IT+0xa8>
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b01      	cmp	r3, #1
 800800c:	d12f      	bne.n	800806e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2202      	movs	r2, #2
 8008012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2200      	movs	r2, #0
 800801a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	68b9      	ldr	r1, [r7, #8]
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f000 fa56 	bl	80084d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800802c:	223f      	movs	r2, #63	; 0x3f
 800802e:	409a      	lsls	r2, r3
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f042 0216 	orr.w	r2, r2, #22
 8008042:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008048:	2b00      	cmp	r3, #0
 800804a:	d007      	beq.n	800805c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f042 0208 	orr.w	r2, r2, #8
 800805a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f042 0201 	orr.w	r2, r2, #1
 800806a:	601a      	str	r2, [r3, #0]
 800806c:	e005      	b.n	800807a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2200      	movs	r2, #0
 8008072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008076:	2302      	movs	r3, #2
 8008078:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800807a:	7dfb      	ldrb	r3, [r7, #23]
}
 800807c:	4618      	mov	r0, r3
 800807e:	3718      	adds	r7, #24
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008090:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008092:	f7ff fdaf 	bl	8007bf4 <HAL_GetTick>
 8008096:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	d008      	beq.n	80080b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2280      	movs	r2, #128	; 0x80
 80080a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e052      	b.n	800815c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f022 0216 	bic.w	r2, r2, #22
 80080c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	695a      	ldr	r2, [r3, #20]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d103      	bne.n	80080e6 <HAL_DMA_Abort+0x62>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d007      	beq.n	80080f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f022 0208 	bic.w	r2, r2, #8
 80080f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f022 0201 	bic.w	r2, r2, #1
 8008104:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008106:	e013      	b.n	8008130 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008108:	f7ff fd74 	bl	8007bf4 <HAL_GetTick>
 800810c:	4602      	mov	r2, r0
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	2b05      	cmp	r3, #5
 8008114:	d90c      	bls.n	8008130 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2220      	movs	r2, #32
 800811a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2203      	movs	r2, #3
 8008120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800812c:	2303      	movs	r3, #3
 800812e:	e015      	b.n	800815c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 0301 	and.w	r3, r3, #1
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1e4      	bne.n	8008108 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008142:	223f      	movs	r2, #63	; 0x3f
 8008144:	409a      	lsls	r2, r3
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2201      	movs	r2, #1
 800814e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	3710      	adds	r7, #16
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008172:	b2db      	uxtb	r3, r3
 8008174:	2b02      	cmp	r3, #2
 8008176:	d004      	beq.n	8008182 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2280      	movs	r2, #128	; 0x80
 800817c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e00c      	b.n	800819c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2205      	movs	r2, #5
 8008186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f022 0201 	bic.w	r2, r2, #1
 8008198:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b086      	sub	sp, #24
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80081b0:	2300      	movs	r3, #0
 80081b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80081b4:	4b8e      	ldr	r3, [pc, #568]	; (80083f0 <HAL_DMA_IRQHandler+0x248>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a8e      	ldr	r2, [pc, #568]	; (80083f4 <HAL_DMA_IRQHandler+0x24c>)
 80081ba:	fba2 2303 	umull	r2, r3, r2, r3
 80081be:	0a9b      	lsrs	r3, r3, #10
 80081c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081d2:	2208      	movs	r2, #8
 80081d4:	409a      	lsls	r2, r3
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	4013      	ands	r3, r2
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d01a      	beq.n	8008214 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0304 	and.w	r3, r3, #4
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d013      	beq.n	8008214 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f022 0204 	bic.w	r2, r2, #4
 80081fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008200:	2208      	movs	r2, #8
 8008202:	409a      	lsls	r2, r3
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800820c:	f043 0201 	orr.w	r2, r3, #1
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008218:	2201      	movs	r2, #1
 800821a:	409a      	lsls	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	4013      	ands	r3, r2
 8008220:	2b00      	cmp	r3, #0
 8008222:	d012      	beq.n	800824a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00b      	beq.n	800824a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008236:	2201      	movs	r2, #1
 8008238:	409a      	lsls	r2, r3
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008242:	f043 0202 	orr.w	r2, r3, #2
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800824e:	2204      	movs	r2, #4
 8008250:	409a      	lsls	r2, r3
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	4013      	ands	r3, r2
 8008256:	2b00      	cmp	r3, #0
 8008258:	d012      	beq.n	8008280 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f003 0302 	and.w	r3, r3, #2
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00b      	beq.n	8008280 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800826c:	2204      	movs	r2, #4
 800826e:	409a      	lsls	r2, r3
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008278:	f043 0204 	orr.w	r2, r3, #4
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008284:	2210      	movs	r2, #16
 8008286:	409a      	lsls	r2, r3
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	4013      	ands	r3, r2
 800828c:	2b00      	cmp	r3, #0
 800828e:	d043      	beq.n	8008318 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 0308 	and.w	r3, r3, #8
 800829a:	2b00      	cmp	r3, #0
 800829c:	d03c      	beq.n	8008318 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082a2:	2210      	movs	r2, #16
 80082a4:	409a      	lsls	r2, r3
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d018      	beq.n	80082ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d108      	bne.n	80082d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d024      	beq.n	8008318 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	4798      	blx	r3
 80082d6:	e01f      	b.n	8008318 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d01b      	beq.n	8008318 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	4798      	blx	r3
 80082e8:	e016      	b.n	8008318 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d107      	bne.n	8008308 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f022 0208 	bic.w	r2, r2, #8
 8008306:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830c:	2b00      	cmp	r3, #0
 800830e:	d003      	beq.n	8008318 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800831c:	2220      	movs	r2, #32
 800831e:	409a      	lsls	r2, r3
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	4013      	ands	r3, r2
 8008324:	2b00      	cmp	r3, #0
 8008326:	f000 808f 	beq.w	8008448 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 0310 	and.w	r3, r3, #16
 8008334:	2b00      	cmp	r3, #0
 8008336:	f000 8087 	beq.w	8008448 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800833e:	2220      	movs	r2, #32
 8008340:	409a      	lsls	r2, r3
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800834c:	b2db      	uxtb	r3, r3
 800834e:	2b05      	cmp	r3, #5
 8008350:	d136      	bne.n	80083c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f022 0216 	bic.w	r2, r2, #22
 8008360:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	695a      	ldr	r2, [r3, #20]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008370:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008376:	2b00      	cmp	r3, #0
 8008378:	d103      	bne.n	8008382 <HAL_DMA_IRQHandler+0x1da>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800837e:	2b00      	cmp	r3, #0
 8008380:	d007      	beq.n	8008392 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f022 0208 	bic.w	r2, r2, #8
 8008390:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008396:	223f      	movs	r2, #63	; 0x3f
 8008398:	409a      	lsls	r2, r3
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2201      	movs	r2, #1
 80083a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d07e      	beq.n	80084b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	4798      	blx	r3
        }
        return;
 80083be:	e079      	b.n	80084b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d01d      	beq.n	800840a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d10d      	bne.n	80083f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d031      	beq.n	8008448 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	4798      	blx	r3
 80083ec:	e02c      	b.n	8008448 <HAL_DMA_IRQHandler+0x2a0>
 80083ee:	bf00      	nop
 80083f0:	200000b0 	.word	0x200000b0
 80083f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d023      	beq.n	8008448 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	4798      	blx	r3
 8008408:	e01e      	b.n	8008448 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008414:	2b00      	cmp	r3, #0
 8008416:	d10f      	bne.n	8008438 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f022 0210 	bic.w	r2, r2, #16
 8008426:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800843c:	2b00      	cmp	r3, #0
 800843e:	d003      	beq.n	8008448 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800844c:	2b00      	cmp	r3, #0
 800844e:	d032      	beq.n	80084b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008454:	f003 0301 	and.w	r3, r3, #1
 8008458:	2b00      	cmp	r3, #0
 800845a:	d022      	beq.n	80084a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2205      	movs	r2, #5
 8008460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f022 0201 	bic.w	r2, r2, #1
 8008472:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	3301      	adds	r3, #1
 8008478:	60bb      	str	r3, [r7, #8]
 800847a:	697a      	ldr	r2, [r7, #20]
 800847c:	429a      	cmp	r2, r3
 800847e:	d307      	bcc.n	8008490 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 0301 	and.w	r3, r3, #1
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1f2      	bne.n	8008474 <HAL_DMA_IRQHandler+0x2cc>
 800848e:	e000      	b.n	8008492 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008490:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2201      	movs	r2, #1
 8008496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d005      	beq.n	80084b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	4798      	blx	r3
 80084b2:	e000      	b.n	80084b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80084b4:	bf00      	nop
    }
  }
}
 80084b6:	3718      	adds	r7, #24
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b085      	sub	sp, #20
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]
 80084e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80084f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	683a      	ldr	r2, [r7, #0]
 80084f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	2b40      	cmp	r3, #64	; 0x40
 8008500:	d108      	bne.n	8008514 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008512:	e007      	b.n	8008524 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	68ba      	ldr	r2, [r7, #8]
 800851a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	60da      	str	r2, [r3, #12]
}
 8008524:	bf00      	nop
 8008526:	3714      	adds	r7, #20
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008530:	b480      	push	{r7}
 8008532:	b085      	sub	sp, #20
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	b2db      	uxtb	r3, r3
 800853e:	3b10      	subs	r3, #16
 8008540:	4a14      	ldr	r2, [pc, #80]	; (8008594 <DMA_CalcBaseAndBitshift+0x64>)
 8008542:	fba2 2303 	umull	r2, r3, r2, r3
 8008546:	091b      	lsrs	r3, r3, #4
 8008548:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800854a:	4a13      	ldr	r2, [pc, #76]	; (8008598 <DMA_CalcBaseAndBitshift+0x68>)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	4413      	add	r3, r2
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	461a      	mov	r2, r3
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2b03      	cmp	r3, #3
 800855c:	d909      	bls.n	8008572 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008566:	f023 0303 	bic.w	r3, r3, #3
 800856a:	1d1a      	adds	r2, r3, #4
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	659a      	str	r2, [r3, #88]	; 0x58
 8008570:	e007      	b.n	8008582 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800857a:	f023 0303 	bic.w	r3, r3, #3
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008586:	4618      	mov	r0, r3
 8008588:	3714      	adds	r7, #20
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	aaaaaaab 	.word	0xaaaaaaab
 8008598:	0800f7d4 	.word	0x0800f7d4

0800859c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800859c:	b480      	push	{r7}
 800859e:	b085      	sub	sp, #20
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085a4:	2300      	movs	r3, #0
 80085a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	699b      	ldr	r3, [r3, #24]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d11f      	bne.n	80085f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	2b03      	cmp	r3, #3
 80085ba:	d856      	bhi.n	800866a <DMA_CheckFifoParam+0xce>
 80085bc:	a201      	add	r2, pc, #4	; (adr r2, 80085c4 <DMA_CheckFifoParam+0x28>)
 80085be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c2:	bf00      	nop
 80085c4:	080085d5 	.word	0x080085d5
 80085c8:	080085e7 	.word	0x080085e7
 80085cc:	080085d5 	.word	0x080085d5
 80085d0:	0800866b 	.word	0x0800866b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d046      	beq.n	800866e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80085e4:	e043      	b.n	800866e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80085ee:	d140      	bne.n	8008672 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80085f0:	2301      	movs	r3, #1
 80085f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80085f4:	e03d      	b.n	8008672 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	699b      	ldr	r3, [r3, #24]
 80085fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085fe:	d121      	bne.n	8008644 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	2b03      	cmp	r3, #3
 8008604:	d837      	bhi.n	8008676 <DMA_CheckFifoParam+0xda>
 8008606:	a201      	add	r2, pc, #4	; (adr r2, 800860c <DMA_CheckFifoParam+0x70>)
 8008608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800860c:	0800861d 	.word	0x0800861d
 8008610:	08008623 	.word	0x08008623
 8008614:	0800861d 	.word	0x0800861d
 8008618:	08008635 	.word	0x08008635
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800861c:	2301      	movs	r3, #1
 800861e:	73fb      	strb	r3, [r7, #15]
      break;
 8008620:	e030      	b.n	8008684 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008626:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800862a:	2b00      	cmp	r3, #0
 800862c:	d025      	beq.n	800867a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008632:	e022      	b.n	800867a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008638:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800863c:	d11f      	bne.n	800867e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008642:	e01c      	b.n	800867e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	2b02      	cmp	r3, #2
 8008648:	d903      	bls.n	8008652 <DMA_CheckFifoParam+0xb6>
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	2b03      	cmp	r3, #3
 800864e:	d003      	beq.n	8008658 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008650:	e018      	b.n	8008684 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	73fb      	strb	r3, [r7, #15]
      break;
 8008656:	e015      	b.n	8008684 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00e      	beq.n	8008682 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	73fb      	strb	r3, [r7, #15]
      break;
 8008668:	e00b      	b.n	8008682 <DMA_CheckFifoParam+0xe6>
      break;
 800866a:	bf00      	nop
 800866c:	e00a      	b.n	8008684 <DMA_CheckFifoParam+0xe8>
      break;
 800866e:	bf00      	nop
 8008670:	e008      	b.n	8008684 <DMA_CheckFifoParam+0xe8>
      break;
 8008672:	bf00      	nop
 8008674:	e006      	b.n	8008684 <DMA_CheckFifoParam+0xe8>
      break;
 8008676:	bf00      	nop
 8008678:	e004      	b.n	8008684 <DMA_CheckFifoParam+0xe8>
      break;
 800867a:	bf00      	nop
 800867c:	e002      	b.n	8008684 <DMA_CheckFifoParam+0xe8>
      break;   
 800867e:	bf00      	nop
 8008680:	e000      	b.n	8008684 <DMA_CheckFifoParam+0xe8>
      break;
 8008682:	bf00      	nop
    }
  } 
  
  return status; 
 8008684:	7bfb      	ldrb	r3, [r7, #15]
}
 8008686:	4618      	mov	r0, r3
 8008688:	3714      	adds	r7, #20
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr
 8008692:	bf00      	nop

08008694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008694:	b480      	push	{r7}
 8008696:	b089      	sub	sp, #36	; 0x24
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800869e:	2300      	movs	r3, #0
 80086a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80086a2:	2300      	movs	r3, #0
 80086a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80086a6:	2300      	movs	r3, #0
 80086a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80086aa:	2300      	movs	r3, #0
 80086ac:	61fb      	str	r3, [r7, #28]
 80086ae:	e165      	b.n	800897c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80086b0:	2201      	movs	r2, #1
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	fa02 f303 	lsl.w	r3, r2, r3
 80086b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	697a      	ldr	r2, [r7, #20]
 80086c0:	4013      	ands	r3, r2
 80086c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80086c4:	693a      	ldr	r2, [r7, #16]
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	f040 8154 	bne.w	8008976 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	f003 0303 	and.w	r3, r3, #3
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d005      	beq.n	80086e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	d130      	bne.n	8008748 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	005b      	lsls	r3, r3, #1
 80086f0:	2203      	movs	r2, #3
 80086f2:	fa02 f303 	lsl.w	r3, r2, r3
 80086f6:	43db      	mvns	r3, r3
 80086f8:	69ba      	ldr	r2, [r7, #24]
 80086fa:	4013      	ands	r3, r2
 80086fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	68da      	ldr	r2, [r3, #12]
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	005b      	lsls	r3, r3, #1
 8008706:	fa02 f303 	lsl.w	r3, r2, r3
 800870a:	69ba      	ldr	r2, [r7, #24]
 800870c:	4313      	orrs	r3, r2
 800870e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	69ba      	ldr	r2, [r7, #24]
 8008714:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800871c:	2201      	movs	r2, #1
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	fa02 f303 	lsl.w	r3, r2, r3
 8008724:	43db      	mvns	r3, r3
 8008726:	69ba      	ldr	r2, [r7, #24]
 8008728:	4013      	ands	r3, r2
 800872a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	091b      	lsrs	r3, r3, #4
 8008732:	f003 0201 	and.w	r2, r3, #1
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	fa02 f303 	lsl.w	r3, r2, r3
 800873c:	69ba      	ldr	r2, [r7, #24]
 800873e:	4313      	orrs	r3, r2
 8008740:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	69ba      	ldr	r2, [r7, #24]
 8008746:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	f003 0303 	and.w	r3, r3, #3
 8008750:	2b03      	cmp	r3, #3
 8008752:	d017      	beq.n	8008784 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	005b      	lsls	r3, r3, #1
 800875e:	2203      	movs	r2, #3
 8008760:	fa02 f303 	lsl.w	r3, r2, r3
 8008764:	43db      	mvns	r3, r3
 8008766:	69ba      	ldr	r2, [r7, #24]
 8008768:	4013      	ands	r3, r2
 800876a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	689a      	ldr	r2, [r3, #8]
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	005b      	lsls	r3, r3, #1
 8008774:	fa02 f303 	lsl.w	r3, r2, r3
 8008778:	69ba      	ldr	r2, [r7, #24]
 800877a:	4313      	orrs	r3, r2
 800877c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	69ba      	ldr	r2, [r7, #24]
 8008782:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	f003 0303 	and.w	r3, r3, #3
 800878c:	2b02      	cmp	r3, #2
 800878e:	d123      	bne.n	80087d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	08da      	lsrs	r2, r3, #3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	3208      	adds	r2, #8
 8008798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800879c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	f003 0307 	and.w	r3, r3, #7
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	220f      	movs	r2, #15
 80087a8:	fa02 f303 	lsl.w	r3, r2, r3
 80087ac:	43db      	mvns	r3, r3
 80087ae:	69ba      	ldr	r2, [r7, #24]
 80087b0:	4013      	ands	r3, r2
 80087b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	691a      	ldr	r2, [r3, #16]
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	f003 0307 	and.w	r3, r3, #7
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	fa02 f303 	lsl.w	r3, r2, r3
 80087c4:	69ba      	ldr	r2, [r7, #24]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	08da      	lsrs	r2, r3, #3
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	3208      	adds	r2, #8
 80087d2:	69b9      	ldr	r1, [r7, #24]
 80087d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80087de:	69fb      	ldr	r3, [r7, #28]
 80087e0:	005b      	lsls	r3, r3, #1
 80087e2:	2203      	movs	r2, #3
 80087e4:	fa02 f303 	lsl.w	r3, r2, r3
 80087e8:	43db      	mvns	r3, r3
 80087ea:	69ba      	ldr	r2, [r7, #24]
 80087ec:	4013      	ands	r3, r2
 80087ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	f003 0203 	and.w	r2, r3, #3
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	005b      	lsls	r3, r3, #1
 80087fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008800:	69ba      	ldr	r2, [r7, #24]
 8008802:	4313      	orrs	r3, r2
 8008804:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	69ba      	ldr	r2, [r7, #24]
 800880a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008814:	2b00      	cmp	r3, #0
 8008816:	f000 80ae 	beq.w	8008976 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800881a:	2300      	movs	r3, #0
 800881c:	60fb      	str	r3, [r7, #12]
 800881e:	4b5d      	ldr	r3, [pc, #372]	; (8008994 <HAL_GPIO_Init+0x300>)
 8008820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008822:	4a5c      	ldr	r2, [pc, #368]	; (8008994 <HAL_GPIO_Init+0x300>)
 8008824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008828:	6453      	str	r3, [r2, #68]	; 0x44
 800882a:	4b5a      	ldr	r3, [pc, #360]	; (8008994 <HAL_GPIO_Init+0x300>)
 800882c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800882e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008832:	60fb      	str	r3, [r7, #12]
 8008834:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008836:	4a58      	ldr	r2, [pc, #352]	; (8008998 <HAL_GPIO_Init+0x304>)
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	089b      	lsrs	r3, r3, #2
 800883c:	3302      	adds	r3, #2
 800883e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008842:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	f003 0303 	and.w	r3, r3, #3
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	220f      	movs	r2, #15
 800884e:	fa02 f303 	lsl.w	r3, r2, r3
 8008852:	43db      	mvns	r3, r3
 8008854:	69ba      	ldr	r2, [r7, #24]
 8008856:	4013      	ands	r3, r2
 8008858:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a4f      	ldr	r2, [pc, #316]	; (800899c <HAL_GPIO_Init+0x308>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d025      	beq.n	80088ae <HAL_GPIO_Init+0x21a>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a4e      	ldr	r2, [pc, #312]	; (80089a0 <HAL_GPIO_Init+0x30c>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d01f      	beq.n	80088aa <HAL_GPIO_Init+0x216>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a4d      	ldr	r2, [pc, #308]	; (80089a4 <HAL_GPIO_Init+0x310>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d019      	beq.n	80088a6 <HAL_GPIO_Init+0x212>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a4c      	ldr	r2, [pc, #304]	; (80089a8 <HAL_GPIO_Init+0x314>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d013      	beq.n	80088a2 <HAL_GPIO_Init+0x20e>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a4b      	ldr	r2, [pc, #300]	; (80089ac <HAL_GPIO_Init+0x318>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d00d      	beq.n	800889e <HAL_GPIO_Init+0x20a>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a4a      	ldr	r2, [pc, #296]	; (80089b0 <HAL_GPIO_Init+0x31c>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d007      	beq.n	800889a <HAL_GPIO_Init+0x206>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a49      	ldr	r2, [pc, #292]	; (80089b4 <HAL_GPIO_Init+0x320>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d101      	bne.n	8008896 <HAL_GPIO_Init+0x202>
 8008892:	2306      	movs	r3, #6
 8008894:	e00c      	b.n	80088b0 <HAL_GPIO_Init+0x21c>
 8008896:	2307      	movs	r3, #7
 8008898:	e00a      	b.n	80088b0 <HAL_GPIO_Init+0x21c>
 800889a:	2305      	movs	r3, #5
 800889c:	e008      	b.n	80088b0 <HAL_GPIO_Init+0x21c>
 800889e:	2304      	movs	r3, #4
 80088a0:	e006      	b.n	80088b0 <HAL_GPIO_Init+0x21c>
 80088a2:	2303      	movs	r3, #3
 80088a4:	e004      	b.n	80088b0 <HAL_GPIO_Init+0x21c>
 80088a6:	2302      	movs	r3, #2
 80088a8:	e002      	b.n	80088b0 <HAL_GPIO_Init+0x21c>
 80088aa:	2301      	movs	r3, #1
 80088ac:	e000      	b.n	80088b0 <HAL_GPIO_Init+0x21c>
 80088ae:	2300      	movs	r3, #0
 80088b0:	69fa      	ldr	r2, [r7, #28]
 80088b2:	f002 0203 	and.w	r2, r2, #3
 80088b6:	0092      	lsls	r2, r2, #2
 80088b8:	4093      	lsls	r3, r2
 80088ba:	69ba      	ldr	r2, [r7, #24]
 80088bc:	4313      	orrs	r3, r2
 80088be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80088c0:	4935      	ldr	r1, [pc, #212]	; (8008998 <HAL_GPIO_Init+0x304>)
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	089b      	lsrs	r3, r3, #2
 80088c6:	3302      	adds	r3, #2
 80088c8:	69ba      	ldr	r2, [r7, #24]
 80088ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80088ce:	4b3a      	ldr	r3, [pc, #232]	; (80089b8 <HAL_GPIO_Init+0x324>)
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	43db      	mvns	r3, r3
 80088d8:	69ba      	ldr	r2, [r7, #24]
 80088da:	4013      	ands	r3, r2
 80088dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d003      	beq.n	80088f2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80088ea:	69ba      	ldr	r2, [r7, #24]
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80088f2:	4a31      	ldr	r2, [pc, #196]	; (80089b8 <HAL_GPIO_Init+0x324>)
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80088f8:	4b2f      	ldr	r3, [pc, #188]	; (80089b8 <HAL_GPIO_Init+0x324>)
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	43db      	mvns	r3, r3
 8008902:	69ba      	ldr	r2, [r7, #24]
 8008904:	4013      	ands	r3, r2
 8008906:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008910:	2b00      	cmp	r3, #0
 8008912:	d003      	beq.n	800891c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008914:	69ba      	ldr	r2, [r7, #24]
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	4313      	orrs	r3, r2
 800891a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800891c:	4a26      	ldr	r2, [pc, #152]	; (80089b8 <HAL_GPIO_Init+0x324>)
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008922:	4b25      	ldr	r3, [pc, #148]	; (80089b8 <HAL_GPIO_Init+0x324>)
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	43db      	mvns	r3, r3
 800892c:	69ba      	ldr	r2, [r7, #24]
 800892e:	4013      	ands	r3, r2
 8008930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800893a:	2b00      	cmp	r3, #0
 800893c:	d003      	beq.n	8008946 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800893e:	69ba      	ldr	r2, [r7, #24]
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	4313      	orrs	r3, r2
 8008944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008946:	4a1c      	ldr	r2, [pc, #112]	; (80089b8 <HAL_GPIO_Init+0x324>)
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800894c:	4b1a      	ldr	r3, [pc, #104]	; (80089b8 <HAL_GPIO_Init+0x324>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	43db      	mvns	r3, r3
 8008956:	69ba      	ldr	r2, [r7, #24]
 8008958:	4013      	ands	r3, r2
 800895a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008964:	2b00      	cmp	r3, #0
 8008966:	d003      	beq.n	8008970 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008968:	69ba      	ldr	r2, [r7, #24]
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	4313      	orrs	r3, r2
 800896e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008970:	4a11      	ldr	r2, [pc, #68]	; (80089b8 <HAL_GPIO_Init+0x324>)
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008976:	69fb      	ldr	r3, [r7, #28]
 8008978:	3301      	adds	r3, #1
 800897a:	61fb      	str	r3, [r7, #28]
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	2b0f      	cmp	r3, #15
 8008980:	f67f ae96 	bls.w	80086b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008984:	bf00      	nop
 8008986:	bf00      	nop
 8008988:	3724      	adds	r7, #36	; 0x24
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	40023800 	.word	0x40023800
 8008998:	40013800 	.word	0x40013800
 800899c:	40020000 	.word	0x40020000
 80089a0:	40020400 	.word	0x40020400
 80089a4:	40020800 	.word	0x40020800
 80089a8:	40020c00 	.word	0x40020c00
 80089ac:	40021000 	.word	0x40021000
 80089b0:	40021400 	.word	0x40021400
 80089b4:	40021800 	.word	0x40021800
 80089b8:	40013c00 	.word	0x40013c00

080089bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	460b      	mov	r3, r1
 80089c6:	807b      	strh	r3, [r7, #2]
 80089c8:	4613      	mov	r3, r2
 80089ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80089cc:	787b      	ldrb	r3, [r7, #1]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d003      	beq.n	80089da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80089d2:	887a      	ldrh	r2, [r7, #2]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80089d8:	e003      	b.n	80089e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80089da:	887b      	ldrh	r3, [r7, #2]
 80089dc:	041a      	lsls	r2, r3, #16
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	619a      	str	r2, [r3, #24]
}
 80089e2:	bf00      	nop
 80089e4:	370c      	adds	r7, #12
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr

080089ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80089ee:	b480      	push	{r7}
 80089f0:	b085      	sub	sp, #20
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
 80089f6:	460b      	mov	r3, r1
 80089f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	695b      	ldr	r3, [r3, #20]
 80089fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008a00:	887a      	ldrh	r2, [r7, #2]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	4013      	ands	r3, r2
 8008a06:	041a      	lsls	r2, r3, #16
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	43d9      	mvns	r1, r3
 8008a0c:	887b      	ldrh	r3, [r7, #2]
 8008a0e:	400b      	ands	r3, r1
 8008a10:	431a      	orrs	r2, r3
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	619a      	str	r2, [r3, #24]
}
 8008a16:	bf00      	nop
 8008a18:	3714      	adds	r7, #20
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr
	...

08008a24 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008a2e:	2300      	movs	r3, #0
 8008a30:	603b      	str	r3, [r7, #0]
 8008a32:	4b20      	ldr	r3, [pc, #128]	; (8008ab4 <HAL_PWREx_EnableOverDrive+0x90>)
 8008a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a36:	4a1f      	ldr	r2, [pc, #124]	; (8008ab4 <HAL_PWREx_EnableOverDrive+0x90>)
 8008a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8008a3e:	4b1d      	ldr	r3, [pc, #116]	; (8008ab4 <HAL_PWREx_EnableOverDrive+0x90>)
 8008a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a46:	603b      	str	r3, [r7, #0]
 8008a48:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008a4a:	4b1b      	ldr	r3, [pc, #108]	; (8008ab8 <HAL_PWREx_EnableOverDrive+0x94>)
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008a50:	f7ff f8d0 	bl	8007bf4 <HAL_GetTick>
 8008a54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008a56:	e009      	b.n	8008a6c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008a58:	f7ff f8cc 	bl	8007bf4 <HAL_GetTick>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	1ad3      	subs	r3, r2, r3
 8008a62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a66:	d901      	bls.n	8008a6c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	e01f      	b.n	8008aac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008a6c:	4b13      	ldr	r3, [pc, #76]	; (8008abc <HAL_PWREx_EnableOverDrive+0x98>)
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a78:	d1ee      	bne.n	8008a58 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008a7a:	4b11      	ldr	r3, [pc, #68]	; (8008ac0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008a80:	f7ff f8b8 	bl	8007bf4 <HAL_GetTick>
 8008a84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008a86:	e009      	b.n	8008a9c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008a88:	f7ff f8b4 	bl	8007bf4 <HAL_GetTick>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	1ad3      	subs	r3, r2, r3
 8008a92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a96:	d901      	bls.n	8008a9c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008a98:	2303      	movs	r3, #3
 8008a9a:	e007      	b.n	8008aac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008a9c:	4b07      	ldr	r3, [pc, #28]	; (8008abc <HAL_PWREx_EnableOverDrive+0x98>)
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008aa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008aa8:	d1ee      	bne.n	8008a88 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	40023800 	.word	0x40023800
 8008ab8:	420e0040 	.word	0x420e0040
 8008abc:	40007000 	.word	0x40007000
 8008ac0:	420e0044 	.word	0x420e0044

08008ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d101      	bne.n	8008ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e0cc      	b.n	8008c72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008ad8:	4b68      	ldr	r3, [pc, #416]	; (8008c7c <HAL_RCC_ClockConfig+0x1b8>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f003 030f 	and.w	r3, r3, #15
 8008ae0:	683a      	ldr	r2, [r7, #0]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d90c      	bls.n	8008b00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ae6:	4b65      	ldr	r3, [pc, #404]	; (8008c7c <HAL_RCC_ClockConfig+0x1b8>)
 8008ae8:	683a      	ldr	r2, [r7, #0]
 8008aea:	b2d2      	uxtb	r2, r2
 8008aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008aee:	4b63      	ldr	r3, [pc, #396]	; (8008c7c <HAL_RCC_ClockConfig+0x1b8>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f003 030f 	and.w	r3, r3, #15
 8008af6:	683a      	ldr	r2, [r7, #0]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d001      	beq.n	8008b00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008afc:	2301      	movs	r3, #1
 8008afe:	e0b8      	b.n	8008c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f003 0302 	and.w	r3, r3, #2
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d020      	beq.n	8008b4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f003 0304 	and.w	r3, r3, #4
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d005      	beq.n	8008b24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008b18:	4b59      	ldr	r3, [pc, #356]	; (8008c80 <HAL_RCC_ClockConfig+0x1bc>)
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	4a58      	ldr	r2, [pc, #352]	; (8008c80 <HAL_RCC_ClockConfig+0x1bc>)
 8008b1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008b22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 0308 	and.w	r3, r3, #8
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d005      	beq.n	8008b3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008b30:	4b53      	ldr	r3, [pc, #332]	; (8008c80 <HAL_RCC_ClockConfig+0x1bc>)
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	4a52      	ldr	r2, [pc, #328]	; (8008c80 <HAL_RCC_ClockConfig+0x1bc>)
 8008b36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008b3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b3c:	4b50      	ldr	r3, [pc, #320]	; (8008c80 <HAL_RCC_ClockConfig+0x1bc>)
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	494d      	ldr	r1, [pc, #308]	; (8008c80 <HAL_RCC_ClockConfig+0x1bc>)
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f003 0301 	and.w	r3, r3, #1
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d044      	beq.n	8008be4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d107      	bne.n	8008b72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b62:	4b47      	ldr	r3, [pc, #284]	; (8008c80 <HAL_RCC_ClockConfig+0x1bc>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d119      	bne.n	8008ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e07f      	b.n	8008c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d003      	beq.n	8008b82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b7e:	2b03      	cmp	r3, #3
 8008b80:	d107      	bne.n	8008b92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b82:	4b3f      	ldr	r3, [pc, #252]	; (8008c80 <HAL_RCC_ClockConfig+0x1bc>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d109      	bne.n	8008ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e06f      	b.n	8008c72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b92:	4b3b      	ldr	r3, [pc, #236]	; (8008c80 <HAL_RCC_ClockConfig+0x1bc>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f003 0302 	and.w	r3, r3, #2
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d101      	bne.n	8008ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e067      	b.n	8008c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008ba2:	4b37      	ldr	r3, [pc, #220]	; (8008c80 <HAL_RCC_ClockConfig+0x1bc>)
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	f023 0203 	bic.w	r2, r3, #3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	4934      	ldr	r1, [pc, #208]	; (8008c80 <HAL_RCC_ClockConfig+0x1bc>)
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008bb4:	f7ff f81e 	bl	8007bf4 <HAL_GetTick>
 8008bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bba:	e00a      	b.n	8008bd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bbc:	f7ff f81a 	bl	8007bf4 <HAL_GetTick>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d901      	bls.n	8008bd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008bce:	2303      	movs	r3, #3
 8008bd0:	e04f      	b.n	8008c72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bd2:	4b2b      	ldr	r3, [pc, #172]	; (8008c80 <HAL_RCC_ClockConfig+0x1bc>)
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	f003 020c 	and.w	r2, r3, #12
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d1eb      	bne.n	8008bbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008be4:	4b25      	ldr	r3, [pc, #148]	; (8008c7c <HAL_RCC_ClockConfig+0x1b8>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f003 030f 	and.w	r3, r3, #15
 8008bec:	683a      	ldr	r2, [r7, #0]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d20c      	bcs.n	8008c0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bf2:	4b22      	ldr	r3, [pc, #136]	; (8008c7c <HAL_RCC_ClockConfig+0x1b8>)
 8008bf4:	683a      	ldr	r2, [r7, #0]
 8008bf6:	b2d2      	uxtb	r2, r2
 8008bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bfa:	4b20      	ldr	r3, [pc, #128]	; (8008c7c <HAL_RCC_ClockConfig+0x1b8>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f003 030f 	and.w	r3, r3, #15
 8008c02:	683a      	ldr	r2, [r7, #0]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d001      	beq.n	8008c0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e032      	b.n	8008c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 0304 	and.w	r3, r3, #4
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d008      	beq.n	8008c2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c18:	4b19      	ldr	r3, [pc, #100]	; (8008c80 <HAL_RCC_ClockConfig+0x1bc>)
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	4916      	ldr	r1, [pc, #88]	; (8008c80 <HAL_RCC_ClockConfig+0x1bc>)
 8008c26:	4313      	orrs	r3, r2
 8008c28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f003 0308 	and.w	r3, r3, #8
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d009      	beq.n	8008c4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008c36:	4b12      	ldr	r3, [pc, #72]	; (8008c80 <HAL_RCC_ClockConfig+0x1bc>)
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	691b      	ldr	r3, [r3, #16]
 8008c42:	00db      	lsls	r3, r3, #3
 8008c44:	490e      	ldr	r1, [pc, #56]	; (8008c80 <HAL_RCC_ClockConfig+0x1bc>)
 8008c46:	4313      	orrs	r3, r2
 8008c48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008c4a:	f000 f855 	bl	8008cf8 <HAL_RCC_GetSysClockFreq>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	4b0b      	ldr	r3, [pc, #44]	; (8008c80 <HAL_RCC_ClockConfig+0x1bc>)
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	091b      	lsrs	r3, r3, #4
 8008c56:	f003 030f 	and.w	r3, r3, #15
 8008c5a:	490a      	ldr	r1, [pc, #40]	; (8008c84 <HAL_RCC_ClockConfig+0x1c0>)
 8008c5c:	5ccb      	ldrb	r3, [r1, r3]
 8008c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c62:	4a09      	ldr	r2, [pc, #36]	; (8008c88 <HAL_RCC_ClockConfig+0x1c4>)
 8008c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008c66:	4b09      	ldr	r3, [pc, #36]	; (8008c8c <HAL_RCC_ClockConfig+0x1c8>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7fe ff7e 	bl	8007b6c <HAL_InitTick>

  return HAL_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3710      	adds	r7, #16
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	40023c00 	.word	0x40023c00
 8008c80:	40023800 	.word	0x40023800
 8008c84:	0800f7bc 	.word	0x0800f7bc
 8008c88:	200000b0 	.word	0x200000b0
 8008c8c:	200000b4 	.word	0x200000b4

08008c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c90:	b480      	push	{r7}
 8008c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c94:	4b03      	ldr	r3, [pc, #12]	; (8008ca4 <HAL_RCC_GetHCLKFreq+0x14>)
 8008c96:	681b      	ldr	r3, [r3, #0]
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop
 8008ca4:	200000b0 	.word	0x200000b0

08008ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008cac:	f7ff fff0 	bl	8008c90 <HAL_RCC_GetHCLKFreq>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	4b05      	ldr	r3, [pc, #20]	; (8008cc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	0a9b      	lsrs	r3, r3, #10
 8008cb8:	f003 0307 	and.w	r3, r3, #7
 8008cbc:	4903      	ldr	r1, [pc, #12]	; (8008ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8008cbe:	5ccb      	ldrb	r3, [r1, r3]
 8008cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	40023800 	.word	0x40023800
 8008ccc:	0800f7cc 	.word	0x0800f7cc

08008cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008cd4:	f7ff ffdc 	bl	8008c90 <HAL_RCC_GetHCLKFreq>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	4b05      	ldr	r3, [pc, #20]	; (8008cf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	0b5b      	lsrs	r3, r3, #13
 8008ce0:	f003 0307 	and.w	r3, r3, #7
 8008ce4:	4903      	ldr	r1, [pc, #12]	; (8008cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ce6:	5ccb      	ldrb	r3, [r1, r3]
 8008ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	40023800 	.word	0x40023800
 8008cf4:	0800f7cc 	.word	0x0800f7cc

08008cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008cfc:	b0ae      	sub	sp, #184	; 0xb8
 8008cfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008d00:	2300      	movs	r3, #0
 8008d02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8008d06:	2300      	movs	r3, #0
 8008d08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8008d12:	2300      	movs	r3, #0
 8008d14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d1e:	4bcb      	ldr	r3, [pc, #812]	; (800904c <HAL_RCC_GetSysClockFreq+0x354>)
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	f003 030c 	and.w	r3, r3, #12
 8008d26:	2b0c      	cmp	r3, #12
 8008d28:	f200 8206 	bhi.w	8009138 <HAL_RCC_GetSysClockFreq+0x440>
 8008d2c:	a201      	add	r2, pc, #4	; (adr r2, 8008d34 <HAL_RCC_GetSysClockFreq+0x3c>)
 8008d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d32:	bf00      	nop
 8008d34:	08008d69 	.word	0x08008d69
 8008d38:	08009139 	.word	0x08009139
 8008d3c:	08009139 	.word	0x08009139
 8008d40:	08009139 	.word	0x08009139
 8008d44:	08008d71 	.word	0x08008d71
 8008d48:	08009139 	.word	0x08009139
 8008d4c:	08009139 	.word	0x08009139
 8008d50:	08009139 	.word	0x08009139
 8008d54:	08008d79 	.word	0x08008d79
 8008d58:	08009139 	.word	0x08009139
 8008d5c:	08009139 	.word	0x08009139
 8008d60:	08009139 	.word	0x08009139
 8008d64:	08008f69 	.word	0x08008f69
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008d68:	4bb9      	ldr	r3, [pc, #740]	; (8009050 <HAL_RCC_GetSysClockFreq+0x358>)
 8008d6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8008d6e:	e1e7      	b.n	8009140 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008d70:	4bb8      	ldr	r3, [pc, #736]	; (8009054 <HAL_RCC_GetSysClockFreq+0x35c>)
 8008d72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008d76:	e1e3      	b.n	8009140 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008d78:	4bb4      	ldr	r3, [pc, #720]	; (800904c <HAL_RCC_GetSysClockFreq+0x354>)
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008d84:	4bb1      	ldr	r3, [pc, #708]	; (800904c <HAL_RCC_GetSysClockFreq+0x354>)
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d071      	beq.n	8008e74 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d90:	4bae      	ldr	r3, [pc, #696]	; (800904c <HAL_RCC_GetSysClockFreq+0x354>)
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	099b      	lsrs	r3, r3, #6
 8008d96:	2200      	movs	r2, #0
 8008d98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008d9c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8008da0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008da8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008dac:	2300      	movs	r3, #0
 8008dae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008db2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008db6:	4622      	mov	r2, r4
 8008db8:	462b      	mov	r3, r5
 8008dba:	f04f 0000 	mov.w	r0, #0
 8008dbe:	f04f 0100 	mov.w	r1, #0
 8008dc2:	0159      	lsls	r1, r3, #5
 8008dc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008dc8:	0150      	lsls	r0, r2, #5
 8008dca:	4602      	mov	r2, r0
 8008dcc:	460b      	mov	r3, r1
 8008dce:	4621      	mov	r1, r4
 8008dd0:	1a51      	subs	r1, r2, r1
 8008dd2:	6439      	str	r1, [r7, #64]	; 0x40
 8008dd4:	4629      	mov	r1, r5
 8008dd6:	eb63 0301 	sbc.w	r3, r3, r1
 8008dda:	647b      	str	r3, [r7, #68]	; 0x44
 8008ddc:	f04f 0200 	mov.w	r2, #0
 8008de0:	f04f 0300 	mov.w	r3, #0
 8008de4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8008de8:	4649      	mov	r1, r9
 8008dea:	018b      	lsls	r3, r1, #6
 8008dec:	4641      	mov	r1, r8
 8008dee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008df2:	4641      	mov	r1, r8
 8008df4:	018a      	lsls	r2, r1, #6
 8008df6:	4641      	mov	r1, r8
 8008df8:	1a51      	subs	r1, r2, r1
 8008dfa:	63b9      	str	r1, [r7, #56]	; 0x38
 8008dfc:	4649      	mov	r1, r9
 8008dfe:	eb63 0301 	sbc.w	r3, r3, r1
 8008e02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e04:	f04f 0200 	mov.w	r2, #0
 8008e08:	f04f 0300 	mov.w	r3, #0
 8008e0c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8008e10:	4649      	mov	r1, r9
 8008e12:	00cb      	lsls	r3, r1, #3
 8008e14:	4641      	mov	r1, r8
 8008e16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e1a:	4641      	mov	r1, r8
 8008e1c:	00ca      	lsls	r2, r1, #3
 8008e1e:	4610      	mov	r0, r2
 8008e20:	4619      	mov	r1, r3
 8008e22:	4603      	mov	r3, r0
 8008e24:	4622      	mov	r2, r4
 8008e26:	189b      	adds	r3, r3, r2
 8008e28:	633b      	str	r3, [r7, #48]	; 0x30
 8008e2a:	462b      	mov	r3, r5
 8008e2c:	460a      	mov	r2, r1
 8008e2e:	eb42 0303 	adc.w	r3, r2, r3
 8008e32:	637b      	str	r3, [r7, #52]	; 0x34
 8008e34:	f04f 0200 	mov.w	r2, #0
 8008e38:	f04f 0300 	mov.w	r3, #0
 8008e3c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008e40:	4629      	mov	r1, r5
 8008e42:	024b      	lsls	r3, r1, #9
 8008e44:	4621      	mov	r1, r4
 8008e46:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008e4a:	4621      	mov	r1, r4
 8008e4c:	024a      	lsls	r2, r1, #9
 8008e4e:	4610      	mov	r0, r2
 8008e50:	4619      	mov	r1, r3
 8008e52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e56:	2200      	movs	r2, #0
 8008e58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008e60:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008e64:	f7f7 fed0 	bl	8000c08 <__aeabi_uldivmod>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e72:	e067      	b.n	8008f44 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e74:	4b75      	ldr	r3, [pc, #468]	; (800904c <HAL_RCC_GetSysClockFreq+0x354>)
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	099b      	lsrs	r3, r3, #6
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e80:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8008e84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e8e:	2300      	movs	r3, #0
 8008e90:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008e92:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8008e96:	4622      	mov	r2, r4
 8008e98:	462b      	mov	r3, r5
 8008e9a:	f04f 0000 	mov.w	r0, #0
 8008e9e:	f04f 0100 	mov.w	r1, #0
 8008ea2:	0159      	lsls	r1, r3, #5
 8008ea4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008ea8:	0150      	lsls	r0, r2, #5
 8008eaa:	4602      	mov	r2, r0
 8008eac:	460b      	mov	r3, r1
 8008eae:	4621      	mov	r1, r4
 8008eb0:	1a51      	subs	r1, r2, r1
 8008eb2:	62b9      	str	r1, [r7, #40]	; 0x28
 8008eb4:	4629      	mov	r1, r5
 8008eb6:	eb63 0301 	sbc.w	r3, r3, r1
 8008eba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ebc:	f04f 0200 	mov.w	r2, #0
 8008ec0:	f04f 0300 	mov.w	r3, #0
 8008ec4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8008ec8:	4649      	mov	r1, r9
 8008eca:	018b      	lsls	r3, r1, #6
 8008ecc:	4641      	mov	r1, r8
 8008ece:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008ed2:	4641      	mov	r1, r8
 8008ed4:	018a      	lsls	r2, r1, #6
 8008ed6:	4641      	mov	r1, r8
 8008ed8:	ebb2 0a01 	subs.w	sl, r2, r1
 8008edc:	4649      	mov	r1, r9
 8008ede:	eb63 0b01 	sbc.w	fp, r3, r1
 8008ee2:	f04f 0200 	mov.w	r2, #0
 8008ee6:	f04f 0300 	mov.w	r3, #0
 8008eea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008eee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008ef2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ef6:	4692      	mov	sl, r2
 8008ef8:	469b      	mov	fp, r3
 8008efa:	4623      	mov	r3, r4
 8008efc:	eb1a 0303 	adds.w	r3, sl, r3
 8008f00:	623b      	str	r3, [r7, #32]
 8008f02:	462b      	mov	r3, r5
 8008f04:	eb4b 0303 	adc.w	r3, fp, r3
 8008f08:	627b      	str	r3, [r7, #36]	; 0x24
 8008f0a:	f04f 0200 	mov.w	r2, #0
 8008f0e:	f04f 0300 	mov.w	r3, #0
 8008f12:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8008f16:	4629      	mov	r1, r5
 8008f18:	028b      	lsls	r3, r1, #10
 8008f1a:	4621      	mov	r1, r4
 8008f1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008f20:	4621      	mov	r1, r4
 8008f22:	028a      	lsls	r2, r1, #10
 8008f24:	4610      	mov	r0, r2
 8008f26:	4619      	mov	r1, r3
 8008f28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	673b      	str	r3, [r7, #112]	; 0x70
 8008f30:	677a      	str	r2, [r7, #116]	; 0x74
 8008f32:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008f36:	f7f7 fe67 	bl	8000c08 <__aeabi_uldivmod>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	4613      	mov	r3, r2
 8008f40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008f44:	4b41      	ldr	r3, [pc, #260]	; (800904c <HAL_RCC_GetSysClockFreq+0x354>)
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	0c1b      	lsrs	r3, r3, #16
 8008f4a:	f003 0303 	and.w	r3, r3, #3
 8008f4e:	3301      	adds	r3, #1
 8008f50:	005b      	lsls	r3, r3, #1
 8008f52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8008f56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008f5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008f66:	e0eb      	b.n	8009140 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008f68:	4b38      	ldr	r3, [pc, #224]	; (800904c <HAL_RCC_GetSysClockFreq+0x354>)
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008f74:	4b35      	ldr	r3, [pc, #212]	; (800904c <HAL_RCC_GetSysClockFreq+0x354>)
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d06b      	beq.n	8009058 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f80:	4b32      	ldr	r3, [pc, #200]	; (800904c <HAL_RCC_GetSysClockFreq+0x354>)
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	099b      	lsrs	r3, r3, #6
 8008f86:	2200      	movs	r2, #0
 8008f88:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008f8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f92:	663b      	str	r3, [r7, #96]	; 0x60
 8008f94:	2300      	movs	r3, #0
 8008f96:	667b      	str	r3, [r7, #100]	; 0x64
 8008f98:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8008f9c:	4622      	mov	r2, r4
 8008f9e:	462b      	mov	r3, r5
 8008fa0:	f04f 0000 	mov.w	r0, #0
 8008fa4:	f04f 0100 	mov.w	r1, #0
 8008fa8:	0159      	lsls	r1, r3, #5
 8008faa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008fae:	0150      	lsls	r0, r2, #5
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	4621      	mov	r1, r4
 8008fb6:	1a51      	subs	r1, r2, r1
 8008fb8:	61b9      	str	r1, [r7, #24]
 8008fba:	4629      	mov	r1, r5
 8008fbc:	eb63 0301 	sbc.w	r3, r3, r1
 8008fc0:	61fb      	str	r3, [r7, #28]
 8008fc2:	f04f 0200 	mov.w	r2, #0
 8008fc6:	f04f 0300 	mov.w	r3, #0
 8008fca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8008fce:	4659      	mov	r1, fp
 8008fd0:	018b      	lsls	r3, r1, #6
 8008fd2:	4651      	mov	r1, sl
 8008fd4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008fd8:	4651      	mov	r1, sl
 8008fda:	018a      	lsls	r2, r1, #6
 8008fdc:	4651      	mov	r1, sl
 8008fde:	ebb2 0801 	subs.w	r8, r2, r1
 8008fe2:	4659      	mov	r1, fp
 8008fe4:	eb63 0901 	sbc.w	r9, r3, r1
 8008fe8:	f04f 0200 	mov.w	r2, #0
 8008fec:	f04f 0300 	mov.w	r3, #0
 8008ff0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008ff4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008ff8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008ffc:	4690      	mov	r8, r2
 8008ffe:	4699      	mov	r9, r3
 8009000:	4623      	mov	r3, r4
 8009002:	eb18 0303 	adds.w	r3, r8, r3
 8009006:	613b      	str	r3, [r7, #16]
 8009008:	462b      	mov	r3, r5
 800900a:	eb49 0303 	adc.w	r3, r9, r3
 800900e:	617b      	str	r3, [r7, #20]
 8009010:	f04f 0200 	mov.w	r2, #0
 8009014:	f04f 0300 	mov.w	r3, #0
 8009018:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800901c:	4629      	mov	r1, r5
 800901e:	024b      	lsls	r3, r1, #9
 8009020:	4621      	mov	r1, r4
 8009022:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009026:	4621      	mov	r1, r4
 8009028:	024a      	lsls	r2, r1, #9
 800902a:	4610      	mov	r0, r2
 800902c:	4619      	mov	r1, r3
 800902e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009032:	2200      	movs	r2, #0
 8009034:	65bb      	str	r3, [r7, #88]	; 0x58
 8009036:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009038:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800903c:	f7f7 fde4 	bl	8000c08 <__aeabi_uldivmod>
 8009040:	4602      	mov	r2, r0
 8009042:	460b      	mov	r3, r1
 8009044:	4613      	mov	r3, r2
 8009046:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800904a:	e065      	b.n	8009118 <HAL_RCC_GetSysClockFreq+0x420>
 800904c:	40023800 	.word	0x40023800
 8009050:	00f42400 	.word	0x00f42400
 8009054:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009058:	4b3d      	ldr	r3, [pc, #244]	; (8009150 <HAL_RCC_GetSysClockFreq+0x458>)
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	099b      	lsrs	r3, r3, #6
 800905e:	2200      	movs	r2, #0
 8009060:	4618      	mov	r0, r3
 8009062:	4611      	mov	r1, r2
 8009064:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009068:	653b      	str	r3, [r7, #80]	; 0x50
 800906a:	2300      	movs	r3, #0
 800906c:	657b      	str	r3, [r7, #84]	; 0x54
 800906e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8009072:	4642      	mov	r2, r8
 8009074:	464b      	mov	r3, r9
 8009076:	f04f 0000 	mov.w	r0, #0
 800907a:	f04f 0100 	mov.w	r1, #0
 800907e:	0159      	lsls	r1, r3, #5
 8009080:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009084:	0150      	lsls	r0, r2, #5
 8009086:	4602      	mov	r2, r0
 8009088:	460b      	mov	r3, r1
 800908a:	4641      	mov	r1, r8
 800908c:	1a51      	subs	r1, r2, r1
 800908e:	60b9      	str	r1, [r7, #8]
 8009090:	4649      	mov	r1, r9
 8009092:	eb63 0301 	sbc.w	r3, r3, r1
 8009096:	60fb      	str	r3, [r7, #12]
 8009098:	f04f 0200 	mov.w	r2, #0
 800909c:	f04f 0300 	mov.w	r3, #0
 80090a0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80090a4:	4659      	mov	r1, fp
 80090a6:	018b      	lsls	r3, r1, #6
 80090a8:	4651      	mov	r1, sl
 80090aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80090ae:	4651      	mov	r1, sl
 80090b0:	018a      	lsls	r2, r1, #6
 80090b2:	4651      	mov	r1, sl
 80090b4:	1a54      	subs	r4, r2, r1
 80090b6:	4659      	mov	r1, fp
 80090b8:	eb63 0501 	sbc.w	r5, r3, r1
 80090bc:	f04f 0200 	mov.w	r2, #0
 80090c0:	f04f 0300 	mov.w	r3, #0
 80090c4:	00eb      	lsls	r3, r5, #3
 80090c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80090ca:	00e2      	lsls	r2, r4, #3
 80090cc:	4614      	mov	r4, r2
 80090ce:	461d      	mov	r5, r3
 80090d0:	4643      	mov	r3, r8
 80090d2:	18e3      	adds	r3, r4, r3
 80090d4:	603b      	str	r3, [r7, #0]
 80090d6:	464b      	mov	r3, r9
 80090d8:	eb45 0303 	adc.w	r3, r5, r3
 80090dc:	607b      	str	r3, [r7, #4]
 80090de:	f04f 0200 	mov.w	r2, #0
 80090e2:	f04f 0300 	mov.w	r3, #0
 80090e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80090ea:	4629      	mov	r1, r5
 80090ec:	028b      	lsls	r3, r1, #10
 80090ee:	4621      	mov	r1, r4
 80090f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80090f4:	4621      	mov	r1, r4
 80090f6:	028a      	lsls	r2, r1, #10
 80090f8:	4610      	mov	r0, r2
 80090fa:	4619      	mov	r1, r3
 80090fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009100:	2200      	movs	r2, #0
 8009102:	64bb      	str	r3, [r7, #72]	; 0x48
 8009104:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009106:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800910a:	f7f7 fd7d 	bl	8000c08 <__aeabi_uldivmod>
 800910e:	4602      	mov	r2, r0
 8009110:	460b      	mov	r3, r1
 8009112:	4613      	mov	r3, r2
 8009114:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8009118:	4b0d      	ldr	r3, [pc, #52]	; (8009150 <HAL_RCC_GetSysClockFreq+0x458>)
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	0f1b      	lsrs	r3, r3, #28
 800911e:	f003 0307 	and.w	r3, r3, #7
 8009122:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8009126:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800912a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800912e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009132:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8009136:	e003      	b.n	8009140 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009138:	4b06      	ldr	r3, [pc, #24]	; (8009154 <HAL_RCC_GetSysClockFreq+0x45c>)
 800913a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800913e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009140:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8009144:	4618      	mov	r0, r3
 8009146:	37b8      	adds	r7, #184	; 0xb8
 8009148:	46bd      	mov	sp, r7
 800914a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800914e:	bf00      	nop
 8009150:	40023800 	.word	0x40023800
 8009154:	00f42400 	.word	0x00f42400

08009158 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b086      	sub	sp, #24
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d101      	bne.n	800916a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	e28d      	b.n	8009686 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f003 0301 	and.w	r3, r3, #1
 8009172:	2b00      	cmp	r3, #0
 8009174:	f000 8083 	beq.w	800927e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009178:	4b94      	ldr	r3, [pc, #592]	; (80093cc <HAL_RCC_OscConfig+0x274>)
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	f003 030c 	and.w	r3, r3, #12
 8009180:	2b04      	cmp	r3, #4
 8009182:	d019      	beq.n	80091b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009184:	4b91      	ldr	r3, [pc, #580]	; (80093cc <HAL_RCC_OscConfig+0x274>)
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800918c:	2b08      	cmp	r3, #8
 800918e:	d106      	bne.n	800919e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009190:	4b8e      	ldr	r3, [pc, #568]	; (80093cc <HAL_RCC_OscConfig+0x274>)
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009198:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800919c:	d00c      	beq.n	80091b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800919e:	4b8b      	ldr	r3, [pc, #556]	; (80093cc <HAL_RCC_OscConfig+0x274>)
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80091a6:	2b0c      	cmp	r3, #12
 80091a8:	d112      	bne.n	80091d0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80091aa:	4b88      	ldr	r3, [pc, #544]	; (80093cc <HAL_RCC_OscConfig+0x274>)
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80091b6:	d10b      	bne.n	80091d0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091b8:	4b84      	ldr	r3, [pc, #528]	; (80093cc <HAL_RCC_OscConfig+0x274>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d05b      	beq.n	800927c <HAL_RCC_OscConfig+0x124>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d157      	bne.n	800927c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80091cc:	2301      	movs	r3, #1
 80091ce:	e25a      	b.n	8009686 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091d8:	d106      	bne.n	80091e8 <HAL_RCC_OscConfig+0x90>
 80091da:	4b7c      	ldr	r3, [pc, #496]	; (80093cc <HAL_RCC_OscConfig+0x274>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a7b      	ldr	r2, [pc, #492]	; (80093cc <HAL_RCC_OscConfig+0x274>)
 80091e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091e4:	6013      	str	r3, [r2, #0]
 80091e6:	e01d      	b.n	8009224 <HAL_RCC_OscConfig+0xcc>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80091f0:	d10c      	bne.n	800920c <HAL_RCC_OscConfig+0xb4>
 80091f2:	4b76      	ldr	r3, [pc, #472]	; (80093cc <HAL_RCC_OscConfig+0x274>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a75      	ldr	r2, [pc, #468]	; (80093cc <HAL_RCC_OscConfig+0x274>)
 80091f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80091fc:	6013      	str	r3, [r2, #0]
 80091fe:	4b73      	ldr	r3, [pc, #460]	; (80093cc <HAL_RCC_OscConfig+0x274>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a72      	ldr	r2, [pc, #456]	; (80093cc <HAL_RCC_OscConfig+0x274>)
 8009204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009208:	6013      	str	r3, [r2, #0]
 800920a:	e00b      	b.n	8009224 <HAL_RCC_OscConfig+0xcc>
 800920c:	4b6f      	ldr	r3, [pc, #444]	; (80093cc <HAL_RCC_OscConfig+0x274>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a6e      	ldr	r2, [pc, #440]	; (80093cc <HAL_RCC_OscConfig+0x274>)
 8009212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009216:	6013      	str	r3, [r2, #0]
 8009218:	4b6c      	ldr	r3, [pc, #432]	; (80093cc <HAL_RCC_OscConfig+0x274>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a6b      	ldr	r2, [pc, #428]	; (80093cc <HAL_RCC_OscConfig+0x274>)
 800921e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009222:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d013      	beq.n	8009254 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800922c:	f7fe fce2 	bl	8007bf4 <HAL_GetTick>
 8009230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009232:	e008      	b.n	8009246 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009234:	f7fe fcde 	bl	8007bf4 <HAL_GetTick>
 8009238:	4602      	mov	r2, r0
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	2b64      	cmp	r3, #100	; 0x64
 8009240:	d901      	bls.n	8009246 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8009242:	2303      	movs	r3, #3
 8009244:	e21f      	b.n	8009686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009246:	4b61      	ldr	r3, [pc, #388]	; (80093cc <HAL_RCC_OscConfig+0x274>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800924e:	2b00      	cmp	r3, #0
 8009250:	d0f0      	beq.n	8009234 <HAL_RCC_OscConfig+0xdc>
 8009252:	e014      	b.n	800927e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009254:	f7fe fcce 	bl	8007bf4 <HAL_GetTick>
 8009258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800925a:	e008      	b.n	800926e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800925c:	f7fe fcca 	bl	8007bf4 <HAL_GetTick>
 8009260:	4602      	mov	r2, r0
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	1ad3      	subs	r3, r2, r3
 8009266:	2b64      	cmp	r3, #100	; 0x64
 8009268:	d901      	bls.n	800926e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800926a:	2303      	movs	r3, #3
 800926c:	e20b      	b.n	8009686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800926e:	4b57      	ldr	r3, [pc, #348]	; (80093cc <HAL_RCC_OscConfig+0x274>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009276:	2b00      	cmp	r3, #0
 8009278:	d1f0      	bne.n	800925c <HAL_RCC_OscConfig+0x104>
 800927a:	e000      	b.n	800927e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800927c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f003 0302 	and.w	r3, r3, #2
 8009286:	2b00      	cmp	r3, #0
 8009288:	d06f      	beq.n	800936a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800928a:	4b50      	ldr	r3, [pc, #320]	; (80093cc <HAL_RCC_OscConfig+0x274>)
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	f003 030c 	and.w	r3, r3, #12
 8009292:	2b00      	cmp	r3, #0
 8009294:	d017      	beq.n	80092c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009296:	4b4d      	ldr	r3, [pc, #308]	; (80093cc <HAL_RCC_OscConfig+0x274>)
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800929e:	2b08      	cmp	r3, #8
 80092a0:	d105      	bne.n	80092ae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80092a2:	4b4a      	ldr	r3, [pc, #296]	; (80093cc <HAL_RCC_OscConfig+0x274>)
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00b      	beq.n	80092c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80092ae:	4b47      	ldr	r3, [pc, #284]	; (80093cc <HAL_RCC_OscConfig+0x274>)
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80092b6:	2b0c      	cmp	r3, #12
 80092b8:	d11c      	bne.n	80092f4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80092ba:	4b44      	ldr	r3, [pc, #272]	; (80093cc <HAL_RCC_OscConfig+0x274>)
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d116      	bne.n	80092f4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80092c6:	4b41      	ldr	r3, [pc, #260]	; (80093cc <HAL_RCC_OscConfig+0x274>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f003 0302 	and.w	r3, r3, #2
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d005      	beq.n	80092de <HAL_RCC_OscConfig+0x186>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	68db      	ldr	r3, [r3, #12]
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d001      	beq.n	80092de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	e1d3      	b.n	8009686 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092de:	4b3b      	ldr	r3, [pc, #236]	; (80093cc <HAL_RCC_OscConfig+0x274>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	00db      	lsls	r3, r3, #3
 80092ec:	4937      	ldr	r1, [pc, #220]	; (80093cc <HAL_RCC_OscConfig+0x274>)
 80092ee:	4313      	orrs	r3, r2
 80092f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80092f2:	e03a      	b.n	800936a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d020      	beq.n	800933e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80092fc:	4b34      	ldr	r3, [pc, #208]	; (80093d0 <HAL_RCC_OscConfig+0x278>)
 80092fe:	2201      	movs	r2, #1
 8009300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009302:	f7fe fc77 	bl	8007bf4 <HAL_GetTick>
 8009306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009308:	e008      	b.n	800931c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800930a:	f7fe fc73 	bl	8007bf4 <HAL_GetTick>
 800930e:	4602      	mov	r2, r0
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	1ad3      	subs	r3, r2, r3
 8009314:	2b02      	cmp	r3, #2
 8009316:	d901      	bls.n	800931c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8009318:	2303      	movs	r3, #3
 800931a:	e1b4      	b.n	8009686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800931c:	4b2b      	ldr	r3, [pc, #172]	; (80093cc <HAL_RCC_OscConfig+0x274>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f003 0302 	and.w	r3, r3, #2
 8009324:	2b00      	cmp	r3, #0
 8009326:	d0f0      	beq.n	800930a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009328:	4b28      	ldr	r3, [pc, #160]	; (80093cc <HAL_RCC_OscConfig+0x274>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	00db      	lsls	r3, r3, #3
 8009336:	4925      	ldr	r1, [pc, #148]	; (80093cc <HAL_RCC_OscConfig+0x274>)
 8009338:	4313      	orrs	r3, r2
 800933a:	600b      	str	r3, [r1, #0]
 800933c:	e015      	b.n	800936a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800933e:	4b24      	ldr	r3, [pc, #144]	; (80093d0 <HAL_RCC_OscConfig+0x278>)
 8009340:	2200      	movs	r2, #0
 8009342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009344:	f7fe fc56 	bl	8007bf4 <HAL_GetTick>
 8009348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800934a:	e008      	b.n	800935e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800934c:	f7fe fc52 	bl	8007bf4 <HAL_GetTick>
 8009350:	4602      	mov	r2, r0
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	2b02      	cmp	r3, #2
 8009358:	d901      	bls.n	800935e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800935a:	2303      	movs	r3, #3
 800935c:	e193      	b.n	8009686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800935e:	4b1b      	ldr	r3, [pc, #108]	; (80093cc <HAL_RCC_OscConfig+0x274>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f003 0302 	and.w	r3, r3, #2
 8009366:	2b00      	cmp	r3, #0
 8009368:	d1f0      	bne.n	800934c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f003 0308 	and.w	r3, r3, #8
 8009372:	2b00      	cmp	r3, #0
 8009374:	d036      	beq.n	80093e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	695b      	ldr	r3, [r3, #20]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d016      	beq.n	80093ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800937e:	4b15      	ldr	r3, [pc, #84]	; (80093d4 <HAL_RCC_OscConfig+0x27c>)
 8009380:	2201      	movs	r2, #1
 8009382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009384:	f7fe fc36 	bl	8007bf4 <HAL_GetTick>
 8009388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800938a:	e008      	b.n	800939e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800938c:	f7fe fc32 	bl	8007bf4 <HAL_GetTick>
 8009390:	4602      	mov	r2, r0
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	1ad3      	subs	r3, r2, r3
 8009396:	2b02      	cmp	r3, #2
 8009398:	d901      	bls.n	800939e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800939a:	2303      	movs	r3, #3
 800939c:	e173      	b.n	8009686 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800939e:	4b0b      	ldr	r3, [pc, #44]	; (80093cc <HAL_RCC_OscConfig+0x274>)
 80093a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093a2:	f003 0302 	and.w	r3, r3, #2
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d0f0      	beq.n	800938c <HAL_RCC_OscConfig+0x234>
 80093aa:	e01b      	b.n	80093e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80093ac:	4b09      	ldr	r3, [pc, #36]	; (80093d4 <HAL_RCC_OscConfig+0x27c>)
 80093ae:	2200      	movs	r2, #0
 80093b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093b2:	f7fe fc1f 	bl	8007bf4 <HAL_GetTick>
 80093b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80093b8:	e00e      	b.n	80093d8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80093ba:	f7fe fc1b 	bl	8007bf4 <HAL_GetTick>
 80093be:	4602      	mov	r2, r0
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	1ad3      	subs	r3, r2, r3
 80093c4:	2b02      	cmp	r3, #2
 80093c6:	d907      	bls.n	80093d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80093c8:	2303      	movs	r3, #3
 80093ca:	e15c      	b.n	8009686 <HAL_RCC_OscConfig+0x52e>
 80093cc:	40023800 	.word	0x40023800
 80093d0:	42470000 	.word	0x42470000
 80093d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80093d8:	4b8a      	ldr	r3, [pc, #552]	; (8009604 <HAL_RCC_OscConfig+0x4ac>)
 80093da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093dc:	f003 0302 	and.w	r3, r3, #2
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d1ea      	bne.n	80093ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f003 0304 	and.w	r3, r3, #4
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	f000 8097 	beq.w	8009520 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80093f2:	2300      	movs	r3, #0
 80093f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80093f6:	4b83      	ldr	r3, [pc, #524]	; (8009604 <HAL_RCC_OscConfig+0x4ac>)
 80093f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d10f      	bne.n	8009422 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009402:	2300      	movs	r3, #0
 8009404:	60bb      	str	r3, [r7, #8]
 8009406:	4b7f      	ldr	r3, [pc, #508]	; (8009604 <HAL_RCC_OscConfig+0x4ac>)
 8009408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800940a:	4a7e      	ldr	r2, [pc, #504]	; (8009604 <HAL_RCC_OscConfig+0x4ac>)
 800940c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009410:	6413      	str	r3, [r2, #64]	; 0x40
 8009412:	4b7c      	ldr	r3, [pc, #496]	; (8009604 <HAL_RCC_OscConfig+0x4ac>)
 8009414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800941a:	60bb      	str	r3, [r7, #8]
 800941c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800941e:	2301      	movs	r3, #1
 8009420:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009422:	4b79      	ldr	r3, [pc, #484]	; (8009608 <HAL_RCC_OscConfig+0x4b0>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800942a:	2b00      	cmp	r3, #0
 800942c:	d118      	bne.n	8009460 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800942e:	4b76      	ldr	r3, [pc, #472]	; (8009608 <HAL_RCC_OscConfig+0x4b0>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a75      	ldr	r2, [pc, #468]	; (8009608 <HAL_RCC_OscConfig+0x4b0>)
 8009434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800943a:	f7fe fbdb 	bl	8007bf4 <HAL_GetTick>
 800943e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009440:	e008      	b.n	8009454 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009442:	f7fe fbd7 	bl	8007bf4 <HAL_GetTick>
 8009446:	4602      	mov	r2, r0
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	1ad3      	subs	r3, r2, r3
 800944c:	2b02      	cmp	r3, #2
 800944e:	d901      	bls.n	8009454 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009450:	2303      	movs	r3, #3
 8009452:	e118      	b.n	8009686 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009454:	4b6c      	ldr	r3, [pc, #432]	; (8009608 <HAL_RCC_OscConfig+0x4b0>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800945c:	2b00      	cmp	r3, #0
 800945e:	d0f0      	beq.n	8009442 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	2b01      	cmp	r3, #1
 8009466:	d106      	bne.n	8009476 <HAL_RCC_OscConfig+0x31e>
 8009468:	4b66      	ldr	r3, [pc, #408]	; (8009604 <HAL_RCC_OscConfig+0x4ac>)
 800946a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800946c:	4a65      	ldr	r2, [pc, #404]	; (8009604 <HAL_RCC_OscConfig+0x4ac>)
 800946e:	f043 0301 	orr.w	r3, r3, #1
 8009472:	6713      	str	r3, [r2, #112]	; 0x70
 8009474:	e01c      	b.n	80094b0 <HAL_RCC_OscConfig+0x358>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	2b05      	cmp	r3, #5
 800947c:	d10c      	bne.n	8009498 <HAL_RCC_OscConfig+0x340>
 800947e:	4b61      	ldr	r3, [pc, #388]	; (8009604 <HAL_RCC_OscConfig+0x4ac>)
 8009480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009482:	4a60      	ldr	r2, [pc, #384]	; (8009604 <HAL_RCC_OscConfig+0x4ac>)
 8009484:	f043 0304 	orr.w	r3, r3, #4
 8009488:	6713      	str	r3, [r2, #112]	; 0x70
 800948a:	4b5e      	ldr	r3, [pc, #376]	; (8009604 <HAL_RCC_OscConfig+0x4ac>)
 800948c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800948e:	4a5d      	ldr	r2, [pc, #372]	; (8009604 <HAL_RCC_OscConfig+0x4ac>)
 8009490:	f043 0301 	orr.w	r3, r3, #1
 8009494:	6713      	str	r3, [r2, #112]	; 0x70
 8009496:	e00b      	b.n	80094b0 <HAL_RCC_OscConfig+0x358>
 8009498:	4b5a      	ldr	r3, [pc, #360]	; (8009604 <HAL_RCC_OscConfig+0x4ac>)
 800949a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800949c:	4a59      	ldr	r2, [pc, #356]	; (8009604 <HAL_RCC_OscConfig+0x4ac>)
 800949e:	f023 0301 	bic.w	r3, r3, #1
 80094a2:	6713      	str	r3, [r2, #112]	; 0x70
 80094a4:	4b57      	ldr	r3, [pc, #348]	; (8009604 <HAL_RCC_OscConfig+0x4ac>)
 80094a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094a8:	4a56      	ldr	r2, [pc, #344]	; (8009604 <HAL_RCC_OscConfig+0x4ac>)
 80094aa:	f023 0304 	bic.w	r3, r3, #4
 80094ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d015      	beq.n	80094e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094b8:	f7fe fb9c 	bl	8007bf4 <HAL_GetTick>
 80094bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094be:	e00a      	b.n	80094d6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80094c0:	f7fe fb98 	bl	8007bf4 <HAL_GetTick>
 80094c4:	4602      	mov	r2, r0
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	1ad3      	subs	r3, r2, r3
 80094ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d901      	bls.n	80094d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80094d2:	2303      	movs	r3, #3
 80094d4:	e0d7      	b.n	8009686 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094d6:	4b4b      	ldr	r3, [pc, #300]	; (8009604 <HAL_RCC_OscConfig+0x4ac>)
 80094d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094da:	f003 0302 	and.w	r3, r3, #2
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d0ee      	beq.n	80094c0 <HAL_RCC_OscConfig+0x368>
 80094e2:	e014      	b.n	800950e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094e4:	f7fe fb86 	bl	8007bf4 <HAL_GetTick>
 80094e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80094ea:	e00a      	b.n	8009502 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80094ec:	f7fe fb82 	bl	8007bf4 <HAL_GetTick>
 80094f0:	4602      	mov	r2, r0
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	1ad3      	subs	r3, r2, r3
 80094f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d901      	bls.n	8009502 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80094fe:	2303      	movs	r3, #3
 8009500:	e0c1      	b.n	8009686 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009502:	4b40      	ldr	r3, [pc, #256]	; (8009604 <HAL_RCC_OscConfig+0x4ac>)
 8009504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009506:	f003 0302 	and.w	r3, r3, #2
 800950a:	2b00      	cmp	r3, #0
 800950c:	d1ee      	bne.n	80094ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800950e:	7dfb      	ldrb	r3, [r7, #23]
 8009510:	2b01      	cmp	r3, #1
 8009512:	d105      	bne.n	8009520 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009514:	4b3b      	ldr	r3, [pc, #236]	; (8009604 <HAL_RCC_OscConfig+0x4ac>)
 8009516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009518:	4a3a      	ldr	r2, [pc, #232]	; (8009604 <HAL_RCC_OscConfig+0x4ac>)
 800951a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800951e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	699b      	ldr	r3, [r3, #24]
 8009524:	2b00      	cmp	r3, #0
 8009526:	f000 80ad 	beq.w	8009684 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800952a:	4b36      	ldr	r3, [pc, #216]	; (8009604 <HAL_RCC_OscConfig+0x4ac>)
 800952c:	689b      	ldr	r3, [r3, #8]
 800952e:	f003 030c 	and.w	r3, r3, #12
 8009532:	2b08      	cmp	r3, #8
 8009534:	d060      	beq.n	80095f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	699b      	ldr	r3, [r3, #24]
 800953a:	2b02      	cmp	r3, #2
 800953c:	d145      	bne.n	80095ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800953e:	4b33      	ldr	r3, [pc, #204]	; (800960c <HAL_RCC_OscConfig+0x4b4>)
 8009540:	2200      	movs	r2, #0
 8009542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009544:	f7fe fb56 	bl	8007bf4 <HAL_GetTick>
 8009548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800954a:	e008      	b.n	800955e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800954c:	f7fe fb52 	bl	8007bf4 <HAL_GetTick>
 8009550:	4602      	mov	r2, r0
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	1ad3      	subs	r3, r2, r3
 8009556:	2b02      	cmp	r3, #2
 8009558:	d901      	bls.n	800955e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800955a:	2303      	movs	r3, #3
 800955c:	e093      	b.n	8009686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800955e:	4b29      	ldr	r3, [pc, #164]	; (8009604 <HAL_RCC_OscConfig+0x4ac>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009566:	2b00      	cmp	r3, #0
 8009568:	d1f0      	bne.n	800954c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	69da      	ldr	r2, [r3, #28]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6a1b      	ldr	r3, [r3, #32]
 8009572:	431a      	orrs	r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009578:	019b      	lsls	r3, r3, #6
 800957a:	431a      	orrs	r2, r3
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009580:	085b      	lsrs	r3, r3, #1
 8009582:	3b01      	subs	r3, #1
 8009584:	041b      	lsls	r3, r3, #16
 8009586:	431a      	orrs	r2, r3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800958c:	061b      	lsls	r3, r3, #24
 800958e:	431a      	orrs	r2, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009594:	071b      	lsls	r3, r3, #28
 8009596:	491b      	ldr	r1, [pc, #108]	; (8009604 <HAL_RCC_OscConfig+0x4ac>)
 8009598:	4313      	orrs	r3, r2
 800959a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800959c:	4b1b      	ldr	r3, [pc, #108]	; (800960c <HAL_RCC_OscConfig+0x4b4>)
 800959e:	2201      	movs	r2, #1
 80095a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095a2:	f7fe fb27 	bl	8007bf4 <HAL_GetTick>
 80095a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80095a8:	e008      	b.n	80095bc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095aa:	f7fe fb23 	bl	8007bf4 <HAL_GetTick>
 80095ae:	4602      	mov	r2, r0
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	1ad3      	subs	r3, r2, r3
 80095b4:	2b02      	cmp	r3, #2
 80095b6:	d901      	bls.n	80095bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80095b8:	2303      	movs	r3, #3
 80095ba:	e064      	b.n	8009686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80095bc:	4b11      	ldr	r3, [pc, #68]	; (8009604 <HAL_RCC_OscConfig+0x4ac>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d0f0      	beq.n	80095aa <HAL_RCC_OscConfig+0x452>
 80095c8:	e05c      	b.n	8009684 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095ca:	4b10      	ldr	r3, [pc, #64]	; (800960c <HAL_RCC_OscConfig+0x4b4>)
 80095cc:	2200      	movs	r2, #0
 80095ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095d0:	f7fe fb10 	bl	8007bf4 <HAL_GetTick>
 80095d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095d6:	e008      	b.n	80095ea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095d8:	f7fe fb0c 	bl	8007bf4 <HAL_GetTick>
 80095dc:	4602      	mov	r2, r0
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	2b02      	cmp	r3, #2
 80095e4:	d901      	bls.n	80095ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80095e6:	2303      	movs	r3, #3
 80095e8:	e04d      	b.n	8009686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095ea:	4b06      	ldr	r3, [pc, #24]	; (8009604 <HAL_RCC_OscConfig+0x4ac>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d1f0      	bne.n	80095d8 <HAL_RCC_OscConfig+0x480>
 80095f6:	e045      	b.n	8009684 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	699b      	ldr	r3, [r3, #24]
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d107      	bne.n	8009610 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	e040      	b.n	8009686 <HAL_RCC_OscConfig+0x52e>
 8009604:	40023800 	.word	0x40023800
 8009608:	40007000 	.word	0x40007000
 800960c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009610:	4b1f      	ldr	r3, [pc, #124]	; (8009690 <HAL_RCC_OscConfig+0x538>)
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	699b      	ldr	r3, [r3, #24]
 800961a:	2b01      	cmp	r3, #1
 800961c:	d030      	beq.n	8009680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009628:	429a      	cmp	r2, r3
 800962a:	d129      	bne.n	8009680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009636:	429a      	cmp	r2, r3
 8009638:	d122      	bne.n	8009680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800963a:	68fa      	ldr	r2, [r7, #12]
 800963c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009640:	4013      	ands	r3, r2
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009646:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009648:	4293      	cmp	r3, r2
 800964a:	d119      	bne.n	8009680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009656:	085b      	lsrs	r3, r3, #1
 8009658:	3b01      	subs	r3, #1
 800965a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800965c:	429a      	cmp	r2, r3
 800965e:	d10f      	bne.n	8009680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800966a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800966c:	429a      	cmp	r2, r3
 800966e:	d107      	bne.n	8009680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800967a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800967c:	429a      	cmp	r2, r3
 800967e:	d001      	beq.n	8009684 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8009680:	2301      	movs	r3, #1
 8009682:	e000      	b.n	8009686 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3718      	adds	r7, #24
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	40023800 	.word	0x40023800

08009694 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d101      	bne.n	80096a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e07b      	b.n	800979e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d108      	bne.n	80096c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096b6:	d009      	beq.n	80096cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	61da      	str	r2, [r3, #28]
 80096be:	e005      	b.n	80096cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2200      	movs	r2, #0
 80096ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80096d8:	b2db      	uxtb	r3, r3
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d106      	bne.n	80096ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2200      	movs	r2, #0
 80096e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f7fd ff88 	bl	80075fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2202      	movs	r2, #2
 80096f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009702:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009714:	431a      	orrs	r2, r3
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	68db      	ldr	r3, [r3, #12]
 800971a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800971e:	431a      	orrs	r2, r3
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	691b      	ldr	r3, [r3, #16]
 8009724:	f003 0302 	and.w	r3, r3, #2
 8009728:	431a      	orrs	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	695b      	ldr	r3, [r3, #20]
 800972e:	f003 0301 	and.w	r3, r3, #1
 8009732:	431a      	orrs	r2, r3
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	699b      	ldr	r3, [r3, #24]
 8009738:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800973c:	431a      	orrs	r2, r3
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	69db      	ldr	r3, [r3, #28]
 8009742:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009746:	431a      	orrs	r2, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6a1b      	ldr	r3, [r3, #32]
 800974c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009750:	ea42 0103 	orr.w	r1, r2, r3
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009758:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	430a      	orrs	r2, r1
 8009762:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	699b      	ldr	r3, [r3, #24]
 8009768:	0c1b      	lsrs	r3, r3, #16
 800976a:	f003 0104 	and.w	r1, r3, #4
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009772:	f003 0210 	and.w	r2, r3, #16
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	430a      	orrs	r2, r1
 800977c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	69da      	ldr	r2, [r3, #28]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800978c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2200      	movs	r2, #0
 8009792:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2201      	movs	r2, #1
 8009798:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800979c:	2300      	movs	r3, #0
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3708      	adds	r7, #8
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b088      	sub	sp, #32
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	60f8      	str	r0, [r7, #12]
 80097ae:	60b9      	str	r1, [r7, #8]
 80097b0:	603b      	str	r3, [r7, #0]
 80097b2:	4613      	mov	r3, r2
 80097b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80097b6:	2300      	movs	r3, #0
 80097b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d101      	bne.n	80097c8 <HAL_SPI_Transmit+0x22>
 80097c4:	2302      	movs	r3, #2
 80097c6:	e12d      	b.n	8009a24 <HAL_SPI_Transmit+0x27e>
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80097d0:	f7fe fa10 	bl	8007bf4 <HAL_GetTick>
 80097d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80097d6:	88fb      	ldrh	r3, [r7, #6]
 80097d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d002      	beq.n	80097ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80097e6:	2302      	movs	r3, #2
 80097e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80097ea:	e116      	b.n	8009a1a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d002      	beq.n	80097f8 <HAL_SPI_Transmit+0x52>
 80097f2:	88fb      	ldrh	r3, [r7, #6]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d102      	bne.n	80097fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80097fc:	e10d      	b.n	8009a1a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2203      	movs	r2, #3
 8009802:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2200      	movs	r2, #0
 800980a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	68ba      	ldr	r2, [r7, #8]
 8009810:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	88fa      	ldrh	r2, [r7, #6]
 8009816:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	88fa      	ldrh	r2, [r7, #6]
 800981c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2200      	movs	r2, #0
 8009822:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2200      	movs	r2, #0
 8009828:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2200      	movs	r2, #0
 800982e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2200      	movs	r2, #0
 8009834:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2200      	movs	r2, #0
 800983a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009844:	d10f      	bne.n	8009866 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009854:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009864:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009870:	2b40      	cmp	r3, #64	; 0x40
 8009872:	d007      	beq.n	8009884 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009882:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	68db      	ldr	r3, [r3, #12]
 8009888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800988c:	d14f      	bne.n	800992e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d002      	beq.n	800989c <HAL_SPI_Transmit+0xf6>
 8009896:	8afb      	ldrh	r3, [r7, #22]
 8009898:	2b01      	cmp	r3, #1
 800989a:	d142      	bne.n	8009922 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098a0:	881a      	ldrh	r2, [r3, #0]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ac:	1c9a      	adds	r2, r3, #2
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	3b01      	subs	r3, #1
 80098ba:	b29a      	uxth	r2, r3
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80098c0:	e02f      	b.n	8009922 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	f003 0302 	and.w	r3, r3, #2
 80098cc:	2b02      	cmp	r3, #2
 80098ce:	d112      	bne.n	80098f6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d4:	881a      	ldrh	r2, [r3, #0]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e0:	1c9a      	adds	r2, r3, #2
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	3b01      	subs	r3, #1
 80098ee:	b29a      	uxth	r2, r3
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80098f4:	e015      	b.n	8009922 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80098f6:	f7fe f97d 	bl	8007bf4 <HAL_GetTick>
 80098fa:	4602      	mov	r2, r0
 80098fc:	69bb      	ldr	r3, [r7, #24]
 80098fe:	1ad3      	subs	r3, r2, r3
 8009900:	683a      	ldr	r2, [r7, #0]
 8009902:	429a      	cmp	r2, r3
 8009904:	d803      	bhi.n	800990e <HAL_SPI_Transmit+0x168>
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800990c:	d102      	bne.n	8009914 <HAL_SPI_Transmit+0x16e>
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d106      	bne.n	8009922 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8009914:	2303      	movs	r3, #3
 8009916:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2201      	movs	r2, #1
 800991c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8009920:	e07b      	b.n	8009a1a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009926:	b29b      	uxth	r3, r3
 8009928:	2b00      	cmp	r3, #0
 800992a:	d1ca      	bne.n	80098c2 <HAL_SPI_Transmit+0x11c>
 800992c:	e050      	b.n	80099d0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d002      	beq.n	800993c <HAL_SPI_Transmit+0x196>
 8009936:	8afb      	ldrh	r3, [r7, #22]
 8009938:	2b01      	cmp	r3, #1
 800993a:	d144      	bne.n	80099c6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	330c      	adds	r3, #12
 8009946:	7812      	ldrb	r2, [r2, #0]
 8009948:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800994e:	1c5a      	adds	r2, r3, #1
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009958:	b29b      	uxth	r3, r3
 800995a:	3b01      	subs	r3, #1
 800995c:	b29a      	uxth	r2, r3
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009962:	e030      	b.n	80099c6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	f003 0302 	and.w	r3, r3, #2
 800996e:	2b02      	cmp	r3, #2
 8009970:	d113      	bne.n	800999a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	330c      	adds	r3, #12
 800997c:	7812      	ldrb	r2, [r2, #0]
 800997e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009984:	1c5a      	adds	r2, r3, #1
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800998e:	b29b      	uxth	r3, r3
 8009990:	3b01      	subs	r3, #1
 8009992:	b29a      	uxth	r2, r3
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	86da      	strh	r2, [r3, #54]	; 0x36
 8009998:	e015      	b.n	80099c6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800999a:	f7fe f92b 	bl	8007bf4 <HAL_GetTick>
 800999e:	4602      	mov	r2, r0
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	1ad3      	subs	r3, r2, r3
 80099a4:	683a      	ldr	r2, [r7, #0]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d803      	bhi.n	80099b2 <HAL_SPI_Transmit+0x20c>
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099b0:	d102      	bne.n	80099b8 <HAL_SPI_Transmit+0x212>
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d106      	bne.n	80099c6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80099b8:	2303      	movs	r3, #3
 80099ba:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80099c4:	e029      	b.n	8009a1a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d1c9      	bne.n	8009964 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80099d0:	69ba      	ldr	r2, [r7, #24]
 80099d2:	6839      	ldr	r1, [r7, #0]
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f000 fbdf 	bl	800a198 <SPI_EndRxTxTransaction>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d002      	beq.n	80099e6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2220      	movs	r2, #32
 80099e4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	689b      	ldr	r3, [r3, #8]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d10a      	bne.n	8009a04 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80099ee:	2300      	movs	r3, #0
 80099f0:	613b      	str	r3, [r7, #16]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	613b      	str	r3, [r7, #16]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	689b      	ldr	r3, [r3, #8]
 8009a00:	613b      	str	r3, [r7, #16]
 8009a02:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d002      	beq.n	8009a12 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	77fb      	strb	r3, [r7, #31]
 8009a10:	e003      	b.n	8009a1a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2201      	movs	r2, #1
 8009a16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009a22:	7ffb      	ldrb	r3, [r7, #31]
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3720      	adds	r7, #32
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b088      	sub	sp, #32
 8009a30:	af02      	add	r7, sp, #8
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	603b      	str	r3, [r7, #0]
 8009a38:	4613      	mov	r3, r2
 8009a3a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d002      	beq.n	8009a52 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8009a4c:	2302      	movs	r3, #2
 8009a4e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009a50:	e0fb      	b.n	8009c4a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a5a:	d112      	bne.n	8009a82 <HAL_SPI_Receive+0x56>
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d10e      	bne.n	8009a82 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2204      	movs	r2, #4
 8009a68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009a6c:	88fa      	ldrh	r2, [r7, #6]
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	9300      	str	r3, [sp, #0]
 8009a72:	4613      	mov	r3, r2
 8009a74:	68ba      	ldr	r2, [r7, #8]
 8009a76:	68b9      	ldr	r1, [r7, #8]
 8009a78:	68f8      	ldr	r0, [r7, #12]
 8009a7a:	f000 f8ef 	bl	8009c5c <HAL_SPI_TransmitReceive>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	e0e8      	b.n	8009c54 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d101      	bne.n	8009a90 <HAL_SPI_Receive+0x64>
 8009a8c:	2302      	movs	r3, #2
 8009a8e:	e0e1      	b.n	8009c54 <HAL_SPI_Receive+0x228>
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2201      	movs	r2, #1
 8009a94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009a98:	f7fe f8ac 	bl	8007bf4 <HAL_GetTick>
 8009a9c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d002      	beq.n	8009aaa <HAL_SPI_Receive+0x7e>
 8009aa4:	88fb      	ldrh	r3, [r7, #6]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d102      	bne.n	8009ab0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009aae:	e0cc      	b.n	8009c4a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2204      	movs	r2, #4
 8009ab4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2200      	movs	r2, #0
 8009abc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	68ba      	ldr	r2, [r7, #8]
 8009ac2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	88fa      	ldrh	r2, [r7, #6]
 8009ac8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	88fa      	ldrh	r2, [r7, #6]
 8009ace:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2200      	movs	r2, #0
 8009aec:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009af6:	d10f      	bne.n	8009b18 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b06:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009b16:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b22:	2b40      	cmp	r3, #64	; 0x40
 8009b24:	d007      	beq.n	8009b36 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	681a      	ldr	r2, [r3, #0]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b34:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	68db      	ldr	r3, [r3, #12]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d16a      	bne.n	8009c14 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009b3e:	e032      	b.n	8009ba6 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	f003 0301 	and.w	r3, r3, #1
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d115      	bne.n	8009b7a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f103 020c 	add.w	r2, r3, #12
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b5a:	7812      	ldrb	r2, [r2, #0]
 8009b5c:	b2d2      	uxtb	r2, r2
 8009b5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b64:	1c5a      	adds	r2, r3, #1
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	3b01      	subs	r3, #1
 8009b72:	b29a      	uxth	r2, r3
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009b78:	e015      	b.n	8009ba6 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b7a:	f7fe f83b 	bl	8007bf4 <HAL_GetTick>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	1ad3      	subs	r3, r2, r3
 8009b84:	683a      	ldr	r2, [r7, #0]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d803      	bhi.n	8009b92 <HAL_SPI_Receive+0x166>
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b90:	d102      	bne.n	8009b98 <HAL_SPI_Receive+0x16c>
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d106      	bne.n	8009ba6 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8009b98:	2303      	movs	r3, #3
 8009b9a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8009ba4:	e051      	b.n	8009c4a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d1c7      	bne.n	8009b40 <HAL_SPI_Receive+0x114>
 8009bb0:	e035      	b.n	8009c1e <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	f003 0301 	and.w	r3, r3, #1
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d113      	bne.n	8009be8 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	68da      	ldr	r2, [r3, #12]
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bca:	b292      	uxth	r2, r2
 8009bcc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd2:	1c9a      	adds	r2, r3, #2
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	3b01      	subs	r3, #1
 8009be0:	b29a      	uxth	r2, r3
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009be6:	e015      	b.n	8009c14 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009be8:	f7fe f804 	bl	8007bf4 <HAL_GetTick>
 8009bec:	4602      	mov	r2, r0
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	1ad3      	subs	r3, r2, r3
 8009bf2:	683a      	ldr	r2, [r7, #0]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d803      	bhi.n	8009c00 <HAL_SPI_Receive+0x1d4>
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bfe:	d102      	bne.n	8009c06 <HAL_SPI_Receive+0x1da>
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d106      	bne.n	8009c14 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8009c06:	2303      	movs	r3, #3
 8009c08:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8009c12:	e01a      	b.n	8009c4a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d1c9      	bne.n	8009bb2 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009c1e:	693a      	ldr	r2, [r7, #16]
 8009c20:	6839      	ldr	r1, [r7, #0]
 8009c22:	68f8      	ldr	r0, [r7, #12]
 8009c24:	f000 fa52 	bl	800a0cc <SPI_EndRxTransaction>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d002      	beq.n	8009c34 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2220      	movs	r2, #32
 8009c32:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d002      	beq.n	8009c42 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	75fb      	strb	r3, [r7, #23]
 8009c40:	e003      	b.n	8009c4a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2201      	movs	r2, #1
 8009c46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3718      	adds	r7, #24
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b08c      	sub	sp, #48	; 0x30
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	607a      	str	r2, [r7, #4]
 8009c68:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d101      	bne.n	8009c82 <HAL_SPI_TransmitReceive+0x26>
 8009c7e:	2302      	movs	r3, #2
 8009c80:	e198      	b.n	8009fb4 <HAL_SPI_TransmitReceive+0x358>
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2201      	movs	r2, #1
 8009c86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c8a:	f7fd ffb3 	bl	8007bf4 <HAL_GetTick>
 8009c8e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009ca0:	887b      	ldrh	r3, [r7, #2]
 8009ca2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009ca4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d00f      	beq.n	8009ccc <HAL_SPI_TransmitReceive+0x70>
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009cb2:	d107      	bne.n	8009cc4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d103      	bne.n	8009cc4 <HAL_SPI_TransmitReceive+0x68>
 8009cbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009cc0:	2b04      	cmp	r3, #4
 8009cc2:	d003      	beq.n	8009ccc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009cc4:	2302      	movs	r3, #2
 8009cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009cca:	e16d      	b.n	8009fa8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d005      	beq.n	8009cde <HAL_SPI_TransmitReceive+0x82>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d002      	beq.n	8009cde <HAL_SPI_TransmitReceive+0x82>
 8009cd8:	887b      	ldrh	r3, [r7, #2]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d103      	bne.n	8009ce6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009ce4:	e160      	b.n	8009fa8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009cec:	b2db      	uxtb	r3, r3
 8009cee:	2b04      	cmp	r3, #4
 8009cf0:	d003      	beq.n	8009cfa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2205      	movs	r2, #5
 8009cf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	887a      	ldrh	r2, [r7, #2]
 8009d0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	887a      	ldrh	r2, [r7, #2]
 8009d10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	68ba      	ldr	r2, [r7, #8]
 8009d16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	887a      	ldrh	r2, [r7, #2]
 8009d1c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	887a      	ldrh	r2, [r7, #2]
 8009d22:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2200      	movs	r2, #0
 8009d28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d3a:	2b40      	cmp	r3, #64	; 0x40
 8009d3c:	d007      	beq.n	8009d4e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d56:	d17c      	bne.n	8009e52 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d002      	beq.n	8009d66 <HAL_SPI_TransmitReceive+0x10a>
 8009d60:	8b7b      	ldrh	r3, [r7, #26]
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d16a      	bne.n	8009e3c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d6a:	881a      	ldrh	r2, [r3, #0]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d76:	1c9a      	adds	r2, r3, #2
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	3b01      	subs	r3, #1
 8009d84:	b29a      	uxth	r2, r3
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d8a:	e057      	b.n	8009e3c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	f003 0302 	and.w	r3, r3, #2
 8009d96:	2b02      	cmp	r3, #2
 8009d98:	d11b      	bne.n	8009dd2 <HAL_SPI_TransmitReceive+0x176>
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d016      	beq.n	8009dd2 <HAL_SPI_TransmitReceive+0x176>
 8009da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d113      	bne.n	8009dd2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dae:	881a      	ldrh	r2, [r3, #0]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dba:	1c9a      	adds	r2, r3, #2
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	3b01      	subs	r3, #1
 8009dc8:	b29a      	uxth	r2, r3
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	f003 0301 	and.w	r3, r3, #1
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d119      	bne.n	8009e14 <HAL_SPI_TransmitReceive+0x1b8>
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d014      	beq.n	8009e14 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	68da      	ldr	r2, [r3, #12]
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df4:	b292      	uxth	r2, r2
 8009df6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dfc:	1c9a      	adds	r2, r3, #2
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	b29a      	uxth	r2, r3
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009e10:	2301      	movs	r3, #1
 8009e12:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009e14:	f7fd feee 	bl	8007bf4 <HAL_GetTick>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1c:	1ad3      	subs	r3, r2, r3
 8009e1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d80b      	bhi.n	8009e3c <HAL_SPI_TransmitReceive+0x1e0>
 8009e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e2a:	d007      	beq.n	8009e3c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8009e2c:	2303      	movs	r3, #3
 8009e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2201      	movs	r2, #1
 8009e36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8009e3a:	e0b5      	b.n	8009fa8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d1a2      	bne.n	8009d8c <HAL_SPI_TransmitReceive+0x130>
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d19d      	bne.n	8009d8c <HAL_SPI_TransmitReceive+0x130>
 8009e50:	e080      	b.n	8009f54 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d002      	beq.n	8009e60 <HAL_SPI_TransmitReceive+0x204>
 8009e5a:	8b7b      	ldrh	r3, [r7, #26]
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d16f      	bne.n	8009f40 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	330c      	adds	r3, #12
 8009e6a:	7812      	ldrb	r2, [r2, #0]
 8009e6c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e72:	1c5a      	adds	r2, r3, #1
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	3b01      	subs	r3, #1
 8009e80:	b29a      	uxth	r2, r3
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e86:	e05b      	b.n	8009f40 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	f003 0302 	and.w	r3, r3, #2
 8009e92:	2b02      	cmp	r3, #2
 8009e94:	d11c      	bne.n	8009ed0 <HAL_SPI_TransmitReceive+0x274>
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d017      	beq.n	8009ed0 <HAL_SPI_TransmitReceive+0x274>
 8009ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d114      	bne.n	8009ed0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	330c      	adds	r3, #12
 8009eb0:	7812      	ldrb	r2, [r2, #0]
 8009eb2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eb8:	1c5a      	adds	r2, r3, #1
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	3b01      	subs	r3, #1
 8009ec6:	b29a      	uxth	r2, r3
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	f003 0301 	and.w	r3, r3, #1
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d119      	bne.n	8009f12 <HAL_SPI_TransmitReceive+0x2b6>
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ee2:	b29b      	uxth	r3, r3
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d014      	beq.n	8009f12 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	68da      	ldr	r2, [r3, #12]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef2:	b2d2      	uxtb	r2, r2
 8009ef4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009efa:	1c5a      	adds	r2, r3, #1
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	3b01      	subs	r3, #1
 8009f08:	b29a      	uxth	r2, r3
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009f12:	f7fd fe6f 	bl	8007bf4 <HAL_GetTick>
 8009f16:	4602      	mov	r2, r0
 8009f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1a:	1ad3      	subs	r3, r2, r3
 8009f1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d803      	bhi.n	8009f2a <HAL_SPI_TransmitReceive+0x2ce>
 8009f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f28:	d102      	bne.n	8009f30 <HAL_SPI_TransmitReceive+0x2d4>
 8009f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d107      	bne.n	8009f40 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8009f30:	2303      	movs	r3, #3
 8009f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8009f3e:	e033      	b.n	8009fa8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d19e      	bne.n	8009e88 <HAL_SPI_TransmitReceive+0x22c>
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d199      	bne.n	8009e88 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f58:	68f8      	ldr	r0, [r7, #12]
 8009f5a:	f000 f91d 	bl	800a198 <SPI_EndRxTxTransaction>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d006      	beq.n	8009f72 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8009f64:	2301      	movs	r3, #1
 8009f66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2220      	movs	r2, #32
 8009f6e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009f70:	e01a      	b.n	8009fa8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d10a      	bne.n	8009f90 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	617b      	str	r3, [r7, #20]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	68db      	ldr	r3, [r3, #12]
 8009f84:	617b      	str	r3, [r7, #20]
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	617b      	str	r3, [r7, #20]
 8009f8e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d003      	beq.n	8009fa0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f9e:	e003      	b.n	8009fa8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2200      	movs	r2, #0
 8009fac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009fb0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3730      	adds	r7, #48	; 0x30
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b088      	sub	sp, #32
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	60b9      	str	r1, [r7, #8]
 8009fc6:	603b      	str	r3, [r7, #0]
 8009fc8:	4613      	mov	r3, r2
 8009fca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009fcc:	f7fd fe12 	bl	8007bf4 <HAL_GetTick>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd4:	1a9b      	subs	r3, r3, r2
 8009fd6:	683a      	ldr	r2, [r7, #0]
 8009fd8:	4413      	add	r3, r2
 8009fda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009fdc:	f7fd fe0a 	bl	8007bf4 <HAL_GetTick>
 8009fe0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009fe2:	4b39      	ldr	r3, [pc, #228]	; (800a0c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	015b      	lsls	r3, r3, #5
 8009fe8:	0d1b      	lsrs	r3, r3, #20
 8009fea:	69fa      	ldr	r2, [r7, #28]
 8009fec:	fb02 f303 	mul.w	r3, r2, r3
 8009ff0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009ff2:	e054      	b.n	800a09e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ffa:	d050      	beq.n	800a09e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009ffc:	f7fd fdfa 	bl	8007bf4 <HAL_GetTick>
 800a000:	4602      	mov	r2, r0
 800a002:	69bb      	ldr	r3, [r7, #24]
 800a004:	1ad3      	subs	r3, r2, r3
 800a006:	69fa      	ldr	r2, [r7, #28]
 800a008:	429a      	cmp	r2, r3
 800a00a:	d902      	bls.n	800a012 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a00c:	69fb      	ldr	r3, [r7, #28]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d13d      	bne.n	800a08e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	685a      	ldr	r2, [r3, #4]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a020:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a02a:	d111      	bne.n	800a050 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	689b      	ldr	r3, [r3, #8]
 800a030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a034:	d004      	beq.n	800a040 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	689b      	ldr	r3, [r3, #8]
 800a03a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a03e:	d107      	bne.n	800a050 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a04e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a058:	d10f      	bne.n	800a07a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	681a      	ldr	r2, [r3, #0]
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a068:	601a      	str	r2, [r3, #0]
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a078:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2201      	movs	r2, #1
 800a07e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2200      	movs	r2, #0
 800a086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a08a:	2303      	movs	r3, #3
 800a08c:	e017      	b.n	800a0be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d101      	bne.n	800a098 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a094:	2300      	movs	r3, #0
 800a096:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	3b01      	subs	r3, #1
 800a09c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	689a      	ldr	r2, [r3, #8]
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	4013      	ands	r3, r2
 800a0a8:	68ba      	ldr	r2, [r7, #8]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	bf0c      	ite	eq
 800a0ae:	2301      	moveq	r3, #1
 800a0b0:	2300      	movne	r3, #0
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	79fb      	ldrb	r3, [r7, #7]
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d19b      	bne.n	8009ff4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a0bc:	2300      	movs	r3, #0
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3720      	adds	r7, #32
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	200000b0 	.word	0x200000b0

0800a0cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b086      	sub	sp, #24
 800a0d0:	af02      	add	r7, sp, #8
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a0e0:	d111      	bne.n	800a106 <SPI_EndRxTransaction+0x3a>
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0ea:	d004      	beq.n	800a0f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0f4:	d107      	bne.n	800a106 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a104:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a10e:	d12a      	bne.n	800a166 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a118:	d012      	beq.n	800a140 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	9300      	str	r3, [sp, #0]
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	2200      	movs	r2, #0
 800a122:	2180      	movs	r1, #128	; 0x80
 800a124:	68f8      	ldr	r0, [r7, #12]
 800a126:	f7ff ff49 	bl	8009fbc <SPI_WaitFlagStateUntilTimeout>
 800a12a:	4603      	mov	r3, r0
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d02d      	beq.n	800a18c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a134:	f043 0220 	orr.w	r2, r3, #32
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a13c:	2303      	movs	r3, #3
 800a13e:	e026      	b.n	800a18e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	9300      	str	r3, [sp, #0]
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	2200      	movs	r2, #0
 800a148:	2101      	movs	r1, #1
 800a14a:	68f8      	ldr	r0, [r7, #12]
 800a14c:	f7ff ff36 	bl	8009fbc <SPI_WaitFlagStateUntilTimeout>
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d01a      	beq.n	800a18c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a15a:	f043 0220 	orr.w	r2, r3, #32
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a162:	2303      	movs	r3, #3
 800a164:	e013      	b.n	800a18e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	9300      	str	r3, [sp, #0]
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	2200      	movs	r2, #0
 800a16e:	2101      	movs	r1, #1
 800a170:	68f8      	ldr	r0, [r7, #12]
 800a172:	f7ff ff23 	bl	8009fbc <SPI_WaitFlagStateUntilTimeout>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d007      	beq.n	800a18c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a180:	f043 0220 	orr.w	r2, r3, #32
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a188:	2303      	movs	r3, #3
 800a18a:	e000      	b.n	800a18e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a18c:	2300      	movs	r3, #0
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3710      	adds	r7, #16
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
	...

0800a198 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b088      	sub	sp, #32
 800a19c:	af02      	add	r7, sp, #8
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a1a4:	4b1b      	ldr	r3, [pc, #108]	; (800a214 <SPI_EndRxTxTransaction+0x7c>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a1b      	ldr	r2, [pc, #108]	; (800a218 <SPI_EndRxTxTransaction+0x80>)
 800a1aa:	fba2 2303 	umull	r2, r3, r2, r3
 800a1ae:	0d5b      	lsrs	r3, r3, #21
 800a1b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a1b4:	fb02 f303 	mul.w	r3, r2, r3
 800a1b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1c2:	d112      	bne.n	800a1ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	9300      	str	r3, [sp, #0]
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	2180      	movs	r1, #128	; 0x80
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f7ff fef4 	bl	8009fbc <SPI_WaitFlagStateUntilTimeout>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d016      	beq.n	800a208 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1de:	f043 0220 	orr.w	r2, r3, #32
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a1e6:	2303      	movs	r3, #3
 800a1e8:	e00f      	b.n	800a20a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d00a      	beq.n	800a206 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	3b01      	subs	r3, #1
 800a1f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	689b      	ldr	r3, [r3, #8]
 800a1fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a200:	2b80      	cmp	r3, #128	; 0x80
 800a202:	d0f2      	beq.n	800a1ea <SPI_EndRxTxTransaction+0x52>
 800a204:	e000      	b.n	800a208 <SPI_EndRxTxTransaction+0x70>
        break;
 800a206:	bf00      	nop
  }

  return HAL_OK;
 800a208:	2300      	movs	r3, #0
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3718      	adds	r7, #24
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	200000b0 	.word	0x200000b0
 800a218:	165e9f81 	.word	0x165e9f81

0800a21c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d101      	bne.n	800a22e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a22a:	2301      	movs	r3, #1
 800a22c:	e041      	b.n	800a2b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a234:	b2db      	uxtb	r3, r3
 800a236:	2b00      	cmp	r3, #0
 800a238:	d106      	bne.n	800a248 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2200      	movs	r2, #0
 800a23e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f7fd fa42 	bl	80076cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2202      	movs	r2, #2
 800a24c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	3304      	adds	r3, #4
 800a258:	4619      	mov	r1, r3
 800a25a:	4610      	mov	r0, r2
 800a25c:	f000 fa96 	bl	800a78c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2201      	movs	r2, #1
 800a264:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2201      	movs	r2, #1
 800a26c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2201      	movs	r2, #1
 800a274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2201      	movs	r2, #1
 800a27c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2201      	movs	r2, #1
 800a284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2201      	movs	r2, #1
 800a28c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2201      	movs	r2, #1
 800a294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2201      	movs	r2, #1
 800a29c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a2b0:	2300      	movs	r3, #0
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3708      	adds	r7, #8
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
	...

0800a2bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d001      	beq.n	800a2d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	e04e      	b.n	800a372 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2202      	movs	r2, #2
 800a2d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	68da      	ldr	r2, [r3, #12]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f042 0201 	orr.w	r2, r2, #1
 800a2ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a23      	ldr	r2, [pc, #140]	; (800a380 <HAL_TIM_Base_Start_IT+0xc4>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d022      	beq.n	800a33c <HAL_TIM_Base_Start_IT+0x80>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2fe:	d01d      	beq.n	800a33c <HAL_TIM_Base_Start_IT+0x80>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a1f      	ldr	r2, [pc, #124]	; (800a384 <HAL_TIM_Base_Start_IT+0xc8>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d018      	beq.n	800a33c <HAL_TIM_Base_Start_IT+0x80>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4a1e      	ldr	r2, [pc, #120]	; (800a388 <HAL_TIM_Base_Start_IT+0xcc>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d013      	beq.n	800a33c <HAL_TIM_Base_Start_IT+0x80>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4a1c      	ldr	r2, [pc, #112]	; (800a38c <HAL_TIM_Base_Start_IT+0xd0>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d00e      	beq.n	800a33c <HAL_TIM_Base_Start_IT+0x80>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	4a1b      	ldr	r2, [pc, #108]	; (800a390 <HAL_TIM_Base_Start_IT+0xd4>)
 800a324:	4293      	cmp	r3, r2
 800a326:	d009      	beq.n	800a33c <HAL_TIM_Base_Start_IT+0x80>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4a19      	ldr	r2, [pc, #100]	; (800a394 <HAL_TIM_Base_Start_IT+0xd8>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d004      	beq.n	800a33c <HAL_TIM_Base_Start_IT+0x80>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4a18      	ldr	r2, [pc, #96]	; (800a398 <HAL_TIM_Base_Start_IT+0xdc>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d111      	bne.n	800a360 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	689b      	ldr	r3, [r3, #8]
 800a342:	f003 0307 	and.w	r3, r3, #7
 800a346:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2b06      	cmp	r3, #6
 800a34c:	d010      	beq.n	800a370 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f042 0201 	orr.w	r2, r2, #1
 800a35c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a35e:	e007      	b.n	800a370 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f042 0201 	orr.w	r2, r2, #1
 800a36e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a370:	2300      	movs	r3, #0
}
 800a372:	4618      	mov	r0, r3
 800a374:	3714      	adds	r7, #20
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr
 800a37e:	bf00      	nop
 800a380:	40010000 	.word	0x40010000
 800a384:	40000400 	.word	0x40000400
 800a388:	40000800 	.word	0x40000800
 800a38c:	40000c00 	.word	0x40000c00
 800a390:	40010400 	.word	0x40010400
 800a394:	40014000 	.word	0x40014000
 800a398:	40001800 	.word	0x40001800

0800a39c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	691b      	ldr	r3, [r3, #16]
 800a3aa:	f003 0302 	and.w	r3, r3, #2
 800a3ae:	2b02      	cmp	r3, #2
 800a3b0:	d122      	bne.n	800a3f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	f003 0302 	and.w	r3, r3, #2
 800a3bc:	2b02      	cmp	r3, #2
 800a3be:	d11b      	bne.n	800a3f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f06f 0202 	mvn.w	r2, #2
 800a3c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2201      	movs	r2, #1
 800a3ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	699b      	ldr	r3, [r3, #24]
 800a3d6:	f003 0303 	and.w	r3, r3, #3
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d003      	beq.n	800a3e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f000 f9b5 	bl	800a74e <HAL_TIM_IC_CaptureCallback>
 800a3e4:	e005      	b.n	800a3f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f000 f9a7 	bl	800a73a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 f9b8 	bl	800a762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	691b      	ldr	r3, [r3, #16]
 800a3fe:	f003 0304 	and.w	r3, r3, #4
 800a402:	2b04      	cmp	r3, #4
 800a404:	d122      	bne.n	800a44c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	68db      	ldr	r3, [r3, #12]
 800a40c:	f003 0304 	and.w	r3, r3, #4
 800a410:	2b04      	cmp	r3, #4
 800a412:	d11b      	bne.n	800a44c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f06f 0204 	mvn.w	r2, #4
 800a41c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2202      	movs	r2, #2
 800a422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	699b      	ldr	r3, [r3, #24]
 800a42a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d003      	beq.n	800a43a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 f98b 	bl	800a74e <HAL_TIM_IC_CaptureCallback>
 800a438:	e005      	b.n	800a446 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 f97d 	bl	800a73a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f000 f98e 	bl	800a762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2200      	movs	r2, #0
 800a44a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	691b      	ldr	r3, [r3, #16]
 800a452:	f003 0308 	and.w	r3, r3, #8
 800a456:	2b08      	cmp	r3, #8
 800a458:	d122      	bne.n	800a4a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	68db      	ldr	r3, [r3, #12]
 800a460:	f003 0308 	and.w	r3, r3, #8
 800a464:	2b08      	cmp	r3, #8
 800a466:	d11b      	bne.n	800a4a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f06f 0208 	mvn.w	r2, #8
 800a470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2204      	movs	r2, #4
 800a476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	69db      	ldr	r3, [r3, #28]
 800a47e:	f003 0303 	and.w	r3, r3, #3
 800a482:	2b00      	cmp	r3, #0
 800a484:	d003      	beq.n	800a48e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f000 f961 	bl	800a74e <HAL_TIM_IC_CaptureCallback>
 800a48c:	e005      	b.n	800a49a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 f953 	bl	800a73a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 f964 	bl	800a762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2200      	movs	r2, #0
 800a49e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	691b      	ldr	r3, [r3, #16]
 800a4a6:	f003 0310 	and.w	r3, r3, #16
 800a4aa:	2b10      	cmp	r3, #16
 800a4ac:	d122      	bne.n	800a4f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	68db      	ldr	r3, [r3, #12]
 800a4b4:	f003 0310 	and.w	r3, r3, #16
 800a4b8:	2b10      	cmp	r3, #16
 800a4ba:	d11b      	bne.n	800a4f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f06f 0210 	mvn.w	r2, #16
 800a4c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2208      	movs	r2, #8
 800a4ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	69db      	ldr	r3, [r3, #28]
 800a4d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d003      	beq.n	800a4e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 f937 	bl	800a74e <HAL_TIM_IC_CaptureCallback>
 800a4e0:	e005      	b.n	800a4ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 f929 	bl	800a73a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f000 f93a 	bl	800a762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	f003 0301 	and.w	r3, r3, #1
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d10e      	bne.n	800a520 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	68db      	ldr	r3, [r3, #12]
 800a508:	f003 0301 	and.w	r3, r3, #1
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	d107      	bne.n	800a520 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f06f 0201 	mvn.w	r2, #1
 800a518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f7f9 ffb4 	bl	8004488 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	691b      	ldr	r3, [r3, #16]
 800a526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a52a:	2b80      	cmp	r3, #128	; 0x80
 800a52c:	d10e      	bne.n	800a54c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a538:	2b80      	cmp	r3, #128	; 0x80
 800a53a:	d107      	bne.n	800a54c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 fae0 	bl	800ab0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	691b      	ldr	r3, [r3, #16]
 800a552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a556:	2b40      	cmp	r3, #64	; 0x40
 800a558:	d10e      	bne.n	800a578 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a564:	2b40      	cmp	r3, #64	; 0x40
 800a566:	d107      	bne.n	800a578 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 f8ff 	bl	800a776 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	691b      	ldr	r3, [r3, #16]
 800a57e:	f003 0320 	and.w	r3, r3, #32
 800a582:	2b20      	cmp	r3, #32
 800a584:	d10e      	bne.n	800a5a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	68db      	ldr	r3, [r3, #12]
 800a58c:	f003 0320 	and.w	r3, r3, #32
 800a590:	2b20      	cmp	r3, #32
 800a592:	d107      	bne.n	800a5a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f06f 0220 	mvn.w	r2, #32
 800a59c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f000 faaa 	bl	800aaf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a5a4:	bf00      	nop
 800a5a6:	3708      	adds	r7, #8
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d101      	bne.n	800a5c8 <HAL_TIM_ConfigClockSource+0x1c>
 800a5c4:	2302      	movs	r3, #2
 800a5c6:	e0b4      	b.n	800a732 <HAL_TIM_ConfigClockSource+0x186>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2202      	movs	r2, #2
 800a5d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	689b      	ldr	r3, [r3, #8]
 800a5de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a5e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a5ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	68ba      	ldr	r2, [r7, #8]
 800a5f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a600:	d03e      	beq.n	800a680 <HAL_TIM_ConfigClockSource+0xd4>
 800a602:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a606:	f200 8087 	bhi.w	800a718 <HAL_TIM_ConfigClockSource+0x16c>
 800a60a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a60e:	f000 8086 	beq.w	800a71e <HAL_TIM_ConfigClockSource+0x172>
 800a612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a616:	d87f      	bhi.n	800a718 <HAL_TIM_ConfigClockSource+0x16c>
 800a618:	2b70      	cmp	r3, #112	; 0x70
 800a61a:	d01a      	beq.n	800a652 <HAL_TIM_ConfigClockSource+0xa6>
 800a61c:	2b70      	cmp	r3, #112	; 0x70
 800a61e:	d87b      	bhi.n	800a718 <HAL_TIM_ConfigClockSource+0x16c>
 800a620:	2b60      	cmp	r3, #96	; 0x60
 800a622:	d050      	beq.n	800a6c6 <HAL_TIM_ConfigClockSource+0x11a>
 800a624:	2b60      	cmp	r3, #96	; 0x60
 800a626:	d877      	bhi.n	800a718 <HAL_TIM_ConfigClockSource+0x16c>
 800a628:	2b50      	cmp	r3, #80	; 0x50
 800a62a:	d03c      	beq.n	800a6a6 <HAL_TIM_ConfigClockSource+0xfa>
 800a62c:	2b50      	cmp	r3, #80	; 0x50
 800a62e:	d873      	bhi.n	800a718 <HAL_TIM_ConfigClockSource+0x16c>
 800a630:	2b40      	cmp	r3, #64	; 0x40
 800a632:	d058      	beq.n	800a6e6 <HAL_TIM_ConfigClockSource+0x13a>
 800a634:	2b40      	cmp	r3, #64	; 0x40
 800a636:	d86f      	bhi.n	800a718 <HAL_TIM_ConfigClockSource+0x16c>
 800a638:	2b30      	cmp	r3, #48	; 0x30
 800a63a:	d064      	beq.n	800a706 <HAL_TIM_ConfigClockSource+0x15a>
 800a63c:	2b30      	cmp	r3, #48	; 0x30
 800a63e:	d86b      	bhi.n	800a718 <HAL_TIM_ConfigClockSource+0x16c>
 800a640:	2b20      	cmp	r3, #32
 800a642:	d060      	beq.n	800a706 <HAL_TIM_ConfigClockSource+0x15a>
 800a644:	2b20      	cmp	r3, #32
 800a646:	d867      	bhi.n	800a718 <HAL_TIM_ConfigClockSource+0x16c>
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d05c      	beq.n	800a706 <HAL_TIM_ConfigClockSource+0x15a>
 800a64c:	2b10      	cmp	r3, #16
 800a64e:	d05a      	beq.n	800a706 <HAL_TIM_ConfigClockSource+0x15a>
 800a650:	e062      	b.n	800a718 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a662:	f000 f9ad 	bl	800a9c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	689b      	ldr	r3, [r3, #8]
 800a66c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a674:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	68ba      	ldr	r2, [r7, #8]
 800a67c:	609a      	str	r2, [r3, #8]
      break;
 800a67e:	e04f      	b.n	800a720 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a690:	f000 f996 	bl	800a9c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	689a      	ldr	r2, [r3, #8]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a6a2:	609a      	str	r2, [r3, #8]
      break;
 800a6a4:	e03c      	b.n	800a720 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	f000 f90a 	bl	800a8cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	2150      	movs	r1, #80	; 0x50
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f000 f963 	bl	800a98a <TIM_ITRx_SetConfig>
      break;
 800a6c4:	e02c      	b.n	800a720 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	f000 f929 	bl	800a92a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	2160      	movs	r1, #96	; 0x60
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f000 f953 	bl	800a98a <TIM_ITRx_SetConfig>
      break;
 800a6e4:	e01c      	b.n	800a720 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	f000 f8ea 	bl	800a8cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	2140      	movs	r1, #64	; 0x40
 800a6fe:	4618      	mov	r0, r3
 800a700:	f000 f943 	bl	800a98a <TIM_ITRx_SetConfig>
      break;
 800a704:	e00c      	b.n	800a720 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681a      	ldr	r2, [r3, #0]
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4619      	mov	r1, r3
 800a710:	4610      	mov	r0, r2
 800a712:	f000 f93a 	bl	800a98a <TIM_ITRx_SetConfig>
      break;
 800a716:	e003      	b.n	800a720 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a718:	2301      	movs	r3, #1
 800a71a:	73fb      	strb	r3, [r7, #15]
      break;
 800a71c:	e000      	b.n	800a720 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a71e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2201      	movs	r2, #1
 800a724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2200      	movs	r2, #0
 800a72c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a730:	7bfb      	ldrb	r3, [r7, #15]
}
 800a732:	4618      	mov	r0, r3
 800a734:	3710      	adds	r7, #16
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a73a:	b480      	push	{r7}
 800a73c:	b083      	sub	sp, #12
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a742:	bf00      	nop
 800a744:	370c      	adds	r7, #12
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr

0800a74e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a74e:	b480      	push	{r7}
 800a750:	b083      	sub	sp, #12
 800a752:	af00      	add	r7, sp, #0
 800a754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a756:	bf00      	nop
 800a758:	370c      	adds	r7, #12
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr

0800a762 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a762:	b480      	push	{r7}
 800a764:	b083      	sub	sp, #12
 800a766:	af00      	add	r7, sp, #0
 800a768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a76a:	bf00      	nop
 800a76c:	370c      	adds	r7, #12
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr

0800a776 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a776:	b480      	push	{r7}
 800a778:	b083      	sub	sp, #12
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a77e:	bf00      	nop
 800a780:	370c      	adds	r7, #12
 800a782:	46bd      	mov	sp, r7
 800a784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a788:	4770      	bx	lr
	...

0800a78c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b085      	sub	sp, #20
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	4a40      	ldr	r2, [pc, #256]	; (800a8a0 <TIM_Base_SetConfig+0x114>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d013      	beq.n	800a7cc <TIM_Base_SetConfig+0x40>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7aa:	d00f      	beq.n	800a7cc <TIM_Base_SetConfig+0x40>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	4a3d      	ldr	r2, [pc, #244]	; (800a8a4 <TIM_Base_SetConfig+0x118>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d00b      	beq.n	800a7cc <TIM_Base_SetConfig+0x40>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	4a3c      	ldr	r2, [pc, #240]	; (800a8a8 <TIM_Base_SetConfig+0x11c>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d007      	beq.n	800a7cc <TIM_Base_SetConfig+0x40>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	4a3b      	ldr	r2, [pc, #236]	; (800a8ac <TIM_Base_SetConfig+0x120>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d003      	beq.n	800a7cc <TIM_Base_SetConfig+0x40>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	4a3a      	ldr	r2, [pc, #232]	; (800a8b0 <TIM_Base_SetConfig+0x124>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d108      	bne.n	800a7de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	68fa      	ldr	r2, [r7, #12]
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	4a2f      	ldr	r2, [pc, #188]	; (800a8a0 <TIM_Base_SetConfig+0x114>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d02b      	beq.n	800a83e <TIM_Base_SetConfig+0xb2>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7ec:	d027      	beq.n	800a83e <TIM_Base_SetConfig+0xb2>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	4a2c      	ldr	r2, [pc, #176]	; (800a8a4 <TIM_Base_SetConfig+0x118>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d023      	beq.n	800a83e <TIM_Base_SetConfig+0xb2>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	4a2b      	ldr	r2, [pc, #172]	; (800a8a8 <TIM_Base_SetConfig+0x11c>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d01f      	beq.n	800a83e <TIM_Base_SetConfig+0xb2>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	4a2a      	ldr	r2, [pc, #168]	; (800a8ac <TIM_Base_SetConfig+0x120>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d01b      	beq.n	800a83e <TIM_Base_SetConfig+0xb2>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	4a29      	ldr	r2, [pc, #164]	; (800a8b0 <TIM_Base_SetConfig+0x124>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d017      	beq.n	800a83e <TIM_Base_SetConfig+0xb2>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	4a28      	ldr	r2, [pc, #160]	; (800a8b4 <TIM_Base_SetConfig+0x128>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d013      	beq.n	800a83e <TIM_Base_SetConfig+0xb2>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	4a27      	ldr	r2, [pc, #156]	; (800a8b8 <TIM_Base_SetConfig+0x12c>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d00f      	beq.n	800a83e <TIM_Base_SetConfig+0xb2>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	4a26      	ldr	r2, [pc, #152]	; (800a8bc <TIM_Base_SetConfig+0x130>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d00b      	beq.n	800a83e <TIM_Base_SetConfig+0xb2>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	4a25      	ldr	r2, [pc, #148]	; (800a8c0 <TIM_Base_SetConfig+0x134>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d007      	beq.n	800a83e <TIM_Base_SetConfig+0xb2>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	4a24      	ldr	r2, [pc, #144]	; (800a8c4 <TIM_Base_SetConfig+0x138>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d003      	beq.n	800a83e <TIM_Base_SetConfig+0xb2>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	4a23      	ldr	r2, [pc, #140]	; (800a8c8 <TIM_Base_SetConfig+0x13c>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d108      	bne.n	800a850 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	68db      	ldr	r3, [r3, #12]
 800a84a:	68fa      	ldr	r2, [r7, #12]
 800a84c:	4313      	orrs	r3, r2
 800a84e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	695b      	ldr	r3, [r3, #20]
 800a85a:	4313      	orrs	r3, r2
 800a85c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	68fa      	ldr	r2, [r7, #12]
 800a862:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	689a      	ldr	r2, [r3, #8]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	4a0a      	ldr	r2, [pc, #40]	; (800a8a0 <TIM_Base_SetConfig+0x114>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d003      	beq.n	800a884 <TIM_Base_SetConfig+0xf8>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	4a0c      	ldr	r2, [pc, #48]	; (800a8b0 <TIM_Base_SetConfig+0x124>)
 800a880:	4293      	cmp	r3, r2
 800a882:	d103      	bne.n	800a88c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	691a      	ldr	r2, [r3, #16]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2201      	movs	r2, #1
 800a890:	615a      	str	r2, [r3, #20]
}
 800a892:	bf00      	nop
 800a894:	3714      	adds	r7, #20
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr
 800a89e:	bf00      	nop
 800a8a0:	40010000 	.word	0x40010000
 800a8a4:	40000400 	.word	0x40000400
 800a8a8:	40000800 	.word	0x40000800
 800a8ac:	40000c00 	.word	0x40000c00
 800a8b0:	40010400 	.word	0x40010400
 800a8b4:	40014000 	.word	0x40014000
 800a8b8:	40014400 	.word	0x40014400
 800a8bc:	40014800 	.word	0x40014800
 800a8c0:	40001800 	.word	0x40001800
 800a8c4:	40001c00 	.word	0x40001c00
 800a8c8:	40002000 	.word	0x40002000

0800a8cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b087      	sub	sp, #28
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	60f8      	str	r0, [r7, #12]
 800a8d4:	60b9      	str	r1, [r7, #8]
 800a8d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	6a1b      	ldr	r3, [r3, #32]
 800a8dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	6a1b      	ldr	r3, [r3, #32]
 800a8e2:	f023 0201 	bic.w	r2, r3, #1
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	699b      	ldr	r3, [r3, #24]
 800a8ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a8f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	011b      	lsls	r3, r3, #4
 800a8fc:	693a      	ldr	r2, [r7, #16]
 800a8fe:	4313      	orrs	r3, r2
 800a900:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	f023 030a 	bic.w	r3, r3, #10
 800a908:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a90a:	697a      	ldr	r2, [r7, #20]
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	4313      	orrs	r3, r2
 800a910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	693a      	ldr	r2, [r7, #16]
 800a916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	697a      	ldr	r2, [r7, #20]
 800a91c:	621a      	str	r2, [r3, #32]
}
 800a91e:	bf00      	nop
 800a920:	371c      	adds	r7, #28
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr

0800a92a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a92a:	b480      	push	{r7}
 800a92c:	b087      	sub	sp, #28
 800a92e:	af00      	add	r7, sp, #0
 800a930:	60f8      	str	r0, [r7, #12]
 800a932:	60b9      	str	r1, [r7, #8]
 800a934:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	6a1b      	ldr	r3, [r3, #32]
 800a93a:	f023 0210 	bic.w	r2, r3, #16
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	699b      	ldr	r3, [r3, #24]
 800a946:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	6a1b      	ldr	r3, [r3, #32]
 800a94c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a954:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	031b      	lsls	r3, r3, #12
 800a95a:	697a      	ldr	r2, [r7, #20]
 800a95c:	4313      	orrs	r3, r2
 800a95e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a966:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	011b      	lsls	r3, r3, #4
 800a96c:	693a      	ldr	r2, [r7, #16]
 800a96e:	4313      	orrs	r3, r2
 800a970:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	697a      	ldr	r2, [r7, #20]
 800a976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	693a      	ldr	r2, [r7, #16]
 800a97c:	621a      	str	r2, [r3, #32]
}
 800a97e:	bf00      	nop
 800a980:	371c      	adds	r7, #28
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr

0800a98a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a98a:	b480      	push	{r7}
 800a98c:	b085      	sub	sp, #20
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
 800a992:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	689b      	ldr	r3, [r3, #8]
 800a998:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a9a2:	683a      	ldr	r2, [r7, #0]
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	f043 0307 	orr.w	r3, r3, #7
 800a9ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	68fa      	ldr	r2, [r7, #12]
 800a9b2:	609a      	str	r2, [r3, #8]
}
 800a9b4:	bf00      	nop
 800a9b6:	3714      	adds	r7, #20
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b087      	sub	sp, #28
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	607a      	str	r2, [r7, #4]
 800a9cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	689b      	ldr	r3, [r3, #8]
 800a9d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a9da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	021a      	lsls	r2, r3, #8
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	431a      	orrs	r2, r3
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	697a      	ldr	r2, [r7, #20]
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	697a      	ldr	r2, [r7, #20]
 800a9f2:	609a      	str	r2, [r3, #8]
}
 800a9f4:	bf00      	nop
 800a9f6:	371c      	adds	r7, #28
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr

0800aa00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b085      	sub	sp, #20
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	d101      	bne.n	800aa18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aa14:	2302      	movs	r3, #2
 800aa16:	e05a      	b.n	800aace <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2202      	movs	r2, #2
 800aa24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	689b      	ldr	r3, [r3, #8]
 800aa36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	68fa      	ldr	r2, [r7, #12]
 800aa46:	4313      	orrs	r3, r2
 800aa48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	68fa      	ldr	r2, [r7, #12]
 800aa50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a21      	ldr	r2, [pc, #132]	; (800aadc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d022      	beq.n	800aaa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa64:	d01d      	beq.n	800aaa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a1d      	ldr	r2, [pc, #116]	; (800aae0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d018      	beq.n	800aaa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a1b      	ldr	r2, [pc, #108]	; (800aae4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d013      	beq.n	800aaa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	4a1a      	ldr	r2, [pc, #104]	; (800aae8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d00e      	beq.n	800aaa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4a18      	ldr	r2, [pc, #96]	; (800aaec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d009      	beq.n	800aaa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	4a17      	ldr	r2, [pc, #92]	; (800aaf0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d004      	beq.n	800aaa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4a15      	ldr	r2, [pc, #84]	; (800aaf4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d10c      	bne.n	800aabc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aaa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	68ba      	ldr	r2, [r7, #8]
 800aab0:	4313      	orrs	r3, r2
 800aab2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	68ba      	ldr	r2, [r7, #8]
 800aaba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2201      	movs	r2, #1
 800aac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2200      	movs	r2, #0
 800aac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aacc:	2300      	movs	r3, #0
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3714      	adds	r7, #20
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr
 800aada:	bf00      	nop
 800aadc:	40010000 	.word	0x40010000
 800aae0:	40000400 	.word	0x40000400
 800aae4:	40000800 	.word	0x40000800
 800aae8:	40000c00 	.word	0x40000c00
 800aaec:	40010400 	.word	0x40010400
 800aaf0:	40014000 	.word	0x40014000
 800aaf4:	40001800 	.word	0x40001800

0800aaf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ab00:	bf00      	nop
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ab14:	bf00      	nop
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b082      	sub	sp, #8
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d101      	bne.n	800ab32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	e042      	b.n	800abb8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d106      	bne.n	800ab4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2200      	movs	r2, #0
 800ab42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f7fc fde6 	bl	8007718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2224      	movs	r2, #36	; 0x24
 800ab50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	68da      	ldr	r2, [r3, #12]
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ab62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f000 ffd9 	bl	800bb1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	691a      	ldr	r2, [r3, #16]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ab78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	695a      	ldr	r2, [r3, #20]
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ab88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	68da      	ldr	r2, [r3, #12]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ab98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2220      	movs	r2, #32
 800aba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2220      	movs	r2, #32
 800abac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2200      	movs	r2, #0
 800abb4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800abb6:	2300      	movs	r3, #0
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3708      	adds	r7, #8
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b08c      	sub	sp, #48	; 0x30
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	60b9      	str	r1, [r7, #8]
 800abca:	4613      	mov	r3, r2
 800abcc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	2b20      	cmp	r3, #32
 800abd8:	d156      	bne.n	800ac88 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d002      	beq.n	800abe6 <HAL_UART_Transmit_DMA+0x26>
 800abe0:	88fb      	ldrh	r3, [r7, #6]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d101      	bne.n	800abea <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800abe6:	2301      	movs	r3, #1
 800abe8:	e04f      	b.n	800ac8a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800abea:	68ba      	ldr	r2, [r7, #8]
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	88fa      	ldrh	r2, [r7, #6]
 800abf4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	88fa      	ldrh	r2, [r7, #6]
 800abfa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2200      	movs	r2, #0
 800ac00:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2221      	movs	r2, #33	; 0x21
 800ac06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac0e:	4a21      	ldr	r2, [pc, #132]	; (800ac94 <HAL_UART_Transmit_DMA+0xd4>)
 800ac10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac16:	4a20      	ldr	r2, [pc, #128]	; (800ac98 <HAL_UART_Transmit_DMA+0xd8>)
 800ac18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac1e:	4a1f      	ldr	r2, [pc, #124]	; (800ac9c <HAL_UART_Transmit_DMA+0xdc>)
 800ac20:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac26:	2200      	movs	r2, #0
 800ac28:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800ac2a:	f107 0308 	add.w	r3, r7, #8
 800ac2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ac34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac36:	6819      	ldr	r1, [r3, #0]
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	3304      	adds	r3, #4
 800ac3e:	461a      	mov	r2, r3
 800ac40:	88fb      	ldrh	r3, [r7, #6]
 800ac42:	f7fd f9c7 	bl	8007fd4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ac4e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	3314      	adds	r3, #20
 800ac56:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac58:	69bb      	ldr	r3, [r7, #24]
 800ac5a:	e853 3f00 	ldrex	r3, [r3]
 800ac5e:	617b      	str	r3, [r7, #20]
   return(result);
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac66:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	3314      	adds	r3, #20
 800ac6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac70:	627a      	str	r2, [r7, #36]	; 0x24
 800ac72:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac74:	6a39      	ldr	r1, [r7, #32]
 800ac76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac78:	e841 2300 	strex	r3, r2, [r1]
 800ac7c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac7e:	69fb      	ldr	r3, [r7, #28]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d1e5      	bne.n	800ac50 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800ac84:	2300      	movs	r3, #0
 800ac86:	e000      	b.n	800ac8a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800ac88:	2302      	movs	r3, #2
  }
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3730      	adds	r7, #48	; 0x30
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	0800b3a9 	.word	0x0800b3a9
 800ac98:	0800b443 	.word	0x0800b443
 800ac9c:	0800b5c7 	.word	0x0800b5c7

0800aca0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b084      	sub	sp, #16
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	60b9      	str	r1, [r7, #8]
 800acaa:	4613      	mov	r3, r2
 800acac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	2b20      	cmp	r3, #32
 800acb8:	d112      	bne.n	800ace0 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d002      	beq.n	800acc6 <HAL_UART_Receive_DMA+0x26>
 800acc0:	88fb      	ldrh	r3, [r7, #6]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d101      	bne.n	800acca <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800acc6:	2301      	movs	r3, #1
 800acc8:	e00b      	b.n	800ace2 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2200      	movs	r2, #0
 800acce:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800acd0:	88fb      	ldrh	r3, [r7, #6]
 800acd2:	461a      	mov	r2, r3
 800acd4:	68b9      	ldr	r1, [r7, #8]
 800acd6:	68f8      	ldr	r0, [r7, #12]
 800acd8:	f000 fcc0 	bl	800b65c <UART_Start_Receive_DMA>
 800acdc:	4603      	mov	r3, r0
 800acde:	e000      	b.n	800ace2 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800ace0:	2302      	movs	r3, #2
  }
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3710      	adds	r7, #16
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}

0800acea <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800acea:	b580      	push	{r7, lr}
 800acec:	b09a      	sub	sp, #104	; 0x68
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	330c      	adds	r3, #12
 800acf8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acfc:	e853 3f00 	ldrex	r3, [r3]
 800ad00:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ad02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad08:	667b      	str	r3, [r7, #100]	; 0x64
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	330c      	adds	r3, #12
 800ad10:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ad12:	657a      	str	r2, [r7, #84]	; 0x54
 800ad14:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ad18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ad1a:	e841 2300 	strex	r3, r2, [r1]
 800ad1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ad20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d1e5      	bne.n	800acf2 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	3314      	adds	r3, #20
 800ad2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad30:	e853 3f00 	ldrex	r3, [r3]
 800ad34:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ad36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad38:	f023 0301 	bic.w	r3, r3, #1
 800ad3c:	663b      	str	r3, [r7, #96]	; 0x60
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	3314      	adds	r3, #20
 800ad44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ad46:	643a      	str	r2, [r7, #64]	; 0x40
 800ad48:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad4e:	e841 2300 	strex	r3, r2, [r1]
 800ad52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d1e5      	bne.n	800ad26 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad5e:	2b01      	cmp	r3, #1
 800ad60:	d119      	bne.n	800ad96 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	330c      	adds	r3, #12
 800ad68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad6a:	6a3b      	ldr	r3, [r7, #32]
 800ad6c:	e853 3f00 	ldrex	r3, [r3]
 800ad70:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad72:	69fb      	ldr	r3, [r7, #28]
 800ad74:	f023 0310 	bic.w	r3, r3, #16
 800ad78:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	330c      	adds	r3, #12
 800ad80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ad82:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ad84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad8a:	e841 2300 	strex	r3, r2, [r1]
 800ad8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d1e5      	bne.n	800ad62 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	695b      	ldr	r3, [r3, #20]
 800ad9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ada0:	2b40      	cmp	r3, #64	; 0x40
 800ada2:	d136      	bne.n	800ae12 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	3314      	adds	r3, #20
 800adaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	e853 3f00 	ldrex	r3, [r3]
 800adb2:	60bb      	str	r3, [r7, #8]
   return(result);
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800adba:	65bb      	str	r3, [r7, #88]	; 0x58
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	3314      	adds	r3, #20
 800adc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800adc4:	61ba      	str	r2, [r7, #24]
 800adc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc8:	6979      	ldr	r1, [r7, #20]
 800adca:	69ba      	ldr	r2, [r7, #24]
 800adcc:	e841 2300 	strex	r3, r2, [r1]
 800add0:	613b      	str	r3, [r7, #16]
   return(result);
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d1e5      	bne.n	800ada4 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800addc:	2b00      	cmp	r3, #0
 800adde:	d018      	beq.n	800ae12 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ade4:	2200      	movs	r2, #0
 800ade6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adec:	4618      	mov	r0, r3
 800adee:	f7fd f949 	bl	8008084 <HAL_DMA_Abort>
 800adf2:	4603      	mov	r3, r0
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d00c      	beq.n	800ae12 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adfc:	4618      	mov	r0, r3
 800adfe:	f7fd fb5d 	bl	80084bc <HAL_DMA_GetError>
 800ae02:	4603      	mov	r3, r0
 800ae04:	2b20      	cmp	r3, #32
 800ae06:	d104      	bne.n	800ae12 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2210      	movs	r2, #16
 800ae0c:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_TIMEOUT;
 800ae0e:	2303      	movs	r3, #3
 800ae10:	e00a      	b.n	800ae28 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2200      	movs	r2, #0
 800ae16:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2220      	movs	r2, #32
 800ae1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2200      	movs	r2, #0
 800ae24:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800ae26:	2300      	movs	r3, #0
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3768      	adds	r7, #104	; 0x68
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b0ba      	sub	sp, #232	; 0xe8
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	68db      	ldr	r3, [r3, #12]
 800ae48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	695b      	ldr	r3, [r3, #20]
 800ae52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ae56:	2300      	movs	r3, #0
 800ae58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ae62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae66:	f003 030f 	and.w	r3, r3, #15
 800ae6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ae6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d10f      	bne.n	800ae96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ae76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae7a:	f003 0320 	and.w	r3, r3, #32
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d009      	beq.n	800ae96 <HAL_UART_IRQHandler+0x66>
 800ae82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae86:	f003 0320 	and.w	r3, r3, #32
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d003      	beq.n	800ae96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 fd85 	bl	800b99e <UART_Receive_IT>
      return;
 800ae94:	e25b      	b.n	800b34e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ae96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	f000 80de 	beq.w	800b05c <HAL_UART_IRQHandler+0x22c>
 800aea0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aea4:	f003 0301 	and.w	r3, r3, #1
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d106      	bne.n	800aeba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800aeac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aeb0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	f000 80d1 	beq.w	800b05c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800aeba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aebe:	f003 0301 	and.w	r3, r3, #1
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d00b      	beq.n	800aede <HAL_UART_IRQHandler+0xae>
 800aec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aeca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d005      	beq.n	800aede <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aed6:	f043 0201 	orr.w	r2, r3, #1
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aee2:	f003 0304 	and.w	r3, r3, #4
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d00b      	beq.n	800af02 <HAL_UART_IRQHandler+0xd2>
 800aeea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aeee:	f003 0301 	and.w	r3, r3, #1
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d005      	beq.n	800af02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aefa:	f043 0202 	orr.w	r2, r3, #2
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800af02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af06:	f003 0302 	and.w	r3, r3, #2
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d00b      	beq.n	800af26 <HAL_UART_IRQHandler+0xf6>
 800af0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af12:	f003 0301 	and.w	r3, r3, #1
 800af16:	2b00      	cmp	r3, #0
 800af18:	d005      	beq.n	800af26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af1e:	f043 0204 	orr.w	r2, r3, #4
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800af26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af2a:	f003 0308 	and.w	r3, r3, #8
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d011      	beq.n	800af56 <HAL_UART_IRQHandler+0x126>
 800af32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af36:	f003 0320 	and.w	r3, r3, #32
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d105      	bne.n	800af4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800af3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af42:	f003 0301 	and.w	r3, r3, #1
 800af46:	2b00      	cmp	r3, #0
 800af48:	d005      	beq.n	800af56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af4e:	f043 0208 	orr.w	r2, r3, #8
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	f000 81f2 	beq.w	800b344 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800af60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af64:	f003 0320 	and.w	r3, r3, #32
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d008      	beq.n	800af7e <HAL_UART_IRQHandler+0x14e>
 800af6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af70:	f003 0320 	and.w	r3, r3, #32
 800af74:	2b00      	cmp	r3, #0
 800af76:	d002      	beq.n	800af7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 fd10 	bl	800b99e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	695b      	ldr	r3, [r3, #20]
 800af84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af88:	2b40      	cmp	r3, #64	; 0x40
 800af8a:	bf0c      	ite	eq
 800af8c:	2301      	moveq	r3, #1
 800af8e:	2300      	movne	r3, #0
 800af90:	b2db      	uxtb	r3, r3
 800af92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af9a:	f003 0308 	and.w	r3, r3, #8
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d103      	bne.n	800afaa <HAL_UART_IRQHandler+0x17a>
 800afa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d04f      	beq.n	800b04a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 fc18 	bl	800b7e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	695b      	ldr	r3, [r3, #20]
 800afb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afba:	2b40      	cmp	r3, #64	; 0x40
 800afbc:	d141      	bne.n	800b042 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	3314      	adds	r3, #20
 800afc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800afcc:	e853 3f00 	ldrex	r3, [r3]
 800afd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800afd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800afd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	3314      	adds	r3, #20
 800afe6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800afea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800afee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800aff6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800affa:	e841 2300 	strex	r3, r2, [r1]
 800affe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b002:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d1d9      	bne.n	800afbe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d013      	beq.n	800b03a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b016:	4a7e      	ldr	r2, [pc, #504]	; (800b210 <HAL_UART_IRQHandler+0x3e0>)
 800b018:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b01e:	4618      	mov	r0, r3
 800b020:	f7fd f8a0 	bl	8008164 <HAL_DMA_Abort_IT>
 800b024:	4603      	mov	r3, r0
 800b026:	2b00      	cmp	r3, #0
 800b028:	d016      	beq.n	800b058 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b02e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b030:	687a      	ldr	r2, [r7, #4]
 800b032:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b034:	4610      	mov	r0, r2
 800b036:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b038:	e00e      	b.n	800b058 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 f99e 	bl	800b37c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b040:	e00a      	b.n	800b058 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f000 f99a 	bl	800b37c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b048:	e006      	b.n	800b058 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 f996 	bl	800b37c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2200      	movs	r2, #0
 800b054:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800b056:	e175      	b.n	800b344 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b058:	bf00      	nop
    return;
 800b05a:	e173      	b.n	800b344 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b060:	2b01      	cmp	r3, #1
 800b062:	f040 814f 	bne.w	800b304 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b06a:	f003 0310 	and.w	r3, r3, #16
 800b06e:	2b00      	cmp	r3, #0
 800b070:	f000 8148 	beq.w	800b304 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b078:	f003 0310 	and.w	r3, r3, #16
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	f000 8141 	beq.w	800b304 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b082:	2300      	movs	r3, #0
 800b084:	60bb      	str	r3, [r7, #8]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	60bb      	str	r3, [r7, #8]
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	60bb      	str	r3, [r7, #8]
 800b096:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	695b      	ldr	r3, [r3, #20]
 800b09e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0a2:	2b40      	cmp	r3, #64	; 0x40
 800b0a4:	f040 80b6 	bne.w	800b214 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b0b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	f000 8145 	beq.w	800b348 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b0c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	f080 813e 	bcs.w	800b348 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b0d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0d8:	69db      	ldr	r3, [r3, #28]
 800b0da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0de:	f000 8088 	beq.w	800b1f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	330c      	adds	r3, #12
 800b0e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b0f0:	e853 3f00 	ldrex	r3, [r3]
 800b0f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b0f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b0fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b100:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	330c      	adds	r3, #12
 800b10a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b10e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b112:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b116:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b11a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b11e:	e841 2300 	strex	r3, r2, [r1]
 800b122:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b126:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d1d9      	bne.n	800b0e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	3314      	adds	r3, #20
 800b134:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b136:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b138:	e853 3f00 	ldrex	r3, [r3]
 800b13c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b13e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b140:	f023 0301 	bic.w	r3, r3, #1
 800b144:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	3314      	adds	r3, #20
 800b14e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b152:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b156:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b158:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b15a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b15e:	e841 2300 	strex	r3, r2, [r1]
 800b162:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b164:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b166:	2b00      	cmp	r3, #0
 800b168:	d1e1      	bne.n	800b12e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	3314      	adds	r3, #20
 800b170:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b172:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b174:	e853 3f00 	ldrex	r3, [r3]
 800b178:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b17a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b17c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b180:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	3314      	adds	r3, #20
 800b18a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b18e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b190:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b192:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b194:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b196:	e841 2300 	strex	r3, r2, [r1]
 800b19a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b19c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d1e3      	bne.n	800b16a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2220      	movs	r2, #32
 800b1a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	330c      	adds	r3, #12
 800b1b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1ba:	e853 3f00 	ldrex	r3, [r3]
 800b1be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b1c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1c2:	f023 0310 	bic.w	r3, r3, #16
 800b1c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	330c      	adds	r3, #12
 800b1d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b1d4:	65ba      	str	r2, [r7, #88]	; 0x58
 800b1d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b1da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b1dc:	e841 2300 	strex	r3, r2, [r1]
 800b1e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b1e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d1e3      	bne.n	800b1b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7fc ff49 	bl	8008084 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2202      	movs	r2, #2
 800b1f6:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b200:	b29b      	uxth	r3, r3
 800b202:	1ad3      	subs	r3, r2, r3
 800b204:	b29b      	uxth	r3, r3
 800b206:	4619      	mov	r1, r3
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f000 f8c1 	bl	800b390 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b20e:	e09b      	b.n	800b348 <HAL_UART_IRQHandler+0x518>
 800b210:	0800b8a7 	.word	0x0800b8a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	1ad3      	subs	r3, r2, r3
 800b220:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b228:	b29b      	uxth	r3, r3
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	f000 808e 	beq.w	800b34c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b230:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b234:	2b00      	cmp	r3, #0
 800b236:	f000 8089 	beq.w	800b34c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	330c      	adds	r3, #12
 800b240:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b244:	e853 3f00 	ldrex	r3, [r3]
 800b248:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b24a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b24c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b250:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	330c      	adds	r3, #12
 800b25a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b25e:	647a      	str	r2, [r7, #68]	; 0x44
 800b260:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b262:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b264:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b266:	e841 2300 	strex	r3, r2, [r1]
 800b26a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b26c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d1e3      	bne.n	800b23a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	3314      	adds	r3, #20
 800b278:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27c:	e853 3f00 	ldrex	r3, [r3]
 800b280:	623b      	str	r3, [r7, #32]
   return(result);
 800b282:	6a3b      	ldr	r3, [r7, #32]
 800b284:	f023 0301 	bic.w	r3, r3, #1
 800b288:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	3314      	adds	r3, #20
 800b292:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b296:	633a      	str	r2, [r7, #48]	; 0x30
 800b298:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b29a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b29c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b29e:	e841 2300 	strex	r3, r2, [r1]
 800b2a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d1e3      	bne.n	800b272 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2220      	movs	r2, #32
 800b2ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	330c      	adds	r3, #12
 800b2be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	e853 3f00 	ldrex	r3, [r3]
 800b2c6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	f023 0310 	bic.w	r3, r3, #16
 800b2ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	330c      	adds	r3, #12
 800b2d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b2dc:	61fa      	str	r2, [r7, #28]
 800b2de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2e0:	69b9      	ldr	r1, [r7, #24]
 800b2e2:	69fa      	ldr	r2, [r7, #28]
 800b2e4:	e841 2300 	strex	r3, r2, [r1]
 800b2e8:	617b      	str	r3, [r7, #20]
   return(result);
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d1e3      	bne.n	800b2b8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2202      	movs	r2, #2
 800b2f4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b2f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 f847 	bl	800b390 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b302:	e023      	b.n	800b34c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d009      	beq.n	800b324 <HAL_UART_IRQHandler+0x4f4>
 800b310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d003      	beq.n	800b324 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 fad6 	bl	800b8ce <UART_Transmit_IT>
    return;
 800b322:	e014      	b.n	800b34e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d00e      	beq.n	800b34e <HAL_UART_IRQHandler+0x51e>
 800b330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d008      	beq.n	800b34e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f000 fb16 	bl	800b96e <UART_EndTransmit_IT>
    return;
 800b342:	e004      	b.n	800b34e <HAL_UART_IRQHandler+0x51e>
    return;
 800b344:	bf00      	nop
 800b346:	e002      	b.n	800b34e <HAL_UART_IRQHandler+0x51e>
      return;
 800b348:	bf00      	nop
 800b34a:	e000      	b.n	800b34e <HAL_UART_IRQHandler+0x51e>
      return;
 800b34c:	bf00      	nop
  }
}
 800b34e:	37e8      	adds	r7, #232	; 0xe8
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b354:	b480      	push	{r7}
 800b356:	b083      	sub	sp, #12
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b35c:	bf00      	nop
 800b35e:	370c      	adds	r7, #12
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr

0800b368 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b368:	b480      	push	{r7}
 800b36a:	b083      	sub	sp, #12
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b370:	bf00      	nop
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr

0800b37c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b384:	bf00      	nop
 800b386:	370c      	adds	r7, #12
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr

0800b390 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b390:	b480      	push	{r7}
 800b392:	b083      	sub	sp, #12
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	460b      	mov	r3, r1
 800b39a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b39c:	bf00      	nop
 800b39e:	370c      	adds	r7, #12
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr

0800b3a8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b090      	sub	sp, #64	; 0x40
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d137      	bne.n	800b434 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b3c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b3ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	3314      	adds	r3, #20
 800b3d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d4:	e853 3f00 	ldrex	r3, [r3]
 800b3d8:	623b      	str	r3, [r7, #32]
   return(result);
 800b3da:	6a3b      	ldr	r3, [r7, #32]
 800b3dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b3e0:	63bb      	str	r3, [r7, #56]	; 0x38
 800b3e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	3314      	adds	r3, #20
 800b3e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3ea:	633a      	str	r2, [r7, #48]	; 0x30
 800b3ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b3f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3f2:	e841 2300 	strex	r3, r2, [r1]
 800b3f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d1e5      	bne.n	800b3ca <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b3fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	330c      	adds	r3, #12
 800b404:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	e853 3f00 	ldrex	r3, [r3]
 800b40c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b414:	637b      	str	r3, [r7, #52]	; 0x34
 800b416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	330c      	adds	r3, #12
 800b41c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b41e:	61fa      	str	r2, [r7, #28]
 800b420:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b422:	69b9      	ldr	r1, [r7, #24]
 800b424:	69fa      	ldr	r2, [r7, #28]
 800b426:	e841 2300 	strex	r3, r2, [r1]
 800b42a:	617b      	str	r3, [r7, #20]
   return(result);
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d1e5      	bne.n	800b3fe <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b432:	e002      	b.n	800b43a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b434:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b436:	f7f8 ffff 	bl	8004438 <HAL_UART_TxCpltCallback>
}
 800b43a:	bf00      	nop
 800b43c:	3740      	adds	r7, #64	; 0x40
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}

0800b442 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b442:	b580      	push	{r7, lr}
 800b444:	b084      	sub	sp, #16
 800b446:	af00      	add	r7, sp, #0
 800b448:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b44e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b450:	68f8      	ldr	r0, [r7, #12]
 800b452:	f7ff ff7f 	bl	800b354 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b456:	bf00      	nop
 800b458:	3710      	adds	r7, #16
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}

0800b45e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b45e:	b580      	push	{r7, lr}
 800b460:	b09c      	sub	sp, #112	; 0x70
 800b462:	af00      	add	r7, sp, #0
 800b464:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b46a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b476:	2b00      	cmp	r3, #0
 800b478:	d172      	bne.n	800b560 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b47a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b47c:	2200      	movs	r2, #0
 800b47e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	330c      	adds	r3, #12
 800b486:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b48a:	e853 3f00 	ldrex	r3, [r3]
 800b48e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b492:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b496:	66bb      	str	r3, [r7, #104]	; 0x68
 800b498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	330c      	adds	r3, #12
 800b49e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b4a0:	65ba      	str	r2, [r7, #88]	; 0x58
 800b4a2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b4a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b4a8:	e841 2300 	strex	r3, r2, [r1]
 800b4ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b4ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d1e5      	bne.n	800b480 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	3314      	adds	r3, #20
 800b4ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4be:	e853 3f00 	ldrex	r3, [r3]
 800b4c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b4c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4c6:	f023 0301 	bic.w	r3, r3, #1
 800b4ca:	667b      	str	r3, [r7, #100]	; 0x64
 800b4cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	3314      	adds	r3, #20
 800b4d2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b4d4:	647a      	str	r2, [r7, #68]	; 0x44
 800b4d6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b4da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b4dc:	e841 2300 	strex	r3, r2, [r1]
 800b4e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b4e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d1e5      	bne.n	800b4b4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	3314      	adds	r3, #20
 800b4ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f2:	e853 3f00 	ldrex	r3, [r3]
 800b4f6:	623b      	str	r3, [r7, #32]
   return(result);
 800b4f8:	6a3b      	ldr	r3, [r7, #32]
 800b4fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4fe:	663b      	str	r3, [r7, #96]	; 0x60
 800b500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	3314      	adds	r3, #20
 800b506:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b508:	633a      	str	r2, [r7, #48]	; 0x30
 800b50a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b50c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b50e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b510:	e841 2300 	strex	r3, r2, [r1]
 800b514:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d1e5      	bne.n	800b4e8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b51c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b51e:	2220      	movs	r2, #32
 800b520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d119      	bne.n	800b560 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b52c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	330c      	adds	r3, #12
 800b532:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	e853 3f00 	ldrex	r3, [r3]
 800b53a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f023 0310 	bic.w	r3, r3, #16
 800b542:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	330c      	adds	r3, #12
 800b54a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b54c:	61fa      	str	r2, [r7, #28]
 800b54e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b550:	69b9      	ldr	r1, [r7, #24]
 800b552:	69fa      	ldr	r2, [r7, #28]
 800b554:	e841 2300 	strex	r3, r2, [r1]
 800b558:	617b      	str	r3, [r7, #20]
   return(result);
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d1e5      	bne.n	800b52c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b562:	2200      	movs	r2, #0
 800b564:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b56a:	2b01      	cmp	r3, #1
 800b56c:	d106      	bne.n	800b57c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b56e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b570:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b572:	4619      	mov	r1, r3
 800b574:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b576:	f7ff ff0b 	bl	800b390 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b57a:	e002      	b.n	800b582 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800b57c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b57e:	f7f8 ff6f 	bl	8004460 <HAL_UART_RxCpltCallback>
}
 800b582:	bf00      	nop
 800b584:	3770      	adds	r7, #112	; 0x70
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}

0800b58a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b58a:	b580      	push	{r7, lr}
 800b58c:	b084      	sub	sp, #16
 800b58e:	af00      	add	r7, sp, #0
 800b590:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b596:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2201      	movs	r2, #1
 800b59c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5a2:	2b01      	cmp	r3, #1
 800b5a4:	d108      	bne.n	800b5b8 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b5aa:	085b      	lsrs	r3, r3, #1
 800b5ac:	b29b      	uxth	r3, r3
 800b5ae:	4619      	mov	r1, r3
 800b5b0:	68f8      	ldr	r0, [r7, #12]
 800b5b2:	f7ff feed 	bl	800b390 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b5b6:	e002      	b.n	800b5be <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800b5b8:	68f8      	ldr	r0, [r7, #12]
 800b5ba:	f7ff fed5 	bl	800b368 <HAL_UART_RxHalfCpltCallback>
}
 800b5be:	bf00      	nop
 800b5c0:	3710      	adds	r7, #16
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}

0800b5c6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b5c6:	b580      	push	{r7, lr}
 800b5c8:	b084      	sub	sp, #16
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5d6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	695b      	ldr	r3, [r3, #20]
 800b5de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5e2:	2b80      	cmp	r3, #128	; 0x80
 800b5e4:	bf0c      	ite	eq
 800b5e6:	2301      	moveq	r3, #1
 800b5e8:	2300      	movne	r3, #0
 800b5ea:	b2db      	uxtb	r3, r3
 800b5ec:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b5f4:	b2db      	uxtb	r3, r3
 800b5f6:	2b21      	cmp	r3, #33	; 0x21
 800b5f8:	d108      	bne.n	800b60c <UART_DMAError+0x46>
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d005      	beq.n	800b60c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	2200      	movs	r2, #0
 800b604:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b606:	68b8      	ldr	r0, [r7, #8]
 800b608:	f000 f8c2 	bl	800b790 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	695b      	ldr	r3, [r3, #20]
 800b612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b616:	2b40      	cmp	r3, #64	; 0x40
 800b618:	bf0c      	ite	eq
 800b61a:	2301      	moveq	r3, #1
 800b61c:	2300      	movne	r3, #0
 800b61e:	b2db      	uxtb	r3, r3
 800b620:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b628:	b2db      	uxtb	r3, r3
 800b62a:	2b22      	cmp	r3, #34	; 0x22
 800b62c:	d108      	bne.n	800b640 <UART_DMAError+0x7a>
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d005      	beq.n	800b640 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	2200      	movs	r2, #0
 800b638:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b63a:	68b8      	ldr	r0, [r7, #8]
 800b63c:	f000 f8d0 	bl	800b7e0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b644:	f043 0210 	orr.w	r2, r3, #16
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b64c:	68b8      	ldr	r0, [r7, #8]
 800b64e:	f7ff fe95 	bl	800b37c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b652:	bf00      	nop
 800b654:	3710      	adds	r7, #16
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}
	...

0800b65c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b098      	sub	sp, #96	; 0x60
 800b660:	af00      	add	r7, sp, #0
 800b662:	60f8      	str	r0, [r7, #12]
 800b664:	60b9      	str	r1, [r7, #8]
 800b666:	4613      	mov	r3, r2
 800b668:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b66a:	68ba      	ldr	r2, [r7, #8]
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	88fa      	ldrh	r2, [r7, #6]
 800b674:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2200      	movs	r2, #0
 800b67a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	2222      	movs	r2, #34	; 0x22
 800b680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b688:	4a3e      	ldr	r2, [pc, #248]	; (800b784 <UART_Start_Receive_DMA+0x128>)
 800b68a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b690:	4a3d      	ldr	r2, [pc, #244]	; (800b788 <UART_Start_Receive_DMA+0x12c>)
 800b692:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b698:	4a3c      	ldr	r2, [pc, #240]	; (800b78c <UART_Start_Receive_DMA+0x130>)
 800b69a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b6a4:	f107 0308 	add.w	r3, r7, #8
 800b6a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	3304      	adds	r3, #4
 800b6b4:	4619      	mov	r1, r3
 800b6b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b6b8:	681a      	ldr	r2, [r3, #0]
 800b6ba:	88fb      	ldrh	r3, [r7, #6]
 800b6bc:	f7fc fc8a 	bl	8007fd4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	613b      	str	r3, [r7, #16]
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	613b      	str	r3, [r7, #16]
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	685b      	ldr	r3, [r3, #4]
 800b6d2:	613b      	str	r3, [r7, #16]
 800b6d4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	691b      	ldr	r3, [r3, #16]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d019      	beq.n	800b712 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	330c      	adds	r3, #12
 800b6e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6e8:	e853 3f00 	ldrex	r3, [r3]
 800b6ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b6ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6f4:	65bb      	str	r3, [r7, #88]	; 0x58
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	330c      	adds	r3, #12
 800b6fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b6fe:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b700:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b702:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b704:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b706:	e841 2300 	strex	r3, r2, [r1]
 800b70a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b70c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d1e5      	bne.n	800b6de <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	3314      	adds	r3, #20
 800b718:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b71c:	e853 3f00 	ldrex	r3, [r3]
 800b720:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b724:	f043 0301 	orr.w	r3, r3, #1
 800b728:	657b      	str	r3, [r7, #84]	; 0x54
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	3314      	adds	r3, #20
 800b730:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b732:	63ba      	str	r2, [r7, #56]	; 0x38
 800b734:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b736:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b738:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b73a:	e841 2300 	strex	r3, r2, [r1]
 800b73e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b742:	2b00      	cmp	r3, #0
 800b744:	d1e5      	bne.n	800b712 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	3314      	adds	r3, #20
 800b74c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b74e:	69bb      	ldr	r3, [r7, #24]
 800b750:	e853 3f00 	ldrex	r3, [r3]
 800b754:	617b      	str	r3, [r7, #20]
   return(result);
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b75c:	653b      	str	r3, [r7, #80]	; 0x50
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	3314      	adds	r3, #20
 800b764:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b766:	627a      	str	r2, [r7, #36]	; 0x24
 800b768:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b76a:	6a39      	ldr	r1, [r7, #32]
 800b76c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b76e:	e841 2300 	strex	r3, r2, [r1]
 800b772:	61fb      	str	r3, [r7, #28]
   return(result);
 800b774:	69fb      	ldr	r3, [r7, #28]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d1e5      	bne.n	800b746 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800b77a:	2300      	movs	r3, #0
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3760      	adds	r7, #96	; 0x60
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}
 800b784:	0800b45f 	.word	0x0800b45f
 800b788:	0800b58b 	.word	0x0800b58b
 800b78c:	0800b5c7 	.word	0x0800b5c7

0800b790 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b790:	b480      	push	{r7}
 800b792:	b089      	sub	sp, #36	; 0x24
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	330c      	adds	r3, #12
 800b79e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	e853 3f00 	ldrex	r3, [r3]
 800b7a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b7ae:	61fb      	str	r3, [r7, #28]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	330c      	adds	r3, #12
 800b7b6:	69fa      	ldr	r2, [r7, #28]
 800b7b8:	61ba      	str	r2, [r7, #24]
 800b7ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7bc:	6979      	ldr	r1, [r7, #20]
 800b7be:	69ba      	ldr	r2, [r7, #24]
 800b7c0:	e841 2300 	strex	r3, r2, [r1]
 800b7c4:	613b      	str	r3, [r7, #16]
   return(result);
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d1e5      	bne.n	800b798 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2220      	movs	r2, #32
 800b7d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800b7d4:	bf00      	nop
 800b7d6:	3724      	adds	r7, #36	; 0x24
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr

0800b7e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b095      	sub	sp, #84	; 0x54
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	330c      	adds	r3, #12
 800b7ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7f2:	e853 3f00 	ldrex	r3, [r3]
 800b7f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b7fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	330c      	adds	r3, #12
 800b806:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b808:	643a      	str	r2, [r7, #64]	; 0x40
 800b80a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b80c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b80e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b810:	e841 2300 	strex	r3, r2, [r1]
 800b814:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d1e5      	bne.n	800b7e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	3314      	adds	r3, #20
 800b822:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b824:	6a3b      	ldr	r3, [r7, #32]
 800b826:	e853 3f00 	ldrex	r3, [r3]
 800b82a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b82c:	69fb      	ldr	r3, [r7, #28]
 800b82e:	f023 0301 	bic.w	r3, r3, #1
 800b832:	64bb      	str	r3, [r7, #72]	; 0x48
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	3314      	adds	r3, #20
 800b83a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b83c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b83e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b840:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b842:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b844:	e841 2300 	strex	r3, r2, [r1]
 800b848:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d1e5      	bne.n	800b81c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b854:	2b01      	cmp	r3, #1
 800b856:	d119      	bne.n	800b88c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	330c      	adds	r3, #12
 800b85e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	e853 3f00 	ldrex	r3, [r3]
 800b866:	60bb      	str	r3, [r7, #8]
   return(result);
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	f023 0310 	bic.w	r3, r3, #16
 800b86e:	647b      	str	r3, [r7, #68]	; 0x44
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	330c      	adds	r3, #12
 800b876:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b878:	61ba      	str	r2, [r7, #24]
 800b87a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b87c:	6979      	ldr	r1, [r7, #20]
 800b87e:	69ba      	ldr	r2, [r7, #24]
 800b880:	e841 2300 	strex	r3, r2, [r1]
 800b884:	613b      	str	r3, [r7, #16]
   return(result);
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d1e5      	bne.n	800b858 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2220      	movs	r2, #32
 800b890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2200      	movs	r2, #0
 800b898:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b89a:	bf00      	nop
 800b89c:	3754      	adds	r7, #84	; 0x54
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a4:	4770      	bx	lr

0800b8a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b8a6:	b580      	push	{r7, lr}
 800b8a8:	b084      	sub	sp, #16
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b8c0:	68f8      	ldr	r0, [r7, #12]
 800b8c2:	f7ff fd5b 	bl	800b37c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8c6:	bf00      	nop
 800b8c8:	3710      	adds	r7, #16
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}

0800b8ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b8ce:	b480      	push	{r7}
 800b8d0:	b085      	sub	sp, #20
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	2b21      	cmp	r3, #33	; 0x21
 800b8e0:	d13e      	bne.n	800b960 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	689b      	ldr	r3, [r3, #8]
 800b8e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8ea:	d114      	bne.n	800b916 <UART_Transmit_IT+0x48>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	691b      	ldr	r3, [r3, #16]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d110      	bne.n	800b916 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6a1b      	ldr	r3, [r3, #32]
 800b8f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	881b      	ldrh	r3, [r3, #0]
 800b8fe:	461a      	mov	r2, r3
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b908:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6a1b      	ldr	r3, [r3, #32]
 800b90e:	1c9a      	adds	r2, r3, #2
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	621a      	str	r2, [r3, #32]
 800b914:	e008      	b.n	800b928 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6a1b      	ldr	r3, [r3, #32]
 800b91a:	1c59      	adds	r1, r3, #1
 800b91c:	687a      	ldr	r2, [r7, #4]
 800b91e:	6211      	str	r1, [r2, #32]
 800b920:	781a      	ldrb	r2, [r3, #0]
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b92c:	b29b      	uxth	r3, r3
 800b92e:	3b01      	subs	r3, #1
 800b930:	b29b      	uxth	r3, r3
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	4619      	mov	r1, r3
 800b936:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d10f      	bne.n	800b95c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	68da      	ldr	r2, [r3, #12]
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b94a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	68da      	ldr	r2, [r3, #12]
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b95a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b95c:	2300      	movs	r3, #0
 800b95e:	e000      	b.n	800b962 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b960:	2302      	movs	r3, #2
  }
}
 800b962:	4618      	mov	r0, r3
 800b964:	3714      	adds	r7, #20
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr

0800b96e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b96e:	b580      	push	{r7, lr}
 800b970:	b082      	sub	sp, #8
 800b972:	af00      	add	r7, sp, #0
 800b974:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	68da      	ldr	r2, [r3, #12]
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b984:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2220      	movs	r2, #32
 800b98a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f7f8 fd52 	bl	8004438 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b994:	2300      	movs	r3, #0
}
 800b996:	4618      	mov	r0, r3
 800b998:	3708      	adds	r7, #8
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}

0800b99e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b99e:	b580      	push	{r7, lr}
 800b9a0:	b08c      	sub	sp, #48	; 0x30
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b9ac:	b2db      	uxtb	r3, r3
 800b9ae:	2b22      	cmp	r3, #34	; 0x22
 800b9b0:	f040 80ae 	bne.w	800bb10 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	689b      	ldr	r3, [r3, #8]
 800b9b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9bc:	d117      	bne.n	800b9ee <UART_Receive_IT+0x50>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	691b      	ldr	r3, [r3, #16]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d113      	bne.n	800b9ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9ce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	b29b      	uxth	r3, r3
 800b9d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9dc:	b29a      	uxth	r2, r3
 800b9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9e6:	1c9a      	adds	r2, r3, #2
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	629a      	str	r2, [r3, #40]	; 0x28
 800b9ec:	e026      	b.n	800ba3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	689b      	ldr	r3, [r3, #8]
 800b9fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba00:	d007      	beq.n	800ba12 <UART_Receive_IT+0x74>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	689b      	ldr	r3, [r3, #8]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d10a      	bne.n	800ba20 <UART_Receive_IT+0x82>
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	691b      	ldr	r3, [r3, #16]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d106      	bne.n	800ba20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	b2da      	uxtb	r2, r3
 800ba1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba1c:	701a      	strb	r2, [r3, #0]
 800ba1e:	e008      	b.n	800ba32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	b2db      	uxtb	r3, r3
 800ba28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba2c:	b2da      	uxtb	r2, r3
 800ba2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba36:	1c5a      	adds	r2, r3, #1
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	3b01      	subs	r3, #1
 800ba44:	b29b      	uxth	r3, r3
 800ba46:	687a      	ldr	r2, [r7, #4]
 800ba48:	4619      	mov	r1, r3
 800ba4a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d15d      	bne.n	800bb0c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	68da      	ldr	r2, [r3, #12]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f022 0220 	bic.w	r2, r2, #32
 800ba5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	68da      	ldr	r2, [r3, #12]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ba6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	695a      	ldr	r2, [r3, #20]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f022 0201 	bic.w	r2, r2, #1
 800ba7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2220      	movs	r2, #32
 800ba84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d135      	bne.n	800bb02 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	330c      	adds	r3, #12
 800baa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	e853 3f00 	ldrex	r3, [r3]
 800baaa:	613b      	str	r3, [r7, #16]
   return(result);
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	f023 0310 	bic.w	r3, r3, #16
 800bab2:	627b      	str	r3, [r7, #36]	; 0x24
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	330c      	adds	r3, #12
 800baba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800babc:	623a      	str	r2, [r7, #32]
 800babe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bac0:	69f9      	ldr	r1, [r7, #28]
 800bac2:	6a3a      	ldr	r2, [r7, #32]
 800bac4:	e841 2300 	strex	r3, r2, [r1]
 800bac8:	61bb      	str	r3, [r7, #24]
   return(result);
 800baca:	69bb      	ldr	r3, [r7, #24]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d1e5      	bne.n	800ba9c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f003 0310 	and.w	r3, r3, #16
 800bada:	2b10      	cmp	r3, #16
 800badc:	d10a      	bne.n	800baf4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bade:	2300      	movs	r3, #0
 800bae0:	60fb      	str	r3, [r7, #12]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	60fb      	str	r3, [r7, #12]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	60fb      	str	r3, [r7, #12]
 800baf2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800baf8:	4619      	mov	r1, r3
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f7ff fc48 	bl	800b390 <HAL_UARTEx_RxEventCallback>
 800bb00:	e002      	b.n	800bb08 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f7f8 fcac 	bl	8004460 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	e002      	b.n	800bb12 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	e000      	b.n	800bb12 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800bb10:	2302      	movs	r3, #2
  }
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3730      	adds	r7, #48	; 0x30
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}
	...

0800bb1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb20:	b0c0      	sub	sp, #256	; 0x100
 800bb22:	af00      	add	r7, sp, #0
 800bb24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	691b      	ldr	r3, [r3, #16]
 800bb30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bb34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb38:	68d9      	ldr	r1, [r3, #12]
 800bb3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb3e:	681a      	ldr	r2, [r3, #0]
 800bb40:	ea40 0301 	orr.w	r3, r0, r1
 800bb44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bb46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb4a:	689a      	ldr	r2, [r3, #8]
 800bb4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb50:	691b      	ldr	r3, [r3, #16]
 800bb52:	431a      	orrs	r2, r3
 800bb54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb58:	695b      	ldr	r3, [r3, #20]
 800bb5a:	431a      	orrs	r2, r3
 800bb5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb60:	69db      	ldr	r3, [r3, #28]
 800bb62:	4313      	orrs	r3, r2
 800bb64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bb68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	68db      	ldr	r3, [r3, #12]
 800bb70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bb74:	f021 010c 	bic.w	r1, r1, #12
 800bb78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb7c:	681a      	ldr	r2, [r3, #0]
 800bb7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bb82:	430b      	orrs	r3, r1
 800bb84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bb86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	695b      	ldr	r3, [r3, #20]
 800bb8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bb92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb96:	6999      	ldr	r1, [r3, #24]
 800bb98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb9c:	681a      	ldr	r2, [r3, #0]
 800bb9e:	ea40 0301 	orr.w	r3, r0, r1
 800bba2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bba8:	681a      	ldr	r2, [r3, #0]
 800bbaa:	4b8f      	ldr	r3, [pc, #572]	; (800bde8 <UART_SetConfig+0x2cc>)
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d005      	beq.n	800bbbc <UART_SetConfig+0xa0>
 800bbb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbb4:	681a      	ldr	r2, [r3, #0]
 800bbb6:	4b8d      	ldr	r3, [pc, #564]	; (800bdec <UART_SetConfig+0x2d0>)
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d104      	bne.n	800bbc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bbbc:	f7fd f888 	bl	8008cd0 <HAL_RCC_GetPCLK2Freq>
 800bbc0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bbc4:	e003      	b.n	800bbce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bbc6:	f7fd f86f 	bl	8008ca8 <HAL_RCC_GetPCLK1Freq>
 800bbca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bbce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbd2:	69db      	ldr	r3, [r3, #28]
 800bbd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bbd8:	f040 810c 	bne.w	800bdf4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bbdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bbe6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bbea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bbee:	4622      	mov	r2, r4
 800bbf0:	462b      	mov	r3, r5
 800bbf2:	1891      	adds	r1, r2, r2
 800bbf4:	65b9      	str	r1, [r7, #88]	; 0x58
 800bbf6:	415b      	adcs	r3, r3
 800bbf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bbfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bbfe:	4621      	mov	r1, r4
 800bc00:	eb12 0801 	adds.w	r8, r2, r1
 800bc04:	4629      	mov	r1, r5
 800bc06:	eb43 0901 	adc.w	r9, r3, r1
 800bc0a:	f04f 0200 	mov.w	r2, #0
 800bc0e:	f04f 0300 	mov.w	r3, #0
 800bc12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bc16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bc1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bc1e:	4690      	mov	r8, r2
 800bc20:	4699      	mov	r9, r3
 800bc22:	4623      	mov	r3, r4
 800bc24:	eb18 0303 	adds.w	r3, r8, r3
 800bc28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bc2c:	462b      	mov	r3, r5
 800bc2e:	eb49 0303 	adc.w	r3, r9, r3
 800bc32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bc36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bc42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bc46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bc4a:	460b      	mov	r3, r1
 800bc4c:	18db      	adds	r3, r3, r3
 800bc4e:	653b      	str	r3, [r7, #80]	; 0x50
 800bc50:	4613      	mov	r3, r2
 800bc52:	eb42 0303 	adc.w	r3, r2, r3
 800bc56:	657b      	str	r3, [r7, #84]	; 0x54
 800bc58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bc5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800bc60:	f7f4 ffd2 	bl	8000c08 <__aeabi_uldivmod>
 800bc64:	4602      	mov	r2, r0
 800bc66:	460b      	mov	r3, r1
 800bc68:	4b61      	ldr	r3, [pc, #388]	; (800bdf0 <UART_SetConfig+0x2d4>)
 800bc6a:	fba3 2302 	umull	r2, r3, r3, r2
 800bc6e:	095b      	lsrs	r3, r3, #5
 800bc70:	011c      	lsls	r4, r3, #4
 800bc72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc76:	2200      	movs	r2, #0
 800bc78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bc7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800bc80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800bc84:	4642      	mov	r2, r8
 800bc86:	464b      	mov	r3, r9
 800bc88:	1891      	adds	r1, r2, r2
 800bc8a:	64b9      	str	r1, [r7, #72]	; 0x48
 800bc8c:	415b      	adcs	r3, r3
 800bc8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bc94:	4641      	mov	r1, r8
 800bc96:	eb12 0a01 	adds.w	sl, r2, r1
 800bc9a:	4649      	mov	r1, r9
 800bc9c:	eb43 0b01 	adc.w	fp, r3, r1
 800bca0:	f04f 0200 	mov.w	r2, #0
 800bca4:	f04f 0300 	mov.w	r3, #0
 800bca8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bcac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bcb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bcb4:	4692      	mov	sl, r2
 800bcb6:	469b      	mov	fp, r3
 800bcb8:	4643      	mov	r3, r8
 800bcba:	eb1a 0303 	adds.w	r3, sl, r3
 800bcbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bcc2:	464b      	mov	r3, r9
 800bcc4:	eb4b 0303 	adc.w	r3, fp, r3
 800bcc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bcd8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800bcdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bce0:	460b      	mov	r3, r1
 800bce2:	18db      	adds	r3, r3, r3
 800bce4:	643b      	str	r3, [r7, #64]	; 0x40
 800bce6:	4613      	mov	r3, r2
 800bce8:	eb42 0303 	adc.w	r3, r2, r3
 800bcec:	647b      	str	r3, [r7, #68]	; 0x44
 800bcee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bcf2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800bcf6:	f7f4 ff87 	bl	8000c08 <__aeabi_uldivmod>
 800bcfa:	4602      	mov	r2, r0
 800bcfc:	460b      	mov	r3, r1
 800bcfe:	4611      	mov	r1, r2
 800bd00:	4b3b      	ldr	r3, [pc, #236]	; (800bdf0 <UART_SetConfig+0x2d4>)
 800bd02:	fba3 2301 	umull	r2, r3, r3, r1
 800bd06:	095b      	lsrs	r3, r3, #5
 800bd08:	2264      	movs	r2, #100	; 0x64
 800bd0a:	fb02 f303 	mul.w	r3, r2, r3
 800bd0e:	1acb      	subs	r3, r1, r3
 800bd10:	00db      	lsls	r3, r3, #3
 800bd12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bd16:	4b36      	ldr	r3, [pc, #216]	; (800bdf0 <UART_SetConfig+0x2d4>)
 800bd18:	fba3 2302 	umull	r2, r3, r3, r2
 800bd1c:	095b      	lsrs	r3, r3, #5
 800bd1e:	005b      	lsls	r3, r3, #1
 800bd20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bd24:	441c      	add	r4, r3
 800bd26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bd30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bd34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bd38:	4642      	mov	r2, r8
 800bd3a:	464b      	mov	r3, r9
 800bd3c:	1891      	adds	r1, r2, r2
 800bd3e:	63b9      	str	r1, [r7, #56]	; 0x38
 800bd40:	415b      	adcs	r3, r3
 800bd42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bd48:	4641      	mov	r1, r8
 800bd4a:	1851      	adds	r1, r2, r1
 800bd4c:	6339      	str	r1, [r7, #48]	; 0x30
 800bd4e:	4649      	mov	r1, r9
 800bd50:	414b      	adcs	r3, r1
 800bd52:	637b      	str	r3, [r7, #52]	; 0x34
 800bd54:	f04f 0200 	mov.w	r2, #0
 800bd58:	f04f 0300 	mov.w	r3, #0
 800bd5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bd60:	4659      	mov	r1, fp
 800bd62:	00cb      	lsls	r3, r1, #3
 800bd64:	4651      	mov	r1, sl
 800bd66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bd6a:	4651      	mov	r1, sl
 800bd6c:	00ca      	lsls	r2, r1, #3
 800bd6e:	4610      	mov	r0, r2
 800bd70:	4619      	mov	r1, r3
 800bd72:	4603      	mov	r3, r0
 800bd74:	4642      	mov	r2, r8
 800bd76:	189b      	adds	r3, r3, r2
 800bd78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bd7c:	464b      	mov	r3, r9
 800bd7e:	460a      	mov	r2, r1
 800bd80:	eb42 0303 	adc.w	r3, r2, r3
 800bd84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bd88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd8c:	685b      	ldr	r3, [r3, #4]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bd94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bd98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bd9c:	460b      	mov	r3, r1
 800bd9e:	18db      	adds	r3, r3, r3
 800bda0:	62bb      	str	r3, [r7, #40]	; 0x28
 800bda2:	4613      	mov	r3, r2
 800bda4:	eb42 0303 	adc.w	r3, r2, r3
 800bda8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bdaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bdae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bdb2:	f7f4 ff29 	bl	8000c08 <__aeabi_uldivmod>
 800bdb6:	4602      	mov	r2, r0
 800bdb8:	460b      	mov	r3, r1
 800bdba:	4b0d      	ldr	r3, [pc, #52]	; (800bdf0 <UART_SetConfig+0x2d4>)
 800bdbc:	fba3 1302 	umull	r1, r3, r3, r2
 800bdc0:	095b      	lsrs	r3, r3, #5
 800bdc2:	2164      	movs	r1, #100	; 0x64
 800bdc4:	fb01 f303 	mul.w	r3, r1, r3
 800bdc8:	1ad3      	subs	r3, r2, r3
 800bdca:	00db      	lsls	r3, r3, #3
 800bdcc:	3332      	adds	r3, #50	; 0x32
 800bdce:	4a08      	ldr	r2, [pc, #32]	; (800bdf0 <UART_SetConfig+0x2d4>)
 800bdd0:	fba2 2303 	umull	r2, r3, r2, r3
 800bdd4:	095b      	lsrs	r3, r3, #5
 800bdd6:	f003 0207 	and.w	r2, r3, #7
 800bdda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	4422      	add	r2, r4
 800bde2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bde4:	e106      	b.n	800bff4 <UART_SetConfig+0x4d8>
 800bde6:	bf00      	nop
 800bde8:	40011000 	.word	0x40011000
 800bdec:	40011400 	.word	0x40011400
 800bdf0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bdf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bdfe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800be02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800be06:	4642      	mov	r2, r8
 800be08:	464b      	mov	r3, r9
 800be0a:	1891      	adds	r1, r2, r2
 800be0c:	6239      	str	r1, [r7, #32]
 800be0e:	415b      	adcs	r3, r3
 800be10:	627b      	str	r3, [r7, #36]	; 0x24
 800be12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800be16:	4641      	mov	r1, r8
 800be18:	1854      	adds	r4, r2, r1
 800be1a:	4649      	mov	r1, r9
 800be1c:	eb43 0501 	adc.w	r5, r3, r1
 800be20:	f04f 0200 	mov.w	r2, #0
 800be24:	f04f 0300 	mov.w	r3, #0
 800be28:	00eb      	lsls	r3, r5, #3
 800be2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800be2e:	00e2      	lsls	r2, r4, #3
 800be30:	4614      	mov	r4, r2
 800be32:	461d      	mov	r5, r3
 800be34:	4643      	mov	r3, r8
 800be36:	18e3      	adds	r3, r4, r3
 800be38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800be3c:	464b      	mov	r3, r9
 800be3e:	eb45 0303 	adc.w	r3, r5, r3
 800be42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800be46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be4a:	685b      	ldr	r3, [r3, #4]
 800be4c:	2200      	movs	r2, #0
 800be4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800be52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800be56:	f04f 0200 	mov.w	r2, #0
 800be5a:	f04f 0300 	mov.w	r3, #0
 800be5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800be62:	4629      	mov	r1, r5
 800be64:	008b      	lsls	r3, r1, #2
 800be66:	4621      	mov	r1, r4
 800be68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800be6c:	4621      	mov	r1, r4
 800be6e:	008a      	lsls	r2, r1, #2
 800be70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800be74:	f7f4 fec8 	bl	8000c08 <__aeabi_uldivmod>
 800be78:	4602      	mov	r2, r0
 800be7a:	460b      	mov	r3, r1
 800be7c:	4b60      	ldr	r3, [pc, #384]	; (800c000 <UART_SetConfig+0x4e4>)
 800be7e:	fba3 2302 	umull	r2, r3, r3, r2
 800be82:	095b      	lsrs	r3, r3, #5
 800be84:	011c      	lsls	r4, r3, #4
 800be86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800be8a:	2200      	movs	r2, #0
 800be8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800be90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800be94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800be98:	4642      	mov	r2, r8
 800be9a:	464b      	mov	r3, r9
 800be9c:	1891      	adds	r1, r2, r2
 800be9e:	61b9      	str	r1, [r7, #24]
 800bea0:	415b      	adcs	r3, r3
 800bea2:	61fb      	str	r3, [r7, #28]
 800bea4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bea8:	4641      	mov	r1, r8
 800beaa:	1851      	adds	r1, r2, r1
 800beac:	6139      	str	r1, [r7, #16]
 800beae:	4649      	mov	r1, r9
 800beb0:	414b      	adcs	r3, r1
 800beb2:	617b      	str	r3, [r7, #20]
 800beb4:	f04f 0200 	mov.w	r2, #0
 800beb8:	f04f 0300 	mov.w	r3, #0
 800bebc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bec0:	4659      	mov	r1, fp
 800bec2:	00cb      	lsls	r3, r1, #3
 800bec4:	4651      	mov	r1, sl
 800bec6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800beca:	4651      	mov	r1, sl
 800becc:	00ca      	lsls	r2, r1, #3
 800bece:	4610      	mov	r0, r2
 800bed0:	4619      	mov	r1, r3
 800bed2:	4603      	mov	r3, r0
 800bed4:	4642      	mov	r2, r8
 800bed6:	189b      	adds	r3, r3, r2
 800bed8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bedc:	464b      	mov	r3, r9
 800bede:	460a      	mov	r2, r1
 800bee0:	eb42 0303 	adc.w	r3, r2, r3
 800bee4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800beec:	685b      	ldr	r3, [r3, #4]
 800beee:	2200      	movs	r2, #0
 800bef0:	67bb      	str	r3, [r7, #120]	; 0x78
 800bef2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bef4:	f04f 0200 	mov.w	r2, #0
 800bef8:	f04f 0300 	mov.w	r3, #0
 800befc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bf00:	4649      	mov	r1, r9
 800bf02:	008b      	lsls	r3, r1, #2
 800bf04:	4641      	mov	r1, r8
 800bf06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bf0a:	4641      	mov	r1, r8
 800bf0c:	008a      	lsls	r2, r1, #2
 800bf0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bf12:	f7f4 fe79 	bl	8000c08 <__aeabi_uldivmod>
 800bf16:	4602      	mov	r2, r0
 800bf18:	460b      	mov	r3, r1
 800bf1a:	4611      	mov	r1, r2
 800bf1c:	4b38      	ldr	r3, [pc, #224]	; (800c000 <UART_SetConfig+0x4e4>)
 800bf1e:	fba3 2301 	umull	r2, r3, r3, r1
 800bf22:	095b      	lsrs	r3, r3, #5
 800bf24:	2264      	movs	r2, #100	; 0x64
 800bf26:	fb02 f303 	mul.w	r3, r2, r3
 800bf2a:	1acb      	subs	r3, r1, r3
 800bf2c:	011b      	lsls	r3, r3, #4
 800bf2e:	3332      	adds	r3, #50	; 0x32
 800bf30:	4a33      	ldr	r2, [pc, #204]	; (800c000 <UART_SetConfig+0x4e4>)
 800bf32:	fba2 2303 	umull	r2, r3, r2, r3
 800bf36:	095b      	lsrs	r3, r3, #5
 800bf38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf3c:	441c      	add	r4, r3
 800bf3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bf42:	2200      	movs	r2, #0
 800bf44:	673b      	str	r3, [r7, #112]	; 0x70
 800bf46:	677a      	str	r2, [r7, #116]	; 0x74
 800bf48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bf4c:	4642      	mov	r2, r8
 800bf4e:	464b      	mov	r3, r9
 800bf50:	1891      	adds	r1, r2, r2
 800bf52:	60b9      	str	r1, [r7, #8]
 800bf54:	415b      	adcs	r3, r3
 800bf56:	60fb      	str	r3, [r7, #12]
 800bf58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bf5c:	4641      	mov	r1, r8
 800bf5e:	1851      	adds	r1, r2, r1
 800bf60:	6039      	str	r1, [r7, #0]
 800bf62:	4649      	mov	r1, r9
 800bf64:	414b      	adcs	r3, r1
 800bf66:	607b      	str	r3, [r7, #4]
 800bf68:	f04f 0200 	mov.w	r2, #0
 800bf6c:	f04f 0300 	mov.w	r3, #0
 800bf70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bf74:	4659      	mov	r1, fp
 800bf76:	00cb      	lsls	r3, r1, #3
 800bf78:	4651      	mov	r1, sl
 800bf7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bf7e:	4651      	mov	r1, sl
 800bf80:	00ca      	lsls	r2, r1, #3
 800bf82:	4610      	mov	r0, r2
 800bf84:	4619      	mov	r1, r3
 800bf86:	4603      	mov	r3, r0
 800bf88:	4642      	mov	r2, r8
 800bf8a:	189b      	adds	r3, r3, r2
 800bf8c:	66bb      	str	r3, [r7, #104]	; 0x68
 800bf8e:	464b      	mov	r3, r9
 800bf90:	460a      	mov	r2, r1
 800bf92:	eb42 0303 	adc.w	r3, r2, r3
 800bf96:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bf98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf9c:	685b      	ldr	r3, [r3, #4]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	663b      	str	r3, [r7, #96]	; 0x60
 800bfa2:	667a      	str	r2, [r7, #100]	; 0x64
 800bfa4:	f04f 0200 	mov.w	r2, #0
 800bfa8:	f04f 0300 	mov.w	r3, #0
 800bfac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bfb0:	4649      	mov	r1, r9
 800bfb2:	008b      	lsls	r3, r1, #2
 800bfb4:	4641      	mov	r1, r8
 800bfb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bfba:	4641      	mov	r1, r8
 800bfbc:	008a      	lsls	r2, r1, #2
 800bfbe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bfc2:	f7f4 fe21 	bl	8000c08 <__aeabi_uldivmod>
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	460b      	mov	r3, r1
 800bfca:	4b0d      	ldr	r3, [pc, #52]	; (800c000 <UART_SetConfig+0x4e4>)
 800bfcc:	fba3 1302 	umull	r1, r3, r3, r2
 800bfd0:	095b      	lsrs	r3, r3, #5
 800bfd2:	2164      	movs	r1, #100	; 0x64
 800bfd4:	fb01 f303 	mul.w	r3, r1, r3
 800bfd8:	1ad3      	subs	r3, r2, r3
 800bfda:	011b      	lsls	r3, r3, #4
 800bfdc:	3332      	adds	r3, #50	; 0x32
 800bfde:	4a08      	ldr	r2, [pc, #32]	; (800c000 <UART_SetConfig+0x4e4>)
 800bfe0:	fba2 2303 	umull	r2, r3, r2, r3
 800bfe4:	095b      	lsrs	r3, r3, #5
 800bfe6:	f003 020f 	and.w	r2, r3, #15
 800bfea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	4422      	add	r2, r4
 800bff2:	609a      	str	r2, [r3, #8]
}
 800bff4:	bf00      	nop
 800bff6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bffa:	46bd      	mov	sp, r7
 800bffc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c000:	51eb851f 	.word	0x51eb851f

0800c004 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 800c004:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c006:	2400      	movs	r4, #0
 800c008:	2310      	movs	r3, #16
 800c00a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c00e:	6803      	ldr	r3, [r0, #0]
 800c010:	4615      	mov	r5, r2
 800c012:	699e      	ldr	r6, [r3, #24]
 800c014:	6812      	ldr	r2, [r2, #0]
 800c016:	466b      	mov	r3, sp
 800c018:	e9cd 4400 	strd	r4, r4, [sp]
 800c01c:	47b0      	blx	r6
 800c01e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c022:	f003 0306 	and.w	r3, r3, #6
 800c026:	2b06      	cmp	r3, #6
 800c028:	bf03      	ittte	eq
 800c02a:	9b00      	ldreq	r3, [sp, #0]
 800c02c:	602b      	streq	r3, [r5, #0]
 800c02e:	2001      	moveq	r0, #1
 800c030:	4620      	movne	r0, r4
 800c032:	b004      	add	sp, #16
 800c034:	bd70      	pop	{r4, r5, r6, pc}

0800c036 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 800c036:	9800      	ldr	r0, [sp, #0]
 800c038:	4290      	cmp	r0, r2
 800c03a:	bf14      	ite	ne
 800c03c:	2001      	movne	r0, #1
 800c03e:	2006      	moveq	r0, #6
 800c040:	4770      	bx	lr
	...

0800c044 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 800c044:	b510      	push	{r4, lr}
 800c046:	4b03      	ldr	r3, [pc, #12]	; (800c054 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 800c048:	6003      	str	r3, [r0, #0]
 800c04a:	4604      	mov	r4, r0
 800c04c:	f000 f8e5 	bl	800c21a <_ZNSt9type_infoD1Ev>
 800c050:	4620      	mov	r0, r4
 800c052:	bd10      	pop	{r4, pc}
 800c054:	0800f814 	.word	0x0800f814

0800c058 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 800c058:	b510      	push	{r4, lr}
 800c05a:	4604      	mov	r4, r0
 800c05c:	f7ff fff2 	bl	800c044 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800c060:	4620      	mov	r0, r4
 800c062:	2108      	movs	r1, #8
 800c064:	f000 f842 	bl	800c0ec <_ZdlPvj>
 800c068:	4620      	mov	r0, r4
 800c06a:	bd10      	pop	{r4, pc}

0800c06c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 800c06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c070:	461f      	mov	r7, r3
 800c072:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800c076:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c07a:	4598      	cmp	r8, r3
 800c07c:	4606      	mov	r6, r0
 800c07e:	4615      	mov	r5, r2
 800c080:	d107      	bne.n	800c092 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 800c082:	9907      	ldr	r1, [sp, #28]
 800c084:	f000 f8cc 	bl	800c220 <_ZNKSt9type_infoeqERKS_>
 800c088:	b118      	cbz	r0, 800c092 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 800c08a:	7165      	strb	r5, [r4, #5]
 800c08c:	2000      	movs	r0, #0
 800c08e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c092:	4639      	mov	r1, r7
 800c094:	4630      	mov	r0, r6
 800c096:	f000 f8c3 	bl	800c220 <_ZNKSt9type_infoeqERKS_>
 800c09a:	2800      	cmp	r0, #0
 800c09c:	d0f6      	beq.n	800c08c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 800c09e:	2301      	movs	r3, #1
 800c0a0:	f8c4 8000 	str.w	r8, [r4]
 800c0a4:	7125      	strb	r5, [r4, #4]
 800c0a6:	71a3      	strb	r3, [r4, #6]
 800c0a8:	e7f0      	b.n	800c08c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

0800c0aa <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 800c0aa:	b538      	push	{r3, r4, r5, lr}
 800c0ac:	4615      	mov	r5, r2
 800c0ae:	461c      	mov	r4, r3
 800c0b0:	f000 f8b6 	bl	800c220 <_ZNKSt9type_infoeqERKS_>
 800c0b4:	b120      	cbz	r0, 800c0c0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 800c0b6:	2308      	movs	r3, #8
 800c0b8:	60e3      	str	r3, [r4, #12]
 800c0ba:	2306      	movs	r3, #6
 800c0bc:	6025      	str	r5, [r4, #0]
 800c0be:	7123      	strb	r3, [r4, #4]
 800c0c0:	bd38      	pop	{r3, r4, r5, pc}

0800c0c2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 800c0c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c0c4:	4605      	mov	r5, r0
 800c0c6:	460c      	mov	r4, r1
 800c0c8:	9201      	str	r2, [sp, #4]
 800c0ca:	461e      	mov	r6, r3
 800c0cc:	f000 f8a8 	bl	800c220 <_ZNKSt9type_infoeqERKS_>
 800c0d0:	b950      	cbnz	r0, 800c0e8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800c0d2:	2e03      	cmp	r6, #3
 800c0d4:	d808      	bhi.n	800c0e8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800c0d6:	6823      	ldr	r3, [r4, #0]
 800c0d8:	9a01      	ldr	r2, [sp, #4]
 800c0da:	695b      	ldr	r3, [r3, #20]
 800c0dc:	4629      	mov	r1, r5
 800c0de:	4620      	mov	r0, r4
 800c0e0:	b002      	add	sp, #8
 800c0e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c0e6:	4718      	bx	r3
 800c0e8:	b002      	add	sp, #8
 800c0ea:	bd70      	pop	{r4, r5, r6, pc}

0800c0ec <_ZdlPvj>:
 800c0ec:	f000 b8c0 	b.w	800c270 <_ZdlPv>

0800c0f0 <_ZdaPv>:
 800c0f0:	f000 b8be 	b.w	800c270 <_ZdlPv>

0800c0f4 <_Znwj>:
 800c0f4:	2801      	cmp	r0, #1
 800c0f6:	bf38      	it	cc
 800c0f8:	2001      	movcc	r0, #1
 800c0fa:	b510      	push	{r4, lr}
 800c0fc:	4604      	mov	r4, r0
 800c0fe:	4620      	mov	r0, r4
 800c100:	f000 f8c8 	bl	800c294 <malloc>
 800c104:	b100      	cbz	r0, 800c108 <_Znwj+0x14>
 800c106:	bd10      	pop	{r4, pc}
 800c108:	f000 f8b4 	bl	800c274 <_ZSt15get_new_handlerv>
 800c10c:	b908      	cbnz	r0, 800c112 <_Znwj+0x1e>
 800c10e:	f000 f8b9 	bl	800c284 <abort>
 800c112:	4780      	blx	r0
 800c114:	e7f3      	b.n	800c0fe <_Znwj+0xa>

0800c116 <_Znaj>:
 800c116:	f7ff bfed 	b.w	800c0f4 <_Znwj>
	...

0800c11c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 800c11c:	b510      	push	{r4, lr}
 800c11e:	4b03      	ldr	r3, [pc, #12]	; (800c12c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 800c120:	6003      	str	r3, [r0, #0]
 800c122:	4604      	mov	r4, r0
 800c124:	f7ff ff8e 	bl	800c044 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800c128:	4620      	mov	r0, r4
 800c12a:	bd10      	pop	{r4, pc}
 800c12c:	0800f874 	.word	0x0800f874

0800c130 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 800c130:	b510      	push	{r4, lr}
 800c132:	4604      	mov	r4, r0
 800c134:	f7ff fff2 	bl	800c11c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 800c138:	4620      	mov	r0, r4
 800c13a:	210c      	movs	r1, #12
 800c13c:	f7ff ffd6 	bl	800c0ec <_ZdlPvj>
 800c140:	4620      	mov	r0, r4
 800c142:	bd10      	pop	{r4, pc}

0800c144 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 800c144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c146:	9f08      	ldr	r7, [sp, #32]
 800c148:	4297      	cmp	r7, r2
 800c14a:	4605      	mov	r5, r0
 800c14c:	460e      	mov	r6, r1
 800c14e:	4614      	mov	r4, r2
 800c150:	d00a      	beq.n	800c168 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 800c152:	68a8      	ldr	r0, [r5, #8]
 800c154:	6802      	ldr	r2, [r0, #0]
 800c156:	9708      	str	r7, [sp, #32]
 800c158:	6a15      	ldr	r5, [r2, #32]
 800c15a:	4631      	mov	r1, r6
 800c15c:	4622      	mov	r2, r4
 800c15e:	46ac      	mov	ip, r5
 800c160:	b003      	add	sp, #12
 800c162:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c166:	4760      	bx	ip
 800c168:	4619      	mov	r1, r3
 800c16a:	9301      	str	r3, [sp, #4]
 800c16c:	f000 f858 	bl	800c220 <_ZNKSt9type_infoeqERKS_>
 800c170:	9b01      	ldr	r3, [sp, #4]
 800c172:	2800      	cmp	r0, #0
 800c174:	d0ed      	beq.n	800c152 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 800c176:	2006      	movs	r0, #6
 800c178:	b003      	add	sp, #12
 800c17a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c17c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 800c17c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c180:	460d      	mov	r5, r1
 800c182:	4619      	mov	r1, r3
 800c184:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 800c188:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 800c18c:	4681      	mov	r9, r0
 800c18e:	4617      	mov	r7, r2
 800c190:	4698      	mov	r8, r3
 800c192:	f000 f845 	bl	800c220 <_ZNKSt9type_infoeqERKS_>
 800c196:	b190      	cbz	r0, 800c1be <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 800c198:	2d00      	cmp	r5, #0
 800c19a:	6034      	str	r4, [r6, #0]
 800c19c:	7137      	strb	r7, [r6, #4]
 800c19e:	db09      	blt.n	800c1b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 800c1a0:	1961      	adds	r1, r4, r5
 800c1a2:	458a      	cmp	sl, r1
 800c1a4:	bf0c      	ite	eq
 800c1a6:	2106      	moveq	r1, #6
 800c1a8:	2101      	movne	r1, #1
 800c1aa:	71b1      	strb	r1, [r6, #6]
 800c1ac:	2000      	movs	r0, #0
 800c1ae:	b001      	add	sp, #4
 800c1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1b4:	3502      	adds	r5, #2
 800c1b6:	d1f9      	bne.n	800c1ac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	71b3      	strb	r3, [r6, #6]
 800c1bc:	e7f6      	b.n	800c1ac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800c1be:	4554      	cmp	r4, sl
 800c1c0:	d106      	bne.n	800c1d0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 800c1c2:	4659      	mov	r1, fp
 800c1c4:	4648      	mov	r0, r9
 800c1c6:	f000 f82b 	bl	800c220 <_ZNKSt9type_infoeqERKS_>
 800c1ca:	b108      	cbz	r0, 800c1d0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 800c1cc:	7177      	strb	r7, [r6, #5]
 800c1ce:	e7ed      	b.n	800c1ac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800c1d0:	f8d9 0008 	ldr.w	r0, [r9, #8]
 800c1d4:	6803      	ldr	r3, [r0, #0]
 800c1d6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 800c1da:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 800c1de:	69dc      	ldr	r4, [r3, #28]
 800c1e0:	463a      	mov	r2, r7
 800c1e2:	4643      	mov	r3, r8
 800c1e4:	4629      	mov	r1, r5
 800c1e6:	46a4      	mov	ip, r4
 800c1e8:	b001      	add	sp, #4
 800c1ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ee:	4760      	bx	ip

0800c1f0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 800c1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1f4:	4607      	mov	r7, r0
 800c1f6:	460c      	mov	r4, r1
 800c1f8:	4615      	mov	r5, r2
 800c1fa:	461e      	mov	r6, r3
 800c1fc:	f7ff ff55 	bl	800c0aa <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 800c200:	b948      	cbnz	r0, 800c216 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 800c202:	68b8      	ldr	r0, [r7, #8]
 800c204:	6803      	ldr	r3, [r0, #0]
 800c206:	699f      	ldr	r7, [r3, #24]
 800c208:	462a      	mov	r2, r5
 800c20a:	4633      	mov	r3, r6
 800c20c:	4621      	mov	r1, r4
 800c20e:	46bc      	mov	ip, r7
 800c210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c214:	4760      	bx	ip
 800c216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c21a <_ZNSt9type_infoD1Ev>:
 800c21a:	4770      	bx	lr

0800c21c <_ZNKSt9type_info14__is_pointer_pEv>:
 800c21c:	2000      	movs	r0, #0
 800c21e:	4770      	bx	lr

0800c220 <_ZNKSt9type_infoeqERKS_>:
 800c220:	4281      	cmp	r1, r0
 800c222:	b508      	push	{r3, lr}
 800c224:	d00e      	beq.n	800c244 <_ZNKSt9type_infoeqERKS_+0x24>
 800c226:	6840      	ldr	r0, [r0, #4]
 800c228:	7803      	ldrb	r3, [r0, #0]
 800c22a:	2b2a      	cmp	r3, #42	; 0x2a
 800c22c:	d00c      	beq.n	800c248 <_ZNKSt9type_infoeqERKS_+0x28>
 800c22e:	6849      	ldr	r1, [r1, #4]
 800c230:	780b      	ldrb	r3, [r1, #0]
 800c232:	2b2a      	cmp	r3, #42	; 0x2a
 800c234:	bf08      	it	eq
 800c236:	3101      	addeq	r1, #1
 800c238:	f7f3 ffea 	bl	8000210 <strcmp>
 800c23c:	fab0 f080 	clz	r0, r0
 800c240:	0940      	lsrs	r0, r0, #5
 800c242:	bd08      	pop	{r3, pc}
 800c244:	2001      	movs	r0, #1
 800c246:	e7fc      	b.n	800c242 <_ZNKSt9type_infoeqERKS_+0x22>
 800c248:	2000      	movs	r0, #0
 800c24a:	e7fa      	b.n	800c242 <_ZNKSt9type_infoeqERKS_+0x22>

0800c24c <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 800c24c:	684b      	ldr	r3, [r1, #4]
 800c24e:	6043      	str	r3, [r0, #4]
 800c250:	684b      	ldr	r3, [r1, #4]
 800c252:	6001      	str	r1, [r0, #0]
 800c254:	6018      	str	r0, [r3, #0]
 800c256:	6048      	str	r0, [r1, #4]
 800c258:	4770      	bx	lr

0800c25a <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 800c25a:	e9d0 3200 	ldrd	r3, r2, [r0]
 800c25e:	6013      	str	r3, [r2, #0]
 800c260:	605a      	str	r2, [r3, #4]
 800c262:	4770      	bx	lr

0800c264 <_ZSt17__throw_bad_allocv>:
 800c264:	b508      	push	{r3, lr}
 800c266:	f000 f80d 	bl	800c284 <abort>

0800c26a <_ZSt28__throw_bad_array_new_lengthv>:
 800c26a:	b508      	push	{r3, lr}
 800c26c:	f000 f80a 	bl	800c284 <abort>

0800c270 <_ZdlPv>:
 800c270:	f000 b818 	b.w	800c2a4 <free>

0800c274 <_ZSt15get_new_handlerv>:
 800c274:	4b02      	ldr	r3, [pc, #8]	; (800c280 <_ZSt15get_new_handlerv+0xc>)
 800c276:	6818      	ldr	r0, [r3, #0]
 800c278:	f3bf 8f5b 	dmb	ish
 800c27c:	4770      	bx	lr
 800c27e:	bf00      	nop
 800c280:	200004cc 	.word	0x200004cc

0800c284 <abort>:
 800c284:	b508      	push	{r3, lr}
 800c286:	2006      	movs	r0, #6
 800c288:	f000 fe7c 	bl	800cf84 <raise>
 800c28c:	2001      	movs	r0, #1
 800c28e:	f7fb fb61 	bl	8007954 <_exit>
	...

0800c294 <malloc>:
 800c294:	4b02      	ldr	r3, [pc, #8]	; (800c2a0 <malloc+0xc>)
 800c296:	4601      	mov	r1, r0
 800c298:	6818      	ldr	r0, [r3, #0]
 800c29a:	f000 b82b 	b.w	800c2f4 <_malloc_r>
 800c29e:	bf00      	nop
 800c2a0:	20000114 	.word	0x20000114

0800c2a4 <free>:
 800c2a4:	4b02      	ldr	r3, [pc, #8]	; (800c2b0 <free+0xc>)
 800c2a6:	4601      	mov	r1, r0
 800c2a8:	6818      	ldr	r0, [r3, #0]
 800c2aa:	f001 bd97 	b.w	800dddc <_free_r>
 800c2ae:	bf00      	nop
 800c2b0:	20000114 	.word	0x20000114

0800c2b4 <sbrk_aligned>:
 800c2b4:	b570      	push	{r4, r5, r6, lr}
 800c2b6:	4e0e      	ldr	r6, [pc, #56]	; (800c2f0 <sbrk_aligned+0x3c>)
 800c2b8:	460c      	mov	r4, r1
 800c2ba:	6831      	ldr	r1, [r6, #0]
 800c2bc:	4605      	mov	r5, r0
 800c2be:	b911      	cbnz	r1, 800c2c6 <sbrk_aligned+0x12>
 800c2c0:	f000 feb4 	bl	800d02c <_sbrk_r>
 800c2c4:	6030      	str	r0, [r6, #0]
 800c2c6:	4621      	mov	r1, r4
 800c2c8:	4628      	mov	r0, r5
 800c2ca:	f000 feaf 	bl	800d02c <_sbrk_r>
 800c2ce:	1c43      	adds	r3, r0, #1
 800c2d0:	d00a      	beq.n	800c2e8 <sbrk_aligned+0x34>
 800c2d2:	1cc4      	adds	r4, r0, #3
 800c2d4:	f024 0403 	bic.w	r4, r4, #3
 800c2d8:	42a0      	cmp	r0, r4
 800c2da:	d007      	beq.n	800c2ec <sbrk_aligned+0x38>
 800c2dc:	1a21      	subs	r1, r4, r0
 800c2de:	4628      	mov	r0, r5
 800c2e0:	f000 fea4 	bl	800d02c <_sbrk_r>
 800c2e4:	3001      	adds	r0, #1
 800c2e6:	d101      	bne.n	800c2ec <sbrk_aligned+0x38>
 800c2e8:	f04f 34ff 	mov.w	r4, #4294967295
 800c2ec:	4620      	mov	r0, r4
 800c2ee:	bd70      	pop	{r4, r5, r6, pc}
 800c2f0:	200004d4 	.word	0x200004d4

0800c2f4 <_malloc_r>:
 800c2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2f8:	1ccd      	adds	r5, r1, #3
 800c2fa:	f025 0503 	bic.w	r5, r5, #3
 800c2fe:	3508      	adds	r5, #8
 800c300:	2d0c      	cmp	r5, #12
 800c302:	bf38      	it	cc
 800c304:	250c      	movcc	r5, #12
 800c306:	2d00      	cmp	r5, #0
 800c308:	4607      	mov	r7, r0
 800c30a:	db01      	blt.n	800c310 <_malloc_r+0x1c>
 800c30c:	42a9      	cmp	r1, r5
 800c30e:	d905      	bls.n	800c31c <_malloc_r+0x28>
 800c310:	230c      	movs	r3, #12
 800c312:	603b      	str	r3, [r7, #0]
 800c314:	2600      	movs	r6, #0
 800c316:	4630      	mov	r0, r6
 800c318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c31c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c3f0 <_malloc_r+0xfc>
 800c320:	f000 f868 	bl	800c3f4 <__malloc_lock>
 800c324:	f8d8 3000 	ldr.w	r3, [r8]
 800c328:	461c      	mov	r4, r3
 800c32a:	bb5c      	cbnz	r4, 800c384 <_malloc_r+0x90>
 800c32c:	4629      	mov	r1, r5
 800c32e:	4638      	mov	r0, r7
 800c330:	f7ff ffc0 	bl	800c2b4 <sbrk_aligned>
 800c334:	1c43      	adds	r3, r0, #1
 800c336:	4604      	mov	r4, r0
 800c338:	d155      	bne.n	800c3e6 <_malloc_r+0xf2>
 800c33a:	f8d8 4000 	ldr.w	r4, [r8]
 800c33e:	4626      	mov	r6, r4
 800c340:	2e00      	cmp	r6, #0
 800c342:	d145      	bne.n	800c3d0 <_malloc_r+0xdc>
 800c344:	2c00      	cmp	r4, #0
 800c346:	d048      	beq.n	800c3da <_malloc_r+0xe6>
 800c348:	6823      	ldr	r3, [r4, #0]
 800c34a:	4631      	mov	r1, r6
 800c34c:	4638      	mov	r0, r7
 800c34e:	eb04 0903 	add.w	r9, r4, r3
 800c352:	f000 fe6b 	bl	800d02c <_sbrk_r>
 800c356:	4581      	cmp	r9, r0
 800c358:	d13f      	bne.n	800c3da <_malloc_r+0xe6>
 800c35a:	6821      	ldr	r1, [r4, #0]
 800c35c:	1a6d      	subs	r5, r5, r1
 800c35e:	4629      	mov	r1, r5
 800c360:	4638      	mov	r0, r7
 800c362:	f7ff ffa7 	bl	800c2b4 <sbrk_aligned>
 800c366:	3001      	adds	r0, #1
 800c368:	d037      	beq.n	800c3da <_malloc_r+0xe6>
 800c36a:	6823      	ldr	r3, [r4, #0]
 800c36c:	442b      	add	r3, r5
 800c36e:	6023      	str	r3, [r4, #0]
 800c370:	f8d8 3000 	ldr.w	r3, [r8]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d038      	beq.n	800c3ea <_malloc_r+0xf6>
 800c378:	685a      	ldr	r2, [r3, #4]
 800c37a:	42a2      	cmp	r2, r4
 800c37c:	d12b      	bne.n	800c3d6 <_malloc_r+0xe2>
 800c37e:	2200      	movs	r2, #0
 800c380:	605a      	str	r2, [r3, #4]
 800c382:	e00f      	b.n	800c3a4 <_malloc_r+0xb0>
 800c384:	6822      	ldr	r2, [r4, #0]
 800c386:	1b52      	subs	r2, r2, r5
 800c388:	d41f      	bmi.n	800c3ca <_malloc_r+0xd6>
 800c38a:	2a0b      	cmp	r2, #11
 800c38c:	d917      	bls.n	800c3be <_malloc_r+0xca>
 800c38e:	1961      	adds	r1, r4, r5
 800c390:	42a3      	cmp	r3, r4
 800c392:	6025      	str	r5, [r4, #0]
 800c394:	bf18      	it	ne
 800c396:	6059      	strne	r1, [r3, #4]
 800c398:	6863      	ldr	r3, [r4, #4]
 800c39a:	bf08      	it	eq
 800c39c:	f8c8 1000 	streq.w	r1, [r8]
 800c3a0:	5162      	str	r2, [r4, r5]
 800c3a2:	604b      	str	r3, [r1, #4]
 800c3a4:	4638      	mov	r0, r7
 800c3a6:	f104 060b 	add.w	r6, r4, #11
 800c3aa:	f000 f829 	bl	800c400 <__malloc_unlock>
 800c3ae:	f026 0607 	bic.w	r6, r6, #7
 800c3b2:	1d23      	adds	r3, r4, #4
 800c3b4:	1af2      	subs	r2, r6, r3
 800c3b6:	d0ae      	beq.n	800c316 <_malloc_r+0x22>
 800c3b8:	1b9b      	subs	r3, r3, r6
 800c3ba:	50a3      	str	r3, [r4, r2]
 800c3bc:	e7ab      	b.n	800c316 <_malloc_r+0x22>
 800c3be:	42a3      	cmp	r3, r4
 800c3c0:	6862      	ldr	r2, [r4, #4]
 800c3c2:	d1dd      	bne.n	800c380 <_malloc_r+0x8c>
 800c3c4:	f8c8 2000 	str.w	r2, [r8]
 800c3c8:	e7ec      	b.n	800c3a4 <_malloc_r+0xb0>
 800c3ca:	4623      	mov	r3, r4
 800c3cc:	6864      	ldr	r4, [r4, #4]
 800c3ce:	e7ac      	b.n	800c32a <_malloc_r+0x36>
 800c3d0:	4634      	mov	r4, r6
 800c3d2:	6876      	ldr	r6, [r6, #4]
 800c3d4:	e7b4      	b.n	800c340 <_malloc_r+0x4c>
 800c3d6:	4613      	mov	r3, r2
 800c3d8:	e7cc      	b.n	800c374 <_malloc_r+0x80>
 800c3da:	230c      	movs	r3, #12
 800c3dc:	603b      	str	r3, [r7, #0]
 800c3de:	4638      	mov	r0, r7
 800c3e0:	f000 f80e 	bl	800c400 <__malloc_unlock>
 800c3e4:	e797      	b.n	800c316 <_malloc_r+0x22>
 800c3e6:	6025      	str	r5, [r4, #0]
 800c3e8:	e7dc      	b.n	800c3a4 <_malloc_r+0xb0>
 800c3ea:	605b      	str	r3, [r3, #4]
 800c3ec:	deff      	udf	#255	; 0xff
 800c3ee:	bf00      	nop
 800c3f0:	200004d0 	.word	0x200004d0

0800c3f4 <__malloc_lock>:
 800c3f4:	4801      	ldr	r0, [pc, #4]	; (800c3fc <__malloc_lock+0x8>)
 800c3f6:	f000 be66 	b.w	800d0c6 <__retarget_lock_acquire_recursive>
 800c3fa:	bf00      	nop
 800c3fc:	20000618 	.word	0x20000618

0800c400 <__malloc_unlock>:
 800c400:	4801      	ldr	r0, [pc, #4]	; (800c408 <__malloc_unlock+0x8>)
 800c402:	f000 be61 	b.w	800d0c8 <__retarget_lock_release_recursive>
 800c406:	bf00      	nop
 800c408:	20000618 	.word	0x20000618

0800c40c <__cvt>:
 800c40c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c410:	ec55 4b10 	vmov	r4, r5, d0
 800c414:	2d00      	cmp	r5, #0
 800c416:	460e      	mov	r6, r1
 800c418:	4619      	mov	r1, r3
 800c41a:	462b      	mov	r3, r5
 800c41c:	bfbb      	ittet	lt
 800c41e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c422:	461d      	movlt	r5, r3
 800c424:	2300      	movge	r3, #0
 800c426:	232d      	movlt	r3, #45	; 0x2d
 800c428:	700b      	strb	r3, [r1, #0]
 800c42a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c42c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c430:	4691      	mov	r9, r2
 800c432:	f023 0820 	bic.w	r8, r3, #32
 800c436:	bfbc      	itt	lt
 800c438:	4622      	movlt	r2, r4
 800c43a:	4614      	movlt	r4, r2
 800c43c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c440:	d005      	beq.n	800c44e <__cvt+0x42>
 800c442:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c446:	d100      	bne.n	800c44a <__cvt+0x3e>
 800c448:	3601      	adds	r6, #1
 800c44a:	2102      	movs	r1, #2
 800c44c:	e000      	b.n	800c450 <__cvt+0x44>
 800c44e:	2103      	movs	r1, #3
 800c450:	ab03      	add	r3, sp, #12
 800c452:	9301      	str	r3, [sp, #4]
 800c454:	ab02      	add	r3, sp, #8
 800c456:	9300      	str	r3, [sp, #0]
 800c458:	ec45 4b10 	vmov	d0, r4, r5
 800c45c:	4653      	mov	r3, sl
 800c45e:	4632      	mov	r2, r6
 800c460:	f000 feca 	bl	800d1f8 <_dtoa_r>
 800c464:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c468:	4607      	mov	r7, r0
 800c46a:	d102      	bne.n	800c472 <__cvt+0x66>
 800c46c:	f019 0f01 	tst.w	r9, #1
 800c470:	d022      	beq.n	800c4b8 <__cvt+0xac>
 800c472:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c476:	eb07 0906 	add.w	r9, r7, r6
 800c47a:	d110      	bne.n	800c49e <__cvt+0x92>
 800c47c:	783b      	ldrb	r3, [r7, #0]
 800c47e:	2b30      	cmp	r3, #48	; 0x30
 800c480:	d10a      	bne.n	800c498 <__cvt+0x8c>
 800c482:	2200      	movs	r2, #0
 800c484:	2300      	movs	r3, #0
 800c486:	4620      	mov	r0, r4
 800c488:	4629      	mov	r1, r5
 800c48a:	f7f4 fb4d 	bl	8000b28 <__aeabi_dcmpeq>
 800c48e:	b918      	cbnz	r0, 800c498 <__cvt+0x8c>
 800c490:	f1c6 0601 	rsb	r6, r6, #1
 800c494:	f8ca 6000 	str.w	r6, [sl]
 800c498:	f8da 3000 	ldr.w	r3, [sl]
 800c49c:	4499      	add	r9, r3
 800c49e:	2200      	movs	r2, #0
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	4620      	mov	r0, r4
 800c4a4:	4629      	mov	r1, r5
 800c4a6:	f7f4 fb3f 	bl	8000b28 <__aeabi_dcmpeq>
 800c4aa:	b108      	cbz	r0, 800c4b0 <__cvt+0xa4>
 800c4ac:	f8cd 900c 	str.w	r9, [sp, #12]
 800c4b0:	2230      	movs	r2, #48	; 0x30
 800c4b2:	9b03      	ldr	r3, [sp, #12]
 800c4b4:	454b      	cmp	r3, r9
 800c4b6:	d307      	bcc.n	800c4c8 <__cvt+0xbc>
 800c4b8:	9b03      	ldr	r3, [sp, #12]
 800c4ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c4bc:	1bdb      	subs	r3, r3, r7
 800c4be:	4638      	mov	r0, r7
 800c4c0:	6013      	str	r3, [r2, #0]
 800c4c2:	b004      	add	sp, #16
 800c4c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4c8:	1c59      	adds	r1, r3, #1
 800c4ca:	9103      	str	r1, [sp, #12]
 800c4cc:	701a      	strb	r2, [r3, #0]
 800c4ce:	e7f0      	b.n	800c4b2 <__cvt+0xa6>

0800c4d0 <__exponent>:
 800c4d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	2900      	cmp	r1, #0
 800c4d6:	bfb8      	it	lt
 800c4d8:	4249      	neglt	r1, r1
 800c4da:	f803 2b02 	strb.w	r2, [r3], #2
 800c4de:	bfb4      	ite	lt
 800c4e0:	222d      	movlt	r2, #45	; 0x2d
 800c4e2:	222b      	movge	r2, #43	; 0x2b
 800c4e4:	2909      	cmp	r1, #9
 800c4e6:	7042      	strb	r2, [r0, #1]
 800c4e8:	dd2a      	ble.n	800c540 <__exponent+0x70>
 800c4ea:	f10d 0207 	add.w	r2, sp, #7
 800c4ee:	4617      	mov	r7, r2
 800c4f0:	260a      	movs	r6, #10
 800c4f2:	4694      	mov	ip, r2
 800c4f4:	fb91 f5f6 	sdiv	r5, r1, r6
 800c4f8:	fb06 1415 	mls	r4, r6, r5, r1
 800c4fc:	3430      	adds	r4, #48	; 0x30
 800c4fe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c502:	460c      	mov	r4, r1
 800c504:	2c63      	cmp	r4, #99	; 0x63
 800c506:	f102 32ff 	add.w	r2, r2, #4294967295
 800c50a:	4629      	mov	r1, r5
 800c50c:	dcf1      	bgt.n	800c4f2 <__exponent+0x22>
 800c50e:	3130      	adds	r1, #48	; 0x30
 800c510:	f1ac 0402 	sub.w	r4, ip, #2
 800c514:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c518:	1c41      	adds	r1, r0, #1
 800c51a:	4622      	mov	r2, r4
 800c51c:	42ba      	cmp	r2, r7
 800c51e:	d30a      	bcc.n	800c536 <__exponent+0x66>
 800c520:	f10d 0209 	add.w	r2, sp, #9
 800c524:	eba2 020c 	sub.w	r2, r2, ip
 800c528:	42bc      	cmp	r4, r7
 800c52a:	bf88      	it	hi
 800c52c:	2200      	movhi	r2, #0
 800c52e:	4413      	add	r3, r2
 800c530:	1a18      	subs	r0, r3, r0
 800c532:	b003      	add	sp, #12
 800c534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c536:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c53a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c53e:	e7ed      	b.n	800c51c <__exponent+0x4c>
 800c540:	2330      	movs	r3, #48	; 0x30
 800c542:	3130      	adds	r1, #48	; 0x30
 800c544:	7083      	strb	r3, [r0, #2]
 800c546:	70c1      	strb	r1, [r0, #3]
 800c548:	1d03      	adds	r3, r0, #4
 800c54a:	e7f1      	b.n	800c530 <__exponent+0x60>

0800c54c <_printf_float>:
 800c54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c550:	ed2d 8b02 	vpush	{d8}
 800c554:	b08d      	sub	sp, #52	; 0x34
 800c556:	460c      	mov	r4, r1
 800c558:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c55c:	4616      	mov	r6, r2
 800c55e:	461f      	mov	r7, r3
 800c560:	4605      	mov	r5, r0
 800c562:	f000 fd17 	bl	800cf94 <_localeconv_r>
 800c566:	f8d0 a000 	ldr.w	sl, [r0]
 800c56a:	4650      	mov	r0, sl
 800c56c:	f7f3 feb0 	bl	80002d0 <strlen>
 800c570:	2300      	movs	r3, #0
 800c572:	930a      	str	r3, [sp, #40]	; 0x28
 800c574:	6823      	ldr	r3, [r4, #0]
 800c576:	9305      	str	r3, [sp, #20]
 800c578:	f8d8 3000 	ldr.w	r3, [r8]
 800c57c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c580:	3307      	adds	r3, #7
 800c582:	f023 0307 	bic.w	r3, r3, #7
 800c586:	f103 0208 	add.w	r2, r3, #8
 800c58a:	f8c8 2000 	str.w	r2, [r8]
 800c58e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c592:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c596:	9307      	str	r3, [sp, #28]
 800c598:	f8cd 8018 	str.w	r8, [sp, #24]
 800c59c:	ee08 0a10 	vmov	s16, r0
 800c5a0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800c5a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c5a8:	4b9e      	ldr	r3, [pc, #632]	; (800c824 <_printf_float+0x2d8>)
 800c5aa:	f04f 32ff 	mov.w	r2, #4294967295
 800c5ae:	f7f4 faed 	bl	8000b8c <__aeabi_dcmpun>
 800c5b2:	bb88      	cbnz	r0, 800c618 <_printf_float+0xcc>
 800c5b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c5b8:	4b9a      	ldr	r3, [pc, #616]	; (800c824 <_printf_float+0x2d8>)
 800c5ba:	f04f 32ff 	mov.w	r2, #4294967295
 800c5be:	f7f4 fac7 	bl	8000b50 <__aeabi_dcmple>
 800c5c2:	bb48      	cbnz	r0, 800c618 <_printf_float+0xcc>
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	4640      	mov	r0, r8
 800c5ca:	4649      	mov	r1, r9
 800c5cc:	f7f4 fab6 	bl	8000b3c <__aeabi_dcmplt>
 800c5d0:	b110      	cbz	r0, 800c5d8 <_printf_float+0x8c>
 800c5d2:	232d      	movs	r3, #45	; 0x2d
 800c5d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5d8:	4a93      	ldr	r2, [pc, #588]	; (800c828 <_printf_float+0x2dc>)
 800c5da:	4b94      	ldr	r3, [pc, #592]	; (800c82c <_printf_float+0x2e0>)
 800c5dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c5e0:	bf94      	ite	ls
 800c5e2:	4690      	movls	r8, r2
 800c5e4:	4698      	movhi	r8, r3
 800c5e6:	2303      	movs	r3, #3
 800c5e8:	6123      	str	r3, [r4, #16]
 800c5ea:	9b05      	ldr	r3, [sp, #20]
 800c5ec:	f023 0304 	bic.w	r3, r3, #4
 800c5f0:	6023      	str	r3, [r4, #0]
 800c5f2:	f04f 0900 	mov.w	r9, #0
 800c5f6:	9700      	str	r7, [sp, #0]
 800c5f8:	4633      	mov	r3, r6
 800c5fa:	aa0b      	add	r2, sp, #44	; 0x2c
 800c5fc:	4621      	mov	r1, r4
 800c5fe:	4628      	mov	r0, r5
 800c600:	f000 f9da 	bl	800c9b8 <_printf_common>
 800c604:	3001      	adds	r0, #1
 800c606:	f040 8090 	bne.w	800c72a <_printf_float+0x1de>
 800c60a:	f04f 30ff 	mov.w	r0, #4294967295
 800c60e:	b00d      	add	sp, #52	; 0x34
 800c610:	ecbd 8b02 	vpop	{d8}
 800c614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c618:	4642      	mov	r2, r8
 800c61a:	464b      	mov	r3, r9
 800c61c:	4640      	mov	r0, r8
 800c61e:	4649      	mov	r1, r9
 800c620:	f7f4 fab4 	bl	8000b8c <__aeabi_dcmpun>
 800c624:	b140      	cbz	r0, 800c638 <_printf_float+0xec>
 800c626:	464b      	mov	r3, r9
 800c628:	2b00      	cmp	r3, #0
 800c62a:	bfbc      	itt	lt
 800c62c:	232d      	movlt	r3, #45	; 0x2d
 800c62e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c632:	4a7f      	ldr	r2, [pc, #508]	; (800c830 <_printf_float+0x2e4>)
 800c634:	4b7f      	ldr	r3, [pc, #508]	; (800c834 <_printf_float+0x2e8>)
 800c636:	e7d1      	b.n	800c5dc <_printf_float+0x90>
 800c638:	6863      	ldr	r3, [r4, #4]
 800c63a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c63e:	9206      	str	r2, [sp, #24]
 800c640:	1c5a      	adds	r2, r3, #1
 800c642:	d13f      	bne.n	800c6c4 <_printf_float+0x178>
 800c644:	2306      	movs	r3, #6
 800c646:	6063      	str	r3, [r4, #4]
 800c648:	9b05      	ldr	r3, [sp, #20]
 800c64a:	6861      	ldr	r1, [r4, #4]
 800c64c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c650:	2300      	movs	r3, #0
 800c652:	9303      	str	r3, [sp, #12]
 800c654:	ab0a      	add	r3, sp, #40	; 0x28
 800c656:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c65a:	ab09      	add	r3, sp, #36	; 0x24
 800c65c:	ec49 8b10 	vmov	d0, r8, r9
 800c660:	9300      	str	r3, [sp, #0]
 800c662:	6022      	str	r2, [r4, #0]
 800c664:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c668:	4628      	mov	r0, r5
 800c66a:	f7ff fecf 	bl	800c40c <__cvt>
 800c66e:	9b06      	ldr	r3, [sp, #24]
 800c670:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c672:	2b47      	cmp	r3, #71	; 0x47
 800c674:	4680      	mov	r8, r0
 800c676:	d108      	bne.n	800c68a <_printf_float+0x13e>
 800c678:	1cc8      	adds	r0, r1, #3
 800c67a:	db02      	blt.n	800c682 <_printf_float+0x136>
 800c67c:	6863      	ldr	r3, [r4, #4]
 800c67e:	4299      	cmp	r1, r3
 800c680:	dd41      	ble.n	800c706 <_printf_float+0x1ba>
 800c682:	f1ab 0302 	sub.w	r3, fp, #2
 800c686:	fa5f fb83 	uxtb.w	fp, r3
 800c68a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c68e:	d820      	bhi.n	800c6d2 <_printf_float+0x186>
 800c690:	3901      	subs	r1, #1
 800c692:	465a      	mov	r2, fp
 800c694:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c698:	9109      	str	r1, [sp, #36]	; 0x24
 800c69a:	f7ff ff19 	bl	800c4d0 <__exponent>
 800c69e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c6a0:	1813      	adds	r3, r2, r0
 800c6a2:	2a01      	cmp	r2, #1
 800c6a4:	4681      	mov	r9, r0
 800c6a6:	6123      	str	r3, [r4, #16]
 800c6a8:	dc02      	bgt.n	800c6b0 <_printf_float+0x164>
 800c6aa:	6822      	ldr	r2, [r4, #0]
 800c6ac:	07d2      	lsls	r2, r2, #31
 800c6ae:	d501      	bpl.n	800c6b4 <_printf_float+0x168>
 800c6b0:	3301      	adds	r3, #1
 800c6b2:	6123      	str	r3, [r4, #16]
 800c6b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d09c      	beq.n	800c5f6 <_printf_float+0xaa>
 800c6bc:	232d      	movs	r3, #45	; 0x2d
 800c6be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c6c2:	e798      	b.n	800c5f6 <_printf_float+0xaa>
 800c6c4:	9a06      	ldr	r2, [sp, #24]
 800c6c6:	2a47      	cmp	r2, #71	; 0x47
 800c6c8:	d1be      	bne.n	800c648 <_printf_float+0xfc>
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d1bc      	bne.n	800c648 <_printf_float+0xfc>
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	e7b9      	b.n	800c646 <_printf_float+0xfa>
 800c6d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c6d6:	d118      	bne.n	800c70a <_printf_float+0x1be>
 800c6d8:	2900      	cmp	r1, #0
 800c6da:	6863      	ldr	r3, [r4, #4]
 800c6dc:	dd0b      	ble.n	800c6f6 <_printf_float+0x1aa>
 800c6de:	6121      	str	r1, [r4, #16]
 800c6e0:	b913      	cbnz	r3, 800c6e8 <_printf_float+0x19c>
 800c6e2:	6822      	ldr	r2, [r4, #0]
 800c6e4:	07d0      	lsls	r0, r2, #31
 800c6e6:	d502      	bpl.n	800c6ee <_printf_float+0x1a2>
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	440b      	add	r3, r1
 800c6ec:	6123      	str	r3, [r4, #16]
 800c6ee:	65a1      	str	r1, [r4, #88]	; 0x58
 800c6f0:	f04f 0900 	mov.w	r9, #0
 800c6f4:	e7de      	b.n	800c6b4 <_printf_float+0x168>
 800c6f6:	b913      	cbnz	r3, 800c6fe <_printf_float+0x1b2>
 800c6f8:	6822      	ldr	r2, [r4, #0]
 800c6fa:	07d2      	lsls	r2, r2, #31
 800c6fc:	d501      	bpl.n	800c702 <_printf_float+0x1b6>
 800c6fe:	3302      	adds	r3, #2
 800c700:	e7f4      	b.n	800c6ec <_printf_float+0x1a0>
 800c702:	2301      	movs	r3, #1
 800c704:	e7f2      	b.n	800c6ec <_printf_float+0x1a0>
 800c706:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c70a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c70c:	4299      	cmp	r1, r3
 800c70e:	db05      	blt.n	800c71c <_printf_float+0x1d0>
 800c710:	6823      	ldr	r3, [r4, #0]
 800c712:	6121      	str	r1, [r4, #16]
 800c714:	07d8      	lsls	r0, r3, #31
 800c716:	d5ea      	bpl.n	800c6ee <_printf_float+0x1a2>
 800c718:	1c4b      	adds	r3, r1, #1
 800c71a:	e7e7      	b.n	800c6ec <_printf_float+0x1a0>
 800c71c:	2900      	cmp	r1, #0
 800c71e:	bfd4      	ite	le
 800c720:	f1c1 0202 	rsble	r2, r1, #2
 800c724:	2201      	movgt	r2, #1
 800c726:	4413      	add	r3, r2
 800c728:	e7e0      	b.n	800c6ec <_printf_float+0x1a0>
 800c72a:	6823      	ldr	r3, [r4, #0]
 800c72c:	055a      	lsls	r2, r3, #21
 800c72e:	d407      	bmi.n	800c740 <_printf_float+0x1f4>
 800c730:	6923      	ldr	r3, [r4, #16]
 800c732:	4642      	mov	r2, r8
 800c734:	4631      	mov	r1, r6
 800c736:	4628      	mov	r0, r5
 800c738:	47b8      	blx	r7
 800c73a:	3001      	adds	r0, #1
 800c73c:	d12c      	bne.n	800c798 <_printf_float+0x24c>
 800c73e:	e764      	b.n	800c60a <_printf_float+0xbe>
 800c740:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c744:	f240 80e0 	bls.w	800c908 <_printf_float+0x3bc>
 800c748:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c74c:	2200      	movs	r2, #0
 800c74e:	2300      	movs	r3, #0
 800c750:	f7f4 f9ea 	bl	8000b28 <__aeabi_dcmpeq>
 800c754:	2800      	cmp	r0, #0
 800c756:	d034      	beq.n	800c7c2 <_printf_float+0x276>
 800c758:	4a37      	ldr	r2, [pc, #220]	; (800c838 <_printf_float+0x2ec>)
 800c75a:	2301      	movs	r3, #1
 800c75c:	4631      	mov	r1, r6
 800c75e:	4628      	mov	r0, r5
 800c760:	47b8      	blx	r7
 800c762:	3001      	adds	r0, #1
 800c764:	f43f af51 	beq.w	800c60a <_printf_float+0xbe>
 800c768:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c76c:	429a      	cmp	r2, r3
 800c76e:	db02      	blt.n	800c776 <_printf_float+0x22a>
 800c770:	6823      	ldr	r3, [r4, #0]
 800c772:	07d8      	lsls	r0, r3, #31
 800c774:	d510      	bpl.n	800c798 <_printf_float+0x24c>
 800c776:	ee18 3a10 	vmov	r3, s16
 800c77a:	4652      	mov	r2, sl
 800c77c:	4631      	mov	r1, r6
 800c77e:	4628      	mov	r0, r5
 800c780:	47b8      	blx	r7
 800c782:	3001      	adds	r0, #1
 800c784:	f43f af41 	beq.w	800c60a <_printf_float+0xbe>
 800c788:	f04f 0800 	mov.w	r8, #0
 800c78c:	f104 091a 	add.w	r9, r4, #26
 800c790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c792:	3b01      	subs	r3, #1
 800c794:	4543      	cmp	r3, r8
 800c796:	dc09      	bgt.n	800c7ac <_printf_float+0x260>
 800c798:	6823      	ldr	r3, [r4, #0]
 800c79a:	079b      	lsls	r3, r3, #30
 800c79c:	f100 8107 	bmi.w	800c9ae <_printf_float+0x462>
 800c7a0:	68e0      	ldr	r0, [r4, #12]
 800c7a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7a4:	4298      	cmp	r0, r3
 800c7a6:	bfb8      	it	lt
 800c7a8:	4618      	movlt	r0, r3
 800c7aa:	e730      	b.n	800c60e <_printf_float+0xc2>
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	464a      	mov	r2, r9
 800c7b0:	4631      	mov	r1, r6
 800c7b2:	4628      	mov	r0, r5
 800c7b4:	47b8      	blx	r7
 800c7b6:	3001      	adds	r0, #1
 800c7b8:	f43f af27 	beq.w	800c60a <_printf_float+0xbe>
 800c7bc:	f108 0801 	add.w	r8, r8, #1
 800c7c0:	e7e6      	b.n	800c790 <_printf_float+0x244>
 800c7c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	dc39      	bgt.n	800c83c <_printf_float+0x2f0>
 800c7c8:	4a1b      	ldr	r2, [pc, #108]	; (800c838 <_printf_float+0x2ec>)
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	4631      	mov	r1, r6
 800c7ce:	4628      	mov	r0, r5
 800c7d0:	47b8      	blx	r7
 800c7d2:	3001      	adds	r0, #1
 800c7d4:	f43f af19 	beq.w	800c60a <_printf_float+0xbe>
 800c7d8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c7dc:	4313      	orrs	r3, r2
 800c7de:	d102      	bne.n	800c7e6 <_printf_float+0x29a>
 800c7e0:	6823      	ldr	r3, [r4, #0]
 800c7e2:	07d9      	lsls	r1, r3, #31
 800c7e4:	d5d8      	bpl.n	800c798 <_printf_float+0x24c>
 800c7e6:	ee18 3a10 	vmov	r3, s16
 800c7ea:	4652      	mov	r2, sl
 800c7ec:	4631      	mov	r1, r6
 800c7ee:	4628      	mov	r0, r5
 800c7f0:	47b8      	blx	r7
 800c7f2:	3001      	adds	r0, #1
 800c7f4:	f43f af09 	beq.w	800c60a <_printf_float+0xbe>
 800c7f8:	f04f 0900 	mov.w	r9, #0
 800c7fc:	f104 0a1a 	add.w	sl, r4, #26
 800c800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c802:	425b      	negs	r3, r3
 800c804:	454b      	cmp	r3, r9
 800c806:	dc01      	bgt.n	800c80c <_printf_float+0x2c0>
 800c808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c80a:	e792      	b.n	800c732 <_printf_float+0x1e6>
 800c80c:	2301      	movs	r3, #1
 800c80e:	4652      	mov	r2, sl
 800c810:	4631      	mov	r1, r6
 800c812:	4628      	mov	r0, r5
 800c814:	47b8      	blx	r7
 800c816:	3001      	adds	r0, #1
 800c818:	f43f aef7 	beq.w	800c60a <_printf_float+0xbe>
 800c81c:	f109 0901 	add.w	r9, r9, #1
 800c820:	e7ee      	b.n	800c800 <_printf_float+0x2b4>
 800c822:	bf00      	nop
 800c824:	7fefffff 	.word	0x7fefffff
 800c828:	0800f8ad 	.word	0x0800f8ad
 800c82c:	0800f8b1 	.word	0x0800f8b1
 800c830:	0800f8b5 	.word	0x0800f8b5
 800c834:	0800f8b9 	.word	0x0800f8b9
 800c838:	0800f8bd 	.word	0x0800f8bd
 800c83c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c83e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c840:	429a      	cmp	r2, r3
 800c842:	bfa8      	it	ge
 800c844:	461a      	movge	r2, r3
 800c846:	2a00      	cmp	r2, #0
 800c848:	4691      	mov	r9, r2
 800c84a:	dc37      	bgt.n	800c8bc <_printf_float+0x370>
 800c84c:	f04f 0b00 	mov.w	fp, #0
 800c850:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c854:	f104 021a 	add.w	r2, r4, #26
 800c858:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c85a:	9305      	str	r3, [sp, #20]
 800c85c:	eba3 0309 	sub.w	r3, r3, r9
 800c860:	455b      	cmp	r3, fp
 800c862:	dc33      	bgt.n	800c8cc <_printf_float+0x380>
 800c864:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c868:	429a      	cmp	r2, r3
 800c86a:	db3b      	blt.n	800c8e4 <_printf_float+0x398>
 800c86c:	6823      	ldr	r3, [r4, #0]
 800c86e:	07da      	lsls	r2, r3, #31
 800c870:	d438      	bmi.n	800c8e4 <_printf_float+0x398>
 800c872:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c876:	eba2 0903 	sub.w	r9, r2, r3
 800c87a:	9b05      	ldr	r3, [sp, #20]
 800c87c:	1ad2      	subs	r2, r2, r3
 800c87e:	4591      	cmp	r9, r2
 800c880:	bfa8      	it	ge
 800c882:	4691      	movge	r9, r2
 800c884:	f1b9 0f00 	cmp.w	r9, #0
 800c888:	dc35      	bgt.n	800c8f6 <_printf_float+0x3aa>
 800c88a:	f04f 0800 	mov.w	r8, #0
 800c88e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c892:	f104 0a1a 	add.w	sl, r4, #26
 800c896:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c89a:	1a9b      	subs	r3, r3, r2
 800c89c:	eba3 0309 	sub.w	r3, r3, r9
 800c8a0:	4543      	cmp	r3, r8
 800c8a2:	f77f af79 	ble.w	800c798 <_printf_float+0x24c>
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	4652      	mov	r2, sl
 800c8aa:	4631      	mov	r1, r6
 800c8ac:	4628      	mov	r0, r5
 800c8ae:	47b8      	blx	r7
 800c8b0:	3001      	adds	r0, #1
 800c8b2:	f43f aeaa 	beq.w	800c60a <_printf_float+0xbe>
 800c8b6:	f108 0801 	add.w	r8, r8, #1
 800c8ba:	e7ec      	b.n	800c896 <_printf_float+0x34a>
 800c8bc:	4613      	mov	r3, r2
 800c8be:	4631      	mov	r1, r6
 800c8c0:	4642      	mov	r2, r8
 800c8c2:	4628      	mov	r0, r5
 800c8c4:	47b8      	blx	r7
 800c8c6:	3001      	adds	r0, #1
 800c8c8:	d1c0      	bne.n	800c84c <_printf_float+0x300>
 800c8ca:	e69e      	b.n	800c60a <_printf_float+0xbe>
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	4631      	mov	r1, r6
 800c8d0:	4628      	mov	r0, r5
 800c8d2:	9205      	str	r2, [sp, #20]
 800c8d4:	47b8      	blx	r7
 800c8d6:	3001      	adds	r0, #1
 800c8d8:	f43f ae97 	beq.w	800c60a <_printf_float+0xbe>
 800c8dc:	9a05      	ldr	r2, [sp, #20]
 800c8de:	f10b 0b01 	add.w	fp, fp, #1
 800c8e2:	e7b9      	b.n	800c858 <_printf_float+0x30c>
 800c8e4:	ee18 3a10 	vmov	r3, s16
 800c8e8:	4652      	mov	r2, sl
 800c8ea:	4631      	mov	r1, r6
 800c8ec:	4628      	mov	r0, r5
 800c8ee:	47b8      	blx	r7
 800c8f0:	3001      	adds	r0, #1
 800c8f2:	d1be      	bne.n	800c872 <_printf_float+0x326>
 800c8f4:	e689      	b.n	800c60a <_printf_float+0xbe>
 800c8f6:	9a05      	ldr	r2, [sp, #20]
 800c8f8:	464b      	mov	r3, r9
 800c8fa:	4442      	add	r2, r8
 800c8fc:	4631      	mov	r1, r6
 800c8fe:	4628      	mov	r0, r5
 800c900:	47b8      	blx	r7
 800c902:	3001      	adds	r0, #1
 800c904:	d1c1      	bne.n	800c88a <_printf_float+0x33e>
 800c906:	e680      	b.n	800c60a <_printf_float+0xbe>
 800c908:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c90a:	2a01      	cmp	r2, #1
 800c90c:	dc01      	bgt.n	800c912 <_printf_float+0x3c6>
 800c90e:	07db      	lsls	r3, r3, #31
 800c910:	d53a      	bpl.n	800c988 <_printf_float+0x43c>
 800c912:	2301      	movs	r3, #1
 800c914:	4642      	mov	r2, r8
 800c916:	4631      	mov	r1, r6
 800c918:	4628      	mov	r0, r5
 800c91a:	47b8      	blx	r7
 800c91c:	3001      	adds	r0, #1
 800c91e:	f43f ae74 	beq.w	800c60a <_printf_float+0xbe>
 800c922:	ee18 3a10 	vmov	r3, s16
 800c926:	4652      	mov	r2, sl
 800c928:	4631      	mov	r1, r6
 800c92a:	4628      	mov	r0, r5
 800c92c:	47b8      	blx	r7
 800c92e:	3001      	adds	r0, #1
 800c930:	f43f ae6b 	beq.w	800c60a <_printf_float+0xbe>
 800c934:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c938:	2200      	movs	r2, #0
 800c93a:	2300      	movs	r3, #0
 800c93c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c940:	f7f4 f8f2 	bl	8000b28 <__aeabi_dcmpeq>
 800c944:	b9d8      	cbnz	r0, 800c97e <_printf_float+0x432>
 800c946:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c94a:	f108 0201 	add.w	r2, r8, #1
 800c94e:	4631      	mov	r1, r6
 800c950:	4628      	mov	r0, r5
 800c952:	47b8      	blx	r7
 800c954:	3001      	adds	r0, #1
 800c956:	d10e      	bne.n	800c976 <_printf_float+0x42a>
 800c958:	e657      	b.n	800c60a <_printf_float+0xbe>
 800c95a:	2301      	movs	r3, #1
 800c95c:	4652      	mov	r2, sl
 800c95e:	4631      	mov	r1, r6
 800c960:	4628      	mov	r0, r5
 800c962:	47b8      	blx	r7
 800c964:	3001      	adds	r0, #1
 800c966:	f43f ae50 	beq.w	800c60a <_printf_float+0xbe>
 800c96a:	f108 0801 	add.w	r8, r8, #1
 800c96e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c970:	3b01      	subs	r3, #1
 800c972:	4543      	cmp	r3, r8
 800c974:	dcf1      	bgt.n	800c95a <_printf_float+0x40e>
 800c976:	464b      	mov	r3, r9
 800c978:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c97c:	e6da      	b.n	800c734 <_printf_float+0x1e8>
 800c97e:	f04f 0800 	mov.w	r8, #0
 800c982:	f104 0a1a 	add.w	sl, r4, #26
 800c986:	e7f2      	b.n	800c96e <_printf_float+0x422>
 800c988:	2301      	movs	r3, #1
 800c98a:	4642      	mov	r2, r8
 800c98c:	e7df      	b.n	800c94e <_printf_float+0x402>
 800c98e:	2301      	movs	r3, #1
 800c990:	464a      	mov	r2, r9
 800c992:	4631      	mov	r1, r6
 800c994:	4628      	mov	r0, r5
 800c996:	47b8      	blx	r7
 800c998:	3001      	adds	r0, #1
 800c99a:	f43f ae36 	beq.w	800c60a <_printf_float+0xbe>
 800c99e:	f108 0801 	add.w	r8, r8, #1
 800c9a2:	68e3      	ldr	r3, [r4, #12]
 800c9a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c9a6:	1a5b      	subs	r3, r3, r1
 800c9a8:	4543      	cmp	r3, r8
 800c9aa:	dcf0      	bgt.n	800c98e <_printf_float+0x442>
 800c9ac:	e6f8      	b.n	800c7a0 <_printf_float+0x254>
 800c9ae:	f04f 0800 	mov.w	r8, #0
 800c9b2:	f104 0919 	add.w	r9, r4, #25
 800c9b6:	e7f4      	b.n	800c9a2 <_printf_float+0x456>

0800c9b8 <_printf_common>:
 800c9b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9bc:	4616      	mov	r6, r2
 800c9be:	4699      	mov	r9, r3
 800c9c0:	688a      	ldr	r2, [r1, #8]
 800c9c2:	690b      	ldr	r3, [r1, #16]
 800c9c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	bfb8      	it	lt
 800c9cc:	4613      	movlt	r3, r2
 800c9ce:	6033      	str	r3, [r6, #0]
 800c9d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c9d4:	4607      	mov	r7, r0
 800c9d6:	460c      	mov	r4, r1
 800c9d8:	b10a      	cbz	r2, 800c9de <_printf_common+0x26>
 800c9da:	3301      	adds	r3, #1
 800c9dc:	6033      	str	r3, [r6, #0]
 800c9de:	6823      	ldr	r3, [r4, #0]
 800c9e0:	0699      	lsls	r1, r3, #26
 800c9e2:	bf42      	ittt	mi
 800c9e4:	6833      	ldrmi	r3, [r6, #0]
 800c9e6:	3302      	addmi	r3, #2
 800c9e8:	6033      	strmi	r3, [r6, #0]
 800c9ea:	6825      	ldr	r5, [r4, #0]
 800c9ec:	f015 0506 	ands.w	r5, r5, #6
 800c9f0:	d106      	bne.n	800ca00 <_printf_common+0x48>
 800c9f2:	f104 0a19 	add.w	sl, r4, #25
 800c9f6:	68e3      	ldr	r3, [r4, #12]
 800c9f8:	6832      	ldr	r2, [r6, #0]
 800c9fa:	1a9b      	subs	r3, r3, r2
 800c9fc:	42ab      	cmp	r3, r5
 800c9fe:	dc26      	bgt.n	800ca4e <_printf_common+0x96>
 800ca00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca04:	1e13      	subs	r3, r2, #0
 800ca06:	6822      	ldr	r2, [r4, #0]
 800ca08:	bf18      	it	ne
 800ca0a:	2301      	movne	r3, #1
 800ca0c:	0692      	lsls	r2, r2, #26
 800ca0e:	d42b      	bmi.n	800ca68 <_printf_common+0xb0>
 800ca10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca14:	4649      	mov	r1, r9
 800ca16:	4638      	mov	r0, r7
 800ca18:	47c0      	blx	r8
 800ca1a:	3001      	adds	r0, #1
 800ca1c:	d01e      	beq.n	800ca5c <_printf_common+0xa4>
 800ca1e:	6823      	ldr	r3, [r4, #0]
 800ca20:	6922      	ldr	r2, [r4, #16]
 800ca22:	f003 0306 	and.w	r3, r3, #6
 800ca26:	2b04      	cmp	r3, #4
 800ca28:	bf02      	ittt	eq
 800ca2a:	68e5      	ldreq	r5, [r4, #12]
 800ca2c:	6833      	ldreq	r3, [r6, #0]
 800ca2e:	1aed      	subeq	r5, r5, r3
 800ca30:	68a3      	ldr	r3, [r4, #8]
 800ca32:	bf0c      	ite	eq
 800ca34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca38:	2500      	movne	r5, #0
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	bfc4      	itt	gt
 800ca3e:	1a9b      	subgt	r3, r3, r2
 800ca40:	18ed      	addgt	r5, r5, r3
 800ca42:	2600      	movs	r6, #0
 800ca44:	341a      	adds	r4, #26
 800ca46:	42b5      	cmp	r5, r6
 800ca48:	d11a      	bne.n	800ca80 <_printf_common+0xc8>
 800ca4a:	2000      	movs	r0, #0
 800ca4c:	e008      	b.n	800ca60 <_printf_common+0xa8>
 800ca4e:	2301      	movs	r3, #1
 800ca50:	4652      	mov	r2, sl
 800ca52:	4649      	mov	r1, r9
 800ca54:	4638      	mov	r0, r7
 800ca56:	47c0      	blx	r8
 800ca58:	3001      	adds	r0, #1
 800ca5a:	d103      	bne.n	800ca64 <_printf_common+0xac>
 800ca5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca64:	3501      	adds	r5, #1
 800ca66:	e7c6      	b.n	800c9f6 <_printf_common+0x3e>
 800ca68:	18e1      	adds	r1, r4, r3
 800ca6a:	1c5a      	adds	r2, r3, #1
 800ca6c:	2030      	movs	r0, #48	; 0x30
 800ca6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca72:	4422      	add	r2, r4
 800ca74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca7c:	3302      	adds	r3, #2
 800ca7e:	e7c7      	b.n	800ca10 <_printf_common+0x58>
 800ca80:	2301      	movs	r3, #1
 800ca82:	4622      	mov	r2, r4
 800ca84:	4649      	mov	r1, r9
 800ca86:	4638      	mov	r0, r7
 800ca88:	47c0      	blx	r8
 800ca8a:	3001      	adds	r0, #1
 800ca8c:	d0e6      	beq.n	800ca5c <_printf_common+0xa4>
 800ca8e:	3601      	adds	r6, #1
 800ca90:	e7d9      	b.n	800ca46 <_printf_common+0x8e>
	...

0800ca94 <_printf_i>:
 800ca94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca98:	7e0f      	ldrb	r7, [r1, #24]
 800ca9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ca9c:	2f78      	cmp	r7, #120	; 0x78
 800ca9e:	4691      	mov	r9, r2
 800caa0:	4680      	mov	r8, r0
 800caa2:	460c      	mov	r4, r1
 800caa4:	469a      	mov	sl, r3
 800caa6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800caaa:	d807      	bhi.n	800cabc <_printf_i+0x28>
 800caac:	2f62      	cmp	r7, #98	; 0x62
 800caae:	d80a      	bhi.n	800cac6 <_printf_i+0x32>
 800cab0:	2f00      	cmp	r7, #0
 800cab2:	f000 80d4 	beq.w	800cc5e <_printf_i+0x1ca>
 800cab6:	2f58      	cmp	r7, #88	; 0x58
 800cab8:	f000 80c0 	beq.w	800cc3c <_printf_i+0x1a8>
 800cabc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cac0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cac4:	e03a      	b.n	800cb3c <_printf_i+0xa8>
 800cac6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800caca:	2b15      	cmp	r3, #21
 800cacc:	d8f6      	bhi.n	800cabc <_printf_i+0x28>
 800cace:	a101      	add	r1, pc, #4	; (adr r1, 800cad4 <_printf_i+0x40>)
 800cad0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cad4:	0800cb2d 	.word	0x0800cb2d
 800cad8:	0800cb41 	.word	0x0800cb41
 800cadc:	0800cabd 	.word	0x0800cabd
 800cae0:	0800cabd 	.word	0x0800cabd
 800cae4:	0800cabd 	.word	0x0800cabd
 800cae8:	0800cabd 	.word	0x0800cabd
 800caec:	0800cb41 	.word	0x0800cb41
 800caf0:	0800cabd 	.word	0x0800cabd
 800caf4:	0800cabd 	.word	0x0800cabd
 800caf8:	0800cabd 	.word	0x0800cabd
 800cafc:	0800cabd 	.word	0x0800cabd
 800cb00:	0800cc45 	.word	0x0800cc45
 800cb04:	0800cb6d 	.word	0x0800cb6d
 800cb08:	0800cbff 	.word	0x0800cbff
 800cb0c:	0800cabd 	.word	0x0800cabd
 800cb10:	0800cabd 	.word	0x0800cabd
 800cb14:	0800cc67 	.word	0x0800cc67
 800cb18:	0800cabd 	.word	0x0800cabd
 800cb1c:	0800cb6d 	.word	0x0800cb6d
 800cb20:	0800cabd 	.word	0x0800cabd
 800cb24:	0800cabd 	.word	0x0800cabd
 800cb28:	0800cc07 	.word	0x0800cc07
 800cb2c:	682b      	ldr	r3, [r5, #0]
 800cb2e:	1d1a      	adds	r2, r3, #4
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	602a      	str	r2, [r5, #0]
 800cb34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	e09f      	b.n	800cc80 <_printf_i+0x1ec>
 800cb40:	6820      	ldr	r0, [r4, #0]
 800cb42:	682b      	ldr	r3, [r5, #0]
 800cb44:	0607      	lsls	r7, r0, #24
 800cb46:	f103 0104 	add.w	r1, r3, #4
 800cb4a:	6029      	str	r1, [r5, #0]
 800cb4c:	d501      	bpl.n	800cb52 <_printf_i+0xbe>
 800cb4e:	681e      	ldr	r6, [r3, #0]
 800cb50:	e003      	b.n	800cb5a <_printf_i+0xc6>
 800cb52:	0646      	lsls	r6, r0, #25
 800cb54:	d5fb      	bpl.n	800cb4e <_printf_i+0xba>
 800cb56:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cb5a:	2e00      	cmp	r6, #0
 800cb5c:	da03      	bge.n	800cb66 <_printf_i+0xd2>
 800cb5e:	232d      	movs	r3, #45	; 0x2d
 800cb60:	4276      	negs	r6, r6
 800cb62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb66:	485a      	ldr	r0, [pc, #360]	; (800ccd0 <_printf_i+0x23c>)
 800cb68:	230a      	movs	r3, #10
 800cb6a:	e012      	b.n	800cb92 <_printf_i+0xfe>
 800cb6c:	682b      	ldr	r3, [r5, #0]
 800cb6e:	6820      	ldr	r0, [r4, #0]
 800cb70:	1d19      	adds	r1, r3, #4
 800cb72:	6029      	str	r1, [r5, #0]
 800cb74:	0605      	lsls	r5, r0, #24
 800cb76:	d501      	bpl.n	800cb7c <_printf_i+0xe8>
 800cb78:	681e      	ldr	r6, [r3, #0]
 800cb7a:	e002      	b.n	800cb82 <_printf_i+0xee>
 800cb7c:	0641      	lsls	r1, r0, #25
 800cb7e:	d5fb      	bpl.n	800cb78 <_printf_i+0xe4>
 800cb80:	881e      	ldrh	r6, [r3, #0]
 800cb82:	4853      	ldr	r0, [pc, #332]	; (800ccd0 <_printf_i+0x23c>)
 800cb84:	2f6f      	cmp	r7, #111	; 0x6f
 800cb86:	bf0c      	ite	eq
 800cb88:	2308      	moveq	r3, #8
 800cb8a:	230a      	movne	r3, #10
 800cb8c:	2100      	movs	r1, #0
 800cb8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb92:	6865      	ldr	r5, [r4, #4]
 800cb94:	60a5      	str	r5, [r4, #8]
 800cb96:	2d00      	cmp	r5, #0
 800cb98:	bfa2      	ittt	ge
 800cb9a:	6821      	ldrge	r1, [r4, #0]
 800cb9c:	f021 0104 	bicge.w	r1, r1, #4
 800cba0:	6021      	strge	r1, [r4, #0]
 800cba2:	b90e      	cbnz	r6, 800cba8 <_printf_i+0x114>
 800cba4:	2d00      	cmp	r5, #0
 800cba6:	d04b      	beq.n	800cc40 <_printf_i+0x1ac>
 800cba8:	4615      	mov	r5, r2
 800cbaa:	fbb6 f1f3 	udiv	r1, r6, r3
 800cbae:	fb03 6711 	mls	r7, r3, r1, r6
 800cbb2:	5dc7      	ldrb	r7, [r0, r7]
 800cbb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cbb8:	4637      	mov	r7, r6
 800cbba:	42bb      	cmp	r3, r7
 800cbbc:	460e      	mov	r6, r1
 800cbbe:	d9f4      	bls.n	800cbaa <_printf_i+0x116>
 800cbc0:	2b08      	cmp	r3, #8
 800cbc2:	d10b      	bne.n	800cbdc <_printf_i+0x148>
 800cbc4:	6823      	ldr	r3, [r4, #0]
 800cbc6:	07de      	lsls	r6, r3, #31
 800cbc8:	d508      	bpl.n	800cbdc <_printf_i+0x148>
 800cbca:	6923      	ldr	r3, [r4, #16]
 800cbcc:	6861      	ldr	r1, [r4, #4]
 800cbce:	4299      	cmp	r1, r3
 800cbd0:	bfde      	ittt	le
 800cbd2:	2330      	movle	r3, #48	; 0x30
 800cbd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cbd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cbdc:	1b52      	subs	r2, r2, r5
 800cbde:	6122      	str	r2, [r4, #16]
 800cbe0:	f8cd a000 	str.w	sl, [sp]
 800cbe4:	464b      	mov	r3, r9
 800cbe6:	aa03      	add	r2, sp, #12
 800cbe8:	4621      	mov	r1, r4
 800cbea:	4640      	mov	r0, r8
 800cbec:	f7ff fee4 	bl	800c9b8 <_printf_common>
 800cbf0:	3001      	adds	r0, #1
 800cbf2:	d14a      	bne.n	800cc8a <_printf_i+0x1f6>
 800cbf4:	f04f 30ff 	mov.w	r0, #4294967295
 800cbf8:	b004      	add	sp, #16
 800cbfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbfe:	6823      	ldr	r3, [r4, #0]
 800cc00:	f043 0320 	orr.w	r3, r3, #32
 800cc04:	6023      	str	r3, [r4, #0]
 800cc06:	4833      	ldr	r0, [pc, #204]	; (800ccd4 <_printf_i+0x240>)
 800cc08:	2778      	movs	r7, #120	; 0x78
 800cc0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cc0e:	6823      	ldr	r3, [r4, #0]
 800cc10:	6829      	ldr	r1, [r5, #0]
 800cc12:	061f      	lsls	r7, r3, #24
 800cc14:	f851 6b04 	ldr.w	r6, [r1], #4
 800cc18:	d402      	bmi.n	800cc20 <_printf_i+0x18c>
 800cc1a:	065f      	lsls	r7, r3, #25
 800cc1c:	bf48      	it	mi
 800cc1e:	b2b6      	uxthmi	r6, r6
 800cc20:	07df      	lsls	r7, r3, #31
 800cc22:	bf48      	it	mi
 800cc24:	f043 0320 	orrmi.w	r3, r3, #32
 800cc28:	6029      	str	r1, [r5, #0]
 800cc2a:	bf48      	it	mi
 800cc2c:	6023      	strmi	r3, [r4, #0]
 800cc2e:	b91e      	cbnz	r6, 800cc38 <_printf_i+0x1a4>
 800cc30:	6823      	ldr	r3, [r4, #0]
 800cc32:	f023 0320 	bic.w	r3, r3, #32
 800cc36:	6023      	str	r3, [r4, #0]
 800cc38:	2310      	movs	r3, #16
 800cc3a:	e7a7      	b.n	800cb8c <_printf_i+0xf8>
 800cc3c:	4824      	ldr	r0, [pc, #144]	; (800ccd0 <_printf_i+0x23c>)
 800cc3e:	e7e4      	b.n	800cc0a <_printf_i+0x176>
 800cc40:	4615      	mov	r5, r2
 800cc42:	e7bd      	b.n	800cbc0 <_printf_i+0x12c>
 800cc44:	682b      	ldr	r3, [r5, #0]
 800cc46:	6826      	ldr	r6, [r4, #0]
 800cc48:	6961      	ldr	r1, [r4, #20]
 800cc4a:	1d18      	adds	r0, r3, #4
 800cc4c:	6028      	str	r0, [r5, #0]
 800cc4e:	0635      	lsls	r5, r6, #24
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	d501      	bpl.n	800cc58 <_printf_i+0x1c4>
 800cc54:	6019      	str	r1, [r3, #0]
 800cc56:	e002      	b.n	800cc5e <_printf_i+0x1ca>
 800cc58:	0670      	lsls	r0, r6, #25
 800cc5a:	d5fb      	bpl.n	800cc54 <_printf_i+0x1c0>
 800cc5c:	8019      	strh	r1, [r3, #0]
 800cc5e:	2300      	movs	r3, #0
 800cc60:	6123      	str	r3, [r4, #16]
 800cc62:	4615      	mov	r5, r2
 800cc64:	e7bc      	b.n	800cbe0 <_printf_i+0x14c>
 800cc66:	682b      	ldr	r3, [r5, #0]
 800cc68:	1d1a      	adds	r2, r3, #4
 800cc6a:	602a      	str	r2, [r5, #0]
 800cc6c:	681d      	ldr	r5, [r3, #0]
 800cc6e:	6862      	ldr	r2, [r4, #4]
 800cc70:	2100      	movs	r1, #0
 800cc72:	4628      	mov	r0, r5
 800cc74:	f7f3 fadc 	bl	8000230 <memchr>
 800cc78:	b108      	cbz	r0, 800cc7e <_printf_i+0x1ea>
 800cc7a:	1b40      	subs	r0, r0, r5
 800cc7c:	6060      	str	r0, [r4, #4]
 800cc7e:	6863      	ldr	r3, [r4, #4]
 800cc80:	6123      	str	r3, [r4, #16]
 800cc82:	2300      	movs	r3, #0
 800cc84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc88:	e7aa      	b.n	800cbe0 <_printf_i+0x14c>
 800cc8a:	6923      	ldr	r3, [r4, #16]
 800cc8c:	462a      	mov	r2, r5
 800cc8e:	4649      	mov	r1, r9
 800cc90:	4640      	mov	r0, r8
 800cc92:	47d0      	blx	sl
 800cc94:	3001      	adds	r0, #1
 800cc96:	d0ad      	beq.n	800cbf4 <_printf_i+0x160>
 800cc98:	6823      	ldr	r3, [r4, #0]
 800cc9a:	079b      	lsls	r3, r3, #30
 800cc9c:	d413      	bmi.n	800ccc6 <_printf_i+0x232>
 800cc9e:	68e0      	ldr	r0, [r4, #12]
 800cca0:	9b03      	ldr	r3, [sp, #12]
 800cca2:	4298      	cmp	r0, r3
 800cca4:	bfb8      	it	lt
 800cca6:	4618      	movlt	r0, r3
 800cca8:	e7a6      	b.n	800cbf8 <_printf_i+0x164>
 800ccaa:	2301      	movs	r3, #1
 800ccac:	4632      	mov	r2, r6
 800ccae:	4649      	mov	r1, r9
 800ccb0:	4640      	mov	r0, r8
 800ccb2:	47d0      	blx	sl
 800ccb4:	3001      	adds	r0, #1
 800ccb6:	d09d      	beq.n	800cbf4 <_printf_i+0x160>
 800ccb8:	3501      	adds	r5, #1
 800ccba:	68e3      	ldr	r3, [r4, #12]
 800ccbc:	9903      	ldr	r1, [sp, #12]
 800ccbe:	1a5b      	subs	r3, r3, r1
 800ccc0:	42ab      	cmp	r3, r5
 800ccc2:	dcf2      	bgt.n	800ccaa <_printf_i+0x216>
 800ccc4:	e7eb      	b.n	800cc9e <_printf_i+0x20a>
 800ccc6:	2500      	movs	r5, #0
 800ccc8:	f104 0619 	add.w	r6, r4, #25
 800cccc:	e7f5      	b.n	800ccba <_printf_i+0x226>
 800ccce:	bf00      	nop
 800ccd0:	0800f8bf 	.word	0x0800f8bf
 800ccd4:	0800f8d0 	.word	0x0800f8d0

0800ccd8 <std>:
 800ccd8:	2300      	movs	r3, #0
 800ccda:	b510      	push	{r4, lr}
 800ccdc:	4604      	mov	r4, r0
 800ccde:	e9c0 3300 	strd	r3, r3, [r0]
 800cce2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cce6:	6083      	str	r3, [r0, #8]
 800cce8:	8181      	strh	r1, [r0, #12]
 800ccea:	6643      	str	r3, [r0, #100]	; 0x64
 800ccec:	81c2      	strh	r2, [r0, #14]
 800ccee:	6183      	str	r3, [r0, #24]
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	2208      	movs	r2, #8
 800ccf4:	305c      	adds	r0, #92	; 0x5c
 800ccf6:	f000 f914 	bl	800cf22 <memset>
 800ccfa:	4b0d      	ldr	r3, [pc, #52]	; (800cd30 <std+0x58>)
 800ccfc:	6263      	str	r3, [r4, #36]	; 0x24
 800ccfe:	4b0d      	ldr	r3, [pc, #52]	; (800cd34 <std+0x5c>)
 800cd00:	62a3      	str	r3, [r4, #40]	; 0x28
 800cd02:	4b0d      	ldr	r3, [pc, #52]	; (800cd38 <std+0x60>)
 800cd04:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cd06:	4b0d      	ldr	r3, [pc, #52]	; (800cd3c <std+0x64>)
 800cd08:	6323      	str	r3, [r4, #48]	; 0x30
 800cd0a:	4b0d      	ldr	r3, [pc, #52]	; (800cd40 <std+0x68>)
 800cd0c:	6224      	str	r4, [r4, #32]
 800cd0e:	429c      	cmp	r4, r3
 800cd10:	d006      	beq.n	800cd20 <std+0x48>
 800cd12:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800cd16:	4294      	cmp	r4, r2
 800cd18:	d002      	beq.n	800cd20 <std+0x48>
 800cd1a:	33d0      	adds	r3, #208	; 0xd0
 800cd1c:	429c      	cmp	r4, r3
 800cd1e:	d105      	bne.n	800cd2c <std+0x54>
 800cd20:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cd24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd28:	f000 b9cc 	b.w	800d0c4 <__retarget_lock_init_recursive>
 800cd2c:	bd10      	pop	{r4, pc}
 800cd2e:	bf00      	nop
 800cd30:	0800ce9d 	.word	0x0800ce9d
 800cd34:	0800cebf 	.word	0x0800cebf
 800cd38:	0800cef7 	.word	0x0800cef7
 800cd3c:	0800cf1b 	.word	0x0800cf1b
 800cd40:	200004d8 	.word	0x200004d8

0800cd44 <stdio_exit_handler>:
 800cd44:	4a02      	ldr	r2, [pc, #8]	; (800cd50 <stdio_exit_handler+0xc>)
 800cd46:	4903      	ldr	r1, [pc, #12]	; (800cd54 <stdio_exit_handler+0x10>)
 800cd48:	4803      	ldr	r0, [pc, #12]	; (800cd58 <stdio_exit_handler+0x14>)
 800cd4a:	f000 b869 	b.w	800ce20 <_fwalk_sglue>
 800cd4e:	bf00      	nop
 800cd50:	200000bc 	.word	0x200000bc
 800cd54:	0800e929 	.word	0x0800e929
 800cd58:	200000c8 	.word	0x200000c8

0800cd5c <cleanup_stdio>:
 800cd5c:	6841      	ldr	r1, [r0, #4]
 800cd5e:	4b0c      	ldr	r3, [pc, #48]	; (800cd90 <cleanup_stdio+0x34>)
 800cd60:	4299      	cmp	r1, r3
 800cd62:	b510      	push	{r4, lr}
 800cd64:	4604      	mov	r4, r0
 800cd66:	d001      	beq.n	800cd6c <cleanup_stdio+0x10>
 800cd68:	f001 fdde 	bl	800e928 <_fflush_r>
 800cd6c:	68a1      	ldr	r1, [r4, #8]
 800cd6e:	4b09      	ldr	r3, [pc, #36]	; (800cd94 <cleanup_stdio+0x38>)
 800cd70:	4299      	cmp	r1, r3
 800cd72:	d002      	beq.n	800cd7a <cleanup_stdio+0x1e>
 800cd74:	4620      	mov	r0, r4
 800cd76:	f001 fdd7 	bl	800e928 <_fflush_r>
 800cd7a:	68e1      	ldr	r1, [r4, #12]
 800cd7c:	4b06      	ldr	r3, [pc, #24]	; (800cd98 <cleanup_stdio+0x3c>)
 800cd7e:	4299      	cmp	r1, r3
 800cd80:	d004      	beq.n	800cd8c <cleanup_stdio+0x30>
 800cd82:	4620      	mov	r0, r4
 800cd84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd88:	f001 bdce 	b.w	800e928 <_fflush_r>
 800cd8c:	bd10      	pop	{r4, pc}
 800cd8e:	bf00      	nop
 800cd90:	200004d8 	.word	0x200004d8
 800cd94:	20000540 	.word	0x20000540
 800cd98:	200005a8 	.word	0x200005a8

0800cd9c <global_stdio_init.part.0>:
 800cd9c:	b510      	push	{r4, lr}
 800cd9e:	4b0b      	ldr	r3, [pc, #44]	; (800cdcc <global_stdio_init.part.0+0x30>)
 800cda0:	4c0b      	ldr	r4, [pc, #44]	; (800cdd0 <global_stdio_init.part.0+0x34>)
 800cda2:	4a0c      	ldr	r2, [pc, #48]	; (800cdd4 <global_stdio_init.part.0+0x38>)
 800cda4:	601a      	str	r2, [r3, #0]
 800cda6:	4620      	mov	r0, r4
 800cda8:	2200      	movs	r2, #0
 800cdaa:	2104      	movs	r1, #4
 800cdac:	f7ff ff94 	bl	800ccd8 <std>
 800cdb0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cdb4:	2201      	movs	r2, #1
 800cdb6:	2109      	movs	r1, #9
 800cdb8:	f7ff ff8e 	bl	800ccd8 <std>
 800cdbc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800cdc0:	2202      	movs	r2, #2
 800cdc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdc6:	2112      	movs	r1, #18
 800cdc8:	f7ff bf86 	b.w	800ccd8 <std>
 800cdcc:	20000610 	.word	0x20000610
 800cdd0:	200004d8 	.word	0x200004d8
 800cdd4:	0800cd45 	.word	0x0800cd45

0800cdd8 <__sfp_lock_acquire>:
 800cdd8:	4801      	ldr	r0, [pc, #4]	; (800cde0 <__sfp_lock_acquire+0x8>)
 800cdda:	f000 b974 	b.w	800d0c6 <__retarget_lock_acquire_recursive>
 800cdde:	bf00      	nop
 800cde0:	20000619 	.word	0x20000619

0800cde4 <__sfp_lock_release>:
 800cde4:	4801      	ldr	r0, [pc, #4]	; (800cdec <__sfp_lock_release+0x8>)
 800cde6:	f000 b96f 	b.w	800d0c8 <__retarget_lock_release_recursive>
 800cdea:	bf00      	nop
 800cdec:	20000619 	.word	0x20000619

0800cdf0 <__sinit>:
 800cdf0:	b510      	push	{r4, lr}
 800cdf2:	4604      	mov	r4, r0
 800cdf4:	f7ff fff0 	bl	800cdd8 <__sfp_lock_acquire>
 800cdf8:	6a23      	ldr	r3, [r4, #32]
 800cdfa:	b11b      	cbz	r3, 800ce04 <__sinit+0x14>
 800cdfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce00:	f7ff bff0 	b.w	800cde4 <__sfp_lock_release>
 800ce04:	4b04      	ldr	r3, [pc, #16]	; (800ce18 <__sinit+0x28>)
 800ce06:	6223      	str	r3, [r4, #32]
 800ce08:	4b04      	ldr	r3, [pc, #16]	; (800ce1c <__sinit+0x2c>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d1f5      	bne.n	800cdfc <__sinit+0xc>
 800ce10:	f7ff ffc4 	bl	800cd9c <global_stdio_init.part.0>
 800ce14:	e7f2      	b.n	800cdfc <__sinit+0xc>
 800ce16:	bf00      	nop
 800ce18:	0800cd5d 	.word	0x0800cd5d
 800ce1c:	20000610 	.word	0x20000610

0800ce20 <_fwalk_sglue>:
 800ce20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce24:	4607      	mov	r7, r0
 800ce26:	4688      	mov	r8, r1
 800ce28:	4614      	mov	r4, r2
 800ce2a:	2600      	movs	r6, #0
 800ce2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce30:	f1b9 0901 	subs.w	r9, r9, #1
 800ce34:	d505      	bpl.n	800ce42 <_fwalk_sglue+0x22>
 800ce36:	6824      	ldr	r4, [r4, #0]
 800ce38:	2c00      	cmp	r4, #0
 800ce3a:	d1f7      	bne.n	800ce2c <_fwalk_sglue+0xc>
 800ce3c:	4630      	mov	r0, r6
 800ce3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce42:	89ab      	ldrh	r3, [r5, #12]
 800ce44:	2b01      	cmp	r3, #1
 800ce46:	d907      	bls.n	800ce58 <_fwalk_sglue+0x38>
 800ce48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce4c:	3301      	adds	r3, #1
 800ce4e:	d003      	beq.n	800ce58 <_fwalk_sglue+0x38>
 800ce50:	4629      	mov	r1, r5
 800ce52:	4638      	mov	r0, r7
 800ce54:	47c0      	blx	r8
 800ce56:	4306      	orrs	r6, r0
 800ce58:	3568      	adds	r5, #104	; 0x68
 800ce5a:	e7e9      	b.n	800ce30 <_fwalk_sglue+0x10>

0800ce5c <siprintf>:
 800ce5c:	b40e      	push	{r1, r2, r3}
 800ce5e:	b500      	push	{lr}
 800ce60:	b09c      	sub	sp, #112	; 0x70
 800ce62:	ab1d      	add	r3, sp, #116	; 0x74
 800ce64:	9002      	str	r0, [sp, #8]
 800ce66:	9006      	str	r0, [sp, #24]
 800ce68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ce6c:	4809      	ldr	r0, [pc, #36]	; (800ce94 <siprintf+0x38>)
 800ce6e:	9107      	str	r1, [sp, #28]
 800ce70:	9104      	str	r1, [sp, #16]
 800ce72:	4909      	ldr	r1, [pc, #36]	; (800ce98 <siprintf+0x3c>)
 800ce74:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce78:	9105      	str	r1, [sp, #20]
 800ce7a:	6800      	ldr	r0, [r0, #0]
 800ce7c:	9301      	str	r3, [sp, #4]
 800ce7e:	a902      	add	r1, sp, #8
 800ce80:	f001 fbce 	bl	800e620 <_svfiprintf_r>
 800ce84:	9b02      	ldr	r3, [sp, #8]
 800ce86:	2200      	movs	r2, #0
 800ce88:	701a      	strb	r2, [r3, #0]
 800ce8a:	b01c      	add	sp, #112	; 0x70
 800ce8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce90:	b003      	add	sp, #12
 800ce92:	4770      	bx	lr
 800ce94:	20000114 	.word	0x20000114
 800ce98:	ffff0208 	.word	0xffff0208

0800ce9c <__sread>:
 800ce9c:	b510      	push	{r4, lr}
 800ce9e:	460c      	mov	r4, r1
 800cea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cea4:	f000 f89c 	bl	800cfe0 <_read_r>
 800cea8:	2800      	cmp	r0, #0
 800ceaa:	bfab      	itete	ge
 800ceac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ceae:	89a3      	ldrhlt	r3, [r4, #12]
 800ceb0:	181b      	addge	r3, r3, r0
 800ceb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ceb6:	bfac      	ite	ge
 800ceb8:	6563      	strge	r3, [r4, #84]	; 0x54
 800ceba:	81a3      	strhlt	r3, [r4, #12]
 800cebc:	bd10      	pop	{r4, pc}

0800cebe <__swrite>:
 800cebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cec2:	461f      	mov	r7, r3
 800cec4:	898b      	ldrh	r3, [r1, #12]
 800cec6:	05db      	lsls	r3, r3, #23
 800cec8:	4605      	mov	r5, r0
 800ceca:	460c      	mov	r4, r1
 800cecc:	4616      	mov	r6, r2
 800cece:	d505      	bpl.n	800cedc <__swrite+0x1e>
 800ced0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ced4:	2302      	movs	r3, #2
 800ced6:	2200      	movs	r2, #0
 800ced8:	f000 f870 	bl	800cfbc <_lseek_r>
 800cedc:	89a3      	ldrh	r3, [r4, #12]
 800cede:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cee2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cee6:	81a3      	strh	r3, [r4, #12]
 800cee8:	4632      	mov	r2, r6
 800ceea:	463b      	mov	r3, r7
 800ceec:	4628      	mov	r0, r5
 800ceee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cef2:	f000 b8ab 	b.w	800d04c <_write_r>

0800cef6 <__sseek>:
 800cef6:	b510      	push	{r4, lr}
 800cef8:	460c      	mov	r4, r1
 800cefa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cefe:	f000 f85d 	bl	800cfbc <_lseek_r>
 800cf02:	1c43      	adds	r3, r0, #1
 800cf04:	89a3      	ldrh	r3, [r4, #12]
 800cf06:	bf15      	itete	ne
 800cf08:	6560      	strne	r0, [r4, #84]	; 0x54
 800cf0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cf0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cf12:	81a3      	strheq	r3, [r4, #12]
 800cf14:	bf18      	it	ne
 800cf16:	81a3      	strhne	r3, [r4, #12]
 800cf18:	bd10      	pop	{r4, pc}

0800cf1a <__sclose>:
 800cf1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf1e:	f000 b83d 	b.w	800cf9c <_close_r>

0800cf22 <memset>:
 800cf22:	4402      	add	r2, r0
 800cf24:	4603      	mov	r3, r0
 800cf26:	4293      	cmp	r3, r2
 800cf28:	d100      	bne.n	800cf2c <memset+0xa>
 800cf2a:	4770      	bx	lr
 800cf2c:	f803 1b01 	strb.w	r1, [r3], #1
 800cf30:	e7f9      	b.n	800cf26 <memset+0x4>

0800cf32 <_raise_r>:
 800cf32:	291f      	cmp	r1, #31
 800cf34:	b538      	push	{r3, r4, r5, lr}
 800cf36:	4604      	mov	r4, r0
 800cf38:	460d      	mov	r5, r1
 800cf3a:	d904      	bls.n	800cf46 <_raise_r+0x14>
 800cf3c:	2316      	movs	r3, #22
 800cf3e:	6003      	str	r3, [r0, #0]
 800cf40:	f04f 30ff 	mov.w	r0, #4294967295
 800cf44:	bd38      	pop	{r3, r4, r5, pc}
 800cf46:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cf48:	b112      	cbz	r2, 800cf50 <_raise_r+0x1e>
 800cf4a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf4e:	b94b      	cbnz	r3, 800cf64 <_raise_r+0x32>
 800cf50:	4620      	mov	r0, r4
 800cf52:	f000 f869 	bl	800d028 <_getpid_r>
 800cf56:	462a      	mov	r2, r5
 800cf58:	4601      	mov	r1, r0
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf60:	f000 b850 	b.w	800d004 <_kill_r>
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d00a      	beq.n	800cf7e <_raise_r+0x4c>
 800cf68:	1c59      	adds	r1, r3, #1
 800cf6a:	d103      	bne.n	800cf74 <_raise_r+0x42>
 800cf6c:	2316      	movs	r3, #22
 800cf6e:	6003      	str	r3, [r0, #0]
 800cf70:	2001      	movs	r0, #1
 800cf72:	e7e7      	b.n	800cf44 <_raise_r+0x12>
 800cf74:	2400      	movs	r4, #0
 800cf76:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cf7a:	4628      	mov	r0, r5
 800cf7c:	4798      	blx	r3
 800cf7e:	2000      	movs	r0, #0
 800cf80:	e7e0      	b.n	800cf44 <_raise_r+0x12>
	...

0800cf84 <raise>:
 800cf84:	4b02      	ldr	r3, [pc, #8]	; (800cf90 <raise+0xc>)
 800cf86:	4601      	mov	r1, r0
 800cf88:	6818      	ldr	r0, [r3, #0]
 800cf8a:	f7ff bfd2 	b.w	800cf32 <_raise_r>
 800cf8e:	bf00      	nop
 800cf90:	20000114 	.word	0x20000114

0800cf94 <_localeconv_r>:
 800cf94:	4800      	ldr	r0, [pc, #0]	; (800cf98 <_localeconv_r+0x4>)
 800cf96:	4770      	bx	lr
 800cf98:	20000208 	.word	0x20000208

0800cf9c <_close_r>:
 800cf9c:	b538      	push	{r3, r4, r5, lr}
 800cf9e:	4d06      	ldr	r5, [pc, #24]	; (800cfb8 <_close_r+0x1c>)
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	4604      	mov	r4, r0
 800cfa4:	4608      	mov	r0, r1
 800cfa6:	602b      	str	r3, [r5, #0]
 800cfa8:	f7fa fd17 	bl	80079da <_close>
 800cfac:	1c43      	adds	r3, r0, #1
 800cfae:	d102      	bne.n	800cfb6 <_close_r+0x1a>
 800cfb0:	682b      	ldr	r3, [r5, #0]
 800cfb2:	b103      	cbz	r3, 800cfb6 <_close_r+0x1a>
 800cfb4:	6023      	str	r3, [r4, #0]
 800cfb6:	bd38      	pop	{r3, r4, r5, pc}
 800cfb8:	20000614 	.word	0x20000614

0800cfbc <_lseek_r>:
 800cfbc:	b538      	push	{r3, r4, r5, lr}
 800cfbe:	4d07      	ldr	r5, [pc, #28]	; (800cfdc <_lseek_r+0x20>)
 800cfc0:	4604      	mov	r4, r0
 800cfc2:	4608      	mov	r0, r1
 800cfc4:	4611      	mov	r1, r2
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	602a      	str	r2, [r5, #0]
 800cfca:	461a      	mov	r2, r3
 800cfcc:	f7fa fd2c 	bl	8007a28 <_lseek>
 800cfd0:	1c43      	adds	r3, r0, #1
 800cfd2:	d102      	bne.n	800cfda <_lseek_r+0x1e>
 800cfd4:	682b      	ldr	r3, [r5, #0]
 800cfd6:	b103      	cbz	r3, 800cfda <_lseek_r+0x1e>
 800cfd8:	6023      	str	r3, [r4, #0]
 800cfda:	bd38      	pop	{r3, r4, r5, pc}
 800cfdc:	20000614 	.word	0x20000614

0800cfe0 <_read_r>:
 800cfe0:	b538      	push	{r3, r4, r5, lr}
 800cfe2:	4d07      	ldr	r5, [pc, #28]	; (800d000 <_read_r+0x20>)
 800cfe4:	4604      	mov	r4, r0
 800cfe6:	4608      	mov	r0, r1
 800cfe8:	4611      	mov	r1, r2
 800cfea:	2200      	movs	r2, #0
 800cfec:	602a      	str	r2, [r5, #0]
 800cfee:	461a      	mov	r2, r3
 800cff0:	f7fa fcba 	bl	8007968 <_read>
 800cff4:	1c43      	adds	r3, r0, #1
 800cff6:	d102      	bne.n	800cffe <_read_r+0x1e>
 800cff8:	682b      	ldr	r3, [r5, #0]
 800cffa:	b103      	cbz	r3, 800cffe <_read_r+0x1e>
 800cffc:	6023      	str	r3, [r4, #0]
 800cffe:	bd38      	pop	{r3, r4, r5, pc}
 800d000:	20000614 	.word	0x20000614

0800d004 <_kill_r>:
 800d004:	b538      	push	{r3, r4, r5, lr}
 800d006:	4d07      	ldr	r5, [pc, #28]	; (800d024 <_kill_r+0x20>)
 800d008:	2300      	movs	r3, #0
 800d00a:	4604      	mov	r4, r0
 800d00c:	4608      	mov	r0, r1
 800d00e:	4611      	mov	r1, r2
 800d010:	602b      	str	r3, [r5, #0]
 800d012:	f7fa fc8f 	bl	8007934 <_kill>
 800d016:	1c43      	adds	r3, r0, #1
 800d018:	d102      	bne.n	800d020 <_kill_r+0x1c>
 800d01a:	682b      	ldr	r3, [r5, #0]
 800d01c:	b103      	cbz	r3, 800d020 <_kill_r+0x1c>
 800d01e:	6023      	str	r3, [r4, #0]
 800d020:	bd38      	pop	{r3, r4, r5, pc}
 800d022:	bf00      	nop
 800d024:	20000614 	.word	0x20000614

0800d028 <_getpid_r>:
 800d028:	f7fa bc7c 	b.w	8007924 <_getpid>

0800d02c <_sbrk_r>:
 800d02c:	b538      	push	{r3, r4, r5, lr}
 800d02e:	4d06      	ldr	r5, [pc, #24]	; (800d048 <_sbrk_r+0x1c>)
 800d030:	2300      	movs	r3, #0
 800d032:	4604      	mov	r4, r0
 800d034:	4608      	mov	r0, r1
 800d036:	602b      	str	r3, [r5, #0]
 800d038:	f7fa fd04 	bl	8007a44 <_sbrk>
 800d03c:	1c43      	adds	r3, r0, #1
 800d03e:	d102      	bne.n	800d046 <_sbrk_r+0x1a>
 800d040:	682b      	ldr	r3, [r5, #0]
 800d042:	b103      	cbz	r3, 800d046 <_sbrk_r+0x1a>
 800d044:	6023      	str	r3, [r4, #0]
 800d046:	bd38      	pop	{r3, r4, r5, pc}
 800d048:	20000614 	.word	0x20000614

0800d04c <_write_r>:
 800d04c:	b538      	push	{r3, r4, r5, lr}
 800d04e:	4d07      	ldr	r5, [pc, #28]	; (800d06c <_write_r+0x20>)
 800d050:	4604      	mov	r4, r0
 800d052:	4608      	mov	r0, r1
 800d054:	4611      	mov	r1, r2
 800d056:	2200      	movs	r2, #0
 800d058:	602a      	str	r2, [r5, #0]
 800d05a:	461a      	mov	r2, r3
 800d05c:	f7fa fca1 	bl	80079a2 <_write>
 800d060:	1c43      	adds	r3, r0, #1
 800d062:	d102      	bne.n	800d06a <_write_r+0x1e>
 800d064:	682b      	ldr	r3, [r5, #0]
 800d066:	b103      	cbz	r3, 800d06a <_write_r+0x1e>
 800d068:	6023      	str	r3, [r4, #0]
 800d06a:	bd38      	pop	{r3, r4, r5, pc}
 800d06c:	20000614 	.word	0x20000614

0800d070 <__errno>:
 800d070:	4b01      	ldr	r3, [pc, #4]	; (800d078 <__errno+0x8>)
 800d072:	6818      	ldr	r0, [r3, #0]
 800d074:	4770      	bx	lr
 800d076:	bf00      	nop
 800d078:	20000114 	.word	0x20000114

0800d07c <__libc_init_array>:
 800d07c:	b570      	push	{r4, r5, r6, lr}
 800d07e:	4d0d      	ldr	r5, [pc, #52]	; (800d0b4 <__libc_init_array+0x38>)
 800d080:	4c0d      	ldr	r4, [pc, #52]	; (800d0b8 <__libc_init_array+0x3c>)
 800d082:	1b64      	subs	r4, r4, r5
 800d084:	10a4      	asrs	r4, r4, #2
 800d086:	2600      	movs	r6, #0
 800d088:	42a6      	cmp	r6, r4
 800d08a:	d109      	bne.n	800d0a0 <__libc_init_array+0x24>
 800d08c:	4d0b      	ldr	r5, [pc, #44]	; (800d0bc <__libc_init_array+0x40>)
 800d08e:	4c0c      	ldr	r4, [pc, #48]	; (800d0c0 <__libc_init_array+0x44>)
 800d090:	f001 ff86 	bl	800efa0 <_init>
 800d094:	1b64      	subs	r4, r4, r5
 800d096:	10a4      	asrs	r4, r4, #2
 800d098:	2600      	movs	r6, #0
 800d09a:	42a6      	cmp	r6, r4
 800d09c:	d105      	bne.n	800d0aa <__libc_init_array+0x2e>
 800d09e:	bd70      	pop	{r4, r5, r6, pc}
 800d0a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0a4:	4798      	blx	r3
 800d0a6:	3601      	adds	r6, #1
 800d0a8:	e7ee      	b.n	800d088 <__libc_init_array+0xc>
 800d0aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0ae:	4798      	blx	r3
 800d0b0:	3601      	adds	r6, #1
 800d0b2:	e7f2      	b.n	800d09a <__libc_init_array+0x1e>
 800d0b4:	0800fc24 	.word	0x0800fc24
 800d0b8:	0800fc24 	.word	0x0800fc24
 800d0bc:	0800fc24 	.word	0x0800fc24
 800d0c0:	0800fc2c 	.word	0x0800fc2c

0800d0c4 <__retarget_lock_init_recursive>:
 800d0c4:	4770      	bx	lr

0800d0c6 <__retarget_lock_acquire_recursive>:
 800d0c6:	4770      	bx	lr

0800d0c8 <__retarget_lock_release_recursive>:
 800d0c8:	4770      	bx	lr

0800d0ca <memcpy>:
 800d0ca:	440a      	add	r2, r1
 800d0cc:	4291      	cmp	r1, r2
 800d0ce:	f100 33ff 	add.w	r3, r0, #4294967295
 800d0d2:	d100      	bne.n	800d0d6 <memcpy+0xc>
 800d0d4:	4770      	bx	lr
 800d0d6:	b510      	push	{r4, lr}
 800d0d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0e0:	4291      	cmp	r1, r2
 800d0e2:	d1f9      	bne.n	800d0d8 <memcpy+0xe>
 800d0e4:	bd10      	pop	{r4, pc}

0800d0e6 <quorem>:
 800d0e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0ea:	6903      	ldr	r3, [r0, #16]
 800d0ec:	690c      	ldr	r4, [r1, #16]
 800d0ee:	42a3      	cmp	r3, r4
 800d0f0:	4607      	mov	r7, r0
 800d0f2:	db7e      	blt.n	800d1f2 <quorem+0x10c>
 800d0f4:	3c01      	subs	r4, #1
 800d0f6:	f101 0814 	add.w	r8, r1, #20
 800d0fa:	f100 0514 	add.w	r5, r0, #20
 800d0fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d102:	9301      	str	r3, [sp, #4]
 800d104:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d108:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d10c:	3301      	adds	r3, #1
 800d10e:	429a      	cmp	r2, r3
 800d110:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d114:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d118:	fbb2 f6f3 	udiv	r6, r2, r3
 800d11c:	d331      	bcc.n	800d182 <quorem+0x9c>
 800d11e:	f04f 0e00 	mov.w	lr, #0
 800d122:	4640      	mov	r0, r8
 800d124:	46ac      	mov	ip, r5
 800d126:	46f2      	mov	sl, lr
 800d128:	f850 2b04 	ldr.w	r2, [r0], #4
 800d12c:	b293      	uxth	r3, r2
 800d12e:	fb06 e303 	mla	r3, r6, r3, lr
 800d132:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d136:	0c1a      	lsrs	r2, r3, #16
 800d138:	b29b      	uxth	r3, r3
 800d13a:	ebaa 0303 	sub.w	r3, sl, r3
 800d13e:	f8dc a000 	ldr.w	sl, [ip]
 800d142:	fa13 f38a 	uxtah	r3, r3, sl
 800d146:	fb06 220e 	mla	r2, r6, lr, r2
 800d14a:	9300      	str	r3, [sp, #0]
 800d14c:	9b00      	ldr	r3, [sp, #0]
 800d14e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d152:	b292      	uxth	r2, r2
 800d154:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d158:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d15c:	f8bd 3000 	ldrh.w	r3, [sp]
 800d160:	4581      	cmp	r9, r0
 800d162:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d166:	f84c 3b04 	str.w	r3, [ip], #4
 800d16a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d16e:	d2db      	bcs.n	800d128 <quorem+0x42>
 800d170:	f855 300b 	ldr.w	r3, [r5, fp]
 800d174:	b92b      	cbnz	r3, 800d182 <quorem+0x9c>
 800d176:	9b01      	ldr	r3, [sp, #4]
 800d178:	3b04      	subs	r3, #4
 800d17a:	429d      	cmp	r5, r3
 800d17c:	461a      	mov	r2, r3
 800d17e:	d32c      	bcc.n	800d1da <quorem+0xf4>
 800d180:	613c      	str	r4, [r7, #16]
 800d182:	4638      	mov	r0, r7
 800d184:	f001 f8f2 	bl	800e36c <__mcmp>
 800d188:	2800      	cmp	r0, #0
 800d18a:	db22      	blt.n	800d1d2 <quorem+0xec>
 800d18c:	3601      	adds	r6, #1
 800d18e:	4629      	mov	r1, r5
 800d190:	2000      	movs	r0, #0
 800d192:	f858 2b04 	ldr.w	r2, [r8], #4
 800d196:	f8d1 c000 	ldr.w	ip, [r1]
 800d19a:	b293      	uxth	r3, r2
 800d19c:	1ac3      	subs	r3, r0, r3
 800d19e:	0c12      	lsrs	r2, r2, #16
 800d1a0:	fa13 f38c 	uxtah	r3, r3, ip
 800d1a4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d1a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d1ac:	b29b      	uxth	r3, r3
 800d1ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d1b2:	45c1      	cmp	r9, r8
 800d1b4:	f841 3b04 	str.w	r3, [r1], #4
 800d1b8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d1bc:	d2e9      	bcs.n	800d192 <quorem+0xac>
 800d1be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d1c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d1c6:	b922      	cbnz	r2, 800d1d2 <quorem+0xec>
 800d1c8:	3b04      	subs	r3, #4
 800d1ca:	429d      	cmp	r5, r3
 800d1cc:	461a      	mov	r2, r3
 800d1ce:	d30a      	bcc.n	800d1e6 <quorem+0x100>
 800d1d0:	613c      	str	r4, [r7, #16]
 800d1d2:	4630      	mov	r0, r6
 800d1d4:	b003      	add	sp, #12
 800d1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1da:	6812      	ldr	r2, [r2, #0]
 800d1dc:	3b04      	subs	r3, #4
 800d1de:	2a00      	cmp	r2, #0
 800d1e0:	d1ce      	bne.n	800d180 <quorem+0x9a>
 800d1e2:	3c01      	subs	r4, #1
 800d1e4:	e7c9      	b.n	800d17a <quorem+0x94>
 800d1e6:	6812      	ldr	r2, [r2, #0]
 800d1e8:	3b04      	subs	r3, #4
 800d1ea:	2a00      	cmp	r2, #0
 800d1ec:	d1f0      	bne.n	800d1d0 <quorem+0xea>
 800d1ee:	3c01      	subs	r4, #1
 800d1f0:	e7eb      	b.n	800d1ca <quorem+0xe4>
 800d1f2:	2000      	movs	r0, #0
 800d1f4:	e7ee      	b.n	800d1d4 <quorem+0xee>
	...

0800d1f8 <_dtoa_r>:
 800d1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1fc:	ed2d 8b04 	vpush	{d8-d9}
 800d200:	69c5      	ldr	r5, [r0, #28]
 800d202:	b093      	sub	sp, #76	; 0x4c
 800d204:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d208:	ec57 6b10 	vmov	r6, r7, d0
 800d20c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d210:	9107      	str	r1, [sp, #28]
 800d212:	4604      	mov	r4, r0
 800d214:	920a      	str	r2, [sp, #40]	; 0x28
 800d216:	930d      	str	r3, [sp, #52]	; 0x34
 800d218:	b975      	cbnz	r5, 800d238 <_dtoa_r+0x40>
 800d21a:	2010      	movs	r0, #16
 800d21c:	f7ff f83a 	bl	800c294 <malloc>
 800d220:	4602      	mov	r2, r0
 800d222:	61e0      	str	r0, [r4, #28]
 800d224:	b920      	cbnz	r0, 800d230 <_dtoa_r+0x38>
 800d226:	4bae      	ldr	r3, [pc, #696]	; (800d4e0 <_dtoa_r+0x2e8>)
 800d228:	21ef      	movs	r1, #239	; 0xef
 800d22a:	48ae      	ldr	r0, [pc, #696]	; (800d4e4 <_dtoa_r+0x2ec>)
 800d22c:	f001 fbbe 	bl	800e9ac <__assert_func>
 800d230:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d234:	6005      	str	r5, [r0, #0]
 800d236:	60c5      	str	r5, [r0, #12]
 800d238:	69e3      	ldr	r3, [r4, #28]
 800d23a:	6819      	ldr	r1, [r3, #0]
 800d23c:	b151      	cbz	r1, 800d254 <_dtoa_r+0x5c>
 800d23e:	685a      	ldr	r2, [r3, #4]
 800d240:	604a      	str	r2, [r1, #4]
 800d242:	2301      	movs	r3, #1
 800d244:	4093      	lsls	r3, r2
 800d246:	608b      	str	r3, [r1, #8]
 800d248:	4620      	mov	r0, r4
 800d24a:	f000 fe53 	bl	800def4 <_Bfree>
 800d24e:	69e3      	ldr	r3, [r4, #28]
 800d250:	2200      	movs	r2, #0
 800d252:	601a      	str	r2, [r3, #0]
 800d254:	1e3b      	subs	r3, r7, #0
 800d256:	bfbb      	ittet	lt
 800d258:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d25c:	9303      	strlt	r3, [sp, #12]
 800d25e:	2300      	movge	r3, #0
 800d260:	2201      	movlt	r2, #1
 800d262:	bfac      	ite	ge
 800d264:	f8c8 3000 	strge.w	r3, [r8]
 800d268:	f8c8 2000 	strlt.w	r2, [r8]
 800d26c:	4b9e      	ldr	r3, [pc, #632]	; (800d4e8 <_dtoa_r+0x2f0>)
 800d26e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d272:	ea33 0308 	bics.w	r3, r3, r8
 800d276:	d11b      	bne.n	800d2b0 <_dtoa_r+0xb8>
 800d278:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d27a:	f242 730f 	movw	r3, #9999	; 0x270f
 800d27e:	6013      	str	r3, [r2, #0]
 800d280:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d284:	4333      	orrs	r3, r6
 800d286:	f000 8593 	beq.w	800ddb0 <_dtoa_r+0xbb8>
 800d28a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d28c:	b963      	cbnz	r3, 800d2a8 <_dtoa_r+0xb0>
 800d28e:	4b97      	ldr	r3, [pc, #604]	; (800d4ec <_dtoa_r+0x2f4>)
 800d290:	e027      	b.n	800d2e2 <_dtoa_r+0xea>
 800d292:	4b97      	ldr	r3, [pc, #604]	; (800d4f0 <_dtoa_r+0x2f8>)
 800d294:	9300      	str	r3, [sp, #0]
 800d296:	3308      	adds	r3, #8
 800d298:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d29a:	6013      	str	r3, [r2, #0]
 800d29c:	9800      	ldr	r0, [sp, #0]
 800d29e:	b013      	add	sp, #76	; 0x4c
 800d2a0:	ecbd 8b04 	vpop	{d8-d9}
 800d2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2a8:	4b90      	ldr	r3, [pc, #576]	; (800d4ec <_dtoa_r+0x2f4>)
 800d2aa:	9300      	str	r3, [sp, #0]
 800d2ac:	3303      	adds	r3, #3
 800d2ae:	e7f3      	b.n	800d298 <_dtoa_r+0xa0>
 800d2b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	ec51 0b17 	vmov	r0, r1, d7
 800d2ba:	eeb0 8a47 	vmov.f32	s16, s14
 800d2be:	eef0 8a67 	vmov.f32	s17, s15
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	f7f3 fc30 	bl	8000b28 <__aeabi_dcmpeq>
 800d2c8:	4681      	mov	r9, r0
 800d2ca:	b160      	cbz	r0, 800d2e6 <_dtoa_r+0xee>
 800d2cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	6013      	str	r3, [r2, #0]
 800d2d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	f000 8568 	beq.w	800ddaa <_dtoa_r+0xbb2>
 800d2da:	4b86      	ldr	r3, [pc, #536]	; (800d4f4 <_dtoa_r+0x2fc>)
 800d2dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d2de:	6013      	str	r3, [r2, #0]
 800d2e0:	3b01      	subs	r3, #1
 800d2e2:	9300      	str	r3, [sp, #0]
 800d2e4:	e7da      	b.n	800d29c <_dtoa_r+0xa4>
 800d2e6:	aa10      	add	r2, sp, #64	; 0x40
 800d2e8:	a911      	add	r1, sp, #68	; 0x44
 800d2ea:	4620      	mov	r0, r4
 800d2ec:	eeb0 0a48 	vmov.f32	s0, s16
 800d2f0:	eef0 0a68 	vmov.f32	s1, s17
 800d2f4:	f001 f8e0 	bl	800e4b8 <__d2b>
 800d2f8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d2fc:	4682      	mov	sl, r0
 800d2fe:	2d00      	cmp	r5, #0
 800d300:	d07f      	beq.n	800d402 <_dtoa_r+0x20a>
 800d302:	ee18 3a90 	vmov	r3, s17
 800d306:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d30a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d30e:	ec51 0b18 	vmov	r0, r1, d8
 800d312:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d316:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d31a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d31e:	4619      	mov	r1, r3
 800d320:	2200      	movs	r2, #0
 800d322:	4b75      	ldr	r3, [pc, #468]	; (800d4f8 <_dtoa_r+0x300>)
 800d324:	f7f2 ffe0 	bl	80002e8 <__aeabi_dsub>
 800d328:	a367      	add	r3, pc, #412	; (adr r3, 800d4c8 <_dtoa_r+0x2d0>)
 800d32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d32e:	f7f3 f993 	bl	8000658 <__aeabi_dmul>
 800d332:	a367      	add	r3, pc, #412	; (adr r3, 800d4d0 <_dtoa_r+0x2d8>)
 800d334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d338:	f7f2 ffd8 	bl	80002ec <__adddf3>
 800d33c:	4606      	mov	r6, r0
 800d33e:	4628      	mov	r0, r5
 800d340:	460f      	mov	r7, r1
 800d342:	f7f3 f91f 	bl	8000584 <__aeabi_i2d>
 800d346:	a364      	add	r3, pc, #400	; (adr r3, 800d4d8 <_dtoa_r+0x2e0>)
 800d348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d34c:	f7f3 f984 	bl	8000658 <__aeabi_dmul>
 800d350:	4602      	mov	r2, r0
 800d352:	460b      	mov	r3, r1
 800d354:	4630      	mov	r0, r6
 800d356:	4639      	mov	r1, r7
 800d358:	f7f2 ffc8 	bl	80002ec <__adddf3>
 800d35c:	4606      	mov	r6, r0
 800d35e:	460f      	mov	r7, r1
 800d360:	f7f3 fc2a 	bl	8000bb8 <__aeabi_d2iz>
 800d364:	2200      	movs	r2, #0
 800d366:	4683      	mov	fp, r0
 800d368:	2300      	movs	r3, #0
 800d36a:	4630      	mov	r0, r6
 800d36c:	4639      	mov	r1, r7
 800d36e:	f7f3 fbe5 	bl	8000b3c <__aeabi_dcmplt>
 800d372:	b148      	cbz	r0, 800d388 <_dtoa_r+0x190>
 800d374:	4658      	mov	r0, fp
 800d376:	f7f3 f905 	bl	8000584 <__aeabi_i2d>
 800d37a:	4632      	mov	r2, r6
 800d37c:	463b      	mov	r3, r7
 800d37e:	f7f3 fbd3 	bl	8000b28 <__aeabi_dcmpeq>
 800d382:	b908      	cbnz	r0, 800d388 <_dtoa_r+0x190>
 800d384:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d388:	f1bb 0f16 	cmp.w	fp, #22
 800d38c:	d857      	bhi.n	800d43e <_dtoa_r+0x246>
 800d38e:	4b5b      	ldr	r3, [pc, #364]	; (800d4fc <_dtoa_r+0x304>)
 800d390:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d398:	ec51 0b18 	vmov	r0, r1, d8
 800d39c:	f7f3 fbce 	bl	8000b3c <__aeabi_dcmplt>
 800d3a0:	2800      	cmp	r0, #0
 800d3a2:	d04e      	beq.n	800d442 <_dtoa_r+0x24a>
 800d3a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	930c      	str	r3, [sp, #48]	; 0x30
 800d3ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d3ae:	1b5b      	subs	r3, r3, r5
 800d3b0:	1e5a      	subs	r2, r3, #1
 800d3b2:	bf45      	ittet	mi
 800d3b4:	f1c3 0301 	rsbmi	r3, r3, #1
 800d3b8:	9305      	strmi	r3, [sp, #20]
 800d3ba:	2300      	movpl	r3, #0
 800d3bc:	2300      	movmi	r3, #0
 800d3be:	9206      	str	r2, [sp, #24]
 800d3c0:	bf54      	ite	pl
 800d3c2:	9305      	strpl	r3, [sp, #20]
 800d3c4:	9306      	strmi	r3, [sp, #24]
 800d3c6:	f1bb 0f00 	cmp.w	fp, #0
 800d3ca:	db3c      	blt.n	800d446 <_dtoa_r+0x24e>
 800d3cc:	9b06      	ldr	r3, [sp, #24]
 800d3ce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d3d2:	445b      	add	r3, fp
 800d3d4:	9306      	str	r3, [sp, #24]
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	9308      	str	r3, [sp, #32]
 800d3da:	9b07      	ldr	r3, [sp, #28]
 800d3dc:	2b09      	cmp	r3, #9
 800d3de:	d868      	bhi.n	800d4b2 <_dtoa_r+0x2ba>
 800d3e0:	2b05      	cmp	r3, #5
 800d3e2:	bfc4      	itt	gt
 800d3e4:	3b04      	subgt	r3, #4
 800d3e6:	9307      	strgt	r3, [sp, #28]
 800d3e8:	9b07      	ldr	r3, [sp, #28]
 800d3ea:	f1a3 0302 	sub.w	r3, r3, #2
 800d3ee:	bfcc      	ite	gt
 800d3f0:	2500      	movgt	r5, #0
 800d3f2:	2501      	movle	r5, #1
 800d3f4:	2b03      	cmp	r3, #3
 800d3f6:	f200 8085 	bhi.w	800d504 <_dtoa_r+0x30c>
 800d3fa:	e8df f003 	tbb	[pc, r3]
 800d3fe:	3b2e      	.short	0x3b2e
 800d400:	5839      	.short	0x5839
 800d402:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d406:	441d      	add	r5, r3
 800d408:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d40c:	2b20      	cmp	r3, #32
 800d40e:	bfc1      	itttt	gt
 800d410:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d414:	fa08 f803 	lslgt.w	r8, r8, r3
 800d418:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800d41c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800d420:	bfd6      	itet	le
 800d422:	f1c3 0320 	rsble	r3, r3, #32
 800d426:	ea48 0003 	orrgt.w	r0, r8, r3
 800d42a:	fa06 f003 	lslle.w	r0, r6, r3
 800d42e:	f7f3 f899 	bl	8000564 <__aeabi_ui2d>
 800d432:	2201      	movs	r2, #1
 800d434:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800d438:	3d01      	subs	r5, #1
 800d43a:	920e      	str	r2, [sp, #56]	; 0x38
 800d43c:	e76f      	b.n	800d31e <_dtoa_r+0x126>
 800d43e:	2301      	movs	r3, #1
 800d440:	e7b3      	b.n	800d3aa <_dtoa_r+0x1b2>
 800d442:	900c      	str	r0, [sp, #48]	; 0x30
 800d444:	e7b2      	b.n	800d3ac <_dtoa_r+0x1b4>
 800d446:	9b05      	ldr	r3, [sp, #20]
 800d448:	eba3 030b 	sub.w	r3, r3, fp
 800d44c:	9305      	str	r3, [sp, #20]
 800d44e:	f1cb 0300 	rsb	r3, fp, #0
 800d452:	9308      	str	r3, [sp, #32]
 800d454:	2300      	movs	r3, #0
 800d456:	930b      	str	r3, [sp, #44]	; 0x2c
 800d458:	e7bf      	b.n	800d3da <_dtoa_r+0x1e2>
 800d45a:	2300      	movs	r3, #0
 800d45c:	9309      	str	r3, [sp, #36]	; 0x24
 800d45e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d460:	2b00      	cmp	r3, #0
 800d462:	dc52      	bgt.n	800d50a <_dtoa_r+0x312>
 800d464:	2301      	movs	r3, #1
 800d466:	9301      	str	r3, [sp, #4]
 800d468:	9304      	str	r3, [sp, #16]
 800d46a:	461a      	mov	r2, r3
 800d46c:	920a      	str	r2, [sp, #40]	; 0x28
 800d46e:	e00b      	b.n	800d488 <_dtoa_r+0x290>
 800d470:	2301      	movs	r3, #1
 800d472:	e7f3      	b.n	800d45c <_dtoa_r+0x264>
 800d474:	2300      	movs	r3, #0
 800d476:	9309      	str	r3, [sp, #36]	; 0x24
 800d478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d47a:	445b      	add	r3, fp
 800d47c:	9301      	str	r3, [sp, #4]
 800d47e:	3301      	adds	r3, #1
 800d480:	2b01      	cmp	r3, #1
 800d482:	9304      	str	r3, [sp, #16]
 800d484:	bfb8      	it	lt
 800d486:	2301      	movlt	r3, #1
 800d488:	69e0      	ldr	r0, [r4, #28]
 800d48a:	2100      	movs	r1, #0
 800d48c:	2204      	movs	r2, #4
 800d48e:	f102 0614 	add.w	r6, r2, #20
 800d492:	429e      	cmp	r6, r3
 800d494:	d93d      	bls.n	800d512 <_dtoa_r+0x31a>
 800d496:	6041      	str	r1, [r0, #4]
 800d498:	4620      	mov	r0, r4
 800d49a:	f000 fceb 	bl	800de74 <_Balloc>
 800d49e:	9000      	str	r0, [sp, #0]
 800d4a0:	2800      	cmp	r0, #0
 800d4a2:	d139      	bne.n	800d518 <_dtoa_r+0x320>
 800d4a4:	4b16      	ldr	r3, [pc, #88]	; (800d500 <_dtoa_r+0x308>)
 800d4a6:	4602      	mov	r2, r0
 800d4a8:	f240 11af 	movw	r1, #431	; 0x1af
 800d4ac:	e6bd      	b.n	800d22a <_dtoa_r+0x32>
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	e7e1      	b.n	800d476 <_dtoa_r+0x27e>
 800d4b2:	2501      	movs	r5, #1
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	9307      	str	r3, [sp, #28]
 800d4b8:	9509      	str	r5, [sp, #36]	; 0x24
 800d4ba:	f04f 33ff 	mov.w	r3, #4294967295
 800d4be:	9301      	str	r3, [sp, #4]
 800d4c0:	9304      	str	r3, [sp, #16]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	2312      	movs	r3, #18
 800d4c6:	e7d1      	b.n	800d46c <_dtoa_r+0x274>
 800d4c8:	636f4361 	.word	0x636f4361
 800d4cc:	3fd287a7 	.word	0x3fd287a7
 800d4d0:	8b60c8b3 	.word	0x8b60c8b3
 800d4d4:	3fc68a28 	.word	0x3fc68a28
 800d4d8:	509f79fb 	.word	0x509f79fb
 800d4dc:	3fd34413 	.word	0x3fd34413
 800d4e0:	0800f8ee 	.word	0x0800f8ee
 800d4e4:	0800f905 	.word	0x0800f905
 800d4e8:	7ff00000 	.word	0x7ff00000
 800d4ec:	0800f8ea 	.word	0x0800f8ea
 800d4f0:	0800f8e1 	.word	0x0800f8e1
 800d4f4:	0800f8be 	.word	0x0800f8be
 800d4f8:	3ff80000 	.word	0x3ff80000
 800d4fc:	0800f9f0 	.word	0x0800f9f0
 800d500:	0800f95d 	.word	0x0800f95d
 800d504:	2301      	movs	r3, #1
 800d506:	9309      	str	r3, [sp, #36]	; 0x24
 800d508:	e7d7      	b.n	800d4ba <_dtoa_r+0x2c2>
 800d50a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d50c:	9301      	str	r3, [sp, #4]
 800d50e:	9304      	str	r3, [sp, #16]
 800d510:	e7ba      	b.n	800d488 <_dtoa_r+0x290>
 800d512:	3101      	adds	r1, #1
 800d514:	0052      	lsls	r2, r2, #1
 800d516:	e7ba      	b.n	800d48e <_dtoa_r+0x296>
 800d518:	69e3      	ldr	r3, [r4, #28]
 800d51a:	9a00      	ldr	r2, [sp, #0]
 800d51c:	601a      	str	r2, [r3, #0]
 800d51e:	9b04      	ldr	r3, [sp, #16]
 800d520:	2b0e      	cmp	r3, #14
 800d522:	f200 80a8 	bhi.w	800d676 <_dtoa_r+0x47e>
 800d526:	2d00      	cmp	r5, #0
 800d528:	f000 80a5 	beq.w	800d676 <_dtoa_r+0x47e>
 800d52c:	f1bb 0f00 	cmp.w	fp, #0
 800d530:	dd38      	ble.n	800d5a4 <_dtoa_r+0x3ac>
 800d532:	4bc0      	ldr	r3, [pc, #768]	; (800d834 <_dtoa_r+0x63c>)
 800d534:	f00b 020f 	and.w	r2, fp, #15
 800d538:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d53c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d540:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d544:	ea4f 182b 	mov.w	r8, fp, asr #4
 800d548:	d019      	beq.n	800d57e <_dtoa_r+0x386>
 800d54a:	4bbb      	ldr	r3, [pc, #748]	; (800d838 <_dtoa_r+0x640>)
 800d54c:	ec51 0b18 	vmov	r0, r1, d8
 800d550:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d554:	f7f3 f9aa 	bl	80008ac <__aeabi_ddiv>
 800d558:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d55c:	f008 080f 	and.w	r8, r8, #15
 800d560:	2503      	movs	r5, #3
 800d562:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800d838 <_dtoa_r+0x640>
 800d566:	f1b8 0f00 	cmp.w	r8, #0
 800d56a:	d10a      	bne.n	800d582 <_dtoa_r+0x38a>
 800d56c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d570:	4632      	mov	r2, r6
 800d572:	463b      	mov	r3, r7
 800d574:	f7f3 f99a 	bl	80008ac <__aeabi_ddiv>
 800d578:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d57c:	e02b      	b.n	800d5d6 <_dtoa_r+0x3de>
 800d57e:	2502      	movs	r5, #2
 800d580:	e7ef      	b.n	800d562 <_dtoa_r+0x36a>
 800d582:	f018 0f01 	tst.w	r8, #1
 800d586:	d008      	beq.n	800d59a <_dtoa_r+0x3a2>
 800d588:	4630      	mov	r0, r6
 800d58a:	4639      	mov	r1, r7
 800d58c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d590:	f7f3 f862 	bl	8000658 <__aeabi_dmul>
 800d594:	3501      	adds	r5, #1
 800d596:	4606      	mov	r6, r0
 800d598:	460f      	mov	r7, r1
 800d59a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d59e:	f109 0908 	add.w	r9, r9, #8
 800d5a2:	e7e0      	b.n	800d566 <_dtoa_r+0x36e>
 800d5a4:	f000 809f 	beq.w	800d6e6 <_dtoa_r+0x4ee>
 800d5a8:	f1cb 0600 	rsb	r6, fp, #0
 800d5ac:	4ba1      	ldr	r3, [pc, #644]	; (800d834 <_dtoa_r+0x63c>)
 800d5ae:	4fa2      	ldr	r7, [pc, #648]	; (800d838 <_dtoa_r+0x640>)
 800d5b0:	f006 020f 	and.w	r2, r6, #15
 800d5b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5bc:	ec51 0b18 	vmov	r0, r1, d8
 800d5c0:	f7f3 f84a 	bl	8000658 <__aeabi_dmul>
 800d5c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5c8:	1136      	asrs	r6, r6, #4
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	2502      	movs	r5, #2
 800d5ce:	2e00      	cmp	r6, #0
 800d5d0:	d17e      	bne.n	800d6d0 <_dtoa_r+0x4d8>
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d1d0      	bne.n	800d578 <_dtoa_r+0x380>
 800d5d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d5d8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	f000 8084 	beq.w	800d6ea <_dtoa_r+0x4f2>
 800d5e2:	4b96      	ldr	r3, [pc, #600]	; (800d83c <_dtoa_r+0x644>)
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	4640      	mov	r0, r8
 800d5e8:	4649      	mov	r1, r9
 800d5ea:	f7f3 faa7 	bl	8000b3c <__aeabi_dcmplt>
 800d5ee:	2800      	cmp	r0, #0
 800d5f0:	d07b      	beq.n	800d6ea <_dtoa_r+0x4f2>
 800d5f2:	9b04      	ldr	r3, [sp, #16]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d078      	beq.n	800d6ea <_dtoa_r+0x4f2>
 800d5f8:	9b01      	ldr	r3, [sp, #4]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	dd39      	ble.n	800d672 <_dtoa_r+0x47a>
 800d5fe:	4b90      	ldr	r3, [pc, #576]	; (800d840 <_dtoa_r+0x648>)
 800d600:	2200      	movs	r2, #0
 800d602:	4640      	mov	r0, r8
 800d604:	4649      	mov	r1, r9
 800d606:	f7f3 f827 	bl	8000658 <__aeabi_dmul>
 800d60a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d60e:	9e01      	ldr	r6, [sp, #4]
 800d610:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d614:	3501      	adds	r5, #1
 800d616:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d61a:	4628      	mov	r0, r5
 800d61c:	f7f2 ffb2 	bl	8000584 <__aeabi_i2d>
 800d620:	4642      	mov	r2, r8
 800d622:	464b      	mov	r3, r9
 800d624:	f7f3 f818 	bl	8000658 <__aeabi_dmul>
 800d628:	4b86      	ldr	r3, [pc, #536]	; (800d844 <_dtoa_r+0x64c>)
 800d62a:	2200      	movs	r2, #0
 800d62c:	f7f2 fe5e 	bl	80002ec <__adddf3>
 800d630:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d634:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d638:	9303      	str	r3, [sp, #12]
 800d63a:	2e00      	cmp	r6, #0
 800d63c:	d158      	bne.n	800d6f0 <_dtoa_r+0x4f8>
 800d63e:	4b82      	ldr	r3, [pc, #520]	; (800d848 <_dtoa_r+0x650>)
 800d640:	2200      	movs	r2, #0
 800d642:	4640      	mov	r0, r8
 800d644:	4649      	mov	r1, r9
 800d646:	f7f2 fe4f 	bl	80002e8 <__aeabi_dsub>
 800d64a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d64e:	4680      	mov	r8, r0
 800d650:	4689      	mov	r9, r1
 800d652:	f7f3 fa91 	bl	8000b78 <__aeabi_dcmpgt>
 800d656:	2800      	cmp	r0, #0
 800d658:	f040 8296 	bne.w	800db88 <_dtoa_r+0x990>
 800d65c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d660:	4640      	mov	r0, r8
 800d662:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d666:	4649      	mov	r1, r9
 800d668:	f7f3 fa68 	bl	8000b3c <__aeabi_dcmplt>
 800d66c:	2800      	cmp	r0, #0
 800d66e:	f040 8289 	bne.w	800db84 <_dtoa_r+0x98c>
 800d672:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d676:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d678:	2b00      	cmp	r3, #0
 800d67a:	f2c0 814e 	blt.w	800d91a <_dtoa_r+0x722>
 800d67e:	f1bb 0f0e 	cmp.w	fp, #14
 800d682:	f300 814a 	bgt.w	800d91a <_dtoa_r+0x722>
 800d686:	4b6b      	ldr	r3, [pc, #428]	; (800d834 <_dtoa_r+0x63c>)
 800d688:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d68c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d692:	2b00      	cmp	r3, #0
 800d694:	f280 80dc 	bge.w	800d850 <_dtoa_r+0x658>
 800d698:	9b04      	ldr	r3, [sp, #16]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	f300 80d8 	bgt.w	800d850 <_dtoa_r+0x658>
 800d6a0:	f040 826f 	bne.w	800db82 <_dtoa_r+0x98a>
 800d6a4:	4b68      	ldr	r3, [pc, #416]	; (800d848 <_dtoa_r+0x650>)
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	4640      	mov	r0, r8
 800d6aa:	4649      	mov	r1, r9
 800d6ac:	f7f2 ffd4 	bl	8000658 <__aeabi_dmul>
 800d6b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d6b4:	f7f3 fa56 	bl	8000b64 <__aeabi_dcmpge>
 800d6b8:	9e04      	ldr	r6, [sp, #16]
 800d6ba:	4637      	mov	r7, r6
 800d6bc:	2800      	cmp	r0, #0
 800d6be:	f040 8245 	bne.w	800db4c <_dtoa_r+0x954>
 800d6c2:	9d00      	ldr	r5, [sp, #0]
 800d6c4:	2331      	movs	r3, #49	; 0x31
 800d6c6:	f805 3b01 	strb.w	r3, [r5], #1
 800d6ca:	f10b 0b01 	add.w	fp, fp, #1
 800d6ce:	e241      	b.n	800db54 <_dtoa_r+0x95c>
 800d6d0:	07f2      	lsls	r2, r6, #31
 800d6d2:	d505      	bpl.n	800d6e0 <_dtoa_r+0x4e8>
 800d6d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6d8:	f7f2 ffbe 	bl	8000658 <__aeabi_dmul>
 800d6dc:	3501      	adds	r5, #1
 800d6de:	2301      	movs	r3, #1
 800d6e0:	1076      	asrs	r6, r6, #1
 800d6e2:	3708      	adds	r7, #8
 800d6e4:	e773      	b.n	800d5ce <_dtoa_r+0x3d6>
 800d6e6:	2502      	movs	r5, #2
 800d6e8:	e775      	b.n	800d5d6 <_dtoa_r+0x3de>
 800d6ea:	9e04      	ldr	r6, [sp, #16]
 800d6ec:	465f      	mov	r7, fp
 800d6ee:	e792      	b.n	800d616 <_dtoa_r+0x41e>
 800d6f0:	9900      	ldr	r1, [sp, #0]
 800d6f2:	4b50      	ldr	r3, [pc, #320]	; (800d834 <_dtoa_r+0x63c>)
 800d6f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d6f8:	4431      	add	r1, r6
 800d6fa:	9102      	str	r1, [sp, #8]
 800d6fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d6fe:	eeb0 9a47 	vmov.f32	s18, s14
 800d702:	eef0 9a67 	vmov.f32	s19, s15
 800d706:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d70a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d70e:	2900      	cmp	r1, #0
 800d710:	d044      	beq.n	800d79c <_dtoa_r+0x5a4>
 800d712:	494e      	ldr	r1, [pc, #312]	; (800d84c <_dtoa_r+0x654>)
 800d714:	2000      	movs	r0, #0
 800d716:	f7f3 f8c9 	bl	80008ac <__aeabi_ddiv>
 800d71a:	ec53 2b19 	vmov	r2, r3, d9
 800d71e:	f7f2 fde3 	bl	80002e8 <__aeabi_dsub>
 800d722:	9d00      	ldr	r5, [sp, #0]
 800d724:	ec41 0b19 	vmov	d9, r0, r1
 800d728:	4649      	mov	r1, r9
 800d72a:	4640      	mov	r0, r8
 800d72c:	f7f3 fa44 	bl	8000bb8 <__aeabi_d2iz>
 800d730:	4606      	mov	r6, r0
 800d732:	f7f2 ff27 	bl	8000584 <__aeabi_i2d>
 800d736:	4602      	mov	r2, r0
 800d738:	460b      	mov	r3, r1
 800d73a:	4640      	mov	r0, r8
 800d73c:	4649      	mov	r1, r9
 800d73e:	f7f2 fdd3 	bl	80002e8 <__aeabi_dsub>
 800d742:	3630      	adds	r6, #48	; 0x30
 800d744:	f805 6b01 	strb.w	r6, [r5], #1
 800d748:	ec53 2b19 	vmov	r2, r3, d9
 800d74c:	4680      	mov	r8, r0
 800d74e:	4689      	mov	r9, r1
 800d750:	f7f3 f9f4 	bl	8000b3c <__aeabi_dcmplt>
 800d754:	2800      	cmp	r0, #0
 800d756:	d164      	bne.n	800d822 <_dtoa_r+0x62a>
 800d758:	4642      	mov	r2, r8
 800d75a:	464b      	mov	r3, r9
 800d75c:	4937      	ldr	r1, [pc, #220]	; (800d83c <_dtoa_r+0x644>)
 800d75e:	2000      	movs	r0, #0
 800d760:	f7f2 fdc2 	bl	80002e8 <__aeabi_dsub>
 800d764:	ec53 2b19 	vmov	r2, r3, d9
 800d768:	f7f3 f9e8 	bl	8000b3c <__aeabi_dcmplt>
 800d76c:	2800      	cmp	r0, #0
 800d76e:	f040 80b6 	bne.w	800d8de <_dtoa_r+0x6e6>
 800d772:	9b02      	ldr	r3, [sp, #8]
 800d774:	429d      	cmp	r5, r3
 800d776:	f43f af7c 	beq.w	800d672 <_dtoa_r+0x47a>
 800d77a:	4b31      	ldr	r3, [pc, #196]	; (800d840 <_dtoa_r+0x648>)
 800d77c:	ec51 0b19 	vmov	r0, r1, d9
 800d780:	2200      	movs	r2, #0
 800d782:	f7f2 ff69 	bl	8000658 <__aeabi_dmul>
 800d786:	4b2e      	ldr	r3, [pc, #184]	; (800d840 <_dtoa_r+0x648>)
 800d788:	ec41 0b19 	vmov	d9, r0, r1
 800d78c:	2200      	movs	r2, #0
 800d78e:	4640      	mov	r0, r8
 800d790:	4649      	mov	r1, r9
 800d792:	f7f2 ff61 	bl	8000658 <__aeabi_dmul>
 800d796:	4680      	mov	r8, r0
 800d798:	4689      	mov	r9, r1
 800d79a:	e7c5      	b.n	800d728 <_dtoa_r+0x530>
 800d79c:	ec51 0b17 	vmov	r0, r1, d7
 800d7a0:	f7f2 ff5a 	bl	8000658 <__aeabi_dmul>
 800d7a4:	9b02      	ldr	r3, [sp, #8]
 800d7a6:	9d00      	ldr	r5, [sp, #0]
 800d7a8:	930f      	str	r3, [sp, #60]	; 0x3c
 800d7aa:	ec41 0b19 	vmov	d9, r0, r1
 800d7ae:	4649      	mov	r1, r9
 800d7b0:	4640      	mov	r0, r8
 800d7b2:	f7f3 fa01 	bl	8000bb8 <__aeabi_d2iz>
 800d7b6:	4606      	mov	r6, r0
 800d7b8:	f7f2 fee4 	bl	8000584 <__aeabi_i2d>
 800d7bc:	3630      	adds	r6, #48	; 0x30
 800d7be:	4602      	mov	r2, r0
 800d7c0:	460b      	mov	r3, r1
 800d7c2:	4640      	mov	r0, r8
 800d7c4:	4649      	mov	r1, r9
 800d7c6:	f7f2 fd8f 	bl	80002e8 <__aeabi_dsub>
 800d7ca:	f805 6b01 	strb.w	r6, [r5], #1
 800d7ce:	9b02      	ldr	r3, [sp, #8]
 800d7d0:	429d      	cmp	r5, r3
 800d7d2:	4680      	mov	r8, r0
 800d7d4:	4689      	mov	r9, r1
 800d7d6:	f04f 0200 	mov.w	r2, #0
 800d7da:	d124      	bne.n	800d826 <_dtoa_r+0x62e>
 800d7dc:	4b1b      	ldr	r3, [pc, #108]	; (800d84c <_dtoa_r+0x654>)
 800d7de:	ec51 0b19 	vmov	r0, r1, d9
 800d7e2:	f7f2 fd83 	bl	80002ec <__adddf3>
 800d7e6:	4602      	mov	r2, r0
 800d7e8:	460b      	mov	r3, r1
 800d7ea:	4640      	mov	r0, r8
 800d7ec:	4649      	mov	r1, r9
 800d7ee:	f7f3 f9c3 	bl	8000b78 <__aeabi_dcmpgt>
 800d7f2:	2800      	cmp	r0, #0
 800d7f4:	d173      	bne.n	800d8de <_dtoa_r+0x6e6>
 800d7f6:	ec53 2b19 	vmov	r2, r3, d9
 800d7fa:	4914      	ldr	r1, [pc, #80]	; (800d84c <_dtoa_r+0x654>)
 800d7fc:	2000      	movs	r0, #0
 800d7fe:	f7f2 fd73 	bl	80002e8 <__aeabi_dsub>
 800d802:	4602      	mov	r2, r0
 800d804:	460b      	mov	r3, r1
 800d806:	4640      	mov	r0, r8
 800d808:	4649      	mov	r1, r9
 800d80a:	f7f3 f997 	bl	8000b3c <__aeabi_dcmplt>
 800d80e:	2800      	cmp	r0, #0
 800d810:	f43f af2f 	beq.w	800d672 <_dtoa_r+0x47a>
 800d814:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d816:	1e6b      	subs	r3, r5, #1
 800d818:	930f      	str	r3, [sp, #60]	; 0x3c
 800d81a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d81e:	2b30      	cmp	r3, #48	; 0x30
 800d820:	d0f8      	beq.n	800d814 <_dtoa_r+0x61c>
 800d822:	46bb      	mov	fp, r7
 800d824:	e04a      	b.n	800d8bc <_dtoa_r+0x6c4>
 800d826:	4b06      	ldr	r3, [pc, #24]	; (800d840 <_dtoa_r+0x648>)
 800d828:	f7f2 ff16 	bl	8000658 <__aeabi_dmul>
 800d82c:	4680      	mov	r8, r0
 800d82e:	4689      	mov	r9, r1
 800d830:	e7bd      	b.n	800d7ae <_dtoa_r+0x5b6>
 800d832:	bf00      	nop
 800d834:	0800f9f0 	.word	0x0800f9f0
 800d838:	0800f9c8 	.word	0x0800f9c8
 800d83c:	3ff00000 	.word	0x3ff00000
 800d840:	40240000 	.word	0x40240000
 800d844:	401c0000 	.word	0x401c0000
 800d848:	40140000 	.word	0x40140000
 800d84c:	3fe00000 	.word	0x3fe00000
 800d850:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d854:	9d00      	ldr	r5, [sp, #0]
 800d856:	4642      	mov	r2, r8
 800d858:	464b      	mov	r3, r9
 800d85a:	4630      	mov	r0, r6
 800d85c:	4639      	mov	r1, r7
 800d85e:	f7f3 f825 	bl	80008ac <__aeabi_ddiv>
 800d862:	f7f3 f9a9 	bl	8000bb8 <__aeabi_d2iz>
 800d866:	9001      	str	r0, [sp, #4]
 800d868:	f7f2 fe8c 	bl	8000584 <__aeabi_i2d>
 800d86c:	4642      	mov	r2, r8
 800d86e:	464b      	mov	r3, r9
 800d870:	f7f2 fef2 	bl	8000658 <__aeabi_dmul>
 800d874:	4602      	mov	r2, r0
 800d876:	460b      	mov	r3, r1
 800d878:	4630      	mov	r0, r6
 800d87a:	4639      	mov	r1, r7
 800d87c:	f7f2 fd34 	bl	80002e8 <__aeabi_dsub>
 800d880:	9e01      	ldr	r6, [sp, #4]
 800d882:	9f04      	ldr	r7, [sp, #16]
 800d884:	3630      	adds	r6, #48	; 0x30
 800d886:	f805 6b01 	strb.w	r6, [r5], #1
 800d88a:	9e00      	ldr	r6, [sp, #0]
 800d88c:	1bae      	subs	r6, r5, r6
 800d88e:	42b7      	cmp	r7, r6
 800d890:	4602      	mov	r2, r0
 800d892:	460b      	mov	r3, r1
 800d894:	d134      	bne.n	800d900 <_dtoa_r+0x708>
 800d896:	f7f2 fd29 	bl	80002ec <__adddf3>
 800d89a:	4642      	mov	r2, r8
 800d89c:	464b      	mov	r3, r9
 800d89e:	4606      	mov	r6, r0
 800d8a0:	460f      	mov	r7, r1
 800d8a2:	f7f3 f969 	bl	8000b78 <__aeabi_dcmpgt>
 800d8a6:	b9c8      	cbnz	r0, 800d8dc <_dtoa_r+0x6e4>
 800d8a8:	4642      	mov	r2, r8
 800d8aa:	464b      	mov	r3, r9
 800d8ac:	4630      	mov	r0, r6
 800d8ae:	4639      	mov	r1, r7
 800d8b0:	f7f3 f93a 	bl	8000b28 <__aeabi_dcmpeq>
 800d8b4:	b110      	cbz	r0, 800d8bc <_dtoa_r+0x6c4>
 800d8b6:	9b01      	ldr	r3, [sp, #4]
 800d8b8:	07db      	lsls	r3, r3, #31
 800d8ba:	d40f      	bmi.n	800d8dc <_dtoa_r+0x6e4>
 800d8bc:	4651      	mov	r1, sl
 800d8be:	4620      	mov	r0, r4
 800d8c0:	f000 fb18 	bl	800def4 <_Bfree>
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d8c8:	702b      	strb	r3, [r5, #0]
 800d8ca:	f10b 0301 	add.w	r3, fp, #1
 800d8ce:	6013      	str	r3, [r2, #0]
 800d8d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	f43f ace2 	beq.w	800d29c <_dtoa_r+0xa4>
 800d8d8:	601d      	str	r5, [r3, #0]
 800d8da:	e4df      	b.n	800d29c <_dtoa_r+0xa4>
 800d8dc:	465f      	mov	r7, fp
 800d8de:	462b      	mov	r3, r5
 800d8e0:	461d      	mov	r5, r3
 800d8e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d8e6:	2a39      	cmp	r2, #57	; 0x39
 800d8e8:	d106      	bne.n	800d8f8 <_dtoa_r+0x700>
 800d8ea:	9a00      	ldr	r2, [sp, #0]
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	d1f7      	bne.n	800d8e0 <_dtoa_r+0x6e8>
 800d8f0:	9900      	ldr	r1, [sp, #0]
 800d8f2:	2230      	movs	r2, #48	; 0x30
 800d8f4:	3701      	adds	r7, #1
 800d8f6:	700a      	strb	r2, [r1, #0]
 800d8f8:	781a      	ldrb	r2, [r3, #0]
 800d8fa:	3201      	adds	r2, #1
 800d8fc:	701a      	strb	r2, [r3, #0]
 800d8fe:	e790      	b.n	800d822 <_dtoa_r+0x62a>
 800d900:	4ba3      	ldr	r3, [pc, #652]	; (800db90 <_dtoa_r+0x998>)
 800d902:	2200      	movs	r2, #0
 800d904:	f7f2 fea8 	bl	8000658 <__aeabi_dmul>
 800d908:	2200      	movs	r2, #0
 800d90a:	2300      	movs	r3, #0
 800d90c:	4606      	mov	r6, r0
 800d90e:	460f      	mov	r7, r1
 800d910:	f7f3 f90a 	bl	8000b28 <__aeabi_dcmpeq>
 800d914:	2800      	cmp	r0, #0
 800d916:	d09e      	beq.n	800d856 <_dtoa_r+0x65e>
 800d918:	e7d0      	b.n	800d8bc <_dtoa_r+0x6c4>
 800d91a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d91c:	2a00      	cmp	r2, #0
 800d91e:	f000 80ca 	beq.w	800dab6 <_dtoa_r+0x8be>
 800d922:	9a07      	ldr	r2, [sp, #28]
 800d924:	2a01      	cmp	r2, #1
 800d926:	f300 80ad 	bgt.w	800da84 <_dtoa_r+0x88c>
 800d92a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d92c:	2a00      	cmp	r2, #0
 800d92e:	f000 80a5 	beq.w	800da7c <_dtoa_r+0x884>
 800d932:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d936:	9e08      	ldr	r6, [sp, #32]
 800d938:	9d05      	ldr	r5, [sp, #20]
 800d93a:	9a05      	ldr	r2, [sp, #20]
 800d93c:	441a      	add	r2, r3
 800d93e:	9205      	str	r2, [sp, #20]
 800d940:	9a06      	ldr	r2, [sp, #24]
 800d942:	2101      	movs	r1, #1
 800d944:	441a      	add	r2, r3
 800d946:	4620      	mov	r0, r4
 800d948:	9206      	str	r2, [sp, #24]
 800d94a:	f000 fb89 	bl	800e060 <__i2b>
 800d94e:	4607      	mov	r7, r0
 800d950:	b165      	cbz	r5, 800d96c <_dtoa_r+0x774>
 800d952:	9b06      	ldr	r3, [sp, #24]
 800d954:	2b00      	cmp	r3, #0
 800d956:	dd09      	ble.n	800d96c <_dtoa_r+0x774>
 800d958:	42ab      	cmp	r3, r5
 800d95a:	9a05      	ldr	r2, [sp, #20]
 800d95c:	bfa8      	it	ge
 800d95e:	462b      	movge	r3, r5
 800d960:	1ad2      	subs	r2, r2, r3
 800d962:	9205      	str	r2, [sp, #20]
 800d964:	9a06      	ldr	r2, [sp, #24]
 800d966:	1aed      	subs	r5, r5, r3
 800d968:	1ad3      	subs	r3, r2, r3
 800d96a:	9306      	str	r3, [sp, #24]
 800d96c:	9b08      	ldr	r3, [sp, #32]
 800d96e:	b1f3      	cbz	r3, 800d9ae <_dtoa_r+0x7b6>
 800d970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d972:	2b00      	cmp	r3, #0
 800d974:	f000 80a3 	beq.w	800dabe <_dtoa_r+0x8c6>
 800d978:	2e00      	cmp	r6, #0
 800d97a:	dd10      	ble.n	800d99e <_dtoa_r+0x7a6>
 800d97c:	4639      	mov	r1, r7
 800d97e:	4632      	mov	r2, r6
 800d980:	4620      	mov	r0, r4
 800d982:	f000 fc2d 	bl	800e1e0 <__pow5mult>
 800d986:	4652      	mov	r2, sl
 800d988:	4601      	mov	r1, r0
 800d98a:	4607      	mov	r7, r0
 800d98c:	4620      	mov	r0, r4
 800d98e:	f000 fb7d 	bl	800e08c <__multiply>
 800d992:	4651      	mov	r1, sl
 800d994:	4680      	mov	r8, r0
 800d996:	4620      	mov	r0, r4
 800d998:	f000 faac 	bl	800def4 <_Bfree>
 800d99c:	46c2      	mov	sl, r8
 800d99e:	9b08      	ldr	r3, [sp, #32]
 800d9a0:	1b9a      	subs	r2, r3, r6
 800d9a2:	d004      	beq.n	800d9ae <_dtoa_r+0x7b6>
 800d9a4:	4651      	mov	r1, sl
 800d9a6:	4620      	mov	r0, r4
 800d9a8:	f000 fc1a 	bl	800e1e0 <__pow5mult>
 800d9ac:	4682      	mov	sl, r0
 800d9ae:	2101      	movs	r1, #1
 800d9b0:	4620      	mov	r0, r4
 800d9b2:	f000 fb55 	bl	800e060 <__i2b>
 800d9b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	4606      	mov	r6, r0
 800d9bc:	f340 8081 	ble.w	800dac2 <_dtoa_r+0x8ca>
 800d9c0:	461a      	mov	r2, r3
 800d9c2:	4601      	mov	r1, r0
 800d9c4:	4620      	mov	r0, r4
 800d9c6:	f000 fc0b 	bl	800e1e0 <__pow5mult>
 800d9ca:	9b07      	ldr	r3, [sp, #28]
 800d9cc:	2b01      	cmp	r3, #1
 800d9ce:	4606      	mov	r6, r0
 800d9d0:	dd7a      	ble.n	800dac8 <_dtoa_r+0x8d0>
 800d9d2:	f04f 0800 	mov.w	r8, #0
 800d9d6:	6933      	ldr	r3, [r6, #16]
 800d9d8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d9dc:	6918      	ldr	r0, [r3, #16]
 800d9de:	f000 faf1 	bl	800dfc4 <__hi0bits>
 800d9e2:	f1c0 0020 	rsb	r0, r0, #32
 800d9e6:	9b06      	ldr	r3, [sp, #24]
 800d9e8:	4418      	add	r0, r3
 800d9ea:	f010 001f 	ands.w	r0, r0, #31
 800d9ee:	f000 8094 	beq.w	800db1a <_dtoa_r+0x922>
 800d9f2:	f1c0 0320 	rsb	r3, r0, #32
 800d9f6:	2b04      	cmp	r3, #4
 800d9f8:	f340 8085 	ble.w	800db06 <_dtoa_r+0x90e>
 800d9fc:	9b05      	ldr	r3, [sp, #20]
 800d9fe:	f1c0 001c 	rsb	r0, r0, #28
 800da02:	4403      	add	r3, r0
 800da04:	9305      	str	r3, [sp, #20]
 800da06:	9b06      	ldr	r3, [sp, #24]
 800da08:	4403      	add	r3, r0
 800da0a:	4405      	add	r5, r0
 800da0c:	9306      	str	r3, [sp, #24]
 800da0e:	9b05      	ldr	r3, [sp, #20]
 800da10:	2b00      	cmp	r3, #0
 800da12:	dd05      	ble.n	800da20 <_dtoa_r+0x828>
 800da14:	4651      	mov	r1, sl
 800da16:	461a      	mov	r2, r3
 800da18:	4620      	mov	r0, r4
 800da1a:	f000 fc3b 	bl	800e294 <__lshift>
 800da1e:	4682      	mov	sl, r0
 800da20:	9b06      	ldr	r3, [sp, #24]
 800da22:	2b00      	cmp	r3, #0
 800da24:	dd05      	ble.n	800da32 <_dtoa_r+0x83a>
 800da26:	4631      	mov	r1, r6
 800da28:	461a      	mov	r2, r3
 800da2a:	4620      	mov	r0, r4
 800da2c:	f000 fc32 	bl	800e294 <__lshift>
 800da30:	4606      	mov	r6, r0
 800da32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da34:	2b00      	cmp	r3, #0
 800da36:	d072      	beq.n	800db1e <_dtoa_r+0x926>
 800da38:	4631      	mov	r1, r6
 800da3a:	4650      	mov	r0, sl
 800da3c:	f000 fc96 	bl	800e36c <__mcmp>
 800da40:	2800      	cmp	r0, #0
 800da42:	da6c      	bge.n	800db1e <_dtoa_r+0x926>
 800da44:	2300      	movs	r3, #0
 800da46:	4651      	mov	r1, sl
 800da48:	220a      	movs	r2, #10
 800da4a:	4620      	mov	r0, r4
 800da4c:	f000 fa74 	bl	800df38 <__multadd>
 800da50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da52:	f10b 3bff 	add.w	fp, fp, #4294967295
 800da56:	4682      	mov	sl, r0
 800da58:	2b00      	cmp	r3, #0
 800da5a:	f000 81b0 	beq.w	800ddbe <_dtoa_r+0xbc6>
 800da5e:	2300      	movs	r3, #0
 800da60:	4639      	mov	r1, r7
 800da62:	220a      	movs	r2, #10
 800da64:	4620      	mov	r0, r4
 800da66:	f000 fa67 	bl	800df38 <__multadd>
 800da6a:	9b01      	ldr	r3, [sp, #4]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	4607      	mov	r7, r0
 800da70:	f300 8096 	bgt.w	800dba0 <_dtoa_r+0x9a8>
 800da74:	9b07      	ldr	r3, [sp, #28]
 800da76:	2b02      	cmp	r3, #2
 800da78:	dc59      	bgt.n	800db2e <_dtoa_r+0x936>
 800da7a:	e091      	b.n	800dba0 <_dtoa_r+0x9a8>
 800da7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800da7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800da82:	e758      	b.n	800d936 <_dtoa_r+0x73e>
 800da84:	9b04      	ldr	r3, [sp, #16]
 800da86:	1e5e      	subs	r6, r3, #1
 800da88:	9b08      	ldr	r3, [sp, #32]
 800da8a:	42b3      	cmp	r3, r6
 800da8c:	bfbf      	itttt	lt
 800da8e:	9b08      	ldrlt	r3, [sp, #32]
 800da90:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800da92:	9608      	strlt	r6, [sp, #32]
 800da94:	1af3      	sublt	r3, r6, r3
 800da96:	bfb4      	ite	lt
 800da98:	18d2      	addlt	r2, r2, r3
 800da9a:	1b9e      	subge	r6, r3, r6
 800da9c:	9b04      	ldr	r3, [sp, #16]
 800da9e:	bfbc      	itt	lt
 800daa0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800daa2:	2600      	movlt	r6, #0
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	bfb7      	itett	lt
 800daa8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800daac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800dab0:	1a9d      	sublt	r5, r3, r2
 800dab2:	2300      	movlt	r3, #0
 800dab4:	e741      	b.n	800d93a <_dtoa_r+0x742>
 800dab6:	9e08      	ldr	r6, [sp, #32]
 800dab8:	9d05      	ldr	r5, [sp, #20]
 800daba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800dabc:	e748      	b.n	800d950 <_dtoa_r+0x758>
 800dabe:	9a08      	ldr	r2, [sp, #32]
 800dac0:	e770      	b.n	800d9a4 <_dtoa_r+0x7ac>
 800dac2:	9b07      	ldr	r3, [sp, #28]
 800dac4:	2b01      	cmp	r3, #1
 800dac6:	dc19      	bgt.n	800dafc <_dtoa_r+0x904>
 800dac8:	9b02      	ldr	r3, [sp, #8]
 800daca:	b9bb      	cbnz	r3, 800dafc <_dtoa_r+0x904>
 800dacc:	9b03      	ldr	r3, [sp, #12]
 800dace:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dad2:	b99b      	cbnz	r3, 800dafc <_dtoa_r+0x904>
 800dad4:	9b03      	ldr	r3, [sp, #12]
 800dad6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dada:	0d1b      	lsrs	r3, r3, #20
 800dadc:	051b      	lsls	r3, r3, #20
 800dade:	b183      	cbz	r3, 800db02 <_dtoa_r+0x90a>
 800dae0:	9b05      	ldr	r3, [sp, #20]
 800dae2:	3301      	adds	r3, #1
 800dae4:	9305      	str	r3, [sp, #20]
 800dae6:	9b06      	ldr	r3, [sp, #24]
 800dae8:	3301      	adds	r3, #1
 800daea:	9306      	str	r3, [sp, #24]
 800daec:	f04f 0801 	mov.w	r8, #1
 800daf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	f47f af6f 	bne.w	800d9d6 <_dtoa_r+0x7de>
 800daf8:	2001      	movs	r0, #1
 800dafa:	e774      	b.n	800d9e6 <_dtoa_r+0x7ee>
 800dafc:	f04f 0800 	mov.w	r8, #0
 800db00:	e7f6      	b.n	800daf0 <_dtoa_r+0x8f8>
 800db02:	4698      	mov	r8, r3
 800db04:	e7f4      	b.n	800daf0 <_dtoa_r+0x8f8>
 800db06:	d082      	beq.n	800da0e <_dtoa_r+0x816>
 800db08:	9a05      	ldr	r2, [sp, #20]
 800db0a:	331c      	adds	r3, #28
 800db0c:	441a      	add	r2, r3
 800db0e:	9205      	str	r2, [sp, #20]
 800db10:	9a06      	ldr	r2, [sp, #24]
 800db12:	441a      	add	r2, r3
 800db14:	441d      	add	r5, r3
 800db16:	9206      	str	r2, [sp, #24]
 800db18:	e779      	b.n	800da0e <_dtoa_r+0x816>
 800db1a:	4603      	mov	r3, r0
 800db1c:	e7f4      	b.n	800db08 <_dtoa_r+0x910>
 800db1e:	9b04      	ldr	r3, [sp, #16]
 800db20:	2b00      	cmp	r3, #0
 800db22:	dc37      	bgt.n	800db94 <_dtoa_r+0x99c>
 800db24:	9b07      	ldr	r3, [sp, #28]
 800db26:	2b02      	cmp	r3, #2
 800db28:	dd34      	ble.n	800db94 <_dtoa_r+0x99c>
 800db2a:	9b04      	ldr	r3, [sp, #16]
 800db2c:	9301      	str	r3, [sp, #4]
 800db2e:	9b01      	ldr	r3, [sp, #4]
 800db30:	b963      	cbnz	r3, 800db4c <_dtoa_r+0x954>
 800db32:	4631      	mov	r1, r6
 800db34:	2205      	movs	r2, #5
 800db36:	4620      	mov	r0, r4
 800db38:	f000 f9fe 	bl	800df38 <__multadd>
 800db3c:	4601      	mov	r1, r0
 800db3e:	4606      	mov	r6, r0
 800db40:	4650      	mov	r0, sl
 800db42:	f000 fc13 	bl	800e36c <__mcmp>
 800db46:	2800      	cmp	r0, #0
 800db48:	f73f adbb 	bgt.w	800d6c2 <_dtoa_r+0x4ca>
 800db4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db4e:	9d00      	ldr	r5, [sp, #0]
 800db50:	ea6f 0b03 	mvn.w	fp, r3
 800db54:	f04f 0800 	mov.w	r8, #0
 800db58:	4631      	mov	r1, r6
 800db5a:	4620      	mov	r0, r4
 800db5c:	f000 f9ca 	bl	800def4 <_Bfree>
 800db60:	2f00      	cmp	r7, #0
 800db62:	f43f aeab 	beq.w	800d8bc <_dtoa_r+0x6c4>
 800db66:	f1b8 0f00 	cmp.w	r8, #0
 800db6a:	d005      	beq.n	800db78 <_dtoa_r+0x980>
 800db6c:	45b8      	cmp	r8, r7
 800db6e:	d003      	beq.n	800db78 <_dtoa_r+0x980>
 800db70:	4641      	mov	r1, r8
 800db72:	4620      	mov	r0, r4
 800db74:	f000 f9be 	bl	800def4 <_Bfree>
 800db78:	4639      	mov	r1, r7
 800db7a:	4620      	mov	r0, r4
 800db7c:	f000 f9ba 	bl	800def4 <_Bfree>
 800db80:	e69c      	b.n	800d8bc <_dtoa_r+0x6c4>
 800db82:	2600      	movs	r6, #0
 800db84:	4637      	mov	r7, r6
 800db86:	e7e1      	b.n	800db4c <_dtoa_r+0x954>
 800db88:	46bb      	mov	fp, r7
 800db8a:	4637      	mov	r7, r6
 800db8c:	e599      	b.n	800d6c2 <_dtoa_r+0x4ca>
 800db8e:	bf00      	nop
 800db90:	40240000 	.word	0x40240000
 800db94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db96:	2b00      	cmp	r3, #0
 800db98:	f000 80c8 	beq.w	800dd2c <_dtoa_r+0xb34>
 800db9c:	9b04      	ldr	r3, [sp, #16]
 800db9e:	9301      	str	r3, [sp, #4]
 800dba0:	2d00      	cmp	r5, #0
 800dba2:	dd05      	ble.n	800dbb0 <_dtoa_r+0x9b8>
 800dba4:	4639      	mov	r1, r7
 800dba6:	462a      	mov	r2, r5
 800dba8:	4620      	mov	r0, r4
 800dbaa:	f000 fb73 	bl	800e294 <__lshift>
 800dbae:	4607      	mov	r7, r0
 800dbb0:	f1b8 0f00 	cmp.w	r8, #0
 800dbb4:	d05b      	beq.n	800dc6e <_dtoa_r+0xa76>
 800dbb6:	6879      	ldr	r1, [r7, #4]
 800dbb8:	4620      	mov	r0, r4
 800dbba:	f000 f95b 	bl	800de74 <_Balloc>
 800dbbe:	4605      	mov	r5, r0
 800dbc0:	b928      	cbnz	r0, 800dbce <_dtoa_r+0x9d6>
 800dbc2:	4b83      	ldr	r3, [pc, #524]	; (800ddd0 <_dtoa_r+0xbd8>)
 800dbc4:	4602      	mov	r2, r0
 800dbc6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800dbca:	f7ff bb2e 	b.w	800d22a <_dtoa_r+0x32>
 800dbce:	693a      	ldr	r2, [r7, #16]
 800dbd0:	3202      	adds	r2, #2
 800dbd2:	0092      	lsls	r2, r2, #2
 800dbd4:	f107 010c 	add.w	r1, r7, #12
 800dbd8:	300c      	adds	r0, #12
 800dbda:	f7ff fa76 	bl	800d0ca <memcpy>
 800dbde:	2201      	movs	r2, #1
 800dbe0:	4629      	mov	r1, r5
 800dbe2:	4620      	mov	r0, r4
 800dbe4:	f000 fb56 	bl	800e294 <__lshift>
 800dbe8:	9b00      	ldr	r3, [sp, #0]
 800dbea:	3301      	adds	r3, #1
 800dbec:	9304      	str	r3, [sp, #16]
 800dbee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dbf2:	4413      	add	r3, r2
 800dbf4:	9308      	str	r3, [sp, #32]
 800dbf6:	9b02      	ldr	r3, [sp, #8]
 800dbf8:	f003 0301 	and.w	r3, r3, #1
 800dbfc:	46b8      	mov	r8, r7
 800dbfe:	9306      	str	r3, [sp, #24]
 800dc00:	4607      	mov	r7, r0
 800dc02:	9b04      	ldr	r3, [sp, #16]
 800dc04:	4631      	mov	r1, r6
 800dc06:	3b01      	subs	r3, #1
 800dc08:	4650      	mov	r0, sl
 800dc0a:	9301      	str	r3, [sp, #4]
 800dc0c:	f7ff fa6b 	bl	800d0e6 <quorem>
 800dc10:	4641      	mov	r1, r8
 800dc12:	9002      	str	r0, [sp, #8]
 800dc14:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800dc18:	4650      	mov	r0, sl
 800dc1a:	f000 fba7 	bl	800e36c <__mcmp>
 800dc1e:	463a      	mov	r2, r7
 800dc20:	9005      	str	r0, [sp, #20]
 800dc22:	4631      	mov	r1, r6
 800dc24:	4620      	mov	r0, r4
 800dc26:	f000 fbbd 	bl	800e3a4 <__mdiff>
 800dc2a:	68c2      	ldr	r2, [r0, #12]
 800dc2c:	4605      	mov	r5, r0
 800dc2e:	bb02      	cbnz	r2, 800dc72 <_dtoa_r+0xa7a>
 800dc30:	4601      	mov	r1, r0
 800dc32:	4650      	mov	r0, sl
 800dc34:	f000 fb9a 	bl	800e36c <__mcmp>
 800dc38:	4602      	mov	r2, r0
 800dc3a:	4629      	mov	r1, r5
 800dc3c:	4620      	mov	r0, r4
 800dc3e:	9209      	str	r2, [sp, #36]	; 0x24
 800dc40:	f000 f958 	bl	800def4 <_Bfree>
 800dc44:	9b07      	ldr	r3, [sp, #28]
 800dc46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc48:	9d04      	ldr	r5, [sp, #16]
 800dc4a:	ea43 0102 	orr.w	r1, r3, r2
 800dc4e:	9b06      	ldr	r3, [sp, #24]
 800dc50:	4319      	orrs	r1, r3
 800dc52:	d110      	bne.n	800dc76 <_dtoa_r+0xa7e>
 800dc54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800dc58:	d029      	beq.n	800dcae <_dtoa_r+0xab6>
 800dc5a:	9b05      	ldr	r3, [sp, #20]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	dd02      	ble.n	800dc66 <_dtoa_r+0xa6e>
 800dc60:	9b02      	ldr	r3, [sp, #8]
 800dc62:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800dc66:	9b01      	ldr	r3, [sp, #4]
 800dc68:	f883 9000 	strb.w	r9, [r3]
 800dc6c:	e774      	b.n	800db58 <_dtoa_r+0x960>
 800dc6e:	4638      	mov	r0, r7
 800dc70:	e7ba      	b.n	800dbe8 <_dtoa_r+0x9f0>
 800dc72:	2201      	movs	r2, #1
 800dc74:	e7e1      	b.n	800dc3a <_dtoa_r+0xa42>
 800dc76:	9b05      	ldr	r3, [sp, #20]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	db04      	blt.n	800dc86 <_dtoa_r+0xa8e>
 800dc7c:	9907      	ldr	r1, [sp, #28]
 800dc7e:	430b      	orrs	r3, r1
 800dc80:	9906      	ldr	r1, [sp, #24]
 800dc82:	430b      	orrs	r3, r1
 800dc84:	d120      	bne.n	800dcc8 <_dtoa_r+0xad0>
 800dc86:	2a00      	cmp	r2, #0
 800dc88:	dded      	ble.n	800dc66 <_dtoa_r+0xa6e>
 800dc8a:	4651      	mov	r1, sl
 800dc8c:	2201      	movs	r2, #1
 800dc8e:	4620      	mov	r0, r4
 800dc90:	f000 fb00 	bl	800e294 <__lshift>
 800dc94:	4631      	mov	r1, r6
 800dc96:	4682      	mov	sl, r0
 800dc98:	f000 fb68 	bl	800e36c <__mcmp>
 800dc9c:	2800      	cmp	r0, #0
 800dc9e:	dc03      	bgt.n	800dca8 <_dtoa_r+0xab0>
 800dca0:	d1e1      	bne.n	800dc66 <_dtoa_r+0xa6e>
 800dca2:	f019 0f01 	tst.w	r9, #1
 800dca6:	d0de      	beq.n	800dc66 <_dtoa_r+0xa6e>
 800dca8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800dcac:	d1d8      	bne.n	800dc60 <_dtoa_r+0xa68>
 800dcae:	9a01      	ldr	r2, [sp, #4]
 800dcb0:	2339      	movs	r3, #57	; 0x39
 800dcb2:	7013      	strb	r3, [r2, #0]
 800dcb4:	462b      	mov	r3, r5
 800dcb6:	461d      	mov	r5, r3
 800dcb8:	3b01      	subs	r3, #1
 800dcba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800dcbe:	2a39      	cmp	r2, #57	; 0x39
 800dcc0:	d06c      	beq.n	800dd9c <_dtoa_r+0xba4>
 800dcc2:	3201      	adds	r2, #1
 800dcc4:	701a      	strb	r2, [r3, #0]
 800dcc6:	e747      	b.n	800db58 <_dtoa_r+0x960>
 800dcc8:	2a00      	cmp	r2, #0
 800dcca:	dd07      	ble.n	800dcdc <_dtoa_r+0xae4>
 800dccc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800dcd0:	d0ed      	beq.n	800dcae <_dtoa_r+0xab6>
 800dcd2:	9a01      	ldr	r2, [sp, #4]
 800dcd4:	f109 0301 	add.w	r3, r9, #1
 800dcd8:	7013      	strb	r3, [r2, #0]
 800dcda:	e73d      	b.n	800db58 <_dtoa_r+0x960>
 800dcdc:	9b04      	ldr	r3, [sp, #16]
 800dcde:	9a08      	ldr	r2, [sp, #32]
 800dce0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800dce4:	4293      	cmp	r3, r2
 800dce6:	d043      	beq.n	800dd70 <_dtoa_r+0xb78>
 800dce8:	4651      	mov	r1, sl
 800dcea:	2300      	movs	r3, #0
 800dcec:	220a      	movs	r2, #10
 800dcee:	4620      	mov	r0, r4
 800dcf0:	f000 f922 	bl	800df38 <__multadd>
 800dcf4:	45b8      	cmp	r8, r7
 800dcf6:	4682      	mov	sl, r0
 800dcf8:	f04f 0300 	mov.w	r3, #0
 800dcfc:	f04f 020a 	mov.w	r2, #10
 800dd00:	4641      	mov	r1, r8
 800dd02:	4620      	mov	r0, r4
 800dd04:	d107      	bne.n	800dd16 <_dtoa_r+0xb1e>
 800dd06:	f000 f917 	bl	800df38 <__multadd>
 800dd0a:	4680      	mov	r8, r0
 800dd0c:	4607      	mov	r7, r0
 800dd0e:	9b04      	ldr	r3, [sp, #16]
 800dd10:	3301      	adds	r3, #1
 800dd12:	9304      	str	r3, [sp, #16]
 800dd14:	e775      	b.n	800dc02 <_dtoa_r+0xa0a>
 800dd16:	f000 f90f 	bl	800df38 <__multadd>
 800dd1a:	4639      	mov	r1, r7
 800dd1c:	4680      	mov	r8, r0
 800dd1e:	2300      	movs	r3, #0
 800dd20:	220a      	movs	r2, #10
 800dd22:	4620      	mov	r0, r4
 800dd24:	f000 f908 	bl	800df38 <__multadd>
 800dd28:	4607      	mov	r7, r0
 800dd2a:	e7f0      	b.n	800dd0e <_dtoa_r+0xb16>
 800dd2c:	9b04      	ldr	r3, [sp, #16]
 800dd2e:	9301      	str	r3, [sp, #4]
 800dd30:	9d00      	ldr	r5, [sp, #0]
 800dd32:	4631      	mov	r1, r6
 800dd34:	4650      	mov	r0, sl
 800dd36:	f7ff f9d6 	bl	800d0e6 <quorem>
 800dd3a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800dd3e:	9b00      	ldr	r3, [sp, #0]
 800dd40:	f805 9b01 	strb.w	r9, [r5], #1
 800dd44:	1aea      	subs	r2, r5, r3
 800dd46:	9b01      	ldr	r3, [sp, #4]
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	dd07      	ble.n	800dd5c <_dtoa_r+0xb64>
 800dd4c:	4651      	mov	r1, sl
 800dd4e:	2300      	movs	r3, #0
 800dd50:	220a      	movs	r2, #10
 800dd52:	4620      	mov	r0, r4
 800dd54:	f000 f8f0 	bl	800df38 <__multadd>
 800dd58:	4682      	mov	sl, r0
 800dd5a:	e7ea      	b.n	800dd32 <_dtoa_r+0xb3a>
 800dd5c:	9b01      	ldr	r3, [sp, #4]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	bfc8      	it	gt
 800dd62:	461d      	movgt	r5, r3
 800dd64:	9b00      	ldr	r3, [sp, #0]
 800dd66:	bfd8      	it	le
 800dd68:	2501      	movle	r5, #1
 800dd6a:	441d      	add	r5, r3
 800dd6c:	f04f 0800 	mov.w	r8, #0
 800dd70:	4651      	mov	r1, sl
 800dd72:	2201      	movs	r2, #1
 800dd74:	4620      	mov	r0, r4
 800dd76:	f000 fa8d 	bl	800e294 <__lshift>
 800dd7a:	4631      	mov	r1, r6
 800dd7c:	4682      	mov	sl, r0
 800dd7e:	f000 faf5 	bl	800e36c <__mcmp>
 800dd82:	2800      	cmp	r0, #0
 800dd84:	dc96      	bgt.n	800dcb4 <_dtoa_r+0xabc>
 800dd86:	d102      	bne.n	800dd8e <_dtoa_r+0xb96>
 800dd88:	f019 0f01 	tst.w	r9, #1
 800dd8c:	d192      	bne.n	800dcb4 <_dtoa_r+0xabc>
 800dd8e:	462b      	mov	r3, r5
 800dd90:	461d      	mov	r5, r3
 800dd92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dd96:	2a30      	cmp	r2, #48	; 0x30
 800dd98:	d0fa      	beq.n	800dd90 <_dtoa_r+0xb98>
 800dd9a:	e6dd      	b.n	800db58 <_dtoa_r+0x960>
 800dd9c:	9a00      	ldr	r2, [sp, #0]
 800dd9e:	429a      	cmp	r2, r3
 800dda0:	d189      	bne.n	800dcb6 <_dtoa_r+0xabe>
 800dda2:	f10b 0b01 	add.w	fp, fp, #1
 800dda6:	2331      	movs	r3, #49	; 0x31
 800dda8:	e796      	b.n	800dcd8 <_dtoa_r+0xae0>
 800ddaa:	4b0a      	ldr	r3, [pc, #40]	; (800ddd4 <_dtoa_r+0xbdc>)
 800ddac:	f7ff ba99 	b.w	800d2e2 <_dtoa_r+0xea>
 800ddb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	f47f aa6d 	bne.w	800d292 <_dtoa_r+0x9a>
 800ddb8:	4b07      	ldr	r3, [pc, #28]	; (800ddd8 <_dtoa_r+0xbe0>)
 800ddba:	f7ff ba92 	b.w	800d2e2 <_dtoa_r+0xea>
 800ddbe:	9b01      	ldr	r3, [sp, #4]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	dcb5      	bgt.n	800dd30 <_dtoa_r+0xb38>
 800ddc4:	9b07      	ldr	r3, [sp, #28]
 800ddc6:	2b02      	cmp	r3, #2
 800ddc8:	f73f aeb1 	bgt.w	800db2e <_dtoa_r+0x936>
 800ddcc:	e7b0      	b.n	800dd30 <_dtoa_r+0xb38>
 800ddce:	bf00      	nop
 800ddd0:	0800f95d 	.word	0x0800f95d
 800ddd4:	0800f8bd 	.word	0x0800f8bd
 800ddd8:	0800f8e1 	.word	0x0800f8e1

0800dddc <_free_r>:
 800dddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ddde:	2900      	cmp	r1, #0
 800dde0:	d044      	beq.n	800de6c <_free_r+0x90>
 800dde2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dde6:	9001      	str	r0, [sp, #4]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	f1a1 0404 	sub.w	r4, r1, #4
 800ddee:	bfb8      	it	lt
 800ddf0:	18e4      	addlt	r4, r4, r3
 800ddf2:	f7fe faff 	bl	800c3f4 <__malloc_lock>
 800ddf6:	4a1e      	ldr	r2, [pc, #120]	; (800de70 <_free_r+0x94>)
 800ddf8:	9801      	ldr	r0, [sp, #4]
 800ddfa:	6813      	ldr	r3, [r2, #0]
 800ddfc:	b933      	cbnz	r3, 800de0c <_free_r+0x30>
 800ddfe:	6063      	str	r3, [r4, #4]
 800de00:	6014      	str	r4, [r2, #0]
 800de02:	b003      	add	sp, #12
 800de04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de08:	f7fe bafa 	b.w	800c400 <__malloc_unlock>
 800de0c:	42a3      	cmp	r3, r4
 800de0e:	d908      	bls.n	800de22 <_free_r+0x46>
 800de10:	6825      	ldr	r5, [r4, #0]
 800de12:	1961      	adds	r1, r4, r5
 800de14:	428b      	cmp	r3, r1
 800de16:	bf01      	itttt	eq
 800de18:	6819      	ldreq	r1, [r3, #0]
 800de1a:	685b      	ldreq	r3, [r3, #4]
 800de1c:	1949      	addeq	r1, r1, r5
 800de1e:	6021      	streq	r1, [r4, #0]
 800de20:	e7ed      	b.n	800ddfe <_free_r+0x22>
 800de22:	461a      	mov	r2, r3
 800de24:	685b      	ldr	r3, [r3, #4]
 800de26:	b10b      	cbz	r3, 800de2c <_free_r+0x50>
 800de28:	42a3      	cmp	r3, r4
 800de2a:	d9fa      	bls.n	800de22 <_free_r+0x46>
 800de2c:	6811      	ldr	r1, [r2, #0]
 800de2e:	1855      	adds	r5, r2, r1
 800de30:	42a5      	cmp	r5, r4
 800de32:	d10b      	bne.n	800de4c <_free_r+0x70>
 800de34:	6824      	ldr	r4, [r4, #0]
 800de36:	4421      	add	r1, r4
 800de38:	1854      	adds	r4, r2, r1
 800de3a:	42a3      	cmp	r3, r4
 800de3c:	6011      	str	r1, [r2, #0]
 800de3e:	d1e0      	bne.n	800de02 <_free_r+0x26>
 800de40:	681c      	ldr	r4, [r3, #0]
 800de42:	685b      	ldr	r3, [r3, #4]
 800de44:	6053      	str	r3, [r2, #4]
 800de46:	440c      	add	r4, r1
 800de48:	6014      	str	r4, [r2, #0]
 800de4a:	e7da      	b.n	800de02 <_free_r+0x26>
 800de4c:	d902      	bls.n	800de54 <_free_r+0x78>
 800de4e:	230c      	movs	r3, #12
 800de50:	6003      	str	r3, [r0, #0]
 800de52:	e7d6      	b.n	800de02 <_free_r+0x26>
 800de54:	6825      	ldr	r5, [r4, #0]
 800de56:	1961      	adds	r1, r4, r5
 800de58:	428b      	cmp	r3, r1
 800de5a:	bf04      	itt	eq
 800de5c:	6819      	ldreq	r1, [r3, #0]
 800de5e:	685b      	ldreq	r3, [r3, #4]
 800de60:	6063      	str	r3, [r4, #4]
 800de62:	bf04      	itt	eq
 800de64:	1949      	addeq	r1, r1, r5
 800de66:	6021      	streq	r1, [r4, #0]
 800de68:	6054      	str	r4, [r2, #4]
 800de6a:	e7ca      	b.n	800de02 <_free_r+0x26>
 800de6c:	b003      	add	sp, #12
 800de6e:	bd30      	pop	{r4, r5, pc}
 800de70:	200004d0 	.word	0x200004d0

0800de74 <_Balloc>:
 800de74:	b570      	push	{r4, r5, r6, lr}
 800de76:	69c6      	ldr	r6, [r0, #28]
 800de78:	4604      	mov	r4, r0
 800de7a:	460d      	mov	r5, r1
 800de7c:	b976      	cbnz	r6, 800de9c <_Balloc+0x28>
 800de7e:	2010      	movs	r0, #16
 800de80:	f7fe fa08 	bl	800c294 <malloc>
 800de84:	4602      	mov	r2, r0
 800de86:	61e0      	str	r0, [r4, #28]
 800de88:	b920      	cbnz	r0, 800de94 <_Balloc+0x20>
 800de8a:	4b18      	ldr	r3, [pc, #96]	; (800deec <_Balloc+0x78>)
 800de8c:	4818      	ldr	r0, [pc, #96]	; (800def0 <_Balloc+0x7c>)
 800de8e:	216b      	movs	r1, #107	; 0x6b
 800de90:	f000 fd8c 	bl	800e9ac <__assert_func>
 800de94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800de98:	6006      	str	r6, [r0, #0]
 800de9a:	60c6      	str	r6, [r0, #12]
 800de9c:	69e6      	ldr	r6, [r4, #28]
 800de9e:	68f3      	ldr	r3, [r6, #12]
 800dea0:	b183      	cbz	r3, 800dec4 <_Balloc+0x50>
 800dea2:	69e3      	ldr	r3, [r4, #28]
 800dea4:	68db      	ldr	r3, [r3, #12]
 800dea6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800deaa:	b9b8      	cbnz	r0, 800dedc <_Balloc+0x68>
 800deac:	2101      	movs	r1, #1
 800deae:	fa01 f605 	lsl.w	r6, r1, r5
 800deb2:	1d72      	adds	r2, r6, #5
 800deb4:	0092      	lsls	r2, r2, #2
 800deb6:	4620      	mov	r0, r4
 800deb8:	f000 fd96 	bl	800e9e8 <_calloc_r>
 800debc:	b160      	cbz	r0, 800ded8 <_Balloc+0x64>
 800debe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dec2:	e00e      	b.n	800dee2 <_Balloc+0x6e>
 800dec4:	2221      	movs	r2, #33	; 0x21
 800dec6:	2104      	movs	r1, #4
 800dec8:	4620      	mov	r0, r4
 800deca:	f000 fd8d 	bl	800e9e8 <_calloc_r>
 800dece:	69e3      	ldr	r3, [r4, #28]
 800ded0:	60f0      	str	r0, [r6, #12]
 800ded2:	68db      	ldr	r3, [r3, #12]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d1e4      	bne.n	800dea2 <_Balloc+0x2e>
 800ded8:	2000      	movs	r0, #0
 800deda:	bd70      	pop	{r4, r5, r6, pc}
 800dedc:	6802      	ldr	r2, [r0, #0]
 800dede:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dee2:	2300      	movs	r3, #0
 800dee4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dee8:	e7f7      	b.n	800deda <_Balloc+0x66>
 800deea:	bf00      	nop
 800deec:	0800f8ee 	.word	0x0800f8ee
 800def0:	0800f96e 	.word	0x0800f96e

0800def4 <_Bfree>:
 800def4:	b570      	push	{r4, r5, r6, lr}
 800def6:	69c6      	ldr	r6, [r0, #28]
 800def8:	4605      	mov	r5, r0
 800defa:	460c      	mov	r4, r1
 800defc:	b976      	cbnz	r6, 800df1c <_Bfree+0x28>
 800defe:	2010      	movs	r0, #16
 800df00:	f7fe f9c8 	bl	800c294 <malloc>
 800df04:	4602      	mov	r2, r0
 800df06:	61e8      	str	r0, [r5, #28]
 800df08:	b920      	cbnz	r0, 800df14 <_Bfree+0x20>
 800df0a:	4b09      	ldr	r3, [pc, #36]	; (800df30 <_Bfree+0x3c>)
 800df0c:	4809      	ldr	r0, [pc, #36]	; (800df34 <_Bfree+0x40>)
 800df0e:	218f      	movs	r1, #143	; 0x8f
 800df10:	f000 fd4c 	bl	800e9ac <__assert_func>
 800df14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df18:	6006      	str	r6, [r0, #0]
 800df1a:	60c6      	str	r6, [r0, #12]
 800df1c:	b13c      	cbz	r4, 800df2e <_Bfree+0x3a>
 800df1e:	69eb      	ldr	r3, [r5, #28]
 800df20:	6862      	ldr	r2, [r4, #4]
 800df22:	68db      	ldr	r3, [r3, #12]
 800df24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800df28:	6021      	str	r1, [r4, #0]
 800df2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800df2e:	bd70      	pop	{r4, r5, r6, pc}
 800df30:	0800f8ee 	.word	0x0800f8ee
 800df34:	0800f96e 	.word	0x0800f96e

0800df38 <__multadd>:
 800df38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df3c:	690d      	ldr	r5, [r1, #16]
 800df3e:	4607      	mov	r7, r0
 800df40:	460c      	mov	r4, r1
 800df42:	461e      	mov	r6, r3
 800df44:	f101 0c14 	add.w	ip, r1, #20
 800df48:	2000      	movs	r0, #0
 800df4a:	f8dc 3000 	ldr.w	r3, [ip]
 800df4e:	b299      	uxth	r1, r3
 800df50:	fb02 6101 	mla	r1, r2, r1, r6
 800df54:	0c1e      	lsrs	r6, r3, #16
 800df56:	0c0b      	lsrs	r3, r1, #16
 800df58:	fb02 3306 	mla	r3, r2, r6, r3
 800df5c:	b289      	uxth	r1, r1
 800df5e:	3001      	adds	r0, #1
 800df60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800df64:	4285      	cmp	r5, r0
 800df66:	f84c 1b04 	str.w	r1, [ip], #4
 800df6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800df6e:	dcec      	bgt.n	800df4a <__multadd+0x12>
 800df70:	b30e      	cbz	r6, 800dfb6 <__multadd+0x7e>
 800df72:	68a3      	ldr	r3, [r4, #8]
 800df74:	42ab      	cmp	r3, r5
 800df76:	dc19      	bgt.n	800dfac <__multadd+0x74>
 800df78:	6861      	ldr	r1, [r4, #4]
 800df7a:	4638      	mov	r0, r7
 800df7c:	3101      	adds	r1, #1
 800df7e:	f7ff ff79 	bl	800de74 <_Balloc>
 800df82:	4680      	mov	r8, r0
 800df84:	b928      	cbnz	r0, 800df92 <__multadd+0x5a>
 800df86:	4602      	mov	r2, r0
 800df88:	4b0c      	ldr	r3, [pc, #48]	; (800dfbc <__multadd+0x84>)
 800df8a:	480d      	ldr	r0, [pc, #52]	; (800dfc0 <__multadd+0x88>)
 800df8c:	21ba      	movs	r1, #186	; 0xba
 800df8e:	f000 fd0d 	bl	800e9ac <__assert_func>
 800df92:	6922      	ldr	r2, [r4, #16]
 800df94:	3202      	adds	r2, #2
 800df96:	f104 010c 	add.w	r1, r4, #12
 800df9a:	0092      	lsls	r2, r2, #2
 800df9c:	300c      	adds	r0, #12
 800df9e:	f7ff f894 	bl	800d0ca <memcpy>
 800dfa2:	4621      	mov	r1, r4
 800dfa4:	4638      	mov	r0, r7
 800dfa6:	f7ff ffa5 	bl	800def4 <_Bfree>
 800dfaa:	4644      	mov	r4, r8
 800dfac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dfb0:	3501      	adds	r5, #1
 800dfb2:	615e      	str	r6, [r3, #20]
 800dfb4:	6125      	str	r5, [r4, #16]
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfbc:	0800f95d 	.word	0x0800f95d
 800dfc0:	0800f96e 	.word	0x0800f96e

0800dfc4 <__hi0bits>:
 800dfc4:	0c03      	lsrs	r3, r0, #16
 800dfc6:	041b      	lsls	r3, r3, #16
 800dfc8:	b9d3      	cbnz	r3, 800e000 <__hi0bits+0x3c>
 800dfca:	0400      	lsls	r0, r0, #16
 800dfcc:	2310      	movs	r3, #16
 800dfce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800dfd2:	bf04      	itt	eq
 800dfd4:	0200      	lsleq	r0, r0, #8
 800dfd6:	3308      	addeq	r3, #8
 800dfd8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dfdc:	bf04      	itt	eq
 800dfde:	0100      	lsleq	r0, r0, #4
 800dfe0:	3304      	addeq	r3, #4
 800dfe2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dfe6:	bf04      	itt	eq
 800dfe8:	0080      	lsleq	r0, r0, #2
 800dfea:	3302      	addeq	r3, #2
 800dfec:	2800      	cmp	r0, #0
 800dfee:	db05      	blt.n	800dffc <__hi0bits+0x38>
 800dff0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dff4:	f103 0301 	add.w	r3, r3, #1
 800dff8:	bf08      	it	eq
 800dffa:	2320      	moveq	r3, #32
 800dffc:	4618      	mov	r0, r3
 800dffe:	4770      	bx	lr
 800e000:	2300      	movs	r3, #0
 800e002:	e7e4      	b.n	800dfce <__hi0bits+0xa>

0800e004 <__lo0bits>:
 800e004:	6803      	ldr	r3, [r0, #0]
 800e006:	f013 0207 	ands.w	r2, r3, #7
 800e00a:	d00c      	beq.n	800e026 <__lo0bits+0x22>
 800e00c:	07d9      	lsls	r1, r3, #31
 800e00e:	d422      	bmi.n	800e056 <__lo0bits+0x52>
 800e010:	079a      	lsls	r2, r3, #30
 800e012:	bf49      	itett	mi
 800e014:	085b      	lsrmi	r3, r3, #1
 800e016:	089b      	lsrpl	r3, r3, #2
 800e018:	6003      	strmi	r3, [r0, #0]
 800e01a:	2201      	movmi	r2, #1
 800e01c:	bf5c      	itt	pl
 800e01e:	6003      	strpl	r3, [r0, #0]
 800e020:	2202      	movpl	r2, #2
 800e022:	4610      	mov	r0, r2
 800e024:	4770      	bx	lr
 800e026:	b299      	uxth	r1, r3
 800e028:	b909      	cbnz	r1, 800e02e <__lo0bits+0x2a>
 800e02a:	0c1b      	lsrs	r3, r3, #16
 800e02c:	2210      	movs	r2, #16
 800e02e:	b2d9      	uxtb	r1, r3
 800e030:	b909      	cbnz	r1, 800e036 <__lo0bits+0x32>
 800e032:	3208      	adds	r2, #8
 800e034:	0a1b      	lsrs	r3, r3, #8
 800e036:	0719      	lsls	r1, r3, #28
 800e038:	bf04      	itt	eq
 800e03a:	091b      	lsreq	r3, r3, #4
 800e03c:	3204      	addeq	r2, #4
 800e03e:	0799      	lsls	r1, r3, #30
 800e040:	bf04      	itt	eq
 800e042:	089b      	lsreq	r3, r3, #2
 800e044:	3202      	addeq	r2, #2
 800e046:	07d9      	lsls	r1, r3, #31
 800e048:	d403      	bmi.n	800e052 <__lo0bits+0x4e>
 800e04a:	085b      	lsrs	r3, r3, #1
 800e04c:	f102 0201 	add.w	r2, r2, #1
 800e050:	d003      	beq.n	800e05a <__lo0bits+0x56>
 800e052:	6003      	str	r3, [r0, #0]
 800e054:	e7e5      	b.n	800e022 <__lo0bits+0x1e>
 800e056:	2200      	movs	r2, #0
 800e058:	e7e3      	b.n	800e022 <__lo0bits+0x1e>
 800e05a:	2220      	movs	r2, #32
 800e05c:	e7e1      	b.n	800e022 <__lo0bits+0x1e>
	...

0800e060 <__i2b>:
 800e060:	b510      	push	{r4, lr}
 800e062:	460c      	mov	r4, r1
 800e064:	2101      	movs	r1, #1
 800e066:	f7ff ff05 	bl	800de74 <_Balloc>
 800e06a:	4602      	mov	r2, r0
 800e06c:	b928      	cbnz	r0, 800e07a <__i2b+0x1a>
 800e06e:	4b05      	ldr	r3, [pc, #20]	; (800e084 <__i2b+0x24>)
 800e070:	4805      	ldr	r0, [pc, #20]	; (800e088 <__i2b+0x28>)
 800e072:	f240 1145 	movw	r1, #325	; 0x145
 800e076:	f000 fc99 	bl	800e9ac <__assert_func>
 800e07a:	2301      	movs	r3, #1
 800e07c:	6144      	str	r4, [r0, #20]
 800e07e:	6103      	str	r3, [r0, #16]
 800e080:	bd10      	pop	{r4, pc}
 800e082:	bf00      	nop
 800e084:	0800f95d 	.word	0x0800f95d
 800e088:	0800f96e 	.word	0x0800f96e

0800e08c <__multiply>:
 800e08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e090:	4691      	mov	r9, r2
 800e092:	690a      	ldr	r2, [r1, #16]
 800e094:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e098:	429a      	cmp	r2, r3
 800e09a:	bfb8      	it	lt
 800e09c:	460b      	movlt	r3, r1
 800e09e:	460c      	mov	r4, r1
 800e0a0:	bfbc      	itt	lt
 800e0a2:	464c      	movlt	r4, r9
 800e0a4:	4699      	movlt	r9, r3
 800e0a6:	6927      	ldr	r7, [r4, #16]
 800e0a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e0ac:	68a3      	ldr	r3, [r4, #8]
 800e0ae:	6861      	ldr	r1, [r4, #4]
 800e0b0:	eb07 060a 	add.w	r6, r7, sl
 800e0b4:	42b3      	cmp	r3, r6
 800e0b6:	b085      	sub	sp, #20
 800e0b8:	bfb8      	it	lt
 800e0ba:	3101      	addlt	r1, #1
 800e0bc:	f7ff feda 	bl	800de74 <_Balloc>
 800e0c0:	b930      	cbnz	r0, 800e0d0 <__multiply+0x44>
 800e0c2:	4602      	mov	r2, r0
 800e0c4:	4b44      	ldr	r3, [pc, #272]	; (800e1d8 <__multiply+0x14c>)
 800e0c6:	4845      	ldr	r0, [pc, #276]	; (800e1dc <__multiply+0x150>)
 800e0c8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e0cc:	f000 fc6e 	bl	800e9ac <__assert_func>
 800e0d0:	f100 0514 	add.w	r5, r0, #20
 800e0d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e0d8:	462b      	mov	r3, r5
 800e0da:	2200      	movs	r2, #0
 800e0dc:	4543      	cmp	r3, r8
 800e0de:	d321      	bcc.n	800e124 <__multiply+0x98>
 800e0e0:	f104 0314 	add.w	r3, r4, #20
 800e0e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e0e8:	f109 0314 	add.w	r3, r9, #20
 800e0ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e0f0:	9202      	str	r2, [sp, #8]
 800e0f2:	1b3a      	subs	r2, r7, r4
 800e0f4:	3a15      	subs	r2, #21
 800e0f6:	f022 0203 	bic.w	r2, r2, #3
 800e0fa:	3204      	adds	r2, #4
 800e0fc:	f104 0115 	add.w	r1, r4, #21
 800e100:	428f      	cmp	r7, r1
 800e102:	bf38      	it	cc
 800e104:	2204      	movcc	r2, #4
 800e106:	9201      	str	r2, [sp, #4]
 800e108:	9a02      	ldr	r2, [sp, #8]
 800e10a:	9303      	str	r3, [sp, #12]
 800e10c:	429a      	cmp	r2, r3
 800e10e:	d80c      	bhi.n	800e12a <__multiply+0x9e>
 800e110:	2e00      	cmp	r6, #0
 800e112:	dd03      	ble.n	800e11c <__multiply+0x90>
 800e114:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d05b      	beq.n	800e1d4 <__multiply+0x148>
 800e11c:	6106      	str	r6, [r0, #16]
 800e11e:	b005      	add	sp, #20
 800e120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e124:	f843 2b04 	str.w	r2, [r3], #4
 800e128:	e7d8      	b.n	800e0dc <__multiply+0x50>
 800e12a:	f8b3 a000 	ldrh.w	sl, [r3]
 800e12e:	f1ba 0f00 	cmp.w	sl, #0
 800e132:	d024      	beq.n	800e17e <__multiply+0xf2>
 800e134:	f104 0e14 	add.w	lr, r4, #20
 800e138:	46a9      	mov	r9, r5
 800e13a:	f04f 0c00 	mov.w	ip, #0
 800e13e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e142:	f8d9 1000 	ldr.w	r1, [r9]
 800e146:	fa1f fb82 	uxth.w	fp, r2
 800e14a:	b289      	uxth	r1, r1
 800e14c:	fb0a 110b 	mla	r1, sl, fp, r1
 800e150:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e154:	f8d9 2000 	ldr.w	r2, [r9]
 800e158:	4461      	add	r1, ip
 800e15a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e15e:	fb0a c20b 	mla	r2, sl, fp, ip
 800e162:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e166:	b289      	uxth	r1, r1
 800e168:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e16c:	4577      	cmp	r7, lr
 800e16e:	f849 1b04 	str.w	r1, [r9], #4
 800e172:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e176:	d8e2      	bhi.n	800e13e <__multiply+0xb2>
 800e178:	9a01      	ldr	r2, [sp, #4]
 800e17a:	f845 c002 	str.w	ip, [r5, r2]
 800e17e:	9a03      	ldr	r2, [sp, #12]
 800e180:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e184:	3304      	adds	r3, #4
 800e186:	f1b9 0f00 	cmp.w	r9, #0
 800e18a:	d021      	beq.n	800e1d0 <__multiply+0x144>
 800e18c:	6829      	ldr	r1, [r5, #0]
 800e18e:	f104 0c14 	add.w	ip, r4, #20
 800e192:	46ae      	mov	lr, r5
 800e194:	f04f 0a00 	mov.w	sl, #0
 800e198:	f8bc b000 	ldrh.w	fp, [ip]
 800e19c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e1a0:	fb09 220b 	mla	r2, r9, fp, r2
 800e1a4:	4452      	add	r2, sl
 800e1a6:	b289      	uxth	r1, r1
 800e1a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e1ac:	f84e 1b04 	str.w	r1, [lr], #4
 800e1b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e1b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e1b8:	f8be 1000 	ldrh.w	r1, [lr]
 800e1bc:	fb09 110a 	mla	r1, r9, sl, r1
 800e1c0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e1c4:	4567      	cmp	r7, ip
 800e1c6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e1ca:	d8e5      	bhi.n	800e198 <__multiply+0x10c>
 800e1cc:	9a01      	ldr	r2, [sp, #4]
 800e1ce:	50a9      	str	r1, [r5, r2]
 800e1d0:	3504      	adds	r5, #4
 800e1d2:	e799      	b.n	800e108 <__multiply+0x7c>
 800e1d4:	3e01      	subs	r6, #1
 800e1d6:	e79b      	b.n	800e110 <__multiply+0x84>
 800e1d8:	0800f95d 	.word	0x0800f95d
 800e1dc:	0800f96e 	.word	0x0800f96e

0800e1e0 <__pow5mult>:
 800e1e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1e4:	4615      	mov	r5, r2
 800e1e6:	f012 0203 	ands.w	r2, r2, #3
 800e1ea:	4606      	mov	r6, r0
 800e1ec:	460f      	mov	r7, r1
 800e1ee:	d007      	beq.n	800e200 <__pow5mult+0x20>
 800e1f0:	4c25      	ldr	r4, [pc, #148]	; (800e288 <__pow5mult+0xa8>)
 800e1f2:	3a01      	subs	r2, #1
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e1fa:	f7ff fe9d 	bl	800df38 <__multadd>
 800e1fe:	4607      	mov	r7, r0
 800e200:	10ad      	asrs	r5, r5, #2
 800e202:	d03d      	beq.n	800e280 <__pow5mult+0xa0>
 800e204:	69f4      	ldr	r4, [r6, #28]
 800e206:	b97c      	cbnz	r4, 800e228 <__pow5mult+0x48>
 800e208:	2010      	movs	r0, #16
 800e20a:	f7fe f843 	bl	800c294 <malloc>
 800e20e:	4602      	mov	r2, r0
 800e210:	61f0      	str	r0, [r6, #28]
 800e212:	b928      	cbnz	r0, 800e220 <__pow5mult+0x40>
 800e214:	4b1d      	ldr	r3, [pc, #116]	; (800e28c <__pow5mult+0xac>)
 800e216:	481e      	ldr	r0, [pc, #120]	; (800e290 <__pow5mult+0xb0>)
 800e218:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e21c:	f000 fbc6 	bl	800e9ac <__assert_func>
 800e220:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e224:	6004      	str	r4, [r0, #0]
 800e226:	60c4      	str	r4, [r0, #12]
 800e228:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e22c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e230:	b94c      	cbnz	r4, 800e246 <__pow5mult+0x66>
 800e232:	f240 2171 	movw	r1, #625	; 0x271
 800e236:	4630      	mov	r0, r6
 800e238:	f7ff ff12 	bl	800e060 <__i2b>
 800e23c:	2300      	movs	r3, #0
 800e23e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e242:	4604      	mov	r4, r0
 800e244:	6003      	str	r3, [r0, #0]
 800e246:	f04f 0900 	mov.w	r9, #0
 800e24a:	07eb      	lsls	r3, r5, #31
 800e24c:	d50a      	bpl.n	800e264 <__pow5mult+0x84>
 800e24e:	4639      	mov	r1, r7
 800e250:	4622      	mov	r2, r4
 800e252:	4630      	mov	r0, r6
 800e254:	f7ff ff1a 	bl	800e08c <__multiply>
 800e258:	4639      	mov	r1, r7
 800e25a:	4680      	mov	r8, r0
 800e25c:	4630      	mov	r0, r6
 800e25e:	f7ff fe49 	bl	800def4 <_Bfree>
 800e262:	4647      	mov	r7, r8
 800e264:	106d      	asrs	r5, r5, #1
 800e266:	d00b      	beq.n	800e280 <__pow5mult+0xa0>
 800e268:	6820      	ldr	r0, [r4, #0]
 800e26a:	b938      	cbnz	r0, 800e27c <__pow5mult+0x9c>
 800e26c:	4622      	mov	r2, r4
 800e26e:	4621      	mov	r1, r4
 800e270:	4630      	mov	r0, r6
 800e272:	f7ff ff0b 	bl	800e08c <__multiply>
 800e276:	6020      	str	r0, [r4, #0]
 800e278:	f8c0 9000 	str.w	r9, [r0]
 800e27c:	4604      	mov	r4, r0
 800e27e:	e7e4      	b.n	800e24a <__pow5mult+0x6a>
 800e280:	4638      	mov	r0, r7
 800e282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e286:	bf00      	nop
 800e288:	0800fab8 	.word	0x0800fab8
 800e28c:	0800f8ee 	.word	0x0800f8ee
 800e290:	0800f96e 	.word	0x0800f96e

0800e294 <__lshift>:
 800e294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e298:	460c      	mov	r4, r1
 800e29a:	6849      	ldr	r1, [r1, #4]
 800e29c:	6923      	ldr	r3, [r4, #16]
 800e29e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e2a2:	68a3      	ldr	r3, [r4, #8]
 800e2a4:	4607      	mov	r7, r0
 800e2a6:	4691      	mov	r9, r2
 800e2a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e2ac:	f108 0601 	add.w	r6, r8, #1
 800e2b0:	42b3      	cmp	r3, r6
 800e2b2:	db0b      	blt.n	800e2cc <__lshift+0x38>
 800e2b4:	4638      	mov	r0, r7
 800e2b6:	f7ff fddd 	bl	800de74 <_Balloc>
 800e2ba:	4605      	mov	r5, r0
 800e2bc:	b948      	cbnz	r0, 800e2d2 <__lshift+0x3e>
 800e2be:	4602      	mov	r2, r0
 800e2c0:	4b28      	ldr	r3, [pc, #160]	; (800e364 <__lshift+0xd0>)
 800e2c2:	4829      	ldr	r0, [pc, #164]	; (800e368 <__lshift+0xd4>)
 800e2c4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e2c8:	f000 fb70 	bl	800e9ac <__assert_func>
 800e2cc:	3101      	adds	r1, #1
 800e2ce:	005b      	lsls	r3, r3, #1
 800e2d0:	e7ee      	b.n	800e2b0 <__lshift+0x1c>
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	f100 0114 	add.w	r1, r0, #20
 800e2d8:	f100 0210 	add.w	r2, r0, #16
 800e2dc:	4618      	mov	r0, r3
 800e2de:	4553      	cmp	r3, sl
 800e2e0:	db33      	blt.n	800e34a <__lshift+0xb6>
 800e2e2:	6920      	ldr	r0, [r4, #16]
 800e2e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e2e8:	f104 0314 	add.w	r3, r4, #20
 800e2ec:	f019 091f 	ands.w	r9, r9, #31
 800e2f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e2f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e2f8:	d02b      	beq.n	800e352 <__lshift+0xbe>
 800e2fa:	f1c9 0e20 	rsb	lr, r9, #32
 800e2fe:	468a      	mov	sl, r1
 800e300:	2200      	movs	r2, #0
 800e302:	6818      	ldr	r0, [r3, #0]
 800e304:	fa00 f009 	lsl.w	r0, r0, r9
 800e308:	4310      	orrs	r0, r2
 800e30a:	f84a 0b04 	str.w	r0, [sl], #4
 800e30e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e312:	459c      	cmp	ip, r3
 800e314:	fa22 f20e 	lsr.w	r2, r2, lr
 800e318:	d8f3      	bhi.n	800e302 <__lshift+0x6e>
 800e31a:	ebac 0304 	sub.w	r3, ip, r4
 800e31e:	3b15      	subs	r3, #21
 800e320:	f023 0303 	bic.w	r3, r3, #3
 800e324:	3304      	adds	r3, #4
 800e326:	f104 0015 	add.w	r0, r4, #21
 800e32a:	4584      	cmp	ip, r0
 800e32c:	bf38      	it	cc
 800e32e:	2304      	movcc	r3, #4
 800e330:	50ca      	str	r2, [r1, r3]
 800e332:	b10a      	cbz	r2, 800e338 <__lshift+0xa4>
 800e334:	f108 0602 	add.w	r6, r8, #2
 800e338:	3e01      	subs	r6, #1
 800e33a:	4638      	mov	r0, r7
 800e33c:	612e      	str	r6, [r5, #16]
 800e33e:	4621      	mov	r1, r4
 800e340:	f7ff fdd8 	bl	800def4 <_Bfree>
 800e344:	4628      	mov	r0, r5
 800e346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e34a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e34e:	3301      	adds	r3, #1
 800e350:	e7c5      	b.n	800e2de <__lshift+0x4a>
 800e352:	3904      	subs	r1, #4
 800e354:	f853 2b04 	ldr.w	r2, [r3], #4
 800e358:	f841 2f04 	str.w	r2, [r1, #4]!
 800e35c:	459c      	cmp	ip, r3
 800e35e:	d8f9      	bhi.n	800e354 <__lshift+0xc0>
 800e360:	e7ea      	b.n	800e338 <__lshift+0xa4>
 800e362:	bf00      	nop
 800e364:	0800f95d 	.word	0x0800f95d
 800e368:	0800f96e 	.word	0x0800f96e

0800e36c <__mcmp>:
 800e36c:	b530      	push	{r4, r5, lr}
 800e36e:	6902      	ldr	r2, [r0, #16]
 800e370:	690c      	ldr	r4, [r1, #16]
 800e372:	1b12      	subs	r2, r2, r4
 800e374:	d10e      	bne.n	800e394 <__mcmp+0x28>
 800e376:	f100 0314 	add.w	r3, r0, #20
 800e37a:	3114      	adds	r1, #20
 800e37c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e380:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e384:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e388:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e38c:	42a5      	cmp	r5, r4
 800e38e:	d003      	beq.n	800e398 <__mcmp+0x2c>
 800e390:	d305      	bcc.n	800e39e <__mcmp+0x32>
 800e392:	2201      	movs	r2, #1
 800e394:	4610      	mov	r0, r2
 800e396:	bd30      	pop	{r4, r5, pc}
 800e398:	4283      	cmp	r3, r0
 800e39a:	d3f3      	bcc.n	800e384 <__mcmp+0x18>
 800e39c:	e7fa      	b.n	800e394 <__mcmp+0x28>
 800e39e:	f04f 32ff 	mov.w	r2, #4294967295
 800e3a2:	e7f7      	b.n	800e394 <__mcmp+0x28>

0800e3a4 <__mdiff>:
 800e3a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3a8:	460c      	mov	r4, r1
 800e3aa:	4606      	mov	r6, r0
 800e3ac:	4611      	mov	r1, r2
 800e3ae:	4620      	mov	r0, r4
 800e3b0:	4690      	mov	r8, r2
 800e3b2:	f7ff ffdb 	bl	800e36c <__mcmp>
 800e3b6:	1e05      	subs	r5, r0, #0
 800e3b8:	d110      	bne.n	800e3dc <__mdiff+0x38>
 800e3ba:	4629      	mov	r1, r5
 800e3bc:	4630      	mov	r0, r6
 800e3be:	f7ff fd59 	bl	800de74 <_Balloc>
 800e3c2:	b930      	cbnz	r0, 800e3d2 <__mdiff+0x2e>
 800e3c4:	4b3a      	ldr	r3, [pc, #232]	; (800e4b0 <__mdiff+0x10c>)
 800e3c6:	4602      	mov	r2, r0
 800e3c8:	f240 2137 	movw	r1, #567	; 0x237
 800e3cc:	4839      	ldr	r0, [pc, #228]	; (800e4b4 <__mdiff+0x110>)
 800e3ce:	f000 faed 	bl	800e9ac <__assert_func>
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e3d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3dc:	bfa4      	itt	ge
 800e3de:	4643      	movge	r3, r8
 800e3e0:	46a0      	movge	r8, r4
 800e3e2:	4630      	mov	r0, r6
 800e3e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e3e8:	bfa6      	itte	ge
 800e3ea:	461c      	movge	r4, r3
 800e3ec:	2500      	movge	r5, #0
 800e3ee:	2501      	movlt	r5, #1
 800e3f0:	f7ff fd40 	bl	800de74 <_Balloc>
 800e3f4:	b920      	cbnz	r0, 800e400 <__mdiff+0x5c>
 800e3f6:	4b2e      	ldr	r3, [pc, #184]	; (800e4b0 <__mdiff+0x10c>)
 800e3f8:	4602      	mov	r2, r0
 800e3fa:	f240 2145 	movw	r1, #581	; 0x245
 800e3fe:	e7e5      	b.n	800e3cc <__mdiff+0x28>
 800e400:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e404:	6926      	ldr	r6, [r4, #16]
 800e406:	60c5      	str	r5, [r0, #12]
 800e408:	f104 0914 	add.w	r9, r4, #20
 800e40c:	f108 0514 	add.w	r5, r8, #20
 800e410:	f100 0e14 	add.w	lr, r0, #20
 800e414:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e418:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e41c:	f108 0210 	add.w	r2, r8, #16
 800e420:	46f2      	mov	sl, lr
 800e422:	2100      	movs	r1, #0
 800e424:	f859 3b04 	ldr.w	r3, [r9], #4
 800e428:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e42c:	fa11 f88b 	uxtah	r8, r1, fp
 800e430:	b299      	uxth	r1, r3
 800e432:	0c1b      	lsrs	r3, r3, #16
 800e434:	eba8 0801 	sub.w	r8, r8, r1
 800e438:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e43c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e440:	fa1f f888 	uxth.w	r8, r8
 800e444:	1419      	asrs	r1, r3, #16
 800e446:	454e      	cmp	r6, r9
 800e448:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e44c:	f84a 3b04 	str.w	r3, [sl], #4
 800e450:	d8e8      	bhi.n	800e424 <__mdiff+0x80>
 800e452:	1b33      	subs	r3, r6, r4
 800e454:	3b15      	subs	r3, #21
 800e456:	f023 0303 	bic.w	r3, r3, #3
 800e45a:	3304      	adds	r3, #4
 800e45c:	3415      	adds	r4, #21
 800e45e:	42a6      	cmp	r6, r4
 800e460:	bf38      	it	cc
 800e462:	2304      	movcc	r3, #4
 800e464:	441d      	add	r5, r3
 800e466:	4473      	add	r3, lr
 800e468:	469e      	mov	lr, r3
 800e46a:	462e      	mov	r6, r5
 800e46c:	4566      	cmp	r6, ip
 800e46e:	d30e      	bcc.n	800e48e <__mdiff+0xea>
 800e470:	f10c 0203 	add.w	r2, ip, #3
 800e474:	1b52      	subs	r2, r2, r5
 800e476:	f022 0203 	bic.w	r2, r2, #3
 800e47a:	3d03      	subs	r5, #3
 800e47c:	45ac      	cmp	ip, r5
 800e47e:	bf38      	it	cc
 800e480:	2200      	movcc	r2, #0
 800e482:	4413      	add	r3, r2
 800e484:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e488:	b17a      	cbz	r2, 800e4aa <__mdiff+0x106>
 800e48a:	6107      	str	r7, [r0, #16]
 800e48c:	e7a4      	b.n	800e3d8 <__mdiff+0x34>
 800e48e:	f856 8b04 	ldr.w	r8, [r6], #4
 800e492:	fa11 f288 	uxtah	r2, r1, r8
 800e496:	1414      	asrs	r4, r2, #16
 800e498:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e49c:	b292      	uxth	r2, r2
 800e49e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e4a2:	f84e 2b04 	str.w	r2, [lr], #4
 800e4a6:	1421      	asrs	r1, r4, #16
 800e4a8:	e7e0      	b.n	800e46c <__mdiff+0xc8>
 800e4aa:	3f01      	subs	r7, #1
 800e4ac:	e7ea      	b.n	800e484 <__mdiff+0xe0>
 800e4ae:	bf00      	nop
 800e4b0:	0800f95d 	.word	0x0800f95d
 800e4b4:	0800f96e 	.word	0x0800f96e

0800e4b8 <__d2b>:
 800e4b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e4bc:	460f      	mov	r7, r1
 800e4be:	2101      	movs	r1, #1
 800e4c0:	ec59 8b10 	vmov	r8, r9, d0
 800e4c4:	4616      	mov	r6, r2
 800e4c6:	f7ff fcd5 	bl	800de74 <_Balloc>
 800e4ca:	4604      	mov	r4, r0
 800e4cc:	b930      	cbnz	r0, 800e4dc <__d2b+0x24>
 800e4ce:	4602      	mov	r2, r0
 800e4d0:	4b24      	ldr	r3, [pc, #144]	; (800e564 <__d2b+0xac>)
 800e4d2:	4825      	ldr	r0, [pc, #148]	; (800e568 <__d2b+0xb0>)
 800e4d4:	f240 310f 	movw	r1, #783	; 0x30f
 800e4d8:	f000 fa68 	bl	800e9ac <__assert_func>
 800e4dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e4e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e4e4:	bb2d      	cbnz	r5, 800e532 <__d2b+0x7a>
 800e4e6:	9301      	str	r3, [sp, #4]
 800e4e8:	f1b8 0300 	subs.w	r3, r8, #0
 800e4ec:	d026      	beq.n	800e53c <__d2b+0x84>
 800e4ee:	4668      	mov	r0, sp
 800e4f0:	9300      	str	r3, [sp, #0]
 800e4f2:	f7ff fd87 	bl	800e004 <__lo0bits>
 800e4f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e4fa:	b1e8      	cbz	r0, 800e538 <__d2b+0x80>
 800e4fc:	f1c0 0320 	rsb	r3, r0, #32
 800e500:	fa02 f303 	lsl.w	r3, r2, r3
 800e504:	430b      	orrs	r3, r1
 800e506:	40c2      	lsrs	r2, r0
 800e508:	6163      	str	r3, [r4, #20]
 800e50a:	9201      	str	r2, [sp, #4]
 800e50c:	9b01      	ldr	r3, [sp, #4]
 800e50e:	61a3      	str	r3, [r4, #24]
 800e510:	2b00      	cmp	r3, #0
 800e512:	bf14      	ite	ne
 800e514:	2202      	movne	r2, #2
 800e516:	2201      	moveq	r2, #1
 800e518:	6122      	str	r2, [r4, #16]
 800e51a:	b1bd      	cbz	r5, 800e54c <__d2b+0x94>
 800e51c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e520:	4405      	add	r5, r0
 800e522:	603d      	str	r5, [r7, #0]
 800e524:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e528:	6030      	str	r0, [r6, #0]
 800e52a:	4620      	mov	r0, r4
 800e52c:	b003      	add	sp, #12
 800e52e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e532:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e536:	e7d6      	b.n	800e4e6 <__d2b+0x2e>
 800e538:	6161      	str	r1, [r4, #20]
 800e53a:	e7e7      	b.n	800e50c <__d2b+0x54>
 800e53c:	a801      	add	r0, sp, #4
 800e53e:	f7ff fd61 	bl	800e004 <__lo0bits>
 800e542:	9b01      	ldr	r3, [sp, #4]
 800e544:	6163      	str	r3, [r4, #20]
 800e546:	3020      	adds	r0, #32
 800e548:	2201      	movs	r2, #1
 800e54a:	e7e5      	b.n	800e518 <__d2b+0x60>
 800e54c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e550:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e554:	6038      	str	r0, [r7, #0]
 800e556:	6918      	ldr	r0, [r3, #16]
 800e558:	f7ff fd34 	bl	800dfc4 <__hi0bits>
 800e55c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e560:	e7e2      	b.n	800e528 <__d2b+0x70>
 800e562:	bf00      	nop
 800e564:	0800f95d 	.word	0x0800f95d
 800e568:	0800f96e 	.word	0x0800f96e

0800e56c <__ssputs_r>:
 800e56c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e570:	688e      	ldr	r6, [r1, #8]
 800e572:	461f      	mov	r7, r3
 800e574:	42be      	cmp	r6, r7
 800e576:	680b      	ldr	r3, [r1, #0]
 800e578:	4682      	mov	sl, r0
 800e57a:	460c      	mov	r4, r1
 800e57c:	4690      	mov	r8, r2
 800e57e:	d82c      	bhi.n	800e5da <__ssputs_r+0x6e>
 800e580:	898a      	ldrh	r2, [r1, #12]
 800e582:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e586:	d026      	beq.n	800e5d6 <__ssputs_r+0x6a>
 800e588:	6965      	ldr	r5, [r4, #20]
 800e58a:	6909      	ldr	r1, [r1, #16]
 800e58c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e590:	eba3 0901 	sub.w	r9, r3, r1
 800e594:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e598:	1c7b      	adds	r3, r7, #1
 800e59a:	444b      	add	r3, r9
 800e59c:	106d      	asrs	r5, r5, #1
 800e59e:	429d      	cmp	r5, r3
 800e5a0:	bf38      	it	cc
 800e5a2:	461d      	movcc	r5, r3
 800e5a4:	0553      	lsls	r3, r2, #21
 800e5a6:	d527      	bpl.n	800e5f8 <__ssputs_r+0x8c>
 800e5a8:	4629      	mov	r1, r5
 800e5aa:	f7fd fea3 	bl	800c2f4 <_malloc_r>
 800e5ae:	4606      	mov	r6, r0
 800e5b0:	b360      	cbz	r0, 800e60c <__ssputs_r+0xa0>
 800e5b2:	6921      	ldr	r1, [r4, #16]
 800e5b4:	464a      	mov	r2, r9
 800e5b6:	f7fe fd88 	bl	800d0ca <memcpy>
 800e5ba:	89a3      	ldrh	r3, [r4, #12]
 800e5bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e5c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e5c4:	81a3      	strh	r3, [r4, #12]
 800e5c6:	6126      	str	r6, [r4, #16]
 800e5c8:	6165      	str	r5, [r4, #20]
 800e5ca:	444e      	add	r6, r9
 800e5cc:	eba5 0509 	sub.w	r5, r5, r9
 800e5d0:	6026      	str	r6, [r4, #0]
 800e5d2:	60a5      	str	r5, [r4, #8]
 800e5d4:	463e      	mov	r6, r7
 800e5d6:	42be      	cmp	r6, r7
 800e5d8:	d900      	bls.n	800e5dc <__ssputs_r+0x70>
 800e5da:	463e      	mov	r6, r7
 800e5dc:	6820      	ldr	r0, [r4, #0]
 800e5de:	4632      	mov	r2, r6
 800e5e0:	4641      	mov	r1, r8
 800e5e2:	f000 f9c9 	bl	800e978 <memmove>
 800e5e6:	68a3      	ldr	r3, [r4, #8]
 800e5e8:	1b9b      	subs	r3, r3, r6
 800e5ea:	60a3      	str	r3, [r4, #8]
 800e5ec:	6823      	ldr	r3, [r4, #0]
 800e5ee:	4433      	add	r3, r6
 800e5f0:	6023      	str	r3, [r4, #0]
 800e5f2:	2000      	movs	r0, #0
 800e5f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5f8:	462a      	mov	r2, r5
 800e5fa:	f000 fa1d 	bl	800ea38 <_realloc_r>
 800e5fe:	4606      	mov	r6, r0
 800e600:	2800      	cmp	r0, #0
 800e602:	d1e0      	bne.n	800e5c6 <__ssputs_r+0x5a>
 800e604:	6921      	ldr	r1, [r4, #16]
 800e606:	4650      	mov	r0, sl
 800e608:	f7ff fbe8 	bl	800dddc <_free_r>
 800e60c:	230c      	movs	r3, #12
 800e60e:	f8ca 3000 	str.w	r3, [sl]
 800e612:	89a3      	ldrh	r3, [r4, #12]
 800e614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e618:	81a3      	strh	r3, [r4, #12]
 800e61a:	f04f 30ff 	mov.w	r0, #4294967295
 800e61e:	e7e9      	b.n	800e5f4 <__ssputs_r+0x88>

0800e620 <_svfiprintf_r>:
 800e620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e624:	4698      	mov	r8, r3
 800e626:	898b      	ldrh	r3, [r1, #12]
 800e628:	061b      	lsls	r3, r3, #24
 800e62a:	b09d      	sub	sp, #116	; 0x74
 800e62c:	4607      	mov	r7, r0
 800e62e:	460d      	mov	r5, r1
 800e630:	4614      	mov	r4, r2
 800e632:	d50e      	bpl.n	800e652 <_svfiprintf_r+0x32>
 800e634:	690b      	ldr	r3, [r1, #16]
 800e636:	b963      	cbnz	r3, 800e652 <_svfiprintf_r+0x32>
 800e638:	2140      	movs	r1, #64	; 0x40
 800e63a:	f7fd fe5b 	bl	800c2f4 <_malloc_r>
 800e63e:	6028      	str	r0, [r5, #0]
 800e640:	6128      	str	r0, [r5, #16]
 800e642:	b920      	cbnz	r0, 800e64e <_svfiprintf_r+0x2e>
 800e644:	230c      	movs	r3, #12
 800e646:	603b      	str	r3, [r7, #0]
 800e648:	f04f 30ff 	mov.w	r0, #4294967295
 800e64c:	e0d0      	b.n	800e7f0 <_svfiprintf_r+0x1d0>
 800e64e:	2340      	movs	r3, #64	; 0x40
 800e650:	616b      	str	r3, [r5, #20]
 800e652:	2300      	movs	r3, #0
 800e654:	9309      	str	r3, [sp, #36]	; 0x24
 800e656:	2320      	movs	r3, #32
 800e658:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e65c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e660:	2330      	movs	r3, #48	; 0x30
 800e662:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e808 <_svfiprintf_r+0x1e8>
 800e666:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e66a:	f04f 0901 	mov.w	r9, #1
 800e66e:	4623      	mov	r3, r4
 800e670:	469a      	mov	sl, r3
 800e672:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e676:	b10a      	cbz	r2, 800e67c <_svfiprintf_r+0x5c>
 800e678:	2a25      	cmp	r2, #37	; 0x25
 800e67a:	d1f9      	bne.n	800e670 <_svfiprintf_r+0x50>
 800e67c:	ebba 0b04 	subs.w	fp, sl, r4
 800e680:	d00b      	beq.n	800e69a <_svfiprintf_r+0x7a>
 800e682:	465b      	mov	r3, fp
 800e684:	4622      	mov	r2, r4
 800e686:	4629      	mov	r1, r5
 800e688:	4638      	mov	r0, r7
 800e68a:	f7ff ff6f 	bl	800e56c <__ssputs_r>
 800e68e:	3001      	adds	r0, #1
 800e690:	f000 80a9 	beq.w	800e7e6 <_svfiprintf_r+0x1c6>
 800e694:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e696:	445a      	add	r2, fp
 800e698:	9209      	str	r2, [sp, #36]	; 0x24
 800e69a:	f89a 3000 	ldrb.w	r3, [sl]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	f000 80a1 	beq.w	800e7e6 <_svfiprintf_r+0x1c6>
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	f04f 32ff 	mov.w	r2, #4294967295
 800e6aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e6ae:	f10a 0a01 	add.w	sl, sl, #1
 800e6b2:	9304      	str	r3, [sp, #16]
 800e6b4:	9307      	str	r3, [sp, #28]
 800e6b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e6ba:	931a      	str	r3, [sp, #104]	; 0x68
 800e6bc:	4654      	mov	r4, sl
 800e6be:	2205      	movs	r2, #5
 800e6c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6c4:	4850      	ldr	r0, [pc, #320]	; (800e808 <_svfiprintf_r+0x1e8>)
 800e6c6:	f7f1 fdb3 	bl	8000230 <memchr>
 800e6ca:	9a04      	ldr	r2, [sp, #16]
 800e6cc:	b9d8      	cbnz	r0, 800e706 <_svfiprintf_r+0xe6>
 800e6ce:	06d0      	lsls	r0, r2, #27
 800e6d0:	bf44      	itt	mi
 800e6d2:	2320      	movmi	r3, #32
 800e6d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e6d8:	0711      	lsls	r1, r2, #28
 800e6da:	bf44      	itt	mi
 800e6dc:	232b      	movmi	r3, #43	; 0x2b
 800e6de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e6e2:	f89a 3000 	ldrb.w	r3, [sl]
 800e6e6:	2b2a      	cmp	r3, #42	; 0x2a
 800e6e8:	d015      	beq.n	800e716 <_svfiprintf_r+0xf6>
 800e6ea:	9a07      	ldr	r2, [sp, #28]
 800e6ec:	4654      	mov	r4, sl
 800e6ee:	2000      	movs	r0, #0
 800e6f0:	f04f 0c0a 	mov.w	ip, #10
 800e6f4:	4621      	mov	r1, r4
 800e6f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e6fa:	3b30      	subs	r3, #48	; 0x30
 800e6fc:	2b09      	cmp	r3, #9
 800e6fe:	d94d      	bls.n	800e79c <_svfiprintf_r+0x17c>
 800e700:	b1b0      	cbz	r0, 800e730 <_svfiprintf_r+0x110>
 800e702:	9207      	str	r2, [sp, #28]
 800e704:	e014      	b.n	800e730 <_svfiprintf_r+0x110>
 800e706:	eba0 0308 	sub.w	r3, r0, r8
 800e70a:	fa09 f303 	lsl.w	r3, r9, r3
 800e70e:	4313      	orrs	r3, r2
 800e710:	9304      	str	r3, [sp, #16]
 800e712:	46a2      	mov	sl, r4
 800e714:	e7d2      	b.n	800e6bc <_svfiprintf_r+0x9c>
 800e716:	9b03      	ldr	r3, [sp, #12]
 800e718:	1d19      	adds	r1, r3, #4
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	9103      	str	r1, [sp, #12]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	bfbb      	ittet	lt
 800e722:	425b      	neglt	r3, r3
 800e724:	f042 0202 	orrlt.w	r2, r2, #2
 800e728:	9307      	strge	r3, [sp, #28]
 800e72a:	9307      	strlt	r3, [sp, #28]
 800e72c:	bfb8      	it	lt
 800e72e:	9204      	strlt	r2, [sp, #16]
 800e730:	7823      	ldrb	r3, [r4, #0]
 800e732:	2b2e      	cmp	r3, #46	; 0x2e
 800e734:	d10c      	bne.n	800e750 <_svfiprintf_r+0x130>
 800e736:	7863      	ldrb	r3, [r4, #1]
 800e738:	2b2a      	cmp	r3, #42	; 0x2a
 800e73a:	d134      	bne.n	800e7a6 <_svfiprintf_r+0x186>
 800e73c:	9b03      	ldr	r3, [sp, #12]
 800e73e:	1d1a      	adds	r2, r3, #4
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	9203      	str	r2, [sp, #12]
 800e744:	2b00      	cmp	r3, #0
 800e746:	bfb8      	it	lt
 800e748:	f04f 33ff 	movlt.w	r3, #4294967295
 800e74c:	3402      	adds	r4, #2
 800e74e:	9305      	str	r3, [sp, #20]
 800e750:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e818 <_svfiprintf_r+0x1f8>
 800e754:	7821      	ldrb	r1, [r4, #0]
 800e756:	2203      	movs	r2, #3
 800e758:	4650      	mov	r0, sl
 800e75a:	f7f1 fd69 	bl	8000230 <memchr>
 800e75e:	b138      	cbz	r0, 800e770 <_svfiprintf_r+0x150>
 800e760:	9b04      	ldr	r3, [sp, #16]
 800e762:	eba0 000a 	sub.w	r0, r0, sl
 800e766:	2240      	movs	r2, #64	; 0x40
 800e768:	4082      	lsls	r2, r0
 800e76a:	4313      	orrs	r3, r2
 800e76c:	3401      	adds	r4, #1
 800e76e:	9304      	str	r3, [sp, #16]
 800e770:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e774:	4825      	ldr	r0, [pc, #148]	; (800e80c <_svfiprintf_r+0x1ec>)
 800e776:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e77a:	2206      	movs	r2, #6
 800e77c:	f7f1 fd58 	bl	8000230 <memchr>
 800e780:	2800      	cmp	r0, #0
 800e782:	d038      	beq.n	800e7f6 <_svfiprintf_r+0x1d6>
 800e784:	4b22      	ldr	r3, [pc, #136]	; (800e810 <_svfiprintf_r+0x1f0>)
 800e786:	bb1b      	cbnz	r3, 800e7d0 <_svfiprintf_r+0x1b0>
 800e788:	9b03      	ldr	r3, [sp, #12]
 800e78a:	3307      	adds	r3, #7
 800e78c:	f023 0307 	bic.w	r3, r3, #7
 800e790:	3308      	adds	r3, #8
 800e792:	9303      	str	r3, [sp, #12]
 800e794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e796:	4433      	add	r3, r6
 800e798:	9309      	str	r3, [sp, #36]	; 0x24
 800e79a:	e768      	b.n	800e66e <_svfiprintf_r+0x4e>
 800e79c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e7a0:	460c      	mov	r4, r1
 800e7a2:	2001      	movs	r0, #1
 800e7a4:	e7a6      	b.n	800e6f4 <_svfiprintf_r+0xd4>
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	3401      	adds	r4, #1
 800e7aa:	9305      	str	r3, [sp, #20]
 800e7ac:	4619      	mov	r1, r3
 800e7ae:	f04f 0c0a 	mov.w	ip, #10
 800e7b2:	4620      	mov	r0, r4
 800e7b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e7b8:	3a30      	subs	r2, #48	; 0x30
 800e7ba:	2a09      	cmp	r2, #9
 800e7bc:	d903      	bls.n	800e7c6 <_svfiprintf_r+0x1a6>
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d0c6      	beq.n	800e750 <_svfiprintf_r+0x130>
 800e7c2:	9105      	str	r1, [sp, #20]
 800e7c4:	e7c4      	b.n	800e750 <_svfiprintf_r+0x130>
 800e7c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800e7ca:	4604      	mov	r4, r0
 800e7cc:	2301      	movs	r3, #1
 800e7ce:	e7f0      	b.n	800e7b2 <_svfiprintf_r+0x192>
 800e7d0:	ab03      	add	r3, sp, #12
 800e7d2:	9300      	str	r3, [sp, #0]
 800e7d4:	462a      	mov	r2, r5
 800e7d6:	4b0f      	ldr	r3, [pc, #60]	; (800e814 <_svfiprintf_r+0x1f4>)
 800e7d8:	a904      	add	r1, sp, #16
 800e7da:	4638      	mov	r0, r7
 800e7dc:	f7fd feb6 	bl	800c54c <_printf_float>
 800e7e0:	1c42      	adds	r2, r0, #1
 800e7e2:	4606      	mov	r6, r0
 800e7e4:	d1d6      	bne.n	800e794 <_svfiprintf_r+0x174>
 800e7e6:	89ab      	ldrh	r3, [r5, #12]
 800e7e8:	065b      	lsls	r3, r3, #25
 800e7ea:	f53f af2d 	bmi.w	800e648 <_svfiprintf_r+0x28>
 800e7ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e7f0:	b01d      	add	sp, #116	; 0x74
 800e7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7f6:	ab03      	add	r3, sp, #12
 800e7f8:	9300      	str	r3, [sp, #0]
 800e7fa:	462a      	mov	r2, r5
 800e7fc:	4b05      	ldr	r3, [pc, #20]	; (800e814 <_svfiprintf_r+0x1f4>)
 800e7fe:	a904      	add	r1, sp, #16
 800e800:	4638      	mov	r0, r7
 800e802:	f7fe f947 	bl	800ca94 <_printf_i>
 800e806:	e7eb      	b.n	800e7e0 <_svfiprintf_r+0x1c0>
 800e808:	0800fac4 	.word	0x0800fac4
 800e80c:	0800face 	.word	0x0800face
 800e810:	0800c54d 	.word	0x0800c54d
 800e814:	0800e56d 	.word	0x0800e56d
 800e818:	0800faca 	.word	0x0800faca

0800e81c <__sflush_r>:
 800e81c:	898a      	ldrh	r2, [r1, #12]
 800e81e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e822:	4605      	mov	r5, r0
 800e824:	0710      	lsls	r0, r2, #28
 800e826:	460c      	mov	r4, r1
 800e828:	d458      	bmi.n	800e8dc <__sflush_r+0xc0>
 800e82a:	684b      	ldr	r3, [r1, #4]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	dc05      	bgt.n	800e83c <__sflush_r+0x20>
 800e830:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e832:	2b00      	cmp	r3, #0
 800e834:	dc02      	bgt.n	800e83c <__sflush_r+0x20>
 800e836:	2000      	movs	r0, #0
 800e838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e83c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e83e:	2e00      	cmp	r6, #0
 800e840:	d0f9      	beq.n	800e836 <__sflush_r+0x1a>
 800e842:	2300      	movs	r3, #0
 800e844:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e848:	682f      	ldr	r7, [r5, #0]
 800e84a:	6a21      	ldr	r1, [r4, #32]
 800e84c:	602b      	str	r3, [r5, #0]
 800e84e:	d032      	beq.n	800e8b6 <__sflush_r+0x9a>
 800e850:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e852:	89a3      	ldrh	r3, [r4, #12]
 800e854:	075a      	lsls	r2, r3, #29
 800e856:	d505      	bpl.n	800e864 <__sflush_r+0x48>
 800e858:	6863      	ldr	r3, [r4, #4]
 800e85a:	1ac0      	subs	r0, r0, r3
 800e85c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e85e:	b10b      	cbz	r3, 800e864 <__sflush_r+0x48>
 800e860:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e862:	1ac0      	subs	r0, r0, r3
 800e864:	2300      	movs	r3, #0
 800e866:	4602      	mov	r2, r0
 800e868:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e86a:	6a21      	ldr	r1, [r4, #32]
 800e86c:	4628      	mov	r0, r5
 800e86e:	47b0      	blx	r6
 800e870:	1c43      	adds	r3, r0, #1
 800e872:	89a3      	ldrh	r3, [r4, #12]
 800e874:	d106      	bne.n	800e884 <__sflush_r+0x68>
 800e876:	6829      	ldr	r1, [r5, #0]
 800e878:	291d      	cmp	r1, #29
 800e87a:	d82b      	bhi.n	800e8d4 <__sflush_r+0xb8>
 800e87c:	4a29      	ldr	r2, [pc, #164]	; (800e924 <__sflush_r+0x108>)
 800e87e:	410a      	asrs	r2, r1
 800e880:	07d6      	lsls	r6, r2, #31
 800e882:	d427      	bmi.n	800e8d4 <__sflush_r+0xb8>
 800e884:	2200      	movs	r2, #0
 800e886:	6062      	str	r2, [r4, #4]
 800e888:	04d9      	lsls	r1, r3, #19
 800e88a:	6922      	ldr	r2, [r4, #16]
 800e88c:	6022      	str	r2, [r4, #0]
 800e88e:	d504      	bpl.n	800e89a <__sflush_r+0x7e>
 800e890:	1c42      	adds	r2, r0, #1
 800e892:	d101      	bne.n	800e898 <__sflush_r+0x7c>
 800e894:	682b      	ldr	r3, [r5, #0]
 800e896:	b903      	cbnz	r3, 800e89a <__sflush_r+0x7e>
 800e898:	6560      	str	r0, [r4, #84]	; 0x54
 800e89a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e89c:	602f      	str	r7, [r5, #0]
 800e89e:	2900      	cmp	r1, #0
 800e8a0:	d0c9      	beq.n	800e836 <__sflush_r+0x1a>
 800e8a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e8a6:	4299      	cmp	r1, r3
 800e8a8:	d002      	beq.n	800e8b0 <__sflush_r+0x94>
 800e8aa:	4628      	mov	r0, r5
 800e8ac:	f7ff fa96 	bl	800dddc <_free_r>
 800e8b0:	2000      	movs	r0, #0
 800e8b2:	6360      	str	r0, [r4, #52]	; 0x34
 800e8b4:	e7c0      	b.n	800e838 <__sflush_r+0x1c>
 800e8b6:	2301      	movs	r3, #1
 800e8b8:	4628      	mov	r0, r5
 800e8ba:	47b0      	blx	r6
 800e8bc:	1c41      	adds	r1, r0, #1
 800e8be:	d1c8      	bne.n	800e852 <__sflush_r+0x36>
 800e8c0:	682b      	ldr	r3, [r5, #0]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d0c5      	beq.n	800e852 <__sflush_r+0x36>
 800e8c6:	2b1d      	cmp	r3, #29
 800e8c8:	d001      	beq.n	800e8ce <__sflush_r+0xb2>
 800e8ca:	2b16      	cmp	r3, #22
 800e8cc:	d101      	bne.n	800e8d2 <__sflush_r+0xb6>
 800e8ce:	602f      	str	r7, [r5, #0]
 800e8d0:	e7b1      	b.n	800e836 <__sflush_r+0x1a>
 800e8d2:	89a3      	ldrh	r3, [r4, #12]
 800e8d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8d8:	81a3      	strh	r3, [r4, #12]
 800e8da:	e7ad      	b.n	800e838 <__sflush_r+0x1c>
 800e8dc:	690f      	ldr	r7, [r1, #16]
 800e8de:	2f00      	cmp	r7, #0
 800e8e0:	d0a9      	beq.n	800e836 <__sflush_r+0x1a>
 800e8e2:	0793      	lsls	r3, r2, #30
 800e8e4:	680e      	ldr	r6, [r1, #0]
 800e8e6:	bf08      	it	eq
 800e8e8:	694b      	ldreq	r3, [r1, #20]
 800e8ea:	600f      	str	r7, [r1, #0]
 800e8ec:	bf18      	it	ne
 800e8ee:	2300      	movne	r3, #0
 800e8f0:	eba6 0807 	sub.w	r8, r6, r7
 800e8f4:	608b      	str	r3, [r1, #8]
 800e8f6:	f1b8 0f00 	cmp.w	r8, #0
 800e8fa:	dd9c      	ble.n	800e836 <__sflush_r+0x1a>
 800e8fc:	6a21      	ldr	r1, [r4, #32]
 800e8fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e900:	4643      	mov	r3, r8
 800e902:	463a      	mov	r2, r7
 800e904:	4628      	mov	r0, r5
 800e906:	47b0      	blx	r6
 800e908:	2800      	cmp	r0, #0
 800e90a:	dc06      	bgt.n	800e91a <__sflush_r+0xfe>
 800e90c:	89a3      	ldrh	r3, [r4, #12]
 800e90e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e912:	81a3      	strh	r3, [r4, #12]
 800e914:	f04f 30ff 	mov.w	r0, #4294967295
 800e918:	e78e      	b.n	800e838 <__sflush_r+0x1c>
 800e91a:	4407      	add	r7, r0
 800e91c:	eba8 0800 	sub.w	r8, r8, r0
 800e920:	e7e9      	b.n	800e8f6 <__sflush_r+0xda>
 800e922:	bf00      	nop
 800e924:	dfbffffe 	.word	0xdfbffffe

0800e928 <_fflush_r>:
 800e928:	b538      	push	{r3, r4, r5, lr}
 800e92a:	690b      	ldr	r3, [r1, #16]
 800e92c:	4605      	mov	r5, r0
 800e92e:	460c      	mov	r4, r1
 800e930:	b913      	cbnz	r3, 800e938 <_fflush_r+0x10>
 800e932:	2500      	movs	r5, #0
 800e934:	4628      	mov	r0, r5
 800e936:	bd38      	pop	{r3, r4, r5, pc}
 800e938:	b118      	cbz	r0, 800e942 <_fflush_r+0x1a>
 800e93a:	6a03      	ldr	r3, [r0, #32]
 800e93c:	b90b      	cbnz	r3, 800e942 <_fflush_r+0x1a>
 800e93e:	f7fe fa57 	bl	800cdf0 <__sinit>
 800e942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d0f3      	beq.n	800e932 <_fflush_r+0xa>
 800e94a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e94c:	07d0      	lsls	r0, r2, #31
 800e94e:	d404      	bmi.n	800e95a <_fflush_r+0x32>
 800e950:	0599      	lsls	r1, r3, #22
 800e952:	d402      	bmi.n	800e95a <_fflush_r+0x32>
 800e954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e956:	f7fe fbb6 	bl	800d0c6 <__retarget_lock_acquire_recursive>
 800e95a:	4628      	mov	r0, r5
 800e95c:	4621      	mov	r1, r4
 800e95e:	f7ff ff5d 	bl	800e81c <__sflush_r>
 800e962:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e964:	07da      	lsls	r2, r3, #31
 800e966:	4605      	mov	r5, r0
 800e968:	d4e4      	bmi.n	800e934 <_fflush_r+0xc>
 800e96a:	89a3      	ldrh	r3, [r4, #12]
 800e96c:	059b      	lsls	r3, r3, #22
 800e96e:	d4e1      	bmi.n	800e934 <_fflush_r+0xc>
 800e970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e972:	f7fe fba9 	bl	800d0c8 <__retarget_lock_release_recursive>
 800e976:	e7dd      	b.n	800e934 <_fflush_r+0xc>

0800e978 <memmove>:
 800e978:	4288      	cmp	r0, r1
 800e97a:	b510      	push	{r4, lr}
 800e97c:	eb01 0402 	add.w	r4, r1, r2
 800e980:	d902      	bls.n	800e988 <memmove+0x10>
 800e982:	4284      	cmp	r4, r0
 800e984:	4623      	mov	r3, r4
 800e986:	d807      	bhi.n	800e998 <memmove+0x20>
 800e988:	1e43      	subs	r3, r0, #1
 800e98a:	42a1      	cmp	r1, r4
 800e98c:	d008      	beq.n	800e9a0 <memmove+0x28>
 800e98e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e992:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e996:	e7f8      	b.n	800e98a <memmove+0x12>
 800e998:	4402      	add	r2, r0
 800e99a:	4601      	mov	r1, r0
 800e99c:	428a      	cmp	r2, r1
 800e99e:	d100      	bne.n	800e9a2 <memmove+0x2a>
 800e9a0:	bd10      	pop	{r4, pc}
 800e9a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e9a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e9aa:	e7f7      	b.n	800e99c <memmove+0x24>

0800e9ac <__assert_func>:
 800e9ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e9ae:	4614      	mov	r4, r2
 800e9b0:	461a      	mov	r2, r3
 800e9b2:	4b09      	ldr	r3, [pc, #36]	; (800e9d8 <__assert_func+0x2c>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	4605      	mov	r5, r0
 800e9b8:	68d8      	ldr	r0, [r3, #12]
 800e9ba:	b14c      	cbz	r4, 800e9d0 <__assert_func+0x24>
 800e9bc:	4b07      	ldr	r3, [pc, #28]	; (800e9dc <__assert_func+0x30>)
 800e9be:	9100      	str	r1, [sp, #0]
 800e9c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e9c4:	4906      	ldr	r1, [pc, #24]	; (800e9e0 <__assert_func+0x34>)
 800e9c6:	462b      	mov	r3, r5
 800e9c8:	f000 f872 	bl	800eab0 <fiprintf>
 800e9cc:	f7fd fc5a 	bl	800c284 <abort>
 800e9d0:	4b04      	ldr	r3, [pc, #16]	; (800e9e4 <__assert_func+0x38>)
 800e9d2:	461c      	mov	r4, r3
 800e9d4:	e7f3      	b.n	800e9be <__assert_func+0x12>
 800e9d6:	bf00      	nop
 800e9d8:	20000114 	.word	0x20000114
 800e9dc:	0800fadf 	.word	0x0800fadf
 800e9e0:	0800faec 	.word	0x0800faec
 800e9e4:	0800fb1a 	.word	0x0800fb1a

0800e9e8 <_calloc_r>:
 800e9e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e9ea:	fba1 2402 	umull	r2, r4, r1, r2
 800e9ee:	b94c      	cbnz	r4, 800ea04 <_calloc_r+0x1c>
 800e9f0:	4611      	mov	r1, r2
 800e9f2:	9201      	str	r2, [sp, #4]
 800e9f4:	f7fd fc7e 	bl	800c2f4 <_malloc_r>
 800e9f8:	9a01      	ldr	r2, [sp, #4]
 800e9fa:	4605      	mov	r5, r0
 800e9fc:	b930      	cbnz	r0, 800ea0c <_calloc_r+0x24>
 800e9fe:	4628      	mov	r0, r5
 800ea00:	b003      	add	sp, #12
 800ea02:	bd30      	pop	{r4, r5, pc}
 800ea04:	220c      	movs	r2, #12
 800ea06:	6002      	str	r2, [r0, #0]
 800ea08:	2500      	movs	r5, #0
 800ea0a:	e7f8      	b.n	800e9fe <_calloc_r+0x16>
 800ea0c:	4621      	mov	r1, r4
 800ea0e:	f7fe fa88 	bl	800cf22 <memset>
 800ea12:	e7f4      	b.n	800e9fe <_calloc_r+0x16>

0800ea14 <__ascii_mbtowc>:
 800ea14:	b082      	sub	sp, #8
 800ea16:	b901      	cbnz	r1, 800ea1a <__ascii_mbtowc+0x6>
 800ea18:	a901      	add	r1, sp, #4
 800ea1a:	b142      	cbz	r2, 800ea2e <__ascii_mbtowc+0x1a>
 800ea1c:	b14b      	cbz	r3, 800ea32 <__ascii_mbtowc+0x1e>
 800ea1e:	7813      	ldrb	r3, [r2, #0]
 800ea20:	600b      	str	r3, [r1, #0]
 800ea22:	7812      	ldrb	r2, [r2, #0]
 800ea24:	1e10      	subs	r0, r2, #0
 800ea26:	bf18      	it	ne
 800ea28:	2001      	movne	r0, #1
 800ea2a:	b002      	add	sp, #8
 800ea2c:	4770      	bx	lr
 800ea2e:	4610      	mov	r0, r2
 800ea30:	e7fb      	b.n	800ea2a <__ascii_mbtowc+0x16>
 800ea32:	f06f 0001 	mvn.w	r0, #1
 800ea36:	e7f8      	b.n	800ea2a <__ascii_mbtowc+0x16>

0800ea38 <_realloc_r>:
 800ea38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea3c:	4680      	mov	r8, r0
 800ea3e:	4614      	mov	r4, r2
 800ea40:	460e      	mov	r6, r1
 800ea42:	b921      	cbnz	r1, 800ea4e <_realloc_r+0x16>
 800ea44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea48:	4611      	mov	r1, r2
 800ea4a:	f7fd bc53 	b.w	800c2f4 <_malloc_r>
 800ea4e:	b92a      	cbnz	r2, 800ea5c <_realloc_r+0x24>
 800ea50:	f7ff f9c4 	bl	800dddc <_free_r>
 800ea54:	4625      	mov	r5, r4
 800ea56:	4628      	mov	r0, r5
 800ea58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea5c:	f000 f83a 	bl	800ead4 <_malloc_usable_size_r>
 800ea60:	4284      	cmp	r4, r0
 800ea62:	4607      	mov	r7, r0
 800ea64:	d802      	bhi.n	800ea6c <_realloc_r+0x34>
 800ea66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ea6a:	d812      	bhi.n	800ea92 <_realloc_r+0x5a>
 800ea6c:	4621      	mov	r1, r4
 800ea6e:	4640      	mov	r0, r8
 800ea70:	f7fd fc40 	bl	800c2f4 <_malloc_r>
 800ea74:	4605      	mov	r5, r0
 800ea76:	2800      	cmp	r0, #0
 800ea78:	d0ed      	beq.n	800ea56 <_realloc_r+0x1e>
 800ea7a:	42bc      	cmp	r4, r7
 800ea7c:	4622      	mov	r2, r4
 800ea7e:	4631      	mov	r1, r6
 800ea80:	bf28      	it	cs
 800ea82:	463a      	movcs	r2, r7
 800ea84:	f7fe fb21 	bl	800d0ca <memcpy>
 800ea88:	4631      	mov	r1, r6
 800ea8a:	4640      	mov	r0, r8
 800ea8c:	f7ff f9a6 	bl	800dddc <_free_r>
 800ea90:	e7e1      	b.n	800ea56 <_realloc_r+0x1e>
 800ea92:	4635      	mov	r5, r6
 800ea94:	e7df      	b.n	800ea56 <_realloc_r+0x1e>

0800ea96 <__ascii_wctomb>:
 800ea96:	b149      	cbz	r1, 800eaac <__ascii_wctomb+0x16>
 800ea98:	2aff      	cmp	r2, #255	; 0xff
 800ea9a:	bf85      	ittet	hi
 800ea9c:	238a      	movhi	r3, #138	; 0x8a
 800ea9e:	6003      	strhi	r3, [r0, #0]
 800eaa0:	700a      	strbls	r2, [r1, #0]
 800eaa2:	f04f 30ff 	movhi.w	r0, #4294967295
 800eaa6:	bf98      	it	ls
 800eaa8:	2001      	movls	r0, #1
 800eaaa:	4770      	bx	lr
 800eaac:	4608      	mov	r0, r1
 800eaae:	4770      	bx	lr

0800eab0 <fiprintf>:
 800eab0:	b40e      	push	{r1, r2, r3}
 800eab2:	b503      	push	{r0, r1, lr}
 800eab4:	4601      	mov	r1, r0
 800eab6:	ab03      	add	r3, sp, #12
 800eab8:	4805      	ldr	r0, [pc, #20]	; (800ead0 <fiprintf+0x20>)
 800eaba:	f853 2b04 	ldr.w	r2, [r3], #4
 800eabe:	6800      	ldr	r0, [r0, #0]
 800eac0:	9301      	str	r3, [sp, #4]
 800eac2:	f000 f839 	bl	800eb38 <_vfiprintf_r>
 800eac6:	b002      	add	sp, #8
 800eac8:	f85d eb04 	ldr.w	lr, [sp], #4
 800eacc:	b003      	add	sp, #12
 800eace:	4770      	bx	lr
 800ead0:	20000114 	.word	0x20000114

0800ead4 <_malloc_usable_size_r>:
 800ead4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ead8:	1f18      	subs	r0, r3, #4
 800eada:	2b00      	cmp	r3, #0
 800eadc:	bfbc      	itt	lt
 800eade:	580b      	ldrlt	r3, [r1, r0]
 800eae0:	18c0      	addlt	r0, r0, r3
 800eae2:	4770      	bx	lr

0800eae4 <__sfputc_r>:
 800eae4:	6893      	ldr	r3, [r2, #8]
 800eae6:	3b01      	subs	r3, #1
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	b410      	push	{r4}
 800eaec:	6093      	str	r3, [r2, #8]
 800eaee:	da08      	bge.n	800eb02 <__sfputc_r+0x1e>
 800eaf0:	6994      	ldr	r4, [r2, #24]
 800eaf2:	42a3      	cmp	r3, r4
 800eaf4:	db01      	blt.n	800eafa <__sfputc_r+0x16>
 800eaf6:	290a      	cmp	r1, #10
 800eaf8:	d103      	bne.n	800eb02 <__sfputc_r+0x1e>
 800eafa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eafe:	f000 b935 	b.w	800ed6c <__swbuf_r>
 800eb02:	6813      	ldr	r3, [r2, #0]
 800eb04:	1c58      	adds	r0, r3, #1
 800eb06:	6010      	str	r0, [r2, #0]
 800eb08:	7019      	strb	r1, [r3, #0]
 800eb0a:	4608      	mov	r0, r1
 800eb0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb10:	4770      	bx	lr

0800eb12 <__sfputs_r>:
 800eb12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb14:	4606      	mov	r6, r0
 800eb16:	460f      	mov	r7, r1
 800eb18:	4614      	mov	r4, r2
 800eb1a:	18d5      	adds	r5, r2, r3
 800eb1c:	42ac      	cmp	r4, r5
 800eb1e:	d101      	bne.n	800eb24 <__sfputs_r+0x12>
 800eb20:	2000      	movs	r0, #0
 800eb22:	e007      	b.n	800eb34 <__sfputs_r+0x22>
 800eb24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb28:	463a      	mov	r2, r7
 800eb2a:	4630      	mov	r0, r6
 800eb2c:	f7ff ffda 	bl	800eae4 <__sfputc_r>
 800eb30:	1c43      	adds	r3, r0, #1
 800eb32:	d1f3      	bne.n	800eb1c <__sfputs_r+0xa>
 800eb34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eb38 <_vfiprintf_r>:
 800eb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb3c:	460d      	mov	r5, r1
 800eb3e:	b09d      	sub	sp, #116	; 0x74
 800eb40:	4614      	mov	r4, r2
 800eb42:	4698      	mov	r8, r3
 800eb44:	4606      	mov	r6, r0
 800eb46:	b118      	cbz	r0, 800eb50 <_vfiprintf_r+0x18>
 800eb48:	6a03      	ldr	r3, [r0, #32]
 800eb4a:	b90b      	cbnz	r3, 800eb50 <_vfiprintf_r+0x18>
 800eb4c:	f7fe f950 	bl	800cdf0 <__sinit>
 800eb50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb52:	07d9      	lsls	r1, r3, #31
 800eb54:	d405      	bmi.n	800eb62 <_vfiprintf_r+0x2a>
 800eb56:	89ab      	ldrh	r3, [r5, #12]
 800eb58:	059a      	lsls	r2, r3, #22
 800eb5a:	d402      	bmi.n	800eb62 <_vfiprintf_r+0x2a>
 800eb5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb5e:	f7fe fab2 	bl	800d0c6 <__retarget_lock_acquire_recursive>
 800eb62:	89ab      	ldrh	r3, [r5, #12]
 800eb64:	071b      	lsls	r3, r3, #28
 800eb66:	d501      	bpl.n	800eb6c <_vfiprintf_r+0x34>
 800eb68:	692b      	ldr	r3, [r5, #16]
 800eb6a:	b99b      	cbnz	r3, 800eb94 <_vfiprintf_r+0x5c>
 800eb6c:	4629      	mov	r1, r5
 800eb6e:	4630      	mov	r0, r6
 800eb70:	f000 f93a 	bl	800ede8 <__swsetup_r>
 800eb74:	b170      	cbz	r0, 800eb94 <_vfiprintf_r+0x5c>
 800eb76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb78:	07dc      	lsls	r4, r3, #31
 800eb7a:	d504      	bpl.n	800eb86 <_vfiprintf_r+0x4e>
 800eb7c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb80:	b01d      	add	sp, #116	; 0x74
 800eb82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb86:	89ab      	ldrh	r3, [r5, #12]
 800eb88:	0598      	lsls	r0, r3, #22
 800eb8a:	d4f7      	bmi.n	800eb7c <_vfiprintf_r+0x44>
 800eb8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb8e:	f7fe fa9b 	bl	800d0c8 <__retarget_lock_release_recursive>
 800eb92:	e7f3      	b.n	800eb7c <_vfiprintf_r+0x44>
 800eb94:	2300      	movs	r3, #0
 800eb96:	9309      	str	r3, [sp, #36]	; 0x24
 800eb98:	2320      	movs	r3, #32
 800eb9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eb9e:	f8cd 800c 	str.w	r8, [sp, #12]
 800eba2:	2330      	movs	r3, #48	; 0x30
 800eba4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ed58 <_vfiprintf_r+0x220>
 800eba8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ebac:	f04f 0901 	mov.w	r9, #1
 800ebb0:	4623      	mov	r3, r4
 800ebb2:	469a      	mov	sl, r3
 800ebb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebb8:	b10a      	cbz	r2, 800ebbe <_vfiprintf_r+0x86>
 800ebba:	2a25      	cmp	r2, #37	; 0x25
 800ebbc:	d1f9      	bne.n	800ebb2 <_vfiprintf_r+0x7a>
 800ebbe:	ebba 0b04 	subs.w	fp, sl, r4
 800ebc2:	d00b      	beq.n	800ebdc <_vfiprintf_r+0xa4>
 800ebc4:	465b      	mov	r3, fp
 800ebc6:	4622      	mov	r2, r4
 800ebc8:	4629      	mov	r1, r5
 800ebca:	4630      	mov	r0, r6
 800ebcc:	f7ff ffa1 	bl	800eb12 <__sfputs_r>
 800ebd0:	3001      	adds	r0, #1
 800ebd2:	f000 80a9 	beq.w	800ed28 <_vfiprintf_r+0x1f0>
 800ebd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ebd8:	445a      	add	r2, fp
 800ebda:	9209      	str	r2, [sp, #36]	; 0x24
 800ebdc:	f89a 3000 	ldrb.w	r3, [sl]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	f000 80a1 	beq.w	800ed28 <_vfiprintf_r+0x1f0>
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	f04f 32ff 	mov.w	r2, #4294967295
 800ebec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ebf0:	f10a 0a01 	add.w	sl, sl, #1
 800ebf4:	9304      	str	r3, [sp, #16]
 800ebf6:	9307      	str	r3, [sp, #28]
 800ebf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ebfc:	931a      	str	r3, [sp, #104]	; 0x68
 800ebfe:	4654      	mov	r4, sl
 800ec00:	2205      	movs	r2, #5
 800ec02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec06:	4854      	ldr	r0, [pc, #336]	; (800ed58 <_vfiprintf_r+0x220>)
 800ec08:	f7f1 fb12 	bl	8000230 <memchr>
 800ec0c:	9a04      	ldr	r2, [sp, #16]
 800ec0e:	b9d8      	cbnz	r0, 800ec48 <_vfiprintf_r+0x110>
 800ec10:	06d1      	lsls	r1, r2, #27
 800ec12:	bf44      	itt	mi
 800ec14:	2320      	movmi	r3, #32
 800ec16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec1a:	0713      	lsls	r3, r2, #28
 800ec1c:	bf44      	itt	mi
 800ec1e:	232b      	movmi	r3, #43	; 0x2b
 800ec20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec24:	f89a 3000 	ldrb.w	r3, [sl]
 800ec28:	2b2a      	cmp	r3, #42	; 0x2a
 800ec2a:	d015      	beq.n	800ec58 <_vfiprintf_r+0x120>
 800ec2c:	9a07      	ldr	r2, [sp, #28]
 800ec2e:	4654      	mov	r4, sl
 800ec30:	2000      	movs	r0, #0
 800ec32:	f04f 0c0a 	mov.w	ip, #10
 800ec36:	4621      	mov	r1, r4
 800ec38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec3c:	3b30      	subs	r3, #48	; 0x30
 800ec3e:	2b09      	cmp	r3, #9
 800ec40:	d94d      	bls.n	800ecde <_vfiprintf_r+0x1a6>
 800ec42:	b1b0      	cbz	r0, 800ec72 <_vfiprintf_r+0x13a>
 800ec44:	9207      	str	r2, [sp, #28]
 800ec46:	e014      	b.n	800ec72 <_vfiprintf_r+0x13a>
 800ec48:	eba0 0308 	sub.w	r3, r0, r8
 800ec4c:	fa09 f303 	lsl.w	r3, r9, r3
 800ec50:	4313      	orrs	r3, r2
 800ec52:	9304      	str	r3, [sp, #16]
 800ec54:	46a2      	mov	sl, r4
 800ec56:	e7d2      	b.n	800ebfe <_vfiprintf_r+0xc6>
 800ec58:	9b03      	ldr	r3, [sp, #12]
 800ec5a:	1d19      	adds	r1, r3, #4
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	9103      	str	r1, [sp, #12]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	bfbb      	ittet	lt
 800ec64:	425b      	neglt	r3, r3
 800ec66:	f042 0202 	orrlt.w	r2, r2, #2
 800ec6a:	9307      	strge	r3, [sp, #28]
 800ec6c:	9307      	strlt	r3, [sp, #28]
 800ec6e:	bfb8      	it	lt
 800ec70:	9204      	strlt	r2, [sp, #16]
 800ec72:	7823      	ldrb	r3, [r4, #0]
 800ec74:	2b2e      	cmp	r3, #46	; 0x2e
 800ec76:	d10c      	bne.n	800ec92 <_vfiprintf_r+0x15a>
 800ec78:	7863      	ldrb	r3, [r4, #1]
 800ec7a:	2b2a      	cmp	r3, #42	; 0x2a
 800ec7c:	d134      	bne.n	800ece8 <_vfiprintf_r+0x1b0>
 800ec7e:	9b03      	ldr	r3, [sp, #12]
 800ec80:	1d1a      	adds	r2, r3, #4
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	9203      	str	r2, [sp, #12]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	bfb8      	it	lt
 800ec8a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ec8e:	3402      	adds	r4, #2
 800ec90:	9305      	str	r3, [sp, #20]
 800ec92:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ed68 <_vfiprintf_r+0x230>
 800ec96:	7821      	ldrb	r1, [r4, #0]
 800ec98:	2203      	movs	r2, #3
 800ec9a:	4650      	mov	r0, sl
 800ec9c:	f7f1 fac8 	bl	8000230 <memchr>
 800eca0:	b138      	cbz	r0, 800ecb2 <_vfiprintf_r+0x17a>
 800eca2:	9b04      	ldr	r3, [sp, #16]
 800eca4:	eba0 000a 	sub.w	r0, r0, sl
 800eca8:	2240      	movs	r2, #64	; 0x40
 800ecaa:	4082      	lsls	r2, r0
 800ecac:	4313      	orrs	r3, r2
 800ecae:	3401      	adds	r4, #1
 800ecb0:	9304      	str	r3, [sp, #16]
 800ecb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecb6:	4829      	ldr	r0, [pc, #164]	; (800ed5c <_vfiprintf_r+0x224>)
 800ecb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ecbc:	2206      	movs	r2, #6
 800ecbe:	f7f1 fab7 	bl	8000230 <memchr>
 800ecc2:	2800      	cmp	r0, #0
 800ecc4:	d03f      	beq.n	800ed46 <_vfiprintf_r+0x20e>
 800ecc6:	4b26      	ldr	r3, [pc, #152]	; (800ed60 <_vfiprintf_r+0x228>)
 800ecc8:	bb1b      	cbnz	r3, 800ed12 <_vfiprintf_r+0x1da>
 800ecca:	9b03      	ldr	r3, [sp, #12]
 800eccc:	3307      	adds	r3, #7
 800ecce:	f023 0307 	bic.w	r3, r3, #7
 800ecd2:	3308      	adds	r3, #8
 800ecd4:	9303      	str	r3, [sp, #12]
 800ecd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecd8:	443b      	add	r3, r7
 800ecda:	9309      	str	r3, [sp, #36]	; 0x24
 800ecdc:	e768      	b.n	800ebb0 <_vfiprintf_r+0x78>
 800ecde:	fb0c 3202 	mla	r2, ip, r2, r3
 800ece2:	460c      	mov	r4, r1
 800ece4:	2001      	movs	r0, #1
 800ece6:	e7a6      	b.n	800ec36 <_vfiprintf_r+0xfe>
 800ece8:	2300      	movs	r3, #0
 800ecea:	3401      	adds	r4, #1
 800ecec:	9305      	str	r3, [sp, #20]
 800ecee:	4619      	mov	r1, r3
 800ecf0:	f04f 0c0a 	mov.w	ip, #10
 800ecf4:	4620      	mov	r0, r4
 800ecf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ecfa:	3a30      	subs	r2, #48	; 0x30
 800ecfc:	2a09      	cmp	r2, #9
 800ecfe:	d903      	bls.n	800ed08 <_vfiprintf_r+0x1d0>
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d0c6      	beq.n	800ec92 <_vfiprintf_r+0x15a>
 800ed04:	9105      	str	r1, [sp, #20]
 800ed06:	e7c4      	b.n	800ec92 <_vfiprintf_r+0x15a>
 800ed08:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed0c:	4604      	mov	r4, r0
 800ed0e:	2301      	movs	r3, #1
 800ed10:	e7f0      	b.n	800ecf4 <_vfiprintf_r+0x1bc>
 800ed12:	ab03      	add	r3, sp, #12
 800ed14:	9300      	str	r3, [sp, #0]
 800ed16:	462a      	mov	r2, r5
 800ed18:	4b12      	ldr	r3, [pc, #72]	; (800ed64 <_vfiprintf_r+0x22c>)
 800ed1a:	a904      	add	r1, sp, #16
 800ed1c:	4630      	mov	r0, r6
 800ed1e:	f7fd fc15 	bl	800c54c <_printf_float>
 800ed22:	4607      	mov	r7, r0
 800ed24:	1c78      	adds	r0, r7, #1
 800ed26:	d1d6      	bne.n	800ecd6 <_vfiprintf_r+0x19e>
 800ed28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed2a:	07d9      	lsls	r1, r3, #31
 800ed2c:	d405      	bmi.n	800ed3a <_vfiprintf_r+0x202>
 800ed2e:	89ab      	ldrh	r3, [r5, #12]
 800ed30:	059a      	lsls	r2, r3, #22
 800ed32:	d402      	bmi.n	800ed3a <_vfiprintf_r+0x202>
 800ed34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed36:	f7fe f9c7 	bl	800d0c8 <__retarget_lock_release_recursive>
 800ed3a:	89ab      	ldrh	r3, [r5, #12]
 800ed3c:	065b      	lsls	r3, r3, #25
 800ed3e:	f53f af1d 	bmi.w	800eb7c <_vfiprintf_r+0x44>
 800ed42:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed44:	e71c      	b.n	800eb80 <_vfiprintf_r+0x48>
 800ed46:	ab03      	add	r3, sp, #12
 800ed48:	9300      	str	r3, [sp, #0]
 800ed4a:	462a      	mov	r2, r5
 800ed4c:	4b05      	ldr	r3, [pc, #20]	; (800ed64 <_vfiprintf_r+0x22c>)
 800ed4e:	a904      	add	r1, sp, #16
 800ed50:	4630      	mov	r0, r6
 800ed52:	f7fd fe9f 	bl	800ca94 <_printf_i>
 800ed56:	e7e4      	b.n	800ed22 <_vfiprintf_r+0x1ea>
 800ed58:	0800fac4 	.word	0x0800fac4
 800ed5c:	0800face 	.word	0x0800face
 800ed60:	0800c54d 	.word	0x0800c54d
 800ed64:	0800eb13 	.word	0x0800eb13
 800ed68:	0800faca 	.word	0x0800faca

0800ed6c <__swbuf_r>:
 800ed6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed6e:	460e      	mov	r6, r1
 800ed70:	4614      	mov	r4, r2
 800ed72:	4605      	mov	r5, r0
 800ed74:	b118      	cbz	r0, 800ed7e <__swbuf_r+0x12>
 800ed76:	6a03      	ldr	r3, [r0, #32]
 800ed78:	b90b      	cbnz	r3, 800ed7e <__swbuf_r+0x12>
 800ed7a:	f7fe f839 	bl	800cdf0 <__sinit>
 800ed7e:	69a3      	ldr	r3, [r4, #24]
 800ed80:	60a3      	str	r3, [r4, #8]
 800ed82:	89a3      	ldrh	r3, [r4, #12]
 800ed84:	071a      	lsls	r2, r3, #28
 800ed86:	d525      	bpl.n	800edd4 <__swbuf_r+0x68>
 800ed88:	6923      	ldr	r3, [r4, #16]
 800ed8a:	b31b      	cbz	r3, 800edd4 <__swbuf_r+0x68>
 800ed8c:	6823      	ldr	r3, [r4, #0]
 800ed8e:	6922      	ldr	r2, [r4, #16]
 800ed90:	1a98      	subs	r0, r3, r2
 800ed92:	6963      	ldr	r3, [r4, #20]
 800ed94:	b2f6      	uxtb	r6, r6
 800ed96:	4283      	cmp	r3, r0
 800ed98:	4637      	mov	r7, r6
 800ed9a:	dc04      	bgt.n	800eda6 <__swbuf_r+0x3a>
 800ed9c:	4621      	mov	r1, r4
 800ed9e:	4628      	mov	r0, r5
 800eda0:	f7ff fdc2 	bl	800e928 <_fflush_r>
 800eda4:	b9e0      	cbnz	r0, 800ede0 <__swbuf_r+0x74>
 800eda6:	68a3      	ldr	r3, [r4, #8]
 800eda8:	3b01      	subs	r3, #1
 800edaa:	60a3      	str	r3, [r4, #8]
 800edac:	6823      	ldr	r3, [r4, #0]
 800edae:	1c5a      	adds	r2, r3, #1
 800edb0:	6022      	str	r2, [r4, #0]
 800edb2:	701e      	strb	r6, [r3, #0]
 800edb4:	6962      	ldr	r2, [r4, #20]
 800edb6:	1c43      	adds	r3, r0, #1
 800edb8:	429a      	cmp	r2, r3
 800edba:	d004      	beq.n	800edc6 <__swbuf_r+0x5a>
 800edbc:	89a3      	ldrh	r3, [r4, #12]
 800edbe:	07db      	lsls	r3, r3, #31
 800edc0:	d506      	bpl.n	800edd0 <__swbuf_r+0x64>
 800edc2:	2e0a      	cmp	r6, #10
 800edc4:	d104      	bne.n	800edd0 <__swbuf_r+0x64>
 800edc6:	4621      	mov	r1, r4
 800edc8:	4628      	mov	r0, r5
 800edca:	f7ff fdad 	bl	800e928 <_fflush_r>
 800edce:	b938      	cbnz	r0, 800ede0 <__swbuf_r+0x74>
 800edd0:	4638      	mov	r0, r7
 800edd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edd4:	4621      	mov	r1, r4
 800edd6:	4628      	mov	r0, r5
 800edd8:	f000 f806 	bl	800ede8 <__swsetup_r>
 800eddc:	2800      	cmp	r0, #0
 800edde:	d0d5      	beq.n	800ed8c <__swbuf_r+0x20>
 800ede0:	f04f 37ff 	mov.w	r7, #4294967295
 800ede4:	e7f4      	b.n	800edd0 <__swbuf_r+0x64>
	...

0800ede8 <__swsetup_r>:
 800ede8:	b538      	push	{r3, r4, r5, lr}
 800edea:	4b2a      	ldr	r3, [pc, #168]	; (800ee94 <__swsetup_r+0xac>)
 800edec:	4605      	mov	r5, r0
 800edee:	6818      	ldr	r0, [r3, #0]
 800edf0:	460c      	mov	r4, r1
 800edf2:	b118      	cbz	r0, 800edfc <__swsetup_r+0x14>
 800edf4:	6a03      	ldr	r3, [r0, #32]
 800edf6:	b90b      	cbnz	r3, 800edfc <__swsetup_r+0x14>
 800edf8:	f7fd fffa 	bl	800cdf0 <__sinit>
 800edfc:	89a3      	ldrh	r3, [r4, #12]
 800edfe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee02:	0718      	lsls	r0, r3, #28
 800ee04:	d422      	bmi.n	800ee4c <__swsetup_r+0x64>
 800ee06:	06d9      	lsls	r1, r3, #27
 800ee08:	d407      	bmi.n	800ee1a <__swsetup_r+0x32>
 800ee0a:	2309      	movs	r3, #9
 800ee0c:	602b      	str	r3, [r5, #0]
 800ee0e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ee12:	81a3      	strh	r3, [r4, #12]
 800ee14:	f04f 30ff 	mov.w	r0, #4294967295
 800ee18:	e034      	b.n	800ee84 <__swsetup_r+0x9c>
 800ee1a:	0758      	lsls	r0, r3, #29
 800ee1c:	d512      	bpl.n	800ee44 <__swsetup_r+0x5c>
 800ee1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee20:	b141      	cbz	r1, 800ee34 <__swsetup_r+0x4c>
 800ee22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee26:	4299      	cmp	r1, r3
 800ee28:	d002      	beq.n	800ee30 <__swsetup_r+0x48>
 800ee2a:	4628      	mov	r0, r5
 800ee2c:	f7fe ffd6 	bl	800dddc <_free_r>
 800ee30:	2300      	movs	r3, #0
 800ee32:	6363      	str	r3, [r4, #52]	; 0x34
 800ee34:	89a3      	ldrh	r3, [r4, #12]
 800ee36:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ee3a:	81a3      	strh	r3, [r4, #12]
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	6063      	str	r3, [r4, #4]
 800ee40:	6923      	ldr	r3, [r4, #16]
 800ee42:	6023      	str	r3, [r4, #0]
 800ee44:	89a3      	ldrh	r3, [r4, #12]
 800ee46:	f043 0308 	orr.w	r3, r3, #8
 800ee4a:	81a3      	strh	r3, [r4, #12]
 800ee4c:	6923      	ldr	r3, [r4, #16]
 800ee4e:	b94b      	cbnz	r3, 800ee64 <__swsetup_r+0x7c>
 800ee50:	89a3      	ldrh	r3, [r4, #12]
 800ee52:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ee56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee5a:	d003      	beq.n	800ee64 <__swsetup_r+0x7c>
 800ee5c:	4621      	mov	r1, r4
 800ee5e:	4628      	mov	r0, r5
 800ee60:	f000 f840 	bl	800eee4 <__smakebuf_r>
 800ee64:	89a0      	ldrh	r0, [r4, #12]
 800ee66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee6a:	f010 0301 	ands.w	r3, r0, #1
 800ee6e:	d00a      	beq.n	800ee86 <__swsetup_r+0x9e>
 800ee70:	2300      	movs	r3, #0
 800ee72:	60a3      	str	r3, [r4, #8]
 800ee74:	6963      	ldr	r3, [r4, #20]
 800ee76:	425b      	negs	r3, r3
 800ee78:	61a3      	str	r3, [r4, #24]
 800ee7a:	6923      	ldr	r3, [r4, #16]
 800ee7c:	b943      	cbnz	r3, 800ee90 <__swsetup_r+0xa8>
 800ee7e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ee82:	d1c4      	bne.n	800ee0e <__swsetup_r+0x26>
 800ee84:	bd38      	pop	{r3, r4, r5, pc}
 800ee86:	0781      	lsls	r1, r0, #30
 800ee88:	bf58      	it	pl
 800ee8a:	6963      	ldrpl	r3, [r4, #20]
 800ee8c:	60a3      	str	r3, [r4, #8]
 800ee8e:	e7f4      	b.n	800ee7a <__swsetup_r+0x92>
 800ee90:	2000      	movs	r0, #0
 800ee92:	e7f7      	b.n	800ee84 <__swsetup_r+0x9c>
 800ee94:	20000114 	.word	0x20000114

0800ee98 <__swhatbuf_r>:
 800ee98:	b570      	push	{r4, r5, r6, lr}
 800ee9a:	460c      	mov	r4, r1
 800ee9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eea0:	2900      	cmp	r1, #0
 800eea2:	b096      	sub	sp, #88	; 0x58
 800eea4:	4615      	mov	r5, r2
 800eea6:	461e      	mov	r6, r3
 800eea8:	da0d      	bge.n	800eec6 <__swhatbuf_r+0x2e>
 800eeaa:	89a3      	ldrh	r3, [r4, #12]
 800eeac:	f013 0f80 	tst.w	r3, #128	; 0x80
 800eeb0:	f04f 0100 	mov.w	r1, #0
 800eeb4:	bf0c      	ite	eq
 800eeb6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800eeba:	2340      	movne	r3, #64	; 0x40
 800eebc:	2000      	movs	r0, #0
 800eebe:	6031      	str	r1, [r6, #0]
 800eec0:	602b      	str	r3, [r5, #0]
 800eec2:	b016      	add	sp, #88	; 0x58
 800eec4:	bd70      	pop	{r4, r5, r6, pc}
 800eec6:	466a      	mov	r2, sp
 800eec8:	f000 f848 	bl	800ef5c <_fstat_r>
 800eecc:	2800      	cmp	r0, #0
 800eece:	dbec      	blt.n	800eeaa <__swhatbuf_r+0x12>
 800eed0:	9901      	ldr	r1, [sp, #4]
 800eed2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800eed6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800eeda:	4259      	negs	r1, r3
 800eedc:	4159      	adcs	r1, r3
 800eede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eee2:	e7eb      	b.n	800eebc <__swhatbuf_r+0x24>

0800eee4 <__smakebuf_r>:
 800eee4:	898b      	ldrh	r3, [r1, #12]
 800eee6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eee8:	079d      	lsls	r5, r3, #30
 800eeea:	4606      	mov	r6, r0
 800eeec:	460c      	mov	r4, r1
 800eeee:	d507      	bpl.n	800ef00 <__smakebuf_r+0x1c>
 800eef0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eef4:	6023      	str	r3, [r4, #0]
 800eef6:	6123      	str	r3, [r4, #16]
 800eef8:	2301      	movs	r3, #1
 800eefa:	6163      	str	r3, [r4, #20]
 800eefc:	b002      	add	sp, #8
 800eefe:	bd70      	pop	{r4, r5, r6, pc}
 800ef00:	ab01      	add	r3, sp, #4
 800ef02:	466a      	mov	r2, sp
 800ef04:	f7ff ffc8 	bl	800ee98 <__swhatbuf_r>
 800ef08:	9900      	ldr	r1, [sp, #0]
 800ef0a:	4605      	mov	r5, r0
 800ef0c:	4630      	mov	r0, r6
 800ef0e:	f7fd f9f1 	bl	800c2f4 <_malloc_r>
 800ef12:	b948      	cbnz	r0, 800ef28 <__smakebuf_r+0x44>
 800ef14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef18:	059a      	lsls	r2, r3, #22
 800ef1a:	d4ef      	bmi.n	800eefc <__smakebuf_r+0x18>
 800ef1c:	f023 0303 	bic.w	r3, r3, #3
 800ef20:	f043 0302 	orr.w	r3, r3, #2
 800ef24:	81a3      	strh	r3, [r4, #12]
 800ef26:	e7e3      	b.n	800eef0 <__smakebuf_r+0xc>
 800ef28:	89a3      	ldrh	r3, [r4, #12]
 800ef2a:	6020      	str	r0, [r4, #0]
 800ef2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef30:	81a3      	strh	r3, [r4, #12]
 800ef32:	9b00      	ldr	r3, [sp, #0]
 800ef34:	6163      	str	r3, [r4, #20]
 800ef36:	9b01      	ldr	r3, [sp, #4]
 800ef38:	6120      	str	r0, [r4, #16]
 800ef3a:	b15b      	cbz	r3, 800ef54 <__smakebuf_r+0x70>
 800ef3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef40:	4630      	mov	r0, r6
 800ef42:	f000 f81d 	bl	800ef80 <_isatty_r>
 800ef46:	b128      	cbz	r0, 800ef54 <__smakebuf_r+0x70>
 800ef48:	89a3      	ldrh	r3, [r4, #12]
 800ef4a:	f023 0303 	bic.w	r3, r3, #3
 800ef4e:	f043 0301 	orr.w	r3, r3, #1
 800ef52:	81a3      	strh	r3, [r4, #12]
 800ef54:	89a3      	ldrh	r3, [r4, #12]
 800ef56:	431d      	orrs	r5, r3
 800ef58:	81a5      	strh	r5, [r4, #12]
 800ef5a:	e7cf      	b.n	800eefc <__smakebuf_r+0x18>

0800ef5c <_fstat_r>:
 800ef5c:	b538      	push	{r3, r4, r5, lr}
 800ef5e:	4d07      	ldr	r5, [pc, #28]	; (800ef7c <_fstat_r+0x20>)
 800ef60:	2300      	movs	r3, #0
 800ef62:	4604      	mov	r4, r0
 800ef64:	4608      	mov	r0, r1
 800ef66:	4611      	mov	r1, r2
 800ef68:	602b      	str	r3, [r5, #0]
 800ef6a:	f7f8 fd42 	bl	80079f2 <_fstat>
 800ef6e:	1c43      	adds	r3, r0, #1
 800ef70:	d102      	bne.n	800ef78 <_fstat_r+0x1c>
 800ef72:	682b      	ldr	r3, [r5, #0]
 800ef74:	b103      	cbz	r3, 800ef78 <_fstat_r+0x1c>
 800ef76:	6023      	str	r3, [r4, #0]
 800ef78:	bd38      	pop	{r3, r4, r5, pc}
 800ef7a:	bf00      	nop
 800ef7c:	20000614 	.word	0x20000614

0800ef80 <_isatty_r>:
 800ef80:	b538      	push	{r3, r4, r5, lr}
 800ef82:	4d06      	ldr	r5, [pc, #24]	; (800ef9c <_isatty_r+0x1c>)
 800ef84:	2300      	movs	r3, #0
 800ef86:	4604      	mov	r4, r0
 800ef88:	4608      	mov	r0, r1
 800ef8a:	602b      	str	r3, [r5, #0]
 800ef8c:	f7f8 fd41 	bl	8007a12 <_isatty>
 800ef90:	1c43      	adds	r3, r0, #1
 800ef92:	d102      	bne.n	800ef9a <_isatty_r+0x1a>
 800ef94:	682b      	ldr	r3, [r5, #0]
 800ef96:	b103      	cbz	r3, 800ef9a <_isatty_r+0x1a>
 800ef98:	6023      	str	r3, [r4, #0]
 800ef9a:	bd38      	pop	{r3, r4, r5, pc}
 800ef9c:	20000614 	.word	0x20000614

0800efa0 <_init>:
 800efa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efa2:	bf00      	nop
 800efa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efa6:	bc08      	pop	{r3}
 800efa8:	469e      	mov	lr, r3
 800efaa:	4770      	bx	lr

0800efac <_fini>:
 800efac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efae:	bf00      	nop
 800efb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efb2:	bc08      	pop	{r3}
 800efb4:	469e      	mov	lr, r3
 800efb6:	4770      	bx	lr
